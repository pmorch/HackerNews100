<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 07 Apr 2024 10:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Glory is only 11MB/sec away (2023) (178 pts)]]></title>
            <link>https://thmsmlr.com/cheap-infra</link>
            <guid>39957902</guid>
            <pubDate>Sun, 07 Apr 2024 03:20:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thmsmlr.com/cheap-infra">https://thmsmlr.com/cheap-infra</a>, See on <a href="https://news.ycombinator.com/item?id=39957902">Hacker News</a></p>
Couldn't get https://thmsmlr.com/cheap-infra: Error: Request failed with status code 500]]></description>
        </item>
        <item>
            <title><![CDATA[Lago, Open-Source Stripe Alternative, banks $22M in funding (111 pts)]]></title>
            <link>https://techcrunch.com/2024/03/14/lago-a-paris-based-open-source-billing-platform-banks-22m/</link>
            <guid>39957607</guid>
            <pubDate>Sun, 07 Apr 2024 02:19:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2024/03/14/lago-a-paris-based-open-source-billing-platform-banks-22m/">https://techcrunch.com/2024/03/14/lago-a-paris-based-open-source-billing-platform-banks-22m/</a>, See on <a href="https://news.ycombinator.com/item?id=39957607">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p id="speakable-summary">A startup out of Paris that began life building marketing tools has raised $22 million after making a successful pivot into billing — a space it discovered was even more broken among potential customers. <a href="https://www.getlago.com/" target="_blank" rel="noopener">Lago</a>, developer of an open source billing platform, has picked up the funding across two rounds of funding it’s revealing to coincide with its official launch.</p>
<p>It’s launching today, but it has been in business in closed beta for some time, during which it’s picked up a number of notable startups such as Mistral.ai, Together.ai and Juni as early customers. The company’s focus on open source is very intentional, said CEO Anh-Tho Chuong: It’s targeting developers who are looking for solutions to tailor their billing to fit whatever cutting-edge, creative new services they are cooking up, a gap in the market that Lago believes is not being addressed well enough by incumbents, and which Lago is betting might best be addressed through an open source approach.</p>
<p>“We’re a partner to developers,” she said in an interview. “We honor [their] abstraction, and we use data to meter usage, to help companies handle subscriptions [or other] pricing plans in an easy way.”</p>
<p>A strong list of investors have taken note: The latest Series A of $15 million was led by FirstMark; the previous seed of $7 million was led by SignalFire, Chuong said. Other backers include Y Combinator, New Wave, and Script, as well as a number of individuals whose participation underscores the segment of the market Lago is targeting. They include MongoDB monetization head Meghan Gill; Romain Huet (previously of Stripe, now in developer relations at OpenAI); and Hugging Face CEO Clément Delangue.</p>
<p>We understand from sources that its valuation is now around $100 million.</p>
<p>The Lago doing business today as a billing platform got its start in a very classical startup way: It had no idea that it would be a billing platform.</p>
<p>Chuong and her co-founder Raffi Sarkissian were both working at business banking startup Qonto when they decided to strike out on their own and build a new startup. They applied to Y Combinator and got into the Summer 2021 cohort on the strength of their backgrounds. “But we went to YC without a product,” she said.</p>
<p>They settled while there on marketing, specifically around the idea of building a “Zapier for marketing teams.”</p>
<p>“We honestly thought this was going to be a big one,” she recalled. “It was okay.” Okay was just not going to cut it though. Marketing tech is very crowded, the company was picking up almost no traction for its product.</p>
<p>In a moment of trying to growth hack their way into an audience, Sarkissian decided to write a post for Hacker News in which he lamented the <a href="https://news.ycombinator.com/item?id=31424450" target="_blank" rel="noopener">problems with billing for developers</a>.</p>
<p>It had a catchy title: “Billing systems are a nightmare for engineers,” and it was written with the kind of freedom you might only be able to capture as a creator when you are really writing from the heart. That was because it was something he and Chuong knew well, since their time at Qonto was spent building a product to address that very issue.</p>
<p>Chuong said this was really not the point. The impetus for posting on this was to pick something they knew well so that they could monitor engagement and possibly use that to pivot attention to Lago, the “Zapier for marketing teams.”</p>
<p>But the post struck a nerve, and to their surprise a lot of people began to speak up about their own billing issues. Lago had its “a-ha” moment: If what they really wanted to do was build something to solve a problem for developers, here was a problem they actually could solve, and they knew they could do it well. Cue the pivot to billing and the startup taking off.</p>
<p>Taking off not just with users, but also investors.</p>
<p>“We first spotted Lago via HackerNews in early 2023: They had so much traction, for a seemingly solved or trivial topic, that it seemed obvious people had been waiting for an open source solution like theirs. We then reached out to their stargazers on GitHub and the feedback was nothing but stellar,” said Oana Olteanu, a partner at SignalFire, in a statement.</p>
<p>If you think marketing is a competitive market, billing is more crowded than Billingsgate Fish Market on a Friday morning. Larger tech companies like Stripe, Adyen, Salesforce, Zoho, Paddle and many more offer billing solutions. There are even a number of providers already pursuing an open source approach, including FOSSBilling, ChargeBee, Kill Bill, AppDirect’s jBilling and the imaginatively named “Open Source Billing.” (Why beat around the bush?)</p>
<p>Chuong believes that there is still very much an opportunity, however, for a focus on extensibility and tailored solutions for startups trying to push the boundaries in their own competitive spaces.</p>
<p>The AI sector is a strong example of that, in her view. Companies building AI-based products are still working out what the viable business models will be, and in the meantime we are seeing a lot of examples of companies considering hybrid approaches, mixing elements of flat-rate subscriptions with consumption-based pricing. All of this is tricky to manage and relies on tools that can integrate with whatever developers are building, with the ability to discern and apply their usage data.</p>
<p>“If you have very simple pricing and billing, there are a lot of those solutions around for that, but for complex billing, there has been no solution,” she said. That leads to many companies (as Qonto did) building their own solutions. “But engineers hate it. And it’s very expensive to hire engineers for that, obviously. So it’s still an unsolved problem.” In Lago’s view, offering open source tools is that best solution to meet a variety of needs and ideas.</p>
<p>For some of those users, the open source ethos also lines up with what they are hoping to espouse themselves as businesses.</p>
<p>“We chose Lago as our billing provider because we believe in the open-source ecosystem,” Timothée Lacroix, co-founder and CTO at Mistral.ai, said in a statement. “They have been able to follow the pace of our releases and have allowed us to focus on what we do best.” Yes, some will argue that open source might be getting stretched a lot as a concept right now, and may well be exactly the opposite of what many so-called open source companies are building.</p>
<p>The company’s aim is to continue building out its existing business but also to start considering what more it might add next. One obvious area is to dip back into Lago’s original thoughts about marketing, and to provide more data analytics to customers about what people are consuming and paying for, and the patterns of their payments. Another is to explore the other side of the billing coin: payments.</p>
<p>Lago is unlikely to build a payments stack; however, she added: The focus is almost certainly going to be on payments orchestration, giving users control over what they use but make sure that it integrates well with their billing platform (one that is, ideally, going to be covered by Lago of course).</p>
<p><em>Updated to remove the name of an investor that confirmed it is not involved in the funding.</em></p>
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A canonical Hamiltonian formulation of the Navier–Stokes problem (105 pts)]]></title>
            <link>https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/canonical-hamiltonian-formulation-of-the-navierstokes-problem/B3EB9389AE700867A6A3EA63A45E69C6</link>
            <guid>39957107</guid>
            <pubDate>Sun, 07 Apr 2024 00:46:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/canonical-hamiltonian-formulation-of-the-navierstokes-problem/B3EB9389AE700867A6A3EA63A45E69C6">https://www.cambridge.org/core/journals/journal-of-fluid-mechanics/article/canonical-hamiltonian-formulation-of-the-navierstokes-problem/B3EB9389AE700867A6A3EA63A45E69C6</a>, See on <a href="https://news.ycombinator.com/item?id=39957107">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div data-magellan-destination="sec1" id="sec1">
<h2><span>1.</span> Introduction</h2>
<p> Given the title of this paper, it is incumbent on the authors to assure the reader that we do not claim to have done the impossible. A viscous fluid is, after all, a non-Hamiltonian system (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>). There is no action integral for which Hamilton's principle (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>) yields the Navier–Stokes equations (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson, Tannehill &amp; Pletcher <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>) in their usual form (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>), and we do not claim otherwise. Remarkably, however, a Hamiltonian formulation can still be found by considering a mathematically equivalent higher-order problem, as we will now demonstrate via simple example.</p>
<div data-magellan-destination="sec1-1" id="sec1-1">
<h3><span>1.1.</span> A motivating example</h3>
<p> Consider the first-order initial-value problem
</p><p><span>(1.1<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn1.png?pub-status=live" width="149" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn1.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn1.png"><span data-mathjax-type="texmath"><span>\begin{equation} \dot{v}={-}v, \quad v(0)=1, \end{equation}</span></span></span></p><p>
with unique solution <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline9.png?pub-status=live" width="79" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline9.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline9.png"><span data-mathjax-type="texmath"><span>$v(t)={\rm e}^{-t}$</span></span></span></span>. Here, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline10.png?pub-status=live" width="30" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline10.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline10.png"><span data-mathjax-type="texmath"><span>$v(t)$</span></span></span></span> can be interpreted as the velocity of a lumped mass moving in a viscous medium in one dimension with linear damping. Like the traditional Navier–Stokes equations (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>), this too is an intrinsically non-Hamiltonian problem, in that there is no action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline11.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline11.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline11.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}$</span></span></span></span> for which Hamilton's principle (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline12.png?pub-status=live" width="55" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline12.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline12.png"><span data-mathjax-type="texmath"><span>$\delta \mathcal {S}=0$</span></span></span></span>) yields the governing equation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline13.png?pub-status=live" width="57" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline13.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline13.png"><span data-mathjax-type="texmath"><span>$\dot {v}=-v$</span></span></span></span>. Yet, if we simply differentiate both sides of the equation (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline14.png?pub-status=live" width="57" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline14.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline14.png"><span data-mathjax-type="texmath"><span>$\ddot {v}=-\dot {v}$</span></span></span></span>), use the original equation to write <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline15.png?pub-status=live" width="57" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline15.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline15.png"><span data-mathjax-type="texmath"><span>$\dot {v}=-v$</span></span></span></span> and apply the additional initial condition <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline16.png?pub-status=live" width="146" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline16.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline16.png"><span data-mathjax-type="texmath"><span>$\dot {v}(0)=-v(0)=-1$</span></span></span></span>, we arrive at the mathematically equivalent second-order problem
</p><p><span>(1.2<em>a</em>–<em>c</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn2.png?pub-status=live" width="237" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn2.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn2.png"><span data-mathjax-type="texmath"><span>\begin{equation} \ddot{v}=v, \quad v(0)=1, \quad \dot{v}(0)={-}1, \end{equation}</span></span></span></p><p>
which has the same unique solution <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline17.png?pub-status=live" width="79" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline17.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline17.png"><span data-mathjax-type="texmath"><span>$v(t)={\rm e}^{-t}$</span></span></span></span> but which is Hamiltonian – not in the sense that the total mechanical energy is conserved, but in the sense that it has mathematically Hamiltonian structure.</p>
<p> As first observed by Sanders (<a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>) and Sanders &amp; Inman (<a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>), the associated action can be obtained by writing the original equation in standard form (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline18.png?pub-status=live" width="112" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline18.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline18.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}\equiv \dot {v}+v=0$</span></span></span></span>), squaring the residual <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline19.png?pub-status=live" width="18" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline19.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline19.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}$</span></span></span></span> and integrating over time
</p><p><span>(1.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn3.png?pub-status=live" width="512" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn3.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn3.png">
<span data-mathjax-type="texmath"><span>\begin{align}
\mathcal{S}^{*}[v]=\int\text{d}t\big(\tfrac{1}{2}\mathcal{R}^{2}\big)=\int
\text{d}t\big[\tfrac{1}{2}\big(\dot{v}^{2}+2v\dot{v}+v^{2}\big)\big]
\sim\int\text{d}t\big[\tfrac{1}{2}\big(\dot{v}^{2}+v^{2}\big)\big],
\end{align}</span></span></span></p><p>
where we have used the fact that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline20.png?pub-status=live" width="117" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline20.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline20.png"><span data-mathjax-type="texmath"><span>$2v\dot {v}=\text {d}(v^{2})/\text {d}t$</span></span></span></span> is a total time derivative and can therefore be excluded from the action without changing the resulting Euler–Lagrange equation (Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>). This is the so-called ‘time-averaged principle of least squares’ (Sanders <a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>; Sanders &amp; Inman <a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>): since <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline21.png?pub-status=live" width="49" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline21.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline21.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}=0$</span></span></span></span> is a local minimum of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline22.png?pub-status=live" width="24" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline22.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline22.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}^{2}$</span></span></span></span>, it is also a local minimum of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline23.png?pub-status=live" width="67" height="24" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline23.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline23.png"><span data-mathjax-type="texmath"><span>$\int \text {d}t(\mathcal {R}^{2})$</span></span></span></span>. Varying <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline24.png?pub-status=live" width="12" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline24.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline24.png"><span data-mathjax-type="texmath"><span>$v$</span></span></span></span>, the first variation of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline25.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline25.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline25.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> is
</p><p><span>(1.4)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn4.png?pub-status=live" width="408" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn4.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn4.png"><span data-mathjax-type="texmath"><span>\begin{equation} \delta\mathcal{S}^{*}=\int\text{d}t\left[\dot{v}\delta\dot{v}+v\delta v\right]=\int\text{d}t\left[(-\ddot{v}+v)\delta v\right]+\left[\dot{v}\delta v\right]_{t_{1}}^{t_{2}}, \end{equation}</span></span></span></p><p>
yielding the second-order equation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline26.png?pub-status=live" width="44" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline26.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline26.png"><span data-mathjax-type="texmath"><span>$\ddot {v}=v$</span></span></span></span> and revealing the canonically conjugate ‘momentum’ <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline27.png?pub-status=live" width="46" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline27.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline27.png"><span data-mathjax-type="texmath"><span>${\rm \pi} \equiv \dot {v}$</span></span></span></span>. Here, and in what follows, we will use the symbol <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline28.png?pub-status=live" width="13" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline28.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline28.png"><span data-mathjax-type="texmath"><span>${\rm \pi}$</span></span></span></span> for canonically conjugate momenta, as is customary in Hamiltonian field theory, in order to avoid later confusion with the pressure field <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline29.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline29.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline29.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span>. Since the mathematical constant <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline30.png?pub-status=live" width="82" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline30.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline30.png"><span data-mathjax-type="texmath"><span>$3.14159\ldots$</span></span></span></span> does not appear in the present work, there will be no ambiguity.</p>
<p> The corresponding Hamiltonian is obtained via the Legendre transform
</p><p><span>(1.5)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn5.png?pub-status=live" width="322" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn5.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn5.png">
<span data-mathjax-type="texmath"><span>\begin{equation}
H^{*}[v,{\rm \pi}]={\rm \pi}\dot{v}-\tfrac{1}{2}\big(\dot{v}^{2}+v^{2}\big)=\tfrac{1}{2}\big({\rm \pi}^{2}-v^{2}\big).
\end{equation}</span></span></span></p><p>
Notably, this Hamiltonian has nothing to do with the total mechanical energy of the system, although it is a conserved quantity. In fact, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline31.png?pub-status=live" width="58" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline31.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline31.png"><span data-mathjax-type="texmath"><span>$H^{*}=0$</span></span></span></span> for the actual motion satisfying <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline32.png?pub-status=live" width="91" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline32.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline32.png"><span data-mathjax-type="texmath"><span>${\rm \pi} \equiv \dot {v}=-v$</span></span></span></span>. We note in passing that Liouville's theorem is satisfied, as the motion occurs along the line <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline33.png?pub-status=live" width="59" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline33.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline33.png"><span data-mathjax-type="texmath"><span>${\rm \pi} =-v$</span></span></span></span>, so that the phase-space volume, being always zero, is conserved. Hamilton's equations
</p><p><span>(1.6<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn6.png?pub-status=live" width="188" height="40" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn6.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn6.png"><span data-mathjax-type="texmath"><span>\begin{equation} \dot{v}=\frac{\partial H^{*}}{\partial{\rm \pi}}, \quad \dot{\rm \pi}={-}\frac{\partial H^{*}}{\partial v}, \end{equation}</span></span></span></p><p>
are mathematically equivalent to the second-order problem <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline34.png?pub-status=live" width="44" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline34.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline34.png"><span data-mathjax-type="texmath"><span>$\ddot {v}=v$</span></span></span></span> and therefore also mathematically equivalent to the original, first-order problem.</p>
<p> The associated Hamilton–Jacobi equation (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>; Jacobi <a href="#ref54"><span>Reference Jacobi</span>1837</a>, <a href="#ref55"><span>Reference Jacobi</span>1842–1843</a>; Whittaker <a href="#ref117"><span>Reference Whittaker</span>1904</a>; Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>) is
</p><p><span>(1.7)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn7.png?pub-status=live" width="226" height="49" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn7.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn7.png"><span data-mathjax-type="texmath"><span>\begin{equation} \frac{1}{2}\left(\frac{\partial{S}^{*}}{\partial v}\right)^{2}-\frac{1}{2}v^{2}+\frac{\partial{S}^{*}}{\partial t}=0, \end{equation}</span></span></span></p><p>
where Hamilton's principal function <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline35.png?pub-status=live" width="100" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline35.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline35.png"><span data-mathjax-type="texmath"><span>${S}^{*}={S}^{*}(v,t)$</span></span></span></span> serves as the generating function for a canonical transformation to a new coordinate <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline36.png?pub-status=live" width="13" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline36.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline36.png"><span data-mathjax-type="texmath"><span>$\phi$</span></span></span></span> which is constant and equal to its initial value. Although this is almost identical to the Hamilton–Jacobi equation for the simple harmonic oscillator – the only difference being the sign in front of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline37.png?pub-status=live" width="57" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline37.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline37.png"><span data-mathjax-type="texmath"><span>$(1/2)v^{2}$</span></span></span></span> – the usual separable solution of the form <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38.png?pub-status=live" width="175" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38.png"><span data-mathjax-type="texmath"><span>${S}^{*}(v,t)=W(v)+T(t)$</span></span></span></span>, where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38a.png?pub-status=live" width="42" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38a.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38a.png"><span data-mathjax-type="texmath"><span>$W(v)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38b.png?pub-status=live" width="34" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38b.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline38b.png"><span data-mathjax-type="texmath"><span>$T(t)$</span></span></span></span> are functions of <em>v</em> and <em>t</em> (respectively), does not work, as the reader may check.</p>
<p> Instead, let us use a trial solution of the form
</p><p><span>(1.8)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn8.png?pub-status=live" width="228" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn8.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn8.png"><span data-mathjax-type="texmath"><span>\begin{equation} {S}^{*}(v,t)=F(t)v+\tfrac{1}{2}v^{2}+f(t), \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline39.png?pub-status=live" width="35" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline39.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline39.png"><span data-mathjax-type="texmath"><span>$F(t)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline40.png?pub-status=live" width="31" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline40.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline40.png"><span data-mathjax-type="texmath"><span>$f(t)$</span></span></span></span> are as yet undetermined functions of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline41.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline41.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline41.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span>. This trial solution was chosen to cancel the term <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline42.png?pub-status=live" width="57" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline42.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline42.png"><span data-mathjax-type="texmath"><span>$(1/2)v^{2}$</span></span></span></span> from the equation. Substituting our trial solution into the Hamilton–Jacobi equation, we find that
</p><p><span>(1.9)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn9.png?pub-status=live" width="287" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn9.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn9.png"><span data-mathjax-type="texmath"><span>\begin{equation} \tfrac{1}{2}[F(t)]^{2}+[F(t)+F'(t)]v+f'(t)=0. \end{equation}</span></span></span></p><p>
In order for this equation to hold for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline43.png?pub-status=live" width="12" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline43.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline43.png"><span data-mathjax-type="texmath"><span>$v$</span></span></span></span>, we must have the following:
</p><p><span>(1.10)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn10.png?pub-status=live" width="284" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn10.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn10.png"><span data-mathjax-type="texmath"><span>\begin{equation} F(t)+F'(t)=0 \quad \Rightarrow \quad F(t)=\alpha {\rm e}^{{-}t}, \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline44.png?pub-status=live" width="14" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline44.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline44.png"><span data-mathjax-type="texmath"><span>$\alpha$</span></span></span></span> is a constant of integration which will be used to transform to the new coordinate, and
</p><p><span>(1.11)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn11.png?pub-status=live" width="362" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn11.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn11.png"><span data-mathjax-type="texmath"><span>\begin{equation} \tfrac{1}{2}[F(t)]^{2}+f'(t)=0 \quad \Rightarrow \quad f(t)=\tfrac{1}{4}\alpha^{2}{\rm e}^{{-}2t}+\gamma, \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline45.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline45.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline45.png"><span data-mathjax-type="texmath"><span>$\gamma$</span></span></span></span> is another constant of integration which is simply additive and can therefore be discarded.</p>
<p> In this way, we have that
</p><p><span>(1.12)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn12.png?pub-status=live" width="280" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn12.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn12.png"><span data-mathjax-type="texmath"><span>\begin{equation} {S}^{*}(v,t;\alpha)=\alpha {\rm e}^{{-}t}v+\tfrac{1}{2}v^{2}+\tfrac{1}{4}\alpha^{2}{\rm e}^{{-}2t}. \end{equation}</span></span></span></p><p>
With one constant of integration (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline46.png?pub-status=live" width="14" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline46.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline46.png"><span data-mathjax-type="texmath"><span>$\alpha$</span></span></span></span>) to match the single degree of freedom (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline47.png?pub-status=live" width="12" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline47.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline47.png"><span data-mathjax-type="texmath"><span>$v$</span></span></span></span>), this is a complete solution to the Hamilton–Jacobi equation. The new coordinate <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline48.png?pub-status=live" width="13" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline48.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline48.png"><span data-mathjax-type="texmath"><span>$\phi$</span></span></span></span> (which is constant and equal to its initial value) is obtained via the canonical transformation
</p><p><span>(1.13)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn13.png?pub-status=live" width="207" height="40" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn13.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn13.png"><span data-mathjax-type="texmath"><span>\begin{equation} \phi=\frac{\partial{S}^{*}}{\partial\alpha}={\rm e}^{{-}t}v+\frac{1}{2}\alpha {\rm e}^{{-}2t}. \end{equation}</span></span></span></p><p>
The numerical value of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline49.png?pub-status=live" width="14" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline49.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline49.png"><span data-mathjax-type="texmath"><span>$\alpha$</span></span></span></span> is in turn obtained via the canonical relation
</p><p><span>(1.14)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn14.png?pub-status=live" width="164" height="40" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn14.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn14.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm \pi}=\frac{\partial{S}^{*}}{\partial v}=\alpha {\rm e}^{{-}t}+v, \end{equation}</span></span></span></p><p>
which, evaluated at <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline50.png?pub-status=live" width="41" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline50.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline50.png"><span data-mathjax-type="texmath"><span>$t=0$</span></span></span></span>, gives <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline51.png?pub-status=live" width="59" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline51.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline51.png"><span data-mathjax-type="texmath"><span>$\alpha =-2$</span></span></span></span> (recall that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline52.png?pub-status=live" width="46" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline52.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline52.png"><span data-mathjax-type="texmath"><span>${\rm \pi} =\dot {v}$</span></span></span></span>, and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline53.png?pub-status=live" width="146" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline53.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline53.png"><span data-mathjax-type="texmath"><span>$\dot {v}(0)=-v(0)=-1$</span></span></span></span>). Using the fact that the new coordinate <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline54.png?pub-status=live" width="13" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline54.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline54.png"><span data-mathjax-type="texmath"><span>$\phi$</span></span></span></span> is equal to its initial value, we have that
</p><p><span>(1.15)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn15.png?pub-status=live" width="209" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn15.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn15.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm e}^{{-}t}v-{\rm e}^{{-}2t}=v(0)-1=0, \end{equation}</span></span></span></p><p>
giving the correct solution <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline55.png?pub-status=live" width="79" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline55.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline55.png"><span data-mathjax-type="texmath"><span>$v(t)={\rm e}^{-t}$</span></span></span></span>.</p>
<p> In summary, by doubling the order of the governing equation and supplying additional auxiliary conditions, we made a non-Hamiltonian problem into a Hamiltonian one (Sanders <a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>; Sanders &amp; Inman <a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>). Furthermore, this simple example demonstrates that the method correctly gives the solution to the original, non-Hamiltonian problem. Indeed, it would appear that every non-Hamiltonian problem belongs to an equivalence class of problems with the same solution, and within each such equivalence class there are Hamiltonian variants. The remainder of this paper applies that concept to the isotropic Navier–Stokes problem (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>).</p>
</div>
<div data-magellan-destination="sec1-2" id="sec1-2">
<h3><span>1.2.</span> The Navier–Stokes problem</h3>
<p> The incompressible Navier–Stokes equations (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>) are given by
</p><p><span>(1.16)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn16.png?pub-status=live" width="284" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn16.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn16.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \rho \dot{u}_{i} + \rho u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - \rho b_{i} = 0, \end{gather}$$</span></span></span></p>
<p><span>(1.17)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn17.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn17.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn17.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}u_{i,i} = 0, \end{gather}$$</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline56.png?pub-status=live" width="12" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline56.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline56.png"><span data-mathjax-type="texmath"><span>$\rho$</span></span></span></span> is the constant and uniform density, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline57.png?pub-status=live" width="101" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline57.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline57.png"><span data-mathjax-type="texmath"><span>$u_{i}=u_{i}(x_{j},t)$</span></span></span></span> is the velocity field, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline58.png?pub-status=live" width="88" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline58.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline58.png"><span data-mathjax-type="texmath"><span>$p=p(x_{j},t)$</span></span></span></span> is the pressure field, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline59.png?pub-status=live" width="96" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline59.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline59.png"><span data-mathjax-type="texmath"><span>$b_{i}=b_{i}(x_{j},t)$</span></span></span></span> is the body force field, subscript Roman indices label Euclidean tensor components (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline60.png?pub-status=live" width="89" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline60.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline60.png"><span data-mathjax-type="texmath"><span>$i,j=1,2,3$</span></span></span></span>), the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline61.png?pub-status=live" width="19" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline61.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline61.png"><span data-mathjax-type="texmath"><span>$x_{j}$</span></span></span></span> are Eulerian spatial coordinates, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline62.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline62.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline62.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span> is time, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline63.png?pub-status=live" width="14" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline63.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline63.png"><span data-mathjax-type="texmath"><span>$\mu$</span></span></span></span> is the dynamic viscosity, a dot over a symbol denotes a partial time derivative (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline64.png?pub-status=live" width="93" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline64.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline64.png"><span data-mathjax-type="texmath"><span>$\dot {u}_{i}=\partial {u}_{i}/\partial t$</span></span></span></span>), a comma in a subscript indicates a spatial gradient (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline65.png?pub-status=live" width="98" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline65.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline65.png"><span data-mathjax-type="texmath"><span>$p_{,i}=\partial p/\partial x_{i}$</span></span></span></span>) and we employ the Einstein summation convention on repeated subscript indices. To be clear, the notation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline66.png?pub-status=live" width="62" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline66.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline66.png"><span data-mathjax-type="texmath"><span>$u_{i}(x_{j},t)$</span></span></span></span> signifies that each component of the velocity field is a function of all three spatial coordinates <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline67.png?pub-status=live" width="82" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline67.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline67.png"><span data-mathjax-type="texmath"><span>$(x_{1},x_{2},x_{3})$</span></span></span></span> and time <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline68.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline68.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline68.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span>. It has the same meaning as other common notations, such as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline69.png?pub-status=live" width="56" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline69.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline69.png"><span data-mathjax-type="texmath"><span>$u_{i}(\boldsymbol {x},t)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline70.png?pub-status=live" width="53" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline70.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline70.png"><span data-mathjax-type="texmath"><span>$\boldsymbol {u}(\boldsymbol {x},t)$</span></span></span></span>. Likewise for all other field quantities. In the case of a uniform gravitational field, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline71.png?pub-status=live" width="52" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline71.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline71.png"><span data-mathjax-type="texmath"><span>$b_{i}=g_{i}$</span></span></span></span> coincides with the local acceleration due to gravity; however, in what follows, we make no assumptions about the functional form of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline72.png?pub-status=live" width="59" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline72.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline72.png"><span data-mathjax-type="texmath"><span>$b_{i}(x_{j},t)$</span></span></span></span>: it is completely arbitrary. There are four unknown field quantities: <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline73.png?pub-status=live" width="62" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline73.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline73.png"><span data-mathjax-type="texmath"><span>$u_{i}(x_{j},t)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline74.png?pub-status=live" width="56" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline74.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline74.png"><span data-mathjax-type="texmath"><span>$p(x_{j},t)$</span></span></span></span>.</p>
<p> We seek, ultimately, a functional
</p><p><span>(1.18)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn18.png?pub-status=live" width="186" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn18.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn18.png"><span data-mathjax-type="texmath"><span>\begin{equation} H^{*}=H^{*}[u_{i},p,{\rm \pi}_{j},{\rm \pi}_{4};t], \end{equation}</span></span></span></p><p>
where (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline75.png?pub-status=live" width="46" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline75.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline75.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{i},{\rm \pi} _{4}$</span></span></span></span>) are suitable ‘momenta’ conjugate to the field quantities (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline76.png?pub-status=live" width="36" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline76.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline76.png"><span data-mathjax-type="texmath"><span>$u_{i},p$</span></span></span></span>), such that Hamilton's canonical equations
</p><p><span>(1.19<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn19.png?pub-status=live" width="175" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn19.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn19.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \dot{u}_{i}=\frac{\delta H^{*}}{\delta{\rm \pi}_{i}}, \quad\dot{p}=\frac{\delta H^{*}}{\delta{\rm \pi}_{4}}, \end{gather}$$</span></span></span></p>
<p><span>(1.20<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn20.png?pub-status=live" width="214" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn20.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn20.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\dot{\rm \pi}_{i}={-}\frac{\delta H^{*}}{\delta u_{i}}, \quad\dot{\rm \pi}_{4}={-}\frac{\delta H^{*}}{\delta p}, \end{gather}$$</span></span></span></p><p>
constitute a mathematically equivalent second-order formulation of the problem, where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline77.png?pub-status=live" width="67" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline77.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline77.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta u_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline78.png?pub-status=live" width="61" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline78.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline78.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta p$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline79.png?pub-status=live" width="68" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline79.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline79.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta {\rm \pi}_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline80.png?pub-status=live" width="70" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline80.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline80.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> are the Volterra (<a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline81.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline81.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline81.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> with respect to the field quantities and the conjugate momenta. We will find that this is generally possible for a compressible fluid. For an incompressible fluid, the equation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline82.png?pub-status=live" width="104" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline82.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline82.png"><span data-mathjax-type="texmath"><span>$\dot {p}=\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> will need to be replaced by the incompressibility condition <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline83.png?pub-status=live" width="59" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline83.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline83.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=0$</span></span></span></span>, consistent with the well-known result that the pressure usually serves as a Lagrange multiplier for the incompressibility constraint (Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>; Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>) (refer to p.&nbsp;361 of Lanczos (<a href="#ref63"><span>Reference Lanczos</span>1970</a>) and pp.&nbsp;137 and 141 of Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>).</p>
<p> The remainder of this paper is organized as follows. Section <a href="#sec2">2</a> gives a comprehensive overview of the relevant literature to date. Sections&nbsp;<a href="#sec3">3</a> and <a href="#sec4">4</a> contain the main results of the present work, culminating in a conserved Hamiltonian functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline84.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline84.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline84.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> satisfying Hamilton's equations (<a href="#eqn19">1.19<em>a</em>,<em>b</em></a>) and (<a href="#eqn20">1.20<em>a</em>,<em>b</em></a>) for the mathematically equivalent second-order problem, along with the accompanying Hamilton–Jacobi equation (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>; Jacobi <a href="#ref54"><span>Reference Jacobi</span>1837</a>, <a href="#ref55"><span>Reference Jacobi</span>1842–1843</a>; Whittaker <a href="#ref117"><span>Reference Whittaker</span>1904</a>; Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>). Section <a href="#sec5">5</a> contains a discussion of the physical interpretation of the second-order formulation. Section <a href="#sec6">6</a> presents a brief case study in the form of one-dimensional flow over an infinite, flat plate. Finally, §&nbsp;<a href="#sec7">7</a> concludes the paper with a few closing remarks and an outline of how the present formulation can aid in resolving the question of existence and uniqueness of solutions to the Navier–Stokes problem.</p>
<p> By the end of the paper, we will have achieved precisely what the title promises: a canonical Hamiltonian formulation of the problem, opening new avenues toward resolution of one of the most famous unsolved problems in mathematics.</p>
</div>
</div>
<div data-magellan-destination="sec2" id="sec2">
<h2><span>2.</span> Literature review</h2>
<p> The field of analytical mechanics, with foundations planted in Hamilton's principle of stationary action (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>) or d'Alembert's principle of virtual work (d'Alembert <a href="#ref25"><span>Reference d'Alembert</span>1743</a>), has been vital to the development of both classical and quantum physics since the eighteenth century. This approach is versatile and helpful to the physical understanding of the problem in question, and the foundation, structure and utility of Hamiltonian formalism is well documented (Becker <a href="#ref9"><span>Reference Becker</span>1954</a>; Taylor <a href="#ref106"><span>Reference Taylor</span>2005</a>; Hamill <a href="#ref47"><span>Reference Hamill</span>2014</a>; Bohn <a href="#ref20"><span>Reference Bohn</span>2018</a>; Cline <a href="#ref24"><span>Reference Cline</span>2023</a>; Fowler <a href="#ref35"><span>Reference Fowler</span>2023</a>). The supporting mathematics of the calculus of variations as well as symplectic and differential geometry can also be found in many excellent sources (Arnold <a href="#ref4"><span>Reference Arnold</span>1989</a>; Berndt <a href="#ref16"><span>Reference Berndt</span>2001</a>; Hall <a href="#ref46"><span>Reference Hall</span>2003</a>; Boas <a href="#ref19"><span>Reference Boas</span>2006</a>; Stone &amp; Goldbart <a href="#ref100"><span>Reference Stone and Goldbart</span>2009</a>; Gelfand &amp; Fomin <a href="#ref42"><span>Reference Gelfand and Fomin</span>2012</a>; Arfken <a href="#ref3"><span>Reference Arfken</span>2013</a>; Needham <a href="#ref77"><span>Reference Needham</span>2021</a>). It is therefore no surprise that researchers have been applying analytical formalism to classical fluids dating back to the time of Lagrange (Lagrange <a href="#ref62"><span>Reference Lagrange</span>1811</a>; Lichtenstein <a href="#ref67"><span>Reference Lichtenstein</span>1929</a>; Morrison <a href="#ref73"><span>Reference Morrison</span>1998</a>, <a href="#ref74"><span>Reference Morrison</span>2006</a>; Berdichevsky <a href="#ref14"><span>Reference Berdichevsky</span>2009<em>a</em></a>,<a href="#ref15"><span>Reference Berdichevsky</span><em>b</em></a>; dell'Isola &amp; Gavrilyuk <a href="#ref27"><span>Reference dell'Isola and Gavrilyuk</span>2011</a>; Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>; Bedford <a href="#ref10"><span>Reference Bedford</span>2021</a>).</p>
<p> The task of obtaining solutions to the governing equations of fluid flow represents one of the most challenging problems in science and engineering. In most cases, the mathematical formulation is expressed as an initial-boundary-value problem: a set of coupled, nonlinear partial differential equations, which are to be solved subject to various initial and boundary conditions. The degree of complication of the governing equations depends on the type of the fluid. For a viscous fluid where the transport phenomena of friction and thermal conduction are included, the governing equations are called the Navier–Stokes equations (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>; Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>). The Navier–Stokes equations are derived by applying fundamental physical principles – conservation of mass, conservation of momentum and conservation of energy – to a viscous fluid, and the derivation can be found in any fluid mechanics textbook (Anderson <em>et&nbsp;al.</em> <a href="#ref2"><span>Reference Anderson, Tannehill and Pletcher</span>1984</a>; Anderson <a href="#ref1"><span>Reference Anderson</span>1995</a>; Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>; Cengel &amp; Cimbala <a href="#ref22"><span>Reference Cengel and Cimbala</span>2018</a>). It is important to recognize that the Navier–Stokes equations as they are known today were not developed solely by Navier and Stokes; indeed, Poisson, Cauchy and others were also heavily involved in their development (Darrigol <a href="#ref26"><span>Reference Darrigol</span>2002</a>). As far as the present authors are aware, to date there is still no firm answer to the question of whether or not there always exist unique, smooth, non-singular solutions to the three-dimensional Navier–Stokes equations (Lemarie-Rieusset <a href="#ref65"><span>Reference Lemarie-Rieusset</span>2018</a>), and this constitutes one of the most famous unsolved problems in mathematics.</p>
<p> The application of analytical mechanics (Goldstein <a href="#ref44"><span>Reference Goldstein</span>1980</a>; Arnold <a href="#ref4"><span>Reference Arnold</span>1989</a>; Fetter &amp; Walecka <a href="#ref31"><span>Reference Fetter and Walecka</span>2003</a>; Gelfand &amp; Fomin <a href="#ref42"><span>Reference Gelfand and Fomin</span>2012</a>) to the field of fluid mechanics (Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>) has recently seen a resurgence in interest (Salmon <a href="#ref86"><span>Reference Salmon</span>1983</a>, <a href="#ref87"><span>Reference Salmon</span>1988</a>; Brenier <a href="#ref21"><span>Reference Brenier</span>2017</a>; Giga, Kirshtein &amp; Liu <a href="#ref43"><span>Reference Giga, Kirshtein and Liu</span>2018</a>; Mottaghi, Gabbai &amp; Benaroya <a href="#ref76"><span>Reference Mottaghi, Gabbai and Benaroya</span>2019</a>; Taroco, Blanco &amp; Feijoo <a href="#ref104"><span>Reference Taroco, Blanco and Feijoo</span>2020</a>; Bedford <a href="#ref10"><span>Reference Bedford</span>2021</a>; Mavroeidis &amp; Athanassoulis <a href="#ref70"><span>Reference Mavroeidis and Athanassoulis</span>2022</a>) after a long history. In the absence of non-conservative forces, an inviscid fluid is a Hamiltonian system, and so the classical Hamiltonian theory applies. Serrin (<a href="#ref95"><span>Reference Serrin</span>1959</a>), Benjamin (<a href="#ref12"><span>Reference Benjamin</span>1984</a>) and Holm, Marsden &amp; Ratiu (<a href="#ref53"><span>Reference Holm, Marsden and Ratiu</span>1986</a>) have all described variational and Hamiltonian formulations of incompressible, inviscid fluid flow. Roberts (<a href="#ref84"><span>Reference Roberts</span>1972</a>) presented a Hamiltonian dynamic for weakly interacting vortices. This research obtained the canonical equations of Hamiltonian dynamics for a set of two well-separated vortex rings by setting up a Hamiltonian to define the set. Olver (<a href="#ref78"><span>Reference Olver</span>1982</a>) showed that the Euler equations of inviscid and incompressible fluid flow can be put into Hamiltonian form. Benjamin &amp; Olver (<a href="#ref13"><span>Reference Benjamin and Olver</span>1982</a>) investigated the Hamiltonian structure of the water waves problem. They examined the symmetry groups of this problem, finding that Hamiltonian analysis enables the solution of conservative elements of the problem. However, the study also acknowledged that further study is needed to identify the physical significance of the mathematical results. Maddocks &amp; Pego (<a href="#ref68"><span>Reference Maddocks and Pego</span>1995</a>) presented a novel Hamiltonian formulation of ideal fluid flow expressed in material coordinates. Their Hamiltonian formulation arises from a general approach for constrained systems that is not restricted to problems in fluid mechanics. Rather, it is widely applicable for obtaining unconstrained Hamiltonian dynamical systems from Lagrangian field equations that are subject to pointwise constraints. More recently, Arnold (<a href="#ref5"><span>Reference Arnold</span>2014</a>) also studied the Hamiltonian nature of the ideal Euler equations.</p>
<p> Viscous forces are non-conservative, which presents a fundamental challenge when applying Hamilton's principle to viscous fluids (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>; Lemarie-Rieusset <a href="#ref65"><span>Reference Lemarie-Rieusset</span>2018</a>). Indeed, it is a well-known theorem (first proven by Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>) that the Navier–Stokes equations in their usual form cannot be derived from a classical action principle (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>). Millikan (<a href="#ref72"><span>Reference Millikan</span>1929</a>) summarizes his main result as follows:
</p><p> It is impossible to derive the equations of steady motion of a viscous, incompressible fluid from a variation principle involving as Lagrangian function an expression in the velocity components and their first-order space derivatives, unless conditions are imposed on these velocity components such that all of the terms <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline85.png?pub-status=live" width="33" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline85.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline85.png"><span data-mathjax-type="texmath"><span>$vu_{,2}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline86.png?pub-status=live" width="36" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline86.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline86.png"><span data-mathjax-type="texmath"><span>$wu_{,3}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline87.png?pub-status=live" width="35" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline87.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline87.png"><span data-mathjax-type="texmath"><span>$wv_{,3}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline88.png?pub-status=live" width="32" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline88.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline88.png"><span data-mathjax-type="texmath"><span>$uv_{,1}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline89.png?pub-status=live" width="36" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline89.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline89.png"><span data-mathjax-type="texmath"><span>$uw_{,1}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline90.png?pub-status=live" width="35" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline90.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline90.png"><span data-mathjax-type="texmath"><span>$vw_{,2}$</span></span></span></span> disappear from their positions in the Navier–Stokes equations (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>).</p>
<p> (It should be noted that the six terms referred to above come from the convective acceleration <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline91.png?pub-status=live" width="45" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline91.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline91.png"><span data-mathjax-type="texmath"><span>$u_{i,j}u_{j}$</span></span></span></span>, and Millikan (<a href="#ref72"><span>Reference Millikan</span>1929</a>) uses the notation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline92.png?pub-status=live" width="52" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline92.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline92.png"><span data-mathjax-type="texmath"><span>$u=u_{1}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline93.png?pub-status=live" width="52" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline93.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline93.png"><span data-mathjax-type="texmath"><span>$v=u_{2}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline94.png?pub-status=live" width="56" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline94.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline94.png"><span data-mathjax-type="texmath"><span>$w=u_{3}$</span></span></span></span>.) More generally, it has been shown that the existence of variational formulations is related to self-adjointness of the system with respect to a standard duality relation, a property that all non-conservative systems lack (Vainberg <a href="#ref112"><span>Reference Vainberg</span>1964</a>). Within the last 80 years, many alternative methods have been developed in an attempt to circumvent the non-self-adjointness of dissipative systems (Prigogine &amp; Glansdorff <a href="#ref82"><span>Reference Prigogine and Glansdorff</span>1965</a>; Biot <a href="#ref18"><span>Reference Biot</span>1970</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>; Lebon &amp; Lambermont <a href="#ref64"><span>Reference Lebon and Lambermont</span>1973</a>; Tonti <a href="#ref110"><span>Reference Tonti</span>1973</a>; Magri <a href="#ref69"><span>Reference Magri</span>1974</a>; Telega <a href="#ref107"><span>Reference Telega</span>1979</a>; Tonti <a href="#ref111"><span>Reference Tonti</span>1984</a>; Filippov <a href="#ref32"><span>Reference Filippov</span>1989</a>; Sieniutycz <a href="#ref96"><span>Reference Sieniutycz</span>2000</a>; Robinson <a href="#ref85"><span>Reference Robinson</span>2001</a>; Galley <a href="#ref37"><span>Reference Galley</span>2013</a>; Kim, Dargush &amp; Lee <a href="#ref60"><span>Reference Kim, Dargush and Lee</span>2016</a>; Mottaghi <em>et&nbsp;al.</em> <a href="#ref76"><span>Reference Mottaghi, Gabbai and Benaroya</span>2019</a>; Taroco <em>et&nbsp;al.</em> <a href="#ref104"><span>Reference Taroco, Blanco and Feijoo</span>2020</a>; Bersani &amp; Caressa <a href="#ref17"><span>Reference Bersani and Caressa</span>2021</a>; Junker &amp; Balzani <a href="#ref58"><span>Reference Junker and Balzani</span>2021</a>). The mathematical study of alternative variational methods as applied to the Navier–Stokes equations in particular remains an ongoing endeavour (Oseledets <a href="#ref79"><span>Reference Oseledets</span>1989</a>; Vujanovic &amp; Jones <a href="#ref115"><span>Reference Vujanovic and Jones</span>1989</a>; Doering &amp; Gibbon <a href="#ref29"><span>Reference Doering and Gibbon</span>1995</a>; Fukagawa &amp; Fujitani <a href="#ref36"><span>Reference Fukagawa and Fujitani</span>2012</a>; Jones <a href="#ref56"><span>Reference Jones</span>2015</a>; Gay-Balmaz &amp; Yoshimura <a href="#ref39"><span>Reference Gay-Balmaz and Yoshimura</span>2017</a>; Hieber, Robinson &amp; Shibata <a href="#ref51"><span>Reference Hieber, Robinson and Shibata</span>2017</a>; Hochgerner <a href="#ref52"><span>Reference Hochgerner</span>2018</a>; Gay-Balmaz &amp; Yoshimura <a href="#ref40"><span>Reference Gay-Balmaz and Yoshimura</span>2019<em>a</em></a>,<a href="#ref41"><span>Reference Gay-Balmaz and Yoshimura</span><em>b</em></a>; Rashad <em>et&nbsp;al.</em> <a href="#ref83"><span>Reference Rashad, Califano, Brugnoli, Schuller and Stramigioli</span>2021</a>; Gonzalez &amp; Taha <a href="#ref45"><span>Reference Gonzalez and Taha</span>2022</a>; Taha &amp; Gonzalez <a href="#ref102"><span>Reference Taha and Gonzalez</span>2022</a>; Sanders <a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>).</p>
<p> Oseledets (<a href="#ref79"><span>Reference Oseledets</span>1989</a>) attempted to express the Navier–Stokes equations using Hamiltonian formalism. He was able to formalize the incompressible Euler equation but stated that his result is not valid for a compressible fluid. More recent attempts, such as Fukagawa &amp; Fujitani (<a href="#ref36"><span>Reference Fukagawa and Fujitani</span>2012</a>), Jones (<a href="#ref56"><span>Reference Jones</span>2015</a>) and Gay-Balmaz &amp; Yoshimura (<a href="#ref39"><span>Reference Gay-Balmaz and Yoshimura</span>2017</a>, <a href="#ref40"><span>Reference Gay-Balmaz and Yoshimura</span>2019<em>a</em></a>,<a href="#ref41"><span>Reference Gay-Balmaz and Yoshimura</span><em>b</em></a>), have enforced dissipation using a non-holonomic constraint on the entropy. Hochgerner (<a href="#ref52"><span>Reference Hochgerner</span>2018</a>) attempted to obtain a Hamiltonian interacting particle system that could accurately model the fluid dynamics. His research separated the dynamics into slow (deterministic) and fast (stochastic) components to capture fine-scale effects. The study was able to derive the Navier–Stokes equation from a stochastic Hamiltonian system but ignored the stress tensor, was unable to separate configuration and momentum variables and did not establish energy conservation or dissipation.</p>
<p> Rashad <em>et&nbsp;al.</em> (<a href="#ref83"><span>Reference Rashad, Califano, Brugnoli, Schuller and Stramigioli</span>2021</a>) modelled the incompressible Navier–Stokes equations in so-called ‘port-Hamiltonian’ framework rather than the standard Hamiltonian framework. Their model used vector calculus instead of exterior calculus to minimize the number of operators. While the main goal of this research was increasing the interest of computational researchers in using vector calculus, they also demonstrated that vector calculus can help in the formulation of individual subsystems of Navier–Stokes equations and boundary ports of the model.</p>
<p> Gonzalez &amp; Taha (<a href="#ref45"><span>Reference Gonzalez and Taha</span>2022</a>), Taha &amp; Gonzalez (<a href="#ref102"><span>Reference Taha and Gonzalez</span>2022</a>) and Taha, Gonzalez &amp; Shorbagy (<a href="#ref103"><span>Reference Taha, Gonzalez and Shorbagy</span>2023</a>) have recently applied Gauss's principle of least constraint (Gauss <a href="#ref38"><span>Reference Gauss</span>1829</a>) to the Navier–Stokes problem. Using Gauss's principle, Taha <em>et&nbsp;al.</em> (<a href="#ref103"><span>Reference Taha, Gonzalez and Shorbagy</span>2023</a>) have shown that, for an incompressible fluid, the magnitude of the pressure gradient is minimum over the domain, which they term the principle of minimum pressure gradient (PMPG). When applied to an inviscid fluid in two dimensions, the PMPG provides a closure condition based in first principles that could be considered a generalization of the Kutta condition to smooth geometries. It should be noted that Gauss's principle (Gauss <a href="#ref38"><span>Reference Gauss</span>1829</a>) is fundamentally different from Hamilton's principle (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>). Whereas the Hamiltonian framework involves an invariant action integral and employs variations in the coordinates (or, in continuum mechanics, the field quantities), Gauss's principle employs variations in the accelerations. As a result, the framework of Gauss's principle does not lead to canonical transformations.</p>
<p> Particularly relevant to the present work, Sanders (<a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>) has shown that the higher-order dynamics are ‘intrinsically variational’, in the sense that higher-derivative versions of the classical equations of motion can be derived from a minimum-action principle even for dissipative systems, thus allowing inherently non-Hamiltonian problems to be treated as though they are Hamiltonian. This discovery has already led to two applications: the direct modal analysis of damped dynamical systems (Sanders <a href="#ref89"><span>Reference Sanders</span>2022</a>) and, subsequently, a new and more efficient algorithm for computing a damped system's resonant frequencies (Sanders &amp; Inman <a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>). Higher-derivative theories had been studied before in the realm of quantum gravity physics (Pais &amp; Uhlenbeck <a href="#ref80"><span>Reference Pais and Uhlenbeck</span>1950</a>; Van den Berg &amp; VanderVorst <a href="#ref113"><span>Reference Van den Berg and VanderVorst</span>2002</a>; Kalies &amp; VanderVorst <a href="#ref59"><span>Reference Kalies and VanderVorst</span>2004</a>; Bender &amp; Mannheim <a href="#ref11"><span>Reference Bender and Mannheim</span>2008</a>; Smilga <a href="#ref97"><span>Reference Smilga</span>2009</a>; Mostafazadeh <a href="#ref75"><span>Reference Mostafazadeh</span>2010</a>; Baleanu <em>et&nbsp;al.</em> <a href="#ref7"><span>Reference Baleanu, Petras, Asad and Velasco</span>2012</a>; Chen <em>et&nbsp;al.</em> <a href="#ref23"><span>Reference Chen, Fasiello, Lim and Tolley</span>2013</a>) but until now they have not been applied to classical fluids. While the Navier–Stokes equations, in their standard form, may be unsuited to Hamiltonian formalism (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>; Doering &amp; Gibbon <a href="#ref29"><span>Reference Doering and Gibbon</span>1995</a>; Hieber <em>et&nbsp;al.</em> <a href="#ref51"><span>Reference Hieber, Robinson and Shibata</span>2017</a>; Lemarie-Rieusset <a href="#ref65"><span>Reference Lemarie-Rieusset</span>2018</a>), it will be shown here that the higher-order dynamics can be used to restate the problem in a form consistent with Hamiltonian and Hamilton–Jacobi formalism.</p>
<p> In conclusion, although the body of research surrounding the Navier–Stokes equations is extensive, it would appear that no canonical Hamiltonian formulation of the Navier–Stokes problem has been found to date. That is what the present work aims to achieve.</p>
</div>
<div data-magellan-destination="sec3" id="sec3">
<h2><span>3.</span> Lagrangian formulation of the problem</h2>
<p> Although we are primarily interested in the incompressible form of the equations given by (<a href="#eqn16">1.16</a>) and (<a href="#eqn17">1.17</a>), here we will begin with the compressible form of the equations, with the understanding that we will eventually take the incompressible limit. For the compressible case, the linear momentum balance and continuity equations are given by
</p><p><span>(3.1)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn21.png?pub-status=live" width="536" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn21.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn21.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \mathcal{R}_{i}[u_{j},p,\rho;x_{k},t]\equiv \rho \dot{u}_{i} + \rho u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji} - \rho b_{i} = 0, \end{gather}$$</span></span></span></p>
<p><span>(3.2)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn22.png?pub-status=live" width="247" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn22.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn22.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\mathcal{R}_{4}[u_{j},\rho]\equiv \dot{\rho} + \rho_{,i}u_{i} + \rho u_{i,i} = 0, \end{gather}$$</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline95.png?pub-status=live" width="88" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline95.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline95.png"><span data-mathjax-type="texmath"><span>$\rho =\rho (x_{j},t)$</span></span></span></span> is the density field (now one of the unknown field quantities along with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline96.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline96.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline96.png"><span data-mathjax-type="texmath"><span>$u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline97.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline97.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline97.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span>), and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline98.png?pub-status=live" width="13" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline98.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline98.png"><span data-mathjax-type="texmath"><span>$\lambda$</span></span></span></span> is an additional viscosity coefficient which, under Stokes's (Stokes <a href="#ref98"><span>Reference Stokes</span>1845</a>) hypothesis, is related to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline99.png?pub-status=live" width="14" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline99.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline99.png"><span data-mathjax-type="texmath"><span>$\mu$</span></span></span></span> as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline100.png?pub-status=live" width="86" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline100.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline100.png"><span data-mathjax-type="texmath"><span>$\lambda =-2\mu /3$</span></span></span></span>, ensuring that the mechanical pressure agrees with the thermodynamic pressure. Henceforth, we will assume that all quantities have been suitably non-dimensionalized. The non-dimensional (constant) viscosities in (<a href="#eqn21">3.1</a>) and (<a href="#eqn22">3.2</a>) may be regarded as inverse Reynolds numbers, and the non-dimensional pressure may be considered to be normalized by the inertial scale <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline101.png?pub-status=live" width="40" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline101.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline101.png"><span data-mathjax-type="texmath"><span>$\rho _0 U^2$</span></span></span></span>, with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline102.png?pub-status=live" width="19" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline102.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline102.png"><span data-mathjax-type="texmath"><span>$\rho _0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline103.png?pub-status=live" width="16" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline103.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline103.png"><span data-mathjax-type="texmath"><span>$U$</span></span></span></span> appropriate density and velocity scales. As we will see later, starting from the compressible form of the equations will allow us to treat the pressure as a dynamical field variable alongside the velocities, rather than simply a Lagrange multiplier. Crucially, this will reveal in no uncertain terms what becomes of the momentum conjugate to the pressure (which will be identified later) in the incompressible limit.</p>
<p> In general, (<a href="#eqn21">3.1</a>) and (<a href="#eqn22">3.2</a>) would be appended with the energy equation, which introduces additional thermodynamic variables, such as temperature and enthalpy or entropy. Two of the thermodynamic variables are designated as ‘primary’, and equations of state are required to relate the remaining variables to the primary variables. Typically, pressure and temperature are chosen as the primary variables, and the equation of state for the density, for example, is expressed as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline104.png?pub-status=live" width="86" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline104.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline104.png"><span data-mathjax-type="texmath"><span>$\rho =\rho (p,T)$</span></span></span></span>. The conservation equations along with the equation of state constitute six equations for the six unknowns fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline105.png?pub-status=live" width="82" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline105.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline105.png"><span data-mathjax-type="texmath"><span>$(u_i,p,T,\rho )$</span></span></span></span>. Henceforth in the present work, we will take the temperature to be constant, though we intend to consider variations in temperature in future work.</p>
<p> An incompressible flow is one for which the material derivative of the density vanishes, i.e. <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline106.png?pub-status=live" width="165" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline106.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline106.png"><span data-mathjax-type="texmath"><span>$\text {d}\rho /\text {d}t=\dot {\rho } + \rho _{,i}u_{i}=0$</span></span></span></span>, and this condition serves as an equation of state. It is usually also assumed, for the sake of simplicity, that the density is both constant and uniform, further reducing the equation of state <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline107.png?pub-status=live" width="86" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline107.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline107.png"><span data-mathjax-type="texmath"><span>$\rho =\rho (p,T)$</span></span></span></span> to specification of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline108.png?pub-status=live" width="51" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline108.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline108.png"><span data-mathjax-type="texmath"><span>$\rho =\rho _0$</span></span></span></span> as a system parameter. Consequently, (<a href="#eqn22">3.2</a>) reduces to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline109.png?pub-status=live" width="68" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline109.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline109.png"><span data-mathjax-type="texmath"><span>$\rho u_{i,i}=0$</span></span></span></span> and the energy equation is decoupled from the system. Accordingly, in the incompressible limit there are only four unknown field quantities <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline110.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline110.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline110.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> and the momentum balance and continuity equations suffice for the governing field equations.</p>
<p> We pause here to remark that all four field equations (<a href="#eqn21">3.1</a>), (<a href="#eqn22">3.2</a>) are first order in time with respect to the field quantities <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline111.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline111.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline111.png"><span data-mathjax-type="texmath"><span>$u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline112.png?pub-status=live" width="12" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline112.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline112.png"><span data-mathjax-type="texmath"><span>$\rho$</span></span></span></span>. This will be important shortly, when we double the order of the equations. It should also be noted, as mentioned previously, that the first-order problem described above is inherently non-Hamiltonian, in that there is no action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline113.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline113.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline113.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}$</span></span></span></span> for which Hamilton's principle (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline114.png?pub-status=live" width="55" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline114.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline114.png"><span data-mathjax-type="texmath"><span>$\delta \mathcal {S}=0$</span></span></span></span>) yields the first-order field equations (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>). Finally, we note that in the incompressible limit, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline115.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline115.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline115.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> becomes independent of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline116.png?pub-status=live" width="12" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline116.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline116.png"><span data-mathjax-type="texmath"><span>$\dot {\rho }$</span></span></span></span> and is no longer first order in time.</p>
<div data-magellan-destination="sec3-1" id="sec3-1">
<h3><span>3.1.</span> Second-order formulation</h3>
<p> Although the first-order formulation of the problem is intrinsically non-Hamiltonian (Millikan <a href="#ref72"><span>Reference Millikan</span>1929</a>; Finlayson <a href="#ref33"><span>Reference Finlayson</span>1972<em>a</em></a>,<a href="#ref34"><span>Reference Finlayson</span><em>b</em></a>), nevertheless a Hamiltonian for the system may be found by considering a second-order formulation. Following Sanders (<a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>), we observe that the actual motion of the fluid corresponds to the particular fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline117.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline117.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline117.png"><span data-mathjax-type="texmath"><span>$(u_{i},p,\rho )$</span></span></span></span> for which the following action achieves a local minimum:
</p><p><span>(3.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn23.png?pub-status=live" width="299" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn23.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn23.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{S}^{*}[u_{j},p,\rho]=\int\text{d}^{4}x(\tfrac{1}{2}\mathcal{R}_{i}\mathcal{R}_{i}+\tfrac{1}{2}\mathcal{R}_{4}\mathcal{R}_{4}), \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline118.png?pub-status=live" width="163" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline118.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline118.png"><span data-mathjax-type="texmath"><span>$\text {d}^{4}x=\text {d}\kern 0.06em x_{1}\,\text {d}\kern 0.06em x_{2}\,\text {d}\kern 0.06em x_{3}\,\text {d}t$</span></span></span></span>, and the integral is carried out over both the control volume <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline119.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline119.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline119.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> occupied by the fluid (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline120.png?pub-status=live" width="53" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline120.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline120.png"><span data-mathjax-type="texmath"><span>$x_{j}\in \mathcal {V}$</span></span></span></span>) and the time period of interest (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline121.png?pub-status=live" width="74" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline121.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline121.png"><span data-mathjax-type="texmath"><span>$t\in [t_{1},t_{2}]$</span></span></span></span>). It must be emphasized that this action contains no new physics. Again, this is simply the principle of least squares (Finlayson <a href="#ref34"><span>Reference Finlayson</span>1972<em>b</em></a>) averaged over the space–time occupied by the fluid. The entire physics of the problem are already contained in the residuals (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline122.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline122.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline122.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline123.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline123.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline123.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span>).</p>
<p> Without an equation of state relating <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline124.png?pub-status=live" width="12" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline124.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline124.png"><span data-mathjax-type="texmath"><span>$\rho$</span></span></span></span> to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline125.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline125.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline125.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span>, the problem is underconstrained with five unknown field quantities and only four dynamical field equations. Anticipating the case of incompressible flow, where the density is constant and the four field quantities are <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline126.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline126.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline126.png"><span data-mathjax-type="texmath"><span>$u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline127.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline127.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline127.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span>, henceforth we will assume an equation of state of the form <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline128.png?pub-status=live" width="65" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline128.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline128.png"><span data-mathjax-type="texmath"><span>$\rho =\hat {\rho }(p)$</span></span></span></span>, with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline129.png?pub-status=live" width="12" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline129.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline129.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }$</span></span></span></span> a known function determined either from first principles or empirically. In this way, the density field may be eliminated in favour of the pressure field, and the field equations assume the following form:
</p><p><span>(3.4)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn24.png?pub-status=live" width="519" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn24.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn24.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \mathcal{R}_{i}[u_{j},p;x_{k},t]\equiv \hat{\rho} \dot{u}_{i} + \hat{\rho} u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji} - \hat{\rho} b_{i} = 0, \end{gather}$$</span></span></span></p>
<p><span>(3.5)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn25.png?pub-status=live" width="274" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn25.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn25.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\mathcal{R}_{4}[u_{j},p]\equiv \hat{\rho}'\dot{p} + \hat{\rho}'p_{,i}u_{i} + \hat{\rho} u_{i,i} = 0, \end{gather}$$</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline130.png?pub-status=live" width="86" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline130.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline130.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'=\text {d}\hat {\rho }/\text {d}p$</span></span></span></span>. We note that, under equilibrium conditions, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline131.png?pub-status=live" width="16" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline131.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline131.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'$</span></span></span></span> is related to the speed of sound <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline132.png?pub-status=live" width="11" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline132.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline132.png"><span data-mathjax-type="texmath"><span>$c$</span></span></span></span> and the bulk modulus <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline133.png?pub-status=live" width="19" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline133.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline133.png"><span data-mathjax-type="texmath"><span>$K$</span></span></span></span> as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline134.png?pub-status=live" width="129" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline134.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline134.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'=1/c^{2}=\rho /K$</span></span></span></span> (for incompressible fluids, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline135.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline135.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline135.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span> and the speed of sound and bulk modulus are both infinite). Having specified <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline136.png?pub-status=live" width="33" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline136.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline136.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }(p)$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline137.png?pub-status=live" width="14" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline137.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline137.png"><span data-mathjax-type="texmath"><span>$\mu$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline138.png?pub-status=live" width="13" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline138.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline138.png"><span data-mathjax-type="texmath"><span>$\lambda$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline139.png?pub-status=live" width="59" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline139.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline139.png"><span data-mathjax-type="texmath"><span>$b_{i}(x_{j},t)$</span></span></span></span>, and having prescribed appropriate auxiliary conditions (initial and boundary conditions), one seeks the four field quantities <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline140.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline140.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline140.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfying the governing field equations and the auxiliary conditions. To recover the case of incompressible flow, we will eventually take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline141.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline141.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline141.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span>.</p>
<p> We pause here to note that, even though the residuals (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline142.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline142.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline142.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline143.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline143.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline143.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span>) vanish for the actual motion, they are not trivially zero. That is, the residuals only vanish for the particular fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline144.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline144.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline144.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> which satisfy the first-order field equations (<a href="#eqn24">3.4</a>) and (<a href="#eqn25">3.5</a>); they do not vanish for every conceivable <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline145.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline145.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline145.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span>. Thus it is not appropriate to take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline146.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline146.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline146.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}\equiv 0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline147.png?pub-status=live" width="57" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline147.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline147.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}\equiv 0$</span></span></span></span>. We will return to this point later when we discuss the Hamiltonian formulation of the problem.</p>
<p> For now, we note that the action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline148.png?pub-status=live" width="106" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline148.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline148.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}=\mathcal {S}^{*}[u_{i},p]$</span></span></span></span> defines a Lagrangian
</p><p><span>(3.6)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn26.png?pub-status=live" width="186" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn26.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn26.png"><span data-mathjax-type="texmath"><span>\begin{equation} L^{*}[u_{i},p;t]=\int \text{d}^{3}x(\mathcal{L}^{*}) , \end{equation}</span></span></span></p><p>
where the integral is carried out over the volume <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline149.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline149.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline149.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> only (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline150.png?pub-status=live" width="143" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline150.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline150.png"><span data-mathjax-type="texmath"><span>$\text {d}^{3}x=\text {d}\kern 0.06em x_{1}\,\text {d}\kern 0.06em x_{2}\,\text {d}\kern 0.06em x_{3}$</span></span></span></span>), with Lagrangian density
</p><p><span>(3.7)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn27.png?pub-status=live" width="262" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn27.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn27.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{L}^{*}[u_{j},p;x_{k},t]=\tfrac{1}{2}\mathcal{R}_{i}\mathcal{R}_{i}+\tfrac{1}{2}\mathcal{R}_{4}\mathcal{R}_{4}. \end{equation}</span></span></span></p><p>
Because the residuals (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline151.png?pub-status=live" width="53" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline151.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline151.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}, \mathcal {R}_{4}$</span></span></span></span>) have been non-dimensionalized, the Lagrangian density is also dimensionless. Once again, even though the Lagrangian vanishes for the actual motion, it is not trivially zero, and it is not appropriate to take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline152.png?pub-status=live" width="54" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline152.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline152.png"><span data-mathjax-type="texmath"><span>$L^{*}\equiv 0$</span></span></span></span>.</p>
<p> As noted above, the actual motion of the fluid corresponds to the particular fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline153.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline153.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline153.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> for which <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline154.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline154.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline154.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> achieves a local minimum. To obtain the Euler–Lagrange equations, the conjugate momenta and the natural auxiliary conditions, we insist that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline155.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline155.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline155.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> not vary to first order (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline156.png?pub-status=live" width="63" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline156.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline156.png"><span data-mathjax-type="texmath"><span>$\delta \mathcal {S}^{*}=0$</span></span></span></span>) under small variations in the fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline157.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline157.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline157.png"><span data-mathjax-type="texmath"><span>$(\delta u_{i},\delta p)$</span></span></span></span>. Evaluating <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline158.png?pub-status=live" width="29" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline158.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline158.png"><span data-mathjax-type="texmath"><span>$\delta \mathcal {S}^{*}$</span></span></span></span>, integrating by parts, and collecting like terms, we find that
</p><p><span>(3.8<em>a</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn28.png?pub-status=live" width="466" height="46" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn28.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn28.png"><span data-mathjax-type="texmath"><span>\begin{align} \delta\mathcal{S}^{*}&amp;=\int\text{d}^{4}x\left\{\left[-\frac{\partial}{\partial t} \left(\hat{\rho}\mathcal{R}_{i}\right) -\frac{\partial}{\partial x_{j}} \left(\hat{\rho} \mathcal{R}_{i}u_{j}\right)+ \hat{\rho} \mathcal{R}_{j}u_{j,i}- \mu \mathcal{R}_{i,jj} \right.\right. \end{align}</span></span></span></p>
<p><span>(3.8<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn29.png?pub-status=live" width="323" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn29.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn29.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad - \left.(\mu+\lambda)\mathcal{R}_{j,ij}+ \hat{\rho}'\mathcal{R}_{4}p_{,i}-\frac{\partial}{\partial x_{i}}\left( \hat{\rho} \mathcal{R}_{4}\right)\right]\delta{u}_{i} \end{align}</span></span></span></p>
<p><span>(3.8<em>c</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn30.png?pub-status=live" width="367" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn30.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn30.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad +\left[\vphantom{\frac{\partial}{\partial t}}\hat{\rho}'\mathcal{R}_{i} \dot{u}_{i}+ \hat{\rho}' \mathcal{R}_{i}u_{i,j}u_{j}- \mathcal{R}_{i,i}- \hat{\rho}' \mathcal{R}_{i}b_{i} + \hat{\rho}''\mathcal{R}_{4}\dot{p}\right. \end{align}</span></span></span></p>
<p><span>(3.8<em>d</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn31.png?pub-status=live" width="434" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn31.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn31.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad -\left.\left.\frac{\partial}{\partial t}\left( \hat{\rho}'\mathcal{R}_{4}\right) + \hat{\rho}''\mathcal{R}_{4}p_{,i}u_{i} - \frac{\partial}{\partial x_{i}}\left( \hat{\rho}'\mathcal{R}_{4}u_{i}\right)+ \hat{\rho}' \mathcal{R}_{4}u_{i,i}\right] \delta p \right\} \end{align}</span></span></span></p>
<p><span>(3.8<em>e</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn32.png?pub-status=live" width="218" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn32.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn32.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad +\int\text{d}^{3}x\left[\hat{\rho}\mathcal{R}_{i} \delta{u}_{i}+\hat{\rho}'\mathcal{R}_{4}\delta{p}\right]_{t_{1}}^ {t_{2}} \end{align}</span></span></span></p>
<p><span>(3.8<em>f</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn33.png?pub-status=live" width="470" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn33.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn33.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad +\int\text{d}^{2}x\,\text{d}t\left\{\left[\hat{\rho} \mathcal{R}_{i}u_{j}n_{j}+\mu \mathcal{R}_{i,j}n_{j}+ (\mu+\lambda)\mathcal{R}_{j,i}n_{j}+\hat{\rho} \mathcal{R}_{4}n_{i}\right]\delta u_{i}\right. \end{align}</span></span></span></p>
<p><span>(3.8<em>g</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn34.png?pub-status=live" width="437" height="23" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn34.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn34.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\quad +\left.\left[- \mu \mathcal{R}_{i}n_{j}- (\mu+\lambda)\mathcal{R}_{j}n_{i}\right]\delta u_{i,j}+\left[\mathcal{R}_{i}n_{i}+\hat{\rho}'\mathcal{R}_{4}u_{i}n_{i}\right]\delta p\right\}, \end{align}</span></span></span></p><p>
where the purely volumetric integral (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline159.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline159.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline159.png"><span data-mathjax-type="texmath"><span>$\text {d}^{3}x$</span></span></span></span>) is carried out over <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline160.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline160.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline160.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span>, the surface integral (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline161.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline161.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline161.png"><span data-mathjax-type="texmath"><span>$\text {d}^{2}x$</span></span></span></span>) is carried out over the boundary <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline162.png?pub-status=live" width="25" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline162.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline162.png"><span data-mathjax-type="texmath"><span>$\partial \mathcal {V}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline163.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline163.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline163.png"><span data-mathjax-type="texmath"><span>$n_{i}$</span></span></span></span> is the unit outward normal vector to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline164.png?pub-status=live" width="25" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline164.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline164.png"><span data-mathjax-type="texmath"><span>$\partial \mathcal {V}$</span></span></span></span>. Note that, because we are using Eulerian coordinates <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline165.png?pub-status=live" width="19" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline165.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline165.png"><span data-mathjax-type="texmath"><span>$x_{j}$</span></span></span></span>, the volume element <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline166.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline166.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline166.png"><span data-mathjax-type="texmath"><span>$\text {d}^{3}x$</span></span></span></span> is not to be varied.</p>
<p> The Euler–Lagrange equations (which hold for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline167.png?pub-status=live" width="53" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline167.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline167.png"><span data-mathjax-type="texmath"><span>$x_{j}\in \mathcal {V}$</span></span></span></span>) may be read directly from the space–time (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline168.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline168.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline168.png"><span data-mathjax-type="texmath"><span>$\text {d}^{4}x$</span></span></span></span>) integral
</p><p><span>(3.9)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn35.png?pub-status=live" width="393" height="90" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn35.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn35.png"><span data-mathjax-type="texmath"><span>\begin{align} \delta{u}_{i}: \quad &amp;{-}\frac{\partial}{\partial t} \left(\hat{\rho}\mathcal{R}_{i}\right) -\frac{\partial}{\partial x_{j}} \left(\hat{\rho} \mathcal{R}_{i}u_{j}\right)+ \hat{\rho} \mathcal{R}_{j}u_{j,i}- \mu \mathcal{R}_{i,jj} \nonumber\\ &amp;- (\mu+\lambda)\mathcal{R}_{j,ij}+ \hat{\rho}'\mathcal{R}_{4}p_{,i}-\frac{\partial}{\partial x_{i}}\left( \hat{\rho} \mathcal{R}_{4}\right)=0, \end{align}</span></span></span></p>
<p><span>(3.10)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn36.png?pub-status=live" width="474" height="69" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn36.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn36.png"><span data-mathjax-type="texmath"><span>\begin{align} \delta p:\quad &amp; \hat{\rho}'\mathcal{R}_{i} \dot{u}_{i}+ \hat{\rho}' \mathcal{R}_{i}u_{i,j}u_{j}- \mathcal{R}_{i,i}- \hat{\rho}' \mathcal{R}_{i}b_{i} + \hat{\rho}''\mathcal{R}_{4}\dot{p} \nonumber\\ &amp;-\frac{\partial}{\partial t}\left( \hat{\rho}'\mathcal{R}_{4}\right) + \hat{\rho}''\mathcal{R}_{4}p_{,i}u_{i} - \frac{\partial}{\partial x_{i}}\left(\hat{\rho}'\mathcal{R}_{4}u_{i}\right)+ \hat{\rho}' \mathcal{R}_{4}u_{i,i} =0. \end{align}</span></span></span></p><p>
It should be noted that all four Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) are second order in time, as they involve time derivatives of the residuals. By doubling the order of the equations, we have put the problem in Hamiltonian form, consistent with the general result of Sanders (<a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>). We also note that all four Euler–Lagrange equations of the second-order formulation are automatically satisfied by the solution to the first-order formulation (i.e. the actual motion), for which <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline169.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline169.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline169.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline170.png?pub-status=live" width="57" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline170.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline170.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}=0$</span></span></span></span> everywhere and at all times.</p>
<p> Corresponding to each of the four field quantities is a canonically conjugate ‘momentum’ field, which can be read from (<a href="#eqn32">3.8<em>e</em></a>). The momenta conjugate to the velocities <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline171.png?pub-status=live" width="18" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline171.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline171.png"><span data-mathjax-type="texmath"><span>$u_{i}$</span></span></span></span> are
</p><p><span>(3.11)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn37.png?pub-status=live" width="76" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn37.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn37.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm \pi}_{i}\equiv \hat{\rho}\mathcal{R}_{i}, \end{equation}</span></span></span></p><p>
and the momentum conjugate to the pressure <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline172.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline172.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline172.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span> is
</p><p><span>(3.12)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn38.png?pub-status=live" width="85" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn38.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn38.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm \pi}_{4}\equiv \hat{\rho}'\mathcal{R}_{4}. \end{equation}</span></span></span></p><p>
In the forthcoming Hamiltonian formulation, the conjugate momenta will be used to eliminate the (partial) time derivatives <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline173.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline173.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline173.png"><span data-mathjax-type="texmath"><span>$(\dot {u}_{i},\dot {p})$</span></span></span></span> of the field quantities from the Hamiltonian. In general, Hamilton's principle would insist that the variations <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline174.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline174.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline174.png"><span data-mathjax-type="texmath"><span>$(\delta u_{i},\delta p)$</span></span></span></span> vanish at the endpoints <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline175.png?pub-status=live" width="45" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline175.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline175.png"><span data-mathjax-type="texmath"><span>$t=t_{1}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline176.png?pub-status=live" width="45" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline176.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline176.png"><span data-mathjax-type="texmath"><span>$t=t_{2}$</span></span></span></span> to ensure that the purely volumetric integral (<a href="#eqn32">3.8<em>e</em></a>) vanishes identically. Interestingly, for the actual motion (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline177.png?pub-status=live" width="117" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline177.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline177.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}=0,\mathcal {R}_{4}=0$</span></span></span></span>), the volumetric integral (<a href="#eqn32">3.8<em>e</em></a>) already vanishes even without taking <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline178.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline178.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline178.png"><span data-mathjax-type="texmath"><span>$(\delta u_{i},\delta p)$</span></span></span></span> to vanish at <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline179.png?pub-status=live" width="16" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline179.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline179.png"><span data-mathjax-type="texmath"><span>$t_{1}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline180.png?pub-status=live" width="16" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline180.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline180.png"><span data-mathjax-type="texmath"><span>$t_{2}$</span></span></span></span>. We interpret this to mean that the actual motion is the natural evolution of the second-order formulation (Sanders <a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>).</p>
<p> Although the conjugate momenta (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline181.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline181.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline181.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline182.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline182.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline182.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span>) do not coincide with conventional linear or angular momenta, there is nonetheless a curious mathematical connection between the conjugate momenta and the linear momentum density <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline183.png?pub-status=live" width="67" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline183.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline183.png"><span data-mathjax-type="texmath"><span>$P_{i}=\rho u_{i}$</span></span></span></span>, which we will see presently from the natural boundary conditions. These are read directly from the surface (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline184.png?pub-status=live" width="30" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline184.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline184.png"><span data-mathjax-type="texmath"><span>$\text {d}^{2}x$</span></span></span></span>) integral
</p><p><span>(3.13)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn39.png?pub-status=live" width="432" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn39.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn39.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \delta u_{i}:\quad \hat{\rho} \mathcal{R}_{i}u_{j}n_{j}+\mu \mathcal{R}_{i,j}n_{j}+ (\mu+\lambda)\mathcal{R}_{j,i}n_{j}+\hat{\rho} \mathcal{R}_{4}n_{i}=0, \end{gather}$$</span></span></span></p>
<p><span>(3.14)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn40.png?pub-status=live" width="281" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn40.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn40.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\delta u_{i,j}:\quad - \mu \mathcal{R}_{i}n_{j}- (\mu+\lambda)\mathcal{R}_{j}n_{i}=0, \end{gather}$$</span></span></span></p>
<p><span>(3.15)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn41.png?pub-status=live" width="213" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn41.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn41.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\delta p:\quad\mathcal{R}_{i}n_{i}+\hat{\rho}'\mathcal{R}_{4}u_{i}n_{i}=0. \end{gather}$$</span></span></span></p><p>
This last condition, (<a href="#eqn41">3.15</a>), establishes a connection between the new conjugate momenta and the conventional linear momenta. Multiplying (<a href="#eqn41">3.15</a>) by <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline185.png?pub-status=live" width="12" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline185.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline185.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }$</span></span></span></span>, and noting that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline186.png?pub-status=live" width="114" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline186.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline186.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }u_{i}=\rho u_{i}= P_{i}$</span></span></span></span>, we find that
</p><p><span>(3.16)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn42.png?pub-status=live" width="142" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn42.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn42.png"><span data-mathjax-type="texmath"><span>\begin{equation} ({\rm \pi}_{i}+{\rm \pi}_{4}P_{i})n_{i}=0. \end{equation}</span></span></span></p><p>
Evidently, boundary condition (<a href="#eqn41">3.15</a>) states that the flux of the vector <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline187.png?pub-status=live" width="120" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline187.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline187.png"><span data-mathjax-type="texmath"><span>$\varPi _{i}\equiv {\rm \pi}_{i}+{\rm \pi} _{4}P_{i}$</span></span></span></span> through the boundary <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline188.png?pub-status=live" width="25" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline188.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline188.png"><span data-mathjax-type="texmath"><span>$\partial \mathcal {V}$</span></span></span></span> should vanish. It is interesting that this new vector <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline189.png?pub-status=live" width="22" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline189.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline189.png"><span data-mathjax-type="texmath"><span>$\varPi _{i}$</span></span></span></span> contains both old and new momenta, with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline190.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline190.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline190.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span> ‘carried’ (i.e. given direction) by <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline191.png?pub-status=live" width="19" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline191.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline191.png"><span data-mathjax-type="texmath"><span>$P_{i}$</span></span></span></span>. The actual physical meaning of these natural boundary conditions is less clear and may require further investigation.</p>
</div>
<div data-magellan-destination="sec3-2" id="sec3-2">
<h3><span>3.2.</span> Equivalence of the first- and second-order formulations</h3>
<p> The first- and second-order formulations are mathematically equivalent, in the sense that imposing identical auxiliary conditions on the two formulations will yield identical solutions <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline192.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline192.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline192.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span>. In other words, with identical auxiliary conditions, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline193.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline193.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline193.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> is a solution to the first-order formulation if and only if the same <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline194.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline194.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline194.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> is a solution to the second-order formulation.</p>
<p> The proof is straightforward. Consider the two formulations separately, and impose on the second-order formulation identical auxiliary conditions to those of the first-order formulation. In particular, just like the simple example given in §&nbsp;<a href="#sec1-1">1.1</a>, the second-order formulation requires additional auxiliary conditions over and above those applied to the first-order formulation. These include initial conditions making <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline195.png?pub-status=live" width="103" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline195.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline195.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}(x_{k},0)=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline196.png?pub-status=live" width="105" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline196.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline196.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}(x_{k},0)=0$</span></span></span></span> for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline197.png?pub-status=live" width="96" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline197.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline197.png"><span data-mathjax-type="texmath"><span>$x_{k}\in \mathcal {V}\cup \partial \mathcal {V}$</span></span></span></span>, along with boundary conditions making <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline198.png?pub-status=live" width="101" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline198.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline198.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}(x_{k},t)=0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline199.png?pub-status=live" width="111" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline199.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline199.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i,j}(x_{k},t)=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline200.png?pub-status=live" width="103" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline200.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline200.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}(x_{k},t)=0$</span></span></span></span> for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline201.png?pub-status=live" width="65" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline201.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline201.png"><span data-mathjax-type="texmath"><span>$x_{k}\in \partial \mathcal {V}$</span></span></span></span> and all times <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline202.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline202.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline202.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span>. By supposition, the auxiliary conditions applied to the two formulations are identical, so it suffices to show that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline203.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline203.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline203.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the governing field equations (<a href="#eqn24">3.4</a>), (<a href="#eqn25">3.5</a>) of the first-order formulation (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline204.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline204.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline204.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline205.png?pub-status=live" width="57" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline205.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline205.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}=0$</span></span></span></span>) everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline206.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline206.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline206.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times if and only if <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline207.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline207.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline207.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline208.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline208.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline208.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times.</p>
<p> Suppose first that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline209.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline209.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline209.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the governing field equations (<a href="#eqn24">3.4</a>), (<a href="#eqn25">3.5</a>) of the first-order formulation everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline210.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline210.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline210.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times. Then <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline211.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline211.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline211.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}=0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline212.png?pub-status=live" width="57" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline212.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline212.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}=0$</span></span></span></span>, and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline213.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline213.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline213.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> is a trivial solution to the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation.</p>
<p> Conversely, suppose that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline214.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline214.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline214.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline215.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline215.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline215.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times. We note that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline216.png?pub-status=live" width="128" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline216.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline216.png"><span data-mathjax-type="texmath"><span>$(\mathcal {R}_{i}=0,\mathcal {R}_{4}=0)$</span></span></span></span> constitutes an equilibrium solution of the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>). Thus, because the initial conditions are chosen such that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline217.png?pub-status=live" width="103" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline217.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline217.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}(x_{k},0)=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline218.png?pub-status=live" width="105" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline218.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline218.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}(x_{k},0)=0$</span></span></span></span> for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline219.png?pub-status=live" width="96" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline219.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline219.png"><span data-mathjax-type="texmath"><span>$x_{k}\in \mathcal {V}\cup \partial \mathcal {V}$</span></span></span></span>, and because the boundary conditions are chosen such that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline220.png?pub-status=live" width="101" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline220.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline220.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}(x_{k},t)=0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline221.png?pub-status=live" width="111" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline221.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline221.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i,j}(x_{k},t)=0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline222.png?pub-status=live" width="103" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline222.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline222.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}(x_{k},t)=0$</span></span></span></span> for all <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline223.png?pub-status=live" width="65" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline223.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline223.png"><span data-mathjax-type="texmath"><span>$x_{k}\in \partial \mathcal {V}$</span></span></span></span> and all times <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline224.png?pub-status=live" width="9" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline224.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline224.png"><span data-mathjax-type="texmath"><span>$t$</span></span></span></span>, then <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline225.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline225.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline225.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline226.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline226.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline226.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> will remain identically zero everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline227.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline227.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline227.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> for all future times. Thus, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline228.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline228.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline228.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> satisfies the governing field equations (<a href="#eqn24">3.4</a>), (<a href="#eqn25">3.5</a>) of the first-order formulation everywhere in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline229.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline229.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline229.png"><span data-mathjax-type="texmath"><span>$\mathcal {V}$</span></span></span></span> and at all times. This completes the proof, and we have established that the two formulations are equivalent.</p>
</div>
</div>
<div data-magellan-destination="sec4" id="sec4">
<h2><span>4.</span> Hamiltonian formulation of the problem</h2>
<p> We are now ready to proceed with the Hamiltonian formulation of the problem. The Lagrangian <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline230.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline230.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline230.png"><span data-mathjax-type="texmath"><span>$L^{*}$</span></span></span></span> has a corresponding Hamiltonian
</p><p><span>(4.1)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn43.png?pub-status=live" width="137" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn43.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn43.png"><span data-mathjax-type="texmath"><span>\begin{equation} H^{*}=\int \text{d}^{3}x(\mathcal{H}^{*}) , \end{equation}</span></span></span></p><p>
with the Hamiltonian density <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline231.png?pub-status=live" width="24" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline231.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline231.png"><span data-mathjax-type="texmath"><span>$\mathcal {H}^{*}$</span></span></span></span> obtained from the Lagrangian density <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline232.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline232.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline232.png"><span data-mathjax-type="texmath"><span>$\mathcal {L}^{*}$</span></span></span></span> via the Legendre transform
</p><p><span>(4.2)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn44.png?pub-status=live" width="431" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn44.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn44.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{H}^{*}={\rm \pi}_{i}\dot{u}_{i}+{\rm \pi}_{4}\dot{p}-\mathcal{L}^{*}={\rm \pi}_{i}\dot{u}_{i}+{\rm \pi}_{4}\dot{p}-\tfrac{1}{2}\mathcal{R}_{i}\mathcal{R}_{i}-\tfrac{1}{2}\mathcal{R}_{4}\mathcal{R}_{4}. \end{equation}</span></span></span></p><p>
Again, this <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline233.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline233.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline233.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> has nothing to do with the total mechanical energy of the system, although it is a conserved quantity, since <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline234.png?pub-status=live" width="58" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline234.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline234.png"><span data-mathjax-type="texmath"><span>$H^{*}=0$</span></span></span></span> for the actual motion – just as in the example of §&nbsp;<a href="#sec1-1">1.1</a>. In order to write down Hamilton's equations, we must express <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline235.png?pub-status=live" width="24" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline235.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline235.png"><span data-mathjax-type="texmath"><span>$\mathcal {H}^{*}$</span></span></span></span> in terms of the fields and the conjugate momenta, eliminating <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline236.png?pub-status=live" width="18" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline236.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline236.png"><span data-mathjax-type="texmath"><span>$\dot {u}_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline237.png?pub-status=live" width="13" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline237.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline237.png"><span data-mathjax-type="texmath"><span>$\dot {p}$</span></span></span></span>.</p>
<p> Observe that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline238.png?pub-status=live" width="82" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline238.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline238.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i}={\rm \pi} _{i}/\hat {\rho }$</span></span></span></span>, and ignoring for the moment the incompressible limit, we may write <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline239.png?pub-status=live" width="90" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline239.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline239.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}={\rm \pi} _{4}/\hat {\rho }'$</span></span></span></span> (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline240.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline240.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline240.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\neq 0$</span></span></span></span>). In this way, using the functional expressions for the residuals given by (<a href="#eqn24">3.4</a>) and (<a href="#eqn25">3.5</a>), we find that
</p><p><span>(4.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn45.png?pub-status=live" width="459" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn45.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn45.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \dot{u}_{i}=\frac{1}{(\hat{\rho})^{2}}{{\rm \pi}_{i}}-\frac{1}{\hat{\rho}}\left(\hat{\rho}u_{i,j}u_{j} +{ p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji}} - \hat{\rho}b_{i}\right); \end{gather}$$</span></span></span></p>
<p><span>(4.4)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn46.png?pub-status=live" width="330" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn46.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn46.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\dot{p}=\frac{1}{(\hat{\rho}')^{2}}{{\rm \pi}_{4}}-\frac{1}{\hat{\rho}'}\left({\hat{\rho}'p_{,i}u_{i} + \hat{\rho}u_{i,i}}\right), \quad \hat{\rho}'\neq0; \end{gather}$$</span></span></span></p><p>
and
</p><p><span>(4.5)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn47.png?pub-status=live" width="638" height="89" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn47.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn47.png"><span data-mathjax-type="texmath"><span>\begin{align} \mathcal{H}^{*}[u_{i},p,{\rm \pi}_{j},{\rm \pi}_{4};x_{k},t]&amp;=\frac{1}{2}\frac{1}{(\hat{\rho})^{2}}{{\rm \pi}_{i}{\rm \pi}_{i}}-\frac{1}{\hat{\rho}}(\hat{\rho}u_{i,j}u_{j} +{p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji}} - \hat{\rho}b_{i}){\rm \pi}_{i}\nonumber\\ &amp;\quad +\frac{1}{2}\frac{1}{(\hat{\rho}')^{2}}{{\rm \pi}_{4}{\rm \pi}_{4}}-\frac{1}{\hat{\rho}'}({\hat{\rho}'p_{,i}u_{i} + \hat{\rho}u_{i,i}}){\rm \pi}_{4}, \quad \hat{\rho}'\neq0. \end{align}</span></span></span></p><p>
Hamilton's equations (Hamilton <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>) are as follows:
</p><p><span>(4.6<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn48.png?pub-status=live" width="175" height="42" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn48.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn48.png"><span data-mathjax-type="texmath"><span>$$\begin{gather} \dot{u}_{i}=\frac{\delta H^{*}}{\delta{\rm \pi}_{i}}, \quad\dot{p}=\frac{\delta H^{*}}{\delta{\rm \pi}_{4}}, \end{gather}$$</span></span></span></p>
<p><span>(4.7<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn49.png?pub-status=live" width="214" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn49.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn49.png"><span data-mathjax-type="texmath"><span>$$\begin{gather}\dot{\rm \pi}_{i}={-}\frac{\delta H^{*}}{\delta u_{i}}, \quad \dot{\rm \pi}_{4}={-}\frac{\delta H^{*}}{\delta p}, \end{gather}$$</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline241.png?pub-status=live" width="67" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline241.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline241.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta u_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline242.png?pub-status=live" width="61" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline242.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline242.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta p$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline243.png?pub-status=live" width="68" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline243.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline243.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta {\rm \pi}_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline244.png?pub-status=live" width="70" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline244.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline244.png"><span data-mathjax-type="texmath"><span>$\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> are the Volterra (Volterra <a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline245.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline245.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline245.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> with respect to the field quantities and the conjugate momenta. Equations (<a href="#eqn48">4.6<em>a</em>,<em>b</em></a>) reproduce (<a href="#eqn45">4.3</a>) and (<a href="#eqn46">4.4</a>), respectively. Equations (<a href="#eqn49">4.7<em>a</em>,<em>b</em></a>) in turn reproduce the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation.</p>
<p> We return now to our previous observation concerning the vanishing of the residuals. While <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline246.png?pub-status=live" width="25" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline246.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline246.png"><span data-mathjax-type="texmath"><span>$H^{*}$</span></span></span></span> vanishes for the particular fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline247.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline247.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline247.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span> that satisfy the governing field equations (<a href="#eqn24">3.4</a>), (<a href="#eqn25">3.5</a>) of the first-order formulation, it does not vanish for every conceivable <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline248.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline248.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline248.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span>. The latter would imply, according to (<a href="#eqn48">4.6<em>a</em>,<em>b</em></a>), that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline249.png?pub-status=live" width="50" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline249.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline249.png"><span data-mathjax-type="texmath"><span>$\dot {u}_{i}\equiv 0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline250.png?pub-status=live" width="44" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline250.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline250.png"><span data-mathjax-type="texmath"><span>$\dot {p}\equiv 0$</span></span></span></span>, which is not generally the case. This observation, and the fact that (<a href="#eqn49">4.7<em>a</em>,<em>b</em></a>) faithfully reproduce the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) of the second-order formulation, confirm that the Hamiltonian formulation described above is, in fact, a legitimate reformulation of the problem. In the following section, we develop the Hamilton–Jacobi theory as it relates to the present formulation, the goal being to find a canonical transformation to a new set of fields (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline251.png?pub-status=live" width="44" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline251.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline251.png"><span data-mathjax-type="texmath"><span>$\phi _{i}, \phi _{4}$</span></span></span></span>) and conjugate momenta for which the Hamiltonian does vanish identically.</p>
<p> To obtain the Hamiltonian for incompressible flow, we set <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline252.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline252.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline252.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span> from the beginning, in which case <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline253.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline253.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline253.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> reduces to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline254.png?pub-status=live" width="36" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline254.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline254.png"><span data-mathjax-type="texmath"><span>$\hat {\rho } u_{i,i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline255.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline255.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline255.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span> vanishes identically, consistent with the fact that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline256.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline256.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline256.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> becomes independent of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline257.png?pub-status=live" width="13" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline257.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline257.png"><span data-mathjax-type="texmath"><span>$\dot {p}$</span></span></span></span>. The Hamiltonian density in turn reduces to
</p><p><span>(4.8)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn50.png?pub-status=live" width="229" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn50.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn50.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{H}^{*}={\rm \pi}_{i}\dot{u}_{i}-\tfrac{1}{2}\mathcal{R}_{i}\mathcal{R}_{i}, \quad \hat{\rho}'\equiv0, \end{equation}</span></span></span></p><p>
or, in terms of the conjugate momenta,
</p><p><span>(4.9)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn51.png?pub-status=live" width="565" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn51.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn51.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{H}^{*}[u_{i},p,{\rm \pi}_{j};x_{k},t]=\frac{1}{2}\frac{1}{{\rho}^{2}}{{\rm \pi}_{i}{\rm \pi}_{i}}-\frac{1}{\rho}({\rho}u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - {\rho}b_{i}){\rm \pi}_{i}, \quad \hat{\rho}'\equiv0,\end{equation}</span></span></span></p><p>
where the density <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline258.png?pub-status=live" width="44" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline258.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline258.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }=\rho$</span></span></span></span> is a constant and we have used the fact that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline259.png?pub-status=live" width="59" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline259.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline259.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=0$</span></span></span></span>. Hamilton's equations <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline260.png?pub-status=live" width="108" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline260.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline260.png"><span data-mathjax-type="texmath"><span>$\dot {u}_{i}=\delta H^{*}/\delta {\rm \pi}_{i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline261.png?pub-status=live" width="120" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline261.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline261.png"><span data-mathjax-type="texmath"><span>$\dot {{\rm \pi} }_{i}=-\delta H^{*}/\delta u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline262.png?pub-status=live" width="149" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline262.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline262.png"><span data-mathjax-type="texmath"><span>$0\equiv \dot {{\rm \pi} }_{4}=-\delta H^{*}/\delta p$</span></span></span></span> still apply (and reproduce the corresponding equations in the incompressible limit), but <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline263.png?pub-status=live" width="104" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline263.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline263.png"><span data-mathjax-type="texmath"><span>$\dot {p}=\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> must be replaced by the constraint that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline264.png?pub-status=live" width="59" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline264.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline264.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=0$</span></span></span></span>. That the incompressibility condition should take the place of the pressure equation <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline265.png?pub-status=live" width="104" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline265.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline265.png"><span data-mathjax-type="texmath"><span>$\dot {p}=\delta H^{*}/\delta {\rm \pi}_{4}$</span></span></span></span> is consistent with the well-known result that the pressure usually serves as the Lagrange multiplier for the incompressibility constraint (Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>; Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>).</p>
<div data-magellan-destination="sec4-1" id="sec4-1">
<h3><span>4.1.</span> Hamilton–Jacobi equation</h3>
<p> One of the most significant aspects of the Hamiltonian formalism is that it leads to the transformation theory of Hamilton (<a href="#ref48"><span>Reference Hamilton</span>1833</a>, <a href="#ref49"><span>Reference Hamilton</span>1834</a>, <a href="#ref50"><span>Reference Hamilton</span>1835</a>) and Jacobi (<a href="#ref54"><span>Reference Jacobi</span>1837</a>, <a href="#ref55"><span>Reference Jacobi</span>1842–1843</a>) (see Whittaker (<a href="#ref117"><span>Reference Whittaker</span>1904</a>) and Lanczos (<a href="#ref63"><span>Reference Lanczos</span>1970</a>)), celebrated both for unifying particle mechanics with wave optics (Hamilton <a href="#ref48"><span>Reference Hamilton</span>1833</a>) and for its relationship to the Schrödinger equation of quantum mechanics (Schrödinger <a href="#ref93"><span>Reference Schrödinger</span>1926<em>a</em></a>,<a href="#ref94"><span>Reference Schrödinger</span><em>b</em></a>). Here, we will obtain a Hamilton–Jacobi equation representing the Navier–Stokes problem.</p>
<p> In the context of discrete mechanics, Hamilton's principal function is obtained as the solution to the Hamilton–Jacobi equation, which is in turn defined by the functional form of the Hamiltonian. Hamilton's principal function provides the generating function for a canonical transformation to a new set of generalized coordinates and conjugate momenta for which the Hamiltonian vanishes identically, in which case Hamilton's equations do, in fact, become trivial. The new coordinates and their conjugate momenta are simply equal to their initial values.</p>
<p> In the present context, the role of Hamilton's principal function is played by a characteristic functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline266.png?pub-status=live" width="119" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline266.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline266.png"><span data-mathjax-type="texmath"><span>${S}^{*}={S}^{*}[u_{i},p,t]$</span></span></span></span> (not to be confused with the action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline267.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline267.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline267.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span>, although they are related; see <a href="#app1">Appendix&nbsp;A</a>), which is the solution to the following Hamilton–Jacobi equation:
</p><p><span>(4.10)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn52.png?pub-status=live" width="264" height="46" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn52.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn52.png"><span data-mathjax-type="texmath"><span>\begin{equation} {H}^{*}\left[u_{i},p,\frac{\delta {S}^{*}}{\delta u_{j}},\frac{\delta {S}^{*}}{\delta p};t\right]+\frac{\partial {S}^{*}}{\partial t}=0, \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline268.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline268.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline268.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta u_{i}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline269.png?pub-status=live" width="57" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline269.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline269.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta p$</span></span></span></span> are the Volterra (Volterra <a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline270.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline270.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline270.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> with respect to the field quantities. Interested readers will find the derivation of (<a href="#eqn52">4.10</a>) in <a href="#app1">Appendix&nbsp;A</a>. Henceforth, we will refer to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline271.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline271.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline271.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> as ‘Hamilton's principal functional’. Substituting for the conjugate momenta in (<a href="#eqn47">4.5</a>), we obtain for the Hamilton–Jacobi equation
</p><p><span>(4.11)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn53.png?pub-status=live" width="565" height="93" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn53.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn53.png"><span data-mathjax-type="texmath"><span>\begin{align} &amp;\int \text{d}^{3}x\left[\frac{1}{2}\frac{1}{(\hat{\rho})^{2}}\frac{\delta {S}^{*}}{\delta u_{i}}\frac{\delta {S}^{*}}{\delta u_{i}}-\frac{1}{\hat{\rho}}\left(\hat{\rho}u_{i,j}u_{j} +{ p_{,i} - \mu u_{i,jj} - (\mu+\lambda)u_{j,ji}} - \hat{\rho}b_{i}\right)\frac{\delta {S}^{*}}{\delta u_{i}}\right. \nonumber\\ &amp;\quad \left.+\,\frac{1}{2}\frac{1}{(\hat{\rho}')^{2}}\frac{\delta {S}^{*}}{\delta p}\frac{\delta {S}^{*}}{\delta p}-\frac{1}{\hat{\rho}'}\left({\hat{\rho}'p_{,i}u_{i} + \hat{\rho}u_{i,i}}\right)\frac{\delta {S}^{*}}{\delta p}\right]+\frac{\partial {S}^{*}}{\partial t}=0, \quad \hat{\rho}'\neq0. \end{align}</span></span></span></p><p>
In contrast to the four original field equations – (<a href="#eqn21">3.1</a>) and (<a href="#eqn22">3.2</a>) – the Hamilton–Jacobi equation (<a href="#eqn53">4.11</a>) is a single equation in Hamilton's principal functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline272.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline272.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline272.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span>. This constitutes an equivalent formulation of the problem, as a complete and non-trivial solution to (<a href="#eqn53">4.11</a>) is tantamount to an integration of Hamilton's equations (<a href="#eqn48">4.6<em>a</em>,<em>b</em></a>) and (<a href="#eqn49">4.7<em>a</em>,<em>b</em></a>) (note that it is not appropriate to take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline273.png?pub-status=live" width="54" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline273.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline273.png"><span data-mathjax-type="texmath"><span>${S}^{*}\equiv 0$</span></span></span></span> for the same reason that it is not appropriate to take <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline274.png?pub-status=live" width="58" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline274.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline274.png"><span data-mathjax-type="texmath"><span>$H^{*}\equiv 0$</span></span></span></span>). In this way, we have reduced the problem of finding four separate field quantities to that of finding a single functional in those field quantities. One need only deduce (or even guess) the general form of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline275.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline275.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline275.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> in order to solve the problem. If an analytical expression for <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline276.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline276.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline276.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> can be obtained, it will lead via canonical transformation to a new set of fields (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline277.png?pub-status=live" width="44" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline277.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline277.png"><span data-mathjax-type="texmath"><span>$\phi _{i}, \phi _{4}$</span></span></span></span>) and conjugate momenta which are simply equal to their initial values, giving analytical expressions for the four original fields <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline278.png?pub-status=live" width="46" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline278.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline278.png"><span data-mathjax-type="texmath"><span>$(u_{i},p)$</span></span></span></span>.</p>
<p> The case of incompressible flow requires care, as <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline279.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline279.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline279.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline280.png?pub-status=live" width="16" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline280.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline280.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'$</span></span></span></span> appears in the denominators of terms in (<a href="#eqn53">4.11</a>). Even so, the Hamiltonian formulation remains well posed in the incompressible limit. Recall that, with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline281.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline281.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline281.png"><span data-mathjax-type="texmath"><span>$\hat {\rho }'\equiv 0$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline282.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline282.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline282.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{4}$</span></span></span></span> reduces to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline283.png?pub-status=live" width="36" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline283.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline283.png"><span data-mathjax-type="texmath"><span>$\hat {\rho } u_{i,i}$</span></span></span></span>, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline284.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline284.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline284.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span> vanishes identically and the Hamiltonian density reduces to (<a href="#eqn51">4.9</a>). Substituting for the conjugate momenta <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline285.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline285.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline285.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{i}$</span></span></span></span> in (<a href="#eqn51">4.9</a>), the corresponding Hamilton–Jacobi equation is
</p><p><span>(4.12)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn54.png?pub-status=live" width="609" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn54.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn54.png"><span data-mathjax-type="texmath"><span>\begin{align} \int \text{d}^{3}x\left[\frac{1}{2}\frac{1}{{\rho}^{2}}\frac{\delta {S}^{*}}{\delta u_{i}}\frac{\delta {S}^{*}}{\delta u_{i}}-\frac{1}{\rho}({\rho}u_{i,j}u_{j} + p_{,i} - \mu u_{i,jj} - {\rho}b_{i})\frac{\delta {S}^{*}}{\delta u_{i}}\right]+\frac{\partial {S}^{*}}{\partial t}=0, \quad \hat{\rho}'\equiv0, \end{align}</span></span></span></p><p>
with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline286.png?pub-status=live" width="88" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline286.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline286.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta p=0$</span></span></span></span>, since again <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline287.png?pub-status=live" width="21" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline287.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline287.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}$</span></span></span></span> vanishes identically for incompressible flow. Here, the merit of starting from the compressible form of the equations becomes fully evident, as it would not necessarily have been clear that <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline288.png?pub-status=live" width="57" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline288.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline288.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta p$</span></span></span></span> should vanish in the incompressible limit without knowing that in general <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline289.png?pub-status=live" width="80" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline289.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline289.png"><span data-mathjax-type="texmath"><span>${\rm \pi} _{4}=\hat {\rho }'\mathcal {R}_{4}$</span></span></span></span>. This is the form of the Hamilton–Jacobi equation as it relates to the traditional Navier–Stokes problem. In this case, the pressure is determined last of all, and is whatever it needs to be to enforce the incompressibility constraint <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline290.png?pub-status=live" width="59" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline290.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline290.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=0$</span></span></span></span> (again consistent with the role of pressure as Lagrange multiplier Lanczos <a href="#ref63"><span>Reference Lanczos</span>1970</a>; Badin &amp; Crisciani <a href="#ref6"><span>Reference Badin and Crisciani</span>2018</a>).</p>
<p> It must be acknowledged that the Hamilton–Jacobi equation developed above (either (<a href="#eqn53">4.11</a>) for the compressible case or (<a href="#eqn54">4.12</a>) in the incompressible limit) contains Volterra (<a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives and is thus by no means trivial to solve. Indeed, it appears that solving such equations is itself a long-standing open problem in mathematics, which has received very little attention since the first half of the twentieth century (Michal <a href="#ref71"><span>Reference Michal</span>1926</a>; Jordan &amp; Pauli <a href="#ref57"><span>Reference Jordan and Pauli</span>1928</a>; Levy <a href="#ref66"><span>Reference Levy</span>1951</a>; Tatarskii <a href="#ref105"><span>Reference Tatarskii</span>1961</a>; Syavavko &amp; Mel'nichak <a href="#ref101"><span>Reference Syavavko and Mel'nichak</span>1974</a>; Dieudonne <a href="#ref28"><span>Reference Dieudonne</span>1981</a>; Koval'chik <a href="#ref61"><span>Reference Koval'chik</span>1993</a>). Nevertheless, if a rigorous theory of such equations can be developed, the present formulation of the Navier–Stokes problem might be solved as one special case. The present authors submit that such an endeavour is worthwhile and merits further study.</p>
<p> We conclude this section by remarking that, in the inviscid limit (<span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline291.png?pub-status=live" width="78" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline291.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline291.png"><span data-mathjax-type="texmath"><span>$\mu =\lambda =0$</span></span></span></span>), all of the preceding formalism remains perfectly well posed. In that limit, the present approach yields a mathematically equivalent second-order formulation of the inviscid Euler equations, as one would expect. Interested readers will find the full details in <a href="#app2">Appendix&nbsp;B</a>.</p>
</div>
</div>
<div data-magellan-destination="sec5" id="sec5">
<h2><span>5.</span> Discussion</h2>
<p> In this section we provide some qualitative interpretations of the developments of §&nbsp;<a href="#sec3">3</a>. More specifically, we investigate the incompressible form (via constant, uniform density) of the Euler–Lagrange equations (<a href="#eqn35">3.9</a>) and (<a href="#eqn36">3.10</a>) when the residuals <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline292.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline292.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline292.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline293.png?pub-status=live" width="25" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline293.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline293.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_4$</span></span></span></span> are substituted.</p>
<p> Our motivation is again the simple example of §&nbsp;<a href="#sec1-1">1.1</a> for which the first-order non-Hamiltonian system <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline294.png?pub-status=live" width="57" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline294.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline294.png"><span data-mathjax-type="texmath"><span>$\dot {v}=-v$</span></span></span></span> was converted to the second-order Hamiltonian system <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline295.png?pub-status=live" width="44" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline295.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline295.png"><span data-mathjax-type="texmath"><span>$\ddot {v}=v$</span></span></span></span> by (manual) elimination of the non-conservative ‘damping’ term <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline296.png?pub-status=live" width="12" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline296.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline296.png"><span data-mathjax-type="texmath"><span>$\dot {v}$</span></span></span></span> (see Sanders (<a href="#ref89"><span>Reference Sanders</span>2022</a>) for a similar result for the damped harmonic oscillator converting from second-order to fourth-order dynamics). Sanders (<a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>) showed that the elimination process is ‘automated’ by the definition of the action in the first integral of (<a href="#eqn3">1.3</a>), which is generalized to the action in (<a href="#eqn23">3.3</a>) for our current continuum dynamics problem containing fields.</p>
<p> First consider the pressure equation (<a href="#eqn36">3.10</a>) and corresponding natural boundary condition (<a href="#eqn41">3.15</a>), which take the following incompressible forms:
</p><p><span>(5.1)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn55.png?pub-status=live" width="432" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn55.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn55.png"><span data-mathjax-type="texmath"><span>\begin{equation} {-}\mathcal{R}_{i,i}=0 \quad \forall x_j\in\mathcal{V}, \quad\text{subject to}\quad \mathcal{R}_in_i = 0 \quad \forall x_j\in\partial\mathcal{V}. \end{equation}</span></span></span></p><p>
This higher-order field equation is simply the divergence of the residual <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline297.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline297.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline297.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span>. Upon substituting for <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline298.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline298.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline298.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span> from (<a href="#eqn21">3.1</a>) and subsequently imposing the incompressible continuity condition <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline299.png?pub-status=live" width="122" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline299.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline299.png"><span data-mathjax-type="texmath"><span>$u_{i,i}=\mathcal {R}_4/\rho =0$</span></span></span></span> from (<a href="#eqn22">3.2</a>), we obtain
</p><p><span>(5.2)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn56.png?pub-status=live" width="192" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn56.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn56.png"><span data-mathjax-type="texmath"><span>\begin{equation} p_{,ii} ={-}[\rho u_ju_{i,j}]_{,i} + \rho b_{i,i}, \end{equation}</span></span></span></p><p>
which is a Poisson equation for the pressure. The boundary condition is a Neumann type requiring the specification of the normal pressure gradient, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline300.png?pub-status=live" width="160" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline300.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline300.png"><span data-mathjax-type="texmath"><span>$n_ip_{,i} = p_{,n} \equiv f(x_j,t)$</span></span></span></span>, on the boundary, where
</p><p><span>(5.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn57.png?pub-status=live" width="329" height="22" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn57.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn57.png"><span data-mathjax-type="texmath"><span>\begin{equation} f(x_j,t) ={-}n_i[\rho\dot{u}_i+\rho u_ju_{i,j}-\mu u_{i,jj}-\rho b_i]. \end{equation}</span></span></span></p><p>
Equation (<a href="#eqn56">5.2</a>) and boundary condition (<a href="#eqn57">5.3</a>) evolve the pressure in a manner that ensures the velocity field is solenoidal. This is a well-known pressure–velocity-based formulation commonly used in the numerical solution of incompressible flows (e.g. Ferziger &amp; Peric <a href="#ref30"><span>Reference Ferziger and Peric</span>2002</a>; Pozrikidis <a href="#ref81"><span>Reference Pozrikidis</span>2009</a>).</p>
<p> Next, we consider the velocity equations (<a href="#eqn35">3.9</a>) which, at present, have a more elusive physical interpretation. Here, we instead begin with the natural boundary conditions (<a href="#eqn39">3.13</a>) and (<a href="#eqn40">3.14</a>), which are due to the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline301.png?pub-status=live" width="26" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline301.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline301.png"><span data-mathjax-type="texmath"><span>$\delta u_i$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline302.png?pub-status=live" width="36" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline302.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline302.png"><span data-mathjax-type="texmath"><span>$\delta u_{i,j}$</span></span></span></span> variations. The incompressible versions of these equations are
</p><p><span>(5.4<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn58.png?pub-status=live" width="434" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn58.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn58.png"><span data-mathjax-type="texmath"><span>\begin{equation} \rho \mathcal{R}_{i}u_{j}n_{j}+\mu \mathcal{R}_{i,j}n_{j}=0 \quad\text{and}\quad - \mu \mathcal{R}_{i}n_{j}=0 \quad \forall x_j\in\partial\mathcal{V}. \end{equation}</span></span></span></p><p>
The boundary conditions involving the residual <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline303.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline303.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline303.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span> are those compatible with the first-order Navier–Stokes equations, such as the no-slip and no-penetration conditions. Indeed, if we specify the velocity vector of the actual motion on the boundary, then <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline304.png?pub-status=live" width="55" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline304.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline304.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i\equiv 0$</span></span></span></span> there. Note that the pressure of the actual motion on the boundary will be known from the simultaneous solution of (<a href="#eqn56">5.2</a>).</p>
<p> However, the gradient terms <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline305.png?pub-status=live" width="32" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline305.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline305.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_{i,j}$</span></span></span></span> will introduce up to third-order spatial derivatives that must be specified. These represent the additional boundary conditions that must accompany the higher-order governing equation, which will be seen shortly to be second order in time and fourth order in space. Again, recall the example of §&nbsp;<a href="#sec1">1</a>, whereby the system (<a href="#eqn2">1.2<em>a</em>–<em>c</em></a>) must be appended with a second (initial) condition specifying the (time) derivative of the coordinate <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline306.png?pub-status=live" width="30" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline306.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline306.png"><span data-mathjax-type="texmath"><span>$v(t)$</span></span></span></span>. In the present context, these boundary conditions are ostensibly tantamount to specification of the viscous stress on the boundary by way of velocity gradients.</p>
<p> In general, the conditions at a boundary require two transition relations (Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>; White <a href="#ref116"><span>Reference White</span>2006</a>) to ultimately describe the momentum transport. Mathematically speaking, these conditions are the jump in velocity (momentum intensity) and the jump in stress (momentum flux). Under ordinary physical circumstances the velocity and stress are assumed to be continuous. However, this is one particular form of the transition relations, and there are familiar examples to which they do not apply. For example, at a liquid–gas interface the stress relation is modified to account for a non-zero jump in the normal stress that is balanced by a force due to surface tension (the tangential stress component usually still taken to be continuous). Similarly, in the event that molecular slip occurs, the typical transition relation gives an expression for the slip velocity (e.g. Thompson &amp; Troian <a href="#ref109"><span>Reference Thompson and Troian</span>1997</a>; Thalakkottor &amp; Mohseni <a href="#ref108"><span>Reference Thalakkottor and Mohseni</span>2016</a>). In the case of energy transport, analogous conditions are needed regarding jumps in temperature (intensity) and heat flow (flux), which are recognized as the concept of thermal contact resistance.</p>
<p> We now turn our attention to the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), which upon imposing incompressibility and expanding derivatives of product terms yields
</p><p><span>(5.5)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn59.png?pub-status=live" width="340" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn59.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn59.png"><span data-mathjax-type="texmath"><span>\begin{equation} \rho\dot{\mathcal{R}}_i + \rho u_j\mathcal{R}_{i,j} = \rho \mathcal{R}_{j}u_{j,i}- \mu \mathcal{R}_{i,jj} \quad \forall x_j\in\mathcal{V}. \end{equation}</span></span></span></p><p>
The left-hand side is the material derivative of the residual <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline307.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline307.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline307.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span>. Our purpose here is to observe which terms from the first-order Navier–Stokes equation are ‘eliminated’ in the higher-order formulation. Specifically, we are interested in the non-conservative viscous terms; while the body force <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline308.png?pub-status=live" width="15" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline308.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline308.png"><span data-mathjax-type="texmath"><span>$b_i$</span></span></span></span> could also be non-conservative, we will not concern ourselves with this possibility. Direct substitution of <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline309.png?pub-status=live" width="23" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline309.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline309.png"><span data-mathjax-type="texmath"><span>$\mathcal {R}_i$</span></span></span></span> into (<a href="#eqn59">5.5</a>) generates many terms, but it is found that only one is cancelled: the viscous Laplacian of the (time derivative of the) velocity, namely <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline310.png?pub-status=live" width="45" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline310.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline310.png"><span data-mathjax-type="texmath"><span>$\mu \dot {u}_{i,jj}$</span></span></span></span>. This term mutually appears from the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline311.png?pub-status=live" width="31" height="24" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline311.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline311.png"><span data-mathjax-type="texmath"><span>$\rho \dot {\mathcal {R}}_i$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline312.png?pub-status=live" width="62" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline312.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline312.png"><span data-mathjax-type="texmath"><span>$-\mu \mathcal {R}_{i,jj}$</span></span></span></span> terms in (<a href="#eqn59">5.5</a>). To maintain notional clarity, we write the residual as
</p><p><span>(5.6)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn60.png?pub-status=live" width="183" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn60.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn60.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{R}_i = \rho\dot{u}_i - \mu u_{i,kk} + \tilde{\mathcal{R}}_i, \end{equation}</span></span></span></p><p>
where index <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline313.png?pub-status=live" width="12" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline313.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline313.png"><span data-mathjax-type="texmath"><span>$k$</span></span></span></span> has been used to avoid confusion with gradient operators in (<a href="#eqn59">5.5</a>) having index <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline314.png?pub-status=live" width="11" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline314.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline314.png"><span data-mathjax-type="texmath"><span>$j$</span></span></span></span>, and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline315.png?pub-status=live" width="144" height="25" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline315.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline315.png"><span data-mathjax-type="texmath"><span>$\tilde {\mathcal {R}}_i = \rho u_ku_{i,k}-\rho b_i$</span></span></span></span> are the remaining terms in the residual. Substituting the above into the first and last terms of (<a href="#eqn59">5.5</a>), cancelling the aforementioned <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline316.png?pub-status=live" width="45" height="20" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline316.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline316.png"><span data-mathjax-type="texmath"><span>$\mu \dot {u}_{i,jj}$</span></span></span></span> term and then dividing out by the density gives
</p><p><span>(5.7)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn61.png?pub-status=live" width="383" height="29" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn61.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn61.png"><span data-mathjax-type="texmath"><span>\begin{equation} \rho\ddot{u}_i+\dot{\tilde{\mathcal{R}}}_i+u_j\mathcal{R}_{i,j} = \mathcal{R}_ju_{j,i} - \nu[-\mu u_{i,kkjj} + \tilde{\mathcal{R}}_{i,jj} ], \end{equation}</span></span></span></p><p>
where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline317.png?pub-status=live" width="63" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline317.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline317.png"><span data-mathjax-type="texmath"><span>$\nu =\mu /\rho$</span></span></span></span> is the kinematic viscosity (recall that all variables are non-dimensional). We see that this equation is second order in time and fourth order in space. Viscous terms still appear in the equation including second- and third-order spatial derivatives. Nevertheless, the technique detailed by Sanders (<a href="#ref91"><span>Reference Sanders</span>2023<em>b</em></a>) and employed here evidently ensures that (<a href="#eqn61">5.7</a>) has a corresponding Hamiltonian structure.</p>
</div>
<div data-magellan-destination="sec6" id="sec6">
<h2><span>6.</span> Case study</h2>
<p> We can explore how this method can be applied by considering a simplified example with a known field solution. In looking at the variety of cases in which the Navier–Stokes equations have a known analytical solution, the simplest are those involving steady flows. While the Euler–Lagrange equations (<a href="#eqn35">3.9</a>), (<a href="#eqn36">3.10</a>) can be written for these cases, the corresponding Hamilton–Jacobi equation is trivial because for steady flows the fields are already equal to their initial values.</p>
<p> It is therefore worthwhile to examine the simplest unsteady flows, which should result in a non-trivial Hamilton–Jacobi equation. Indeed, there exists a class of flows for which the Navier–Stokes equations take the same simplified form: those in which the flow is incompressible and unidirectional (Batchelor <a href="#ref8"><span>Reference Batchelor</span>2000</a>). This class of problems include both of Stokes's flows (Stokes <a href="#ref99"><span>Reference Stokes</span>1851</a>), in which a semi-infinite fluid is influenced by a boundary moving in its own plane. In the first of these cases, the boundary is impulsively started and in the second, the boundary oscillates. We can also include developing flow in a channel or pipe. The only difference between these flows results from initial and boundary conditions, but the Navier–Stokes equations and therefore the present Hamilton–Jacobi equation take the same form.</p>
<p> Here we will examine the case in which there is motion only in the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline318.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline318.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline318.png"><span data-mathjax-type="texmath"><span>$x_1$</span></span></span></span> direction, and the velocities take the form <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline319.png?pub-status=live" width="170" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline319.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline319.png"><span data-mathjax-type="texmath"><span>$\{u_{i}\} = \{u_{1}(x_{2},t),0,0\}$</span></span></span></span>. In the absence of a body force, our pressure gradient in the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline320.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline320.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline320.png"><span data-mathjax-type="texmath"><span>$x_1$</span></span></span></span> direction is solely a function of time and the pressure gradients in the <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline321.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline321.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline321.png"><span data-mathjax-type="texmath"><span>$x_2$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline322.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline322.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline322.png"><span data-mathjax-type="texmath"><span>$x_3$</span></span></span></span> directions are zero. There are thus only two unknown field quantities: <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline323.png?pub-status=live" width="65" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline323.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline323.png"><span data-mathjax-type="texmath"><span>$u_{1}(x_{2},t)$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline324.png?pub-status=live" width="57" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline324.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline324.png"><span data-mathjax-type="texmath"><span>$p(x_{1},t)$</span></span></span></span>, where <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline325.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline325.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline325.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span> is linear in <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline326.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline326.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline326.png"><span data-mathjax-type="texmath"><span>$x_{1}$</span></span></span></span>. The field equation of primary interest is
</p><p><span>(6.1)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn62.png?pub-status=live" width="220" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn62.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn62.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{R}_{1} \equiv \rho \dot{u}_{1} + p_{,1} - \mu u_{1,22} = 0, \end{equation}</span></span></span></p><p>
and the remaining field equations are satisfied automatically by the assumed form of the fields. Following the procedure described above, the momenta conjugate to <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline327.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline327.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline327.png"><span data-mathjax-type="texmath"><span>$u_{1}$</span></span></span></span> and <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline328.png?pub-status=live" width="13" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline328.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline328.png"><span data-mathjax-type="texmath"><span>$p$</span></span></span></span> are given by
</p><p><span>(6.2<em>a</em>,<em>b</em>)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn63.png?pub-status=live" width="156" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn63.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn63.png"><span data-mathjax-type="texmath"><span>\begin{equation} {\rm \pi}_{1}\equiv \rho\mathcal{R}_{1}, \quad {\rm \pi}_{4}\equiv0.\end{equation}</span></span></span></p><p>
This results in a Hamiltonian density given by
</p><p><span>(6.3)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn64.png?pub-status=live" width="280" height="43" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn64.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn64.png"><span data-mathjax-type="texmath"><span>\begin{equation} \mathcal{H}^{*}=\frac{1}{2}\frac{1}{{\rho}^{2}}{\rm \pi}_{1}{\rm \pi}_{1}-\frac{1}{\rho}(p_{,1}-\mu u_{1,22}){\rm \pi}_{1}. \end{equation}</span></span></span></p><p>
Hamilton's principal functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline329.png?pub-status=live" width="121" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline329.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline329.png"><span data-mathjax-type="texmath"><span>${S}^{*}={S}^{*}[u_{1},p,t]$</span></span></span></span> can be expressed as an integral over <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline330.png?pub-status=live" width="19" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline330.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline330.png"><span data-mathjax-type="texmath"><span>$x_{2}$</span></span></span></span> only, since the other spatial coordinates do not appear and may be integrated out. In this way, we may write the Hamilton–Jacobi equation as follows:
</p><p><span>(6.4)</span><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn65.png?pub-status=live" width="428" height="45" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn65.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_eqn65.png"><span data-mathjax-type="texmath"><span>\begin{equation} \int \text{d}\kern 0.06em x_2\left[\frac{1}{2}\frac{1}{{\rho}^{2}}\frac{\delta {S}^{*}}{\delta u_{1}}\frac{\delta {S}^{*}}{\delta u_{1}}-\frac{1}{\rho}(p_{,1}-\mu u_{1,22})\frac{\delta {S}^{*}}{\delta u_{1}}\right]+\frac{\partial {S}^{*}}{\partial t}=0, \end{equation}</span></span></span></p><p>
with <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline331.png?pub-status=live" width="88" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline331.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline331.png"><span data-mathjax-type="texmath"><span>$\delta {S}^{*}/\delta p=0$</span></span></span></span>. The solution to (<a href="#eqn65">6.4</a>) would provide a canonical transformation to a new set of coordinates, giving analytical expressions for <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline332.png?pub-status=live" width="48" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline332.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline332.png"><span data-mathjax-type="texmath"><span>$(u_{1},p)$</span></span></span></span>.</p>
<p> Despite knowing the analytical solution for these fields in this particular example, the present authors have not been able to solve this Hamilton–Jacobi equation, since again the solution of such equations is itself an open problem (Michal <a href="#ref71"><span>Reference Michal</span>1926</a>; Jordan &amp; Pauli <a href="#ref57"><span>Reference Jordan and Pauli</span>1928</a>; Levy <a href="#ref66"><span>Reference Levy</span>1951</a>; Tatarskii <a href="#ref105"><span>Reference Tatarskii</span>1961</a>; Syavavko &amp; Mel'nichak <a href="#ref101"><span>Reference Syavavko and Mel'nichak</span>1974</a>; Dieudonne <a href="#ref28"><span>Reference Dieudonne</span>1981</a>; Koval'chik <a href="#ref61"><span>Reference Koval'chik</span>1993</a>). This example therefore appears to be a good place to start for tackling the general problem. Another interesting example to consider might be a two-dimensional Taylor–Green vortex such as that considered by Wu, Ma &amp; Zhou (<a href="#ref118"><span>Reference Wu, Ma and Zhou</span>2006</a>).</p>
</div>
<div data-magellan-destination="sec7" id="sec7">
<h2><span>7.</span> Conclusion</h2>
<p> This paper has presented a novel Hamiltonian formulation of the isotropic Navier–Stokes problem for both compressible and incompressible fluids. This canonical formulation opens several previously unexplored avenues toward a final resolution of the problem, which we briefly describe below.</p>
<p> Perhaps the most obvious route would be to solve the Hamilton–Jacobi equation – either (<a href="#eqn53">4.11</a>) for the compressible case or (<a href="#eqn54">4.12</a>) for the incompressible case – for Hamilton's principal functional <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline333.png?pub-status=live" width="76" height="21" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline333.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline333.png"><span data-mathjax-type="texmath"><span>${S}^{*}[u_{i},p,t]$</span></span></span></span> directly. If a complete solution for <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline334.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline334.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline334.png"><span data-mathjax-type="texmath"><span>${S}^{*}$</span></span></span></span> can be found, it will lead via canonical transformation to a new set of fields which are equal to their initial values, thereby giving analytical expressions for the original velocity and pressure fields. Alternatively, if one can simply establish based on emerging analytical techniques that a complete solution to this Hamilton–Jacobi equation does (or does not) exist under the usual assumptions, that will also settle the question of existence of solutions.</p>
<p> An alternative strategy might be to investigate the corresponding Lagrangian formulation based on the action <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline335.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline335.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline335.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> as given by (<a href="#eqn23">3.3</a>). Because the first- and second-order formulations are mathematically equivalent (recall the proof in §&nbsp;<a href="#sec3-2">3.2</a>), <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline336.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline336.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline336.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> must have as many local minima as there are solutions to the traditional, first-order formulation. Intuitively, it seems as though it ought to be possible to determine – or at least to establish bounds on – the number of critical points an action has based on the form of the Lagrangian (Van den Berg &amp; VanderVorst <a href="#ref113"><span>Reference Van den Berg and VanderVorst</span>2002</a>; Kalies &amp; VanderVorst <a href="#ref59"><span>Reference Kalies and VanderVorst</span>2004</a>). If one can establish that, under the usual assumptions, <span data-mathjax-status="alt-graphic"><span><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline337.png?pub-status=live" width="21" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline337.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20240328184703666-0405:S0022112024002295:S0022112024002295_inline337.png"><span data-mathjax-type="texmath"><span>$\mathcal {S}^{*}$</span></span></span></span> always has exactly one local minimum, or else demonstrate that there are cases where it fails to achieve a local minimum, that too will resolve the question of existence and uniqueness.</p>
<p> By no means is either of the above programs trivial. As pointed out in §&nbsp;<a href="#sec4-1">4.1</a>, solving equations containing Volterra (<a href="#ref114"><span>Reference Volterra</span>1930</a>) functional derivatives is itself a long-standing open problem in mathematics, which has received very little attention since the first half of the twentieth century (Michal <a href="#ref71"><span>Reference Michal</span>1926</a>; Jordan &amp; Pauli <a href="#ref57"><span>Reference Jordan and Pauli</span>1928</a>; Levy <a href="#ref66"><span>Reference Levy</span>1951</a>; Tatarskii <a href="#ref105"><span>Reference Tatarskii</span>1961</a>; Syavavko &amp; Mel'nichak <a href="#ref101"><span>Reference Syavavko and Mel'nichak</span>1974</a>; Dieudonne <a href="#ref28"><span>Reference Dieudonne</span>1981</a>; Koval'chik <a href="#ref61"><span>Reference Koval'chik</span>1993</a>). One might even go so far as to call it a ‘forgotten’ open problem (as did one of the reviewers of the present paper, who generously drew our attention to Jordan &amp; Pauli <a href="#ref57"><span>Reference Jordan and Pauli</span>1928</a>; Levy <a href="#ref66"><span>Reference Levy</span>1951</a>; Tatarskii <a href="#ref105"><span>Reference Tatarskii</span>1961</a>; Syavavko &amp; Mel'nichak <a href="#ref101"><span>Reference Syavavko and Mel'nichak</span>1974</a>; Dieudonne <a href="#ref28"><span>Reference Dieudonne</span>1981</a>; Koval'chik <a href="#ref61"><span>Reference Koval'chik</span>1993</a>). We see the lack of work on such equations as a challenge, yes, but at the same time we also see it as a significant opportunity for advancing the field of analytical continuum mechanics. Perhaps, despite an apparent increase in complexity, a rigorous theory of such equations can be developed after all, in which case the present formulation of the Navier–Stokes problem might be solved as one example. We submit that, at the very least, such an endeavour merits further study, which we intend to continue in future work.</p>
<p> Finally, it is worth noting that the techniques employed here are by no means specific to the Navier–Stokes problem, nor are they restricted to the field of classical mechanics. The suitably averaged principle of least squares (Sanders <a href="#ref88"><span>Reference Sanders</span>2021</a>, <a href="#ref89"><span>Reference Sanders</span>2022</a>, <a href="#ref90"><span>Reference Sanders</span>2023<em>a</em></a>,<a href="#ref91"><span>Reference Sanders</span><em>b</em></a>; Sanders &amp; Inman <a href="#ref92"><span>Reference Sanders and Inman</span>2023</a>) can be applied to any traditionally non-Hamiltonian dynamical system in order to formulate a mathematically equivalent higher-order Hamiltonian system. It is believed that this fundamental result will also find uses in other branches of pure and applied mathematics.</p>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The xz sshd backdoor rabbithole goes quite a bit deeper (303 pts)]]></title>
            <link>https://twitter.com/bl4sty/status/1776691497506623562</link>
            <guid>39956455</guid>
            <pubDate>Sat, 06 Apr 2024 22:59:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/bl4sty/status/1776691497506623562">https://twitter.com/bl4sty/status/1776691497506623562</a>, See on <a href="https://news.ycombinator.com/item?id=39956455">Hacker News</a></p>
Couldn't get https://twitter.com/bl4sty/status/1776691497506623562: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[WinBtrfs – an open-source btrfs driver for Windows (203 pts)]]></title>
            <link>https://github.com/maharmstone/btrfs</link>
            <guid>39956008</guid>
            <pubDate>Sat, 06 Apr 2024 21:59:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/maharmstone/btrfs">https://github.com/maharmstone/btrfs</a>, See on <a href="https://news.ycombinator.com/item?id=39956008">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">WinBtrfs v1.9</h2><a id="user-content-winbtrfs-v19" aria-label="Permalink: WinBtrfs v1.9" href="#winbtrfs-v19"></a></p>
<p dir="auto">WinBtrfs is a Windows driver for the next-generation Linux filesystem Btrfs.
A reimplementation from scratch, it contains no code from the Linux kernel,
and should work on any version from Windows XP onwards. It is also included
as part of the free operating system <a href="https://www.reactos.org/" rel="nofollow">ReactOS</a>.</p>
<p dir="auto">If your Btrfs filesystem is on a MD software RAID device created by Linux, you
will also need <a href="https://github.com/maharmstone/winmd">WinMD</a> to get this to appear
under Windows.</p>
<p dir="auto">See also <a href="https://github.com/maharmstone/quibble">Quibble</a>, an experimental
bootloader allowing Windows to boot from Btrfs, and <a href="https://github.com/maharmstone/ntfs2btrfs">Ntfs2btrfs</a>,
a tool which allows in-place conversion of NTFS filesystems.</p>
<p dir="auto">First, a disclaimer:</p>
<p dir="auto">You use this software at your own risk. I take no responsibility for any damage
it may do to your filesystem. It ought to be suitable for day-to-day use, but
make sure you take backups anyway.</p>
<p dir="auto">Everything here is released under the GNU Lesser General Public Licence (LGPL);
see the file LICENCE for more info. You are encouraged to play about with the
source code as you will, and I'd appreciate a note (<a href="mailto:mark@harmstone.com">mark@harmstone.com</a>) if you
come up with anything nifty.</p>
<p dir="auto">See at the end of this document for copyright details of third-party code that's
included here.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Donations</h2><a id="user-content-donations" aria-label="Permalink: Donations" href="#donations"></a></p>
<p dir="auto">I've been developing this driver for fun, and in the hopes that someone out there
will find it useful. But if you want to provide some pecuniary encouragement, it'd
be very much appreciated:</p>
<ul dir="auto">
<li><a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=3XQVCQ6YB55L2&amp;lc=GB&amp;item_name=WinBtrfs%20donation&amp;currency_code=GBP&amp;bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted" rel="nofollow">Paypal</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Reading and writing of Btrfs filesystems</li>
<li>Basic RAID: RAID0, RAID1, and RAID10</li>
<li>Advanced RAID: RAID5 and RAID6</li>
<li>Caching</li>
<li>Discovery of Btrfs partitions, even if Windows would normally ignore them</li>
<li>Getting and setting of Access Control Lists (ACLs), using the xattr
security.NTACL</li>
<li>Alternate Data Streams (e.g. :Zone.Identifier is stored as the xattr
user.Zone.Identifier)</li>
<li>Mappings from Linux users to Windows ones (see below)</li>
<li>Symlinks and other reparse points</li>
<li>Shell extension to identify and create subvolumes, including snapshots</li>
<li>Hard links</li>
<li>Sparse files</li>
<li>Free-space cache</li>
<li>Preallocation</li>
<li>Asynchronous reading and writing</li>
<li>Partition-less Btrfs volumes</li>
<li>Per-volume registry mount options (see below)</li>
<li>zlib compression</li>
<li>LZO compression</li>
<li>LXSS ("Ubuntu on Windows") support</li>
<li>Balancing (including resuming balances started on Linux)</li>
<li>Device addition and removal</li>
<li>Creation of new filesystems with <code>mkbtrfs.exe</code> and <code>ubtrfs.dll</code></li>
<li>Scrubbing</li>
<li>TRIM/DISCARD</li>
<li>Reflink copy</li>
<li>Subvol send and receive</li>
<li>Degraded mounts</li>
<li>Free space tree (compat_ro flag <code>free_space_cache</code>)</li>
<li>Shrinking and expanding</li>
<li>Passthrough of permissions etc. for LXSS</li>
<li>Zstd compression</li>
<li>Windows 10 case-sensitive directory flag</li>
<li>Oplocks</li>
<li>Metadata UUID incompat flag (Linux 5.0)</li>
<li>Three- and four-disk RAID1 (Linux 5.5)</li>
<li>New checksum types (xxhash, sha256, blake2) (Linux 5.5)</li>
<li>Block group tree (Linux 6.1)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Todo</h2><a id="user-content-todo" aria-label="Permalink: Todo" href="#todo"></a></p>
<ul dir="auto">
<li>Full fs-verity support (Linux 5.15)</li>
<li>Zoned support (Linux 5.11) (HM-SMR not supported on Windows?)</li>
<li>Defragmentation</li>
<li>Support for Btrfs quotas</li>
<li>Full transaction log support</li>
<li>Support for Windows transactions (TxF)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">To install the driver, <a href="https://github.com/maharmstone/btrfs/releases">download and extract the latest release</a>,
right-click btrfs.inf, and choose Install. The driver is signed, so should work out
of the box on modern versions of Windows.</p>
<p dir="auto">If you using Windows 10 and have Secure Boot enabled, you may have to make a Registry
change in order for the driver to be loaded - see <a href="#secureboot">below</a>.</p>
<p dir="auto">WinBtrfs is also available on the following package managers:</p>
<ul dir="auto">
<li><a href="https://chocolatey.org/packages/winbtrfs" rel="nofollow">Chocolatey</a></li>
</ul>

<ul dir="auto">
<li><a href="https://scoop.sh/#/apps?q=%22winbtrfs-np%22&amp;s=0&amp;d=1&amp;o=true" rel="nofollow">Scoop</a></li>
</ul>
<div data-snippet-clipboard-copy-content="scoop bucket add nonportable
scoop install winbtrfs-np -g"><pre><code>scoop bucket add nonportable
scoop install winbtrfs-np -g
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Uninstalling</h2><a id="user-content-uninstalling" aria-label="Permalink: Uninstalling" href="#uninstalling"></a></p>
<p dir="auto">If you want to uninstall, from a command prompt run:</p>
<div data-snippet-clipboard-copy-content="RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultUninstall 132 btrfs.inf"><pre><code>RUNDLL32.EXE SETUPAPI.DLL,InstallHinfSection DefaultUninstall 132 btrfs.inf
</code></pre></div>
<p dir="auto">You may need to give the full path to btrfs.inf.</p>
<p dir="auto">You can also go to Device Manager, find "Btrfs controller" under
"Storage volumes", right click and choose "Uninstall". Tick the checkbox to
uninstall the driver as well, and let Windows reboot itself.</p>
<p dir="auto">If you need to uninstall via the registry, open regedit and set the value of
HKLM\SYSTEM\CurrentControlSet\services\btrfs\Start to 4, to disable the service.
After you reboot, you can then delete the btrfs key and remove
C:\Windows\System32\drivers\btrfs.sys.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Compilation</h2><a id="user-content-compilation" aria-label="Permalink: Compilation" href="#compilation"></a></p>
<p dir="auto">To compile with Visual C++ 2019, open the directory and let CMake do its thing.
If you have the Windows DDK installed correctly, it should just work.</p>
<p dir="auto">To compile with GCC on Linux, you will need a cross-compiler set up, for either
<code>i686-w64-mingw32</code> or <code>x86_64-w64-mingw32</code>. Create a build directory, then use
either <code>mingw-x86.cmake</code> or <code>mingw-amd64.cmake</code> as CMake toolchain files to
generate your Makefile.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mappings</h2><a id="user-content-mappings" aria-label="Permalink: Mappings" href="#mappings"></a></p>
<p dir="auto">The user mappings are stored in the registry key
HKLM\SYSTEM\CurrentControlSet\services\btrfs\Mappings. Create a DWORD with the
name of your Windows SID (e.g. S-1-5-21-1379886684-2432464051-424789967-1001),
and the value of your Linux uid (e.g. 1000). It will take effect next time the
driver is loaded.</p>
<p dir="auto">You can find your current SID by running <code>wmic useraccount get name,sid</code>.</p>
<p dir="auto">Similarly, the group mappings are stored in under GroupMappings. The default
entry maps Windows' Users group to gid 100, which is usually "users" on Linux.
You can also specify user SIDs here to force files created by a user to belong
to a certain group. The setgid flag also works as on Linux.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">LXSS ("Ubuntu on Windows" / "Windows Subsystem for Linux")</h2><a id="user-content-lxss-ubuntu-on-windows--windows-subsystem-for-linux" aria-label="Permalink: LXSS (&quot;Ubuntu on Windows&quot; / &quot;Windows Subsystem for Linux&quot;)" href="#lxss-ubuntu-on-windows--windows-subsystem-for-linux"></a></p>
<p dir="auto">The driver will passthrough Linux metadata to recent versions of LXSS, but you
will have to let Windows know that you wish to do this. From a Bash prompt on
Windows, edit <code>/etc/wsl.conf</code> to look like the following:</p>
<div data-snippet-clipboard-copy-content="[automount]
enabled = true
options = &quot;metadata&quot;
mountFsTab = false"><pre><code>[automount]
enabled = true
options = "metadata"
mountFsTab = false
</code></pre></div>
<p dir="auto">It will then take effect next time you reboot. Yes, you should be able to chroot
into an actual Linux installation, if you wish.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Commands</h2><a id="user-content-commands" aria-label="Permalink: Commands" href="#commands"></a></p>
<p dir="auto">The DLL file shellbtrfs.dll provides the GUI interface, but it can also be used
with rundll32.exe to carry out some tasks from the command line, which may be
useful if you wish to schedule something to run periodically.</p>
<p dir="auto">Bear in mind that rundll32 provides no mechanism to return any error codes, so
any of these commands may fail silently.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,CreateSubvol &lt;path&gt;</code></p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,CreateSnapshot &lt;source&gt; &lt;destination&gt;</code></p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,ReflinkCopy &lt;source&gt; &lt;destination&gt;</code>
This also accepts wildcards, and any number of source files.</p>
</li>
</ul>
<p dir="auto">The following commands need various privileges, and so must be run as Administrator
to work:</p>
<ul dir="auto">
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,SendSubvol &lt;source&gt; [-p &lt;parent&gt;] [-c &lt;clone subvol&gt;] &lt;stream file&gt;</code>
The -p and -c flags are as <code>btrfs send</code> on Linux. You can specify any number of
clone subvolumes.</p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,RecvSubvol &lt;stream file&gt; &lt;destination&gt;</code></p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,StartScrub &lt;drive&gt;</code></p>
</li>
<li>
<p dir="auto"><code>rundll32.exe shellbtrfs.dll,StopScrub &lt;drive&gt;</code></p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Troubleshooting</h2><a id="user-content-troubleshooting" aria-label="Permalink: Troubleshooting" href="#troubleshooting"></a></p>
<ul dir="auto">
<li>How do I debug this?</li>
</ul>
<p dir="auto">On the releases page, there's zip files to download containing the PDBs. Or you
can try the symbols server <a href="http://symbols.burntcomma.com/" rel="nofollow">http://symbols.burntcomma.com/</a> - in windbg, set your
symbol path to something like this:</p>
<p dir="auto"><code>symsrv*symsrv.dll*C:\symbols*http://msdl.microsoft.com/download/symbols;symsrv*symsrv.dll*C:\symbols*http://symbols.burntcomma.com</code></p>
<ul dir="auto">
<li>The filenames are weird!
or</li>
<li>I get strange errors on certain files or directories!</li>
</ul>
<p dir="auto">The driver assumes that all filenames are encoded in UTF-8. This should be the
default on most setups nowadays - if you're not using UTF-8, it's probably worth
looking into converting your files.</p>
<ul dir="auto">
<li><a name="user-content-secureboot"></a>How do I get this working with Secure Boot turned on?</li>
</ul>
<p dir="auto">For the very latest versions of Windows 10, Microsoft introduced more onerous
requirements for signing, which seemingly aren't available for open-source drivers.</p>
<p dir="auto">To work around this, go to <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\CI\Policy</code> in Regedit,
create a new DWORD value called <code>UpgradedSystem</code> and set to 1, and reboot.</p>
<p dir="auto">Or you could always just turn off Secure Boot in your BIOS settings.</p>
<ul dir="auto">
<li>The root of the drive isn't case-sensitive in LXSS</li>
</ul>
<p dir="auto">This is something Microsoft hardcoded into LXSS, presumably to stop people hosing
their systems by running <code>mkdir /mnt/c/WiNdOwS</code>.</p>
<ul dir="auto">
<li>How do I change the drive letter?</li>
</ul>
<p dir="auto">With the shell extension installed, right-click the drive in Explorer, click Properties,
and go to the Btrfs tab. There should be a button which allows you to change the drive
letter.</p>
<ul dir="auto">
<li>I'm still having problems with drive letters</li>
</ul>
<p dir="auto">In Regedit, try deleting the relevant entries in <code>HKEY_LOCAL_MACHINE\SYSTEM\MountedDevices</code>,
then rebooting.</p>
<ul dir="auto">
<li>How do I format a partition as Btrfs?</li>
</ul>
<p dir="auto">Use the included command line program mkbtrfs.exe. We can't add Btrfs to Windows' own
dialog box, unfortunately, as its list of filesystems has been hardcoded. You can also
run <code>format /fs:btrfs</code>, if you don't need to set any Btrfs-specific options.</p>
<ul dir="auto">
<li>I can't reformat a mounted Btrfs filesystem</li>
</ul>
<p dir="auto">If Windows' Format dialog box refuses to appear, try running format.com with the /fs
flag, e.g. <code>format /fs:ntfs D:</code>.</p>
<ul dir="auto">
<li>I can't mount a Synology NAS</li>
</ul>
<p dir="auto">Synology seems to use LVM for its block devices. Until somebody writes an LVM driver
for Windows, you're out of luck.</p>
<ul dir="auto">
<li>I can't mount a Thecus NAS</li>
</ul>
<p dir="auto">Thecus uses Linux's MD raid for its block devices. You will need to install <a href="https://github.com/maharmstone/winmd">WinMD</a>
as well.</p>
<ul dir="auto">
<li>64-bit Windows 7 won't load the driver</li>
</ul>
<p dir="auto">Make sure that you have <a href="https://www.microsoft.com/en-gb/download/details.aspx?id=46148" rel="nofollow">KB3033929</a> installed.
Or consider installing from an "escrow" ISO which includes all updates.</p>
<ul dir="auto">
<li>The drive doesn't show up and Paragon software has been installed</li>
</ul>
<p dir="auto">Paragon's filesystem-reading software is known to disable automount. Disable or
uninstall Paragon, then re-enable automount by running <code>diskpart</code> and typing
<code>automount enable</code>.</p>
<ul dir="auto">
<li>The drive doesn't show up on very old versions of Windows</li>
</ul>
<p dir="auto">On very old versions of Windows (XP, Server 2003?), Windows ignores Linux partitions
entirely. If this is the case for you, try running <code>fdisk</code> on Linux and changing your
partition type from 83 to 7.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Changelog</h2><a id="user-content-changelog" aria-label="Permalink: Changelog" href="#changelog"></a></p>
<p dir="auto">v1.9 (2024-03-15):</p>
<ul dir="auto">
<li>Added support for block group tree (Linux 6.1)</li>
<li>Fixed hang when system under heavy load</li>
<li>Added /blockgrouptree and /freespacetree options to mkbtrfs</li>
<li>Follow Linux in defaulting /noholes to on in mkbtrfs</li>
<li>Added support for CRC32C instructions on aarch64</li>
</ul>
<p dir="auto">v1.8.2 (2023-01-10):</p>
<ul dir="auto">
<li>Fixed UAC not working</li>
<li>Fixed Smartlocker crash on Windows 11 22H2</li>
<li>Rejigged INF file to work better on Windows 11</li>
<li>Files now signed with SHA256 hash rather than SHA1</li>
</ul>
<p dir="auto">v1.8.1 (2022-08-23):</p>
<ul dir="auto">
<li>Fixed use-after-free when flushing</li>
<li>Fixed crash when opening volume when AppLocker installed</li>
<li>Compression now disabled for no-COW files, as on Linux</li>
<li>Flushing now scales better on very fast drives</li>
<li>Fixed small files getting padded to 4,096 bytes by lazy writer</li>
<li>Added NoDataCOW registry option</li>
</ul>
<p dir="auto">v1.8 (2022-03-12):</p>
<ul dir="auto">
<li>Added minimal support for fs-verity</li>
<li>Added test suite</li>
<li>Fixed incorrect disk usage statistics</li>
<li>Fixed potential crashes when renaming stream to file or file to stream</li>
<li>Fixed potential crashes when querying hard links on file</li>
<li>Fixed potential hang when opening oplocked file</li>
<li>Fixed minor issues also uncovered by test suite</li>
</ul>
<p dir="auto">v1.7.9 (2021-10-02):</p>
<ul dir="auto">
<li>Fixed deadlock when mounting on Windows 11</li>
<li>Added support for BitLocker-encrypted volumes</li>
<li>Improved filename checks when renaming or creating hard links</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.7.8.1 (2021-06-13):</p>
<ul dir="auto">
<li>Fixed bug preventing new directories from appearing in listings</li>
<li>Fixed Release version of driver still not working on XP</li>
</ul>
<p dir="auto">v1.7.8 (2021-06-09):</p>
<ul dir="auto">
<li>Upgraded zstd to version 1.5.0</li>
<li>Fixed regression stopping driver from working under XP</li>
<li>Fixed compilation on clang</li>
<li>Fixed corruption issue when Linux mount option <code>inode_cache</code> had been used</li>
<li>Fixed recursion issue involving virtual directory \$Root</li>
</ul>
<p dir="auto">v1.7.7 (2021-04-12):</p>
<ul dir="auto">
<li>Fixed deadlock on high load</li>
<li>Fixed free space issue when installing Genshin Impact</li>
<li>Fixed issue when copying files with wildcards in command prompt</li>
<li>Increased speed of directory lookups</li>
</ul>
<p dir="auto">v1.7.6 (2021-01-14):</p>
<ul dir="auto">
<li>Fixed race condition when booting with Quibble</li>
<li>No longer need to restart Windows after initial installation</li>
<li>Forced maximum file name to 255 UTF-8 characters, to match Linux driver</li>
<li>Fixed issue where directories could be created with trailing backslash</li>
<li>Fixed potential deadlock when Windows calls NtCreateSection during flush</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.7.5 (2020-10-31):</p>
<ul dir="auto">
<li>Fixed text display issue in shell extension</li>
<li>Added support for mingw 8</li>
<li>Fixed LXSS permissions not working in new versions of Windows</li>
<li>Fixed issue where truncating an inline file wouldn't change its size</li>
<li>Fixed crash with Quibble where driver would try to use AVX2 before Windows had enabled it</li>
</ul>
<p dir="auto">v1.7.4 (2020-08-23):</p>
<ul dir="auto">
<li>Fixed issue when running compressed EXEs</li>
<li>Changed build system to cmake</li>
<li>Upgraded zstd to version 1.4.5</li>
<li>Added support for FSCTL_GET_RETRIEVAL_POINTERS</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.7.3 (2020-05-24):</p>
<ul dir="auto">
<li>Fixed crash when sending file change notifications</li>
<li>Improved symlink handling with LXSS</li>
<li>Added support for undocumented flag SL_IGNORE_READONLY_ATTRIBUTE</li>
<li>Fixed corruption caused by edge case, where address allocated and freed in same flush</li>
<li>Improved handling of free space tree</li>
<li>Improved handling of very full volumes</li>
<li>Fixed spurious warnings raised by GCC 10 static analyser</li>
<li>Replaced multiplications and divisions with bit shift operations where appropriate</li>
<li>Fixed combobox stylings in shell extension</li>
</ul>
<p dir="auto">v1.7.2 (2020-04-10):</p>
<ul dir="auto">
<li>Added more fixes for booting from Btrfs on Windows 10</li>
<li>Fixed occasional deadlock when deleting or closing files on Windows 10 1909</li>
<li>Fixed crash when reading large ADSes</li>
<li>Fixed occasional crash when writing files on RAID5/6</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.7.1 (2020-03-02):</p>
<ul dir="auto">
<li>Fixed crash when reading beyond end of file</li>
<li>Fixed spurious checksum errors when doing unaligned read</li>
</ul>
<p dir="auto">v1.7 (2020-02-26):</p>
<ul dir="auto">
<li>Added support for metadata_uuid incompat flag (Linux 5.0)</li>
<li>Added support for three- and four-disk RAID1 (Linux 5.5)</li>
<li>Added support for new checksum types: xxhash, sha256, blake2 (Linux 5.5)</li>
<li>Greatly increased checksumming speed</li>
<li>Greatly increased compression and decompression speed</li>
<li>Fixed bug causing incorrect free-space reporting when data is DUP</li>
<li>Fixed issue creating directories on LXSS when <code>case=dir</code> option set</li>
</ul>
<p dir="auto">v1.6 (2020-02-04):</p>
<ul dir="auto">
<li>Added experimental (i.e. untested) ARM support (thanks to <a href="https://github.com/DjArt">DjArt</a> for this)</li>
<li>Added fixes for booting from Btrfs on Windows 10</li>
<li>Volumes will now get remounted if changed while Windows is asleep or hibernating</li>
<li>Fixed corruption when mounting volume that hasn't been unmounted cleanly by Linux</li>
<li>Fixed crash when deleting subvolume</li>
</ul>
<p dir="auto">v1.5 (2019-11-10):</p>
<ul dir="auto">
<li>More fixes for booting from Btrfs</li>
<li>Added virtual $Root directory (see "NoRootDir" below)</li>
<li>Added support for Windows XP</li>
<li>Added support for renaming alternative data streams</li>
<li>Added oplock support</li>
<li>Fixed potential deadlock on boot</li>
<li>Fixed possible crash on shutdown</li>
<li>Fixed a bunch of memory leaks</li>
<li>Many other miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.4 (2019-08-31):</p>
<ul dir="auto">
<li>Added fragmentation percentage to property sheet</li>
<li>Added support for Windows Server 2003 and Windows Vista</li>
<li>Added pagefile support</li>
<li>Improved support for file locking</li>
<li>Added support for booting from Btrfs on Windows Server 2003 (see <a href="https://www.youtube.com/watch?v=-5E2CHmHEUs" rel="nofollow">https://www.youtube.com/watch?v=-5E2CHmHEUs</a>)</li>
<li>Fixed issue where driver could open same inode twice</li>
<li>Other miscellaneous bug fixes</li>
</ul>
<p dir="auto">v1.3 (2019-06-10):</p>
<ul dir="auto">
<li>Added support for new rename and delete functions introduced to Windows 10</li>
<li>Added support for Windows 10's flag for case-sensitive directories</li>
<li>Changed free-space calculation method to be more like that of the Linux driver</li>
<li>Added more support for 128-bit file IDs</li>
<li>Fixed bug causing outdated root items</li>
<li>Fixed bug preventing writing to VHDs</li>
</ul>
<p dir="auto">v1.2.1 (2019-05-06):</p>
<ul dir="auto">
<li>Reverted commit affecting the creation of streams</li>
</ul>
<p dir="auto">v1.2 (2019-05-05):</p>
<ul dir="auto">
<li>Dramatic speed increase when opening many small files, such as with a Git repository</li>
<li>Fixed crash on surprise removals of removable devices</li>
<li>Added ability to change drive letters easily</li>
<li>No longer creates free-space cache for very small chunks, so as not to confuse the Linux driver</li>
<li>Fixed corruption when very large file created and then immediately deleted</li>
<li>Minor bug fixes</li>
</ul>
<p dir="auto">v1.1 (2018-12-15):</p>
<ul dir="auto">
<li>Support for Zstd compression</li>
<li>Passthrough of Linux metadata to LXSS</li>
<li>Refactored shell extension</li>
<li>Fixed memory leaks</li>
<li>Many other bug fixes</li>
</ul>
<p dir="auto">v1.0.2 (2018-05-19):</p>
<ul dir="auto">
<li>Minor bug fixes</li>
</ul>
<p dir="auto">v1.0.1 (2017-10-15):</p>
<ul dir="auto">
<li>Fixed deadlock</li>
<li>Binaries now signed</li>
<li>Minor bug fixes</li>
</ul>
<p dir="auto">v1.0 (2017-09-04):</p>
<ul dir="auto">
<li>First non-beta release!</li>
<li>Degraded mounts</li>
<li>New free space cache (compat_ro flag <code>free_space_cache</code>)</li>
<li>Shrinking and expanding of volumes</li>
<li>Registry options now re-read when changed, rather than just on startup</li>
<li>Improved balancing on very full filesystems</li>
<li>Fixed problem preventing user profile directory being stored on btrfs on Windows 8 and above</li>
<li>Better Plug and Play support</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.10 (2017-05-02):</p>
<ul dir="auto">
<li>Reflink copy</li>
<li>Sending and receiving subvolumes</li>
<li>Group mappings (see Mappings section above)</li>
<li>Added commands for scripting etc. (see Commands section above)</li>
<li>Fixed an issue preventing mounting on non-PNP devices, such as VeraCrypt</li>
<li>Fixed an issue preventing new versions of LXSS from working</li>
<li>Fixed problem with the ordering of extent refs, which caused problems on Linux but wasn't picked up by <code>btrfs check</code></li>
<li>Added support for reading compressed inline extents</li>
<li>Many miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.9 (2017-03-05):</p>
<ul dir="auto">
<li>Scrubbing</li>
<li>TRIM/DISCARD</li>
<li>Better handling of multi-device volumes</li>
<li>Performance increases when reading from RAID filesystems</li>
<li>No longer lies about being NTFS, except when it has to</li>
<li>Volumes will now go readonly if there is an unrecoverable error, rather than blue-screening</li>
<li>Filesystems can now be created with Windows' inbuilt format.com</li>
<li>Zlib upgraded to version 1.2.11</li>
<li>Miscellaneous performance increases</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.8 (2016-12-30):</p>
<ul dir="auto">
<li>Volume property sheet, for:</li>
<li>Balances</li>
<li>Adding and removing devices</li>
<li>Showing disk usage, i.e. the equivalent to <code>btrfs fi usage</code></li>
<li>Checksums now calculated in parallel where appropriate</li>
<li>Creation of new filesystems, with mkbtrfs.exe</li>
<li>Plug and play support for RAID devices</li>
<li>Disk usage now correctly allocated to processes in taskmgr</li>
<li>Performance increases</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.7 (2016-10-24):</p>
<ul dir="auto">
<li>Support for RAID5/6 (incompat flag <code>raid56</code>)</li>
<li>Seeding support</li>
<li>LXSS ("Ubuntu on Windows") support</li>
<li>Support for Windows Extended Attributes</li>
<li>Improved removable device support</li>
<li>Better snapshot support</li>
<li>Recovery from RAID checksum errors</li>
<li>Fixed issue where creating a lot of new files was taking a long time</li>
<li>Miscellaneous speed increases and bug fixes</li>
</ul>
<p dir="auto">v0.6 (2016-08-21):</p>
<ul dir="auto">
<li>Compression support (both zlib and lzo)</li>
<li>Mixed groups support</li>
<li>No-holes support</li>
<li>Added inode property sheet to shell extension</li>
<li>Many more mount options (see below)</li>
<li>Better support for removable devices</li>
<li>Page file support</li>
<li>Many miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.5 (2016-07-24):</p>
<ul dir="auto">
<li>Massive speed increases (from "sluggish" to "blistering")</li>
<li>Massive stability improvements</li>
<li>RAID support: RAID0, RAID1, and RAID10</li>
<li>Asynchronous reading and writing</li>
<li>Partition-less Btrfs volumes</li>
<li>Windows sparse file support</li>
<li>Object ID support</li>
<li>Beginnings of per-volume mount options</li>
<li>Security improvements</li>
<li>Notification improvements</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.4 (2016-05-02):</p>
<ul dir="auto">
<li>Subvolume creation and deletion</li>
<li>Snapshots</li>
<li>Preallocation</li>
<li>Reparse points</li>
<li>Hard links</li>
<li>Plug and play</li>
<li>Free-space cache</li>
<li>Fix problems preventing volume from being shared over the network</li>
<li>Miscellaneous bug fixes</li>
</ul>
<p dir="auto">v0.3 (2016-03-25):</p>
<ul dir="auto">
<li>Bug fixes:</li>
<li>Fixed crashes when metadata blocks were SINGLE, such as on SSDs</li>
<li>Fixed crash when splitting an internal tree</li>
<li>Fixed tree traversal failing when first item in tree had been deleted</li>
<li>Fixed emptying out of whole tree (probably only relevant to checksum tree)</li>
<li>Fixed "incorrect local backref count" message appearing in <code>btrfs check</code></li>
<li>Miscellaneous other fixes</li>
<li>Added beginnings of shell extension, which currently only changes the icon of subvolumes</li>
</ul>
<p dir="auto">v0.2 (2016-03-13):</p>
<ul dir="auto">
<li>Bug fix release:</li>
<li>Check memory allocations succeed</li>
<li>Check tree items are the size we're expecting</li>
<li>Added rollbacks, so failed operations are completely undone</li>
<li>Fixed driver claiming all unrecognized partitions (thanks Pierre Schweitzer)</li>
<li>Fixed deadlock within <code>CcCopyRead</code></li>
<li>Fixed changing properties of a JPEG within Explorer</li>
<li>Lie about FS type, so UAC works</li>
<li>Many, many miscellaneous bug fixes</li>
<li>Rudimentary security support</li>
<li>Debug log support (see below)</li>
</ul>
<p dir="auto">v0.1 (2016-02-21):</p>
<ul dir="auto">
<li>Initial alpha release.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Debug log</h2><a id="user-content-debug-log" aria-label="Permalink: Debug log" href="#debug-log"></a></p>
<p dir="auto">WinBtrfs has three levels of debug messages: errors and FIXMEs, warnings, and traces.
The release version of the driver only displays the errors and FIXMEs, which it logs
via <code>DbgPrint</code>. You can view these messages via the Microsoft program DebugView, available
at <a href="https://technet.microsoft.com/en-gb/sysinternals/debugview" rel="nofollow">https://technet.microsoft.com/en-gb/sysinternals/debugview</a>.</p>
<p dir="auto">If you want to report a problem, it'd be of great help if you could also attach a full
debug log. To do this, you will need to use the debug versions of the drivers; copy the files
in Debug\x64 or Debug\x86 into x64 or x86. You will also need to set the registry entries in
HKLM\SYSTEM\CurrentControlSet\Services\btrfs:</p>
<ul dir="auto">
<li><code>DebugLogLevel</code> (DWORD): 0 for no messages, 1 for errors and FIXMEs, 2 for warnings also,
and 3 for absolutely everything, including traces.</li>
<li><code>LogDevice</code> (string, optional): the serial device you want to output to, such as
<code>\Device\Serial0</code>. This is probably only useful on virtual machines.</li>
<li><code>LogFile</code> (string, optional): the file you wish to output to, if <code>LogDevice</code> isn't set.
Bear in mind this is a kernel filename, so you'll have to prefix it with "\??\" (e.g.,
"\??\C:\btrfs.log"). It probably goes without saying, but don't store this on a volume the
driver itself is using, or you'll cause an infinite loop.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mount options</h2><a id="user-content-mount-options" aria-label="Permalink: Mount options" href="#mount-options"></a></p>
<p dir="auto">The driver will create subkeys in the registry under HKLM\SYSTEM\CurrentControlSet\Services\btrfs
for each mounted filesystem, named after its UUID. If you're unsure which UUID refers to which
volume, you can check using <code>btrfs fi show</code> on Linux. You can add per-volume mount options to this
subkey, which will take effect on reboot. If a value is set in the key above this, it will use this
by default.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>Ignore</code> (DWORD): set this to 1 to tell the driver not to attempt loading this filesystem. With the
<code>Readonly</code> flag, this is probably redundant.</p>
</li>
<li>
<p dir="auto"><code>Readonly</code> (DWORD): set this to 1 to tell the driver not to allow writing to this volume. This is
the equivalent of the <code>ro</code> flag on Linux.</p>
</li>
<li>
<p dir="auto"><code>Compress</code> (DWORD): set this to 1 to tell the driver to write files as compressed by default. This is
the equivalent of the <code>compress</code> flag on Linux.</p>
</li>
<li>
<p dir="auto"><code>CompressForce</code> (DWORD): set this to 1 to force compression, i.e. to ignore the <code>nocompress</code> inode
flag and even attempt compression of incompressible files. This isn't a good idea, but is the equivalent
of the <code>compress-force</code> flag on Linux.</p>
</li>
<li>
<p dir="auto"><code>CompressType</code> (DWORD): set this to 1 to prefer zlib compression, 2 to prefer lzo compression, or 3
to prefer zstd compression. The default is 0, which uses zstd or lzo compression if the incompat flags
are set, and zlib otherwise.</p>
</li>
<li>
<p dir="auto"><code>FlushInterval</code> (DWORD): the interval in seconds between metadata flushes. The default is 30, as on Linux -
the parameter is called <code>commit</code> there.</p>
</li>
<li>
<p dir="auto"><code>ZlibLevel</code> (DWORD): a number between -1 and 9, which determines how much CPU time is spent trying to
compress files. You might want to fiddle with this if you have a fast CPU but a slow disk, or vice versa.
The default is 3, which is the hard-coded value on Linux.</p>
</li>
<li>
<p dir="auto"><code>MaxInline</code> (DWORD): the maximum size that will be allowed for "inline" files, i.e. those stored in the
metadata. The default is 2048, which is also the default on modern versions of Linux - the parameter is
called <code>max_inline</code> there. It will be clipped to the maximum value, which unless you've changed your node
size will be a shade under 16 KB.</p>
</li>
<li>
<p dir="auto"><code>SubvolId</code> (QWORD): the ID of the subvolume that we will attempt to mount as the root. If it doesn't
exist, this parameter will be silently ignored. The subvolume ID can be found on the inode property
sheet; it's in hex there, as opposed to decimal on the Linux tools. The default is whatever has been set
via <code>btrfs subvolume set-default</code>; or, failing that, subvolume 5. The equivalent parameter on Linux is
called <code>subvolid</code>.</p>
</li>
<li>
<p dir="auto"><code>SkipBalance</code> (DWORD): set to 1 to tell the driver not to attempt resuming a balance which was running
when the system last powered down. The default is 0. The equivalent parameter on Linux is <code>skip_balance</code>.</p>
</li>
<li>
<p dir="auto"><code>NoPNP</code> (DWORD): useful for debugging only, this forces any volumes to appear rather than exposing them
via the usual Plug and Play method.</p>
</li>
<li>
<p dir="auto"><code>ZstdLevel</code> (DWORD): Zstd compression level, default 3.</p>
</li>
<li>
<p dir="auto"><code>NoTrim</code> (DWORD): set this to 1 to disable TRIM support.</p>
</li>
<li>
<p dir="auto"><code>AllowDegraded</code> (DWORD): set this to 1 to allow mounting a degraded volume, i.e. one with a device
missing. You are strongly advised not to enable this unless you need to.</p>
</li>
<li>
<p dir="auto"><code>NoRootDir</code> (DWORD): if you have changed your default subvolume, either natively or by a registry option,
there will be a hidden directory called $Root which points to where the root would normally be. Set this
value to 1 to prevent this appearing.</p>
</li>
<li>
<p dir="auto"><code>NoDataCOW</code> (DWORD): set this to 1 to disable copy-on-write for new files. This is the equivalent of the
<code>nodatacow</code> flag on Linux.</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contact</h2><a id="user-content-contact" aria-label="Permalink: Contact" href="#contact"></a></p>
<p dir="auto">I'd appreciate any feedback you might have, positive or negative:
<a href="mailto:mark@harmstone.com">mark@harmstone.com</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Copyright</h2><a id="user-content-copyright" aria-label="Permalink: Copyright" href="#copyright"></a></p>
<p dir="auto">This code contains portions of the following software:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Zlib</h3><a id="user-content-zlib" aria-label="Permalink: Zlib" href="#zlib"></a></p>
<p dir="auto">Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler</p>
<p dir="auto">This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.</p>
<p dir="auto">Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:</p>
<ol dir="auto">
<li>The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.</li>
<li>Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.</li>
<li>This notice may not be removed or altered from any source distribution.</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">LZO</h3><a id="user-content-lzo" aria-label="Permalink: LZO" href="#lzo"></a></p>
<p dir="auto">WinBtrfs contains portions of an early version of lzo, which is copyright 1996
Markus Oberhumer. Modern versions are licensed under the GPL, but this was
licensed under the LGPL, so I believe it is okay to use.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Zstd</h3><a id="user-content-zstd" aria-label="Permalink: Zstd" href="#zstd"></a></p>
<p dir="auto">Copyright (c) 2016-present, Facebook, Inc. All rights reserved.</p>
<p dir="auto">Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:</p>
<ul dir="auto">
<li>
<p dir="auto">Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.</p>
</li>
<li>
<p dir="auto">Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.</p>
</li>
<li>
<p dir="auto">Neither the name Facebook nor the names of its contributors may be used to
endorse or promote products derived from this software without specific
prior written permission.</p>
</li>
</ul>
<p dir="auto">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">BLAKE2</h3><a id="user-content-blake2" aria-label="Permalink: BLAKE2" href="#blake2"></a></p>
<p dir="auto"><a href="https://github.com/BLAKE2/BLAKE2">https://github.com/BLAKE2/BLAKE2</a> (public domain)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">SHA256</h3><a id="user-content-sha256" aria-label="Permalink: SHA256" href="#sha256"></a></p>
<p dir="auto"><a href="https://github.com/amosnier/sha-2">https://github.com/amosnier/sha-2</a> (public domain)</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Online database diagram editor (169 pts)]]></title>
            <link>https://github.com/drawdb-io/drawdb</link>
            <guid>39955944</guid>
            <pubDate>Sat, 06 Apr 2024 21:52:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/drawdb-io/drawdb">https://github.com/drawdb-io/drawdb</a>, See on <a href="https://news.ycombinator.com/item?id=39955944">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h3 tabindex="-1" dir="auto">
    <a target="_blank" rel="noopener noreferrer" href="https://github.com/drawdb-io/drawdb/blob/main/src/assets/icon-dark.png"><img width="80" alt="Puter.com, The Personal Cloud Computer: All your files, apps, and games in one place accessible from anywhere at any time." src="https://github.com/drawdb-io/drawdb/raw/main/src/assets/icon-dark.png"></a>
</h3><a id="user-content-----" aria-label="Permalink: " href="#----"></a></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Free, simple, and intuitive database design tool and SQL generator.</h3><a id="user-content-free-simple-and-intuitive-database-design-tool-and-sql-generator" aria-label="Permalink: Free, simple, and intuitive database design tool and SQL generator." href="#free-simple-and-intuitive-database-design-tool-and-sql-generator"></a></p>
<p dir="auto">
    <a href="https://drawdb.vercel.app/" rel="nofollow">drawDB</a>
    ·  
    <a href="https://discord.gg/BrjZgNrmR6" rel="nofollow">Discord</a>
</p>
<div dir="auto"><h3 tabindex="-1" dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/drawdb-io/drawdb/blob/main/drawdb.gif"><img width="700" alt="demo" src="https://github.com/drawdb-io/drawdb/raw/main/drawdb.gif" data-animated-image=""></a></h3><a id="" aria-label="Permalink: " href="#"></a></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">drawDB</h2><a id="user-content-drawdb" aria-label="Permalink: drawDB" href="#drawdb"></a></p>
<p dir="auto">DrawDB is a robust and user-friendly database entity relationship (DBER) editor right in your browser. Build diagrams with a few clicks, export sql scripts, customize your editor, and more without creating an account. See the full set of features <a href="https://drawdb.vercel.app/" rel="nofollow">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Local Development</h3><a id="user-content-local-development" aria-label="Permalink: Local Development" href="#local-development"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/drawdb-io/drawdb
cd drawdb
npm install
npm run dev"><pre>git clone https://github.com/drawdb-io/drawdb
<span>cd</span> drawdb
npm install
npm run dev</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Build</h3><a id="user-content-build" aria-label="Permalink: Build" href="#build"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/drawdb-io/drawdb
cd drawdb
npm install
npm run build"><pre>git clone https://github.com/drawdb-io/drawdb
<span>cd</span> drawdb
npm install
npm run build</pre></div>
<p dir="auto">Set up the <a href="https://github.com/drawdb-io/drawdb-server">server</a> and environment variables according to <code>.env.sample</code> for the survey and bug report forms.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[More Agents Is All You Need: LLMs performance scales with the number of agents (210 pts)]]></title>
            <link>https://arxiv.org/abs/2402.05120</link>
            <guid>39955725</guid>
            <pubDate>Sat, 06 Apr 2024 21:25:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2402.05120">https://arxiv.org/abs/2402.05120</a>, See on <a href="https://news.ycombinator.com/item?id=39955725">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2402.05120">View PDF</a>
    <a href="https://arxiv.org/html/2402.05120v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>We find that, simply via a sampling-and-voting method, the performance of large language models (LLMs) scales with the number of agents instantiated. Also, this method is orthogonal to existing complicated methods to further enhance LLMs, while the degree of enhancement is correlated to the task difficulty. We conduct comprehensive experiments on a wide range of LLM benchmarks to verify the presence of our finding, and to study the properties that can facilitate its occurrence. Our code is publicly available at: \url{https://anonymous.4open.science/r/more_agent_is_all_you_need}.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Deheng Ye [<a href="https://arxiv.org/show-email/6d8d604a/2402.05120">view email</a>]      <br>    <strong>[v1]</strong>
        Sat, 3 Feb 2024 05:55:24 UTC (2,521 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Porn restrictions are leading to a VPN boom (183 pts)]]></title>
            <link>https://www.popsci.com/technology/vpn-boom/</link>
            <guid>39955148</guid>
            <pubDate>Sat, 06 Apr 2024 20:18:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.popsci.com/technology/vpn-boom/">https://www.popsci.com/technology/vpn-boom/</a>, See on <a href="https://news.ycombinator.com/item?id=39955148">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="incArticle">
          
<p>Internet users in a handful of states across the US are finding it more difficult to <a href="https://www.popsci.com/article/technology/end-anonymity/">browse parts of the web anonymously</a>. Over a dozen states, including <a target="_blank" href="https://www.texasattorneygeneral.gov/news/releases/attorney-general-ken-paxton-wins-after-pornography-companies-sued-texas-over-age-verification#:~:text=HB%201181%20requires%20purveyors%20of,injunction%20from%20a%20district%20court.">Texas</a> and <a target="_blank" href="https://www.npr.org/2023/01/08/1147762020/louisianas-new-porn-law-carries-user-privacy-risks">Louisiana</a>, have enacted legislation forcing Pornhub and other purveyors of streaming online adult videos to verify the identities of its users to ensure children and teens aren’t accessing “sexual material harmful to minors.” Elsewhere, in states like <a target="_blank" href="https://www.flgov.com/2024/03/25/governor-desantis-signs-legislation-to-protect-children-and-uphold-parental-rights/">Florida</a>, lawmakers have introduced so-called <a target="_blank" href="https://gizmodo.com/9-states-kids-social-media-block-age-gate-social-media-1850567724#:~:text=The%20law,%20called%20the%20Securing,under%20the%20age%20of%2018.">online parental consent laws</a> that would limit or ban underage users from accessing social media services over <a target="_blank" href="https://gizmodo.com/surgeon-general-kids-social-media-warning-instagram-1850465452">claims they cause psychological harm</a>. In each case, lawmakers want online platforms to collect government-IDs from users or have them submit to third-party age verification methods to ensure they are indeed adults.</p>



<p>But determining whether or not kids and teens are actually accessing those sites means platforms have no choice but to verify the ages of all users accessing their sites, minor or otherwise. Adult porn viewers, who could previously dip in and out of websites with a relative degree of anonymity, may now fear having their government name and photograph at arms length away from their last Pornhub search query. At the same time, critics of the new laws worry some far-right, religiously conservative lawmakers <a target="_blank" href="https://x.com/heritage/status/1660111875818790913?s=61">could broadly interpret</a> “adult” material to include content from LGBTQ+ creators or other people from <a target="_blank" href="https://www.eff.org/deeplinks/2023/05/law-should-not-require-parental-consent-all-minors-access-social-media">marginalized groups who rely on the internet for a sense of community</a>. In that scenario, teens from abusive or difficult family structures could find themselves shut out from support structures online.&nbsp;</p>



<p>Experts speaking with <em>PopSci</em> say there are signs internet users in many of these states are turning to Virtual Private Networks (VPNs) to access otherwise blocked materials. Leading VPN provider Top10 VPN claims demand from VPN services <a target="_blank" href="https://www.top10vpn.com/research/vpn-demand-statistics/">jumped 275% on March 15</a>, the same day Pornhub cut off access in Texas. The site says demand for <a href="https://www.popsci.com/technology/how-does-a-vpn-work/">VPNs</a> similarly surged by 210% the day after a similar law took effect in Louisiana last year. ExpressVPN, another popular VPN provider, told <em>PopSci </em>it saw increased web traffic to its site the day anti-porn, online age verification bills took effect in seven out of eight states.&nbsp;</p>



<p>“Wherever U.S. lawmakers have imposed age verification on internet users trying to access adult content online over the past 12 months, there has been a clear trend in the corresponding surges in demand for VPNs,” Top10 VPN Head of Research Simon Migliano told <em>PopSci. </em>In the most extreme case, Migliano claims Top10 VPN saw demand for the technology jolt up 847% the day the <a target="_blank" href="https://www.deseret.com/utah/2023/8/8/23824414/utah-law-pornhub-industry-retreats/">state’s new laws came into effect</a>.</p>



<h2 id="h-how-are-vpns-being-used"><strong>How are VPNs being used?</strong></h2>



<p>VPNs, which date back to the mid 1990s, create an encrypted tunnel for user’s data and can make it appear as if their computer is based in a different geographical location. Digital streaming viewers often use this VPN masking technology to access shows restricted in certain markets and <a target="_blank" href="https://cybernews.com/how-to-use-vpn/how-to-get-around-espn-blackout/#workaround-with-a-vpn">blacked out sports events</a>. Others view VPNs as useful tools for adding layers of security to private communications. That same technology has, for years, been used by whistleblowers, journalists, and political dissidents worldwide to bolster their anonymity online, especially in authoritarian countries.&nbsp;</p>



<p>“A VPN is an effective tool for circumventing any kind of internet censorship, as it allows users to access the restricted content via an IP address from a location under a different jurisdiction from their own,” Migliano said.&nbsp;</p>



<p>Though commonly used to bypass content restrictions in other countries, Center for Democracy and Technology Vice President of Policy Samir Jain says their apparent use by Americans to sidestep domestic content restrictions feels “relatively new.” That sudden shift, Jain said, owes itself partly to the language of these new laws which would have previously struggled to stand up to legal scrutiny. Jain, whose organization <a target="_blank" href="https://cdt.org/insights/cdt-and-rights-groups-file-amicus-brief-in-texas-online-age-verification-case/">signed onto an amicus’s brief</a> calling on a court to block the Texas law, said he wasn’t surprised users from affected areas states appeared to be seeking out VPNs.&nbsp;</p>



<p>“If you provide a government ID to prove you are in effect no longer anonymous,” Center for Democracy and Technology Vice President of Policy Samir Jain told <em>PopSci</em>. “If people no longer feel like they can do that [access information anonymously] that infringes on their First Amendment expression right.”</p>



<p>ExpressVPN Privacy Advocate Lauren Hendry Parsons echoed that sentiment.&nbsp;</p>



<p>“We know that when legislators restrict consumer access to services like porn, citizens still find a way to access it,” Hendry Parsons told <em>PopSci. “</em>There is absolutely a middle ground to be found that leans on third-party cooperation instead of limiting consumer rights.”</p>



<h2 id="h-how-are-platforms-responding-to-the-new-laws"><strong>How are platforms responding to the new laws?</strong></h2>



<p>As of writing, <a target="_blank" href="https://www.usatoday.com/story/news/nation/2024/03/14/porn-texas-shut-down/72976270007/">seven mostly Republican-led states</a> have passed some form of legislation relying on age-verification to prevent minors from accessing pornographic material. Nearly all of these so-called “age-gating” bills are copy-cat versions of a <a target="_blank" href="https://www.npr.org/2023/01/05/1146933317/louisiana-new-porn-law-government-id-restriction-privacy">pioneering Louisiana legislation</a>, which passed in 2022 and took effect early last year. <em>The Verge</em> <a target="_blank" href="https://www.theverge.com/2023/8/29/23849375/kosa-child-safety-free-speech-louisiana-utah-parental-consent">estimates</a> the Louisiana bill inspired at least 17 copycat bills, a handful of which are on their way to becoming laws. In Texas, sites found in violation of its law <a target="_blank" href="https://www.cbsnews.com/texas/news/leading-adult-entertainment-website-blocks-service-in-texas/">could face penalties of up to $10,000 per day</a>.&nbsp;</p>



<p>Some adult content sites like Pornhub have opted to block IP addresses originating from states with these new laws in order to avoid running afoul of the laws. Last month, internet users in Texas attempting to access the world’s largest purveyor of online adult video content were greeted instead with a 10 paragraph note from the company explaining its opposition to the state’s “ineffective, haphazard, and dangerous” law. Pornhub has similarly <a target="_blank" href="https://www.usatoday.com/story/news/nation/2024/03/14/porn-texas-shut-down/72976270007/">restricted access to users from half a dozen other states </a>with similar age verification laws. In addition to wanting to steer clear of penalties, experts told <em>PopSci</em> platforms also oppose the laws because they don’t want to be responsible for collecting and maintaining torrents of sensitive users’ data that could pose a ripe target for cybercriminals.</p>



<p>“Age verification systems collect a huge amount of data, not only the personal information from each ID but also a record of each and every authentication made—essentially any site you access that features adult content,” Hendry Parsons said. “Combined with the data profiling social media companies create about their users, this treasure trove of personal information is a perfect target for bad actors.”</p>



<h2 id="h-rising-vpn-use-could-attract-new-lawmaker-scrutiny"><strong>Rising VPN use could attract new lawmaker scrutiny</strong></h2>



<p>US internet users are reportedly using VPNs to access non-porn related material as well. College students around the country are <a target="_blank" href="https://www.theverge.com/2023/9/9/23864469/tiktok-college-campus-ban-students-vpn-data-instagram-reels">reportedly already using VPNs</a> to get around efforts from some universities to ban TikTok on campus networks. In Montana, where lawmakers passed a first-of-its kind statewide TikTok ban, creators have been preparing to similarly use the technology to stay connected to their followers. Lawmakers interested in restricting popular online content of various kinds will inevitably find themselves running into a VPN service willing to offer users an escape tunnel.&nbsp;</p>



<p>But a continued uptick in VPN to access blocked risks inviting unintended consequences. Internet users appearing to use VPNs to blatantly run afoul of new legislation could incentivize lawmakers to clamp down on the technology. Some of the anti-porn laws, <a target="_blank" href="https://www.washingtonpost.com/politics/2023/05/05/utahs-porn-crackdown-has-vpn-problem/">like the one enacted in Utah</a>, already possess language explicitly prohibiting online platforms from letting minors “change or bypass restrictions on access.” Digital rights activists fear other recently proposed legislation aimed at limiting US user access to foreign apps may include provisions in it that would <a target="_blank" href="https://www.vice.com/en/article/4a3ddb/restrict-act-insanely-broad-ban-tiktok-vpns">criminalize the use of VPNs</a>.</p>



<p>Jain, from the Center for Democracy and Technology, acknowledged those concerns but said new laws banning criminalizing or restricting VPNs could do more harm than good and may face constitutional legal challenges. As for the new wave of laws appearing to fuel the rise in American VPN adoption, Jain said debates over one of those laws could eventually make its way up to the Supreme Court.&nbsp;</p>



<p>“There are a lot of legitimate reasons to use VPNs to protect your privacy and anonymity,” Jain said.</p>
        </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: What is the most useful project you have worked on? (108 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=39954849</link>
            <guid>39954849</guid>
            <pubDate>Sat, 06 Apr 2024 19:40:50 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=39954849">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="39955381"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955381" href="https://news.ycombinator.com/vote?id=39955381&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I've worked on a variety of medical devices: CT scanners, patient monitors, infusion pumps, radiation therapy devices, contrast injectors, dialysis machines, assistive devices for the blind.<p>Last year I had to go to the ER it was pretty cool to see that some of the equipment was stuff I've worked on. I needed a CT scan with contrast, I had worked on the standards body that defined the protocol that allowed CT scanner talk to a contrast injector, and they were using the device I worked on with the feature I defined and implemented.</p><p>Its pretty cool to see your work keep you alive.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39955464"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39955464" href="https://news.ycombinator.com/vote?id=39955464&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I’ve worked on medical device stuff too, and it’s not like anything else. I’ll never forget the first time I found out that code I’d written had saved someone’s life. I’d done plenty of awesome things, and in that moment they all felt small.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39956033"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39956033" href="https://news.ycombinator.com/vote?id=39956033&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>That's fascinating. Sadly, based on the quality of software engineering I've witnessed (and produced) over my career, if I were to find myself having to trust my life with any of it, I would be terrified.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39956177"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39956177" href="https://news.ycombinator.com/vote?id=39956177&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>That's when you beat on the code until you aren't scared. Don't let the code out the door until you've unit tested, integration tested, QA'd it to hell and back.<p>If it's some random cat pic frontend website code and it breaks, yeah whatever, just fix it as it breaks because you have the luxury of hourly deploys. but on the other side of the spectrum, if you're writing firmware and it's isn't remotely updatable, you don't just sling the code over the wall in the same way. in that realm you have the luxury of an actual spec and a less complicated system.</p><p>everyone gets scared. what you do in the face of it is up to you.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="39955878"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39955878" href="https://news.ycombinator.com/vote?id=39955878&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I had to deal with some of projects you mention. At least where I'm from (italy), we rely on a bunch of old proprietary and very sh* technologies that I think it's really killing patients (metaphorically speaking... or maybe not...). The thing is that most of people aren't asking AI/the superb cure, but something that just <i>works</i>.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39956288"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39956288" href="https://news.ycombinator.com/vote?id=39956288&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I'm fairly familiar with infusion pumps, where bad software regularly kills patients. Just look up "infusion pump software recall" and you'll find dozens and dozens of very recent examples of how bad software implementations have led to a lot of preventable deaths.<p>I have some friends trying to fix this[1] and they have amazing tech, but it's a difficult industry to break in to.</p><p>1. <a href="https://www.altrainfusion.com/" rel="nofollow">https://www.altrainfusion.com/</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="39956175"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39956175" href="https://news.ycombinator.com/vote?id=39956175&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>&gt; protocol that allowed CT scanner talk to a contrast injector<p>was this part of the DICOM protocol?</p><p>i have worked with medical imaging devices as well, but was not fortunate enough to work with the CT modality. cool stuff!
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39956448"><td></td></tr>
                        <tr id="39955551"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955551" href="https://news.ycombinator.com/vote?id=39955551&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I wrote multiple systems that import most of the tax return data for the Finnish Tax Administration, a system that imports payroll data (and helped with the previous version of the system), and tax payer data extraction for other government agencies. Downstream process use this data to automatically fill out taxpayers' tax returns in Finland each year, and individuals only file tax return corrections. So if everything looks good, which happens for 90+% of taxpayers, there's nothing to do each year. We even won a few awards for the project.<p><a href="https://www.pry.fi/en/activities/news/the_finnish_tax_administration_has_won_2nd_place_in_ipma_s_(international_project_management_association)_mega_project_series.1548.news" rel="nofollow">https://www.pry.fi/en/activities/news/the_finnish_tax_admini...</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39955642"><td></td></tr>
                <tr id="39955730"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39955730" href="https://news.ycombinator.com/vote?id=39955730&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I'd love to, this is exactly the use case for digital technology; automate the stuff we can making more time for more meaningful taska for everyone. Finland is ahead of it's time for these kinds of integrations. Problem is, it requires a central authority having all of the data, and the US has absolutely zero trust in it's government to not fuck it up. With good reason</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39956181"><td></td></tr>
                <tr id="39956814"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_39956814" href="https://news.ycombinator.com/vote?id=39956814&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Absolutely would not work in the US (as, unfortunately, most public services). There's already a huge lobby from TurboTax and other players. All countries that got to this level of automation already had publicly developed, free software for tax payers previously.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39957003"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_39957003" href="https://news.ycombinator.com/vote?id=39957003&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>How did you sleep last night? Your cynicism is slowing.<p>Just this year, the IRS started a direct file pilot program that flies in the face of "it absolutely would not work". It's not everything, but it's a start.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                                    <tr id="39955588"><td></td></tr>
                <tr id="39955666"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39955666" href="https://news.ycombinator.com/vote?id=39955666&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Project started in 2014 and is still ongoing, but I think it's mostly small add-ons these days. I was on this project for nearly 6 years.</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="39955633"><td></td></tr>
                <tr id="39955711"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39955711" href="https://news.ycombinator.com/vote?id=39955711&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Old boring tech, VB.NET and t-SQL. Never understood the hate for VB.NET, I swear it's from people misconstruing VBA, which is awful, or they had terrible infra and coding standards. The system we had was a general core product that was configurable (I mean, taxes are the same, they just have different rules), but also customizable. Finland wasn't the first international project, but it was maybe the biggest one, so a lot of the solutions ended up being custom for the project. Unfortunately been difficult to find work with the boring tech background, but it was enjoyable (especially considering it was taxes).</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39956291"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_39956291" href="https://news.ycombinator.com/vote?id=39956291&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>&gt; <i>Never understood the hate for VB.NET</i><p>Not many people "hate" this or that tech, is my observation. As a guy who more or less refuses to work with anything else beyond Elixir, Golang and Rust these days, I can tell you that my stance comes from informed trauma over my 22+ years of professional experience; many runtimes like the JVM and .NET are quite good but have defects that tend to show up in exactly the wrong moments (like a burst of load that usually nobody ever tests for).</p><p>You absolutely have my respect for working on that system and it makes tangible positive impact on people's lives. Kudos. Wish I had even one such project in my long career but alas.</p><p>That being said, we should always qualify our statements. Your code likely never has to work in 100K+ requests per second conditions, and latency barely matters -- as long as people don't see 30s HTTP timeout canned pages then it's all good, right?</p><p>Many of us work on much more demanding stuff however, and there the programming stack actually makes very real and measurable difference on many axii -- programmer productivity, runtime resilience to bursts or just high loads, raw speed, easiness of deploying a hot fix, and others.</p><p>Again, you have my respect. Choosing boring / old tech is viable in many cases. But definitely not all. All our tools come with tradeoffs. You simply chose one whose negative tradeoffs will never manifest.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                        <tr id="39956338"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39956338" href="https://news.ycombinator.com/vote?id=39956338&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Is that true that one can see everyone's salary in Finland? Or was it only for those above EUR 100k?
Can people outside of Finland see it? Doesnt this attract thieves? They know whom to rob.
What is the impact on dating scene? Do rich people put full names on Tinder?</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39956544"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39956544" href="https://news.ycombinator.com/vote?id=39956544&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Not sure in Finland but in Sweden yes you can see everyones salary (or more correctly you can see their income from salary. So if you got salary from two different jobs you just see the aggregate). Doesnt matter how much or little. And yes, it is def being used by criminals (on the other hand I'm sure it isnt hard to figure out in the US who is rich or not based on their lifestyle)</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39957023"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_39957023" href="https://news.ycombinator.com/vote?id=39957023&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>In the US, a lavish lifestyle can be funded on credit, so it's only an approximation. You don't know how much in debt the person driving the Benz is or isn't.</span></p></div></td></tr>
        </tbody></table></td></tr>
                              <tr id="39956224"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956224" href="https://news.ycombinator.com/vote?id=39956224&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I wrote a Tampermonkey script which more or less was a true 'automate someone out of a job' situation, except it didn't do that at all; it freed up 20+ hours a week that someone had to sit there and do this awful manual thing with vendor portals, csv's, and spreadsheets.<p>I haven't worked at that job for almost a decade, and last I heard it's continued being used with only a small amount of maintenance.</p><p>That's the most compliments I've ever gotten for any software I've ever written and it had very real human impact.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39956569"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39956569" href="https://news.ycombinator.com/vote?id=39956569&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Reminds me of my first job out of college as a data analyst. At least 60% of the work was extremely repetitive spreadsheet work and emails. Wrote some macros and automation scripts to do almost all of it in ~3 minutes instead of 4 hours and spent the saved time doing more interesting things that led to my next job.<p>In my case, however, I sufficiently automated the job that they didn't replace me when I left. I got a call ~4 years later because one of the macros broke when they finally updated Excel. Fixed it for a small fee, and to my knowledge they're still using it today.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="39955635"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955635" href="https://news.ycombinator.com/vote?id=39955635&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>When I started my job as an intern, I was surprised to learn that before each release, the techlead of our team would always manually verify every commit in the release branch to make sure that the issues in the issue tracker that correspond to the commits are actually marked as "to be merged" and greenlit by QA, that there's no commits accidentally merged from other branches which aren't ready for a release yet (juniors often mismerge by accident), he also checked that all commits from the original feature branches were merged and none were missed (happens sometimes) etc. It would take him 1-2 hours to sift through all commits every time (each release would incorporate tons of features/fixes and commits weren't squashed, so there was a ton of work). The techlead also didn't allow anyone to do this work because he feared people wouldn't be as attentive as him. I remember there was one time when it was 11 PM and he was still verifying the commits and the release managers had to wait and couldn't go home.<p>I wrote a script which finds new commits not present in the master branch and compares them to the corresponding issues in the issue tracker (each commit message has an issue ID as a rule so it's easy to find the connections), and then generates a nice report like "the release branch cannot be released as is because issue 1234 is not marked as ready by QA, while commit 3456 is not present in any of the listed feature branches and could be a result of an accidental merge".</p><p>After we started using this script, the time it took to verify release branches decreased to something like 10 minutes. The techlead finally decided to delegate this kind of check to other devs (not a bottleneck anymore).</p><p>The idea was then copied by all other teams (web devs, etc.) and the script is still in use today, with many more features than I originally envisioned.</p><p>That small silly script was probably my most useful contribution because it saved a lot of time for everyone.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956420"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956420" href="https://news.ycombinator.com/vote?id=39956420&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I was first employee and only software engineer for 12 months at a startup working on increasing large scale solar power penetration in electricity networks globally. Worked there for 4 years solving all sorts of interesting problems working with meteorologists and electricity network specialists to build solar power forecasting systems. Implemented direct integration with several national electricity markets putting forward bids on 5 minute power generation which indirectly controlled many utility scale solar farms. This and more while keeping costs down and whole company to less than 10 people. Put lots of automation in place early on which enabled this as people joined. Having good monitoring solution along with CI from day 1 was a great enabler.<p>The project moved the needle for the amount of solar power that could be confidently installed into electricity networks in Australia, and many countries around the world. I got heavily burnt out, didn't get any equity, and initially took a substantial pay cut to work there, but on balance still the most impactful work I've done, and will be hard to top.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955361"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955361" href="https://news.ycombinator.com/vote?id=39955361&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Working on medical devices. It’s mostly modern C++, it’s demanding, you need to write a lot of unit tests and documentation (it’s the law), and the specs must be good (well, at least better than other software), but it’s really fun and useful in the end, and you learn a lot of things that can make you write better software in other fields.<p>I really think every SWE should spend a few years writing this kind of thing to be better.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39956196"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39956196" href="https://news.ycombinator.com/vote?id=39956196&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I would love to do an exchange program like this. Where the code I write is critical to human survival. I want to know what those people know.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39956347"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39956347" href="https://news.ycombinator.com/vote?id=39956347&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Saying this as someone who's done medical devices for close to 20 years, the only thing we know that you may not is that we <i>have</i> to follow procedures, or else.<p>Honestly, that's what it boils down to.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39958233"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_39958233" href="https://news.ycombinator.com/vote?id=39958233&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I presume this is respected. I.e. they don’t chuck a bunch of metrics / agile bs on your head to encourage people to cut corners for a bonus or just to keep their jobs.</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="39957962"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39957962" href="https://news.ycombinator.com/vote?id=39957962&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>[Writing this on my phone, sorry for the mess]<p>I learned writing medical software but I did way different things before. Anyone can learn that too. It’s just "enhanced software development," there is nothing magical about it. We have a healthy mix of young and old people. There are more women than in other software companies. It’s fun and, in the end, we all want to do a good job.</p><p>My whole post may be scary but it’s not. It’s still a regular 9 to 5 job and, most of the time, there are healthy boundaries. I’m not working overtime until 2AM, I just organize myself and work better if I’m in a healthy environment, and the well-defined organization is better for my mental health.</p><p>As _HeyLaughingBoy_ said, we follow procedures because it’s the law. Most of the time it’s respected by bosses because they know that it can bite them in the ass should a problem happen. If something bad happens, I’m still not legally responsible though but I’ll feel guilty inside, that why it works too for the motivation but I don’t think about it every day, I do my job like a regular job. Also nothing bad ever happened because of my code, the real motivation is the good things that can happen.</p><p>You can make mistakes, but if someone is injured because of a bug, the whole company will have to figure out where the process was not followed properly. You still can be fired for various reasons, but I’m pretty sure that someone will notice that I fucked up before it is released.</p><p>The main procedure is called the "ISO 62304" and you may find the PDF on pirate sites if you want to see what it is about. Every medical software company tries to follow it because it is mandatory to get all the certifications. Some companies do take it more seriously by paying for training for the devs which is nice.</p><p>I interact with real QA people who take their job seriously. They will write Jira tickets for literally anything that is not precisely defined in the spec. Sometimes they will piss me off for small details but I can’t avoid it, they are part of the process and there is no negotiation.</p><p>We also have UX teams who define the best colors and placement of the buttons in the final product.</p><p>Most of my job is writing standard software, and nothing critical, but the work is the same. If you have a bug, it must be linked to a spec. Sometimes you have to find the spec, write it, or bother your boss until he finds the spec. Then you write the code and the test to cover that spec. A bug is never a simple bug, it’s a deviation from a previously defined feature, and fixing it needs you to interact with different teams as part of the whole process: Did it happen in production or not? Is there a spec? Where is the spec? Fix the bug, write the test, optionally make sure that it has code coverage, annoy the QA team to validate that it has been fixed, and make sure that you have documented your fix in all the web tools (docs, user manual, GitLab PR, Jira, QMS stuff…). The QA team may also write their own automated tests in addition to unit tests.</p><p>As an example, I recently had a meeting with my boss and the QA team because I was asked to fix an obvious bug that was not defined in a specification. It looked like a bug BUT if it’s not defined in a requested feature or spec, is it really a bug? Who decides that it’s a bug if the proper behavior is not documented?</p><p>I do actually enjoy writing docs, specs, and tests now. And this whole thing made me a better dev.</p><p>Everything is not perfect though. Some companies have bad managers, bad planning, deadlines, everything like a regular company, but I can be proud of the result even if it’s a small fix that took me days to make sure that everyone is happy.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="39956287"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39956287" href="https://news.ycombinator.com/vote?id=39956287&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I tried pretty hard to get into medical technology for a while but just never landed any of those jobs<p>Sadly there's just only so much of that kind of work to go around and we all have to pay bills
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="39955520"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955520" href="https://news.ycombinator.com/vote?id=39955520&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I once joined a team where I had a secondary responsibility for configuring and generating periodic reports. These were daily or weekly activity reports for the platform I was expanding and supporting. When I joined, each report required custom coding and it took about two weeks to turn around.<p>I got bored of coding these reports. Bit by bit, I built a templating system and a configuration-based way of building these reports. Users were able to get reports not only in CSV files, but also in HTML, plaintext, and Excel files. They could get them not only by email, but also via FTP and SFTP. Reports could be customized in a variety of ways. Most importantly, with the new system, I could turn a report around in about five minutes.</p><p>When I joined there were less than 20 reports in the system. When I left, there were hundreds. Our internal users found these reports valuable, but the emotional cost of requesting and waiting for one was a burden. Removing this burden was a pleasure.</p><p>No one ever said that this needed to be done. It was an itch that got scratched.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956650"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956650" href="https://news.ycombinator.com/vote?id=39956650&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>In 2004 I was a summer intern after high school at a small software shop, they happened to be a subcontractor for a company providing a customs declarations tracking system for one of the largest container shipping companies in the world.  In the first few days I was given access to a server running an instance of the system, I was given the impression that it was staging. I needed to restore a backup to fix a bug in the ASP 3.0 app.  Being a Windows server I right clicked on the DB, and hit delete.<p>A few minutes later my boss gets a call saying someone is having trouble accessing the server.  Turns out that single machine hosted staging and production.  My boss kept his cool and we put up a more friendly error page saying it was down for maintenance, then started the 16 hour restore process.  Somehow I kept my job, probably because he realized his incredible negligence.</p><p>The biggest impact I had was pushing the parent company to buy better servers, and set up proper isolated environments with minimal access.  Preventing the situation from happening again.</p><p>I have hired close to one hundred engineers over my career, and I humble myself to every single one of them with this story.  I want people to understand mistakes happen, how we handle them as a team is the most important thing I want to cultivate.  I learned a lot from that job that became foundational to my career.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39957084"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39957084" href="https://news.ycombinator.com/vote?id=39957084&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I was a high school teacher at an alternative school. Most of our students had struggled at some point in their lives, in a way that had impacted their learning. So they came to us with transcripts that were all over the place: for example some had finished all their math credits but had failed all their social studies classes. Many had earned partial credit in some areas.<p>This made academic advising difficult for a variety of reasons. One big reason was the fact that all transcripts were text based. To figure out where a student stood academically, you had to take a pen and mark up their transcript, totaling their credits in different areas, in order to see which graduation requirements they had met and which they still needed to fulfill.</p><p>I wrote a program that parsed every student's text-based transcript, and generated a visual transcript for each student. What used to take 15-30 minutes for each student now took about 30 seconds. You could look at one of these documents and see exactly where a student's strengths were, in what areas they had struggled, and most importantly what they still needed to do in order to graduate.</p><p>It wasn't just a time-saver. The main benefit was that those 15-30 minutes that used to be spent parsing a transcript, with fingers crossed that no one was making a mistake, were now spent focused on formulating a plan that students could buy into and feel confident about.</p><p>I wrote that tool during some inservice days where my very cooperative principal let me skip out on boring repetitive trainings to focus on building the tool. I was able to build something I could run in that time, but it would have taken a lot longer to build a general-purpose tool that they could run indefinitely after I left. I haven't looked in a while, but I <i>hope</i> that some of the companies that handle student records have built these kinds of tools into their software. There was some movement in that direction last time I checked.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956300"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956300" href="https://news.ycombinator.com/vote?id=39956300&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>20+ years ago I wrote a completely custom open order dashboard on top of Oracle database that was modeled after a 30+ page daily report that the warehouse guy was printing every morning (M-F) and making 15 - 20 copies, then delivering to management. Aside from saving some trees the warehouse guy was able to come into work an hour later! (He was salary, so no issues there.)</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955190"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955190" href="https://news.ycombinator.com/vote?id=39955190&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I have worked in the rail industry for most of the last 10 years. The project with the most impact was a rail signalling upgrade for Norway's railways - using technologies whose foundations were layed 25-30 years</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955726"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955726" href="https://news.ycombinator.com/vote?id=39955726&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>911 system for my country. Was part of a small 'special unit' team and we implemented the entire system end to end. Administration, telephony system, even special asset monitoring. Best project I've worked on, and will probably have worked on in my life. Smartest people I've ever worked with.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39956405"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956405" href="https://news.ycombinator.com/vote?id=39956405&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I made a tool to control where Linux applications put their files via bind mounts and environment variables: <a href="https://github.com/queer/boxxy">https://github.com/queer/boxxy</a><p>I've heard that it's made it as far as university HPC clusters to help control iffy code written by students; I'm glad I managed to make that stuff a bit easier for the people operating them.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955439"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955439" href="https://news.ycombinator.com/vote?id=39955439&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Been working on the same project for close to a decade now: remote patient monitoring in the healthcare sector. (Mainly chronic) patients get to live longer and more normal lives knowing that any worsening of their condition is caught early on by clinicians and as a result the national (usually European) healthcare services save a ton of money by avoiding (re)admissions to their hospitals, one of those rare win-win scenarios. Improved the lives of thousands of patients over the years.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39955837"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39955837" href="https://news.ycombinator.com/vote?id=39955837&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Interesting.  Good, useful<p>What do you think about the direction medical mo ignoring is going g? Data collection, enshitification etcetera.</p><p>Is it a beat up?</p><p>Are we correct to be worried?
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                  <tr id="39957315"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39957315" href="https://news.ycombinator.com/vote?id=39957315&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Beej's Guide to Network Programming. :)<p>After that, I'm proud to have written and run the initial United States city name import script for openstreetmap, waaay back when.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955598"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955598" href="https://news.ycombinator.com/vote?id=39955598&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I worked on software that runs in an IoT gateway on bucket trucks used in the power industry, that raises audible and visual alarms if a worker doesn't have their harness clipped onto the bucket while they're operating it. In particular, I wrote a Finite State Machine library in Python that supports what tracks what's happening with the bucket, and helped develop the (MQTT) protocol to communicate with the backend. It was a lot of fun, and very satisfying.<p>Having said this, some of my more cynical friends have told me: "You weren't saving lives. You were just helping these companies reduce their insurance premiums."
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39955613"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39955613" href="https://news.ycombinator.com/vote?id=39955613&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Someone’s family doesn’t even know to be thankful to you, because dad came home after it squeaked at him.</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="39958027"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39958027" href="https://news.ycombinator.com/vote?id=39958027&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I was brought to Pakistan in 2008 to help lead the launch of EasyPaisa, a mobile money platform.
It was extreme, not only due to the scale of the launch (1000’s of branches on day 1), the complexity of setting up cash logistics etc across the country, but also because of the on-going terror attacks etc. 
It was hard, but super rewarding - so many people so thankful for how it made their lives that little bit easier!
Best team ever!</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955632"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955632" href="https://news.ycombinator.com/vote?id=39955632&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I am one of the main maintainers and contributors of Biome [0], a formatter and linter for the web.
It is great to see that so many users are enthusiastic about Biome. It is really gratifying to work on a project that is appreciated and useful to the community.<p>[0] <a href="https://biomejs.dev/" rel="nofollow">https://biomejs.dev/</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955118"><td></td></tr>
                <tr id="39955399"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39955399" href="https://news.ycombinator.com/vote?id=39955399&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I hope it's not the feature they call "Fast boot +" which is basically always keeping the TV on then it's not good :D</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39955430"><td></td></tr>
                  <tr id="39955282"><td></td></tr>
                <tr id="39955363"><td></td></tr>
                <tr id="39955740"><td></td></tr>
            <tr id="39955779"><td></td></tr>
                        <tr id="39956371"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39956371" href="https://news.ycombinator.com/vote?id=39956371&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Maybe you know why TVs cannot swap channels immediatelly but with this 1 second of static?</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39956813"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39956813" href="https://news.ycombinator.com/vote?id=39956813&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>What tv gives you static today? Analog tv changed channels fast, because hopefully you got signal lock quickly, and then you can start decoding wherever you are on the screen, and when the next vblank comes, you're good. Tuning latency less than one field.<p>Digital TV tuning is slow because of compression; when you tune to a stream in progress, you usually can't meaningfully decode it until you receive a I-frame. But I-frames are bigger than motion predicted frames, so it makes sense to only ocassionally send I-frames. Latency: technically unbounded, usually a couple of seconds.</p><p>It potentially gets a bit worse if you're on a switched video cable system where your box has to request channels, as now there's a request / response delay. But it shouldn't be too long for local comms... And in theory, the head end could start the stream with an I-frame (otoh, it may not have the processing power to decode/encode).</p><p>In theory, a TV with multiple tuners could do predictive decoding to help with channel surfing, but I don't think anybody actually does that.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39958024"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_39958024" href="https://news.ycombinator.com/vote?id=39958024&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I wonder if another solution would be for channels broadcast a subchannel which has more frequent i-frames, but lowered resolution and framerate to compensate for it in terms of overall bandwidth. When you surf, the TV could first hit up the subchannel, get the low-rez i-frame, and start showing a lower-quality version of the channel's video feed much faster, then start working on fetching and decoding the "real," full-resolution video feed and switch it over when it's ready. It still wouldn't be as fast and perfect as it was for analog and it'd require some industry collaboration and a bit of new hardware, but it still should be a more pleasant experience for people who just want to quickly see what's on.</span></p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="39955849"><td></td></tr>
                  <tr id="39956472"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956472" href="https://news.ycombinator.com/vote?id=39956472&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>For the last 4 years, we've been working on improving the efficiency of deep sleep. This isn't more time spent in deep sleep, it's increasing the synchronous firing of neurons which are the driver of slow-waves, which define deep sleep. 
We've got working devices and are going through the ethics approval to continue testing on a larger group of people before we're able to confidently bring our solution to market.<p>I find it useful myself atm, I think it has the largest potential impact of any project I've worked on before. (<a href="https://affectablesleep.com/" rel="nofollow">https://affectablesleep.com</a>).
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955384"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955384" href="https://news.ycombinator.com/vote?id=39955384&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I made an open source social networking platform that was used by non-profits like Oxfam and Greenpeace to train aid workers; the Canadian government as an intranet; the Spanish anti-austerity movement as an organizing platform; universities like Stanford and Harvard to teach; and Fortune 500 companies as a social intranet.<p>I had no idea what I was doing at the start. I'm very, very lucky that it worked out the way it did.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39955455"><td></td></tr>
                <tr id="39955747"><td></td></tr>
                        <tr id="39955302"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955302" href="https://news.ycombinator.com/vote?id=39955302&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Worked with a PhD student who had an algorithm to tell airline pilots exactly when to turn their engines on. Probably saves more pollution than I or my descendants will generate in all of our lives so I feel I’m comfortably in the black there.</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39955450"><td></td></tr>
            <tr id="39955703"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39955703" href="https://news.ycombinator.com/vote?id=39955703&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Could you elaborate? Why would a pilot not know when to turn their engines on, and why is the timing not obvious (eg, "when we want the airplane to move")?</span></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="39956439"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39956439" href="https://news.ycombinator.com/vote?id=39956439&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Ever started your car engine in a parking space but not been able to immediately pull out? Airports are extremely dynamic and complex and do not run like clockwork - they are pushing big hunks of metal through the air and across concrete with constant contention in both cases, and waiting for humans in between. But modern airports do try to optimise their Target Startup Approval Time (TSAT) and you can Google that term if you want to go deeper.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955967"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_39955967" href="https://news.ycombinator.com/vote?id=39955967&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>The engines need time to spin up and warm up, and additionally you might start them then (for a million possible reasons) have delay between starting them and actually pushing back from your gate.</span></p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="39956498"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956498" href="https://news.ycombinator.com/vote?id=39956498&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Most useful is relative. The book dealers who gave me my first ever contract for an automated leaflet generator that generated customized leaflets for each dealer would consider that the most useful. It's been over a decade and they still use it every day. Some other projects that come to my mind:<p>- an open source OIDC authorization and identity server (Ory Hydra and Ory Kratos)</p><p>- a system that uses computer vision to track food waste in industrial kitchens, helping them understand and minimize food waste</p><p>- a live milk quality estimator for a milking robot</p><p>- a browser extension called memorize. I wrote this reusing code from another contract I did while still in secondary school, and I'm mentioning it thanks to a user named lush berry who wrote "literally the most helpful thing i ever found on the internet. it helps me memorize stuff even when i'm procrastinating which is amazing. however, i have a lot of suggestions, does anyone know how i can contact the makers of this extension?". I wish I had the time to listen to these users and make the changes they want.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39957450"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39957450" href="https://news.ycombinator.com/vote?id=39957450&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I worked on the first digital archiving system for the UK National Archives.  It allowed digital records from central government to be ingested, categorised and preserved.  Before then, even digital documents had to be printed out to be archived as records, but this clearly didn't work for things like multimedia and web sites.<p>I later designed the first web presentation system for UK digital government records, and the mandatory access control system for them.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956333"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956333" href="https://news.ycombinator.com/vote?id=39956333&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Built a python PDF solution to replace a process that used to be a thousand+ instances of print out paper, fill it in, scan it, email it back, someone try to read the bad scan &amp; transcribe it.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955514"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955514" href="https://news.ycombinator.com/vote?id=39955514&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>In 2020 we had a pretty hard pivot due to COVID and worked with several state parties and organizations to coordinate mail-in voting registration drives and handle registration form OCR and phone validation before having them sent to the state. It was a chaotic year, and I know if we hadn't been there another company would have filled the role, but it was really meaningful work that had a direct impact on the elections that year.</span></p></div></td></tr>
        </tbody></table></td></tr>
                      <tr id="39957543"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39957543" href="https://news.ycombinator.com/vote?id=39957543&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Useful projects I've worked in are usually related to automating manual tasks.<p>For example I made a tool to create Azure DevOps tasks faster during Sprint Plannings. It allowed us to create tasks in batches, with templates, and displayed total time of tasks being created for a User Story.</p><p>It saved each team between 30 minutes and one hour when planning large sprints.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956438"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956438" href="https://news.ycombinator.com/vote?id=39956438&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Maybe not the most useful thing, but certainly useful and the coolest thing I built is a code formatter for the m language (also known as powerquery). At the time there was only daxformatter.com but no formatter for powerquery. So I wrote one and some people are using it. Imo it has a very nice ruleset to format code that I would prefer to formatters in other languages that I use myself. People reported issues and I took care of every single one of them. It's not much but it's honest work.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955553"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955553" href="https://news.ycombinator.com/vote?id=39955553&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Not a (big) project but as a student I worked in third level
support and we had to make sure that the service number was always available. The contract had harsh penalties in case we missed a call and so we had to reroute the number even for short breaks. This was done via a terrible, clunky and ancient Cisco web interface several levels deep. It took like a minute or more to log in, navigate to the right place and copy and paste the right number.<p>I think the 30 minutes I spent to automate this was the best return on investment I ever reached, because the script was used for years by many people and did not only help to prevent us from penalties but must have saved a considerable amount of time over the years.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956745"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956745" href="https://news.ycombinator.com/vote?id=39956745&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Ephemeral developer environments.  We built it on kubernetes and it took ages to get fully fleshed out. But ut was incredible. If you got a cached environment whos only differences was extra stuff you could obtain your own deployment copy of prod with a single command in a couple seconds. If it was starting from complete scratch it was maybe 10-15 seconds longer than the longest boot of all the services. You would tunnel your network and your local service thought it was in k8s and the pods in k8s thought your laptop was in k8s. There were data snapshots, and it would plugin to ci/cd so everyones integration tests just used a full environment.<p>We started building this back in k8s 1.4. Now you can just buy shipyard.build the weirdest part was we called our system drydock and shipyard calls their individual environments drydocks.</p><p>I literally cant imagine how i would write software at a medium+ company without ephemeral dev environments anymore.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955675"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955675" href="https://news.ycombinator.com/vote?id=39955675&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I think compressing daily X.25 transfers for a national tax agency that pay per Satellite use.<p>The challenge in that context was that the compression should be done in an IBM mainframe without buying C because it was a infinite bureaucracy process. Another challenge was that it was not possible to connect the mainframe to the ethernet network because they also need to buy an expensive network interface. So we cannot compress it in a normal PC and transfer it automatically.</p><p>We did two versions one in Cobol and another in REXX.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956536"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956536" href="https://news.ycombinator.com/vote?id=39956536&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I worked on a project team implementing TR-Notruf 2.0¹ for a regional ISP. TR-Notruf is the technical specification for routing calls and signalling caller location information for emergency calls in Germany.<p>In that project I wrote the software that receives the call, matches the caller number to the customer record, encodes the customer location information in the metadata of the call, and (based on the location) routes the call to the local emergency services call center.</p><p>While the task was quite simple most of the complexity of the project was to make sure that this service was highly available since downtime could have a detrimental effect on the health of customers.</p><p>¹ <a href="https://www.bundesnetzagentur.de/DE/Fachthemen/Telekommunikation/Unternehmenspflichten/Notruf/TechnischeRichtlinie/technischerichtlinie-node.html" rel="nofollow">https://www.bundesnetzagentur.de/DE/Fachthemen/Telekommunika...</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955186"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955186" href="https://news.ycombinator.com/vote?id=39955186&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I made a UI that allowed call center managers to search through historical transcripts by keyword. Previously they clicked through a table of chatlog popups and CTRL+F'd for hours.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955611"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955611" href="https://news.ycombinator.com/vote?id=39955611&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>One of my most fun projects of the 2010s was an event extraction system my team and I developed that could extract events like floodings, fires, terrorist attacks and several others, determine their properties (when, where, how many fatalities, monetary damage etc.) with the added capability that it could tell whether an event in a tweet (on "X", the system formerly known as "Twitter") was the same event that an agency news article talked about.<p>There's a little video we made for our KDD'18 paper about it:
<a href="https://www.kdd.org/kdd2018/accepted-papers/view/an-extensible-event-extraction-system-with-cross-media-event-resolution" rel="nofollow">https://www.kdd.org/kdd2018/accepted-papers/view/an-extensib...</a></p><p>Another cool project was to develop a state of the art legal search engine that was put into production across law firms in the US, and that was/is used by the U.S. supreme court justices (they were given anonymous accounts so even we could not tell who entered which query).
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956541"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956541" href="https://news.ycombinator.com/vote?id=39956541&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I worked on the data warehouse for federal storage of Medicaid and CHIP data (US government-sponsored healthcare programs that cover ~25% of the population, especially people with low-income, for non-US folk).<p>It's not the flashiest or most glamorous project I've worked on, nor was it the most technically challenging, but I think far and away it's the most useful code I wrote by pretty much any measure of useful.</p><p>Alas, the company I was at that was doing that work moved away from it before we could finish everything we had planned to build because it wasn't profitable in the way that could justify keeping it alive once it had accomplished its goal of being a cool line item we could say we did in investor pitches.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956497"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956497" href="https://news.ycombinator.com/vote?id=39956497&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>gcc/gdb/binutils; developing the original model for commercial free software from scratch; changing opinion so that forking was no longer considered a tragedy; originated FOSS projects with independent steering committees.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955427"><td></td></tr>
            <tr id="39958205"><td></td></tr>
                <tr id="39958311"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_39958311" href="https://news.ycombinator.com/vote?id=39958311&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Thanks for your work! I use it everyday and recommend it to everyone who has an interest in better password management.</span></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="39955437"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955437" href="https://news.ycombinator.com/vote?id=39955437&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I re-wrote (in Python) the WP1 bot, which compiles information on the importance and quality (Featured Article, A, B, Stub) of Wikipedia articles in Wikipedia projects. It's currently the bot with the most all time edits on English Wikipedia.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955243"><td></td></tr>
            <tr id="39956539"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956539" href="https://news.ycombinator.com/vote?id=39956539&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I built the image processing/volume estimation/3D display core of an iOS app used for planning treatments for aneurysms. I've not been associated with it in more than a decade but I still count it as probably my greatest contribution to society. Others have taken it over and taken it further.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39956260"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956260" href="https://news.ycombinator.com/vote?id=39956260&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>What actually made the most money for society and not shareholders was probably automating payments for student housing and taking it online. The student housing association are separate from the colleges and are non-profit organizations in my country, so this increased their efficiency by quite a bit.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39956418"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956418" href="https://news.ycombinator.com/vote?id=39956418&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>Wrote the firmware for an amateur packet radio terminal controller that flew on the shuttle a number of times in terminal+digipeater+bbs modes, was somewhat popular in terrestrial use, and had a few other bells and whistles like RTTY, SSTV, AMTOR and WEFAX.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955308"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955308" href="https://news.ycombinator.com/vote?id=39955308&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I made a device that lets my kids engage with chatGPT without eye strain [1] and parental controls. No need to give them my phone or laptop, no more worrying about them wandering onto the internet [2]. IMO it is incredibly useful to have kids interact safely with AI.<p>[1] an old fashioned B&amp;W monochrome LCD.</p><p>[2] its a stupid little dumb terminal
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956550"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956550" href="https://news.ycombinator.com/vote?id=39956550&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Wrote an Excel macro to produce “Marimekko” charts in a few hours (25 years ago).<p>A big name consultancy was trying to sell a software suite for $5K per seat when this was the only feature most people wanted.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955421"><td></td></tr>
            <tr id="39955425"><td></td></tr>
            <tr id="39955724"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955724" href="https://news.ycombinator.com/vote?id=39955724&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I've worked in the bankid system in my country. Most people I know have used it already, which is a nice change compared to the projects in which I haven't met a real user IRL. :D</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955224"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955224" href="https://news.ycombinator.com/vote?id=39955224&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I worked on a bunch of COVID testing and vaccine related projects for a US state government. Testing result aggregators and the system of record for COVID vaccines, hardest thing I ever done but also the most rewarding, I’ve been terribly bored ever since.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955534"><td></td></tr>
            <tr id="39956385"><td></td></tr>
            <tr id="39956230"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956230" href="https://news.ycombinator.com/vote?id=39956230&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>SAS, synthetic aperture sonar. I made the algorithms and software to make the near photographic pictures of the ocean floor from these systems. Completely amazing way to see the ocean floor! The software is in wide use by sever groups and runs in real time on a Remus 600 UUV.</span></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="39955228"><td></td></tr>
                <tr id="39955557"><td></td></tr>
                <tr id="39956399"><td></td></tr>
                  <tr id="39955266"><td></td></tr>
                  <tr id="39955433"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955433" href="https://news.ycombinator.com/vote?id=39955433&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I worked on a phone for the hard of hearing.  It is loud, and it also displays what the other party says in text on the screen.  So when a hard-of-hearing person can't hear what the other party says, they can read it three seconds later.<p>It matters.  When people can't hear, they lose their social lives.
              </p></span></p></td></tr>
        </tbody></table></td></tr>
                <tr id="39955500"><td></td></tr>
                  <tr id="39956328"><td></td></tr>
            <tr id="39955629"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955629" href="https://news.ycombinator.com/vote?id=39955629&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>Pathologic, a Drupal module which uses some simple heuristics to find and correct broken links and image paths in content which might happen because the content was migrated between servers, the URL of the server it was hosted on changed (such as when they started using HTTPS - early versions of this module predated the "all sites must use HTTPS" idea), the content used relative paths but was being viewed in a context where a full URL was necessary like a feed reader, etc.<p>It came about when I was working on the site for a local newspaper where the writers would work on articles using an internal copy of the site which would then be migrated to the live site when published, but when they linked to other articles, they would often copy-paste the URL of the article as it was on that internal site, causing a broken link when the article was published. Rather than try to teach a bunch of crusty journalists what relative paths were, I just wrote a bit of code to fix those URLs for them. With the client's permission I later cleaned up and open-sourced that module.</p><p>At its peak it was installed on over 70,000 Drupal installations that we know of (not all of them reported usage data). It's still being developed, though by other developers in the last few years as I have lost interest (and client work) in Drupal, but I'm still quite proud of it, and I still love to hear from people who say it was a must-have for their sites and made their lives so much easier.</p><p><a href="https://drupal.org/project/pathologic" rel="nofollow">https://drupal.org/project/pathologic</a>
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39955460"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39955460" href="https://news.ycombinator.com/vote?id=39955460&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><p><span>I spent a couple years working on "a portable compilation target for programming languages, enabling deployment on the web for client and server applications", but none of the code I wrote during that time actually shipped, so it's hard to say how useful that was. The technology itself seems to have turned out useful, though! I suspect "none of the code I wrote during this time actually shipped, but the project was a success*" is a common story in the industry at this point?<p>* though my understanding is almost everyone on the project struggled to get promoted since it was behind schedule
              </p></span></p></td></tr>
        </tbody></table></td></tr>
            <tr id="39956308"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_39956308" href="https://news.ycombinator.com/vote?id=39956308&amp;how=up&amp;goto=item%3Fid%3D39954849"></a></center>    </td><td><br><div>
                  <p><span>I lead and (re)wrote Ganache, the most popular Ethereum simulator. The company I work for shut it down last year though, despite success and consistent growth.</span></p></div></td></tr>
        </tbody></table></td></tr>
                      </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Faces.js, a JavaScript library for generating vector-based cartoon faces (329 pts)]]></title>
            <link>https://zengm.com/facesjs/</link>
            <guid>39954422</guid>
            <pubDate>Sat, 06 Apr 2024 18:37:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://zengm.com/facesjs/">https://zengm.com/facesjs/</a>, See on <a href="https://news.ycombinator.com/item?id=39954422">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="container"><h2>faces.js</h2><h3>A JavaScript library for generating vector-based cartoon faces</h3><p><i>To load new random faces, click here or press "r" on your keyboard.</i></p><p>faces.js is a JavaScript library that generates and displays cartoon faces, somewhat reminiscent of how the Nintendo Wii generates random Miis. Faces are drawn as scalable vector graphics (SVG). Each face can also be represented by a small JavaScript object, which allows you to store that object and then draw the same face again later.</p><p>As you can probably tell, the number of options for each facial feature (eyes, nose, mouth, etc.) is fairly limited, and some of the current options are fairly crude. So <b><a href="https://github.com/zengm-games/facesjs">fork it on GitHub</a></b> and add some new options!</p><h2>Usage</h2><p>1. Install from npm:</p><pre><code>$ npm install --save facesjs</code></pre><p>Or yarn:</p><pre><code>$ yarn add facesjs</code></pre><p>2. Display a randomly-generated face (the size of the <code>#my-div-id</code> div determines the size of the displayed face):</p><pre><code>import { display, generate } from "facesjs";

// Generate a random face
const face = generate();

// Display in a div with id "my-div-id"
display("my-div-id", face);
</code></pre><h2>More</h2><p>See all the available facial features in <a href="https://zengm.com/facesjs/editor.html">the faces.js editor</a>.</p><p>For more documentation and information (additional options, SVG export, CLI), <a href="https://github.com/zengm-games/facesjs">see the README on GitHub</a>.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[xkcd 2916: The Credible Machine (116 pts)]]></title>
            <link>https://xkcd.com/2916/</link>
            <guid>39953514</guid>
            <pubDate>Sat, 06 Apr 2024 16:30:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xkcd.com/2916/">https://xkcd.com/2916/</a>, See on <a href="https://news.ycombinator.com/item?id=39953514">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="bottom">
<p><img src="https://imgs.xkcd.com/s/a899e84.jpg" width="520" height="100" alt="Selected Comics" usemap="#comicmap"></p><map id="comicmap" name="comicmap">
<area shape="rect" coords="0,0,100,100" href="/150/" alt="Grownups">
<area shape="rect" coords="104,0,204,100" href="/730/" alt="Circuit Diagram">
<area shape="rect" coords="208,0,308,100" href="/162/" alt="Angular Momentum">
<area shape="rect" coords="312,0,412,100" href="/688/" alt="Self-Description">
<area shape="rect" coords="416,0,520,100" href="/556/" alt="Alternative Energy Revolution">
</map>

<p><a href="https://xkcd.com/1732/"><img src="https://imgs.xkcd.com/s/temperature.png" width="520" height="100" alt="Earth temperature timeline"></a></p>
<br>
<div id="comicLinks"><p>
Comics I enjoy:<br>
        <a href="http://threewordphrase.com/">Three Word Phrase</a>,
        <a href="https://www.smbc-comics.com/">SMBC</a>,
        <a href="https://www.qwantz.com/">Dinosaur Comics</a>,
        <a href="https://oglaf.com/">Oglaf</a> (nsfw),
        <a href="https://www.asofterworld.com/">A Softer World</a>,
        <a href="https://buttersafe.com/">Buttersafe</a>,
        <a href="https://pbfcomics.com/">Perry Bible Fellowship</a>,
        <a href="https://questionablecontent.net/">Questionable Content</a>,
        <a href="http://www.buttercupfestival.com/">Buttercup Festival</a>,
        <a href="https://www.homestuck.com/">Homestuck</a>,
	<a href="https://www.jspowerhour.com/">Junior Scientist Power Hour</a>
</p></div>
<br>

<br>
<center>
<p>xkcd.com is best viewed with Netscape Navigator 4.0 or below on a Pentium 3±1 emulated in Javascript on an Apple IIGS<br>at a screen resolution of 1024x1. Please enable your ad blockers, disable high-heat drying, and remove your device<br>from Airplane Mode and set it to Boat Mode. For security reasons, please leave caps lock on while browsing.</p>
</center>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PiVPN v4.6.0: The End (165 pts)]]></title>
            <link>https://github.com/pivpn/pivpn/releases/tag/v4.6.0</link>
            <guid>39953207</guid>
            <pubDate>Sat, 06 Apr 2024 15:47:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/pivpn/pivpn/releases/tag/v4.6.0">https://github.com/pivpn/pivpn/releases/tag/v4.6.0</a>, See on <a href="https://news.ycombinator.com/item?id=39953207">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pjax="true" data-test-selector="body-content" data-view-component="true"><p>Hi everyone,</p>
<p>It's time to say goodbye.</p>
<p>This is the final official release of PiVPN.</p>
<p>I inherited this project from <a data-hovercard-type="user" data-hovercard-url="/users/0-kaladin/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/0-kaladin">@0-kaladin</a> and <a data-hovercard-type="user" data-hovercard-url="/users/redfast00/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/redfast00">@redfast00</a>, who moved on with their lives. I maintained it as my own with the great help of <a data-hovercard-type="user" data-hovercard-url="/users/orazioedoardo/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/orazioedoardo">@orazioedoardo</a>, to whom I'm immensely grateful. He held the boat and kept it floating while I could not be present, and he too gave a lot of himself to this project!</p>
<p>But now it's time for me too to move on!</p>
<p>I've been giving less and less attention to PiVPN, and the desire to keep up with it is no longer what it once was. When PiVPN was created, it filled a big void and had a clear mission and purpose, which I feel has been fulfilled! We went from OpenVPN being something hard to set up and complicated to manage, to WireGuard being able to run on any toaster and easy to set up. There are so many tools out there that do the job much better than PiVPN does, and I genuinely believe PiVPN's mission in life was accomplished and is no longer relevant. Just as everything in nature has a start, there's also an end, and this is how PiVPN ends its journey.</p>
<p>PiVPN has been home for so many of you, starting with Linux, bash, open-source, and everyone was always very welcomed, just like it was for me <a href="https://github.com/pivpn/pivpn/commit/fbec57d1fda70341394bfd2bc90e1dab0af2c125">7 years ago</a>. I cannot express how grateful I am to all the <a href="https://github.com/pivpn/pivpn/graphs/contributors">84 Contributors</a> for this amazing project.</p>
<p>It has been a wild ride, and I've learned so much from PiVPN and from every single one of you!</p>
<p>THANK YOU!!</p>
<p>PiVPN repositories will be archived and set to read-only, and will no longer be maintained. Unless <a data-hovercard-type="user" data-hovercard-url="/users/0-kaladin/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/0-kaladin">@0-kaladin</a> rises back again and decides otherwise.</p>
<p>The PiVPN Website and its documentation are hosted on GitHub, therefore it will remain accessible under the pivpn.io domain for as long as <a data-hovercard-type="user" data-hovercard-url="/users/0-kaladin/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/0-kaladin">@0-kaladin</a> keeps paying the bills, just the same way I will keep hosting the redirection for the installation for as long as possible. I will still make a few commits to update the documentation about the project's state, but that will be it.</p>
<p>I will maintain ownership of the repository, but I won't pass it down to anyone else. First, because I feel it's not up to me to decide who to pass the project down to, and second, because there is no one else to pass the project to.</p>
<p>"But I want and can maintain it, can I take it over?" Let me put it plain and simple: No! I don't know you, I don't trust you! Fork it and carry on!</p>
<p>About this release, here's what it brings:</p>
<h3>New Features</h3>
<ul>
<li>Add possibility to use Pi-hole in unattended install (<a data-error-text="Failed to load title" data-id="2195064053" data-permission-text="Title is private" data-url="https://github.com/pivpn/pivpn/issues/1825" data-hovercard-type="pull_request" data-hovercard-url="/pivpn/pivpn/pull/1825/hovercard" href="https://github.com/pivpn/pivpn/pull/1825">#1825</a>)</li>
</ul>
<h3>Bugfixes and Refactors</h3>
<ul>
<li>Updates to subnet generation and client creation
<ul>
<li>refactor(core): allow any subnet and netmask</li>
<li>fix(scripts): prevent adding more clients than the subnet allows</li>
<li>fix(scripts): correctly remove leading zeros from ipv6 quartets</li>
<li>refactor(core): new probabilistic subnet generation with fallback to other RFC1918 subnets</li>
</ul>
</li>
</ul>
<p><strong>Full Changelog</strong>: <a href="https://github.com/pivpn/pivpn/compare/v4.5.0...v4.6.0"><tt>v4.5.0...v4.6.0</tt></a></p>
<p>Once again, Thank you all so much for everything! See you around!<br>
4s3ti</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Home insurers are dropping customers based on aerial images (254 pts)]]></title>
            <link>https://www.wsj.com/real-estate/home-insurance-aerial-images-37a18b16</link>
            <guid>39952902</guid>
            <pubDate>Sat, 06 Apr 2024 14:52:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/real-estate/home-insurance-aerial-images-37a18b16">https://www.wsj.com/real-estate/home-insurance-aerial-images-37a18b16</a>, See on <a href="https://news.ycombinator.com/item?id=39952902">Hacker News</a></p>
Couldn't get https://www.wsj.com/real-estate/home-insurance-aerial-images-37a18b16: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Schedule-Free Learning – A New Way to Train (109 pts)]]></title>
            <link>https://github.com/facebookresearch/schedule_free</link>
            <guid>39952736</guid>
            <pubDate>Sat, 06 Apr 2024 14:29:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/facebookresearch/schedule_free">https://github.com/facebookresearch/schedule_free</a>, See on <a href="https://news.ycombinator.com/item?id=39952736">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Schedule-Free Learning - A New Way to Train</h2><a id="user-content-schedule-free-learning---a-new-way-to-train" aria-label="Permalink: Schedule-Free Learning - A New Way to Train" href="#schedule-free-learning---a-new-way-to-train"></a></p>
<p dir="auto">Schedule-Free Optimizers in PyTorch.</p>
<p dir="auto">Authors: Aaron Defazio, Xingyu Yang, Konstantin Mishchenko, Ashok Cutkosky, Harsh Mehta, Ahmed Khaled</p>
<p dir="auto"><strong>TLDR</strong> Faster training without schedules - no need to specify the stopping time/steps in advance!</p>
<p dir="auto"><code>pip install schedulefree</code></p>
<p dir="auto">Primary implementations are <code>SGDScheduleFree</code> and <code>AdamWScheduleFree</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Approach</h2><a id="user-content-approach" aria-label="Permalink: Approach" href="#approach"></a></p>
<p dir="auto">Schedule-Free learning replaces the momentum of an underlying optimizer with a combination of interpolation and averaging. In the case of gradient descent, the Schedule-free update is:</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$$
\begin{align*}
y_{t} &amp; = (1-\beta)z_{t} + \beta x_{t},\\
z_{t+1} &amp; =z_{t}-\gamma\nabla f(y_{t}),\\
x_{t+1} &amp; =\left(1-\frac{1}{t}\right)x_{t}+\frac{1}{t}z_{t+1},
\end{align*}
$$</math-renderer></p>
<p dir="auto">Here <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$x$</math-renderer> is the sequence that evaluations of test/val loss should occur at, which differs from the primary iterates <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$z$</math-renderer> and the gradient evaluation locations <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$y$</math-renderer>. The updates to <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$z$</math-renderer> correspond to the underlying optimizer, in this case a simple gradient step.</p>
<p dir="auto">As the name suggests, Schedule-free learning does not require a decreasing learning rate schedule, yet typically out-performs, or at worst matches, SOTA schedules such as cosine-decay and linear decay. Only two sequences need to be stored at a time (the third can be computed from the other two on the fly) so this method has the same memory requirements as the base optimizer (parameter buffer + momentum).</p>
<p dir="auto">We provide both AdamW and SGD versions in this repo.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How to Use</h2><a id="user-content-how-to-use" aria-label="Permalink: How to Use" href="#how-to-use"></a></p>
<p dir="auto">Since our optimizer uses two different points for gradient calls and test/val loss calculations, it's necessary to switch the param buffer between the two during training. This is done by calling <code>optimizer.train()</code> at the same place you call <code>model.train()</code> and <code>optimizer.eval()</code> at the same place you call <code>model.eval()</code>.</p>
<p dir="auto">If your code supports PyTorch Optimizer step closures, you can use the closure forms of the optimizers, which do not require the <code>.train()</code> and <code>.eval()</code> calls.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Examples</h3><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto">Examples of using the <code>schedulefree</code> package can be found in the <code>examples</code> folder. These include:</p>
<ul dir="auto">
<li><a href="https://github.com/facebookresearch/schedule_free/blob/main/examples/mnist/README.md">Image classification (MNIST) using Convnets</a>*</li>
<li>More examples to be added</li>
</ul>
<p dir="auto">*Example is modified from <a href="https://github.com/pytorch/examples">Pytorch Examples Repo</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Caveats</h2><a id="user-content-caveats" aria-label="Permalink: Caveats" href="#caveats"></a></p>
<ul dir="auto">
<li>If your model uses BatchNorm, additional modifications are required for test/val evaluations to work correctly. Right before eval, something like the following:</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content=" model.train()
 optimizer.eval()
 for batch in itertools.islice(train_loader, 50):
   _ = self.model(batch)
 model.eval()"><pre> <span>model</span>.<span>train</span>()
 <span>optimizer</span>.<span>eval</span>()
 <span>for</span> <span>batch</span> <span>in</span> <span>itertools</span>.<span>islice</span>(<span>train_loader</span>, <span>50</span>):
   <span>_</span> <span>=</span> <span>self</span>.<span>model</span>(<span>batch</span>)
 <span>model</span>.<span>eval</span>()</pre></div>
<p dir="auto">This will replace the <code>training_mean</code>/<code>training_var</code> cache (which is updated in each forward pass when in model.train() mode) with values calculated at <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$x$</math-renderer> instead of <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$y$</math-renderer>. Using PreciseBN will also avoid this issue.</p>
<ul dir="auto">
<li>Many code bases use additional features that may not be compatible without additional changes. For instance, if the parameters are cached in fp16, the cached versions will need to be updated manually to ensure the correct <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$x$</math-renderer> sequence is used for evaluation, not the <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$y$</math-renderer> sequence. Some GradScalers do this.</li>
<li>Training is more sensitive to the choice of <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$\beta$</math-renderer> than you may expect from standard momentum. Our default of <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$0.9$</math-renderer> works on most problems but it may be necessary to increase the value to <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$0.95$</math-renderer> or <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$0.98$</math-renderer> particually for very long training runs.</li>
<li>There is no need to use a learning rate scheduler, however the code is compatible with one.</li>
<li>Using learning rate warmup is recommended. This is supported through the <code>warmup_steps</code> parameter.</li>
<li>This method does require tuning - it won't necessarily out-perform a schedule approach without also tuning regularization and learning rate parameters.</li>
<li>For SGD, a learning rate 10x-50x larger than classical rates seems to be a good starting point.</li>
<li>For AdamW, learnings rates in the range 1x-10x larger than with schedule based approaches seem to work.</li>
<li>Our method can also be implemented as a wrapper around a base optimizer, where the momentum of the base optimizer is disabled. We didn't do that as PyTorch's Adam implementation would still allocate memory for it's momentum buffer <code>exp_avg</code> even if we don't use it.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">See the <a href="https://github.com/facebookresearch/schedule_free/blob/main/LICENSE">License file</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Related Work</h2><a id="user-content-related-work" aria-label="Permalink: Related Work" href="#related-work"></a></p>
<p dir="auto">Schedule-Free learning can be seen as an interpolation between primal averaging (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$\beta=1$</math-renderer>) and Polyak-Ruppert averaging (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$\beta=0)$</math-renderer>. The advantage of this interpolation is that it allows us to get the best of both worlds. We can achieve the fast early stage convergence of Polyak-Ruppert averaging (since the <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$z$</math-renderer> sequence moves quicker than the <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$x$</math-renderer> sequence), without the <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$x$</math-renderer> sequence straying too far from the <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$z$</math-renderer> sequence, which causes instability.</p>
<p dir="auto">Our method is also related to Nesterov's accelerated method (Nesterov, 1983), which can be written in the following form:</p>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="6e53a9c53f56065aa1e956ceb87c03d4">$$
\begin{align*}
y_{t} &amp; =(1-2/(t+1))x_{t} + (2/(t+1))z_{t}\\
z_{t+1} &amp; =z_{t}-\frac{t}{2L}\nabla f(y_{t})\\
x_{t+1} &amp; =(1-2/(t+1))x_{t}+(2/(t+1))z_{t+1}
\end{align*}
$$</math-renderer></p>
<p dir="auto">Our approach has the same three sequences, but uses very different weights, and crucially, does not include an increasing learning rate over time, which is essential for accelerated rates with Nesterov's method. We also use different weight sequences for the interpolation operation versus the averaging operation.</p>
<p dir="auto">Tail averaging approaches such as Stochastic Weight Averaging (Izmailov et al., 2018) and LAtest Weight Averaging (Kaddour, 2022; Sanyal et al., 2023) combine averaging with large or cyclic learning rates. They still require the use of a schedule, introduce additional hyper-parameters to tune, and require additional memory compared to our technique. It is also possible to use SWA and LAWA on top of our approach, potentially giving further gains.</p>
<p dir="auto">Portes Et. Al. (2022) use cyclic learning rate schedules with increasing cycle periods to give a method that explores multiple points along the Pareto frontier of training time vs eval performance. Each point at the end of a cycle is an approximation to the model from a tuned schedule ending at that time. Our method gives the entire frontier, rather than just a few points along the path.</p>
<p dir="auto">Exponential moving averages (EMA) of the iterate sequence are used in the popular Lookahead optimizer (Zhang et al., 2019). The Lookahead method can be seen as the EMA version of primal averaging, just as exponential weight averaging is the EMA version of Polyak-Ruppert averaging. Our extra interpolation step can potentially be used in combination with the lookahead optimizer also.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NASA spacecraft films crazy vortex while flying through sun's atmosphere (195 pts)]]></title>
            <link>https://mashable.com/article/nasa-sun-footage-parker-solar-probe</link>
            <guid>39952111</guid>
            <pubDate>Sat, 06 Apr 2024 12:50:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mashable.com/article/nasa-sun-footage-parker-solar-probe">https://mashable.com/article/nasa-sun-footage-parker-solar-probe</a>, See on <a href="https://news.ycombinator.com/item?id=39952111">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-ga-module="content_body">
<div>
<p><img src="https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/hero-image.fill.size_1248x702.v1712094491.png" alt="A &quot;vortex-like structure&quot; inside the sun's atmosphere caused by a coronal mass ejection interacting with the stellar environment." width="1248" height="702" srcset="https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/hero-image.fill.size_400x225.v1712094491.png 400w, https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/hero-image.fill.size_800x450.v1712094491.png 800w, https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/hero-image.fill.size_1248x702.v1712094491.png 1600w" sizes="(max-width: 1280px) 100vw, 1280px"></p><p><span>A "vortex-like structure" inside the sun's atmosphere caused by a coronal mass ejection interacting with the stellar environment.</span>
<span>Credit: U.S. Naval Research Laboratory</span>
</p>
</div>
<article id="article" data-autopogo="">
<p>The <a href="https://mashable.com/article/nasa-parker-solar-probe-speed" target="_self">fastest spacecraft</a> in our solar system has captured wild footage inside the sun's atmosphere.</p><p>NASA's <a href="https://mashable.com/article/nasa-probe-survives-sun" target="_self">Parker Solar Probe</a> — a craft flying much closer to the <a href="https://mashable.com/article/solar-flares-sun-active-why" target="_self">sun</a> than any previous mission — witnessed massive "vortex-like structures" in our star's outer atmosphere, called the corona. You can see the unprecedented view below, taken by the probe's WISPR camera (short for Wide-field Imager for Parker Solar Probe) and recently posted online.</p>
<p>Researchers suspect that the phenomena was caused by a <a href="https://mashable.com/article/sun-solar-ejection-nasa-footage" target="_self">coronal mass ejection</a> (CME) — when the sun ejects a mass of super hot gas (plasma) into <a href="https://mashable.com/category/space" target="_self">space</a> — interacting with the solar wind. The sun's solar wind is constant, as our <a href="https://mashable.com/article/how-hot-is-sun-nasa" target="_self">medium-sized star</a> emits a steady stream of charged particles. </p>
<p>The new research associated with the footage, published in <a href="https://iopscience.iop.org/article/10.3847/1538-4357/ad2208" target="_blank" title="(opens in a new window)"><em><u>The Astrophysical Journal</u></em></a>, concluded that this find in uncharted realms of the sun has created new opportunities to better understand and predict CMEs, outbursts that can severely harm communications and electrical grids on <a href="https://mashable.com/article/earth-pictures-images-from-space" target="_self">Earth</a>. Technically, these rare vortices are called "Kelvin-Helmholtz instabilities," or KHI.</p><section x-data="window.newsletter()" x-init="init()" data-ga-impression="" data-ga-category="newsletters" data-ga-module="incontent_nl_signup" data-ga-label="mashablelightspeed">
<p>
Mashable Light Speed
</p>


</section>
<p>"The direct imaging of extraordinary ephemeral phenomena like KHI with WISPR/PSP is a discovery that opens a new window to better understand CME propagation and their interaction with the ambient solar wind," Evangelos Paouris, a space weather researcher and member of the WISPR team at George Mason University, said in a statement. </p><p>CMEs "can endanger satellites, disrupt communications and navigation technologies, and even knock out power grids on Earth," <a href="https://mashable.com/category/nasa" target="_self">NASA</a> explains. Infamously, a potent CME in 1989 knocked out power to millions in Québec, Canada. The CME hit Earth's magnetic field on March 12 of that year, and then, wrote NASA astronomer Sten Odenwald, "Just after 2:44 a.m. on March 13, the currents found a weakness in the electrical power grid of Québec. In less than two minutes, the entire Québec power grid lost power. During the 12-hour blackout that followed, millions of people suddenly found themselves in dark office buildings and underground pedestrian tunnels, and in stalled elevators."</p>
<div>
<p><img src="https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/images-1.fill.size_2000x1120.v1712160131.png" alt="An artist's conception of NASA's Parker Solar Probe passing through the sun's outer atmosphere, or corona." width="2000" height="1120" loading="lazy" srcset="https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/images-1.fill.size_800x448.v1712160131.png 800w, https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/images-1.fill.size_1400x784.v1712160131.png 1400w, https://helios-i.mashable.com/imagery/articles/05JUllEJJjwEO1N0VRBQJlK/images-1.fill.size_2000x1120.v1712160131.png 2000w" sizes="(max-width: 1408px) 100vw, 1408px">
</p>
<p><span>An artist's conception of NASA's Parker Solar Probe passing through the sun's outer atmosphere, or corona.</span>
<span>Credit: NASA</span>
</p>
</div>
<p>The space agency's Parker Solar Probe will continue its speeding dives into the <a href="https://mashable.com/article/solar-eclipse-2024-what-to-expect" target="_self">sun's corona</a>. To withstand the heat, it's fortified with a 4.5-inch-thick carbon heat shield that's pointed at the sun. The shield itself heats up to some 2,500 degrees Fahrenheit, but just a couple of feet behind the shield, the environs are surprisingly mild.</p><p>Later this year, the spacecraft will reach a whopping 430,000 miles per hour.</p>

</article>
<div>
<div>
<p><img src="https://helios-i.mashable.com/imagery/defaults/fallback-thumbnail.fill.size_100x100.1.png" alt="Mashable Image" width="100" height="100"></p>
</div>
<div>
<p>Mark is an award-winning journalist and the science editor at Mashable. After communicating science as a ranger with the National Park Service, he began a reporting career after seeing the extraordinary value in educating the public about the happenings in earth sciences, space, biodiversity, health, and beyond.&nbsp;</p><p>You can reach Mark at <a href="https://mashable.com/cdn-cgi/l/email-protection#a4c9cfc5d1c2c9c5cae4c9c5d7ccc5c6c8c18ac7cbc9" target="_blank" title="(opens in a new window)"><span data-cfemail="305d5b5145565d515e705d51435851525c551e535f5d">[email&nbsp;protected]</span></a>.</p>
</div>
</div>
</section><div x-data="window.newsletter()" x-init="init()" data-ga-impression="" data-ga-category="newsletters" data-ga-module="footer_nl_signup" data-ga-label="Top Stories">

<p>
This newsletter may contain advertising, deals, or affiliate links. Subscribing to a newsletter indicates your consent to our <a href="https://www.ziffdavis.com/terms-of-use" target="_blank" rel="noopener" title="(opens in a new window)">Terms of Use</a> and <a href="https://www.ziffdavis.com/ztg-privacy-policy" target="_blank" rel="noopener" title="(opens in a new window)">Privacy Policy</a>. You may unsubscribe from the newsletters at any time.
</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Asus refunds Zenfone buyer for failing to provide bootloader unlock tools (243 pts)]]></title>
            <link>https://www.androidauthority.com/asus-bootloader-unlock-settlement-3431818/</link>
            <guid>39951649</guid>
            <pubDate>Sat, 06 Apr 2024 11:16:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.androidauthority.com/asus-bootloader-unlock-settlement-3431818/">https://www.androidauthority.com/asus-bootloader-unlock-settlement-3431818/</a>, See on <a href="https://news.ycombinator.com/item?id=39951649">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><picture><source sizes="(min-width: 64rem) 51.25rem, 80vw" srcset="https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing.jpg.webp 1920w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1536w-864h.jpg.webp 1536w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-675w-380h.jpg.webp 675w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-64w-36h.jpg.webp 64w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1000w-563h.jpg.webp 1000w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-300w-170h.jpg.webp 300w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1280w-720h.jpg.webp 1280w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-840w-472h.jpg.webp 840w" type="image/webp"><img decoding="async" loading="eager" sizes="(min-width: 64rem) 51.25rem, 80vw" title="ASUS Zenfone 10 vs ASUS Zenfone 9 standing" srcset="https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing.jpg 1920w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1536w-864h.jpg 1536w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-675w-380h.jpg 675w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-64w-36h.jpg 64w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1000w-563h.jpg 1000w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-300w-170h.jpg 300w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-1280w-720h.jpg 1280w, https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing-840w-472h.jpg 840w" alt="ASUS Zenfone 10 vs ASUS Zenfone 9 standing" src="https://www.androidauthority.com/wp-content/uploads/2023/06/ASUS-Zenfone-10-vs-ASUS-Zenfone-9-standing.jpg"></picture><div><p>Robert Triggs / Android Authority</p></div></div><div><p>TL;DR</p>
<ul>
<li>In the UK, a Zenfone buyer sued ASUS over the company’s broken promise to provide bootloader unlocking support for its phones.</li>
<li>The buyer won, getting a full refund for the phone and their court fees, for a total of £770 (~$973).</li>
<li>If you have similar issues, this case proves you have a shot at getting a refund, too.</li>
</ul>
</div><p>Over the past few months, there’s been a growing controversy among buyers of ASUS phones. Although ASUS makes some of the <a href="https://www.androidauthority.com/best-android-phones-568001/">best Android phones</a> you can buy, the company has fallen short in making bootloader unlocking tools available to buyers. Previously, these tools were easy to operate and readily available, but in May last year, things took a turn. Now, unlocking the bootloader of a recent ASUS phone — including the Zenfone 9, Zenfone 10, and <a href="https://www.androidauthority.com/asus-zenfone-11-ultra-review-3406664/">Zenfone 11 Ultra</a>&nbsp;— is not possible.</p><p>One buyer in particular, who we’ll call Timothy (not their real name), was very upset about this. Timothy told us that they bought an ASUS Zenfone specifically for the ability to unlock its bootloader. Upset by this broken promise, Timothy — who lives in the United Kingdom — sued ASUS in the UK’s version of small claims court.</p><p>Today, Timothy provided us with documentation of the court case and proof that ASUS has settled. In the settlement, Timothy received a full refund for the phone (£700) and the court filing fee (£70) for a total of £770 (~$973).</p><p>This has set a basic precedent: if you, like Timothy, are upset that ASUS isn’t providing a way to unlock your phone’s bootloader, taking the company to court might be a viable solution.</p><div><h2>ASUS bootloader unlocking: What is going on?</h2>
<p>Unlocking the bootloader of an Android phone is a way of getting full access to the system. It allows you to manipulate the software already installed on the device and even uninstall it and reinstall a new version of Android. While this is often complicated to do, it provides a way for smartphone owners to continue to use their devices after an OEM has terminated support.</p></div><p>Given that <a href="https://www.androidauthority.com/phone-update-policies-1658633/">ASUS has one of the worst software support commitments in the Android world</a>, many tech-savvy ASUS buyers have depended on bootloader unlocking to continue using the company’s phones far beyond the dismal two-year window ASUS provides. In fact, ASUS has essentially acknowledged this phenomenon by promising to continue providing the necessary tools to bootloader unlock its phones.</p><p>However, last year, it reneged on that promise by disabling the unlocking tools and refusing to give users the codes they needed to perform the procedure. It started removing posts about bootloader unlocking in its ZenTalk forums. Mods of that forum started giving explanations about the unlocking tools being under maintenance or getting overhauled for compliance reasons but giving no information on when they would become active again.</p><p>In March, Timothy led the charge by taking ASUS to small claims court, which brings us to today’s news of their big win.</p><p>If you are in the same position as Timothy and would like a refund for your ASUS purchase, small claims court might be the best way to go. However, we have reached out to ASUS to get more information on this situation from the company’s perspective. Unfortunately, due to ASUS being based in Taiwan, we are unlikely to get a response until next week. We will update this article if and when we hear back.</p><p><strong>Got a tip? Talk to us!</strong>&nbsp;Email our staff at <a href="mailto:news@androidauthority.com" rel="noopener noreferrer" data-stringify-link="mailto:tips@androidauthority.com" data-sk="tooltip_parent" aria-haspopup="menu">news@androidauthority.com</a>. You can stay anonymous or get credit for the info, it's your choice.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lessons I learned from working full-time on a FOSS project for 503 days (133 pts)]]></title>
            <link>https://mathspp.com/blog/503-days-working-full-time-on-foss-lessons-learned</link>
            <guid>39951587</guid>
            <pubDate>Sat, 06 Apr 2024 11:02:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mathspp.com/blog/503-days-working-full-time-on-foss-lessons-learned">https://mathspp.com/blog/503-days-working-full-time-on-foss-lessons-learned</a>, See on <a href="https://news.ycombinator.com/item?id=39951587">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>This article shares some of the lessons I learned from working full-time on a FOSS project for 503 days.</p>

                
<h2 id="503-days-working-full-time-on-foss-lessons-learned">503 days working full-time on FOSS: lessons learned<a href="#503-days-working-full-time-on-foss-lessons-learned" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>From the 14th of November of 2022 to the 31st of March of 2024 I worked full-time on a FOSS project.
This article is an account of some of the things that I learned during those 503 days.</p>
<p>I have much more time to devote to <em><strong>you</strong></em> now that I don't have this full-time position.
If you're looking for Python training, <a href="mailto:rodrigo@mathspp.com">reach out to me</a>.
I'll also be investing my time in this blog and in <a href="https://mathspp.com/books">my books</a>.</p>
<p>I joined Textualize, the company behind the popular FOSS Python packages <a href="https://github.com/textualize/rich" target="_blank" rel="nofollow noopener noreferrer">Rich</a> and <a href="https://github.com/textualize/textual" target="_blank" rel="nofollow noopener noreferrer">Textual</a>, on the 14th of November of 2022.
When I joined to work remotely from sunny Portugal, I joined <a href="https://github.com/willmcgugan" target="_blank" rel="nofollow noopener noreferrer">Will</a> (the creator of Rich &amp; Textual, and my boss), <a href="https://github.com/darrenburns" target="_blank" rel="nofollow noopener noreferrer">Darren</a>, and <a href="https://github.com/davep" target="_blank" rel="nofollow noopener noreferrer">Dave</a>, all of whom worked together in Scotland.
For the first time in my professional life, I was the worst Python developer in the room<sup id="fnref1:1"><a href="#fn:1">1</a></sup>.
This means that my technical knowledge improved substantially over the course of these 503 days, namely in areas such as:</p>
<ul>
<li>asynchronous code execution and Python's <code>asyncio</code>;</li>
<li>Python tipe hinting;</li>
<li>testing / <code>pytest</code>; and</li>
<li>software engineering best practices in general.</li>
</ul>
<p>However, this article will focus on the non-technical lessons I learned during this 503-day experience, that fall under these four broad categories:</p>
<ol>
<li>how an online presence can lead to a job offer;</li>
<li>how your ego shouldn't be in the way of your work;</li>
<li>how to interact with users &amp; contributors; and</li>
<li>how to work on a huge codebase you don't know 100%.</li>
</ol>
<p>Let's dive right in.</p>

<p>One interesting thing that I learned even before starting my full-time position is that you can definitely find (job) opportunities in unconventional ways.
This has always been the case but the Internet makes it even easier to do so.</p>
<p>If you're looking for a job, you can submit your CV to a platform or fill out a form.
I've gotten job offers by going through that process.
But that's not how I got <em>this</em> job nor how I got any of my previous jobs.
I'll tell you more or less how I <del>fooled Will into hiring me</del> got this job in the hope that you understand how powerful an online presence can be.</p>
<p>I met Will on X/Twitter, <a href="https://x.com/mathsppblog" target="_blank" rel="nofollow noopener noreferrer">where I actively post about Python</a>.
Over the course of many months we'd interact sporadically.
Sometimes I commented on his posts and sometimes he commented on my posts.
I think Will enjoyed the Python tips I posted and the occasional link to an article of mine.</p>
<p>After many months of occasional Twitter interactions and a couple of informal video calls, Will messaged me asking if I was interested in working for Textualize.
Some months before, I had mentioned that I would see myself working with him further down the line.
But I wasn't trying to get a job when I said that.
In fact, I remember saying something like “I see myself working with you in <strong>5 years</strong>”.
Even still, a few months later I had Will's message on my inbox!
I agreed to go through the recruitment process and in the end Will made me an offer.</p>
<p>I was sad to leave my previous position, where I was enjoying myself working with / teaching APL, but I was also pretty ecstatic about working full-time on a Python FOSS project.</p>
<p>Getting this job offer was confirmation that everything you do online can act as a banner for you and your work.
In my case, that's my Python posts on social media, my blog articles, my books, etc.
For you, it could be something different.
But don't forget that <em>possibility</em>!</p>
<h2 id="put-your-ego-aside">Put your ego aside<a href="#put-your-ego-aside" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>Before joining Textualize I had always been the best Python developer in my team...
Because I was the <em>only</em> Python developer in my team<sup id="fnref1:2"><a href="#fn:2">2</a></sup>!</p>
<p>Being the best at something is great for your ego but it also means there's no one there to pull you up and to teach you new things...
And I wanted that!
I wanted to work with people who I looked up to for their technical skills and I realised Textualize would give me that.</p>
<p>I joined Textualize and I immediately understood that code reviews would be moments where I could learn a lot.
If you think about it, when you're writing code, it's not only about whether the code does what it's supposed to (fix a bug, implement a feature, etc.).
The actual code you write is also relevant and code reviews are when your coworkers get to comment on that.</p>
<h3 id="ask-all-the-questions">Ask ALL the questions<a href="#ask-all-the-questions" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>One thing I did and that I can recommend is that you use code reviews to ask questions.
It happened regularly that I would read someone's code and think “interesting, why didn't they do this with X, Y, and Z?”.
Whenever that was the case, I left a comment <em>asking</em> that same question, even if the question sounded a bit basic.
Often, they would reply explaining their reasoning, and I would get to learn something new.
Some other times, it would turn out that they hadn't thought of the alternative I was considering and they took my suggestion.</p>
<p>I think the key points here are that</p>
<ol>
<li>you should ask the question(s) with the assumption that the person whose code you're reviewing has a good reason for having done things differently from what you expected; and</li>
<li>you shouldn't refrain from asking questions, regardless of how silly or basic they may seem.</li>
</ol>
<p>Point 1. is important because you don't want the other person to feel they're being attacked and because you should understand the reasoning behind the author's decisions.
Point 2. is important because you want to learn as much as possible... And because some times people just forget about simpler alternatives (even senior developers).</p>
<p>I'm happy to report that I've fully embraced the mindset of asking questions, even when they may sound silly, so exposing my lack of knowledge in certain areas didn't hurt my ego too much...
But having my code reviewed was a whole new story.</p>
<h3 id="embrace-code-review-feedback">Embrace (code review) feedback<a href="#embrace-code-review-feedback" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>My pull requests were invariably flagged with the red X requesting changes in my work:</p>
<figure><img title="Will requesting changes on one of my first PRs." alt="A screenshot of Will requesting changes on my PR on GitHub" src="https://mathspp.com/user/pages/02.blog/503-days-working-full-time-on-foss-lessons-learned/_one_request.webp"><figcaption>Will requesting changes on one of my first PRs.</figcaption></figure>
<p>Going back to the reason code reviews are so interesting, it wasn't just about whether or not I was fixing the bug or implementing the feature.
It was also about the actual code that I wrote.
In the beginning it was tough to have all of my work scrutinised.
But if I wanted to improve my Python and software engineering skills, I'd have to embrace that scrutiny and the feedback I received whenever someone requested changes on my work.</p>
<p>I also got a lot of practice, because I got a lot of changes requested:</p>
<figure><img title="Montage of “changes requested” on my work." alt="A montage with multiple instances of pull requests where someone requested I make changes to my code." src="https://mathspp.com/user/pages/02.blog/503-days-working-full-time-on-foss-lessons-learned/_request_montage.webp"><figcaption>Montage of “changes requested” on my work.</figcaption></figure>
<p>I learned to embrace the feedback and I recommend you do the same!
Assuming everyone is well-intentioned, it's one of the best things you can do.
Bonus points if you can get people to explain why they recommended a different approach.</p>
<h3 id="everyone-makes-mistakes">Everyone makes mistakes<a href="#everyone-makes-mistakes" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Everyone has bad moments, bad days, bad weeks...
Some weeks I felt less productive or made more mistakes.
But so did everyone else!
If you're feeling like you're not at your best, tackle a couple of simpler tasks.
That's a reasonable thing to do.</p>
<p>It sucks to be in a less productive period, but that's also a good time to figure out if you're working with reasonable human beings or with jerks.
Picture this:</p>
<ul>
<li>you make a pull request;</li>
<li>it goes through the usual review process and it gets merged;</li>
<li>the feature you implemented is released to the public; and</li>
<li>some days later users report “obvious” bugs in the feature you implemented.</li>
</ul>
<p>How would that make you feel?
To me, it made me feel a bit silly.
I felt utterly responsible for the bug that was being reported!
After all, I implemented the feature in question and the bug wasn't about an obscure interaction...
It was just a blunder of mine...</p>
<p>Thankfully, my team reacted differently and they said “we don't play the blame game” when reacting to my feeling responsible.
I guess it all comes down to the age-old adage that I already wrote above:</p>
<blockquote>
<p>“Everyone makes mistakes.”</p>
</blockquote>
<p>When others make mistakes, be graceful and helpful, instead of judgemental and critical.
If you do that, you'll make it more likely that others will be graceful and helpful when if you make mistakes.</p>
<p>For comic relief, here is a screenshot of me feeling ashamed after opening a “bug report” that was fueled by a major lapse of judgement regarding the way Python works:</p>
<figure><img title="Closing the most ridiculous issue I ever opened in my life." alt="Screenshot of a GitHub comment after opening a “bug report” that was fueled by a major lapse of judgement regarding the way Python works. The comment reads “can we create a 'shameful' label and add it to this issue, please?”" src="https://mathspp.com/user/pages/02.blog/503-days-working-full-time-on-foss-lessons-learned/_shameful.webp"><figcaption>Closing the most ridiculous issue I ever opened in my life.</figcaption></figure>
<h2 id="interacting-with-users-and-contributors">Interacting with users and contributors<a href="#interacting-with-users-and-contributors" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>Working on a popular FOSS project brings with it an unexpected blessing <em>and</em> curse: users.
Users are obviously a blessing.
It doesn't sound fun to pour your heart and soul into a project that no one uses.
But handling user interactions is surprisingly time consuming and difficult!
Let me share with you some of the things I learned while doing this.</p>
<h3 id="create-a-contributing-guide">Create a contributing guide<a href="#create-a-contributing-guide" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>No one will read it.
Or rather, no one will read it <em>before</em> wasting a bit of your time.
But having the document there, with clear guidelines and helpful suggestions, will save you a LOT of time.</p>
<p>A contributing guide will also have your back in some situations.
More on that later!</p>
<h3 id="give-clear-instructions-to-bug-reporters">Give clear instructions to bug reporters<a href="#give-clear-instructions-to-bug-reporters" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>One of the things I learned is that you have to hold the hand of your users if you want decent bug reports.
One thing that really helps is setting up an issue template for bug reports, which is an excellent feature that GitHub has.</p>
<p>As of writing this, our bug report template issue looks like this:</p>
<pre><code>Have you checked closed issues?
https://github.com/Textualize/textual/issues?q=is%3Aissue+is%3Aclosed

Please give a brief but clear explanation of the issue.
If you can, include a complete working example that demonstrates the bug.
**Check it can run without modifications.**

It will be helpful if you run the following command and paste the results:

    textual diagnose

Feel free to add screenshots and / or videos.
These can be very helpful!</code></pre>
<p>Something we should probably change is to ask for a <em><strong>minimum reproducible example</strong></em> instead of asking for a “complete working example”.
Sometimes, people report bugs without showing any code to back it up, which is upsetting.
But even more upsetting is when users post hundreds of lines of code!
I feel like it is reasonable to ask users to simplify the code that produces the bug as much as they can, so adding that to the issue template can be a huge time saver.</p>
<p>Depending on the nature of your project, you may need more specific information from the user.
One thing that turned out to be invaluable in our project was the <code>textual diagnose</code> command.
It prints a lot of useful information to the terminal like OS name and version, Python version and install location, and information about the settings of the terminal that was being used, which heavily influenced the way Textual behaved.
You may want to add project-specific instructions in your issue template and/or your <a href="#create-a-contributing-guide">contributing guide</a>.</p>
<h3 id="be-so-kind-it-s-annoying">Be so kind it's annoying<a href="#be-so-kind-it-s-annoying" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>In general, whenever you're interacting with someone else, you should be as kind as possible.
Every person is different and every situation is unique.
Often, there are nuances we're not even aware of and that would explain a certain behaviour that maybe we think is not reasonable.</p>
<ul>
<li>Did a user sound rude or harsh?</li>
</ul>
<p>Maybe English is not their first language and they can't express themselves well enough.
For example, in a certain PR review I ended up saying that the user should be ashamed of what they did because I mixed up an English word with a Portuguese word.</p>
<ul>
<li>Did a user ask something that's already explained in the docs?</li>
</ul>
<p>Assume they actually went through the docs and couldn't find the information or maybe they found it but they didn't understand.
Point them to the appropriate link(s) and ask whether something there was unclear or lacking detail.</p>
<p>This can be pretty tiring but I find it definitely worth the effort.
Interactions that start off seemingly unpleasant can turn out great if you don't escalate the situation.
That happened to me more than once!</p>
<h3 id="give-a-first-reply-quickly">Give a first reply quickly<a href="#give-a-first-reply-quickly" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>One thing I think is very important is to give a first reply to an external user as quickly as possible.</p>
<p>If the user opened an issue, thank them for the report and let them know you'll look at it when you have the time.
If it's a bug report, take a look to see if it's missing a reproducible example or more information and ask for it right away.
If the user opened a pull request, thank them for their time and say you'll review it when you have the chance.</p>
<p>When a user interacts with your project, it's likely that <em>you</em> have something to gain from that interaction.
This is obviously true for bug reports and pull requests.
So, I believe we shouldn't let the user go for days or weeks without a simple reply.</p>
<p>I'm not saying bug reports have to be fixed immediately or pull requests need to be reviewed immediately.
I'm saying we should strive to <em>say something</em> to the user soon.
I came to this realisation after thinking about how I feel when I open an issue on another project and months go by without a reply!</p>
<p>If you're just very busy (which is fine and can definitely be the case) just set up an action that replies automatically with something friendly.
“I appreciate your pull request / bug report.
I am very busy at the moment and I will get back to you as soon as possible.”</p>
<h3 id="how-to-handle-external-pull-requests">How to handle external pull requests<a href="#how-to-handle-external-pull-requests" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Another challenge I faced and that I didn't expect was managing external pull requests.</p>
<p>Much like with bug reports, I found invaluable to have a pull request template with a checklist for external users (and often, for myself as well).
Mentioning things like runnnig tests and formatting the code with the appropriate formatter(s) can save everyone a lot of time.</p>
<p>Another thing I realised is helpful is to make sure that each pull request is associated with an issue.
Sometimes users will open pull requests that implement features without those features ever being discussed.
Chances are the user is trying to be helpful, but sometimes those features need a bit of discussion.
I find that those are the cases where an associated issue will be the most helpful.</p>
<p>If a user opens a pull request out of the blue with a non-trivial change, make sure you thank them for their time and ask them to create an issue that discusses the changes they made.
They probably wanted to implement a feature that is helpful for them (and possibly for others).
Point them to your <a href="#create-a-contributing-guide">contributing guide</a>.</p>
<p>Your guide has your back here because it makes it less likely that the user will see your request as a personal attack.
(Remember that Humans are animals, really...)</p>
<p>When it's time to review the code that the external contributors wrote, remember that if someone went out of their way to make a pull request, it's likely that they are well-intentioned.
As long as you're not an idiot, you'll likely be able to get them to comply with your requested changes!</p>
<p>If you're very peculiar about formatting, naming, design, and/or other things, my suggestion is that you mention those in the <a href="#create-a-contributing-guide">contributing guide</a>.
If there are tools that automate part of the process, mention them.
I personally find it easier to say “as per the contributing guide, we only use variable names that have exactly 5 consonants” – if it's in the guide it obviously applies to everyone and the whole project – versus saying “please use variable names with 5 consonants”, as the user might think you're just being picky with them.</p>
<h3 id="the-dreadful-story-of-when-i-rejected-my-first-external-pr">The dreadful story of when I rejected my first external PR<a href="#the-dreadful-story-of-when-i-rejected-my-first-external-pr" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Most of what I'm writing in this section about interacting with users and contributors came as a realisation after one particular interaction that I had with one specific user.</p>
<p>One day, someone opened a pull request trying to improve a specific guide in the documentation.
These changes came “out of the blue” in the sense that there was not a previously opened issue asking that we improve that guide.</p>
<p>The changes were non-trivial and involved changing the order of some things, duplicating some information, and rewriting sentences.
We are sure the user was well-intentioned.
In fact, we had already interacted with that particular user.
And that well-intentioned pull request had some objectively great suggestions, but it also had other changes that were of subjective quality.</p>
<p>In the end, I opened a second pull request where I committed the best parts of the original pull request.
I made sure to include the author of the first pull request as a co-author.
Then, we merged this second pull request.
However, the first pull request was closed.
When closing it, I made sure to thank the author for their time and I tried to explain why we were closing their pull request.
Thankfully, the user accepted my feedback very graciously!
However, if I had instructions about changing the documentation <a href="#create-a-contributing-guide">in the contributing guide</a> maybe I could've saved this user some time...</p>
<h2 id="working-on-a-large-project">Working on a large project<a href="#working-on-a-large-project" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>Textual was the largest codebase I ever worked on for a sustained period of time.
I've made drive-by contributions to <em>larger</em> projects, but a one-time contribution to a large project is much simpler to make than to work consistently on a large project.</p>
<p>When a codebase reaches a certain size, it becomes virtually impossible to fit all of it in your head at once.
For me, Textual was at this point.
With time, I grew more and more familiar with the codebase but there are still things I don't know exactly how they work and there are parts of the codebase that I never touched.</p>
<p>To make it easier for me to work on such a huge project, I developed three systems:</p>
<ol>
<li>a set of commandments that I kept in mind while working on larger features or bug fixes;</li>
<li>a note-taking system for big tasks, difficult issues, and eventful situations; and</li>
<li>a personal pull request checklist I went through before making a pull request.</li>
</ol>
<p>Let me walk you through these three systems.</p>
<h3 id="4-commandments-for-my-work">4 commandments for my work<a href="#4-commandments-for-my-work" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>I remember making a couple of bigger pull requests that didn't go very well on the first try.
I asked around for suggestions on how to handle these situations (when you're implementing a bigger feature or fixing a very difficult bug) and I ended up with four commandments that I should always keep in mind when writing code.</p>
<ol>
<li>
<p>What's best for the developer? – When making design decisions, I should always think about what the people using my code will want and that's what should drive my decisions.</p>
</li>
<li>
<p>What's the spirit of the issue? – Does the code do everything it <em>should</em>, or am I just addressing the things that are explicitly mentioned in the issue I'm solving? Following the <em>spirit</em> of the issue, is there anything else I should do?</p>
</li>
<li>
<p>I take the hit so that the dev doesn't. – I am the one who needs to handle all annoying or difficult edge cases and write the boring code so that the user doesn't have to.</p>
</li>
<li>
<p>Am I preventing the user from doing something that they might want to do? – Do my design decisions prevent the user from doing things that are reasonable and that they <em>may</em> want to do, even if it's not obvious to me <em>why</em> they'd want to do it?</p>
</li>
</ol>
<p>These four ideas are related and they're possibly self-evident.
In hindsight, they are obvious to me, too.
But it definitely helped me writing them down.</p>
<h3 id="take-notes">Take notes<a href="#take-notes" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Another thing that helped me was writing down notes about bigger issues I was tackling.
Whenever I was trying to fix a difficult bug, I'd jot down some notes about things I tried.
Conjectures I had about the source of the bug.
Attempts at fixing said bug.</p>
<p>Personally, the act of taking notes helped commit to memory some of the things I was learning along the way.
Strategies that did or did not work when trying to solve certain issues.</p>
<p>It's unlikely that note-taking will benefit everyone in the same way, but I'm sure there are variants of this that are likely to benefit you.</p>
<h3 id="personal-pull-request-checklist">Personal pull request checklist<a href="#personal-pull-request-checklist" data-anchor-icon="#" aria-label="Anchor"></a></h3>
<p>Taking notes was helpful to me but I reckon my personal pull request checklist is likely to be generally more helpful to others.
Whenever I was working on an issue, I followed more or less the following flowchart:</p>
<figure><img title="Flowchart for making pull requests." alt="A flowchart that I used to decide whether I could make a pull request or not. The flowchart emphasises how often I ran the tests." src="https://mathspp.com/user/pages/02.blog/503-days-working-full-time-on-foss-lessons-learned/_PR_flowchart.webp"><figcaption>Flowchart for making pull requests.</figcaption></figure>
<p>If the flowchart above gives off the idea that I ran the tests obsessively, then that's not doing justice to <em>how often</em> I ran the tests.</p>
<p>After a couple of mishaps and interesting adventures I realised there was no such thing as running the tests too often.
Over the course of these 503 days I managed to break the tests, or see someone else break the tests, in the most unexpected ways.
Things like fixing typos in code, removing unused imports, reformatting code, you name it.
Whenever I thought “this change is so trivial I don't need to run the tests”, I would break CI.</p>
<p>Whenever I made a PR, I always started by making it a draft PR and then I would review my own code.
For some reason, reviewing my own code on GitHub helped me catch things that sometimes I would miss when working locally.
I would only request someone else's review after reviewing my own code and making sure the tests were passing on CI.</p>
<p>One thing that may or may not be obvious from this, and that is a bit of a technical comment, is that tests helped me <em>a lot</em> and gave me the confidence I needed to work on the Textual codebase.
There was so much code that it was very easy for me to make a change somewhere, thinking I was doing everything right, and then break the tests in some other (seemingly) unrelated part of the code.
Without tests, my work would have been so much harder...</p>
<h2 id="conclusion">Conclusion<a href="#conclusion" data-anchor-icon="#" aria-label="Anchor"></a></h2>
<p>I learned a lot over the course of these 503 days working on Textual.
I'm sad I'm being let go, especially because of what it likely means for Textual, but I don't regret leaving my previous position to join this project.
I learned a lot about Python, software engineering, and a lot about working on open-source projects.
These are the lessons I take from this 503 experience:</p>
<ul>
<li>
<a href="#everything-you-do-online-works-as-a-banner">Everything you do online works as a banner for you</a>.</li>
<li>
<a href="#ask-all-the-questions">Ask ALL the questions</a>.</li>
<li>
<a href="#embrace-code-review-feedback">Embrace (code review) feedback</a>.</li>
<li>
<a href="#everyone-makes-mistakes">Everyone makes mistakes</a>.</li>
<li>
<a href="#create-a-contributing-guide">Create a contributing guide</a>.</li>
<li>
<a href="#give-clear-instructions-to-bug-reporters">Give clear instructions to bug reporters</a>.</li>
<li>
<a href="#be-so-kind-its-annoying">Be so kind it's annoying</a>.</li>
<li>
<a href="#give-a-first-reply-quickly">Give a first reply quickly</a>.</li>
<li>
<a href="#how-to-handle-external-pull-requests">How to handle external pull requests</a>.</li>
<li>
<a href="#4-commandments-for-my-work">4 commandments for my work</a>.</li>
<li>
<a href="#take-notes">Take notes</a>.</li>
<li>
<a href="#personal-pull-request-checklist">Personal pull request checklist</a>.</li>
</ul>
<p>Now, I will use my time to help <em><strong>you</strong></em>, your colleagues, and your team.
If you're looking for Python training, <a href="mailto:rodrigo@mathspp.com">reach out to me</a>.
I will also be devoting more time to writing books and teaching Python online, so stay tuned for that!</p>

        <h2 id="become-a-better-python-developer">Become a better Python 🐍 developer 🚀<a href="#become-a-better-python-developer" data-anchor-icon="#" aria-label="Anchor"></a></h2>

<p>+35 chapters.
+400 pages.
Hundreds of examples.
Over 30,000 readers!</p>
<p>My book “Pydon'ts” teaches you how to write elegant, expressive, and Pythonic code, to help you become a better developer.
<a href="https://gumroad.com/l/pydonts?variant=Free%20for%20ever%20%F0%9F%92%B8&amp;wanted=true">&gt;&gt;&gt; Download it here 🐍🚀</a>.</p>            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Loki: An open-source tool for fact verification (192 pts)]]></title>
            <link>https://github.com/Libr-AI/OpenFactVerification</link>
            <guid>39951571</guid>
            <pubDate>Sat, 06 Apr 2024 10:59:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Libr-AI/OpenFactVerification">https://github.com/Libr-AI/OpenFactVerification</a>, See on <a href="https://news.ycombinator.com/item?id=39951571">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">
<p dir="auto"><h2 tabindex="-1" dir="auto">Loki: An Open-source Tool for Fact Verification</h2><a id="user-content-loki-an-open-source-tool-for-fact-verification" aria-label="Permalink: Loki: An Open-source Tool for Fact Verification" href="#loki-an-open-source-tool-for-fact-verification"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Overview</h2><a id="user-content-overview" aria-label="Permalink: Overview" href="#overview"></a></p>
<p dir="auto">Loki is our open-source solution designed to automate the process of verifying factuality. It provides a comprehensive pipeline for dissecting long texts into individual claims, assessing their worthiness for verification, generating queries for evidence search, crawling for evidence, and ultimately verifying the claims. This tool is especially useful for journalists, researchers, and anyone interested in the factuality of information. To stay updated, please subscribe to our newsletter at <a href="https://www.librai.tech/" rel="nofollow">our website</a> or join us on <a href="https://discord.gg/NRge6RS7" rel="nofollow">Discord</a>!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Components</h2><a id="user-content-components" aria-label="Permalink: Components" href="#components"></a></p>
<ul dir="auto">
<li><strong>Decomposer:</strong> Breaks down extensive texts into digestible, independent claims, setting the stage for detailed analysis.</li>
<li><strong>Checkworthy:</strong> Assesses each claim's potential significance, filtering out vague or ambiguous statements to focus on those that truly matter. For example, vague claims like "MBZUAI has a vast campus" are considered unworthy because of the ambiguous nature of "vast."</li>
<li><strong>Query Generator:</strong> Transforms check-worthy claims into precise queries, ready to navigate the vast expanse of the internet in search of truth.</li>
<li><strong>Evidence Crawler:</strong> Ventures into the digital realm, retrieving relevant evidence that forms the foundation of informed verification.</li>
<li><strong>ClaimVerify:</strong> Examines the gathered evidence, determining the veracity of each claim to uphold the integrity of information.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick Start</h2><a id="user-content-quick-start" aria-label="Permalink: Quick Start" href="#quick-start"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<ul dir="auto">
<li>Python 3.9 or newer</li>
<li>Required Python packages are listed in <code>requirements.txt</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Installation</h3><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<ol dir="auto">
<li>Clone the repository:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/Libr-AI/factcheckservice.git"><pre>git clone https://github.com/Libr-AI/factcheckservice.git</pre></div>
<ol start="2" dir="auto">
<li>Navigate to the project directory and install the required packages:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="cd factcheckservice
pip install -r requirements.txt"><pre><span>cd</span> factcheckservice
pip install -r requirements.txt</pre></div>
<ol start="3" dir="auto">
<li>Configure api keys</li>
</ol>
<div data-snippet-clipboard-copy-content="cp factcheck/config/secret_dict.template factcheck/config/secret_dict.py"><pre><code>cp factcheck/config/secret_dict.template factcheck/config/secret_dict.py
</code></pre></div>
<p dir="auto">You can choose to export essential api key to the environment, or configure it in <code>factcheck/config/secret_dict.py</code>.</p>
<ul dir="auto">
<li>Example: Export essential api key to the environment</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="export SERPER_API_KEY=... # this is required in evidence retrieval if serper being used
export OPENAI_API_KEY=... # this is required in all tasks
export ANTHROPIC_API_KEY=... # this is required only if you want to replace openai with anthropic"><pre><span>export</span> SERPER_API_KEY=... <span><span>#</span> this is required in evidence retrieval if serper being used</span>
<span>export</span> OPENAI_API_KEY=... <span><span>#</span> this is required in all tasks</span>
<span>export</span> ANTHROPIC_API_KEY=... <span><span>#</span> this is required only if you want to replace openai with anthropic</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Test</h3><a id="user-content-test" aria-label="Permalink: Test" href="#test"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Libr-AI/OpenFactVerification/blob/main/fig/cmd_example.gif"><img src="https://github.com/Libr-AI/OpenFactVerification/raw/main/fig/cmd_example.gif" data-animated-image=""></a></p>
<p dir="auto">To test the project, you can run the <code>factcheck.py</code> script:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# String
python factcheck.py --modal string --input &quot;MBZUAI is the first AI university in the world&quot;
# Text
python factcheck.py --modal text --input demo_data/text.txt
# Speech
python factcheck.py --modal speech --input demo_data/speech.mp3
# Image
python factcheck.py --modal image --input demo_data/image.webp
# Video
python factcheck.py --modal video --input demo_data/video.m4v"><pre><span><span>#</span> String</span>
python factcheck.py --modal string --input <span><span>"</span>MBZUAI is the first AI university in the world<span>"</span></span>
<span><span>#</span> Text</span>
python factcheck.py --modal text --input demo_data/text.txt
<span><span>#</span> Speech</span>
python factcheck.py --modal speech --input demo_data/speech.mp3
<span><span>#</span> Image</span>
python factcheck.py --modal image --input demo_data/image.webp
<span><span>#</span> Video</span>
python factcheck.py --modal video --input demo_data/video.m4v</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">The main interface of the Fact-check Pipeline is located in <code>factcheck/core/FactCheck.py</code>, which contains the <code>check_response</code> method. This method integrates the complete pipeline, where each functionality is encapsulated in its class as described in the Features section.</p>
<p dir="auto">Example usage:</p>
<div dir="auto" data-snippet-clipboard-copy-content="from factcheck.core.FactCheck import check_response

# Example text
text = &quot;Your text here&quot;

# Run the fact-check pipeline
results = check_response(text)
print(results)"><pre><span>from</span> <span>factcheck</span>.<span>core</span>.<span>FactCheck</span> <span>import</span> <span>check_response</span>

<span># Example text</span>
<span>text</span> <span>=</span> <span>"Your text here"</span>

<span># Run the fact-check pipeline</span>
<span>results</span> <span>=</span> <span>check_response</span>(<span>text</span>)
<span>print</span>(<span>results</span>)</pre></div>
<p dir="auto">Web app usage:</p>

<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Libr-AI/OpenFactVerification/blob/main/fig/web_input.png"><img src="https://github.com/Libr-AI/OpenFactVerification/raw/main/fig/web_input.png"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Libr-AI/OpenFactVerification/blob/main/fig/web_result.png"><img src="https://github.com/Libr-AI/OpenFactVerification/raw/main/fig/web_result.png"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">We welcome contributions from the community! If you'd like to contribute, please follow these steps:</p>
<ol dir="auto">
<li>Fork the repository.</li>
<li>Create a new branch for your feature (<code>git checkout -b feature/AmazingFeature</code>).</li>
<li>Commit your changes (<code>git commit -m 'Add some AmazingFeature'</code>).</li>
<li>Push to the branch (<code>git push origin feature/AmazingFeature</code>).</li>
<li>Open a pull request.</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Ready for More?</h2><a id="user-content-ready-for-more" aria-label="Permalink: Ready for More?" href="#ready-for-more"></a></p>
<p dir="auto">💪 <strong>Join Our Journey to Innovation with the Supporter Edition</strong></p>
<p dir="auto">As we continue to evolve and enhance our fact-checking solution, we're excited to invite you to become an integral part of our journey. By registering for our Supporter Edition, you're not just unlocking a suite of advanced features and benefits; you're also fueling the future of trustworthy information.</p>
<p dir="auto">Your support enables us to:</p>
<p dir="auto">🚀 Innovate continuously: Develop new, cutting-edge features that keep you ahead in the fight against misinformation.</p>
<p dir="auto">💡 Improve and refine: Enhance the user experience, making our app not just powerful, but also a joy to use.</p>
<p dir="auto">🌱 Grow our community: Invest in the resources and tools our community needs to thrive and expand.</p>
<p dir="auto">🎁 And as a token of our gratitude, registering now grants you <strong>complimentary token credits</strong>—a little thank you from us to you, for believing in our mission and supporting our growth!</p>
<div dir="auto">
<table>
<thead>
<tr>
<th>Feature</th>
<th>Open-Source Edition</th>
<th>Supporter Edition</th>
</tr>
</thead>
<tbody>
<tr>
<td>Trustworthy Verification Results</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Diverse Evidence from the Open Web</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Automated Correction of Misinformation</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Privacy and Data Security</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Multimodal Input</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>One-Stop Custom Solution</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Customizable Verification Data Sources</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Enhanced User Experience</td>
<td>❌</td>
<td>✅</td>
</tr>
<tr>
<td>Faster Efficiency and Higher Accuracy</td>
<td>❌</td>
<td>✅</td>
</tr>
</tbody>
</table>
</div>
<p dir="auto"><a href="https://aip.librai.tech/login" rel="nofollow">TRY NOW!</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Stay Connected and Informed</h2><a id="user-content-stay-connected-and-informed" aria-label="Permalink: Stay Connected and Informed" href="#stay-connected-and-informed"></a></p>
<p dir="auto">Don’t miss out on the latest updates, feature releases, and community insights! We invite you to subscribe to our newsletter and become a part of our growing community.</p>
<p dir="auto">💌 Subscribe now at <a href="https://www.librai.tech/" rel="nofollow">our website</a>!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the <a href="https://github.com/Libr-AI/OpenFactVerification/blob/main/LICENSE.md">MIT license</a> - see the LICENSE file for details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgments</h2><a id="user-content-acknowledgments" aria-label="Permalink: Acknowledgments" href="#acknowledgments"></a></p>
<ul dir="auto">
<li>Special thanks to all contributors who have helped in shaping this project.</li>
</ul>

<p dir="auto"><h2 tabindex="-1" dir="auto">Cite as</h2><a id="user-content-cite-as" aria-label="Permalink: Cite as" href="#cite-as"></a></p>
<div data-snippet-clipboard-copy-content="@misc{Loki,
  author = {Wang, Hao and Wang, Yuxia and Wang, Minghan and Geng, Yilin and Zhao, Zhen and Zhai, Zenan and Nakov, Preslav and Baldwin, Timothy and Han, Xudong and Li, Haonan},
  title = {Loki: An Open-source Tool for Fact Verification},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/Libr-AI/Loki}},
}"><pre><code>@misc{Loki,
  author = {Wang, Hao and Wang, Yuxia and Wang, Minghan and Geng, Yilin and Zhao, Zhen and Zhai, Zenan and Nakov, Preslav and Baldwin, Timothy and Han, Xudong and Li, Haonan},
  title = {Loki: An Open-source Tool for Fact Verification},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/Libr-AI/Loki}},
}
</code></pre></div>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>