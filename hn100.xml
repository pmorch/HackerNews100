<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 09 Feb 2025 16:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Don't "optimize" conditional moves in shaders with mix()+step() (168 pts)]]></title>
            <link>https://iquilezles.org/articles/gpuconditionals/</link>
            <guid>42990324</guid>
            <pubDate>Sun, 09 Feb 2025 12:42:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://iquilezles.org/articles/gpuconditionals/">https://iquilezles.org/articles/gpuconditionals/</a>, See on <a href="https://news.ycombinator.com/item?id=42990324">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">



<h3>Intro</h3><hr><p>
In this article I want to correct a popular misconception that's been making the rounds in computer graphics aficionado circles for a long time now. It has to do with branching in the GPUs. Unfortunately there are a couple of educational websites out there that are spreading some misinformation and it would be nice correcting that. I tried contacting the authors without success, so without further ado, here goes my attempt to fix things up:</p><h3>The issue</h3><hr><p>
So, say I have this code, which I actually published the other day:</p><p><span>vec2</span> snap45( <span>in vec2</span> v )
{
    <span>vec2</span> s = <span>sign</span>(v);
    <span>float</span> x = <span>abs</span>(v.x);
    <span>return</span> x&gt;<span>0.923880</span>?<span>vec2</span>(s.x,<span>0.0</span>):
           x&gt;<span>0.382683</span>?s*<span>sqrt</span>(<span>0.5</span>):
                      <span>vec2</span>(<span>0.0</span>,s.y);
}</p>
<p>
The exact details of what it does don't matter for this discussion. All we care about is the two ternary operations, which as you know, implement conditional execution. Indeed, depending on the value of the variable <b>x</b>, the function will return different results. This could be implemented also with regular <b>if</b> statements, and all that I'm going to say stays the same.</p><p>

But here's the problem - when seeing code like this, somebody somewhere will invariably propose the following "optimization", which replaces what they believe (erroneously) are "conditional branches" by arithmetical operations. They will suggest something like this:</p><p><span>vec2</span> snap45( <span>in vec2</span> v )
{
    <span>vec2</span> s = <span>sign</span>(v);
    <span>float</span> x = <span>abs</span>(v.x);

    <span>float</span> w0 = <span>step</span>(<span>0.92387953</span>,x);
    <span>float</span> w1 = <span>step</span>(<span>0.38268343</span>,x)*(<span>1.0</span>-w0);
    <span>float</span> w2 = <span>1.0</span>-w0-w1;

    <span>vec2</span> res0 = <span>vec2</span>(s.x,<span>0.0</span>);
    <span>vec2</span> res1 = <span>vec2</span>(s.x,s.y)*<span>sqrt</span>(<span>0.5</span>);
    <span>vec2</span> res2 = <span>vec2</span>(<span>0.0</span>,s.y);

    <span>return</span> w0*res0 + w1*res1 + w2*res2;
}</p>
<p>
There are two things wrong with this practice. The first one shows an incorrect understanding of how the GPU works. In particular, the original shader code had no conditional branching in it. Selecting between a few registers with a ternary operator or with a plain <b>if</b> statement does not lead to conditional branching; all it involves is a conditional move (a.k.a. "select"), which is a simple instruction to route the correct bits to the destination register. You can think of it as a bitwise AND+NAND+OR on the source registers, which is a simple combinational circuit. Again, there is no branching - the instruction pointer isn't manipulated, there's no branch prediction involved, no instruction cache to invalidation, no nothing.</p><p>

For the record, of course real branches do happen in GPU code, but those are not what's used by the GPU for small moves between registers like we have here. This is true for any GPU made in the last 20+ years. While I'm not an expert in CPUs, I am pretty sure this is true for them as well.</p><p>

The second wrong thing with the supposedly optimizer version is that it actually runs much slower than the original version. The reason is that the <b>step()</b> function is actually implemented like this:</p><p><span>float</span> step( <span>float</span> x, <span>float</span> y )
{
    <span>return</span> x &lt; y ? <span>1.0</span> : <span>0.0</span>;
}</p>
<p>
So people using the step() "optimization" are using the ternary operation anyways, which produces the <b>0.0</b> or <b>1.0</b> which they will use to select the output, only wasting two multiplications and one or two additions. The values could have been conditionally moved directly, which is what the original shader code did.</p><p>

But don't take my word for it, let's look at the generated machine code for the relevant part of the shader I published:</p><div>

<div><p>
GLSL</p><hr>
<p><span>return</span> x&gt;<span>0.923880</span>?<span>vec2</span>(s.x,<span>0.0</span>):
       x&gt;<span>0.382683</span>?s*<span>sqrt</span>(<span>0.5</span>):
                  <span>vec2</span>(<span>0.0</span>,s.y);</p>
</div>
<div><p>
AMD Compiler</p><hr>
<p><span>s_mov_b32</span>     s0, <span>0x3ec3ef15</span>
<span>v_mul_f32</span>     v3, <span>0x3f3504f3</span>, v1
<span>v_mul_f32</span>     v4, <span>0x3f3504f3</span>, v0
<span>s_mov_b32</span>     s1, <span>0x3f6c835e</span>
<span>v_cmp_gt_f32</span>  vcc, <span>abs</span>(v2), s0
<span>v_cndmask_b32</span> v3, 0, v3, vcc
<span>v_cndmask_b32</span> v0, v0, v4, vcc
<span>v_cmp_ngt_f32</span> vcc, <span>abs</span>(v2), s1
<span>v_cndmask_b32</span> v1, v1, v3, vcc
<span>v_cndmask_b32</span> v0, 0, v0, vcc</p>
</div>
<div><p>
Microsoft Compiler</p><hr>
<p><span>lt</span>   r0.xy, l(<span>0</span>, <span>0</span>), v0.xy
<span>lt</span>   r0.zw, v0.xy, l(<span>0</span>, <span>0</span>)
<span>iadd</span> r0.xy, -r0.xyxx, r0.zwzz
<span>itof</span> r0.xy, r0.xyxx
<span>mul</span>  r1.xyzw, r0.xyxy, l4(<span>0.707107</span>)
<span>lt</span>   r2.xy, l(<span>0.923880</span>,<span>0.382683</span>), <span>|</span>v0.xx<span>|</span>
<span>mov</span>  r0.z, l(<span>0</span>)
<span>movc</span> r1.xyzw, r2.yyyy, r1.xyzw, r0.zyzy
<span>movc</span> o0.xyzw, r2.xxxx, r0.xzxz, r1.xyzw</p>
</div>
</div><p>
Here we can see that the GPU is not branching. Instead, according to the AMD compiler, it's performing the required comparisons (<span>v_cmp_gt_f32</span> and <span>v_cmp_ngt_f32</span> - cmp=compare, gt=greater than, ngt=not greated than), and then using the result to mask the results with the bitwise operations mentioned earlier (<span>v_cndmask_b32</span> - cnd=conditional).</p><p>

The Microsoft compiler has expressed the same idea/implementation in a different format, but you can still see the comparison (<span>lt</span> - "lt"=less than) and the masking or conditional move (<span>movc</span> - mov=move, c=conditionally).</p><p>

Not related to the discussion, but also note that the <b>abs()</b> call does not become a GPU instruction and instead becomes an instruction modifier, which is free.</p><h3>Conclusion</h3><hr>
<p>
So, if you ever see somebody proposing this</p><p><span>float</span> a = <span>mix</span>( b, c, <span>step</span>( y, x ) );</p><p>
as an optimization to</p><p><span>float</span> a = x &lt; y ? b : c</p><p>
then please correct them for me. The misinformation has been around for 20 years / 10 GPU generation, and that's more than too long.</p><p>

Thanks!
</p><!-- -------------------------------------------------------------------------------------------- -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Modern-Day Oracles or Bullshit Machines (333 pts)]]></title>
            <link>https://thebullshitmachines.com</link>
            <guid>42989320</guid>
            <pubDate>Sun, 09 Feb 2025 08:24:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thebullshitmachines.com">https://thebullshitmachines.com</a>, See on <a href="https://news.ycombinator.com/item?id=42989320">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="article" role="main">
      <header id="section-Title-2kXZCkIeDI" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsInRleHRGYWRlIjoibm9uZSIsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
        
        
      </header>
      <div data-scrollymoly-basis="true" data-testid="ENG-5457" id="section-EqRDrghv5N" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsInRleHRGYWRlIjoiYm90aCIsInRleHRCbHVyIjoiYm90aCIsImJhY2tncm91bmRCbHVyIjoiYm90aCIsImJhY2tncm91bmRHcmF5c2NhbGUiOiJvdXQiLCJoYXNFZmZlY3RzIjp0cnVlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6dHJ1ZSwiZW5jb2RlZCI6IiJ9">
                  <h2><span>MODERN-DAY </span><span>ORACLES  </span><br><span>or </span><span>BULLSHIT</span><span><strong> </strong>MACHINES?</span></h2>
                  <p><span>How to thrive in a ChatGPT world  </span></p>
                  
                  <h4><span>Developed by Carl T. Bergstrom and Jevin D. West</span></h4>
                </div>
      
      
      <div id="section-Effects-on-life-gXGw9X23fi" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
              <div>
                    <p>Technologists and publicists gush about how Large Language Models (LLMs) will revolutionize the way we work, learn, play, communicate, create, and connect to another. </p>
                    <p>They are right that artificial intelligence (AI) will affect nearly every aspect of our daily lives. </p>
                    <p>And they are right that by providing a way for people to talk with machines in ordinary language, LLMs constitute a dramatic step forward in making computing accessible to everyone. </p>
                    <p>Yet for all the good that AI systems will do, they will also saturate our information environment with bullshit at a scale we’ve never before encountered.</p>
                    
                  </div>
              <div>
                      <blockquote><span>I think it's going to be the most transformative technology humanity has ever created, potentially on par with or exceeding the invention of the printing press, electricity, and the internet.</span>
                        
                      </blockquote>
                    </div>
            </div>
      <div data-scrollymoly-basis="true" data-testid="ENG-5457" id="section-Course-goals-We6QHjJFqp" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
                  <p><span>For better or for worse, LLMs are here to stay. We all read content that they produce online, most of us interact with LLM chatbots, and many of us use them to produce content of our own.</span></p>
                  
                  <p>In a series of five- to ten-minute lessons, we will explain what these machines are, how they work, and how to thrive in a world where they are everywhere.</p>
                  
                  <p>You will learn when these systems can save you a lot of time and effort. You will learn when they are likely to steer you wrong. And you will discover how to see through the hype to tell the difference. <span><em>?</em></span></p>
                </div>
      <div id="section-O0UgCe5GaC" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
                    <p><strong>Notice of Rights. </strong>The materials provided on this website are freely accessible for personal self-study and for non-commercial educational use in K-12 schools, colleges, and universities. For any commercial or corporate use, please <a href="mailto:cbergst@uw.edu,jevinw@uw.edu">contact the authors</a> to discuss terms and obtain the necessary permissions. Redistribution of website content is prohibited without prior written consent from the authors. However, individual copies may be created to accommodate accessibility needs directly related to educational instruction. </p>
                    <p>Unless otherwise stated, all content is copyrighted © 2025 by the authors. All rights reserved.</p>
                  </div>
      
      
    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is software abstraction killing civilization? (2021) (208 pts)]]></title>
            <link>https://datagubbe.se/endofciv/</link>
            <guid>42986485</guid>
            <pubDate>Sat, 08 Feb 2025 21:49:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://datagubbe.se/endofciv/">https://datagubbe.se/endofciv/</a>, See on <a href="https://news.ycombinator.com/item?id=42986485">Hacker News</a></p>
Couldn't get https://datagubbe.se/endofciv/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Jacksonpollock.org (437 pts)]]></title>
            <link>https://jacksonpollock.org/</link>
            <guid>42986320</guid>
            <pubDate>Sat, 08 Feb 2025 21:22:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jacksonpollock.org/">https://jacksonpollock.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42986320">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Tips for mathematical handwriting (2007) (257 pts)]]></title>
            <link>https://johnkerl.org/doc/ortho/ortho.html</link>
            <guid>42985427</guid>
            <pubDate>Sat, 08 Feb 2025 19:20:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://johnkerl.org/doc/ortho/ortho.html">https://johnkerl.org/doc/ortho/ortho.html</a>, See on <a href="https://news.ycombinator.com/item?id=42985427">Hacker News</a></p>
<div id="readability-page-1" class="page">

<center>


John Kerl
<br><tt>kerl.john.r@gmail.com</tt>
<br>Feb. 25, 2007
</center>

<!-- ================================================================ -->
<hr>


<p>Now that you’re majoring in one of the technical disciplines
(engineering, science, or math), you’re going to be spending a
significant amount of time communicating in writing with others.  You may find
that previously unimportant details, such as crossing your <i>z</i>’s,
now become essential — not only so that others can understand you, but
also so that you can avoid mistaking your own 2<sup><i>z</i></sup> for
<i>z</i><sup>2</sup> and so on.  This is especially important if your
handwriting (like mine!) is less than perfect.

</p><p>Before I continue, take a fresh look at our Roman alphabet, the digits, and
the Greek alphabet:

</p><center><img src="https://johnkerl.org/doc/ortho/texortho.jpg"></center>

<p>Notice that these mechanically typeset symbols are all clear and distinct
(except that lowercase omicron and most of the uppercase Greek letters look
like Roman letters — we don’t use these “duplicates”).

</p><p> When we write by hand, though, symbols can become ambiguous —
we’re not machines, and things get a little loopy when we hurry.  In
prose, surrounding letters can disambiguate a questionable letter — e.g.
you can guess that the fourth letter of <i>hou*e</i> has to be an <i>s</i>.
But in mathematical expressions we mix symbols from different alphabets, in
different orders, so context can’t assist us — and when we guess,
we often guess wrong.  So it now becomes very important that each letter be
clearly recognizable on its own merits.

</p><p>Here are samples, followed by the points I consider most important.

</p><center><img src="https://johnkerl.org/doc/ortho/jkortho.jpg"></center>

<p>
<b>Lowercase Roman letters:</b>
</p><ul>

<li>Always make the lowercase <i>l</i> cursive —
otherwise it looks like a 1.
Make sure it’s taller than an <i>e</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jkell.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk1.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jke.jpg">.
The lowercase <i>l</i> isn’t a good variable name to use (since it can
look like a 1), but lots of people use it and so you’ll be seeing more of
it.

</li><li>Make a point come out of the top of the <i>p</i>, to distinguish it from a
rho:
<img src="https://johnkerl.org/doc/ortho/letters/jkp.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkrho.jpg">.

</li><li>Put a stroke on the <i>q</i>, to avoid confusion with 9 — and not a loop, to avoid confusion with 8:
<img src="https://johnkerl.org/doc/ortho/letters/jkq.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk9.jpg">.

</li><li>Put a hook at the bottom of the <i>t</i> so it doesn’t look like a
plus sign:
<img src="https://johnkerl.org/doc/ortho/letters/jkt.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkplus.jpg">.

</li><li>Put a tail on the <i>u</i>, so it doesn’t look like a <i>v</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">.

</li><li>Keep the <i>v</i> and <i>w</i> pointy on the bottom so they don’t
look like nu and omega, respectively:
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkw.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkomega.jpg">.

</li><li>Put a hook on the <i>x</i> to distinguish it from a times sign:
<img src="https://johnkerl.org/doc/ortho/letters/jkx.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jktimes.jpg">.
In 3rd-semester calculus and onward you’ll be using the times sign quite
often.

</li><li>Cross your <i>z</i>’s.  Else they look like 2’s:
<img src="https://johnkerl.org/doc/ortho/letters/jkz.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk2.jpg">.

</li></ul>

<p>
<b>Uppercase Roman letters:</b>
</p>

<p>
<b>Digits:</b>
</p>

<p>
<b>Lowercase Greek letters:</b>
</p><ul>

<li>Many incoming freshmen aren’t accustomed to Greek letters, and
substitute alphas with <i>a</i>’s, and so on.  The fact is, though,
you’re going to be seeing more and more Greek letters as you go on.  Your
mathematical world is growing — accept it, and learn to use this
beautiful alphabet.

</li><li>Draw the alpha in one easy swoosh.  Be careful it doesn’t look like a
2:
<img src="https://johnkerl.org/doc/ortho/letters/jkalpha.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk2.jpg">.

</li><li>Put a long tail on the eta and mu to keep them from looking like <i>n</i>
and cursive <i>u</i>, respectively:
<img src="https://johnkerl.org/doc/ortho/letters/jketa.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkmu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkn.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">.

</li><li>Put a hook on the top of the lambda:
<img src="https://johnkerl.org/doc/ortho/letters/jklambda.jpg">.

</li><li>The nu is a very bad letter — it looks like too many others!
Unfortunately, lots of people use it.  Include the hook on the left, and the
point at the bottom, to keep it from looking like a <i>u</i> or <i>v</i> or
upsilon:
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkupsilon.jpg">.

</li><li>We don’t use omicron — it’s identical to a Roman
<i>o</i>.

</li><li>The upsilon is just as bad as the nu.  Happily, not many people use it.
Make sure it doesn’t look like a <i>u</i>, <i>v</i>, or nu:
<img src="https://johnkerl.org/doc/ortho/letters/jkupsilon.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">.

</li><li>Keep the slash in the phi vertical; keep the slash in the empty-set symbol
slanted:
<img src="https://johnkerl.org/doc/ortho/letters/jkphi.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkemptyset.jpg">.

</li><li>The lower-case chi is tricky, and unfortunately it gets used a lot.  Make
the upward slash far bigger than the downward slash to distinguish this letter
from lowercase <i>x</i> and uppercase <i>X</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jkchi.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkx.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkcapX.jpg">.

</li><li>Keep the omega rounded to distinguish it from <i>w</i>.  This one gets used
a lot in physics courses.
<img src="https://johnkerl.org/doc/ortho/letters/jkomega.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkw.jpg">.

</li></ul>

<p>
<b>Uppercase Greek letters:</b>
</p>

<!-- ================================================================ -->
<!--
<hr>
<p>John Kerl
<br><tt>kerl at math dot arizona dot edu</tt>
<br>Feb. 25, 2007
-->

<!-- ================================================================ -->
<hr>
<p>

<a href="https://johnkerl.org/index.html"><i>← Back</i></a>


</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Writing a Simple Windows Driver in Rust (233 pts)]]></title>
            <link>https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/</link>
            <guid>42984457</guid>
            <pubDate>Sat, 08 Feb 2025 17:25:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/">https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/</a>, See on <a href="https://news.ycombinator.com/item?id=42984457">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<p>The Rust language ecosystem is growing each day, its popularity increasing, and with good reason. It’s the only mainstream language that provides memory and concurrency safety at compile time, with a powerful and rich build system (cargo), and a growing number of packages (crates).</p>



<p>My daily driver is still C++, as most of my work is about low-level system and kernel programming, where the Windows C and COM APIs are easy to consume. Rust is a system programming language, however, which means it plays, or at least can play, in the same playground as C/C++. The main snag is the verbosity required when converting C types to Rust. This “verbosity” can be alleviated with appropriate wrappers and macros. I decided to try writing a simple WDM driver that is not useless – it’s a Rust version of the “Booster” driver I demonstrate in my book (<a href="https://www.amazon.com/Windows-Kernel-Programming-Pavel-Yosifovich/dp/1977593372" target="_blank" rel="noreferrer noopener">Windows Kernel Programming</a>), that allows changing the priority of any thread to any value.</p>



<h2>Getting Started</h2>



<p>To prepare for building drivers, consult <a href="https://github.com/microsoft/windows-drivers-rs" target="_blank" rel="noreferrer noopener">Windows Drivers-rs</a>, but basically you should have a WDK installation (either normal or the <a href="https://learn.microsoft.com/en-us/legal/windows/hardware/enterprise-wdk-license-2022" target="_blank" rel="noreferrer noopener">EWDK</a>). Also, the docs require installing <a href="https://llvm.org/" target="_blank" rel="noreferrer noopener">LLVM</a>, to gain access to the <a href="https://clang.llvm.org/" target="_blank" rel="noreferrer noopener">Clang </a>compiler. I am going to assume you have these installed if you’d like to try the following yourself.</p>



<p>We can start by creating a new Rust library project (as a driver is a technically a DLL loaded into kernel space):</p>





<p>We can open the booster folder in VS Code, and begin are coding. First, there are some preparations to do in order for actual code to compile and link successfully. We need a <strong>build.rs</strong> file to tell cargo to link statically to the CRT. Add a <strong>build.rs</strong> file to the root booster folder, with the following code:</p>


<div><pre title="">fn main() -&gt; Result&lt;(), wdk_build::ConfigError&gt; {
    std::env::set_var("CARGO_CFG_TARGET_FEATURE", "crt-static");
    wdk_build::configure_wdk_binary_build()
}
</pre></div>


<p>(Syntax highlighting is imperfect because the WordPress editor I use does not support syntax highlighting for Rust)</p>



<p>Next, we need to edit <strong>cargo.toml</strong> and add all kinds of dependencies. The following is the minimum I could get away with:</p>


<div><pre title="">[package]
name = "booster"
version = "0.1.0"
edition = "2021"

[package.metadata.wdk.driver-model]
driver-type = "WDM"

[lib]
crate-type = ["cdylib"]
test = false

[build-dependencies]
wdk-build = "0.3.0"

[dependencies]
wdk = "0.3.0"       
wdk-macros = "0.3.0"
wdk-alloc = "0.3.0" 
wdk-panic = "0.3.0" 
wdk-sys = "0.3.0"   

[features]
default = []
nightly = ["wdk/nightly", "wdk-sys/nightly"]

[profile.dev]
panic = "abort"
lto = true

[profile.release]
panic = "abort"
lto = true
</pre></div>


<p>The important parts are the WDK crates dependencies. It’s time to get to the actual code in <strong>lib.rs</strong>. </p>



<h2>The Code</h2>



<p>We start by removing the standard library, as it does not exist in the kernel:</p>





<p>Next, we’ll add a few <code>use</code> statements to make the code less verbose:</p>


<div><pre title="">use core::ffi::c_void;
use core::ptr::null_mut;
use alloc::vec::Vec;
use alloc::{slice, string::String};
use wdk::*;
use wdk_alloc::WdkAllocator;
use wdk_sys::ntddk::*;
use wdk_sys::*;
</pre></div>


<p>The <code>wdk_sys</code> crate provides the low level interop kernel functions. the <code>wdk</code> crate provides higher-level wrappers. <code>alloc::vec::Vec</code> is an interesting one. Since we can’t use the standard library, you would think the types like <code>std::vec::Vec&lt;&gt;</code> are not available, and technically that’s correct. However, <code>Vec</code> is actually defined in a lower level module named <code>alloc::vec</code>, that can be used outside the standard library. This works because the only requirement for <code>Vec</code> is to have a way to allocate and deallocate memory. Rust exposes this aspect through a global allocator object, that anyone can provide. Since we have no standard library, there is no global allocator, so one must be provided. Then, <code>Vec</code> (and <code>String</code>) can work normally:</p>


<div><pre title="">#[global_allocator]
static GLOBAL_ALLOCATOR: WdkAllocator = WdkAllocator;
</pre></div>


<p>This is the global allocator provided by the WDK crates, that use <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-exallocatepool2" target="_blank" rel="noreferrer noopener"><code>ExAllocatePool2</code> </a>and <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-exfreepool" target="_blank" rel="noreferrer noopener"><code>ExFreePool</code> </a>to manage allocations, just like would do manually.</p>



<p>Next, we add two <code>extern</code> crates to get the support for the allocator and a panic handler – another thing that must be provided since the standard library is not included. <strong>Cargo.toml</strong> has a setting to abort the driver (crash the system) if any code panics:</p>


<div><pre title="">extern crate wdk_panic;
extern crate alloc;
</pre></div>


<p>Now it’s time to write the actual code. We start with <code>DriverEntry</code>, the entry point to any Windows kernel driver:</p>


<div><pre title="">#[export_name = "DriverEntry"]
pub unsafe extern "system" fn driver_entry(
    driver: &amp;mut DRIVER_OBJECT,
    registry_path: PUNICODE_STRING,
) -&gt; NTSTATUS {
</pre></div>


<p>Those familiar with kernel drivers will recognize the function signature (kind of). The function name is <code>driver_entry</code> to conform to the snake_case Rust naming convention for functions, but since the linker looks for <code>DriverEntry</code>, we decorate the function with the <code>export_name</code> attribute. You could use <code>DriverEntry</code> and just ignore or disable the compiler’s warning, if you prefer.</p>



<p>We can use the familiar <code>println!</code> macro, that was reimplemented by calling <code>DbgPrint</code>, as you would if you were using C/C++. You can still call <code>DbgPrint</code>, mind you, but <code>println!</code> is just easier:</p>


<div><pre title="">println!("DriverEntry from Rust! {:p}", &amp;driver);
let registry_path = unicode_to_string(registry_path);
println!("Registry Path: {}", registry_path);
</pre></div>


<p>Unfortunately, it seems <code>println!</code> does not yet support a <code>UNICODE_STRING</code>, so we can write a function named <code>unicode_to_string</code> to convert a <code>UNICODE_STRING</code> to a normal Rust string:</p>


<div><pre title="">fn unicode_to_string(str: PCUNICODE_STRING) -&gt; String {
    String::from_utf16_lossy(unsafe {
        slice::from_raw_parts((*str).Buffer, (*str).Length as usize / 2)
    })
}
</pre></div>


<p>Back in <code>DriverEntry</code>, our next order of business is to create a device object with the name “\Device\Booster”:</p>


<div><pre title="">let mut dev = null_mut();
let mut dev_name = UNICODE_STRING::default();
string_to_ustring("\\Device\\Booster", &amp;mut dev_name);

let status = IoCreateDevice(
    driver,
    0,
    &amp;mut dev_name,
    FILE_DEVICE_UNKNOWN,
    0,
    0u8,
    &amp;mut dev,
);
</pre></div>


<p>The <code>string_to_ustring</code> function converts a Rust string to a <code>UNICODE_STRING</code>:</p>


<div><pre title="">fn string_to_ustring&lt;'a&gt;(s: &amp;str, uc: &amp;'a mut UNICODE_STRING) -&gt; &amp;'a mut UNICODE_STRING {
    let mut wstring: Vec&lt;_&gt; = s.encode_utf16().collect();
    uc.Length = wstring.len() as u16 * 2;
    uc.MaximumLength = wstring.len() as u16 * 2;
    uc.Buffer = wstring.as_mut_ptr();
    uc
}
</pre></div>


<p>This may look more complex than we would like, but think of this as a function that is written once, and then just used all over the place. In fact, maybe there is such a function already, and just didn’t look hard enough. But it will do for this driver.</p>



<p>If device creation fails, we return a failure status:</p>


<div><pre title="">if !nt_success(status) {
    println!("Error creating device 0x{:X}", status);
    return status;
}
</pre></div>


<p><code>nt_success</code> is similar to the <code>NT_SUCCESS</code> macro provided by the WDK headers.</p>



<p>Next, we’ll create a symbolic link so that a standard <code>CreateFile</code> call could open a handle to our device:</p>


<div><pre title="">let mut sym_name = UNICODE_STRING::default();
string_to_ustring("\\??\\Booster", &amp;mut sym_name);
let status = IoCreateSymbolicLink(&amp;mut sym_name, &amp;mut dev_name);
if !nt_success(status) {
    println!("Error creating symbolic link 0x{:X}", status);
    IoDeleteDevice(dev);
    return status;
}
</pre></div>


<p>All that’s left to do is initialize the device object with support for Buffered I/O (we’ll use <code>IRP_MJ_WRITE</code> for simplicity), set the driver unload routine, and the major functions we intend to support:</p>


<div><pre title="">    (*dev).Flags |= DO_BUFFERED_IO;

    driver.DriverUnload = Some(boost_unload);
    driver.MajorFunction[IRP_MJ_CREATE as usize] = Some(boost_create_close);
    driver.MajorFunction[IRP_MJ_CLOSE as usize] = Some(boost_create_close);
    driver.MajorFunction[IRP_MJ_WRITE as usize] = Some(boost_write);

    STATUS_SUCCESS
}
</pre></div>


<p>Note the use of the Rust <code>Option&lt;&gt;</code> type to indicate the presence of a callback.</p>



<p>The unload routine looks like this:</p>


<div><pre title="">unsafe extern "C" fn boost_unload(driver: *mut DRIVER_OBJECT) {
    let mut sym_name = UNICODE_STRING::default();
    string_to_ustring("\\??\\Booster", &amp;mut sym_name);
    let _ = IoDeleteSymbolicLink(&amp;mut sym_name);
    IoDeleteDevice((*driver).DeviceObject);
}
</pre></div>


<p>We just call <code>IoDeleteSymbolicLink</code> and <code>IoDeleteDevice</code>, just like a normal kernel driver would. </p>



<h2>Handling Requests</h2>



<p>We have three request types to handle – <code>IRP_MJ_CREATE</code>, <code>IRP_MJ_CLOSE</code>, and <code>IRP_MJ_WRITE</code>. Create and close are trivial – just complete the IRP successfully:</p>


<div><pre title="">unsafe extern "C" fn boost_create_close(_device: *mut DEVICE_OBJECT, irp: *mut IRP) -&gt; NTSTATUS {
    (*irp).IoStatus.__bindgen_anon_1.Status = STATUS_SUCCESS;
    (*irp).IoStatus.Information = 0;
    IofCompleteRequest(irp, 0);
    STATUS_SUCCESS
}
</pre></div>


<p>The <code>IoStatus</code> is an <code>IO_STATUS_BLOCK</code> but it’s defined with a <code>union</code> containing <code>Status</code> and <code>Pointer</code>. This seems to be incorrect, as <code>Information</code> should be in a <code>union</code> with <code>Pointer</code> (not <code>Status</code>). Anyway, the code accesses the <code>Status</code> member through the “auto generated” union, and it looks ugly. Definitely something to look into further. But it works.</p>



<p>The real interesting function is the <code>IRP_MJ_WRITE</code> handler, that does the actual thread priority change. First, we’ll declare a structure to represent the request to the driver:</p>


<div><pre title="">#[repr(C)]
struct ThreadData {
    pub thread_id: u32,
    pub priority: i32,
}
</pre></div>


<p>The use of <code>repr(C)</code> is important, to make sure the fields are laid out in memory just as they would with C/C++. This allows non-Rust clients to talk to the driver. In fact, I’ll test the driver with a C++ client I have that used the C++ version of the driver. The driver accepts the thread ID to change and the priority to use. Now we can start with <code>boost_write</code>:</p>


<div><pre title="">unsafe extern "C" fn boost_write(_device: *mut DEVICE_OBJECT, irp: *mut IRP) -&gt; NTSTATUS {
    let data = (*irp).AssociatedIrp.SystemBuffer as *const ThreadData;
</pre></div>


<p>First, we grab the data pointer from the <code>SystemBuffer</code> in the IRP, as we asked for Buffered I/O support. This is a kernel copy of the client’s buffer. Next, we’ll do some checks for errors:</p>


<div><pre title="">let status;
loop {
    if data == null_mut() {
        status = STATUS_INVALID_PARAMETER;
        break;
    }
    if (*data).priority &lt; 1 || (*data).priority &gt; 31 {
        status = STATUS_INVALID_PARAMETER;
        break;
    }
</pre></div>


<p>The <code>loop</code> statement creates an infinite block that can be exited with a <code>break</code>. Once we verified the priority is in range, it’s time to locate the thread object:</p>


<div><pre title="">let mut thread = null_mut();
status = PsLookupThreadByThreadId(((*data).thread_id) as *mut c_void, &amp;mut thread);
if !nt_success(status) {
    break;
}
</pre></div>


<p><code><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-pslookupthreadbythreadid" target="_blank" rel="noreferrer noopener">PsLookupThreadByThreadId</a></code> is the one to use. If it fails, it means the thread ID probably does not exist, and we break. All that’s left to do is set the priority and complete the request with whatever status we have:</p>


<div><pre title="">        KeSetPriorityThread(thread, (*data).priority);
        ObfDereferenceObject(thread as *mut c_void);
        break;
    }
    (*irp).IoStatus.__bindgen_anon_1.Status = status;
    (*irp).IoStatus.Information = 0;
    IofCompleteRequest(irp, 0);
    status
}
</pre></div>


<p>That’s it!</p>



<p>The only remaining thing is to sign the driver. It seems that the crates support signing the driver if an INF or INX files are present, but this driver is not using an INF. So we need to sign it manually before deployment. The following can be used from the root folder of the project:</p>


<div><pre title="">signtool sign /n wdk /fd sha256 target\debug\booster.dll
</pre></div>


<p>The <code>/n wdk</code> uses a WDK test certificate typically created automatically by Visual Studio when building drivers. I just grab the first one in the store that starts with “wdk” and use it.</p>



<p>The silly part is the file extension – it’s a DLL and there currently is no way to change it automatically as part of cargo build. If using an INF/INX, the file extension does change to SYS. In any case, file extensions don’t really mean that much – we can rename it manually, or just leave it as DLL. </p>



<h2>Installing the Driver</h2>



<p>The resulting file can be installed in the “normal” way for a software driver, such as using the <strong>sc.exe</strong> tool (from an elevated command window), on a machine with test signing on. Then <code>sc start</code> can be used to load the driver into the system:</p>


<div><pre title="">sc.exe sc create booster type= kernel binPath= c:\path_to_driver_file
sc.exe start booster
</pre></div>


<h2>Testing the Driver</h2>



<p>I used an existing C++ application that talks to the driver and expects to pass the correct structure. It looks like this:</p>


<div><pre title="">#include &lt;Windows.h&gt;
#include &lt;stdio.h&gt;

struct ThreadData {
	int ThreadId;
	int Priority;
};

int main(int argc, const char* argv[]) {
	if (argc &lt; 3) {
		printf("Usage: boost &lt;tid&gt; &lt;priority&gt;\n");
		return 0;
	}

	int tid = atoi(argv[1]);
	int priority = atoi(argv[2]);

	HANDLE hDevice = CreateFile(L"\\\\.\\Booster",
		GENERIC_WRITE, 0, nullptr, OPEN_EXISTING, 0,
		nullptr);

	if (hDevice == INVALID_HANDLE_VALUE) {
		printf("Failed in CreateFile: %u\n", GetLastError());
		return 1;
	}

	ThreadData data;
	data.ThreadId = tid;
	data.Priority = priority;
	DWORD ret;
	if (WriteFile(hDevice, &amp;data, sizeof(data),
		&amp;ret, nullptr))
		printf("Success!!\n");
	else
		printf("Error (%u)\n", GetLastError());

	CloseHandle(hDevice);

	return 0;
}
</pre></div>


<p>Here is the result when changing a thread’s priority to 26 (ID 9408):</p>



<figure><img data-attachment-id="2919" data-permalink="https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/image-41/" data-orig-file="https://scorpiosoftware.net/wp-content/uploads/2025/02/image.png" data-orig-size="976,579" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://scorpiosoftware.net/wp-content/uploads/2025/02/image.png?w=300" data-large-file="https://scorpiosoftware.net/wp-content/uploads/2025/02/image.png?w=660" width="976" height="579" src="https://scorpiosoftware.net/wp-content/uploads/2025/02/image.png?w=976" alt=""></figure>



<h2>Conclusion</h2>



<p>Writing kernel drivers in Rust is possible, and I’m sure the support for this will improve quickly. The WDK crates are at version 0.3, which means there is still a way to go. To get the most out of Rust in this space, safe wrappers should be created so that the code is less verbose, does not have <code>unsafe</code> blocks, and enjoys the benefits Rust can provide. Note, that I may have missed some wrappers in this simple implementation.</p>



<p>You can find a couple of more samples for KMDF Rust drivers <a href="https://github.com/microsoft/Windows-rust-driver-samples" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p>The code for this post can be found at <a href="https://github.com/zodiacon/Booster">https://github.com/zodiacon/Booster</a>.</p>




	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: FlashSpace – fast, open-source, macOS Spaces replacement (227 pts)]]></title>
            <link>https://github.com/wojciech-kulik/FlashSpace</link>
            <guid>42984420</guid>
            <pubDate>Sat, 08 Feb 2025 17:19:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/wojciech-kulik/FlashSpace">https://github.com/wojciech-kulik/FlashSpace</a>, See on <a href="https://news.ycombinator.com/item?id=42984420">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a href="https://github.com/wojciech-kulik/FlashSpace/releases"><img src="https://camo.githubusercontent.com/e6c6c47124a3c9f2cfff3a55803b80533c4271be3cd6ae50effacc5fb56baa26/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f776f6a63696563682d6b756c696b2f466c61736853706163653f636f6c6f723d384132424532" alt="GitHub Release" data-canonical-src="https://img.shields.io/github/v/release/wojciech-kulik/FlashSpace?color=8A2BE2"></a>
<a href="https://formulae.brew.sh/cask/flashspace" rel="nofollow"><img src="https://camo.githubusercontent.com/5b47e91f76e1b2557c38eb45c2b23890308e7e4a8522b311dcbda9323249969f/68747470733a2f2f696d672e736869656c64732e696f2f686f6d65627265772f6361736b2f762f666c6173687370616365" alt="Homebrew Cask Version" data-canonical-src="https://img.shields.io/homebrew/cask/v/flashspace"></a>
<a href="#"><img src="https://camo.githubusercontent.com/15209e50423be67a97aa21bbd132ffc55c2a5752fc43ad1f94e57dfb8b7e8f1f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61634f532d31342e302b2d73696c766572" alt="min macOS" data-canonical-src="https://img.shields.io/badge/macOS-14.0+-silver"></a>
<a href="https://github.com/wojciech-kulik/FlashSpace/actions/workflows/xcode-build-check.yml"><img src="https://camo.githubusercontent.com/3bcf4c0f8f2a61040df5a08d5710f9ff1b4bbab4bf480fffcb6fc3dad6cd9349/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f776f6a63696563682d6b756c696b2f466c61736853706163652f78636f64652d6275696c642d636865636b2e796d6c" alt="CI Status" data-canonical-src="https://img.shields.io/github/actions/workflow/status/wojciech-kulik/FlashSpace/xcode-build-check.yml"></a>
<a href="#"><img src="https://camo.githubusercontent.com/8b88167a0ff625ca5c105e93603034c9a72880fdafd173433db4382fedf73953/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f78636f64652d31362e322d626c7565" alt="Supported Xcode" data-canonical-src="https://img.shields.io/badge/xcode-16.2-blue"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">⚡ FlashSpace</h2><a id="user-content--flashspace" aria-label="Permalink: ⚡ FlashSpace" href="#-flashspace"></a></p>
<p dir="auto">FlashSpace is a blazingly-fast virtual workspace manager for macOS, designed to
enhance and replace native macOS Spaces. No more waiting for macOS animations.</p>
<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/3128467/410695368-36f4933d-3711-4acf-9171-9137073010d7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMDY5NTM2OC0zNmY0OTMzZC0zNzExLTRhY2YtOTE3MS05MTM3MDczMDEwZDcucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NjUwZWJjYzRmN2M4OTVkMjliNWY2NmY1NzMzYWY1MGFmYjRlY2M3MTY3ZjAyYmNjNDA4NmM3ODQ2MjE4ZjY4MiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.nKneogrFNUPyMHwb9-lDzBFZjD3Cqz0CuxwvLVtlN3Y"><img width="797" alt="FlashSpace" src="https://private-user-images.githubusercontent.com/3128467/410695368-36f4933d-3711-4acf-9171-9137073010d7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMDY5NTM2OC0zNmY0OTMzZC0zNzExLTRhY2YtOTE3MS05MTM3MDczMDEwZDcucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NjUwZWJjYzRmN2M4OTVkMjliNWY2NmY1NzMzYWY1MGFmYjRlY2M3MTY3ZjAyYmNjNDA4NmM3ODQ2MjE4ZjY4MiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.nKneogrFNUPyMHwb9-lDzBFZjD3Cqz0CuxwvLVtlN3Y"></a>
<p dir="auto"><h2 tabindex="-1" dir="auto">⚙️ Installation</h2><a id="user-content-️-installation" aria-label="Permalink: ⚙️ Installation" href="#️-installation"></a></p>
<p dir="auto"><strong>Requirements:</strong> macOS 14.0 or later.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Homebrew</h3><a id="user-content-homebrew" aria-label="Permalink: Homebrew" href="#homebrew"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Download Binary</h3><a id="user-content-download-binary" aria-label="Permalink: Download Binary" href="#download-binary"></a></p>
<p dir="auto">See: <a href="https://github.com/wojciech-kulik/FlashSpace/releases">Releases Page</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Build From Source</h3><a id="user-content-build-from-source" aria-label="Permalink: Build From Source" href="#build-from-source"></a></p>
<p dir="auto">See: <a href="#%EF%B8%8F-build-from-source">Build From Source</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🎥 Demo</h2><a id="user-content--demo" aria-label="Permalink: 🎥 Demo" href="#-demo"></a></p>
<p dir="auto">The video shows a sample configuration where I use 3 workspaces and switch
between them using hotkeys.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description FlashSpace.mp4">FlashSpace.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/3128467/411269408-03498386-7c3d-4d9e-8fbd-cd49dea36661.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMTI2OTQwOC0wMzQ5ODM4Ni03YzNkLTRkOWUtOGZiZC1jZDQ5ZGVhMzY2NjEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODc2MjZjMmI5MmMxOWJlZjBkZDUyZTI2NjViMTNhMDEyNDliMGM1OWU3OTkxYzMxZmUwMmIzMTYyMjc5Mjc5NyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.cw41Upce0DtEPZV0edTF_tlbUMdifjLn_bNHXVrlfJY" data-canonical-src="https://private-user-images.githubusercontent.com/3128467/411269408-03498386-7c3d-4d9e-8fbd-cd49dea36661.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMTI2OTQwOC0wMzQ5ODM4Ni03YzNkLTRkOWUtOGZiZC1jZDQ5ZGVhMzY2NjEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODc2MjZjMmI5MmMxOWJlZjBkZDUyZTI2NjViMTNhMDEyNDliMGM1OWU3OTkxYzMxZmUwMmIzMTYyMjc5Mjc5NyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.cw41Upce0DtEPZV0edTF_tlbUMdifjLn_bNHXVrlfJY" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">👉 How it works</h2><a id="user-content--how-it-works" aria-label="Permalink: 👉 How it works" href="#-how-it-works"></a></p>
<p dir="auto">FlashSpace allows to define virtual workspaces and assign apps to them. Each workspace is
also assigned to a specific display. When you switch to a workspace, the assigned apps are
automatically presented and all other apps from the assigned display are hidden.</p>
<p dir="auto">The app allows workspaces to be switched independently on each display.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">✨ Features</h2><a id="user-content--features" aria-label="Permalink: ✨ Features" href="#-features"></a></p>
<ul>
<li> Blazingly fast workspace switching</li>
<li> Multiple displays support</li>
<li> Activate workspace on app focus</li>
<li> Move apps between workspaces with a hotkey</li>
<li> Floating apps visible across all workspaces</li>
<li> Focus manager - set hotkeys to switch between apps quickly</li>
<li> Cursor manager - auto-center the cursor in the active window</li>
<li> Profiles - quickly switch between different configurations</li>
<li> Configurable Menu Bar icon &amp; text (per workspace)</li>
<li> <a href="https://github.com/FelixKratz/SketchyBar">SketchyBar</a> integration</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">⚖️ Project Values</h2><a id="user-content-️-project-values" aria-label="Permalink: ⚖️ Project Values" href="#️-project-values"></a></p>
<ul dir="auto">
<li><strong>Performance</strong> - The app should be as fast as possible.</li>
<li><strong>Simplicity</strong> - The app should be easy to use and configure.</li>
<li><strong>Reliability</strong> - The app should work without glitches and unexpected behavior.</li>
<li><strong>Invisible</strong> - The app should help, not disturb.</li>
<li><strong>UNIX Philosophy</strong> - The app should do one thing and do it well - manage workspaces.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">💬 How to use</h2><a id="user-content--how-to-use" aria-label="Permalink: 💬 How to use" href="#-how-to-use"></a></p>
<ol dir="auto">
<li>Create a workspace.</li>
<li>Assign apps to the workspace.</li>
<li>Assign the workspace to a display.</li>
<li>Define a hotkey to switch to the workspace.</li>
<li>Save the workspace.</li>
</ol>
<p dir="auto">Now you can switch to the workspace using the configured hotkey.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🪟 Focus Manager</h2><a id="user-content--focus-manager" aria-label="Permalink: 🪟 Focus Manager" href="#-focus-manager"></a></p>
<p dir="auto">FlashSpace enables fast switching of focus between windows. Use hotkeys to
shift focus in any desired direction. It also allows you to jump between
displays.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description FocusManager.mp4">FocusManager.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/3128467/411269421-9bc22b19-7cd7-48f8-a679-0adf4adc3aef.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMTI2OTQyMS05YmMyMmIxOS03Y2Q3LTQ4ZjgtYTY3OS0wYWRmNGFkYzNhZWYubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YWI1MWVhNzUxYTI5OGQyZWEzZDFhOGE5YTQxZGZmNzBmMjMxMGZhZGJjODBmNjc4OGQ4MmMzNjdlZDRiNmJiMyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.B8byTdySIp8drz6WdeKZxW05RKmiwaJOebw3XQXJt3E" data-canonical-src="https://private-user-images.githubusercontent.com/3128467/411269421-9bc22b19-7cd7-48f8-a679-0adf4adc3aef.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMTI2OTQyMS05YmMyMmIxOS03Y2Q3LTQ4ZjgtYTY3OS0wYWRmNGFkYzNhZWYubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YWI1MWVhNzUxYTI5OGQyZWEzZDFhOGE5YTQxZGZmNzBmMjMxMGZhZGJjODBmNjc4OGQ4MmMzNjdlZDRiNmJiMyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.B8byTdySIp8drz6WdeKZxW05RKmiwaJOebw3XQXJt3E" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">📝 Notes</h2><a id="user-content--notes" aria-label="Permalink: 📝 Notes" href="#-notes"></a></p>
<p dir="auto">FlashSpace doesn't manage windows, so if you switch to a workspace and call
another app that is not assigned to the workspace, it will be shown on top of
the workspace apps.</p>
<p dir="auto">I consider this as a desired behavior because it allows you to quickly access other
apps without glitches or switching between workspaces.</p>
<p dir="auto">This is a common issue with tiling window managers that they often cause glitches
when a small pop-up window is shown or some unexpected app is opened.</p>
<p dir="auto">If you want to hide the new app, you can simply use the hotkey again.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🖥️ SketchyBar Integration</h2><a id="user-content-️-sketchybar-integration" aria-label="Permalink: 🖥️ SketchyBar Integration" href="#️-sketchybar-integration"></a></p>
<p dir="auto">FlashSpace can be integrated with <a href="https://github.com/FelixKratz/SketchyBar">SketchyBar</a> and other tools. The app runs a
configurable script when the workspace is changed.</p>
<p dir="auto">You can enable the integration in the app settings.</p>
<details>
  <summary>Configuration Example</summary>
<p dir="auto"><h3 tabindex="-1" dir="auto">Only Active Workspace</h3><a id="user-content-only-active-workspace" aria-label="Permalink: Only Active Workspace" href="#only-active-workspace"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto"><code>sketchybarrc</code></h5><a id="user-content-sketchybarrc" aria-label="Permalink: sketchybarrc" href="#sketchybarrc"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="sketchybar --add item flashspace left \
  --set flashspace \
  background.color=0x22ffffff \
  background.corner_radius=5 \
  label.padding_left=5 \
  label.padding_right=5 \
  script=&quot;$CONFIG_DIR/plugins/flashspace.sh&quot; \
  --add event flashspace_workspace_change \
  --subscribe flashspace flashspace_workspace_change"><pre>sketchybar --add item flashspace left \
  --set flashspace \
  background.color=0x22ffffff \
  background.corner_radius=5 \
  label.padding_left=5 \
  label.padding_right=5 \
  script=<span><span>"</span><span>$CONFIG_DIR</span>/plugins/flashspace.sh<span>"</span></span> \
  --add event flashspace_workspace_change \
  --subscribe flashspace flashspace_workspace_change</pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto"><code>plugins/flashspace.sh</code></h5><a id="user-content-pluginsflashspacesh" aria-label="Permalink: plugins/flashspace.sh" href="#pluginsflashspacesh"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="#!/bin/bash

sketchybar --set $NAME label=&quot;$WORKSPACE - $DISPLAY&quot;"><pre><span><span>#!</span>/bin/bash</span>

sketchybar --set <span>$NAME</span> label=<span><span>"</span><span>$WORKSPACE</span> - <span>$DISPLAY</span><span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">All Workspaces</h3><a id="user-content-all-workspaces" aria-label="Permalink: All Workspaces" href="#all-workspaces"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto"><code>sketchybarrc</code></h5><a id="user-content-sketchybarrc-1" aria-label="Permalink: sketchybarrc" href="#sketchybarrc-1"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="sketchybar --add event flashspace_workspace_change

SID=1
SELECTED_PROFILE_ID=$(jq -r &quot;.selectedProfileId&quot; ~/.config/flashspace/profiles.json)
WORKSPACES=$(jq -r --arg id &quot;$SELECTED_PROFILE_ID&quot; 'first(.profiles[] | select(.id == $id)) | .workspaces[].name' ~/.config/flashspace/profiles.json)

for workspace in $WORKSPACES; do
  sketchybar --add item flashspace.$SID left \
    --subscribe flashspace.$SID flashspace_workspace_change \
    --set flashspace.$SID \
    background.color=0x22ffffff \
    background.corner_radius=5 \
    background.padding_left=5 \
    label.padding_left=5 \
    label.padding_right=5 \
    label=&quot;$workspace&quot; \
    script=&quot;$CONFIG_DIR/plugins/flashspace.sh $workspace&quot;

  SID=$((SID + 1))
done"><pre>sketchybar --add event flashspace_workspace_change

SID=1
SELECTED_PROFILE_ID=<span><span>$(</span>jq -r <span><span>"</span>.selectedProfileId<span>"</span></span> <span>~</span>/.config/flashspace/profiles.json<span>)</span></span>
WORKSPACES=<span><span>$(</span>jq -r --arg id <span><span>"</span><span>$SELECTED_PROFILE_ID</span><span>"</span></span> <span><span>'</span>first(.profiles[] | select(.id == $id)) | .workspaces[].name<span>'</span></span> <span>~</span>/.config/flashspace/profiles.json<span>)</span></span>

<span>for</span> <span>workspace</span> <span>in</span> <span>$WORKSPACES</span><span>;</span> <span>do</span>
  sketchybar --add item flashspace.<span>$SID</span> left \
    --subscribe flashspace.<span>$SID</span> flashspace_workspace_change \
    --set flashspace.<span>$SID</span> \
    background.color=0x22ffffff \
    background.corner_radius=5 \
    background.padding_left=5 \
    label.padding_left=5 \
    label.padding_right=5 \
    label=<span><span>"</span><span>$workspace</span><span>"</span></span> \
    script=<span><span>"</span><span>$CONFIG_DIR</span>/plugins/flashspace.sh <span>$workspace</span><span>"</span></span>

  SID=<span><span>$((</span>SID <span>+</span> <span>1</span><span>))</span></span>
<span>done</span></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto"><code>plugins/flashspace.sh</code></h5><a id="user-content-pluginsflashspacesh-1" aria-label="Permalink: plugins/flashspace.sh" href="#pluginsflashspacesh-1"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="#!/bin/bash

if [ &quot;$1&quot; = &quot;$WORKSPACE&quot; ]; then
  sketchybar --set $NAME label.color=0xffff0000
else
  sketchybar --set $NAME label.color=0xffffffff
fi"><pre><span><span>#!</span>/bin/bash</span>

<span>if</span> [ <span><span>"</span><span>$1</span><span>"</span></span> <span>=</span> <span><span>"</span><span>$WORKSPACE</span><span>"</span></span> ]<span>;</span> <span>then</span>
  sketchybar --set <span>$NAME</span> label.color=0xffff0000
<span>else</span>
  sketchybar --set <span>$NAME</span> label.color=0xffffffff
<span>fi</span></pre></div>
</details>
<p dir="auto"><h2 tabindex="-1" dir="auto">🛠️ Build From Source</h2><a id="user-content-️-build-from-source" aria-label="Permalink: 🛠️ Build From Source" href="#️-build-from-source"></a></p>
<p dir="auto">FlashSpace uses <a href="https://github.com/yonaskolb/XcodeGen">XcodeGen</a> to generate the Xcode project from the <code>project.yml</code>
file.</p>
<ol dir="auto">
<li>Clone the repository.</li>
<li>Navigate to the project directory.</li>
<li>Run <code>brew bundle</code> to install dependencies.</li>
<li>Run <code>xcodegen generate</code>.</li>
<li>Open <code>FlashSpace.xcodeproj</code> in Xcode.</li>
<li>Click on the <code>FlashSpace</code> target, click on the <code>Signing &amp; Capabilities</code> tab,
and select your team.</li>
<li>Build &amp; run the app.</li>
</ol>
<p dir="auto">Remember to run <code>xcodegen generate</code> every time you change branch or pull changes.</p>
<p dir="auto">If you want to generate the project with configured signing, you can run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="XCODE_DEVELOPMENT_TEAM=YOUR_TEAM_ID xcodegen generate"><pre>XCODE_DEVELOPMENT_TEAM=YOUR_TEAM_ID xcodegen generate</pre></div>
<p dir="auto">You can also set this variable globally in your shell.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">💛&nbsp;&nbsp;Sponsors</h2><a id="user-content-sponsors" aria-label="Permalink: 💛&nbsp;&nbsp;Sponsors" href="#sponsors"></a></p>
<p dir="auto">Big thanks to all the sponsors who support this project 🍻!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Monthly Sponsors</h3><a id="user-content-monthly-sponsors" aria-label="Permalink: Monthly Sponsors" href="#monthly-sponsors"></a></p>
<p dir="auto"><a href="https://github.com/bjrmatos"><img src="https://avatars.githubusercontent.com/u/4262050" width="40" height="40" alt="@bjrmatos" title="bjrmatos"></a>
<a href="https://github.com/notlus"><img src="https://avatars.githubusercontent.com/u/828989" width="40" height="40" alt="@notlus" title="notlus"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">One Time Sponsors</h3><a id="user-content-one-time-sponsors" aria-label="Permalink: One Time Sponsors" href="#one-time-sponsors"></a></p>
<p dir="auto"><a href="https://github.com/danscheer"><img src="https://avatars.githubusercontent.com/u/56642865" width="40" height="40" alt="@danscheer" title="danscheer"></a></p>

</article></div></div>]]></description>
        </item>
    </channel>
</rss>