<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Wed, 22 May 2024 22:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Carmakers Will Give Your Location to Police Without a Warrant, Senators Say (153 pts)]]></title>
            <link>https://www.thedrive.com/news/automakers-will-give-your-location-to-police-without-a-warrant-senators-say</link>
            <guid>40445093</guid>
            <pubDate>Wed, 22 May 2024 19:21:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thedrive.com/news/automakers-will-give-your-location-to-police-without-a-warrant-senators-say">https://www.thedrive.com/news/automakers-will-give-your-location-to-police-without-a-warrant-senators-say</a>, See on <a href="https://news.ycombinator.com/item?id=40445093">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-id="page-content" data-og-area="article-blocks" id="incArticle"><p>Connected cars' <a href="https://www.thedrive.com/news/you-should-be-worried-about-teslas-trove-of-private-vehicle-data" target="_blank" rel="noreferrer noopener">data security</a> has become a political battleground in recent years as new cars have become ever-more high-tech. Consumers have good reasons to want their data kept private, and on the surface, the auto industry is an ally on that front. But behind the curtain, the industry is reportedly playing fast and loose with customers' data, selling it or reportedly even handing it over to police despite promising not to.</p><div data-og-block-area="article-blocks" data-og-block-nth="2" data-og-block-type="core/paragraph" data-rawhtml="1"><p>Connected cars have been promised to bring about a variety of quality-of-life improvements, both to car ownership and our experiences on the road. They're touted as preventing theft, <a href="https://www.thedrive.com/news/ford-ceo-explains-why-legacy-automakers-take-forever-to-issue-ota-updates" target="_blank" rel="noreferrer noopener">streamlining service</a>, <a href="https://www.thedrive.com/news/audis-connected-car-tech-aims-to-save-cyclists" target="_blank" rel="noreferrer noopener">improving road safety</a>, and <a href="https://www.thedrive.com/news/news-study-connected-car-data-can-fix-traffic-delays" target="_blank" rel="noreferrer noopener">smoothing out traffic</a>. But <a href="https://www.thedrive.com/news/think-your-smartphone-is-tracking-you-your-cars-doing-it-too" target="_blank" rel="noreferrer noopener">the drawbacks are manifesting just as quickly</a>, in forms such as <a href="https://www.thedrive.com/tech/20674/connected-cars-dont-necessarily-disconnect-previous-owners-when-resold" target="_blank" rel="noreferrer noopener">privacy issues</a>, stealth recalls, and even <a href="https://www.reuters.com/technology/an-abused-wife-took-tesla-over-tracking-tech-she-lost-2023-12-19/" target="_blank" rel="noreferrer noopener">enabling stalking</a>. Consumers have other reasons to worry, too: <a href="https://www.thedrive.com/news/27648/teslas-new-car-insurance-service-will-actively-spy-on-you-adjust-rates-accordingly" target="_blank" rel="noreferrer noopener">Insurers are pressing harder for vehicle data</a>, and privacy is only becoming more valuable in an increasingly authoritarian <a href="https://www.thedrive.com/news/ai-traffic-surveillance-can-link-your-driving-patterns-to-criminal-behavior" target="_blank" rel="noreferrer noopener">surveillance state</a>. The federal government has expressed concern too, with the Biden administration asserting that allowing Chinese EVs to be sold in the U.S. <a href="https://www.thedrive.com/news/permanent-ban-on-chinese-evs-recommended-by-ohio-senator" target="_blank" rel="noreferrer noopener">poses national security risks</a>.</p></div><figure data-og-block-area="article-blocks" data-og-block-nth="1" data-og-block-type="core/image"><span data-rawhtml="1">BYD King, a Chinese hybrid sedan. <em>BYD</em> </span></figure><p>The industry is aware of the nation's privacy concerns, which is why many automakers signed the Alliance for Automotive Innovation's <a href="https://www.autosinnovate.org/innovation/Automotive%20Privacy/Consumer_Privacy_Principlesfor_VehicleTechnologies_Services-03-21-19.pdf" target="_blank" rel="noreferrer noopener">Consumer Privacy Protection Principles</a> in 2014. Signatories of this lobby group's document promised not to hand over location, biometric, or driving behavior data to third parties without driver approval—with some exceptions. One of said exceptions requires police to obtain a court order (or a warrant, a subcategory of court order) to obtain driver info. But now, eight automakers have reportedly admitted to Congress that they'd go against their word when push comes to shove.</p><p><a href="https://www.autonews.com/regulation-safety/automakers-will-give-connected-car-data-police" target="_blank" rel="noreferrer noopener"><em>Automotive News</em></a> reports that Toyota, Subaru, Mazda, Nissan, Kia, BMW, Mercedes-Benz, and Volkswagen have told Congress they would hand over drivers' data if faced with a subpoena. There's a major difference between a subpoena and a court order according to the <a href="https://www.apaservices.org/practice/good-practice/subpoenas-depositions.pdf" target="_blank" rel="noreferrer noopener">APA Practice Organization</a>, which says "a subpoena is a lawyer's assertion that she/he is entitled to the requested information, while a court order determines that the lawyer is in fact entitled to it." In other words, a subpoena is a request for information; a court order is a judge or magistrate backing that request.</p><figure data-og-block-area="article-blocks" data-og-block-nth="2" data-og-block-type="core/image"><span data-rawhtml="1"><em>Chris Ryan via Getty Images</em> </span></figure><p>Acquiring location data through subpoena could be easily weaponized by a legal system under escalating scrutiny for its widespread <a href="https://www.aclu.org/news/free-speech/the-sneaky-way-the-police-could-abuse-their-power-to-restrict-free-speech" target="_blank" rel="noreferrer noopener">abuse of power</a>. To at least two Senators though, it also constitutes deceptive marketing on automakers' parts.</p><p>"Automakers have not only kept consumers in the dark regarding their actual practices, but multiple companies misled consumers for over a decade by failing to honor the industry’s own voluntary privacy principles," Senators Ron Wyden and Ed Markey reportedly wrote to the Federal Trade Commission.</p><p>"Vehicle location data can be used to identify Americans who have traveled to seek an abortion in another state, attended protests, support groups for alcohol, drug, and other types of addiction, or identify those of particular faiths, as revealed through trips to places of worship."</p><div><p><img alt="Video thumbnail" loading="lazy" src="https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=1440" sizes="640w" srcset="
        https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=640 640w, 
        https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=750 750w, 
        https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=828 828w, 
        https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=1080 1080w, 
        https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=1200 1200w, 
        https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=1920 1920w, 
        https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=2018 2048w, 
        https://i.ytimg.com/vi/2iZw_C0aN04/hqdefault.jpg?auto=webp&amp;optimize=high&amp;quality=70&amp;width=3840 3840w
        "></p><svg viewBox="0 0 68 48" xmlns="http://www.w3.org/2000/svg"><path d="M66.52 7.74c-.78-2.93-2.49-5.41-5.42-6.19C55.79.13 34 0 34 0S12.21.13 6.9 1.55c-2.93.78-4.63 3.26-5.42 6.19C.06 13.05 0 24 0 24s.06 10.95 1.48 16.26c.78 2.93 2.49 5.41 5.42 6.19C12.21 47.87 34 48 34 48s21.79-.13 27.1-1.55c2.93-.78 4.64-3.26 5.42-6.19C67.94 34.95 68 24 68 24s-.06-10.95-1.48-16.26z" fill="red"></path><path d="M45 24 27 14v20" fill="white"></path></svg></div><p>The auto industry's speaking out of both sides of its mouth here, showing many of its members can't be trusted with matters of consumer privacy. It may be best to consider the topic a matter of rhetoric and marketing to some manufacturers, rather than a cause they'll actually stand up for. With <a href="https://www.thedrive.com/news/carmakers-are-allowed-to-collect-so-much-data-on-you-even-about-your-sex-life" target="_blank" rel="noreferrer noopener">how much private information their products can gather on us</a>, we should all be concerned regardless of whether we own a connected car. After all, when the time comes for many Americans to replace their current vehicle, there won't be many other options.</p><p><em>Got a tip or question for the author? You can reach them here: james@thedrive.com</em></p></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bluesky adds direct messages (147 pts)]]></title>
            <link>https://bsky.social/about/blog/05-22-2024-direct-messages</link>
            <guid>40444778</guid>
            <pubDate>Wed, 22 May 2024 18:59:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bsky.social/about/blog/05-22-2024-direct-messages">https://bsky.social/about/blog/05-22-2024-direct-messages</a>, See on <a href="https://news.ycombinator.com/item?id=40444778">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><section><a href="https://bsky.social/about/blog">Blog</a><svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M2 10L6 6L2 2" stroke="#667999" stroke-width="2" stroke-linecap="square"></path></svg><span>Just shipped: Bluesky Direct Messages!</span></section><div><p>May 22, 2024</p><p><span>by <!-- -->The Bluesky Team</span></p></div></div><div><p>You can now send direct messages (DMs) to people on Bluesky! Say hi to a friend, colleague, or a crush.</p>
<figure>
  <img src="https://bsky.social/about/images/blogposts/dms-demo.jpg" alt="Screenshot of the DM interface in the Bluesky app" width="400">
</figure>
<p>These are private one-to-one messages directly within the Bluesky app. By default, your permissions allow anyone you follow to DM you. You can change these settings to allow no one or anyone to message you.</p>
<h2>How do I send a DM?</h2>
<ol>
<li>Click the Chat icon. On mobile, you can find the icon at the bottom of your screen. On desktop, this is a chat bubble on the side bar (or go to <a href="https://bsky.app/messages">https://bsky.app/messages</a>).</li>
<li>On mobile, click the plus icon to start a new conversation. On desktop, click “New chat” in the top right to start a new conversation. Search for the user you want to message.</li>
<li>Write your message, and hit send!</li>
<li>If the app says a user cannot be messaged, they may have set their account to only allow messages from people they follow or from no one.</li>
</ol>
<h2>DM Privacy and Safety</h2>
<h3>Who can message me?</h3>
<p>By default, only people you follow can send you DMs. To change this, check the settings in the DM interface. You can allow DMs from no one, only people you follow, or all Bluesky users.</p>
<figure>
  <img src="https://bsky.social/about/images/blogposts/dms-settings.jpg" alt="Screenshot of DM settings" width="400">
  <figcaption>Set who can message you, and whether you want notification sounds.</figcaption>
</figure>
<p>Blocked users will not be able to DM you. Muted users are able to DM you. Additionally, you can easily block users right from within the DM feature.</p>
<h3>Reporting DMs</h3>
<p>You can report DMs directly to mods, who will review reported messages for Community Guidelines violations. Moderators are able to view the reported message and surrounding messages for context to assess the report. Infractions may result in temporary or permanent loss of DM privileges or even full account takedowns.</p>
<h3>DM Privacy</h3>
<p>In rare cases, the Bluesky moderation team may need to open your DMs to investigate broader patterns of abuse, such as spam or coordinated harassment. This would only be done when absolutely necessary to keep Bluesky safe. Access is extremely limited and tracked internally.</p>
<p>This first version of DMs has limited features (no images or encryption yet), but we'll be adding more safety enhancements in future updates.</p>
<h2>Future Updates</h2>
<ul>
<li><strong>Media in DMs:</strong> Currently, Bluesky DMs allow you to send text messages. In the future, you’ll be able to send images and other forms of media!</li>
<li><strong>Group DMs:</strong> In the future, you’ll be able to create direct messages for groups.</li>
<li><strong>Encrypted DMs:</strong> We intend to fully support end-to-end encrypted messaging down the line. Read more about our technical plans for E2EE messaging in our <a href="https://docs.bsky.app/blog/2024-protocol-roadmap#product-features">2024 protocol roadmap</a>.</li>
<li><strong>Safety improvements:</strong> We’ll continue iterating on anti-harassment and safety tooling for direct messages.</li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Try Clojure (284 pts)]]></title>
            <link>https://tryclojure.org/</link>
            <guid>40444121</guid>
            <pubDate>Wed, 22 May 2024 18:11:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tryclojure.org/">https://tryclojure.org/</a>, See on <a href="https://news.ycombinator.com/item?id=40444121">Hacker News</a></p>
<div id="readability-page-1" class="page">

    <p>
      Loading....
    </p>

    <!-- JS -->
    
    <!-- Analytics -->
    
  

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[One-third of Amazon warehouse workers are on food stamps or Medicaid (279 pts)]]></title>
            <link>https://twitter.com/DanPriceSeattle/status/1791299631558823954</link>
            <guid>40443907</guid>
            <pubDate>Wed, 22 May 2024 17:52:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/DanPriceSeattle/status/1791299631558823954">https://twitter.com/DanPriceSeattle/status/1791299631558823954</a>, See on <a href="https://news.ycombinator.com/item?id=40443907">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Windows Recall sounds like a privacy nightmare (179 pts)]]></title>
            <link>https://www.techradar.com/computing/computing-security/windows-recall-sounds-like-a-privacy-nightmare-heres-why-im-worried</link>
            <guid>40443682</guid>
            <pubDate>Wed, 22 May 2024 17:33:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techradar.com/computing/computing-security/windows-recall-sounds-like-a-privacy-nightmare-heres-why-im-worried">https://www.techradar.com/computing/computing-security/windows-recall-sounds-like-a-privacy-nightmare-heres-why-im-worried</a>, See on <a href="https://news.ycombinator.com/item?id=40443682">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">

<section>
<div itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
<div>
<picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-1920-80.jpg.webp 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-320-80.jpg" alt="A person spying through a gap of light" srcset="https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n-1920-80.jpg 1920w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n.jpg"></picture>
</div>
<meta itemprop="url" content="https://cdn.mos.cms.futurecdn.net/tdJehZYyUB9RY3HogJY22n.jpg">
<meta itemprop="height" content="600">
<meta itemprop="width" content="338">
<figcaption itemprop="caption description">
<span itemprop="copyrightHolder">(Image credit: Shutterstock)</span>
</figcaption>
</div>

<div id="article-body">
<p>When I first heard about Recall, I immediately buried my face in my hands. I never thought I'd see such a glaring target be created by <a data-analytics-id="inline-link" href="https://www.techradar.com/tag/microsoft" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.techradar.com/tag/microsoft">Microsoft</a>, never mind it being marketed as a <em>feature</em>.</p><p>If you haven't read about it yet, <a data-analytics-id="inline-link" href="https://www.techradar.com/computing/windows/microsoft-reveals-ai-powered-recall-feature-to-transform-windows-11s-searchability-while-confirming-hardware-requirements" data-before-rewrite-localise="https://www.techradar.com/computing/windows/microsoft-reveals-ai-powered-recall-feature-to-transform-windows-11s-searchability-while-confirming-hardware-requirements">Recall is an AI feature coming to Windows 11</a> Copilot+ PCs. It's designed to let you go back in time on your computer by "taking images of your active screen every few seconds" and analyzing them with AI, according to <a data-analytics-id="inline-link" href="https://click.linksynergy.com/deeplink?id=kXQk6%2AivFEQ&amp;mid=24542&amp;u1=trd-us-6733739301309769129&amp;murl=https%3A%2F%2Fwww.microsoft.com%2Fen-us%2Fwindows%2Fcopilot-plus-pcs%23faq1" target="_blank" data-url="https://www.microsoft.com/en-us/windows/copilot-plus-pcs#faq1" referrerpolicy="no-referrer-when-downgrade" rel="sponsored noopener" data-hl-processed="hawklinks" data-placeholder-url="https://click.linksynergy.com/deeplink?id=kXQk6%2AivFEQ&amp;mid=24542&amp;u1=hawk-custom-tracking&amp;murl=https%3A%2F%2Fwww.microsoft.com%2Fen-us%2Fwindows%2Fcopilot-plus-pcs%23faq1" data-google-interstitial="false" data-merchant-name="microsoft.com" data-merchant-id="1855" data-merchant-url="microsoft.com" data-merchant-network="LS">Microsoft's Recall FAQs</a>. If anyone other than you gets access to that Recall data, it could be disastrous.</p><div><blockquote data-lang="en"><p lang="en" dir="ltr">Satya Nadella says Windows PCs will have a photographic memory feature called Recall that will remember and understand everything you do on your computer by taking constant screenshots pic.twitter.com/Gubi4DGHcs<a href="https://twitter.com/tsarnick/status/1792680674060832829" data-url="https://twitter.com/tsarnick/status/1792680674060832829" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">May 20, 2024</a></p></blockquote></div><p>This might sound familiar, and that's because it's remarkably similar to the failed and <a data-analytics-id="inline-link" href="https://www.techradar.com/news/microsoft-is-killing-off-one-of-the-best-windows-10-work-tools" data-before-rewrite-localise="https://www.techradar.com/news/microsoft-is-killing-off-one-of-the-best-windows-10-work-tools">shelved Timeline</a> feature back on <a data-analytics-id="inline-link" href="https://www.techradar.com/tag/windows-10" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.techradar.com/tag/windows-10">Windows 10</a>. However, unlike Timeline, Recall doesn't just restore a version of your desktop files, it uses <a data-analytics-id="inline-link" href="https://www.techradar.com/news/what-is-ai-everything-you-need-to-know" data-before-rewrite-localise="https://www.techradar.com/news/what-is-ai-everything-you-need-to-know">AI</a> to take you back to that moment, even opening relevant apps.</p><h2 id="what-apos-s-the-problem-with-windows-recall-3">What's the problem with Windows Recall?</h2><p>On the surface, this <em>sounds</em> like a cool feature, but that paranoid privacy purist in the back of my mind is burying his face in a pillow and screaming. Imagine if almost everything you had done for the past three months was recorded for anyone with access to your computer to see. Well, if you use Recall, you won't have to imagine.</p><p>That might seem like an overreaction, but let me explain: Recall is <a data-analytics-id="inline-link" href="https://www.techradar.com/how-to/how-to-take-a-screenshot-in-windows-11" data-before-rewrite-localise="https://www.techradar.com/how-to/how-to-take-a-screenshot-in-windows-11">taking screenshots</a> every few seconds and storing them on your device. Adding encryption into the mix, that's an enormous amount of bloaty visual data that will show <em>almost everything </em>you've been doing on your computer during that period.</p><p>As Microsoft explains, "The default allocation for Recall on a device with 256 GB will be 25 GB, which can store approximately 3 months of snapshots. You can increase the storage allocation for Recall in your PC Settings. Old snapshots will be deleted once you use your allocated storage, allowing new ones to be stored."</p><p>This is worse than keylogging! Recall isn't just recording what you type, it's recording everything you're doing, with photo evidence, every three seconds.</p><figure><blockquote><p>This is worse than keylogging!</p></blockquote></figure><p>I say <em>almost</em> everything because Microsoft claims "Recall also does not take snapshots of certain kinds of content, including InPrivate web browsing sessions in Microsoft Edge. It treats material protected with digital rights management (DRM) similarly; like other Windows apps such as the Snipping Tool, Recall will not store DRM content." That's reassuring on the surface, but it's still far too vague for anyone to actually have any faith in it.&nbsp;</p><p>Will this only work on <a data-analytics-id="inline-link" href="https://www.techradar.com/reviews/pc-mac/software/utilities/other-software/microsoft-edge-1292485/review" data-before-rewrite-localise="https://www.techradar.com/reviews/pc-mac/software/utilities/other-software/microsoft-edge-1292485/review">Microsoft Edge</a>, or will it integrate with Chrome and Firefox too? If it only works with Edge, that feels like an egregious walling off of privacy for not using Microsoft's unpopular <a data-analytics-id="inline-link" href="https://www.techradar.com/best/browser" data-before-rewrite-localise="https://www.techradar.com/best/browser">web browser</a>.</p><p>But that's just the tip of the iceberg. Microsoft openly admits that Recall will be taking screenshots of your passwords and private data:</p><p>"Note that Recall does not perform content moderation. It will not hide information such as passwords or financial account numbers. That data may be in snapshots that are stored on your device, especially when sites do not follow standard internet protocols like cloaking password entry."</p><p>So, what you could have here is something that stores your passwords, your information, your account details, etc, and that is visible to anyone on your profile. If you only have one profile for your device, that means everyone with access to that PC will be able to see your Recall data.</p><p>Arguably, the worst part about this is that it will be on by default once you activate your device. Microsoft states:&nbsp;</p><figure><blockquote><p>On by default</p></blockquote></figure><p>"On Copilot+ PCs powered by a Snapdragon® X Series processor, you will see the Recall taskbar icon after you first activate your device. You can use that icon to open Recall’s settings and make choices about what snapshots Recall collects and stores on your device."</p><p>I think this is a bad idea. The decision should be made by the individual, and not by Windows. Having it immediately active just means that uninformed people may not be able to act upon this. In my eyes, it's akin to cookie tracking – it can be just as invasive. All of this makes me wonder whether it may hit a snag with <a data-analytics-id="inline-link" href="https://ico.org.uk/for-organisations/uk-gdpr-guidance-and-resources/lawful-basis/consent/what-is-valid-consent/" target="_blank" data-url="https://ico.org.uk/for-organisations/uk-gdpr-guidance-and-resources/lawful-basis/consent/what-is-valid-consent/" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">consent under GDPR</a>.</p><h2 id="is-microsoft-making-recall-secure-3">Is Microsoft making Recall secure?</h2><p>In defense of Microsoft, I'd like it to be known that there was an <em>attempt </em>to make it secure. I don't think it was a very good one, but there was an attempt.</p><p>Microsoft states that "Recall snapshots are kept on Copilot+ PCs themselves, on the local hard disk, and are protected using data encryption on your device and (if you have <a data-analytics-id="inline-link" href="https://www.techradar.com/tag/windows-11" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.techradar.com/tag/windows-11">Windows 11</a> Pro or an enterprise <a data-analytics-id="inline-link" href="https://www.techradar.com/tag/windows-11" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.techradar.com/tag/windows-11">Windows 11</a> SKU) BitLocker." From the wording here, that looks like your snapshots will only be encrypted if you have Windows Pro or a business Windows code.&nbsp;</p><p>The omission of Windows Home users is horrifying. If this <em>is</em> the case, it leaves everyday people vulnerable if their devices are compromised.&nbsp;People shouldn't have to pay a premium and upgrade to protect their privacy on an <a data-analytics-id="inline-link" href="https://www.techradar.com/tag/operating-system" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.techradar.com/tag/operating-system">operating system</a> that's snapshotting their screen every few seconds.</p><figure><blockquote><p>People shouldn't have to pay a premium and upgrade to protect their privacy</p></blockquote></figure><p>The big question, though, is what kind of encryption is being used? I've been working with <a data-analytics-id="inline-link" href="https://www.techradar.com/vpn/virtual-private-networks" data-before-rewrite-localise="https://www.techradar.com/vpn/virtual-private-networks">virtual private network (VPN)</a> encryption for a while now, and just because something is "encrypted" doesn't mean it's safe. In fact, with developments in <a data-analytics-id="inline-link" href="https://www.techradar.com/news/how-quantum-computing-will-challenge-security" data-before-rewrite-localise="https://www.techradar.com/news/how-quantum-computing-will-challenge-security">quantum computing</a>, encryption is under threat, and even the <a data-analytics-id="inline-link" href="https://www.techradar.com/vpn/best-vpn" data-before-rewrite-localise="https://www.techradar.com/vpn/best-vpn">best VPN</a> services are having to come up with quantum-secure encryption methods. We've already seen that <a data-analytics-id="inline-link" href="https://www.techradar.com/pro/security/bad-news-for-bitlocker-users-its-encryption-can-be-cracked-remarkable-easily" data-before-rewrite-localise="https://www.techradar.com/pro/security/bad-news-for-bitlocker-users-its-encryption-can-be-cracked-remarkable-easily">BitLocker can be cracked</a>.</p><p>Another note in Microsoft's favor is that the data is stored locally and encrypted, rather than it being uploaded to a cloud server for Microsoft to access.</p><p>"Recall screenshots are only linked to a specific user profile and Recall does not share them with other users, make them available for Microsoft to view, or use them for targeting advertisements."</p><p>This means that, for now, Microsoft isn't peeking behind the curtain. But that doesn't guarantee that'll be the case forever. If Microsoft can legally find a way to make money out of this tool, my guess is that they'll try. For now, the push seems to be to persuade people to upgrade their OS.</p><p>If you're one of those households that has different profiles for each person on the family PC, you can claw back a little bit of privacy.&nbsp;</p><p>"Screenshots are only available to the person whose profile was used to sign in to the device. If two people share a device with different profiles they will not be able to access each other’s screenshots. If they use the same profile to sign-in to the device then they will share a screenshot history. Otherwise, Recall screenshots are not available to other users or accessed by other applications or services."</p><p>The problem is, that's only helpful if you password-protect your profile, and if someone sets parental controls on your profile, that <em>could</em> give them a backdoor.</p><h2 id="what-are-the-security-risks-with-recall-3">What are the security risks with Recall?</h2><p>You're probably thinking "so what?" So let me give you a few scenarios where this could be a problem:&nbsp;</p><ul><li><strong>You're using a public computer:</strong> let's say you do some online shopping or banking on a library computer. You didn't realize Recall was active, and now the person using the computer after you has just gone into the Recall archive to pull up all of your bank details, your address, and your passwords. It's like handing your house keys over to a burglar before telling them you're going on holiday for the week.</li><li><strong>You're using a work laptop:</strong> we've all used a company computer for personal reasons, be it looking at social media on your lunch break, or simply running some errands because you don't have your own laptop. Now your boss, your IT team, and <em>anyone</em> with access to your device, can go through and see every three seconds of how you're using <em>their</em> equipment. They could use this to track your work output and see how productive you are, they could even read private messages you send to people.</li><li><strong>You're using a family PC:</strong> if you've been using the household computer, and you don't have a password-protected profile, anyone could walk in and open up your Recall history. If you've been doing anything <em>unsavory</em> it's about to be obvious, even if you deleted that search history.</li><li><strong>You get hacked or your laptop gets stolen:</strong> this one's pretty obvious, but if someone manages to hack into your device, the encryption won't matter. Similarly, if someone just steals your laptop and you don't have a secure password locking it, then a criminal (cyber or otherwise) can use Recall to pull the whole world out from under your feet.</li></ul><p>There are so many problems that can arise just from someone accessing your Recall data. Using a <a data-analytics-id="inline-link" href="https://www.techradar.com/best/password-manager" data-before-rewrite-localise="https://www.techradar.com/best/password-manager">password manager</a> would become irrelevant if someone can see you typing in your master password, your <a data-analytics-id="inline-link" href="https://www.techradar.com/best/best-encrypted-messaging-app-android" data-before-rewrite-localise="https://www.techradar.com/best/best-encrypted-messaging-app-android">private messages</a> will be anything but, and there's no point in deleting your search history because Microsoft is keeping the receipts!</p><h2 id="how-to-protect-your-privacy-with-windows-recall-3">How to protect your privacy with Windows Recall</h2><p>There are a few ways you can protect your privacy from Windows Recall, but the obvious, and most effective one will be to disable it outright. As the saying goes "an ounce of prevention is worth a pound of cure." You're better off not having this stuff stored on your device in the first place.</p><p>If, however, you want to use Recall, you're going to need to do the following:</p><ul><li><strong>Make an individual profile on your PC:</strong> this will prevent people from having shared access to your Recall data as long as you follow my next tip.</li><li><strong>Password-protect your profile:</strong> not just your device, but your profile, too. Don't use a weak password, be serious. Use three memorable words with numbers and symbols, and no, don't set your password as "3-Memorable-worD5!"</li><li><strong>Encrypt your Recall data:</strong> you may have to upgrade your OS or pay for BitLocker, but encryption is a non-negotiable. If someone gets past your password, you don't want them to have immediate, unchecked access to what you've been doing for the past three months.</li><li><strong>Don't access sensitive data while Recall is on:</strong> if you're going to type in personal passwords or look at NSFW content, just turn it off. This is obviously going to be annoying and time-consuming, but it's far better than the alternative of having it all screenshotted.</li></ul><h2 id="bottom-line-recall-makes-my-skin-crawl-3">Bottom line: Recall makes my skin crawl</h2><p>Look, I've been a privacy advocate and researcher for years. I don't like the idea of anything tracking what we do. But <em>this</em>... this is something else. The risk that comes with Recall, the sheer devastation it could cause <a data-analytics-id="inline-link" href="https://www.techradar.com/news/been-hacked-this-is-what-you-need-to-do-now" data-before-rewrite-localise="https://www.techradar.com/news/been-hacked-this-is-what-you-need-to-do-now">if your device gets hacked</a>, the idea that Microsoft may be walling off privacy behind what I can only describe as a paywall. It sickens me.</p><p>There is so much opportunity for misuse with this feature. Security cannot be understated. Privacy cannot be bolted on. Taking screenshots of my device from the second I activate my device should <em>not</em> be a default option. Put the user in control of their privacy, and put the decision in their hands.</p><p>All of this just pushes me into the privacy-loving flippers of <a data-analytics-id="inline-link" href="https://www.techradar.com/best/best-linux-distros" data-before-rewrite-localise="https://www.techradar.com/best/best-linux-distros">Linux</a>.</p><h2 id="section-you-might-also-like"><span>You might also like</span></h2><ul><li><a href="https://www.techradar.com/computing/windows/microsoft-reveals-ai-powered-recall-feature-to-transform-windows-11s-searchability-while-confirming-hardware-requirements" data-before-rewrite-localise="https://www.techradar.com/computing/windows/microsoft-reveals-ai-powered-recall-feature-to-transform-windows-11s-searchability-while-confirming-hardware-requirements">Microsoft reveals AI-powered 'Recall' feature to transform Windows 11's searchability, while confirming hardware requirements</a></li><li><a href="https://www.techradar.com/vpn/ai-surveillance-is-on-the-horizon-but-mullvad-vpn-might-have-a-fix" data-before-rewrite-localise="https://www.techradar.com/vpn/ai-surveillance-is-on-the-horizon-but-mullvad-vpn-might-have-a-fix">AI surveillance is on the horizon, but Mullvad VPN might have a fix</a></li><li><a href="https://www.techradar.com/computing/artificial-intelligence/microsoft-makes-big-promises-with-new-ai-pcs-that-will-come-with-ai-explorer-feature-for-windows-11" data-before-rewrite-localise="https://www.techradar.com/computing/artificial-intelligence/microsoft-makes-big-promises-with-new-ai-pcs-that-will-come-with-ai-explorer-feature-for-windows-11">Microsoft makes big promises with new ‘AI PCs’ that will come with AI Explorer feature for Windows 11</a></li></ul>
</div>
<div id="slice-container-authorBio-wMU2UHFUgssHNRSrgVvTuh"><p>Andreas has been with TechRadar as Future PLC's Editor-in-Chief of Tech Software since March 2023, supporting content and teams on VPNs, antivirus, and other cybersecurity tools. He's previously written for and led content at ProPrivacy, Business2Community, and The Tech Report. After completing a Master of Research degree, Andreas fell in love with all things cybersecurity; combining his passions to help expose the prevalence of ad tech in the charity sector and raise awareness of digital privacy around the world.</p></div>



</section>



<div id="slice-container-relatedArticles"><p><h5>Most Popular</h5></p></div>








</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pluckable Strings (384 pts)]]></title>
            <link>https://string.spiel.com/</link>
            <guid>40442595</guid>
            <pubDate>Wed, 22 May 2024 16:05:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://string.spiel.com/">https://string.spiel.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40442595">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: PBT – A property-based testing library for Ruby (153 pts)]]></title>
            <link>https://github.com/ohbarye/pbt</link>
            <guid>40441093</guid>
            <pubDate>Wed, 22 May 2024 13:58:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ohbarye/pbt">https://github.com/ohbarye/pbt</a>, See on <a href="https://news.ycombinator.com/item?id=40441093">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Property-Based Testing in Ruby</h2><a id="user-content-property-based-testing-in-ruby" aria-label="Permalink: Property-Based Testing in Ruby" href="#property-based-testing-in-ruby"></a></p>
<p dir="auto"><a href="https://rubygems.org/gems/pbt" rel="nofollow"><img src="https://camo.githubusercontent.com/1e4aba19ac30272d7278974d5b9405de20415d890eeb97c8d53c1cf0f5c4c4b5/68747470733a2f2f62616467652e667572792e696f2f72622f7062742e737667" alt="Gem Version" data-canonical-src="https://badge.fury.io/rb/pbt.svg"></a>
<a href="https://github.com/ohbarye/pbt/actions/workflows/main.yml"><img src="https://github.com/ohbarye/pbt/actions/workflows/main.yml/badge.svg" alt="Build Status"></a>
<a href="https://www.rubydoc.info/gems/pbt" rel="nofollow"><img src="https://camo.githubusercontent.com/0e2efd55dee25a736dba3440934b56852469e6a9bd487bbc7afff3c4f8851631/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f25463025394625393325394152756279446f632d646f63756d656e746174696f6e2d696e666f726d6174696f6e616c2e737667" alt="RubyDoc" data-canonical-src="https://img.shields.io/badge/%F0%9F%93%9ARubyDoc-documentation-informational.svg"></a></p>
<p dir="auto">A property-based testing tool for Ruby with experimental features that allow you to run test cases in parallel.</p>
<p dir="auto">PBT stands for Property-Based Testing.</p>
<p dir="auto">As for the results of the parallelization experiment, please refer the talk at RubyKaigi 2024: <a href="https://rubykaigi.org/2024/presentations/ohbarye.html" rel="nofollow">Unlocking Potential of Property Based Testing with Ractor</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">What's Property-Based Testing?</h2><a id="user-content-whats-property-based-testing" aria-label="Permalink: What's Property-Based Testing?" href="#whats-property-based-testing"></a></p>
<p dir="auto">Property-Based Testing is a testing methodology that focuses on the properties a system should always satisfy, rather than checking individual examples. Instead of writing tests for predefined inputs and outputs, PBT allows you to specify the general characteristics that your code should adhere to and then automatically generates a wide range of inputs to verify these properties.</p>
<p dir="auto">The key benefits of property-based testing include the ability to cover more edge cases and the potential to discover bugs that traditional example-based tests might miss. It's particularly useful for identifying unexpected behaviors in your code by testing it against a vast set of inputs, including those you might not have considered.</p>
<p dir="auto">For a more in-depth understanding of Property-Based Testing, please refer to external resources.</p>
<ul dir="auto">
<li>Original ideas
<ul dir="auto">
<li><a href="https://ieeexplore.ieee.org/document/367311" rel="nofollow">Property-based testing of privileged programs</a> (1994)</li>
<li><a href="https://dl.acm.org/doi/abs/10.1145/263244.263267" rel="nofollow">Property-based testing: a new approach to testing for assurance</a> (1997)</li>
<li><a href="https://dl.acm.org/doi/10.1145/351240.351266" rel="nofollow">QuickCheck: a lightweight tool for random testing of Haskell programs</a> (2000)</li>
</ul>
</li>
<li>Rather new introductory resources
<ul dir="auto">
<li>Fred Hebert's book <a href="https://propertesting.com/" rel="nofollow">Property-Based Testing With PropEr, Erlang and Elixir</a>.</li>
<li><a href="https://fast-check.dev/docs/introduction/why-property-based/" rel="nofollow">fast-check - Why Property-Based?</a></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Add this line to your application's Gemfile and run <code>bundle install</code>.</p>

<p dir="auto">Off course you can install with <code>gem intstall pbt</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Basic Usage</h2><a id="user-content-basic-usage" aria-label="Permalink: Basic Usage" href="#basic-usage"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Simple property</h3><a id="user-content-simple-property" aria-label="Permalink: Simple property" href="#simple-property"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Let's say you have your own sort method.
def sort(array)
  return array if array.size <= 2 # Here's a bug! It should be 1.
  pivot, *rest = array
  left, right = rest.partition { |n| n <= pivot }
  sort(left) + [pivot] + sort(right)
end

Pbt.assert do
  # The given block is executed 100 times with different arrays with random numbers.
  # Besides, the block runs in parallel by Ractor.
  Pbt.property(Pbt.array(Pbt.integer)) do |numbers|
    result = sort(numbers)
    result.each_cons(2) do |x, y|
      raise &quot;Sort algorithm is wrong.&quot; unless x <= y
    end
  end
end

# If the function has a bug, the test fails and it reports a minimum counterexample.
# For example, the sort method doesn't work for [0, -1].
#
# Pbt::PropertyFailure:
#   Property failed after 23 test(s)
#   seed: 43738985293126714007411539287084402325
#   counterexample: [0, -1]
#   Shrunk 40 time(s)
#   Got RuntimeError: Sort algorithm is wrong."><pre><span># Let's say you have your own sort method.</span>
<span>def</span> <span>sort</span><span>(</span><span>array</span><span>)</span>
  <span>return</span> <span>array</span> <span>if</span> <span>array</span><span>.</span><span>size</span> &lt;= <span>2</span> <span># Here's a bug! It should be 1.</span>
  <span>pivot</span><span>,</span> *<span>rest</span> <span>=</span> <span>array</span>
  <span>left</span><span>,</span> <span>right</span> <span>=</span> <span>rest</span><span>.</span><span>partition</span> <span>{</span> |<span>n</span>| <span>n</span> &lt;= <span>pivot</span> <span>}</span>
  <span>sort</span><span>(</span><span>left</span><span>)</span> + <span>[</span><span>pivot</span><span>]</span> + <span>sort</span><span>(</span><span>right</span><span>)</span>
<span>end</span>

<span>Pbt</span><span>.</span><span>assert</span> <span>do</span>
  <span># The given block is executed 100 times with different arrays with random numbers.</span>
  <span># Besides, the block runs in parallel by Ractor.</span>
  <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>array</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span><span>)</span> <span>do</span> |<span>numbers</span>|
    <span>result</span> <span>=</span> <span>sort</span><span>(</span><span>numbers</span><span>)</span>
    <span>result</span><span>.</span><span>each_cons</span><span>(</span><span>2</span><span>)</span> <span>do</span> |<span>x</span><span>,</span> <span>y</span>|
      <span>raise</span> <span>"Sort algorithm is wrong."</span> <span>unless</span> <span>x</span> &lt;= <span>y</span>
    <span>end</span>
  <span>end</span>
<span>end</span>

<span># If the function has a bug, the test fails and it reports a minimum counterexample.</span>
<span># For example, the sort method doesn't work for [0, -1].</span>
<span>#</span>
<span># Pbt::PropertyFailure:</span>
<span>#   Property failed after 23 test(s)</span>
<span>#   seed: 43738985293126714007411539287084402325</span>
<span>#   counterexample: [0, -1]</span>
<span>#   Shrunk 40 time(s)</span>
<span>#   Got RuntimeError: Sort algorithm is wrong.</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Explain The Snippet</h3><a id="user-content-explain-the-snippet" aria-label="Permalink: Explain The Snippet" href="#explain-the-snippet"></a></p>
<p dir="auto">The above snippet is very simple but contains the basic components.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Runner</h4><a id="user-content-runner" aria-label="Permalink: Runner" href="#runner"></a></p>
<p dir="auto"><code>Pbt.assert</code> is the runner. The runner interprets and executes the given property. <code>Pbt.assert</code> takes a property and runs it multiple times. If the property fails, it tries to shrink the input that caused the failure.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Property</h4><a id="user-content-property" aria-label="Permalink: Property" href="#property"></a></p>
<p dir="auto">The snippet above declared a property by calling <code>Pbt.property</code>. The property describes the following:</p>
<ol dir="auto">
<li>What the user wants to evaluate. This corresponds to the block (let's call this <code>predicate</code>) enclosed by <code>do</code> <code>end</code></li>
<li>How to generate inputs for the predicate — using <code>Arbitrary</code></li>
</ol>
<p dir="auto">The <code>predicate</code> block is a function that directly asserts, taking values generated by <code>Arbitrary</code> as input.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Arbitrary</h4><a id="user-content-arbitrary" aria-label="Permalink: Arbitrary" href="#arbitrary"></a></p>
<p dir="auto">Arbitrary generates random values. It is also responsible for shrinking those values if asked to shrink a failed value as input.</p>
<p dir="auto">Here, we used only one type of arbitrary, <code>Pbt.integer</code>. There are many other built-in arbitraries, and you can create a variety of inputs by combining existing ones.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Shrink</h4><a id="user-content-shrink" aria-label="Permalink: Shrink" href="#shrink"></a></p>
<p dir="auto">In PBT, If a test fails, it attempts to shrink the case that caused the failure into a form that is easier for humans to understand.
In other words, instead of stopping the test itself the first time it fails and reporting the failed value, it tries to find the minimal value that causes the error.</p>
<p dir="auto">When there is a test that fails when given an even number, a counterexample of <code>2</code> is simpler and easier to understand than <code>432743417662</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Arbitrary</h3><a id="user-content-arbitrary-1" aria-label="Permalink: Arbitrary" href="#arbitrary-1"></a></p>
<p dir="auto">There are many built-in arbitraries in <code>Pbt</code>. You can use them to generate random values for your tests. Here are some representative arbitraries.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Primitives</h4><a id="user-content-primitives" aria-label="Permalink: Primitives" href="#primitives"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="rng = Random.new

Pbt.integer.generate(rng)                  # => 42
Pbt.integer(min: -1, max: 8).generate(rng) # => Integer between -1 and 8

Pbt.symbol.generate(rng)                   # => :atq

Pbt.ascii_char.generate(rng)               # => &quot;a&quot;
Pbt.ascii_string.generate(rng)             # => &quot;aagjZfao&quot;

Pbt.boolean.generate(rng)                  # => true or false
Pbt.constant(42).generate(rng)             # => 42 always"><pre><span>rng</span> <span>=</span> <span>Random</span><span>.</span><span>new</span>

<span>Pbt</span><span>.</span><span>integer</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>                  <span># =&gt; 42</span>
<span>Pbt</span><span>.</span><span>integer</span><span>(</span><span>min</span>: -<span>1</span><span>,</span> <span>max</span>: <span>8</span><span>)</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span> <span># =&gt; Integer between -1 and 8</span>

<span>Pbt</span><span>.</span><span>symbol</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>                   <span># =&gt; :atq</span>

<span>Pbt</span><span>.</span><span>ascii_char</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>               <span># =&gt; "a"</span>
<span>Pbt</span><span>.</span><span>ascii_string</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>             <span># =&gt; "aagjZfao"</span>

<span>Pbt</span><span>.</span><span>boolean</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>                  <span># =&gt; true or false</span>
<span>Pbt</span><span>.</span><span>constant</span><span>(</span><span>42</span><span>)</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>             <span># =&gt; 42 always</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Composites</h4><a id="user-content-composites" aria-label="Permalink: Composites" href="#composites"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="rng = Random.new

Pbt.array(Pbt.integer).generate(rng)                        # => [121, -13141, 9825]
Pbt.array(Pbt.integer, max: 1, empty: true).generate(rng)   # => [] or [42] etc.

Pbt.tuple(Pbt.symbol, Pbt.integer).generate(rng)            # => [:atq, 42]

Pbt.fixed_hash(x: Pbt.symbol, y: Pbt.integer).generate(rng) # => {x: :atq, y: 42}
Pbt.hash(Pbt.symbol, Pbt.integer).generate(rng)             # => {atq: 121, ygab: -1142}

Pbt.one_of(:a, 1, 0.1).generate(rng)                        # => :a or 1 or 0.1"><pre><span>rng</span> <span>=</span> <span>Random</span><span>.</span><span>new</span>

<span>Pbt</span><span>.</span><span>array</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>                        <span># =&gt; [121, -13141, 9825]</span>
<span>Pbt</span><span>.</span><span>array</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>,</span> <span>max</span>: <span>1</span><span>,</span> <span>empty</span>: <span>true</span><span>)</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>   <span># =&gt; [] or [42] etc.</span>

<span>Pbt</span><span>.</span><span>tuple</span><span>(</span><span>Pbt</span><span>.</span><span>symbol</span><span>,</span> <span>Pbt</span><span>.</span><span>integer</span><span>)</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>            <span># =&gt; [:atq, 42]</span>

<span>Pbt</span><span>.</span><span>fixed_hash</span><span>(</span><span>x</span>: <span>Pbt</span><span>.</span><span>symbol</span><span>,</span> <span>y</span>: <span>Pbt</span><span>.</span><span>integer</span><span>)</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span> <span># =&gt; {x: :atq, y: 42}</span>
<span>Pbt</span><span>.</span><span>hash</span><span>(</span><span>Pbt</span><span>.</span><span>symbol</span><span>,</span> <span>Pbt</span><span>.</span><span>integer</span><span>)</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>             <span># =&gt; {atq: 121, ygab: -1142}</span>

<span>Pbt</span><span>.</span><span>one_of</span><span>(</span><span>:a</span><span>,</span> <span>1</span><span>,</span> <span>0.1</span><span>)</span><span>.</span><span>generate</span><span>(</span><span>rng</span><span>)</span>                        <span># =&gt; :a or 1 or 0.1</span></pre></div>
<p dir="auto">See <a href="https://github.com/ohbarye/pbt/blob/main/lib/pbt/arbitrary/arbitrary_methods.rb">ArbitraryMethods</a> module for more details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">What if property-based tests fail?</h2><a id="user-content-what-if-property-based-tests-fail" aria-label="Permalink: What if property-based tests fail?" href="#what-if-property-based-tests-fail"></a></p>
<p dir="auto">Once a test fails it's time to debug. <code>Pbt</code> provides some features to help you debug.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">How to reproduce</h3><a id="user-content-how-to-reproduce" aria-label="Permalink: How to reproduce" href="#how-to-reproduce"></a></p>
<p dir="auto">When a test fails, you'll see a message like below.</p>
<div data-snippet-clipboard-copy-content="Pbt::PropertyFailure:
  Property failed after 23 test(s)
  seed: 43738985293126714007411539287084402325
  counterexample: [0, -1]
  Shrunk 40 time(s)
  Got RuntimeError: Sort algorithm is wrong.
  # and backtraces"><pre lang="text"><code>Pbt::PropertyFailure:
  Property failed after 23 test(s)
  seed: 43738985293126714007411539287084402325
  counterexample: [0, -1]
  Shrunk 40 time(s)
  Got RuntimeError: Sort algorithm is wrong.
  # and backtraces
</code></pre></div>
<p dir="auto">You can reproduce the failure by passing the seed to <code>Pbt.assert</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Pbt.assert(seed: 11001296583699917659214176011685741769) do
  Pbt.property(Pbt.array(Pbt.integer)) do |number|
    # your test
  end
end"><pre><span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>seed</span>: <span>11001296583699917659214176011685741769</span><span>)</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>array</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span><span>)</span> <span>do</span> |<span>number</span>|
    <span># your test</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Verbose mode</h3><a id="user-content-verbose-mode" aria-label="Permalink: Verbose mode" href="#verbose-mode"></a></p>
<p dir="auto">You may want to know which values pass and which values fail. You can enable verbose mode by passing <code>verbose: true</code> to <code>Pbt.assert</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Pbt.assert(verbose: true) do
  Pbt.property(Pbt.array(Pbt.integer)) do |numbers|
    # your failed test
  end
end"><pre><span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>verbose</span>: <span>true</span><span>)</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>array</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span><span>)</span> <span>do</span> |<span>numbers</span>|
    <span># your failed test</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto">The verbose mode prints the results of each tested values.</p>
<div data-snippet-clipboard-copy-content="Encountered failures were:
- [152477, 666997, -531468, -92182, 623948, 425913, 656138, 856463, -64529]
- [76239, 666997, -531468, -92182, 623948]
- [76239, 666997, -531468]
(snipped for README)
- [2, 163]
- [2, 11]

Execution summary:
. × [152477, 666997, -531468, -92182, 623948, 425913, 656138, 856463, -64529]
. . √ [152477, 666997, -531468, -92182, 623948]
. . √ [-64529]
. . × [76239, 666997, -531468, -92182, 623948, 425913, 656138, 856463, -64529]
. . . × [76239, 666997, -531468, -92182, 623948]
(snipped for README)
. . . . . . . . . . . . . . . . . √ [2, 21]
. . . . . . . . . . . . . . . . . × [2, 11]
. . . . . . . . . . . . . . . . . . √ []
. . . . . . . . . . . . . . . . . . √ [2, 1]
. . . . . . . . . . . . . . . . . . √ [2, 0]"><pre lang="text"><code>Encountered failures were:
- [152477, 666997, -531468, -92182, 623948, 425913, 656138, 856463, -64529]
- [76239, 666997, -531468, -92182, 623948]
- [76239, 666997, -531468]
(snipped for README)
- [2, 163]
- [2, 11]

Execution summary:
. × [152477, 666997, -531468, -92182, 623948, 425913, 656138, 856463, -64529]
. . √ [152477, 666997, -531468, -92182, 623948]
. . √ [-64529]
. . × [76239, 666997, -531468, -92182, 623948, 425913, 656138, 856463, -64529]
. . . × [76239, 666997, -531468, -92182, 623948]
(snipped for README)
. . . . . . . . . . . . . . . . . √ [2, 21]
. . . . . . . . . . . . . . . . . × [2, 11]
. . . . . . . . . . . . . . . . . . √ []
. . . . . . . . . . . . . . . . . . √ [2, 1]
. . . . . . . . . . . . . . . . . . √ [2, 0]
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuration</h2><a id="user-content-configuration" aria-label="Permalink: Configuration" href="#configuration"></a></p>
<p dir="auto">You can configure <code>Pbt</code> by calling <code>Pbt.configure</code> before running tests.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Pbt.configure do |config|
  # Whether to print verbose output. Default is `false`.
  config.verbose = false

  # The concurrency method to use. `:ractor`, `:thread`, `:process` and `:none` are supported. Default is `:none`.
  config.worker = :none

  # The number of runs to perform. Default is `100`.
  config.num_runs = 100

  # The seed to use for random number generation.
  # It's useful to reproduce failed test with the seed you'd pick up from failure messages. Default is a random seed.
  config.seed = 42

  # Whether to report exceptions in threads.
  # It's useful to suppress error logs on Ractor that reports many errors. Default is `false`.
  config.thread_report_on_exception = false

  # Whether to allow RSpec expectation and matchers in Ractor. It's quite experimental! Default is `false`.
  config.experimental_ractor_rspec_integration = false
end"><pre><span>Pbt</span><span>.</span><span>configure</span> <span>do</span> |<span>config</span>|
  <span># Whether to print verbose output. Default is `false`.</span>
  <span>config</span><span>.</span><span>verbose</span> <span>=</span> <span>false</span>

  <span># The concurrency method to use. `:ractor`, `:thread`, `:process` and `:none` are supported. Default is `:none`.</span>
  <span>config</span><span>.</span><span>worker</span> <span>=</span> <span>:none</span>

  <span># The number of runs to perform. Default is `100`.</span>
  <span>config</span><span>.</span><span>num_runs</span> <span>=</span> <span>100</span>

  <span># The seed to use for random number generation.</span>
  <span># It's useful to reproduce failed test with the seed you'd pick up from failure messages. Default is a random seed.</span>
  <span>config</span><span>.</span><span>seed</span> <span>=</span> <span>42</span>

  <span># Whether to report exceptions in threads.</span>
  <span># It's useful to suppress error logs on Ractor that reports many errors. Default is `false`.</span>
  <span>config</span><span>.</span><span>thread_report_on_exception</span> <span>=</span> <span>false</span>

  <span># Whether to allow RSpec expectation and matchers in Ractor. It's quite experimental! Default is `false`.</span>
  <span>config</span><span>.</span><span>experimental_ractor_rspec_integration</span> <span>=</span> <span>false</span>
<span>end</span></pre></div>
<p dir="auto">Or, you can pass the configuration to <code>Pbt.assert</code> as an argument.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Pbt.assert(num_runs: 100, seed: 42) do
  # ...
end"><pre><span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>num_runs</span>: <span>100</span><span>,</span> <span>seed</span>: <span>42</span><span>)</span> <span>do</span>
  <span># ...</span>
<span>end</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Concurrency methods</h2><a id="user-content-concurrency-methods" aria-label="Permalink: Concurrency methods" href="#concurrency-methods"></a></p>
<p dir="auto">One of the key features of <code>Pbt</code> is its ability to rapidly execute test cases in parallel or concurrently, using a large number of values (by default, <code>100</code>) generated by <code>Arbitrary</code>.</p>
<p dir="auto">For concurrent processing, you can specify any of the three workers—<code>:ractor</code>, <code>:process</code>, or <code>:thread</code>—using the <code>worker</code> option. Alternatively, choose <code>:none</code> for serial execution.</p>
<p dir="auto"><code>Pbt</code> supports 3 concurrency methods and 1 sequential one. You can choose one of them by setting the <code>worker</code> option.</p>
<p dir="auto">Be aware that the performance of each method depends on the test subject. For example, if the test subject is CPU-bound, <code>:ractor</code> may be the best choice. Otherwise, <code>:none</code> shall be the best choice for most cases. See <a href="https://github.com/ohbarye/pbt/blob/main/benchmark/README.md">benchmarks</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Ractor</h3><a id="user-content-ractor" aria-label="Permalink: Ractor" href="#ractor"></a></p>
<p dir="auto"><code>:ractor</code> worker is useful for test cases that are CPU-bound. But it's experimental and has some limitations as described below. If you encounter any issues due to those limitations, consider using <code>:process</code> as workers whose benchmark is the most similar to <code>:ractor</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Pbt.assert(worker: :ractor) do
  Pbt.property(Pbt.integer) do |n|
    # ...
  end
end"><pre><span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>worker</span>: <span>:ractor</span><span>)</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span> <span>do</span> |<span>n</span>|
    <span># ...</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Limitation</h4><a id="user-content-limitation" aria-label="Permalink: Limitation" href="#limitation"></a></p>
<p dir="auto">Please note that Ractor support is an experimental feature of this gem. Due to Ractor's limitations, you may encounter some issues when using it.</p>
<p dir="auto">For example, you cannot access anything out of block.</p>
<div dir="auto" data-snippet-clipboard-copy-content="a = 1

Pbt.assert(worker: :ractor) do
  Pbt.property(Pbt.integer) do |n|
    # You cannot access `a` here because this block is executed in a Ractor and it doesn't allow implicit sharing of objects.
    a + n # => Ractor::RemoteError (can not share object between ractors)
  end
end"><pre><span>a</span> <span>=</span> <span>1</span>

<span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>worker</span>: <span>:ractor</span><span>)</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span> <span>do</span> |<span>n</span>|
    <span># You cannot access `a` here because this block is executed in a Ractor and it doesn't allow implicit sharing of objects.</span>
    <span>a</span> + <span>n</span> <span># =&gt; Ractor::RemoteError (can not share object between ractors)</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto">You cannot use any methods provided by test frameworks like <code>expect</code> or <code>assert</code> because they are not available in a Ractor.</p>
<div dir="auto" data-snippet-clipboard-copy-content="it do
  Pbt.assert(worker: :ractor) do
    Pbt.property(Pbt.integer) do |n|
      # This is not possible because `self` if a Ractor here.
      expect(n).to be_an(Integer) # => Ractor::RemoteError (cause by NoMethodError for `expect` or `be_an`)
    end
  end
end"><pre><span>it</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>worker</span>: <span>:ractor</span><span>)</span> <span>do</span>
    <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span> <span>do</span> |<span>n</span>|
      <span># This is not possible because `self` if a Ractor here.</span>
      <span>expect</span><span>(</span><span>n</span><span>)</span><span>.</span><span>to</span> <span>be_an</span><span>(</span><span>Integer</span><span>)</span> <span># =&gt; Ractor::RemoteError (cause by NoMethodError for `expect` or `be_an`)</span>
    <span>end</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto">If you're a challenger, you can enable the experimental feature to allow using RSpec expectations and matchers in Ractor. It works but it's quite experimental and could cause unexpected behaviors.</p>
<p dir="auto">Please note that this feature depends on <a href="https://ruby.github.io/prism/" rel="nofollow">prism</a> gem. If you use Ruby 3.2 or prior, you need to install the gem by yourself.</p>
<div dir="auto" data-snippet-clipboard-copy-content="it do
  Pbt.assert(worker: :ractor, experimental_ractor_rspec_integration: true) do
    Pbt.property(Pbt.integer) do |n|
      # Some RSpec expectations and matchers are available in Ractor by hack.
      # Other features like `let`, `subject`, `before`, `after` that access out of block are still not available.
      expect(n).to be_an(Integer)
    end
  end
end"><pre><span>it</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>worker</span>: <span>:ractor</span><span>,</span> <span>experimental_ractor_rspec_integration</span>: <span>true</span><span>)</span> <span>do</span>
    <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span> <span>do</span> |<span>n</span>|
      <span># Some RSpec expectations and matchers are available in Ractor by hack.</span>
      <span># Other features like `let`, `subject`, `before`, `after` that access out of block are still not available.</span>
      <span>expect</span><span>(</span><span>n</span><span>)</span><span>.</span><span>to</span> <span>be_an</span><span>(</span><span>Integer</span><span>)</span>
    <span>end</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Process</h3><a id="user-content-process" aria-label="Permalink: Process" href="#process"></a></p>
<p dir="auto">If you'd like to run test cases that are CPU-bound and <code>:ractor</code> is not available, <code>:process</code> becomes a good choice.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Pbt.assert(worker: :process) do
  Pbt.property(Pbt.integer) do |n|
    # ...
  end
end"><pre><span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>worker</span>: <span>:process</span><span>)</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span> <span>do</span> |<span>n</span>|
    <span># ...</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto">If you want to use <code>:process</code>, you need to install the <a href="https://github.com/grosser/parallel">parallel</a> gem.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Thread</h3><a id="user-content-thread" aria-label="Permalink: Thread" href="#thread"></a></p>
<p dir="auto">You may not need to run test cases with multi-threads.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Pbt.assert(worker: :thread) do
  Pbt.property(Pbt.integer) do |n|
    # ...
  end
end"><pre><span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>worker</span>: <span>:thread</span><span>)</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span> <span>do</span> |<span>n</span>|
    <span># ...</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto">If you want to use <code>:thread</code>, you need to install the <a href="https://github.com/grosser/parallel">parallel</a> gem.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">None</h3><a id="user-content-none" aria-label="Permalink: None" href="#none"></a></p>
<p dir="auto">For most cases, <code>:none</code> is the best choice. It runs tests sequentially (without parallelism) but most test cases finishes within a reasonable time.</p>
<div dir="auto" data-snippet-clipboard-copy-content="Pbt.assert(worker: :none) do
  Pbt.property(Pbt.integer) do |n|
    # ...
  end
end"><pre><span>Pbt</span><span>.</span><span>assert</span><span>(</span><span>worker</span>: <span>:none</span><span>)</span> <span>do</span>
  <span>Pbt</span><span>.</span><span>property</span><span>(</span><span>Pbt</span><span>.</span><span>integer</span><span>)</span> <span>do</span> |<span>n</span>|
    <span># ...</span>
  <span>end</span>
<span>end</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">TODOs</h2><a id="user-content-todos" aria-label="Permalink: TODOs" href="#todos"></a></p>
<p dir="auto">Once this project finishes the following, we will release v1.0.0.</p>
<ul>
<li> Implement basic primitive arbitraries</li>
<li> Implement composite arbitraries</li>
<li> Support shrinking</li>
<li> Support multiple concurrency methods
<ul>
<li> Ractor</li>
<li> Process</li>
<li> Thread</li>
<li> None (Run tests sequentially)</li>
</ul>
</li>
<li> Documentation
<ul>
<li> Add better examples</li>
<li> Arbitrary usage</li>
<li> Configuration</li>
</ul>
</li>
<li> Benchmark</li>
<li> Rich report by verbose mode</li>
<li> (Partially) Allow to use expectations and matchers provided by test framework in Ractor if possible.
<ul dir="auto">
<li>It'd be so hard to pass assertions like <code>expect</code>, <code>assert</code> to a Ractor.</li>
</ul>
</li>
<li> Implement frequency arbitrary</li>
<li> Statistics feature to aggregate generated values</li>
<li> Decide DSL</li>
<li> Try Fiber</li>
<li> Stateful property-based testing</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Development</h2><a id="user-content-development" aria-label="Permalink: Development" href="#development"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Setup</h3><a id="user-content-setup" aria-label="Permalink: Setup" href="#setup"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="bin/setup
bundle exec rake # Run tests and lint at once"><pre>bin/setup
bundle <span>exec</span> rake <span><span>#</span> Run tests and lint at once</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Test</h3><a id="user-content-test" aria-label="Permalink: Test" href="#test"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Lint</h3><a id="user-content-lint" aria-label="Permalink: Lint" href="#lint"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="bundle exec rake standard:fix"><pre>bundle <span>exec</span> rake standard:fix</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Bug reports and pull requests are welcome on GitHub at <a href="https://github.com/ohbarye/pbt">https://github.com/ohbarye/pbt</a>. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the <a href="https://github.com/ohbarye/pbt/blob/master/CODE_OF_CONDUCT.md">code of conduct</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">The gem is available as open source under the terms of the <a href="https://opensource.org/licenses/MIT" rel="nofollow">MIT License</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Credits</h2><a id="user-content-credits" aria-label="Permalink: Credits" href="#credits"></a></p>
<p dir="auto">This project draws a lot of inspiration from other testing tools, namely</p>
<ul dir="auto">
<li><a href="https://fast-check.dev/" rel="nofollow">fast-check</a></li>
<li><a href="https://github.com/vinistock/loupe">Loupe</a></li>
<li><a href="https://github.com/rspec/rspec">RSpec</a></li>
<li><a href="https://github.com/seattlerb/minitest">Minitest</a></li>
<li><a href="https://github.com/grosser/parallel">Parallel</a></li>
<li><a href="https://github.com/Qqwy/ruby-prop_check">PropCheck for Ruby</a></li>
<li><a href="https://github.com/alfert/propcheck">PropCheck for Elixir</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Code of Conduct</h2><a id="user-content-code-of-conduct" aria-label="Permalink: Code of Conduct" href="#code-of-conduct"></a></p>
<p dir="auto">Everyone interacting in the Pbt project's codebases, issue trackers, chat rooms and mailing lists is expected to follow the <a href="https://github.com/ohbarye/pbt/blob/master/CODE_OF_CONDUCT.md">code of conduct</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sal Khan is pioneering innovation in education again (239 pts)]]></title>
            <link>https://www.gatesnotes.com/Brave-New-Words</link>
            <guid>40440854</guid>
            <pubDate>Wed, 22 May 2024 13:39:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gatesnotes.com/Brave-New-Words">https://www.gatesnotes.com/Brave-New-Words</a>, See on <a href="https://news.ycombinator.com/item?id=40440854">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-module-name="Brave-New-Words" data-module-type="article">







<p>Ahead of the curve</p>
<p>Sal Khan is pioneering innovation in education…again</p>
<p><em>Brave New Words</em> paints an inspiring picture of AI in the classroom.</p>
<p><span> | </span></p><p>May 21, 2024 <span></span></p>
    <p><img src="https://www.gatesnotes.com/media/GNIN/gray_4x6.png" data-src="https://assets.gatesnotes.com/8a5ac0b3-6095-00af-c50a-89056fbe4642/744fed15-4a2f-4711-8af5-fd42e1026bc4/20240514-SummerBooks-BraveNewWords-TGN_Assets-001-article-hero_1200x564.jpg" data-src-tablet="https://assets.gatesnotes.com/8a5ac0b3-6095-00af-c50a-89056fbe4642/744fed15-4a2f-4711-8af5-fd42e1026bc4/20240514-SummerBooks-BraveNewWords-TGN_Assets-001-article-hero_1200x564.jpg" data-src-mobile="https://assets.gatesnotes.com/8a5ac0b3-6095-00af-c50a-89056fbe4642/744fed15-4a2f-4711-8af5-fd42e1026bc4/20240514-SummerBooks-BraveNewWords-TGN_Assets-001-article-hero_1200x564.jpg"></p>



</div><div data-module-name="Brave-New-Words" data-module-type="article" id="TGN_site_Article_body">











<p>When GPT-4o launched last week, people across the internet (and the world) were blown away. Talking to AI has always felt a bit surreal—but OpenAI’s latest model feels like talking to a real person. You can actually speak to it, and have it talk back to you, without lags. It’s as lifelike as any AI we’ve seen so far, and the use cases are limitless. One of the first that came to my mind was how big a game-changer it will be in the classroom. Imagine every student having a personal tutor powered by this technology.</p>
<p>I recently read a terrific book on this topic called <em>Brave New Words</em>. It’s written by my friend (and <a href="https://www.gatesnotes.com/Unconfuse-Me-podcast-with-guest-Sal-Khan" data-new-window="true" target="_blank" rel="noopener noreferrer">podcast guest</a>) Sal Khan, a longtime pioneer of innovation in education. Back in 2006, Sal founded Khan Academy to share the tutoring content he’d created for younger family members with a wider audience. Since then, his online educational platform has helped teach over 150 million people worldwide—including me and my kids.</p>
<p>Well before this recent AI boom, I considered him a visionary. When I learned he was writing this book, I couldn’t wait to read it. Like I expected, <em>Brave New Words</em> is a masterclass.</p>
<p>Chapter by chapter, Sal takes readers through his predictions—some have already come true since the book was written—for AI’s many applications in education. His main argument: AI will radically improve both student outcomes and teacher experiences, and help usher in a future where everyone has access to a world-class education.</p>
<p>You might be skeptical, especially if you—like me—have been following the EdTech movement for a while. For decades, exciting technologies and innovations have made headlines, accompanied by similarly bold promises to revolutionize learning and teaching as we know it—only to make a marginal impact in the classroom.</p>
<p>But drawing on his experience creating <a href="https://www.khanmigo.ai/" data-new-window="true" target="_blank" rel="noopener noreferrer">Khanmigo</a>, an AI-powered tutor, Sal makes a compelling case that AI-powered technologies will be different. That’s because we finally have a way to give every student the kind of personalized learning, support, and guidance that’s historically been out of reach for most kids in most classrooms. As Sal puts it, “Getting every student a dedicated on-call human tutor is cost prohibitive.” AI tutors, on the other hand, aren’t.</p>
<p>Picture this: You're a seventh-grade student who struggles to keep up in math. But now, you have an AI tutor like the one Sal describes by your side. As you work through a challenging set of fraction problems, it won’t just give you the answer—it breaks each problem down into digestible steps. When you get stuck, it gives you easy-to-understand explanations and a gentle nudge in the right direction. When you finally get the answer, it generates targeted practice questions that help build your understanding and confidence.</p>
<p>And with the help of an AI tutor, the past comes to life in remarkable ways. While learning about Abraham Lincoln’s leadership during the Civil War, you can have a “conversation” with the 16<sup>th</sup> president himself. (As Sal demonstrates in the book, conversations with one of my favorite literary figures, Jay Gatsby, are also an option.)</p>
<p>When the time comes to write your essay, don’t worry about the dreaded blank page. Instead, your AI tutor asks you thought-starters to help brainstorm. You get feedback on your outline in seconds, with tips to improve the logic or areas where you need more research. As you draft, the tutor evaluates your writing in real-time—almost impossible without this technology—and shows where you might clarify your ideas, provide more evidence, or address a counterargument. Before you submit, it gives detailed suggestions to refine your language and sharpen your points.</p>
<p>Is this cheating?</p>
<p>It’s a complicated question, and there’s no one-size-fits-all answer. Sal notes that bouncing ideas off friends, asking family members to critique work, and using spellcheckers and tools like Grammarly—which can rephrase entire sentences—aren’t considered cheating today by most measures. Similarly, when used right, AI doesn’t work for students but <em>with </em>them to move something forward that they might otherwise get stuck on. That’s why, according to Sal, a lot of educators who first banned AI from class are now encouraging students to use it.</p>
<p>After all, mastery of AI won’t just be nice to have in a few years—for many professions, it’ll be necessary. Employees who can use AI effectively will be far more valuable than those who can’t. By incorporating this technology into education, we're both improving students’ experiences and outcomes <em>and</em> preparing them for the jobs of the future—which will become more enjoyable and fulfilling with AI in the mix.</p>
<p>That includes teaching. With every transformative innovation, there are fears of machines taking jobs. But when it comes to education, I agree with Sal: AI tools and tutors never can and never should replace teachers. What AI can do, though, is support and empower them.</p>
<p>Until now, most EdTech solutions, as great as they may be, haven’t meaningfully made teachers’ lives easier. But with AI, they can have a superhuman teaching assistant to handle routine tasks like lesson planning and grading—which take up almost half of a typical teacher's day. In seconds, an AI assistant can grade spelling tests or create a lesson plan connecting the Industrial Revolution to current events. It can even monitor each student's progress and give teachers instant feedback, allowing for a new era of personalized learning.</p>
<p>With AI assistants handling the mundane stuff, teachers can focus on what they do best: inspiring students, building relationships, and making sure everyone feels seen and supported—especially kids who need a little extra help.</p>
<p>Of course, there are challenges involved in bringing AI into schools at scale, and Sal is candid about them. We need systems that protect student privacy and mitigate biases. And there’s still a lot to do so that every kid has access to the devices and connectivity they need to use AI in the first place. No technology is a silver bullet for education. But I believe AI can be a game-changer and great equalizer in the classroom, the workforce, and beyond.</p>
<p>I recently visited First Avenue School in Newark, New Jersey, where Khanmigo is currently being piloted. We’re still in the early days, but it was amazing to see firsthand how AI can be used in the classroom—and to speak with students and teachers who are already reaping the benefits. It felt like catching a glimpse of the future. No one understands where education is headed better than Sal Khan, and I can't recommend <em>Brave New Words</em> enough.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA['Right to roam' movement fights to give the commons back to the public (296 pts)]]></title>
            <link>https://news.mongabay.com/2024/05/right-to-roam-movement-fights-to-give-the-commons-back-to-the-commoners/</link>
            <guid>40440283</guid>
            <pubDate>Wed, 22 May 2024 12:48:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.mongabay.com/2024/05/right-to-roam-movement-fights-to-give-the-commons-back-to-the-commoners/">https://news.mongabay.com/2024/05/right-to-roam-movement-fights-to-give-the-commons-back-to-the-commoners/</a>, See on <a href="https://news.ycombinator.com/item?id=40440283">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">

<article id="post-282255">
<div><ul><li><em>The “right to roam” movement in England seeks to reclaim common rights to access, use and enjoy both private and public land, since citizens only have access to 8% of their nation’s land currently.</em></li><li><em>Campaigner and activist Jon Moses joins the Mongabay podcast to discuss the history of land ownership change in England with co-host Rachel Donald, and why reestablishing a common “freedom to roam” — a right observed in places like the Czech Republic and Norway — is necessary to reestablishing human connection with nature and repairing damaged landscapes.</em></li><li><em>At least 2,500 landscapes are cut off from public access in England, requiring one to trespass to reach them.</em></li><li><em>“There needs to be a kind of rethinking really of [what] people’s place is in the landscape and how that intersects with a kind of [new] relationship between people and nature as well,” Moses says on this episode.</em></li></ul></div> <p>Like most nations, England doesn’t have legally recognized rights for citizens to cross non-public lands. This means that the nearly 56 million people who live there are only legally allowed to access 8% of the country. One particularly picturesque example of this problem was recently noted by the BBC, which discussed a large piece of public land that’s actually inaccessible due to being <a href="https://www.bbc.com/news/science-environment-68278444" data-wpel-link="external" target="_blank" rel="external">surrounded</a> by private land, forcing people to trespass in order to reach it.</p>
<p><a href="https://www.righttoroam.org.uk/" data-wpel-link="external" target="_blank" rel="external">Right to Roam</a> campaigner Jon Moses speaks with Rachel Donald on the latest Mongabay Newscast about a growing movement in England that stages creative events like group walks on private land to point out the benefits of public access for repairing degraded landscapes and improving the lives of everyday citizens, which are outlined in a new book, <a href="https://www.bloomsbury.com/uk/wild-service-9781526673312/" data-wpel-link="external" target="_blank" rel="external"><em>Wild Service: Why Nature Needs You</em></a><em>, </em>that he’s co-edited with Nick Hayes.</p>
<p>Listen here:</p>

<p>Freedom-to-roam laws aren’t widely recognized outside of Scandinavia and Europe, but Moses says these rights are fundamental to repairing the damage caused by centuries of private land ownership.</p>
<p>“I think that there needs to be a kind of rethinking really of [what] people’s place is in the landscape and how that intersects with a kind of new … vision of farming and a new relationship between people and nature as well.”</p>
<p>Among the reasons Moses says is given for the increase in private land ownership over the past few centuries is industrial agriculture, which he says isn’t benefiting the farmers all that much either. Moses says the reasons for decreases in the rights of “commoners,” as they’re referred to, to access and use common land in England were in part to suppress wage growth and quash locals’ autonomy.</p>
<p>“They’re really kind of explicit about this in the documentation, that we need to break common rights in order to create a kind of more dependent class of agricultural laborers that are reliant on a wage,” Moses says.</p>
<p>Subscribe to or follow the Mongabay Newscast wherever you listen to podcasts, from&nbsp;<a href="https://podcasts.apple.com/us/podcast/mongabay-newscast/id1155856616" data-wpel-link="external" target="_blank" rel="external">Apple</a>&nbsp;to&nbsp;<a href="https://open.spotify.com/show/66SkV6VkkoeiLFMT2cgh04" data-wpel-link="external" target="_blank" rel="external">Spotify</a>, and you can also listen to all episodes&nbsp;<a href="https://www.mongabay.com/podcast/" data-wpel-link="external" target="_blank" rel="external">here</a>&nbsp;on the Mongabay website, or download our free app for&nbsp;<a href="https://apps.apple.com/us/app/id1524511006" data-wpel-link="external" target="_blank" rel="external">Apple</a>&nbsp;and&nbsp;<a href="https://play.google.com/store/apps/details?id=com.mongabay.android.mongabay&amp;hl=en_US" data-wpel-link="external" target="_blank" rel="external">Android</a>&nbsp;devices to gain instant access to our latest episodes and all of our previous ones.</p>
<p><strong><em>Banner image:</em></strong><em>&nbsp;Thousands gather for a protest against the attempt to ban wild camping on Dartmoor. Campaigners gathered to raise ‘Old Crockern’ – a mythical spirit of the moor – on Stall Moor, owned by the landowner leading the ban. Image courtesy of Jon Moses.</em></p>
<p><strong><em>Rachel Donald&nbsp;</em></strong><em>is a climate corruption reporter and the creator of&nbsp;</em><a href="https://www.planetcritical.com/" data-wpel-link="external" target="_blank" rel="external"><em>Planet: Critical</em></a><em>, the podcast and newsletter for a world in crisis. Her latest thoughts can be found at </em><em>𝕏</em><em> via </em><a href="https://twitter.com/crisisreports" data-wpel-link="external" target="_blank" rel="external"><em>@CrisisReports</em></a><em> and at Bluesky via&nbsp;</em><a href="https://bsky.app/profile/racheldonald.bsky.social" data-wpel-link="external" target="_blank" rel="external"><em>@racheldonald.bsky.social</em></a><em>.</em></p>
<p><strong><em>Mike DiGirolamo</em></strong><em>&nbsp;is a host &amp; associate producer for Mongabay based in Sydney. He co-hosts and edits the Mongabay Newscast. Find him on&nbsp;</em><a href="http://www.linkedin.com/in/mike-digirolamo-135b0ab5" data-wpel-link="external" target="_blank" rel="external"><em>LinkedIn</em></a><em>,&nbsp;</em><a href="https://bsky.app/profile/mikedigirolamo.bsky.social" data-wpel-link="external" target="_blank" rel="external"><em>Bluesky</em></a><em>&nbsp;and&nbsp;</em><a href="https://www.instagram.com/midigirolamo/" data-wpel-link="external" target="_blank" rel="external"><em>Instagram</em></a><em>.</em></p>
<p><strong><em>Related Reading:</em></strong></p>
<blockquote data-secret="uiNsGIpdWy"><p><a href="https://news.mongabay.com/2020/10/public-lands-and-parks-are-our-common-heritage-an-interview-with-bruce-babbitt/" data-wpel-link="internal">Public lands and parks are our common heritage: Bruce Babbitt</a></p></blockquote>

<div id="single-article-footer">
<div id="single-article-meta">
<p><a href="https://mongabay.org/donate/?utm_source=mongabay.com&amp;utm_medium=bottom-of-news-post&amp;utm_campaign=support-our-journalism-2023" data-wpel-link="external" target="_blank" rel="external"><img src="https://imgs.mongabay.com/wp-content/uploads/sites/20/2022/01/15035219/support-our-journalism.jpg" width="480" height="258"></a> <span>
Article published by </span>
<span><a href="" data-wpel-link="internal"></a></span>
</p></div>
<div id="single-article-tags">
<p><a href="https://news.mongabay.com/list/activism/" rel="tag" data-wpel-link="internal">Activism</a>, <a href="https://news.mongabay.com/list/environment/" rel="tag" data-wpel-link="internal">Environment</a>, <a href="https://news.mongabay.com/list/environmental-activism/" rel="tag" data-wpel-link="internal">Environmental Activism</a>, <a href="https://news.mongabay.com/list/environmental-justice/" rel="tag" data-wpel-link="internal">environmental justice</a>, <a href="https://news.mongabay.com/list/environmental-philosophy/" rel="tag" data-wpel-link="internal">Environmental Philosophy</a>, <a href="https://news.mongabay.com/list/environmental-policy/" rel="tag" data-wpel-link="internal">Environmental Policy</a>, <a href="https://news.mongabay.com/list/featured/" rel="tag" data-wpel-link="internal">Featured</a>, <a href="https://news.mongabay.com/list/human-rights/" rel="tag" data-wpel-link="internal">Human Rights</a>, <a href="https://news.mongabay.com/list/interviews/" rel="tag" data-wpel-link="internal">Interviews</a>, <a href="https://news.mongabay.com/list/land-rights/" rel="tag" data-wpel-link="internal">Land Rights</a>, <a href="https://news.mongabay.com/list/land-use-change/" rel="tag" data-wpel-link="internal">Land Use Change</a>, <a href="https://news.mongabay.com/list/landscape-restoration/" rel="tag" data-wpel-link="internal">Landscape Restoration</a>, <a href="https://news.mongabay.com/list/nature-and-health/" rel="tag" data-wpel-link="internal">Nature And Health</a>, <a href="https://news.mongabay.com/list/podcast/" rel="tag" data-wpel-link="internal">Podcast</a>, <a href="https://news.mongabay.com/list/public-health/" rel="tag" data-wpel-link="internal">Public Health</a>, <a href="https://news.mongabay.com/list/public-lands/" rel="tag" data-wpel-link="internal">public lands</a></p><p>
<a href="https://news.mongabay.com/list/england/" rel="tag" data-wpel-link="internal">England</a>, <a href="https://news.mongabay.com/list/scotland/" rel="tag" data-wpel-link="internal">Scotland</a>, <a href="https://news.mongabay.com/list/united-kingdom/" rel="tag" data-wpel-link="internal">United Kingdom</a></p></div>
<a href="https://news.mongabay.com/2024/05/right-to-roam-movement-fights-to-give-the-commons-back-to-the-commoners/amp/?print" data-wpel-link="internal"><svg style="width:45px;height:35px;" fill="#669a00"><use xlink:href="#print"></use></svg>Print</a>
</div>


</article>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Viral DNA in the human genome linked to major psychiatric disorders (111 pts)]]></title>
            <link>https://medicalxpress.com/news/2024-05-ancient-viral-dna-human-genome.html</link>
            <guid>40439379</guid>
            <pubDate>Wed, 22 May 2024 10:33:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medicalxpress.com/news/2024-05-ancient-viral-dna-human-genome.html">https://medicalxpress.com/news/2024-05-ancient-viral-dna-human-genome.html</a>, See on <a href="https://news.ycombinator.com/item?id=40439379">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
									    
<div data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2019/3-dna.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2019/3-dna.jpg" data-sub-html="DNA, which has a double-helix structure, can have many genetic mutations and variations. Credit: NIH">
        <figure>
            <img src="https://scx1.b-cdn.net/csz/news/800a/2019/3-dna.jpg" alt="DNA" title="DNA, which has a double-helix structure, can have many genetic mutations and variations. Credit: NIH" width="800" height="480">
             <figcaption>
                DNA, which has a double-helix structure, can have many genetic mutations and variations. Credit: NIH
            </figcaption>        </figure>
    </div><p>New research led by King's College London has found that thousands of DNA sequences originating from ancient viral infections are expressed in the brain, with some contributing to susceptibility for psychiatric disorders such as schizophrenia, bipolar disorder, and depression.</p>

                                        
                                                                                  
                                        
                                                                                                                                    <p>The work appears in <i>Nature Communications</i>.</p>
<p>About 8% of our genome is comprised of sequences called Human Endogenous Retroviruses (HERVs), which are products of ancient viral infections that occurred hundreds of thousands of years ago. Until recently, it was assumed that these "fossil viruses" were simply junk DNA, with no important function in the body. However, due to advances in genomics research, scientists have now discovered where in our DNA these fossil viruses are located, enabling us to better understand when they are expressed and what functions they may have.</p>
<p>This new study builds upon these advances and is the first to show that a set of specific HERVs expressed in the human brain contribute to psychiatric disorder susceptibility, marking a step forward in understanding the complex genetic components that contribute to these conditions.</p>
<p>Dr. Timothy Powell, co-senior author on the study and Senior Lecturer at the Institute of Psychiatry, Psychology &amp; Neuroscience (IoPPN), King's College London, said, "This study uses a novel and robust approach to assess how genetic susceptibility for psychiatric disorders imparts its effects on the expression of ancient viral sequences present in the modern human genome. Our results suggest that these viral sequences probably play a more important role in the human brain than originally thought, with specific HERV expression profiles being associated with an increased susceptibility for some psychiatric disorders."</p>

                                                                                                        <!-- Google middle Adsense block -->
    
                                                                                                                                            <p>The study analyzed data from large genetic studies involving tens of thousands of people, both with and without mental health conditions, as well as information from autopsy brain samples from 800 individuals, to explore how DNA variations linked to psychiatric disorders affect the expression of HERVs.</p>
<p>Although most genetic risk variants linked to psychiatric diagnoses impacted genes with well-known biological functions, the researchers found that some genetic risk variants preferentially affected the expression of HERVs. The researchers reported five robust HERV expression signatures associated with psychiatric disorders, including two HERVs that are associated with risk for schizophrenia, one associated with risk for both <a href="https://medicalxpress.com/tags/bipolar+disorder/" rel="tag">bipolar disorder</a> and schizophrenia, and one associated with risk for depression.</p>
<p>Dr. Rodrigo Duarte, first author and Research Fellow at the IoPPN, King's College London, said, "We know that psychiatric disorders have a substantial genetic component, with many parts of the genome incrementally contributing to susceptibility. In our study, we were able to investigate parts of the genome corresponding to HERVs, which led to the identification of five sequences that are relevant to psychiatric disorders. While it is not clear yet how these HERVs affect <a href="https://medicalxpress.com/tags/brain+cells/" rel="tag">brain cells</a> to confer this increase in risk, our findings suggest that their expression regulation is important for brain function."</p>
<p>Dr. Douglas Nixon, co-senior author on the study and and researcher at the Feinstein Institutes for Medical Research at Northwell Health, in the US, said, "Further research is needed to understand the exact function of most HERVs, including those identified in our study. We think that a better understanding of these ancient viruses, and the known genes implicated in <a href="https://medicalxpress.com/tags/psychiatric+disorders/" rel="tag">psychiatric disorders</a>, have the potential to revolutionize mental health research and lead to novel ways to treat or diagnose these conditions."</p>

                                                                                                                                                                            
                                        											<div>
												                                                    <p><strong>More information:</strong>
                                                    Integrating human endogenous retroviruses into transcriptome-wide association studies highlights novel risk factors for major psychiatric conditions, <i>Nature Communications</i> (2024). <a data-doi="1" href="https://dx.doi.org/10.1038/s41467-024-48153-z" target="_blank">DOI: 10.1038/s41467-024-48153-z</a>
																								
																								</p>
																							</div>
                                        											
																					
                                                                                                                        
                                        <!-- print only -->
                                        <div>
                                            <p><strong>Citation</strong>:
                                                 Ancient viral DNA in the human genome linked to major psychiatric disorders (2024, May 22)
                                                 retrieved 22 May 2024
                                                 from https://medicalxpress.com/news/2024-05-ancient-viral-dna-human-genome.html
                                            </p>
                                            <p>
                                            This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no
                                            part may be reproduced without the written permission. The content is provided for information purposes only.
                                            </p>
                                        </div>
                                        
									</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How and why to make a /now page on your site (203 pts)]]></title>
            <link>https://sive.rs/now2</link>
            <guid>40438960</guid>
            <pubDate>Wed, 22 May 2024 09:12:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sive.rs/now2">https://sive.rs/now2</a>, See on <a href="https://news.ycombinator.com/item?id=40438960">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<article>
<header>


<small>2024-05-18</small>
</header>

<h2>
	Background
</h2>
<p>
	I used to wonder what my friend <a href="https://en.wikipedia.org/wiki/Benny_Lewis">Benny Lewis</a> was doing.
	He has <a href="https://www.fluentin3months.com/">a website</a> and social media accounts, but neither gave <strong>an overview of what he’s doing now</strong>.
</p><p>
	Then I realized some people might wonder the same about me.
	So in 2015, I made <a href="https://sive.rs/now">a /now page</a> on my website, saying <strong>what I’d tell a friend I hadn’t seen in a year</strong>.
</p><p>
	It has a nice side-effect of being a public declaration of priorities.
	It’s a good link to give people when <a href="https://sive.rs/n">saying no</a> to invitations and distractions.
</p><p>
	Word spread, and soon <strong><a href="https://nownownow.com/">hundreds of people</a> had a /now page on their personal website</strong>.
	So I made a site to showcase them all: <strong><a href="https://nownownow.com/">nownownow.com</a></strong> — (a static site generated by <a href="https://sive.rs/pg2">PostgreSQL functions</a>.)
	It currently has over <a href="https://nownownow.com/">2300 people</a> worldwide.
	This week I added browse by location and search.
</p>
<h2>
	Got a personal website? Add a /now page
</h2>
<p>
	The three main ingredients are:
</p>
<ol><li>
	a page, usually at URL /now, linked from your main menu, usually alongside /about
</li><li>
	an overview of what’s going on with you — what you’d tell a friend you hadn’t seen in a year
</li><li>
	the date it was last updated
</li></ol>
<h2>
	WordPress instructions:
</h2>
<p>
	In the left menu, under “<strong>Pages</strong>”, click “<strong>Add New Page</strong>”.
	Then, where it says “Add title”, replace that with just three letters: <strong>now</strong>.
	That will ensure the URL is /now, and after it’s posted, you can change the title to “What I’m doing now” or whatever.
</p>
<img src="https://sive.rs/images/now-wordpress-1.png" alt="screenshot to make /now page on wordpress">
<br>
<img src="https://sive.rs/images/now-wordpress-2.png" alt="screenshot to make /now page on wordpress">
<h2>
	Wix instructions:
</h2>
<p>
	On the left, under “<strong>Site Menu</strong>”, click “<strong>+ Add Page</strong>”.
	Call it <strong>Now</strong>, next to your “About” page.
	Click the (…) to its right, then to “<strong>SEO basics</strong>”, to edit “<strong>URL slug</strong>” and make sure it’s just the three letters: now
</p>
<img src="https://sive.rs/images/now-wix-1.png" alt="screenshot to make /now page on wix">
<br>
<img src="https://sive.rs/images/now-wix-2.png" alt="screenshot to make /now page on wix">
<br>
<img src="https://sive.rs/images/now-wix-3.png" alt="screenshot to make /now page on wix">

<h2>
	No website yet? Use <a href="https://bearblog.dev/">Bear</a>
</h2>
<p>
	If you don’t have a personal website yet, I highly recommend <a href="https://bearblog.dev/">Bear</a> at <a href="https://bearblog.dev/">BearBlog.dev</a>.
	It’s so simple, clean, and free.
	The owner and creator, <a href="https://herman.bearblog.dev/">Herman in South Africa</a>, runs it himself with great love.
	And no investors so no <a href="https://en.wikipedia.org/wiki/Enshittification">enshittification</a>.
	He plans to keep it alive <a href="https://herman.bearblog.dev/building-software-to-last-forever/">forever</a>.
</p><p>
	I believe in it so much that I told Herman I would be its godfather.
	If he ever can’t (or doesn’t want to) run it anymore, I will help run it, or fund a foundation to keep it alive.
</p><p>
	To create a /now page on Bear, click “<strong>Pages</strong>”, then “<strong>New page</strong>”.
	Then, after it says “<strong>title:</strong>”, type just three letters: <strong>now</strong>.
	That will ensure the URL is /now, and after it’s posted, you can change the title to “What I’m doing now” or whatever.
</p>
<img src="https://sive.rs/images/now-bear-1.png" alt="screenshot to make /now page on bearblog.dev">
<br>
<img src="https://sive.rs/images/now-bear-2.png" alt="screenshot to make /now page on bearblog.dev">
<h2>
	Got a /now page? I’ll add you to <a href="https://nownownow.com/">nownownow.com</a>
</h2>
<p>
	Once it’s live, just <a href="https://sive.rs/contact">email me your URL</a>, and I add it (by hand) to <a href="https://nownownow.com/">nownownow.com</a>.
	(This is also a good time to say hello, if you haven’t yet. I read and reply to every email.)
</p>
<a href="http://nownownow.com/"><img alt="" src="https://sive.rs/images/nowclock.jpg"></a>


</article>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Psion 5mx Emulator (192 pts)]]></title>
            <link>https://wuffs.org/WindEmu/index.html</link>
            <guid>40438434</guid>
            <pubDate>Wed, 22 May 2024 07:56:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wuffs.org/WindEmu/index.html">https://wuffs.org/WindEmu/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=40438434">Hacker News</a></p>
<div id="readability-page-1" class="page"><hr><figure id="spinner"><center><strong>emscripten</strong></center></figure><p>Downloading...</p><div id="canvasContainer"><canvas id="canvas" oncontextmenu="event.preventDefault()" tabindex="-1"></canvas><p><img src="https://wuffs.org/WindEmu/cover.svg"></p></div><hr><hr><hr></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Alacritty – A fast, cross-platform, OpenGL terminal emulator (149 pts)]]></title>
            <link>https://github.com/alacritty/alacritty</link>
            <guid>40437535</guid>
            <pubDate>Wed, 22 May 2024 05:09:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/alacritty/alacritty">https://github.com/alacritty/alacritty</a>, See on <a href="https://news.ycombinator.com/item?id=40437535">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/alacritty/alacritty/master/extra/logo/compat/alacritty-term%2Bscanlines.png"><img width="200" alt="Alacritty Logo" src="https://raw.githubusercontent.com/alacritty/alacritty/master/extra/logo/compat/alacritty-term%2Bscanlines.png"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Alacritty - A fast, cross-platform, OpenGL terminal emulator</h2><a id="user-content-alacritty---a-fast-cross-platform-opengl-terminal-emulator" aria-label="Permalink: Alacritty - A fast, cross-platform, OpenGL terminal emulator" href="#alacritty---a-fast-cross-platform-opengl-terminal-emulator"></a></p>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/alacritty/alacritty/blob/master/extra/promo/alacritty-readme.png"><img alt="Alacritty - A fast, cross-platform, OpenGL terminal emulator" src="https://github.com/alacritty/alacritty/raw/master/extra/promo/alacritty-readme.png"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">About</h2><a id="user-content-about" aria-label="Permalink: About" href="#about"></a></p>
<p dir="auto">Alacritty is a modern terminal emulator that comes with sensible defaults, but
allows for extensive <a href="#configuration">configuration</a>. By integrating with other
applications, rather than reimplementing their functionality, it manages to
provide a flexible set of <a href="https://github.com/alacritty/alacritty/blob/master/docs/features.md">features</a> with high performance.
The supported platforms currently consist of BSD, Linux, macOS and Windows.</p>
<p dir="auto">The software is considered to be at a <strong>beta</strong> level of readiness; there are
a few missing features and bugs to be fixed, but it is already used by many as
a daily driver.</p>
<p dir="auto">Precompiled binaries are available from the <a href="https://github.com/alacritty/alacritty/releases">GitHub releases page</a>.</p>
<p dir="auto">Join <a href="https://web.libera.chat/gamja/?channels=#alacritty" rel="nofollow"><code>#alacritty</code></a> on libera.chat if you have questions or looking for a quick help.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto">You can find an overview over the features available in Alacritty <a href="https://github.com/alacritty/alacritty/blob/master/docs/features.md">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Further information</h2><a id="user-content-further-information" aria-label="Permalink: Further information" href="#further-information"></a></p>
<ul dir="auto">
<li><a href="https://jwilm.io/blog/announcing-alacritty/" rel="nofollow">Announcing Alacritty, a GPU-Accelerated Terminal Emulator</a> January 6, 2017</li>
<li><a href="https://www.youtube.com/watch?v=qHOdYO3WUTk" rel="nofollow">A talk about Alacritty at the Rust Meetup January 2017</a> January 19, 2017</li>
<li><a href="https://jwilm.io/blog/alacritty-lands-scrollback/" rel="nofollow">Alacritty Lands Scrollback, Publishes Benchmarks</a> September 17, 2018</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Alacritty can be installed by using various package managers on Linux, BSD,
macOS and Windows.</p>
<p dir="auto">Prebuilt binaries for macOS and Windows can also be downloaded from the
<a href="https://github.com/alacritty/alacritty/releases">GitHub releases page</a>.</p>
<p dir="auto">For everyone else, the detailed instructions to install Alacritty can be found
<a href="https://github.com/alacritty/alacritty/blob/master/INSTALL.md">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Requirements</h3><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>At least OpenGL ES 2.0</li>
<li>[Windows] ConPTY support (Windows 10 version 1809 or higher)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuration</h2><a id="user-content-configuration" aria-label="Permalink: Configuration" href="#configuration"></a></p>
<p dir="auto">You can find the documentation for Alacritty's configuration in <code>man 5 alacritty</code>, or by looking at <a href="https://alacritty.org/config-alacritty.html" rel="nofollow">the website</a> if you do not have the manpages
installed.</p>
<p dir="auto">Alacritty doesn't create the config file for you, but it looks for one in the
following locations:</p>
<ol dir="auto">
<li><code>$XDG_CONFIG_HOME/alacritty/alacritty.toml</code></li>
<li><code>$XDG_CONFIG_HOME/alacritty.toml</code></li>
<li><code>$HOME/.config/alacritty/alacritty.toml</code></li>
<li><code>$HOME/.alacritty.toml</code></li>
</ol>
<p dir="auto">On Windows, the config file will be looked for in:</p>
<ul dir="auto">
<li><code>%APPDATA%\alacritty\alacritty.toml</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">A guideline about contributing to Alacritty can be found in the
<a href="https://github.com/alacritty/alacritty/blob/master/CONTRIBUTING.md"><code>CONTRIBUTING.md</code></a> file.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">FAQ</h2><a id="user-content-faq" aria-label="Permalink: FAQ" href="#faq"></a></p>
<p dir="auto"><strong><em>Is it really the fastest terminal emulator?</em></strong></p>
<p dir="auto">Benchmarking terminal emulators is complicated. Alacritty uses
<a href="https://github.com/alacritty/vtebench">vtebench</a> to quantify terminal emulator
throughput and manages to consistently score better than the competition using
it. If you have found an example where this is not the case, please report a
bug.</p>
<p dir="auto">Other aspects like latency or framerate and frame consistency are more difficult
to quantify. Some terminal emulators also intentionally slow down to save
resources, which might be preferred by some users.</p>
<p dir="auto">If you have doubts about Alacritty's performance or usability, the best way to
quantify terminal emulators is always to test them with <strong>your</strong> specific
usecases.</p>
<p dir="auto"><strong><em>Why isn't feature X implemented?</em></strong></p>
<p dir="auto">Alacritty has many great features, but not every feature from every other
terminal. This could be for a number of reasons, but sometimes it's just not a
good fit for Alacritty. This means you won't find things like tabs or splits
(which are best left to a window manager or <a href="https://github.com/tmux/tmux">terminal multiplexer</a>) nor
niceties like a GUI config editor.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Alacritty is released under the <a href="https://github.com/alacritty/alacritty/blob/master/LICENSE-APACHE">Apache License, Version 2.0</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["No way to prevent this" say users of only language where this regularly happens (195 pts)]]></title>
            <link>https://xeiaso.net/shitposts/no-way-to-prevent-this/CVE-2024-4323/</link>
            <guid>40437379</guid>
            <pubDate>Wed, 22 May 2024 04:36:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xeiaso.net/shitposts/no-way-to-prevent-this/CVE-2024-4323/">https://xeiaso.net/shitposts/no-way-to-prevent-this/CVE-2024-4323/</a>, See on <a href="https://news.ycombinator.com/item?id=40437379">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article>
    
    <p>
        Published on <time datetime="2024-05-21">05/21/2024</time>, 232 words, 1 minutes to read
    </p>

    

    
        
    

    

    

    
        <figure><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/hero/sad-business-man.avif"><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/hero/sad-business-man.webp"><img alt="An image of A forlorn business man resting his head on a brown wall next to a window." loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/hero/sad-business-man.jpg"></picture></figure>
        <small>A forlorn business man resting his head on a brown wall next to a window. - Photo by Andrea Piacquadio, source: Pexels</small>
    

    <p>In the hours following the release of <a href="https://www.tenable.com/security/research/tra-2024-17">CVE-2024-4323</a> for the project <a href="https://fluentbit.io/">Fluent Bit</a>, site reliability workers
and systems administrators scrambled to desperately rebuild and patch all their systems to fix a vulnerability in HTTP parsing code that allows for heap corruption and arbitrary code execution by making a HTTP GET request with a megabyte of the letter 'A' in its body. This is due to the affected components being
written in C, the only programming language where these vulnerabilities regularly happen. "This was a terrible tragedy, but sometimes
these things just happen and there's nothing anyone can do to stop them," said programmer Prince Marcel O'Keefe, echoing statements
expressed by hundreds of thousands of programmers who use the only language where 90% of the world's memory safety vulnerabilities have
occurred in the last 50 years, and whose projects are 20 times more likely to have security vulnerabilities. "It's a shame, but what can
we do? There really isn't anything we can do to prevent memory safety vulnerabilities from happening if the programmer doesn't want to
write their code in a robust manner." At press time, users of the only programming language in the world where these vulnerabilities
regularly happen once or twice per quarter for the last eight years were referring to themselves and their situation as "helpless."</p>


    <hr>

    

    

    <p>Facts and circumstances may have changed since publication. Please contact me before jumping to conclusions if something seems wrong or unclear.</p>

    <p>Tags: </p>
</article>
        </div><div>
            <p>Copyright 2012-2024 Xe Iaso (Christine Dodrill). Any and all opinions listed here are my own and
                not representative of any of my employers, past, future, and/or present.</p>
            
            <p>Served by xesite v4 (/nix/store/lq13hrw9dczjbk4miixwz5w14s3737cc-xesite_v4-20240510/bin/xesite) with site version 
                        <a href="https://github.com/Xe/site/commit/7e2e630284d18bb633bec873b9eedd0cd6dc08c1">7e2e6302</a>
                    , source code available <a href="https://github.com/Xe/site">here</a>.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scandal at America's top science fair (267 pts)]]></title>
            <link>https://www.karlstack.com/p/exclusive-scandal-at-americas-top</link>
            <guid>40436651</guid>
            <pubDate>Wed, 22 May 2024 02:09:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.karlstack.com/p/exclusive-scandal-at-americas-top">https://www.karlstack.com/p/exclusive-scandal-at-americas-top</a>, See on <a href="https://news.ycombinator.com/item?id=40436651">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>The Regeneron International Science and Engineering Fair (ISEF) is the world’s largest and most prestigious science fair. ISEF 2024 took place last week (May 11-17) at the Los Angeles Convention Center. </p><ul><li><p><a href="https://www.societyforscience.org/isef/" rel="">https://www.societyforscience.org/isef/</a></p></li></ul><p><span>Krish Pai won first place in the environmental engineering division, which came with a prize of $55,000 and the </span><em>Regeneron Young Scientist Award</em><span>.</span></p><p>Pai cheated.</p><div id="youtube2-JIRb2SGqC-U" data-attrs="{&quot;videoId&quot;:&quot;JIRb2SGqC-U&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/JIRb2SGqC-U?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p><strong><a href="https://c212.net/c/link/?t=0&amp;l=en&amp;o=4170139-1&amp;h=1979417570&amp;u=https%3A%2F%2Fprojectboard.world%2Fisef%2Fproject%2Fenev081-efficiently-discovering-plastic-degrading-microbes&amp;a=Krish+Pai" rel="">Krish Pai</a></strong><span>, 17, of Del Mar, California, received the second Regeneron Young Scientist Award of $50,000 for his machine-learning research to identify microbial genetic sequences that can be modified to biodegrade plastic. His new software, called Microby, scans databases of microorganisms and determines which ones can be changed genetically to biodegrade plastics. In tests, he identified two microorganisms that can be genetically modified to degrade plastic at a cost he believes would be ten times less than traditional recycling.</span></p><div data-attrs="{&quot;url&quot;:&quot;https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><p>Thank you for reading Karlstack. This post is public so feel free to share it.</p><p data-attrs="{&quot;url&quot;:&quot;https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a href="https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div><p>Pai is an intern at the University of Southern California. </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png" width="782" height="297" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:297,&quot;width&quot;:782,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:&quot;&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I had reservations about writing on a 17-year-old, so I consulted with a few more senior journalists to discuss the ethical considerations.</p><blockquote><p>Of course it's worth covering, major media outlets, like CNN cover science fairs all the time. 17 is old enough to get charged as an adult in every jurisdiction. Egregious conduct by 17 year olds is not excusable. Important to bust this for several reasons, one of which is that he's clearly on the fast track to a high level gig in neuroscience. Can we investigate this? If you won't, we will.</p><p>— Anonymous journalist </p><p>It's completely fine to publish on this. It's a big award, a prestigious organization—but you might angle it against the org, which allowed this to pass its process.</p><p>— Anonymous journalist </p><p>Think of all the other kids who got fucked over.</p><p>— Anonymous journalist </p></blockquote><p>Plus, he is already outed extensively on Reddit, Twitter, and via a Google Doc currently circulating that thousands of people have seen. This anonymous Google Docs dossier is the source of my article and is signed by, ‘‘ISEF 2024 and future competitors, ISEF &amp; Society for Science alums, Concerned researchers.’’</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png" width="700" height="275" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:242,&quot;width&quot;:616,&quot;resizeWidth&quot;:700,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png" width="546" height="240.05172413793105" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:204,&quot;width&quot;:464,&quot;resizeWidth&quot;:546,&quot;bytes&quot;:30699,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png" width="538" height="195.22362869198312" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/df6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:172,&quot;width&quot;:474,&quot;resizeWidth&quot;:538,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png" width="547" height="414.14004376367615" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:346,&quot;width&quot;:457,&quot;resizeWidth&quot;:547,&quot;bytes&quot;:36545,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png" width="628" height="126.8313725490196" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:103,&quot;width&quot;:510,&quot;resizeWidth&quot;:628,&quot;bytes&quot;:12996,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png" width="591" height="136" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:136,&quot;width&quot;:591,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:14570,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png" width="609" height="321" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e129c275-9c99-437e-babf-b62c41258663_609x321.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:321,&quot;width&quot;:609,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:42320,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png" width="589" height="240.35959595959596" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:202,&quot;width&quot;:495,&quot;resizeWidth&quot;:589,&quot;bytes&quot;:21711,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png" width="595" height="428" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:428,&quot;width&quot;:595,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:44748,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png" width="595" height="143.3582089552239" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:113,&quot;width&quot;:469,&quot;resizeWidth&quot;:595,&quot;bytes&quot;:12244,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>You can download the dossier here:</p><p>As per the dossier: </p><blockquote><p>The ISEF winner student uses the following image as a key claim of the 100% plastic degraded in their presentation and more:</p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png" width="592" height="340.5857740585774" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:275,&quot;width&quot;:478,&quot;resizeWidth&quot;:592,&quot;bytes&quot;:129688,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><span>However, the image boxed in red above is a </span><strong>falsified image</strong><span> taken from online, and has had mirroring performed in the hopes that no one would notice.</span></p><p><span>The original image can be found here: </span><a href="https://www.mci.edu/en/news-filter-en/228-researchnews/4728-microorganisms-can-degrade-plastics" rel="">https://www.mci.edu/en/news-filter-en/228-researchnews/4728-microorganisms-can-degrade-plastics</a><span> and is from a European University Ulysseus lab testing </span><em><span>Ideonella sakaiensis</span><strong>,</strong></em><span> a completely different organism than the one the Regeneron ISEF finalist used.</span></p><p><span>The ISEF finalist </span><strong>very clearly labels</strong><span> the figure as: ‘‘Plastic degraded by discovered microbes’’, which is clearly false - a clear cut case of fraud.</span><strong> The ISEF Finalist is taking other people’s data for completely different research projects, and claiming it as their own.</strong></p></blockquote><p><strong><a href="https://www.mci.edu/en/news-filter-en/228-researchnews/4728-microorganisms-can-degrade-plastics" rel="">Original image from European University Ulysseus lab:</a></strong></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png" width="637" height="391.53664302600475" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:260,&quot;width&quot;:423,&quot;resizeWidth&quot;:637,&quot;bytes&quot;:136230,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p>The ISEF finalist flipped the image to generate the below image shown on their poster, presentation, etc:</p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png" width="656" height="314.9380530973451" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:217,&quot;width&quot;:452,&quot;resizeWidth&quot;:656,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p>If you compare the shapes of the plastics as seen above, you will quickly notice the Regeneron ISEF Finalist’s figure is a mirror image of the past published image! This is blatant data fabrication and research fraud.&nbsp;</p><p>The image was not only altered by mirroring it, but was combined with another image by the finalist. This goes to show this is not an accident — the Regeneron ISEF finalist intentionally manipulated the image to play it off as their own creation and result. They also placed an image of themself right next to this result, making it seem like it was their own data.</p></blockquote><p>In the spotting-academic-fraud business, we call this a slam dunk.</p><p>But there’s more.</p><blockquote><p>The researcher also steals the wavelength vs reflectivity plot as shown (top right), making it seem like it came from their data:</p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png" width="551" height="397.5893271461717" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cc86839a-dac3-4540-954a-a4101c2603f5_431x311.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:311,&quot;width&quot;:431,&quot;resizeWidth&quot;:551,&quot;bytes&quot;:71570,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>From the ISEF finalist’s ProjectBoard, the figure in question is in the top right.</em></figcaption></figure></div><blockquote><p>This figure is right next to a picture of themself to make it seem like it was their own collection and creation.</p><p><strong>Original source by Zhu et al., 2019:</strong></p><p><a href="https://www.researchgate.net/publication/332378632_Plastic_Solid_Waste_identification_system_based_on_Near_Infrared_Spectroscopy_in_combination_with_support_vector_machine" rel="">(PDF) Plastic Solid Waste identification system based on Near Infrared Spectroscopy in combination with support vector machine</a></p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png" width="648" height="531" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:413,&quot;width&quot;:504,&quot;resizeWidth&quot;:648,&quot;bytes&quot;:79262,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>And much more. </p><p>The dossier thoroughly documents numerous additional instances of theft of figures, exaggerated claims of novelty, misappropriation of a previous researcher's device, plagiarism, citation fraud, similarities to past winning ISEF projects, and potential scientific inaccuracies. It’s a brutal takedown. I find this evidence highly compelling; however, I am not including it all in my article to save space. </p><p>I strongly encourage you to read the dossier yourself:</p><p>Here's another example of a stolen image. This appeared in Pai’s slide and research paper; he claimed to have built a near infrared spectrometer: </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png" width="483" height="549.2468827930174" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a4384119-2591-4419-ad61-81c7accd21c5_401x456.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:456,&quot;width&quot;:401,&quot;resizeWidth&quot;:483,&quot;bytes&quot;:149249,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>This image was taken from a Rasberry Pi article </span><a href="https://www.raspberrypi.com/news/award-winning-plastic-scanner/" rel="">from 2021</a><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png" width="536" height="459.6269430051814" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9efae948-747c-4be7-977f-8baab3bc4241_386x331.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:331,&quot;width&quot;:386,&quot;resizeWidth&quot;:536,&quot;bytes&quot;:115962,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><span>[Pai] </span><strong>does not give any credit </strong><span>to the original creator of the device, or its images and acts like they “built a custom sensor” and “developed [the] tool.” </span><strong>This is very clearly an attempt to conceal the original creator …&nbsp;it is clear that the finalist did not actually build the device, and faked this part completely.</strong></p></blockquote><p>These actions, while serious, should not define Pai’s entire life. Everyone makes mistakes — Lord knows I did plenty of stupid, immoral things when I was 17 — and there is always the opportunity for growth and redemption. I sincerely hope that Pai repents and strives to become a more ethical person. In my view, he should still have the opportunity to attend a good university and build a long, accomplished career.</p><p>However, his award should be revoked. The current situation is unfair to the other participants. The fraud is clear. The $55,000 prize should be given to the runner-up.</p><p>This case highlights a significant oversight failure by the world's most prestigious science fair. The responsibility now lies with The International Science and Engineering Fair to take action and issue a statement.</p><p>I anticipate that the mainstream media will cover this story later this week.</p><p>Expect to see this story on CNN soon.</p><p data-attrs="{&quot;url&quot;:&quot;https://www.karlstack.com/p/exclusive-scandal-at-americas-top/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.karlstack.com/p/exclusive-scandal-at-americas-top/comments" rel=""><span>Leave a comment</span></a></p><p data-attrs="{&quot;url&quot;:&quot;https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tillywork: Open-Source Work Management (112 pts)]]></title>
            <link>https://github.com/tillywork/tillywork</link>
            <guid>40436560</guid>
            <pubDate>Wed, 22 May 2024 01:54:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/tillywork/tillywork">https://github.com/tillywork/tillywork</a>, See on <a href="https://news.ycombinator.com/item?id=40436560">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">tillywork</h2><a id="user-content-tillywork" aria-label="Permalink: tillywork" href="#tillywork"></a></p>
<p dir="auto"><a href="https://tilly.work/" rel="nofollow"><img src="https://camo.githubusercontent.com/0263e2a3b1f7707cce4bd29b16d2598a10e6c7f75ce82a33571b1c80018519d6/68747470733a2f2f63646e2e74696c6c792e776f726b2f6769746875622e706e67" alt="tillywork logo" data-canonical-src="https://cdn.tilly.work/github.png"></a></p>
<p dir="auto">Welcome to <strong>tillywork</strong>—an open-source work management platform tailored for dynamic teams.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Modules</h2><a id="user-content-modules" aria-label="Permalink: Modules" href="#modules"></a></p>
<p dir="auto">tillywork addresses a variety of team requirements through three dedicated modules:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">1. Project Management</h3><a id="user-content-1-project-management" aria-label="Permalink: 1. Project Management" href="#1-project-management"></a></p>
<p dir="auto">Manage timelines, allocate resources, and monitor deliverables for your projects.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">2. Sales CRM (Coming next)</h3><a id="user-content-2-sales-crm-coming-next" aria-label="Permalink: 2. Sales CRM (Coming next)" href="#2-sales-crm-coming-next"></a></p>
<p dir="auto">Customer relationship management, sales tracking, and performance analysis.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">3. Agile Projects (Coming soon)</h3><a id="user-content-3-agile-projects-coming-soon" aria-label="Permalink: 3. Agile Projects (Coming soon)" href="#3-agile-projects-coming-soon"></a></p>
<p dir="auto">Product roadmaps, sprint planning, and issue tracking.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li><strong>Open Source</strong>: Customize and extend tillywork as per your specific needs.</li>
<li><strong>Comprehensive Toolset</strong>: Possesses a range of tools covering project oversight, sales management, and issue resolution.</li>
<li><strong>Intuitive User Interface</strong>: Features a straightforward, user-friendly interface (Material 3 anyone?)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contact</h2><a id="user-content-contact" aria-label="Permalink: Contact" href="#contact"></a></p>
<p dir="auto">For further details and support, please visit <a href="https://tilly.work/" rel="nofollow">our website</a> or join <a href="https://discord.gg/Ttn4WeNJbb" rel="nofollow">our Discord</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting started" href="#getting-started"></a></p>
<ul dir="auto">
<li>Clone the repository <code>git clone https://github.com/tillywork/tillywork.git</code></li>
<li>Install Postgres on your device</li>
<li>Install dependancies <code>npm install</code></li>
<li>Copy .env.example and rename to .env <code>cp .env.example .env</code> and update the values</li>
<li>Run the app <code>npm run dev</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">We invite contributions to tillywork! If you have ideas for bug fixes, enhancements, or documentation improvements, please fork the repository and create a pull request.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">tillywork is available under the <a href="https://github.com/tillywork/tillywork/blob/main/LICENSE">MIT License</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Road to Common Lisp (2018) (222 pts)]]></title>
            <link>https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/</link>
            <guid>40435771</guid>
            <pubDate>Tue, 21 May 2024 23:59:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/">https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/</a>, See on <a href="https://news.ycombinator.com/item?id=40435771">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-blog-entry"><article><p>Posted on August 27th, 2018.</p><p>I've gotten a bunch of emails asking for advice on how to learn Common Lisp in
the present day.  I decided to write down all the advice I've been giving
through email and social media posts in the hopes that someone might find it
useful.</p>

<p>One disclaimer up front: this is <em>a</em> road to Common Lisp, not <em>the</em> road to
Common Lisp.  It's what I followed (without some of the dead ends) and has
a <em>lot</em> of my personal opinions baked in, but it is by no means the only way to
learn the language.</p>

<p>This post has been translated into
<a href="https://gist.github.com/y2q-actionman/49d7587912b2786eb68643afde6ca192">Japanese</a>.
I can't vouch for the accuracy of any translations.</p>

<ol><li><a href="#s1-context">Context</a><ol><li><a href="#s2-history">History</a></li><li><a href="#s3-consequences">Consequences</a><ol><li><a href="#s4-escaping-the-hamster-wheel-of-backwards-incompatibility">Escaping the Hamster Wheel of Backwards Incompatibility</a></li><li><a href="#s5-practicality-begets-purity">Practicality Begets Purity</a></li><li><a href="#s6-extensibility">Extensibility</a></li><li><a href="#s7-power">Power</a></li><li><a href="#s8-ugliness">Ugliness</a></li></ol></li></ol></li><li><a href="#s9-a-road-to-learning-common-lisp">A Road to Learning Common Lisp</a><ol><li><a href="#s10-get-a-lisp">Get a Lisp</a></li><li><a href="#s11-pick-an-editor">Pick an Editor</a></li><li><a href="#s12-hello-lisp">Hello, Lisp</a></li><li><a href="#s13-a-gentle-introduction">A Gentle Introduction</a></li><li><a href="#s14-getting-practical">Getting Practical</a></li><li><a href="#s15-make-something">Make Something</a></li><li><a href="#s16-lisp-as-a-system">Lisp as a System</a></li><li><a href="#s17-learning-paradigms">Learning Paradigms</a></li><li><a href="#s18-switch-things-up">Switch Things Up</a></li><li><a href="#s19-recipes-for-success">Recipes for Success</a></li><li><a href="#s20-final-patterns">Final Patterns</a></li></ol></li><li><a href="#s21-where-to-go-from-here">Where to Go From Here</a><ol><li><a href="#s22-macros">Macros</a></li><li><a href="#s23-object-oriented-programming-with-clos">Object-Oriented Programming with CLOS</a></li><li><a href="#s24-low-level-programming">Low-Level Programming</a></li><li><a href="#s25-web-development">Web Development</a></li><li><a href="#s26-game-development">Game Development</a></li><li><a href="#s27-window-management">Window Management</a></li><li><a href="#s28-unit-testing">Unit Testing</a></li><li><a href="#s29-more-implementations">More Implementations</a></li></ol></li><li><a href="#s30-modern-common-lisp">Modern Common Lisp</a><ol><li><a href="#s31-structure">Structure</a><ol><li><a href="#s32-packages">Packages</a></li><li><a href="#s33-systems">Systems</a></li><li><a href="#s34-projects">Projects</a></li><li><a href="#s35-recap">Recap</a></li></ol></li><li><a href="#s36-common-libraries">Common Libraries</a><ol><li><a href="#s37-alexandria">Alexandria</a></li><li><a href="#s38-bordeaux-threads">Bordeaux Threads</a></li><li><a href="#s39-cffi">CFFI</a></li><li><a href="#s40-cl-ppcre">CL-PPCRE</a></li><li><a href="#s41-drakma">Drakma</a></li><li><a href="#s42-iterate">Iterate</a></li><li><a href="#s43-local-time">local-time</a></li><li><a href="#s44-lparallel">lparallel</a></li><li><a href="#s45-named-readtables">Named Readtables</a></li><li><a href="#s46-roswell">Roswell</a></li><li><a href="#s47-series">SERIES</a></li><li><a href="#s48-st-json">st-json</a></li><li><a href="#s49-usocket">usocket</a></li></ol></li></ol></li><li><a href="#s50-good-luck">Good Luck!</a></li></ol>

<h2 id="s1-context"><a href="#s1-context">Context</a></h2>

<p>I think it's important to have a sense of where Common Lisp came from and what
kind of a language it is before you start learning it.  There are some things
that will seem very strange if you're coming straight from modern languages,
but will make more sense if you've got a bit of background context.</p>

<h3 id="s2-history"><a href="#s2-history">History</a></h3>

<p>Common Lisp has a long, deep history.  I'm not going to try to cover it all here
— if you're interested you should check out some of the following (in roughly
increasing order of detail):</p>

<ul>
<li>Wikipedia's <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)#History">History of Lisp</a> and <a href="https://en.wikipedia.org/wiki/Common_Lisp#History">History of Common Lisp</a>.</li>
<li>The <a href="http://www.gigamonkeys.com/book/introduction-why-lisp.html#where-it-began">Where it Began section in Practical Common Lisp</a>.</li>
<li>The <a href="https://www.cs.cmu.edu/Groups//AI/lang/lisp/faq/lisp_2.faq">History: Where did Lisp come from?</a> section of the comp.lang.lisp FAQ.</li>
<li><a href="http://www.nhplace.com/kent/Papers/cl-untold-story.html">Common Lisp: the Untold Story</a> by Kent Pitman.</li>
<li><a href="https://www.dreamsongs.com/Files/HOPL2-Uncut.pdf">The Evolution of Lisp</a> by Guy Steele and Richard Gabriel.</li>
</ul>

<p>I realize you probably won't want to read all of the links above immediately, so
here's a whirlwind tour of sixty years of Lisp.</p>

<p>Lisp began in the late 1950's.  It was invented by John McCarthy at MIT.</p>

<p>Over the next twenty or so years various versions and dialects of Lisp grew and
flourished.  Some of the more notable dialects were Maclisp, BBN Lisp/Interlisp,
Franz Lisp, Spice Lisp, and Lisp Machine Lisp.  There were others too.  The
point is that there were a <em>lot</em> of different implementations, all growing,
changing, and trying out different things.</p>

<p>(Scheme also originated in this time frame, but took a very different route and
diverged from the path we're looking at.  I won't cover Scheme in this post.)</p>

<p>In the early 1980s people decided that having a whole slew of
mutually-incompatible dialects of Lisp might be not be ideal.  An effort was
made to take these different languages that had grown organically and produce
one common language that would satisfy the needs of everyone (or at least
a reasonable subset of "everyone").  In 1984 the first edition of Guy Steele's
<a href="https://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html">Common Lisp: the Language</a> was published.</p>

<p>If you do some math you'll see that at the time the book was published Lisp had
around twenty-five years of real-world use, experimentation, experience, and
history to draw upon.  Even so, the book alone didn't quite satisfy everyone and
in 1986 a committee (X3J13) was formed to produce an ANSI specification for
Common Lisp.</p>

<p>While the committee worked on the standardization process, in 1990 the second
edition of Common Lisp: the Language was published.  This was more
comprehensive and contained some of the things the committee was working on
(see the comp.lang.lisp FAQ linked above for more on this).  At this point the
Lisp family of languages had over thirty years of experience and history to
draw upon.  For comparison: Python (a "modern" language many people think of as
also being "kind of old") <a href="https://en.wikipedia.org/wiki/History_of_Python#Early_history">was released</a> for the first time the
following year.</p>

<p>In 1992 the X3J13 committee published the first draft of the new Common Lisp
ANSI standard for public review (see Pitman's paper).  The draft was approved in
1994 and the approved specification was finally published in 1995.  At this
point Lisp was over thirty-five years old.  The first version of Ruby <a href="https://en.wikipedia.org/wiki/Ruby_(programming_language)#First_publication">was
released</a> in December of that year.</p>

<p>That's the end of the history lesson.  There has not been another revision of
the ANSI specification of Common Lisp.  The version published in 1995 is the one
that is still used today — if you see something calling itself "an
implementation of Common Lisp" today, that is the specification it's referring
to.</p>

<h3 id="s3-consequences"><a href="#s3-consequences">Consequences</a></h3>

<p>I wanted to give you a quick overview of the history of Common Lisp because I
want you to know what you're getting yourself into.  I want you to realize that
Common Lisp is a stable, large, practical, extensible, ugly language.
Understanding these characteristics will make a lot of things make more sense
as you learn the language, and I want to talk a little bit more about each of
them before I start offering recommendations.</p>

<h4 id="s4-escaping-the-hamster-wheel-of-backwards-incompatibility"><a href="#s4-escaping-the-hamster-wheel-of-backwards-incompatibility">Escaping the Hamster Wheel of Backwards Incompatibility</a></h4>

<p>If you're coming from other languages, you're probably used to things breaking
when you "upgrade" your language implementation and/or libraries.  If you want
to run Ruby code you wrote ten years ago on the latest version of Ruby, it's
probably going to take some effort to update it.  My current day job is in Scala,
and if a library's last activity is more than 2 or 3 years old on Github I just
assume it won't work without a significant amount of screwing around on my part.
The Hamster Wheel of Backwards Incompatibility we deal with every day is a fact
of life in most modern languages, though some are certainly better than others.</p>

<p>If you learn Common Lisp, this is usually not the case.  In the next section of
this post I'll be recommending a book written in 1990.  You can run its code,
unchanged, in a Common Lisp implementation released last month.  After years of
jogging on the Hamster Wheel of Backwards Incompatibility I cannot tell you how
much of a <em>relief</em> it is to be able to write code and reasonably expect it to
still work in twenty years.</p>

<p>Of course, this is only the case for the language itself — if you depend on any
libraries there's always the chance they might break when you update them.  But
I've found the stability of the core language is contagious, and overall the
Common Lisp community seems fairly good about maintaining backwards
compatibility.</p>

<p>I'll be honest though: there are exceptions.  As you learn the language and
start using libraries you'll start noticing some library authors who don't
bother to document and preserve stable APIs for their libraries, and if
staying off the Hamster Wheel is important to you you'll learn to avoid relying
on code written by those people as much as possible.</p>

<h4 id="s5-practicality-begets-purity"><a href="#s5-practicality-begets-purity">Practicality Begets Purity</a></h4>

<p>Another thing to understand about Common Lisp is that it's a large, practical
language.  The second edition of Common Lisp: the Language (usually abbreviated
as "CLtL2" by Common Lisp programmers) is 971 pages long, not including the
preface, references, or index.  You can get a surprising amount done by writing
pure Common Lisp without much extra support.</p>

<p>When programming applications in Common Lisp people will often depend on
a small(ish) number of stable libraries, and library writers often try to
minimize dependencies by utilizing as much of the core language as possible.
I try to stick to fewer than ten or so dependencies for my applications and no
more than two or three for my libraries (preferably zero, if possible), but I'm
probably a bit more conservative than most folks.  I <em>really</em> don't like the
Hamster Wheel.</p>

<p>It's also worth noting that since Common Lisp has been around and stable for so
long, it has <em>libraries</em> older and more stable than many programming languages.
For example: Bordeaux Threads (the de-facto threading library for Common Lisp)
was first proposed in 2004 and released soon after (2006 at the latest but
possibly earlier, it's hard to tell because so many links are dead now), which
makes it about fourteen years old.  So yes, threading is handled by a library,
but I'm not worried about it breaking my code in the next decade or two.</p>

<p>My advice is this: as you learn Common Lisp and look for libraries, try to
suppress the voice in the back of your head that says "This project was last
updated six years ago?  That's probably abandoned and broken."  The stability of
Common Lisp means that sometimes libraries can just be <em>done</em>, not <em>abandoned</em>,
so don't dismiss them out of hand.</p>

<h4 id="s6-extensibility"><a href="#s6-extensibility">Extensibility</a></h4>

<p>Part of Common Lisp's practicality comes from its extensibility.  No one has
been clamoring for a new version of the specification that adds features
because Common Lisp's extensibility allows users to add new features to the
language as plain old libraries, without having to alter the core language.
Macros are what might come to mind when you hear "Lisp extensibility", and of
course that's part of it.  Macros allow users to write libraries that would
need to be core language features in other languages.</p>

<p>Common Lisp doesn't include string interpolation.  You want it?  No problem, you
don't have to wait for <a href="https://docs.scala-lang.org/overviews/core/string-interpolation.html">Scala
2.10</a> or
<a href="https://www.python.org/dev/peps/pep-0498/">Python 3.6</a>, just <a href="https://edicl.github.io/cl-interpol/">use
a library</a>.</p>

<p>Want to try some nondeterministic programming without any boilerplate?  <a href="https://nikodemus.github.io/screamer/">Grab
a library</a>.</p>

<p>Pattern matching syntax can make for some really beautiful, readable code.
Common Lisp doesn't include it, but of course <a href="https://github.com/guicho271828/trivia/wiki/What-is-pattern-matching%3F-Benefits%3F">there's a library</a>.</p>

<p>Enjoying algebraic data types in Haskell or Scala?  Here's your
<a href="https://github.com/tarballs-are-good/cl-algebraic-data-type">library</a>.</p>

<p>All of these libraries rely on macros to make using them feel seamless.  Of
course you could <em>do</em> all of that without macros, but you've have to add a layer
of boilerplate to manage evaluation.  This:</p>

<pre><code>(match foo
  '(list x y z) (lambda (x y z) (+ x y z))
  '(vector x y) (lambda (x y) (- x y)))
</code></pre>

<p>just doesn't flow off the fingers like:</p>

<pre><code>(match foo
  ((list x y z) (+ x y z))
  ((vector x y) (- x y)))
</code></pre>

<p>No one's up in arms trying to get a new revision of the Common Lisp standard to
add pattern matching because you can write it as a library and get 90% or more
of what you've get if it were built in.  The language gives you enough power to
extend it in a way that feels like the extension was there from the beginning.</p>

<p>Having things that are core features in other languages be provided by libraries
might seem at odds with the previous section about minimizing dependencies, and
to some extent that's true.  But I think there's a happy medium where you can
write stable libraries in the core language and then depend on a small number of
those libraries in your applications to add exactly the features you need for
any particular problem.</p>

<h4 id="s7-power"><a href="#s7-power">Power</a></h4>

<p>Macros are one of the things that make Lisp so extensible, because they let you
transform arbitrary code into other arbitrary code.  This is true for macros in
languages like C too, but Common Lisp macros are different because they're <em>part
of the language</em>.</p>

<p>In C you have a layer of macros on top, written in a preprocessor macro
language.  The macro layer and the language layer are separate from each other,
with the macro layer providing one one extra level of abstractive power (which,
don't get me wrong, is certainly useful).</p>

<p>In Common Lisp, you write macros <em>in Common Lisp itself</em>.  You can then use
those macros to write functions, and use those functions to write more macros.
Instead of two stratified layers it's a <em>feedback loop</em> of abstractive power.</p>

<p>But macros aren't the only thing about Common Lisp that make it so practical and
extensible.  Something people often don't realize is that while Common Lisp is
an extremely high-level language thanks to macros, it also has plenty of
low-level facilities as part of the language.  It's never going to be as
low-level as something like C, Rust, or Forth, but you might be surprised at
some of the things that the ANSI spec includes.</p>

<p>Want to see the assembly code a particular function compiles down to?
<a href="http://clhs.lisp.se/Body/f_disass.htm"><code>DISASSEMBLE</code></a> it!</p>

<p>Want to stack-allocate something to avoid some garbage collection?  X3J13
<a href="http://clhs.lisp.se/Body/d_dynami.htm">thought of that</a>.</p>

<p>Need arrays of unboxed floats to ship to a graphics card?  <a href="http://clhs.lisp.se/Body/15_ab.htm">The standard allows
for that</a>.</p>

<p>Think <code>GOTO</code> should be considered helpful, not harmful?  Well, okay, we're all
adults here.  <a href="http://clhs.lisp.se/Body/s_tagbod.htm">Good luck</a>, try not to shoot your foot off.</p>

<p>Need to do unsigned 8-bit arithmetic in your Game Boy emulator, but would prefer
it to compile down to just a machine instruction or two?  <a href="https://pdfs.semanticscholar.org/7089/0eff0e93aba49174a9346731f4bf9225706d.pdf">It's
possible</a>.</p>

<p>Not all Common Lisp implementations actually perform all these optimizations,
but the designers of Common Lisp had the foresight to include the language
features needed to support them.  You can write vanilla Common Lisp as defined
by the standard and trust that it will run everywhere, and implementations that
<em>do</em> support these kinds of things will take advantage of the optimization
opportunities.</p>

<p>This combination of supporting extremely high-level programming with macros and
a reasonable amount of low-level optimization mean that even though the
specification is over twenty years old, it's still a good solid base to build on
today.  The thirty years of experience and history the designers were drawing
from allowed them to create a very practical language that has survived for
decades.</p>

<h4 id="s8-ugliness"><a href="#s8-ugliness">Ugliness</a></h4>

<p>It's also important to realize that while Common Lisp might be very practical,
the need to accommodate existing users and dialects means that there are plenty
of ugly parts.  If you buy a paper copy of the second edition of Common Lisp:
the Language and look up "kludges" in the index you'll find this:</p>

<p><a href="https://stevelosh.com/static/images/blog/2018/07/lisp-kludge.jpeg"><img src="https://stevelosh.com/static/images/blog/2018/07/lisp-kludge.jpeg" alt="Photo of a page of CLtL2's Index, listing &quot;kludges&quot; as pages 1 to 971"></a></p>

<p>Common Lisp is not a beautiful crystal of programming language design.  It's
a scruffy workshop with a big pegboard wall of tools, a thin layer of sawdust on
the floor, a filing cabinet in the office with a couple of drawers that open
perpendicular to the rest, and there's a weird looking saw with <code>RPLACD</code> written
on the side sitting off in a corner where no one's touched it for twenty years.</p>

<p>This historical baggage is a price paid to ensure Common Lisp had a future.  It
made it practical for people using the old dialects to actually adopt Common
Lisp with a reasonable amount of effort.  If the designers had tried to make it
perfect and beautiful this could have made it too different to port
implementations and code to and might have resulted in the language being
ignored, instead of being adopted and embraced.</p>

<h2 id="s9-a-road-to-learning-common-lisp"><a href="#s9-a-road-to-learning-common-lisp">A Road to Learning Common Lisp</a></h2>

<p>If all of this hasn't scared you away from the language, let's talk about how
you can learn it in 2018.</p>

<p>If you search around on the internet for Common Lisp tutorials and guides,
you're not going to find as much as you might expect.  This is because a lot of
Common Lisp reference material was created before or during the infancy of the
internet.  There are a <em>lot</em> of books about Common Lisp out there.  Some are
better than others.  I'll recommend the ones I think are the best, but don't
hesitate to browse around and find others.</p>

<h3 id="s10-get-a-lisp"><a href="#s10-get-a-lisp">Get a Lisp</a></h3>

<p>To get started with Common Lisp you'll need to install a Common Lisp
implementation.  Common Lisp is an ANSI specification, so there are multiple
implementations of it, which gives you choices.  There are a bunch of options,
but I'll make it simple for you:</p>

<ul>
<li>If you're using MacOS and want a single GUI app you can download from the App
  Store, choose <a href="https://ccl.clozure.com/">ClozureCL</a> (often abbreviated "CCL").</li>
<li>Otherwise, choose <a href="http://www.sbcl.org/">SBCL</a>.</li>
</ul>

<p>That's Clozure with a Z.  Clojure is something entirely different that just
happens to have a confusingly similar name.</p>

<p>You might also hear of something called CLISP, which sounds like it might be
what you want.  It's not.  CLISP is just another implementation, but it hasn't
had a release in eight years (even though development is still ongoing in its
source repos!) and it's not as commonly used as CCL or SBCL, so it'll be harder
to find help if you have questions about the installation, etc.</p>

<p>You might also hear about something called Roswell.  Don't use Roswell, you don't
need it (yet (or at all)).</p>

<p>Just install SBCL or CCL for now, you can explore the other options once you've
got your bearings a bit better.</p>

<h3 id="s11-pick-an-editor"><a href="#s11-pick-an-editor">Pick an Editor</a></h3>

<p>You might hear people tell you that you <em>must</em> learn Emacs before learning
Common Lisp.  They're wrong.  You can get started learning the language just
fine in whatever text editor you're comfortable in.</p>

<p>If you don't have a preference, CCL itself comes bundled with a text editor on
MacOS.  That one will work just fine to start.</p>

<p>Emacs, Vim, Sublime Text, Atom, whatever, for now it doesn't matter.  As long as
it can balance parentheses, highlight comments and strings, and autoindent Lisp
code that's all you need to start.  Worry about shaving the editor yak once
you're more comfortable in the language.</p>

<h3 id="s12-hello-lisp"><a href="#s12-hello-lisp">Hello, Lisp</a></h3>

<p>To check that you've got everything set up properly, make a <code>hello.lisp</code> file
with the following contents:</p>

<pre><code><span><span>(<span><i><span>defun</span></i> hello <span>(<span></span>)</span>
  <span>(<span>write-line <span>"What is your name?"</span></span>)</span>
  <span>(<span><i><span>let</span></i> <span>(<span><span>(<span>name <span>(<span>read-line</span>)</span></span>)</span></span>)</span>
    <span>(<span>format t <span>"Hello, ~A.~%"</span> name</span>)</span></span>)</span></span>)</span></span></code></pre>

<p>Don't worry about what this means yet, it's just a check that everything's
working properly.</p>

<p>Open an SBCL or CCL REPL (<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">Read/Eval/Print
Loop</a>) and
load the file by entering <code>(load "hello.lisp")</code>, then call the function and make
sure it works.  It should look something like this if you picked SBCL:</p>

<pre><code>$ sbcl
* (load "hello.lisp")

T
* (hello)
What is your name?
Steve
Hello, Steve.
NIL
*
</code></pre>

<p>Or if you chose CCL but still want to use the command line, rather than the
MacOS app (the command line program might be annoyingly named <code>ccl64</code> if you're
on a 64-bit system):</p>

<pre><code>$ ccl64
Clozure Common Lisp Version ...

? (load "hello.lisp")
#P"/home/sjl/Desktop/hello.lisp"
? (hello)
What is your name?
Steve
Hello, Steve.
NIL
?
</code></pre>

<p>If your arrow keys and backspace don't work in the REPL, use <a href="https://github.com/hanslub42/rlwrap"><code>rlwrap</code></a>
to fix that.  <code>rlwrap sbcl</code> will give you a non-miserable REPL.  <code>rlwrap</code> is
a handy tool to have in your toolbox anyway.</p>

<h3 id="s13-a-gentle-introduction"><a href="#s13-a-gentle-introduction">A Gentle Introduction</a></h3>

<p>The best book I've found for getting started in Common Lisp is <a href="https://www.cs.cmu.edu/~dst/LispBook/">Common Lisp:
A Gentle Introduction to Symbolic Computation</a>.  This book really
does strive to be gentle.  Even if you've programmed before I'd still recommend
starting here because it eases you into the language.</p>

<p>The 1990 edition is available free from the site, and there's a 2013 reprint
which fixes some minor errors in the 1990 version.  If you can afford it I'd
recommend buying the 2013 edition, but the 1990 version will also do fine.</p>

<p>Go through the book and <em>do all the exercises</em>.  This will take a while, and
is mainly meant to get you started overcoming some of the main obstacles to
being comfortable in Common Lisp, such as:</p>

<ul>
<li>How am I ever going to remember all these weird function names?</li>
<li>Why do people use strings so rarely?</li>
<li>When do I need the god damn quotation mark?</li>
</ul>

<p>If you find the book is moving too slow, just skim forward a bit.  Skimming is
a very useful skill to practice as a programmer.  I think it's better for
authors to err on the side of explaining too much when writing books and
documentation — expert readers should be comfortable skimming if you explain too
<em>much</em>, but new users will be stuck wallowing in confusion if you're too terse.
Creating hours of newbie misery and confusion to save a few flicks of an
expert's scroll wheel is a poor tradeoff to make.</p>

<p>You should also join the <code>#clschool</code> channel on the Freenode IRC network so you
can ask questions if you get stuck.  For the most part people there are friendly
and helpful, though I'll warn you in advance that there's at least one person
who can sometimes be abrasive.  There's also a <code>#clnoobs</code> channel, but that was
mostly abandoned during the latest wave of Freenode spam because no one had ops
to help combat the spam.</p>

<p>If IRC isn't your thing there's also a <a href="https://discord.gg/tffeu2x">Discord
server</a> that some of us hang out in.  Join the
<code>#common-lisp</code> channel there and we'll be happy to help you.</p>

<h3 id="s14-getting-practical"><a href="#s14-getting-practical">Getting Practical</a></h3>

<p>Once you've finished that book the next one you should attack is <a href="http://www.gigamonkeys.com/book/">Practical
Common Lisp</a>.  You can get a paper copy if you want, but the full book
is available on the site for free.</p>

<p>You can skip the editor/programming environment part because the environment it
recommends (Lisp in a Box) is abandoned and no longer works.  Just keep using
the programming environment you're comfortable with for now.</p>

<p>Unfortunately the book doesn't include exercises.  If you <em>really</em> want to get
the most out of it you can type in all the code as you're reading it and poke at
it, but if you've already done the exercises in the previous book it's probably
safe to just sit down and read the book carefully.  Don't read more than
a chapter or two a day.  It will take a while for your brain to digest all the
information.</p>

<p>Make sure you understand everything as you go through the book.  Don't be afraid
to ask questions on IRC or Discord (or email me if you want, I don't mind) if
something's not clear.</p>

<p>You should also begin to get comfortable looking up things in <a href="http://www.lispworks.com/documentation/lw70/CLHS/Front/Contents.htm">the Common Lisp
language specification</a> itself.  It's the ultimate manual for Common Lisp.
It can be pretty dense at points, but can answer many questions you might have
if you read it slowly and carefully.  You can either use the index page to find
what you're looking for or just search on Google for "clhs whatever" (CLHS
stands for "Common Lisp HyperSpec", which is the hyperlinked, HTML version of
the spec).  If you already use the Dash app for MacOS, it has the Common Lisp
spec available.</p>

<p>(Some people will tell you to learn the language by just reading the spec.  That's
ridiculous — it's like trying to learn French by reading a dictionary.  It's
a useful tool to have, but not the only one you'll need.)</p>

<h3 id="s15-make-something"><a href="#s15-make-something">Make Something</a></h3>

<p>Once you've got those two books under your belt and some practice using the
spec, it's time to make something without someone holding your hand.  It doesn't
have to be anything big or special, the goal is to just write some Lisp without
having the answer on the next page.</p>

<p>If you need some ideas:</p>

<ul>
<li>Do some <a href="https://projecteuler.net/">Project Euler</a> problems.</li>
<li>Do some <a href="https://adventofcode.com/">Advent of Code</a> exercises.</li>
<li>Make a <a href="https://twitter.com/git_commands">stupid Twitter bot</a>.</li>
<li>Make a personal calendar program that records your appointments, checks the
  weather forecast the day of, etc.</li>
<li>Use <a href="https://github.com/vydd/sketch">Sketch</a> to implement the stuff in some <a href="https://www.youtube.com/user/codingmath/videos">Coding Math videos</a>.</li>
</ul>

<p>It doesn't really matter what you make, just make <em>something</em> on your own.</p>

<h3 id="s16-lisp-as-a-system"><a href="#s16-lisp-as-a-system">Lisp as a System</a></h3>

<p>At this point it's time to take your Common Lisp skills up a notch.  Up until
now I've told you to just use any text editor because it's more important to
get you some experience with the language, but now it's time to dive into the
deep end.</p>

<p>In most languages the development process looks something like this:</p>

<ol>
<li>Edit some code in the project with an editor.</li>
<li>Compile the project (some languages skip this step).</li>
<li>Run the project (or the tests).</li>
<li>Observe the output (in the console, a browser, etc).</li>
<li>Go to 1.</li>
</ol>

<p>This is not how most Common Lisp users interact with the language.  In Common
Lisp, the development cycle looks more like this:</p>

<ol>
<li>Start a Lisp process.</li>
<li>Load the project.</li>
<li>Edit some code with your editor.</li>
<li>Tell the running process to compile <em>only the code you edited</em>.</li>
<li>Interact with the changed code in the process via the REPL, an HTTP request, etc.</li>
<li>Observe the output (in the console, a browser, etc).</li>
<li>Go to 3.</li>
</ol>

<p>When you embrace the Lisp way of working you'll rarely recompile and reload an
entire project.  Usually you'll write a function (or a macro, or parameter, or
whatever), compile <em>just that function</em>, maybe poke at it in the REPL a bit, and
then move on to the next function.  This has some advantages over the
traditional compile-everything-then-run approach.</p>

<p>First: compiling a small chunk of code is fast.  I just timed compiling a few of
the larger functions in one of my projects and they took around 50-80
microseconds.  You don't have to wait for the compiler, so your
concentration/thought process never has time to wander.</p>

<p>Another advantage is that when you get back the results of your compilation (and
running), any errors or warnings you receive are almost certainly related to the
few lines of code you just compiled.  If you compile a ten-line function, run
it, and get a division by zero error you can immediately focus in on the ten
lines you just compiled and think about what changed.</p>

<p>Because the Lisp process is always running, as soon as you compile a function
it's ready to be used in the REPL.  You can throw some arbitrary data at it and
inspect the results to see how it behaves in isolation before you build more
things on top of it.  This cycle of making a function, compiling it, poking at
it to make sure it's working as expected, and moving on happens <em>constantly</em>.</p>

<p>In contrast, when working in languages like Scala or Python I almost never find
myself writing one single function and compiling or running the project
immediately.  Spinning up the compiler or running the unit tests takes at
<em>least</em> a second or two (or sometimes <em>minutes</em> in Scala, unfortunately) so to
avoid having a constant stream of gaps in my thought I end up writing a bunch of
functions at once, and then I run the project or tests once I know they have
a chance of working.</p>

<p>But then when I get back an error I have much more surface area to check,
because I've added a lot of new code!  So now I have to track down a problem
that might be in something I wrote four minutes ago, whereas in Lisp I would
only have to ever look at the code I wrote in the last few seconds.</p>

<p>I've started using IntelliJ with Scala to help make this a bit less painful.  It
does help with the compile times because it recompiles things on the fly, but it
doesn't solve the rest of the problem.  I can write a Scala function in IntelliJ
and it will be compiled immediately, but I can't <em>interact</em> with it immediately
like I can in Common Lisp.</p>

<p>When you work in this style with Common Lisp I think you'll really grow to love
it.  Writing in other languages will begin to feel like shipping your code off
to the DMV and getting it back a week later with a page full of red ink
somewhere in the hundred forms you filled out.  Writing in Common Lisp feels
like interacting with a living, breathing organism, or like <a href="https://www.reddit.com/r/lisp/comments/4oo1cp/common_lisp_for_clojure_programmer/d4eec68/">teaching things to
an eager assistant</a>.</p>

<p>This philosophy of Lisp being not just a programming <em>language</em> but a living,
breathing programming <a href="https://www.dreamsongs.com/Files/Incommensurability.pdf"><em>system</em></a> goes beyond just the short
feedback loop and interactive REPL, too. </p>

<p>As an example: imagine you're making a video game and have a bug somewhere in
your damage calculation that will occasionally cause a division by zero.  Now
let's say you're working on the code for a particular quest.  You'll start the
game, load a save file at the beginning of the quest, and start going through
the steps.  All of a sudden, in the middle of killing the final monster for the
quest, you hit the damage bug!  In traditional languages, one of two things
might happen:</p>

<ol>
<li>The game crashes, and you get a stack trace and maybe a core dump.</li>
<li>You've wrapped a <code>try</code> block around the main game loop that logs a stack
   trace and ignores errors and allows the game to continue.</li>
</ol>

<p>Case 1 is pretty bad.  You've got to try to track down the bug from a snapshot
of what things looked like at the time (the stack trace and core dump).  And
even if you manage to fix it, now you've got to redo all that playing to get
back to testing your quest code that you were originally working on.</p>

<p>Case 2 is bad, in a different way.  If you just ignore errors all the time, the
game might now be in a weird state.  You also might lose some critical context
that's necessary to debug the problem, unless you're also saving a core dump
(but I don't know of many people who save a core dump on every exception).</p>

<p>In Common Lisp you can certainly choose to panic on or ignore errors, but
there's a better way to work.  When an error is signaled in Common Lisp, it
doesn't unwind the stack.  The Lisp process will pause execution at that point
and open a window in your editor showing you the stack trace.  Your warrior's
sword is hovering over the monster, waiting for you.  At this point you can
communicate with the running process at the REPL to see what's going on.  You
can examine variables in the stack, or even run any arbitrary code you want.</p>

<p>Once you figure out the problem ("Oh, I see, the <code>calculate-armor-percentage</code>
function returns <code>0</code> if a shielding spell ran out during the same frame") you
can fix the code, recompile the problematic function, and <em>restart the execution
of that function (or any other one!) in the call stack</em>!  Your warrior's sword
lands, and you move back to what you were doing before.</p>

<p>You don't have to track down the bug from just a stack trace, like a detective
trying to piece together what happened by the <a href="https://www.usenix.org/system/files/1311_05-08_mickens.pdf">blood stains</a> on
the wall.  You can examine the crime <em>as it's happening</em> and intervene to save
the victim.  It's like if you could run your code in a debugger with
a breakpoint at every single line that only activates if something goes wrong!</p>

<p>Maybe you don't make video games, sure, but this process can be useful in all
kinds of contexts.  Maybe you're writing a web app that talks to an API
somewhere, and are debugging a request that fails between two calls to the API,
e.g.  between "create widget <code>foo</code>" and "add <code>foo</code> to widget list <code>bar</code>".
Instead of just aborting the request, logging a stack trace, and now leaving
things in a possibly weird state (<code>foo</code> having been created without being in the
expected <code>bar</code> list), you can fix the problem and allow the request to finish
properly.</p>

<p>Of course this won't always work.  If you've got a big function that does some
side effects and then crashes, restarting execution of the function would make
the side effects happen again.  But if you divide up your functions well (<a href="https://groups.google.com/forum/message/raw?msg=comp.lang.lisp/9SKZ5YJUmBg/Fj05OZQomzIJ">one
function to a function!</a>) this case is pretty rare.  And even when it
does happen, it just means you're back in the same situation you're in <em>by
default</em> with other languages!</p>

<p>Support for this style of interactive development doesn't just come from some
fancy editor plugins — it's baked into the bones of the language.  For example:
the standard specifies a method named
<a href="http://clhs.lisp.se/Body/f_upda_1.htm"><code>update-instance-for-redefined-class</code></a>
that lets you customize what happens to objects when their class is redefined!
This isn't something you'll use all the time, but something like Sketch (a
Common Lisp equivalent of Java's Processing library) <a href="https://github.com/vydd/sketch/blob/19fe20502d26fc75752e710dfe5106ed13345c5a/src/sketch.lisp#L118-L121">uses it</a> to
automatically update the running sketch when you redefine its class.
Dynamically updating running code in a safe, consistent way doesn't require any
dark magic in Common Lisp because it's the expected, usual way to work.</p>

<p>So how do you actually <em>get</em> this wonderful interactive experience?  The bad
news is that you're going to need to shave the editor yak.  You really only have
two choices here:</p>

<ul>
<li>Emacs with <a href="https://common-lisp.net/project/slime/">SLIME</a> or <a href="https://github.com/joaotavora/sly">Sly</a>.</li>
<li>Vim (or Neovim) with <a href="https://github.com/l04m33/vlime">Vlime</a> or <a href="https://github.com/kovisoft/slimv">Slimv</a>.</li>
</ul>

<p>I wish this weren't the case, but those are really only the realistic options
today (aside from the editing environments for the (expensive) commercial
Lisps).</p>

<p>If you're like me and already have Vim burned too deeply into your fingers to
ever get it out, I'd recommend Vim with Vlime.  It will give you 80% of the
experience you'll get with Emacs.</p>

<p>Otherwise go with Emacs.  You might want to look into
<a href="https://portacle.github.io/">Portacle</a>, which bundles Emacs and SLIME and
a bunch of other things together, or you might want to have a go at setting up
Emacs and SLIME or Sly yourself.  I can't really give you much advice on the
Emacs side of things because I haven't had much experience with it, so you'll
need to do a bit of research here.</p>

<p>Whatever you choose, spend some time setting up your editor and environment of
choice.  This will be a lot of fiddly metawork, but will pay off handsomely as
you continue working in Lisp.</p>

<p>On a side note: if anyone is interested in making a Common Lisp <a href="https://langserver.org/">LSP</a>
language server, I think it would be a hugely useful contribution to the
community.  Having an LSP server would mean you could get a much nicer
programming experience in many editors out of the box, which would help new
people quite a lot.</p>

<p>I think you could piggyback on top of Swank to do a lot of the language-side
stuff, and it would mostly be a matter of implementing the LSP interface.  If
this sounds interesting to you, please let me know — I'd be willing to help.
I've done some work at my day job making a Scala LSP language server that uses
IntelliJ as a backend, so I have at least some idea of how that sausage gets
made.  I just don't have the time or motivation to do an entire LSP server for
Common Lisp all by myself.</p>

<h3 id="s17-learning-paradigms"><a href="#s17-learning-paradigms">Learning Paradigms</a></h3>

<p>At this point you should have a pretty good handle on the basics of Common Lisp,
and have set up one of the more powerful development environments.  Your next
goals should be to learn how to write idiomatic Common Lisp and to get some
practice using your fancy new environment.</p>

<p>I think the perfect book for both of these is <a href="https://github.com/norvig/paip-lisp">Paradigms of Artificial
Intelligence Programming</a>, often abbreviated as PAIP.  The book was
recently made available for free as a PDF, or you can buy a used paper copy if
you prefer.</p>

<p>This book was written in 1992 so it's not about the hyped up AI fields you've
been hearing about in the news like machine learning — instead it's a tour of
<a href="https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence">Good Old-Fashioned AI</a>.  Even if you're not particularly interested in
this kind of AI, the book is a great example of how to write Common Lisp code.</p>

<p>One thing I really love about this book is that almost all the functions in it
have docstrings.  If you look at most other programming books they omit the
documentation strings, presumably for space reasons and because they feel the
surrounding text is documentation enough.  But writing helpful docstrings is an
art in and of itself, and I think books that omit them train readers that "good
code omits docstrings", which is a bad habit to get into.</p>

<p>The book contains <em>plenty</em> of exercises, conveniently categorized by how
difficult or involved they are:</p>

<ul>
<li><code>S</code> for "seconds".</li>
<li><code>M</code> for "minutes".</li>
<li><code>H</code> for "hours".</li>
<li><code>D</code> for "days".</li>
</ul>

<p>This is a very good idea which more books should steal.  Do all of the <code>S</code> and
<code>M</code> exercises, and try your hand at at least a few of the <code>H</code> ones.  If a <code>D</code>
sounds particularly interesting don't be afraid to spend some time on it
— really digging into a problem is exactly what you need at this point in your
Lisp journey.</p>

<h3 id="s18-switch-things-up"><a href="#s18-switch-things-up">Switch Things Up</a></h3>

<p>Now that you're comfortable in Common Lisp and your programming environment,
it's time to push yourself out of your comfort zone again.  At the beginning I
had you choose either SBCL or CCL.  Now I want you to install whichever one you
didn't originally choose and make sure all the code you've written so far runs
in it.</p>

<p>This may seem a bit like running in place, but making sure your code runs in
more than one implementation will keep you honest.  It will force you to write
portable code that doesn't rely on anything implementation-specific that might
change in the next decade or two.  And you might even discover that you like
this other implementation better than the original — maybe CCL's super-fast
compile times make you smile, or SBCL's strong type inference catches more of
your bugs.</p>

<p>Go through all the code you've written so far and make sure it all runs in the
new implementation.  You might also want to take this opportunity to refactor or
rewrite some of it — you've learned a lot since you first started, so your
earliest Common Lisp code will probably look pretty rough to you now.</p>

<h3 id="s19-recipes-for-success"><a href="#s19-recipes-for-success">Recipes for Success</a></h3>

<p>The final technical book I'll recommend to every aspiring Lisp programmer is
<a href="http://weitz.de/cl-recipes/">Common Lisp Recipes</a>, sometimes abbreviated as CLR.  Unlike most of
the other books I've recommended so far this one is relatively recent: it was
published in 2015.  It's not free, but I think it's well worth the money it
costs.</p>

<p>The book is written by the author of several very heavily used Common Lisp
libraries.  It's a bit of a grab bag of topics (which is why I think you need
a decent amount of Lisp under your belt before you tackle it) but it's a very
well-written grab bag that will teach you a lot of things you won't find in
other books.</p>

<h3 id="s20-final-patterns"><a href="#s20-final-patterns">Final Patterns</a></h3>

<p>If you've gotten this far you're pretty invested in Common Lisp, and I want to
recommend one not-strictly-technical book that I think you'll really enjoy:
Patterns of Software by Richard Gabriel.  It's available as a PDF on <a href="https://www.dreamsongs.com/Books.html">the
author's site</a>, and you can still find used print copies online if you
prefer.</p>

<p>This is <em>not</em> the "Gang of Four"/"Design Patterns" book that you might have
already read or heard about, but is a set of essays on a variety of
loosely-related topics.  It's the best book I've read so far this year.  I don't
want to spoil anything in it for you, so I'll just say that I think you'll find
it well worth your time.</p>

<h2 id="s21-where-to-go-from-here"><a href="#s21-where-to-go-from-here">Where to Go From Here</a></h2>

<p>If you made it through all the books and activities in the previous section:
congratulations, you're off to a great start!  Now that you've got a decent
handle on the core language you can explore in many different directions,
depending on your interests.</p>

<h3 id="s22-macros"><a href="#s22-macros">Macros</a></h3>

<p>If you want to learn the secrets of macros, you'll probably want to read and
work through <a href="http://www.paulgraham.com/onlisp.html">On Lisp</a> and <a href="https://letoverlambda.com/">Let Over Lambda</a> (in that order).</p>

<p>I'll say that you should take both books (<em>especially</em> the latter) with a large
grain of salt.  A lot of Common Lisp users don't agree with all of the arguments
and style in these books, but I think they can still provide plenty of value if
you read them with a critical mind.</p>

<h3 id="s23-object-oriented-programming-with-clos"><a href="#s23-object-oriented-programming-with-clos">Object-Oriented Programming with CLOS</a></h3>

<p>Common Lisp has some very sophisticated support for Object-Oriented Programming
through CLOS.  If you're like me and have bad memories of OOP from working in
a Java cube farm, I'd urge you to give CLOS a fair chance to change your mind.</p>

<p>Start with <a href="https://www.amazon.com/Object-Oriented-Programming-COMMON-LISP-Programmers/dp/0201175894">Object-Oriented Programming in COMMON LISP: A Programmer's Guide to
CLOS</a>.  It's a wonderfully-written, short and to-the-point book that will
give you a good overview of how CLOS is intended to be used.</p>

<p>If you really want to bend your mind, try <a href="https://www.amazon.com/Art-Metaobject-Protocol-Gregor-Kiczales/dp/0262610744">The Art of the Metaobject
Protocol</a> (usually abbreviated as AMOP).  This book will probably take you
a couple of tries to get through.  Read it until you hit a mental wall, go work
on other things for a couple of months, and come back and try again.  Repeat
that process as many times as necessary.</p>

<h3 id="s24-low-level-programming"><a href="#s24-low-level-programming">Low-Level Programming</a></h3>

<p>Low-level programming can mean a lot of different things, so I'll just mention
one possibility here.</p>

<p>If you're interested in writing emulators for old computers, I wrote <a href="http://stevelosh.com/blog/2016/12/chip8-cpu/">a series
of posts</a> on making a <a href="https://en.wikipedia.org/wiki/CHIP-8">CHIP-8</a> emulator in Common Lisp.
<a href="https://github.com/kingcons/cl-6502">cl-6502</a> is an emulator for the processor used in the NES (and lots of other
things) and has a really nice <a href="http://redlinernotes.com/docs/cl-6502.pdf">literate programming</a> version
that's wonderful to read through.</p>

<h3 id="s25-web-development"><a href="#s25-web-development">Web Development</a></h3>

<p>Unfortunately I don't have too many suggestions for web development in Common
Lisp.  I've made a conscious effort to avoid web development in the past five or
so years, because it seems like the Hamster Wheel of Backwards Incompatibility
has become more of a Hamster Centrifuge in that field.</p>

<p>There is a <code>#lispweb</code> channel on Freenode and a <code>#webdev</code> channel in the Lisp
Discord, so if you have questions you could start by asking there.  Those
channels are a bit less populated than the other Lisp channels, so don't expect
an answer immediately.</p>

<h3 id="s26-game-development"><a href="#s26-game-development">Game Development</a></h3>

<p>Common Lisp has a small but enthusiastic community of people who like making
games.  There's a <code>#lispgames</code> channel on Freenode and a <code>#gamedev</code> channel on
the Lisp Discord that you should join if you're interested.</p>

<p><a href="http://landoflisp.com/">Land of Lisp</a> is a fun book to go through.  The coding
style in the book has some... "eccentricities", which is why I don't recommend
it as a first book on Lisp (e.g. using <code>ash</code> instead of <code>truncate</code> or <code>floor</code>
for integer division), but if you know the language and just want to get started
making some simple games I think you'll enjoy working through it.</p>

<p>If you want an excuse to make a game in Lisp in a week, the Lisp Game Jam is
something you can join.  It's usually held once or twice each year, so you'll
have to search around (or ask in <code>#lispgames</code>) to find out when the next one is.</p>

<p>Lisp doesn't have any engine as full-featured as Unity, but several people are
currently working on making 3D game engines.  Ask around to see what people are
using these days.  Unfortunately a 3D game engine will generally need to
interface with the OS to render images and produce audio, and so can't be
written in pure Common Lisp.  This means that some running on the Hamster Wheel
of Backwards Incompatibility will be necessary to keep up with OS changes (e.g.
<a href="https://www.macrumors.com/2018/06/05/apple-deprecates-opengl-opencl-gaming/">Apple deprecating OpenGL</a>).</p>

<p>If you're interested in old-school ASCII/tile-based games, I've personally done
some work with using <a href="https://github.com/HiTECNOLOGYs/cl-charms">ncurses</a> and <a href="http://foo.wyrd.name/en:bearlibterminal">bearlibterminal</a> in Common Lisp.
There's something really fun about making a game people can play over telnet!
Feel free to get in touch with me if you're interested in that kind of stuff and
want to know more.</p>

<h3 id="s27-window-management"><a href="#s27-window-management">Window Management</a></h3>

<p>If you're running Linux and like tinkering with your desktop environment,
<a href="https://stumpwm.github.io/">StumpWM</a> is an X window manager written in Common Lisp.  I've just recently
switched back to Linux so I've only been using it for about two months, but it's
really pleasant to be able to customize my working environment with Common Lisp.</p>

<p>StumpWM has a small but friendly community — if you're looking for a non-trivial
open source Common Lisp project to contribute to, StumpWM would be a great
choice.</p>

<h3 id="s28-unit-testing"><a href="#s28-unit-testing">Unit Testing</a></h3>

<p>If you're coming from a modern language, especially one with a lot of
test-driven development advocates, you might be surprised at the lack of an
emphasis on unit testing in Common Lisp.  I think one reason for this is that in
some languages a unit test is the simplest way to actually <em>run</em> a function,
but Lisp's interactive style of development gives you an even easier
alternative: just <em>run the function</em> in the REPL!</p>

<p>Despite the lack of heavy unit testing in the community, there are almost as
many unit testing <em>frameworks</em> as there are Common Lisp programmers!  This is
probably because making a unit testing framework is so easy with a few macros.
I love <a href="https://github.com/lmj/1am">1am</a>, but there are <em>plenty</em> more to choose from.</p>

<p>Whichever one you choose, please make sure to be a good citizen and create
a separate ASDF system for your unit tests, so people can use your library
without having to load Yet Another Testing Framework.</p>

<h3 id="s29-more-implementations"><a href="#s29-more-implementations">More Implementations</a></h3>

<p>I had you use SBCL and CCL because those are the most popular free Common Lisp
implementations today, but they aren't the only actively-developed ones out
there.  There's plenty of others you might want to explore:</p>

<ul>
<li><a href="https://common-lisp.net/project/armedbear/">ABCL</a> runs on the JVM.</li>
<li><a href="https://common-lisp.net/project/ecl/main.html">ECL</a> can be embedded in a C program, and can translate Common Lisp code to C code.</li>
<li><a href="https://github.com/clasp-developers/clasp">CLASP</a> is still under development, but is an implementation designed to be easy to interoperate with C++.</li>
<li><a href="http://www.lispworks.com/">Lispworks</a> and <a href="https://franz.com/products/allegro-common-lisp/">Allegro CL</a> are commercial implementations with a lot of extra features and support, but are not free.</li>
</ul>

<p>(I omitted CLISP because I'm mad at them for choosing a name that confuses the
heck out of new people.  Hey, I warned you this post would contain Opinions™.)</p>

<p>I tend to use SBCL for my own projects, but I make sure the units tests for all
my libraries run in SBCL, CCL, ABCL, and ECL.  This keeps me honest and gives me
a reasonable degree of confidence that I'm writing portable code.</p>

<h2 id="s30-modern-common-lisp"><a href="#s30-modern-common-lisp">Modern Common Lisp</a></h2>

<p>Common Lisp is old and stable, but that doesn't mean it's stagnant.  The
language gives you plenty of power to build on, and before I wrap this up I want
go over a couple of recent developments in the Common Lisp world that the older
books you've been learning from don't talk about.  I also want to clarify some
things that often trip up new people.</p>

<h3 id="s31-structure"><a href="#s31-structure">Structure</a></h3>

<p>Common Lisp's terminology for various parts of projects is often confusing to
new people because it's old and uses a lot of words that we use now (like
“package”) to mean subtly different things than people mean today. Things get
easier once you internalize what Common Lisp means by the terms.</p>

<p>(Side note: I posted a quick-and-dirty version of this section as a <a href="https://lobste.rs/s/fwhuz5/my_lisp_journey_1_getting_started_with#c_ebhvzq">comment</a>
on Lobste.rs while I was waiting for a plane — this section of the post is an
expanded version of that comment.)</p>

<h4 id="s32-packages"><a href="#s32-packages">Packages</a></h4>

<p>We often see questions in IRC and Discord that look something like: "How do I
export a class from a package"?  Questions worded like this are a sign of a
very common misunderstanding about what packages in Common Lisp <em>actually are</em>.</p>

<p><strong>A package in Common Lisp is a container for symbols</strong>.  That's it.  They're
a way to group related names (symbols) together so you don't have to do the
miserable prefixing of every name with <code>mylibrary-...</code> like you need to do in
Emacs Lisp or C to avoid name clashes.</p>

<p>You don't export a class from a package, you export a <em>symbol</em>.  You don't
import a function, you import the <em>symbol</em> it's attached to.  This sounds
pedantic, but is important to keep clear in your head as you start using the
package system.  If you're not clear on what exactly a symbol <em>is</em>, I wrote
a <a href="http://stevelosh.com/blog/2016/06/symbolic-computation/">separate post</a> just about symbols which you might find helpful.</p>

<p>Another major tripping point for new people is the relationship between packages
and files.  Or, rather: the completely <em>lack</em> of any relationship in Common
Lisp.</p>

<p>In many languages like Python, Java, or Clojure, a file's package and its
location on the hard drive are tied together.  For example: when you say <code>import
foo.bar.baz</code> in Python, Python will look for a <code>baz.py</code> file inside the
<code>foo/bar/</code> directory (it's a little more complicated than this, but that doesn't
matter for this example).</p>

<p>In Common Lisp, this is not the case.  <strong>Files and packages are completely
unrelated in Common Lisp.</strong>  You can have many files that all work in the same
package, or one file that switches between many packages, or even create or
modify packages at runtime.</p>

<p>This gives you the flexibility to work however you want.  For example: in my
procedural art library <a href="https://github.com/sjl/flax">Flax</a> most of the packages are each used in one
specific file, much like you would do in modern languages.  But the
<code>flax.drawing</code> package contains not only a drawing protocol but also several
implementations of that protocol (PNG, SVG, etc), and so I split the code into
<a href="https://github.com/sjl/flax/tree/master/src/drawing">a series of separate files</a>, each one dealing with how to draw
a single format (plus one for the protocol itself).</p>

<p>I could have created separate packages for each implementation and set up the
imports/exports between them, but I didn't feel like the extra boilerplate was
worth it.  Common Lisp is flexible enough to let you make such choices.</p>

<p>So if files and packages aren't related, the next question is: how does Common
Lisp know where to <em>find</em> anything on disk when it comes time to load the code?</p>

<h4 id="s33-systems"><a href="#s33-systems">Systems</a></h4>

<p>A system in Common Lisp is a collection of serveral things:</p>

<ul>
<li>Some code.</li>
<li>A description of how to load that code.</li>
<li>A list of other systems this system depends on, which need to be loaded prior
  to loading this one.</li>
<li>Some metadata like author, license, version, homepage, etc.</li>
</ul>

<p>The Common Lisp language itself has no knowledge of systems.  If you look at
<a href="https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node120.html">section 11.9</a> of CLtL2 you'll see that it was imagined that
each author would write their own custom file to load their code.  But since
Common Lisp gives you the power to abstract almost anything, people eventually
abstracted the process of loading Common Lisp code.</p>

<p><a href="https://common-lisp.net/project/asdf/">ASDF</a> is a Common Lisp library bundled with most modern implementations
which handles defining and loading systems.  The name ASDF stands for "Another
System Definition Facility", so as you might guess there have been several
other such libraries.  ASDF is the one everyone uses today.</p>

<p>ASDF standardizes the process of defining a system into something like this:</p>

<ul>
<li>The system definition(s) for a project called <code>foo</code> would be in a file named <code>foo.asd</code>.</li>
<li>Each system is defined with a <code>(defsystem ...)</code> form inside this file.</li>
</ul>

<p>We'll talk more about what a "project" is shortly.  Note the extension of the
file is <code>asd</code>, not <code>asdf</code>, which is a little confusing, but was probably chosen
to work in environments with three-letter-extension limits.</p>

<p>The <a href="https://common-lisp.net/project/asdf/#documentation">ASDF manual</a> is the definitive resource for the syntax and semantics of
<code>defsystem</code>, but can be a little heavy to read if you're just getting started.
Another way to get started is to read some <code>.asd</code> files of some small-to-medium
sized open source projects and see how they handle things.</p>

<p>Systems and packages are orthogonal in Common Lisp.  Some systems (like small
libraries) will define exactly one package.  Some systems will define multiple
packages.  Rarely a system might not define any new packages, but will use or
add to an existing one.</p>

<p>For example:</p>

<ul>
<li>My directed graph library <a href="https://github.com/sjl/cl-digraph">cl-digraph</a> contains a system called <code>cl-digraph</code>.</li>
<li>That system has a description of how to load the code, which lives in the
  <a href="https://github.com/sjl/cl-digraph/blob/master/cl-digraph.asd"><code>cl-digraph.asd</code></a> file.</li>
<li>One of the files specified for loading is <a href="https://github.com/sjl/cl-digraph/blob/master/package.lisp"><code>package.lisp</code></a>,
  which creates a package called <code>digraph</code>.</li>
</ul>

<p>Even though ASDF standardizes some aspects of system definition, it still gives
you plenty of flexibility.  As you read projects by different authors you'll
encounter different ways of organizing systems — this can be a little
overwhelming at first, but it means you can organize a system in the way that
works <em>best for that system</em>, which is really nice once you've got some
experience under your belt.</p>

<p>One example of this is how people define packages for their systems.  There are
a couple of common ways to do this you'll see in the wild:</p>

<ul>
<li>A single <code>package.lisp</code> file which contains all the definitions for all the
  packages in the project, and gets loaded before all other files.  This is the
  strategy I usually prefer.</li>
<li>Each file defines its package at the top of the file, much like you would in
  Clojure or other modern languages.  Care is taken in the system definition to
  load the files in the correct order so that each package is defined before it
  is ever used.</li>
</ul>

<p>To review: a system is a collection of code and a description of how to load it,
a list of its dependencies, and some metadata.  Now let's move up one level
higher to the final layer of structure you need to know about.</p>

<h4 id="s34-projects"><a href="#s34-projects">Projects</a></h4>

<p>A project in Common Lisp is not an official term defined anywhere that I know
of, but is a word that's generally used to mean something like a library,
a framework, an application, etc.</p>

<p>A project will usually define at least one system, because systems are where
you describe how to load the code, and if a project didn't define a system how
would you know how to load its code?  My string-wrapping library <a href="https://github.com/sjl/bobbin">Bobbin</a> is
a project that defines <em>two</em> systems:</p>

<ul>
<li><p>The <code>bobbin</code> system contains the actual data structure and API.  It has no
  dependencies.</p></li>
<li><p>The <code>bobbin/test</code> system contains the unit tests.  It depends on the <code>bobbin</code>
  system (because that's the code it's going to test) and the <code>1am</code> system (a
  unit test framework).  I made this a separate system because it allows users
  to load the main code without also having to load the unit testing framework
  if they're not going to be running the tests.</p></li>
</ul>

<p>Both of these systems are defined in the <a href="https://github.com/sjl/bobbin/blob/master/bobbin.asd"><code>bobbin.asd</code> file</a>.  ASDF
<a href="https://common-lisp.net/project/asdf/asdf.html#index-find_002dsystem">treats systems with a forward slash in their name specially</a> and
knows to look for them in the <code>asd</code> file named with the text before the slash.</p>

<p>We saw how Common Lisp has no concept of a system — that concept comes from
ASDF.  Similarly, ASDF has no concept of the internet or of reaching out to
somewhere to download things.  ASDF assumes you have somehow acquired the
systems you want to load and stored them on your hard drive, perhaps by sending
a check to an address and receiving a copy of the code on floppy disk, as many
of my old Lisp books offer in their final pages.</p>

<p><a href="https://www.quicklisp.org/beta/">Quicklisp</a> is another library that works on top of ASDF to provide the
"download projects from the internet automatically if necessary" functionality
that people expect in the modern world.  So when you say <code>(ql:quickload
:bobbin)</code> you’re asking Quicklisp to download Bobbin (and any dependencies) if
necessary, and then hand it off to ASDF to actually load the code of the
<code>bobbin</code> system.</p>

<p>Unlike ASDF, Quicklisp is relatively new in the Common Lisp world (it's only
about eight years old) and so is not bundled with any modern Lisp
implementations that I know of, which is why you need to install it separately.</p>

<h4 id="s35-recap"><a href="#s35-recap">Recap</a></h4>

<p>Here's a quick recap of the different layers of project structure you'll
encounter in Common Lisp.  Jot these down on a post it note you can refer to as
you're learning.</p>

<ul>
<li><strong>Files</strong> are files on your hard drive.</li>
<li><strong>Packages</strong> are containers of symbols. They are orthogonal to files.</li>
<li><strong>Systems</strong> are collections of code, instructions on how to load that code,
  dependency lists, and metadata. They are orthogonal to packages.</li>
<li><strong>Projects</strong> are high-level collections of... "stuff" such as code,
  documentation, maybe some image assets, etc.  They are (mostly) orthogonal to
  systems (are you seeing a trend here?).</li>
<li>Common Lisp itself knows about files and packages.</li>
<li>ASDF adds systems.</li>
<li>Quicklisp adds the internet.</li>
</ul>

<h3 id="s36-common-libraries"><a href="#s36-common-libraries">Common Libraries</a></h3>

<p>Common Lisp doesn't have as <em>large</em> of a community as some newer languages, but
it still has a lot of libraries because it's had a community for a longer time.
The stability of the core language means that many libraries written in portable
Common Lisp ten or fifteen years ago can still run just fine today.</p>

<p>In this final section I'll give you a quick overview of some of the more popular
libraries you might run into as you learn the language.  You don't have to use
all of them, but it's helpful to have some idea of what's available.</p>

<h4 id="s37-alexandria"><a href="#s37-alexandria">Alexandria</a></h4>

<p><a href="https://common-lisp.net/project/alexandria/">Alexandria</a> is one of the most popular Common Lisp libraries (the
name is a pun on the <a href="https://en.wikipedia.org/wiki/Library_of_Alexandria">Library of Alexandria</a>), and it's
a collection of all kinds of useful little utility functions like
<code>read-file-into-byte-vector</code> and <code>map-permutations</code>.</p>

<p>There are a <em>lot</em> of utility libraries for Common Lisp around — one rite of
passage is building up your own personal utility library over time — but
Alexandria is the most popular one.  Most projects with any dependencies at all
will eventually end up with Alexandria in the dependency graph somewhere.</p>

<h4 id="s38-bordeaux-threads"><a href="#s38-bordeaux-threads">Bordeaux Threads</a></h4>

<p><a href="https://common-lisp.net/project/bordeaux-threads/">Bordeaux Threads</a> was mentioned earlier.  Threads aren't part of the Common
Lisp standard, but most implementations provide their own custom interface for
working with them.  Bordeaux Threads wraps all these implementation-specific
interfaces and provides an API so you can write threaded code that will work
portably.</p>

<p>If you're looking for something like Java's <code>new Thread(() -&gt; foo()).start()</code>,
this is what you want.</p>

<h4 id="s39-cffi"><a href="#s39-cffi">CFFI</a></h4>

<p><a href="https://common-lisp.net/project/cffi/">CFFI</a> is a foreign-function interface library that lets you load
C libraries (e.g. <code>foo.dylib</code> or <code>foo.so</code>) and call the functions in them.  It
works by wrapping implementation-specific interfaces, because this isn't part of
the Common Lisp standard.</p>

<p>Unfortunately it has the same name as Python's FFI library, so if you're
searching for documentation make sure you're looking at the right version.</p>

<h4 id="s40-cl-ppcre"><a href="#s40-cl-ppcre">CL-PPCRE</a></h4>

<p><a href="https://edicl.github.io/cl-ppcre/">CL-PPCRE</a> is an implementation of Perl-compatible regular expressions.
If you're looking to use regular expressions in Common Lisp, this is what you
want.</p>

<h4 id="s41-drakma"><a href="#s41-drakma">Drakma</a></h4>

<p><a href="https://edicl.github.io/drakma/">Drakma</a> is an HTTP client.  If you need to make an HTTP request, this is what
you want.  There are other HTTP clients around, but Drakma is commonly used and
is fine for almost anything you might need.</p>

<h4 id="s42-iterate"><a href="#s42-iterate">Iterate</a></h4>

<p><a href="https://common-lisp.net/project/iterate/">Iterate</a> is a replacement for the <code>loop</code> macro.  It works similarly,
but has a more Lispy syntax and a well-defined API for extending it with new
iteration constructs.  I really like it myself, but beware: if you get used
to <code>iterate</code> going back to vanilla <code>loop</code> will feel painful.</p>

<h4 id="s43-local-time"><a href="#s43-local-time">local-time</a></h4>

<p><a href="https://common-lisp.net/project/local-time/">local-time</a> is a library for working with time and dates in Common Lisp.  The
standard has some basic support for times built in, but if you want to do much
calculation with times (including timezones) this is probably what you want.  If
you're looking for something like <a href="http://www.joda.org/joda-time/">Joda Time</a> in Common Lisp, this is
as close as you're going to get.</p>

<h4 id="s44-lparallel"><a href="#s44-lparallel">lparallel</a></h4>

<p><a href="https://lparallel.org/">lparallel</a> is a library that builds on top of Bordeaux Threads to make common
parallel processing operations much easier.  Think of it as <a href="https://www.gnu.org/software/parallel/">GNU Parallel</a> for
Lisp, with a few extra features (e.g. channels and tasks).</p>

<p>For example: if you've got a big vector you're mapping over with
<code>(map 'vector #'work some-vector)</code> you can split it into chunks and
run in multiple threads by changing it to
<code>(lparallel:pmap 'vector #'work some-vector)</code>.</p>

<h4 id="s45-named-readtables"><a href="#s45-named-readtables">Named Readtables</a></h4>

<p><a href="https://github.com/melisgl/named-readtables">Named readtables</a> is a library that adds namespaces for
readtables.</p>

<p>One painful part of the standard is that reader macros are added and removed to
the global readtable on the fly, so if you load multiple systems that define the
same reader macros things can get messy.  Named readtables adds some much-needed
hygiene to that process.  If you're working with reader macros at all you
absolutely want to use this.</p>

<h4 id="s46-roswell"><a href="#s46-roswell">Roswell</a></h4>

<p><a href="https://github.com/roswell/roswell">Roswell</a> is a couple of things rolled into one.  It's a C program that
handles installing and running multiple different Common Lisp implementations
(kind of like <a href="https://github.com/creationix/nvm">NVM</a> or
<a href="https://rvm.io/">rvm</a>), and it also provides a unified way to write small shell
scripts in Common Lisp and compile them into binaries.</p>

<p>I used Roswell for a little over a year, but I eventually stopped and now
I don't think it's worth the trouble, for a couple of reasons.</p>

<p>First: if you write portable code you generally don't need to worry running
a particular version of an implementation, because Common Lisp is so stable.
I usually just install the latest version of each implementation I use with
a package manager or by building from source.</p>

<p>Second: after using it for a while I found that Roswell was always very brittle
to upgrade, and whenever things broke it would spew an almost JVM-sized stack
trace without a decent error message.</p>

<p>For me, the negatives outweighed the positives.  I'd recommend simply using the
latest version of the implementations you care about and writing portable code.
For the compiling-into-binaries functionality I'd recommend using your
implementation's built-in support for this, or using UIOP's wrapper around that,
or using a separate library like <a href="https://shinmera.github.io/deploy/">Deploy</a>.</p>

<p>Of course your mileage might vary.  If you find yourself <em>really</em> needing to run
specific versions of specific Common Lisp implementations in rapid succession,
you should look into Roswell.</p>

<h4 id="s47-series"><a href="#s47-series">SERIES</a></h4>

<p><a href="https://www.cliki.net/Series">SERIES</a> was almost included in Common Lisp (it's in <a href="https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node347.html">Appendix A of
CLtL2</a>), but didn't quite make it.  It's a library for writing
functional code that looks like the traditional <code>map</code> and <code>filter</code> and <code>reduce</code>
operations but which compiles down to efficient loops.</p>

<p>If you're looking for Clojure's transducers in Common Lisp, this is what you
want.</p>

<h4 id="s48-st-json"><a href="#s48-st-json">st-json</a></h4>

<p>JSON support in Common Lisp is a god damn mess.  There are <a href="https://sites.google.com/site/sabraonthehill/home/json-libraries">an absurd number of
JSON libraries</a> and I don't really <em>like</em> any of them.</p>

<p>For me, the most important quality I need in a JSON library is an unambiguous,
one-to-one mapping of types.  For example: some libraries will deserialize JSON
arrays as Lisp lists, and JSON <code>true</code>/<code>false</code> as <code>t</code>/<code>nil</code>.  But this means <code>[]</code> and
<code>false</code> both deserialize to <code>nil</code>, so you can't reliably round trip anything!</p>

<p>I've settled on using <a href="https://marijnhaverbeke.nl/st-json/">st-json</a> and wrapping it up to be a little more
ergonomic with some glue code.  It's not the fastest solution out there, but
it works for my needs.  There are plenty of other options out there, so if you
have different needs than me you should look into them.</p>

<h4 id="s49-usocket"><a href="#s49-usocket">usocket</a></h4>

<p><a href="https://common-lisp.net/project/usocket/">usocket</a> is a library for networking sockets.  Sockets and networking aren't
part of the Common Lisp standard, but most implementations provide a custom
interface for working with them.  usocket wraps the implementation-specific
interfaces and provides an API so you can write networking code portably.</p>

<p>If you want to make Lisp listen on a port and read streams of bytes from
clients, or want to connect to a port and send raw bytes to it, this is what you
want.</p>

<h2 id="s50-good-luck"><a href="#s50-good-luck">Good Luck!</a></h2>

<p>I hope this whirlwind tour was useful.  Common Lisp is an old, deep language.
It's not something you can learn in a month, but if you're willing to spend the
time it will reward careful study.</p>

<p>Feel free to email me or pop into IRC or Discord if you have questions.</p>

<p>Good luck!</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Designed to Crash: the story of Antonov An-28 HA-LAJ and its demise (101 pts)]]></title>
            <link>https://admiralcloudberg.medium.com/designed-to-crash-the-bizarre-story-of-antonov-an-28-ha-laj-and-its-demise-169b3720d924</link>
            <guid>40434874</guid>
            <pubDate>Tue, 21 May 2024 22:35:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://admiralcloudberg.medium.com/designed-to-crash-the-bizarre-story-of-antonov-an-28-ha-laj-and-its-demise-169b3720d924">https://admiralcloudberg.medium.com/designed-to-crash-the-bizarre-story-of-antonov-an-28-ha-laj-and-its-demise-169b3720d924</a>, See on <a href="https://news.ycombinator.com/item?id=40434874">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div><div><div><a rel="noopener follow" href="https://admiralcloudberg.medium.com/?source=post_page-----169b3720d924--------------------------------"><div aria-hidden="false"><p><img alt="Admiral Cloudberg" src="https://miro.medium.com/v2/resize:fill:88:88/2*pZPMtIONqtJYi2xHYD_Ivg.jpeg" width="44" height="44" loading="lazy" data-testid="authorPhoto"></p></div></a></div><figure><figcaption>HA-LAJ lies in a field in Oxfordshire, UK, after its crash landing. (AAIB)</figcaption></figure><p id="0c08">On the 28th of August 1993, fire crews at RAF Weston-on-the-Green in Oxfordshire, England responded to the crash of an unusual airplane — a Soviet-designed Antonov An-28 twin turboprop, which had been chartered by a Royal Air Force parachuting club for the purpose of carrying skydivers. Shortly after takeoff with two Russian pilots and 17 parachutists on board, the crew attempted to retract the flaps, only for a bizarre malfunction to occur, as both engines failed at the very instant the flap lever was selected. With only seconds to react to the unbelievable failure, the captain managed to steer the Antonov to a safe crash landing in a cornfield nearby, saving the lives of everyone on board. Although the plane was written off, nobody was seriously injured.</p><p id="5db8">The incident presented Britain’s Air Accident Investigation Branch with a rare opportunity to investigate the crash of a Soviet aircraft type on British soil, just a year and a half after the collapse of the USSR. Indeed, the story they uncovered was a strange one — from the murky chain of events that led to the An-28’s unapproved modification for parachuting, to the plane’s simultaneous registration in two different countries, to the baffling electrical fault that caused the crash. And at the root of it all was a design decision that left investigators scratching their heads, a single point of failure that made the An-28 uniquely vulnerable. How had the design ever passed muster? And why did the design seemingly change in between the original drawings and the actual production of the aircraft? Without access to the details of the design process, investigators were left to speculate, but what they wrote nevertheless provides a fascinating window into British experts’ early post-Cold War opinions on Soviet aircraft.</p><p id="c189">◊◊◊</p><figure><figcaption>RAF Weston-on-the-Green is used by the RAF for both military and sport parachuting. (Richard Flagg)</figcaption></figure><p id="e052">Built in 1916 at the height of WWI, RAF Weston-on-the-Green is a grass airstrip belonging to the Royal Air Force, located near the town of Bicester in Oxfordshire, England. No aircraft are based there today, but the field has long been used as a practice drop zone by the Parachute Training School out of nearby RAF Brize Norton, the United Kingdom’s largest airbase. The airfield is also used for the same purpose by the Royal Air Force Sports Parachuting Association, or RAFSPA, which provides a framework for RAF members to engage in competitive and sport parachuting (as opposed to parachuting for military purposes). Although up-to-date information is hard to find, this was historically done using civilian aircraft either based at Weston-on-the-Green or hired from elsewhere.</p><p id="f454">In late August 1993, RAFSPA intended to host a special parachuting event at RAF Weston-on-the-Green, for which the club required the services of an aircraft capable of operating out of the grass airstrip while carrying up to 17 parachutists, who would jump from airplane in flight. For these purposes, RAFSPA hired a company called Avia Special Ltd., which was to act as a broker between the club and the operator of a qualifying aircraft. However, Avia Special was unable to find any aircraft in the United Kingdom that met RAFSPA’s requirements and were available on the specified dates. Instead, Avia Special began looking abroad, and through some sequence of events that remains unclear, they became aware of a Hungarian company called G92 Commerce that was conducting parachute jumps out of a Soviet-built Antonov An-28.</p><figure><figcaption>The An-28 was featured on a USSR postage stamp. (Public domain image)</figcaption></figure><p id="6565">The An-28 is a high-wing, twin turboprop aircraft with a distinctive double tail, capable of carrying up to 18 passengers or 1,750 kg of cargo. In terms of niche, its closest Western equivalents are probably the DHC-6 Twin Otter and the Short Skyvan.</p><p id="0b46">The origins of the An-28 date back to the 1960s, when the Kyiv-based Antonov Design Bureau first produced the An-14, which had a similar cockpit, wing, and fuselage cross-section. The An-14 first entered service in 1966, and three years later Antonov debuted the first An-28 prototype, which was essentially a stretched An-14 with better engines. However, a second prototype was not built until 1975, and in 1978 further delays were most likely incurred when it was decided to move production of the type to the PZL-Mielec factory in neighboring Poland. Mass production did not actually begin until 1983, the first Polish-built airframe didn’t fly until 1984, and the type was finally certified by the USSR for civilian use only in 1986, fully 17 years after the first flight of the prototype. Just under 200 airframes were built before the USSR collapsed five years later.</p><figure><figcaption>Watch as the accident aircraft is assembled on site in Antarctica, then takes off on skis! (Antonov Aircraft Company)</figcaption></figure><p id="7406">The particular An-28 that would become the star of this story was built in 1988 with the registration CCCP-28778, and was immediately transferred to the Petrozavodsk branch of the Leningrad Board of Civil Aviation, itself a branch of the Soviet state aviation company Aeroflot. It’s not possible to track everything it was used for between 1988 and 1993, but it apparently saw a wide variety of applications. Sometime in the late 1980s CCCP-28778 was transported by ship to Antarctica, where it was fitted with skis, assembled on site, and tested for use transporting people and goods between bases. Information about this endeavor is hard to find but indications are that the An-28 proved unsuitable for the Antarctic environment, possibly due to its lack of range, and it was shipped back.</p><p id="5e26">Following the collapse of the USSR in 1991, there is a period of uncertainty as to the ownership of the plane. The accident report states that the certificate of registration continued to list the Leningrad Board of Civil Aviation as the sole owner through the time of the accident in 1993, but this obviously can’t be true because this entity was dissolved in 1992. Records available online indicate that it was briefly in the possession of Archangelsk Airlines, which later became Aeroflot Nord, now known as SmartAvia. However, the only change to its official registration document occurred when someone crossed out the “CCCP” identifier and hand-wrote “RA” for Russia instead.</p><p id="c647">In actuality, in May 1993 the aircraft was sub-leased with crew to a Budapest-based company called G92 Commerce, which in turn had an agreement with the Hungarian Aeronautical Association in which the latter would act as the operator. The aircraft was then re-registered in Hungary with the registration HA-LAJ, but the Russian authorities were never informed and the aircraft remained on their books as RA-28778, rendering the subsequent Hungarian registration technically invalid.</p><figure><figcaption>Personnel load an An-28 through its rear clamshell doors. Normally only the left door is opened for passenger embarkation, as shown in this picture. (Wikimedia user Игоревич)</figcaption></figure><p id="7e0e">Sometime after HA-LAJ’s registration in Hungary, Avia Special contacted G92 Commerce to arrange for the use of the aircraft between August 27th and September 6th for the RAFSPA parachuting event at Weston-on-the-Green. By then the aircraft had already been modified for parachuting, by folding the passenger seats against the walls and removing the rear access doors. This pair of doors was normally used for ground boarding and opened in a clamshell format, but on HA-LAJ they had been physically removed from the airplane to facilitate the parachutists’ mid-air disembarkation.</p><p id="cdeb">Subsequently, on August 27th the aircraft departed Budapest under the command of two Russian pilots who were presumably employed by the aircraft’s Russian owner. In the left seat was 40-year-old Captain Sergei Suskin, who had about 9,400 flying hours including 1,200 on the An-28. I was not able to find the name of the First Officer, but he was 26 years old and had 2,310 total hours, including 510 on type.</p><p id="f263">After stopping for fuel in Maastricht, Netherlands, HA-LAJ landed in Maidenhead, UK for a customs inspection, then flew onward to Weston-on-the-Green, arriving at around 15:30 that afternoon.</p><p id="5eb1">The parachuting event itself got underway at 8:30 the following morning, when HA-LAJ took off from the grass field with its first load of parachutists. The seating arrangement was ad-hoc, as the parachutists sat on the floor of the cabin with no particular restraint. Some flights also included a parachute club official who observed the crew to confirm that they were following the provisions of the British Parachute Association Operations Manual. In each case, once everyone was on board, the aircraft would take off, climb out to the west, turn around, and cross back over the airfield heading north, at which time the parachutists would jump one after another through the An-28’s rear access door. The aircraft would then come back around and land on the same runway from which it took off, with a total airborne time of only about 15 minutes.</p><figure><figcaption>HA-LAJ as it would have appeared around the time of the accident. (Sabok Balázs)</figcaption></figure><p id="04d6">Twelve such flights, each carrying up to 17 parachutists, proceeded beautifully. It was, of course, the unlucky 13th flight on which the real story began.</p><p id="68db">With Captain Suskin at the controls and 17 people in the back — there was no observer this time — the aircraft departed the grass runway 36 as it had on each previous sortie, then began its regular climb. The after takeoff checks on the An-28 were rather simple as the aircraft does not have retractable landing gear. The only significant configuration change required was to retract the flaps, which were extended on takeoff in order to boost lift at low speeds. Although a couple of intermediate positions were available, the pilots of HA-LAJ didn’t need them; instead, at around 500 feet above the ground, Suskin normally had his First Officer move the flaps straight from the fully extended position to fully retracted, while he pitched down to increase speed.</p><p id="23a1">Although most aircraft this size have a fully mechanical flap lever, on the An-28 this would have been done using an electric flap switch. Indeed, just as they had already done 12 times that day, at 500 feet Suskin called for flaps up, and the First Officer reached for the electric flap switch, cycling it three times in rapid succession to bring the flaps all the way back to the fully retracted position. It was at that moment, just as the flaps started retracting, that all hell broke loose.</p><p id="db0d">◊◊◊</p><figure><figcaption>How electrical grounding works on a moving vehicle. The symbol of the triple line is used to represent a grounding point on all the diagrams in this article. (Ted Mortensen)</figcaption></figure><p id="b593">To understand what happened at that precise moment, we need to go back to basics, starting with electrical systems — that is, not just the An-28’s electrical system, but any battery-powered electrical system. That’s because, when you get down to it, the system that (for instance) retracts the An-28’s flaps is not fundamentally different from a basic circuit that you might build in a grade school science class. In any such setup, negatively charged electrons want to flow from the negative end of the battery to the positive end, so if you connect those two ends to one another with a conductive material — such as a wire — you will complete a circuit, through which the electrons will flow as a current. Various fun devices can then be added to this circuit in order to put the electrons to work as they pass by. A light bulb would be the classic example.</p><p id="c1fd">However, as the constructors of early telegraph systems discovered, when building a very large circuit it takes a lot of wire to bring the electrons all the way from the battery to the place where you want them to do work, and then all the way back again afterward. Fortunately, those early pioneers of the telegraph discovered that you don’t need the return wire as long as the end of the outbound wire and the corresponding terminal of the power source (in our case a battery) are connected to the same physical object, which for telegraph lines was the planet Earth itself. That’s why we call this technique “grounding.”</p><p id="b633">On moving vehicles, including both cars and aircraft, it’s obviously not possible to connect electrical circuits through the physical ground. Instead, circuits on such vehicles are “grounded” via the vehicle chassis. Therefore, when a particular circuit is energized, the electrons will flow from the battery, down the wire to the device in question, and thence into the chassis, through which the electrons are conducted straight back to the opposite terminal of the battery, which is also connected to the chassis.*</p><p id="00cb">Should this critical connection between the wire and the chassis be disrupted, the circuit will become “ungrounded,” and the current will seek other routes back to the opposite terminal — which might be through your body if you simultaneously touch the chassis and the end of the ungrounded wire, so don’t do that.</p><blockquote><p id="8e65">*[Note: Technically the electrons flow the other way — from the negative terminal, through the chassis, up through the grounding point, and back down the wire to the positive terminal. But that’s pretty spooky, and it makes no practical difference, so we normally pretend that the current flows the other way.]</p></blockquote></div><div><figure><figcaption>How the current should flow through the flap operating system under normal conditions. (AAIB, annotations mine)</figcaption></figure></div><div><p id="1052">On the An-28, the electrically actuated flap system drew power from a 27-volt battery. Moving the electric flap switch to any of its various positions would complete a circuit, causing current to flow from the battery and through the flap operating solenoids in the manner corresponding to the selected position. This current would then go to ground via a terminal block called A6X1, which served as a common endpoint for a number of different wires from several circuits.</p><p id="2e5a">After reaching the A6X1 terminal block, the normal current path was through one of two wires, called M01 and M02 respectively, which both connected to a single “grounding screw.” This screw was in turn attached to the aircraft chassis, allowing the current to enter the chassis and return to the opposite terminal of the battery.</p><figure><figcaption>A feathered vs. unfeathered propeller. (SkyBrary)</figcaption></figure><p id="3e57">However, the flaps were not the only system connected to ground via terminal block A6X1. The other major system utilizing this terminal block was the An-28’s propeller autofeather mechanism.</p><p id="ee80">As I’ve discussed in many previous articles, the propellers on turboprop aircraft have adjustable blade pitch. When the edges of the blades are in line with the propeller’s plane of rotation, they don’t take any bite out of the air; they will spin freely with little resistance. Increasing the angle of the blades will cause them to start taking a bigger bite out of the air, forcing air backward to generate thrust. But if the blade angle increases so far that the edges of the blades are perpendicular to the plane of rotation, then the propeller will no longer be able to force any air backward, and thrust again drops to zero. This is known as the “feathered” position (see above).</p><p id="fa58">If a turboprop engine were to fail in flight, the turbine would stop powering the propeller. If the blades are still angled to produce thrust, then instead of the blades taking a bite out of the air, the oncoming air will start to take a bite out of the blades, so to speak, driving the propeller, and thus the turbine, in reverse. This causes a lot of drag that negatively affects performance, so in order to prevent this from happening, turboprop aircraft are equipped with an autofeather system that automatically rotates the blades to the feathered position in the event of an engine failure. This can also be done by the pilots using a cockpit switch, should the need arise. Once the blades are feathered, the oncoming airflow will no longer be able to get enough leverage to drive the propeller, eliminating the excess drag.</p><figure><figcaption>How the current should flow through the feathering circuit during manual or automatic propeller feathering. This isn’t “normal” operation because normally no propellers should feather in flight. (AAIB, annotations mine)</figcaption></figure><p id="df96">On the An-28, the autofeather system could be activated by closing one or both of two switches, designated 7S19 and 7S20, respectively, one for each propeller. (Henceforth, I’ll be calling these the “feathering switches.”) The switches each had two terminals: a permanently non-energized terminal that was normally closed (i.e. making contact), and a normally open terminal, which if it were to close would energize the feathering circuits. These switches controlled power to the feathering circuits regardless of whether the feathering command was automatic or manual. Should either of these circuits be completed, power would flow from the battery, through the activated switch(es), and down a wire to the 7-K6 feathering relays, which transmitted the feather command to the blade pitch actuation system. After that, the current went to ground in one of two separate locations, one for each of the two identical circuits (depicted above).</p><p id="abf1">However, when the feathering circuits are not energized, which is essentially all of the time, the normally closed ends of both feathering switches are connected via wires to the A6X1 terminal block, and thence to ground via that terminal block’s grounding screw, described previously. These wires should never under any circumstances be energized, because when the feathering system is operational the current will bypass them, and when it is not, there should be no current present. So why was it necessary to ground the normally closed side of the switches, even though there wasn’t supposed to be any current in the circuit when this side of the switch was closed? The answer, as far as I can tell, is that it’s simply good practice to ground any exposed conductor. If the normally closed side of the switch was left connected to nothing, it could serve as an entry point for electromagnetic interference, potentially resulting in uncommanded feathering of one or more propellers. You can think of that exposed conductor like a lightning rod sticking out into space, inviting random energy sources to induce a current into the feathering circuit. Grounding the normally closed side of the switch was therefore a prudent move. As for where to ground it, the A6X1 terminal block was probably chosen just because it was nearby.</p><p id="d3c0">All of this may be complicated to visualize, but hopefully the attached diagrams are helping. Studying them carefully should make it much easier to understand the failure that was about to occur. Now, with all this in mind, can you guess where this system had a potential single point of failure?</p><p id="395a">◊◊◊</p><p id="d412">If you guessed the grounding screw on terminal block A6X1, then congratulations, you’re better at this than whoever designed the An-28’s electrical system.</p><p id="e19f">The grounding screw was, in fact, simply a screw, and like any screw mounted in a high-vibration environment, it was capable of loosening over time. And the looser it got, the less effectively it contacted the chassis. In fact, if the screw was loose enough, then the resistance between the screw and the chassis would become so great that this would no longer represent the optimal current path.</p><figure><figcaption>The “hair in pipe” analogy for electrical resistance. (Wikimedia user Sbyrnes321)</figcaption></figure><p id="d57b">Electrical resistance is the opposite of conductance. The higher an object’s resistance, the harder it is to push a current through that object. The Wikipedia page on resistance and conductivity has a great metaphor for this, which I will shamelessly steal. If you have a water pipe with water flowing through it at a given rate, then that pipe becomes partially blocked with hair, a higher water pressure is required to maintain the same flow rate. Extrapolating further, if another path for the water exists that has a more favorable pressure-to-flow-rate ratio, then the majority of the water will start going that way instead. Electricity is much the same way: the electrons will flow down all available paths at a rate inversely proportional to their relative resistance.</p><p id="8003">So, if the grounding screw on the A6X1 terminal block were to pull out of the chassis, then there would be an air gap between the screw and the chassis, which has a high resistance. Furthermore, if that resistance is high enough, then the majority of the current might start flowing down a path with lower resistance instead.</p><p id="c0a5">Now imagine that the flap operation circuit is energized with the grounding screw no longer connected to the chassis. What’s the path of least resistance back to the battery now? What other path to ground exists?</p><figure><figcaption>The failure mode that caused the crash of HA-LAJ. (AAIB, annotations mine)</figcaption></figure><p id="bdb6">In fact, with the grounding screw pulled out sufficiently far, the main current will flow from the flap circuit, into terminal block A6X1, then — skipping the screw entirely — <em>up the feathering circuit grounding wires, across the normally closed side of the feathering switches, through the feather circuit wiring, past the 7-K6 feathering relays, and out through the normal grounding points for the feathering circuits. </em>This path is depicted above.</p><p id="8e05">If the resistance between the screw and the chassis was sufficiently high, then enough current could flow down each feathering circuit to activate both 7-K6 feathering relays, causing both propellers to feather simultaneously. This is in fact what happened as the pilots of HA-LAJ retracted the flaps at 500 feet on their 13th parachuting flight.</p><p id="d1f1">As soon as the feathering relays were energized, a command was sent to the blade pitch controllers to feather the propellers and hold them there. Then, because the propellers provide no thrust when feathered, the An-28’s engine failure detection system detected a loss of thrust in both engines, causing a number of knock-on effects.</p><p id="bde3">The An-28 has a fairly sophisticated engine failure detection system that automatically shuts off fuel to the engine when a large discrepancy is detected between the power lever position and certain engine operating parameters. Furthermore, because a failed engine on the An-28 tends to produce a large and sudden yawing moment, the system also automatically deploys the outboard wing spoiler on the opposite side from the engine failure, in order to ensure that drag on both sides is as close to equal as possible. This makes the plane easier to control with one engine inoperative. However, in this case, when the engine failure detection system registered the loss of thrust in both engines, it not only cut fuel to each engine but also deployed the outboard spoilers on both wings, because the left engine failure triggered the right spoiler, while the right engine failure triggered the left spoiler. This was consistent with the system’s operating logic but was nevertheless completely unnecessary, because deploying both spoilers simultaneously just increased drag on the airplane while providing no controllability benefits.</p><p id="6364">The pilots of HA-LAJ had no idea that any of this was about to occur. Instead, it felt almost like the flap switch had suddenly turned into a “crash airplane” button. At the same instant that the flaps were retracted, both propellers feathered, fuel was cut to both engines, and both spoilers deployed, causing a catastrophic loss of both thrust and lift. The plane began to decelerate rapidly, forcing Captain Suskin to push the aircraft into a dive in order to maintain airspeed. If he tried to reduce their descent rate, it was certain that they would lose speed and stall, leading to a devastating crash. But the other outcome didn’t look rosy either. They obviously didn’t have enough height to return to the airfield, but the terrain was littered with obstacles like trees, ditches, and roads. With only seconds to act, Suskin and his First Officer made a snap decision to turn to the right and land in a field of recently harvested corn stubble. There was no time for a brace call, but the parachutists didn’t need one — it was obvious that they were going down, and all they could do was hang on for dear life, since the plane didn’t have seat belts.</p><figure><figcaption>The wing attachment points failed during the ground slide but the fuselage remained intact. (AAIB)</figcaption></figure><p id="aba6">Moments later, HA-LAJ touched down hard in the cornfield, with a considerable descent rate, a slight right bank, and a nose high attitude with a forward airspeed of 92 knots. The landing gear swiftly collapsed, causing both wings to fold downward and strike the ground, but within just a few seconds the plane slid to a stop on its belly, otherwise intact.</p><p id="976a">When the plane came to a halt, the 19 passengers and crew discovered that despite the lack of restraints, everyone had survived the crash landing, and in fact no one was even seriously injured. Furthermore, no fire broke out, and egress was trivial because of the removed rear doors. By the time the pilots had shut down the plane’s remaining systems, all the passengers were already off the airplane with no need for an evacuation call. Subsequently, the First Officer was the last person off, exiting through the cockpit window after stopping to disconnect the battery. Emergency services arrived shortly thereafter, but there was little for them to attend to.</p><p id="4f65">◊◊◊</p><figure><figcaption>The A6X1 terminal block as it was found after the accident. (AAIB)</figcaption></figure><p id="12ab">Because the crash was minor and occurred over a bank holiday weekend, Britain’s Air Accidents Investigation Branch didn’t begin an investigation until three days later. Nevertheless, when the investigation did get underway, it resulted in a number of fascinating findings.</p><p id="6f27">Although both pilots had already returned to Russia by the time the AAIB got there, investigators were able to obtain statements from both through the Russian Department of Air Transport, in which they described how the propellers feathered, the engines shut down, and the spoilers deployed when they attempted to retract the flaps. The deployment of the spoilers and feathering of the propellers was confirmed not only by the condition of the wreckage, but by a photograph of the airplane in flight, taken shortly before impact by a nearby witness. My understanding is that this photo remains the property of the photographer and has not been released.</p><p id="ff9a">Because the An-28 was designed in the Soviet Union, and because Russia had inherited the USSR’s obligations, investigators from Russia participated in the inquiry, and in fact they were the first to identify a possible mechanism by which the pilots’ command to retract the flaps could have triggered the observed failures. Their suspicions were subsequently proven right when on-scene measurements by the AAIB detected elevated electrical resistance when the flap operating circuit was energized. Subsequently, the grounding screw connecting terminal block A6X1 to the chassis was found loose, having unscrewed itself slowly over time.</p><figure><figcaption>Another image of the airplane, taken shortly after the crash by what I assume to be one of the passengers. (Unknown author)</figcaption></figure><p id="7e9b">Meanwhile, the AAIB began to uncover a number of facts that raised questions about why HA-LAJ was allowed to fly parachutists at Weston-on-the-Green in the first place. One glaring issue was brought to light by representatives of the Antonov aircraft company — namely, that the An-28 was never intended for parachuting operations, was not approved for that purpose, and was never tested or certified to fly with the rear clamshell doors removed. Representatives of the Russian Department of Air Transport expressed the same views. This contradicted the plane’s Hungarian airworthiness certificate, which stated that HA-LAJ was approved for flight in that configuration. In fact, the operation of the aircraft without the rear doors so alarmed the representatives of Antonov that the final report on the accident describes their statements against the practice as “categorical” and “emphatic.” Elaborating further, Antonov personnel told the AAIB that the An-28 had never been tested for adverse strength, metal fatigue, or flight characteristics without the doors, and that in their view turbulence with the doors removed could result in structural damage to the airplane. However, investigators also wrote that Antonov was strongly opposed to accepting any “liability” — which does make one wonder how much of this response was out of genuine concern, and how much was an attempt to deflect responsibility for the design decisions that caused the crash, which I’ll cover in more detail in a moment.</p><p id="28e6">Another issue that came up was of course the registration of the airplane in two different countries simultaneously. This lapse was accidental, but investigators noted that had Hungarian authorities informed their Russian counterparts of the new registration, as was their obligation, then they would have been required to provide information about the aircraft to the Russian Department of Air Transport. Since this agency was apparently aware that the aircraft was not approved for parachuting operations, it’s possible that they might have brought the discrepancy to the Hungarians’ attention had this required step been completed.</p><p id="e389">Lastly, and perhaps most importantly, investigators also examined the process by which HA-LAJ was granted permission to fly in the United Kingdom.</p><p id="5b81">Under UK law at the time, in order to hire a foreign aircraft to perform “aerial work,” including parachuting, it was necessary to apply for explicit approval from the Department of Transportation. After demonstrating that no UK-based company could perform the work in question, the Civil Aviation Authority’s Safety Regulation Group–Operating Standards Division was required to verify, among other items, that the aircraft was currently being used for the specified type of work in its home country; that the crew were competent and qualified; and that there was a parachute operations supplement to the Flight Manual. Submission of the aircraft’s certificate of airworthiness and the certificate of the operating company were also required.</p><p id="38d2">In the case of HA-LAJ, there was no question about the competence of the crew or the presence of the correct documents, and the aircraft had previously conducted parachuting flights in Hungary, so the permit was issued. However, the CAA failed to discover that the An-28 was not approved for parachuting operations, because there was no requirement to consult the manufacturer as long as HA-LAJ’s certificate of airworthiness indicated such an approval, which it did. The AAIB was therefore concerned that the verification process had become a rubber stamp, causing discrepancies to be missed. In a worst-case scenario, it might even have been possible for an applicant to hoodwink the CAA simply by inserting false approvals into the submitted documentation. As a result, the AAIB recommended that the CAA Safety Regulation Group consider checking directly with the states of design, manufacture, and registry of aircraft from the former USSR before giving them permits for aerial work in the UK, in order to verify the documentation.</p><p id="9be8">◊◊◊</p></div><div><figure><figcaption>Two possible design features that could have prevented the accident. (AAIB, annotations mine)</figcaption></figure></div><div><p id="5d9d">However, perhaps the most interesting part of the AAIB’s report on the accident was its analysis of the design of the An-28’s electrical system.</p><p id="b535">Unsurprisingly, the AAIB wrote that the use of a common grounding point for several systems, whose failure could cause the uncommanded shutdown of both engines, was “not sound design philosophy.” Some consolidation of grounding points is desirable in order to reduce the number of stray currents flowing through the aircraft chassis, but care must be taken to ensure that single points of failure are not created. The ideal configuration would have been to isolate the safety-critical autofeather circuit from all other systems by grounding the normally closed side of the feather switches at a separate location. Alternatively, devices called reverse current diodes could have been installed on the wires connecting the normally closed sides of the feather switches to the terminal block. A reverse current diode ensures that current can only flow in one direction, which in this case would be from the switches to ground, while preventing current flow from ground to the switches. The AAIB pointed out, rather incredulously, that use of reverse current diodes on aircraft had been the standard means of protecting critical systems from stray currents since the 1950s. The accident aircraft did have some reverse current diodes in certain locations, but investigators observed that their use was not systematic.</p><p id="18f7">It’s also worth mentioning an issue that I previously discussed in my article on Capital Airlines flight 20 — namely, the isolation of the autofeathering systems for each engine, so that only one propeller may feather at a time. Isolating these systems has been standard since the late 1950s, so I would presume that the An-28 had some sort of interlock that should prevent both propellers from autofeathering simultaneously. The AAIB’s diagram of the An-28’s feathering switches shows a feature that might be an interlock, although it’s not labeled. If so, then the interlock appears to function by ensuring that the remaining switch cannot activate if one switch is active already. This design would have been fine, except that in this accident scenario it was rendered useless, because the current entered the feathering circuits through the normally closed side of the switches, energizing the feathering relays without either switch ever activating.</p><blockquote><p id="da7e">Note: After publication, readers pointed out to me that the lack of any retention mechanism on the grounding screw was a design flaw as well. Throw it on the pile!</p></blockquote><figure><figcaption>The Antonov design engineers’ original intention, according to the original design drawings. (AAIB, annotations mine)</figcaption></figure><p id="a32d">Although the AAIB didn’t have access to the personnel involved in the An-28’s design and manufacturing process, they were able to examine Antonov’s original design drawings, which contained interesting differences from how the plane was actually built. Whereas on the actual aircraft the two wires M01 and M02 connected the A6X1 terminal block to a common grounding screw, the original drawings depicted these wires connecting to separate grounding screws. The intention presumably was that if one screw failed, the systems attached to A6X1 would remain safely grounded via the other. However, the AAIB pointed out that while two grounding screws were better than one, this was still far from an ideal solution because there was no way to detect if one screw was no longer grounding correctly. This condition could therefore persist indefinitely until the second screw also failed, causing an accident anyway.</p><p id="ad39">In its final report, the AAIB wrote that “widely used design principles for identifying common failure modes… should have revealed the potential hazard.” Investigators pointed out that common failure mode analysis techniques had been used in the West since the 1950s, and more complex fault tree analyses since the 1960s. The fact that the AAIB took the time to mention these dates underscores the investigators’ apparent confusion over how such a blatant design flaw could have made it into an aircraft that entered service only in 1986. Investigators wrote that they didn’t know what failure analysis techniques were in use in the USSR when the An-28 was designed, but that in any case such techniques evidently were not applied to the system in question — or if they were, then it was certainly before the decision to reduce the number of grounding screws on terminal block A6X1 from two to one.</p><p id="1fba">The fact that the original design drawings included two separate grounding screws indicated that Antonov engineers were aware of the need for redundancy in this area, even though their solution was suboptimal. That this design was changed prior to production, apparently without any further analysis, may have been symptomatic of the way aircraft design and manufacturing were organized in the Soviet Union. Although Antonov today is an independent company that designs and builds its own aircraft, under the USSR it was a “Design Bureau,” which was responsible for the aircraft design phase only. The AAIB report mentions that once the drawings left Antonov’s headquarters in Kyiv, the design bureau “ceased to have total control over the production standard,” because the production engineering and assembly phases were handled by different organizations within a ministry-level umbrella. That meant that the engineers responsible for building Soviet aircraft often had limited communication with the engineers responsible for designing them. In contrast, a traditionally organized Western manufacturer such as Boeing has design and production engineers under the same roof. Production of many components may be outsourced, but Boeing and its suppliers sign contracts stipulating the specifications of the systems being produced, and the supplier must inform Boeing of any intent to deviate from those specifications if they want to avoid being sued. Such safeguards are obviously imperfect, but the Soviet Union lacked even these. As a result, Soviet planes were more likely to suffer from design flaws introduced at the production stage, which is a problem I previously discussed in my article on LOT Polish Airlines flights 007 and 5055. The An-28 would have been particularly vulnerable to this type of mistake due to its abnormally long and uneven development process.</p><p id="4d8b">◊◊◊</p><figure><figcaption>Another view of HA-LAJ after the crash. (Alan Bushell)</figcaption></figure><p id="f6fc">In 1993, the aviation industry in the West still had little knowledge of most Soviet aircraft types, and the strengths and weaknesses of those types were not widely known there. An An-28 from Hungary could not have been hired to perform work in the UK before about 1990, and neither the CAA nor the intended users knew much, if anything, about the circumstances under which it was built. Despite this, the CAA could allow such an aircraft into the UK to perform work with UK nationals on board without any particular scrutiny, because Hungary (the state of registration), Poland (the state of manufacture), and the USSR (the state of design) were all members of the International Civil Aviation Organization and were expected to uphold that organization’s minimum safety standards. Today, some countries such as the United States are able to audit the extent to which each other country is adhering to ICAO standards, but in 1993 this type of auditing was a very new concept and it doesn’t seem that the UK was doing it.</p><p id="7d71">The AAIB wrote that the An-28 as built did not meet ICAO standards requiring that aircraft be designed to minimize the probability of inadvertent operation of systems affecting flight controls and powerplants. It was unclear to the investigators whether or how Antonov addressed these ICAO standards during the design process. And yet the UK CAA was required to trust that these standards were met without any direct verification. Such oversight would only be provided if the aircraft were leased to a company with a UK Air Operator Certificate, which HA-LAJ was not. As a result, the AAIB recommended that the UK CAA “develop an increased awareness of the aircraft design and manufacturing philosophies which have been, and are being used in the former Soviet Socialist Republics.”</p><p id="9dea">◊◊◊</p><figure><figcaption>US Air Force C-145As at Eglin Air Force Base. (US Air Force)</figcaption></figure><p id="4fcc">The story of the An-28 did eventually reach something like a happy ending. Starting in 1993, the PZL-Mielec aircraft plant in Poland began producing license-built An-28s with updated avionics and Canadian-made Pratt &amp; Whitney PT6A engines, intended to meet Western safety and performance standards. Redesignated as the PZL M28 Skytruck, the revamped model sold more examples than the original and was still in production as recently as 2019. The Skytruck found plenty of users outside the traditional markets for Eastern Bloc aircraft, including, interestingly enough, in the US military. In 2012, the United States Air Force purchased around 10 M28 Skytrucks, which were given the military designation “C-145A Combat Coyote.” A brief Air Force Times article on their introduction made no mention of the plane’s Soviet pedigree, but it did quote Colonel JD Clem of the Air Force Special Operations Command, who said, “The [Skytruck] is simply to haul people around. There is nothing really cosmic about it at all.”</p><p id="55e2">The C-145A served in the US Air Force for 10 years, until the last example was retired in 2022. An article posted on the Air Force Reserve Personnel website at the time quoted Master Sgt Bobby Barton of the 919th Special Operations Group, which operated the type: “There weren’t many other aircraft in the Air Force like this one,” he said. “It really stood out from the crowd.” But this article didn’t acknowledge where the design came from either. In fact, I was not able to find any that did.</p><figure><figcaption>One last photo of HA-LAJ in better times. (Unknown author)</figcaption></figure><p id="393e">As for the crash of HA-LAJ, its significance was limited at the time and has only lessened since. It was, at the end of the day, a small crash involving a small plane in an out of the way location from which everyone walked away. I only found out about it because it was listed in the “recently published reports” section of a different AAIB accident report from around the same time. And yet the more I read, the more interesting the story became, from the background of the airplane to its head-scratching design flaws to the outlandish failure that caused it to crash. From the language in their report, it’s possible to surmise that the AAIB investigators had much the same reaction. How often did they get to investigate the crash of an Antonov on British soil? Certainly not every day!</p><p id="428c">Often I end these stories with some kind of lesson, but this time I don’t think I will. “Don’t design a plane with a single point of failure that causes both engines to fail when you retract the flaps” is probably too obvious. And ultimately the reason I wrote this article is because I thought the story was worth sharing for its own sake. So I hope, having read all of this, that you agree.</p><p id="c70f">_______________________________________________________________</p><p id="8205"><em>Don’t forget to listen to Controlled Pod Into Terrain, my podcast (with slides!), where I discuss aerospace disasters with my cohosts Ariadne and J! </em><a href="https://www.youtube.com/@ControlledPodIntoTerrain" rel="noopener ugc nofollow" target="_blank"><em>Check out our channel here</em></a><em>, and listen to </em><a href="https://www.youtube.com/watch?v=QDwtEIDEgS0" rel="noopener ugc nofollow" target="_blank"><em>our latest episode, about an airline composed entirely of pure, distilled crime.</em></a><em> A bonus episode for Patreon subscribers is also out now, in which we analyze a bad Russian plane crash movie. Alternatively, download audio-only versions via </em><a href="https://rss.com/podcasts/cpit/" rel="noopener ugc nofollow" target="_blank"><em>RSS.com</em></a><em>, or look us up on Spotify!</em></p><p id="f891">_______________________________________________________________</p><p id="521a"><a href="https://www.reddit.com/r/CatastrophicFailure/comments/1cjowzf/1993_the_crash_of_halaj_a_hungarianoperated/?" rel="noopener ugc nofollow" target="_blank">Join the discussion of this article on Reddit</a></p><p id="4369"><a href="https://www.patreon.com/Admiral_Cloudberg" rel="noopener ugc nofollow" target="_blank">Support me on Patreon</a> (Note: I do not earn money from views on Medium!)</p><p id="008c"><a href="https://twitter.com/KyraCloudy" rel="noopener ugc nofollow" target="_blank">Follow me on Twitter</a></p><p id="a3f4">Visit <a href="https://www.reddit.com/r/AdmiralCloudberg/" rel="noopener ugc nofollow" target="_blank">r/admiralcloudberg</a> to read and discuss over 260 similar articles</p><p id="f4da">(New feature!) <a href="https://docs.google.com/document/d/10VvaZkFjEudeSr8_W-9ff34Sez6r0R_tC93IHiRg0xg/edit?usp=sharing" rel="noopener ugc nofollow" target="_blank">Bibliography</a></p></div></div></article></div>]]></description>
        </item>
    </channel>
</rss>