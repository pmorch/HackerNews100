<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 08 Aug 2024 15:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[CVE-2023-2163: How we found and fixed an eBPF Linux Kernel Vulnerability (142 pts)]]></title>
            <link>https://bughunters.google.com/blog/6303226026131456/a-deep-dive-into-cve-2023-2163-how-we-found-and-fixed-an-ebpf-linux-kernel-vulnerability</link>
            <guid>41189971</guid>
            <pubDate>Thu, 08 Aug 2024 10:39:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bughunters.google.com/blog/6303226026131456/a-deep-dive-into-cve-2023-2163-how-we-found-and-fixed-an-ebpf-linux-kernel-vulnerability">https://bughunters.google.com/blog/6303226026131456/a-deep-dive-into-cve-2023-2163-how-we-found-and-fixed-an-ebpf-linux-kernel-vulnerability</a>, See on <a href="https://news.ycombinator.com/item?id=41189971">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The News Is Information Junk Food (2022) (144 pts)]]></title>
            <link>https://chuck.is/news/</link>
            <guid>41189946</guid>
            <pubDate>Thu, 08 Aug 2024 10:34:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chuck.is/news/">https://chuck.is/news/</a>, See on <a href="https://news.ycombinator.com/item?id=41189946">Hacker News</a></p>
<div id="readability-page-1" class="page">
	<header>
		
		
	</header><br><hr>

  
Published: 2022-06-11<br>
Updated: 2022-09-16

<p>Cutting out the news has been one of the best lifestyle decisions I've made in recent years, second only to cutting out social media (though the two are not mutually exclusive). Reducing my intake of what is essentially junk information has significantly reduced anxiety and worry in my day to day life, and has freed up more of my time to pursue other interests and deeper reading. I'm able to concentrate better because there are less disruptions. My view is that "the news" primarily exists to keep consumers entertained rather than keeping citizens informed, very rarely presenting us with useful information and designed to get us to spend more time than we intended to keep us consuming more content. We live in an age where we're constantly bombarded with information and messaging, most commonly in the form of advertisements, but also in the form of news that's constantly competing for our attention. The news (and social media use) is indicative of a poor information diet. I think any news junkie reading this will immediately go on the defensive. To them, I ask that you please put your existing views on hold for the meantime and be honest with yourself.</p>

<h3>The News is a Business</h3>
<p>Modern news is similar if not identical to that of a of a business-to-consumer relationship. The information is presented in a manner to make the consumer think that it's essential information (an essential product) and, as a result, the consumer does what the business wants which is paying with <em>your attention</em> (a scarce resource as valuable as money). The strategy here is to get you to keep consuming and to find more information to consume. This is why modern journalism favors quantity over quality. Almost all of it is useless and irrelevant information which floods our senses, <a href="https://medium.com/thrive-global/how-technology-hijacks-peoples-minds-from-a-magician-and-google-s-design-ethicist-56d62ef5edf3">appealing to the lowest parts of the brain stem</a>, with a worldview that is irrelevant to your life. At best it's entertaining but it's primarily irrelevant information. As Yuval Noah Harari points out "people just don't know what to pay attention to, and they often spend their time investigating and debating side issues. In ancient times having power meant having access to data. Today having power means knowing what to ignore. The 24 hour news cycle is something to be ignored."</p>

<p>Over time, we've also found ourselves in a world where most of the information is controlled by only a handful of companies, resulting in "alternate" sources of information being either absurd conspiracy theories or "takes" of mainstream news on social media. Stories themselves are often slanted to please advertisers and company shareholders. Success is defined as whatever gets lots of clicks (and therefore ad revenue). I recently stumbled across <a href="https://techstartups.com/2020/09/18/6-corporations-control-90-media-america-illusion-choice-objectivity-2020/" target="_blank" rel="noreferrer noopener">this article</a> about how a small number of companies control 90% of the media - not just "the news". That's 90% of what we read, watch, and listen to. Let that sink in.</p>

<h3>Ignorance is Bliss?</h3>
<p>A common argument against cutting out the news is that "ignorance is bliss", suggesting that those who do not consume the news are ignorant. The argument goes further in that we must keep up with important current events to be an informed citizen in a democracy. While I admit there is a grain of truth to this, my perspective is that consuming the 24 hour news cycle does anything but make someone an "informed citizen". Rather it makes one less informed of the world and distracts you from what's going on in your own physical life and your own neighborhood, while instilling a very negative view of the world that's divorced from reality.</p> 

<p>The news is presented with click-bait headlines that's designed to get us to emotionally react and click a link so that the website gets ad-revenue. The articles themselves are often sensationalized and created to reaffirm our exists beliefs and biases and to reach the maximum possible audience. The news, much like advertisers, are competing for our attention. Our attention is a finite scarce resource and giving it away freely can be detrimental and have real world impact. This is a major conflict of interest, creating great potential to skew what's true, and incentivizes sensationalism.</p>

<p>Spending hours a day on a social media feed, YouTube, news websites, and even good 'ol fashion TV, consuming the news does not make one a more "informed" person. Information junkies often have the most extreme views (on both sides of the US political spectrum) with a strong "us vs them" mindset where "them" are viewed to have a twisted sense of morality and "us" are viewed as freedom fighters protect others from evil. News (and social media platforms) capitalize on the <a href="https://en.wikipedia.org/wiki/Fear_of_missing_out">Fear of Missing Out</a> as it offers a view into an endless feed of stories and activities in which the person (the news junkie) is not involved in.</p>

<p>Because of this infinite feed of information, a person cannot possibly get the full story, much less the facts, and it's common to resort to simply reading headlines. In fact, I'd argue that the majority of people form their opinions simply from headlines, memes, and "hot takes" from iNfLuEnCeRs, and at best short-form lazy journalism.</p>

<p>Avoiding news may lead one to think I live under a rock, but if it's important enough, the major news stories will make it's way to my perception. If something horrific happens in my country, I do find out about it perhaps hours after the news breaks - maybe a few days for less dramatic stuff from other people in my life. That said, what difference does it make if I hear about the story hours after it happens? If there's an important piece of information that relates to my community, family, friends, or profession, I will here about it in time. In fact, even today 99% of the "news" that makes it to my eyeballs because someone thought it was important that I see it is garbage anyways.</p>

<p>Maybe I'm viewed as being out of touch with the world, that if everyone mostly ignored the news the way I do, that governments and corporations will be getting away with murder and exploitation. To that I'll point out that we've never been exposed to as much information as we are today and governments and corporations are still getting away with murder and exploitation.</p>

<p>What is ignorant about not wanting to consume useless information, but rather consuming science, history, literature, and long-form writing, or even pursuing other hobbies and interests? Who is more ignorant of the world: a social media news junkie, or someone that spends their time studying history or particle physics?</p>

<h3>The Price of Attention</h3>
<p>Attention is a scarce and valuable resource in the 21st century. Information, on the other hand, is an abundant commodity. Our brains are wired to give attention to sensationalized, scandalous, "loud", story-driven content, that functions as an interruption system that weakens our ability to understand. This is how their business model works.</p>

<p>There's also the opportunity cost. Spending time on what the news deems important could be better spent reading long form articles or books. However, reading a news article that invokes outrage is far more likely to be engaged with - and engagement/attention is the currency of the digital world. Sharing your outrage of said article on social media makes it feel like you're doing something; that you're taking action, that you're doing gods work by spreading the word and keeping others informed of what's <i>really going on</i>. The reality is that you aren't doing anything at all. At best, it's playing into the shareability/marketing aspect of the news. You may get some reactions from your followers, but they, like you, will also not likely do anything to change. The news gives us the illusion of caring and social media is a circle-jerk. It's a distraction from life and yourself. It also deters you from other things that developing a skill or spending time with real people in the physical world.</p>

<p>The news is overwhelmingly about things you cannot possibly influence which sets up the news consumers for a fatalistic outlook on the world. News headlines are 90% bad news designed to invoke negative feelings because the reality is that negative stories get the highest engagement rate and time-on-site because <a href="https://www.psychologytoday.com/us/articles/200305/why-we-love-bad-news" target="_blank" rel="noopener">humans are naturally hardwired to most likely react</a> to the bad things that are happening in the world. Now imagine what that does psychologically to a mind in the long term that consumes these types of negative stories that are mostly anger inducing, deplorable, terrifying, or horrific? Undoubtedly, this person will suffer from stress, anxiety, and/or depression, and will likely have a negative view of the world and distrust their fellow human. Too much news instills fear, aggression, helplessness, victimhood, and tunnel-vision. Personally, I don't want to be this type of person.</p>

<p>Looking back, all that time I spent reading news articles being fed to me by various social feeds were a complete waste of time. There's not a single news blurb I consumed that made me change the way I live my life. All those feeds did for me were feed me stories about things I could not possibly change and making me fearful of the world. Dropping out from the collective psychosis has done wonders for my mental health and I've legitimately done much more interesting things with me time. When you are robbed of your attention, you are also robbed of your creativity, productivity, and train of thought.</p> 

<p>Consumption of information is similar to that of consumption of food. Consuming too much low quality food is not good for our physical health. Likewise, consuming too much news and low quality information is not good for our mental health. The metaphor that 'you are what you eat' holds true as you also are what you feed you mind. Spending a significant portion of your free time wasting time online watching YouTube videos, playing video games, and yes, consuming the news, is not much different from a diet consisting a fast food and other junk food. Furthermore, when we create the habit of checking the news feed, we are training our brains to pay attention to shit. Once you recognize that you've been on a steady <a href="https://www.mrmoneymustache.com/2013/10/01/the-low-information-diet/" target="_blank" rel="noopener">diet of information junk food</a>, building a better information diet is difficult but more helpful than rather than starving yourself entirely. I believe that if I want to improve myself, I should begin by critically looking at what I have in my life and removing something (an object, behavior, or belief) before adding something new - much like cutting out the heavily processed shit that we put in our body.</p>

<h3>It Makes Us Prone to Cognitive Errors</h3>
<p>The news is primarily irrelevant information, under the guise of coherent analysis. The problem is that it's difficult for humans to recognize what's actually relevant, as we're prone to making cognitive errors and get caught up in the dramatic - it's part of what it means to be human.</p> 

<p>The news increases cognitive biases where we "inflate" information that consistent with our preexisting views and "deflate" information that does not align with our preexisting views (see <a href="https://en.wikipedia.org/wiki/Confirmation_bias">Confirmation Bias</a>). Humans have a tendency to interpret new information in such a way that their prior conclusions remain intact. We like to spend time  with other people who share our preexisting beliefs. This results in the formation of <a href="https://en.wikipedia.org/wiki/Echo_chamber_(media)">echo chambers</a> which amplify and reinforce our beliefs, creating polarization and extremism. This largely has to do with not just human nature but it's also facilitated by the almighty social media algorithm. <a href="https://chuck.is/dark-patterns">Dark patterns</a> also exist to trick us into spending more time on websites and applications than we initially intended to.</p>

<p>We fixate on horrific stories like airplane crashes and school shootings, which are indeed absolutely terrible (and as a society we should do things to prevent school shootings and planes from crashing), but it leads us to make probablistic errors with actual risks we face in real life. The truth is that we're far more likely to die in an auto accident or heart disease than we are from being shot or dying in a plane crash, yet we can't help but feel like we're at higher risk from dying in such ways because of the information we consume. Even intelligent and sophisticated thinkers are prone to making these errors.</p> 

<p>There's a 1978 research paper titled <a href="https://www.researchgate.net/profile/Baruch-Fischhoff/publication/232557428_Judged_Frequency_of_Lethal_Events/links/561e834808aecade1accc403/Judged-Frequency-of-Lethal-Events.pdf">"Judged Frequency of Lethal Events"</a> that studied the errors made in quantifying the severity of risks, and judging which of two risks occurred more frequently. The participants believed that deaths from accidents occurred <i>as often</i> as deaths from disease, and believed that homicide was a <i>more frequent</i> cause of death than suicide. However, in actuality diseases cause about sixteen times as many deaths than accidents, and death from suicide is twice that as homicide. This <a href="https://en.wikipedia.org/wiki/Availability_heuristic">availability bias</a> happens because accidents and murders are much more likely to be talked about on the news, discuss them, and more likely to remember them.</p>

<p>News, especially customized news intake like a social media feed, greatly exacerbates overconfidence. News junkies may think they have a competitive advantage, but are no better at making decisions - in fact they're probably worse. Cryptocurrency investors are a prime example. We take in what's believed to be confirming information, then make stupid risks. Some cryptocurrency investors may make money, but this is simply <a href="https://en.wikipedia.org/wiki/Survivorship_bias">survivorship bias</a> as the silent vast majority have lost money due to consuming bad information.</p>

<h3>Cut the Garbage Out of Your  Diet</h3>
<p>I'm not advocating a nihilistic worldview and if you think I'm being too cynical, I actually believe I'm being optimistic. I think it's good to know what's going on in the world, but I think it's absolutely essential to learn and think deeply about worldly matters than to simply absorb morsels of incomplete and often time skewed information we get from the news. Do you want news reporters setting the public agenda for what's important? As is the case with any profession, journalism has incompetent people working who either don't have the time, motivation, or mental capacity for providing appropriate analysis of social issues. This is why we're presented with bite sized nuggets of information in the form of headlines, lazy articles, and tweets that don't require much thinking because it's easy for our minds to digest.</p>

<p>I'm not suggesting throwing the baby out with the bathwater and cutting ourselves entirely off from all information. Become long-form literate by spending more time deep-reading such as a book or long-form article that's more representative of the world's complexity as opposed to an overly simplified social-mediated and sensational news blurb. Unfollow news companies from your social media feed or better yet, <a href="https://chuck.is/not-on-facebook">delete your social media accounts entirely</a>. As mentioned earlier, people are all too willing to reshare the news that they deem important, and once that headline hits your eyeballs, they've already won. To avoid temptation, read offline via a read-it-later app or a physical book.</p>  

<p>Spend time focusing on more interesting and rewarding things like social science, gardening, Brazilian Jiu-Jitsu, cooking, web design... you know, the hobbies and interests that you used to have <i>before</i> your attention became set on fast-breaking news where you fell into the habit of checking your phone hundreds of times throughout the day.</p>

<p>George Orwell's 1984 and Aldous Huxley's Brave New World are two of the more impactful books I've read in regards to how I've come to understand the present and future of human societies.  Here's a quote from Neil Postman in his book <i>Amusing Ourselves to Death</i> about the differences between Orwell and Huxley that I think is relevant. Undoubtedly this quote will make more sense after reading both books (and you should). </p>

<blockquote>
<p><i>What Orwell feared were those who would ban books. What Huxley feared was that there would be no reason to ban a book, for there would be no one who wanted to read one. Orwell feared those who would deprive us of information. Huxley feared those who would give us so much that we would be reduced to passivity and egoism. Orwell feared that the truth would be concealed from us. Huxley feared the truth would be drowned in a sea of irrelevance. Orwell feared we would become a captive culture. Huxley feared we would become a trivial culture, preoccupied with some equivalent of the feelies, the orgy porgy, and the centrifugal bumblepuppy. As Huxley remarked in Brave New World Revisited, the civil libertarians and rationalists who are ever on the alert to oppose tyranny "failed to take into account man's almost infinite appetite for distractions."</i></p>
</blockquote>

<h3>Further Reading</h3>
<ul>
	<li>I originally published this post in June 2022, but was inspired to expand it after reading Rolf Dobelli's paper <a href="https://chuck.is/files/Avoid%20News_%20Toward%20a%20Healthy%20News%20Diet%20-%20Rolf%20Dobelli.pdf">'Avoid News: Toward a Healthy News Diet'</a>. He's also <a href="https://www.youtube.com/watch?v=-miTTiaqFlI">given a TED Talk</a> on the subject. <br>URL: <a href="https://www.dobelli.com/en/">https://www.dobelli.com/en/</a></li>
	<li>Linked above, Mr Money Mustache wrote a blog post in 2013 titled <a href="https://www.mrmoneymustache.com/2013/10/01/the-low-information-diet/">The Low Information Diet</a> (which I didn't read until 2019) about his low information diet which is what initially got me thinking about my own information diet. <br>URL: <a href="https://www.mrmoneymustache.com/">https://www.mrmoneymustache.com</a></li>
</ul>

<p><em>Thanks for reading. Feel free to send comments, questions, or recommendations to <a href="mailto:hey@chuck.is">hey@chuck.is</a>.</em>
  
</p>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[FlexAttention: The Flexibility of PyTorch with the Performance of FlashAttention (134 pts)]]></title>
            <link>https://pytorch.org/blog/flexattention/</link>
            <guid>41188966</guid>
            <pubDate>Thu, 08 Aug 2024 07:24:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pytorch.org/blog/flexattention/">https://pytorch.org/blog/flexattention/</a>, See on <a href="https://news.ycombinator.com/item?id=41188966">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
                    <p>
                      by
                      
                        Team PyTorch: Horace He, Driss Guessous, Yanbo Liang, Joy Dong
                      
                    </p>
                    <p><img src="https://pytorch.org/assets/images/flexattention/fg1.jpg" alt="a cartoon chart flexing his muscles"></p>

<p>In theory, Attention is All You Need. In practice, however, we also need optimized attention implementations like FlashAttention.</p>

<p>Although these fused attention implementations have substantially improved performance and enabled long contexts, this efficiency has come with a loss of flexibility. You can no longer try out a new attention variant by writing a few PyTorch operators - you often need to write a new custom kernel! This operates as a sort of “software lottery” for ML researchers - if your attention variant doesn’t fit into one of the existing optimized kernels, you’re doomed to slow runtime and CUDA OOMs.</p>

<p>For some examples of attention variants, we have Causal, <a href="https://paperswithcode.com/method/relative-position-encodings">Relative Positional Embeddings</a>, <a href="https://paperswithcode.com/method/alibi">Alibi</a>, <a href="https://mistral.ai/news/announcing-mistral-7b/">Sliding Window Attention</a>, <a href="https://twitter.com/andersonbcdefg/status/1800907703688339569">PrefixLM</a>,  <a href="https://github.com/pytorch/torchtune/pull/875">Document Masking/Sample Packing/Jagged Tensors</a>, <a href="https://twitter.com/LysandreJik/status/1807779471891538199">Tanh Soft-Capping</a>, <a href="https://arxiv.org/abs/2309.06180">PagedAttention</a>, etc. Even worse, folks often want combinations of these! Sliding Window Attention + Document Masking + Causal + Context Parallelism? Or what about PagedAttention + Sliding Window + Tanh Soft-Capping?</p>

<p>The left picture below represents the state of the world today - some combinations of masking + biases + setting have existing kernels implemented. But the various options lead to an exponential number of settings, and so overall we end up with fairly spotty support. Even worse, new attention variants researchers come up with will have <em>zero</em> support.</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg2.jpg" alt="Attention variant support diagram"></p>

<p>To solve this hypercube problem once and for all, we introduce <strong>FlexAttention</strong>, a new PyTorch API.</p>

<ol>
  <li>We provide a flexible API that allows implementing many attention variants (including all the ones mentioned in the blog post so far) in a few lines of idiomatic PyTorch code.</li>
  <li>We lower this into a fused FlashAttention kernel through <code>torch.compile</code>, generating a FlashAttention kernel that doesn’t materialize any extra memory and has performance competitive with handwritten ones.</li>
  <li>We also automatically generate the backwards pass, leveraging PyTorch’s autograd machinery.</li>
  <li>Finally, we can also take advantage of sparsity in the attention mask, resulting in significant improvements over standard attention implementations.</li>
</ol>

<p>With FlexAttention, we hope that trying new attention variants will only be limited by your imagination.</p>

<p>You can find many FlexAttention examples at the Attention Gym: <a href="https://github.com/pytorch-labs/attention-gym">https://github.com/pytorch-labs/attention-gym</a>. If you have any cool applications, feel free to submit an example!</p>

<p>PS: We also find this API very exciting since it leverages a lot of existing PyTorch infra in a fun way - more on that in the end.</p>

<h2 id="flexattention">FlexAttention</h2>

<p>Here is the classic attention equation:</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg3.png" alt="math equation"></p>

<p>In code form:</p>

<div><pre><code><span>Q</span><span>,</span> <span>K</span><span>,</span> <span>V</span><span>:</span> <span>Tensor</span><span>[</span><span>batch_size</span><span>,</span> <span>num_heads</span><span>,</span> <span>sequence_length</span><span>,</span> <span>head_dim</span><span>]</span>
<span>score</span><span>:</span> <span>Tensor</span><span>[</span><span>batch_size</span><span>,</span> <span>num_heads</span><span>,</span> <span>sequence_length</span><span>,</span> <span>sequence_length</span><span>]</span> <span>=</span> <span>(</span><span>Q</span> <span>@</span> <span>K</span><span>)</span> <span>/</span> <span>sqrt</span><span>(</span><span>head_dim</span><span>)</span>
<span>probabilities</span> <span>=</span> <span>softmax</span><span>(</span><span>score</span><span>,</span> <span>dim</span><span>=-</span><span>1</span><span>)</span>
<span>output</span><span>:</span> <span>Tensor</span><span>[</span><span>batch_size</span><span>,</span> <span>num_heads</span><span>,</span> <span>sequence_length</span><span>,</span> <span>head_dim</span><span>]</span> <span>=</span> <span>probabilities</span> <span>@</span> <span>V</span>
</code></pre></div>

<p>FlexAttention allows for an user-defined function <code>score_mod:</code></p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg4.png" alt="math equation"></p>

<p>In code form:</p>

<div><pre><code><span>Q</span><span>,</span> <span>K</span><span>,</span> <span>V</span><span>:</span> <span>Tensor</span><span>[</span><span>batch_size</span><span>,</span> <span>num_heads</span><span>,</span> <span>sequence_length</span><span>,</span> <span>head_dim</span><span>]</span>
<span>score</span><span>:</span> <span>Tensor</span><span>[</span><span>batch_size</span><span>,</span> <span>num_heads</span><span>,</span> <span>sequence_length</span><span>,</span> <span>sequence_length</span><span>]</span> <span>=</span> <span>(</span><span>Q</span> <span>@</span> <span>K</span><span>)</span> <span>/</span> <span>sqrt</span><span>(</span><span>head_dim</span><span>)</span>
<span>modified_scores</span><span>:</span> <span>Tensor</span><span>[</span><span>batch_size</span><span>,</span> <span>num_heads</span><span>,</span> <span>sequence_length</span><span>,</span> <span>sequence_length</span><span>]</span> <span>=</span> <span>score_mod</span><span>(</span><span>score</span><span>)</span>
<span>probabilities</span> <span>=</span> <span>softmax</span><span>(</span><span>modified_scores</span><span>,</span> <span>dim</span><span>=-</span><span>1</span><span>)</span>
<span>output</span><span>:</span> <span>Tensor</span><span>[</span><span>batch_size</span><span>,</span> <span>num_heads</span><span>,</span> <span>sequence_length</span><span>,</span> <span>head_dim</span><span>]</span> <span>=</span> <span>probabilities</span> <span>@</span> <span>V</span>
</code></pre></div>

<p>This function allows you to <em>modify</em> the attention scores prior to softmax. Surprisingly, this ends up being sufficient for the vast majority of attention variants (examples below)!</p>

<p>Concretely, the expected signature for <code>score_mod</code> is somewhat unique.</p>

<div><pre><code><span>def</span> <span>score_mod</span><span>(</span><span>score</span><span>:</span> <span>f32</span><span>[],</span> <span>b</span><span>:</span> <span>i32</span><span>[],</span> <span>h</span><span>:</span> <span>i32</span><span>[],</span> <span>q_idx</span><span>:</span> <span>i32</span><span>[],</span> <span>kv_idx</span><span>:</span> <span>i32</span><span>[])</span>
    <span>return</span> <span>score</span> <span># noop - standard attention
</span></code></pre></div>

<p>In other words, <code>score</code> is a scalar pytorch tensor that represents the dot product of a query token and a key token. The rest of the arguments tell you <em>which</em> dot product you’re currently computing - <code>b</code> (current element in batch), <code>h</code> (current head), <code>q_idx</code> (position in query), <code>kv_idx</code> (position in key/value tensors).</p>

<p>To apply this function, we could implement it as</p>

<div><pre><code><span>for</span> <span>b</span> <span>in</span> <span>range</span><span>(</span><span>batch_size</span><span>):</span>
    <span>for</span> <span>h</span> <span>in</span> <span>range</span><span>(</span><span>num_heads</span><span>):</span>
        <span>for</span> <span>q_idx</span> <span>in</span> <span>range</span><span>(</span><span>sequence_length</span><span>):</span>
            <span>for</span> <span>kv_idx</span> <span>in</span> <span>range</span><span>(</span><span>sequence_length</span><span>):</span>
                <span>modified_scores</span><span>[</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>]</span> <span>=</span> <span>score_mod</span><span>(</span><span>scores</span><span>[</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>],</span> <span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>)</span>
</code></pre></div>

<p>Of course, this is not how FlexAttention is implemented under the hood. Leveraging <code>torch.compile</code>, we automatically lower your function into a single <em>fused</em> FlexAttention kernel - guaranteed or your money back!</p>

<p>This API ends up being surprisingly expressive. Let’s look at some examples.</p>

<h2 id="score-mod-examples">Score Mod Examples</h2>

<h3 id="full-attention">Full Attention</h3>

<p>Let’s first do “full attention”, or standard bidirectional attention. In this case, <code>score_mod</code> is a no-op - it takes as input the scores and then returns them as is..</p>

<div><pre><code><span>def</span> <span>noop</span><span>(</span><span>score</span><span>,</span> <span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>score</span>
</code></pre></div>

<p>And to use it end to end (including both forwards <em>and</em> backwards):</p>

<div><pre><code><span>from</span> <span>torch.nn.attention.flex_attention</span> <span>import</span> <span>flex_attention</span>

<span>flex_attention</span><span>(</span><span>query</span><span>,</span> <span>key</span><span>,</span> <span>value</span><span>,</span> <span>score_mod</span><span>=</span><span>noop</span><span>).</span><span>sum</span><span>().</span><span>backward</span><span>()</span>
</code></pre></div>

<h3 id="relative-position-encodings">Relative Position Encodings</h3>

<p>One common attention variant is the <a href="https://paperswithcode.com/method/relative-position-encodings">“relative position encoding</a>”. Instead of encoding the absolute distance in the queries and keys, relative position encoding adjusts scores based on the “distance” between the queries and keys.</p>

<div><pre><code><span>def</span> <span>relative_positional</span><span>(</span><span>score</span><span>,</span> <span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>score</span> <span>+</span> <span>(</span><span>q_idx</span> <span>-</span> <span>kv_idx</span><span>)</span>
</code></pre></div>

<p>Note that unlike typical implementations, this does <em>not</em> need to materialize a SxS tensor. Instead, FlexAttention computes the bias values “on the fly” within the kernel, leading to significant memory and performance improvements.</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg5.png" alt="relative position encoding"></p>

<h3 id="alibi-bias">ALiBi Bias</h3>

<p><img src="https://pytorch.org/assets/images/flexattention/fg6.png" alt="alibi bias"></p>
<p><em>Source: <a href="https://arxiv.org/abs/2108.12409">Train Short, Test Long: Attention with Linear Biases Enables Input Length Extrapolation</a></em></p>

<p>ALiBi was introduced in <a href="https://arxiv.org/abs/2108.12409">Train Short, Test Long: Attention with Linear Biases Enables Input Length Extrapolation</a>, and claims to have beneficial properties for length extrapolation at inference. Notably, MosaicML has pointed to <a href="https://twitter.com/jefrankle/status/1804567458092605736">“lack of kernel support”</a> as the main reason why they eventually switched from ALiBi to rotary embeddings.</p>

<p>Alibi is similar to relative positional encodings with one exception - it has a per-head factor that is typically precomputed.</p>

<div><pre><code><span>alibi_bias</span> <span>=</span> <span>generate_alibi_bias</span><span>()</span> <span># [num_heads]
</span>
<span>def</span> <span>alibi</span><span>(</span><span>score</span><span>,</span> <span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>bias</span> <span>=</span> <span>alibi_bias</span><span>[</span><span>h</span><span>]</span> <span>*</span> <span>(</span><span>q_idx</span> <span>-</span> <span>kv_idx</span><span>)</span>
    <span>return</span> <span>score</span> <span>+</span> <span>bias</span>
</code></pre></div>

<p>This demonstrates one interesting piece of flexibility <code>torch.compile</code> provides - we can load from <code>alibi_bias</code> even though it <em>wasn’t explicitly passed in as an input</em>! The generated Triton kernel will calculate the correct loads from the <code>alibi_bias</code> tensor and fuse it. Note that you could regenerate <code>alibi_bias</code> and we still wouldn’t need to recompile.</p>

<h3 id="soft-capping">Soft-capping</h3>

<p>Soft-capping is a technique used in <a href="https://huggingface.co/blog/gemma2#soft-capping-and-attention-implementations">Gemma2</a> and Grok-1 that prevents logits from growing excessively large. In FlexAttention, it looks like:</p>

<div><pre><code><span>softcap</span> <span>=</span> <span>20</span>
<span>def</span> <span>soft_cap</span><span>(</span><span>score</span><span>,</span> <span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>score</span> <span>=</span> <span>score</span> <span>/</span> <span>softcap</span>
    <span>score</span> <span>=</span> <span>torch</span><span>.</span><span>tanh</span><span>(</span><span>score</span><span>)</span>
    <span>score</span> <span>=</span> <span>score</span> <span>*</span> <span>softcap</span>
    <span>return</span> <span>score</span>
</code></pre></div>

<p>Note that we also automatically generate the backwards pass from the forwards pass here. Also, although this implementation is semantically correct, we likely want to use a tanh approximation in this case for performance reasons. See <a href="https://github.com/pytorch-labs/attention-gym/blob/main/attn_gym/mods/softcapping.py">attention-gym</a> for more details.</p>

<h3 id="causal-mask">Causal Mask</h3>

<p>Although bidirectional attention is the simplest, the original <em>Attention is All You Need</em> paper and the vast majority of LLMs use attention in a decoder-only setting where each token can only attend to the tokens prior to it. Folks often think of this as a lower-triangular mask, but with the <code>score_mod</code> API it can be expressed as:</p>

<div><pre><code><span>def</span> <span>causal_mask</span><span>(</span><span>score</span><span>,</span> <span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>torch</span><span>.</span><span>where</span><span>(</span><span>q_idx</span> <span>&gt;=</span> <span>kv_idx</span><span>,</span> <span>score</span><span>,</span> <span>-</span><span>float</span><span>(</span><span>"inf"</span><span>))</span>
</code></pre></div>

<p>Basically, if the query token is “after” the key token, we keep the score. Otherwise, we mask it out by setting it to -inf, thus ensuring it won’t participate in the softmax calculation.</p>

<p>However, masking is special compared to other modifications - if something is masked out, we can completely skip its computation! In this case, a causal mask has about 50% sparsity, so not taking advantage of the sparsity would result in a 2x slowdown. Although this <code>score_mod</code> is sufficient to implement causal masking <em>correctly</em>, getting the performance benefits of sparsity requires another concept - <code>mask_mod</code>.</p>

<h2 id="mask-mods">Mask Mods</h2>

<p>To take advantage of sparsity from masking, we need to do some more work. Specifically, by passing a <code>mask_mod</code> to <a href="https://github.com/pytorch/pytorch/blob/e49c0acc396e89baf8c6450e1fa0571d4ce2d4ed/torch/nn/attention/flex_attention.py#L594"><code>create_block_mask</code></a>, we can create a <code>BlockMask</code>. FlexAttention can then use <code>BlockMask</code> to take advantage of the sparsity!</p>

<p>The signature of <code>mask_mod</code> is very similar to <code>score_mod</code> - just without the <code>score</code>. In particular</p>

<div><pre><code><span># returns True if this position should participate in the computation
</span><span>mask_mod</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>)</span> <span>=&gt;</span> <span>bool</span>
</code></pre></div>

<p>Note that <code>score_mod</code> is strictly <em>more</em> expressive than <code>mask_mod</code>. However, for masking, it’s recommended to use <code>mask_mod</code> and <code>create_block_mask</code>, as it’s more performant. See the FAQ on why <code>score_mod</code> and <code>mask_mod</code> are separate.</p>

<p>Now, let’s take a look at how we might implement causal mask with <code>mask_mod</code>.</p>

<h3 id="causal-mask-1">Causal Mask</h3>

<div><pre><code><span>from</span> <span>torch.nn.attention.flex_attention</span> <span>import</span> <span>create_block_mask</span>

<span>def</span> <span>causal</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>q_idx</span> <span>&gt;=</span> <span>kv_idx</span>

<span># Because the sparsity pattern is independent of batch and heads, we'll set them to None (which broadcasts them) 
</span><span>block_mask</span> <span>=</span> <span>create_block_mask</span><span>(</span><span>causal</span><span>,</span> <span>B</span><span>=</span><span>None</span><span>,</span> <span>H</span><span>=</span><span>None</span><span>,</span> <span>Q_LEN</span><span>=</span><span>1024</span><span>,</span> <span>KV_LEN</span><span>=</span><span>1024</span><span>)</span>
<span># In this case, we don't need a score_mod, so we won't pass any in.
# However, score_mod can still be combined with block_mask if you need the additional flexibility.
</span><span>flex_attention</span><span>(</span><span>query</span><span>,</span> <span>key</span><span>,</span> <span>value</span><span>,</span> <span>block_mask</span><span>=</span><span>block_mask</span><span>)</span>
</code></pre></div>

<p>Note that <code>create_block_mask</code> is a <strong>relatively expensive operation!</strong> Although FlexAttention will not need to recompile when it changes, if you aren’t careful about caching it, it can lead to significant slowdowns (check out the FAQ for suggestions on best practices).</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg7.png" alt="flexattention performance charts"></p>

<p>While the TFlops are roughly the same, the execution time is 2x faster for the mask_mod version! This demonstrates that we can leverage the sparsity that BlockMask provides us <em>without</em> losing hardware efficiency.</p>

<h3 id="sliding-window--causal">Sliding Window + Causal</h3>

<p><img src="https://pytorch.org/assets/images/flexattention/fg8.png" alt="Sliding Window Causal diagrams"></p>
<p><em>Source: <a href="https://arxiv.org/abs/2310.06825">Mistral 7B</a></em></p>

<p>Popularized by <a href="https://arxiv.org/abs/2310.06825">Mistral</a>, sliding window attention (also known as local attention) takes advantage of the intuition that the most recent tokens are the most useful. In particular, it allows the query token to only attend to, say, the 1024 most recent tokens. This is often used together with causal attention.</p>

<div><pre><code><span>SLIDING_WINDOW</span> <span>=</span> <span>1024</span>

<span>def</span> <span>sliding_window_causal</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>causal_mask</span> <span>=</span> <span>q_idx</span> <span>&gt;=</span> <span>kv_idx</span>
    <span>window_mask</span> <span>=</span> <span>q_idx</span> <span>-</span> <span>kv_idx</span> <span>&lt;=</span> <span>SLIDING_WINDOW</span> 
    <span>return</span> <span>causal_mask</span> <span>&amp;</span> <span>window_mask</span>

<span># If you want to be cute...
</span><span>from</span> <span>torch.nn.attention</span> <span>import</span> <span>or_masks</span>

<span>def</span> <span>sliding_window</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>)</span>
    <span>return</span> <span>q_idx</span> <span>-</span> <span>kv_idx</span> <span>&lt;=</span> <span>SLIDING_WINDOW</span>

<span>sliding_window_causal</span> <span>=</span> <span>or_masks</span><span>(</span><span>causal_mask</span><span>,</span> <span>sliding_window</span><span>)</span>
</code></pre></div>

<p>We benchmark it against <code>F.scaled_dot_product_attention</code> with a sliding window mask as well as FA2 with a causal mask (as a reference point for performance). Not only are we significantly faster than <code>F.scaled_dot_product_attention</code>, we’re <em>also</em> significantly faster than FA2 with a causal mask as this mask has significantly more sparsity.</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg9.png" alt="execution time charts"></p>

<h3 id="prefixlm">PrefixLM</h3>

<p><img src="https://pytorch.org/assets/images/flexattention/fg10.png" alt="PrefixLM diagram"></p>
<p><em>Source: <a href="https://arxiv.org/abs/2407.07726">PaliGemma: A versatile 3B VLM for transfer</a></em></p>

<p>The T5 architecture, proposed in <a href="https://arxiv.org/abs/1910.10683">Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer</a>, describes an attention variant that performs full bidirectional attention on a “prefix”, and causal attention on the rest. We again compose two mask functions to accomplish this, one for causal masking and one that is based off of the prefix length.</p>

<div><pre><code><span>prefix_length</span><span>:</span> <span>[</span><span>B</span><span>]</span>
<span>def</span> <span>prefix_mask</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>kv_idx</span> <span>&lt;=</span> <span>prefix_length</span><span>[</span><span>b</span><span>]</span>

<span>prefix_lm_causal</span> <span>=</span> <span>or_masks</span><span>(</span><span>prefix_mask</span><span>,</span> <span>causal_mask</span><span>)</span>
<span># In this case, our mask is different per sequence so we set B equal to our batch size
</span><span>block_mask</span> <span>=</span> <span>create_block_mask</span><span>(</span><span>prefix_lm_causal</span><span>,</span> <span>B</span><span>=</span><span>B</span><span>,</span> <span>H</span><span>=</span><span>None</span><span>,</span> <span>S</span><span>,</span> <span>S</span><span>)</span>
</code></pre></div>

<p>Just like with <code>score_mod</code>, <code>mask_mod</code> allows us to refer to additional tensors that aren’t explicitly an input to the function! However, with prefixLM, the sparsity pattern changes <em>per</em> <em>input</em>. This means that for each new input batch, we’ll need to recompute the <code>BlockMask</code>. One common pattern is to call <code>create_block_mask</code> at the beginning of your model and reuse that <code>block_mask</code> for all attention calls in your model. See <em>Recomputing Block Masks vs. Recompilation.</em></p>

<p>However, in exchange for that, we’re not only able to have an efficient attention kernel for prefixLM, we’re <em>also</em> able to take advantage of however much sparsity exists in the input! FlexAttention will dynamically adjust its performance based off of the BlockMask data, <em>without</em> needing to recompile the kernel.</p>

<h3 id="document-maskingjagged-sequences">Document Masking/Jagged Sequences</h3>

<p>Another common attention variant is document masking/jagged sequences. Imagine that you have a number of sequences of varying length. You want to train on all of them together, but unfortunately, most operators only accept rectangular tensors.</p>

<p>Through <code>BlockMask</code>, we can support this efficiently in FlexAttention as well!</p>

<ol>
  <li>First, we flatten all sequences into a single sequence with sum(sequence lengths) tokens.</li>
  <li>Then, we compute the document_id that each token belongs to.</li>
  <li>Finally, in our <code>mask_mod</code>, we simply whether the query and kv token belong to the same document!</li>
</ol>

<div><pre><code><span># The document that each token belongs to.
# e.g. [0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2] corresponds to sequence lengths 3, 2, and 6.
</span><span>document_id</span><span>:</span> <span>[</span><span>SEQ_LEN</span><span>]</span>

<span>def</span> <span>document_masking</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>document_id</span><span>[</span><span>q_idx</span><span>]</span> <span>==</span> <span>document_id</span><span>[</span><span>kv_idx</span><span>]</span>
</code></pre></div>

<p>And that’s it! In this case, we see that we end up with a blockdiagonal mask.</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg11.png" alt="blockdiagonal mask"></p>

<p>One interesting aspect about document masking is that it’s easy to see how it might combine with an arbitrary combination of other masks . For example, we already defined <code>prefixlm_mask</code> in the previous section. Do we now need to define a <code>prefixlm_document_mask</code> function as well?</p>

<p>In these cases, one pattern we’ve found quite useful is what we call a “higher level modification”. In this case, we can take an existing <code>mask_mod</code> and automatically transform it into one that works with jagged sequences!</p>

<div><pre><code><span>def</span> <span>generate_doc_mask_mod</span><span>(</span><span>mask_mod</span><span>,</span> <span>document_id</span><span>):</span>
    <span># Get unique document IDs and their counts
</span>    <span>_</span><span>,</span> <span>counts</span> <span>=</span> <span>torch</span><span>.</span><span>unique_consecutive</span><span>(</span><span>document_id</span><span>,</span> <span>return_counts</span><span>=</span><span>True</span><span>)</span>
    <span># Create cumulative counts (offsets)
</span>    <span>offsets</span> <span>=</span> <span>torch</span><span>.</span><span>cat</span><span>([</span><span>torch</span><span>.</span><span>tensor</span><span>([</span><span>0</span><span>],</span> <span>device</span><span>=</span><span>document_id</span><span>.</span><span>device</span><span>),</span> <span>counts</span><span>.</span><span>cumsum</span><span>(</span><span>0</span><span>)[:</span><span>-</span><span>1</span><span>]])</span>
    <span>def</span> <span>doc_mask_wrapper</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
        <span>same_doc</span> <span>=</span> <span>document_id</span><span>[</span><span>q_idx</span><span>]</span> <span>==</span> <span>document_id</span><span>[</span><span>kv_idx</span><span>]</span>
        <span>q_logical</span> <span>=</span> <span>q_idx</span> <span>-</span> <span>offsets</span><span>[</span><span>document_id</span><span>[</span><span>q_idx</span><span>]]</span>
        <span>kv_logical</span> <span>=</span> <span>kv_idx</span> <span>-</span> <span>offsets</span><span>[</span><span>document_id</span><span>[</span><span>kv_idx</span><span>]]</span>
        <span>inner_mask</span> <span>=</span> <span>mask_mod</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_logical</span><span>,</span> <span>kv_logical</span><span>)</span>
        <span>return</span> <span>same_doc</span> <span>&amp;</span> <span>inner_mask</span>
    <span>return</span> <span>doc_mask_wrapper</span>
</code></pre></div>

<p>For example, given the <code>prefix_lm_causal</code> mask from above, we can transform it into one that works on on packed documents like so:</p>

<div><pre><code><span>prefix_length</span> <span>=</span> <span>torch</span><span>.</span><span>tensor</span><span>(</span><span>2</span><span>,</span> <span>dtype</span><span>=</span><span>torch</span><span>.</span><span>int32</span><span>,</span> <span>device</span><span>=</span><span>"cuda"</span><span>)</span>
<span>def</span> <span>prefix_mask</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>kv_idx</span> <span>&lt;</span> <span>prefix_length</span>
<span>prefix_lm_causal</span> <span>=</span> <span>or_masks</span><span>(</span><span>prefix_mask</span><span>,</span> <span>causal_mask</span><span>)</span>
<span>doc_prefix_lm_causal_mask</span> <span>=</span> <span>generate_doc_mask_mod</span><span>(</span><span>prefix_lm_causal</span><span>,</span> <span>document_id</span><span>)</span>
</code></pre></div>

<p><img src="https://pytorch.org/assets/images/flexattention/fg12.png" alt="blockdiagonal mask"></p>

<p>Now, this mask is “block-prefixLM-diagonal” shaped. :)</p>

<p>That’s all of our examples! There are far more attention variants than we have space to list, so check out <a href="https://github.com/pytorch-labs/attention-gym">Attention Gym</a> for more examples. We hope that the community will contribute some of their favorite applications of FlexAttention as well.</p>

<h3 id="faq">FAQ</h3>

<h5 id="q-when-does-flexattention-need-to-recompile"><strong>Q: When does FlexAttention need to recompile?</strong></h5>

<p>As FlexAttention leverages <code>torch.compile</code> for graph capture, it can actually avoid recompilation in a broad spectrum of cases. Notably, it does <em>not</em> need to recompile even if captured tensors change values!</p>

<div><pre><code><span>flex_attention</span> <span>=</span> <span>torch</span><span>.</span><span>compile</span><span>(</span><span>flex_attention</span><span>)</span>
<span>def</span> <span>create_bias_mod</span><span>(</span><span>bias</span><span>)</span>
    <span>def</span> <span>bias_mod</span><span>(</span><span>score</span><span>,</span> <span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
        <span>return</span> <span>score</span> <span>+</span> <span>bias</span>
    <span>return</span> <span>bias_mod</span>
<span>bias_mod1</span> <span>=</span> <span>create_bias_mod</span><span>(</span><span>torch</span><span>.</span><span>tensor</span><span>(</span><span>0</span><span>))</span>
<span>flex_attention</span><span>(...,</span> <span>score_mod</span><span>=</span><span>bias_mod1</span><span>)</span> <span># Compiles the kernel here 
</span>
<span>bias_mod2</span> <span>=</span> <span>create_bias_mod</span><span>(</span><span>torch</span><span>.</span><span>tensor</span><span>(</span><span>2</span><span>))</span>
<span>flex_attention</span><span>(...,</span> <span>score_mod</span><span>=</span><span>bias_mod2</span><span>)</span> <span># Doesn't need to recompile! 
</span></code></pre></div>

<p>Even changing the block-sparsity doesn’t require a recompile. However, if the block-sparsity changes, we do need to <em>recompute</em> the BlockMask.</p>

<h5 id="q-when-should-we-recompute-the-blockmask"><strong>Q: When should we recompute the BlockMask?</strong></h5>

<p>We need to recompute the BlockMask whenever the block-sparsity changes. Although computing the BlockMask is much cheaper than recompilation (on the order of hundreds of microseconds as opposed to seconds), you should still take care to not excessively recompute the BlockMask.</p>

<p>Here are some common patterns and some recommendations on how you might approach them.</p>

<p><strong>Mask never changes (e.g. causal mask)</strong><br>
In this case, you can simply precompute the block mask and cache it globally, reusing it for all attention calls.</p>

<div><pre><code><span>block_mask</span> <span>=</span> <span>create_block_mask</span><span>(</span><span>causal_mask</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>,</span> <span>S</span><span>,</span><span>S</span><span>)</span>
<span>causal_attention</span> <span>=</span> <span>functools</span><span>.</span><span>partial</span><span>(</span><span>flex_attention</span><span>,</span> <span>block_mask</span><span>=</span><span>block_mask</span><span>)</span>
</code></pre></div>

<p><strong>Mask changes every batch (e.g. document masking)</strong><br>
In this case, we would suggest computing the BlockMask at the beginning of the model and threading it through the model - reusing the BlockMask for all layers.</p>

<div><pre><code><span>def</span> <span>forward</span><span>(</span><span>self</span><span>,</span> <span>x</span><span>,</span> <span>doc_mask</span><span>):</span>
    <span># Compute block mask at beginning of forwards
</span>    <span>block_mask</span> <span>=</span> <span>create_block_mask</span><span>(</span><span>doc_mask</span><span>,</span> <span>None</span><span>,</span> <span>None</span><span>,</span> <span>S</span><span>,</span> <span>S</span><span>)</span>    
    <span>x</span> <span>=</span> <span>self</span><span>.</span><span>layer1</span><span>(</span><span>x</span><span>,</span> <span>block_mask</span><span>)</span>
    <span>x</span> <span>=</span> <span>self</span><span>.</span><span>layer2</span><span>(</span><span>x</span><span>,</span> <span>block_mask</span><span>)</span>
    <span>...</span>
    <span># amortize block mask construction cost across all layers
</span>    <span>x</span> <span>=</span> <span>self</span><span>.</span><span>layer3</span><span>(</span><span>x</span><span>,</span> <span>block_mask</span><span>)</span> 
    <span>return</span> <span>x</span>
</code></pre></div>

<p><strong>Mask changes every layer (e.g. data-dependent sparsity)</strong><br>
This is the hardest setting, since we’re unable to amortize the block mask computation across multiple FlexAttention invocations. Although FlexAttention can certainly still benefit this case, the actual benefits from BlockMask depend on how sparse your attention mask is and how fast we can construct the BlockMask. That leads us to…</p>

<h5 id="q-how-can-we-compute-blockmask-quicker"><strong>Q: How can we compute BlockMask quicker?</strong></h5>

<p><code>create_block_mask</code> is unfortunately fairly expensive, both from a memory and compute perspective, as determining whether a block is completely sparse requires evaluating <code>mask_mod</code> at every single point in the block. There are a couple ways to address this:</p>

<ol>
  <li>If your mask is the same across batch size or heads, make sure that you’re broadcasting over those (i.e. set them to <code>None</code> in <code>create_block_mask</code>).</li>
  <li>Compile <code>create_block_mask</code>. Unfortunately, today, <code>torch.compile</code> does not work directly on <code>create_block_mask</code> due to some unfortunate limitations. However, you can set <code>_compile=True</code>, which will significantly reduce the peak memory and runtime (often an order of magnitude in our testing).</li>
  <li>
    <p>Write a custom constructor for BlockMask. The metadata for BlockMask is quite simple (see the <a href="https://pytorch.org/docs/main/nn.attention.flex_attention.html#blockmask">documentation</a>). It’s essentially two tensors.
a. <code>num_blocks</code>: The number of KV blocks computed for each query block.<br>
b. <code>indices</code>: The positions of the KV blocks computed for each query block.</p>

    <p>For example, here’s a custom BlockMask constructor for <code>causal_mask</code>.</p>
  </li>
</ol>

<div><pre><code><span>def</span> <span>create_causal_mask</span><span>(</span><span>S</span><span>):</span>
    <span>BLOCK_SIZE</span> <span>=</span> <span>128</span>
    <span># The first query block computes one block, the second query block computes 2 blocks, etc.
</span>    <span>num_blocks</span> <span>=</span> <span>torch</span><span>.</span><span>arange</span><span>(</span><span>S</span> <span>//</span> <span>BLOCK_SIZE</span><span>,</span> <span>device</span><span>=</span><span>"cuda"</span><span>)</span> <span>+</span> <span>1</span>
    <span># Since we're always computing from the left to the right,
</span>    <span># we can use the indices [0, 1, 2, ...] for every query block.
</span>    <span>indices</span> <span>=</span> <span>torch</span><span>.</span><span>arange</span><span>(</span><span>S</span> <span>//</span> <span>BLOCK_SIZE</span><span>,</span> <span>device</span><span>=</span><span>"cuda"</span><span>).</span><span>expand</span><span>(</span>
        <span>S</span> <span>//</span> <span>BLOCK_SIZE</span><span>,</span> <span>S</span> <span>//</span> <span>BLOCK_SIZE</span>
    <span>)</span>
    <span>num_blocks</span> <span>=</span> <span>num_blocks</span><span>[</span><span>None</span><span>,</span> <span>None</span><span>,</span> <span>:]</span>
    <span>indices</span> <span>=</span> <span>indices</span><span>[</span><span>None</span><span>,</span> <span>None</span><span>,</span> <span>:]</span>
    <span>return</span> <span>BlockMask</span><span>(</span><span>num_blocks</span><span>,</span> <span>indices</span><span>,</span> <span>BLOCK_SIZE</span><span>=</span><span>BLOCK_SIZE</span><span>,</span> <span>mask_mod</span><span>=</span><span>causal_mask</span><span>)</span>
</code></pre></div>

<h5 id="q-why-are-score_mod-and-mask_mod-different-isnt-mask_mod-just-a-special-case-of-score_mod"><strong>Q: Why are <code>score_mod</code> and <code>mask_mod</code> different? Isn’t <code>mask_mod</code> just a special case of <code>score_mod</code>?</strong></h5>

<p>Very astute question, hypothetical audience member! In fact, any <code>mask_mod</code> can be easily converted to a <code>score_mod</code> (we do not recommend using this function in practice!)</p>

<div><pre><code><span>def</span> <span>mask_mod_as_score_mod</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>torch</span><span>.</span><span>where</span><span>(</span><span>mask_mod</span><span>(</span><span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>),</span> <span>score</span><span>,</span> <span>-</span><span>float</span><span>(</span><span>"inf"</span><span>))</span>
</code></pre></div>

<p>So, if <code>score_mod</code> can implement everything <code>mask_mod</code> can, what’s the point of having <code>mask_mod</code>?</p>

<p>One immediate challenge: a <code>score_mod</code> requires the actual <code>score</code> value as an input, but when we’re precomputing the BlockMask, we don’t have the actual <code>score</code> value. We can perhaps fake the values by passing in all zeros, and if the <code>score_mod</code> returns <code>-inf</code>, then we consider it to be masked (in fact, we originally did this!).</p>

<p>However, there are two issues. The first is that this is hacky - what if the user’s <code>score_mod</code> returned <code>-inf</code> when the input is 0? Or what if the user’s <code>score_mod</code> masked out with a large negative value instead of <code>-inf</code>? It seems we’re trying to cram a round peg into a square hole. However, there’s a more important reason to separate out <code>mask_mod</code> from <code>score_mod</code> - it’s fundamentally more efficient!.</p>

<p>As it turns out, applying masking to every single computed element is actually quite expensive - our benchmarks see about a 15-20% degradation in performance! So, although we can get significant speedups by skipping half the computation, we lose a meaningful part of that speedup from needing to mask out every element!</p>

<p>Luckily, if we visualize the causal mask, we notice that the vast majority of blocks do not require a “causal mask” at all - they’re fully computed! It is only the blocks on the diagonal, partially computed and partially masked, that require masking to be applied.</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg13.png" alt="blockdiagonal mask"></p>

<p>The BlockMask previously told us which blocks we need to compute and which blocks we can skip. Now, we further augment this data structure to also tell us which blocks are “fully computed” (i.e. masking can be skipped) vs. “partially computed” (i.e. a mask needs to be applied). Note, however, that although masks can be skipped on “fully computed” blocks, other <code>score_mod</code>s like relative positional embeddings still need to be applied.</p>

<p>Given just a <code>score_mod</code>, there’s no sound way for us to tell which parts of it are “masking”. Hence, the user must separate these out themselves into <code>mask_mod</code>.</p>

<h5 id="q-how-much-additional-memory-does-the-blockmask-need"><strong>Q: How much additional memory does the BlockMask need?</strong></h5>

<p>The BlockMask metadata is of size <code>[BATCH_SIZE, NUM_HEADS, QUERY_LEN//BLOCK_SIZE, KV_LEN//BLOCK_SIZE].</code> If the mask is the same across the batch or heads dimension it can be broadcasted over that dimension to save memory.</p>

<p>At the default <code>BLOCK_SIZE</code> of 128, we expect that the memory usage will be fairly negligible for most use cases. For example, for a sequence length of 1 million, the BlockMask would only use 60MB of additional memory. If this is a problem, you can increase the block size:  <code>create_block_mask(..., BLOCK_SIZE=1024).</code> For example, increasing <code>BLOCK_SIZE</code> to 1024 would result in this metadata dropping to under a megabyte.</p>

<h5 id="q-how-do-the-numerics-compare"><strong>Q: How do the numerics compare?</strong></h5>

<p>Although the results are not bitwise identical, we are confident that FlexAttention is as numerically accurate as FlashAttention. We generate the following distribution of differences comparing FlashAttention versus FlexAttention over a large range of inputs on both causal and non causal attention variants. The errors are nearly identical.</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg14.png" alt="distribution chart"></p>

<h3 id="performance">Performance</h3>

<p>Generally speaking, FlexAttention is nearly as performant as a handwritten Triton kernel, which is unsurprising, as we heavily leverage a handwritten Triton kernel. However, due to its generality, we do incur a small performance penalty. For example, we must incur some additional latency to determine which block to compute next. In some cases, we provide some kernel options that can affect the performance of the kernel while changing its behavior. They can be found here: <a href="https://github.com/pytorch/pytorch/blob/ee09d066d35d7e17cf7e9479c0b8bfc70cffc264/torch/_inductor/kernel/flex_attention.py#L146-L155">performance knobs</a></p>

<p>As a case study, let’s explore how the knobs affect the performance of causal attention. We will compare performance of the triton kernel versus FlashAttentionv2 on A100. The script can be found <a href="https://github.com/pytorch/pytorch/blob/main/benchmarks/transformer/score_mod.py">here</a>.</p>

<p>FlexAttention achieves 90% of FlashAttention2’s performance in the forward pass and 85% in the backward pass. FlexAttention is currently utilizing a deterministic algorithm that recomputes more intermediates than FAv2, but we have plans to improve FlexAttention’s backward algorithm and hope to close this gap!</p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg15.png" alt="flexattention speed chart"></p>

<p><img src="https://pytorch.org/assets/images/flexattention/fg16.png" alt="flexattention speed chart"></p>

<h2 id="conclusion">Conclusion</h2>

<p>We hope you have as much fun using FlexAttention as we did developing it! While working on this, we ended up finding way more applications of this API than we could have expected. We’ve already seen it accelerate torchtune’s <a href="https://github.com/pytorch/torchtune/pull/1193">sample packing throughput by 71%</a>, replace the need for a researcher to spend over a week writing their own custom Triton kernel, and deliver competitive performance with custom handwritten attention variants.</p>

<p>One final thing that made implementing FlexAttention quite fun is that we were able to leverage a lot of existing PyTorch infra in an interesting way. For example, one of the unique aspects about TorchDynamo (torch.compile’s frontend) is that it does <em>not</em> require tensors used in the compiled function to be explicitly passed in as inputs. This allows us to compile mods like document masking, which require accessing <em>global</em> variables where the global variables need to change!</p>

<div><pre><code><span>bias</span> <span>=</span> <span>torch</span><span>.</span><span>randn</span><span>(</span><span>1024</span><span>,</span> <span>1024</span><span>)</span>
<span>def</span> <span>score_mod</span><span>(</span><span>score</span><span>,</span> <span>b</span><span>,</span> <span>h</span><span>,</span> <span>q_idx</span><span>,</span> <span>kv_idx</span><span>):</span>
    <span>return</span> <span>score</span> <span>+</span> <span>bias</span><span>[</span><span>q_idx</span><span>][</span><span>kv_idx</span><span>]</span> <span># The bias tensor can change!
</span></code></pre></div>

<p>Furthermore, the fact that <code>torch.compile</code> is a generic graph-capture mechanism also allows it to support more “advanced” transformations, such as the higher order transform that transforms any <code>mask_mod</code> into one that works with jagged tensors.</p>

<p>We also leverage TorchInductor (torch.compile’s backend) infrastructure for Triton templates. Not only did this make it easy to support codegening FlexAttention - it also automatically gave us support for dynamic shapes as well as epilogue fusion (i.e. fusing an operator onto the end of attention)! In the future, we plan on extending this support to allow for quantized versions of attention or things like <a href="https://lmsys.org/blog/2024-01-17-sglang/">RadixAttention</a> as well.</p>

<p>In addition, we also leveraged higher order ops, PyTorch’s autograd to automatically generate the backwards pass, as well as vmap to automatically apply <code>score_mod</code> for creating the BlockMask.</p>

<p>And, of course, this project wouldn’t have been possible without Triton and TorchInductor’s ability to generate Triton code.</p>

<p>We look forward to leveraging the approach we used here to more applications in the future!</p>

<h3 id="limitations-and-future-work">Limitations and Future Work</h3>

<ul>
  <li>FlexAttention is currently available in PyTorch nightly releases, we plan to release it as a prototype feature in 2.5.0</li>
  <li>We did not cover how to use FlexAttention for inference here (or how to implement PagedAttention) - we will cover those in a later post.</li>
  <li>We are working to improve the performance of FlexAttention to match FlashAttention3 on H100 GPUs.</li>
  <li>FlexAttention requires that all sequence lengths be a multiple of 128 - this will be addressed soon.</li>
  <li>We plan on adding GQA support soon - for now, you can just replicate the kv heads.</li>
</ul>

<h3 id="acknowledgements">Acknowledgements</h3>

<p>We want to highlight some prior work (and people) that have inspired FlexAttention.</p>

<ul>
  <li>Tri Dao’s work on FlashAttention</li>
  <li>Francisco Massa and the Xformers team for BlockSparseAttention in Triton</li>
  <li>The Jax team’s work on SplashAttention</li>
  <li>Philippe Tillet and Keren Zhou for helping us with Triton</li>
  <li>Ali Hassani for discussions on neighborhood attention</li>
  <li>Everybody who’s complained about attention kernels not supporting their favorite attention variant :)</li>
</ul>

                </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[RLHF is just barely RL (301 pts)]]></title>
            <link>https://twitter.com/karpathy/status/1821277264996352246</link>
            <guid>41188647</guid>
            <pubDate>Thu, 08 Aug 2024 06:22:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/karpathy/status/1821277264996352246">https://twitter.com/karpathy/status/1821277264996352246</a>, See on <a href="https://news.ycombinator.com/item?id=41188647">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Google and Meta struck secret ads deal to target teenagers (391 pts)]]></title>
            <link>https://www.ft.com/content/b3bb80f4-4e01-4ce6-8358-f4f8638790f8</link>
            <guid>41188295</guid>
            <pubDate>Thu, 08 Aug 2024 05:08:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ft.com/content/b3bb80f4-4e01-4ce6-8358-f4f8638790f8">https://www.ft.com/content/b3bb80f4-4e01-4ce6-8358-f4f8638790f8</a>, See on <a href="https://news.ycombinator.com/item?id=41188295">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="barrier-page"><div id="heroOffer-Hero offers-785c40e2-d0b6-4e79-9cfe-aadcf8c5411a" data-component="heroOffer" data-component-unique-name="Hero offers"><section data-o-grid-colspan="12 L6"><h2><blockquote>Google and Meta struck secret ads deal to target teenagers</blockquote></h2></section><div data-o-grid-colspan="12 L6"><p><span></span><span></span><span></span><span>Subscribe to unlock this article</span><span></span></p></div><div data-o-grid-colspan="12 L6"><p><h2><span>To read this article for free</span></h2><h2><strong><span>Register for FT Edit now</span></strong></h2></p><p><span>Once registered, you can:

• Read this article and many more, free for 30 days with no card details required
• Enjoy 8 thought-provoking articles a day chosen for you by senior editors
• Download the award-winning FT Edit app to access audio, saved articles and more</span></p></div></div><div data-component="subscriptionOptions" data-component-unique-name="Subscription Options Offers API"><h2>Explore our full range of subscriptions.</h2><div><div><p>Discover all the plans currently available in your country</p></div><div><p>Digital access for organisations. Includes exclusive features and content.</p></div></div></div><div data-component="whyFT" data-component-unique-name="Why FT"><div><h2>Why the FT?</h2><p>See why over a million readers pay to read the Financial Times.</p></div><p><a href="https://subs.ft.com/whytheft?ft-content-uuid=b3bb80f4-4e01-4ce6-8358-f4f8638790f8">Find out why</a></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Argdown, like Markdown for argument mapping (137 pts)]]></title>
            <link>https://argdown.org/</link>
            <guid>41186310</guid>
            <pubDate>Wed, 07 Aug 2024 22:45:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://argdown.org/">https://argdown.org/</a>, See on <a href="https://news.ycombinator.com/item?id=41186310">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>February 2022: v1.8.2 has been released (<a href="https://argdown.org/changes">changelog</a>)</p> <div><div><h2>Simple</h2> <p>Writing pros &amp; cons in Argdown is as simple as writing a Twitter message. You don't have to learn anything new, except a <a href="#learn-argdown-in-3-minutes">few simple rules</a> that will feel very natural.</p></div> <div><h2>Expressive</h2> <p>With these simple rules you will be able to define more complex relations between arguments or <a href="https://argdown.org/guide/a-first-example">dive into the details</a> of their logical premise-conclusion structures.</p></div> <div><h2>Powerful</h2> <p>Argdown can even be used within Markdown! Your code is transformed into an <a href="https://en.wikipedia.org/wiki/Argument_map">argument map</a> while you are typing. When your are ready, you can publish your analysis as pdf, embed it as a web-component in a webpage or simply export your map as an image.</p></div></div> <figure role="group"><argdown-map initial-view="map"><div slot="source"><pre><code><span>===
title: &gt;
  A first example (with arguments from 'The Debaters Handbook')
subTitle: Some Pros and Cons Reconstructed in Detail
author: Gregor Betz
date: 24/10/2018
color:
    colorScheme: colorbrewer-category9
    tagColors:
        pro: 0
        con: 1
model:
    removeTagsFromText: true
===</span>


<span>/***
 * This debate serves as "first example"
 * in the online Argdown Guide
***/</span>



<span>/*
Two central claims
*/</span>

<span>[Censorship]:</span> Censorship is not wrong in principle.

<span>[Absolute Freedom of Speech]:</span> Freedom of speech is an
absolute right.


<span>/*
Arguments of the debate
*/</span>

<span>&lt;Argument from Freedom of Speech&gt;:</span> Censorship is wrong in
principle. In a free and civilized society, everyone must
be free to express herself. <span>#con</span> <span>{source: "C1a"}</span>

<span>(1)</span> <span>[Absolute Freedom of Speech]</span>
<span>(2)</span> Censorship violates freedom of speech.
<span>(3)</span> Whatever violates an absolute right, is itself wrong in
principle.
<span>--
Specification, Modus ponens {uses: [1,2,3]}
--</span>
<span>(4)</span> Censorship is wrong in principle.
<span>    -&gt;</span> <span>[Censorship]</span>


<span>&lt;No-Harm trumps Freedom-of-Speech&gt;:</span> Freedom of speech
ceases to be a right when it causes harm to others.
Therefore freedom of speech is never an absolute right but
an aspiration. <span>#pro</span> <span>{source: "P1a"}</span>

<span>(1)</span> Sometimes, free speech causes serious harms to others.
<span>(2)</span> Whatever causes serious harms to others is not
permissible.
<span>(3)</span> If freedom of speech is sometimes not permissible, then
freedom of speech is not an absolute right.
<span>----</span>
<span>(4)</span> Freedom of speech is not an absolute right.
<span>    -&gt;</span> <span>[Absolute Freedom of Speech]</span>


<span>&lt;Argument from racial hatred&gt;:</span> Legislation against
incitement to racial hatred is permissible. Thus,
censorship is not wrong in principle. <span>#pro</span> <span>{source: "P1b"}</span>

<span>(1)</span> <span>[IRC-legislation]:</span> Legislation against incitement to
racial hatred is permissible. <span>{isInMap: false}</span>
<span>(2)</span> Legislation against incitement to racial hatred is a
form of censorship.
<span>----</span>
<span>(3)</span> <span>[Censorship]</span>


<span>&lt;Importance of inclusive public debate&gt;:</span> Legislation
against incitement to racial hatred drives racists and
others underground rather than drawing them into open and
rational debate. <span>#con</span> <span>{source: "C1b"}</span>

<span>(1)</span> We will only have an open, maximally-inclusive and
rational societal debate, if racists are not driven
underground.
<span>(2)</span> If legislation against incitement to racial hatred is
enacted, racists and others are driven underground.
<span>-----</span>
<span>(3)</span> We will only have an open, maximally-inclusive and
rational societal debate, if legislation against incitement
to racial hatred is not enacted.
<span>(4)</span> We ought to have an open, maximally-inclusive and
rational societal debate.
<span>-----</span>
<span>(5)</span> Legislation against incitement to racial hatred ought
not be enacted.
<span>  -&gt;</span> <span>[IRC-legislation]</span>


<span>&lt;Excessive sex and violence&gt;:</span> Excessive sex and violence in
film and television contribute to a tendency towards
similar behaviour in spectators. In these cases, censorship
is obligatory. <span>#pro</span> <span>{source: "P2"}</span>

<span>(1)</span> <span>[Causal link]:</span> Excessive sex and violence in film and
television contributes to a tendency towards similar
behaviour in spectators.  <span>{isInMap: false}</span>
<span>(2)</span> Whatever contributes to an tendency towards criminal
behaviour may be legally banned, except more weighty
reasons speak against doing so.
<span>(3)</span> There are no substantial reasons against legally
banning excessive sex and violence in film and television.
<span>-----</span>
<span>(4)</span> Excessive sex and violence in film and television may
be legally banned.
<span>(5)</span> If excessive sex and violence in film and television
may be legally banned, censorship is not wrong in principle.
<span>-----</span>
<span>(6)</span> <span>[Censorship]</span>


<span>&lt;Argument from expertise&gt;:</span> Scientific studies have
established a causal link between violence in film and a
similar behaviour in spectators. <span>#pro</span>

<span>(1)</span> Scientific studies have established that excessive sex
and violence in film and television contributes to a
tendency towards similar behaviour in spectators (@<span>[Causal
link]</span>).
<span>(2)</span> If scientific studies have established that X and if
there is no evidence against X being the case, then X.
<span>----</span>
<span>(3)</span> <span>[Causal link]</span>


<span>&lt;Causal link questionable&gt;:</span> The link between sex and
violence on screen and in real life is far from conclusive.
The individual's personality make her watch violent videos,
not vice versa. <span>#con</span> <span>{source: "C2"}</span>

<span>(1)</span> The consumption of violent video is correlated with
violent and criminal behaviour.
<span>(2)</span> The best explanation for this correlation is that those
individuals who <span>_already have tendencies_</span> to violence are
likely to watch violent `video nasties', just as those with
a predilection for rape are likely to use pornography.
<span>--
Inference to the best explanation {uses: [1,2]}
--</span>
<span>(3)</span> A disposition for criminal behaviour causes the
consumption of violent video.
<span>(4)</span> Causal relations are asymmetric.
<span>-----</span>
<span>(5)</span> The consumption of violent video does not bring about a
disposition for criminal behaviour.
<span>  -&gt;</span> <span>[Causal link]</span></code></pre></div><p slot="map"><svg width="720pt" height="346pt" viewBox="0.00 0.00 720.00 346.42" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="graph0" transform="scale(0.85 0.85) rotate(0) translate(4 404)"><title>Argument Map</title> <g id="node1"><title>n0</title> <path fill="white" stroke="#1b9e77" stroke-width="2" d="M399,-400C399,-400 227,-400 227,-400 221,-400 215,-394 215,-388 215,-388 215,-372 215,-372 215,-366 221,-360 227,-360 227,-360 399,-360 399,-360 405,-360 411,-366 411,-372 411,-372 411,-388 411,-388 411,-394 405,-400 399,-400"></path> <text text-anchor="start" x="287.72" y="-386" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Censorship</text> <text text-anchor="start" x="232.71" y="-369" font-family="arial" font-size="10.00" fill="#000000">Censorship is not wrong in principle.</text></g> <g id="node2"><title>n1</title> <path fill="white" stroke="#1b9e77" stroke-width="2" d="M184,-176C184,-176 12,-176 12,-176 6,-176 0,-170 0,-164 0,-164 0,-148 0,-148 0,-142 6,-136 12,-136 12,-136 184,-136 184,-136 190,-136 196,-142 196,-148 196,-148 196,-164 196,-164 196,-170 190,-176 184,-176"></path> <text text-anchor="start" x="33.26" y="-162" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Absolute Freedom of Speech</text> <text text-anchor="start" x="10.2" y="-145" font-family="arial" font-size="10.00" fill="#000000">Freedom of speech is an absolute right.</text></g> <g id="node3"><title>n2</title> <path fill="#d95f02" stroke="black" d="M185,-312C185,-312 13,-312 13,-312 7,-312 1,-306 1,-300 1,-300 1,-260 1,-260 1,-254 7,-248 13,-248 13,-248 185,-248 185,-248 191,-248 197,-254 197,-260 197,-260 197,-300 197,-300 197,-306 191,-312 185,-312"></path> <text text-anchor="start" x="20.65" y="-298" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Argument from Freedom of Speech</text> <text text-anchor="start" x="17.32" y="-281" font-family="arial" font-size="10.00" fill="#000000">Censorship is wrong in principle. In a</text> <text text-anchor="start" x="20.09" y="-269" font-family="arial" font-size="10.00" fill="#000000"> free and civilized society, everyone</text> <text text-anchor="start" x="26.2" y="-257" font-family="arial" font-size="10.00" fill="#000000"> must be free to express herself. </text></g> <g id="edge8"><title>n1-&gt;n2</title> <path fill="none" stroke="#00ff00" d="M98.16,-176.06C98.29,-192.46 98.49,-216.69 98.66,-237.53"></path> <polygon fill="#00ff00" stroke="#00ff00" points="95.16,-237.77 98.74,-247.74 102.16,-237.71 95.16,-237.77"></polygon></g> <g id="edge1"><title>n2-&gt;n0</title> <path fill="none" stroke="#ff0000" d="M166.71,-312.01C197.52,-326.11 233.36,-342.53 261.86,-355.58"></path> <polygon fill="#ff0000" stroke="#ff0000" points="260.68,-358.89 271.23,-359.87 263.6,-352.53 260.68,-358.89"></polygon></g> <g id="node4"><title>n3</title> <path fill="#1b9e77" stroke="black" d="M184,-76C184,-76 12,-76 12,-76 6,-76 0,-70 0,-64 0,-64 0,-12 0,-12 0,-6 6,0 12,0 12,0 184,0 184,0 190,0 196,-6 196,-12 196,-12 196,-64 196,-64 196,-70 190,-76 184,-76"></path> <text text-anchor="start" x="15.22" y="-62" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">No-Harm trumps Freedom-of-Speech</text> <text text-anchor="start" x="9.92" y="-45" font-family="arial" font-size="10.00" fill="#000000">Freedom of speech ceases to be a right</text> <text text-anchor="start" x="28.54" y="-33" font-family="arial" font-size="10.00" fill="#000000"> when it causes harm to others.</text> <text text-anchor="start" x="13.26" y="-21" font-family="arial" font-size="10.00" fill="#000000"> Therefore freedom of speech is never</text> <text text-anchor="start" x="18.53" y="-9" font-family="arial" font-size="10.00" fill="#000000"> an absolute right but an aspiration. </text></g> <g id="edge2"><title>n3-&gt;n1</title> <path fill="none" stroke="#ff0000" d="M98,-76.02C98,-92.03 98,-110.5 98,-125.55"></path> <polygon fill="#ff0000" stroke="#ff0000" points="94.5,-125.82 98,-135.82 101.5,-125.82 94.5,-125.82"></polygon></g> <g id="node5"><title>n4</title> <path fill="#1b9e77" stroke="black" d="M399,-312C399,-312 227,-312 227,-312 221,-312 215,-306 215,-300 215,-300 215,-260 215,-260 215,-254 221,-248 227,-248 227,-248 399,-248 399,-248 405,-248 411,-254 411,-260 411,-260 411,-300 411,-300 411,-306 405,-312 399,-312"></path> <text text-anchor="start" x="251.05" y="-298" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Argument from racial hatred</text> <text text-anchor="start" x="241.87" y="-281" font-family="arial" font-size="10.00" fill="#000000">Legislation against incitement to</text> <text text-anchor="start" x="237.16" y="-269" font-family="arial" font-size="10.00" fill="#000000"> racial hatred is permissible. Thus,</text> <text text-anchor="start" x="231.04" y="-257" font-family="arial" font-size="10.00" fill="#000000"> censorship is not wrong in principle. </text></g> <g id="edge5"><title>n4-&gt;n0</title> <path fill="none" stroke="#00ff00" d="M313,-312.01C313,-324.03 313,-337.73 313,-349.59"></path> <polygon fill="#00ff00" stroke="#00ff00" points="309.5,-349.87 313,-359.87 316.5,-349.87 309.5,-349.87"></polygon></g> <g id="node6"><title>n5</title> <path fill="#d95f02" stroke="black" d="M400,-194C400,-194 226,-194 226,-194 220,-194 214,-188 214,-182 214,-182 214,-130 214,-130 214,-124 220,-118 226,-118 226,-118 400,-118 400,-118 406,-118 412,-124 412,-130 412,-130 412,-182 412,-182 412,-188 406,-194 400,-194"></path> <text text-anchor="start" x="230.76" y="-180" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Importance of inclusive public debate</text> <text text-anchor="start" x="241.87" y="-163" font-family="arial" font-size="10.00" fill="#000000">Legislation against incitement to</text> <text text-anchor="start" x="243.82" y="-151" font-family="arial" font-size="10.00" fill="#000000"> racial hatred drives racists and</text> <text text-anchor="start" x="223.53" y="-139" font-family="arial" font-size="10.00" fill="#000000"> others underground rather than drawing</text> <text text-anchor="start" x="231.58" y="-127" font-family="arial" font-size="10.00" fill="#000000"> them into open and rational debate. </text></g> <g id="edge3"><title>n5-&gt;n4</title> <path fill="none" stroke="#ff0000" d="M313,-194.27C313,-207.89 313,-223.39 313,-237.37"></path> <polygon fill="#ff0000" stroke="#ff0000" points="309.5,-237.71 313,-247.71 316.5,-237.71 309.5,-237.71"></polygon></g> <g id="node7"><title>n6</title> <path fill="#1b9e77" stroke="black" d="M614,-324C614,-324 442,-324 442,-324 436,-324 430,-318 430,-312 430,-312 430,-248 430,-248 430,-242 436,-236 442,-236 442,-236 614,-236 614,-236 620,-236 626,-242 626,-248 626,-248 626,-312 626,-312 626,-318 620,-324 614,-324"></path> <text text-anchor="start" x="466.87" y="-310" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Excessive sex and violence</text> <text text-anchor="start" x="442.7" y="-293" font-family="arial" font-size="10.00" fill="#000000">Excessive sex and violence in film and</text> <text text-anchor="start" x="451.03" y="-281" font-family="arial" font-size="10.00" fill="#000000"> television contribute to a tendency</text> <text text-anchor="start" x="464.66" y="-269" font-family="arial" font-size="10.00" fill="#000000"> towards similar behaviour in</text> <text text-anchor="start" x="441.58" y="-257" font-family="arial" font-size="10.00" fill="#000000"> spectators. In these cases, censorship</text> <text text-anchor="start" x="497.16" y="-245" font-family="arial" font-size="10.00" fill="#000000"> is obligatory. </text></g> <g id="edge6"><title>n6-&gt;n0</title> <path fill="none" stroke="#00ff00" d="M433.38,-324.13C409.55,-334.99 384.85,-346.25 364.08,-355.72"></path> <polygon fill="#00ff00" stroke="#00ff00" points="362.47,-352.6 354.83,-359.93 365.38,-358.97 362.47,-352.6"></polygon></g> <g id="node8"><title>n7</title> <path fill="#1b9e77" stroke="black" d="M614,-188C614,-188 442,-188 442,-188 436,-188 430,-182 430,-176 430,-176 430,-136 430,-136 430,-130 436,-124 442,-124 442,-124 614,-124 614,-124 620,-124 626,-130 626,-136 626,-136 626,-176 626,-176 626,-182 620,-188 614,-188"></path> <text text-anchor="start" x="473.27" y="-174" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Argument from expertise</text> <text text-anchor="start" x="447.7" y="-157" font-family="arial" font-size="10.00" fill="#000000">Scientific studies have established a</text> <text text-anchor="start" x="448.82" y="-145" font-family="arial" font-size="10.00" fill="#000000"> causal link between violence in film</text> <text text-anchor="start" x="442.43" y="-133" font-family="arial" font-size="10.00" fill="#000000"> and a similar behaviour in spectators. </text></g> <g id="edge7"><title>n7-&gt;n6</title> <path fill="none" stroke="#00ff00" d="M528,-188.1C528,-199.58 528,-212.93 528,-225.81"></path> <polygon fill="#00ff00" stroke="#00ff00" points="524.5,-225.99 528,-235.99 531.5,-225.99 524.5,-225.99"></polygon></g> <g id="node9"><title>n8</title> <path fill="#d95f02" stroke="black" d="M828,-200C828,-200 656,-200 656,-200 650,-200 644,-194 644,-188 644,-188 644,-124 644,-124 644,-118 650,-112 656,-112 656,-112 828,-112 828,-112 834,-112 840,-118 840,-124 840,-124 840,-188 840,-188 840,-194 834,-200 828,-200"></path> <text text-anchor="start" x="687.82" y="-186" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Causal link questionable</text> <text text-anchor="start" x="658.64" y="-169" font-family="arial" font-size="10.00" fill="#000000">The link between sex and violence on</text> <text text-anchor="start" x="669.49" y="-157" font-family="arial" font-size="10.00" fill="#000000"> screen and in real life is far from</text> <text text-anchor="start" x="680.05" y="-145" font-family="arial" font-size="10.00" fill="#000000"> conclusive. The individual's</text> <text text-anchor="start" x="663.93" y="-133" font-family="arial" font-size="10.00" fill="#000000"> personality make her watch violent</text> <text text-anchor="start" x="689.76" y="-121" font-family="arial" font-size="10.00" fill="#000000"> videos, not vice versa. </text></g> <g id="edge4"><title>n8-&gt;n6</title> <path fill="none" stroke="#ff0000" d="M666.55,-200.01C648.97,-210.04 630.14,-220.77 612.21,-230.99"></path> <polygon fill="#ff0000" stroke="#ff0000" points="610.44,-227.97 603.49,-235.96 613.91,-234.05 610.44,-227.97"></polygon></g></g></svg></p></argdown-map><figcaption>A first example (with arguments from 'The Debaters Handbook')
 — Some Pros and Cons Reconstructed in Detail</figcaption></figure><p>If you are new to argument mapping, read our <a href="https://argdown.org/guide/a-first-example.html">tutorial</a> about how this debate was reconstructed.</p> <div><p>Choose your own argument map style</p> <p>This map hides a lot of the logical details for simplicty's sake (to dive into the details, click on "Source"). If you prefer argument maps where <em>every</em> premise and inferential step is visualized, it takes <a href="https://argdown.org/guide/creating-oldschool-argument-maps-and-inference-trees.html">only a few configuration changes</a> to produce them with Argdown.</p></div> <h2 id="learn-argdown-in-3-minutes"><a href="#learn-argdown-in-3-minutes">#</a> Learn Argdown in 3 Minutes</h2> <p>Argdown's formula consists of three ingredients:</p> <h3 id="_1-nested-lists-of-pros-cons"><a href="#_1-nested-lists-of-pros-cons">#</a> <em>1</em> Nested lists of pros &amp; cons</h3> <p>Statement titles come in square brackets, argument titles in angle brackets.</p> <figure role="group"><argdown-map initial-view="source"><div slot="source"><pre><code><span>[Argdown is the best]:</span> Argdown is the best
tool for analyzing complex argumentation
and creating argument maps.
<span>  -</span> <span>&lt;Editors easier&gt;:</span> Argument map editors
    are way easier to use. <span>#pro-editor</span>
<span>    +</span> <span>&lt;WYSIWYG&gt;:</span> In argument map editors what
      you see during editing is what you get
      at the end: an argument map. <span>#pro-editor</span>
<span>  +</span> <span>&lt;Pure Data&gt;:</span> With Argdown no user interface
    gets in your way. You can focus on writing
    without getting distracted.</code></pre></div><p slot="map"><svg width="420pt" height="272pt" viewBox="0.00 0.00 419.50 272.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="graph0" transform="scale(1 1) rotate(0) translate(4 268)"><title>Argument Map</title> <g id="node1"><title>n0</title> <path fill="white" stroke="#1b9e77" stroke-width="2" d="M291.5,-264C291.5,-264 119.5,-264 119.5,-264 113.5,-264 107.5,-258 107.5,-252 107.5,-252 107.5,-212 107.5,-212 107.5,-206 113.5,-200 119.5,-200 119.5,-200 291.5,-200 291.5,-200 297.5,-200 303.5,-206 303.5,-212 303.5,-212 303.5,-252 303.5,-252 303.5,-258 297.5,-264 291.5,-264"></path> <text text-anchor="start" x="161.6" y="-250" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Argdown is the best</text> <text text-anchor="start" x="122.42" y="-233" font-family="arial" font-size="10.00" fill="#000000">Argdown is the best tool for analyzing</text> <text text-anchor="start" x="123.26" y="-221" font-family="arial" font-size="10.00" fill="#000000"> complex argumentation and creating</text> <text text-anchor="start" x="167.99" y="-209" font-family="arial" font-size="10.00" fill="#000000"> argument maps.</text></g> <g id="node2"><title>n1</title> <path fill="#d95f02" stroke="black" d="M185,-158C185,-158 12,-158 12,-158 6,-158 0,-152 0,-146 0,-146 0,-118 0,-118 0,-112 6,-106 12,-106 12,-106 185,-106 185,-106 191,-106 197,-112 197,-118 197,-118 197,-146 197,-146 197,-152 191,-158 185,-158"></path> <text text-anchor="start" x="68.44" y="-144" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Editors easier</text> <text text-anchor="start" x="10.37" y="-127" font-family="arial" font-size="10.00" fill="#000000">Argument map editors are way easier to</text> <text text-anchor="start" x="62.6" y="-115" font-family="arial" font-size="10.00" fill="#000000"> use. #pro-editor</text></g> <g id="edge2"><title>n1-&gt;n0</title> <path fill="none" stroke="#ff0000" d="M126.06,-158.24C137.65,-168.86 151.39,-181.44 164.15,-193.13"></path> <polygon fill="#ff0000" stroke="#ff0000" points="161.8,-195.72 171.53,-199.89 166.52,-190.56 161.8,-195.72"></polygon></g> <g id="node3"><title>n2</title> <path fill="#d95f02" stroke="black" d="M184.5,-64C184.5,-64 12.5,-64 12.5,-64 6.5,-64 0.5,-58 0.5,-52 0.5,-52 0.5,-12 0.5,-12 0.5,-6 6.5,0 12.5,0 12.5,0 184.5,0 184.5,0 190.5,0 196.5,-6 196.5,-12 196.5,-12 196.5,-52 196.5,-52 196.5,-58 190.5,-64 184.5,-64"></path> <text text-anchor="start" x="73.78" y="-50" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">WYSIWYG</text> <text text-anchor="start" x="13.48" y="-33" font-family="arial" font-size="10.00" fill="#000000">In argument map editors what you see</text> <text text-anchor="start" x="18.47" y="-21" font-family="arial" font-size="10.00" fill="#000000"> during editing is what you get at the</text> <text text-anchor="start" x="19.87" y="-9" font-family="arial" font-size="10.00" fill="#000000"> end: an argument map. #pro-editor</text></g> <g id="edge1"><title>n2-&gt;n1</title> <path fill="none" stroke="#00ff00" d="M98.5,-64.01C98.5,-74.1 98.5,-85.38 98.5,-95.76"></path> <polygon fill="#00ff00" stroke="#00ff00" points="95,-95.76 98.5,-105.76 102,-95.76 95,-95.76"></polygon></g> <g id="node4"><title>n3</title> <path fill="#1b9e77" stroke="black" d="M399.5,-164C399.5,-164 227.5,-164 227.5,-164 221.5,-164 215.5,-158 215.5,-152 215.5,-152 215.5,-112 215.5,-112 215.5,-106 221.5,-100 227.5,-100 227.5,-100 399.5,-100 399.5,-100 405.5,-100 411.5,-106 411.5,-112 411.5,-112 411.5,-152 411.5,-152 411.5,-158 405.5,-164 399.5,-164"></path> <text text-anchor="start" x="290.99" y="-150" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Pure Data</text> <text text-anchor="start" x="227.65" y="-133" font-family="arial" font-size="10.00" fill="#000000">With Argdown no user interface gets in</text> <text text-anchor="start" x="234.87" y="-121" font-family="arial" font-size="10.00" fill="#000000"> your way. You can focus on writing</text> <text text-anchor="start" x="255.43" y="-109" font-family="arial" font-size="10.00" fill="#000000"> without getting distracted.</text></g> <g id="edge3"><title>n3-&gt;n0</title> <path fill="none" stroke="#00ff00" d="M279.33,-164.01C269.18,-173.21 257.95,-183.4 247.38,-193"></path> <polygon fill="#00ff00" stroke="#00ff00" points="244.87,-190.55 239.82,-199.86 249.58,-195.73 244.87,-190.55"></polygon></g></g></svg></p></argdown-map></figure><div><p>How to get the argument map</p> <p>Click on the <strong>Map</strong> button in the upper right corner to see the resulting argument map.</p> <p>This will work for <em>all</em> Argdown examples in this documentation.</p></div> <h3 id="_2-premise-conclusion-structures"><a href="#_2-premise-conclusion-structures">#</a> <em>2</em> Premise-conclusion-structures</h3> <p>Let's logically reconstruct an additional argument in detail:</p> <figure role="group"><argdown-map initial-view="source"><div slot="source"><pre><code><span>&lt;Word Analogy&gt;</span>

<span>(1)</span> <span>[Word @#*%!]:</span> It is much easier to write
    and format a text with Markdown than it is with Word.
<span>(2)</span> Markdown and Word are comparable in their ease of use
    to Argdown and argument map editors respectively.
<span>----</span>
<span>(3)</span> It is much easier to analyze complex argumentation and
    create argument maps with Argdown than it is with
    argument map editors.
<span>    -&gt;</span> <span>&lt;Editors easier&gt;</span>


<span>[Argdown is the best]</span>
<span>  -</span> <span>&lt;Editors easier&gt;</span> <span>#pro-editor</span>
<span>    +</span> <span>&lt;WYSIWYG&gt;</span> <span>#pro-editor</span>
<span>  +</span> <span>&lt;Pure Data&gt;</span></code></pre></div><p slot="map"><svg width="525pt" height="288pt" viewBox="0.00 0.00 525.00 288.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="graph0" transform="scale(1 1) rotate(0) translate(4 284)"><title>Argument Map</title> <g id="node1"><title>n0</title> <path fill="white" stroke="#1b9e77" stroke-width="2" d="M184,-64C184,-64 12,-64 12,-64 6,-64 0,-58 0,-52 0,-52 0,-12 0,-12 0,-6 6,0 12,0 12,0 184,0 184,0 190,0 196,-6 196,-12 196,-12 196,-52 196,-52 196,-58 190,-64 184,-64"></path> <text text-anchor="start" x="69.04" y="-50" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Word @#*%!</text> <text text-anchor="start" x="14.65" y="-33" font-family="arial" font-size="10.00" fill="#000000">It is much easier to write and format a</text> <text text-anchor="start" x="23.55" y="-21" font-family="arial" font-size="10.00" fill="#000000"> text with Markdown than it is with</text> <text text-anchor="start" x="83.28" y="-9" font-family="arial" font-size="10.00" fill="#000000"> Word.</text></g> <g id="node3"><title>n2</title> <path fill="#1b9e77" stroke="black" d="M184,-136C184,-136 12,-136 12,-136 6,-136 0,-130 0,-124 0,-124 0,-112 0,-112 0,-106 6,-100 12,-100 12,-100 184,-100 184,-100 190,-100 196,-106 196,-112 196,-112 196,-124 196,-124 196,-130 190,-136 184,-136"></path> <text text-anchor="start" x="66.61" y="-116" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Word Analogy</text></g> <g id="edge5"><title>n0-&gt;n2</title> <path fill="none" stroke="#00ff00" d="M98,-64.28C98,-72.58 98,-81.48 98,-89.56"></path> <polygon fill="#00ff00" stroke="#00ff00" points="94.5,-89.6 98,-99.6 101.5,-89.6 94.5,-89.6"></polygon></g> <g id="node2"><title>n1</title> <path fill="white" stroke="#1b9e77" stroke-width="2" d="M398,-280C398,-280 226,-280 226,-280 220,-280 214,-274 214,-268 214,-268 214,-256 214,-256 214,-250 220,-244 226,-244 226,-244 398,-244 398,-244 404,-244 410,-250 410,-256 410,-256 410,-268 410,-268 410,-274 404,-280 398,-280"></path> <text text-anchor="start" x="268.1" y="-260" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Argdown is the best</text></g> <g id="node4"><title>n3</title> <path fill="#d95f02" stroke="black" d="M291,-208C291,-208 119,-208 119,-208 113,-208 107,-202 107,-196 107,-196 107,-184 107,-184 107,-178 113,-172 119,-172 119,-172 291,-172 291,-172 297,-172 303,-178 303,-184 303,-184 303,-196 303,-196 303,-202 297,-208 291,-208"></path> <text text-anchor="start" x="174.44" y="-188" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Editors easier</text></g> <g id="edge1"><title>n2-&gt;n3</title> <path fill="none" stroke="#ff0000" d="M124.18,-136.12C138.04,-145.19 155.24,-156.45 170.21,-166.24"></path> <polygon fill="#ff0000" stroke="#ff0000" points="168.44,-169.26 178.72,-171.81 172.27,-163.41 168.44,-169.26"></polygon></g> <g id="edge3"><title>n3-&gt;n1</title> <path fill="none" stroke="#ff0000" d="M231.18,-208.12C245.04,-217.19 262.24,-228.45 277.21,-238.24"></path> <polygon fill="#ff0000" stroke="#ff0000" points="275.44,-241.26 285.72,-243.81 279.27,-235.41 275.44,-241.26"></polygon></g> <g id="node5"><title>n4</title> <path fill="#d95f02" stroke="black" d="M398,-136C398,-136 226,-136 226,-136 220,-136 214,-130 214,-124 214,-124 214,-112 214,-112 214,-106 220,-100 226,-100 226,-100 398,-100 398,-100 404,-100 410,-106 410,-112 410,-112 410,-124 410,-124 410,-130 404,-136 398,-136"></path> <text text-anchor="start" x="287.28" y="-116" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">WYSIWYG</text></g> <g id="edge2"><title>n4-&gt;n3</title> <path fill="none" stroke="#00ff00" d="M285.82,-136.12C271.96,-145.19 254.76,-156.45 239.79,-166.24"></path> <polygon fill="#00ff00" stroke="#00ff00" points="237.73,-163.41 231.28,-171.81 241.56,-169.26 237.73,-163.41"></polygon></g> <g id="node6"><title>n5</title> <path fill="#1b9e77" stroke="black" d="M505,-208C505,-208 333,-208 333,-208 327,-208 321,-202 321,-196 321,-196 321,-184 321,-184 321,-178 327,-172 333,-172 333,-172 505,-172 505,-172 511,-172 517,-178 517,-184 517,-184 517,-196 517,-196 517,-202 511,-208 505,-208"></path> <text text-anchor="start" x="396.49" y="-188" font-family="arial" font-weight="bold" font-size="10.00" fill="#000000">Pure Data</text></g> <g id="edge4"><title>n5-&gt;n1</title> <path fill="none" stroke="#00ff00" d="M392.82,-208.12C378.96,-217.19 361.76,-228.45 346.79,-238.24"></path> <polygon fill="#00ff00" stroke="#00ff00" points="344.73,-235.41 338.28,-243.81 348.56,-241.26 344.73,-235.41"></polygon></g></g></svg></p></argdown-map></figure><p>Click on the <strong>Map</strong> button in the upper right corner to see the resulting argument map.</p> <h3 id="_3-markdown-like-text-formatting"><a href="#_3-markdown-like-text-formatting">#</a> <em>3</em> Markdown-like text-formatting</h3> <figure role="group"><argdown-map initial-view="source"><div slot="source"><pre><code><span># Headings are used to group statement and arguments in the map</span>

You can use <span>__many__</span>  (though not all) <span>*features*</span> of [<span>Markdown</span>](<span>http://commonmark.org/</span>) to format Argdown text.
And you can use <span>#hashtags</span> to color statements and arguments in the map.</code></pre></div><p slot="map"><svg width="8pt" height="8pt" viewBox="0.00 0.00 8.00 8.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="graph0" transform="scale(1 1) rotate(0) translate(4 4)"><title>Argument Map</title></g></svg></p></argdown-map></figure><p>For this example, no map will be generated, as the Argdown source code contains no statements or arguments connected by support or attack relations.</p> <h2 id="getting-started"><a href="#getting-started">#</a> Getting started</h2> <p>Now that you have learned the basics of Argdown you can:</p> <div><ul><li><a href="https://christianvoigt.github.io/argdown/sandbox/" target="_blank" rel="noopener noreferrer">Browser Sandbox<span> <span>(opens new window)</span></span></a> Try out Argdown in your browser. Includes a live preview of the generated map.</li> <li><a href="https://argdown.org/guide/installing-the-vscode-extension.html">VS Code Extension</a> Install the Argdown VS Code extension for full Argdown language support in one of the best code editors around. Includes a live preview, syntax highlighting, content assist, code linting and export options.</li> <li><a href="https://argdown.org/guide/installing-the-commandline-tool.html">Commandline Tool</a> If you prefer to work with the commandline install the Argdown commandline tool. You can define custom processes in your config file and use them in a task runner to export several argument maps for the same document at once.</li></ul> <p>Also, check out our free <a href="https://github.com/christianvoigt/argdown/tree/master/packages/ArgVu" target="_blank" rel="noopener noreferrer">ArgVu<span> <span>(opens new window)</span></span></a> font. It comes with Argdown-specific font-ligatures and glyphs.</p> <div><p>TIP</p> <p>If you are getting unexpected results in your map, take a look at the <a href="https://argdown.org/syntax">syntax rules</a> of Argdown and do not forget to separate top-level elements by empty lines.</p> <p>For any questions not answered by this documentation, don't hesitate to <a href="https://github.com/christianvoigt/argdown/issues" target="_blank" rel="noopener noreferrer">open a new issue<span> <span>(opens new window)</span></span></a> on github.</p></div></div></div><p>
    MIT Licensed | Copyright © 2018-present Christian Voigt | Funded by Debatelab, KIT Karlsuhe
  </p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Judge Fines Ripple $125M, Bans Future Securities Law Violations (130 pts)]]></title>
            <link>https://www.coindesk.com/policy/2024/08/07/judge-fines-ripple-125m-bans-future-securities-law-violations-in-long-running-sec-case/</link>
            <guid>41186116</guid>
            <pubDate>Wed, 07 Aug 2024 22:11:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.coindesk.com/policy/2024/08/07/judge-fines-ripple-125m-bans-future-securities-law-violations-in-long-running-sec-case/">https://www.coindesk.com/policy/2024/08/07/judge-fines-ripple-125m-bans-future-securities-law-violations-in-long-running-sec-case/</a>, See on <a href="https://news.ycombinator.com/item?id=41186116">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-module-name="article-body-no-right-rail" data-module-version="1.0.0"><div data-submodule-name="composer-content"><div><ul><li><p>A federal judge imposed a $125 million fine on Ripple after finding last year that its institutional sales of XRP violated federal securities laws.</p></li><li><p>The judge reiterated her view that Ripple's programmatic sales of XRP to retail clients through exchanges did not violate federal securities laws.</p></li></ul></div><div><p>A federal judge ordered Ripple to pay $125 million in civil penalties and imposed an injunction against future securities law violations on Wednesday.</p></div><div><p>District Judge Analisa Torres, of the Southern District of New York, <a href="https://storage.courtlistener.com/recap/gov.uscourts.nysd.551082/gov.uscourts.nysd.551082.973.0.pdf" target="_blank">imposed the fine</a> after finding that 1,278 institutional sale transactions by Ripple violated securities law, leading to the fine. The $125.035 million fine is well below the $1 billion in disgorgement and prejudgment interest and $900 million in civil penalties the SEC sought.</p></div></div><div data-submodule-name="composer-content"><div><p>Wednesday's order on remedies follows the judge's July 2023 ruling in the case itself, finding that Ripple violated federal securities laws through its direct sale of XRP to institutional clients, though she also ruled that Ripple's programmatic sales of XRP to retail clients through exchanges did not violate any securities laws.</p></div><div><p>The SEC tried unsuccessfully to appeal that portion of the ruling while the case was ongoing.</p></div></div><div data-submodule-name="composer-content"><div><p>Judge Torres also banned Ripple from future violations of federal securities laws on Wednesday, saying that while she isn't making a judgement that Ripple has violated any laws after the SEC filed its lawsuit, the company may well "cross the line" in a section referring to Ripple's "on demand liquidity" offerings.</p></div><div><p>"Rather, the Court finds that Ripple’s willingness to push the boundaries of the Order evinces a likelihood that it will eventually (if it has not already) cross the line," she said. "On balance, the Court finds that there is a reasonable probability of future violations, meriting the issuance of an injunction."</p></div><div><p>The injunction document requires Ripple to file a registration statement if it intends to sell any securities.</p></div><div><p>The SEC is likely to appeal the July 2023 ruling now that the judge has imposed a sentence, after the same judge denied the SEC's motion for an interlocutory appeal last year.</p></div><div><p>The SEC and Ripple settled charges tied to CEO Brad Garlinghouse and other executives after that interlocutory appeal was denied.</p></div><div><p>The price of XRP rose 3 cents, or around 2%, after the judgement was published.</p></div><p>Edited by<!-- --> <!-- -->Stephen Alpher.</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gazette: Cloud-native millisecond-latency streaming (127 pts)]]></title>
            <link>https://github.com/gazette</link>
            <guid>41185859</guid>
            <pubDate>Wed, 07 Aug 2024 21:39:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/gazette">https://github.com/gazette</a>, See on <a href="https://news.ycombinator.com/item?id=41185859">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-turbo-body="">
      


    <div>
      <p><a href="#start-of-content" data-skip-target-assigned="false">Skip to content</a>

      <span data-view-component="true">
    <span data-view-component="true"></span>
</span></p><react-partial partial-name="keyboard-shortcuts-dialog" data-ssr="false">
  
  
  
</react-partial>




      

          

              


<header role="banner" data-color-mode="light" data-light-theme="light" data-dark-theme="dark">
  <h2>Navigation Menu</h2>

  

  <div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;packages&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;packages_link_product_navbar&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>

                  <li>
      
      
</li>

                  <li>
      
      <div>
                <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;white_papers_ebooks_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;white_papers_ebooks_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      White papers, Ebooks, Webinars

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="org:gazette" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="_qZEQNwho9swF08KwM9xs12dgNQ10Ufjdppe_ZwvmAk0UjiF4U-e6hiP2G0htU_yJDD4dXmhLwy40qH6M8_k9Q" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="" data-current-org="gazette" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false">
  
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Corg-login%3E&amp;source=header" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/gazette&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="1b8324de2362d572fa8034fa64ef93153a63f250d736e9dd15d23ef2b640db93" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<org-login>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
        </p></div>
      </div>
</header>

      
    </div>

  








    


    
    <include-fragment data-base-src="https://github.com/notifications/beta/shelf"></include-fragment>





  <div data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="">
      <main>
        















<div itemscope="" itemtype="http://schema.org/Organization">
  


<header>
  <div>
        <p><img itemprop="image" src="https://avatars.githubusercontent.com/u/47641995?s=200&amp;v=4" width="100" height="100" alt="@gazette">
        </p>
      <div>
        

          <div><p>Development of Gazette and related projects.</p></div>

        <ul>

          <li>
          </li>

        </ul>

        
      </div>

      

    </div>

  <div>
  <nav data-url="/users/gazette/tab_counts" aria-label="Organization">
    <div>
      <ul>
          <li data-tab-item="org-header-overview-tab">
  <a href="https://github.com/gazette">
    
    Overview
  </a>
</li>

          <li data-tab-item="org-header-repositories-tab">
  <a href="https://github.com/orgs/gazette/repositories">
    
    Repositories
      <span title="Not available" data-view-component="true"></span>
  </a>
</li>

          
          <li data-tab-item="org-header-projects-tab">
  <a href="https://github.com/orgs/gazette/projects" data-hotkey="g b">
    
    Projects
      <span title="Not available" data-view-component="true"></span>
  </a>
</li>

          <li data-tab-item="org-header-packages-tab">
  <a href="https://github.com/orgs/gazette/packages">
    
    Packages
  </a>
</li>

          
          <li data-tab-item="org-header-people-tab">
  <a href="https://github.com/orgs/gazette/people">
    
    People
      <span title="Not available" data-view-component="true"></span>
  </a>
</li>

          
          
          
          
      </ul>

      
    </div>
  </nav>
</div>


    
</header>


  <div data-view-component="true">

  <div data-hpc="" data-view-component="true">
  

  
  
  

    <div>

  <h2>
        Popular repositories

      <span>Loading</span>

    <span role="status" aria-live="polite" data-error-text="Something went wrong." data-success-text="Order updated."></span>
  </h2>

    <ol>

    <li>
      <div>
          


          <p>
            Build platforms that flexibly mix SQL, batch, and stream processing paradigms
          </p>

          <p>
              <span>
  <span></span>
  <span itemprop="programmingLanguage">Go</span>
</span>

              <a href="https://github.com/gazette/core/stargazers">
                <svg aria-label="stars" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
                622
              </a>
              <a href="https://github.com/gazette/core/forks">
                <svg aria-label="forks" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>
                51
              </a>
          </p>
        </div>
    </li>

    <li>
      <div>
          


          <p>
            Example bare-bones gazette consumer application that plays ping pong. _At Scale_!
          </p>

          <p>
              <span>
  <span></span>
  <span itemprop="programmingLanguage">Go</span>
</span>

              <a href="https://github.com/gazette/ping-pong/stargazers">
                <svg aria-label="stars" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
                11
              </a>
          </p>
        </div>
    </li>
</ol>

</div>


    <div id="org-profile-repositories">
      <h3>
        
        Repositories
      </h3>
      <div>
          <!-- '"` --><!-- </textarea></xmp> --><form data-autosearch-results-container="org-repositories" role="search" data-turbo="false" action="/gazette" accept-charset="UTF-8" method="get">
            <div>
                <details id="type-options">
                    <summary aria-haspopup="true" data-view-component="true">    <span>Type</span>
                    <span></span>
</summary>                  <details-menu>
                    <div>
                      <header>
                        <span>Select type</span>
                        
                      </header>
                      <p><label role="menuitemradio" aria-checked="true" tabindex="0">
                            
                            
                            <span data-menu-button-text="">All</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Public</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Sources</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Forks</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Archived</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Mirrors</span>
                          </label>
                          <label role="menuitemradio" aria-checked="false" tabindex="0">
                            
                            
                            <span data-menu-button-text="">Templates</span>
                          </label>
                      </p>
                    </div>
                  </details-menu>
                </details>

                  <details id="language-options">
                      <summary aria-haspopup="true" data-view-component="true">    <span>Language</span>
                      <span></span>
</summary>                    <details-menu>
                      
                    </details-menu>
                  </details>

                <details id="sort-options">
                    <summary aria-haspopup="true" data-view-component="true">    <span>Sort</span>
                    <span></span>
</summary>                  <details-menu>
                    <div>
                      <header>
                        <span>Select order</span>
                        
                      </header>
                      <p><label role="menuitemradio" aria-checked="true" tabindex="0">
                          
                          
                          <span data-menu-button-text="">Last updated</span>
                        </label>
                        <label role="menuitemradio" aria-checked="false" tabindex="0">
                          
                          
                          <span data-menu-button-text="">Name</span>
                        </label>
                        <label role="menuitemradio" aria-checked="false" tabindex="0">
                          
                          
                          <span data-menu-button-text="">Stars</span>
                        </label>
                      </p>
                    </div>
                  </details-menu>
                </details>
                
              </div>
</form>
        </div>
      <div id="org-repositories" data-delay-results="">
    <p><span data-autosearch-results="">Showing 2 of 2 repositories</span></p><div data-view-component="true">
  
  
    <ul data-view-component="true">
        <li data-view-component="true">          <div data-view-component="true" itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/gazette/core/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/gazette/core" data-view-component="true">
          core
</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            Build platforms that flexibly mix SQL, batch, and stream processing paradigms
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-107715151" href="https://github.com/gazette/core/graphs/commit-activity" data-view-component="true">
        </a><tool-tip id="tooltip-22078fa1-d807-4dbc-870e-9769176b8edf" for="commit-activity-link-107715151" popover="manual" data-direction="s" data-type="label" data-view-component="true">gazette/core’s past year of commit activity</tool-tip></span>
</p></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/gazette/ping-pong/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/gazette/ping-pong" data-view-component="true">
          ping-pong
</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            Example bare-bones gazette consumer application that plays ping pong. _At Scale_!
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-224278555" href="https://github.com/gazette/ping-pong/graphs/commit-activity" data-view-component="true">
        </a><tool-tip id="tooltip-4fc51d62-7b43-4a99-b99c-c2a42a17b0e3" for="commit-activity-link-224278555" popover="manual" data-direction="s" data-type="label" data-view-component="true">gazette/ping-pong’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">

        <p><span>
  <span></span>
  <span itemprop="programmingLanguage">Go</span>
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" href="https://github.com/gazette/ping-pong/stargazers" data-view-component="true">
          
          11
</a>

        <p><span data-view-component="true">
          <svg aria-label="fork" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" href="https://github.com/gazette/ping-pong/issues" data-view-component="true">
        
        0
</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" href="https://github.com/gazette/ping-pong/pulls" data-view-component="true">
        
        0
</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2020-07-08T16:02:46Z">Jul 8, 2020</relative-time>
</span></p></div></div>
</li>
</ul>  
</div></div>
  </div>
</div>

    <div data-view-component="true">
            







  


    

<include-fragment src="/orgs/gazette/topics/most_used?context=overview" accept="text/fragment+html">
  <div>
      <h4>Most used topics</h4>
      <p>Loading…</p>
    </div>
</include-fragment>


        </div>
</div>
</div>

      </main>
  </div>

          




    <ghcc-consent id="ghcc" data-initial-cookie-consent-allowed="" data-cookie-consent-required="true"></ghcc-consent>


  

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open="">
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog="">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GPT-4 LLM simulates people well enough to replicate social science experiments (190 pts)]]></title>
            <link>https://www.treatmenteffect.app/</link>
            <guid>41185783</guid>
            <pubDate>Wed, 07 Aug 2024 21:30:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.treatmenteffect.app/">https://www.treatmenteffect.app/</a>, See on <a href="https://news.ycombinator.com/item?id=41185783">Hacker News</a></p>
Couldn't get https://www.treatmenteffect.app/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Mistral Agents (157 pts)]]></title>
            <link>https://mistral.ai/news/build-tweak-repeat/</link>
            <guid>41184559</guid>
            <pubDate>Wed, 07 Aug 2024 19:32:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mistral.ai/news/build-tweak-repeat/">https://mistral.ai/news/build-tweak-repeat/</a>, See on <a href="https://news.ycombinator.com/item?id=41184559">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img src="https://mistral.ai/images/news/build-tweak-repeat.png" alt="Detailed benchmarks" width="20%"></p><p>Language models are changing the way we build software, serving as a flexible orchestrator in between knowledge sources and user interfaces. Building such software comes with new challenges to improve quality, reduce latency, and prototype quickly. Today, we’re announcing various advancements in this direction.</p><h3 id="simpler-more-efficient-model-customization">Simpler, more efficient model customization</h3><p>Because large language models are rapidly finding newer and more specialised use cases, it is critical that developers are able to quickly and efficiently tailor frontier models to their specific applications. To that end, we’re announcing the ability to customise any of our flagship and specialist models on La Plateforme, including Mistral Large 2 and Codestral.</p><p>Models can be customised using a base prompt, few-shot prompting, or fine-tuning, and you can bring your own dataset. Crucially, model customization follows the techniques developed by the Mistral AI science team for making strong reference models, so you can expect similar performance from your fine-tuned models. Developers can use model customization to integrate generative AI capabilities into their application with specific domain knowledge, context, or tone.</p><p><iframe src="https://www.youtube.com/embed/ctZbvA9tcOA" allowfullscreen="" title="YouTube Video"></iframe></p><p>We expect fine-tuning on our highly capable models to unlock a wealth of groundbreaking applications, and are eager to see what will be built with it. Check out our <a href="https://docs.mistral.ai/capabilities/finetuning/">fine-tuning documentation</a>, and try model customization on <a href="https://console.mistral.ai/">La Plateforme</a>.</p><h4 id="alpha-release-of-agents">Alpha release of Agents</h4><p>We’re also introducing an early version of Agents, that wraps models with additional context and instruction, for exposure on Le Chat or API. Agents help you create custom behaviour and workflows with a simple set of instructions and examples. With the advanced reasoning capabilities of Mistral Large 2, you can layer on increasingly complex workflows with multiple agents that are easy to share within your organisation. We’re working on connecting Agents to tools and data sources and are looking forward to your feedback on it.</p><p><iframe src="https://www.youtube.com/embed/CKsBqy3yTDw" allowfullscreen="" title="YouTube Video"></iframe></p><p><a href="https://docs.mistral.ai/capabilities/agents/">Learn more about Agents</a>.</p><h3 id="stable-version-of-our-client-sdk">Stable version of our client SDK</h3><p>We have made significant updates to the <code>mistralai</code> library to improve its usability and consistency, and today we are releasing mistralai 1.0, available for both <a href="https://github.com/mistralai/client-python">Python</a> and <a href="https://github.com/mistralai/client-ts">Typescript</a>. Learn more about our new SDK and check out the <a href="https://github.com/mistralai/client-python/blob/main/MIGRATION.md">migration guide</a>.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Prevention of HIV (587 pts)]]></title>
            <link>https://www.science.org/content/blog-post/prevention-hiv</link>
            <guid>41184365</guid>
            <pubDate>Wed, 07 Aug 2024 19:11:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/blog-post/prevention-hiv">https://www.science.org/content/blog-post/prevention-hiv</a>, See on <a href="https://news.ycombinator.com/item?id=41184365">Hacker News</a></p>
Couldn't get https://www.science.org/content/blog-post/prevention-hiv: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[NASA Says Boeing Starliner Astronauts May Fly Home on SpaceX in 2025 (293 pts)]]></title>
            <link>https://www.nytimes.com/2024/08/07/science/boeing-starliner-nasa-spacex.html</link>
            <guid>41184359</guid>
            <pubDate>Wed, 07 Aug 2024 19:10:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/08/07/science/boeing-starliner-nasa-spacex.html">https://www.nytimes.com/2024/08/07/science/boeing-starliner-nasa-spacex.html</a>, See on <a href="https://news.ycombinator.com/item?id=41184359">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/08/07/science/boeing-starliner-nasa-spacex.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Apple memory holed its broken promise for an OCSP opt-out (385 pts)]]></title>
            <link>https://lapcatsoftware.com/articles/2024/8/3.html</link>
            <guid>41184153</guid>
            <pubDate>Wed, 07 Aug 2024 18:50:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lapcatsoftware.com/articles/2024/8/3.html">https://lapcatsoftware.com/articles/2024/8/3.html</a>, See on <a href="https://news.ycombinator.com/item?id=41184153">Hacker News</a></p>
<div id="readability-page-1" class="page">
<nav>
Previous: <a href="https://lapcatsoftware.com/articles/2024/8/1.html">Has Apple underpaid App Store developers AGAIN?</a>
<br><a href="https://lapcatsoftware.com/articles/index.html" title="The Desolation of Blog">Articles index</a></nav>
<header><a href="https://lapcatsoftware.com/">Jeff Johnson</a> (<a href="https://underpassapp.com/">My apps</a>, <a href="https://www.paypal.me/JeffJohnsonWI">PayPal.Me</a>, <a href="https://mastodon.social/@lapcatsoftware" title="@lapcatsoftware@mastodon.social">Mastodon</a>)</header>
<p><a href="https://lapcatsoftware.com/FeedbackAssistantBoycott/">Feedback Assistant Boycott</a></p>

<h3>August 7 2024</h3>

<p>When you launch an app, macOS connects to Apple's OCSP service to check whether the app's Developer ID code signing certificate has been revoked by Apple. In November 2020, Apple's OCSP service experienced a <a href="https://lapcatsoftware.com/articles/ocsp.html">mass outage</a>, preventing Mac users worldwide from launching apps. In response and remedy to this outage, Apple made several explicit promises to Mac users in a support document, which can still be seen in a <a href="https://web.archive.org/web/20230924223924/https://support.apple.com/en-us/HT202491">Wayback Machine archive</a> from September 24, 2023.</p>
<blockquote>
<p>To further protect privacy, we have stopped logging IP addresses associated with Developer ID certificate checks, and we will ensure that any collected IP addresses are removed from logs.</p>
<p>In addition, over the the next year we will introduce several changes to our security checks:</p>
<ul>
<li>A new encrypted protocol for Developer ID certificate revocation checks</li>
<li>Strong protections against server failure</li>
<li>A new preference for users to opt out of these security protections</li>
</ul>
</blockquote>
<p>The last item, "A new preference for users to opt out of these security protections", has never been implemented in macOS, and two years ago I wrote that <a href="https://lapcatsoftware.com/articles/ocsp-privacy.html">Apple reneged on OCSP privacy</a>.</p>
<p>Now I've discovered that on September 26, 2023, the day that macOS 14 Sonoma was released to the public, Apple erased its promise from the support document. This can also be seen with the <a href="https://web.archive.org/web/20230927232937/https://support.apple.com/en-us/HT202491">Wayback Machine</a>.</p>
<p>Oddly, the original support document URL <a href="https://support.apple.com/en-us/HT202491">https://support.apple.com/en-us/HT202491</a> now redirects to a slightly different support document URL <a href="https://support.apple.com/en-us/102445">https://support.apple.com/en-us/102445</a>, though the content of the two documents remains mostly the same.</p>
<p>Apple's broken promise is shameful. The company apparently hopes we forget that it ever made the promise. Apple talks a good game, claiming "privacy is a fundamental human right", yadda yadda, but talk is cheap. When it comes to our right to stop our devices from phoning home to Cupertino, Apple is not interested. And if we can't trust Apple to keep its promises, then why should we trust anything else that Apple says, such as that our IP addresses are not logged? After all, it's impossible for us to verify this from the outside. Trust is earned through actions, and in this case Apple has neglected to act.</p>
<p>At this point, the only way to protect your own privacy is to use a firewall such as <a href="https://www.obdev.at/products/littlesnitch/">Little Snitch</a> to block the connections.</p>

<p><a href="https://lapcatsoftware.com/FeedbackAssistantBoycott/">Feedback Assistant Boycott</a></p>

<header><a href="https://lapcatsoftware.com/">Jeff Johnson</a> (<a href="https://underpassapp.com/">My apps</a>, <a href="https://www.paypal.me/JeffJohnsonWI">PayPal.Me</a>, <a href="https://mastodon.social/@lapcatsoftware" title="@lapcatsoftware@mastodon.social">Mastodon</a>)</header>
<nav><a href="https://lapcatsoftware.com/articles/index.html" title="The Desolation of Blog">Articles index</a><br>
Previous: <a href="https://lapcatsoftware.com/articles/2024/8/2.html">Has Apple underpaid App Store developers AGAIN?</a>
</nav>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Two-Stroke Engine Made from Scratch Using Basic Hardware Store Parts (128 pts)]]></title>
            <link>https://hackaday.com/2024/08/05/a-two-stroke-engine-made-from-scratch-using-basic-hardware-store-parts/</link>
            <guid>41184102</guid>
            <pubDate>Wed, 07 Aug 2024 18:44:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hackaday.com/2024/08/05/a-two-stroke-engine-made-from-scratch-using-basic-hardware-store-parts/">https://hackaday.com/2024/08/05/a-two-stroke-engine-made-from-scratch-using-basic-hardware-store-parts/</a>, See on <a href="https://news.ycombinator.com/item?id=41184102">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page">
    

    <p><a href="#content">Skip to content</a></p><!-- #masthead -->

    <div id="content">
        <main id="main" role="main">

        
            
<article itemscope="" itemtype="http://schema.org/Article" id="post-699296">
    <!-- .entry-header -->

    <div itemprop="articleBody">
        <figure id="attachment_699334" aria-describedby="caption-attachment-699334"><a href="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg"><img decoding="async" data-attachment-id="699334" data-permalink="https://hackaday.com/2024/08/05/a-two-stroke-engine-made-from-scratch-using-basic-hardware-store-parts/two-stroke_engine_from_scratch_working/" data-orig-file="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg" data-orig-size="610,610" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="two-stroke_engine_from_scratch_working" data-image-description="" data-image-caption="<p>A working DIY two-stroke in all of its glory, with the flywheel removed. (Credit: Camden Bowen)</p>
" data-medium-file="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?w=400" data-large-file="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?w=610" tabindex="0" role="button" src="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?w=400" alt="A working DIY two-stroke in all of its glory, with the flywheel removed. (Credit: Camden Bowen)" width="400" height="400" srcset="https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg 610w, https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?resize=250,250 250w, https://hackaday.com/wp-content/uploads/2024/08/two-stroke_engine_from_scratch_working.jpg?resize=400,400 400w" sizes="(max-width: 400px) 100vw, 400px"></a><figcaption id="caption-attachment-699334">A working DIY two-stroke in all of its glory, with the flywheel removed. (Credit: Camden Bowen)</figcaption></figure>
<p>How hard could it to be to build a two-stroke internal combustion engine (ICE) from scratch? <a href="https://www.youtube.com/watch?v=Us4e-nhESzc" target="_blank">This is a challenge that [Camden Bowen] gladly set for himself</a>, while foregoing such obvious wastes of time like first doing an in-depth literature study on the topic. That said, he did do some research and made the design in OnShape CAD before making his way over to the hardware store to make some purchases.</p>
<p>As it turns out, you can indeed build a two-stroke engine from scratch, using little more than some metal piping and other parts from the hardware store. You also need a welder and a lathe, with [Camden] using a Vevor mini-lathe that totally puts the ‘precision’ in ‘chatter’. As building an ICE requires a number of relatively basic parts that have to move with very little friction and with tight tolerances, this posed some challenges, but nothing that some DIY spirit can’t fix.</p>
<p>In the case of the very flexible boring bar on the lathe, improvising with some sturdy metal stock welded to a short boring bar resolved that, and precision was achieved. Together with an angle grinder, [Camden] was then able to manufacture the crank case, the cylinder and crank shaft and all the other pieces that make up an ICE. For the carburetor he used a unit off Amazon, which turned out to have the wrong throat size at 19 mm, but a 13 mm version worked. Ultimately, the first ICE constructed this way got destroyed mostly by running it dry and having the starter fluid acting as a solvent, but a full rebuild fixed all the issues.</p>
<p>This second attempt actually ran just fine the first time around, with oil in the crank case so that the poor engine wasn’t running dry any more. With a 40:1 fuel/oil mixture the little engine idles and runs as well as a two-stroke can, belching blue smoke and making a ruckus. This answers the question of whether you can build a two-stroke ICE with basic machining skills and tools, but of course the question that’s now on everyone’s lips is whether a four-stroke one would be nearly as ‘easy’. We wait with bated breath.</p>

<p><iframe title="I Made a Two-Stroke Engine Using Things I Found at the Hardware Store" width="800" height="450" src="https://www.youtube.com/embed/Us4e-nhESzc?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></p>
	            </div><!-- .entry-content -->
    
    <!-- .entry-footer -->
</article><!-- #post-## -->

            	<!-- .navigation -->
	
            

            
<!-- #comments -->

        
        

        
        

        
        </main><!-- #main -->
    </div><!-- #content -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Are the Olympics Shooting Competitors Wearing on Their Faces? (184 pts)]]></title>
            <link>https://www.core77.com/posts/133176/What-are-the-Olympics-Shooting-Competitors-Wearing-On-Their-Faces</link>
            <guid>41183808</guid>
            <pubDate>Wed, 07 Aug 2024 18:08:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.core77.com/posts/133176/What-are-the-Olympics-Shooting-Competitors-Wearing-On-Their-Faces">https://www.core77.com/posts/133176/What-are-the-Olympics-Shooting-Competitors-Wearing-On-Their-Faces</a>, See on <a href="https://news.ycombinator.com/item?id=41183808">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
    <div id="post_header">
        

            <ul>
                


                            </ul>
        

            <h2>What are the Olympics Shooting Competitors Wearing On Their Faces? </h2>
                    <h2>Mechanical irises</h2>
                    

        
    </div>

    




            <section id="post">




<p id="ec5124_6611" data-ic-marker="3dbbc8_806">If you happened across the Olympic Air Pistol event for the first time, you might've been puzzled by the competitors' eyewear:</p><p id="c7dbaf_2549" data-ic-marker="87ba40_2001"><img src="https://s3files.core77.com/blog/images/1560869_81_133176_PeAXJhKmf.jpg"> </p><p id="e79aeb_2099" data-ic-marker="bb1f9b_1688"><img src="https://s3files.core77.com/blog/images/1560867_81_133176_VKmWOasc7.jpg"></p><p id="6f72cf_3154" data-ic-marker="a83c29_1900"><img src="https://s3files.core77.com/blog/images/1560868_81_133176_VKmWOasc7.jpg"> </p><p id="f7eeb7_62" data-ic-marker="d1a3fe_1761">So those are mechanical irises. Shooting competitors fine-tune them to bring their gunsights into sharp focus. Here's an example of one by manufacturer <a href="https://sportshootingdepot.com/product/gehmann-clip-on-iris/" rel="">Gehmann</a>:</p><p id="b7c818_980" data-ic-marker="a952a_1575"><img src="https://s3files.core77.com/blog/images/1560870_81_133176_W9WJ0kC9u.jpg"> </p><p id="bf0a7d_49" data-ic-marker="5cd2e7_1992">And the competition frames they sell, for those who don't wear eyeglasses:</p><p id="d2071e_8993" data-ic-marker="906e3c_1993"><img src="https://s3files.core77.com/blog/images/1560872_81_133176_gMh_cVAPU.png"> </p><p id="584aba_62" data-ic-marker="59bd32_2643">If you're wondering why competitors don't just rely on prescription glasses, it's because your eyesight can actually change over the course of the day. You're dealing with both fatigue and changing light conditions. The adjustability of the mechanical iris allows you to compensate for that.</p><p id="c532fd_6378" data-ic-marker="293611_696"><img src="https://s3files.core77.com/blog/images/1560871_81_133176_Luee7MYMm.jpg"> </p><p id="72faed_126" data-ic-marker="27bb0c_626">Lastly, it's worth noting that Oh Ye-jin, the South Korean competitor who took Gold in the 10 Meter Air Pistol event this year, eschews the irises. </p><p id="ea036_4855" data-ic-marker="4d3102_1668"><img data-image-width="880" data-image-height="1023" data-image-id="1560866" src="https://s3files.core77.com/blog/images/1560866_81_133176_CVCkNlub_.jpg"></p>        

            </section>

                


                


<div>
    <ul>
        <li data-this-post-id="133176" data-this-author-id="0">
            
            
            <p>Favorite This</p>
        </li>
       <li data-this-post-title="What are the Olympics Shooting Competitors Wearing On Their Faces? " data-this-post-id="133176" data-this-author-id="0">
            
            
            <p>Comment</p>
        </li>
        
    </ul> 
</div>






           


        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[1970 Clean Air Act was intended to cover carbon dioxide (180 pts)]]></title>
            <link>https://e360.yale.edu/digest/clean-air-act-climate-change</link>
            <guid>41183269</guid>
            <pubDate>Wed, 07 Aug 2024 17:05:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://e360.yale.edu/digest/clean-air-act-climate-change">https://e360.yale.edu/digest/clean-air-act-climate-change</a>, See on <a href="https://news.ycombinator.com/item?id=41183269">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
                        
<div>

  <figure>

    <div>
      
                  
      <p><a href="https://e360.yale.edu/assets/site/pexels-banananardini-8788264.jpg" data-caption="" data-credit="Pexels">
  
  
  
    
  
  
  
      
    
                
    
                
    
                
    
                
    
                        
  <img sizes="(min-width: 1450px) 832px, (min-width: 620px) 620px, 100vw" srcset="https://e360.yale.edu/assets/site/pexels-banananardini-8788264.jpg 1200w, https://e360.yale.edu/assets/site/_200xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 200w, https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 400w, https://e360.yale.edu/assets/site/_600xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 600w, https://e360.yale.edu/assets/site/_800xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 800w, https://e360.yale.edu/assets/site/_1000xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg 1000w" src="https://e360.yale.edu/assets/site/_400xAUTO_stretch_center-center/pexels-banananardini-8788264.jpg" alt="">
</a>
      </p>
          </div>

        <figcaption>
              <p><span></span>
          <span>Pexels</span></p>
    </figcaption>
    
  </figure>

</div> <!-- imageBlock -->
                  

<div>
<p>A new study finds evidence that Congress intended for the 1970 Clean Air Act to cover carbon dioxide emissions. The finding strengthens the legal case for regulating heat-trapping gases.</p>
<p>Under former president Barack Obama, the Environmental Protection Agency <a href="https://archive.epa.gov/epa/cleanpowerplan/fact-sheet-overview-clean-power-plan.html">put forward</a> a regulation on carbon dioxide emissions from power plants. But in 2022 the Supreme Court scrapped the standards, <a href="https://www.supremecourt.gov/opinions/21pdf/20-1530_n758.pdf">asserting</a> that Congress had not empowered the EPA to regulate greenhouse gases.</p>
<p>A new review of historical records challenges the conclusion of the Supreme Court. Undertaken by researchers at Harvard and Duke, the research finds that the authors of the 1970 Clean Air Act understood that burning fossil fuels would warm the planet, and they considered carbon dioxide to be a pollutant. While lawmakers did not view carbon dioxide as an imminent threat, they did believe the greenhouse gas would eventually need to be regulated.</p>
<p>At the time the law was crafted, there was already a growing awareness of climate change. Reports for presidents <a href="https://nsarchive.gwu.edu/document/31937-document-2-white-house-report-restoring-quality-our-environment-report-environmental">Lyndon Johnson</a> and <a href="https://www.jstor.org/stable/26253293">Richard Nixon</a> warned of planetary warming, and such information began to penetrate the public consciousness as Americans learned about the greenhouse effect by reading <a href="https://www.scientificamerican.com/article/carbon-dioxide-and-climate/">popular magazines</a>, watching <a href="https://www.youtube.com/watch?v=m-AXBbuDxRY">television</a>, or in <a href="https://dreamsofspace.blogspot.com/2017/04/my-weekly-reader-oct-5-1959-weather-is.html">school</a>. In a 1969 appearance on the Merv Griffin Show, beat poet Allen Ginsberg decried how “the current rate of air pollution brought about by the proliferation of automobiles” could cause “the rapid build-up of heat on the Earth.” </p>
<p>The new study explains how the staff of Senator Edmund Muskie, principal architect of the Clean Air Act, kept track of the public conversation on climate change. Muskie, a Democrat from Maine, warned at the time that unchecked pollution would “threaten irreversible atmospheric and climatic changes.” </p>
<p>The study, soon to be published in <em><em>Ecology Law Quarterly</em></em>, concludes that Congress “understood far more about the potential threat of anthropogenic climate change than either the [Supreme] Court or most commentators have recognized.”</p>
<h2>ALSO ON YALE E360</h2>
<p><a href="https://e360.yale.edu/features/climate-lawsuits-oil-industry-research"><strong><em>How an Early Oil Industry Study Became Key in Climate Lawsuits</em></strong></a></p>
</div>
                  </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Official proposal for Type Unions in C# (292 pts)]]></title>
            <link>https://github.com/dotnet/csharplang/blob/18a527bcc1f0bdaf542d8b9a189c50068615b439/proposals/TypeUnions.md</link>
            <guid>41183240</guid>
            <pubDate>Wed, 07 Aug 2024 17:02:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/dotnet/csharplang/blob/18a527bcc1f0bdaf542d8b9a189c50068615b439/proposals/TypeUnions.md">https://github.com/dotnet/csharplang/blob/18a527bcc1f0bdaf542d8b9a189c50068615b439/proposals/TypeUnions.md</a>, See on <a href="https://news.ycombinator.com/item?id=41183240">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;packages&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;packages_link_product_navbar&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>

                  <li>
      
      
</li>

                  <li>
      
      <div>
                <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;white_papers_ebooks_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;white_papers_ebooks_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      White papers, Ebooks, Webinars

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:dotnet/csharplang" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="FYIMrCnb55NrgkdfSEdBnMwrmiM2yxqYkwq__WK7JhFHqhYdLUaBhssmkbld-qO0f6g2OV43woq73K0UkZjWvA" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="dotnet/csharplang" data-current-org="dotnet" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=dotnet%2Fcsharplang" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/dotnet/csharplang/blob/18a527bcc1f0bdaf542d8b9a189c50068615b439/proposals/TypeUnions.md&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="069d1a30fab49cfd912b12ca207c4b569a1129407d0870735717e169b51a9c58" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
        </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tony Hawk's Pro Strcpy (637 pts)]]></title>
            <link>https://icode4.coffee/?p=954</link>
            <guid>41183115</guid>
            <pubDate>Wed, 07 Aug 2024 16:48:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://icode4.coffee/?p=954">https://icode4.coffee/?p=954</a>, See on <a href="https://news.ycombinator.com/item?id=41183115">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
									
									
<figure><p>
<iframe title="Tony Hawk's Pro Strcpy" width="470" height="264" src="https://www.youtube.com/embed/Pjqw1Gwk0jg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p></figure>



<p>Back in 2016 I really wanted to improve my exploit development skills and find some new bugs to hack the original Xbox. For many years people could download a hacked game save for games like 007 Agent Under Fire, Splinter Cell, or Mechassault and use it to hack their console. These game save hacks worked by exploiting trivial buffer overflows that would give the attacker code execution on the console and run unsigned code (code not authorized by Microsoft). From there you’d typically install some hacked OS files that would allow your console to run homebrew and pirated games. Being into computer security I knew all the academics of how exploit techniques like memory corruption and ROP worked but had no experience actually writing an exploit that used any of these techniques. I wasn’t going to try and write an exploit for a modern game console or PC without getting some elementary level experience under my belt first, which is why I turned to older gaming consoles.</p>



<p>Devices from the early-mid 2000s (or y2k devices as I like to call them) are a great platform for anyone wanting to learn more about how computer hardware works, exploit development, software development, etc. They have a low barrier to entry because they don’t have any of the security mitigations a more modern device will have and a lot of information on the inner workings have been thoroughly researched and documented. However, there’s still a lot of things yet to be discovered or learned about these consoles and any seasoned exploit developer can have a lot of fun treating these as “CTF” devices while in search of an easier way to hack the console.</p>



<h2>Part 1: Dropping in</h2>



<p>I started with the game save approach and began looking through the game saves I had from a backup of one of my consoles. The first game save I happen to open was for Tony Hawk’s Pro Skater 4. It was a custom park made with the “Create-A-Park” feature which was like a mini level editor players could use to create their own skate parks. Looking at the save file in a hex editor something immediately stuck out to me:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/gap_name.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-955&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1902,&quot;targetHeight&quot;:361,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img fetchpriority="high" decoding="async" width="1902" height="361" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/gap_name.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/gap_name.png 1902w, https://icode4.coffee/wp-content/uploads/gap_name-300x57.png 300w, https://icode4.coffee/wp-content/uploads/gap_name-768x146.png 768w, https://icode4.coffee/wp-content/uploads/gap_name-1536x292.png 1536w" sizes="(max-width: 1902px) 100vw, 1902px"><figcaption>Hex view of the save file</figcaption></figure></div>


<p>The “Create-A-Park” feature allows you to create what’s known as a “gap”, which is a term in skateboarding used to describe an area between two platforms you jump over. THPS4 allows you to name the gap so when a player successfully clears the gap the name will appear in screen with a point value. It added additional depth to the feature back in the early 2000s when the idea of creating your own level as a feature of a console game was still pretty novel. But for me it meant I had a starting point for bug hunting. This custom string had a max length of 31 characters (+ a null terminator), and presumably this would be run through some sort of string copy function. If I was lucky it would be strcpy (opposed to something like strncpy) and I might be able to use it as a memory corruption primitive. </p>



<p>I crafted a malicious save file by changing the string to some really long repeating ‘0x41’ character sequence and copied it back to my Xbox. For testing I’d be using an already hacked Xbox console that had full debugging capabilities which would allow me to step through individual CPU instructions and investigate memory contents. Upon loading the game save the console crashed and looking at the CPU state I could see the instruction pointer was set to 0x41414141 which meant the gap name string was likely being copied to the stack using strcpy. After finding the address of where the strcpy was happening I opened it in IDA for easier analysis:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/strcpy_call-1.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-959&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:640,&quot;targetHeight&quot;:283,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img decoding="async" width="640" height="283" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/strcpy_call-1.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/strcpy_call-1.png 640w, https://icode4.coffee/wp-content/uploads/strcpy_call-1-300x133.png 300w" sizes="(max-width: 640px) 100vw, 640px"></figure></div>


<p>The disassembly is a little hard to follow because the parameters for the inline strcpy call have been optimized but here’s the relevant pseudo code for the function that loads the save file data:</p>



<div id="urvanov-syntax-highlighter-66b3cb3c523eb582432218" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					<div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p></div>
				</td>
						<td><div><p><span>struct</span><span> </span><span>save_file_gap_data</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>char</span><span> </span><span>gap_name</span><span>[</span><span>32</span><span>]</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span><span>;</span></p><p><span>struct</span><span> </span><span>gap_description</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>char</span><span> </span><span>gap_name</span><span>[</span><span>32</span><span>]</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span><span>;</span></p><p><span>void</span><span> </span><span>read_park_file</span><span>(</span><span>)</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Loop through all the gaps in the park file.</span></p><p><span>	</span><span>for</span><span> </span><span>(</span><span>int</span><span> </span><span>i</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span><span> </span><span>i</span><span> </span><span>&lt;</span><span> </span><span>park_header</span><span>-&gt;</span><span>gap_count</span><span>;</span><span> </span><span>i</span><span>++</span><span>)</span></p><p><span>	</span><span>{</span></p><p><span>		</span><span>gap_description </span><span>gapDesc</span><span>;</span></p><p><span>		</span><span>save_file_gap_data</span><span>*</span><span> </span><span>pGapData</span><span> </span><span>=</span><span> </span><span>(</span><span>save_file_gap_data</span><span>*</span><span>)</span><span>pParkDataPtr</span><span>;</span></p><p><span>		</span><span>.</span><span>.</span><span>.</span></p><p><span>		</span><span>// Copy the gap name locally.</span></p><p><span>		</span><span>strcpy</span><span>(</span><span>gapDesc</span><span>.</span><span>gap_name</span><span>,</span><span> </span><span>pGapData</span><span>-&gt;</span><span>gap_name</span><span>)</span><span>;</span></p><p><span>		</span><span>.</span><span>.</span><span>.</span></p><p><span>		</span><span>// Register the gap data parsed from the save file.</span></p><p><span>		</span><span>sub_EA520</span><span>(</span><span>&amp;</span><span>gapDesc</span><span>)</span><span>;</span></p><p><span>		</span><span>// Next gap.</span></p><p><span>		</span><span>pParkDataPtr</span><span> </span><span>+=</span><span> </span><span>sizeof</span><span>(</span><span>save_file_gap_data</span><span>)</span><span>;</span></p><p><span>	</span><span>}</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span></p></div></td>
					</tr>
				</tbody></table>
			</div>



<p>As you can see the function loops through each gap in the save file and parses some information including the name which is copied to the gapDesc variable on the stack. There’s no bounds checking on the string so strcpy will continue to copy data until it reaches a null terminator. By overflowing the gap name string we can overwrite stack data including the return address for the function. This version of the game is conveniently compiled without stack cookies so we’re clear to trash as much data as we want. However, even once we control the return address not all memory is executable so we’ll need to do a little more work to get full code execution. </p>



<p>None of the gen 6 game consoles (Xbox, Playstation 2, Gamecube, Dreamcast) have any form of hardware data execution prevention (DEP) mitigations that would prevent regions of memory from being executable . However, Xbox does have some “soft DEP” that was used in later versions of the console and games but it can’t be applied to arbitrary regions of memory, it has to be a single contiguous region of memory. Basically, memory is only executable up to a certain address and everything thereafter is non-executable. This is achieved by changing the code segment selector address which defines the region of executable memory on the Pentium 3 processor. Later versions of the Xbox kernel will limit this region so not all memory is executable, but this really only prevents heap data from being executable and still leaves plenty of regions of RWX memory for us to use.</p>



<h2>Stick the landing</h2>



<p>The stack region and heap allocation containing the save file data are beyond the limit of the cs selector register, so we can’t execute code off either of these regions. However, all memory for the game executable including read-write data segments are in the executable region of memory, so all we need to do is find a way to copy some code to this area and we can execute it. This is where a ROP chain would prove useful but I actually found another way to achieve the same result that was a bit easier. </p>



<p>In addition to naming the gaps in the park file the game also lets you name the park itself. The park name string is stored in the header of the save file and the game must load this information after the player selects the save file so the name can be displayed in the UI. This header data is 136 bytes long and gets copied to a struct in the data segment of the executable which is in the executable region of memory. We can’t modify all of the header data as some fields need to be valid for the game to parse the file correctly. But there’s a small amount of data we can modify and it’s large enough to put a small memcpy stub there to copy our full payload to an executable region of memory and jump to it. Putting this all together we end up with the following:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thps4_memory_layout-1.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-1005&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1245,&quot;targetHeight&quot;:465,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1245" height="465" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thps4_memory_layout-1.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thps4_memory_layout-1.png 1245w, https://icode4.coffee/wp-content/uploads/thps4_memory_layout-1-300x112.png 300w, https://icode4.coffee/wp-content/uploads/thps4_memory_layout-1-768x287.png 768w" sizes="(max-width: 1245px) 100vw, 1245px"></figure></div>


<ol>
<li>After loading the save file but before the player presses “Start Game” the first 136 bytes of the save file are copied to the data segment of the game executable. This 136 bytes includes our shell code copy stub which will copy the full payload to an executable region of memory once we trigger the overflow.</li>



<li>After the player presses “Start Game” the save file will be loaded in full and our maliciously crafted gap name will be copied to the stack. The buffer is crafted specifically so that we overwrite the return address with the data segment address containing our shell code copy stub. </li>



<li>Once the park loading function returns it’ll jump to our shell code copy stub and copy a larger shell code payload from the save file buffer to some location in the game executable’s data segment that’s in the executable code region.</li>



<li>After copying the full payload the copy stub will jump to it giving us full arbitrary code execution.</li>
</ol>



<p>Now that we have full code execution on the console the next step is to disable signature enforcement and launch an unsigned executable, most likely one that could be used to further install softmod files on the console for a persistent hack. I’m not going to cover all the details of the security and OS on the Xbox or any other console mentioned in this post, but I will provide a brief overview of the steps used to patch the OS and launch additional unsigned code. I based this payload on the ones used in the existing softmod installer save files for 007 Agent Under Fire. The steps to patch out signature enforcement are as follows:</p>



<ol>
<li>Resolve the addresses of some kernel functions and data, the most notable being the address of the RSA public key used for signature validation of executable files.</li>



<li>Disable write protection in the machine state register and patch the RSA public key with the “habibi” key. </li>



<li>Launch a secondary executable file bundled in with the save game files, typically a softmod installer, though I used my classic “nyan cat” executable during all my testing. This executable must be signed with the habibi RSA key.</li>
</ol>



<details><summary>So what’s the “habibi” key?</summary>
<p>The habibi key pair is an RSA key that was generated by (presumably) the original Xbox Linux hacking group in the early 2000s. I haven’t been able to track down the entire back story to this key pair but this is what I’ve been able to conclude based on researching it. Rather than patching the RSA signature check out of the kernel which would allow for piracy the Xbox Linux group decided to instead replace the RSA public key with their own. This would allow them to sign their linux loader executable and run it on a console along with the game save hack but prevent people from using their game save to run pirated content (in theory). However, this didn’t really work since shortly after they released their exploit to run linux other hacking groups released additional exploit files to install a persistent hack on the console which completely removed the signature enforcement checks.</p>



<p>The more interesting thing about the habibi key is that the public key modulus only has a 4 byte difference compared to the Microsoft RSA public key. For reference the MS key is a 2048 bit RSA key. I’ve asked a few people how this might be possible and the answer I got is “if you change the exponent to something small like 3 you easily factor out a similar key”. This should require that the exponent of the public key is also patched to “3”. However, none of the shell code payloads that use the habibi key ever change the exponent used by the RSA signature verification routine. Presumably it’s still performing the validation using the exponent 65537 so I’m not entirely sure how this works. Perhaps someone more knowledgeable could shed some light on it.</p>
</details>



<p>So why use the habibi key instead of just patching the signature validation function to always return true? I initially wanted to do this but to make the exploit compatible with every kernel version released on the original Xbox would require I pattern match an instruction pattern with high probability for collisions, and I didn’t want to spend a bunch of time writing logic to decode instructions to additional validation of matches. Using the habibi key was easier because it only requires a 4 byte patch to memory I can easily find without pattern matching. </p>



<figure><video controls="" src="https://icode4.coffee/wp-content/uploads/thps4_xbox_exploit.mp4"></video></figure>



<p>With everything together I was able to load my hacked save file, get full code execution on the console, and run unsigned code. I was happy with the results but I wanted more so I looked at other iterations of the games in the Tony Hawk’s Pro Skater series to see how far back this bug went and how many versions of the game I could exploit with it.</p>



<h2>Variant analysis</h2>



<p>There’s a number of games in the Tony Hawk series and most of them have the Create-A-Park feature, so surely there’s more that are also exploitable. I worked backwards from THPS4 to see what the earliest version was that had the Create-A-Park feature and allowed you to use a custom name for gaps and found it was Tony Hawk’s Pro Skater 3. </p>



<h3>Tony Hawk’s Pro Skater 3</h3>



<p>I booted up THPS3 and created a custom park, fuzzed the gap name string and loaded the save again. However, this time the console didn’t crash when loading the save. I was able to spawn in and skate around, but as soon as I chose the “quit game” option the console crashed. Investigating the crash site revealed that the gap name string wasn’t being copied to the stack and was instead being copied to the heap. The overflow had overwritten some data in the next heap allocation and the console crashed when trying to free it. This piqued my interest because I was hoping to get experience with several different exploit techniques and not just rewriting the same strcpy bug several times over.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thps3_cleanup_object_disassembly-1.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-965&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:802,&quot;targetHeight&quot;:400,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="802" height="400" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thps3_cleanup_object_disassembly-1.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thps3_cleanup_object_disassembly-1.png 802w, https://icode4.coffee/wp-content/uploads/thps3_cleanup_object_disassembly-1-300x150.png 300w, https://icode4.coffee/wp-content/uploads/thps3_cleanup_object_disassembly-1-768x383.png 768w" sizes="(max-width: 802px) 100vw, 802px"><figcaption>Disassembly for the THPS3 crash site</figcaption></figure></div>


<p>After investigating the crash some more I was able to determine that the game was using a custom memory allocator and by overflowing the gap name I was overwriting the allocation header for the next allocation in memory. When this next allocation was free’d the game would pull some pointers from the allocation header that lead to a vtable containing a function pointer for a cleanup routine.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thps3_allocation_data.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-966&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1280,&quot;targetHeight&quot;:221,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1280" height="221" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thps3_allocation_data.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thps3_allocation_data.png 1280w, https://icode4.coffee/wp-content/uploads/thps3_allocation_data-300x52.png 300w, https://icode4.coffee/wp-content/uploads/thps3_allocation_data-768x133.png 768w" sizes="(max-width: 1280px) 100vw, 1280px"><figcaption>Heap allocation header data</figcaption></figure></div>


<p>This would be easy to exploit, however, unlike THPS4 this version of the game didn’t copy the header of the save file into the data segment, and the save file data was in non-executable heap memory. I’d need to find a way to get my shell code payload into executable memory and this was the perfect place to use a ROP chain. By overwriting the pAllocOwner pointer in the next allocation header I can control where the cleanup function pointer is loaded from. This can be set to the address of some instructions that would change the stack pointer to point to the malicious save data memory containing a ROP chain.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thps3_exploit_memory.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-967&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1069,&quot;targetHeight&quot;:222,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1069" height="222" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thps3_exploit_memory.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thps3_exploit_memory.png 1069w, https://icode4.coffee/wp-content/uploads/thps3_exploit_memory-300x62.png 300w, https://icode4.coffee/wp-content/uploads/thps3_exploit_memory-768x159.png 768w" sizes="(max-width: 1069px) 100vw, 1069px"><figcaption>Fake heap allocation header</figcaption></figure></div>


<p>The ROP chain only needed to be a few gadgets long to copy the full shell code payload into the executable region of memory and jump to it:</p>



<div id="urvanov-syntax-highlighter-66b3cb3c52401345060699" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					<div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p></div>
				</td>
						<td><div><p><span>; ROP gadget 0: 0x1BD19F -&gt; stack pivot</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;push</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ecx</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; address of our fake heap allocation header</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esp</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; esp is now set to the fake heap allocation header address</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; esi now contains the address of the vtable</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>0Ch</span></p><p><span>; ROP gadget 1: 0x45F69 -&gt; load memcpy parameters</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; load the src address of the shell code</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>edi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; load the data segment address for the shell code to be copied to</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>ecx</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; load the length of the shell code in dwords</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span></p><p><span>; ROP gadget 2: 0x19C4C1 -&gt; perform memcpy</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;rep</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>movsd</span><span>&nbsp;&nbsp; </span><span>; copy the shell code from the heap to the data segment</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>edi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; load the data segment address for the shell code so we can jump to it</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span></p><p><span>; ROP gadget 3: 0x1902DD -&gt; jump to the shell code</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;call</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>edi</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; jump to the shell code</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>.</span><span>.</span><span>.</span></p></div></td>
					</tr>
				</tbody></table>
			</div>



<p>This is actually the ROP chain pictured in my twitter profile banner (assuming I haven’t changed the picture since writing this post). The full payload was a generic “hack xbox kernel” payload I made for the THPS4 save exploit that would patch the RSA public key for executables to the habibi key and launch an unsigned executable. Putting everything together I had another save game exploit done, loading the hacked save file and then quitting the game would trigger the exploit and launch my nyan cat executable.</p>



<h3>Tony Hawk’s Underground 1 &amp; 2</h3>



<p>THUG started out with the same routine, create the park file, fuzz the gap name, and load the modified save. However, instead of getting some sort of crash for an access violation I received a full bug check and the following message in my debugger:</p>



<!-- Urvanov Syntax Highlighter v2.8.20 -->

		<div id="urvanov-syntax-highlighter-66b3cb3c5240c942196183" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					
				</td>
						<td><div><p><span>Buffer </span><span>overrun </span><span>detected</span><span>!</span></p><p><span>A</span><span> </span><span>buffer </span><span>overrun </span><span>has </span><span>been </span><span>detected </span><span>which </span><span>has </span><span>corrupted </span><span>the </span><span>program</span>'<span>s</span><span> </span><span>internal </span><span>state</span><span>.</span><span> </span><span>The </span><span>program </span><span>cannot </span><span>safely </span><span>continue</span><span> </span><span>execution </span><span>and</span><span> </span><span>must </span><span>now </span><span>be </span><span>terminated</span><span>.</span></p></div></td>
					</tr>
				</tbody></table>
			</div>
<!-- [Format Time: 0.0002 seconds] -->




<p>This means the game was compiled with stack cookies and my buffer overflow corrupted the cookie which caused the game to halt. Looking through the executable I found the save file loading function and confirmed the stack cookie check was there:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thug_stack_cookies.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-969&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:668,&quot;targetHeight&quot;:298,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="668" height="298" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thug_stack_cookies.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thug_stack_cookies.png 668w, https://icode4.coffee/wp-content/uploads/thug_stack_cookies-300x134.png 300w" sizes="(max-width: 668px) 100vw, 668px"></figure></div>


<p>A stack cookie is a random value generated when the executable first starts that gets placed on the stack of functions that perform certain copy operations to stack variables. The cookie sits before the return address (or immediately following the variable used in the copy operations) and before the function jumps to the return address it’ll check the stack cookie matches the expected value and if not it’ll throw an exception (or in this case bug check the console). This can thwart stack overflows as the only way to overwrite the return address requires you know the cookie value and include it as part of the overflow data (so it appears unmodified when validated). This was surprising to see but I wasn’t deterred and simply took this as another challenge. </p>



<p>I spent some time analyzing the function to see if there were any variables I could corrupt after the gap name buffer but before the stack cookie, and there were. However, these variables were useless from an exploitation perspective as they would immediately get overwritten by the game code after the gap name strcpy call. I looked further to see if there was any code I could use to cause an exception and possibly use SEH exploitation. Unfortunately there’s no way for me to cause an exception in the remaining code before the stack cookie check, and even if there was there’s no exception handler registered at this moment that would walk the SEH chain. After spending a bit of time brainstorming I decided to give up on this one and move on. </p>



<p>Checking Tony Hawk’s Underground 2 I saw the same thing: the game was compiled with stack cookies and there’s no variables on the stack I could use for exploitation purposes and there’s no way for me to leak the stack cookie value. I don’t wanna say these games can’t be used for exploitation as I know there are other strcpy bugs in the game that can be used for exploitation and are on the heap. But you definitely can’t use the gap name string in save files for exploitation on Xbox. Interestingly enough the Playstation 2 version, PC version, (and most likely the Gamecube version) are not compiled with stack cookies and can be exploited using the gap name string buffer.</p>



<h3>Tony Hawk’s American Wasteland</h3>



<p>Next up is Tony Hawk’s American wasteland, which I was expecting to not be expoitable after seeing THUG1 and 2 compiled with stack cookies. However, to my surprise THAW was not compiled with stack cookies and was vulnerable to the gap name string buffer overflow. The exploit is more or less identical to the one for THPS4 so I won’t bore you with redundant details.</p>



<h2>Part 2: Remote code execution</h2>



<p>Now that I had 3 new save game exploits for the Xbox on hand I wanted to go further. It’s 2016 and while finding a game that can be used for soft-modding the console with a save game hack is easy, finding the memory card you need to load the hacked save file is not. It’s also not common to find adapters that let you use a usb stick or other common storage device as a memory card on the console, and hacking up a controller is also not ideal. I wanted to try and find a new type of exploit with lower barrier to entry that didn’t require a memory card. The attack surface I had my eye on was the ability to play a multiplayer LAN game with a park made in the Create-A-Park editor. This meant that the game is sending the save file over the network and loading it on the client’s console, so it should be possible to craft a special save file that could be used over the network to hack the console of anyone who joins your match.</p>



<p>To start out I created a special setup for the host by modifying the game executable to fix the strcpy bug which would prevent the host from hacking themself. I also added a new code segment to the executable so that I’d have plenty of space for any additional functions I’d need to write. Next I setup a network match between my “host” and another console using a hacked save file that would just change the LED color to orange to signal the payload ran. Unlike loading the save locally, loading it over the network doesn’t copy the save file header data to the data segment which breaks the shell code copy stub, but that’s not a big issue because we can use a ROP chain similar to the THPS3 exploit to perform the shell code copy.</p>



<p>After crafting the save file and setting up a network game I had the client console join expecting it to receive the park file, get compromised, and change the console’s LED color. However, what actually happened is that the client connected to the host and spawned the player in, allowing them to skate around. Not only did the payload not run but we didn’t even trigger the buffer overflow. This was odd so I did some poking around in the memory of the client console and saw that the memory containing the park file sent by the host did not match my exploit file. I could see some of the exploit data in memory but the gap name been trashed and null terminated… </p>



<p>To figure out what was going on I placed some memory breakpoints on the memory containing the park file data on the host and waited for them to get hit. What I found was that the host would load the park file, then re-save it in memory, and send that to the client. In the process it would trash the exploit data which prevented it from running on the client console. Not entirely sure why it did this but I was able to just NOP the function call out and then everything worked as expected. The client would receive the hacked park file, get compromised, and change the LED color.</p>



<p>The next obstacle was figuring out how to obtain the secondary payload executable on the client side. When running the save exploit locally the secondary payload is bundled into the folder for the game save. However, running the exploit over the network the client won’t have access to this file so I’d have to come up with a way for them to obtain it. Initially I tossed around ideas like loading it off a burned CD but I didn’t want people to have to burn a disc as less and less people have CD burners nowadays. I also considered loading the executable from a local network address which would only require the client run a python script on a computer on the same network as the console. However, the Xbox winsock implementation uses secure socket connections by default which meant that my python script would have to recreate all the Xbox security stuff on top of the IP frames, and I didn’t want to do all that. </p>



<p>I decided to try and find the game’s net code and see if I could use it to send the executable to the client using some sort of “out of band” messages on the already established connection. I figured this might require quite a bit of shell code to do so I started by doing more research on the park save file to see how much space I had to work with. If it turned out I didn’t have enough space in the park file for all the shell coded needed then I’d be wasting time.</p>



<h2>What happens if I google this?</h2>



<p>I started searching the internet to see if anyone else had explored the park save files and if there might be some notes or something I could use as preliminary research material. After a few google searches I wasn’t able to find anything useful. So I played a game I like to call “what happens if I google this?”. Any time I’m reverse engineering something and come across a magic number or debug string I’ll put it into google and see what comes up. Over the years I’ve found a number of really interesting things such as the exact source file for the obscure encryption algorithm used in Call of Duty Black Ops, Microsoft patents with C-structs and developer comments describing how some encryption key ROM chips worked, and this time I’d hit one of my best finds. In the function that loads the park file there’s a reference to the string “Sk4Ed_Dead”. I put this string into google to see what would pop up, hoping that I’d find some sort of forum post referencing it. What I found instead was a GitHub repository called “thug”:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/thug_github.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-973&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:914,&quot;targetHeight&quot;:227,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="914" height="227" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/thug_github.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/thug_github.png 914w, https://icode4.coffee/wp-content/uploads/thug_github-300x75.png 300w, https://icode4.coffee/wp-content/uploads/thug_github-768x191.png 768w" sizes="(max-width: 914px) 100vw, 914px"></figure></div>


<p>I thought that maybe this was some sort of homebrew tool for modding the game, but as I started to explore the repository I quickly realized that this was actually the source code for the entire game of Tony Hawk’s Underground. Someone had dumped it onto the internet in the form of this GitHub repository. This was an incredible find, even if it wasn’t for THPS4 the code base should be similar enough that I could use it to figure out how the game’s networking code worked and write the hooks I need to send the secondary payload to the client. You might be thinking, but wait, isn’t that cheating? And sure I guess you could say that, but in my opinion everything is fair in exploitation. My goal was to hack the console at all costs, I didn’t care about having a “clean room” exploit implementation. I already had RCE working and knew with a bit of work I could have the payload transfer using the connection established with the host. The only difference having this source code makes is how long it’ll take me to find the net code functions I need, from a few days down to a few hours. But now my goal has slightly changed.</p>



<details><summary>Rather than just get the exploit working over the network I wanted to make it as robust as I could.</summary>
<p>I wanted to make an exploit that would silently get RCE on the console of anyone who joined my match, hack their console to run unsigned code, and silently transfer another executable to their console while they played the game. Nowadays with RCE being a common attack vector this doesn’t sound that crazy. But imagine it’s ~2005 and a hack like this came to light, how crazy would it be to see headlines talking about hackers remotely hacking Xbox gaming consoles through online play, with the exploit being so seamless that the victim has no idea it happened until it’s too late. So I decided to switch from console hacker to threat actor and see how much fun I could have with this.</p>
</details>



<p>I cloned the repo and began looking through the code base. I was able to find the park file loading code and saw the exact line of code with the strcpy bug. Curious if this code was for the final version of the game I spent an hour or so recreating the Visual Studio project files for it and after fixing a few compiler errors I was able to successfully compile the code and run it with assets from the final version of the game. The code didn’t appear to be final but very very close to it. I spent some time looking through the network code and got an understanding of how messages were sent back and forth from host &lt;–&gt; client. After that I tracked down the relevant functions and variables for THPS4 in IDA and had everything I needed to start writing the hooks.</p>



<h2>Restoring execution</h2>



<p>Now that I decided to make this exploit as robust as possible I’d need to find a way to restore execution back to the game while the secondary payload transferred. This would require some changes to the ROP chain to save the old stack pointer before performing the stack pivot, and then restoring it later on after the shell code finishes executing.</p>



<div id="urvanov-syntax-highlighter-66b3cb3c52414024029532" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					<div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p></div>
				</td>
						<td><div><p><span>; Gadget 0 - save old stack pointer</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;push</span><span>&nbsp;&nbsp;</span><span>esp</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;and</span><span>&nbsp;&nbsp; </span><span>al</span><span>,</span><span> </span><span>8</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;mov</span><span>&nbsp;&nbsp; </span><span>[</span><span>ecx</span><span>]</span><span>,</span><span> </span><span>edx</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>esi</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; esi now contains the old stack pointer</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span><span>&nbsp;&nbsp;</span><span>4</span></p><p><span>; Gadget 1 - stack pivot</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>esp</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; Change esp to point to our ROP gadget data</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 2 - get address to save stack pointer to</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>eax</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; Hack_OldStackPointer</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 3 - save old stack pointer for later</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;mov</span><span>&nbsp;&nbsp; </span><span>[</span><span>eax</span><span>]</span><span>,</span><span> </span><span>esi</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>; Save old stack pointer</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 4 - load destination address for shell code copy</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>ecx</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; ShellCodeCopyDstAddress</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 5 - load source address for shell code copy</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp; </span><span>eax</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; shell_code_start</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;ret</span></p><p><span>; Gadget 6 - copy shell code to executable memory</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>edx</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>; size of shell code / 4</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;sub</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>ecx</span><span>,</span><span> </span><span>eax</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;push</span><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;loc_1117E4</span><span>:</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span><span>,</span><span> </span><span>[</span><span>eax</span><span>]</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>[</span><span>ecx</span><span>+</span><span>eax</span><span>]</span><span>,</span><span> </span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>eax</span><span>,</span><span> </span><span>4</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dec</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>edx</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jnz</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>short</span><span> </span><span>loc</span><span>_</span>1117<span>E</span>4</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;pop</span><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span>esi</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;retn</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>; Jump to our shell code</span></p></div></td>
					</tr>
				</tbody></table>
			</div>



<h2>Asynchronous file transfer</h2>



<p>The game’s networking system works by registering a set of message handler functions and corresponding message IDs, when the game receives a message it’ll call the handler function for the message ID received. By registering some unused message IDs I can setup some simple file transfer messages to send the secondary payload to the client. I came up with some simple message exchanges that look like this:</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/rce_file_transfer.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-978&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:990,&quot;targetHeight&quot;:644,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="990" height="644" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/rce_file_transfer.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/rce_file_transfer.png 990w, https://icode4.coffee/wp-content/uploads/rce_file_transfer-300x195.png 300w, https://icode4.coffee/wp-content/uploads/rce_file_transfer-768x500.png 768w" sizes="(max-width: 990px) 100vw, 990px"></figure></div>


<ol>
<li>When the client connects to the host they’ll start the file transfer with a MSG_ID_PAYLOAD_REQUEST message to the host.</li>



<li>The host will respond with a MSG_ID_PAYLOAD_DATA message that contains a sub message ID and associated value. The possible sub message IDs are:
<ul>
<li>PAYLOAD_MSG_ID_START: the value is the size of the secondary payload.</li>



<li>PAYLOAD_MSG_ID_DATA: when sent from the client to the host the value is the offset of the next block of data to send, when sent from host to client the value is the size of the payload data attached.</li>



<li>PAYLOAD_MSG_ID_END: indicates this is the last chunk of data for the secondary payload (file transfer complete).</li>
</ul>
</li>



<li>Once the client receives the PAYLOAD_MSG_ID_END message the file transfer is complete.</li>
</ol>



<p>After coding up the file transfer message handlers for both the host and client and working out the bugs I could finally see the debug spew that my payload was transferring to the client. I waited anxiously for the transfer to complete, but rather than it completing successfully my client console crashed trying to dereference a null pointer.</p>



<h2>A memory leak 15 years in the making</h2>



<p>Upon investigating further I found that a memory allocator for network data was returning NULL and causing a the null pointer dereference. I started looking through the source code for the net code and I could see exactly where the buffers for my network messages should be getting free’d. It didn’t make sense that the game was out of memory. I eventually found some debug prints left in the game that I enabled to get a print out of memory statistics if a memory allocation fails. Looking at the output I could see the memory pool for “networking” had 0 free bytes. But this didn’t make sense, I could see exactly where the buffers for the network messages should be getting free’d. I even found the matching function call in the disassembly of the THPS4 game executable to confirm it wasn’t something that only existed in the THUG code. After spending a few hours looking back and forth trying to figure out what the issue was I happened to hover over a particular line of the THUG source code. A Visual Studio intellisense tooltip popped up and what it showed made me immediately realize what the issue was.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/global_delete_operator-1.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-985&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:474,&quot;targetHeight&quot;:116,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="474" height="116" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/global_delete_operator-1.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/global_delete_operator-1.png 474w, https://icode4.coffee/wp-content/uploads/global_delete_operator-1-300x73.png 300w, https://icode4.coffee/wp-content/uploads/global_delete_operator-1-470x116.png 470w" sizes="(max-width: 474px) 100vw, 474px"></figure></div>


<p>If you’re not familiar with Visual Studio (or more so MSVC) or the new/delete operators for C++ then this tooltip probably doesn’t mean anything to you. But for those familiar you may already see the issue. This tooltip is showing the signature for the delete operator and it doesn’t match the signature for the standard Microsoft C++ runtime delete operator. This signature is for a custom delete operator, which means the game developers overloaded the global new and delete operators so that any calls using new or delete would route to their routines. Remember in the Tony Hawk’s Pro Skater 3 section I said the game developers were using a custom memory allocator? Well this is the “new and improved” version of it. I looked at the source for the delete operator function and immediately realized the mistake the developers had made. For legal reasons I’m not going to show the real source code but I’ve written a pseudo code-esq version of the code that contains the issue. Put your C++ skills to the test and see if you can spot the issue:</p>



<div id="urvanov-syntax-highlighter-66b3cb3c52420824772016" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					<div><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p><p>11</p><p>12</p><p>13</p><p>14</p><p>15</p><p>16</p><p>17</p><p>18</p><p>19</p><p>20</p><p>21</p><p>22</p><p>23</p><p>24</p><p>25</p><p>26</p><p>27</p><p>28</p><p>29</p><p>30</p><p>31</p><p>32</p><p>33</p><p>34</p><p>35</p><p>36</p><p>37</p><p>38</p><p>39</p><p>40</p><p>41</p><p>42</p><p>43</p><p>44</p><p>45</p><p>46</p><p>47</p><p>48</p><p>49</p><p>50</p><p>51</p><p>52</p><p>53</p><p>54</p><p>55</p><p>56</p></div>
				</td>
						<td><div><p><span>inline</span><span> </span><span>void</span><span> </span><span>operator</span><span> </span><span>delete</span><span>(</span><span>void</span><span>*</span><span> </span><span>pAddr</span><span>)</span></p><p><span>{</span></p><p><span>	</span><span>alloc_header</span><span>*</span><span> </span><span>p_header</span><span> </span><span>=</span><span> </span><span>get_alloc_header</span><span>(</span><span>pAddr</span><span>)</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Mark the region as free.</span></p><p><span>	</span><span>p_header</span><span>-&gt;</span><span>data_size</span><span> </span><span>=</span><span> </span><span>0</span><span>;</span></p><p><span>	</span><span>p_header</span><span>-&gt;</span><span>id</span><span> </span><span>=</span><span> </span><span>ALLOC_DEAD</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span></p><p><span>class</span><span> </span><span>stream_desc</span></p><p><span>{</span></p><p><span>	</span><span>char</span><span>*</span><span> </span><span>p_data</span><span>;</span><span>		</span><span>// Buffer holding message data</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>~</span><span>stream_desc</span><span>(</span><span>)</span></p><p><span>	</span><span>{</span></p><p><span>		</span><span>delete</span><span>[</span><span>]</span><span> </span><span>p_data</span><span>;</span></p><p><span>	</span><span>}</span></p><p><span>}</span><span>;</span></p><p><span>class</span><span> </span><span>stream_link</span></p><p><span>{</span></p><p><span>	</span><span>stream_desc</span><span>*</span><span> </span><span>p_desc</span><span>;</span></p><p><span>}</span><span>;</span></p><p><span>int</span><span> </span><span>handle_stream_message</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>stream_link</span><span>*</span><span> </span><span>p_link</span><span> </span><span>=</span><span> </span><span>.</span><span>.</span><span>.</span><span>;</span></p><p><span>	</span><span>stream_desc</span><span>*</span><span> </span><span>p_desc</span><span> </span><span>=</span><span> </span><span>p_link</span><span>-&gt;</span><span>p_desc</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Copy message data to the descriptor object.</span></p><p><span>	</span><span>p_desc</span><span>-&gt;</span><span>p_data</span><span> </span><span>=</span><span> </span><span>new</span><span> </span><span>char</span><span>[</span><span>.</span><span>.</span><span>.</span><span>]</span><span>;</span></p><p><span>	</span><span>memcpy</span><span>(</span><span>p_desc</span><span>-&gt;</span><span>p_data</span><span>,</span><span> </span><span>.</span><span>.</span><span>.</span><span>)</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Dispatch the message handler to process the message data.</span></p><p><span>	</span><span>dispatch_message</span><span>(</span><span>p_desc</span><span>)</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Cleanup temporary resources.</span></p><p><span>	</span><span>delete </span><span>p_desc</span><span>;</span></p><p><span>	</span><span>delete </span><span>p_link</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span></p></div></td>
					</tr>
				</tbody></table>
			</div>







<p>The problem lies in the custom delete operator. When you call delete on a C++ class pointer the standard runtime implementation will invoke the destructor for the class, in this case <code>~stream_desc()</code> would be invoked and p_data would be free’d. However, the custom delete operator written by the developers does not invoke the destructor for the object being deleted, meaning <code>~stream_desc()</code> isn’t going to be called and p_data won’t be free’d. This memory will be leaked and this happens for every message I send with payload data until the memory pool for networking data is exhausted and the next allocation request returns NULL. This memory leak has existed for years and it would normally never be an issue unless you sat in a multiplayer game long enough for the network pool to be exhausted (or, you know, decided to send some exploit files through the game’s net code…).</p>



<details><summary>It’s always the custom memory allocator…</summary>
<p>I’ve mentioned this in several of my blog posts but it was very common in older games for developers to write their own memory allocators. Often times the built-in memory allocators for gaming consoles were slow or even buggy and developers opted to write their own. However, often times the custom memory allocators would also be a source of bugs, just not ones that would manifest in the same way as when using the built-in memory allocators.</p>
</details>



<p>Not to worry though, because we can fix this by simply hooking the client code and free’ing the <code>p_desc-&gt;p_data</code> buffer. Yes, as part of this exploit I’m going to hot patch a 15 year old bug in the game so I can hack the client’s console. The fix is very simple, I just hooked the <code>handle_stream_message</code> function and called the correct free function for the <code>p_data</code> buffer. I know the correct fix is to invoke the destructor for the class pointer, but this code has existed this way for 15 years now and I don’t know what side effects might occur if I suddenly start invoking the destructors for objects that were never called before. Here’s the pseudo code for the fix:</p>



<div id="urvanov-syntax-highlighter-66b3cb3c52428495356358" data-settings=" minimize scroll-mouseover">
				<table>
					<tbody><tr>
				<td data-settings="show">
					
				</td>
						<td><div><p><span>int</span><span> </span><span>handle_stream_message</span><span>(</span><span>.</span><span>.</span><span>.</span><span>)</span></p><p><span>{</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>	</span><span>// Cleanup temporary resources.</span></p><p><span>	</span><span>mem_delete</span><span>(</span><span>g_memory_manager</span><span>,</span><span> </span><span>p_desc</span><span>-&gt;</span><span>p_data</span><span>)</span><span>;</span></p><p><span>	</span><span>delete </span><span>p_desc</span><span>;</span></p><p><span>	</span><span>delete </span><span>p_link</span><span>;</span></p><p><span>	</span><span>.</span><span>.</span><span>.</span></p><p><span>}</span></p></div></td>
					</tr>
				</tbody></table>
			</div>



<h2>The final result</h2>



<p>With the memory leak hot patch code in place I booted up the host and client console, let the client connect to the match and waited for the payload transfer to finish. The hot patch worked, the file transfer completed successfully and the client ran my nyan-cat executable. I now had full RCE and asynchronous file transfer to the client all while they continued to play the game. I ran one last test using a tunneling app to remotely hack a friends console who lived across the country. After a few minutes of setting everything up I waited for the file transfer to complete and boom, his console booted the nyan-cat executable.</p>



<p>Here’s a recap of all the steps required to perform this exploit from start to finish:</p>



<ol>
<li>The client connects to the malicious host console and receives the “Hack Xbox” park file over the network.</li>



<li>The client parses the park file which triggers the buffer overflow bug and overwrites the return address on the stack to kick off the ROP chain.</li>



<li>The ROP chain will copy the full shell code payload into an executable section of memory and jump to it.</li>



<li>The shell code will do the following before restoring execution back to the game and spawning the player in the match: 
<ul>
<li>Register new network message handlers for my custom message IDs to facilitate the file transfer in the background. </li>



<li>Hot patch the memory leak bug in the net code.</li>



<li>Send a MSG_ID_PAYLOAD_REQUEST message to the host console to initiate the file transfer.</li>
</ul>
</li>



<li>While the player skates around in-game the host will send an executable file to the client that gets saved locally on the client’s HDD.</li>



<li>Once the file transfer is completed the shell code will patch the client’s kernel to use the habibi key and boot the secondary executable that was sent.</li>
</ol>



<p>The entire process is so seamlessly smooth that without changing the LED color an unsuspecting player would have no idea anything was going on until their console suddenly booted another application. If I was a real threat actor I could easily get persistent code execution on the console and do whatever I want, snoop around the person’s network, create a botnet, or just brick their console entirely. Luckily I’m just here to try and prove my skills as a console hacker. With this exploit completed I was just pretty satisfied and felt I had achieved my original goals. However, with everything I achieved I was still doing all of this on a console that doesn’t have DEP or any real security mitigations that would make this exploit difficult. So it was time to move on to another target, one I had wanted to find a new exploit on for a long time…</p>



<h2>Part 3: The first Xbox 360 software-only exploit</h2>



<p>I’ve spent many years reverse engineering the software on the Xbox 360 in hopes I might one day find a bug that could be used to hack the console on newer kernel versions. The Xbox 360 hypervisor is probably the most secure piece of code Microsoft has ever written. There’s only ever been 1 software bug found in it that I largely suspect was due to a compiler bug and not the result of a developer making changes to the hypervisor code. That bug existed in the system call handler and was only present in the 4548 version kernel, which has not been usable since early in the console’s lifecycle. While I have found a few bugs in the Xbox 360 hypervisor I have not found any that are exploitable or could be chained together to get code execution. </p>



<p>I checked the version of Tony Hawk’s American Wasteland for Xbox 360 and confirmed it was vulnerable to the gap name buffer overflow attack. I really wanted to exploit the console on a kernel version newer than 4548 (even obtaining a console that can boot this kernel version is difficult in modern times) but without a new hypervisor bug that hope was dead in the water. However, there was one thing I could do with the Tony Hawk strcpy bug and that was develop the first software only exploit for the console, even if it only worked on the 4548 version kernel.</p>



<details><summary>Lets take a step back to 2006 for a moment…</summary>
<p>The Xbox 360 has recently been released and the Xbox hacking community is in full swing trying to hack the console. Very little is known about the inner workings of the console due to all executable code being encrypted. This means hackers didn’t have the ability to reverse engineer any code to try and find bugs or learn about how the console software worked. However, December 2006 an exploit would be revealed at 23C3 that showed the game King Kong being used to boot linux. Shortly after the first decrypted hypervisor and kernel image would appear on the internet for people to start reverse engineering, and eventually tools would be developed to decrypt all code that could be found on the console or on game discs. I remember reading a lot of misconceptions that the Xbox 360 hypervisor would prevent buffer overflow attacks and that the console wouldn’t be able to be hacked using game save exploits like the original Xbox was. This however, was incorrect, the Xbox 360 hypervisor doesn’t do anything that prevents stack buffer overflows.</p>



<p>Later on the details of the King Kong hack would be disclosed for anyone to use. It worked by modifying the shader files the game used to perform some arbitrary writes to kernel memory that would kick off a ROP chain and exploit the system call handler bug. This required you opened the console and flash modified firmware to the dvd drive in order to play the modified King Kong disc you would need to create (the shader files are on disc). I always wondered if there was another entry point that could have been used instead of having to open the console and modify the dvd drive (which ultimately led to an unstoppable wave of piracy in the years to come). And there was: using a game save bug to kick off the ROP chain. </p>



<p>However, this is also a “chicken and egg” situation as the game save files are RSA signed using a key pair that is unique to your console. Every Xbox 360 console has a “key store” that contains a number of cryptographic keys used by the console, one of which is used to sign game saves. This prevents people from modifying save files unless you have the RSA private key from a console’s key store, any console’s key store. How does a save file signed with my console’s private RSA key successfully validate on another Xbox 360 console? Because the RSA public key is embedded into the save file header, allowing another console to use it to validate the integrity of the save file. This public key is actually signed by another RSA key pair that only Microsoft has, so you can’t just put any public key in the save file header and have it validate. But as long as you had the decrypted key store for any Xbox 360 console you could resign a modified save file for use on anyone else’s console. This would require you first hack the console in order to get the decrypted key store, and you might be wondering how the first group of hackers were able to find the system call handler bug in the first place if all executable code is encrypted?</p>



<p>The crux of all Xbox 360 hacking started with hackers obtain Xbox 360 development consoles. These are special consoles used by developers to make and debug games. Once hackers were able to obtain these consoles (or more importantly, the SDK used along side these consoles) it would reveal a ton of information on how to decrypt executable code allowing them to start reverse engineering the boot chain, hypervisor, and game code, and eventually hack the console. Had these developer consoles and software not leaked the console most likely would have never been hacked as all executable code was encrypted (even when in RAM) from an external point of view. No ability to inspect code = no ability to find bugs.</p>
</details>



<h2>The system call handler bug</h2>



<p>I’m not gonna go into great detail about the overall security architecture of the Xbox 360 as there’s way too much to cover that’s not relevant to this post. But I will provide an overview of the system call handler bug as understanding that is essential to understanding the exploit payload.</p>



<p>The Xbox 360 has two main modes of execution: hypervisor real mode which is the most privileged mode and kernel mode which is less privileged and where the rest of the OS and games run. The CPU will use 64-bit physical addresses when in real mode and 32-bit virtual addresses when in kernel mode. The hypervisor doesn’t actually provide any virtualization functionality that you’d expect when you hear the word “hypervisor”. It’s more akin to a micro-kernel or “security supervisor” as it facilitates all security related operations on the console (such as code integrity validation) and assignment of executable memory. There’s no way to run any code on the console without it going through the hypervisor to be validated and have the memory pages marked as executable. </p>



<p>The CPU also has a cryptography unit on-die that sits next to the L2 cache and is responsible for encrypting and hashing memory. This prevents an attacker from sniffing or modifying RAM externally but also helps to thwart certain types of memory corruption bugs. When in kernel mode you can only see the cipher text of the hypervisor pages as they’re encrypted + hashed and not mapped in a way that would allow successful decryption of the memory from kernel mode. Trying to overwrite the cipher text from kernel mode will cause the hashing checks to fail and accessing that memory from real mode (hypervisor context) will trigger an exception and halt the console. Basically, you can’t read or write hypervisor memory from kernel mode or the console will halt.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/xbox_360_address-2.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-995&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:900,&quot;targetHeight&quot;:326,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="900" height="326" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/xbox_360_address-2.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/xbox_360_address-2.png 900w, https://icode4.coffee/wp-content/uploads/xbox_360_address-2-300x109.png 300w, https://icode4.coffee/wp-content/uploads/xbox_360_address-2-768x278.png 768w" sizes="(max-width: 900px) 100vw, 900px"><figcaption>Real mode address breakdown</figcaption></figure></div>


<p>When in real mode the upper 32-bits of a physical address are used by the crypto unit to control encryption and hashing of data (I’ll refer to them as the “protection bits”). There’s a special address mask, <code>0x80000000.00000000</code>, that can be applied to a 64-bit physical address that performs a memory access while ignoring encryption and hashing. This can be used to read or write memory in a non-protected way as validation of the memory is skipped. Any place kernel mode can provide a physical memory address to the hypervisor it’s imperative that the upper 32 bits are cleared to ensure that kernel mode code can’t provide the protection bits or else it could be used to read/write protected memory.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/system_call_handler_normal.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-998&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:563,&quot;targetHeight&quot;:222,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="563" height="222" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/system_call_handler_normal.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/system_call_handler_normal.png 563w, https://icode4.coffee/wp-content/uploads/system_call_handler_normal-300x118.png 300w" sizes="(max-width: 563px) 100vw, 563px"><figcaption>Normal system call handler instructions</figcaption></figure></div>


<p>Looking at the normal implementation of the system call handler we can see how it’s supposed to work. Register r0 contains the system call ordinal provided by kernel mode. The slwi (shift left word immediate) instruction will shift the system call ordinal left by 2 (multiplying it by 4) and discard the upper 32 bits of the result (truncating the 64 bit result to 32 bits). This offset is used to index into the system call function table to get the function address for the specified system call ordinal. Since the ordinal has to be between 0 and the highest system call ordinal it’s not possible to get offset to point anywhere except within the system call function table.</p>


<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/icode4.coffee\/wp-content\/uploads\/system_call_handler_4548.png&quot;,&quot;figureClassNames&quot;:&quot;aligncenter size-full&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-1000&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:565,&quot;targetHeight&quot;:147,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image&quot;,&quot;alt&quot;:&quot;&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="565" height="147" data-wp-init="callbacks.setButtonStyles" data-wp-on--click="actions.showLightbox" data-wp-on--load="callbacks.setButtonStyles" data-wp-on-window--resize="callbacks.setButtonStyles" src="https://icode4.coffee/wp-content/uploads/system_call_handler_4548.png" alt="" srcset="https://icode4.coffee/wp-content/uploads/system_call_handler_4548.png 565w, https://icode4.coffee/wp-content/uploads/system_call_handler_4548-300x78.png 300w" sizes="(max-width: 565px) 100vw, 565px"><figcaption>System call handler instructions for 4548</figcaption></figure></div>


<p>Looking at the implementation of the system call handler on 4548 we can see there’s a slightly different instruction pattern, the slwi instruction has been replaced with sldi (shift left double immediate). This instruction operates on 64 bits, not 32, which means we can control the upper 32 bits of r0 which will get used when indexing the system call function table. Now I did say that the system call ordinal will be checked to make sure it’s within [0, max ordinal), but that comparison operates on the lower 32 bits of r0. The upper 32 bits will not be considered for the comparison. So by setting r0 to a value such as <code>0x20000000.0000003F</code> it will pass the ordinal range check and produce an offset of <code>0x80000000.000000FC</code> which will allow us to access unprotected memory (ignoring encryption and hashing) when indexing the system call function table.</p>



<details><summary>I highly suspect that this change was due to a compiler bug…</summary>
<p>The system call handler routine would be one of the first pieces of code written for the hypervisor as it’s a CPU exception vector and required for kernel mode code to run. By the time the console launched this code would have been well matured and there wouldn’t be any reason to change it, especially a few updates into the console’s lifecycle. Having worked at Microsoft for 7 years I can recount 3 occasions where we received an MSRC bug report for some bug that cropped up in the Windows kernel. Upon investigating the causes it was determined that recent compiler work had cause certain instruction patterns emitted by the compiler to change, and the new instruction patterns led to security bugs in kernel code. I highly suspect that this is the case for the 4548 system call handler bug as well. I don’t think there’s any reason for this code to have been changed by a developer especially in a way that would change how this array is indexed.</p>
</details>



<p>So how can this be exploited? From kernel mode we have a view of encrypted hypervisor memory and we can overwrite it. Normally this would cause the console to halt the next time the hypervisor tried to read that memory, but because we can get the system call handler to read a function pointer while controlling the upper 32 bits of the address we can set the upper most bit so a read ignoring encryption and hashing is performed. This will let the hypervisor read the value we overwrote and not fault. We can set the function pointer to point to a convenient instruction sequence that’ll get us code execution and by executing a system call with a maliciously crafted ordinal we can get the hypervisor to jump to our code. Here’s the steps required to exploit this bug:</p>



<ol>
<li>Load some shell code into memory and get the physical address of the allocation.</li>



<li>Change a kernel memory manager variable that controls the 64kb page mappings. This will expose the encrypted view of hypervisor memory into an address range we can write to.</li>



<li>Overwrite a system call function pointer in the encrypted view of hypervisor memory to point to the address of a convenient instruction sequence. For this we choose the instruction sequence <code>mtctr r4; bctr</code> which will jump to the address contained in r4 which we have full control over going into the system call handler.</li>



<li>Set r0 to contain the ordinal of the system call function pointer we overwrote in step 2 and set the upper 32 bits such that shifting them left by 2 will set the upper most bit in the register, ex: <code><code>0x20000000.0000003F</code></code>. Set r4 such that it contains the physical address of our shell code OR’d with the <code>0x80000000.00000000</code> mask (our shell code sits in unprotected memory).</li>



<li>Execute the system call instruction which will switch into real mode and let the hypervisor dispatch the system call. It’ll perform a 32-bit comparison on the malicious system call ordinal and a 64-bit shift to calculate the array offset which will read the function pointer we overwrote without faulting. The hypervisor will jump to this address and execute the <code>mtctr r4; bctr</code> instruction sequence and jump to our shell code in unprotected memory. When in real mode the page protections are ignored so the hypervisor won’t fault trying to execute non-executable memory.</li>
</ol>



<p>So how can we do this using the strcpy bug in Tony Hawk’s American Wasteland?</p>



<h2>Collect E X P L O I T while maintaining a ROP chain</h2>



<p>To build the ROP chain I modified the (now archived) <a href="https://github.com/iphelix/ida-sploiter" data-type="link" data-id="https://github.com/iphelix/ida-sploiter">Ida-Sploiter</a> IDA plugin to add support for PowerPC architecture. This plugin would help me find ROP gadgets based on given search criteria for specific instructions or registers being used. The entire exploit took 24 ROP gadgets to perform and achieve full hypervisor code execution where I then patch out the code integrity checks and launch a secondary executable bundled in with the game save. I’m not going to detail the ROP chain here as it’s really long and boring (I’ve also thoroughly documented it on the GitHub repository), but I’ll provide a brief overview of all the steps for the full exploit:</p>



<ol>
<li>Using the strcpy bug we overflow the gap name buffer on the stack and overwrite the return address to point to the first ROP gadget.</li>



<li>The first ROP gadget changes the stack pointer to point to the ROP chain data contained in the save game buffer in memory.</li>



<li>Call MmAllocatePhysicalMemoryEx to allocate a block of physical memory for our hypervisor shell code.</li>



<li>Call memcpy and copy the hypervisor shell code into the buffer allocated in step 3.</li>



<li>Call MmGetPhysicalAddress to get the physical address of our shell code buffer (this is what we pass to the hypervisor) and save it for later.</li>



<li>Change the kernel memory manager variable that controls the 64kb page mappings to map in the encrypted view of hypervisor memory for write access.</li>



<li>Overwrite the hypervisor system call function address in the encrypted memory view to point to the <code>mtctr r4; bctr</code> instruction sequence.</li>



<li>Execute the syscall instruction using the malicious system call ordinal and physical address of our hypervisor shell code obtained in step 5.</li>



<li>The hypervisor will load the function pointer we overwrote in step 7, execute the <code>mtctr r4; bctr</code> instruction sequence and jump to our hypervisor shell code.</li>



<li>Now we have full hypervisor code exec. I change the LED color to signal the exploit was successful, then patch out the RSA signature checks on executable files and return from the system call interrupt.</li>



<li>We’re back in the ROP chain in kernel mode. Next we map a folder on the HDD that contains the secondary payload by calling ObCreateSymbolicLink.</li>



<li>Finally we call XLaunchNewImage and launch our unsigned secondary payload.</li>
</ol>



<figure><video controls="" src="https://icode4.coffee/wp-content/uploads/thaw_xbox360_exploit.mov"></video></figure>



<p>And there you have it, the first software only exploit for the Xbox 360. It’s kind of ironic that this worked out almost exactly the same as the save game exploits for the original Xbox: performing a stack buffer overflow from a strcpy call on data contained in a save game file you can copy to your console using a memory card. You can use the strcpy bug to get ROP execution on any Xbox 360 OS version, but you’ll only be able to get full hypervisor code execution on the 4548 kernel version. If a new hypervisor bug is discovered this can easily be paired with it to work on newer kernel versions. I still have some hope that there might be an exploitable bug that would get you hypervisor code execution on a new kernel version. But I highly suspect it would be some kind of CPU or MMU bug rather than a bug in the hypervisor code. </p>



<h2>Part 3: Hack the planet</h2>



<p>Fast forward to present day (2024) and I finally got around to cleaning up and releasing all these Tony Hawk exploits. However, since I’m most likely retiring from game console hacking after this I wanted to drop an absolute banger of a release so I ported the exploit to some other game consoles that are vulnerable to it. This bug exists in 5 different iterations of the Tony Hawk video game series across numerous game consoles and handhelds. No one is safe from Tony Hawk’s Pro Strcpy. Since you’re probably tired of me talking about the same strcpy bug over and over I’m only going to provide some brief details of which games for which platforms I ported the exploit to and how it may or may not make hacking those consoles easier.</p>



<h2>Playstation 2</h2>



<p>I ported the Tony Hawk Pro Skater 4 network RCE exploit to the Playstation 2 version of the game. Using PCSX2 (or another console) you only need the THPS4 disc and you can hack your console over the network. The exploit will send uLaunchElf over the network and launch it when the transfer completes, from there you can load the FreeMcBoot/FreeHDBoot installer off some other media (like a usb stick). I originally wanted to just send the FreeMcBoot installer but it’s not a single file and the PS2 doesn’t have any persistent storage attached to it by default (unlike Xbox with the built-in HDD). </p>



<p>The save game exploits are not useful on the PS2 because if you have a way to copy files to a memory card you can just install FreeMcBoot and be done. I don’t know if this network exploit will make it any easier to hack the console since you can already buy a FreeMcBoot memory card off Amazon for $15 USD with next day prime shipping or just use FreeHDBoot on a phat console with the network adapter. So I think it’s safe to say anyone who wants to hack their PS2 most likely will not need this exploit. Oh well, hack the planet.</p>



<h2>GameCube</h2>



<p>I ported the Tony Hawk Pro Skater 4 save game exploit to the GameCube version of the game, but did not port the network RCE or any other version of the save game exploits. What I didn’t realize going into this was that it’s non-trivial to copy files to the GameCube memory card and that people have been buying memory cards with pre-hacked save files on them off of Ebay for upwards of $50 USD. This is honestly pretty lame and I tried to think of another way to lower the barrier to entry for this console but the GameCube versions of the Tony Hawk games don’t have network support so even if you bought the network adapter (which apparently no one has because only like 4 games supported it) you wouldn’t be able to use the network exploit anyway. It looks like there’s already plenty of game save exploits available for the console, and since there isn’t a persistent software hack for the console most people end up going with a modchip anyway. Oh well, hack the planet.</p>



<h2>Windows</h2>



<p>I created a game save exploit for THUG PRO, the community patch for Tony Hawk’s Underground, and I even reported the bug to them 7 years ago but they weren’t interested in fixing it at the time. Since the exploit doesn’t provide any value to Windows I opted not to release it (it wasn’t full stack anyway) but I would like to provide a word of warning to anyone playing any of the Tony Hawk games on PC. They all have the same strcpy bug in them, they’re all exploitable, and that’s not the only strcpy bug that can be exploited over network play either. I highly recommend playing those games while forcing ASLR on the executable, and don’t ever run them as Administrator.</p>



<h2>Conclusion</h2>



<p>So there you have it, who would have thought one strcpy bug could be used to hack so many different platforms and even achieve RCE on some of them? Bugs aside the Tony Hawk skateboarding games were some of my favorite growing up. Those games are what got me into skateboarding and provided years of entertainment. Neversoft was one of my favorite game studios and a place I would’ve loved to work at. There’s some behind the scenes footage of a bunch of Neversoft developers who were probably in their late 20s-early 30s and had never stepped on a skateboard before have a contest to see who could do a kickflip off a big wooden conference table at the studio. I remember thinking that was the coolest thing I had ever seen and wanted to work there ever since. Unfortunately they shut down but at least the legacy of the Tony Hawk video game series will live on as some of the greatest games of the 2000s and the best way to hack your old gaming consoles 😉</p>



<p>Full source code and patched game save files are available on my <a href="https://github.com/grimdoomer/TonyHawksProStrcpy">GitHub</a>.</p>
									
																		
								</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Official Puppeteer Support for Firefox (595 pts)]]></title>
            <link>https://hacks.mozilla.org/2024/08/puppeteer-support-for-firefox/</link>
            <guid>41182847</guid>
            <pubDate>Wed, 07 Aug 2024 16:19:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hacks.mozilla.org/2024/08/puppeteer-support-for-firefox/">https://hacks.mozilla.org/2024/08/puppeteer-support-for-firefox/</a>, See on <a href="https://news.ycombinator.com/item?id=41182847">Hacker News</a></p>
<div id="readability-page-1" class="page"><article role="article">
    
<p>We’re pleased to announce that, as of version 23, the <a href="https://pptr.dev/">Puppeteer</a> browser automation library now has first-class support for Firefox. This means that it’s now easy to write automation and perform end-to-end testing using Puppeteer, and run against both Chrome and Firefox.</p>
<h2>How to Use Puppeteer With Firefox</h2>
<p>To get started, simply set the product to “<code>firefox</code>” when starting Puppeteer:</p>
<pre><code>import puppeteer from "puppeteer";

const browser = await puppeteer.launch({
  browser: "firefox"
});

const page = await browser.newPage();
// ...
await browser.close();</code></pre>
<p>As with Chrome, Puppeteer is able to download and launch the latest stable version of Firefox, so running against either browser should offer the same developer experience that Puppeteer users have come to expect.</p>
<p>Whilst the features offered by Puppeteer won’t be a surprise, bringing support to multiple browsers has been a significant undertaking. The Firefox support is not based on a Firefox-specific automation protocol, but on WebDriver BiDi, a cross browser protocol that’s undergoing standardization at the W3C, and currently has implementation in both Gecko and Chromium. This use of a cross-browser protocol should make it much easier to support many different browsers going forward.</p>
<p>Later in this post we’ll dive into some of the more technical background behind WebDriver BiDi. But first we’d like to call out how today’s announcement is a great demonstration of how productive collaboration can advance the state of the art on the web. Developing a new browser automation protocol is a lot of work, and great thanks goes to the Puppeteer team and the other members of the W3C Browser Testing and Tools Working Group, for all their efforts in getting us to this point.</p>
<p>You can also check out the Puppeteer team’s<a href="https://developer.chrome.com/blog/firefox-support-in-puppeteer-with-webdriver-bidi"> post</a> about making WebDriver BiDi production ready.</p>
<h2>Key Features</h2>
<p>For long-time Puppeteer users, the features available are familiar. However for people in other automation and testing ecosystems — particularly those that until recently relied entirely on HTTP-based WebDriver — this section outlines some of the new functionality that WebDriver BiDi makes possible to implement in a cross-browser manner.</p>
<h3>Capturing of Log Messages</h3>
<p>A common requirement when testing web apps is to ensure that there are no unexpected errors reported to the console. This is also a case where an event-based protocol shines, since it avoids the need to poll the browser for new log messages.</p>
<pre><code>import puppeteer from "puppeteer";

const browser = await puppeteer.launch({
  browser: "firefox"
});

const page = await browser.newPage();
page.on('console', msg =&gt; {
  console.log(`[console] ${msg.type()}: ${msg.text()}`);
});

await page.evaluate(() =&gt; console.debug('Some Info'));
await browser.close();</code></pre>
<p>Output:</p>
<pre>[console] debug: Some Info</pre>
<h3>Device Emulation</h3>
<p>Often when testing a reactive layout it’s useful to be able to ensure that the layout works well at multiple screen dimensions, and device pixel ratios. This can be done by using a real mobile browser, either on a device, or on an emulator. However for simplicity it can be useful to perform the testing on a desktop set up to mimic the viewport of a mobile device. The example below shows loading a page with Firefox configured to emulate the viewport size and device pixel ratio of a Pixel 5 phone.</p>
<pre><code>import puppeteer from "puppeteer";

const device = puppeteer.KnownDevices["Pixel 5"];

const browser = await puppeteer.launch({
  browser: "firefox"
});

const page = await browser.newPage();
await page.emulate(device);

const viewport = page.viewport();

console.log(
  `[emulate] Pixel 5: ${viewport.width}x${viewport.height}` +
  ` (dpr=${viewport.deviceScaleFactor}, mobile=${viewport.isMobile})`
);

await page.goto("https://www.mozilla.org");
await browser.close();
</code></pre>
<p>Output:</p>
<pre>[emulate] Pixel 5: 393x851 (dpr=3, mobile=true)</pre>
<h3>Network Interception</h3>
<p>A common requirement for testing is to be able to track and intercept network requests. Interception is especially useful for avoiding requests to third party services during tests, and providing mock response data. It can also be used to handle HTTP authentication dialogs, and override parts of the request and response, for example adding or removing headers. In the example below we use network request interception to block all requests to web fonts on a page, which might be useful to ensure that these fonts failing to load doesn’t break the site layout.</p>
<pre><code>import puppeteer from "puppeteer";

const browser = await puppeteer.launch({
  browser: 'firefox'
});

const page = await browser.newPage();
await page.setRequestInterception(true);

page.on("request", request =&gt; {
  if (request.url().includes(".woff2")) {
    // Block requests to custom user fonts.
    console.log(`[intercept] Request aborted: ${request.url()}`);
    request.abort();
  } else {
    request.continue();
  }
});

const response = await page.goto("https://support.mozilla.org");
console.log(
  `[navigate] status=${response.status()} url=${response.url()}`
);
await browser.close();</code></pre>
<p>Output:</p>
<pre>[intercept] Request aborted: https://assets-prod.sumo.prod.webservices.mozgcp.net/static/Inter-Bold.3717db0be15085ac.woff2
[navigate] status=200 url=https://support.mozilla.org/en-US/
</pre>
<h3>Preload Scripts</h3>
<p>Often automation tooling wants to provide custom functionality that can be implemented in JavaScript. Whilst WebDriver has always allowed injecting scripts, it wasn’t possible to ensure that an injected script was always run before the page started loading, making it impossible to avoid races between the page scripts and the injected script.</p>
<p>WebDriver BiDi provides “preload” scripts which can be run before a page is loaded. It also provides a means to emit custom events from scripts. This can be used, for example, to avoid polling for expected elements, but instead using a mutation observer that fires as soon as the element is available. In the example below we wait for the &lt;title&gt; element to appear on the page, and log its contents.</p>
<pre><code>import puppeteer from "puppeteer";

const browser = await puppeteer.launch({
  browser: 'firefox',
});

const page = await browser.newPage();

const gotMessage = new Promise(resolve =&gt;
  page.exposeFunction("sendMessage", async message =&gt; {
    console.log(`[script] Message from pre-load script: ${message}`);
    resolve();
  })
);

await page.evaluateOnNewDocument(() =&gt; {
  const observer = new MutationObserver(mutationList =&gt; {
    for (const mutation of mutationList) {
      if (mutation.type === "childList") {
        for (const node of mutation.addedNodes) {
          if (node.tagName === "TITLE") {
            sendMessage(node.textContent);
          }
        }
      }
    };
  });

  observer.observe(document.documentElement, {
    subtree: true,
    childList: true,
  });
});

await page.goto("https://support.mozilla.org");
await gotMessage;
await browser.close();</code></pre>
<p>Output:</p>
<pre>[script] Message from pre-load script: Mozilla Support</pre>
<h2>Technical Background</h2>
<p>Until recently people wishing to automate browsers had two main choices:</p>
<ul>
<li aria-level="1">Use the W3C <a href="https://w3c.github.io/webdriver/">WebDriver</a> API, which was based on earlier work by the Selenium project.</li>
<li aria-level="1">Use a browser-specific API for talking to each supported browser such as <a href="https://chromedevtools.github.io/devtools-protocol/">Chrome DevTools Protocol</a> (CDP) for Chromium-based browsers, or Firefox’s <a href="https://firefox-source-docs.mozilla.org/devtools/backend/protocol.html">Remote Debugging Protocol</a> (RDP) for Gecko-based browsers.</li>
</ul>
<p>Unfortunately both of those options come with significant tradeoffs. The “classic” WebDriver API is HTTP-based, and its model involves automation sending a command to the browser and waiting for a response. That works well for automation scenarios where you load a page and then verify, for example, that some element is displayed, but the inability to get events ­— e.g. console logs — back from the browser, or run multiple commands concurrently, makes the API a poor fit for more advanced use cases.</p>
<p>By contrast, browser-specific APIs have generally been designed around supporting the complex use cases of in-browser devtools. This has given them a feature set far in advance of what’s possible using WebDriver, as they need to support use cases such as recording console logs, or network requests.</p>
<p>Therefore, browser automation clients have been forced to make the choice between supporting many browsers using a single protocol and providing a limited feature set, or providing a richer feature set but having to implement multiple protocols to provide functionality separately for each supported browser. This obviously increased the cost and complexity of creating great cross-browser automation, which isn’t a good situation, especially when developers <a href="https://mdn.dev/archives/insights/reports/mdn-web-testing-report-2021.html">commonly cite</a> cross-browser testing as one the main pain points in developing for the web.</p>
<p>Long time developers might notice the analogy here to the situation with editors before the development of <a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol</a> (LSP). At that time each text editor or IDE had to implement bespoke support for each different programming language. That made it hard to get support for a new language into all the tools that developers were using. The advent of LSP changed that by providing a common protocol that could be supported by any combination of editor and programming language. For a new programming language like TypeScript to be supported across all editors it no longer needs to get them to add support one-by-one; it only needs to provide an LSP server and it will automatically be supported across any LSP-supporting editor. The advent of this common protocol has also enabled things that were hard to imagine before. For example specific libraries like Tailwind getting their own <a href="https://www.npmjs.com/package/@tailwindcss/language-server">LSP implementation</a> to enable bespoke editor functionality.</p>
<p>So to improve cross-browser automation we’ve taken a similar approach: developing <a href="https://w3c.github.io/webdriver-bidi/">WebDriver BiDi</a>, which brings the automation featureset previously limited to browser-specific protocols to a standardized protocol that can be implemented by any browser and used by any automation tooling in any programming language.</p>
<p>At Mozilla we see this strategy of standardizing protocols in order to remove barriers to entry, allow a diverse ecosystem of interoperable implementations to flourish, and enable users to choose those best suited to their needs as a key part of our manifesto and <a href="https://www.mozilla.org/en-US/about/webvision/full/#openness">web vision</a>.</p>
<p>For more details about the design of WebDriver BiDi and how it relates to classic WebDriver, please see our <a href="https://hacks.mozilla.org/2020/12/cross-browser-testing-part-1-web-app-testing-today/">earlier</a> <a href="https://hacks.mozilla.org/2021/01/improving-cross-browser-testing-part-2-new-automation-features-in-firefox-nightly/">posts</a>.</p>
<h2>Removing experimental CDP support in Firefox</h2>
<p>As part of our early work on improving cross-browser testing, we shipped a partial implementation of CDP, limited to a few commands and events needed to support testing use cases. This was previously the basis of experimental support for Firefox in Puppeteer. However, once it became clear that this was not the way forward for cross-browser automation, effort on this was stopped. As a result it is unmaintained and doesn’t work with modern Firefox features such as site isolation. Therefore support is <a href="https://fxdx.dev/deprecating-cdp-support-in-firefox-embracing-the-future-with-webdriver-bidi/">scheduled to be removed</a> at the end of 2024.</p>
<p>If you are currently using CDP with Firefox, and don’t know how to transition to WebDriver BiDi, please reach out using one of the <a href="#contact-us">channels listed at the bottom of this post</a>, and we will discuss your requirements.</p>
<h2>What’s Next?</h2>
<p>Although Firefox is now officially supported in Puppeteer, and has enough functionality to cover many automation and testing scenarios, there are still some APIs that remain unsupported. These broadly fall into three categories (consult the <a href="https://pptr.dev/webdriver-bidi">Puppeteer documentation</a> for a full list):</p>
<ul>
<li aria-level="1">Highly CDP-specific APIs, notably those in the <a href="https://pptr.dev/api/puppeteer.cdpsession">CDPSession</a> module. These are unlikely to be supported directly, but specific use cases that currently require these APIs could be candidates for standardization.</li>
<li aria-level="1">APIs which require further standards work. For example <a href="https://pptr.dev/api/puppeteer.accessibility.snapshot">page.accessibility.snapshot</a> returns a dump of the Chromium accessibility tree. However because there’s currently no standardized description of what that tree should look like this is hard to make work in a cross-browser way. There are also cases which are much more straightforward, as they only require work on the WebDriver BiDi spec itself; for example <a href="https://pptr.dev/api/puppeteer.page.setgeolocation">page.setGeolocation</a>.</li>
<li aria-level="1">APIs which have a standard but are not yet implemented, for example the ability to execute scripts in workers required for commands like <a href="https://pptr.dev/api/puppeteer.webworker.evaluate">WebWorker.evaluate</a>.</li>
</ul>
<p>We expect to fill these gaps going forward. To help prioritize, we’re interested in your feedback: Please try running your Puppeteer tests in Firefox! If you’re unable to get them in Firefox because of a bug or missing feature, please let us know using one of the methods below so that we can take it into account when planning our future standards and implementation work:</p>

    <section>
                                
                      <p>Software engineer focused on maintaining a healthy open web. Web-platform-tests core team member.</p>
                                <p><a href="https://hacks.mozilla.org/author/jgrahammozilla-com/">More articles by James Graham…</a></p>
                  
                                <p><a href="https://hacks.mozilla.org/author/hskupinmozilla-com/">More articles by Henrik Skupin…</a></p>
                  
                                <p><a href="https://hacks.mozilla.org/author/jdescottesmozilla-com/">More articles by Julian Descottes…</a></p>
                  
                                <p><a href="https://hacks.mozilla.org/author/aborovovamozilla-com/">More articles by Alexandra Borovova…</a></p>
                  </section>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Python extensions should be lazy (105 pts)]]></title>
            <link>https://www.gauge.sh/blog/python-extensions-should-be-lazy</link>
            <guid>41182805</guid>
            <pubDate>Wed, 07 Aug 2024 16:14:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gauge.sh/blog/python-extensions-should-be-lazy">https://www.gauge.sh/blog/python-extensions-should-be-lazy</a>, See on <a href="https://news.ycombinator.com/item?id=41182805">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-w-id="5b8e0128-dfc2-fd07-77df-30819f5d5004"><p>I recently had to optimize a Python tool which made a lot of calls to <code>ast.parse</code>. On a codebase with about 500k LoC, these calls alone took around 8 seconds! This was pretty shocking - the <code>ast</code> module is written in C, and 500k LoC is not particularly large.</p><p>So why was the C implementation so slow? The short answer is that Python is forcing it to be slow. For the long answer, we’ll have to dig into the source.</p><h2><strong>Why is C so slow?</strong></h2><p>The first thing to recognize is that the <code>ast</code> module fundamentally has more work to do than just a C program parsing Python ASTs. Not only does it need to tokenize the Python source and then build the AST, <strong>it must also return that AST to the Python interpreter.</strong></p><p>Let’s look at some of the relevant source code from <a href="https://github.com/python/cpython/blob/967a4f1d180d4cd669d5c6e3ac5ba99af4e72d4e/Python/pythonrun.c#L1425-L1453">CPython</a>.</p><figure><p><img src="https://cdn.prod.website-files.com/665a5f120c4c63df1944d627/66b2fd89e9065aa8843c5762_666b78b0949d1a81e01cda5c_Py_CompileStringObject.png" loading="lazy" alt=""></p><figcaption>This function turns Python source code into an ast.AST object</figcaption></figure><p>If you haven’t read much C (like me), it’s probably not clear what you’re looking at. The important points to see here are:<code>‍</code></p><p><code>- _PyParser_ASTFromString</code> turns source code into a native <code>mod_ty</code> struct <strong>[C -&gt; C]</strong> </p><p><code>- PyAST_mod2obj</code> turns the <code>mod_ty</code> struct into a <code>PyObject</code> <strong>[C -&gt; Python]</strong> </p><p>- We can ignore the final three lines since we will have the <code>PyCF_ONLY_AST</code> flag set when calling <code>ast.parse</code></p><p>It’s critical to note here that <code>PyAST_mod2obj</code> translates the <strong>entire AST immediately</strong>. This means every node in the source becomes a <code>PyObject</code>, along with every value that each node holds.</p><p>When I run this through Valgrind with the 500k LoC as input, the results show a massive number of memory allocations (<code>malloc</code>) and a significant amount of time spent on garbage collection. This is when ‘<a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types">everything is an object</a>’ really bites you.</p><figure><p><img src="https://cdn.prod.website-files.com/665a5f120c4c63df1944d627/66b2fd89e9065aa8843c576b_666b7903836f04ab2b2f0304_python_callgrind_old_get_project_imports.png" loading="lazy" alt=""></p><figcaption>Valgrind output showing ~3k GCs, ~59M mallocs</figcaption></figure><h2><strong>The Solution</strong></h2><p>Given the findings above, I moved all of the AST-dependent operations into a Rust extension. This avoided the need to build a Python-compatible AST entirely, and instead kept all the data in compact Rust structs. In other words, this Rust extension was processing the ASTs in Rust-land and <strong>only returning the final results to Python</strong>.</p><p>After the rewrite, the cumulative runtime of the relevant code went from <strong>8.7s</strong> to <strong>530ms</strong> (a <strong>16x speedup</strong>).</p><p>With Valgrind we can also see that this got rid of the massive GC pauses, and dramatically reduced the memory pressure. While the original version made almost 60M malloc calls and spent 35% of its cycles on garbage collection, the new implementation shows no significant GC activity and makes only ~7M malloc calls.</p><figure><p><img src="https://cdn.prod.website-files.com/665a5f120c4c63df1944d627/66b2fd89e9065aa8843c5766_666b7a3b3855f4decaa412eb_rust_callgrind_cycle_estimation.png" loading="lazy" alt=""></p><figcaption>~7M mallocs, no GC pauses</figcaption></figure><h2>Laziness</h2><p>So what does this have to do with laziness?</p><p>Pushing data into Python’s memory model is a performance bottleneck. It follows that an approach like <a href="https://numpy.org/doc/1.21/reference/internals.html">numpy’s</a> is likely worth exploring for more Python extensions. In numpy, the underlying data behind objects like <code>np.array</code> is stored in contiguous blocks of memory owned by the compiled C extension. Python lists, dicts, and even numbers are created only when explicitly built by the end-user.</p><p>In the case of ASTs, one could imagine a kind of ‘query language’ API for Python that operates on data that is owned by the extension - analogous to SQL over the highly specialized binary representations that a database would use. This would let the extension own the memory, and would lazily create Python objects when necessary.</p><figure><p><img src="https://cdn.prod.website-files.com/665a5f120c4c63df1944d627/66b39b97e074c5cc060603f6_66b39b80b4fb395218cad63a_Screenshot%2520from%25202024-08-07%252009-05-54.png" loading="lazy" alt=""></p><figcaption>AST query engine diagram</figcaption></figure><p>A compiled extension for Python is much faster when it can lazily build <code>PyObjects</code> only when necessary - keeping as much of the data compactly within its own language as possible.</p><p>‍</p></div></div>]]></description>
        </item>
    </channel>
</rss>