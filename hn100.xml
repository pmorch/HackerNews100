<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 09 Feb 2025 10:30:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Modern-Day Oracles or Bullshit Machines (118 pts)]]></title>
            <link>https://thebullshitmachines.com</link>
            <guid>42989320</guid>
            <pubDate>Sun, 09 Feb 2025 08:24:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thebullshitmachines.com">https://thebullshitmachines.com</a>, See on <a href="https://news.ycombinator.com/item?id=42989320">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="article" role="main">
      <header id="section-Title-2kXZCkIeDI" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsInRleHRGYWRlIjoibm9uZSIsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
        
        
      </header>
      <div data-scrollymoly-basis="true" data-testid="ENG-5457" id="section-EqRDrghv5N" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsInRleHRGYWRlIjoiYm90aCIsInRleHRCbHVyIjoiYm90aCIsImJhY2tncm91bmRCbHVyIjoiYm90aCIsImJhY2tncm91bmRHcmF5c2NhbGUiOiJvdXQiLCJoYXNFZmZlY3RzIjp0cnVlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6dHJ1ZSwiZW5jb2RlZCI6IiJ9">
                  <h2><span>MODERN-DAY </span><span>ORACLES  </span><br><span>or </span><span>BULLSHIT</span><span><strong> </strong>MACHINES?</span></h2>
                  <p><span>How to thrive in a ChatGPT world  </span></p>
                  
                  <h4><span>Developed by Carl T. Bergstrom and Jevin D. West</span></h4>
                </div>
      
      
      <div id="section-Effects-on-life-gXGw9X23fi" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
              <div>
                    <p>Technologists and publicists gush about how Large Language Models (LLMs) will revolutionize the way we work, learn, play, communicate, create, and connect to another. </p>
                    <p>They are right that artificial intelligence (AI) will affect nearly every aspect of our daily lives. </p>
                    <p>And they are right that by providing a way for people to talk with machines in ordinary language, LLMs constitute a dramatic step forward in making computing accessible to everyone. </p>
                    <p>Yet for all the good that AI systems will do, they will also saturate our information environment with bullshit at a scale we’ve never before encountered.</p>
                    
                  </div>
              <div>
                      <blockquote><span>I think it's going to be the most transformative technology humanity has ever created, potentially on par with or exceeding the invention of the printing press, electricity, and the internet.</span>
                        
                      </blockquote>
                    </div>
            </div>
      <div data-scrollymoly-basis="true" data-testid="ENG-5457" id="section-Course-goals-We6QHjJFqp" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
                  <p><span>For better or for worse, LLMs are here to stay. We all read content that they produce online, most of us interact with LLM chatbots, and many of us use them to produce content of our own.</span></p>
                  
                  <p>In a series of five- to ten-minute lessons, we will explain what these machines are, how they work, and how to thrive in a world where they are everywhere.</p>
                  
                  <p>You will learn when these systems can save you a lot of time and effort. You will learn when they are likely to steer you wrong. And you will discover how to see through the hype to tell the difference. <span><em>?</em></span></p>
                </div>
      <div id="section-O0UgCe5GaC" data-effects="eyJ0ZXh0UGVyTGluZSI6ZmFsc2UsImhhc0VmZmVjdHMiOmZhbHNlLCJuZWVkc0JhY2tncm91bmRDbG9uZSI6ZmFsc2UsImVuY29kZWQiOiIifQ==">
                    <p><strong>Notice of Rights. </strong>The materials provided on this website are freely accessible for personal self-study and for non-commercial educational use in K-12 schools, colleges, and universities. For any commercial or corporate use, please <a href="mailto:cbergst@uw.edu,jevinw@uw.edu">contact the authors</a> to discuss terms and obtain the necessary permissions. Redistribution of website content is prohibited without prior written consent from the authors. However, individual copies may be created to accommodate accessibility needs directly related to educational instruction. </p>
                    <p>Unless otherwise stated, all content is copyrighted © 2025 by the authors. All rights reserved.</p>
                  </div>
      
      
    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is software abstraction killing civilization? (2021) (162 pts)]]></title>
            <link>https://datagubbe.se/endofciv/</link>
            <guid>42986485</guid>
            <pubDate>Sat, 08 Feb 2025 21:49:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://datagubbe.se/endofciv/">https://datagubbe.se/endofciv/</a>, See on <a href="https://news.ycombinator.com/item?id=42986485">Hacker News</a></p>
Couldn't get https://datagubbe.se/endofciv/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Jacksonpollock.org (375 pts)]]></title>
            <link>https://jacksonpollock.org/</link>
            <guid>42986320</guid>
            <pubDate>Sat, 08 Feb 2025 21:22:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jacksonpollock.org/">https://jacksonpollock.org/</a>, See on <a href="https://news.ycombinator.com/item?id=42986320">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Tips for mathematical handwriting (2007) (230 pts)]]></title>
            <link>https://johnkerl.org/doc/ortho/ortho.html</link>
            <guid>42985427</guid>
            <pubDate>Sat, 08 Feb 2025 19:20:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://johnkerl.org/doc/ortho/ortho.html">https://johnkerl.org/doc/ortho/ortho.html</a>, See on <a href="https://news.ycombinator.com/item?id=42985427">Hacker News</a></p>
<div id="readability-page-1" class="page">

<center>


John Kerl
<br><tt>kerl.john.r@gmail.com</tt>
<br>Feb. 25, 2007
</center>

<!-- ================================================================ -->
<hr>


<p>Now that you’re majoring in one of the technical disciplines
(engineering, science, or math), you’re going to be spending a
significant amount of time communicating in writing with others.  You may find
that previously unimportant details, such as crossing your <i>z</i>’s,
now become essential — not only so that others can understand you, but
also so that you can avoid mistaking your own 2<sup><i>z</i></sup> for
<i>z</i><sup>2</sup> and so on.  This is especially important if your
handwriting (like mine!) is less than perfect.

</p><p>Before I continue, take a fresh look at our Roman alphabet, the digits, and
the Greek alphabet:

</p><center><img src="https://johnkerl.org/doc/ortho/texortho.jpg"></center>

<p>Notice that these mechanically typeset symbols are all clear and distinct
(except that lowercase omicron and most of the uppercase Greek letters look
like Roman letters — we don’t use these “duplicates”).

</p><p> When we write by hand, though, symbols can become ambiguous —
we’re not machines, and things get a little loopy when we hurry.  In
prose, surrounding letters can disambiguate a questionable letter — e.g.
you can guess that the fourth letter of <i>hou*e</i> has to be an <i>s</i>.
But in mathematical expressions we mix symbols from different alphabets, in
different orders, so context can’t assist us — and when we guess,
we often guess wrong.  So it now becomes very important that each letter be
clearly recognizable on its own merits.

</p><p>Here are samples, followed by the points I consider most important.

</p><center><img src="https://johnkerl.org/doc/ortho/jkortho.jpg"></center>

<p>
<b>Lowercase Roman letters:</b>
</p><ul>

<li>Always make the lowercase <i>l</i> cursive —
otherwise it looks like a 1.
Make sure it’s taller than an <i>e</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jkell.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk1.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jke.jpg">.
The lowercase <i>l</i> isn’t a good variable name to use (since it can
look like a 1), but lots of people use it and so you’ll be seeing more of
it.

</li><li>Make a point come out of the top of the <i>p</i>, to distinguish it from a
rho:
<img src="https://johnkerl.org/doc/ortho/letters/jkp.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkrho.jpg">.

</li><li>Put a stroke on the <i>q</i>, to avoid confusion with 9 — and not a loop, to avoid confusion with 8:
<img src="https://johnkerl.org/doc/ortho/letters/jkq.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk9.jpg">.

</li><li>Put a hook at the bottom of the <i>t</i> so it doesn’t look like a
plus sign:
<img src="https://johnkerl.org/doc/ortho/letters/jkt.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkplus.jpg">.

</li><li>Put a tail on the <i>u</i>, so it doesn’t look like a <i>v</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">.

</li><li>Keep the <i>v</i> and <i>w</i> pointy on the bottom so they don’t
look like nu and omega, respectively:
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkw.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkomega.jpg">.

</li><li>Put a hook on the <i>x</i> to distinguish it from a times sign:
<img src="https://johnkerl.org/doc/ortho/letters/jkx.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jktimes.jpg">.
In 3rd-semester calculus and onward you’ll be using the times sign quite
often.

</li><li>Cross your <i>z</i>’s.  Else they look like 2’s:
<img src="https://johnkerl.org/doc/ortho/letters/jkz.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk2.jpg">.

</li></ul>

<p>
<b>Uppercase Roman letters:</b>
</p>

<p>
<b>Digits:</b>
</p>

<p>
<b>Lowercase Greek letters:</b>
</p><ul>

<li>Many incoming freshmen aren’t accustomed to Greek letters, and
substitute alphas with <i>a</i>’s, and so on.  The fact is, though,
you’re going to be seeing more and more Greek letters as you go on.  Your
mathematical world is growing — accept it, and learn to use this
beautiful alphabet.

</li><li>Draw the alpha in one easy swoosh.  Be careful it doesn’t look like a
2:
<img src="https://johnkerl.org/doc/ortho/letters/jkalpha.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jk2.jpg">.

</li><li>Put a long tail on the eta and mu to keep them from looking like <i>n</i>
and cursive <i>u</i>, respectively:
<img src="https://johnkerl.org/doc/ortho/letters/jketa.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkmu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkn.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">.

</li><li>Put a hook on the top of the lambda:
<img src="https://johnkerl.org/doc/ortho/letters/jklambda.jpg">.

</li><li>The nu is a very bad letter — it looks like too many others!
Unfortunately, lots of people use it.  Include the hook on the left, and the
point at the bottom, to keep it from looking like a <i>u</i> or <i>v</i> or
upsilon:
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkupsilon.jpg">.

</li><li>We don’t use omicron — it’s identical to a Roman
<i>o</i>.

</li><li>The upsilon is just as bad as the nu.  Happily, not many people use it.
Make sure it doesn’t look like a <i>u</i>, <i>v</i>, or nu:
<img src="https://johnkerl.org/doc/ortho/letters/jkupsilon.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jku.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkv.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jknu.jpg">.

</li><li>Keep the slash in the phi vertical; keep the slash in the empty-set symbol
slanted:
<img src="https://johnkerl.org/doc/ortho/letters/jkphi.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkemptyset.jpg">.

</li><li>The lower-case chi is tricky, and unfortunately it gets used a lot.  Make
the upward slash far bigger than the downward slash to distinguish this letter
from lowercase <i>x</i> and uppercase <i>X</i>:
<img src="https://johnkerl.org/doc/ortho/letters/jkchi.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkx.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkcapX.jpg">.

</li><li>Keep the omega rounded to distinguish it from <i>w</i>.  This one gets used
a lot in physics courses.
<img src="https://johnkerl.org/doc/ortho/letters/jkomega.jpg">,
<img src="https://johnkerl.org/doc/ortho/letters/jkw.jpg">.

</li></ul>

<p>
<b>Uppercase Greek letters:</b>
</p>

<!-- ================================================================ -->
<!--
<hr>
<p>John Kerl
<br><tt>kerl at math dot arizona dot edu</tt>
<br>Feb. 25, 2007
-->

<!-- ================================================================ -->
<hr>
<p>

<a href="https://johnkerl.org/index.html"><i>← Back</i></a>


</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Writing a Simple Windows Driver in Rust (210 pts)]]></title>
            <link>https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/</link>
            <guid>42984457</guid>
            <pubDate>Sat, 08 Feb 2025 17:25:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/">https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/</a>, See on <a href="https://news.ycombinator.com/item?id=42984457">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
<p>The Rust language ecosystem is growing each day, its popularity increasing, and with good reason. It’s the only mainstream language that provides memory and concurrency safety at compile time, with a powerful and rich build system (cargo), and a growing number of packages (crates).</p>



<p>My daily driver is still C++, as most of my work is about low-level system and kernel programming, where the Windows C and COM APIs are easy to consume. Rust is a system programming language, however, which means it plays, or at least can play, in the same playground as C/C++. The main snag is the verbosity required when converting C types to Rust. This “verbosity” can be alleviated with appropriate wrappers and macros. I decided to try writing a simple WDM driver that is not useless – it’s a Rust version of the “Booster” driver I demonstrate in my book (<a href="https://www.amazon.com/Windows-Kernel-Programming-Pavel-Yosifovich/dp/1977593372" target="_blank" rel="noreferrer noopener">Windows Kernel Programming</a>), that allows changing the priority of any thread to any value.</p>



<h2>Getting Started</h2>



<p>To prepare for building drivers, consult <a href="https://github.com/microsoft/windows-drivers-rs" target="_blank" rel="noreferrer noopener">Windows Drivers-rs</a>, but basically you should have a WDK installation (either normal or the <a href="https://learn.microsoft.com/en-us/legal/windows/hardware/enterprise-wdk-license-2022" target="_blank" rel="noreferrer noopener">EWDK</a>). Also, the docs require installing <a href="https://llvm.org/" target="_blank" rel="noreferrer noopener">LLVM</a>, to gain access to the <a href="https://clang.llvm.org/" target="_blank" rel="noreferrer noopener">Clang </a>compiler. I am going to assume you have these installed if you’d like to try the following yourself.</p>



<p>We can start by creating a new Rust library project (as a driver is a technically a DLL loaded into kernel space):</p>





<p>We can open the booster folder in VS Code, and begin are coding. First, there are some preparations to do in order for actual code to compile and link successfully. We need a <strong>build.rs</strong> file to tell cargo to link statically to the CRT. Add a <strong>build.rs</strong> file to the root booster folder, with the following code:</p>


<div><pre title="">fn main() -&gt; Result&lt;(), wdk_build::ConfigError&gt; {
    std::env::set_var("CARGO_CFG_TARGET_FEATURE", "crt-static");
    wdk_build::configure_wdk_binary_build()
}
</pre></div>


<p>(Syntax highlighting is imperfect because the WordPress editor I use does not support syntax highlighting for Rust)</p>



<p>Next, we need to edit <strong>cargo.toml</strong> and add all kinds of dependencies. The following is the minimum I could get away with:</p>


<div><pre title="">[package]
name = "booster"
version = "0.1.0"
edition = "2021"

[package.metadata.wdk.driver-model]
driver-type = "WDM"

[lib]
crate-type = ["cdylib"]
test = false

[build-dependencies]
wdk-build = "0.3.0"

[dependencies]
wdk = "0.3.0"       
wdk-macros = "0.3.0"
wdk-alloc = "0.3.0" 
wdk-panic = "0.3.0" 
wdk-sys = "0.3.0"   

[features]
default = []
nightly = ["wdk/nightly", "wdk-sys/nightly"]

[profile.dev]
panic = "abort"
lto = true

[profile.release]
panic = "abort"
lto = true
</pre></div>


<p>The important parts are the WDK crates dependencies. It’s time to get to the actual code in <strong>lib.rs</strong>. </p>



<h2>The Code</h2>



<p>We start by removing the standard library, as it does not exist in the kernel:</p>





<p>Next, we’ll add a few <code>use</code> statements to make the code less verbose:</p>


<div><pre title="">use core::ffi::c_void;
use core::ptr::null_mut;
use alloc::vec::Vec;
use alloc::{slice, string::String};
use wdk::*;
use wdk_alloc::WdkAllocator;
use wdk_sys::ntddk::*;
use wdk_sys::*;
</pre></div>


<p>The <code>wdk_sys</code> crate provides the low level interop kernel functions. the <code>wdk</code> crate provides higher-level wrappers. <code>alloc::vec::Vec</code> is an interesting one. Since we can’t use the standard library, you would think the types like <code>std::vec::Vec&lt;&gt;</code> are not available, and technically that’s correct. However, <code>Vec</code> is actually defined in a lower level module named <code>alloc::vec</code>, that can be used outside the standard library. This works because the only requirement for <code>Vec</code> is to have a way to allocate and deallocate memory. Rust exposes this aspect through a global allocator object, that anyone can provide. Since we have no standard library, there is no global allocator, so one must be provided. Then, <code>Vec</code> (and <code>String</code>) can work normally:</p>


<div><pre title="">#[global_allocator]
static GLOBAL_ALLOCATOR: WdkAllocator = WdkAllocator;
</pre></div>


<p>This is the global allocator provided by the WDK crates, that use <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-exallocatepool2" target="_blank" rel="noreferrer noopener"><code>ExAllocatePool2</code> </a>and <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-exfreepool" target="_blank" rel="noreferrer noopener"><code>ExFreePool</code> </a>to manage allocations, just like would do manually.</p>



<p>Next, we add two <code>extern</code> crates to get the support for the allocator and a panic handler – another thing that must be provided since the standard library is not included. <strong>Cargo.toml</strong> has a setting to abort the driver (crash the system) if any code panics:</p>


<div><pre title="">extern crate wdk_panic;
extern crate alloc;
</pre></div>


<p>Now it’s time to write the actual code. We start with <code>DriverEntry</code>, the entry point to any Windows kernel driver:</p>


<div><pre title="">#[export_name = "DriverEntry"]
pub unsafe extern "system" fn driver_entry(
    driver: &amp;mut DRIVER_OBJECT,
    registry_path: PUNICODE_STRING,
) -&gt; NTSTATUS {
</pre></div>


<p>Those familiar with kernel drivers will recognize the function signature (kind of). The function name is <code>driver_entry</code> to conform to the snake_case Rust naming convention for functions, but since the linker looks for <code>DriverEntry</code>, we decorate the function with the <code>export_name</code> attribute. You could use <code>DriverEntry</code> and just ignore or disable the compiler’s warning, if you prefer.</p>



<p>We can use the familiar <code>println!</code> macro, that was reimplemented by calling <code>DbgPrint</code>, as you would if you were using C/C++. You can still call <code>DbgPrint</code>, mind you, but <code>println!</code> is just easier:</p>


<div><pre title="">println!("DriverEntry from Rust! {:p}", &amp;driver);
let registry_path = unicode_to_string(registry_path);
println!("Registry Path: {}", registry_path);
</pre></div>


<p>Unfortunately, it seems <code>println!</code> does not yet support a <code>UNICODE_STRING</code>, so we can write a function named <code>unicode_to_string</code> to convert a <code>UNICODE_STRING</code> to a normal Rust string:</p>


<div><pre title="">fn unicode_to_string(str: PCUNICODE_STRING) -&gt; String {
    String::from_utf16_lossy(unsafe {
        slice::from_raw_parts((*str).Buffer, (*str).Length as usize / 2)
    })
}
</pre></div>


<p>Back in <code>DriverEntry</code>, our next order of business is to create a device object with the name “\Device\Booster”:</p>


<div><pre title="">let mut dev = null_mut();
let mut dev_name = UNICODE_STRING::default();
string_to_ustring("\\Device\\Booster", &amp;mut dev_name);

let status = IoCreateDevice(
    driver,
    0,
    &amp;mut dev_name,
    FILE_DEVICE_UNKNOWN,
    0,
    0u8,
    &amp;mut dev,
);
</pre></div>


<p>The <code>string_to_ustring</code> function converts a Rust string to a <code>UNICODE_STRING</code>:</p>


<div><pre title="">fn string_to_ustring&lt;'a&gt;(s: &amp;str, uc: &amp;'a mut UNICODE_STRING) -&gt; &amp;'a mut UNICODE_STRING {
    let mut wstring: Vec&lt;_&gt; = s.encode_utf16().collect();
    uc.Length = wstring.len() as u16 * 2;
    uc.MaximumLength = wstring.len() as u16 * 2;
    uc.Buffer = wstring.as_mut_ptr();
    uc
}
</pre></div>


<p>This may look more complex than we would like, but think of this as a function that is written once, and then just used all over the place. In fact, maybe there is such a function already, and just didn’t look hard enough. But it will do for this driver.</p>



<p>If device creation fails, we return a failure status:</p>


<div><pre title="">if !nt_success(status) {
    println!("Error creating device 0x{:X}", status);
    return status;
}
</pre></div>


<p><code>nt_success</code> is similar to the <code>NT_SUCCESS</code> macro provided by the WDK headers.</p>



<p>Next, we’ll create a symbolic link so that a standard <code>CreateFile</code> call could open a handle to our device:</p>


<div><pre title="">let mut sym_name = UNICODE_STRING::default();
string_to_ustring("\\??\\Booster", &amp;mut sym_name);
let status = IoCreateSymbolicLink(&amp;mut sym_name, &amp;mut dev_name);
if !nt_success(status) {
    println!("Error creating symbolic link 0x{:X}", status);
    IoDeleteDevice(dev);
    return status;
}
</pre></div>


<p>All that’s left to do is initialize the device object with support for Buffered I/O (we’ll use <code>IRP_MJ_WRITE</code> for simplicity), set the driver unload routine, and the major functions we intend to support:</p>


<div><pre title="">    (*dev).Flags |= DO_BUFFERED_IO;

    driver.DriverUnload = Some(boost_unload);
    driver.MajorFunction[IRP_MJ_CREATE as usize] = Some(boost_create_close);
    driver.MajorFunction[IRP_MJ_CLOSE as usize] = Some(boost_create_close);
    driver.MajorFunction[IRP_MJ_WRITE as usize] = Some(boost_write);

    STATUS_SUCCESS
}
</pre></div>


<p>Note the use of the Rust <code>Option&lt;&gt;</code> type to indicate the presence of a callback.</p>



<p>The unload routine looks like this:</p>


<div><pre title="">unsafe extern "C" fn boost_unload(driver: *mut DRIVER_OBJECT) {
    let mut sym_name = UNICODE_STRING::default();
    string_to_ustring("\\??\\Booster", &amp;mut sym_name);
    let _ = IoDeleteSymbolicLink(&amp;mut sym_name);
    IoDeleteDevice((*driver).DeviceObject);
}
</pre></div>


<p>We just call <code>IoDeleteSymbolicLink</code> and <code>IoDeleteDevice</code>, just like a normal kernel driver would. </p>



<h2>Handling Requests</h2>



<p>We have three request types to handle – <code>IRP_MJ_CREATE</code>, <code>IRP_MJ_CLOSE</code>, and <code>IRP_MJ_WRITE</code>. Create and close are trivial – just complete the IRP successfully:</p>


<div><pre title="">unsafe extern "C" fn boost_create_close(_device: *mut DEVICE_OBJECT, irp: *mut IRP) -&gt; NTSTATUS {
    (*irp).IoStatus.__bindgen_anon_1.Status = STATUS_SUCCESS;
    (*irp).IoStatus.Information = 0;
    IofCompleteRequest(irp, 0);
    STATUS_SUCCESS
}
</pre></div>


<p>The <code>IoStatus</code> is an <code>IO_STATUS_BLOCK</code> but it’s defined with a <code>union</code> containing <code>Status</code> and <code>Pointer</code>. This seems to be incorrect, as <code>Information</code> should be in a <code>union</code> with <code>Pointer</code> (not <code>Status</code>). Anyway, the code accesses the <code>Status</code> member through the “auto generated” union, and it looks ugly. Definitely something to look into further. But it works.</p>



<p>The real interesting function is the <code>IRP_MJ_WRITE</code> handler, that does the actual thread priority change. First, we’ll declare a structure to represent the request to the driver:</p>


<div><pre title="">#[repr(C)]
struct ThreadData {
    pub thread_id: u32,
    pub priority: i32,
}
</pre></div>


<p>The use of <code>repr(C)</code> is important, to make sure the fields are laid out in memory just as they would with C/C++. This allows non-Rust clients to talk to the driver. In fact, I’ll test the driver with a C++ client I have that used the C++ version of the driver. The driver accepts the thread ID to change and the priority to use. Now we can start with <code>boost_write</code>:</p>


<div><pre title="">unsafe extern "C" fn boost_write(_device: *mut DEVICE_OBJECT, irp: *mut IRP) -&gt; NTSTATUS {
    let data = (*irp).AssociatedIrp.SystemBuffer as *const ThreadData;
</pre></div>


<p>First, we grab the data pointer from the <code>SystemBuffer</code> in the IRP, as we asked for Buffered I/O support. This is a kernel copy of the client’s buffer. Next, we’ll do some checks for errors:</p>


<div><pre title="">let status;
loop {
    if data == null_mut() {
        status = STATUS_INVALID_PARAMETER;
        break;
    }
    if (*data).priority &lt; 1 || (*data).priority &gt; 31 {
        status = STATUS_INVALID_PARAMETER;
        break;
    }
</pre></div>


<p>The <code>loop</code> statement creates an infinite block that can be exited with a <code>break</code>. Once we verified the priority is in range, it’s time to locate the thread object:</p>


<div><pre title="">let mut thread = null_mut();
status = PsLookupThreadByThreadId(((*data).thread_id) as *mut c_void, &amp;mut thread);
if !nt_success(status) {
    break;
}
</pre></div>


<p><code><a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-pslookupthreadbythreadid" target="_blank" rel="noreferrer noopener">PsLookupThreadByThreadId</a></code> is the one to use. If it fails, it means the thread ID probably does not exist, and we break. All that’s left to do is set the priority and complete the request with whatever status we have:</p>


<div><pre title="">        KeSetPriorityThread(thread, (*data).priority);
        ObfDereferenceObject(thread as *mut c_void);
        break;
    }
    (*irp).IoStatus.__bindgen_anon_1.Status = status;
    (*irp).IoStatus.Information = 0;
    IofCompleteRequest(irp, 0);
    status
}
</pre></div>


<p>That’s it!</p>



<p>The only remaining thing is to sign the driver. It seems that the crates support signing the driver if an INF or INX files are present, but this driver is not using an INF. So we need to sign it manually before deployment. The following can be used from the root folder of the project:</p>


<div><pre title="">signtool sign /n wdk /fd sha256 target\debug\booster.dll
</pre></div>


<p>The <code>/n wdk</code> uses a WDK test certificate typically created automatically by Visual Studio when building drivers. I just grab the first one in the store that starts with “wdk” and use it.</p>



<p>The silly part is the file extension – it’s a DLL and there currently is no way to change it automatically as part of cargo build. If using an INF/INX, the file extension does change to SYS. In any case, file extensions don’t really mean that much – we can rename it manually, or just leave it as DLL. </p>



<h2>Installing the Driver</h2>



<p>The resulting file can be installed in the “normal” way for a software driver, such as using the <strong>sc.exe</strong> tool (from an elevated command window), on a machine with test signing on. Then <code>sc start</code> can be used to load the driver into the system:</p>


<div><pre title="">sc.exe sc create booster type= kernel binPath= c:\path_to_driver_file
sc.exe start booster
</pre></div>


<h2>Testing the Driver</h2>



<p>I used an existing C++ application that talks to the driver and expects to pass the correct structure. It looks like this:</p>


<div><pre title="">#include &lt;Windows.h&gt;
#include &lt;stdio.h&gt;

struct ThreadData {
	int ThreadId;
	int Priority;
};

int main(int argc, const char* argv[]) {
	if (argc &lt; 3) {
		printf("Usage: boost &lt;tid&gt; &lt;priority&gt;\n");
		return 0;
	}

	int tid = atoi(argv[1]);
	int priority = atoi(argv[2]);

	HANDLE hDevice = CreateFile(L"\\\\.\\Booster",
		GENERIC_WRITE, 0, nullptr, OPEN_EXISTING, 0,
		nullptr);

	if (hDevice == INVALID_HANDLE_VALUE) {
		printf("Failed in CreateFile: %u\n", GetLastError());
		return 1;
	}

	ThreadData data;
	data.ThreadId = tid;
	data.Priority = priority;
	DWORD ret;
	if (WriteFile(hDevice, &amp;data, sizeof(data),
		&amp;ret, nullptr))
		printf("Success!!\n");
	else
		printf("Error (%u)\n", GetLastError());

	CloseHandle(hDevice);

	return 0;
}
</pre></div>


<p>Here is the result when changing a thread’s priority to 26 (ID 9408):</p>



<figure><img data-attachment-id="2919" data-permalink="https://scorpiosoftware.net/2025/02/08/writing-a-simple-driver-in-rust/image-41/" data-orig-file="https://scorpiosoftware.net/wp-content/uploads/2025/02/image.png" data-orig-size="976,579" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="image" data-image-description="" data-image-caption="" data-medium-file="https://scorpiosoftware.net/wp-content/uploads/2025/02/image.png?w=300" data-large-file="https://scorpiosoftware.net/wp-content/uploads/2025/02/image.png?w=660" width="976" height="579" src="https://scorpiosoftware.net/wp-content/uploads/2025/02/image.png?w=976" alt=""></figure>



<h2>Conclusion</h2>



<p>Writing kernel drivers in Rust is possible, and I’m sure the support for this will improve quickly. The WDK crates are at version 0.3, which means there is still a way to go. To get the most out of Rust in this space, safe wrappers should be created so that the code is less verbose, does not have <code>unsafe</code> blocks, and enjoys the benefits Rust can provide. Note, that I may have missed some wrappers in this simple implementation.</p>



<p>You can find a couple of more samples for KMDF Rust drivers <a href="https://github.com/microsoft/Windows-rust-driver-samples" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p>The code for this post can be found at <a href="https://github.com/zodiacon/Booster">https://github.com/zodiacon/Booster</a>.</p>




	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: FlashSpace – fast, open-source, macOS Spaces replacement (212 pts)]]></title>
            <link>https://github.com/wojciech-kulik/FlashSpace</link>
            <guid>42984420</guid>
            <pubDate>Sat, 08 Feb 2025 17:19:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/wojciech-kulik/FlashSpace">https://github.com/wojciech-kulik/FlashSpace</a>, See on <a href="https://news.ycombinator.com/item?id=42984420">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a href="https://github.com/wojciech-kulik/FlashSpace/releases"><img src="https://camo.githubusercontent.com/e6c6c47124a3c9f2cfff3a55803b80533c4271be3cd6ae50effacc5fb56baa26/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f776f6a63696563682d6b756c696b2f466c61736853706163653f636f6c6f723d384132424532" alt="GitHub Release" data-canonical-src="https://img.shields.io/github/v/release/wojciech-kulik/FlashSpace?color=8A2BE2"></a>
<a href="https://formulae.brew.sh/cask/flashspace" rel="nofollow"><img src="https://camo.githubusercontent.com/5b47e91f76e1b2557c38eb45c2b23890308e7e4a8522b311dcbda9323249969f/68747470733a2f2f696d672e736869656c64732e696f2f686f6d65627265772f6361736b2f762f666c6173687370616365" alt="Homebrew Cask Version" data-canonical-src="https://img.shields.io/homebrew/cask/v/flashspace"></a>
<a href="#"><img src="https://camo.githubusercontent.com/15209e50423be67a97aa21bbd132ffc55c2a5752fc43ad1f94e57dfb8b7e8f1f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61634f532d31342e302b2d73696c766572" alt="min macOS" data-canonical-src="https://img.shields.io/badge/macOS-14.0+-silver"></a>
<a href="https://github.com/wojciech-kulik/FlashSpace/actions/workflows/xcode-build-check.yml"><img src="https://camo.githubusercontent.com/3bcf4c0f8f2a61040df5a08d5710f9ff1b4bbab4bf480fffcb6fc3dad6cd9349/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f776f6a63696563682d6b756c696b2f466c61736853706163652f78636f64652d6275696c642d636865636b2e796d6c" alt="CI Status" data-canonical-src="https://img.shields.io/github/actions/workflow/status/wojciech-kulik/FlashSpace/xcode-build-check.yml"></a>
<a href="#"><img src="https://camo.githubusercontent.com/8b88167a0ff625ca5c105e93603034c9a72880fdafd173433db4382fedf73953/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f78636f64652d31362e322d626c7565" alt="Supported Xcode" data-canonical-src="https://img.shields.io/badge/xcode-16.2-blue"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">⚡ FlashSpace</h2><a id="user-content--flashspace" aria-label="Permalink: ⚡ FlashSpace" href="#-flashspace"></a></p>
<p dir="auto">FlashSpace is a blazingly-fast virtual workspace manager for macOS, designed to
enhance and replace native macOS Spaces. No more waiting for macOS animations.</p>
<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/3128467/410695368-36f4933d-3711-4acf-9171-9137073010d7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMDY5NTM2OC0zNmY0OTMzZC0zNzExLTRhY2YtOTE3MS05MTM3MDczMDEwZDcucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NjUwZWJjYzRmN2M4OTVkMjliNWY2NmY1NzMzYWY1MGFmYjRlY2M3MTY3ZjAyYmNjNDA4NmM3ODQ2MjE4ZjY4MiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.nKneogrFNUPyMHwb9-lDzBFZjD3Cqz0CuxwvLVtlN3Y"><img width="797" alt="FlashSpace" src="https://private-user-images.githubusercontent.com/3128467/410695368-36f4933d-3711-4acf-9171-9137073010d7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMDY5NTM2OC0zNmY0OTMzZC0zNzExLTRhY2YtOTE3MS05MTM3MDczMDEwZDcucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NjUwZWJjYzRmN2M4OTVkMjliNWY2NmY1NzMzYWY1MGFmYjRlY2M3MTY3ZjAyYmNjNDA4NmM3ODQ2MjE4ZjY4MiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.nKneogrFNUPyMHwb9-lDzBFZjD3Cqz0CuxwvLVtlN3Y"></a>
<p dir="auto"><h2 tabindex="-1" dir="auto">⚙️ Installation</h2><a id="user-content-️-installation" aria-label="Permalink: ⚙️ Installation" href="#️-installation"></a></p>
<p dir="auto"><strong>Requirements:</strong> macOS 14.0 or later.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Homebrew</h3><a id="user-content-homebrew" aria-label="Permalink: Homebrew" href="#homebrew"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Download Binary</h3><a id="user-content-download-binary" aria-label="Permalink: Download Binary" href="#download-binary"></a></p>
<p dir="auto">See: <a href="https://github.com/wojciech-kulik/FlashSpace/releases">Releases Page</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Build From Source</h3><a id="user-content-build-from-source" aria-label="Permalink: Build From Source" href="#build-from-source"></a></p>
<p dir="auto">See: <a href="#%EF%B8%8F-build-from-source">Build From Source</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🎥 Demo</h2><a id="user-content--demo" aria-label="Permalink: 🎥 Demo" href="#-demo"></a></p>
<p dir="auto">The video shows a sample configuration where I use 3 workspaces and switch
between them using hotkeys.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description FlashSpace.mp4">FlashSpace.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/3128467/411269408-03498386-7c3d-4d9e-8fbd-cd49dea36661.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMTI2OTQwOC0wMzQ5ODM4Ni03YzNkLTRkOWUtOGZiZC1jZDQ5ZGVhMzY2NjEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODc2MjZjMmI5MmMxOWJlZjBkZDUyZTI2NjViMTNhMDEyNDliMGM1OWU3OTkxYzMxZmUwMmIzMTYyMjc5Mjc5NyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.cw41Upce0DtEPZV0edTF_tlbUMdifjLn_bNHXVrlfJY" data-canonical-src="https://private-user-images.githubusercontent.com/3128467/411269408-03498386-7c3d-4d9e-8fbd-cd49dea36661.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMTI2OTQwOC0wMzQ5ODM4Ni03YzNkLTRkOWUtOGZiZC1jZDQ5ZGVhMzY2NjEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODc2MjZjMmI5MmMxOWJlZjBkZDUyZTI2NjViMTNhMDEyNDliMGM1OWU3OTkxYzMxZmUwMmIzMTYyMjc5Mjc5NyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.cw41Upce0DtEPZV0edTF_tlbUMdifjLn_bNHXVrlfJY" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">👉 How it works</h2><a id="user-content--how-it-works" aria-label="Permalink: 👉 How it works" href="#-how-it-works"></a></p>
<p dir="auto">FlashSpace allows to define virtual workspaces and assign apps to them. Each workspace is
also assigned to a specific display. When you switch to a workspace, the assigned apps are
automatically presented and all other apps from the assigned display are hidden.</p>
<p dir="auto">The app allows workspaces to be switched independently on each display.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">✨ Features</h2><a id="user-content--features" aria-label="Permalink: ✨ Features" href="#-features"></a></p>
<ul>
<li> Blazingly fast workspace switching</li>
<li> Multiple displays support</li>
<li> Activate workspace on app focus</li>
<li> Move apps between workspaces with a hotkey</li>
<li> Floating apps visible across all workspaces</li>
<li> Focus manager - set hotkeys to switch between apps quickly</li>
<li> Cursor manager - auto-center the cursor in the active window</li>
<li> Profiles - quickly switch between different configurations</li>
<li> Configurable Menu Bar icon &amp; text (per workspace)</li>
<li> <a href="https://github.com/FelixKratz/SketchyBar">SketchyBar</a> integration</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">⚖️ Project Values</h2><a id="user-content-️-project-values" aria-label="Permalink: ⚖️ Project Values" href="#️-project-values"></a></p>
<ul dir="auto">
<li><strong>Performance</strong> - The app should be as fast as possible.</li>
<li><strong>Simplicity</strong> - The app should be easy to use and configure.</li>
<li><strong>Reliability</strong> - The app should work without glitches and unexpected behavior.</li>
<li><strong>Invisible</strong> - The app should help, not disturb.</li>
<li><strong>UNIX Philosophy</strong> - The app should do one thing and do it well - manage workspaces.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">💬 How to use</h2><a id="user-content--how-to-use" aria-label="Permalink: 💬 How to use" href="#-how-to-use"></a></p>
<ol dir="auto">
<li>Create a workspace.</li>
<li>Assign apps to the workspace.</li>
<li>Assign the workspace to a display.</li>
<li>Define a hotkey to switch to the workspace.</li>
<li>Save the workspace.</li>
</ol>
<p dir="auto">Now you can switch to the workspace using the configured hotkey.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🪟 Focus Manager</h2><a id="user-content--focus-manager" aria-label="Permalink: 🪟 Focus Manager" href="#-focus-manager"></a></p>
<p dir="auto">FlashSpace enables fast switching of focus between windows. Use hotkeys to
shift focus in any desired direction. It also allows you to jump between
displays.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description FocusManager.mp4">FocusManager.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/3128467/411269421-9bc22b19-7cd7-48f8-a679-0adf4adc3aef.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMTI2OTQyMS05YmMyMmIxOS03Y2Q3LTQ4ZjgtYTY3OS0wYWRmNGFkYzNhZWYubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YWI1MWVhNzUxYTI5OGQyZWEzZDFhOGE5YTQxZGZmNzBmMjMxMGZhZGJjODBmNjc4OGQ4MmMzNjdlZDRiNmJiMyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.B8byTdySIp8drz6WdeKZxW05RKmiwaJOebw3XQXJt3E" data-canonical-src="https://private-user-images.githubusercontent.com/3128467/411269421-9bc22b19-7cd7-48f8-a679-0adf4adc3aef.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzkwNTQxMDMsIm5iZiI6MTczOTA1MzgwMywicGF0aCI6Ii8zMTI4NDY3LzQxMTI2OTQyMS05YmMyMmIxOS03Y2Q3LTQ4ZjgtYTY3OS0wYWRmNGFkYzNhZWYubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDIwOCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAyMDhUMjIzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YWI1MWVhNzUxYTI5OGQyZWEzZDFhOGE5YTQxZGZmNzBmMjMxMGZhZGJjODBmNjc4OGQ4MmMzNjdlZDRiNmJiMyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.B8byTdySIp8drz6WdeKZxW05RKmiwaJOebw3XQXJt3E" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">📝 Notes</h2><a id="user-content--notes" aria-label="Permalink: 📝 Notes" href="#-notes"></a></p>
<p dir="auto">FlashSpace doesn't manage windows, so if you switch to a workspace and call
another app that is not assigned to the workspace, it will be shown on top of
the workspace apps.</p>
<p dir="auto">I consider this as a desired behavior because it allows you to quickly access other
apps without glitches or switching between workspaces.</p>
<p dir="auto">This is a common issue with tiling window managers that they often cause glitches
when a small pop-up window is shown or some unexpected app is opened.</p>
<p dir="auto">If you want to hide the new app, you can simply use the hotkey again.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">🖥️ SketchyBar Integration</h2><a id="user-content-️-sketchybar-integration" aria-label="Permalink: 🖥️ SketchyBar Integration" href="#️-sketchybar-integration"></a></p>
<p dir="auto">FlashSpace can be integrated with <a href="https://github.com/FelixKratz/SketchyBar">SketchyBar</a> and other tools. The app runs a
configurable script when the workspace is changed.</p>
<p dir="auto">You can enable the integration in the app settings.</p>
<details>
  <summary>Configuration Example</summary>
<p dir="auto"><h3 tabindex="-1" dir="auto">Only Active Workspace</h3><a id="user-content-only-active-workspace" aria-label="Permalink: Only Active Workspace" href="#only-active-workspace"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto"><code>sketchybarrc</code></h5><a id="user-content-sketchybarrc" aria-label="Permalink: sketchybarrc" href="#sketchybarrc"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="sketchybar --add item flashspace left \
  --set flashspace \
  background.color=0x22ffffff \
  background.corner_radius=5 \
  label.padding_left=5 \
  label.padding_right=5 \
  script=&quot;$CONFIG_DIR/plugins/flashspace.sh&quot; \
  --add event flashspace_workspace_change \
  --subscribe flashspace flashspace_workspace_change"><pre>sketchybar --add item flashspace left \
  --set flashspace \
  background.color=0x22ffffff \
  background.corner_radius=5 \
  label.padding_left=5 \
  label.padding_right=5 \
  script=<span><span>"</span><span>$CONFIG_DIR</span>/plugins/flashspace.sh<span>"</span></span> \
  --add event flashspace_workspace_change \
  --subscribe flashspace flashspace_workspace_change</pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto"><code>plugins/flashspace.sh</code></h5><a id="user-content-pluginsflashspacesh" aria-label="Permalink: plugins/flashspace.sh" href="#pluginsflashspacesh"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="#!/bin/bash

sketchybar --set $NAME label=&quot;$WORKSPACE - $DISPLAY&quot;"><pre><span><span>#!</span>/bin/bash</span>

sketchybar --set <span>$NAME</span> label=<span><span>"</span><span>$WORKSPACE</span> - <span>$DISPLAY</span><span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">All Workspaces</h3><a id="user-content-all-workspaces" aria-label="Permalink: All Workspaces" href="#all-workspaces"></a></p>
<p dir="auto"><h5 tabindex="-1" dir="auto"><code>sketchybarrc</code></h5><a id="user-content-sketchybarrc-1" aria-label="Permalink: sketchybarrc" href="#sketchybarrc-1"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="sketchybar --add event flashspace_workspace_change

SID=1
SELECTED_PROFILE_ID=$(jq -r &quot;.selectedProfileId&quot; ~/.config/flashspace/profiles.json)
WORKSPACES=$(jq -r --arg id &quot;$SELECTED_PROFILE_ID&quot; 'first(.profiles[] | select(.id == $id)) | .workspaces[].name' ~/.config/flashspace/profiles.json)

for workspace in $WORKSPACES; do
  sketchybar --add item flashspace.$SID left \
    --subscribe flashspace.$SID flashspace_workspace_change \
    --set flashspace.$SID \
    background.color=0x22ffffff \
    background.corner_radius=5 \
    background.padding_left=5 \
    label.padding_left=5 \
    label.padding_right=5 \
    label=&quot;$workspace&quot; \
    script=&quot;$CONFIG_DIR/plugins/flashspace.sh $workspace&quot;

  SID=$((SID + 1))
done"><pre>sketchybar --add event flashspace_workspace_change

SID=1
SELECTED_PROFILE_ID=<span><span>$(</span>jq -r <span><span>"</span>.selectedProfileId<span>"</span></span> <span>~</span>/.config/flashspace/profiles.json<span>)</span></span>
WORKSPACES=<span><span>$(</span>jq -r --arg id <span><span>"</span><span>$SELECTED_PROFILE_ID</span><span>"</span></span> <span><span>'</span>first(.profiles[] | select(.id == $id)) | .workspaces[].name<span>'</span></span> <span>~</span>/.config/flashspace/profiles.json<span>)</span></span>

<span>for</span> <span>workspace</span> <span>in</span> <span>$WORKSPACES</span><span>;</span> <span>do</span>
  sketchybar --add item flashspace.<span>$SID</span> left \
    --subscribe flashspace.<span>$SID</span> flashspace_workspace_change \
    --set flashspace.<span>$SID</span> \
    background.color=0x22ffffff \
    background.corner_radius=5 \
    background.padding_left=5 \
    label.padding_left=5 \
    label.padding_right=5 \
    label=<span><span>"</span><span>$workspace</span><span>"</span></span> \
    script=<span><span>"</span><span>$CONFIG_DIR</span>/plugins/flashspace.sh <span>$workspace</span><span>"</span></span>

  SID=<span><span>$((</span>SID <span>+</span> <span>1</span><span>))</span></span>
<span>done</span></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto"><code>plugins/flashspace.sh</code></h5><a id="user-content-pluginsflashspacesh-1" aria-label="Permalink: plugins/flashspace.sh" href="#pluginsflashspacesh-1"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="#!/bin/bash

if [ &quot;$1&quot; = &quot;$WORKSPACE&quot; ]; then
  sketchybar --set $NAME label.color=0xffff0000
else
  sketchybar --set $NAME label.color=0xffffffff
fi"><pre><span><span>#!</span>/bin/bash</span>

<span>if</span> [ <span><span>"</span><span>$1</span><span>"</span></span> <span>=</span> <span><span>"</span><span>$WORKSPACE</span><span>"</span></span> ]<span>;</span> <span>then</span>
  sketchybar --set <span>$NAME</span> label.color=0xffff0000
<span>else</span>
  sketchybar --set <span>$NAME</span> label.color=0xffffffff
<span>fi</span></pre></div>
</details>
<p dir="auto"><h2 tabindex="-1" dir="auto">🛠️ Build From Source</h2><a id="user-content-️-build-from-source" aria-label="Permalink: 🛠️ Build From Source" href="#️-build-from-source"></a></p>
<p dir="auto">FlashSpace uses <a href="https://github.com/yonaskolb/XcodeGen">XcodeGen</a> to generate the Xcode project from the <code>project.yml</code>
file.</p>
<ol dir="auto">
<li>Clone the repository.</li>
<li>Navigate to the project directory.</li>
<li>Run <code>brew bundle</code> to install dependencies.</li>
<li>Run <code>xcodegen generate</code>.</li>
<li>Open <code>FlashSpace.xcodeproj</code> in Xcode.</li>
<li>Click on the <code>FlashSpace</code> target, click on the <code>Signing &amp; Capabilities</code> tab,
and select your team.</li>
<li>Build &amp; run the app.</li>
</ol>
<p dir="auto">Remember to run <code>xcodegen generate</code> every time you change branch or pull changes.</p>
<p dir="auto">If you want to generate the project with configured signing, you can run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="XCODE_DEVELOPMENT_TEAM=YOUR_TEAM_ID xcodegen generate"><pre>XCODE_DEVELOPMENT_TEAM=YOUR_TEAM_ID xcodegen generate</pre></div>
<p dir="auto">You can also set this variable globally in your shell.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">💛&nbsp;&nbsp;Sponsors</h2><a id="user-content-sponsors" aria-label="Permalink: 💛&nbsp;&nbsp;Sponsors" href="#sponsors"></a></p>
<p dir="auto">Big thanks to all the sponsors who support this project 🍻!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Monthly Sponsors</h3><a id="user-content-monthly-sponsors" aria-label="Permalink: Monthly Sponsors" href="#monthly-sponsors"></a></p>
<p dir="auto"><a href="https://github.com/bjrmatos"><img src="https://avatars.githubusercontent.com/u/4262050" width="40" height="40" alt="@bjrmatos" title="bjrmatos"></a>
<a href="https://github.com/notlus"><img src="https://avatars.githubusercontent.com/u/828989" width="40" height="40" alt="@notlus" title="notlus"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">One Time Sponsors</h3><a id="user-content-one-time-sponsors" aria-label="Permalink: One Time Sponsors" href="#one-time-sponsors"></a></p>
<p dir="auto"><a href="https://github.com/danscheer"><img src="https://avatars.githubusercontent.com/u/56642865" width="40" height="40" alt="@danscheer" title="danscheer"></a></p>

</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Carbon is not a programming language (sort of) (143 pts)]]></title>
            <link>https://herecomesthemoon.net/2025/02/carbon-is-not-a-language/</link>
            <guid>42983733</guid>
            <pubDate>Sat, 08 Feb 2025 15:51:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://herecomesthemoon.net/2025/02/carbon-is-not-a-language/">https://herecomesthemoon.net/2025/02/carbon-is-not-a-language/</a>, See on <a href="https://news.ycombinator.com/item?id=42983733">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <article>
        <div id="content">
            <div>
              <figure data-imgstate="dither">
                <img alt="A rat. For reasons. The subtitle is a quote from Bjarne Stroustrup. Suffice to say, he was not thinking of Carbon when he uttered these words. At least since this quote is already thirty (30!!!) years old." data-dither="/2025/02/carbon-is-not-a-language/images/dithers/carbon-rat_dithered.png" data-original="https://herecomesthemoon.net/2025/02/carbon-is-not-a-language/images/carbon-rat_hu2175167256744885269.webp" loading="lazy" src="https://herecomesthemoon.net/2025/02/carbon-is-not-a-language/images/dithers/carbon-rat_dithered.png">
                <div>
                  <figcaption>
                    <span>
                      A rat. For reasons. The subtitle is a quote from Bjarne Stroustrup. Suffice to say, he was not
                      thinking of Carbon when he uttered these words. At least since this quote is already thirty
                      (30!!!) years old.
                    </span>
                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                      <rect height="24.28" width="24.28" x="13.51" y="13.58"></rect>
                      <rect height="24.28" width="24.28" x="37.93" y="37.86"></rect>
                      <rect height="24.28" width="24.28" x="62.21" y="13.58"></rect>
                      <rect height="24.28" width="24.28" x="13.51" y="62.14"></rect>
                      <rect height="24.28" width="24.28" x="62.21" y="62.14"></rect>
                    </svg>
                    <p><span> Toggle original/dithered image </span>
                    </p>
                  </figcaption>
                </div>
              </figure>
            </div>
            <p>
              In case you’ve not heard of it, <strong>Carbon</strong> is Google’s experimental
              <a href="https://github.com/carbon-language/carbon-lang" target="_blank">open-source</a> “C++-successor
              language”. As a very rough first approximation, think Objective-C/Swift, Java/Kotlin, C/C++, C++/Carbon.
              It is also frequently mentioned in the same breath as Herb Sutter’s Cppfront and Sean Baxter’s Circle (and
              Rust, surprise surprise).
            </p>
            <p>
              Like with any ‘successor language’, the overall goal includes (at the bare minimum) near-seamless
              interoperability, as well as <em>significant</em> improvements over the original language.<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup>
              (Otherwise it can hardly be called a successor, duh.)
            </p>
            <p>
              If you’ve clicked on the article, you’re probably waiting for me to admit that I’m lying, and to tell you
              that (in fact) Carbon <em>is</em> a programming language.
            </p>
            <p>
              And yes, it’s true! Carbon is a programming language. (Or rather, it’s <em>aspiring</em> to be a
              programming language. Carbon is an experimental project and hasn’t hit its 0.1 release milestone yet. The
              Carbon developers are very transparent about this.)
            </p>
            <p>
              But in my humble opinion, thinking of Carbon as a ‘programming language’ is kind of missing the point. Let
              me tell you how I think about Carbon, and why I think that it’s more interesting than most people give it
              credit for:
            </p>
            <blockquote>
              <p>
                Carbon is a concentrated experimental effort to develop tooling that will facilitate automated
                large-scale long-term migrations of existing C++ code to a modern, well-annotated programming language
                with a modern, transparent process of evolution and governance model.
              </p>
            </blockquote>
            <p>
              The entirety of Carbon (the language, as well as the project) is built around making this goal possible.
              (Disclaimer, I don’t speak for Carbon, take my words with a grain of salt.)
            </p>
            <h2 id="why">Why?</h2>
            <p>In this post, I want to convince you of the following points:</p>
            <ol>
              <li>
                Carbon is a project to investigate the possibility of a large-scale reduction of C++ technical debt via
                automated code migration.<sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup>
              </li>
              <li>
                Many so-called ‘successor languages’ are <em>nothing like this</em>. They don’t make
                <em>automated code migration</em> an explicit goal, and generally build a layer of abstraction on top of
                or rely on their host language.
              </li>
              <li>
                All of this is downstream of Google’s disagreements with the C++ Standard Committee. In fact, while all
                of this is about reducing technical debt, it’s also about reducing the organizational costs involved in
                having to coordinate migrations and language evolution with the committee.
              </li>
              <li>Developing a new programming language is probably necessary to achieve the goals of the project.</li>
            </ol>
            <p>
              I’d like to bring special attention to the point about governance: This isn’t just a technical issue. It’s
              a governance issue. It’s a “We just straight-up disagree on the future direction of the C++ programming
              language.” sort of issue. I already went over these cultural disagreements in
              <a href="https://herecomesthemoon.net/2024/11/two-factions-of-cpp/" target="_blank">a previous post</a>.
            </p>
            <p>
              (The astute reader will note that you can evolve and govern your own programming language however you
              want, without needing to deal with WG21 (aka the C++ Standard Committee, aka the authority that decides
              what C++ <em>is</em><sup id="fnref:3"><a href="#fn:3" role="doc-noteref">3</a></sup>.))
            </p>
            <p>
              At this point I’d <em>love</em> to reach for the Herb Sutter “We must minimize the need to change existing
              code.” quote<sup id="fnref:4"><a href="#fn:4" role="doc-noteref">4</a></sup> again,
              but I’ll instead just state the obvious:
            </p>
            <p>
              A large-scale migration to a different programming language is <em>the opposite</em> paradigm. As far as
              changes to existing code go, it’s uncompromising. It’s an approach that’s only going to work for a subset
              of people, and in fact,
              <a href="https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#legacy-compiled-libraries-without-source-code-or-ability-to-rebuild" target="_blank">Carbon’s goal document</a>
              lists “We consider it a non-goal to support legacy code for which the source code is no longer available”.
            </p>
            <p>
              In other words, the language is not for everyone. That’s fine! I am still very interested in it. I care
              about Carbon since I believe that it’s trying to solve the hardest problem C++ is currently facing.
            </p>
            <p>
              This isn’t any <em>single</em> technical issue (there are many, many of those), no, and it’s not even a
              broad concern such as memory safety.
            </p>
            <p>
              It’s the problem of C++ slowly calcifying and struggling to modernize. It’s about ABI, about dozens of
              tools but no agreed upon standards, and it’s about backwards compatibility. It’s about allowing existing
              C++ code to <em>evolve</em>, modernize and change, in spite of decades of technical debt, multiple
              implementations, and many different users with different expectations and requirements.
            </p>
            <p>This is, in other words, an <em>incredibly hard problem</em>, and a <em>long-term project</em>.</p>
            <p>
              If you believe that certain multi-million line C++ codebases are still going to exist in twenty years,
              <em>then you should understand the business case for Carbon</em>.
            </p>
            <h3 id="a-short-lesson-in-history">A short lesson in history</h3>
            <p>
              Let’s briefly summarize the backstory for those who haven’t kept track. You could (very roughly) say that
              Google is developing Carbon due to conflicts with WG21, and disagreements about the future of the C++
              language.
            </p>
            <p>
              What matters is that Google contributed to WG21 for many years, and that it has a vested interest in the
              future of the language, due to owning many, <em>many</em> million lines of C++ code. It’s hard to
              overstate how critical C++ is for Google’s infrastructure, and for modern technology in general.
            </p>
            <p>
              The short summary is that Google’s developers (not just Google’s, mind you) disagreed with other parts of
              the committee about the
              <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2137r0.html" target="_blank">future direction of the C++ language</a>. There are a lot of reasons for this, and
              <a href="https://cor3ntin.github.io/posts/abi/" target="_blank">a lot of ink</a> has been spilled on the
              topic. Eventually, after trying to work with WG21 for many years, Google basically threw in the towel.
              (You cannot blame them. They tried hard, and the WG21 process is notoriously slow and frustrating.)
            </p>
            <p>
              At this point, a lot of people might think that the core disagreement between Google and WG21 was about
              ‘memory safety’, or something like that.
            </p>
            <p>It wasn’t!</p>
            <p>
              The current memory safety hype is a pretty big deal for C++, but the ball was already rolling several
              years ago. All of this started with concerns about C++’s complexity<sup id="fnref:5"><a href="#fn:5" role="doc-noteref">5</a></sup>
              and <em>performance</em>.<sup id="fnref:6"><a href="#fn:6" role="doc-noteref">6</a></sup>
              It turns out that fixing certain issues would require backwards incompatible changes (bad!). Coordinating
              this across the entire C++ ecosystem would be more or less impossible.
            </p>
            <p>
              I’ll not get into the details and instead point at Chandler Carruth’s
              <a href="https://youtu.be/rHIkrotSwcc?t=1599" target="_blank">‘There are no zero-cost abstractions’</a>
              for an example: It pins down how first of all, <code>std::unique_ptr</code> has a runtime overhead, and
              second of all, how fixing this would require an ABI-break and a language change.
            </p>
            <p>
              (That doesn’t mean Google doesn’t care about memory safety, of course. They do. But memory safety isn’t
              what started the whole conflict, even though it’s currently carrying the torch. That’s why memory safety
              is still relevant to all of this, especially since making C++ memory safe without compromising the vision
              of the standard committee looks more or less impossible.)
            </p>
            <h2 id="migration--language-evolution">Migration &amp; Language Evolution</h2>
            <p>
              First of all, that Carbon has <em>automated code migration</em> as one of its goals should be clear. The
              Carbon people are
              <a href="https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#interoperability-with-and-migration-from-existing-c-code" target="_blank">very explicit about this</a>. It’s also a common theme in
              <a href="https://youtu.be/omrY53kbVoA?t=634" target="_blank">their talks</a>.
            </p>
            <p>
              This is, first and foremost, about moving <em>away</em> from the “We mustn’t break existing code, so we
              had to squeeze in this new feature/syntax in some awkward way <em>somehow</em>.” approach to language
              evolution. (<code>co_await</code> and the (proposed) reflection operator (<code>^^</code>) are sending
              their regards.<sup id="fnref:7"><a href="#fn:7" role="doc-noteref">7</a></sup>)
            </p>
            <p>
              This approach to language evolution kind of sucks. It’s not like the committee doesn’t
              <em>understand</em> the problem, or doesn’t <em>want</em> to evolve the language. The committee is not
              evil, and it’s not your enemy. C++ is just incredibly hard to evolve for all sorts of reasons, which would
              honestly justify an article on their own (ABI, multiple implementations and the committee process, no
              unified ecosystem, no editions or epochs system, no unified migration tooling, widespread dynamic linking,
              etc.)
            </p>
            <p>Carbon’s goal is to move away from that.</p>
            <p>
              How? Via automated tooling, a well-defined process of language evolution with clear guarantees, etc.
              Carbon is still highly experimental, so the details are still WIP. If I had to guess, I’d say they’re
              planning to follow in the footsteps of other modern languages. As an example, consider how Rust manages:
            </p>
            <ul>
              <li>
                Have a new ’edition’ every three years or so. Each edition is allowed to make certain breaking changes,
                but modules from separate editions can be compiled and linked together.
              </li>
              <li>
                Ship automated migration tooling with the language, which allows an automatic migration of code to the
                new edition whenever possible.
              </li>
              <li>
                If you want to eg. introduce a new keyword, you <em>reserve</em> it one edition ahead of time.
                <a href="https://doc.rust-lang.org/book/appendix-01-keywords.html#raw-identifiers" target="_blank">Raw Identifier syntax</a>
                allows migration and use of old code that still uses this keyword as an identifier.
              </li>
            </ul>
            <p>In contrast to this, I don’t think there’s any feasible roadmap to get C++ to this state.</p>
            <p>It’s only possible with an ecosystem split, and that’s exactly the point.</p>
            <p>
              Let me reiterate this. If there’s one thing you take from this article, it’s this here: The
              <em>point of Carbon</em> is to make it possible to take existing C++ code and to put it onto a path
              towards a modern, well-defined process for future evolution and changes.
            </p>
            <p>
              This is the point. If you want to be cynical, it’s about cutting the dependency on the standard committee,
              and it’s about allowing any forwards-looking, backwards-incompatible changes <em>at all</em>, without
              having to worry about someone else’s ancient binaries from the 80s.
            </p>
            <h2 id="c-c-cpp2">C, C++, Cpp2</h2>
            <p>
              I just want to make clear that I believe that Carbon is radically different from
              <a href="https://hsutter.github.io/cppfront/" target="_blank">Cpp2</a> (ie. Herb Sutter’s experimental
              project to evolve C++).
            </p>
            <p>
              The major difference is that Cpp2 tries to leverage the existing C++ language to its full extent, while
              Carbon tries to minimize its dependency on C++ wherever possible.
            </p>
            <p>
              Cpp2 takes the same approach C++ originally did: It transpiles its own code to the host language, and is
              thus deeply and intrinsically linked to it. It reuses the C++ standard library with all of its problems,
              it aims to maintain the C++ ecosystem instead of splitting it.
            </p>
            <p>
              Perhaps most importantly, Cpp2 also cannot go <em>lower</em> than C++: It cannot directly interface with
              the compiler, since it’s written to be used by “any standard-compliant C++20 compiler”.
            </p>
            <p>
              It should be obvious that it’s basically impossible for Cpp2 to make meaningful reductions to C++’s
              technical debt. Yes, it can be “C++, except with better defaults and syntax.”, but that’s all it can
              feasibly be as long as full backwards compatibility is an explicit goal. Reducing C++’s technical debt on
              a deeper level is <em>completely out of scope</em> for Cpp2.
            </p>
            <p>
              It <em>can</em> reduce the number of ways there are to initialize objects by simplifying syntax. It
              <em>cannot</em> make any changes that would require an ABI-break, it cannot add null-safety to the
              language (eg. <code>unique_ptr</code> can still be null, <code>variant</code> can still be valueless), and
              it can’t prevent your code from blowing up in exciting ways due to lifetime issues.<sup id="fnref:8"><a href="#fn:8" role="doc-noteref">8</a></sup>
              Carbon has the advantage that it <em>can</em> make these changes. (eg. Carbon is planning to move away
              from exceptions, in favor of treating errors as values.)
            </p>
            <p>
              Just to be clear, this is fine! I am not saying Cpp2 is bad, and I’m curious to see how the project
              develops. I am just highlighting that Carbon and Cpp2 are <em>completely different projects</em> with
              completely different scopes and goals.
            </p>
            <p>
              It is written by Herb Sutter, someone who very clearly <em>loves</em> C++ as it is, and who wants to make
              it easier to use. It’s about having a new syntax, and making it <em>trivial</em> to apply best practices
              to your C++ code.
            </p>
            <p>
              This is a great idea, and a much less invasive proposal than Carbon. Carbon isn’t that. Carbon is about
              <em>reworking the language from the ground up</em>. It’s about building a <em>new</em> language that can
              support almost all of the same semantics, but is still critically different. It’s about reworking the
              fundamentals, and building stronger abstractions.
            </p>
            <p>
              So in short, Cpp2 works <em>with</em> C++, and Carbon is trying to <em>recreate</em> a better C++ from
              scratch, while cutting its dependency on C++ almost completely.
            </p>
            <h2 id="technical-feasibility">Technical feasibility</h2>
            <p>
              Is Carbon feasible? I’ll be honest, I have no clue. C++ code is <em>really complicated</em><sup id="fnref:9"><a href="#fn:9" role="doc-noteref">9</a></sup> and this project is
              (more or less) unprecedented. (Which is, again, why I am interested in it.)
            </p>
            <p>The reasons why I believe it <em>might</em> be technically feasible at all are simple:</p>
            <ol>
              <li>
                Carbon doesn’t attempt to do the impossible: The goal is a tool-assisted migration of idiomatic code,
                not a fully automated migration of <em>all</em> code. (What does ‘idiomatic’ mean? Who knows. Probably
                something like ‘well-annotated and easy to handle for static analyzers’. Figuring out how to draw the
                boundary of which code can be migrated is part of the project.)
              </li>
              <li>
                Carbon is capable of leveraging its underlying tooling to do a <em>lot</em> of the hard work. For
                example, resolving C++ templates and function calls is handled by Clang and LLVM. This should not be
                much of a surprise. Clang can be used as a library, and this is exactly what you’d expect it to excel
                at. (Swift is
                <a href="https://www.swift.org/documentation/cxx-interop/status/" target="_blank">already doing this for its C++ interop</a>.)
              </li>
              <li>
                Carbon already demonstrated that its chosen abstractions are capable of supporting some pretty “fun” C++
                features.
              </li>
            </ol>
            <p>Let me quickly substantiate some of that.</p>
            <h3 id="testing">Testing</h3>
            <p>
              So, here’s the thing. Carbon can
              <em>convert your C++ to Carbon and then run it against the old test suite</em>. (Or that’s the plan, at
              least.)
            </p>
            <p>(You do have a test suite, right?)</p>
            <p>
              If the code compiles and all tests pass, this should give you confidence in the resulting code
              proportional to your confidence in your own test suite. (This is especially helpful for changes
              <em>past</em> the initial automated migration, even if it’s just clean-up work.)
            </p>
            <p>This approach is <em>really nice</em> for all sorts of reasons.</p>
            <p>
              First of all, it means that Carbon can leverage
              <em>existing C++ test suites to test its own migration and interop capabilities</em>. This is great.
            </p>
            <p>
              Second of all, it puts <em>some</em> burden on the user and sets a minimal bar for what Carbon means with
              ‘migration of idiomatic C++’: You should <em>probably</em> have some tests in your code. If you critically
              depend on something, then you should have a test for it.
            </p>
            <h3 id="generalization-and-unification-of-c-features">Generalization and unification of C++ features</h3>
            <p>
              So.
              <a href="https://en.cppreference.com/w/cpp/language/operator_member_access" target="_blank">Member access operators</a>. This example is shamelessly lifted from
              <a href="https://youtu.be/8SGMy9ENGz8?t=1862" target="_blank">‘How Designing Carbon C++ Interop Taught me About C++ Variadics &amp; Bound Members’</a>:
            </p>
            <div>
              <pre tabindex="0"><code data-lang="cpp"><span><span><span>#include</span> <span>&lt;string&gt;</span><span>
</span></span></span><span><span><span></span>
</span></span><span><span><span>class</span> <span>Foo</span> {
</span></span><span><span>  <span>public</span><span>:</span> std<span>::</span>string a;
</span></span><span><span>};
</span></span><span><span>
</span></span><span><span><span>int</span> <span>main</span>() {
</span></span><span><span>  std<span>::</span>string Foo<span>::*</span> pm <span>=</span> <span>&amp;</span>Foo<span>::</span>a; <span>// defines a "pointer" to the member of Foo
</span></span></span><span><span><span></span>
</span></span><span><span>  Foo foo{};                       <span>// define foo of type Foo
</span></span></span><span><span><span></span>
</span></span><span><span>  std<span>::</span>string _ <span>=</span> foo.<span>*</span>pm;         <span>// access field a of foo
</span></span></span><span><span><span></span>}
</span></span></code></pre>
            </div>
            <p>
              If you have no idea what you’re looking at: This is legal C++. Calling <code>pm</code> a ‘pointer’ is a
              stretch, in practice it is just an <em>offset</em> relative to the location of an object of this class in
              memory.
            </p>
            <p>
              Two funfacts: First, this can also be used to refer to methods. Second, this value can be null, and it’s
              null-value is <code>-1</code>, since <code>0</code> would point to an actual field.
            </p>
            <p>Fun, isn’t it?</p>
            <p>
              When I see a feature like this, my first question would be whether Carbon is even capable of
              <em>modeling</em> this specific type of behavior, and it turns out that, yes, they have thought about
              this.
            </p>
            <p>
              Carbon is building <em>literally everything</em> on top of <code>interfaces</code> (which can broadly be
              understood as C++0x Concepts or Rust traits).
            </p>
            <p>
              There’s a simple reason for that: Carbon wants to support <em>definition-site</em> checked generics
              (roughly, you’ll know that a generic function can be instantiated without having to look into the body of
              the function. This is not the case for templates.) As a consequence, <em>every possible thing</em> which
              you can “do” with a value needs to be implemented as an interface, so that you can specify that an
              incoming value fulfills this constraint.
            </p>
            <p>
              Consequently, <em>member access pointers</em> are implemented via a so-called
              <code>BindToValue</code> interface, which (as far as I can tell) generalizes expressions of the form
              <code>x.y</code>, whether <code>y</code> is a field, a static member function, a method, a member access
              pointer, or who knows what else. Any <code>y</code> which implements <code>BindToValue(X)</code> (where
              <code>X</code> is the class of <code>x</code>) can be used as <code>x.y</code>.
            </p>
            <p>
              The pattern of unifying abstractions as interfaces gets used a lot: It turns out that deep within Carbon,
              function calls are implemented as a synthesized type which implements some <code>Call</code> interface.
              This is used to unify functions, methods, lambdas, etc. Every single thing in Carbon which you can “call”
              is just some value implementing the <code>Call</code> interface.
            </p>
            <p>
              Sorry, I’m basically just rehashing parts of Chandler Carruth’s (highly technical) talk here. For the full
              picture, please just go and watch it. He’s a great speaker, and I don’t trust myself to get every
              technical detail right.
            </p>
            <p>
              The point is, if you’re wondering what the Carbon people are working on, then it’s this kind of stuff.
              They’re building <em>foundations</em> which are general enough to to make all sorts of gnarly C++
              semantics (eg. member access pointers) work, but have a <em>much</em> simpler underlying model. (eg. it
              unifies everything that can be called, <em>and</em> gives you the ‘concept’/interface for free).
            </p>
            <p>
              Is this going to work for the rest of the language? Who knows! C++ is complicated, probably too
              complicated to manage. That’s the whole reason why Carbon even exists.
            </p>
            <h3 id="digression-why-not-rust-why-not-c">Digression: Why not Rust™? Why not C++?</h3>
            <p>
              Rust is really just too different for an automated conversion of C++ code to Rust code to be feasible,
              it’s as simple as that. I even
              <a href="https://herecomesthemoon.net/2025/01/type-inference-in-rust-and-cpp/" target="_blank">wrote an article</a>
              getting into the differences in type inference alone.
            </p>
            <p>
              You have no class inheritance, no templates, no specialization, no ad-hoc function overloads, no implicit
              conversions, and there’s still the whole deal with the borrow checker. Any conversion of modern
              general-purpose C++ code to Rust basically amounts to a rewrite, which is just not something you can do
              with classic automation tooling.
            </p>
            <p>
              Carbon has the luxury of being able to support both templates <em>and</em> checked generics (ie. something
              like Rust traits or C++0x concepts), and a way to migrate between them.
            </p>
            <p>
              As for a C++-to-more-modern-C++-migration, it just doesn’t solve the question of language evolution.
              You’re still heavily limited by what you can do, unless you also commit to a proper fork of C++ and
              possibly Clang.
            </p>
            <p>
              Which…might be viable, but makes it much harder to implement clean abstractions from the get-go. It also
              doesn’t help that a fork runs a pretty severe risk of being ‘usable’ right from the get-go (meaning that
              people will want to use it, and the boundary between C++ and Carbon will be muddier).
            </p>
            <h2 id="governance">Governance</h2>
            <p>
              As I said, Carbon is a moonshot project to allow modern C++ codebases to evolve. (They might stop being
              called “C++” in the process, but that’s probably fine. The only constant in life is change, or something
              like that.)
            </p>
            <p>
              The north star goal is, of course, that of a gradual but mostly automated migration of existing C++ code
              to Carbon code, followed by <em>additional</em> migrations to fix and improve this code using Carbon’s
              modern, more powerful semantics (eg. null safety).
            </p>
            <p>
              From this angle, and with the historical background in mind, let’s address the elephant in the room<sup id="fnref:10"><a href="#fn:10" role="doc-noteref">10</a></sup>
              and take a stab at describing how some people feel about Carbon, by rephrasing my interpretation of its
              goals in the most cynical way possible. I’m deeply sorry to anyone who’s working on Carbon, since this is
              going to feel like I’m twisting a proverbial knife:
            </p>
            <blockquote>
              <p>
                Carbon’s primary goal is a large-scale migration of Google’s enormous pile of (highly specific,
                exception-less, Abseil and Protobuf-using, Clang-based, Bazel-built) C++ technical debt into a modern
                language capable of supporting Google’s needs, and
                <em>over whose governance Google is capable of exerting a significant amount of control.</em>
              </p>
            </blockquote>
            <p>
              There we go.<sup id="fnref:11"><a href="#fn:11" role="doc-noteref">11</a></sup> Do
              you see the elephant yet?
            </p>
            <p>
              It’s pretty hard to miss since I highlighted it. (Sorry, I know that it’s the second time I made that
              joke.)
            </p>
            <p>
              This is about the least charitable way to phrase it, of course. I’m bringing this up for the obvious
              reasons: Carbon is spearheaded by a big tech company, and people have various concerns.
            </p>
            <p>
              These include the concern that Google trying to ’take control’ of C++ via a divide-and-conquer approach,
              that Carbon will favor Google’s style of C++ at the expense of others, and the classic sentiment that
              Carbon will eventually be abandoned and dropped (potentially hanging early adopters out in the dry).
            </p>
            <p>
              As I already gestured at before, all of this is about <em>trust</em>, and by extension about governance.
            </p>
            <p>
              As long as we’re willing to say that Carbon is about reducing the reliance on the C++ Standard Committee,
              it’s pretty clear that that governance-shaped hole has to be filled <em>somehow</em>, and that someone (or
              some group of people) has to decide the future direction of the language.
            </p>
            <p>
              I’ll be honest, I can make no guarantees here. I am not working on Carbon<sup id="fnref:12"><a href="#fn:12" role="doc-noteref">12</a></sup>, and the dynamics here are far beyond my scope.
            </p>
            <p>
              I can point out that Carbon is an Apache-licensed open source project,
              <a href="https://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md" target="_blank">open for contributors right now</a>, and that it has an explicit “The intent is that […] Carbon remains a community-driven project, avoiding
              situations where any single organization controls Carbon’s direction.”
              <a href="https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/faq.md#how-does-carbon-make-decisions" target="_blank">disclaimer</a>
              in its FAQ, but that’s not going to convince you if you’re worried about bad intentions.
            </p>
            <p>
              So. What I <em>can</em> tell you is that I believe that putting governance of the language into the hands
              of the open-source community is critical for Carbon’s long-term success, and that Carbon’s developers
              understand this.
            </p>
            <p>
              Whether Carbon will find widespread adoption depends on whether <em>established corporations</em> trust
              Carbon’s stewards to handle the language with enough responsibility that migrating their own C++ code to
              Carbon seems like a safe offer.
            </p>
            <p>
              This sort of trust is hard to establish as long as there’s a single owner, <em>especially</em> if that
              owner is Google.
            </p>
            <p>
              Second: That Carbon finds any public adoption at all is also pretty important <em>even if</em> the primary
              goal was just to use it purely within Google. This might come as a surprise, but it’s pretty simple:
              People who’re expected to use Carbon first need to learn Carbon. This is <em>significantly</em> easier
              when Google can rely on a broad ecosystem of tutorials, libraries and discussion boards outside of its
              intranet.
            </p>
            <p>
              So in other words, for Carbon to become successful, it’s critical that there’s a public community, and
              that enterprise users of C++ <em>trust</em> Carbon.
            </p>
            <p>These are huge incentives to push the language towards independent community ownership.</p>
            <p>
              Both of these points (trust by enterprise users and need for a public community) were
              <em>much less important</em> for <a href="https://go.dev/" target="_blank">Go</a> (which was also
              spearheaded by Google), primarily due to Go’s simplicity, the fact that there was far less competition in
              the programming language space when Go released, and the fact that it was a language for greenfield
              projects. (That is, it didn’t require convincing ancient C++ coders to perform a massive migration and
              rework their tool chain.)
            </p>
            <p>
              My understanding is that
              <a href="https://news.ycombinator.com/item?id=32153320" target="_blank">Carbon’s leads understand all of this</a>, and want the project to be community driven. For now, that’s more than good enough for me. For a
              project this early in its life-cycle, it’s nice to see that they’re thinking about this at all, and have
              made an explicit commitment to community ownership.
            </p>
            <h2 id="conclusion-there-is-no-free-lunch">Conclusion: There is no free lunch.</h2>
            <p>
              The prospect of building a <em>successor</em> to C++—arguably single most important programming language
              currently in existence—sounds like it should be doomed to fail.
            </p>
            <p>
              I’ll repeat what I said before, and what should be common knowledge: C++ is an incredibly complex
              programming language. It’s under-annotated, has multiple implementations (governed by a 2000+ page ISO
              Standard document), carries four decades of technical baggage, is full of undefined behavior, and has a
              frequently abused Turing-complete quasi-code-generation meta-programming language built into it.
            </p>
            <p>
              All of that should make it near impossible to succeed C++. Complexity is in fact a form of job security.
              So why am I still relatively confident in Carbon’s potential?
            </p>
            <p>Simple, it’s mainly since the priorities look correct to me. Carbon understands that</p>
            <ol>
              <li>
                C++’s inability to evolve, modernize, deprecate, migrate and standardize is <em>the</em> critical issue
                which the language is facing today.<sup id="fnref:13"><a href="#fn:13" role="doc-noteref">13</a></sup>
              </li>
              <li>
                You cannot improve on this without making concessions. This goes both ways: There is old C++ code which
                you will not be able to support. At the same time, there are C++ features which you <em>have</em> to
                support, whether you want to or not.
              </li>
              <li>
                This is a herculean task that requires a massive initial investment (a whole new programming language),
                and a complete rethinking of tooling, communication, software engineering and language development
                practices.
              </li>
            </ol>
            <p>
              The inability to evolve is an issue for people who’re just starting to learn C++, and who stumble into
              every single footgun that hasn’t been taken care of over the past thirty years.
            </p>
            <p>
              It’s an issue for people who care for high-quality code, readability or memory safety, and see no viable
              path towards getting their C++ codebase into that state.
            </p>
            <p>
              It’s an issue for <em>committee and compiler contributors</em>, who need to carefully consider how a new
              feature will interact with <em>literally everything else</em> the language already supports.
            </p>
            <p>
              You might disagree with that assessment. It might not be an issue <em>for you personally</em>. That’s
              fine. C++ (for a given version, anyway) will stay exactly as it is. It’s not going to go away anytime
              soon, and that’s a good thing. People depend on that. Critical infrastructure depends on that.
            </p>
            <p>
              As for myself, I am incredibly glad to see that <em>someone</em> is trying to take this bull by the horns,
              and willing to face this charging billion lines-of-code mountain of complexity and technical debt head-on.
            </p>
            <p>
              At last but not at least just since it would be <em>really freaking cool</em> if we (humanity, as a whole)
              could actually pull it off, and don’t need to pass tales warning people about the dangers of using
              <code>std::vector&lt;bool&gt;</code> across the generations.
            </p>
            <p>
              It might take a while, but that’s fine. This is a long-term project. It <em>has</em> to be a long-term
              project to make this work. Once you start thinking about it from that perspective, everything makes a lot
              more sense.
            </p>
            <p>
              Remember, those millions of lines of C++ code are not going to go away anytime soon. They’ll still be
              there in a few decades. It’s either a large-scale migration (in some form or another), or nothing.
            </p>
            <p>
              In the meantime, if you’re remotely interested, I’ll reiterate that I highly recommend Carbon’s talks, eg.
              <a href="https://youtu.be/bBvLmDJrzvI" target="_blank">this one</a>.
            </p>
            <h3 id="addendum">Addendum</h3>
            <p>
              Writing this took significantly longer than expected. The total number of footnotes written and deleted is
              about forty.
            </p>
            <p>Let me know if you got something out of it—It means a lot to me.</p>
            <p>
              Questions, suggestions, comments, writing advice, reading recommendations, music suggestions, pictures of
              pets and basically anything else you can think of are all welcome via my contact e-mail at the bottom of
              the page.
            </p>
          </div>
        
      </article>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Deck: An open-source cross-platform multiplayer card game engine in Flutter (276 pts)]]></title>
            <link>https://github.com/xajik/thedeck</link>
            <guid>42983699</guid>
            <pubDate>Sat, 08 Feb 2025 15:47:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/xajik/thedeck">https://github.com/xajik/thedeck</a>, See on <a href="https://news.ycombinator.com/item?id=42983699">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/xajik/thedeck/blob/main/demo/icon.png"><img src="https://github.com/xajik/thedeck/raw/main/demo/icon.png" alt="alt text"></a></p> 
<span>
    <p dir="auto"><h2 tabindex="-1" dir="auto"> The Deck</h2><a id="user-content--the-deck" aria-label="Permalink:  The Deck" href="#-the-deck"></a></p>
</span>
<p dir="auto"><b>🕹️ Mobile multiplayer offline card games aggregator 🚀</b>
<b>👨‍💻 Written 💯 in Dart and Flutter 🔨</b></p>
<p dir="auto"><i>The inspiration for “The Deck” came from a situation many of us have experienced. Imagine gathering with friends for a game night, only to realize that nobody has the necessary cards. Frustrating, right? This dilemma sparked the idea of leveraging technology to create a solution.</i></p>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/xajik/thedeck/blob/main/demo/6.jpg"><img src="https://github.com/xajik/thedeck/raw/main/demo/6.jpg" alt="alt text"></a>
</p>
<p dir="auto">The primary goal of “The Deck” is to provide a user-friendly and cooperative digital game environment for playing classic games that were usually played with cards on paper. One of the standout features of “The Deck” is its unique ability to assign one device as the “table” (a.k.a. deck). By placing this device in the middle of the group, all players can witness the real-time state of the cards. This adds a new level of immersion making it a truly captivating experience.</p>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/xajik/thedeck/blob/main/demo/2.jpg"><img src="https://github.com/xajik/thedeck/raw/main/demo/2.jpg" alt="alt text"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Read more</h2><a id="user-content-read-more" aria-label="Permalink: Read more" href="#read-more"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><b> ⚙️ How it works 👀: </b></p>
<ul dir="auto">
<li><a href="https://igorsteblii.com/thedeck/" rel="nofollow">Game Night Just Got a Digital Upgrade: The Deck</a></li>
<li><a href="https://dev.to/ilbets/game-night-just-got-a-digital-upgrade-the-deck-67p" rel="nofollow">Dev.to</a></li>
<li><a href="https://medium.com/@igorsteblii/game-night-just-got-a-digital-upgrade-the-deck-unique-cooperative-game-simulator-98e9db13c0f6" rel="nofollow">Medium</a></li>
<li>PlantUML diagrams here - <a href="https://github.com/xajik/thedeck/blob/main/documentation">/documentation</a></li>
</ul>
</li>
<li>
<p dir="auto"><a href="https://getthedeck.com/" rel="nofollow">getthedeck.com</a></p>
</li>
<li>
<p dir="auto"><a href="https://www.producthunt.com/products/the-deck#the-deck" rel="nofollow">ProductHunt</a></p>
</li>
<li>
<p dir="auto">🍎 <a href="https://apps.apple.com/us/app/the-deck-play/id6448377728" rel="nofollow">AppStore</a></p>
</li>
<li>
<p dir="auto">🤖 <a href="https://play.google.com/store/apps/details?id=com.thedeck.app" rel="nofollow">PlayStore</a></p>
<ul dir="auto">
<li><a href="https://play.google.com/apps/testing/com.thedeck.app" rel="nofollow">PlayStore Web</a></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contribute</h2><a id="user-content-contribute" aria-label="Permalink: Contribute" href="#contribute"></a></p>
<p dir="auto">Contribution is welcome 🤝</p>
<p dir="auto"><b>If you contributed and build a new Game, ping me if you wish it to be released on the store markets.</b>
<a href="mailto:me@getthedeck.com">me@getthedeck.com</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Flutter</h2><a id="user-content-flutter" aria-label="Permalink: Flutter" href="#flutter"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Setup</h2><a id="user-content-setup" aria-label="Permalink: Setup" href="#setup"></a></p>
<p dir="auto"><a href="https://fvm.app/docs/guides/faq/" rel="nofollow">Use FVM to manage Flutter SDK version</a></p>
<ul dir="auto">
<li>install <code>fvm</code> with <code>brew</code></li>
<li>Setup Flutter version from pubspec <code>fvm use x.y.z</code>
<ul dir="auto">
<li>Read version here: <a href="https://github.com/xajik/thedeck/blob/main/.fvmrc">fvmrc</a></li>
</ul>
</li>
<li>run with <code>fvm flutter run</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">MR / Pull Request</h2><a id="user-content-mr--pull-request" aria-label="Permalink: MR / Pull Request" href="#mr--pull-request"></a></p>
<p dir="auto">Naming convention, start commit description with:</p>
<ul dir="auto">
<li>(FEAT) - feature</li>
<li>(FIX) - bug fix</li>
<li>(CHORE) - refactoring, updating dependencies, etc</li>
<li>(TEST) - tests</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Release</h2><a id="user-content-release" aria-label="Permalink: Release" href="#release"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Android</h3><a id="user-content-android" aria-label="Permalink: Android" href="#android"></a></p>
<ul dir="auto">
<li>For App Store release ⭐️
<ul dir="auto">
<li>fvm flutter build appbundle --release</li>
</ul>
</li>
<li>Fat APK with all ABI
<ul dir="auto">
<li>fvm flutter build apk --release</li>
<li>Upload file to Play store</li>
</ul>
</li>
<li>For split-abi APK testing
<ul dir="auto">
<li>fvm flutter build apk --release  --split-per-abi</li>
</ul>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">iOS</h3><a id="user-content-ios" aria-label="Permalink: iOS" href="#ios"></a></p>
<ul dir="auto">
<li>Archive for App store upload ⭐️
<ul dir="auto">
<li>fvm flutter build ipa --release</li>
<li>open file with Xcode, validate and upload</li>
</ul>
</li>
<li>IPA file to drag &amp; drop into iphone:
<ul dir="auto">
<li>fvm flutter build ipa --release  --export-options-plist="/Users/igor.steblii/Projects/foundation_tone/ft_fe/build/ios/archive/Runner.xcarchive/Info.plist"</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Common errors</h2><a id="user-content-common-errors" aria-label="Permalink: Common errors" href="#common-errors"></a></p>
<ul dir="auto">
<li>
<p dir="auto">In case VS code fail with missing Cocoapods</p>
</li>
<li>
<ul dir="auto">
<li>fvm flutter clean + fvm flutter pub get + Reload VSCode</li>
</ul>
</li>
<li>
<p dir="auto">For <code>normalize': Unicode Normalization not appropriate for ASCII-8BIT (Encoding::CompatibilityError)</code></p>
</li>
<li>
<p dir="auto">Run: <code>export LC_ALL=en_US.UTF-8</code></p>
</li>
<li>
<p dir="auto">for wrong locale <code>export LANG="en_US.UTF-8</code></p>
</li>
<li>
<p dir="auto">Run <code>locale</code> if there is any <code>C</code>, then run <code>export LC_ALL=en_US.UTF-8</code></p>
</li>
<li>
<p dir="auto">For <code>flutterfire</code> script fails with <code>"unhandle JSON exception"</code></p>
</li>
<li>
<p dir="auto">Download json/plist form Firebase and update in respective folders (<a data-error-text="Failed to load title" data-id="1091786202" data-permission-text="Title is private" data-url="https://github.com/invertase/flutterfire_cli/issues/30" data-hovercard-type="issue" data-hovercard-url="/invertase/flutterfire_cli/issues/30/hovercard" href="https://github.com/invertase/flutterfire_cli/issues/30">invertase/flutterfire_cli#30</a>)</p>
</li>
<li>
<p dir="auto">iOS Device require permission to connect to local network, which cannot be access from code. To emulate access query local IP address</p>
</li>
<li>
<p dir="auto">Another way is to add permission to <code>Info.plist</code> to ask on app start:</p>
</li>
<li>
<ul dir="auto">
<li>NSLocalNetworkUsageDescription</li>
</ul>
</li>
<li>
<ul dir="auto">
<li>Access to the local network required to create and connect to game rooms</li>
</ul>
</li>
<li>
<p dir="auto">For <code>Error when reading 'lib/objectbox.g.dart': No such file or directory</code></p>
</li>
<li>
<ul dir="auto">
<li>Run: <code>fvm flutter pub run build_runner watch --delete-conflicting-outputs</code></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Tools</h2><a id="user-content-tools" aria-label="Permalink: Tools" href="#tools"></a></p>
<p dir="auto">To generate a new Redux template see <a href="https://github.com/xajik/thedeck/blob/main/scripts">scripts</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the terms of the MIT license.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The LLMentalist Effect (106 pts)]]></title>
            <link>https://softwarecrisis.dev/letters/llmentalist/</link>
            <guid>42983571</guid>
            <pubDate>Sat, 08 Feb 2025 15:30:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://softwarecrisis.dev/letters/llmentalist/">https://softwarecrisis.dev/letters/llmentalist/</a>, See on <a href="https://news.ycombinator.com/item?id=42983571">Hacker News</a></p>
Couldn't get https://softwarecrisis.dev/letters/llmentalist/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[We are destroying software (729 pts)]]></title>
            <link>https://antirez.com/news/145</link>
            <guid>42983275</guid>
            <pubDate>Sat, 08 Feb 2025 14:48:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://antirez.com/news/145">https://antirez.com/news/145</a>, See on <a href="https://news.ycombinator.com/item?id=42983275">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
<section id="newslist"><article data-news-id="145"><h2><a href="https://antirez.com/news/145">We are destroying software</a></h2></article></section><topcomment><article data-comment-id="145-" id="145-"><span><span><a href="https://antirez.com/user/antirez">antirez</a></span> 3 hours ago. 15699 views.  </span><pre>We are destroying software by no longer taking complexity into account when adding features or optimizing some dimension.

We are destroying software with complex build systems.

We are destroying software with an absurd chain of dependencies, making everything bloated and fragile.

We are destroying software telling new programmers: “Don’t reinvent the wheel!”. But, reinventing the wheel is how you learn how things work, and is the first step to make new, different wheels.

We are destroying software by no longer caring about backward APIs compatibility.

We are destroying software pushing for rewrites of things that work.

We are destroying software by jumping on every new language, paradigm, and framework.

We are destroying software by always underestimating how hard it is to work with existing complex libraries VS creating our stuff.

We are destroying software by always thinking that the de-facto standard for XYZ is better than what we can do, tailored specifically for our use case.

We are destroying software claiming that code comments are useless.

We are destroying software mistaking it for a purely engineering discipline.

We are destroying software by making systems that no longer scale down: simple things should be simple to accomplish, in any system.

We are destroying software trying to produce code as fast as possible, not as well designed as possible.

We are destroying software, and what will be left will no longer give us the joy of hacking.</pre></article></topcomment>


<p><a href="https://disqus.com/">blog comments powered by <span>Disqus</span></a>

</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A tale of several distros joining forces for a common goal: reproducible builds (127 pts)]]></title>
            <link>https://video.fosdem.org/2025/h1302/fosdem-2025-6479-a-tale-of-several-distros-joining-forces-for-a-common-goal-reproducible-builds.av1.webm</link>
            <guid>42982270</guid>
            <pubDate>Sat, 08 Feb 2025 11:38:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://video.fosdem.org/2025/h1302/fosdem-2025-6479-a-tale-of-several-distros-joining-forces-for-a-common-goal-reproducible-builds.av1.webm">https://video.fosdem.org/2025/h1302/fosdem-2025-6479-a-tale-of-several-distros-joining-forces-for-a-common-goal-reproducible-builds.av1.webm</a>, See on <a href="https://news.ycombinator.com/item?id=42982270">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Generating Voronoi Diagrams Using Fortune's Algorithm (With Odin) (180 pts)]]></title>
            <link>https://redpenguin101.github.io/html/posts/2025_01_21_voronoi.html</link>
            <guid>42982015</guid>
            <pubDate>Sat, 08 Feb 2025 10:41:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://redpenguin101.github.io/html/posts/2025_01_21_voronoi.html">https://redpenguin101.github.io/html/posts/2025_01_21_voronoi.html</a>, See on <a href="https://news.ycombinator.com/item?id=42982015">Hacker News</a></p>
Couldn't get https://redpenguin101.github.io/html/posts/2025_01_21_voronoi.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
    </channel>
</rss>