<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 15 Nov 2024 20:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Please stop the coding challenges (170 pts)]]></title>
            <link>https://blackentropy.bearblog.dev/please-stop-the-absurd-coding-challenges/</link>
            <guid>42147790</guid>
            <pubDate>Fri, 15 Nov 2024 15:32:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blackentropy.bearblog.dev/please-stop-the-absurd-coding-challenges/">https://blackentropy.bearblog.dev/please-stop-the-absurd-coding-challenges/</a>, See on <a href="https://news.ycombinator.com/item?id=42147790">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2024-11-15T11:53Z">
                    15 Nov, 2024
                </time>
            </i>
        </p>
    

    <p>Let’s talk about tech interviews – specifically, the ones that go overboard with unrealistic coding assignments. If you’re a developer who’s been asked to debug legacy PHP or build a mini-app from scratch in just a few hours, you know what I’m talking about. It’s becoming a trend, and it’s not helping anyone.</p>
<h2 id="unrealistic-tests-that-dont-measure-real-skills">Unrealistic Tests That Don’t Measure Real Skills</h2><p>These high-stress, solo coding assignments don’t reflect the actual job. Instead, they put developers in situations they’d never face in the workplace, where collaboration and support are standard. When was the last time you had to debug an ancient codebase without documentation or help from a team? Yet companies claim this somehow measures “problem-solving” skills.</p>
<p>What companies often ignore is the extra time candidates invest beyond the “suggested time” for these tests. Developers don’t just jump into an assignment; they research the company, study the job requirements, and meticulously work to polish the project. A “4-hour” assignment can quickly turn into 8, 10, or even more, just to ensure it’s in great shape. For developers balancing jobs and life, this can feel like working unpaid shifts for a job they don’t even have yet.</p>
<h2 id="the-flexibility-myth">The Flexibility Myth</h2><p>Many companies justify these tests by saying they need “adaptable” developers, even if the tech stack has nothing to do with the role. This is like asking a Ruby developer to debug PHP as a test of flexibility. Sure, adaptability is important, but that doesn’t mean a candidate’s worth should be based on their ability to tackle obscure, unrelated challenges.</p>
<h2 id="are-companies-testing-candidates-or-just-flexing">Are Companies Testing Candidates or Just Flexing?</h2><p>For some companies, these tests feel like a way to show off how “elite” their standards are rather than truly evaluating fit. There’s an inflated “top 1%” mentality where every hire has to jump through hoops, even if those hoops don’t make sense. This turns away skilled candidates who could do the job well but don’t thrive in these artificial, high-pressure situations.</p>
<h2 id="time-for-a-reality-check">Time for a Reality Check</h2><p>It’s time for companies to admit these interview practices are broken. If the job requires specific tech skills, test those skills. But don’t put candidates through unrealistic coding boot camps that don’t reflect the role’s actual needs.</p>
<p>Hiring processes should focus on problem-solving, collaboration, and growth in relevant areas. Unrealistic expectations don’t attract the best talent – they just exhaust and discourage it. If companies want adaptable developers, they should focus on the long-term ability to learn, not how fast someone can tackle an arbitrary test. Dropping these absurd assignments and focusing on what really counts could foster a better, more inclusive tech culture.</p>


    

    
        

        
            


        
    


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Seer: A GUI front end to GDB for Linux (233 pts)]]></title>
            <link>https://github.com/epasveer/seer</link>
            <guid>42146338</guid>
            <pubDate>Fri, 15 Nov 2024 12:36:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/epasveer/seer">https://github.com/epasveer/seer</a>, See on <a href="https://news.ycombinator.com/item?id=42146338">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Introduction</h2><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<p dir="auto">Seer - a gui frontend to gdb for Linux.   (Ernie Pasveer  <a href="mailto:epasveer@att.net">epasveer@att.net</a>)</p>
<p dir="auto">This project is actively worked on. The aim is a simple, yet pleasing gui to gdb.</p>
<p dir="auto">Please report any bugs or desired features to my email or create a <a href="https://github.com/epasveer/seer/issues">task</a> in my
GitHub project page.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Seer can be installed either from a package manager or from source.</p>
<div dir="auto"><p dir="auto">Note</p><p dir="auto">Make sure the requirements are met before installing.</p>
</div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements</h2><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>
<p dir="auto">Linux</p>
</li>
<li>
<p dir="auto">C++17</p>
</li>
<li>
<p dir="auto">gdb with "mi" interpreter (check by running: <code>gdb --interpreter=mi</code>)</p>
</li>
<li>
<p dir="auto">CMake (3.1.0 or newer)</p>
</li>
<li>
<p dir="auto">QT6</p>
<ul dir="auto">
<li>When building Seer from source, you will need the QT6 "devel" packages installed on your system for your distribution.
<ul dir="auto">
<li>Core</li>
<li>Gui</li>
<li>Widgets</li>
<li>PrintSupport</li>
<li>Charts</li>
<li>Svg</li>
</ul>
</li>
<li>Qt6 build instructions are here: <a href="https://github.com/epasveer/seer/wiki/Building-Seer---Qt6">https://github.com/epasveer/seer/wiki/Building-Seer---Qt6</a></li>
</ul>
</li>
<li>
<p dir="auto">QT5</p>
<ul dir="auto">
<li><strong>Seer no longer compiles with Qt5.</strong> The 2.3 source tree is the last one that does.</li>
<li>Qt5 build instructions are here: <a href="https://github.com/epasveer/seer/wiki/Building-Seer---Qt5">https://github.com/epasveer/seer/wiki/Building-Seer---Qt5</a></li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Install from package</h2><a id="user-content-install-from-package" aria-label="Permalink: Install from package" href="#install-from-package"></a></p>
<p dir="auto">Available through the following package managers:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Pamac (Manjaro)</h3><a id="user-content-pamac-manjaro" aria-label="Permalink: Pamac (Manjaro)" href="#pamac-manjaro"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">zypper (openSUSE Tumbleweed)</h3><a id="user-content-zypper-opensuse-tumbleweed" aria-label="Permalink: zypper (openSUSE Tumbleweed)" href="#zypper-opensuse-tumbleweed"></a></p>

<p dir="auto"><h2 tabindex="-1" dir="auto">Install from source</h2><a id="user-content-install-from-source" aria-label="Permalink: Install from source" href="#install-from-source"></a></p>
<p dir="auto">(Recommended) Seer can be built with Qt6 by following the instructions below.</p>
<p dir="auto"><a href="https://github.com/epasveer/seer/wiki/Building-Seer---Qt6">https://github.com/epasveer/seer/wiki/Building-Seer---Qt6</a></p>
<p dir="auto">It can still be built with Qt5, for the time being by following the instructions below.</p>
<p dir="auto"><a href="https://github.com/epasveer/seer/wiki/Building-Seer---Qt5">https://github.com/epasveer/seer/wiki/Building-Seer---Qt5</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">NEWS</h2><a id="user-content-news" aria-label="Permalink: NEWS" href="#news"></a></p>
<p dir="auto">Check out <a href="https://github.com/epasveer/seer/wiki">Seer's Wiki page</a> on github.</p>
<ul dir="auto">
<li>Version v1.17 will be the last Qt5 release.</li>
<li>The next release will be v2.0 and will be Qt6 based. However, for the time being, it's still able to be compiled with Qt5.</li>
<li>If you want the latest stable Qt5 source, grab v1.17 from here: <a href="https://github.com/epasveer/seer/releases/tag/v1.17">https://github.com/epasveer/seer/releases/tag/v1.17</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">GUI overview</h2><a id="user-content-gui-overview" aria-label="Permalink: GUI overview" href="#gui-overview"></a></p>
<p dir="auto">Examples of the various Seer views and dialogs.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Main View</h2><a id="user-content-main-view" aria-label="Permalink: Main View" href="#main-view"></a></p>
<p dir="auto">The main view for Seer looks like this:
<a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/mainview.png"><img src="https://github.com/epasveer/seer/raw/main/images/mainview.png" alt=""></a></p>
<ul dir="auto">
<li>
<p dir="auto">Source/Function/Types/Variables/Libraries</p>
<ul dir="auto">
<li>The list of source/header files that were used in the program.</li>
<li>Search for Functions, Types, and Static Variables.
Dobule clicking will open the source file.</li>
<li>The list of shared libraries referenced by the program.</li>
<li>The list of source/header files can be searched. This will "shrink" the list of files shown.</li>
<li>Double clicking on a file will open it in the Code Manager.</li>
</ul>
</li>
<li>
<p dir="auto">Variable/Register Info</p>
<ul dir="auto">
<li>Show variable and register values.</li>
<li>"Logger" - log the value of a variable. Manually enter it or double click on the variable in the file
that is opened in the code manager.</li>
<li>"Tracker" - create a list of variables to show the value for whenever gdb reaches a stopping point
(step, next, finish, etc.). When the stopping point is reached, all variables in the list will show
their potentially new value.</li>
<li>"Registers" - show the values of all cpu registers.</li>
</ul>
</li>
<li>
<p dir="auto">Code Manager.</p>
<ul dir="auto">
<li>The large area of the middle part of the Seer gui.</li>
<li>Source files are opened in this view.</li>
<li>Text in a file can be seached for with ^F.</li>
<li>Variables can be added to the "Logger" by double clicking the variable name.
Double click with CTLR key pressed will prepend variable with "<em>".
Double click with SHIFT key pressed will prepend variable with "&amp;".
Double click with CTRL+SHIFT key pressed will prepend variable with "</em>&amp;".</li>
<li>Variables can be added to the "Tracker" by selecting the variable name and RMB and select
"Add variable to Tracker".</li>
<li>Variables can be added to the "Memory Visualizer" by selecting the variable name and RMB and select
"Add variable to Memory Visualizer".</li>
<li>A breakpoint/printpoint can be created by RMB on a specific line.</li>
<li>Can execute to a specific line by RMB on a specific line.</li>
<li>Tabs in this view can be detached by double-clicking a tab.</li>
</ul>
</li>
<li>
<p dir="auto">Breakpoints, Watchpoints, Catchpoints, Printpoints, manual gdb commands, and logs.</p>
<ul dir="auto">
<li>The area below the Code Manager.</li>
<li>Manual commands.  Manually enter a gdb or gdbmi command.
The commands are remembered for the next Seer use.</li>
<li>Breakpoint manager. Create and manage breakpoints.</li>
<li>Watchpoint manager. Create and manage watchpoints.
A watchpoint monitors when a variable is accessed (read, write, read/write).</li>
<li>Catchpoint manager. Create and manage catchpoints.
A catchpoint stops execution on a C++ throw/rethrow/catch call.</li>
<li>Printpoint manager. Create and manage printpoints.
A printpoint is like a breakpoint but it allows you to print variables at
that printpoint. See gdb's 'dprintf' call.</li>
<li>GDB output. A log of any output from the gdb program itself.</li>
<li>Seer output. A log of any output from the Seer program itself. As diagnostics.</li>
<li>Tabs in this view can be detached by double-clicking a tab.</li>
</ul>
</li>
<li>
<p dir="auto">Stack frame information.</p>
<ul dir="auto">
<li>Stack frame list. A frame can be double clicked to change the scope (the current function).</li>
<li>Stack frame arguments. For each frame, print the arguments passed to each function.</li>
<li>Stack locals. For the current function, print the values of the local variables.</li>
</ul>
</li>
<li>
<p dir="auto">Thread information.</p>
<ul dir="auto">
<li>Thread ids. A list of all threads. Double click on a thread id to change the scope (the current thread).</li>
<li>Thread frames. For each thread, list its stack frames.</li>
</ul>
</li>
<li>
<p dir="auto">Supports Gdb's Reverse Debugging mode.</p>
<ul dir="auto">
<li>Turn instruction recording on or off.</li>
<li>Set playback direction to forward or reverse.</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Open Dialog</h2><a id="user-content-open-dialog" aria-label="Permalink: Open Dialog" href="#open-dialog"></a></p>
<p dir="auto">When the open executable dialog is invoked, it looks like this:
<a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/opendialog.png"><img src="https://github.com/epasveer/seer/raw/main/images/opendialog.png" alt=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Seer Console</h2><a id="user-content-seer-console" aria-label="Permalink: Seer Console" href="#seer-console"></a></p>
<p dir="auto">All text output from the executable will go to the Seer console. Text input for the executable can be entered via the console too.
<a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/console.png"><img src="https://github.com/epasveer/seer/raw/main/images/console.png" alt=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Assembly View</h2><a id="user-content-assembly-view" aria-label="Permalink: Assembly View" href="#assembly-view"></a></p>
<p dir="auto">Normally Seer will just show the source code as tabs in the Code Manager. The program's assembly can also be show as a tab.</p>
<p dir="auto">Select "View-&gt;Assembly View" and an extra tab will be shown alongside the source code tabs that shows the current assembly being executed. Here is an example.
<a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/mainview_assemby.png"><img src="https://github.com/epasveer/seer/raw/main/images/mainview_assemby.png" alt=""></a></p>
<p dir="auto">Like the source code tabs, breakpoints can be set in the assembly tab. The current instruction is highlighted.</p>
<p dir="auto">Double-clicking on entries in the "Breakpoints" tab and the "Stack frames" tab will show the assembly for those addresses.</p>
<p dir="auto">There are "Nexti" and "Stepi" hot-keys, as defined by your config settings. Normally "Ctrl+F5" and "CTRL+F6".
Using "^F" in the assembly tab will show a powerful search bar.</p>
<p dir="auto"><strong>The assembly feature in Seer is new. Feel free to suggest changes/features.</strong></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Memory Visualizer</h2><a id="user-content-memory-visualizer" aria-label="Permalink: Memory Visualizer" href="#memory-visualizer"></a></p>
<p dir="auto">When looking at the contents of raw memory in the Memory Visualizer, it looks like this :</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Memory</th>
<th>Disassembly</th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/memoryvisualizer.png"><img src="https://github.com/epasveer/seer/raw/main/images/memoryvisualizer.png" alt=""></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/memoryvisualizer_asm.png"><img src="https://github.com/epasveer/seer/raw/main/images/memoryvisualizer_asm.png" alt=""></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Array Visualizer</h2><a id="user-content-array-visualizer" aria-label="Permalink: Array Visualizer" href="#array-visualizer"></a></p>
<p dir="auto">When looking at the contents of arrays in the Array Visualizer, it looks like this :</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Normal</th>
<th>Spline</th>
<th>Scatter</th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/arrayvisualizer.png"><img src="https://github.com/epasveer/seer/raw/main/images/arrayvisualizer.png" alt=""></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/arrayvisualizer_spline.png"><img src="https://github.com/epasveer/seer/raw/main/images/arrayvisualizer_spline.png" alt=""></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/arrayvisualizer_scatter.png"><img src="https://github.com/epasveer/seer/raw/main/images/arrayvisualizer_scatter.png" alt=""></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">Two arrays can be used as an X-Y plot. For example, this simple 'points' array forms the X-Y outline of a shape.</p>
<div data-snippet-clipboard-copy-content="    int main() {
        int points[] = {50,1,20,91,97,35,2,35,79,91,50,1};
        return 0;
    }"><pre><code>    int main() {
        int points[] = {50,1,20,91,97,35,2,35,79,91,50,1};
        return 0;
    }
</code></pre></div>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>X values</th>
<th>Y values</th>
<th>XY Values</th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/arrayvisualizer_x.png"><img src="https://github.com/epasveer/seer/raw/main/images/arrayvisualizer_x.png" alt=""></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/arrayvisualizer_y.png"><img src="https://github.com/epasveer/seer/raw/main/images/arrayvisualizer_y.png" alt=""></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/arrayvisualizer_xy.png"><img src="https://github.com/epasveer/seer/raw/main/images/arrayvisualizer_xy.png" alt=""></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Struct Visualizer</h2><a id="user-content-struct-visualizer" aria-label="Permalink: Struct Visualizer" href="#struct-visualizer"></a></p>
<p dir="auto">When looking at the contents of a C/C++ struct or a C++ class in the Struct Visualizer, it looks like this.
This example shows the contents of "*this" for the current C++ class that Seer is in. All structure members
that are basic types can be edited.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/structvisualizer.png"><img src="https://github.com/epasveer/seer/raw/main/images/structvisualizer.png" alt=""></a></p>
<p dir="auto">There is also a <strong>Basic Struct Visualizer</strong> that is more light weight, but can not follow pointers and can not
be edited.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Image Visualizer</h2><a id="user-content-image-visualizer" aria-label="Permalink: Image Visualizer" href="#image-visualizer"></a></p>
<p dir="auto">When looking at the contents of raw memory that is an image, the Image Visualizer can be used.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/epasveer/seer/blob/main/images/imagevisualizer.png"><img src="https://github.com/epasveer/seer/raw/main/images/imagevisualizer.png" alt=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Starting Seer</h2><a id="user-content-starting-seer" aria-label="Permalink: Starting Seer" href="#starting-seer"></a></p>
<p dir="auto">Seer is meant to easily start the program to debug from the command line. gdb has multiple
methods for debugging a program. So Seer naturally does too.</p>
<p dir="auto">Go to the Wiki to see all the ways to run Seer.</p>
<p dir="auto"><a href="https://github.com/epasveer/seer/wiki/Starting-Seer">https://github.com/epasveer/seer/wiki/Starting-Seer</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Support/Contact</h2><a id="user-content-supportcontact" aria-label="Permalink: Support/Contact" href="#supportcontact"></a></p>
<p dir="auto">Send an email to <a href="mailto:epasveer@att.net">epasveer@att.net</a> for any bugs or features. Or create a <a href="https://github.com/epasveer/seer/issues">task</a>
in my GitHub project page.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: OnAir – create link, receive calls (169 pts)]]></title>
            <link>https://onair.io/</link>
            <guid>42145419</guid>
            <pubDate>Fri, 15 Nov 2024 09:58:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://onair.io/">https://onair.io/</a>, See on <a href="https://news.ycombinator.com/item?id=42145419">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

	<!-- benefit 1 -->
	<div>
		
		<h3>Create a link</h3>
		<p>
			Reserve a link, such as <i>(onair.io/ yourname)</i> or <i>(onair.io/ yourcompany)</i>. Choose between audio or video calls. Set yourself online when you’re free.
		</p>
	</div>

	<!-- benefit 2 -->
	<div>
		
		<h3>Share it</h3>
		<p>On your website, LinkedIn profile, or text it. You can even embed an email signature (live image) showing your online status!</p>
	</div>

	<!-- benefit 3 -->
	<div>
		
		<h3>Receive calls</h3>
		<p>Your clients do not need to download an app to speak to you. They open the link, and if your status is green, it starts ringing!</p>
	</div>
</div><div id="features">

		<!-- Feature 1 -->
		<div>
			<p>
				<svg width="46" height="47" viewBox="0 0 46 47" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M27.4249 25.247C26.4748 26.5172 25.2625 27.5683 23.8705 28.3288C22.4784 29.0894 20.939 29.5416 19.3568 29.655C17.7745 29.7683 16.1864 29.54 14.7002 28.9856C13.2139 28.4312 11.8643 27.5636 10.7428 26.4417L4.10535 19.8043C2.09024 17.7179 0.975212 14.9235 1.00042 12.0229C1.02562 9.1224 2.18904 6.34781 4.24011 4.29675C6.29117 2.24569 9.06576 1.08226 11.9663 1.05706C14.8668 1.03185 17.6612 2.14688 19.7476 4.16199L23.5531 7.94534" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M18.5751 20.8219C19.5252 19.5516 20.7375 18.5006 22.1295 17.74C23.5216 16.9795 25.061 16.5272 26.6432 16.4139C28.2255 16.3006 29.8136 16.5289 31.2998 17.0833C32.7861 17.6377 34.1357 18.5053 35.2572 19.6271L41.8946 26.2646C43.9098 28.351 45.0248 31.1454 44.9996 34.0459C44.9744 36.9464 43.811 39.721 41.7599 41.7721C39.7088 43.8232 36.9342 44.9866 34.0337 45.0118C31.1332 45.037 28.3388 43.922 26.2524 41.9069L22.469 38.1235" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>

				<h2>One, or many links</h2>
			</p>
			<p>Reserve a link for yourself (e.g. onair.io/yourname) or for a group (e.g. onair.io/yourteam).</p>
		</div>

		<!-- Feature 2 -->
		<div>
			<p>
				<svg width="46" height="46" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M18.336 18.336C17.6876 18.9402 17.1675 19.6689 16.8067 20.4785C16.446 21.2881 16.252 22.162 16.2364 23.0482C16.2208 23.9344 16.3838 24.8146 16.7157 25.6365C17.0477 26.4583 17.5418 27.2048 18.1685 27.8315C18.7952 28.4583 19.5417 28.9523 20.3636 29.2843C21.1854 29.6162 22.0656 29.7792 22.9518 29.7636C23.838 29.748 24.712 29.554 25.5216 29.1933C26.3311 28.8325 27.0598 28.3124 27.664 27.664" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M20.206 7.77604C21.1328 7.66056 22.0659 7.60178 23 7.60004C38.4 7.60004 45 23 45 23C44.0164 25.1057 42.7828 27.0853 41.326 28.896" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
					<path d="M11.142 11.142C6.76675 14.1221 3.26572 18.2155 1 23C1 23 7.6 38.4 23 38.4C27.215 38.4113 31.3397 37.1792 34.858 34.858" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M1 1L45 45" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>

				<h2>Privacy-focused</h2>
			</p>
			<p>No need to share your phone number or email. Create a masked OnAir link and share it with others.</p>
		</div>

		<!-- Feature 3 -->
		<div>
			<p>
				<svg width="46" height="48" viewBox="0 0 46 48" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path fill-rule="evenodd" clip-rule="evenodd" d="M6.03619 9.14745C5.81913 9.70397 5.70001 10.3095 5.70001 10.9429V42.4857C5.70001 45.2156 7.91301 47.4286 10.6429 47.4286H30.3572C33.087 47.4286 35.3 45.2156 35.3 42.4857V38.4113L33.3 36.4113V42.4857C33.3 44.111 31.9825 45.4286 30.3572 45.4286H10.6429C9.01757 45.4286 7.70001 44.111 7.70001 42.4857V10.9429C7.70001 10.8997 7.70094 10.8567 7.70278 10.814L6.03619 9.14745ZM33.3 30.1887V10.9429C33.3 9.31755 31.9825 7.99999 30.3572 7.99999H11.1113L9.29678 6.1855C9.72473 6.06465 10.1762 5.99999 10.6429 5.99999H30.3572C33.087 5.99999 35.3 8.21299 35.3 10.9429V32.1887L33.3 30.1887Z" fill="#0056FF"></path><path d="M1 1L45 45" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>

				<h2>App-free</h2>
			</p>
			<p>Your visitors don't need to install any app. They simply visit your link, and it rings on your phone.</p>
		</div>

		<!-- Feature 4 -->
		<div>
			<p>
				<svg width="54" height="41" viewBox="0 0 54 41" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M35.5298 40C35.5298 35.4211 33.7108 31.0297 30.473 27.7919C27.2352 24.5541 22.8438 22.7351 18.2649 22.7351C13.686 22.7351 9.29457 24.5541 6.05677 27.7919C2.81897 31.0297 1 35.4211 1 40" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M18.2649 22.7352C24.2244 22.7352 29.0555 17.9041 29.0555 11.9446C29.0555 5.98515 24.2244 1.15405 18.2649 1.15405C12.3055 1.15405 7.47437 5.98515 7.47437 11.9446C7.47437 17.9041 12.3055 22.7352 18.2649 22.7352Z" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
					<path d="M44.1623 37.8418C44.1623 30.5689 39.8461 23.814 35.5299 20.5769C36.9487 19.5124 38.0832 18.1147 38.833 16.5073C39.5828 14.8999 39.9249 13.1324 39.8289 11.3613C39.7328 9.59022 39.2017 7.8701 38.2825 6.35319C37.3633 4.83629 36.0843 3.56937 34.5587 2.66455" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M53 35.0361C53 28.9234 49.3723 23.246 45.7446 20.5253C46.937 19.6306 47.8906 18.4558 48.5208 17.1048C49.151 15.7538 49.4385 14.2683 49.3578 12.7797C49.2771 11.2911 48.8307 9.8454 48.0581 8.57046C47.2855 7.29553 46.2105 6.2307 44.9283 5.47021" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>

				<h2>Slick queues</h2>
			</p>
			<p>Someone dropped in while you’re busy with another client? They’ll be put in a queue and you can drop in-and-out between clients</p>
		</div>

		<!-- Feature 5 -->
		<div>
			<p>
				<svg width="49" height="40" viewBox="0 0 49 40" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M43.3 1H5.7C3.10426 1 1 3.10426 1 5.7V33.9C1 36.4957 3.10426 38.6 5.7 38.6H43.3C45.8957 38.6 48 36.4957 48 33.9V5.7C48 3.10426 45.8957 1 43.3 1Z" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M48 8.05005L26.9205 21.445C26.195 21.8996 25.3561 22.1407 24.5 22.1407C23.6439 22.1407 22.805 21.8996 22.0795 21.445L1 8.05005" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>

				<h2>Email badge</h2>
			</p>
			<p>Include OnAir badge in your email signature to show your online status in real-time (green for online, gray for offline).</p>
		</div>

		<!-- Feature 6 -->
		<div>
			<p>
				<svg width="64" height="48" viewBox="0 0 64 48" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M42.0182 1L21.5031 46.1331" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M50.7455 35.9091L62.9636 23.691L50.7455 11.4728" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path><path d="M13.2182 11.4728L1 23.691L13.2182 35.9091" stroke="#0056FF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
				</svg>

				<h2>Website embed</h2>
			</p>
			<p>Change your website's "Book a Time" button to "Drop in" when online, and redirect to a different page if offline.</p>
		</div>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Relativty: An open-source VR headset for $200 (300 pts)]]></title>
            <link>https://www.relativty.com/</link>
            <guid>42143269</guid>
            <pubDate>Fri, 15 Nov 2024 01:55:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.relativty.com/">https://www.relativty.com/</a>, See on <a href="https://news.ycombinator.com/item?id=42143269">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I’m Maxim Perumal (<a href="https://twitter.com/maxim_xyz" target="_blank">Maxim xyz</a>) and when my best friend Gabriel Combe and I were 15 years old we built our own VR headset because we couldn't afford to buy one. It became Relativty, one of the most popular open-source VR headset.</p></div><div><h2><strong>Make it for $200</strong></h2><p>Relativty is not a consumer product. We made Relativty in my bedroom with a soldering iron and a 3D printer and we expect you to do the same: build it yourself.</p></div><div><h2>Software</h2><div><div><p><img src="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad85ffae60ef35d946_front-700.jpg" loading="lazy" sizes="(max-width: 479px) 93vw, (max-width: 736px) 95vw, (max-width: 991px) 700px, 67vw" srcset="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad85ffae60ef35d946_front-700-p-500.jpeg 500w, https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad85ffae60ef35d946_front-700.jpg 700w" alt=""></p><h2><strong>Full Steam VR support</strong></h2><p>We started Relativty because after watching Sword Art Online we wanted to make our own VR games. Thus Relativty supports SteamVR games and can be modified to add support for any DIY or off-the-shelf VR device.</p></div><div><p><img src="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824adc6b5996113a3c997_open-700.jpg" loading="lazy" sizes="(max-width: 479px) 93vw, (max-width: 736px) 95vw, (max-width: 991px) 700px, 67vw" srcset="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824adc6b5996113a3c997_open-700-p-500.jpeg 500w, https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824adc6b5996113a3c997_open-700.jpg 700w" alt=""></p><h2><strong>Experimental positional-scaling</strong></h2><p>The room-scaling AI can be used with any camera, it tracks your body based on video input. Precision and freedom of movement are still very far from dedicated sensors, however, we believe that the model can be trained and improved by orders of magnitude.</p></div></div></div><div><h2><strong>Motherboard</strong></h2><p>We designed an affordable motherboard that runs the Relativty Firmware, it is based on the Atmel SAM3X8E ARM Cortex-M3 processor and uses an MPU-6050 as it’s IMU. The naked PCB and the components to solder on, cost in total about 25 dollars.</p><p><img src="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad625ae2be44e0c54d_motherboard-700.jpg" loading="lazy" sizes="(max-width: 479px) 95vw, 40vw" srcset="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad625ae2be44e0c54d_motherboard-700-p-500.jpeg 500w, https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad625ae2be44e0c54d_motherboard-700.jpg 700w" alt=""></p></div><div><h2>Firmware &amp; Display</h2><div><div><p><img src="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ada869ad7028b53e79_card-700.jpg" loading="lazy" sizes="(max-width: 479px) 93vw, (max-width: 736px) 95vw, (max-width: 991px) 700px, 67vw" srcset="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ada869ad7028b53e79_card-700-p-500.jpeg 500w, https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ada869ad7028b53e79_card-700.jpg 700w" alt=""></p><h2><strong>Relativty Firmware runs on any ARM sam</strong></h2><p>The Relativty firmware, which powers the actual physical device, is based on ArduinoCore-sam. So in addition to the Relativty Motherboard, it is compatible with Arduino Due or any other board equipped with a processor that supports the ArduinoCore.</p></div><div><p><img src="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad16a15523f9e5c980_display-700.jpg" loading="lazy" sizes="(max-width: 479px) 93vw, (max-width: 736px) 95vw, (max-width: 991px) 700px, 67vw" srcset="https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad16a15523f9e5c980_display-700-p-500.jpeg 500w, https://uploads-ssl.webflow.com/5f57b1e7e28c685a1ffd2900/5f5824ad16a15523f9e5c980_display-700.jpg 700w" alt=""></p><h2><strong>120FPS at 2K or any display you want</strong></h2><p>Relativty headset runs a 2K dual-display at 120FPS. However, because of the open nature of Relativty you can use any display as long as your computer is able to handle it. From more affordable 90Hz 1080p screen to 4K panels.</p></div></div></div><div><h2>Getting started</h2><p>Relativty is entirely Open-source; we made it to be a testing ground for hackers and developer rather than a product. You can find the source code as well as the source for the electronics, hardware, and mechanical parts on our Github. The guide on how to build Relativty is available on our Github. You can download the latest release here.</p></div><div><h2><strong>Join our Discord server</strong></h2><p>To talk to other VR enthusiast, ask for help building the headset or provide experience to others!</p></div><div><h2>We are hiring</h2><p>We are starting a new company called <a href="https://www.unai.one/"><strong>Unai</strong></a>, building a new standalone VR headset from the ground-up and, alongside, the OS and Virtual World powering it. Our end goal is to solve immersiveness. This poses challenges in fields ranging from optics, computer vision, electrical design, low-level OS, game engine and many more.<br>‍<br>We are currently hiring people willing to help solve those challenges. If you are one of those people, please reach out at <strong>maxim@unai.one.<p>‍</p></strong>Please visit <a href="https://www.unai.one/"><strong>unai.one</strong></a> to learn more and <a href="https://www.unai.one/jobs"><strong>jobs</strong></a> see available positions.</p></div><!--[if lte IE 9]><script src="//cdnjs.cloudflare.com/ajax/libs/placeholders/3.0.2/placeholders.min.js"></script><![endif]--></div>]]></description>
        </item>
        <item>
            <title><![CDATA[New Apple security feature reboots iPhones after 3 days, researchers confirm (273 pts)]]></title>
            <link>https://techcrunch.com/2024/11/14/new-apple-security-feature-reboots-iphones-after-3-days-researchers-confirm/</link>
            <guid>42143265</guid>
            <pubDate>Fri, 15 Nov 2024 01:55:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2024/11/14/new-apple-security-feature-reboots-iphones-after-3-days-researchers-confirm/">https://techcrunch.com/2024/11/14/new-apple-security-feature-reboots-iphones-after-3-days-researchers-confirm/</a>, See on <a href="https://news.ycombinator.com/item?id=42143265">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p id="speakable-summary">Apple’s new iPhone software comes with a novel security feature that reboots the phone if it’s not unlocked for 72 hours, according to security researchers.</p>

<p>Last week, <a rel="nofollow" href="https://www.404media.co/police-freak-out-at-iphones-mysteriously-rebooting-themselves-locking-cops-out/">404 Media reported</a> that law enforcement officers and forensic experts were concerned that some iPhones were rebooting themselves under mysterious circumstances, which made it harder for them to get access to the devices and extract data. Citing security researchers, 404 Media <a href="https://www.404media.co/police-freak-out-at-iphones-mysteriously-rebooting-themselves-locking-cops-out/" target="_blank" rel="noreferrer noopener nofollow">later reported</a> that iOS 18 had a new “inactivity reboot” feature that forced the devices to restart.&nbsp;</p>







<p>Now we know exactly how long it takes for this feature to kick in.</p>

<p>On Wednesday, Jiska Classen, a researcher at the Hasso Plattner Institute and one of the first security experts to spot this new feature, <a href="https://x.com/naehrdine/status/1856802400897503487" target="_blank" rel="noreferrer noopener nofollow">published a video</a> demonstrating the “inactivity reboot” feature. The video shows that an iPhone left alone without being unlocked reboots itself after 72 hours.</p>

<figure><div>
<blockquote data-width="500" data-dnt="true"><div lang="en" dir="ltr"><p>See the latest iOS inactivity reboot in action!</p><p>iOS 18 comes with improved anti-theft measures. Three days w/o unlock, the iPhone will reboot, preventing thieves from getting your data. (1/4) <a rel="nofollow" href="https://t.co/H24Tfo1cSr">pic.twitter.com/H24Tfo1cSr</a></p></div>— Jiska (@naehrdine) <a rel="nofollow" href="https://twitter.com/naehrdine/status/1856802400897503487?ref_src=twsrc%5Etfw">November 13, 2024</a></blockquote>
</div></figure>

<p>Magnet Forensics, a company that provides digital forensic products including the iPhone and Android data extraction tool Graykey, <a href="https://www.magnetforensics.com/blog/understanding-the-security-impacts-of-ios-18s-inactivity-reboot/" target="_blank" rel="noreferrer noopener nofollow">also confirmed</a> that the timer for the feature is 72 hours.&nbsp;&nbsp;</p>

<p>“Inactivity reboot” effectively puts iPhones in a more secure state by locking the user’s encryption keys in the iPhone’s secure enclave chip.&nbsp;</p>

<p>“Even if thieves leave your iPhone powered on for a long time, they won’t be able to unlock it with cheaper, outdated forensic tooling,” Classen wrote on X. “While inactivity reboot makes it more challenging for law enforcement to get data from devices of criminals, this won’t lock them out completely. Three days is still plenty of time when coordinating steps with professional analysts.”</p>

<div>
			<h4>Contact Us</h4><p>
			Do you work for a mobile forensics company or law enforcement? We’d love to hear from you. From a non-work device, you can contact Lorenzo Franceschi-Bicchierai securely on Signal at +1 917 257 1382, or via Telegram and Keybase @lorenzofb, or <a href="mailto:lorenzo@techcrunch.com/">email</a><a href="mailto:lorenzo@techcrunch.com/">.</a> You also can contact TechCrunch via <a href="https://techcrunch.com/got-a-tip/">SecureDrop</a>.		</p></div>
		

<p>iPhones have two different states that can affect the ability of law enforcement, forensic experts, or hackers, to unlock them by brute-forcing the user’s passcode, or extracting data by exploiting security flaws in the iPhone software. These two states are “Before First Unlock,” or BFU, and “After First Unlock,” or AFU. </p>

<p>When the iPhone is in BFU state, the user’s data on their iPhone is fully encrypted and near-impossible to access, unless the person trying to get in knows the user’s passcode. In AFU state, on the other hand, certain data is unencrypted and may be easier to extract by some device forensic tools — even if the phone is locked.&nbsp;</p>

<p>An iPhone security researcher who goes by Tihmstar told TechCrunch that the iPhones in those two states are also referred to as “hot” or “cold” devices.&nbsp;</p>







<p>Tihmstar said that many forensic companies focus on “hot” devices in an AFU state, because at some point the user entered their correct passcode, which is stored in the memory of the iPhone’s secure enclave. By contrast, “cold” devices are far more difficult to compromise because their memory cannot be easily extracted once the phone restarts.</p>

<p>For years, Apple has added new security features that <a href="https://techcrunch.com/2020/05/22/the-fbi-is-mad-because-it-keeps-getting-into-locked-iphones-without-apples-help/">law enforcement have opposed and spoken out against</a>, arguing that they are making their job harder. In 2016, the <a href="https://techcrunch.com/2016/03/13/why-apple-is-right-to-resist-the-fbi/">FBI took Apple to court</a> in an effort to force the company to build a backdoor to unlock the iPhone of a mass-shooter. Eventually, the Australian startup Azimuth Security <a href="https://www.washingtonpost.com/technology/2021/04/14/azimuth-san-bernardino-apple-iphone-fbi/" target="_blank" rel="noreferrer noopener nofollow">helped the FBI</a> hack into the phone.&nbsp;</p>

<p>Apple did not respond to a request for comment.&nbsp;</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Are We PEP740 Yet? (112 pts)]]></title>
            <link>https://trailofbits.github.io/are-we-pep740-yet/</link>
            <guid>42142864</guid>
            <pubDate>Fri, 15 Nov 2024 00:36:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://trailofbits.github.io/are-we-pep740-yet/">https://trailofbits.github.io/are-we-pep740-yet/</a>, See on <a href="https://news.ycombinator.com/item?id=42142864">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
                <h2 id="what-pep740">What is PEP 740?</h2>
                <p>
                    <a href="https://peps.python.org/pep-0740/">PEP 740</a> is a Python standard
                    for defining cryptographically verifiable attestations hosted by indices like
                    PyPI.
                </p>
                <h2 id="what">What are attestations?</h2>
                <p>
                    Attestations are digitally signed, publicly verifiable statements about Python
                    packages, including their <em>provenance</em> (e.g., the exact source repository
                    that produced them).
                </p>
                <p>
                    Attestations are built on top of <a href="https://sigstore.dev/">Sigstore</a>
                    and use short-lived signing keys bound to trusted identities
                    (like <a href="https://docs.pypi.org/trusted-publishers/">Trusted Publishers</a>),
                    making them misuse-resistant and less susceptible to key loss and theft.
                </p>
                <h2 id="about-list">What is this list?</h2>
                <p>This site shows the top 360 most-downloaded packages on <a href="https://pypi.org/">PyPI</a> showing which have been uploaded with attestations.</p>
                <ul>
                    <li><span>Green</span> packages <span id="success-percent"></span> with a 🔏 offer attestations for verification</li>
                    <li><span>Uncolored</span> packages <span id="default-percent"></span> with a ⏰ were last uploaded before attestations were available</li>
                    <li><span>Yellow</span> packages <span id="todo-percent"></span> have no attestations uploaded (yet!)</li>
                </ul>
                <p>Packages that are known to be deprecated are not included (for example, distribute). If your package is incorrectly listed, please <a href="https://github.com/trailofbits/are-we-pep740-yet/issues/">create a ticket</a>.</p>
                <h2 id="creating-wheels">My package is uncolored. What can I do?</h2>
                <p>
                    Using a Trusted Publisher is the easiest way to enable attestations, since they come baked in!
                    See <a href="https://docs.pypi.org/trusted-publishers/adding-a-publisher/">the PyPI user docs</a>
                    and <a href="https://github.com/pypa/gh-action-pypi-publish">official PyPA publishing action</a>
                    to get started.
                </p>
                <p>
                    For projects already using the official PyPA publishing action, you can upgrade to <a href="https://github.com/pypa/gh-action-pypi-publish/releases/tag/v1.11.0">v1.11.0</a> or later
                    to automatically enable attestations for the next release of the project. We recommend upgrading to the latest version of the action to receive any bug fixes.
                </p>
                <h2 id="bugs">Something's wrong with this page!</h2>
                <p>Fantastic, a problem found is a problem fixed. Please <a href="https://github.com/trailofbits/are-we-pep740-yet/issues/">create a ticket</a>!</p>
                <p>You can also <a href="https://github.com/trailofbits/are-we-pep740-yet/pulls/">submit a pull-request</a>.</p>
                <p><em>Note: </em>Requests for behavioural changes in the packaging tools themselves should be directed to <a href="https://discuss.python.org/c/packaging/14">discuss.python.org</a> and the <a href="https://github.com/pypa/packaging-problems">Python Packaging Authority</a>.</p>
                <h2 id="thanks">Thanks</h2>
                <p>This is a derivative work of <a href="https://hugovk.github.io/free-threaded-wheels/">Free-Threaded Wheels</a>,
                    which is itself a derivative of <a href="https://pythonwheels.com/">Python Wheels</a>,
                    a site that tracks which Python distributions ship the wheel distribution.
                    The top 360 list comes from <a href="https://hugovk.github.io/top-pypi-packages/">Top PyPI Packages</a>.</p>
                <p>Thanks also to the many <a href="https://github.com/trailofbits/are-we-pep740-yet/graphs/contributors">contributors</a>.</p>
            </div><div>
                <p><span ng-hide="packages">pythonwheels.com requires javascript to be enabled to display the list of packages.</span>
                    <a ng-repeat="package in packages" ng-href="https://pypi.org/project/{{ package.name }}" ng-attr-title="{{package.title}}">
                        <span ng-bind="package.name"></span>
                        <span ng-bind="package.icon"></span>
                    </a>
                </p>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Matrix Client Tutorial (135 pts)]]></title>
            <link>https://uhoreg.gitlab.io/matrix-tutorial/index.html</link>
            <guid>42142790</guid>
            <pubDate>Fri, 15 Nov 2024 00:26:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://uhoreg.gitlab.io/matrix-tutorial/index.html">https://uhoreg.gitlab.io/matrix-tutorial/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=42142790">Hacker News</a></p>
<div id="readability-page-1" class="page"><article role="main">
<section id="matrix-client-tutorial">

<div>
<p>Warning</p>
<p>This book is a work in progress.  Most of the information that it contains
should be correct, but it is not complete.</p>
</div>
<p>Welcome to the Matrix.  <a href="https://matrix.org/" rel="nofollow noopener">Matrix</a> is an open protocol for
decentralised communication.  Matrix allows users on different servers to
communicate with each other, similar to how people on different email servers
can email each other.</p>
<p>This book is an introduction to creating a client using the <a href="https://spec.matrix.org/unstable/client-server-api/#" rel="nofollow noopener">Matrix
Client-Server API</a>.  It will show how to make HTTP
calls to a Matrix homeserver, and discuss issues that clients will need to
consider, such as reliability and security issues.  It does not attempt to be a
comprehensive guide to the entire Client-Server API, but will point you to the
relevant portions of spec for further details.</p>
<p>You should read this book if:</p>
<ul>
<li><p>you are creating a Matrix library/SDK,</p></li>
<li><p>you are writing a Matrix client without the use of a library/SDK, or</p></li>
<li><p>you want to get a better understanding of how Matrix works.</p></li>
</ul>
<p>If you are creating a Matrix client using a library/SDK, some of the
information in this book may still be useful, but some things will already be
handled by your library/SDK.</p>
<p>We assume that you have:</p>
<ul>
<li><p>an understanding of JSON encoding,</p></li>
<li><p>an understanding of HTTP requests, including HTTP status codes, headers, and
different types of requests (<code>GET</code>, <code>POST</code>, etc.),</p></li>
<li><p>experience writing asynchronous code in your preferred programming language.</p></li>
</ul>
<p>This book is written in a <a href="https://en.wikipedia.org/wiki/Literate_programming" rel="nofollow noopener">literate
programming</a> style, which
interleaves code blocks and text.  In short, code blocks are named, and can
reference other code blocks using the syntax <code>{{other code block name}}</code>, which
will insert the code blocks with the given name in place of the reference.
Multiple code blocks can have the same name, in which case they are inserted in
the order that they appear in the book (though in many cases, the order does
not matter).  This allows us to, for example, have a reference such as <code>{{class Foo methods}}</code>, and define the methods of the <code>Foo</code> class in multiple chunks.</p>
<p>The code output of this book will be a library that a Matrix client could use.
The actual user interface for a client is out of scope for this book, although
for some topics, there may be discussion on how clients may wish to display
things to the user.</p>
<p>The code is written in Python using <a href="https://docs.aiohttp.org/" rel="nofollow noopener"><code>aiohttp</code></a>, but
the rest of the content should apply any other programming languages and most
of the code should be easy to port to another language.</p>
<div>
<p>Note</p>
<p>The main purpose of the example code here is to illustrate how the Matrix
Client-Server API is used, rather than to develop a fully-featured library.
While the library generated should be usable for simple situations, it may make
some tradeoffs differently from what a “real” Matrix library would make.  These
tradeoffs will be discussed in the text where appropriate.</p>
</div>
<p>The source for this book, including the example code, is available at
<a href="https://gitlab.com/uhoreg/matrix-tutorial" rel="nofollow noopener">https://gitlab.com/uhoreg/matrix-tutorial</a>.  We will call our Matrix library
the very unimaginative name <code>matrixlib</code>.</p>
<div data-controller="code"><pre><code><span># {{copyright}}</span>

<span>"""Matrix client library example"""</span>
</code></pre></div>
<p>The main entry point for our library will be a <code>client</code> module.  It will
contain helper functions and a <a href="https://uhoreg.gitlab.io/matrix-tutorial/client.html"><span><code>Client</code> class</span></a>, representing a
client connection.</p>
<div data-controller="code"><pre><code><span># {{copyright}}</span>

<span>"""General Matrix client functionality"""</span>

<span>import</span> <span>aiohttp</span>
<span>import</span> <span>asyncio</span>
<span>import</span> <span>logging</span>
<span>import</span> <span>math</span>
<span>import</span> <span>os</span>
<span>import</span> <span>re</span>
<span>import</span> <span>sys</span>
<span>import</span> <span>time</span>
<span>import</span> <span>typing</span>
<span>from</span> <span>urllib.parse</span> <span>import</span> <span>quote</span> <span>as</span> <span>urlquote</span><span>,</span> <span>urljoin</span><span>,</span> <span>urlparse</span>

<span>from</span> <span>.</span> <span>import</span> <span>error</span>
<span>from</span> <span>.</span> <span>import</span> <span>events</span>
<span>from</span> <span>.</span> <span>import</span> <span>pubsub</span>
<span>from</span> <span>.</span> <span>import</span> <span>schema</span>


<span>{{</span><span>client</span> <span>module</span> <span>classes</span><span>}}</span>


<span>{{</span><span>client</span> <span>module</span> <span>functions</span><span>}}</span>
</code></pre></div>
<p>In the first chapter of this book, we will discover the basics of the Matrix
Client-Server API.  We will learn how to make requests to the homeserver, log
in and out, and send and receive messages.  Using this, we will create a simple
echo bot.</p>
<div>
<p role="heading"><span>The basics</span></p>
<ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/base.html">Base concepts</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/base.html#api-requests">API Requests</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/discovery.html">Discovery</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/discovery.html#example-discovery-script">Example: Discovery script</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/client.html">The Client class</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/client.html#publish-subscribe">Publish/Subscribe</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/login.html">Logging in</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/login.html#logging-in-with-a-password">Logging in with a password</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/login.html#single-sign-on">Single Sign-On</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/login.html#example-login-script">Example: login script</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/authentication.html">Authenticated requests</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/authentication.html#refresh-tokens">Refresh tokens</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/authentication.html#soft-logout">Soft logout</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/authentication.html#logging-out">Logging out</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/authentication.html#example-logout-script">Example: logout script</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/events.html">Events</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/events.html#message-events">Message events</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/events.html#state-events">State events</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/sending.html">Sending events to a room</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/sending.html#message-events">Message events</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/sending.html#example-send-a-message">Example: send a message</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/sending.html#state-events">State events</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/sync.html">Receiving events in a room: the sync loop</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/sync.html#receiving-room-events">Receiving room events</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/sync.html#example-echo-bot">Example: echo bot</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/sync.html#tracking-room-state">Tracking room state</a></li>
</ul>
</li>
</ul>
</div>
<p>In the second(?) chapter, we will look at how to perform end-to-end encryption
in Matrix.  We will extend the echo bot from the previous part so that it works
in encrypted rooms.  If you do not need encryption, you may skip this part.</p>
<div>
<p role="heading"><span>End-to-end encryption</span></p>
<ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/encryption.html">End-to-end encryption</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/encryption.html#a-brief-history-of-encryption">A brief history of encryption</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/encryption.html#usability-issues">Usability issues</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/encryption.html#handling-secure-data">Handling secure data</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/encryption.html#olm-and-megolm">Olm and Megolm</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/device_keys.html">Device keys and one-time keys</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/device_keys.html#uploading-device-keys">Uploading device keys</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/device_keys.html#signing-json">Signing JSON</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/device_keys.html#uploading-one-time-and-fallback-keys">Uploading one-time and fallback keys</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/device_tracking.html">Device Tracking</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/device_tracking.html#edge-cases">Edge cases</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/megolm.html">Encrypting with Megolm</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/megolm.html#getting-the-session-key-for-sending-to-recipients">Getting the session key for sending to recipients</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/megolm.html#encrypting">Encrypting</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/megolm.html#decrypting">Decrypting</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/olm.html">Encrypting with Olm</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/olm.html#initiating-a-channel">Initiating a channel</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/olm.html#encrypting">Encrypting</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/olm.html#decrypting">Decrypting</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/olm.html#loading-a-channel-from-storage">Loading a channel from storage</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/olm.html#claiming-one-time-keys">Claiming one-time keys</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/to_device.html">Sending and receiving to-device events</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/to_device.html#sending-events">Sending events</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/to_device.html#receiving-events">Receiving events</a></li>
</ul>
</li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/tying_together_megolm.html">Tying together the Olm/Megolm pieces</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/tying_together_megolm.html#decrypting-to-device-events">Decrypting to-device events</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/tying_together_megolm.html#decrypting-room-events">Decrypting room events</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/tying_together_megolm.html#checking-if-a-encryption-is-enabled">Checking if a encryption is enabled</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/tying_together_megolm.html#encrypting-to-device-events">Encrypting to-device events</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/tying_together_megolm.html#encrypting-room-events">Encrypting room events</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/tying_together_megolm.html#example-encrypted-echo-bot">Example: encrypted echo bot</a></li>
</ul>
</li>
</ul>
</div>
<div id="id1">
<p>Todo</p>
<p>more topics, e.g.</p>
<ul>
<li><p>media repo</p>
<ul>
<li><p>URL previews</p></li>
</ul>
</li>
<li><p>user management</p>
<ul>
<li><p>registering</p></li>
<li><p>device management</p></li>
<li><p>displayname, avatar</p></li>
<li><p>3PIDs</p></li>
</ul>
</li>
<li><p>interacting with rooms</p>
<ul>
<li><p>create room</p></li>
<li><p>room versions and upgrades</p></li>
<li><p>spaces</p></li>
<li><p>room tags</p></li>
<li><p>room directory</p></li>
<li><p>DMs</p></li>
<li><p>invites, knocking</p></li>
<li><p>security issues</p>
<ul>
<li><p>disambiguation, homographs</p></li>
</ul>
</li>
</ul>
</li>
<li><p>more messaging features</p>
<ul>
<li><p>reactions</p></li>
<li><p>edits</p></li>
<li><p>redactions</p></li>
<li><p>IM features (mentions, spoilers, etc)</p></li>
<li><p>typing notifications</p></li>
<li><p>read receipts</p></li>
<li><p>presence</p></li>
</ul>
</li>
<li><p>more on getting events</p>
<ul>
<li><p>navigating within rooms (backfilling, jumping to a message, how to handle having
multiple chunks of timeline)</p></li>
<li><p>sync filtering, lazy loading</p></li>
<li><p>push rules/notifications</p></li>
</ul>
</li>
<li><p>VoIP</p></li>
<li><p>widgets</p></li>
<li><p>how to test</p></li>
<li><p>what client authors need to understand about federation</p></li>
</ul>
</div>
<div>
<p role="heading"><span>Appendices</span></p>
<ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/module_doc.html">Module documentation</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/further_reading.html">Further reading</a><ul>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/further_reading.html#general">General</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/further_reading.html#security">Security</a></li>
<li><a href="https://uhoreg.gitlab.io/matrix-tutorial/further_reading.html#encryption">Encryption</a></li>
</ul>
</li>
</ul>
</div>
<div data-controller="code"><pre><code>Copyright Hubert Chathi &lt;hubert@uhoreg.ca&gt;

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
</code></pre></div>
<p>The theme used is based on <a href="https://sphinxawesome.xyz/" rel="nofollow noopener">Awesome Sphinx Theme</a>
by Kai Welke.  The main text is set in <a href="https://rsms.me/inter/" rel="nofollow noopener">Inter</a> by
Rasmus Andersson, with <a href="https://github.com/mozilla/Fira" rel="nofollow noopener">Fira Mono</a> by Erik
Spiekermann and Ralph du Carrois used for monospaced text.</p>
</section>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Analysis of economic and productivity losses caused by cookie banners in Europe (322 pts)]]></title>
            <link>https://legiscope.com/blog/hidden-productivity-drain-cookie-banners.html</link>
            <guid>42141843</guid>
            <pubDate>Thu, 14 Nov 2024 22:23:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://legiscope.com/blog/hidden-productivity-drain-cookie-banners.html">https://legiscope.com/blog/hidden-productivity-drain-cookie-banners.html</a>, See on <a href="https://news.ycombinator.com/item?id=42141843">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Cookie banners have become a pervasive feature of the modern web, frustrating users who seek a seamless browsing experience. In Europe, consent banners are mandated by an old directive from 2002, the <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=celex%3A32002L0058">ePrivacy Directive 2002/58</a>, which requires websites to obtain informed consent before storing or accessing information on users’ devices. While the intention behind these regulations is to enhance privacy protection, the actual impact on user privacy is insignificant, as most cookie banners are used to facilitate web analytics, understand user behavior, manage ad efficiency, or keyword traffic. Moreover, actively tracking a user beyond their visit to a website is difficult or borderline impossible for website owners, as it would require a court order.</p>
<p>Understanding the true cost of these consent prompts in the European economy is therefore necessary. Our calculations reveal that collectively, Europeans <strong>spend over 575 million hours annually on consent prompts</strong>. At a time when the European economy faces significant challenges in competitiveness compared to the US and China <a href="https://www.youtube.com/watch?v=Ias1Glgi5SE">as recently highlighted by President Macron</a>, it is crucial to examine the data and the legal framework that underpins these requirements.</p>
<h2>The Productivity Cost of Cookie Banners</h2>
<p>To grasp the profound impact of cookie banners on European productivity and the economy, we need to break down the calculations. Starting with the total population of the European Union in 2024, which is approximately <a href="https://ec.europa.eu/eurostat/web/products-eurostat-news/w/ddn-20240711-1">449.2 million people</a>, we assume an <a href="https://ec.europa.eu/eurostat/statistics-explained/index.php?title=Digital_society_statistics_at_regional_level&amp;oldid=630715#:~:text=In%202023%2C%20the%20share%20of,or%20in%20cities%20(94.9%25).">internet penetration rate of around 90%</a>, resulting in 404.28 million internet users.</p>
<p>On average, a user visits <a href="https://bloggingwizard.com/website-statistics/#:~:text=On%20average%20internet%20users%20in,pages%20on%20a%20daily%20basis.">about 100 websites per month</a>, totaling 1,200 websites per year. With about 85% of these websites displaying a cookie banner, a user will encounter about 1,020 cookie banners every year. Assuming it takes an average of 5 seconds per interaction with a cookie banner, this amounts to 5,100 seconds per year per user, or roughly 1.42 hours per year.</p>
<p>Multiplying this by the total number of internet users in the EU, we reach the following total time: 404.28 million users × 1.42 hours/year ≈ <strong>575 million hours/year</strong>.</p>
<p>Below is an estimated distribution based on population and internet usage rates:</p>
<table>
<thead>
<tr>
<th>Country</th>
<th>Population (millions)</th>
<th>Internet Users (millions)</th>
<th>Annual Hours Spent (millions)</th>
<th>Total Cost (€ Billion)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Germany</td>
<td>84</td>
<td>75.6</td>
<td>107.35</td>
<td>2.68</td>
</tr>
<tr>
<td>France</td>
<td>68</td>
<td>61.2</td>
<td>86.85</td>
<td>2.17</td>
</tr>
<tr>
<td>Italy</td>
<td>59</td>
<td>53.1</td>
<td>75.37</td>
<td>1.88</td>
</tr>
<tr>
<td>Spain</td>
<td>47</td>
<td>42.3</td>
<td>60.04</td>
<td>1.50</td>
</tr>
<tr>
<td>Poland</td>
<td>38</td>
<td>34.2</td>
<td>48.57</td>
<td>1.21</td>
</tr>
<tr>
<td>Netherlands</td>
<td>17</td>
<td>15.3</td>
<td>21.73</td>
<td>0.54</td>
</tr>
<tr>
<td>Belgium</td>
<td>12</td>
<td>10.8</td>
<td>15.34</td>
<td>0.38</td>
</tr>
<tr>
<td>Sweden</td>
<td>11</td>
<td>9.9</td>
<td>14.07</td>
<td>0.35</td>
</tr>
<tr>
<td>Austria</td>
<td>9</td>
<td>8.1</td>
<td>11.50</td>
<td>0.29</td>
</tr>
<tr>
<td>Other Countries</td>
<td>104.2</td>
<td>93.78</td>
<td>134.18</td>
<td>3.35</td>
</tr>
<tr>
<td><strong>Total</strong></td>
<td><strong>449.2</strong></td>
<td><strong>404.28</strong></td>
<td><strong>575.0</strong></td>
<td><strong>14.35</strong></td>
</tr>
</tbody>
</table>
<p><em>Note: “Other Countries” encompass the remaining European Union nations.</em></p>
<p>To translate the lost time into economic terms, we can assign a monetary value to the hours spent on cookie banners. With an average hourly wage in Europe of €25, the total economic cost can be calculated as 575,000,000 hours × €25/hour = <strong>€14.375 billion</strong>. Considering the EU Annual GDP (2024) of approximately €15 trillion, the economic cost of cookie banners represents: (€14.375 billion ÷ €15 trillion) × 100 ≈ <strong>0.10% of total EU GDP</strong>.</p>
<p>To grasp the scale of the productivity loss, we can consider the number of full-time employees (FTEs) that represent the lost hours. Assuming a full-time worker dedicates approximately 2,000 hours annually, 575,000,000 hours ÷ 2,000 hours/FTE = <strong>287,500 FTEs</strong>. This means the <strong>overall cost of clicking on cookie banners is equivalent to a company of 287,500 employees spending an 8-hour workday clicking on cookie banners</strong>.</p>
<h2>Do Cookie Banners Really Improve Privacy?</h2>
<p>Contrary to popular belief, cookie banners were not introduced by the GDPR but by the <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=celex%3A32002L0058">ePrivacy Directive 2002/58</a>, at a time when cookies were just becoming known to the public. In response to fears of global surveillance, regulators imposed a general principle of consent before any data could be stored on a user’s communication devices:</p>
<blockquote>
<p><em>“Art. 5.3: Member States shall ensure that the use of electronic communications networks to store information or to gain access to information stored in the terminal equipment of a subscriber or user is only allowed on condition that the subscriber or user concerned is provided with clear and comprehensive information in accordance with Directive 95/46/EC, inter alia about the purposes of the processing, and is offered the right to refuse such processing by the data controller.”</em></p>
</blockquote>
<p>The ePrivacy Directive was intended to be updated, but the project never materialized.</p>
<p>Today, most cookie banners are used by organizations to:</p>
<ul>
<li>Facilitate web analytics and understand user interactions with their websites.</li>
<li>Improve user experience by analyzing what content performs well or poorly.</li>
<li>Manage the performance of advertisements.</li>
</ul>
<p>For the most part, small businesses use cookies efficiently without precise user identification. Identifying users typically requires a court order to process IP addresses, which is rarely pursued. Therefore, cookie banners primarily serve to mitigate theoretical legal risks rather than enforce extensive user tracking.</p>
<p>It is not to say that some businesses do not use cookies to operate user tracking on a massive scale. Some companies relying exclusively on advertising do share user data with very large pools of partners—sometimes hundreds of ad partners. In that case, cookie banners do offer privacy protections for users.</p>
<p>However, looking at the general scale of the internet, only a very small fraction of websites use mass-scale partnerships as their main economic model.</p>
<p>For users, repeated interactions with cookie banners lead to significant frustration and complete loss of vigilance. The consent fatigue results in users mindlessly accepting terms without proper consideration, thereby undermining the very intent of the regulations. The constant barrage of consent prompts not only reduces productivity but diminishes user satisfaction and erodes trust in online platforms.</p>
<h2>Conclusion</h2>
<p>The realization that <strong>Europeans spend 575 million hours annually clicking on cookie banners</strong> highlights a significant, yet often overlooked, economic and productivity drain. These processes deliver minimal privacy benefits and little enhancement to business performance.</p>
<p>In contrast, regulations like the <a href="https://eur-lex.europa.eu/eli/reg/2016/679/oj">GDPR</a> impose IT security obligations that, while seen as burdensome, contribute to long-term business robustness by ensuring the security of IT systems.</p>
<p>This situation calls for an urgent revision of the ePrivacy Directive—potentially transforming it into a regulation to ensure swift adoption. Exemptions from cookie banners for small and medium-sized businesses (SMBs) using analytics, tracking user interactions on their websites, and managing basic advertising are imperative to mitigate unnecessary economic and productivity losses.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In Memoriam: Thomas E. Kurtz, 1928–2024 (358 pts)]]></title>
            <link>https://computerhistory.org/blog/in-memoriam-thomas-e-kurtz-1928-2024/</link>
            <guid>42141761</guid>
            <pubDate>Thu, 14 Nov 2024 22:12:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://computerhistory.org/blog/in-memoriam-thomas-e-kurtz-1928-2024/">https://computerhistory.org/blog/in-memoriam-thomas-e-kurtz-1928-2024/</a>, See on <a href="https://news.ycombinator.com/item?id=42141761">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	<h2>2023 CHM Fellow</h2>
<p>With deep sadness, we say goodbye to computer pioneer Thomas Kurtz.</p>
<p>Thomas Eugene Kurtz (Feb. 22 1928–Nov. 12, 2024) was an American mathematician, computer scientist and co-inventor, with John Kemeny, of the BASIC programming language and Dartmouth Timesharing System.</p>
<p>In the early days of academic computing in the 1960s, there were no simple non-professional programming languages available for undergraduates. BASIC was aimed at this audience. To realize their vision, Kurtz and Kemeny concurrently developed the Dartmouth Timesharing System, allowing BASIC to be accessed by students around campus using Teletype terminals.</p>
<h2>Finding a Calling</h2>
<p>Born in Oak Park Illinois, Kurtz graduated from Knox College in 1950, and received his PhD in mathematics from Princeton University in 1956. In 1951, Kurtz was fortunate in obtaining rare experience on a computer—the pioneering SWAC machine created by the National Bureau of Standards and housed at UCLA. SWAC, the Standards Western Automatic Computer, was among the earliest electronic computers in the United States and was supervised by legendary computer pioneer and 2013 CHM Fellow Harry Huskey.</p>
<p>Kurtz began teaching at Dartmouth upon receiving his PhD. After a few years, he and fellow professor John Kemeny developed the original version of the Dartmouth Timesharing System (DTSS), a method of sharing computer access across a network and a requirement for allowing multiple students access to BASIC.</p>

<div id="attachment_31173"><p><img aria-describedby="caption-attachment-31173" src="https://computerhistory.org/wp-content/uploads/2024/11/500004056-03-01.jpg" alt="" width="600" height="416"></p><p id="caption-attachment-31173">John Kemeny (left) and Thomas Kurtz (right), ca. 1964. Courtesy of the Darmouth College Library</p></div>

<p>DTSS was the earliest successful, large-scale timesharing system, a remarkable achievement. General Electric, which had donated computers to Dartmouth, extended DTSS into the kernel of their online services, such as Genie. DTSS was unveiled on May 1, 1964, along with BASIC. By that fall, hundreds of students were exploring BASIC on the 20 terminals around campus.</p>

<div id="attachment_31174"><p><img aria-describedby="caption-attachment-31174" src="https://computerhistory.org/wp-content/uploads/2024/11/Dartmouth-timesharing-system-1024x669.jpg" alt="" width="1024" height="669"></p><p id="caption-attachment-31174">General Electric GE-225 mainframe computer, home to the Dartmouth Timesharing System, ca. 1967. Courtesy of the Dartmouth College Library</p></div>

<h2>Making an Impact</h2>
<p>Since its inception, the BASIC language has flourished across multiple generations of computers—from mainframes and minicomputers in the 1960s, to microcomputers in the 1970s and ‘80s to the credit-card sized Raspberry Pi computer of today. In 1978, Harvard students Bill Gates and Paul Allen wrote their first version of BASIC for a new hobbyist-oriented microcomputer, the MITS Altair 8800. Their version of BASIC turned the Altair from a blinking box with few capabilities into a useful computer, and BASIC’s popularity skyrocketed again during the personal computer era.</p>
<h2>A Storied Career</h2>
<p>From 1966 to 1975, Kurtz served as the director of the Kiewit Computation Center at Dartmouth and as director of the Office of Academic Computing from 1975 to 1978. In 1979, he and Stephen J. Garland organized a professional master's program in Computer and Information Systems, funded in part with a grant from IBM.</p>
<p>In 1983, Kurtz joined Kemeny and three former Dartmouth students in forming True BASIC, Inc., whose purpose was to develop quality educational software and a platform-independent BASIC compiler. Upon termination of the CIS program in 1988, Kurtz returned to teaching and retired from Dartmouth in 1993.</p>
<p>Kurtz served as council chairman and trustee of EDUCOM and on the so-called Pierce Panel of the President's Advisory Committee. He also served on the steering committee for two NSF- and ARPA-supported activities and was the chair of the first CCUC conference on instructional computing. He helped form American National Standards committee X3J2, which developed the ANSI standard for BASIC, serving as chair from 1974 to 1985. Kurtz was a member of the ISO committee SC22/WG8, concerned with the international standard for BASIC, and served as its convener from 1987 to 1993. In 1994, he was inducted as a Fellow of the ACM.</p>
<h2>Learn More</h2>
<p><a href="https://computerhistory.org/blog/2023-fellow-award-ceremony/" target="_blank" rel="noopener">2023 Fellow Award Ceremony</a></p>
<p>The development of the Dartmouth time-sharing system <a href="https://www.youtube.com/watch?v=Zqv5A1XR04g" target="_blank" rel="noopener">video</a>.</p>
<p>Thomas Kurtz's granddaughters shares his thoughts on developing the time-sharing system in this <a href="https://www.youtube.com/watch?v=n6SWF_9ILGI" target="_blank" rel="noopener">video</a>.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Visual Basic 6 IDE recreated in C# (361 pts)]]></title>
            <link>https://github.com/BAndysc/AvaloniaVisualBasic6</link>
            <guid>42141587</guid>
            <pubDate>Thu, 14 Nov 2024 21:47:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/BAndysc/AvaloniaVisualBasic6">https://github.com/BAndysc/AvaloniaVisualBasic6</a>, See on <a href="https://news.ycombinator.com/item?id=42141587">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Avalonia Visual Basic 6</h2><a id="user-content-avalonia-visual-basic-6" aria-label="Permalink: Avalonia Visual Basic 6" href="#avalonia-visual-basic-6"></a></p>
<p dir="auto">A recreation of the classic Visual Basic 6 IDE and language in C# using Avalonia.</p>
<p dir="auto">This is a fun, toy project with no commercial intent. All rights to the Visual Basic name, icons, and graphics belong to Microsoft Corporation.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto"><a href="https://bandysc.github.io/AvaloniaVisualBasic6/" rel="nofollow">&gt;&gt; Open the web version in your browser! &lt;&lt;</a></h3><a id="user-content--open-the-web-version-in-your-browser-" aria-label="Permalink: >> Open the web version in your browser! <<" href="#-open-the-web-version-in-your-browser-"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>Visual Designer</li>
<li>Save and load projects in VB6-compatible format</li>
<li>Run projects</li>
<li>VB6 language support (limited)</li>
</ul>
<p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/BAndysc/AvaloniaVisualBasic6/refs/heads/master/examples/img_vb6.gif"><img src="https://raw.githubusercontent.com/BAndysc/AvaloniaVisualBasic6/refs/heads/master/examples/img_vb6.gif" alt="Avalonia Visual Basic" data-animated-image=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Building the Desktop Version</h2><a id="user-content-building-the-desktop-version" aria-label="Permalink: Building the Desktop Version" href="#building-the-desktop-version"></a></p>
<p dir="auto">You'll generally need <a href="https://dotnet.microsoft.com/en-us/download/dotnet/9.0" rel="nofollow">.NET 9.0</a>, though you can modify <code>Directory.Build.props</code> to use .NET 8.0 if preferred (version 9.0 is required for the browser version).</p>
<p dir="auto">To build, simply run:</p>
<div data-snippet-clipboard-copy-content="dotnet build AvaloniaVisualBasic/AvaloniaVisualBasic.Desktop.csproj"><pre><code>dotnet build AvaloniaVisualBasic/AvaloniaVisualBasic.Desktop.csproj
</code></pre></div>
<p dir="auto">If you encounter <a href="https://github.com/BAndysc/AvaloniaVisualBasic6/issues/2" data-hovercard-type="issue" data-hovercard-url="/BAndysc/AvaloniaVisualBasic6/issues/2/hovercard">Antlr4 errors</a>, this likely means the <code>Antlr4BuildTasks</code> library couldn't automatically download Java. Installing Java manually should resolve the issue.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Publishing the Desktop Version and Making <code>Make Publish</code> Work</h3><a id="user-content-publishing-the-desktop-version-and-making-make-publish-work" aria-label="Permalink: Publishing the Desktop Version and Making Make Publish Work" href="#publishing-the-desktop-version-and-making-make-publish-work"></a></p>
<p dir="auto">Publish both IDE project (AvaloniaVisualBasic.Desktop) and runtime (AvaloniaVisualBasic.Standalone):</p>
<div data-snippet-clipboard-copy-content="dotnet publish AvaloniaVisualBasic.Desktop -f net9.0 -o bin/
dotnet publish AvaloniaVisualBasic.Standalone -f net9.0 -o bin/standalone/"><pre><code>dotnet publish AvaloniaVisualBasic.Desktop -f net9.0 -o bin/
dotnet publish AvaloniaVisualBasic.Standalone -f net9.0 -o bin/standalone/
</code></pre></div>
<p dir="auto">Now you can run <code>./bin/AvaloniaVisualBasic.Desktop</code>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Thanks to</h2><a id="user-content-thanks-to" aria-label="Permalink: Thanks to" href="#thanks-to"></a></p>
<ul dir="auto">
<li><a href="https://github.com/AvaloniaUI/Avalonia">Avalonia</a></li>
<li><a href="https://github.com/wieslawsoltes/Dock">Dock by Wiesław Šoltés</a></li>
<li><a href="http://fontstruct.com/fontstructions/show/1384746/ms-sans-serif" rel="nofollow">Font by lou</a></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Old Vintage Computing Research: Dusting Off Dreamcast Linux (151 pts)]]></title>
            <link>http://oldvcr.blogspot.com/2023/02/dusting-off-dreamcast-linux.html</link>
            <guid>42140863</guid>
            <pubDate>Thu, 14 Nov 2024 20:31:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://oldvcr.blogspot.com/2023/02/dusting-off-dreamcast-linux.html">http://oldvcr.blogspot.com/2023/02/dusting-off-dreamcast-linux.html</a>, See on <a href="https://news.ycombinator.com/item?id=42140863">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-242369257611966470" itemprop="description articleBody"><p>
Yes, here at Old VCR we live in the past, when RISC Unix workstations still ruled the earth like large boxy tentaculous Cthulhus. Oh, sure, if you wanted a modern equivalent you could just buy a Raptor POWER9 like the one I'm typing on now. But around here even PowerPC is too pedestrian of an architecture. We need something <em>unique</em>.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPKs1qSjUCJ-F313PmMKpr6jp88iQTq4jbzDeqEendFolit38GHJZPN3cNLaWpddTAIY-1t_0d0EQIPVEwYXwdk1dL865pp0FrR3y_egoezRb9wduHspOjOoCY59CNW_3vxWgtUFJLVp9GnauaxFkf55bYJ0r43ZTDLcrRgAsaNiU2OOK1aRzLEd5c/s4080/IMG_20230218_195431.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhPKs1qSjUCJ-F313PmMKpr6jp88iQTq4jbzDeqEendFolit38GHJZPN3cNLaWpddTAIY-1t_0d0EQIPVEwYXwdk1dL865pp0FrR3y_egoezRb9wduHspOjOoCY59CNW_3vxWgtUFJLVp9GnauaxFkf55bYJ0r43ZTDLcrRgAsaNiU2OOK1aRzLEd5c/s320/IMG_20230218_195431.jpg" width="320"></a></p><p>

That's more like it! A keyboard, mouse, a NIC, VGA output, 16MB of RAM and a whole gig (you wish) of read-only optical drive space with a 200MHz Hitachi SuperH SH-4 CPU faulting its paltry 8K of I-cache and 16K of D-cache non-stop. Now <a href="http://oldvcr.blogspot.com/2022/11/refurb-weekend-sega-dreamcast.html">freshly refurbished</a>, its cooling fan runs louder than my Power Mac Quad G5 at idle and the drive makes more disk seeking noise than when I can't find a lost floppy. And since the buzzword with Linux distros today is immutability, what could be more immutable than an ephemeral, desperately undersized RAM disk overlaid on a live CD?
</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgewFliegf76VBNRlqYWT88WTBYAqt2DQiFqjM1X8YFINkMUzYZZVH3-8OTcfH2TS9LWOaaMJ5YFhIfKx6B_Yjai60Yk2TXl2yK8XuXu3c03ytGjk7nLY2EBqlQkcCJ8dhinVkPSZAi80MTqcYOkx4YbpueW-CPLlMEvrTZoYWz5HAoLhjuD-OXtWmJ/s4080/IMG_20230218_211415.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgewFliegf76VBNRlqYWT88WTBYAqt2DQiFqjM1X8YFINkMUzYZZVH3-8OTcfH2TS9LWOaaMJ5YFhIfKx6B_Yjai60Yk2TXl2yK8XuXu3c03ytGjk7nLY2EBqlQkcCJ8dhinVkPSZAi80MTqcYOkx4YbpueW-CPLlMEvrTZoYWz5HAoLhjuD-OXtWmJ/s320/IMG_20230218_211415.jpg" width="320"></a></p><p>

Need portability? Well, just load the disc into our handy dandy greymarket clone Treamcast with its built-in LCD display and don't tell Sega. You can take your Unix on the go with the car power adapter: if you can read the screen, now you can live the dream.
</p><p>
But jokes aside, Dreamcast Linux has something to teach later Johnny-come-latelies with a distro surprisingly well-adapted to its target platform, support for many peripherals, and an all-in-one batteries-included philosophy. Plus, it was one of the earliest Un*xy things for game consoles <a href="http://web.archive.org/web/20060714170358/http://www.m17n.org/linux-sh/dreamcast/">circa 2001</a>, predating <a href="https://en.wikipedia.org/wiki/Linux_for_PlayStation_2">PlayStation 2 Linux</a> by about a year or so, though PS2 Linux was at least <a href="https://web.archive.org/web/20100524023205/http://playstation2-linux.com:80/">Sony-official</a>. (While <a href="https://github.com/CodeAsm/PS1Linux">at least one Linux</a> purports to run on an O.G. PlayStation, this was a slightly later development.)
</p><p>
So I think there's enough noteworthy about it to merit dusting DC Linux off for a new generation to experience. We'll add a couple quality of life pieces to smooth out a few rough edges, but we won't remove anything and largely eschew in-place upgrades such that the flavour of the original experience remains. After all, no one's running this as a home server (I think). If you like your vintage less aged there are <a href="https://github.com/andersevenrud/dreamcast-linux">newer attempts</a> to put Linux on the Dreamcast, and of course <a href="http://wiki.netbsd.org/ports/dreamcast/">it runs NetBSD</a>, but if you feel like running a refreshingly geriatric Linux kernel on a classic console then this is your blog post. We'll take a tour of the operating system and the way Linux used to be, talk about what's unique about the DC port and what's been added (and what's missing), and then step through how you can burn a disc to run in yours.
</p><p>
One of the best things about O.G. Dreamcast Linux is that it has very minimal system requirements: you just need a Dreamcast and keyboard. It <em>supports</em> much more than that, most notably the controllers, the Dreamcast mouse and the Dreamcast Broadband Adapter (and if you have the BBA, you might be able to get away without the keyboard by Telnetting in remotely), but pretty much anyone could run it. The first hit is always free.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjAJkdM1cY6WlseXT5-I_DYuU6TYICP6G8gO5Eb3qG4WeJubWc8AEtkrw9gQnsFa_An5fhmnbPDMa2_q0xroYaXLfB-NdwOYfOLhDZPbiqPet9riuMKibcCVAsQ5pS2xacywHhXTz12y4koosVGve-twu0xQjqKNGe8YqUk-TubTps9vyrvFNWvdhWL/s1920/vlcsnap-2023-02-18-09h57m22s091.png"><img alt="" data-original-height="1200" data-original-width="1920" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjAJkdM1cY6WlseXT5-I_DYuU6TYICP6G8gO5Eb3qG4WeJubWc8AEtkrw9gQnsFa_An5fhmnbPDMa2_q0xroYaXLfB-NdwOYfOLhDZPbiqPet9riuMKibcCVAsQ5pS2xacywHhXTz12y4koosVGve-twu0xQjqKNGe8YqUk-TubTps9vyrvFNWvdhWL/s320/vlcsnap-2023-02-18-09h57m22s091.png" width="320"></a></p><p>

This and the initial set of screenshots are taken with my INOGENI VGA2USB3 capture box connected to a clone DC VGA adapter. Normally I would crop from 16:9 to 4:3 but I'm leaving the full frame on to demonstrate any display irregularities are due to the system, not the capture device or an inartful trim.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgiqspRBpi01ATRUAVDTqBBikCeB0Bk2oOUmU4JkoRVCW5lRT39d7_WoiqMhOwyM5F69MPlLNB080q4qYy3EgEqm1J9tplUa46RMvNRxFTlco28viXFo4l5kCBDlqXyHbjp8vlr3QCJrBClE3qYde1i3kVYg0X7MSMKzWVWlcwnKCy1W94xG9iQwpj_/s1920/vlcsnap-2023-02-18-09h58m05s165.png"><img alt="" data-original-height="1200" data-original-width="1920" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgiqspRBpi01ATRUAVDTqBBikCeB0Bk2oOUmU4JkoRVCW5lRT39d7_WoiqMhOwyM5F69MPlLNB080q4qYy3EgEqm1J9tplUa46RMvNRxFTlco28viXFo4l5kCBDlqXyHbjp8vlr3QCJrBClE3qYde1i3kVYg0X7MSMKzWVWlcwnKCy1W94xG9iQwpj_/s320/vlcsnap-2023-02-18-09h58m05s165.png" width="320"></a></p><p>

Dreamcast Linux — or indeed any DC homebrew at all — might not have been possible were it not for Sega's ill-fated attempt at multimedia music CDs, called MIL-CD (Music Interactive Live CD). Recall that the Dreamcast's normal and preferred medium is the "Gigabyte Disc" GD-ROM, Yamaha's 1GB CD variant with closer pit spacing but using the same 780nm near-infrared laser. To broaden the third-party catalogue, Sega devised MIL-CD so that enhanced music CDs could feature menus, videos and Internet linkages, something like an <a href="https://en.wikipedia.org/wiki/Enhanced_CD">Enhanced CD</a> Bluebook format specific to the Dreamcast. Unfortunately for Sega, not only was MIL-CD very unsuccessful and only eight actual titles ultimately produced (let alone anything else that could play them), but it also allowed the Dreamcast to be booted from ordinary CD and CD-Rs instead of requiring all titles to be the more expensive GD-ROMs.
</p><p>
The key is the Dreamcast boot process. When the console detects a factory-pressed GD-ROM (GD-Rs officially require a boot disc), most likely from the presence of the special security ring between the low-density CD-readable inner ring and the high-density main section, it reads an boot sector executable conventionally named <tt>IP.BIN</tt> from the first 16 sectors and runs it. <a href="http://mc.pp.se/dc/ip.bin.html">Part of <tt>IP.BIN</tt>'s tasks</a> are to enforce region coding and to also display the Sega copyright message shown here, which on the Genesis became relevant in <a href="https://en.wikipedia.org/wiki/Sega_v._Accolade"><i>Sega v. Accolade</i></a>. It also provides a filename to the Dreamcast ROM (usually <tt>1ST_READ.BIN</tt>) that the DC loads and runs as the main program.
</p><p>
This process is exactly the same for booting MIL-CDs — with two crucial differences. When a MIL-CD starts up, the Dreamcast loads <tt>IP.BIN</tt> as usual, but the Dreamcast ROM will load the filename it provides into memory scrambled by a proprietary algorithm <em>and</em> disable the GD-ROM drive in software. If the second-stage executable were not pre-scrambled in a matching fashion, the result will be garbage, and the console will halt. Even if it could run, however, all it can do is play audio: the executable shouldn't have any further access to data from the drive.
</p><p>
Sega's tactical error was making the entire system's security dependent on these two lockouts despite the overwhelming weight of history. Independent developers noticed the different pathway and used it with their own software developed with the official Sega Katana SDK to provide the obfuscation; probably the first was the Datel GameShark CDX, first developed in early 2000, though Bleemcast! got to market faster using the same method until Sony sued them into grenade shrapnel. Both packages exploited an undocumented reset call to regain control of the GD-ROM drive, allowing them to start games from disc after they themselves had loaded. The notorious Utopia boot disc got around the obfuscation problem with a pirated Katana SDK and used the same reset technique, letting pirated software load by simply booting Utopia and switching discs when instructed. The Utopia crew flamed out quickly as they were stupid enough to put their photographs on the disc, leading to a knock on the door from German police, but the crack circulated widely and the damage was done. When the obfuscation algorithm was eventually cracked too, pirated games could simply boot directly, as could anything else.
</p><p>
Arguably the rampant piracy that resulted was one of the causes of the Dreamcast's decline, and Sega seemed to confirm this theory by introducing late model Dreamcasts that <a href="https://dreamcast.wiki/MIL-CD_compatibility">had MIL-CD support removed</a>, but in too tardy a fashion to make any difference. These units won't boot Dreamcast Linux either, but they aren't extremely common and obviously less desirable.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjv9MkBp6TYCw_fW74_pu4rGRFQkXqBo-it9Wuv1kMaGe-J-USbzk6oMn-6cGwqIomCd5ghJ2JftdU99LugUqRTKmh25JpkgmHarLJK61tpoBo9OUPTZyNhW6s36BnWOUPH3tAlDeaKgbXnl0-BjKkoEc6dRuXIGGXlf2nh9K36HnNPOsJp9L9fvrT_/s1920/vlcsnap-2023-02-18-09h58m32s817.png"><img alt="" data-original-height="1200" data-original-width="1920" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjv9MkBp6TYCw_fW74_pu4rGRFQkXqBo-it9Wuv1kMaGe-J-USbzk6oMn-6cGwqIomCd5ghJ2JftdU99LugUqRTKmh25JpkgmHarLJK61tpoBo9OUPTZyNhW6s36BnWOUPH3tAlDeaKgbXnl0-BjKkoEc6dRuXIGGXlf2nh9K36HnNPOsJp9L9fvrT_/s320/vlcsnap-2023-02-18-09h58m32s817.png" width="320"></a></p><p>

In our case, the second-stage executable is a pre-scrambled RedBoot bootloader from <a href="http://ecos.sourceware.org/">eCos</a>, a free open source real-time operating system originally developed at Cygnus Solutions in 1997. Red Hat bought Cygnus in 1999 and eventually terminated eCos as a product in 2002, making this 2001 build some of the last official Red Hat builds in use. Dreamcast Linux uniquely uses RedBoot to load the RAM disk image and kernel and start the operating system.
</p><p>
RedBoot listens on both the rear serial port (at 115200bps) and on port 9000 for commands. The IP settings are internal to the Dreamcast and are set by programs such as the Planet Web browser or Quake III Arena. If you connect to port 9000 while it's waiting, you get this prompt:
</p><div><pre>% telnet sadie 9000
Trying...
Connected to sadie.
Escape character is '^]'.
== Executing boot script in 8.-1612046094 seconds - enter ^C to abort
^C
RedBoot&gt; help
Manage machine caches
   cache [ON | OFF]
Change directory
   cd &lt;directory&gt;
Compute a 32bit checksum [POSIX algorithm] for a range of memory
   cksum -b &lt;location&gt; -l &lt;length&gt;
Print directory
   dir [&lt;directory&gt;]
Display (hex dump) a range of memory
   dump -b &lt;location&gt; [-l &lt;length&gt;]
Execute an image
   exec [-b &lt;parameter block addr&gt;]
        [-m &lt;mount rdonly flags&gt;]
        [-f &lt;ramdisk flags&gt;]
        [-r &lt;root device&gt;]
        [-l &lt;loader type&gt;]
        [-i &lt;initrd start addr&gt;]
        [-j &lt;initrd size&gt;]
        [-c "kernel command line"]
        [&lt;entry point&gt;]
Execute code at a location
   go [-w &lt;timeout&gt;] [entry]
Help about help?
   help [&lt;topic&gt;]
Load a file
   load [-r] [-v] [-h &lt;host&gt;] [-m {FILE | TFTP | xyzMODEM}]
        [-b &lt;base_address&gt;] &lt;file_name&gt;
Mount filesystem
   mount 
Network connectivity test
   ping [-v] [-n &lt;count&gt;] [-l &lt;length&gt;] [-t &lt;timeout&gt;] [-r &lt;rate&gt;]
        [-i &lt;IP_addr&gt;] -h &lt;IP_addr&gt;
Print current working directory
   pwd 
Reset the system
   reset 
Unmount filesystem
   umount 
Display RedBoot version information
   version 
RedBoot&gt; version

RedBoot(tm) bootstrap and debug environment - built 05:27:24, May 29 2001

Copyright (C) 2000, 2001, Red Hat, Inc.

RAM: 0x8c000000-0x8d000000, 0x8c034950-0x8d000000 available
</pre></div>
<p>
Control-C from a connected keyboard won't do it; while the Maple bus is USB-like, RedBoot doesn't speak it. If we wanted to boot with custom Linux command line arguments, this is how:
</p><div><pre>RedBoot&gt; mount
RedBoot&gt; load -v /boot/vmlinux
   Type     Offset   VirtAddr PhysAddr FileSiz  MemSiz   Flags    Align
00 00000001 00010000 8c210000 8c210000 000bdfd8 000ca420 00000007 00010000
Entry point is 0x8c210000
RedBoot&gt; load -v -r -b 0x8c400000 /boot/initrd.gz
\
Raw file loaded 0x8c400000-0x8c440725
</pre></div>
<p>
This mounts the Rock Ridge image and loads the kernel and compressed <tt>initrd</tt>. Then, to boot the kernel, we would enter these command line arguments by default, or as you like.
</p><div><pre>RedBoot&gt; exec -c "mem=16M init=/busybox /etc/profile"
Now booting linux kernel (entry 0x8c210000)
MOUNT_RDONLY  : 0x00000000
RAMDISK_FLAGS : 0x00000000
ORIG_ROOT_DEV : 0x00000100
LOADER_TYPE   : 0x00000001
INITRD_START  : 0x00400000
INITRD_SIZE   : 0x00400000
COMMAND LINE  : mem=16M init=/busybox /etc/profile
</pre></div>
<p>
The connection halts at this point since RedBoot's network connections are then terminated by the new kernel and the console remains on the Dreamcast locally (though a serial port boot should keep the console on the serial port).
</p><p>
The Dreamcast version of RedBoot is one of the components we lack source for. Although the <a href="http://ecos.sourceware.org/ecos/anoncvs.html">eCos CVS server</a> is still active, <a href="http://web.archive.org/web/20060714130044/http://www.m17n.org/linux-sh/dreamcast/ecos">there were apparently pieces</a> that were maintained out of tree, and it's not clear if the residual SuperH support still supports the Dreamcast BBA. Later versions of LinuxSH used SH-Boot, but remember that part of our brief here at Old VCR is historical preservation, so I've retained eCos RedBoot in this build.
</p><p>
The earliest kernel messages don't seem to go to the screen, though you can get them from <tt>dmesg</tt>, of course.
</p><div><pre>Linux version 2.4.5 (yaegashi@aragorn) (gcc version 3.1 20010501 (experimental)) #27 Thu May 31 07:06:51 JST 2001
SEGA Dreamcast support.
On node 0 totalpages: 4096
zone(0): 4096 pages.
zone(1): 0 pages.
zone(2): 0 pages.
Kernel command line: mem=16M init=/busybox /etc/profile
CPU clock: 200.00MHz
Bus clock: 100.00MHz
Module clock: 50.00MHz
Interval = 125000
Console: colour dummy device 80x25
Calibrating delay loop... 199.47 BogoMIPS
Memory: 10332k/16384k available (1173k kernel code, 6052k reserved, 132k data, 188k init)
Dentry-cache hash table entries: 2048 (order: 2, 16384 bytes)
Inode-cache hash table entries: 1024 (order: 1, 8192 bytes)
Buffer-cache hash table entries: 1024 (order: 0, 4096 bytes)
Page-cache hash table entries: 4096 (order: 2, 16384 bytes)
CPU: SH7750/SH7751
POSIX conformance testing by UNIFIX
PCI: MMIO fixup to Sega Corporation Broadband Adapter
Linux NET4.0 for Linux 2.4
Based upon Swansea University Computer Society NET3.039
Starting kswapd v1.8
devfs: v0.102 (20000622) Richard Gooch (rgooch@atnf.csiro.au)
devfs: boot_options: 0x0
</pre></div>
<p>
But the first visible messages (to feeble human eyes) are these:

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiinEyBZqCSNXua6iGeeveT8AQMcuw-cV7JQN5Gmphz75LWybumKHfqkAZNAlEQ8j_0cGvB8N7BWJVx-YQUdhCsV0K3NVYAki_NUrQAHcAVLtCFZMQk9RJeba1RsnwnCVB7sDpFvgsYS__O--LpNAkJsZrQLIXu2T6hlnGe5FvzXIs4HaNutaDTaMAz/s1920/vlcsnap-2023-02-18-10h45m56s059.png"><img alt="" data-original-height="1200" data-original-width="1920" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiinEyBZqCSNXua6iGeeveT8AQMcuw-cV7JQN5Gmphz75LWybumKHfqkAZNAlEQ8j_0cGvB8N7BWJVx-YQUdhCsV0K3NVYAki_NUrQAHcAVLtCFZMQk9RJeba1RsnwnCVB7sDpFvgsYS__O--LpNAkJsZrQLIXu2T6hlnGe5FvzXIs4HaNutaDTaMAz/s320/vlcsnap-2023-02-18-10h45m56s059.png" width="320"></a></p>

<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjAqgkOwbsh4mcjlOXJ0xHc4icfyfn1dmFI9GHvQrLe70kl22ShxK-Rj_qu0d-zC8gwyUDd67uEfzrzYp7BGck9XGV4t_FbD-o3mkxDcY3Phmpz8-PQS0DcD35v8eZyFYucJv4ETuUDrZvkyFiCKDpNq45zv4HYpZFvAvmrSnNcBsI8YSoho-5ros8k/s1920/vlcsnap-2023-02-18-09h58m39s700.png"><img alt="" data-original-height="1200" data-original-width="1920" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjAqgkOwbsh4mcjlOXJ0xHc4icfyfn1dmFI9GHvQrLe70kl22ShxK-Rj_qu0d-zC8gwyUDd67uEfzrzYp7BGck9XGV4t_FbD-o3mkxDcY3Phmpz8-PQS0DcD35v8eZyFYucJv4ETuUDrZvkyFiCKDpNq45zv4HYpZFvAvmrSnNcBsI8YSoho-5ros8k/s320/vlcsnap-2023-02-18-09h58m39s700.png" width="320"></a></p>

<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiLMeIIYxsdLvljCm4j0AgJtAa3uK8KyGkDi-Nex8zdSpPfdJhlO0IfZUI_D6A_XHFD5ObY99dxzE0QsINLTAEkByM5-V7tXjkVeZUZ-aM9eXGflnwwZdjx4wtiFDReBiAEmrfANlUAn5-cCclPGbZfZ-d5LZiIDNPN6nizAJFK7Nrgx7vfD3hJIfWO/s1920/vlcsnap-2023-02-18-09h58m53s373.png"><img alt="" data-original-height="1200" data-original-width="1920" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiLMeIIYxsdLvljCm4j0AgJtAa3uK8KyGkDi-Nex8zdSpPfdJhlO0IfZUI_D6A_XHFD5ObY99dxzE0QsINLTAEkByM5-V7tXjkVeZUZ-aM9eXGflnwwZdjx4wtiFDReBiAEmrfANlUAn5-cCclPGbZfZ-d5LZiIDNPN6nizAJFK7Nrgx7vfD3hJIfWO/s320/vlcsnap-2023-02-18-09h58m53s373.png" width="320"></a></p><p>

Notice the console framebuffer, the SCI(F) serial port support, Maple bus for input devices, the Realtek 8139-based Broadband Adaptor (connected over a PCI connection) and the GD-ROM. The framebuffer detects whether we're connected over VGA or NTSC. On my old school CRT TV set, I see </p><tt>fb0: Mode 640x480-32 pitch = 2560 cable: COMPOSITE video output: NTSC</tt><p> instead of </p><tt>cable: VGA video output: VGA</tt><p> (sorry, PAL users, you'll have to use VGA). The console's scroll window has been altered so that the Tux SuperH logo is not obliterated by incoming new messages. Although we booted with Busybox, </p><tt>/busybox</tt><p> does not provide the userland; it only serves as </p><tt>init</tt><p>.
</p><p>
With the kernel now booted, we can switch to pixel-precise grabs from the framebuffer for the remaining screenshots. I provide a pre-built copy of <a href="https://github.com/jwilk/fbcat"><tt>fbcat</tt></a> in <tt>/usr/bin</tt> which will read the Linux framebuffer and convert it to a Netpbm pixmap.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjCa7AjqjAAeTNgYyrb2L6Ia0blb_1vXaAbnEa4Wi5GSKqF_c4LuMpFZjf6_F9oa7bvgczWNksMGGmLRqXeAlIpXj3wAP5Sno5K9H7T6gObuBIsZNrcW9KyQRPKfH7y-XucdxMtXDYwz4X-PSIvUZrlMwnsl-F1uFtPE7_e0RDqi-4xgpYtOvi6-EzT/s640/startup.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjCa7AjqjAAeTNgYyrb2L6Ia0blb_1vXaAbnEa4Wi5GSKqF_c4LuMpFZjf6_F9oa7bvgczWNksMGGmLRqXeAlIpXj3wAP5Sno5K9H7T6gObuBIsZNrcW9KyQRPKfH7y-XucdxMtXDYwz4X-PSIvUZrlMwnsl-F1uFtPE7_e0RDqi-4xgpYtOvi6-EzT/s320/startup.ppm.png" width="320"></a></p><p>

Log in as </p><tt>root</tt><p>, no password. The machine listens on Telnet and FTP, and I added a small Gopher server demo. <b><em>Never put a console running DC Linux outside of a firewall: it is an intentionally insecure system. Any bot scanning your network will get <tt>root</tt> immediately.</em></b></p><p>
You'll notice in the messages that NTP started up using <a href="https://chrony.tuxfamily.org/"><tt>chrony</tt></a>. I'll talk about what we've added to O.G. 2K1 Dreamcast Linux as we go along, but first, let's discuss the framebuffer since we're sitting in front of it.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6oaVPVOQ-EZ4ke5InvRb1Q38nhhofP58leY6j4qDHVLV4QIxXjTfkOPGmzgmcREO1Pj0MO696KUSKCSK5YUr5cno0F6AE1NWi5kr83PYDVF0WxFcc-iaOZUrSlx9oqgeOn0YpzGsAHw55NGooV2y5QwxjlA67vr5gAI2-XfEs9k_ROG_U7bh5_FRa/s4080/IMG_20230218_195700.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi6oaVPVOQ-EZ4ke5InvRb1Q38nhhofP58leY6j4qDHVLV4QIxXjTfkOPGmzgmcREO1Pj0MO696KUSKCSK5YUr5cno0F6AE1NWi5kr83PYDVF0WxFcc-iaOZUrSlx9oqgeOn0YpzGsAHw55NGooV2y5QwxjlA67vr5gAI2-XfEs9k_ROG_U7bh5_FRa/s320/IMG_20230218_195700.jpg" width="320"></a></p><p>

Logged into our VGA demonstration system, </p><tt>fbset</tt><p> reports a bog-standard 640x480 32bpp console display. That isn't totally true, though: a popular trick is to copy to and from the framebuffer device (here </p><tt>/dev/fb/0</tt><p> or </p><tt>/dev/fb0</tt><p>) using </p><tt>cp</tt><p> and </p><tt>cat</tt><p>. If you copy </p><tt>/dev/fb0</tt><p> to a file and copy it back, though, you don't exactly get on-screen what you started with:

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhHUg-ivHcotuCG5wCOCMo7Ddb7c9LmlyGhdnOBuQtCAfT9WsdJsgRQN1rhGiVAToS2lflItTPghWyxFF6Y-ewKnomMkxkNNOZJMkC3D3R85oBMytPJfaXdORmGTGeAR859r8NXEbWqY1TYIgVDAJFXXz58NuqWfBHWmLPLXz_yHjz-w1dM9RSzhGt8/s640/oops.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhHUg-ivHcotuCG5wCOCMo7Ddb7c9LmlyGhdnOBuQtCAfT9WsdJsgRQN1rhGiVAToS2lflItTPghWyxFF6Y-ewKnomMkxkNNOZJMkC3D3R85oBMytPJfaXdORmGTGeAR859r8NXEbWqY1TYIgVDAJFXXz58NuqWfBHWmLPLXz_yHjz-w1dM9RSzhGt8/s320/oops.ppm.png" width="320"></a></p><p>

This puzzled me to no end, because the framebuffer clearly works. I queried the </p><tt>ioctl</tt><p>s for the framebuffer and found a perfectly ordinary looking 32 bit per pixel layout, but writing zeroes or indeed any other kind of character data to the framebuffer device generated this sort of artifacting.
</p><p>
After a lot of pulled hair, I decided to look at how <tt>fbcat</tt> was accessing the framebuffer since it could clearly make sensible grabs. While it was using the same kinds of <tt>ioctl</tt>s, it was doing the actual reading by <tt>mmap()</tt>ing the buffer instead of file reads. I wrote a simple program to <tt>mmap()</tt> the screen like it did and added a <tt>memset()</tt> to zero out the screen — and that worked! I could even <tt>memcpy()</tt> stuff around, since it was all just bytes. But treating the screen as an array of <tt>unsigned char</tt> generated the same kind of frustrating artifacts when I did any sort of writing.
</p><p>
If you know anything about how <tt>memset()</tt> and friends are implemented, you've already guessed the answer: the access has to be by whole 32-bit word, which is what those functions do when they're dealing with quantities of sufficient size. When I changed the code to write entire words for pixels, the screen updated correctly. Since I rather like the Tux SuperH logo, I reconstructed the bitmap data from the framebuffer and created a little demonstration program that clears the Dreamcast framebuffer, paints Tux, and sets the Linux console back to scrolling under it. <tt>tuxclear</tt> is in <tt>/usr/bin</tt> and the source (along with a <tt>gzip</tt>ped header file containing the Tux bitmap data) is in <tt>/usr/src</tt>.
</p><p>
On our NTSC CRT TV set connected to the Dreamcast with a composite video cable, however, we have another little problem.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiWAigJPwJttaY5aHREe7MVaBl5ZjXarno_n5qfM9TQcveoNGZKJUps77TU8HISBBmE6G3HOa6vNle9Cu_r2JtSip7KRV20zD9lVCTK7ADCTqz4_S6dFQlQNzgpan9OH-efoPhgaDF0PCj68hnOGNw5c1Y44w0ZjPMSjDVSiw4Cnw3Uw3ccBsGry4Uo/s4080/IMG_20230218_212701.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiWAigJPwJttaY5aHREe7MVaBl5ZjXarno_n5qfM9TQcveoNGZKJUps77TU8HISBBmE6G3HOa6vNle9Cu_r2JtSip7KRV20zD9lVCTK7ADCTqz4_S6dFQlQNzgpan9OH-efoPhgaDF0PCj68hnOGNw5c1Y44w0ZjPMSjDVSiw4Cnw3Uw3ccBsGry4Uo/s320/IMG_20230218_212701.jpg" width="320"></a></p><p>

A old school CRT TV or composite display will not be able to display the full 640x480 display. The cutoff on the sides is tolerable but only about 80-85% of the vertical resolution will be visible depending on the exact TV or monitor in use. By default we can't even see the login prompt!

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgs-MhcSU3qvsvOr4mH5oKhL-WZzEL0IP6EwR_KEB1ocM7lYWso5ozdXGxBzwk4ubBxDV_0-0QFnia9nuGdmj-lamR4i3nqj7VamiDVzxZ7rp8KMcbBA9GjFCcYfwAV3UiO_Uc3QSXTLqfV8pArSL9o1yscZoAzt6LZnlQ7PvTmNdrWREsDSiZxGz4Y/s4080/IMG_20230218_212805.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgs-MhcSU3qvsvOr4mH5oKhL-WZzEL0IP6EwR_KEB1ocM7lYWso5ozdXGxBzwk4ubBxDV_0-0QFnia9nuGdmj-lamR4i3nqj7VamiDVzxZ7rp8KMcbBA9GjFCcYfwAV3UiO_Uc3QSXTLqfV8pArSL9o1yscZoAzt6LZnlQ7PvTmNdrWREsDSiZxGz4Y/s320/IMG_20230218_212805.jpg" width="320"></a></p><p>

To deal with this (after blindly logging in), I added a little shell script </p><tt>/usr/bin/tvclear</tt><p> that sets a different scroll window, and then looked at </p><tt>fbset</tt><p> again. This time we see two new fields, </p><tt>bcast true</tt><p> and </p><tt>laced true</tt><p>, indicating that the frame buffer is generating broadcast video timings (in this case NTSC, directly supported by the Dreamcast-specific kernel) and interlacing the display. You can use this as a hint to determine if the display you're connected to is progressive-scan VGA or not. Incidentally, this is also how </p><tt>fbset</tt><p> rats out the little Treamcast's LCD panel as connected via composite video, not VGA. However — and like modern TVs — there is no overscan region on the Treamcast's flat panel and the entire 640x480 display is visible. Unfortunately </p><tt>tvclear</tt><p>'s screen window settings are ignored by many programs, so we'll have to think of a better solution for that which won't regress modern displays.
</p><p>
If the reduced scroll window bothers you and you just want all 80x30 on the console, I wrote a replacement <tt>/usr/bin/clear</tt> shell script to reset the scroll window from the console (everywhere else it just stubs into <tt>/usr/bin/cls</tt>, which is what I renamed the old <tt>/usr/bin/clear</tt> binary to). This is probably also a good time to mention that the screen will conveniently turn off after a sufficient period of inactivity.
</p><p>
How did we manage to compile <tt>/usr/bin/tuxclear</tt>, by the way?

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjDfh1qIFzx5DWgM8aLmG75svJvhgJJ6xbdwpa_1kWj6hXxJSGAcBc4OA-OuC_pWYXx2ne-bkTuGWwJxr1J9MLtcZlJ5oY2U2LQRo8LfpDySrnim37aqgKz-CffowZllQjLlsQPdKuG7mXbJfYYLOWXvxYXO7gY_xeXe12Zp_5F1wdU55VAcKOQp28G/s640/dev.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjDfh1qIFzx5DWgM8aLmG75svJvhgJJ6xbdwpa_1kWj6hXxJSGAcBc4OA-OuC_pWYXx2ne-bkTuGWwJxr1J9MLtcZlJ5oY2U2LQRo8LfpDySrnim37aqgKz-CffowZllQjLlsQPdKuG7mXbJfYYLOWXvxYXO7gY_xeXe12Zp_5F1wdU55VAcKOQp28G/s320/dev.ppm.png" width="320"></a></p><p>

The kernel and everything else were apparently compiled with a cross-compiler on </p><tt>i386</tt><p>, which doesn't help me much since I don't run any Intel system normally (let alone a 32-bit one). However, we do have </p><tt>gcc</tt><p> and </p><tt>g++</tt><p> 3.1 as hosted compilers on the system itself (intriguingly marked </p><tt>experimental</tt><p>), along with period-correct Perl 5.6.0, </p><tt>awk</tt><p>, and no Python. GNU </p><tt>make</tt><p> 3.79 serves as your build system, but unfortunately compiling anything more than trivial small tools will not be possible with the limited space we have in the RAM disk.
</p><p>
The solution is NFS. On my NetBSD NFS server we have this line in <tt>/etc/exports</tt>:
</p><div><pre>/netfs -alldirs -mapall=censored:censored -noresvport -noresvmnt
</pre></div>
<p>
There's only one UID and GID that matter in DC Linux, i.e., <tt>root</tt>'s, so it's fine (even necessary) to squash everything to a single unprivileged UID on the server side. Back on the Dreamcast, I created a new <tt>/netfs</tt> mount point in its perilously overfull <tt>/boot/initrd.gz</tt> <tt>ext2</tt> image and then added two new entries to <tt>/etc/fstab</tt>:
</p><div><pre>nfs:/netfs/dreamcast/linux /netfs nfs rw,hard,intr,rsize=4096,wsize=4096 0 0
nfs:/netfs/dreamcast/linux/tmp /tmp nfs rw,hard,intr,rsize=4096,wsize=4096 0 0
</pre></div>
<p>
The upshot is that this revised spin of Dreamcast Linux will automatically try to mount these filesystems to <tt>/netfs</tt> and <tt>/tmp</tt> (because the GNU compiler will put its assembler and parse files here) if a host named <tt>nfs</tt> can be resolved and will answer. The beauty is, on a system without a BBA or a network where there is no NFS server that answers to that name, nothing will be mounted and those mount points will remain as provided by the <tt>initrd</tt>, and the system will still run standalone as before.
</p><p>
The other problem we need to solve is swap. Linux, or at least not this Linux, won't let you use a swapfile hosted over NFS; <tt>swapon</tt> will give you an illegal argument error and refuse to enable it. The workaround is to attach the swapfile to a loop device and have <tt>swapon</tt> use the loop device as swap. A minor complication here is that Linux 2.4 has a hard limit of eight loop devices but I don't think that'll be a major drawback compared to every other limitation we're currently dealing with!
</p><p>
For swap-over-NFS, create a file of suitable size (I chose 256MB) named <tt>swapfile</tt> on the NFS server in the mount providing <tt>/netfs</tt> and on the Dreamcast then do <tt>mkswap /netfs/swapfile</tt>. Then, whenever you want to start or stop swap-over-NFS, execute one of these:
</p><div><pre>/etc/init.d/nfsswap.sh start
/etc/init.d/nfsswap.sh stop
</pre></div>
<p>
This script handles the dance with the loop device and enabling the swapfile. If <tt>/netfs/swapfile</tt> isn't present, it won't do anything.
</p><p>
You'll notice the script I wrote lives in <tt>/etc/init.d</tt> (DC Linux predates <tt>systemd</tt>, which shall be considered a feature), and I was initially planning on making it facultatively autostart like NFS. However, let me be the first to point out the obvious that NFS can be slow, and swap-over-NFS can be <em>really</em> slow. The read and write sizes in <tt>/etc/fstab</tt> were selected after messing around with various values and seeing what performed best, but some <tt>configure</tt> scripts could take over an hour to execute (!), and some compilation jobs I just left to run overnight. This was a great stress test of the hardware and the buildchain, by the way. I had the Dreamcast running non-stop for days.
</p><p>
But what outright killed the idea of making swap-over-NFS default if available was that some really large packages still couldn't build. I would go to lunch with the Dreamcast chugging away, come back and find the console had seized up. Invariably on the console would be a whole string of these dreaded messages:
</p><div><pre>eth0: Too much work at interrupt, IntrStatus=0x0010.
</pre></div>
<p>
This message occurs because Linux 2.4.x's driver for the Realtek 8139 (in the BBA) looked like this:
</p><div><pre>static void rtl8139_interrupt (int irq, void *dev_instance,
                               struct pt_regs *regs)
{
        struct net_device *dev = (struct net_device *) dev_instance;
        struct rtl8139_private *tp = dev-&gt;priv;
        int boguscnt = max_interrupt_work;
        void *ioaddr = tp-&gt;mmio_addr;
        int ackstat, status;
        int link_changed = 0;

        (void)(&amp;tp-&gt;lock);

        do {
                status = readw (ioaddr + (IntrStatus));
                if (status == 0xFFFF)
                        break;
                if (status &amp; RxUnderrun)
                        link_changed = readw (ioaddr + (CSCR)) &amp; CSCR_LinkChangeBit;
                ackstat = status &amp; ~RxAckBits;
                writew ((ackstat), ioaddr + (IntrStatus));
                if ((status &amp;
                     (PCIErr | PCSTimeout | RxUnderrun | RxOverflow |
                      RxFIFOOver | TxErr | TxOK | RxErr | RxOK)) == 0)
                        break;
                if (netif_running (dev) &amp;&amp; (status &amp; RxAckBits))
                        rtl8139_rx_interrupt (dev, tp, ioaddr);
                if (status &amp; (PCIErr | PCSTimeout | RxUnderrun | RxOverflow |
                              RxFIFOOver | TxErr | RxErr))
                        rtl8139_weird_interrupt (dev, tp, ioaddr,
                                                 status, link_changed);
                if (netif_running (dev) &amp;&amp; (status &amp; (TxOK | TxErr)))
                        rtl8139_tx_interrupt (dev, tp, ioaddr);
                boguscnt--;
        } while (boguscnt &gt; 0);
        if (boguscnt &lt;= 0) {
                printk (KERN_WARNING "%s: Too much work at interrupt, "
                        "IntrStatus=0x%4.4x.\n", dev-&gt;name, status);
                writew ((0xffff), ioaddr + (IntrStatus));
        }
</pre></div>
<p>
By default the value of <tt>max_interrupt_work</tt> is 20, which means this interrupt routine will only permit itself to loop 20 times with back-to-back "work." If there's a lot of NFS traffic (like, oh, I dunno, a lot of swapping), then there'll be a lot of interrupts, and the driver will start dropping some. That means mangled writes, or if the victim operation happens to be a critical section of swap, the console will poop its pants. I tuned the NFS read and write sizes to reduce this as much as possible but I couldn't eliminate it completely. While I'm told this value can be increased as an option, I'm not sure what the ideal value is, and it would be better to get it to a later kernel where the driver is better written anyway (at least 2.5.something, preferably 2.6).
</p><p>
All this I/O activity also makes the Dreamcast's clock run slow, and the solution for that is once again <tt>chrony</tt> and NTP. I'll talk about that at the end of our tour.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj83jiEYDGxRuLLTean8W_y-kqF0V-tAwHrNTWENzhabus7tmoS5Ko8lNiD094C6ZIyoLDmlTFBCMT5kleouLg1_Z6kAlLW1HSHMe5_vkBS2Oq6p_FaN2dJ6hKosC09QTnPknh911h2_MzKDn5-GzbbG-yKt-kujdT4RmSh_KKrmY1pocXOiAARVxoJ/s640/games.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj83jiEYDGxRuLLTean8W_y-kqF0V-tAwHrNTWENzhabus7tmoS5Ko8lNiD094C6ZIyoLDmlTFBCMT5kleouLg1_Z6kAlLW1HSHMe5_vkBS2Oq6p_FaN2dJ6hKosC09QTnPknh911h2_MzKDn5-GzbbG-yKt-kujdT4RmSh_KKrmY1pocXOiAARVxoJ/s320/games.ppm.png" width="320"></a></p><p>

The other fun thing about Dreamcast Linux is that it recognizes it's running on a game console, for goodness' sake, so there have to be <em>games</em>. So there are some. The high scores don't save, of course, and most of these are text-based, but among others you've got Hack, Mille Bourne, Canfield, Adventure, Boggle, Tetris, Wumpus, Star Trek and ... PrBoom?

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhe3CwG0IPRRbNZ69p22xCVd58t96CF2Mu6ezynt2hJtQUS77qeiXiGROs_hmj3zHtePXSyhAAduojOiQsp0YR5R3rzqhZaihCe4nYs_NLsJrtdPi9bdkeFkEkFBkYYuPgPD9uXuA8rsqS2CTbMfgiEX1bPqnywtQz0kFYctoxFyGaVzqez9WBaexpx/s640/prboom.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhe3CwG0IPRRbNZ69p22xCVd58t96CF2Mu6ezynt2hJtQUS77qeiXiGROs_hmj3zHtePXSyhAAduojOiQsp0YR5R3rzqhZaihCe4nYs_NLsJrtdPi9bdkeFkEkFBkYYuPgPD9uXuA8rsqS2CTbMfgiEX1bPqnywtQz0kFYctoxFyGaVzqez9WBaexpx/s320/prboom.ppm.png" width="320"></a></p><p>

Conveniently, this version of PrBoom (2.2.0) uses SDL to render directly to the Dreamcast console framebuffer. The original documentation for Dreamcast Linux says you should </p><a href="http://web.archive.org/web/20060713154800/http://www.m17n.org/linux-sh/dreamcast/distribution">run it after <tt>fbset -depth 16</tt></a><p> (the default is 32). Frankly, it didn't seem to make any difference if the depth was 16, 32 or 8192: PrBoom started when it wanted to and bombed out when it didn't. Swap-over-NFS did seem to help, so maybe it was just a little short on memory, or maybe it was just placebo effect.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6-S9hu9kqmInUBM2wSZwAJflumNDcxg7Lk24rX88yMi1FAqOS6xJsbFKv4xRdj0C-9i55JMktjLM-GFtIuuLkXTjrTMQtAZPtGtC7RMssUo7EKDKu6YOB7Z21PmiXdtsaHAy3B7doctuBsDbMhXvLnXpqJ4aACInhJfpFa3SFuJi7ilb8DYpbYXJ-/s640/prboom3.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj6-S9hu9kqmInUBM2wSZwAJflumNDcxg7Lk24rX88yMi1FAqOS6xJsbFKv4xRdj0C-9i55JMktjLM-GFtIuuLkXTjrTMQtAZPtGtC7RMssUo7EKDKu6YOB7Z21PmiXdtsaHAy3B7doctuBsDbMhXvLnXpqJ4aACInhJfpFa3SFuJi7ilb8DYpbYXJ-/s320/prboom3.ppm.png" width="320"></a></p>

<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEijfLFKAL0U1oVAm9miNh94rQz3ya1ij8jNyqzF4jvqGLk3UHlrFXPCDQNYLN7EFrRd5t7EaMmCYgA8Ijj3QfUwxCYgUCobnFeHxTSDMKjKwBhe6CQk7x_4y0IcOmspVBji9ELIVBQRhTV7e_Pid5j7IjBsEVZHiWhrwy7jgN8uMwhbf6A9QRnLlmSZ/s640/prboom4.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEijfLFKAL0U1oVAm9miNh94rQz3ya1ij8jNyqzF4jvqGLk3UHlrFXPCDQNYLN7EFrRd5t7EaMmCYgA8Ijj3QfUwxCYgUCobnFeHxTSDMKjKwBhe6CQk7x_4y0IcOmspVBji9ELIVBQRhTV7e_Pid5j7IjBsEVZHiWhrwy7jgN8uMwhbf6A9QRnLlmSZ/s320/prboom4.ppm.png" width="320"></a></p><p>

The artifact here is because the screen was moving while I was capturing, not because the game was defective. That said, performance isn't great because it's totally rendered in software (rendering at 640x480 doesn't help) and there's no support for the Dreamcast sound hardware either. It gets a little better with transparency off and at a smaller viewport. The Doom shareware WAD is helpfully included on disc.
</p><p>
The other included game engine is an older version of <tt>xmame</tt>. Try as I might, though, I couldn't get the SDL version to run on the local framebuffer, so that makes a good transition to talking about X support.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLJPrHZAp0TAHkRGLLAkBh17ZOkyjS0w5bzxweZzCkRPPCSmMYEMLPosrWqax9zCITLZWcMFm5Xbvd9y0N0iehrkxDZdkE-vCBTovpoaBkWaEgA8UMLWaDYnJjBlUkJ6kGmONaVtxF8PzLG9PXq8a4thZ2LKOfpRLMi2ZkKxF-F5oIDSZCtWOy4Uly/s640/xfree86.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLJPrHZAp0TAHkRGLLAkBh17ZOkyjS0w5bzxweZzCkRPPCSmMYEMLPosrWqax9zCITLZWcMFm5Xbvd9y0N0iehrkxDZdkE-vCBTovpoaBkWaEgA8UMLWaDYnJjBlUkJ6kGmONaVtxF8PzLG9PXq8a4thZ2LKOfpRLMi2ZkKxF-F5oIDSZCtWOy4Uly/s320/xfree86.ppm.png" width="320"></a></p><p>

Yes, you can run X in Dreamcast Linux (Wayland? ha ha ha). The included version is XFree86 3.3.6, interestingly reporting itself as running on </p><tt>i686</tt><p>, probably as a cross-compilation artifact. You'll definitely need the Dreamcast mouse for this and you really want swap-over-NFS running as well or the GD-ROM will really thrash (it works without it, but alarmingly slowly).

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpKQXfdS1woDZlNU7_ZvlhHs88KAvYPblAVcIxsOyN0m9legxKxoPZpku4-stw5mUyF48YgrgT9eL9h5nQMAE8Ztd3dfAgtsuBWSGPGklOpbj4nwMfP03DWdmIgXQZXFdXwiLMdAX6uiGFN6_3ikEUKTw10YeTwo6tsI0oPLhRU0Go64zCRQeVWbr4/s640/xfree86b.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpKQXfdS1woDZlNU7_ZvlhHs88KAvYPblAVcIxsOyN0m9legxKxoPZpku4-stw5mUyF48YgrgT9eL9h5nQMAE8Ztd3dfAgtsuBWSGPGklOpbj4nwMfP03DWdmIgXQZXFdXwiLMdAX6uiGFN6_3ikEUKTw10YeTwo6tsI0oPLhRU0Go64zCRQeVWbr4/s320/xfree86b.ppm.png" width="320"></a></p><p>

You get one resolution, though, and that resolution is 640x480.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg5JlyQa2wPh5cPIvOnM45FXcOSb2btj-1cjwn40wI1WXBmwW8bbeshznuWoRq1J67ERP4eotl6Gl-It1c7XmyDVRJtKwzqCDFuN26yJP0jXffceALByU-0z079W65dLTL3-osCileO3pAGSqoEO0IPXFUh2BsM0tOJNr7MWFAiYqBO-AXw21AEYwyr/s640/xstartup.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg5JlyQa2wPh5cPIvOnM45FXcOSb2btj-1cjwn40wI1WXBmwW8bbeshznuWoRq1J67ERP4eotl6Gl-It1c7XmyDVRJtKwzqCDFuN26yJP0jXffceALByU-0z079W65dLTL3-osCileO3pAGSqoEO0IPXFUh2BsM0tOJNr7MWFAiYqBO-AXw21AEYwyr/s320/xstartup.ppm.png" width="320"></a></p><p>

That stinks because the default session that opens (</p><tt>/root/.xsession</tt><p>) has windows that are clearly too big for the screen (but that's how it came, so I'm leaving it that way for now), and even worse on the TV set. Fortunately left clicking on the left window button will quickly minimize them. Don't close the login window, by the way, as that will end your X session.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiA27Tq2b_YvGQuSTYAhqKi_XzqhJ-nxsjysgoEjvwbhhRlWsuqPPHsVEFqsM2GoqI77YDKXDS2xkZz5zpVRGwu9InpNoXQOr_GWLHsf9HorCzLTf3y17Idyd7eUJJr_PEgdxiBFIBqLoIJzZ8YHiRUGOHcgQB2-Dj6KfMud8dTIsHThckWAML-UZIp/s640/xwm.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiA27Tq2b_YvGQuSTYAhqKi_XzqhJ-nxsjysgoEjvwbhhRlWsuqPPHsVEFqsM2GoqI77YDKXDS2xkZz5zpVRGwu9InpNoXQOr_GWLHsf9HorCzLTf3y17Idyd7eUJJr_PEgdxiBFIBqLoIJzZ8YHiRUGOHcgQB2-Dj6KfMud8dTIsHThckWAML-UZIp/s320/xwm.ppm.png" width="320"></a></p><p>

On the other hand, the nice big letters are definitely readable on a TV set or the little Treamcast LCD. The window manager is </p><tt>twm</tt><p>, a good choice for being low-impact.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjeon6ST2bvbUq2PB5lpRRDArQrujtXAWJMmRkhaAqUa67je7Rg68fXRYyTHf9i2YjLg03igNqG-LRHje5oy9rbudoC96HaZOGMj0CnhRuNTrsZTQviMGeO-22ipk3bkU4feQhy4r5arFCesZGgHAP7wjEgjbAnjw-3l6hFKXhBwbA98TCS0D4uCzXM/s640/mame.ppm.png"><img alt="" data-original-height="480" data-original-width="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjeon6ST2bvbUq2PB5lpRRDArQrujtXAWJMmRkhaAqUa67je7Rg68fXRYyTHf9i2YjLg03igNqG-LRHje5oy9rbudoC96HaZOGMj0CnhRuNTrsZTQviMGeO-22ipk3bkU4feQhy4r5arFCesZGgHAP7wjEgjbAnjw-3l6hFKXhBwbA98TCS0D4uCzXM/s320/mame.ppm.png" width="320"></a></p><p>

With </p><tt>login</tt><p> minimized and the </p><tt>xterm</tt><p> window shrunk to a more manageable size, we start </p><tt>xmame.x11</tt><p>. It's an old MAME, of course (0.37b15), and the default configuration in </p><tt>/usr/lib/xmame/xmamerc</tt><p> expects its ROMs in </p><tt>/var/lib/xmame</tt><p> which is naturally read-only. I solved this problem by making another NFS mount over that directly and loading ROMs there. This version of MAME plays Pac-Man by default, so I dug up a totally legal copy of the ROMs and renamed the components to the names it was expecting (you'll get some CRC warnings too, most likely).
</p><p>
With all that in place, there's no sound, but everything else seemed to work (legally). A really nice touch is that the Dreamcast controller D-pad is enabled as a joystick. Press Y for 1P credit and Start for 1P start.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJcpZVvay2BlstNl6MLkO0Jii-MnmdNGpAzc6bCe75ZXOTWyXBpNwttXOV7vrZi1tRAgrNEgdYQ6xJLIH_I3MxcpJnQ_tgk1OrKokAuD7pfELb008yUil-qTyxP0DTKt83LbPwbgleULzWl2og2iLLjB19rLzSpu--GVexoatq_HiWlg_hcGiCf48-/s4080/IMG_20230218_210338.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJcpZVvay2BlstNl6MLkO0Jii-MnmdNGpAzc6bCe75ZXOTWyXBpNwttXOV7vrZi1tRAgrNEgdYQ6xJLIH_I3MxcpJnQ_tgk1OrKokAuD7pfELb008yUil-qTyxP0DTKt83LbPwbgleULzWl2og2iLLjB19rLzSpu--GVexoatq_HiWlg_hcGiCf48-/s320/IMG_20230218_210338.jpg" width="320"></a></p><p>

There are no included graphical web browsers, and the build of X has some curious omissions like no Motif (possibly due to its licensing at the time) and no </p><tt>Xpm</tt><p> which would make doing so difficult, though there are Athena widgets and other basics (something like Chimera could potentially work in such an environment). However, both Lynx and </p><tt>w3m</tt><p> are included, and they seem to work fine for Gopher and Web access except of course for sites requiring TLS. In fact, there are no cryptography libraries on the system at all, and only a very old </p><tt>zlib</tt><p> (1.1.3).
</p><p>
So that brings us to what else I ended up adding. The first thing was to update <tt>zlib</tt>; the version on board is obviously way too old and also lacks header files, so it couldn't be compiled against for new software anyway. However, any update should also be done in such a way as to not upset programs linked against the older library since they would doubtlessly not be ABI-compatible. An exhaustive search of the entire filesystem found only three programs linked against the shipped <tt>/usr/lib/libz.so.1</tt>, namely CVS, Lynx and SDL MAME (but oddly not the X11 version). These were preserved by editing them in a hex editor to link them to <tt>/usr/lib/libz.so.0</tt> (note change in version number) and then symlinking that to the 1.1.3 shared library. With those programs preserved, I then built the current <tt>zlib</tt> 1.2.13 and added its header files and libraries.
</p><p>
The natural next step would be to build something like OpenSSL, but modern versions require later build tools (the build attempt turned into a big mess), and older versions don't support enough to make them worth the effort. Instead, I went the self-contained application route. We need HTTPS support with TLS, and fortunately yours truly maintains a self-contained TLS library for ancient hardware: <a href="http://oldvcr.blogspot.com/2022/07/crypto-ancienne-20-now-brings-tls-13-to.html">Crypto Ancienne</a>. The length of the one-file build really strained the Dreamcast building it, but I finally got it to stick with <tt>-O2</tt>, and <tt>carl</tt> works great on the Dreamcast as a substitute for <tt>curl</tt> for downloading over HTTP and HTTPS. For SSH I selected <a href="https://matt.ucc.asn.au/dropbear/dropbear.html">Dropbear <tt>ssh</tt></a>, a "relatively small" SSH client and server package that's also completely self-contained and intended for embedded systems. It supports public keys (guess you'll be storing those on NFS too) and X11 forwarding. It connected to all my local SSH servers just fine.
</p><p>
And since there's always a need for useful network tools, I also threw in builds of <a href="http://www.dest-unreach.org/socat/"><tt>socat</tt></a> (minus the crypto support), <a href="http://www.acme.com/software/micro_inetd/"><tt>micro_inetd</tt></a> and period-correct <tt>netcat</tt>. Patches for these, mostly because this version of <tt>gcc</tt> doesn't like directives inside of macros, are all in <tt>/usr/src</tt>. With <tt>micro_inetd</tt> in particular you can run <tt>carl</tt> in proxy mode (something like <tt>micro_inetd 8765 /usr/bin/carl -pt</tt>, which listens on port 8765), or anything else you don't want to/can't hack <tt>/etc/inetd.conf</tt> for.
</p><p>
Last but not least: the time. As I mentioned earlier, the clock tends to lose time with lots of I/O, and DC Linux doesn't support the Dreamcast's hardware clock (the one that's always asking you for the time <a href="http://oldvcr.blogspot.com/2022/11/refurb-weekend-sega-dreamcast.html">when the battery runs down</a>), so the best solution is NTP. Although I fashioned a tiny clone <tt>ntpdate</tt> out of <a href="https://github.com/lettier/ntpclient"><tt>ntpclient</tt></a> (source for my changes in <tt>/usr/src</tt>), this wasn't enough to avoid <tt>make</tt> complaining about clock skew all the time after long jobs, and the timezone data included with this version is of course 22 years out of date with respect to changes in timezones and daylight savings.
</p><p>
Updating the timezone data was simply a matter of copying files from this Fedora 37 workstation, but building David Mills' venerable reference NTP implementation was one of the big packages that made the Dreamcast consistently flip out. Fortunately, <a href="https://chrony.tuxfamily.org/"><tt>chrony</tt></a> compiled with minimal changes. Because the <tt>initrd</tt> was dangerously full, however, my initial attempt to put the configuration file in <tt>/etc/chrony.conf</tt> caused <tt>attempt to access beyond end of device</tt> errors when I restarted. This was solved by changing the configuration to use <tt>/usr/etc/chrony.conf</tt> instead, which has no such limitation. The configuration is very simple:
</p><div><pre>server ntp iburst
pool pool.ntp.org iburst
driftfile /var/lib/chrony/drift
makestep 1 3
</pre></div>
<p>
This causes <tt>chronyd</tt> to try consulting either a (presumably) local timesource named <tt>ntp</tt> or the North American NTP pool, and steps the clock for the first couple updates, slewing thereafter. Only one needs to be accessible (in fact, on my home test network which is not externally routable, only my local stratum-2 NTP timesource is available). The driftfile directive is obviously useless on a read-only filesystem, but it's there for future consideration. <tt>chronyd</tt> will automatically start with the system, and you can query its status with <tt>chronyc</tt>. Linux does not read or update the Dreamcast hardware clock.
</p><p>
Finally, how to set the local timezone? By default this is JST, the home timezone of DC Linux's original project leader, which I've preserved as an homage but certainly isn't <em>my</em> local timezone. Irritatingly, relinking <tt>/etc/localtime</tt> will run the risk of incurring the same problems with the <tt>initrd</tt>, but we have a simpler, more flexible way: I added hooks to <tt>/etc/profile</tt>, <tt>/etc/csh.cshrc</tt>, <tt>/etc/csh.login</tt> and <tt>/etc/csh.logout</tt> that, if they exist and are executable, will run <tt>/netfs/profile</tt>, <tt>/netfs/csh.cshrc</tt>, <tt>/netfs/csh.login</tt> and <tt>/netfs/csh.logout</tt> respectively. In the appropriate file just set the <tt>TZ</tt> environment variable to your timezone, which for me is <tt>PST8PDT</tt>. You can use this mechanism as well for things like changing your shell (I have <tt>exec /usr/bin/tcsh</tt> in <tt>/netfs/profile</tt> because I'm one of <em>those</em> people). There's also a hook during boot in <tt>init.d</tt> to run <tt>/netfs/startup.sh</tt> if it exists and is executable.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg9EcOzc64ybPPg8ibFI04jeff92vt1W4b6zE3967q6BZ-lPLlOkURzQBD2tMyC1kVp53nD_Pb9dQv7AZvLSo7Wz6yI6l8nZyYLGDQ2lK78CpzhIHOhfkuemoER7zu83yL9nOC-Fu8G-6wUa70msy5b8WjM049YbyEIW0EE1e_SpL57QszBzj7IrCdG/s4080/IMG_20230218_212621.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg9EcOzc64ybPPg8ibFI04jeff92vt1W4b6zE3967q6BZ-lPLlOkURzQBD2tMyC1kVp53nD_Pb9dQv7AZvLSo7Wz6yI6l8nZyYLGDQ2lK78CpzhIHOhfkuemoER7zu83yL9nOC-Fu8G-6wUa70msy5b8WjM049YbyEIW0EE1e_SpL57QszBzj7IrCdG/s320/IMG_20230218_212621.jpg" width="320"></a></p><p>

Total number of useless discs made during the creation of Dusted-off Dreamcast Linux: eight. Several Bothan CD-Rs died to bring you this update.
</p><p>
What's next? The obvious one is to try to update the kernel, since that should yield more features without (too much) churn to the userland experience, and should fix that obnoxious Realtek 8139 driver problem with dropped interrupts. <a href="https://sourceforge.net/projects/linuxsh/">The LinuxSH project</a> has kernels through at least 2.6, though the latest kernels are all marked as testing, and the source in CVS shows that the Dreamcast hardware was already marked as "attic" even then. We also don't know if any changes were made to build the userland binaries it comes with. Until I come up with a cross-compiling solution, though, we'd be largely limited to pre-built kernels and wouldn't be easily able to fix bugs in them.
</p><p>
On the userland side itself a few more games would be nice, as would expanding the available X libraries so that more substantial apps can be run, though the generally slow graphics and low resolution would be a practical limit on many things. And of course trying to set up the included Lynx forwarding through a local self-hosted Crypto Ancienne HTTPS-over-HTTP proxy will neatly solve the TLS problem, assuming this is one of the versions that can still be coerced into doing so (alternatively, building Chimera and its needed image libraries might also do). I should see how much <tt>w3m</tt> can be tricked into doing something similar.
</p><p>
In the meantime, get your Dreamcast out of the closet and feel free to play around. I've christened it Dusted-off Dreamcast Linux, or DODCL, which you pronounce "DOH-deckle" (a la Intellivision "decle"). <a href="https://github.com/classilla/dclinux">The components and burning instructions are on Github</a>.
</p>
</div></div>]]></description>
        </item>
    </channel>
</rss>