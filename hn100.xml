<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 11 Apr 2025 07:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Default styles for h1 elements are changing (177 pts)]]></title>
            <link>https://developer.mozilla.org/en-US/blog/h1-element-styles/</link>
            <guid>43649853</guid>
            <pubDate>Fri, 11 Apr 2025 02:14:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://developer.mozilla.org/en-US/blog/h1-element-styles/">https://developer.mozilla.org/en-US/blog/h1-element-styles/</a>, See on <a href="https://news.ycombinator.com/item?id=43649853">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main><article lang="en-US"><figure><img alt="Default styles for h1 elements are changing." src="https://developer.mozilla.org/en-US/blog/h1-element-styles/featured.png" height="420" width="800"></figure><p>Browsers are starting to roll out changes in default UA styles for nested section headings. Developers should check that their sites don't rely on UA styles for certain cases to avoid unexpected results and failing Lighthouse checks. In this post, we'll have a look at what the incoming changes are, how to identify if it's an issue on your pages, and some hints for conformant and better-structured websites.</p><section aria-labelledby="whats_changing"><h2 id="whats_changing"><a href="#whats_changing">What's changing</a></h2><div><p>The HTML spec used to define an outline algorithm that gave <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements"><code>&lt;h1&gt;</code></a> elements an implicit semantic heading level based on how many sectioning elements (<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/section"><code>&lt;section&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/aside"><code>&lt;aside&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/nav"><code>&lt;nav&gt;</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/article"><code>&lt;article&gt;</code></a>) it was nested inside.</p>
<p>The browser rendering was such that <code>section &gt; h1</code> would have the same font-size and margin as <code>&lt;h2&gt;</code>. The <code>section &gt; section &gt; h1</code> would be represented as <code>&lt;h3&gt;</code>, and so on. The default rendering was implemented in browsers in their UA styles, but not the heading level in the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Accessibility_tree">accessibility tree</a> (what screen readers use). Websites started to use sectioning elements, but didn't expect to see the automatic heading levels from the outline algorithm.</p>
<p>In general, this created confusion about where developers could use <code>&lt;h1&gt;</code> elements, tools handled the HTML differently, and the outline algorithm was considered problematic. The outline algorithm was <a href="https://github.com/whatwg/html/pull/7829" target="_blank">removed from the HTML spec in 2022</a>, but the UA stylesheet rules still remain. The rules in the default styles are what browser vendors are starting to remove now.</p>
<!--  prettier-ignore-start  -->
<div><pre><code>/* where x is :is(article, aside, nav, section) */
x h1 { margin-block: 0.83em; font-size: 1.50em; }
x x h1 { margin-block: 1.00em; font-size: 1.17em; }
x x x h1 { margin-block: 1.33em; font-size: 1.00em; }
x x x x h1 { margin-block: 1.67em; font-size: 0.83em; }
x x x x x h1 { margin-block: 2.33em; font-size: 0.67em; }
</code></pre></div>
<!--  prettier-ignore-end  -->
<p>For example:</p>
<div><pre><code>&lt;body&gt;
  &lt;h1&gt;Level 1&lt;/h1&gt;
  &lt;section&gt;
    &lt;h1&gt;Level 2&lt;/h1&gt;
    &lt;section&gt;
      &lt;h1&gt;Level 3&lt;/h1&gt;
      &lt;section&gt;
        &lt;h1&gt;Level 4&lt;/h1&gt;
      &lt;/section&gt;
    &lt;/section&gt;
  &lt;/section&gt;
&lt;/body&gt;
</code></pre></div></div></section><section aria-labelledby="what_to_expect_and_when"><h2 id="what_to_expect_and_when"><a href="#what_to_expect_and_when">What to expect and when</a></h2><div><p>Alongside the changes in browser styles, page auditing tools like Lighthouse now flag cases of <code>&lt;h1&gt;</code>s without defined <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"><code>font-size</code></a> as bad practice. Here's the gist of what to expect:</p>
<ul>
<li><code>&lt;h1&gt;</code> will no longer adapt its style based on surrounding sectioning elements like <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;aside&gt;</code>. UA stylesheet will apply the same style to <code>&lt;h1&gt;</code> with no implicit styles that demote <code>&lt;h1&gt;</code> to match <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, etc.</li>
<li>Lighthouse will flag a warning if <code>&lt;h1&gt;</code> is used without a specified font-size. The Lighthouse deprecation warning to look out for is <code>H1UserAgentFontSizeInSection</code>. Hints for dealing with this are described in the next section.</li>
</ul>
<p>In terms of when this is happening, changes are rolling out in the following browsers in this timeline:</p></div></section><section aria-labelledby="firefox"><h3 id="firefox"><a href="#firefox">Firefox</a></h3><div><ul>
<li>From March 31, 2025, Firefox is rolling out changes to 50% of <a href="https://www.mozilla.org/en-US/firefox/channel/desktop/#beta" target="_blank">Beta 138</a> users to remove UA styles for <code>h1</code> in <code>article</code>, <code>aside</code>, <code>nav</code>, or <code>section</code> on desktop. The plan is to roll out to 5% of users on the Firefox 138 stable release, ramp up to 50% of users, then ship on all platforms in Firefox 140. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1885509" target="_blank">bug 1885509</a>.</li>
<li>Since Firefox 136, developers will see a console warning for <code>h1</code>s in <code>article</code>/<code>aside</code>/<code>nav</code>/<code>section</code> without author-defined font-size or margins: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1937568" target="_blank">bug 1937568</a>.</li>
<li>To test in Firefox with the new behavior, set <code>layout.css.h1-in-section-ua-styles.enabled</code> to false in about:config.</li>
</ul></div></section><section aria-labelledby="chrome"><h3 id="chrome"><a href="#chrome">Chrome</a></h3><div><ul>
<li>Since version 136, Chrome shows deprecation warnings for <code>&lt;h1&gt;</code> inside the 4 elements, when the <code>&lt;h1&gt;</code> uses the default smaller font size. Marking something deprecated in Chromium <strong>will lower Lighthouse scores</strong> for "Best Practices": <a href="https://issues.chromium.org/issues/394111284" target="_blank">issue 394111284</a></li>
</ul></div></section><section aria-labelledby="safari"><h3 id="safari"><a href="#safari">Safari</a></h3><div><ul>
<li>There's no implementation bugs to track in Safari for these changes yet, but we <a href="https://github.com/whatwg/html/issues/7867#issuecomment-2124317504" target="_blank">can expect WebKit to follow</a> with equivalent updates.</li>
</ul></div></section><section aria-labelledby="fixing_the_lighthouse_warning"><h2 id="fixing_the_lighthouse_warning"><a href="#fixing_the_lighthouse_warning">Fixing the Lighthouse warning</a></h2><div><p>Lighthouse has recently <a href="https://github.com/GoogleChrome/lighthouse/issues/16404" target="_blank">inherited a check</a> based on Chromium's DevTools warnings for sites that don't specify a <code>font-size</code> for <code>&lt;h1&gt;</code> elements. The new rule is called <code>H1UserAgentFontSizeInSection</code> and shows up since March following the addition of deprecation warnings. If you see the <code>&lt;h1&gt;</code> warning, make sure you're applying an explicit <code>&lt;h1&gt;</code> font-size and margins. Here's some recommended styles to use:</p>
<div><pre><code>h1 {
  margin-block: 0.67em;
  font-size: 2em;
}
</code></pre></div>
<p>To avoid overwriting other style rules that target <code>&lt;h1&gt;</code> you can use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:where"><code>:where()</code></a>, which has zero <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Specificity">specificity</a>:</p>
<div><pre><code>:where(h1) {
  margin-block: 0.67em;
  font-size: 2em;
}
</code></pre></div>
<p>The MDN page for heading elements now contains <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements#specifying_a_uniform_font_size_for_h1">the usage notes listed above</a> so there is a visible place for developers to see this information.</p></div></section><section aria-labelledby="summary"><h2 id="summary"><a href="#summary">Summary</a></h2><div><p>Here's some things to keep in mind:</p>
<ul>
<li><strong>Do not</strong> rely on default browser styles for conveying a heading hierarchy. Explicitly define your document hierarchy using <code>&lt;h2&gt;</code> for second-level headings, <code>&lt;h3&gt;</code> for third-level, etc.</li>
<li>Always define your own <code>font-size</code> and <code>margin</code> for <code>&lt;h1&gt;</code> elements.</li>
<li>Consider updating your CSS resets to account for the change.</li>
<li>Audit your site <a href="https://pagespeed.web.dev/" target="_blank">using Lighthouse</a> and browser <a href="https://firefox-dev.tools/" target="_blank">DevTools</a> to check for deprecated usage.</li>
<li>Check the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements#specifying_a_uniform_font_size_for_h1">usage notes</a> on the MDN documentation for HTML section headings.</li>
</ul></div></section><section aria-labelledby="see_also"><h2 id="see_also"><a href="#see_also">See also</a></h2></section><section><a href="https://developer.mozilla.org/en-US/blog/global-privacy-control/"><article><h2><strong>Previous<!-- --> Post</strong> <!-- -->Implications of Global Privacy Control</h2></article></a></section></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fintech founder charged with fraud; AI app found to be humans in the Philippines (276 pts)]]></title>
            <link>https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/</link>
            <guid>43648950</guid>
            <pubDate>Thu, 10 Apr 2025 23:36:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/">https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/</a>, See on <a href="https://news.ycombinator.com/item?id=43648950">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p id="speakable-summary">Albert Saniger, the founder and former CEO of Nate, an AI shopping app that promised a “universal” checkout experience, was charged with defrauding investors on Wednesday, <a href="https://www.justice.gov/usao-sdny/pr/tech-ceo-charged-artificial-intelligence-investment-fraud-scheme" target="_blank" rel="noreferrer noopener nofollow">according</a> to a press release from the U.S. Department of Justice.</p>

<p>Founded in 2018, Nate raised over $50 million from investors like Coatue and Forerunner Ventures, most recently <a href="https://www.businesswire.com/news/home/20210617005139/en/Universal-Shopping-App-nate-Raises-%2438M-to-Expand-Its-Online-Payment-Solutions" target="_blank" rel="noreferrer noopener nofollow">raising</a> a $38 million Series A in 2021 led by Renegade Partners.</p>







<p>Nate said its app’s users could buy from any e-commerce site with a single click, thanks to AI. In reality, however, Nate relied heavily on hundreds of human contractors in a call center in the Philippines to manually complete those purchases, the DOJ’s Southern District of New York alleges.</p>

<p>Saniger raised millions in venture funding by claiming that Nate was able to transact online “without human intervention,” except for edge cases where the AI failed to complete a transaction. But despite Nate acquiring some AI technology and hiring data scientists, its app’s actual automation rate was effectively 0%, the DOJ claims.</p>

<p>Nate’s heavy usage of human contractors was the subject of <a href="https://www.theinformation.com/articles/shaky-tech-and-cash-burning-giveaways-ai-shopping-startup-shows-excesses-of-funding-boom" target="_blank" rel="noreferrer noopener nofollow">an investigation</a> by The Information in 2022.</p>

<p>Saniger didn’t respond to a request for comment. He is currently <a href="https://buttercore.com/" target="_blank" rel="noreferrer noopener nofollow">listed</a> as a managing partner at New York VC Buttercore Partners, which didn’t respond to a request for comment either.</p>

<p>The DOJ’s <a href="https://www.justice.gov/usao-sdny/media/1396131/dl?inline" target="_blank" rel="noreferrer noopener nofollow">indictment</a> says that Nate ran out of money and was forced to sell its assets in January 2023, leaving its investors with “near total” losses. Albert Saniger’s LinkedIn profile indicates he was no longer CEO as of 2023.</p>


<p>Nate isn’t the only startup that has allegedly exaggerated its AI capabilities. For example, an “AI” drive-through software startup was also powered largely by humans in the Philippines, The Verge <a href="https://www.theverge.com/2023/12/8/23993427/artificial-intelligence-presto-automation-fast-food-drive-thru-philippines-workers" target="_blank" rel="noreferrer noopener nofollow">reported</a> in 2023.&nbsp;</p>

<p>More recently, Business Insider <a href="https://www.businessinsider.com/evenup-ai-errors-hallucinations-former-employees-2024-11" target="_blank" rel="noreferrer noopener nofollow">reported</a> that an AI legal tech unicorn, EvenUp, used humans to do much of its work.</p>
</div><div>
	
	
	
	

	
<div>
	<p>
		Charles Rollet is a senior reporter at TechCrunch. His investigative reporting has led to U.S. government sanctions against four tech companies, including China’s largest AI firm. Prior to joining TechCrunch, Charles covered the surveillance industry for IPVM. Charles is based in San Francisco, where he enjoys hiking with his dogs. You can contact Charles securely on Signal at charlesrollet.12 or +1-628-282-2811. 	</p>
</div>


	
	<p>
		<a data-ctatext="View Bio" data-destinationlink="https://techcrunch.com/author/charles-rollet/" data-event="button" href="https://techcrunch.com/author/charles-rollet/">View Bio <svg style="width: 1em;" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="var(--c-svg, currentColor)" d="M16.5 12 9 19.5l-1.05-1.05L14.4 12 7.95 5.55 9 4.5z"></path></svg></a>
	</p>
	
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Black Mirror's pessimism porn won't lead us to a better future (136 pts)]]></title>
            <link>https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism</link>
            <guid>43648890</guid>
            <pubDate>Thu, 10 Apr 2025 23:24:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism">https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism</a>, See on <a href="https://news.ycombinator.com/item?id=43648890">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>Black Mirror is more than science fiction – its stories about modernity have become akin to science folklore, shaping our collective view of technology and the future.</p><p>Each new innovation gets an allegory: smartphones as tools for a new age caste system, robot dogs as overzealous human hunters, drones as a murderous swarm, artificial intelligence as new age necromancy, virtual reality and brain chips as seizure-inducing nightmares, to name a few. Episodes most often channel our collective anxieties about the future – or foment new ones through masterly writing, directing, casting and acting. It is a must-watch, but must we take it so seriously?</p><p>Black Mirror fails to consistently explore the duality of technology and our reactions to it. It is a critical deficit. The show mimics the folly of Icarus and Daedalus – the original tech bros – and the hubris of Jurassic Park’s Dr Hammond. Missing are the lessons of the Prometheus myth, which shows fire as a boon for humanity, not doom, though its democratization angered benevolent gods. Absent is the plot twist of Pandora’s box that made it philosophically useful: the box also contained hope and opportunity that new knowledge brings. While Black Mirror explores how humans react to technology, it too often does so in service of a dystopian narrative, ignoring Isaac Asimov’s <a href="https://newsletter.pessimistsarchive.org/p/how-isaac-asimov-predicted-the-openai" data-link-name="in body link">observation</a>: that humans are prone to irrationally fear or resist technology.</p><p>Black Mirror is more pessimism porn than Plato’s parable, imparting to its audience a tacit lesson: fear the future more than the past. Fear too much technological change, not too little. It is an inherently populist narrative, one that appeals to nostalgia: intellectually, we understand the present is better than the past in large part due to scientific and technological change, yet emotionally and instinctually we can’t help but feel this time in history is different, that the future can only get worse.</p><h2 id="the-heavy-consequences-of-technological-fearmongering">The heavy consequences of technological fearmongering</h2><p>This kind of reductive dystopianism – a hallmark of post-1960s science fiction – clouds our thinking about the future because it “cannot imagine a better future, and it doesn’t ask anyone to bother to make one”, as New Yorker writer Jill Lepore <a href="https://www.newyorker.com/magazine/2017/06/05/a-golden-age-for-dystopian-fiction" data-link-name="in body link">noted</a> in 2017.</p><p>We run from the speculative risks of the future, towards the proven dangers of the past, a dynamic I call the <a href="https://x.com/LouisAnslow/status/1786627656655818781" data-link-name="in body link">Frankenstein fallacy</a>. This pessimistic archetype has bipartisan allure because “it requires so little by way of literary, political, or moral imagination”, <a href="https://www.newyorker.com/magazine/2017/06/05/a-golden-age-for-dystopian-fiction" data-link-name="in body link">according</a> to Lepore; consequently, it is politically useful but unconstructive – as populism tends to be.</p><p>Technological pessimism will not insure against a more dystopian tomorrow. Fear of genetically modified organisms – which kicked off around the <a href="https://medium.com/timeline/gmo-food-labeling-rifkin-d5f125ba19f7" data-link-name="in body link">release</a> of Jurassic Park – has seen countries run from GMO <a href="https://www.theguardian.com/science/2002/jun/01/gm.zimbabwenews" data-link-name="in body link">food aid</a> toward famine, from vitamin-enriched GMO “golden rice” towards malnutrition leading to <a href="https://www.theguardian.com/environment/2019/oct/26/gm-golden-rice-delay-cost-millions-of-lives-child-blindness" data-link-name="in body link">millions of avoidable deaths</a>. Countries such as the United States and <a href="https://www.dw.com/en/germany-shuts-down-its-last-nuclear-power-stations/a-65249019" data-link-name="in body link">Germany</a> ran from a future of nuclear energy, <a href="https://www.theguardian.com/environment/2024/mar/20/nuclear-plant-closure-carbon-emissions-new-york" data-link-name="in body link">towards coal</a> and oil. In the Philippines, a nuclear plant built in the 1970s sits unused – <a href="https://www.rappler.com/philippines/145299-national-consensus-reopen-bataan-nuclear-power-plant-doe/" data-link-name="in body link">never turned on</a> – while its population deals with sky-high energy prices. All three countries are now trying to <a href="https://www.reuters.com/world/europe/germanys-nuclear-lobby-says-up-six-reactors-could-restart-2025-03-05/" data-link-name="in body link">reverse course</a>, realizing that the certainty of stasis and stagnation is its own form of dystopia. In contrast, France ran from the past towards the future, overcoming public fears of nuclear disasters, now getting <a href="https://www.euronews.com/business/2024/05/16/economics-of-nuclear-power-the-france-germany-divide-explained" data-link-name="in body link">70%</a> of its electricity from nuclear power.</p><p>Countries such as India, Brazil, Mexico and Thailand have run from vapes – <a href="https://www.usnews.com/news/best-countries/articles/countries-that-ban-the-sale-of-vapes-e-cigarettes" data-link-name="in body link">outlawing</a> them, while permitting traditional tobacco cigarettes for 1.8 billion of their citizens. Better unsafe than sorry.</p><p>In the US, Robert F Kennedy Jr runs from vaccines towards natural herd immunity – although he might be having second <a href="https://www.npr.org/sections/shots-health-news/2025/04/07/nx-s1-5354900/hhs-rfk-endorses-mmr-measles-vaccine-stoking-supporters-fury" data-link-name="in body link">thoughts</a> now that the risks have become less abstract. Bipartisan efforts have sought to <a href="https://www.theverge.com/2023/8/4/23819578/kosa-kids-online-safety-act-privacy-danger" data-link-name="in body link">remove online anonymity</a> to protect children, forgetting that as adults they’ll lose the protection that anonymity brings in the context of free speech. Attacks on environmentally friendly lab-grown beef from Republicans have drawn support by Democrats such as <a href="https://x.com/SenFettermanPA/status/1786509165340357115" data-link-name="in body link">John Fetterman</a>.</p><p>In the UK, encryption is <a href="https://www.theverge.com/news/644367/apple-inc-v-the-uk-government" data-link-name="in body link">under siege</a>, a modern-day Promethean protection that angers the powerful, in the name of keeping society from runaway technology. Meanwhile, <a href="https://www.euronews.com/culture/2025/04/07/boris-johnson-criticises-plans-to-show-hit-netflix-show-adolescence-in-secondary-schools" data-link-name="in body link">Adolescence</a> is the latest dystopian Netflix show to shape public policy conversations about technology and the future.</p><p>Artificial intelligence has been touted as an <a href="https://futureoflife.org/open-letter/pause-giant-ai-experiments/" data-link-name="in body link">existential threat</a> to humanity while it accelerates <a href="https://www.washingtonpost.com/wellness/2025/04/07/ai-is-coming-skin-cancer-detection/" data-link-name="in body link">cancer treatments</a>, <a href="https://fortune.com/2024/03/27/1-in-3-americans-who-die-in-hospital-had-sepsis-and-thats-just-one-of-the-many-areas-where-ai-can-improve-early-diagnosis/" data-link-name="in body link">reduces</a> sepsis deaths and produces <a href="https://www.bbc.com/news/articles/clyz6e9edy3o" data-link-name="in body link">new antibiotics</a> to treat stubborn superbugs.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-12">skip past newsletter promotion</a><p id="EmailSignup-skip-link-12" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>The folly of treating the miracles of science and technology as inevitable curses became unavoidable in the global coronavirus pandemic. The risk of inaction and stasis was too real to ignore, and the absence of technology became the threat. Tellingly, it was in this period – between 2020 and 2022 – that Black Mirror went on hiatus. Charlie Brooker <a href="https://www.cnet.com/culture/entertainment/black-mirror-creator-charlie-booker-not-working-on-black-mirror-because-life-is-black-mirror/" data-link-name="in body link">said</a> this was because people didn’t want to consume dystopian fiction when everything felt so bleak. In a moment when screens kept us connected, protected and employed, the reductiveness of dystopian science fiction felt silly. Biotechnology like GMOs and mRNA offered existential hope, rather than risk.</p><p>Suddenly, it became deeply uncool and unintellectual to fear technology – as 5G masts burned and Black Mirror-esque conspiracy theories of computer chips being injected through vaccines spread, dystopian fiction lost its allure, though its vestiges still lurked: Chipotle offered free burritos to the vaccinated, burritos it proudly markets as GMO-free. King Charles, who once <a href="https://www.theguardian.com/environment/2008/aug/13/prince.charles.gm.farming#:~:text=Prince%20Charles%20has%20warned%20that,environmentally%2C%20of%20all%20time%22." data-link-name="in body link">warned</a> that genetically modified organisms would cause the biggest environmental disaster of all time, would <a href="https://eu.usatoday.com/story/entertainment/celebrities/2020/11/23/vaccine-news-astrazeneca-oxford-earns-praise-prince-william/6389217002/" data-link-name="in body link">congratulate</a> Oxford researchers for their GMO-based Covid vaccine. Publications like Scientific American would deplore pandemic conspiracy theories, when less than a year earlier it would <a href="https://www.scientificamerican.com/blog/observations/we-have-no-reason-to-believe-5g-is-safe/" data-link-name="in body link">amplify</a> unfounded alarmism about 5G.</p><h2 id="new-parables">New parables</h2><p>A new progressivism, one that embraces construction over obstruction, of pragmatism over precaution, must find new allegories to think about technology and the future – stories that challenge a mindset the British prime minister, Keir Starmer, criticized for leading us to miss massive opportunities <a href="https://x.com/Keir_Starmer/status/1878811596182667578" data-link-name="in body link">“because of the fears of small risk”</a>.</p><p>We must move away from binary tales of catastrophe, not towards naive utopianism that ignores problems and risks that comes with change, but hopeful solutionism that reminds us we can solve and mitigate them – stories that don’t make us forget that brain chips can liberate paraplegics, robot dogs can <a href="https://foreignpolicy.com/2022/06/22/ukraine-bomb-quad-robotic-dog/" data-link-name="in body link">protect us</a> from landmines, AI can <a href="https://www.abc.net.au/news/2019-07-02/computer-invents-flu-vaccine-in-world-first/11271170" data-link-name="in body link">prevent </a>super bugs and VR can <a href="https://www.abc.net.au/news/2019-07-02/computer-invents-flu-vaccine-in-world-first/11271170" data-link-name="in body link">connect us</a> rather than cut us off from reality – even if their vibes are “a bit Black Mirror”.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[So, I Wrote a Book: The Story Behind “100 Go Mistakes and How to Avoid Them” (239 pts)]]></title>
            <link>https://www.thecoder.cafe/p/100-go-mistakes</link>
            <guid>43647880</guid>
            <pubDate>Thu, 10 Apr 2025 20:47:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thecoder.cafe/p/100-go-mistakes">https://www.thecoder.cafe/p/100-go-mistakes</a>, See on <a href="https://news.ycombinator.com/item?id=43647880">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em>Hello! Today, I’m going to share the story of the process behind writing my book.</em></p><p><em><span>This post also marks the launch of </span><a href="https://www.thecoder.cafe/s/inner-brew" rel="">Inner Brew</a><span>, a new section where I will share more personal reflections and stories. If you’re not really into that and prefer only to receive the usual concept-focused posts you can turn off notifications (email or push) for this section </span><a href="https://www.thecoder.cafe/account" rel="">here</a><span> (Notifications → Disable “Inner Brew“).</span></em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png" width="1456" height="728" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:728,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1189332,&quot;alt&quot;:&quot;So, I wrote a book: The Story Behind 100 Go Mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="So, I wrote a book: The Story Behind 100 Go Mistakes." title="So, I wrote a book: The Story Behind 100 Go Mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>My book, </span><em>100 Go Mistakes and How to Avoid Them</em><span>, was published in August 2022. But the story starts much earlier, back in 2018.</span></p><p><span>At this time, I was working in Switzerland, refactoring a C++ legacy codebase. Together with my colleague and friend </span><a href="https://www.linkedin.com/in/dchambon/" rel="">Damien Chambon</a><span>, we started evaluating Scala and </span><a href="https://akka.io/" rel="">Akka</a><span> (an actor model framework) for a potential rewrite. Why Scala and Akka, you may wonder? Well, back then I had mostly Java/JVM experience, and I was intrigued by the promises of the actor model.</span></p><p>But things were… definitely not simple. First off, it was a whole new language to learn. Second, Akka is a beast. It takes time to ramp up, and we even had to hire an external consultant to help with the implementation. After months of work, we finally had our first PoC. And yet, neither my colleague nor I were really convinced.</p><p>So, we started looking at another language to counterbalance Scala. Maybe this new one wasn’t the sexiest language ever invented, but it looks promising, efficient, and much easier to ramp up with: Go.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png" width="249" height="93.10434782608695" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:129,&quot;width&quot;:345,&quot;resizeWidth&quot;:249,&quot;bytes&quot;:7350,&quot;alt&quot;:&quot;Go logo.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Go logo." title="Go logo." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 1456w" sizes="100vw"></picture></div></a></figure></div><p><span>After just a couple of weeks in Go, we were able to cover the same scope as our Scala/Akka PoC. And for me, </span><strong>that was the beginning of a love story with the Go programming language</strong><span>.</span></p><p>A few months passed, and I moved to another company and another country: the UK. I was back working in a Java ecosystem since my Go experience was still too limited to land a proper job. Plus, given the international move, the company itself mattered more to me than the tech stack.</p><p>That experience turned out to be horrendous. It was full of politics, and I hated every aspect of my job. But in the evenings, I kept working on personal projects in Go. After just three months, I decided to stop the bleeding and move on to another company.</p><p>This time, I was determined to get a Go job. It was May 2019. I signed to a new company, and finally, I could develop in Go all day long.</p><p>After four months in this new company, I noticed that some of my colleagues were making the same mistakes I made when I was working in Switzerland.</p><p><span>So, I decided to write a blog post listing common mistakes in Go called </span><em><a href="https://itnext.io/the-top-10-most-common-mistakes-ive-seen-in-go-projects-4b79d4f6cd65" rel="">The Top 10 Most Common Mistakes I’ve Seen in Go Projects</a></em><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png" width="598" height="168.43666666666667" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:338,&quot;width&quot;:1200,&quot;resizeWidth&quot;:598,&quot;bytes&quot;:65049,&quot;alt&quot;:&quot;Screenshot of the blog post titled “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” by Teiva Harsanyi, published on Medium.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of the blog post titled “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” by Teiva Harsanyi, published on Medium." title="Screenshot of the blog post titled “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” by Teiva Harsanyi, published on Medium." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Let’s be honest: the title was way more ambitious than my actual experience. Reading it, you would expect someone with deep Go expertise, right? But the truth is, when I said “projects“, it meant:</p><ul><li><p>The PoC my colleague and I wrote in Go</p></li><li><p>The four months I had spent at my new company</p></li></ul><p>Nothing too crazy, really. I didn’t have big ambitions for the post, but I love writing, and I thought it might be interesting to share. So I published it on Medium.</p><p><span>Unexpectedly, the post became very popular: 4.7k claps, trending on </span><a href="https://www.reddit.com/r/golang" rel="">r/golang</a><span>, and even listed as one of the top articles of 2019 by </span><em><a href="https://golangweekly.com/" rel="">Golang Weekly</a></em><span>, the most well-known Go newsletter:</span></p><div><figure><a target="_blank" href="https://golangweekly.com/issues/293" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png" width="450" height="620.5078125" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1059,&quot;width&quot;:768,&quot;resizeWidth&quot;:450,&quot;bytes&quot;:199333,&quot;alt&quot;:&quot;Screenshot of Golang Weekly’s “Top Articles &amp; Tutorials of 2019,” featuring “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” as the first listed article.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://golangweekly.com/issues/293&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of Golang Weekly’s “Top Articles &amp; Tutorials of 2019,” featuring “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” as the first listed article." title="Screenshot of Golang Weekly’s “Top Articles &amp; Tutorials of 2019,” featuring “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” as the first listed article." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>At this point, I’m starting to believe that </span><strong>writing about mistakes seems to interest people</strong><span>. So my train of thought was: let’s keep collecting mistakes and see how it goes. Perhaps at some point, I could write a GitHub repo that would contain all my findings?</span></p><p>Fast forward to November 2020. It had been 16 months since I published my blog post, and by then, I had collected 100 mistakes in Go. During that time, I gathered mistakes from various sources, mainly:</p><ul><li><p>At work (to be honest, I was also a significant source of inspiration!)</p></li><li><p>In various studies and blog posts</p></li><li><p>In different open-source projects</p></li></ul><p>At this stage, I felt much more confident about my project. Sure, an open-source repository could be great, but I wondered: why not go for a book? Being someone who loves reading and writing, I had always dreamed of publishing my own.</p><p>I contacted only one publisher: Manning. Why Manning? Here’s what I wrote in my book:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png" width="964" height="139" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:139,&quot;width&quot;:964,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:106348,&quot;alt&quot;:&quot;Highlighted quote from the book explaining why the author contacted Manning as the sole publisher for 100 Go Mistakes, describing it as a top-level company known for high-quality books.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Highlighted quote from the book explaining why the author contacted Manning as the sole publisher for 100 Go Mistakes, describing it as a top-level company known for high-quality books." title="Highlighted quote from the book explaining why the author contacted Manning as the sole publisher for 100 Go Mistakes, describing it as a top-level company known for high-quality books." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Do I see Manning as a high-quality publisher? Absolutely. Is that the only reason why I contacted only Manning? Maybe not.</p><p><span>Back then, to propose an idea to O’Reilly (not sure if it has changed since), you had to fill out a document containing hundreds and hundreds of pages! OK, maybe my memory is playing tricks on me, and it was just a dozen pages, but I remember thinking: “</span><em>This is too much effort.</em><span>“</span></p><p>Whereas with Manning? A simple email was enough:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png" width="1183" height="450" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:450,&quot;width&quot;:1183,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:91625,&quot;alt&quot;:&quot;Screenshot of the original email sent by the author to Manning, proposing the idea for 100 Go Mistakes and referencing the success of a prior blog post on Go mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of the original email sent by the author to Manning, proposing the idea for 100 Go Mistakes and referencing the success of a prior blog post on Go mistakes." title="Screenshot of the original email sent by the author to Manning, proposing the idea for 100 Go Mistakes and referencing the success of a prior blog post on Go mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Something funny to highlight here. In this email, I was saying, “</span><em>I’m at 80%</em><span>” because for most of the mistakes, I already had some content written:</span></p><ul><li><p>The mistake itself</p></li><li><p>A surrounding example</p></li><li><p>And various solutions to fix the mistake</p></li></ul><p>So, in my head, the hardest part was already done.</p><p><strong>I haven’t been more wrong in my entire life.</strong></p><p>The next day, I got a reply from someone at Manning with the title of acquisition editor. If you’re not familiar with that role, an acquisition editor is someone who evaluates and signs new book projects for publication. Basically, a scout. Throughout my writing journey, he was my main contact at Manning, and as you will see, he helped me at a critical moment later in the process.</p><p>We had a first meeting to briefly discuss my idea, and Manning was on board to move to the next step: filling out a proposal. This proposal was a document with 21 questions to frame the project, including things like:</p><ul><li><p>Speaking about yourself</p></li><li><p>A summary of the book</p></li><li><p>Describing your target reader</p></li><li><p>A table of contents</p></li></ul><p><span>This document was then sent by Manning to external reviewers, all with Go experience, who wrote their own evaluations of the proposal. Funny enough, my mate </span><a href="https://x.com/val_deleplace" rel="">Valentin Deleplace</a><span>, who would become my colleague a few years later, was actually the first reviewer of the book.</span></p><p>As a potential author, I had access to all the reviews. And while it’s obviously essential for a publisher to judge the technical quality of a project, it was also super valuable for me. It helped me see whether the idea only sounded good in my own head or if it could actually be interesting to others, too.</p><p>I received a total of seven reviews, and all of them were positive. Some included constructive feedback on how to improve certain aspects (like the table of contents, for example), but the overall tone was fully supportive.</p><p><span>It was December 7, 2020, roughly two weeks after I sent my first email, and </span><strong>I received an offer from Manning</strong><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png" width="1164" height="405" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:405,&quot;width&quot;:1164,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:289710,&quot;alt&quot;:&quot;Screenshot of the email from Manning offering the author a publishing contract for 100 Go Mistakes, outlining the review and editing process involved.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of the email from Manning offering the author a publishing contract for 100 Go Mistakes, outlining the review and editing process involved." title="Screenshot of the email from Manning offering the author a publishing contract for 100 Go Mistakes, outlining the review and editing process involved." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Let’s talk about one of the aspects people ask about the most: my contract.</p><p><strong>In terms of royalties, I got paid 10% on all sales</strong><span>. On one hand, yes, that’s not a lot. Yet, you really have to understand how helpful a publisher can be for a first-time “author” with zero experience like I was back then, for two main reasons:</span></p><ul><li><p>First, and we will go over the process later, but the number of reviews from different people is insane. If I had written the book completely on my own, I can guarantee the quality would have been way lower.</p></li><li><p>Second, in terms of visibility, going with a publisher helps a lot, especially if, like me back then, you had around 400 followers on Twitter. Sure, content can still go viral without a big audience, but it’s a lot less likely.</p></li></ul><p>When I signed the contract, I also received an advance: $2,000 upfront, and $2,000 after delivering one-third of the book.</p><p>The contract also included deadlines:</p><ul><li><p>One-third of the book will be delivered by February 15, 2021</p></li><li><p>Two-thirds by April 15, 2021</p></li><li><p>A full draft of the complete manuscript by July 2021</p></li></ul><p>As the book was eventually published in August 2022, you can imagine I was slightly late. But when I spoke with people at Manning, they told me most technical books are late. We all know that in tech, we’re not great at planning. So why would it be any different when we start writing books? 🙂</p><p>Jokes aside, at that stage, I didn’t fully realize how much work was ahead of me, so July 2021 seemed doable.</p><p>At the very beginning, Manning asked me to think deeply about what they call the MQR: Minimum Qualified Reader. In a nutshell, what’s the minimum level of knowledge or experience someone needs to read your book?</p><p>That may sound like a basic question, but at that point, I hadn’t even considered it. Over the next few weeks, I refined my MQR to target someone who already knows the Go language. That meant about 15% of my content could go directly into the nearest trash can as it was just too basic.</p><p><span>Around the same time, </span><strong>I met the person who probably had the biggest impact on the book: my development editor (DE)</strong><span>.</span></p><p>A DE helps refine the structure, content, and flow of a manuscript to improve things like clarity, coherence, and how well ideas are conveyed. Note that a DE doesn’t need to be a technical person. Mine had some experience in computer science but absolutely none in Go, and that was perfectly fine. We don’t expect technical reviews from a DE but instead, a valuable contribution to the quality of the writing.</p><blockquote><p><strong>NOTE</strong><span>: </span><em><span>This was the person who taught me the key lessons I shared in </span><a href="https://www.thecoder.cafe/p/10-technical-writing-rules" rel="">10 Rules I Learned About Technical Writing</a></em><span>.</span></p></blockquote><p>I learned a ton from my DE. Like, really, a ton. Before that, I had been writing on various blogs for about a decade, but writing online is all about being direct because most people don’t have time. With a book, it’s different. People made a deliberate decision to buy your book. Now, it’s your job to bring them somewhere valuable. And if that takes time (meaning more words), so be it.</p><p><span>For example, here’s how I introduced one mistake in </span><em>The Top 10 Most Common Mistakes I’ve Seen in Go Projects</em><span> post:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png" width="599" height="406.56108597285066" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:600,&quot;width&quot;:884,&quot;resizeWidth&quot;:599,&quot;bytes&quot;:64935,&quot;alt&quot;:&quot;Screenshot of a short explanation introducing a common Go mistake involving goroutines and loop variables, with a simple code example that prints loop indices.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of a short explanation introducing a common Go mistake involving goroutines and loop variables, with a simple code example that prints loop indices." title="Screenshot of a short explanation introducing a common Go mistake involving goroutines and loop variables, with a simple code example that prints loop indices." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>28 words.</figcaption></figure></div><p>And here’s how I approached the same mistake in my book:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png" width="600" height="393.9130434782609" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b175975e-31be-4592-8d58-c41fdd47304f_1150x755.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:755,&quot;width&quot;:1150,&quot;resizeWidth&quot;:600,&quot;bytes&quot;:156513,&quot;alt&quot;:&quot;Excerpt from the book explaining a common Go mistake—using goroutines with loop variables—in a more elaborate way. Includes annotated code and a detailed description of why the output can be unpredictable.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Excerpt from the book explaining a common Go mistake—using goroutines with loop variables—in a more elaborate way. Includes annotated code and a detailed description of why the output can be unpredictable." title="Excerpt from the book explaining a common Go mistake—using goroutines with loop variables—in a more elaborate way. Includes annotated code and a detailed description of why the output can be unpredictable." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>120 words.</figcaption></figure></div><p>This isn’t about being verbose just to add pages to increase the book’s price. It’s about making sure the flow works well, that readers know where you’re going, and that they can follow you all the way. There’s a huge gap between writing a blog post and writing a book.</p><blockquote><p><strong>NOTE</strong><em>: In my newsletter, I try not to keep that gap too big. I feel like someone who deliberately shared their email is also making a clear statement: “I’m interested in your content”. I don’t take as much time as I do in the book, but I definitely take more than I did in my older blog posts.</em></p></blockquote><p>This is just one example, but my DE helped me massively. I absolutely loved every single bit of his feedback. To be honest, at the beginning of our collaboration, he had a lot of comments. Some things I picked up quickly, but others were much more difficult for me. Yet, over the next months, I will significantly improve my writing.</p><p>I wanted to talk a little bit about my mindset when I started writing the content of my book, chapter after chapter, mistake after mistake.</p><p><span>At this stage, my mindset was simple: </span><strong>I wanted to make the best Go book. Period.</strong></p><p><span>Let me clarify, though, just to make sure I don’t come across as someone full of ego, as there’s an important nuance here. I wasn’t thinking, “</span><em>My book is going to be the best.</em><span>” Instead, I was thinking, “</span><em>I will give everything I have to bring it to a level where it could be considered the best.</em><span>”</span></p><p>I already knew at that point that it would probably be my first and last book. So, if I was going to write one, I might as well give everything I had to make sure that what’s going to sit on my shelf for the rest of my life is something I will be proud of.</p><p><span>Also, having this mindset was a commitment to future readers: you bought my book, I don’t know if you’ll love it, </span><strong>but I promise it’s the best version I could have made</strong><span>.</span></p><p><span>1P stands for </span><em>first part</em><span>. Basically, the process that starts once one-third of the book is written and accepted by the DE (which happened for me after a lot of back and forth to be honest).</span></p><p>For each third of the book (1P, 2P, and then 3P), the process is similar: the manuscript is sent to external reviewers who can leave comments directly on your text but also fill out a detailed document with questions like:</p><ul><li><p>Is the writing interesting? Does it hold your attention?</p></li><li><p>Are the examples good and applicable in the real world? Are there enough of them?</p></li><li><p>What do you think of the overall concept of the book and the approach toward the</p><p>intended audience?</p></li></ul><p>This document is very thorough. These reviews are invaluable for an author. While you can be confident that the writing itself is fairly solid thanks to the work you were doing with your DE, from a technical standpoint, this is really the first time your content is being confronted by other technical people.</p><p><span>We got the results for 1P in April 2021. In total, I received 13 reviews, with </span><strong>an average star rating of 4.10 out of 5</strong><span>. Not a fantastic score, but at that point, it was OK. I wasn’t too disappointed.</span></p><p>Of course, some of the feedback you receive as an author can hurt:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png" width="1216" height="208" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:208,&quot;width&quot;:1216,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:39244,&quot;alt&quot;:&quot;Excerpt of reviewer feedback highlighting a concern that some statements in the manuscript lack sufficient background or justification to confidently earn a 5-star rating.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Excerpt of reviewer feedback highlighting a concern that some statements in the manuscript lack sufficient background or justification to confidently earn a 5-star rating." title="Excerpt of reviewer feedback highlighting a concern that some statements in the manuscript lack sufficient background or justification to confidently earn a 5-star rating." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>But if it hurts, it probably means there’s some truth behind it. You have to accept it and improve your book.</p><p><span>During that period, Manning offered to connect me with another author, </span><a href="https://www.ardanlabs.com/instructors/bill-kennedy/" rel="">Bill Kennedy</a><span>, who also wrote a book with them called </span><em><a href="https://www.manning.com/books/go-in-action" rel="">Go in Action</a></em><span>. Beyond the fact that I have immense respect for him (he’s one of the people who contributes the most to the Go ecosystem), Bill taught me something crucial:</span></p><p>If you get one comment, you must address it, even if it doesn’t seem important to you. If one person raised it, imagine when thousands of people read your book.</p><p>That was golden advice. Thanks to Bill, I gave my best to address (almost) every single comment, from changing a single word to fully rewriting how a mistake was explained.</p><p>It’s time to talk about my first hiccup with Manning (there will be two).</p><p>I already explained how crucial my development editor (DE) was in the process. However, I was also supposed to be accompanied by another person: a technical development editor (TDE).</p><p>While external reviewers only come in at each third of the book, the TDE is supposed to work more closely with the author throughout the entire process, helping shape the content, the overall structure, how chapters are divided, and so on.</p><p>This isn’t a personal criticism, but my TDE simply wasn’t an MQR. This means he didn’t have the basic Go knowledge expected from someone reading the book. Of course, I wasn’t expecting the world’s top Go expert as a TDE, but I did expect someone who at least matched the Minimum Qualified Reader profile, a concept introduced by Manning themselves. That felt like the bare minimum.</p><p>I raised this issue with Manning after 1P, but unfortunately, they didn’t really listen and kept the same TDE on the project. I was a bit annoyed, to be honest, but I had to move on.</p><p>Until 1P, the book is in a kind of trial phase, meaning that either Manning or the author can still decide to stop the collaboration. Apparently, a certain percentage of books fail at 1P when Manning realizes that external reviewers aren’t convinced by how the initial idea is being executed.</p><p><span>After 1P, Manning launches their </span><em>Manning Early Access Program</em><span> (MEAP), which allows people to buy the book and access it while it’s still being written. For the author, it becomes an additional source of feedback, as readers can leave comments on an online platform.</span></p><p><span>When we say people can start buying your book, </span><strong>it also means a shift for Manning: it’s time to sell it.</strong></p><p>That brings a few new responsibilities, like keeping the content regularly updated for those who already paid, writing a welcome letter for MEAP readers, and starting to work with the marketing team on how to promote the book and raise awareness about it.</p><p>On that last point, Manning asked me several times during this period to promote the book at public events (meetups, conferences, etc.), but I always declined. Writing was already taking up so much time and energy that I didn’t feel like adding one more thing to my plate by preparing talks.</p><p><span>The only “promotion” I did during that time was joining a podcast since it required less preparation. I was invited to </span><em><a href="https://open.spotify.com/show/2cKdcxETn7jDp7uJCwqmSE" rel="">Go Time</a></em><span>, which was a weekly podcast about Go and the most popular one in the community (unfortunately, it stopped).</span></p><p><span>The episode I appeared in, titled sarcastically </span><em><a href="https://changelog.com/gotime/190" rel="">How to make mistakes in Go</a></em><span>, was </span><a href="https://x.com/GoTimeFM/status/1475953635569848321" rel="">really well received</a><span>. That was another interesting signal that writing about mistakes was a compelling angle.</span></p><p>During that period, it was time to choose a book cover. Manning has a (very) special way of illustrating their books, all based on drawings from Jacques Grasset de Saint-Sauveur, an 18th-century illustrator.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png" width="600" height="230.14354066985646" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:481,&quot;width&quot;:1254,&quot;resizeWidth&quot;:600,&quot;bytes&quot;:127723,&quot;alt&quot;:&quot;Excerpt explaining the historical background of the book’s cover illustration, sourced from an 18th-century collection by Jacques Grasset de Saint-Sauveur.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Excerpt explaining the historical background of the book’s cover illustration, sourced from an 18th-century collection by Jacques Grasset de Saint-Sauveur." title="Excerpt explaining the historical background of the book’s cover illustration, sourced from an 18th-century collection by Jacques Grasset de Saint-Sauveur." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>At first, I received a few illustration options, including this one:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png" width="351" height="489.6943734015345" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b86937aa-a795-44da-af9d-096e315538e8_782x1091.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1091,&quot;width&quot;:782,&quot;resizeWidth&quot;:351,&quot;bytes&quot;:1172359,&quot;alt&quot;:&quot;18th-century illustration from Jacques Grasset de Saint-Sauveur showing a person in traditional dress, proposed as a potential book cover for 100 Go Mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="18th-century illustration from Jacques Grasset de Saint-Sauveur showing a person in traditional dress, proposed as a potential book cover for 100 Go Mistakes." title="18th-century illustration from Jacques Grasset de Saint-Sauveur showing a person in traditional dress, proposed as a potential book cover for 100 Go Mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>In a very delicate and constructive manner, I decided to share my opinion:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png" width="401" height="192.95643564356436" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:243,&quot;width&quot;:505,&quot;resizeWidth&quot;:401,&quot;bytes&quot;:249268,&quot;alt&quot;:&quot;Screenshot of an email from Teiva Harsanyi expressing honest feedback on illustration options, stating: \&quot;I find those quite ugly.\&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of an email from Teiva Harsanyi expressing honest feedback on illustration options, stating: &quot;I find those quite ugly.&quot;" title="Screenshot of an email from Teiva Harsanyi expressing honest feedback on illustration options, stating: &quot;I find those quite ugly.&quot;" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The truth is, while I usually enjoy Manning books, I find all their covers pretty bad. Compared to other publishers like </span><a href="https://nostarch.com/" rel="">No Starch Press</a><span>, I definitely prefer what others are doing.</span></p><p><span>I remember having a hard time explaining to my family that my programming book would have </span><em>this</em><span> on the cover:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png" width="350" height="489.1073326248672" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1315,&quot;width&quot;:941,&quot;resizeWidth&quot;:350,&quot;bytes&quot;:2223270,&quot;alt&quot;:&quot;Illustration from an old book showing a traditionally dressed woman, used as the final cover image for 100 Go Mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Illustration from an old book showing a traditionally dressed woman, used as the final cover image for 100 Go Mistakes." title="Illustration from an old book showing a traditionally dressed woman, used as the final cover image for 100 Go Mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>But hey, it is what it is. I guess it contributes to a certain visual identity for Manning. And in the end, if we take a step back, the cover really isn’t </span><em>that</em><span> important… right?</span></p><p>We’re in August 2021, four months after 1P, and it’s now time for 2P. In retrospect, having only four months to complete the second third of the book was a brutal pace. Looking at some old emails with my DE, it’s clear that this period was particularly exhausting for me:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png" width="1155" height="266" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:266,&quot;width&quot;:1155,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:474774,&quot;alt&quot;:&quot;Screenshot of an email from the author to his Development Editor expressing exhaustion while working on chapter 8 of the book.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of an email from the author to his Development Editor expressing exhaustion while working on chapter 8 of the book." title="Screenshot of an email from the author to his Development Editor expressing exhaustion while working on chapter 8 of the book." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Anyway, it’s 2P, and this time I received 13 reviews with </span><strong>an average rating of 4.15</strong><span>. So I went from 4.10 to 4.15, and honestly, at that point, I was starting to feel a bit disappointed.</span></p><p><span>I’m a regular user of </span><a href="https://goodreads.com/" rel="">Goodreads</a><span>. On that platform, books are also rated out of 5 stars; in my mind, a “great” book starts at 4.5 and up. Why 4.5? No idea. But that was definitely my goal.</span></p><p><span>4.15 isn’t bad, but it’s still far from 4.5. So yes, I was disappointed but not dejected. Once again, I went through all the reviews, and </span><strong>I just kept improving the book over and over</strong><span>.</span></p><p><span>To give you a sense of what I mean by improving the book “</span><em>over and over</em><span>“, keep in mind that between feedback from my DE, external reviewers, and others, there are parts of the book that I rewrote more than ten times. I don’t know if that’s common, to be honest. Maybe it’s because I was terrible at the beginning. Maybe it’s because I’m literally obsessed with details. Or maybe it’s both.</span></p><p><span>From 2P to 3P is almost a blackout for me. This time, the period lasted five months, during which </span><strong>I wrote the last third of the book and completely rewrote the first few chapters</strong><span>. Indeed, once I reached the end of the book, I reread the first part and thought: </span><em>“This is awful; I can’t publish that.”</em></p><p>That’s more proof that going through the long, demanding process of writing a book really did improve my writing skills. Some parts that felt fine in the beginning ended up being terrible once I had more experience.</p><p>From those five months, I only clearly remember one week of "holiday" that I spent working on my book. And by week, I don’t mean a peaceful 40-hour work week. I mean waking up at 3 p.m., working 14 to 15 hours straight, and going to bed around 8 a.m.</p><p><span>Funny enough, I didn’t hate that week. In my mind, it was </span><em>my</em><span> author week. If I had crossed a stranger on the street and they had asked what I did for a living, I would’ve proudly said: “</span><em>I’m an author!</em><span>”</span></p><p>Unfortunately, I didn’t speak to anyone that week. Except my janitor.</p><p>But during that week, I made a lot of progress. I managed to write the first draft of the last chapter. I’m sharing this to give you an idea of the pace. The book had 12 chapters, and the one that went the fastest still took me about 100 hours to write. You can imagine how long the rest took. And that’s not even counting the endless rewrites after all the feedback from my DE and the reviewers.</p><p><span>During that period, I also worked on my inside cover. I’m a big fan of </span><em>Designing Data-Intensive Applications</em><span> by </span></p><p><span>. His book is full of beautiful visual maps like this one:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png" width="600" height="457.09779179810727" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:966,&quot;width&quot;:1268,&quot;resizeWidth&quot;:600,&quot;bytes&quot;:734227,&quot;alt&quot;:&quot;A hand-drawn fantasy-style map from Designing Data-Intensive Applications, depicting various regions metaphorically named after data concepts like \&quot;Hadoop Region\&quot;, \&quot;Log-Structured Storage\&quot;, and \&quot;Kingdom of Analytics\&quot;.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="A hand-drawn fantasy-style map from Designing Data-Intensive Applications, depicting various regions metaphorically named after data concepts like &quot;Hadoop Region&quot;, &quot;Log-Structured Storage&quot;, and &quot;Kingdom of Analytics&quot;." title="A hand-drawn fantasy-style map from Designing Data-Intensive Applications, depicting various regions metaphorically named after data concepts like &quot;Hadoop Region&quot;, &quot;Log-Structured Storage&quot;, and &quot;Kingdom of Analytics&quot;." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I wanted a similar vibe, so I created this:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png" width="600" height="549.3131868131868" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1333,&quot;width&quot;:1456,&quot;resizeWidth&quot;:600,&quot;bytes&quot;:3715838,&quot;alt&quot;:&quot;A fantasy-style illustrated map titled 100 Go Mistakes and How to Avoid Them, with labeled regions like “Concurrency,” “Functions &amp; Methods,” “Testing,” and “Data Types,” representing different Go programming topics in a whimsical, visual way.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="A fantasy-style illustrated map titled 100 Go Mistakes and How to Avoid Them, with labeled regions like “Concurrency,” “Functions &amp; Methods,” “Testing,” and “Data Types,” representing different Go programming topics in a whimsical, visual way." title="A fantasy-style illustrated map titled 100 Go Mistakes and How to Avoid Them, with labeled regions like “Concurrency,” “Functions &amp; Methods,” “Testing,” and “Data Types,” representing different Go programming topics in a whimsical, visual way." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The map is full of tiny easter eggs. For example, </span><em><a href="https://www.ardanlabs.com/instructors/bill-kennedy/" rel="">Kennedy</a><span> Sea</span></em><span>, </span><em><a href="https://swtch.com/~rsc/" rel="">Cox</a><span> River</span></em><span>, </span><em><a href="https://dave.cheney.net/" rel="">Cheney</a><span> Ocean</span></em><span>, </span><em><span>Mount </span><a href="https://github.com/rakyll" rel="">Dogan</a></em><span>, or even </span><em><a href="https://medium.com/@val_deleplace" rel="">Deleplace</a><span> Tower</span></em><span>. It was my way of giving a nod to the people in the Go community who helped me the most through their content.</span></p><p>So, it’s January 2022, and we finally receive the results from 3P.</p><p><span>In total, I got 15 reviews and </span><strong>an average rating of… 4.6/5</strong><span>. Nice! 😊</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png" width="1160" height="267" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/af9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:267,&quot;width&quot;:1160,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:463085,&quot;alt&quot;:&quot;Email screenshot showing the author celebrating the 3P review phase of the book with a 4.6/5 rating, having reached his secret goal of surpassing a 4.5 average rating.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Email screenshot showing the author celebrating the 3P review phase of the book with a 4.6/5 rating, having reached his secret goal of surpassing a 4.5 average rating." title="Email screenshot showing the author celebrating the 3P review phase of the book with a 4.6/5 rating, having reached his secret goal of surpassing a 4.5 average rating." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>And speaking of good news, around the same time, Manning finally decided to switch my TDE to someone else, </span><a href="https://x.com/tjvdeurzen" rel="">Tim van Deurzen</a><span>. If you want a simple anecdote to understand Tim’s importance was for this book: during 3P, I received feedback from 15 reviewers. Yet I think Tim’s single review was possibly as valuable as all the others combined. The guy is an absolute rockstar; my book wouldn’t have been the same without him. Thanks again, Tim. 🙇‍♂️</span></p><p>One more month of work to take all the reviews into account, and…</p><p>We’re at the end of February 2022, and the book officially moves from the development stage to production. At this stage, only a few steps remain, and they are mostly handled by the publisher:</p><ul><li><p>Copyediting to refine grammar, style, and consistency</p></li><li><p>Proofreading to catch spelling, punctuation, and formatting errors</p></li><li><p>Typesetting to arrange the text, code, and images for publication</p></li><li><p>Indexing to compile a list of key terms and topics with page references</p></li></ul><p>One thing to note: from an author’s standpoint, the book is more or less complete at this stage. You can still add minor things, but the publisher wants to lock in a first version. That’s because adding even a single new paragraph means going through the process again for that section. That’s why publishers insist on fixing the version.</p><p>Reaching that point is a big milestone. To express what I felt at the time, there’s a great quote by Gene Fowler:</p><p>A book is never finished; it's abandoned.</p><p><span>Real question: how can you say a book is finished? For example, I could have improved a figure here, tweaked an example there, rephrased a sentence, or refined a conclusion. But that loop could have lasted forever. At some point, you just have to consider this version final, move to the next stage, and, in a way, </span><strong>abandon your book</strong><span>.</span></p><p>It’s a tough feeling, but that’s how it goes.</p><p><span>That being said, finishing a book calls for a celebration. I remember having a drink one evening with my girlfriend, and we toasted to “</span><em>the end of the book.</em><span>” 🥂</span></p><p>Once again, I was way too naive.</p><p>It’s now time to talk about my second hiccup with Manning, but this time, it was way more serious.</p><p>We started the copyediting process, which is meant to refine grammar, style, and consistency. I don’t know about you, but I imagined the author’s involvement at this stage would be pretty lightweight, right? Absolutely not. At least, not for my book.</p><p><strong>First, the review process was an exercise in frustration and inefficiency.</strong></p><p><span>During the development phase, I wrote everything in </span><a href="https://asciidoc.org/" rel="">AsciiDoc</a><span>, generated content, and got feedback either as PDF comments from the DE or through the Manning website from reviewers.</span></p><p>But copyediting was different. The copyeditor was directly editing my content and leaving questions in the source itself.</p><p>To clarify, my content was stored in a Git repository. Instead of going through a classic pull request (PR) workflow, the copyeditor was directly modifying the source files and adding comments on top of that.</p><p>For example, here is my original sentence:</p><pre><code>Throughout this section we also used an example with errors because ...</code></pre><p>And here’s what it looked like after her changes:</p><pre><code>// AQ: please clarify leading to this error. Which error?
In this section, we used an example with errors because ...</code></pre><p>So she was:</p><ul><li><p>Modifying the content directly</p></li><li><p>Adding comments in the source code itself (🤯)</p></li></ul><p>I tried to explain how review workflows work in a PR-based setup, and gave concrete suggestions for how we could improve the process. But they didn’t want to try it. That might sound like a small thing, but at that stage, all I wanted was a smooth and efficient collaboration process. The easier it was for me to track changes, the better.</p><p>But if that were the only problem, it would have been fine. Unfortunately, it was way more than that.</p><p><span>To put it simply, </span><strong>my experience with the copyeditor was catastrophic</strong><span>. She completely wrecked the content and introduced countless typos and mistakes.</span></p><p>For example, many of the issues came from her confusing the programming language Go with the verb to go. That led to many sentences that made absolutely no sense anymore.</p><p>Let me be clear: it’s totally fine if a copyeditor introduces a few mistakes. It’s supposed to be a collaborative process: they adapt the content, we go back and forth, and we improve it together.</p><p>But in this case, the number of mistakes was absurd. In just one chapter, she introduced 23 errors. I don’t mean things that could be improved; I mean factual errors. Now multiply that by 12 chapters.</p><p><span>And it wasn’t just about errors. When I asked questions like, “</span><em>Why did you remove this sentence? I think it’s an important transition, and we should keep it</em><span>”, she would sometimes just delete my comment. Such a great collaboration, right?</span></p><p>Eventually, when I raised more and more concerns, what was her response?</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png" width="725.1500244140625" height="194.36206251787036" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;normal&quot;,&quot;height&quot;:249,&quot;width&quot;:929,&quot;resizeWidth&quot;:725.1500244140625,&quot;bytes&quot;:487151,&quot;alt&quot;:&quot;Screenshot of an email from the copyeditor stating \&quot;Chapters 1–5 are ready for indexing,\&quot; sent without the author's approval after major issues were raised.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of an email from the copyeditor stating &quot;Chapters 1–5 are ready for indexing,&quot; sent without the author's approval after major issues were raised." title="Screenshot of an email from the copyeditor stating &quot;Chapters 1–5 are ready for indexing,&quot; sent without the author's approval after major issues were raised." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>She basically said chapters 1 to 5 were ready to move to the next phase without even letting me fix the mistakes she introduced.</p><p>Let me try to put you in my shoes so you understand how I felt.</p><p><span>You’ve spent 15 months writing your book. You’ve done countless iterations to carefully improve every single one of the 100 mistakes. You’ve spent more hours than you can count. You’ve carefully processed hundreds, if not thousands, of pieces of feedback. You even took dedicated holidays just to make progress on it. And then, all of a sudden, someone jumps into your book, completely butchers it, and says, “</span><em>These chapters are ready!</em><span>”</span></p><p><strong>How would you feel?</strong></p><p>Well, that’s exactly how I felt. And to be honest, it was too much for me. I wrote an escalation email (which I won’t share here as it was way too salty) explaining that until this was resolved (meaning she had to leave), I would stop working on my own book.</p><p>To be fair to Manning, the situation was handled fairly quickly. Especially by one person: my acquisition editor (the scout). I really think that he saved the book. Because at that point, I swear that I was ready to give up everything.</p><p>In March 2022, the copyeditor stopped working on my book (she was external to Manning), and I was assigned someone new. That change was a huge relief.</p><p>Unfortunately, it meant going through everything again. I had to fix myself every single error she had introduced in the first five chapters, which delayed the book and cost me way more time and energy than I had anticipated.</p><p>Finally, at the end of July 2022, after six months of work after I thought the book was "finished", we reached the end. And this time, for real.</p><p><span>Did I try to celebrate again with my girlfriend? Yes. What did she reply? “</span><em>I can’t trust you anymore with your book.</em><span>”</span></p><p>A few months later, I received a box in the mail. I opened it, and inside were copies of my own book, sent by Manning. As you can imagine, I must have felt a mix of pride and extreme happiness, right? Nope.</p><p><span>I just couldn’t feel anything. I remember holding my own book in my hands and thinking, “</span><em>What’s wrong with me? Why can’t I just be happy?</em><span>”</span></p><p><span>This feeling isn’t that uncommon and is often referred to as </span><strong>post-publication depression</strong><span>.</span></p><p>It’s incredibly hard to put words to what I was feeling. It was around August 2022 and I had started working on the content back in July 2019. That’s almost three years of work. It had been such an intense period, and suddenly it was over.</p><p><span>It wasn’t really sadness. </span><strong>Just… emptiness, I would say.</strong></p><p>Over the following months, I slowly started to recover and eventually became very positive about the whole experience. But that moment really changed the way I look at other people’s work.</p><p>When we evaluate something, a coding project, a book, or an illustration, we often forget how much time, energy, and emotion someone may have poured into it. We have no idea what that work cost them.</p><p>So, the book is released, and everyone can buy it. Time for promotion!</p><p><span>I started with one </span><a href="https://www.reddit.com/r/golang/comments/wwci1c/100_go_mistakes_released/" rel="">Reddit post</a><span> of 175 words, followed by a </span><a href="https://x.com/teivah/status/1562333506105114624" rel="">tweet</a><span> of 49 words:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png" width="550" height="197.19358533791524" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/033238b5-e992-44ae-86e5-3057d41a963b_873x313.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:313,&quot;width&quot;:873,&quot;resizeWidth&quot;:550,&quot;bytes&quot;:79463,&quot;alt&quot;:&quot;Screenshot of a tweet announcing the release of the book \&quot;100 Go Mistakes and How to Avoid Them,\&quot; expressing gratitude to Manning Books and all involved.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of a tweet announcing the release of the book &quot;100 Go Mistakes and How to Avoid Them,&quot; expressing gratitude to Manning Books and all involved." title="Screenshot of a tweet announcing the release of the book &quot;100 Go Mistakes and How to Avoid Them,&quot; expressing gratitude to Manning Books and all involved." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>In total, writing these 224 words took me around 10 minutes. And after that? </span><strong>Nothing for more than a year.</strong></p><p>There were two main reasons.</p><p>First, I was mentally exhausted. Especially after the painful six-month process where I thought my book was finished, but it wasn’t; I just had no energy left. I kept declining Manning’s requests to promote the book at conferences, meetups, YouTube videos, Twitch streams, and so on.</p><p><span>Second, I developed this belief: if my book was good, people would talk about it and share it. I don’t know if I was being delusional, lucky, or a mix of both, but it turns out I was right. The number of people who kept commenting on the book across </span><a href="https://www.reddit.com/r/golang/search/?q=%22100+go+mistakes%22&amp;type=comments&amp;sort=new&amp;cId=a764214d-3cf1-4a80-be1c-41dc991dac42&amp;iId=744f1a2c-3d94-4ace-a3ca-b8c5a759705e" rel="">Reddit</a><span>, </span><a href="https://x.com/search?q=%22100%20go%20mistakes%22&amp;src=typed_query&amp;f=live" rel="">X</a><span>, YouTube, and other platforms was absolutely sensational for me.</span></p><div id="youtube2-a-lYYYr-5a8" data-attrs="{&quot;videoId&quot;:&quot;a-lYYYr-5a8&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/a-lYYYr-5a8?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p><span>One important thing to clarify. This wasn’t about being overconfident or full of ego, like, “</span><em>Yeah, my content is so good, of course people will talk about it!</em><span>”</span></p><p><span>It was more like, “</span><em>If my book is worth sharing, people will share it. If not, then should I really bother promoting something people don’t even enjoy?</em><span>”</span></p><p>Of course, it would’ve broken my heart if people said the content was terrible. But still, that was really my mindset during that year, and honestly, it hasn’t changed much since then.</p><p><span>A year later, in September 2023, with the help of </span><a href="https://github.com/teivah/100-go-mistakes/graphs/contributors" rel="">people</a><span> from the Go community, I released </span><a href="https://100go.co/" rel="">100go.co</a><span>, which contains a summary of all the mistakes in the book:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png" width="500" height="716.1949685534591" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:911,&quot;width&quot;:636,&quot;resizeWidth&quot;:500,&quot;bytes&quot;:146802,&quot;alt&quot;:&quot;Screenshot of 100go.co displaying some summarized Go mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10a82403-e4b5-4354-a318-cf67551135cd_636x1183.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of 100go.co displaying some summarized Go mistakes." title="Screenshot of 100go.co displaying some summarized Go mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>That website was kind of a way to </span><strong>close the loop on my initial wish to create open-source content</strong><span>. People who can’t or just don’t want to buy the book can still visit </span><a href="https://100go.co/" rel="">100go.co</a><span> and access a significant part of the content for free. The traffic ended up being quite strong for such a specialized website: 150k views in 2024.</span></p><p><span>I discussed </span><a href="https://100go.co/" rel="">100go.co</a><span> with Manning, and they said it was a “</span><em>brilliant idea</em><span>”. They even offered me a paid role to help other authors promote their content.</span></p><p>In all honesty, I think they overestimate my sales skills. I haven’t done a lot in that area. For example, last year, I gave a talk at a public conference, and I didn’t even mention that I had written a book. Not because I hate promotion. Well, I do, but that wasn’t the main reason. The real reason was that mentioning my book wouldn’t have improved this talk in any way. So I just didn’t say anything.</p><p>What about Manning’s offer to help other authors? I didn’t take it.</p><p>If it were up to me, people would still have the option to buy my book physically, but the whole content would be available online for free, with no login required.</p><p><span>I’ve considered talking to Manning about that. We will see if they still believe I have “</span><em>brilliant</em><span>” ideas. 😅</span></p><p>At the end of 2022, Manning informed me they had secured licensing deals for four translations. For each of them, I received a fixed payment along with royalties. For example, I earned $4,000 and 6% royalties for the Japanese translation.</p><p><span>As of the end of September 2024, </span><strong>the English version had sold 10,494 copies</strong><span>. I don’t have the sales figures for the translations, but someone at Manning told me that usually, the combined sales of all translated versions may match the English copies sold.</span></p><blockquote><p><strong>NOTE</strong><span>: My book also started a new Manning </span><a href="https://www.google.com/search?q=site%3Amanning.com+%22100%22+%22mistakes+and+how+to+avoid+them" rel="">series</a><span> called </span><em>100 … Mistakes and How to Avoid Them</em><span>, with editions in Java, C++, and SQL Server, for instance.</span></p></blockquote><p><span>To this day, </span><strong>I’ve earned around $47,000 from the book</strong><span> (before taxes). If I consider the time spent, using a conservative lower bound of 2,000 hours, that comes out to about $23 per hour.</span></p><p>There are two ways to look at that hourly rate.</p><p>One could say it’s pretty low compared to what a software engineer could earn. I could have invested 2,000 hours into some paid technical work and probably made a lot more.</p><p><span>The other way to approach it is not to care too much about it. Sure, the money I earned isn’t negligible (it paid for quite a few holidays, to be honest), but my main message is this: </span><strong>if you’re a new author, don’t think about writing your book to become rich</strong><span>.</span></p><p>I’m sure there are well-known authors like Robert Martin who can make significant income from pretty much any book they release. But for the rest of us, the “normal” authors, we can’t and shouldn’t aim to get rich, especially from a single book.</p><p>For me, the money I earned from this book was never the goal. I’m happy with it, of course, but that’s not where my main motivation was.</p><p>It was somewhere else.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png" width="1200" height="600.8241758241758" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:729,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:2900993,&quot;alt&quot;:&quot;A lot of messages saying things like: thank you for your book.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="A lot of messages saying things like: thank you for your book." title="A lot of messages saying things like: thank you for your book." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>So, did I reach my secret goal of getting a rating over 4.5? Yes, I did!</p><div><figure><a target="_blank" href="http://goodreads.com/book/show/58571862-100-go-mistakes-and-how-to-avoid-them" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png" width="500" height="204.54545454545453" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:333,&quot;width&quot;:814,&quot;resizeWidth&quot;:500,&quot;bytes&quot;:48359,&quot;alt&quot;:&quot;Goodreads listing for 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi, showing a 4.66-star rating based on 198 ratings and 36 reviews.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;http://goodreads.com/book/show/58571862-100-go-mistakes-and-how-to-avoid-them&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Goodreads listing for 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi, showing a 4.66-star rating based on 198 ratings and 36 reviews." title="Goodreads listing for 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi, showing a 4.66-star rating based on 198 ratings and 36 reviews." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Did I write the best Go book? Probably not. There are many great books out there and to me, a book like </span><em><a href="https://www.goodreads.com/book/show/58655212-ultimate-go-notebook" rel="">Ultimate Go Notebook</a></em><span> is the best one, in my opinion.</span></p><p>But in the end, do I really care if my book is the best or not? Not really.</p><p>The goal of writing the “best Go book” was just a personal motivation, something to push me to do the best I could at that specific time in my life. The book is not perfect, but it’s the best version I could have written then.</p><p>And for that, I will always be proud of it.</p><p>Teiva</p><p><strong>P.S.</strong><span> I don’t know about Go rankings but at least my book was listed among the </span><em><a href="https://www.linkedin.com/pulse/best-8-javascript-books-developers-2024-muhammad-fahad-bhutta-hja8f/" rel="">Best 8 JavaScript Books for Developers in 2024</a></em><span>. Being a Go book that’s an achievement, isn’t it?</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg" width="1456" height="1092" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1092,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:5540661,&quot;alt&quot;:&quot;A hand showing a thumbs-up next to the book 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="A hand showing a thumbs-up next to the book 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi." title="A hand showing a thumbs-up next to the book 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Yes, I still think the cover is ugly.</figcaption></figure></div><p>Thanks to:</p><ul><li><p>The Go community. If I fell in love with this language, it’s also because most people there are very supportive.</p></li><li><p>All the readers of the book.</p></li><li><p>All the reviewers and Tim, who helped me shape something far better than I could have done on my own.</p></li><li><p>My DE and my acquisition editor who were the two pillars of this book.</p></li><li><p>Manning. I don’t know how you will perceive my story, but in the end, I’m really grateful to Manning, and I’m glad they were the only publisher I had ever contacted.</p></li><li><p><span>The readers of </span><em>The Coder Cafe</em><span>. After a long period where I couldn’t write anything at all, this newsletter reminded me how much I love writing.</span></p></li></ul><p><span>💬 </span><em>Manning recently contacted me about doing a second edition. I’m thinking about it and would love to hear what you think.</em></p><p><span>❤️ </span><em>If you made it this far and enjoyed the post, please consider giving it a like.</em></p><div><figure><a target="_blank" href="https://www.thecoder.cafe/" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png" width="450" height="225" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:600,&quot;width&quot;:1200,&quot;resizeWidth&quot;:450,&quot;bytes&quot;:85525,&quot;alt&quot;:&quot;The Coder Cafe logo.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://www.thecoder.cafe&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/150533401?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="The Coder Cafe logo." title="The Coder Cafe logo." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><ul><li><p><a href="https://laurensapala.com/yay-finished-book-feel-depressed/" rel="">Yay! I Finished My Book! So Why Do I Feel So Depressed?</a></p></li></ul></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PEP 750 – Template Strings (t-strings) have been accepted (377 pts)]]></title>
            <link>https://peps.python.org/pep-0750/</link>
            <guid>43647716</guid>
            <pubDate>Thu, 10 Apr 2025 20:24:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://peps.python.org/pep-0750/">https://peps.python.org/pep-0750/</a>, See on <a href="https://news.ycombinator.com/item?id=43647716">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="pep-content">

<dl>
<dt>Author<span>:</span></dt>
<dd>Jim Baker &lt;jim.baker at python.org&gt;,
Guido van Rossum &lt;guido at python.org&gt;,
Paul Everitt &lt;pauleveritt at me.com&gt;,
Koudai Aono &lt;koxudaxi at gmail.com&gt;,
Lysandros Nikolaou &lt;lisandrosnik at gmail.com&gt;,
Dave Peck &lt;davepeck at davepeck.org&gt;</dd>
<dt>Discussions-To<span>:</span></dt>
<dd><a href="https://discuss.python.org/t/71594">Discourse thread</a></dd>
<dt>Status<span>:</span></dt>
<dd><abbr title="Normative proposal accepted for implementation">Accepted</abbr></dd>
<dt>Type<span>:</span></dt>
<dd><abbr title="Normative PEP with a new feature for Python, implementation change for CPython or interoperability standard for the ecosystem">Standards Track</abbr></dd>
<dt>Created<span>:</span></dt>
<dd>08-Jul-2024</dd>
<dt>Python-Version<span>:</span></dt>
<dd>3.14</dd>
<dt>Post-History<span>:</span></dt>
<dd><a href="https://discuss.python.org/t/60408" title="Discourse thread">09-Aug-2024</a>,
<a href="https://discuss.python.org/t/60408/201" title="Discourse message">17-Oct-2024</a>,
<a href="https://discuss.python.org/t/60408/226" title="Discourse message">21-Oct-2024</a>,
<a href="https://discuss.python.org/t/71594" title="Discourse thread">18-Nov-2024</a></dd>
<dt>Resolution<span>:</span></dt>
<dd><a href="https://discuss.python.org/t/71594/130">10-Apr-2025</a></dd>
</dl>
<hr>
<section id="contents">
<details><summary>Table of Contents</summary><ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#relationship-with-other-peps">Relationship With Other PEPs</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a><ul>
<li><a href="#template-string-literals">Template String Literals</a></li>
<li><a href="#the-template-type">The <code><span>Template</span></code> Type</a></li>
<li><a href="#the-interpolation-type">The <code><span>Interpolation</span></code> Type</a></li>
<li><a href="#the-template-values-property">The <code><span>Template.values</span></code> Property</a></li>
<li><a href="#iterating-template-contents">Iterating <code><span>Template</span></code> Contents</a></li>
<li><a href="#processing-template-strings">Processing Template Strings</a></li>
<li><a href="#template-string-concatenation">Template String Concatenation</a></li>
<li><a href="#template-and-interpolation-equality">Template and Interpolation Equality</a></li>
<li><a href="#no-support-for-ordering">No Support for Ordering</a></li>
<li><a href="#support-for-the-debug-specifier">Support for the debug specifier (<code><span>=</span></code>)</a></li>
<li><a href="#raw-template-strings">Raw Template Strings</a></li>
<li><a href="#interpolation-expression-evaluation">Interpolation Expression Evaluation</a></li>
<li><a href="#exceptions">Exceptions</a></li>
<li><a href="#no-template-str-implementation">No <code><span>Template.__str__()</span></code> Implementation</a></li>
<li><a href="#the-string-templatelib-module">The <code><span>string.templatelib</span></code> Module</a></li>
</ul>
</li>
<li><a href="#examples">Examples</a><ul>
<li><a href="#example-implementing-f-strings-with-t-strings">Example: Implementing f-strings with t-strings</a></li>
<li><a href="#example-structured-logging">Example: Structured Logging</a><ul>
<li><a href="#approach-1-custom-log-messages">Approach 1: Custom Log Messages</a></li>
<li><a href="#approach-2-custom-formatters">Approach 2: Custom Formatters</a></li>
</ul>
</li>
<li><a href="#example-html-templating">Example: HTML Templating</a></li>
</ul>
</li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#security-implications">Security Implications</a></li>
<li><a href="#how-to-teach-this">How To Teach This</a></li>
<li><a href="#why-another-templating-approach">Why another templating approach?</a></li>
<li><a href="#common-patterns-seen-in-processing-templates">Common Patterns Seen in Processing Templates</a><ul>
<li><a href="#structural-pattern-matching">Structural Pattern Matching</a></li>
<li><a href="#memoizing">Memoizing</a></li>
<li><a href="#parsing-to-intermediate-representations">Parsing to Intermediate Representations</a></li>
<li><a href="#context-sensitive-processing-of-interpolations">Context-sensitive Processing of Interpolations</a></li>
<li><a href="#nested-template-strings">Nested Template Strings</a></li>
<li><a href="#approaches-to-lazy-evaluation">Approaches to Lazy Evaluation</a></li>
<li><a href="#approaches-to-asynchronous-evaluation">Approaches to Asynchronous Evaluation</a></li>
<li><a href="#approaches-to-template-reuse">Approaches to Template Reuse</a></li>
<li><a href="#relation-to-format-strings">Relation to Format Strings</a></li>
</ul>
</li>
<li><a href="#reference-implementation">Reference Implementation</a></li>
<li><a href="#rejected-ideas">Rejected Ideas</a><ul>
<li><a href="#arbitrary-string-literal-prefixes">Arbitrary String Literal Prefixes</a></li>
<li><a href="#delayed-evaluation-of-interpolations">Delayed Evaluation of Interpolations</a></li>
<li><a href="#making-template-and-interpolation-into-protocols">Making <code><span>Template</span></code> and <code><span>Interpolation</span></code> Into Protocols</a></li>
<li><a href="#overridden-eq-and-hash-for-template-and-interpolation">Overridden <code><span>__eq__</span></code> and <code><span>__hash__</span></code> for <code><span>Template</span></code> and <code><span>Interpolation</span></code></a></li>
<li><a href="#an-additional-decoded-type">An Additional <code><span>Decoded</span></code> Type</a></li>
<li><a href="#the-final-home-for-template-and-interpolation">The Final Home for <code><span>Template</span></code> and <code><span>Interpolation</span></code></a></li>
<li><a href="#enable-full-reconstruction-of-original-template-literal">Enable Full Reconstruction of Original Template Literal</a></li>
<li><a href="#disallowing-string-concatenation">Disallowing String Concatenation</a></li>
<li><a href="#arbitrary-conversion-values">Arbitrary Conversion Values</a></li>
<li><a href="#removing-conversion-from-interpolation">Removing <code><span>conversion</span></code> From <code><span>Interpolation</span></code></a></li>
<li><a href="#alternate-interpolation-symbols">Alternate Interpolation Symbols</a></li>
<li><a href="#alternate-layouts-for-template">Alternate Layouts for <code><span>Template</span></code></a></li>
<li><a href="#mechanism-to-describe-the-kind-of-template">Mechanism to Describe the “Kind” of Template</a></li>
<li><a href="#binary-template-strings">Binary Template Strings</a></li>
</ul>
</li>
<li><a href="#acknowledgements">Acknowledgements</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</details></section>
<section id="abstract">
<h2><a href="#abstract" role="doc-backlink">Abstract</a></h2>
<p>This PEP introduces template strings for custom string processing.</p>
<p>Template strings are a generalization of f-strings, using a <code><span>t</span></code> in place of
the <code><span>f</span></code> prefix. Instead of evaluating to <code><span>str</span></code>, t-strings evaluate to a new
type, <code><span>Template</span></code>:</p>
<div><pre><span></span><span>template</span><span>:</span> <span>Template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
</pre></div>
<p>Templates provide developers with access to the string and its interpolated
values <em>before</em> they are combined. This brings native flexible string
processing to the Python language and enables safety checks, web templating,
domain-specific languages, and more.</p>
</section>
<section id="relationship-with-other-peps">
<h2><a href="#relationship-with-other-peps" role="doc-backlink">Relationship With Other PEPs</a></h2>
<p>Python introduced f-strings in Python 3.6 with <a href="https://peps.python.org/pep-0498/" title="PEP 498 – Literal String Interpolation">PEP 498</a>. The grammar was
then formalized in <a href="https://peps.python.org/pep-0701/" title="PEP 701 – Syntactic formalization of f-strings">PEP 701</a> which also lifted some restrictions. This PEP
is based on PEP 701.</p>
<p>At nearly the same time PEP 498 arrived, <a href="https://peps.python.org/pep-0501/" title="PEP 501 – General purpose template literal strings">PEP 501</a> was written to provide
“i-strings” – that is, “interpolation template strings”. The PEP was
deferred pending further experience with f-strings. Work on this PEP was
resumed by a different author in March 2023, introducing “t-strings” as template
literal strings, and built atop PEP 701.</p>
<p>The authors of this PEP consider it to be a generalization and simplification
of the updated work in PEP 501. (That PEP has also recently been updated to
reflect the new ideas in this PEP.)</p>
</section>
<section id="motivation">
<h2><a href="#motivation" role="doc-backlink">Motivation</a></h2>
<p>Python f-strings are easy to use and very popular. Over time, however, developers
have encountered limitations that make them
<a href="https://docs.djangoproject.com/en/5.1/ref/utils/#django.utils.html.format_html">unsuitable for certain use cases</a>.
In particular, f-strings provide no way to intercept and transform interpolated
values before they are combined into a final string.</p>
<p>As a result, incautious use of f-strings can lead to security vulnerabilities.
For example, a user executing a SQL query with <a href="https://docs.python.org/3/library/sqlite3.html#module-sqlite3" title="(in Python v3.13)"><code><span>sqlite3</span></code></a>
may be tempted to use an f-string to embed values into their SQL expression,
which could lead to a <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attack</a>.
Or, a developer building HTML may include unescaped user input in the string,
leading to a <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">cross-site scripting (XSS)</a>
vulnerability.</p>
<p>More broadly, the inability to transform interpolated values before they are
combined into a final string limits the utility of f-strings in more complex
string processing tasks.</p>
<p>Template strings address these problems by providing
developers with access to the string and its interpolated values.</p>
<p>For example, imagine we want to generate some HTML. Using template strings,
we can define an <code><span>html()</span></code> function that allows us to automatically sanitize
content:</p>
<div><pre><span></span><span>evil</span> <span>=</span> <span>"&lt;script&gt;alert('evil')&lt;/script&gt;"</span>
<span>template</span> <span>=</span> <span>t</span><span>"&lt;p&gt;</span><span>{evil}</span><span>&lt;/p&gt;"</span>
<span>assert</span> <span>html</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"&lt;p&gt;&amp;lt;script&amp;gt;alert('evil')&amp;lt;/script&amp;gt;&lt;/p&gt;"</span>
</pre></div>
<p>Likewise, our hypothetical <code><span>html()</span></code> function can make it easy for developers
to add attributes to HTML elements using a dictionary:</p>
<div><pre><span></span><span>attributes</span> <span>=</span> <span>{</span><span>"src"</span><span>:</span> <span>"shrubbery.jpg"</span><span>,</span> <span>"alt"</span><span>:</span> <span>"looks nice"</span><span>}</span>
<span>template</span> <span>=</span> <span>t</span><span>"&lt;img </span><span>{attributes}</span><span> /&gt;"</span>
<span>assert</span> <span>html</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>'&lt;img src="shrubbery.jpg" alt="looks nice" /&gt;'</span>
</pre></div>
<p>Neither of these examples is possible with f-strings. By providing a
mechanism to intercept and transform interpolated values, template strings
enable a wide range of string processing use cases.</p>
</section>
<section id="specification">
<h2><a href="#specification" role="doc-backlink">Specification</a></h2>
<section id="template-string-literals">
<h3><a href="#template-string-literals" role="doc-backlink">Template String Literals</a></h3>
<p>This PEP introduces a new string prefix, <code><span>t</span></code>, to define template string literals.
These literals resolve to a new type, <code><span>Template</span></code>, found in the standard library
module <code><span>string.templatelib</span></code>.</p>
<p>The following code creates a <code><span>Template</span></code> instance:</p>
<div><pre><span></span><span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Template</span>
<span>template</span> <span>=</span> <span>t</span><span>"This is a template string."</span>
<span>assert</span> <span>isinstance</span><span>(</span><span>template</span><span>,</span> <span>Template</span><span>)</span>
</pre></div>
<p>Template string literals support the full syntax of <a href="https://peps.python.org/pep-0701/" title="PEP 701 – Syntactic formalization of f-strings">PEP 701</a>. This includes
the ability to nest template strings within interpolations, as well as the ability
to use all valid quote marks (<code><span>'</span></code>, <code><span>"</span></code>, <code><span>'''</span></code>, and <code><span>"""</span></code>). Like other string
prefixes, the <code><span>t</span></code> prefix must immediately precede the quote. Like f-strings,
both lowercase <code><span>t</span></code> and uppercase <code><span>T</span></code> prefixes are supported. Like
f-strings, t-strings may not be combined with <code><span>u</span></code> or the <code><span>b</span></code> prefix.</p>
<p>Additionally, f-strings and t-strings cannot be combined, so the <code><span>ft</span></code>
prefix is invalid. t-strings <em>may</em> be combined with the <code><span>r</span></code> prefix;
see the <a href="#raw-template-strings">Raw Template Strings</a> section below for more information.</p>
</section>
<section id="the-template-type">
<h3><a href="#the-template-type" role="doc-backlink">The <code><span>Template</span></code> Type</a></h3>
<p>Template strings evaluate to an instance of a new immutable type,
<code><span>string.templatelib.Template</span></code>:</p>
<div><pre><span></span><span>class</span><span> </span><span>Template</span><span>:</span>
    <span>strings</span><span>:</span> <span>tuple</span><span>[</span><span>str</span><span>,</span> <span>...</span><span>]</span>
<span>    </span><span>"""</span>
<span>    A non-empty tuple of the string parts of the template,</span>
<span>    with N+1 items, where N is the number of interpolations</span>
<span>    in the template.</span>
<span>    """</span>

    <span>interpolations</span><span>:</span> <span>tuple</span><span>[</span><span>Interpolation</span><span>,</span> <span>...</span><span>]</span>
<span>    </span><span>"""</span>
<span>    A tuple of the interpolation parts of the template.</span>
<span>    This will be an empty tuple if there are no interpolations.</span>
<span>    """</span>

    <span>def</span><span> </span><span>__new__</span><span>(</span><span>cls</span><span>,</span> <span>*</span><span>args</span><span>:</span> <span>str</span> <span>|</span> <span>Interpolation</span><span>):</span>
<span>        </span><span>"""</span>
<span>        Create a new Template instance.</span>

<span>        Arguments can be provided in any order.</span>
<span>        """</span>
        <span>...</span>

    <span>@property</span>
    <span>def</span><span> </span><span>values</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>tuple</span><span>[</span><span>object</span><span>,</span> <span>...</span><span>]:</span>
<span>        </span><span>"""</span>
<span>        Return a tuple of the `value` attributes of each Interpolation</span>
<span>        in the template.</span>
<span>        This will be an empty tuple if there are no interpolations.</span>
<span>        """</span>
        <span>...</span>

    <span>def</span><span> </span><span>__iter__</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>Iterator</span><span>[</span><span>str</span> <span>|</span> <span>Interpolation</span><span>]:</span>
<span>        </span><span>"""</span>
<span>        Iterate over the string parts and interpolations in the template.</span>

<span>        These may appear in any order. Empty strings will not be included.</span>
<span>        """</span>
        <span>...</span>
</pre></div>
<p>The <code><span>strings</span></code> and <code><span>interpolations</span></code> attributes provide access to the string
parts and any interpolations in the literal:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"Hello "</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
</pre></div>
</section>
<section id="the-interpolation-type">
<h3><a href="#the-interpolation-type" role="doc-backlink">The <code><span>Interpolation</span></code> Type</a></h3>
<p>The <code><span>Interpolation</span></code> type represents an expression inside a template string.
Like <code><span>Template</span></code>, it is a new class found in the <code><span>string.templatelib</span></code> module:</p>
<div><pre><span></span><span>class</span><span> </span><span>Interpolation</span><span>:</span>
    <span>value</span><span>:</span> <span>object</span>
    <span>expression</span><span>:</span> <span>str</span>
    <span>conversion</span><span>:</span> <span>Literal</span><span>[</span><span>"a"</span><span>,</span> <span>"r"</span><span>,</span> <span>"s"</span><span>]</span> <span>|</span> <span>None</span>
    <span>format_spec</span><span>:</span> <span>str</span>

    <span>__match_args__</span> <span>=</span> <span>(</span><span>"value"</span><span>,</span> <span>"expression"</span><span>,</span> <span>"conversion"</span><span>,</span> <span>"format_spec"</span><span>)</span>

    <span>def</span><span> </span><span>__new__</span><span>(</span>
        <span>cls</span><span>,</span>
        <span>value</span><span>:</span> <span>object</span><span>,</span>
        <span>expression</span><span>:</span> <span>str</span><span>,</span>
        <span>conversion</span><span>:</span> <span>Literal</span><span>[</span><span>"a"</span><span>,</span> <span>"r"</span><span>,</span> <span>"s"</span><span>]</span> <span>|</span> <span>None</span> <span>=</span> <span>None</span><span>,</span>
        <span>format_spec</span><span>:</span> <span>str</span> <span>=</span> <span>""</span><span>,</span>
    <span>):</span>
        <span>...</span>
</pre></div>
<p>The <code><span>Interpolation</span></code> type is shallow immutable. Its attributes
cannot be reassigned.</p>
<p>The <code><span>value</span></code> attribute is the evaluated result of the interpolation:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
</pre></div>
<p>The <code><span>expression</span></code> attribute is the <em>original text</em> of the interpolation:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"name"</span>
</pre></div>
<p>We expect that the <code><span>expression</span></code> attribute will not be used in most template
processing code. It is provided for completeness and for use in debugging and
introspection. See both the <a href="#common-patterns-seen-in-processing-templates">Common Patterns Seen in Processing Templates</a>
section and the <a href="#examples">Examples</a> section for more information on how to process
template strings.</p>
<p>The <code><span>conversion</span></code> attribute is the <a href="https://docs.python.org/3/library/string.html#formatstrings" title="(in Python v3.13)"><span>optional conversion</span></a>
to be used, one of <code><span>r</span></code>, <code><span>s</span></code>, and <code><span>a</span></code>, corresponding to <code><span>repr()</span></code>,
<code><span>str()</span></code>, and <code><span>ascii()</span></code> conversions. As with f-strings, no other conversions
are supported:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name!r}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>conversion</span> <span>==</span> <span>"r"</span>
</pre></div>
<p>If no conversion is provided, <code><span>conversion</span></code> is <code><span>None</span></code>.</p>
<p>The <code><span>format_spec</span></code> attribute is the <a href="https://docs.python.org/3/library/string.html#formatspec" title="(in Python v3.13)"><span>format specification</span></a>.
As with f-strings, this is an arbitrary string that defines how to present the value:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>template</span> <span>=</span> <span>t</span><span>"Value: </span><span>{value:.2f}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>".2f"</span>
</pre></div>
<p>Format specifications in f-strings can themselves contain interpolations. This
is permitted in template strings as well; <code><span>format_spec</span></code> is set to the eagerly
evaluated result:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>precision</span> <span>=</span> <span>2</span>
<span>template</span> <span>=</span> <span>t</span><span>"Value: {value:.</span><span>{precision}</span><span>f}"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>".2f"</span>
</pre></div>
<p>If no format specification is provided, <code><span>format_spec</span></code> defaults to an empty
string (<code><span>""</span></code>). This matches the <code><span>format_spec</span></code> parameter of Python’s
<a href="https://docs.python.org/3/library/functions.html#format" title="(in Python v3.13)"><code><span>format()</span></code></a> built-in.</p>
<p>Unlike f-strings, it is up to code that processes the template to determine how to
interpret the <code><span>conversion</span></code> and <code><span>format_spec</span></code> attributes.
Such code is not required to use these attributes, but when present they should
be respected, and to the extent possible match the behavior of f-strings.
It would be surprising if, for example, a template string that uses <code><span>{value:.2f}</span></code>
did not round the value to two decimal places when processed.</p>
</section>
<section id="the-template-values-property">
<h3><a href="#the-template-values-property" role="doc-backlink">The <code><span>Template.values</span></code> Property</a></h3>
<p>The <code><span>Template.values</span></code> property is a shortcut for accessing the <code><span>value</span></code>
attribute of each <code><span>Interpolation</span></code> in the template and is equivalent to:</p>
<div><pre><span></span><span>@property</span>
<span>def</span><span> </span><span>values</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>tuple</span><span>[</span><span>object</span><span>,</span> <span>...</span><span>]:</span>
    <span>return</span> <span>tuple</span><span>(</span><span>i</span><span>.</span><span>value</span> <span>for</span> <span>i</span> <span>in</span> <span>self</span><span>.</span><span>interpolations</span><span>)</span>
</pre></div>
</section>
<section id="iterating-template-contents">
<h3><a href="#iterating-template-contents" role="doc-backlink">Iterating <code><span>Template</span></code> Contents</a></h3>
<p>The <code><span>Template.__iter__()</span></code> method provides a simple way to access the full
contents of a template. It yields the string parts and interpolations in
the order they appear, with empty strings omitted.</p>
<p>The <code><span>__iter__()</span></code> method is equivalent to:</p>
<div><pre><span></span><span>def</span><span> </span><span>__iter__</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>Iterator</span><span>[</span><span>str</span> <span>|</span> <span>Interpolation</span><span>]:</span>
    <span>for</span> <span>s</span><span>,</span> <span>i</span> <span>in</span> <span>zip_longest</span><span>(</span><span>self</span><span>.</span><span>strings</span><span>,</span> <span>self</span><span>.</span><span>interpolations</span><span>):</span>
        <span>if</span> <span>s</span><span>:</span>
            <span>yield</span> <span>s</span>
        <span>if</span> <span>i</span><span>:</span>
            <span>yield</span> <span>i</span>
</pre></div>
<p>The following examples show the <code><span>__iter__()</span></code> method in action:</p>
<div><pre><span></span><span>assert</span> <span>list</span><span>(</span><span>t</span><span>""</span><span>)</span> <span>==</span> <span>[]</span>

<span>assert</span> <span>list</span><span>(</span><span>t</span><span>"Hello"</span><span>)</span> <span>==</span> <span>[</span><span>"Hello"</span><span>]</span>

<span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>!"</span>
<span>contents</span> <span>=</span> <span>list</span><span>(</span><span>template</span><span>)</span>
<span>assert</span> <span>len</span><span>(</span><span>contents</span><span>)</span> <span>==</span> <span>3</span>
<span>assert</span> <span>contents</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"Hello "</span>
<span>assert</span> <span>contents</span><span>[</span><span>1</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
<span>assert</span> <span>contents</span><span>[</span><span>1</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"name"</span>
<span>assert</span> <span>contents</span><span>[</span><span>2</span><span>]</span> <span>==</span> <span>"!"</span>
</pre></div>
<p>Empty strings, which may be present in <code><span>Template.strings</span></code>, are not included
in the output of the <code><span>__iter__()</span></code> method:</p>
<div><pre><span></span><span>first</span> <span>=</span> <span>"Eat"</span>
<span>second</span> <span>=</span> <span>"Red Leicester"</span>
<span>template</span> <span>=</span> <span>t</span><span>"</span><span>{first}{second}</span><span>"</span>
<span>contents</span> <span>=</span> <span>list</span><span>(</span><span>template</span><span>)</span>
<span>assert</span> <span>len</span><span>(</span><span>contents</span><span>)</span> <span>==</span> <span>2</span>
<span>assert</span> <span>contents</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"Eat"</span>
<span>assert</span> <span>contents</span><span>[</span><span>0</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"first"</span>
<span>assert</span> <span>contents</span><span>[</span><span>1</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"Red Leicester"</span>
<span>assert</span> <span>contents</span><span>[</span><span>1</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"second"</span>

<span># However, the strings attribute contains empty strings:</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>""</span><span>,</span> <span>""</span><span>,</span> <span>""</span><span>)</span>
</pre></div>
<p>Template processing code can choose to work with any combination of
<code><span>strings</span></code>, <code><span>interpolations</span></code>, <code><span>values</span></code>, and <code><span>__iter__()</span></code> based on
requirements and convenience.</p>
</section>
<section id="processing-template-strings">
<h3><a href="#processing-template-strings" role="doc-backlink">Processing Template Strings</a></h3>
<p>Developers can write arbitrary code to process template strings. For example,
the following function renders static parts of the template in lowercase and
interpolations in uppercase:</p>
<div><pre><span></span><span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Template</span><span>,</span> <span>Interpolation</span>

<span>def</span><span> </span><span>lower_upper</span><span>(</span><span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
<span>    </span><span>"""Render static parts lowercased and interpolations uppercased."""</span>
    <span>parts</span><span>:</span> <span>list</span><span>[</span><span>str</span><span>]</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>item</span> <span>in</span> <span>template</span><span>:</span>
        <span>if</span> <span>isinstance</span><span>(</span><span>item</span><span>,</span> <span>Interpolation</span><span>):</span>
            <span>parts</span><span>.</span><span>append</span><span>(</span><span>str</span><span>(</span><span>item</span><span>.</span><span>value</span><span>)</span><span>.</span><span>upper</span><span>())</span>
        <span>else</span><span>:</span>
            <span>parts</span><span>.</span><span>append</span><span>(</span><span>item</span><span>.</span><span>lower</span><span>())</span>
    <span>return</span> <span>""</span><span>.</span><span>join</span><span>(</span><span>parts</span><span>)</span>

<span>name</span> <span>=</span> <span>"world"</span>
<span>assert</span> <span>lower_upper</span><span>(</span><span>t</span><span>"HELLO </span><span>{name}</span><span>"</span><span>)</span> <span>==</span> <span>"hello WORLD"</span>
</pre></div>
<p>There is no requirement that template strings are processed in any particular
way. Code that processes templates has no obligation to return a string.
Template strings are a flexible, general-purpose feature.</p>
<p>See the <a href="#common-patterns-seen-in-processing-templates">Common Patterns Seen in Processing Templates</a> section for more
information on how to process template strings. See the <a href="#examples">Examples</a> section
for detailed working examples.</p>
</section>
<section id="template-string-concatenation">
<h3><a href="#template-string-concatenation" role="doc-backlink">Template String Concatenation</a></h3>
<p>Template strings support explicit concatenation using <code><span>+</span></code>. Concatenation is
supported for two <code><span>Template</span></code> instances as well as for a <code><span>Template</span></code> instance
and a <code><span>str</span></code>:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"</span><span>{name}</span><span>"</span>

<span>assert</span> <span>isinstance</span><span>(</span><span>t</span><span>"Hello "</span> <span>+</span> <span>template</span><span>,</span> <span>Template</span><span>)</span>
<span>assert</span> <span>(</span><span>t</span><span>"Hello "</span> <span>+</span> <span>template</span><span>)</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>"Hello "</span><span>,</span> <span>""</span><span>)</span>
<span>assert</span> <span>(</span><span>t</span><span>"Hello "</span> <span>+</span> <span>template</span><span>)</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>

<span>assert</span> <span>isinstance</span><span>(</span><span>"Hello "</span> <span>+</span> <span>template</span><span>,</span> <span>Template</span><span>)</span>
<span>assert</span> <span>(</span><span>"Hello "</span> <span>+</span> <span>template</span><span>)</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>"Hello "</span><span>,</span> <span>""</span><span>)</span>
<span>assert</span> <span>(</span><span>"Hello "</span> <span>+</span> <span>template</span><span>)</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
</pre></div>
<p>Concatenation of templates is “viral”: the concatenation of a <code><span>Template</span></code> and
a <code><span>str</span></code> always results in a <code><span>Template</span></code> instance.</p>
<p>Python’s implicit concatenation syntax is also supported. The following code
will work as expected:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>assert</span> <span>(</span><span>t</span><span>"Hello "</span> <span>t</span><span>"World"</span><span>)</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>"Hello World"</span><span>,)</span>
<span>assert</span> <span>(</span><span>"Hello "</span> <span>t</span><span>"World"</span><span>)</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>"Hello World"</span><span>,)</span>
</pre></div>
<p>The <code><span>Template</span></code> type supports the <code><span>__add__()</span></code> and <code><span>__radd__()</span></code> methods
between two <code><span>Template</span></code> instances and between a <code><span>Template</span></code> instance and a
<code><span>str</span></code>.</p>
</section>
<section id="template-and-interpolation-equality">
<h3><a href="#template-and-interpolation-equality" role="doc-backlink">Template and Interpolation Equality</a></h3>
<p><code><span>Template</span></code> and <code><span>Interpolation</span></code> instances compare with object identity
(<code><span>is</span></code>).</p>
<p><code><span>Template</span></code> instances are intended to be used by template processing code,
which may return a string or any other type. Those types can provide their
own equality semantics as needed.</p>
</section>
<section id="no-support-for-ordering">
<h3><a href="#no-support-for-ordering" role="doc-backlink">No Support for Ordering</a></h3>
<p>The <code><span>Template</span></code> and <code><span>Interpolation</span></code> types do not support ordering. This is
unlike all other string literal types in Python, which support lexicographic
ordering. Because interpolations can contain arbitrary values, there is no
natural ordering for them. As a result, neither the <code><span>Template</span></code> nor the
<code><span>Interpolation</span></code> type implements the standard comparison methods.</p>
</section>
<section id="support-for-the-debug-specifier">
<h3><a href="#support-for-the-debug-specifier" role="doc-backlink">Support for the debug specifier (<code><span>=</span></code>)</a></h3>
<p>The debug specifier, <code><span>=</span></code>, is supported in template strings and behaves similarly
to how it behaves in f-strings, though due to limitations of the implementation
there is a slight difference.</p>
<p>In particular, <code><span>t'{value=}'</span></code> is treated as <code><span>t'value={value!r}'</span></code>:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello {name=}"</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"Hello name="</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>conversion</span> <span>==</span> <span>"r"</span>
</pre></div>
<p>If a separate format string is also provided, <code><span>t'{value=:fmt}</span></code> is treated
instead as <code><span>t'value={value!s:fmt}'</span></code>.</p>
<p>Whitespace is preserved in the debug specifier, so <code><span>t'{value</span> <span>=</span> <span>}'</span></code> is
treated as <code><span>t'value</span> <span>=</span> <span>{value!r}'</span></code>.</p>
</section>
<section id="raw-template-strings">
<h3><a href="#raw-template-strings" role="doc-backlink">Raw Template Strings</a></h3>
<p>Raw template strings are supported using the <code><span>rt</span></code> (or <code><span>tr</span></code>) prefix:</p>
<div><pre><span></span><span>trade</span> <span>=</span> <span>'shrubberies'</span>
<span>template</span> <span>=</span> <span>rt</span><span>'Did you say "</span><span>{trade}</span><span>"?</span><span>\n</span><span>'</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>r</span><span>'Did you say "'</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span><span>[</span><span>1</span><span>]</span> <span>==</span> <span>r</span><span>'"?\n'</span>
</pre></div>
<p>In this example, the <code><span>\n</span></code> is treated as two separate characters
(a backslash followed by ‘n’) rather than a newline character. This is
consistent with Python’s raw string behavior.</p>
<p>As with regular template strings, interpolations in raw template strings are
processed normally, allowing for the combination of raw string behavior and
dynamic content.</p>
</section>
<section id="interpolation-expression-evaluation">
<h3><a href="#interpolation-expression-evaluation" role="doc-backlink">Interpolation Expression Evaluation</a></h3>
<p>Expression evaluation for interpolations is the same as in <a href="https://peps.python.org/pep-0498/#expression-evaluation" title="PEP 498 – Literal String Interpolation § Expression evaluation">PEP 498</a>:</p>
<blockquote>
<p>The expressions that are extracted from the string are evaluated in the context
where the template string appeared. This means the expression has full access to its
lexical scope, including local and global variables. Any valid Python expression
can be used, including function and method calls.</p></blockquote>
<p>Template strings are evaluated eagerly from left to right, just like f-strings. This means that
interpolations are evaluated immediately when the template string is processed, not deferred
or wrapped in lambdas.</p>
</section>
<section id="exceptions">
<h3><a href="#exceptions" role="doc-backlink">Exceptions</a></h3>
<p>Exceptions raised in t-string literals are the same as those raised in f-string
literals.</p>
</section>
<section id="no-template-str-implementation">
<h3><a href="#no-template-str-implementation" role="doc-backlink">No <code><span>Template.__str__()</span></code> Implementation</a></h3>
<p>The <code><span>Template</span></code> type does not provide a specialized <code><span>__str__()</span></code> implementation.</p>
<p>This is because <code><span>Template</span></code> instances are intended to be used by template processing
code, which may return a string or any other type. There is no canonical way to
convert a Template to a string.</p>
<p>The <code><span>Template</span></code> and <code><span>Interpolation</span></code> types both provide useful <code><span>__repr__()</span></code>
implementations.</p>
</section>
<section id="the-string-templatelib-module">
<h3><a href="#the-string-templatelib-module" role="doc-backlink">The <code><span>string.templatelib</span></code> Module</a></h3>
<p>The <a href="https://docs.python.org/3/library/string.html#module-string" title="(in Python v3.13)"><code><span>string</span></code></a> module will be converted into a package, with a new
<code><span>templatelib</span></code> submodule containing the <code><span>Template</span></code> and <code><span>Interpolation</span></code>
types. Following the implementation of this PEP, this new module may be used
for related functions, such as <code><span>convert()</span></code>, or potential future template
processing code, such as shell script helpers.</p>
</section>
</section>
<section id="examples">
<h2><a href="#examples" role="doc-backlink">Examples</a></h2>
<p>All examples in this section of the PEP have fully tested reference implementations
available in the public <a href="https://github.com/davepeck/pep750-examples">pep750-examples</a>
git repository.</p>
<section id="example-implementing-f-strings-with-t-strings">
<h3><a href="#example-implementing-f-strings-with-t-strings" role="doc-backlink">Example: Implementing f-strings with t-strings</a></h3>
<p>It is easy to “implement” f-strings using t-strings. That is, we can
write a function <code><span>f(template:</span> <span>Template)</span> <span>-&gt;</span> <span>str</span></code> that processes a <code><span>Template</span></code>
in much the same way as an f-string literal, returning the same result:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>value</span> <span>=</span> <span>42</span>
<span>templated</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name!r}</span><span>, value: </span><span>{value:.2f}</span><span>"</span>
<span>formatted</span> <span>=</span> <span>f</span><span>"Hello </span><span>{</span><span>name</span><span>!r}</span><span>, value: </span><span>{</span><span>value</span><span>:</span><span>.2f</span><span>}</span><span>"</span>
<span>assert</span> <span>f</span><span>(</span><span>templated</span><span>)</span> <span>==</span> <span>formatted</span>
</pre></div>
<p>The <code><span>f()</span></code> function supports both conversion specifiers like <code><span>!r</span></code> and format
specifiers like <code><span>:.2f</span></code>. The full code is fairly simple:</p>
<div><pre><span></span><span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Template</span><span>,</span> <span>Interpolation</span>

<span>def</span><span> </span><span>convert</span><span>(</span><span>value</span><span>:</span> <span>object</span><span>,</span> <span>conversion</span><span>:</span> <span>Literal</span><span>[</span><span>"a"</span><span>,</span> <span>"r"</span><span>,</span> <span>"s"</span><span>]</span> <span>|</span> <span>None</span><span>)</span> <span>-&gt;</span> <span>object</span><span>:</span>
    <span>if</span> <span>conversion</span> <span>==</span> <span>"a"</span><span>:</span>
        <span>return</span> <span>ascii</span><span>(</span><span>value</span><span>)</span>
    <span>elif</span> <span>conversion</span> <span>==</span> <span>"r"</span><span>:</span>
        <span>return</span> <span>repr</span><span>(</span><span>value</span><span>)</span>
    <span>elif</span> <span>conversion</span> <span>==</span> <span>"s"</span><span>:</span>
        <span>return</span> <span>str</span><span>(</span><span>value</span><span>)</span>
    <span>return</span> <span>value</span>

<span>def</span><span> </span><span>f</span><span>(</span><span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
    <span>parts</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>item</span> <span>in</span> <span>template</span><span>:</span>
        <span>match</span> <span>item</span><span>:</span>
            <span>case</span> <span>str</span><span>()</span> <span>as</span> <span>s</span><span>:</span>
                <span>parts</span><span>.</span><span>append</span><span>(</span><span>s</span><span>)</span>
            <span>case</span><span> </span><span>Interpolation</span><span>(</span><span>value</span><span>,</span> <span>_</span><span>,</span> <span>conversion</span><span>,</span> <span>format_spec</span><span>):</span>
                <span>value</span> <span>=</span> <span>convert</span><span>(</span><span>value</span><span>,</span> <span>conversion</span><span>)</span>
                <span>value</span> <span>=</span> <span>format</span><span>(</span><span>value</span><span>,</span> <span>format_spec</span><span>)</span>
                <span>parts</span><span>.</span><span>append</span><span>(</span><span>value</span><span>)</span>
    <span>return</span> <span>""</span><span>.</span><span>join</span><span>(</span><span>parts</span><span>)</span>
</pre></div>

</section>
<section id="example-structured-logging">
<h3><a href="#example-structured-logging" role="doc-backlink">Example: Structured Logging</a></h3>
<p>Structured logging allows developers to log data in machine-readable
formats like JSON. With t-strings, developers can easily log structured data
alongside human-readable messages using just a single log statement.</p>
<p>We present two different approaches to implementing structured logging with
template strings.</p>
<section id="approach-1-custom-log-messages">
<h4><a href="#approach-1-custom-log-messages" role="doc-backlink">Approach 1: Custom Log Messages</a></h4>
<p>The <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook" title="(in Python v3.13)"><span>Python Logging Cookbook</span></a>
has a short section on <a href="https://docs.python.org/3/howto/logging-cookbook.html#implementing-structured-logging">how to implement structured logging</a>.</p>
<p>The logging cookbook suggests creating a new “message” class, <code><span>StructuredMessage</span></code>,
that is constructed with a simple text message and a separate dictionary of values:</p>
<div><pre><span></span><span>message</span> <span>=</span> <span>StructuredMessage</span><span>(</span><span>"user action"</span><span>,</span> <span>{</span>
    <span>"action"</span><span>:</span> <span>"traded"</span><span>,</span>
    <span>"amount"</span><span>:</span> <span>42</span><span>,</span>
    <span>"item"</span><span>:</span> <span>"shrubs"</span>
<span>})</span>
<span>logging</span><span>.</span><span>info</span><span>(</span><span>message</span><span>)</span>

<span># Outputs:</span>
<span># user action &gt;&gt;&gt; {"action": "traded", "amount": 42, "item": "shrubs"}</span>
</pre></div>
<p>The <code><span>StructuredMessage.__str__()</span></code> method formats both the human-readable
message <em>and</em> the values, combining them into a final string. (See the
<a href="https://docs.python.org/3/howto/logging-cookbook.html#implementing-structured-logging">logging cookbook</a>
for its full example.)</p>
<p>We can implement an improved version of <code><span>StructuredMessage</span></code> using template strings:</p>
<div><pre><span></span><span>import</span><span> </span><span>json</span>
<span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Interpolation</span><span>,</span> <span>Template</span>
<span>from</span><span> </span><span>typing</span><span> </span><span>import</span> <span>Mapping</span>

<span>class</span><span> </span><span>TemplateMessage</span><span>:</span>
    <span>def</span><span> </span><span>__init__</span><span>(</span><span>self</span><span>,</span> <span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>None</span><span>:</span>
        <span>self</span><span>.</span><span>template</span> <span>=</span> <span>template</span>

    <span>@property</span>
    <span>def</span><span> </span><span>message</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span># Use the f() function from the previous example</span>
        <span>return</span> <span>f</span><span>(</span><span>self</span><span>.</span><span>template</span><span>)</span>

    <span>@property</span>
    <span>def</span><span> </span><span>values</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>Mapping</span><span>[</span><span>str</span><span>,</span> <span>object</span><span>]:</span>
        <span>return</span> <span>{</span>
            <span>item</span><span>.</span><span>expression</span><span>:</span> <span>item</span><span>.</span><span>value</span>
            <span>for</span> <span>item</span> <span>in</span> <span>self</span><span>.</span><span>template</span>
            <span>if</span> <span>isinstance</span><span>(</span><span>item</span><span>,</span> <span>Interpolation</span><span>)</span>
        <span>}</span>

    <span>def</span><span> </span><span>__str__</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>f</span><span>"</span><span>{</span><span>self</span><span>.</span><span>message</span><span>}</span><span> &gt;&gt;&gt; </span><span>{</span><span>json</span><span>.</span><span>dumps</span><span>(</span><span>self</span><span>.</span><span>values</span><span>)</span><span>}</span><span>"</span>

<span>_</span> <span>=</span> <span>TemplateMessage</span>  <span># optional, to improve readability</span>
<span>action</span><span>,</span> <span>amount</span><span>,</span> <span>item</span> <span>=</span> <span>"traded"</span><span>,</span> <span>42</span><span>,</span> <span>"shrubs"</span>
<span>logging</span><span>.</span><span>info</span><span>(</span><span>_</span><span>(</span><span>t</span><span>"User </span><span>{action}</span><span>: </span><span>{amount:.2f}</span><span> </span><span>{item}</span><span>"</span><span>))</span>

<span># Outputs:</span>
<span># User traded: 42.00 shrubs &gt;&gt;&gt; {"action": "traded", "amount": 42, "item": "shrubs"}</span>
</pre></div>
<p>Template strings give us a more elegant way to define the custom message
class. With template strings it is no longer necessary for developers to make
sure that their format string and values dictionary are kept in sync; a single
template string literal is all that is needed. The <code><span>TemplateMessage</span></code>
implementation can automatically extract structured keys and values from
the <code><span>Interpolation.expression</span></code> and <code><span>Interpolation.value</span></code> attributes,
respectively.</p>
</section>
<section id="approach-2-custom-formatters">
<h4><a href="#approach-2-custom-formatters" role="doc-backlink">Approach 2: Custom Formatters</a></h4>
<p>Custom messages are a reasonable approach to structured logging but can be a
little awkward. To use them, developers must wrap every log message they write
in a custom class. This can be easy to forget.</p>
<p>An alternative approach is to define custom <code><span>logging.Formatter</span></code> classes. This
approach is more flexible and allows for more control over the final output. In
particular, it’s possible to take a single template string and output it in
multiple formats (human-readable and JSON) to separate log streams.</p>
<p>We define two simple formatters, a <code><span>MessageFormatter</span></code> for human-readable output
and a <code><span>ValuesFormatter</span></code> for JSON output:</p>
<div><pre><span></span><span>import</span><span> </span><span>json</span>
<span>from</span><span> </span><span>logging</span><span> </span><span>import</span> <span>Formatter</span><span>,</span> <span>LogRecord</span>
<span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Interpolation</span><span>,</span> <span>Template</span>
<span>from</span><span> </span><span>typing</span><span> </span><span>import</span> <span>Any</span><span>,</span> <span>Mapping</span>


<span>class</span><span> </span><span>MessageFormatter</span><span>(</span><span>Formatter</span><span>):</span>
    <span>def</span><span> </span><span>message</span><span>(</span><span>self</span><span>,</span> <span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span># Use the f() function from the previous example</span>
        <span>return</span> <span>f</span><span>(</span><span>template</span><span>)</span>

    <span>def</span><span> </span><span>format</span><span>(</span><span>self</span><span>,</span> <span>record</span><span>:</span> <span>LogRecord</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>msg</span> <span>=</span> <span>record</span><span>.</span><span>msg</span>
        <span>if</span> <span>not</span> <span>isinstance</span><span>(</span><span>msg</span><span>,</span> <span>Template</span><span>):</span>
            <span>return</span> <span>super</span><span>()</span><span>.</span><span>format</span><span>(</span><span>record</span><span>)</span>
        <span>return</span> <span>self</span><span>.</span><span>message</span><span>(</span><span>msg</span><span>)</span>


<span>class</span><span> </span><span>ValuesFormatter</span><span>(</span><span>Formatter</span><span>):</span>
    <span>def</span><span> </span><span>values</span><span>(</span><span>self</span><span>,</span> <span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>Mapping</span><span>[</span><span>str</span><span>,</span> <span>Any</span><span>]:</span>
        <span>return</span> <span>{</span>
            <span>item</span><span>.</span><span>expression</span><span>:</span> <span>item</span><span>.</span><span>value</span>
            <span>for</span> <span>item</span> <span>in</span> <span>template</span>
            <span>if</span> <span>isinstance</span><span>(</span><span>item</span><span>,</span> <span>Interpolation</span><span>)</span>
        <span>}</span>

    <span>def</span><span> </span><span>format</span><span>(</span><span>self</span><span>,</span> <span>record</span><span>:</span> <span>LogRecord</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>msg</span> <span>=</span> <span>record</span><span>.</span><span>msg</span>
        <span>if</span> <span>not</span> <span>isinstance</span><span>(</span><span>msg</span><span>,</span> <span>Template</span><span>):</span>
            <span>return</span> <span>super</span><span>()</span><span>.</span><span>format</span><span>(</span><span>record</span><span>)</span>
        <span>return</span> <span>json</span><span>.</span><span>dumps</span><span>(</span><span>self</span><span>.</span><span>values</span><span>(</span><span>msg</span><span>))</span>
</pre></div>
<p>We can then use these formatters when configuring our logger:</p>
<div><pre><span></span><span>import</span><span> </span><span>logging</span>
<span>import</span><span> </span><span>sys</span>

<span>logger</span> <span>=</span> <span>logging</span><span>.</span><span>getLogger</span><span>(</span><span>__name__</span><span>)</span>
<span>message_handler</span> <span>=</span> <span>logging</span><span>.</span><span>StreamHandler</span><span>(</span><span>sys</span><span>.</span><span>stdout</span><span>)</span>
<span>message_handler</span><span>.</span><span>setFormatter</span><span>(</span><span>MessageFormatter</span><span>())</span>
<span>logger</span><span>.</span><span>addHandler</span><span>(</span><span>message_handler</span><span>)</span>

<span>values_handler</span> <span>=</span> <span>logging</span><span>.</span><span>StreamHandler</span><span>(</span><span>sys</span><span>.</span><span>stderr</span><span>)</span>
<span>values_handler</span><span>.</span><span>setFormatter</span><span>(</span><span>ValuesFormatter</span><span>())</span>
<span>logger</span><span>.</span><span>addHandler</span><span>(</span><span>values_handler</span><span>)</span>

<span>action</span><span>,</span> <span>amount</span><span>,</span> <span>item</span> <span>=</span> <span>"traded"</span><span>,</span> <span>42</span><span>,</span> <span>"shrubs"</span>
<span>logger</span><span>.</span><span>info</span><span>(</span><span>t</span><span>"User </span><span>{action}</span><span>: </span><span>{amount:.2f}</span><span> </span><span>{item}</span><span>"</span><span>)</span>

<span># Outputs to sys.stdout:</span>
<span># User traded: 42.00 shrubs</span>

<span># At the same time, outputs to sys.stderr:</span>
<span># {"action": "traded", "amount": 42, "item": "shrubs"}</span>
</pre></div>
<p>This approach has a couple advantages over the custom message approach to structured
logging:</p>
<ul>
<li>Developers can log a t-string directly without wrapping it in a custom class.</li>
<li>Human-readable and structured output can be sent to separate log streams. This
is useful for log aggregation systems that process structured data independently
from human-readable data.</li>
</ul>

</section>
</section>
<section id="example-html-templating">
<h3><a href="#example-html-templating" role="doc-backlink">Example: HTML Templating</a></h3>
<p>This PEP contains several short HTML templating examples. It turns out that the
“hypothetical” <code><span>html()</span></code> function mentioned in the  <a href="#motivation">Motivation</a> section
(and a few other places in this PEP) exists and is available in the
<a href="https://github.com/davepeck/pep750-examples/">pep750-examples repository</a>.
If you’re thinking about parsing a complex grammar with template strings, we
hope you’ll find it useful.</p>
</section>
</section>
<section id="backwards-compatibility">
<h2><a href="#backwards-compatibility" role="doc-backlink">Backwards Compatibility</a></h2>
<p>Like f-strings, use of template strings will be a syntactic backwards incompatibility
with previous versions.</p>
</section>
<section id="security-implications">
<h2><a href="#security-implications" role="doc-backlink">Security Implications</a></h2>
<p>The security implications of working with template strings, with respect to
interpolations, are as follows:</p>
<ol>
<li>Scope lookup is the same as f-strings (lexical scope). This model has been
shown to work well in practice.</li>
<li>Code that processes <code><span>Template</span></code> instances can ensure that any interpolations
are processed in a safe fashion, including respecting the context in which
they appear.</li>
</ol>
</section>
<section id="how-to-teach-this">
<h2><a href="#how-to-teach-this" role="doc-backlink">How To Teach This</a></h2>
<p>Template strings have several audiences:</p>
<ul>
<li>Developers using template strings and processing functions</li>
<li>Authors of template processing code</li>
<li>Framework authors who build interesting machinery with template strings</li>
</ul>
<p>We hope that teaching developers will be straightforward. At a glance,
template strings look just like f-strings. Their syntax is familiar and the
scoping rules remain the same.</p>
<p>The first thing developers must learn is that template string literals don’t
evaluate to strings; instead, they evaluate to a new type, <code><span>Template</span></code>. This
is a simple type intended to be used by template processing code. It’s not until
developers call a processing function that they get the result they want:
typically, a string, although processing code can of course return any arbitrary
type.</p>
<p>Developers will also want to understand how template strings relate to other
string formatting methods like f-strings and <a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="(in Python v3.13)"><code><span>str.format()</span></code></a>. They will need
to decide when to use each method. If a simple string is all that is needed, and
there are no security implications, f-strings are likely the best choice. For
most cases where a format string is used, it can be replaced with a function
wrapping the creation of a template string. In cases where the format string is
obtained from user input, the filesystem, or databases, it is possible to write
code to convert it into a <code><span>Template</span></code> instance if desired.</p>
<p>Because developers will learn that t-strings are nearly always used in tandem
with processing functions, they don’t necessarily need to understand the details
of the <code><span>Template</span></code> type. As with descriptors and decorators, we expect many more
developers will use t-strings than write t-string processing functions.</p>
<p>Over time, a small number of more advanced developers <em>will</em> wish to author their
own template processing code. Writing processing code often requires thinking
in terms of formal grammars. Developers will need to learn how to work with the
<code><span>strings</span></code> and <code><span>interpolation</span></code> attributes of a <code><span>Template</span></code> instance and how
to process interpolations in a context-sensitive fashion. More sophisticated
grammars will likely require parsing to intermediate representations like an
abstract syntax tree (AST). Great template processing code will handle format
specifiers and conversions when appropriate. Writing production-grade template
processing code – for instance, to support HTML templates – can be a large
undertaking.</p>
<p>We expect that template strings will provide framework authors with a powerful
new tool in their toolbox. While the functionality of template strings overlaps
with existing tools like template engines, t-strings move that logic into
the language itself. Bringing the full power and generality of Python to bear on
string processing tasks opens new possibilities for framework authors.</p>
</section>
<section id="why-another-templating-approach">
<h2><a href="#why-another-templating-approach" role="doc-backlink">Why another templating approach?</a></h2>
<p>The world of Python already has mature templating languages with wide adoption,
such as Jinja. Why build support for creating new templating systems?</p>
<p>Projects such as Jinja are still needed in cases where the template is less part
of the software by the developers, and more part of customization by designers
or even content created by users, for example in a CMS.</p>
<p>The trends in frontend development have treated templating as part of the
software and written by developers. They want modern language features and a
good tooling experience. PEP 750 envisions DSLs where the non-static parts are
Python: same scope rules, typing, expression syntax, and the like.</p>
</section>
<section id="common-patterns-seen-in-processing-templates">
<h2><a href="#common-patterns-seen-in-processing-templates" role="doc-backlink">Common Patterns Seen in Processing Templates</a></h2>
<section id="structural-pattern-matching">
<h3><a href="#structural-pattern-matching" role="doc-backlink">Structural Pattern Matching</a></h3>
<p>Iterating over the <code><span>Template</span></code> with structural pattern matching is the expected
best practice for many template function implementations:</p>
<div><pre><span></span><span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Template</span><span>,</span> <span>Interpolation</span>

<span>def</span><span> </span><span>process</span><span>(</span><span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>Any</span><span>:</span>
    <span>for</span> <span>item</span> <span>in</span> <span>template</span><span>:</span>
        <span>match</span> <span>item</span><span>:</span>
            <span>case</span> <span>str</span><span>()</span> <span>as</span> <span>s</span><span>:</span>
                <span>...</span> <span># handle each string part</span>
            <span>case</span> <span>Interpolation</span><span>()</span> <span>as</span> <span>interpolation</span><span>:</span>
                <span>...</span> <span># handle each interpolation</span>
</pre></div>
<p>Processing code may also commonly sub-match on attributes of the <code><span>Interpolation</span></code> type:</p>
<div><pre><span></span><span>match</span> <span>arg</span><span>:</span>
    <span>case</span> <span>Interpolation</span><span>(</span><span>int</span><span>()):</span>
        <span>...</span> <span># handle interpolations with integer values</span>
    <span>case</span> <span>Interpolation</span><span>(</span><span>value</span><span>=</span><span>str</span><span>()</span> <span>as</span> <span>s</span><span>):</span>
        <span>...</span> <span># handle interpolations with string values</span>
    <span># etc.</span>
</pre></div>
</section>
<section id="memoizing">
<h3><a href="#memoizing" role="doc-backlink">Memoizing</a></h3>
<p>Template functions can efficiently process both static and dynamic parts of templates.
The structure of <code><span>Template</span></code> objects allows for effective memoization:</p>
<div><pre><span></span><span>strings</span> <span>=</span> <span>template</span><span>.</span><span>strings</span>  <span># Static string parts</span>
<span>values</span> <span>=</span> <span>template</span><span>.</span><span>values</span>  <span># Dynamic interpolated values</span>
</pre></div>
<p>This separation enables caching of processed static parts while dynamic parts
can be inserted as needed. Authors of template processing code can use the static
<code><span>strings</span></code> as cache keys, leading to significant performance improvements when
similar templates are used repeatedly.</p>
</section>
<section id="parsing-to-intermediate-representations">
<h3><a href="#parsing-to-intermediate-representations" role="doc-backlink">Parsing to Intermediate Representations</a></h3>
<p>Code that processes templates can parse the template string into intermediate
representations, like an AST. We expect that many template processing libraries
will use this approach.</p>
<p>For instance, rather than returning a <code><span>str</span></code>, our theoretical <code><span>html()</span></code> function
(see the <a href="#motivation">Motivation</a> section) could return an HTML <code><span>Element</span></code> defined in the
same package:</p>
<div><pre><span></span><span>@dataclass</span><span>(</span><span>frozen</span><span>=</span><span>True</span><span>)</span>
<span>class</span><span> </span><span>Element</span><span>:</span>
    <span>tag</span><span>:</span> <span>str</span>
    <span>attributes</span><span>:</span> <span>Mapping</span><span>[</span><span>str</span><span>,</span> <span>str</span> <span>|</span> <span>bool</span><span>]</span>
    <span>children</span><span>:</span> <span>Sequence</span><span>[</span><span>str</span> <span>|</span> <span>Element</span><span>]</span>

    <span>def</span><span> </span><span>__str__</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>...</span>


<span>def</span><span> </span><span>html</span><span>(</span><span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>Element</span><span>:</span>
    <span>...</span>
</pre></div>
<p>Calling <code><span>str(element)</span></code> would then render the HTML but, in the meantime, the
<code><span>Element</span></code> could be manipulated in a variety of ways.</p>
</section>
<section id="context-sensitive-processing-of-interpolations">
<h3><a href="#context-sensitive-processing-of-interpolations" role="doc-backlink">Context-sensitive Processing of Interpolations</a></h3>
<p>Continuing with our hypothetical <code><span>html()</span></code> function, it could be made
context-sensitive. Interpolations could be processed differently depending
on where they appear in the template.</p>
<p>For example, our <code><span>html()</span></code> function could support multiple kinds of
interpolations:</p>
<div><pre><span></span><span>attributes</span> <span>=</span> <span>{</span><span>"id"</span><span>:</span> <span>"main"</span><span>}</span>
<span>attribute_value</span> <span>=</span> <span>"shrubbery"</span>
<span>content</span> <span>=</span> <span>"hello"</span>
<span>template</span> <span>=</span> <span>t</span><span>"&lt;div </span><span>{attributes}</span><span> data-value=</span><span>{attribute_value}</span><span>&gt;</span><span>{content}</span><span>&lt;/div&gt;"</span>
<span>element</span> <span>=</span> <span>html</span><span>(</span><span>template</span><span>)</span>
<span>assert</span> <span>str</span><span>(</span><span>element</span><span>)</span> <span>==</span> <span>'&lt;div id="main" data-value="shrubbery"&gt;hello&lt;/div&gt;'</span>
</pre></div>
<p>Because the <code><span>{attributes}</span></code> interpolation occurs in the context of an HTML tag,
and because there is no corresponding attribute name, it is treated as a dictionary
of attributes. The <code><span>{attribute_value}</span></code> interpolation is treated as a simple
string value and is quoted before inclusion in the final string. The
<code><span>{content}</span></code> interpolation is treated as potentially unsafe content and is
escaped before inclusion in the final string.</p>
</section>
<section id="nested-template-strings">
<h3><a href="#nested-template-strings" role="doc-backlink">Nested Template Strings</a></h3>
<p>Going a step further with our <code><span>html()</span></code> function, we could support nested
template strings. This would allow for more complex HTML structures to be
built up from simpler templates:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>content</span> <span>=</span> <span>html</span><span>(</span><span>t</span><span>"&lt;p&gt;Hello </span><span>{name}</span><span>&lt;/p&gt;"</span><span>)</span>
<span>template</span> <span>=</span> <span>t</span><span>"&lt;div&gt;</span><span>{content}</span><span>&lt;/div&gt;"</span>
<span>element</span> <span>=</span> <span>html</span><span>(</span><span>template</span><span>)</span>
<span>assert</span> <span>str</span><span>(</span><span>element</span><span>)</span> <span>==</span> <span>'&lt;div&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;'</span>
</pre></div>
<p>Because the <code><span>{content}</span></code> interpolation is an <code><span>Element</span></code> instance, it does
not need to be escaped before inclusion in the final string.</p>
<p>One could imagine a nice simplification: if the <code><span>html()</span></code> function is passed
a <code><span>Template</span></code> instance, it could automatically convert it to an <code><span>Element</span></code>
by recursively calling itself on the nested template.</p>
<p>We expect that nesting and composition of templates will be a common pattern
in template processing code and, where appropriate, used in preference to
simple string concatenation.</p>
</section>
<section id="approaches-to-lazy-evaluation">
<h3><a href="#approaches-to-lazy-evaluation" role="doc-backlink">Approaches to Lazy Evaluation</a></h3>
<p>Like f-strings, interpolations in t-string literals are eagerly evaluated. However,
there are cases where lazy evaluation may be desirable.</p>
<p>If a single interpolation is expensive to evaluate, it can be explicitly wrapped
in a <code><span>lambda</span></code> in the template string literal:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello {(lambda: name)}"</span>
<span>assert</span> <span>callable</span><span>(</span><span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span><span>)</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span><span>()</span> <span>==</span> <span>"World"</span>
</pre></div>
<p>This assumes, of course, that template processing code anticipates and handles
callable interpolation values. (One could imagine also supporting iterators,
awaitables, etc.) This is not a requirement of the PEP, but it is a common
pattern in template processing code.</p>
<p>In general, we hope that the community will develop best practices for lazy
evaluation of interpolations in template strings and that, when it makes sense,
common libraries will provide support for callable or awaitable values in
their template processing code.</p>
</section>
<section id="approaches-to-asynchronous-evaluation">
<h3><a href="#approaches-to-asynchronous-evaluation" role="doc-backlink">Approaches to Asynchronous Evaluation</a></h3>
<p>Closely related to lazy evaluation is asynchronous evaluation.</p>
<p>As with f-strings, the <code><span>await</span></code> keyword is allowed in interpolations:</p>
<div><pre><span></span><span>async</span> <span>def</span><span> </span><span>example</span><span>():</span>
    <span>async</span> <span>def</span><span> </span><span>get_name</span><span>()</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>await</span> <span>asyncio</span><span>.</span><span>sleep</span><span>(</span><span>1</span><span>)</span>
        <span>return</span> <span>"Sleepy"</span>

    <span>template</span> <span>=</span> <span>t</span><span>"Hello {await get_name()}"</span>
    <span># Use the f() function from the f-string example, above</span>
    <span>assert</span> <span>f</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"Hello Sleepy"</span>
</pre></div>
<p>More sophisticated template processing code can take advantage of this to
perform asynchronous operations in interpolations. For example, a “smart”
processing function could anticipate that an interpolation is an awaitable
and await it before processing the template string:</p>
<div><pre><span></span><span>async</span> <span>def</span><span> </span><span>example</span><span>():</span>
    <span>async</span> <span>def</span><span> </span><span>get_name</span><span>()</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>await</span> <span>asyncio</span><span>.</span><span>sleep</span><span>(</span><span>1</span><span>)</span>
        <span>return</span> <span>"Sleepy"</span>

    <span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{get_name}</span><span>"</span>
    <span>assert</span> <span>await</span> <span>async_f</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"Hello Sleepy"</span>
</pre></div>
<p>This assumes that the template processing code in <code><span>async_f()</span></code> is asynchronous
and is able to <code><span>await</span></code> an interpolation’s value.</p>

</section>
<section id="approaches-to-template-reuse">
<h3><a href="#approaches-to-template-reuse" role="doc-backlink">Approaches to Template Reuse</a></h3>
<p>If developers wish to reuse template strings multiple times with different
values, they can write a function to return a <code><span>Template</span></code> instance:</p>
<div><pre><span></span><span>def</span><span> </span><span>reusable</span><span>(</span><span>name</span><span>:</span> <span>str</span><span>,</span> <span>question</span><span>:</span> <span>str</span><span>)</span> <span>-&gt;</span> <span>Template</span><span>:</span>
    <span>return</span> <span>t</span><span>"Hello </span><span>{name}</span><span>, </span><span>{question}</span><span>?"</span>

<span>template</span> <span>=</span> <span>reusable</span><span>(</span><span>"friend"</span><span>,</span> <span>"how are you"</span><span>)</span>
<span>template</span> <span>=</span> <span>reusable</span><span>(</span><span>"King Arthur"</span><span>,</span> <span>"what is your quest"</span><span>)</span>
</pre></div>
<p>This is, of course, no different from how f-strings can be reused.</p>
</section>
<section id="relation-to-format-strings">
<h3><a href="#relation-to-format-strings" role="doc-backlink">Relation to Format Strings</a></h3>
<p>The venerable <a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="(in Python v3.13)"><code><span>str.format()</span></code></a> method accepts format strings that can later
be used to format values:</p>
<div><pre><span></span><span>alas_fmt</span> <span>=</span> <span>"We're all out of </span><span>{cheese}</span><span>."</span>
<span>assert</span> <span>alas_fmt</span><span>.</span><span>format</span><span>(</span><span>cheese</span><span>=</span><span>"Red Leicester"</span><span>)</span> <span>==</span> <span>"We're all out of Red Leicester."</span>
</pre></div>
<p>If one squints, one can think of format strings as a kind of function definition.
The <em>call</em> to <a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="(in Python v3.13)"><code><span>str.format()</span></code></a> can be seen as a kind of function call. The
t-string equivalent is to simply define a standard Python function that returns
a <code><span>Template</span></code> instance:</p>
<div><pre><span></span><span>def</span><span> </span><span>make_template</span><span>(</span><span>*</span><span>,</span> <span>cheese</span><span>:</span> <span>str</span><span>)</span> <span>-&gt;</span> <span>Template</span><span>:</span>
    <span>return</span> <span>t</span><span>"We're all out of </span><span>{cheese}</span><span>."</span>

<span>template</span> <span>=</span> <span>make_template</span><span>(</span><span>cheese</span><span>=</span><span>"Red Leicester"</span><span>)</span>
<span># Using the f() function from the f-string example, above</span>
<span>assert</span> <span>f</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"We're all out of Red Leicester."</span>
</pre></div>
<p>The <code><span>make_template()</span></code> function itself can be thought of as analogous to the
format string. The call to <code><span>make_template()</span></code> is analogous to the call to
<a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="(in Python v3.13)"><code><span>str.format()</span></code></a>.</p>
<p>Of course, it is common to load format strings from external sources like a
filesystem or database. Thankfully, because <code><span>Template</span></code> and <code><span>Interpolation</span></code>
are simple Python types, it is possible to write a function that takes an
old-style format string and returns an equivalent <code><span>Template</span></code> instance:</p>
<div><pre><span></span><span>def</span><span> </span><span>from_format</span><span>(</span><span>fmt</span><span>:</span> <span>str</span><span>,</span> <span>/</span><span>,</span> <span>*</span><span>args</span><span>:</span> <span>object</span><span>,</span> <span>**</span><span>kwargs</span><span>:</span> <span>object</span><span>)</span> <span>-&gt;</span> <span>Template</span><span>:</span>
<span>     </span><span>"""Parse `fmt` and return a `Template` instance."""</span>
     <span>...</span>

 <span># Load this from a file, database, etc.</span>
 <span>fmt</span> <span>=</span> <span>"We're all out of </span><span>{cheese}</span><span>."</span>
 <span>template</span> <span>=</span> <span>from_format</span><span>(</span><span>fmt</span><span>,</span> <span>cheese</span><span>=</span><span>"Red Leicester"</span><span>)</span>
 <span># Using the f() function from the f-string example, above</span>
 <span>assert</span> <span>f</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"We're all out of Red Leicester."</span>
</pre></div>
<p>This is a powerful pattern that allows developers to use template strings in
places where they might have previously used format strings. A full implementation
of <code><span>from_format()</span></code> is available in the examples repository,
which supports the full grammar of format strings.</p>

</section>
</section>
<section id="reference-implementation">
<h2><a href="#reference-implementation" role="doc-backlink">Reference Implementation</a></h2>
<p>A CPython implementation of PEP 750 is <a href="https://github.com/lysnikolaou/cpython/tree/tstrings">available</a>.</p>
<p>There is also a public repository of <a href="https://github.com/davepeck/pep750-examples">examples and tests</a>
built around the reference implementation. If you’re interested in playing with
template strings, this repository is a great place to start.</p>
</section>
<section id="rejected-ideas">
<h2><a href="#rejected-ideas" role="doc-backlink">Rejected Ideas</a></h2>
<p>This PEP has been through several significant revisions. In addition, quite a few interesting
ideas were considered both in revisions of <a href="https://peps.python.org/pep-0501/" title="PEP 501 – General purpose template literal strings">PEP 501</a> and in the <a href="https://discuss.python.org/t/pep-750-tag-strings-for-writing-domain-specific-languages/60408/196">Discourse discussion</a>.</p>
<p>We attempt to document the most significant ideas that were considered and rejected.</p>
<section id="arbitrary-string-literal-prefixes">
<h3><a href="#arbitrary-string-literal-prefixes" role="doc-backlink">Arbitrary String Literal Prefixes</a></h3>
<p>Inspired by <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">JavaScript tagged template literals</a>,
an earlier version of this PEP allowed for arbitrary “tag” prefixes in front
of literal strings:</p>

<p>The prefix was a special callable called a “tag function”. Tag functions
received the parts of the template string in an argument list. They could then
process the string and return an arbitrary value:</p>
<div><pre><span></span><span>def</span><span> </span><span>my_tag</span><span>(</span><span>*</span><span>args</span><span>:</span> <span>str</span> <span>|</span> <span>Interpolation</span><span>)</span> <span>-&gt;</span> <span>Any</span><span>:</span>
    <span>...</span>
</pre></div>
<p>This approach was rejected for several reasons:</p>
<ul>
<li>It was deemed too complex to build in full generality. JavaScript allows for
arbitrary expressions to precede a template string, which is a significant
challenge to implement in Python.</li>
<li>It precluded future introduction of new string prefixes.</li>
<li>It seemed to needlessly pollute the namespace.</li>
</ul>
<p>Use of a single <code><span>t</span></code> prefix was chosen as a simpler, more Pythonic approach and
more in keeping with template strings’ role as a generalization of f-strings.</p>
</section>
<section id="delayed-evaluation-of-interpolations">
<h3><a href="#delayed-evaluation-of-interpolations" role="doc-backlink">Delayed Evaluation of Interpolations</a></h3>
<p>An early version of this PEP proposed that interpolations should be lazily
evaluated. All interpolations were “wrapped” in implicit lambdas. Instead of
having an eagerly evaluated <code><span>value</span></code> attribute, interpolations had a
<code><span>getvalue()</span></code> method that would resolve the value of the interpolation:</p>
<div><pre><span></span><span>class</span><span> </span><span>Interpolation</span><span>:</span>
    <span>...</span>
    <span>_value</span><span>:</span> <span>Callable</span><span>[[],</span> <span>object</span><span>]</span>

    <span>def</span><span> </span><span>getvalue</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>object</span><span>:</span>
        <span>return</span> <span>self</span><span>.</span><span>_value</span><span>()</span>
</pre></div>
<p>This was rejected for several reasons:</p>
<ul>
<li>The overwhelming majority of use cases for template strings naturally call
for immediate evaluation.</li>
<li>Delayed evaluation would be a significant departure from the behavior of
f-strings.</li>
<li>Implicit lambda wrapping leads to difficulties with type hints and
static analysis.</li>
</ul>
<p>Most importantly, there are viable (if imperfect) alternatives to implicit
lambda wrapping in many cases where lazy evaluation is desired. See the section
on <a href="#approaches-to-lazy-evaluation">Approaches to Lazy Evaluation</a>, above, for more information.</p>
<p>While delayed evaluation was rejected for <em>this</em> PEP, we hope that the community
continues to explore the idea.</p>
</section>
<section id="making-template-and-interpolation-into-protocols">
<h3><a href="#making-template-and-interpolation-into-protocols" role="doc-backlink">Making <code><span>Template</span></code> and <code><span>Interpolation</span></code> Into Protocols</a></h3>
<p>An early version of this PEP proposed that the <code><span>Template</span></code> and <code><span>Interpolation</span></code>
types be runtime checkable protocols rather than classes.</p>
<p>In the end, we felt that using classes was more straightforward.</p>
</section>
<section id="overridden-eq-and-hash-for-template-and-interpolation">
<h3><a href="#overridden-eq-and-hash-for-template-and-interpolation" role="doc-backlink">Overridden <code><span>__eq__</span></code> and <code><span>__hash__</span></code> for <code><span>Template</span></code> and <code><span>Interpolation</span></code></a></h3>
<p>Earlier versions of this PEP proposed that the <code><span>Template</span></code> and <code><span>Interpolation</span></code>
types should have their own implementations of <code><span>__eq__</span></code> and <code><span>__hash__</span></code>.</p>
<p><code><span>Templates</span></code> were considered equal if their <code><span>strings</span></code> and <code><span>interpolations</span></code>
were equal; <code><span>Interpolations</span></code> were considered equal if their <code><span>value</span></code>,
<code><span>expression</span></code>, <code><span>conversion</span></code>, and <code><span>format_spec</span></code> were equal. Interpolation
hashing was similar to tuple hashing: an <code><span>Interpolation</span></code> was hashable if and
only if its <code><span>value</span></code> was hashable.</p>
<p>This was rejected because <code><span>Template.__hash__</span></code> so defined was not useful as a
cache key in template processing code; we were concerned that it would be
confusing to developers.</p>
<p>By dropping these implementations of <code><span>__eq__</span></code> and <code><span>__hash__</span></code>, we lose the
ability to write asserts such as:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>assert</span> <span>t</span><span>"Hello "</span> <span>+</span> <span>t</span><span>"</span><span>{name}</span><span>"</span> <span>==</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
</pre></div>
<p>Because <code><span>Template</span></code> instances are intended to be quickly processed by further
code, we felt that the utility of these asserts was limited.</p>
</section>
<section id="an-additional-decoded-type">
<h3><a href="#an-additional-decoded-type" role="doc-backlink">An Additional <code><span>Decoded</span></code> Type</a></h3>
<p>An early version of this PEP proposed an additional type, <code><span>Decoded</span></code>, to represent
the “static string” parts of a template string. This type derived from <code><span>str</span></code> and
had a single extra <code><span>raw</span></code> attribute that provided the original text of the string.
We rejected this in favor of the simpler approach of using plain <code><span>str</span></code> and
allowing combination of <code><span>r</span></code> and <code><span>t</span></code> prefixes.</p>
</section>
<section id="the-final-home-for-template-and-interpolation">
<h3><a href="#the-final-home-for-template-and-interpolation" role="doc-backlink">The Final Home for <code><span>Template</span></code> and <code><span>Interpolation</span></code></a></h3>
<p>Previous versions of this PEP proposed placing the <code><span>Template</span></code> and
<code><span>Interpolation</span></code> types in: <code><span>types</span></code>, <code><span>collections</span></code>, <code><span>collections.abc</span></code>,
and even in a new top-level module, <code><span>templatelib</span></code>. The final decision was to
place them in <code><span>string.templatelib</span></code>.</p>
</section>
<section id="enable-full-reconstruction-of-original-template-literal">
<h3><a href="#enable-full-reconstruction-of-original-template-literal" role="doc-backlink">Enable Full Reconstruction of Original Template Literal</a></h3>
<p>Earlier versions of this PEP attempted to make it possible to fully reconstruct
the text of the original template string from a <code><span>Template</span></code> instance. This was
rejected as being overly complex. The mapping between template literal source
and the underlying AST is not one-to-one and there are several limitations with
respect to round-tripping to the original source text.</p>
<p>First, <code><span>Interpolation.format_spec</span></code> defaults to <code><span>""</span></code> if not provided:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>template1</span> <span>=</span> <span>t</span><span>"</span><span>{value}</span><span>"</span>
<span>template2</span> <span>=</span> <span>t</span><span>"</span><span>{value:}</span><span>"</span>
<span>assert</span> <span>template1</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>""</span>
<span>assert</span> <span>template2</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>""</span>
</pre></div>
<p>Next, the debug specifier, <code><span>=</span></code>, is treated as a special case and is processed
before the AST is created. It is therefore not possible to distinguish
<code><span>t"{value=}"</span></code> from <code><span>t"value={value!r}"</span></code>:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>template1</span> <span>=</span> <span>t</span><span>"{value=}"</span>
<span>template2</span> <span>=</span> <span>t</span><span>"value=</span><span>{value!r}</span><span>"</span>
<span>assert</span> <span>template1</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"value="</span>
<span>assert</span> <span>template1</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"value"</span>
<span>assert</span> <span>template1</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>conversion</span> <span>==</span> <span>"r"</span>
<span>assert</span> <span>template2</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"value="</span>
<span>assert</span> <span>template2</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"value"</span>
<span>assert</span> <span>template2</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>conversion</span> <span>==</span> <span>"r"</span>
</pre></div>
<p>Finally, format specifiers in f-strings allow arbitrary nesting. In this PEP
and in the reference implementation, the specifier is eagerly evaluated to
set the <code><span>format_spec</span></code> in the <code><span>Interpolation</span></code>, thereby losing the original
expressions. For example:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>precision</span> <span>=</span> <span>2</span>
<span>template1</span> <span>=</span> <span>t</span><span>"</span><span>{value:.2f}</span><span>"</span>
<span>template2</span> <span>=</span> <span>t</span><span>"{value:.</span><span>{precision}</span><span>f}"</span>
<span>assert</span> <span>template1</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>".2f"</span>
<span>assert</span> <span>template2</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>".2f"</span>
</pre></div>
<p>We do not anticipate that these limitations will be a significant issue in practice.
Developers who need to obtain the original template string literal can always
use <code><span>inspect.getsource()</span></code> or similar tools.</p>
</section>
<section id="disallowing-string-concatenation">
<h3><a href="#disallowing-string-concatenation" role="doc-backlink">Disallowing String Concatenation</a></h3>
<p>Earlier versions of this PEP proposed that template strings should not support
concatenation. This was rejected in favor of allowing concatenation.</p>
<p>There are reasonable arguments in favor of rejecting one or all forms of
concatenation: namely, that it cuts off a class of potential bugs, particularly
when one takes the view that template strings will often contain complex grammars
for which concatenation doesn’t always have the same meaning (or any meaning).</p>
<p>Moreover, the earliest versions of this PEP proposed a syntax closer to
JavaScript’s tagged template literals, where an arbitrary callable could be used
as a prefix to a string literal. There was no guarantee that the callable would
return a type that supported concatenation.</p>
<p>In the end, we decided that the surprise to developers of a new string type
<em>not</em> supporting concatenation was likely to be greater than the theoretical
harm caused by supporting it. (Developers concatenate f-strings all the time,
after all, and while we are sure there are cases where this introduces bugs,
it’s not clear that those bugs outweigh the benefits of supporting concatenation.)</p>
<p>While concatenation is supported, we expect that code that uses template strings
will more commonly build up larger templates through nesting and composition
rather than concatenation.</p>
</section>
<section id="arbitrary-conversion-values">
<h3><a href="#arbitrary-conversion-values" role="doc-backlink">Arbitrary Conversion Values</a></h3>
<p>Python allows only <code><span>r</span></code>, <code><span>s</span></code>, or <code><span>a</span></code> as possible conversion type values.
Trying to assign a different value results in <code><span>SyntaxError</span></code>.</p>
<p>In theory, template functions could choose to handle other conversion types. But this
PEP adheres closely to <a href="https://peps.python.org/pep-0701/" title="PEP 701 – Syntactic formalization of f-strings">PEP 701</a>. Any changes to allowed values should be in a
separate PEP.</p>
</section>
<section id="removing-conversion-from-interpolation">
<h3><a href="#removing-conversion-from-interpolation" role="doc-backlink">Removing <code><span>conversion</span></code> From <code><span>Interpolation</span></code></a></h3>
<p>While drafting this PEP, we considered removing the <code><span>conversion</span></code>
attribute from <code><span>Interpolation</span></code> and specifying that the conversion should be
performed eagerly, before <code><span>Interpolation.value</span></code> is set.</p>
<p>This was done to simplify the work of writing template processing code. The
<code><span>conversion</span></code> attribute is of limited extensibility (it is typed as
<code><span>Literal["r",</span> <span>"s",</span> <span>"a"]</span> <span>|</span> <span>None</span></code>). It is not clear that it adds significant
value or flexibility to template strings that couldn’t better be achieved with
custom format specifiers. Unlike with format specifiers, there is no
equivalent to Python’s <a href="https://docs.python.org/3/library/functions.html#format" title="(in Python v3.13)"><code><span>format()</span></code></a> built-in. (Instead, we include a
sample implementation of <code><span>convert()</span></code> in the <a href="#examples">Examples</a> section.)</p>
<p>Ultimately we decided to keep the <code><span>conversion</span></code> attribute in the
<code><span>Interpolation</span></code> type to maintain compatibility with f-strings and to allow
for future extensibility.</p>
</section>
<section id="alternate-interpolation-symbols">
<h3><a href="#alternate-interpolation-symbols" role="doc-backlink">Alternate Interpolation Symbols</a></h3>
<p>In the early stages of this PEP, we considered allowing alternate symbols for
interpolations in template strings. For example, we considered allowing
<code><span>${name}</span></code> as an alternative to <code><span>{name}</span></code> with the idea that it might be useful
for i18n or other purposes. See the
<a href="https://discuss.python.org/t/pep-750-tag-strings-for-writing-domain-specific-languages/60408/122">Discourse thread</a>
for more information.</p>
<p>This was rejected in favor of keeping t-string syntax as close to f-string syntax
as possible.</p>
</section>
<section id="alternate-layouts-for-template">
<h3><a href="#alternate-layouts-for-template" role="doc-backlink">Alternate Layouts for <code><span>Template</span></code></a></h3>
<p>During the development of this PEP, we considered several alternate layouts for
the <code><span>Template</span></code> type. Many focused on a single <code><span>args</span></code> tuple that contained
both strings and interpolations. Variants included:</p>
<ul>
<li><code><span>args</span></code> was a <code><span>tuple[str</span> <span>|</span> <span>Interpolation,</span> <span>...]`</span></code> with the promise that
its first and last items were strings and that strings and interpolations
always alternated. This implied that <code><span>args</span></code> was always non-empty and that
empty strings would be inserted between neighboring interpolations. This was
rejected because alternation could not be captured by the type system and was
not a guarantee we wished to make.</li>
<li><code><span>args</span></code> remained a <code><span>tuple[str</span> <span>|</span> <span>Interpolation,</span> <span>...]</span></code> but did not support
interleaving. As a result, empty strings were not added to the sequence. It
was no longer possible to obtain static strings with <code><span>args[::2]</span></code>; instead,
instance checks or structural pattern matching had to be used to distinguish
between strings and interpolations. This approach was rejected as offering
less future opportunity for performance optimization.</li>
<li><code><span>args</span></code> was typed as a <code><span>Sequence[tuple[str,</span> <span>Interpolation</span> <span>|</span> <span>None]]</span></code>. Each
static string was paired with is neighboring interpolation. The final
string part had no corresponding interpolation. This was rejected as being
overly complex.</li>
</ul>
</section>
<section id="mechanism-to-describe-the-kind-of-template">
<h3><a href="#mechanism-to-describe-the-kind-of-template" role="doc-backlink">Mechanism to Describe the “Kind” of Template</a></h3>
<p>If t-strings prove popular, it may be useful to have a way to describe the
“kind” of content found in a template string: “sql”, “html”, “css”, etc.
This could enable powerful new features in tools such as linters, formatters,
type checkers, and IDEs. (Imagine, for example, <code><span>black</span></code> formatting HTML in
t-strings, or <code><span>mypy</span></code> checking whether a given attribute is valid for an HTML
tag.) While exciting, this PEP does not propose any specific mechanism. It is
our hope that, over time, the community will develop conventions for this purpose.</p>
</section>
<section id="binary-template-strings">
<h3><a href="#binary-template-strings" role="doc-backlink">Binary Template Strings</a></h3>
<p>The combination of t-strings and bytes (<code><span>tb</span></code>) is considered out of scope for
this PEP. However, unlike f-strings, there is no fundamental reason why t-strings
and bytes cannot be combined. Support could be considered in a future PEP.</p>
</section>
</section>
<section id="acknowledgements">
<h2><a href="#acknowledgements" role="doc-backlink">Acknowledgements</a></h2>
<p>Thanks to Ryan Morshead for contributions during development of the ideas leading
to template strings. Special mention also to Dropbox’s
<a href="https://github.com/dropbox/pyxl">pyxl</a> for tackling similar ideas years ago.
Andrea Giammarchi provided thoughtful feedback on the early drafts of this PEP.
Finally, thanks to Joachim Viide for his pioneering work on the <a href="https://github.com/jviide/tagged">tagged library</a>. Tagged was not just the precursor to
template strings, but the place where the whole effort started via a GitHub issue
comment!</p>
</section>
<section id="copyright">
<h2><a href="#copyright" role="doc-backlink">Copyright</a></h2>
<p>This document is placed in the public domain or under the CC0-1.0-Universal
license, whichever is more permissive.</p>
</section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Own Private Binary: An Idiosyncratic Introduction to Linux Kernel Modules (173 pts)]]></title>
            <link>https://www.muppetlabs.com/~breadbox/txt/mopb.html</link>
            <guid>43647294</guid>
            <pubDate>Thu, 10 Apr 2025 19:29:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.muppetlabs.com/~breadbox/txt/mopb.html">https://www.muppetlabs.com/~breadbox/txt/mopb.html</a>, See on <a href="https://news.ycombinator.com/item?id=43647294">Hacker News</a></p>
<div id="readability-page-1" class="page">
<h2>My Own Private Binary</h2>



<hr>

<h3>How This Began</h3>

<p>Several years ago, I spent a serious chunk of time figuring out how to
make really teensy ELF executable files. I started down this path
because I was annoyed that all of my programs, no matter how short
they were, never got smaller than 4k or so. I felt that was excessive,
for C, and so I started looking at what ELF files contained, and how
much of that actually needed to be there. (And then, after a while,
how much of it was supposed to be there but could be ripped out
anyway.) Anyway, I eventually managed to shrink an executable down to
45 bytes, and I was able to demonstrate that that was the smallest
possible size an ELF executable could be and still run, under x86
Linux at least.</p>

<p><a href="https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html">I wrote up my findings</a>, and
some people found it interesting, and I got some positive feedback. A
couple of people naturally pointed out that a shell script that did
the same thing was much shorter than 45 bytes, to which my response
was always that a shell script is not an executable, and if you want
to consider scripts then you need to include the size of the
interpreter binary along with the script size.</p>

<p>But then one Internet Random Person™ pointed out that I could
have made a smaller executable if I had created an <a href="https://www.muppetlabs.com/~breadbox/software/tiny/tiny-aout.asm.txt">aout
binary</a> instead. If you
don't know what aout files are, don't worry — that just means you're
not old. (They are also called "a.out files", but that can be easily
confused with just a file named "a.out", so I prefer to spell the name
of the format "aout".) At one time the aout format was widely used on
Linux, because it was Linux's only binary format. ELF was not
introduced to Linux until version 2.0 (or more precisely in one of the
1.x experimental kernels). aout was, and still is, a very simple
format. It sports a 32-byte header, along with a handful of other
metadata. Unfortunately the aout format has some annoying limitations
around dynamic linking, so the fact that Linux switched away from it
early on is not too surprising. ELF is a much nicer format for a
mature system. But even though aout binaries were no longer
fashionable, they still worked.</p>

<p>However, when I first tried to run the aout executable the person had
sent me, I got an "Exec format error" message — i.e. this file format
is not supported. It turned out that a security issue had been
uncovered at one point that involved aout core dumps. (Did you know?
Executable file formats come with their own core dump file formats to
match.) I'm vague on the details, but as a result most distros started
compiling their kernels without aout support. The format was
considered to be pretty thoroughly deprecated by that time, so it
wasn't seen as a difficult call to make.</p>

<p>(Support for aout is still present in the kernel source tree, however,
and you're free to include it if you compile your own kernel. At the
time of this writing there was talk about removing it entirely, but
apparently some architectures still have a use for it. Some people
have suggested removing support just for aout core dumps, but in the
absence of a pressing issue it remains as it is. The whole
conversation is a good reminder that adding a feature to software is
often far easier than removing it.)</p>

<p>But so I did compile a kernel with aout support, and verify that the
35-byte binary did in fact work. And the whole thing got me to
wondering, <em>how many executable file formats does Linux actually
support?</em> I looked into it, and I found out that the way in which
Linux handles binary formats is a dynamic feature of the kernel. That
is to say, it's relatively straightforward to add support for a new
format, without having to recompile your kernel, or reboot your
machine even.</p>

<p>An aside: I want to clarify that I'm not talking about the
"miscellaneous binary format" feature of the kernel. That feature
allows you to dynamically designate an interpreter to be run when the
user attempts to execute certain files. Thus, for example, running a
file ending in <code>.jar</code> can automatically invoke the JavaVM for you.
That feature is controlled via the <code>/proc/sys/fs/binfmt_misc</code> system,
so check out the <code>binfmt_misc</code> documentation if you're curious.
Interpreters are not what I'm interested in here, though; I'm focusing
exclusively on actual binary files.</p>


<p>What I was secretly hoping to discover was if a "flat" format existed
— that is, a binary file format with no metadata at all. Obviously,
such a format would allow for even smaller executables. No such format
was supported, however. But that isn't too surprising, as such a
format isn't very useful. Where there is no metadata, there are no
features, no options. A flat format is a one-size-fits-all approach,
and that's not what most people need from their binary format
standards.</p>

<p>In order to avoid confusion, I should mention here that the Linux
kernel does have support for a format that is <em>called</em> "flat", but
this is just the name of the uClinux native binary format. It is
actually larger and more featureful than the aout format from which it
was derived. Presumably this format is flat along some other
dimension.</p>


<p>Despite such shortcomings, it so happens that there is a flat,
metadata-less executable file format that is well supported on another
popular OS. If you haven't already guessed, I'm referring to the
<code>.com</code> file format that MS Windows supports, having inherited it from
MS-DOS, which in turn inherited it from CP/M. It is truly flat. When
you run a <code>.com</code> file, the OS loads the whole thing in memory at a
standard address and runs it. And this approach works okay on a
single-tasking system like MS-DOS. (Or rather, on the MS-DOS-like
subsystem that MS Windows presents to a running <code>.com</code> file.) In that
environment, the OS can say, "Here you go, program. You have 640
kilobytes of RAM. Have fun!"</p>

<p>And so naturally I asked myself, <em>what would it take to get a <code>.com</code>
file format working under Linux?</em> I mean yes it would not be terribly
useful … but it would let me make the smallest executable file ever.
Sure, I could never hope to get support for such a format added to the
actual Linux kernel. But I <em>could</em> add it to my own kernel, where at
least I would be able to use it myself. I could be living in my own
private binary.</p>

<h3>Kernel Modules</h3>

<p>Linux makes it easy to do this sort of thing via <em>loadable kernel
modules</em>. What exactly is a kernel module? Basically, a kernel module
is an object file built for the kernel that just hasn't been linked
yet. The trick is that you can link one into a running kernel without
having to stop the kernel or even pull over. (This isn't quite the
same thing as what is generally meant by "dynamic linking", though it
is very similar in spirit.) Kernel modules mainly allow users to
manage support for various kinds of hardware dynamically, but they
allow you to add support for all kinds of things without having to
recompile the kernel. So let's take a moment and look at how to create
a kernel module.</p>

<p>Before we get started, we need to make sure that the kernel's header
files are present on the machine. For users on Debian-based systems,
this is typically done with the shell command:</p>

<p><code>uname(1)</code> is used to ensure that you're
getting the files that match the specific version of the kernel you're
currently running.</p>
<p>$ <b>sudo apt install linux-headers-$(uname -r)</b><br>Reading package lists... Done<br>Building dependency tree<br>Reading state information... Done<br>The following NEW packages will be installed:<br>  linux-headers-4.15.0-156-generic<br>0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.<br>        <b>⋮</b><br>/etc/kernel/header_postinst.d/dkms:<br> * dkms: running auto installation service for kernel 4.15.0-156-generic<br>   ...done.</p>

<p>This will install a directory under <code>/usr/src</code> corresponding to the
your current kernel version. (In fact, you may find that you already
have several directories located there, one for every version of the
kernel that you can currently boot into.) This directory contains,
among other things, all of the header files that we'll need to build
kernel modules.</p>

<p>We'll start with a very simple one, predictably named "hello kernel".</p>

<table><tbody><tr><td></td><td rowspan="2"><i>hello.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/init.h&gt;

MODULE_LICENSE("GPL");
MODULE_AUTHOR("me");
MODULE_DESCRIPTION("hello kernel");
MODULE_VERSION("0.1");

static int __init hello_init(void)
{
    printk(KERN_INFO "hello, kernel\n");
    return 0;
}

static void __exit hello_exit(void)
{
    printk(KERN_INFO "goodbye, kernel\n");
}

module_init(hello_init);
module_exit(hello_exit);
</code></pre></td></tr></tbody></table>

<p>A quick rundown of what is being done here:</p>

<table><tbody><tr><td><pre><code>#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/init.h&gt;
</code></pre></td><td>The header file <code>linux/module.h</code> defines the
<code>MODULE_*</code> macros, <code>linux/init.h</code> defines the <code>__init</code> and <code>__exit</code>
macros, and <code>linux/kernel.h</code> gives us the <code>printk()</code> function.</td></tr><tr><td><pre><code>MODULE_LICENSE("GPL");
MODULE_AUTHOR("me");
MODULE_DESCRIPTION("hello kernel");
MODULE_VERSION("0.1");
</code></pre></td><td>These macros just insert some metadata into
our module. You can view this information via the <code>modprobe(1)</code>
utility. Among other things, the kernel keeps track of the presence of
non-free software.<p>⋮</p></td></tr><tr><td><pre><code>module_init(hello_init);
module_exit(hello_exit);
</code></pre></td><td>And then there are two special functions,
the <em>init</em> function and the <em>exit</em> function. The <code>module_init()</code> and
<code>module_exit()</code> macros mark which function is which, so the kernel can
find them. The first one gets called at the time the module is inserted
into a running kernel, and the second one gets called when the module
is being removed from the kernel.</td></tr></tbody></table>

<p>The kernel folks have made it extremely easy to build kernel modules.
Here's the makefile:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>Makefile</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>obj-m = hello.o
kver = $(shell uname -r)
all:
	make -C /lib/modules/$(kver)/build/ M=$(PWD) modules
clean:
	make -C /lib/modules/$(kver)/build M=$(PWD) clean
</code></pre></td></tr></tbody></table>

<p>All you do is put the name of your object file on the first line,
and everything else is done for you.</p>

<p>So, if we run <code>make(1)</code>, a bunch of stuff will get created:</p>

<p>$ <b>ls</b><br>hello.c  Makefile<br>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/hello modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/hello/hello.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/hello/hello.mod.o<br>  LD [M]  /home/breadbox/km/hello/hello.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>ls</b><br>hello.c   hello.mod.c  hello.o   modules.order<br>hello.ko  hello.mod.o  Makefile  Module.symvers</p>

<p>There's <code>hello.o</code>, a regular object file, but we also have an object
file named <code>hello.ko</code>. This is the kernel module. We have become
kernel developers.</p>

<p>The <code>insmod(8)</code> tool can be used to load this module into the running
kernel:</p>

<p>$ <b>sudo insmod ./hello.ko</b><br>$ <b>lsmod | head</b><br>Module                  Size  Used by<br>hello                  16384  0<br>nls_iso8859_1          16384  0<br>uas                    24576  0<br>usb_storage            69632  1 uas<br>btrfs                1155072  0<br>zstd_compress         163840  1 btrfs<br>xor                    24576  1 btrfs<br>raid6_pq              114688  1 btrfs<br>ufs                    77824  0</p>

<p>When we type <code>lsmod(8)</code> to list the active modules, it's right there at
the top, as the most recently added module.</p>

<p>The actual effect of this module is simply to output some log
messages. We can use <code>dmesg(8)</code> to verify that our module really did
load:</p>

<p>$ <b>dmesg | tail -n4</b><br>[2419362.787463] e1000e: eth3 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: Rx/Tx<br>[2448541.604799] EXT4-fs (sda1): re-mounted. Opts: (null)<br>[2474408.687761] usb 5-1: USB disconnect, device number 14<br>[2478627.755269] hello, kernel</p>

<p>We can then use <code>rmmod(8)</code> to remove the module from the running
kernel whenever we want:</p>

<p>$ <b>sudo rmmod hello</b><br>$ <b>dmesg | tail -n4</b><br>[2448541.604799] EXT4-fs (sda1): re-mounted. Opts: (null)<br>[2474408.687761] usb 5-1: USB disconnect, device number 14<br>[2478627.755269] hello, kernel<br>[2478639.607702] goodbye, kernel</p>

<p>So that's all there is to writing kernel modules.</p>

<p>No, of course that's not true. Writing a useful kernel module does
require some specialized knowledge. For example, kernel modules don't
have access to <code>libc</code>, since <code>libc</code> itself is mainly an abstraction
layer that sits atop the kernel. That said, much of the functionality
you're used to having easy access to as a C programmer is also present
in the kernel, though sometimes in slightly different dress.
(Filesystems, for example, are one bit of detail that we as Unix
programmers often ignore, but are obviously a major concern inside the
kernel.)</p>

<p>But don't let all that deter you. The rewards of writing kernel
modules are worth the inconveniences. There is a great deal that you
can do inside a kernel module that is simply impossible outside of it.
Remember, Linux is a monolithic kernel — which means that once you
are loaded, you have the keys to the kingdom. Your lowly, nonstandard
kernel module can do <em>anything</em>. Of course, this is a double-edged
sword, because that also means that you can <em>accidentally</em> do
anything. As it happens, a lot of bad things are actually pretty hard
to do accidentally, such as mucking up some other process's code.
You'd need to jump through a few hoops just to get a pointer to
someone else's memory. But some unfortunate things are remarkably easy
to do. For example, one time while working on my kernel module, I
accidentally put <code>--i</code> instead of <code>++i</code> in the iterator of my <code>for</code>
loop. I inserted that module into my kernel to test it, and my mouse
cursor disappeared, and my music stopped playing … and then it was
time to reboot my computer.</p>

<p>But that sort of risk shouldn't scare you away. With modern journaling
file systems and the like, you're never going to be at any real risk
of losing data. (I mean, unless you're actually working on
implementing a filesystem, in which case please back up your files
regularly.) I encourage you to experiment and try out your own ideas
for kernel modules.</p>

<h3>Binary File Formats Under Linux</h3>

<p>All right, but what exactly does this have to do with making smaller
executables? Well, as I mentioned earlier, the kernel's list of
accepted binary file formats is dynamic. Specifically, this means that
there are functions inside the kernel that allow code to add and
remove binary formats from this list.</p>

<p>This is done by registering a set of callback functions, and these
callbacks get invoked when the kernel is asked to execute a binary
file. The kernel invokes the callbacks on this list, and the first one
that claims to recognize the file takes responsibility for getting it
properly loaded into memory. If nobody on the list accepts it, then as
a last resort the kernel will attempt to treat it as a shell script
without a shebang line. And if that doesn't fly, then you'll get that
"Exec format error" message described above. </p><p>Interesting side note:
The kernel decides whether or not to try to parse a file as a shell
script by whether or not it contains a line break in the first few
hundred bytes — specifically if it contains a line break before the
first zero byte. Thus a data file that just happens to have a "<code>\n</code>"
near the top can produce some odd-looking error messages if you try to
execute it.</p>


<p>So we find ourselves in possession of the following facts:</p>

<ol>
<li>The Linux kernel can dynamically introduce new binary file formats.</li>
<li>Kernel modules can be added to a running kernel.</li>
<li>Being able to run flat binaries would be really neat.</li>
</ol>

<p>Obviously, there is only one possible response to this situation.</p>

<h3>Version 0.1: Look Ma, No Metadata</h3>

<p>We wish to write a kernel module that implements a flat, metadata-less
binary file format for Linux. So, that's what I did.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/init.h&gt;

#include &lt;linux/fs.h&gt;
#include &lt;linux/mm.h&gt;
#include &lt;linux/mman.h&gt;
#include &lt;linux/string.h&gt;
#include &lt;linux/errno.h&gt;
#include &lt;linux/binfmts.h&gt;
#include &lt;linux/personality.h&gt;
#include &lt;linux/processor.h&gt;
#include &lt;linux/ptrace.h&gt;
#include &lt;linux/sched/task_stack.h&gt;

MODULE_DESCRIPTION("Linux command executable files");
MODULE_AUTHOR("Brian Raiter &lt;breadbox@muppetlabs.com&gt;");
MODULE_VERSION("0.1");
MODULE_LICENSE("GPL");

/* Given an address or size, round up to the next page boundary.
 */
#define pagealign(n)  (((n) + PAGE_SIZE - 1) &amp; PAGE_MASK)

static struct linux_binfmt comfile_fmt;

static int load_comfile_binary(struct linux_binprm *lbp)
{
    long const loadaddr = 0x00010000;

    char const *ext;
    loff_t filesize;
    int r;

    ext = strrchr(lbp-&gt;filename, '.');
    if (!ext || strcmp(ext, ".com"))
        return -ENOEXEC;

    r = flush_old_exec(lbp);
    if (r)
        return r;
    set_personality(PER_LINUX);
    set_binfmt(&amp;comfile_fmt);
    setup_new_exec(lbp);

    filesize = generic_file_llseek(lbp-&gt;file, 0, SEEK_END);
    generic_file_llseek(lbp-&gt;file, 0, SEEK_SET);

    current-&gt;mm-&gt;start_code = loadaddr;
    current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + filesize;

    r = setup_arg_pages(lbp, STACK_TOP, EXSTACK_DEFAULT);
    if (r)
        return r;

    r = vm_mmap(lbp-&gt;file, loadaddr, filesize,
                PROT_READ | PROT_WRITE | PROT_EXEC,
                MAP_FIXED | MAP_PRIVATE, 0);
    if (r &lt; 0)
        return r;

    install_exec_creds(lbp);
    /*finalize_exec(lbp);*/
    start_thread(current_pt_regs(), loadaddr,
                 current-&gt;mm-&gt;start_stack);
    return 0;
}

static struct linux_binfmt comfile_fmt = {
    .module = THIS_MODULE,
    .load_binary = load_comfile_binary,
    .load_shlib = NULL,
    .core_dump = NULL,
    .min_coredump = 0
};

static int __init comfile_start(void)
{
    register_binfmt(&amp;comfile_fmt);
    return 0;
}

static void __exit comfile_end(void)
{
    unregister_binfmt(&amp;comfile_fmt);
}

module_init(comfile_start);
module_exit(comfile_end);
</code></pre></td></tr></tbody></table>

<p>Unlike our first kernel module, this one is actually doing some
interesting work. So let's take the time to walk through this code and
understand what's going on.</p>

<table><tbody><tr><td><pre><code>static int __init comfile_start(void)
{
    register_binfmt(&amp;comfile_fmt);
    return 0;
}

static void __exit comfile_end(void)
{
    unregister_binfmt(&amp;comfile_fmt);
}
</code></pre></td><td>Our very-short init function just calls
<code>register_binfmt()</code>, and likewise our exit function calls
<code>unregister_binfmt()</code>. As you have probably already guessed, these are
the functions that add and remove support for a new binary format. The
argument to both functions is a pointer to a static struct of type
<code>linux_binfmt</code>.</td></tr><tr><td><pre><code>static struct linux_binfmt comfile_fmt = {
    .module = THIS_MODULE,
    .load_binary = load_comfile_binary,
    .load_shlib = NULL,
    .core_dump = NULL,
    .min_coredump = 0
};
</code></pre></td><td>The important fields of the <code>linux_binfmt</code>
struct are three function pointers. They provide callbacks for loading
an executable, loading a shared-object library, and dumping a core
file. Thankfully, those latter two features are optional, so we can
leave them unimplemented, and just provide the first callback.</td></tr><tr><td><pre><code>static int load_comfile_binary(struct linux_binprm *lbp)
</code></pre></td><td>And this function is where all the work gets
done. It will be invoked by the kernel every time someone is
attempting to execute one of our files, and its purpose is to get the
file's contents into memory and running. The function is passed a
single argument, <code>lbp</code>, which is a pointer to a struct called
<code>linux_binprm</code> that contains our actual arguments. It has a dozen or
so fields that summarize everything the kernel knows about our file.
The callback returns an <code>int</code> value, as is typical for internal kernel
functions. If all goes well, the return value is zero. When an error
occurs, the function should return a negative number that corresponds
to a negated <code>errno</code> value.</td></tr></tbody></table>

<p>Recall how a program is launched under Unix: first the <code>fork</code> system
call is used to duplicate the process, and then the <code>execve</code>
system call replaces the process's current program with a new one.
</p><p>Note that the <code>fork</code> system call is not quite the same thing as the
<code>fork()</code> function supplied by <code>libc</code>, although the latter is just a
thin wrapper around the former. Similarly, <code>libc</code> provides a family of
seven different "exec" functions, but they all ultimately invoke the
<code>execve</code> system call.</p>


<p>The nice thing about this system is that we never have to worry about
actually creating a process from scratch. That's done for us. Every
program's process is a copy of pid 1, duplicated through a succession
of <code>fork</code>s. Our callback will instead be invoked during the <code>execve</code>
system call. In effect, when the kernel calls us, it is asking, "Hey,
I've got a file here. The user claims it's an executable binary, but
it's not an ELF file. Do <em>you</em> want to deal with it?" Every callback
function that has been registered with <code>register_binfmt()</code> gets
called, in order, going down the list, until someone takes
responsibility for the file.</p>

<p>So that's the first thing our callback function needs to do: it needs
to decide whether or not this is actually a <code>.com</code> file. Which raises
the obvious question: how do we even do that? Most binary formats
looks for a magic-number identifier in the first few bytes of metadata
— but we have no metadata. So then what?</p>

<p>Well, how does MS Windows identify <code>.com</code> files? Answer: it looks at
the filename. When you try to execute a file with a name ending in
"<code>.com</code>", that's all MS Windows really cares about. "Oh, you're a
<code>.com</code> file, are you? Okay: here's 640k and an interrupt table. Call
me when you're done."</p>

<table><tbody><tr><td><pre><code>    ext = strrchr(lbp-&gt;filename, '.');
    if (!ext || strcmp(ext, ".com"))
        return -ENOEXEC;
</code></pre></td><td>So that's what we do, too. One of the
fields of the <code>linux_binprm</code> struct is the filename, so we examine it,
and if there's no "<code>.com</code>" extension, then we return negative
<code>ENOEXEC</code>, the <code>errno</code> equivalent to our "Exec format error" message.
This error normally means "this is not an executable", but in this
particular context, it really means "this is not one of my
executables." When the kernel gets this return value, it will just
continue trying other formats. If all the callbacks return this value,
then <code>ENOEXEC</code> will actually get returned from <code>execve</code> itself, which
<code>libc</code> will then package up and store in <code>errno</code>. But, if it does end
in "<code>.com</code>", then our callback continues.</td></tr></tbody></table>

<p>All we have to do now is load and run the file. No pressure, right?
Luckily for us, the kernel provides lots of functions that will do
almost all of the heavy lifting for us. We just need to oversee the
whole process. So let's quickly run down the sequence of events.</p>

<table><tbody><tr><td><pre><code>    r = flush_old_exec(lbp);
    if (r)
        return r;
</code></pre></td><td>The very first thing we do is call
<code>flush_old_exec()</code>. Boom. Nearly everything that was specific to the
old process is now gone. The process is now an empty salt flat,
extending featurelessly to the horizon. Wait, that's a little bleak.
Instead, let's imagine it as a fallow field, ready for planting. Note
also that if a non-zero value is returned, then a failure occurred, in
which case we dutifully pass the negated <code>errno</code> value back up the
call chain.</td></tr><tr><td><pre><code>    set_personality(PER_LINUX);
</code></pre></td><td>Personality is an obscure feature that
allows certain behaviors of the kernel to vary on a per-process basis.
For whatever reason, it's not reset by the flush.</td></tr><tr><td><pre><code>    set_binfmt(&amp;comfile_fmt);
</code></pre></td><td>The <code>set_binfmt()</code> function explicitly claims
this binary as one of our own. As far as I can tell, this is only used
for debugging purposes.</td></tr><tr><td><pre><code>    setup_new_exec(lbp);
</code></pre></td><td><code>setup_new_exec()</code> initializes the process to
some basic defaults, and allows for any architecture-specific
initializations to occur.</td></tr><tr><td><pre><code>    filesize = generic_file_llseek(lbp-&gt;file, 0, SEEK_END);
    generic_file_llseek(lbp-&gt;file, 0, SEEK_SET);
</code></pre></td><td>At this point we are now cleared to start
defining our memory image, which is currently very empty. So the first
thing we want to do is determine how big the file is, since that's
also the size of program. Inside the kernel, we don't have the
familiar file descriptors. Instead, we have file objects. As you might
expect, the <code>linux_binprm</code> struct includes an already-opened file
object, and the kernel function <code>generic_file_llseek()</code> works pretty
much the same as <code>libc</code>'s more familiar <code>lseek()</code> function for
retrieving the file size.</td></tr><tr><td><pre><code>    current-&gt;mm-&gt;start_code = loadaddr;
    current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + filesize;
</code></pre></td><td><code>current</code> is a global variable that points
to the current task. A task is like a process or a thread, except that
instead of being a numerical identifier, it's the actual thing itself
— the noumenon, the <em>ding-an-sich</em>. It's a struct with literally
hundreds of fields. It's, like, really big. Pretty much anything you
might want to know about a process is in this thing, somewhere. One of
those things is the task's memory manager. And right now, the memory
manager is eager to know where the process's component parts are going
to be located. Since our format is so simple — all we have is a blob
of code — we mainly need to provide a valid load address. There
aren't too many requirements for this address. It just needs to be
page-aligned, well away from the stack, and not zero. I selected
<code>0x10000</code> as our load address because there wasn't a particular reason
not to.</td></tr><tr><td><pre><code>    r = setup_arg_pages(lbp, STACK_TOP, EXSTACK_DEFAULT);
    if (r)
        return r;
</code></pre></td><td>We aren't setting up anything else that
processes typically contain, because we're just so down to earth like
that, so we can go straight to calling <code>setup_arg_pages()</code>. This
function finalizes the location and access permissions of the stack.</td></tr><tr><td><pre><code>    r = vm_mmap(lbp-&gt;file, loadaddr, filesize,
                PROT_READ | PROT_WRITE | PROT_EXEC,
                MAP_FIXED | MAP_PRIVATE, 0);
    if (r &lt; 0)
        return r;
</code></pre></td><td>And now that that's official, let's
actually load something into memory. Yes folks, it's finally time to
call <code>vm_mmap()</code>. This function is basically identical to <code>libc</code>'s
<code>mmap()</code>, and is the natural way to load a file into (page-aligned)
memory. Of course, normally when you call <code>mmap()</code> with a fixed load
address you need to handle the case where that address is already in
use. We don't need to worry about that here, as nothing is currently
in use. We're requesting that the memory be marked as readable,
writeable, and executable. Traditionally, programs will place their
code into non-writeable memory, and store variable data in memory that
is writeable but not executable. And that's definitely the safer way
to do things, but we can't be bothered with all that. After all, the
<code>.com</code> format hearkens back to a simpler time, when RAM was RAM, and
didn't come with geegaws like protection. Staying true to this
approach is a way of honoring our roots. Also, without metadata it's
basically impossible to know which parts of the file are code and
which are data, so we don't really have a choice, but it sounds better
if we claim it's because of our heritage.</td></tr><tr><td><pre><code>    install_exec_creds(lbp);
</code></pre></td><td>We now call <code>install_exec_creds()</code>, which
will set up the correct user ID vs effective user ID, in case it needs
to be changed.</td></tr><tr><td><pre><code>    /*finalize_exec(lbp);*/
</code></pre></td><td>The function <code>finalize_exec()</code> does something
with the stack's <code>rlimit</code> value. I'm a little vague on its purpose
because it's somewhat new. In fact, it doesn't even exist on my
kernel version, which is why it's commented out in my code. If you're
running a 5.x kernel or later, feel free to restore it.</td></tr><tr><td><pre><code>    start_thread(current_pt_regs(), loadaddr,
                 current-&gt;mm-&gt;start_stack);
    return 0;
</code></pre></td><td>And then, at last, we call
<code>start_thread()</code>. This is the big one. We pass it a pointer to a
struct that contains the process's current register values, a pointer
to the top of the stack, and most importantly, the address for the
instruction pointer (which for us is the same thing as the load
address). The process is now ready to be scheduled. And, since we have
indeed made it this far, we return zero to indicate success.</td></tr></tbody></table>

<p>Phew. It's definitely not trivial, the process of setting up a
process. But as I said, all of the real work is done by other code.</p>

<p>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/com modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/com/comfile.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/com/comfile.mod.o<br>  LD [M]  /home/breadbox/km/com/comfile.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>sudo insmod comfile.ko</b><br>$ <b>lsmod | head -n3</b><br>Module                  Size  Used by<br>comfile                16384  0<br>nls_iso8859_1          16384  0</p>

<p>Now in order to actually put this kernel module to the test, we'll
need a program to execute. Specifically, we need to create a binary
file in our flat, metadata-less format. One that actually does
something.</p>

<p>The down side of creating our own binary file format is that none of
our usual tools know anything about it. If we want to build a program
in this format, we're on our own here. But, our format is so utterly
simple that this shouldn't be hard. However, it does mean that we'll
need to use assembly code.</p>

<p>As is traditional, our minimal test program will be one that exits
with a status code of 42. In order to make a system call under 64-bit
Linux, we need to set <code>rax</code> to the system call number, and <code>rdi</code> to
the (first) argument, and then use the <code>syscall</code> instruction. The
<code>exit</code> system call is assigned the ID number 60, so this should be all
we need:</p>

<p>$ <b>cat &gt;tiny.asm</b><br>BITS 64<br>	mov	rax, 60<br>	mov	rdi, 42<br>	syscall<br>$ <b>nasm -f bin -o tiny.com tiny.asm</b><br>$ <b>chmod +x tiny.com</b><br>$ <b>wc -c tiny.com</b><br>     12 tiny.com</p>

<p>The <code>bin</code> format is <code>nasm</code>'s name for its flat binary output format,
so what we get in our output file is nothing more than the assembly
code that we specified.</p>

<p>$ <b>./tiny.com</b><br>$ <b>echo $?</b><br>42</p>

<p>Our project has borne fruit. Behold: it works, and it's twelve bytes
in size. And we can verify that it is, in fact, our kernel module that
is actually loading and running it:</p>

<p>$ <b>sudo rmmod comfile</b><br>$ <b>./tiny.com</b><br>bash: ./tiny.com: cannot execute binary file: Exec format error<br>$ <b>sudo insmod ./comfile.ko</b><br>$ <b>./tiny.com</b><br>$ <b>echo $?</b><br>42</p>

<p>This delightfully unadulterated binary file is almost a quarter the
size of the smallest possible ELF executable, and less than a third
the size of the aout executable that inspired this (admittedly
ridiculous) exploration. And with zero bytes of overhead in our file
format, we can be confident that no binary using a format that
includes metadata can touch this one.</p>

<p>Although, of course, if we're going to start crowing about the size,
then we should probably go ahead and use the smallest possible
instructions.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>tiny.asm</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>BITS 64
	push	42
	pop	rdi
	mov	al, 60
	syscall
</code></pre></td></tr></tbody></table>

<p><code>rdi</code> can be initialized in only three bytes of machine code, and
<code>rax</code> can be initialized in even less, thanks to the fact that it is
pre-initialized to zero.</p>

<p>$ <b>nasm -f bin -o tiny.com tiny.asm</b><br>$ <b>chmod +x tiny.com</b><br>$ <b>./tiny.com</b><br>$ <b>echo $?</b><br>42<br>$ <b>wc -c tiny.com</b><br>      7 tiny.com</p>

<p>Seven bytes. <em>Seven!</em></p>

<p>To be clear, this is very much a nonstandard binary, and therefore it
in no way invalidates or supplants my 45-byte ELF executable (or the
aout executable). But it does make me very happy.</p>

<h3>Further Testing of the Waters</h3>

<p>We should try writing a few more programs, just to verify that our
kernel module really does work in general. Let's try a proper
hello-world program.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>hello.asm</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>BITS 64

	org	0x10000

	mov	eax, 1			; rax = 1: write system call
	mov	edi, eax		; rdi = 1: stdout file desc
	lea	rsi, [rel str]		; rsi = pointer to string
	mov	edx, strlen		; rdx = string length
	syscall				; call write(rdi, rsi, rdx)
	mov	eax, 60			; rax = 60: exit system call
	xor	edi, edi		; rdi = 0: exit code
	syscall				; call exit(rdi)

str:	db	'hello, world', 10
strlen equ $ - str
</code></pre></td></tr></tbody></table>

<p>More assembly, yes, but it's very straightforward for assembly. It
compiles down to a 43-byte binary, and it does work:</p>

<p>$ <b>nasm -f bin -o hello.com hello.asm</b><br>$ <b>chmod +x hello.com</b><br>$ <b>./hello.com</b><br>hello, world<br>$ <b>wc -c hello.com</b><br>     43 hello.com</p>

<p>By using shorter instructions, we could reduce this program to 35
bytes, perhaps less. I will leave that as an exercise to the
interested reader.</p>

<p>As long as our programs only use a fixed amount of data, we can
allocate space by just adding it to our binary file. If we need to
allocate space dynamically, however, then that's going to be a
problem. Why? Because our processes don't have a heap. Why not?
Because we didn't set one up in our loader. Oops.</p>

<h3>Version 0.2: On Having a Heap</h3>

<p>Let's address this oversight by going back to our kernel module and
adding a few more lines of code. It's actually pretty easy. We just
need to let the memory manager know what we want.</p>

<p>Most programs use a memory layout that looks something like this:</p>

<table>
<tbody><tr>
<td>Code</td>
<td>Data</td>
<td>Heap</td>
<td></td>
<td>Stack</td>
</tr>
</tbody></table>

<p>The sections are frequently broken up for the purpose of providing
different access rights. Code sections are marked executable but not
writeable, and the other sections are marked writeable and not
executable. The code and data sections have a constant size, while the
heap and the stack change in size as the program runs, with the heap
growing upwards and the stack growing downwards. (And if they meet in
the middle, then you've run out of memory — although on a 64-bit
machine you'll run out of physical RAM long before that point.) For
historical reasons, the end of the heap is called the <em>program break</em>,
and the <code>brk</code> system call can be used to move it around. </p><p>If we're
being pedantic, we should note that access permissions are not
attached to the memory itself, but rather to the addresses. Different
address ranges can be mapped to the same physical memory but with
different permissions. This is not a distinction we need to worry
about here.</p>


<p>So let's tell the memory manager that we want our processes to enjoy
the benefits of a heap:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    filesize = generic_file_llseek(lbp-&gt;file, 0, SEEK_END);</span>
<span>    generic_file_llseek(lbp-&gt;file, 0, SEEK_SET);</span>
    allocsize = PAGE_ALIGN(filesize);
<span></span>
<span>    current-&gt;mm-&gt;start_code = loadaddr;</span>
<span>    current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + filesize;</span>
    current-&gt;mm-&gt;start_data = current-&gt;mm-&gt;end_code;
    current-&gt;mm-&gt;end_data = loadaddr + allocsize;
    current-&gt;mm-&gt;start_brk = current-&gt;mm-&gt;end_data;
    current-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk;
<span></span>
<span>    r = setup_arg_pages(lbp, STACK_TOP, EXSTACK_DEFAULT);</span>
<span>    if (r)</span>
<span>        return r;</span>
</code></pre></td></tr></tbody></table>

<p>The only measurement we have available to us is the file size, which
we're using to determine the size of the code section. The
<code>PAGE_ALIGN</code> macro rounds a value up to the next page boundary. Since
we can't allocate a fractional number of memory pages, we can take
whatever padding we'll get at the page's end, and let that be our data
section. Our heap will then be located directly following this. It
starts off with a size of zero, which the program can then expand as
desired.</p>

<p>(There's no reason why we couldn't define a larger data section for
our binaries, by the way. We would just need to hard-code a size for
it. Perhaps, to stay true to the MS-DOS roots of our format, we should
allocate a data section of 640k. But this requires making a second
<code>vm_mmap()</code> call to allocate non-file-backed memory, so I've chosen to
punt on that modification for the moment.)</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    r = vm_mmap(lbp-&gt;file, loadaddr, filesize,</span>
<span>                PROT_READ | PROT_WRITE | PROT_EXEC,</span>
<span>                MAP_FIXED | MAP_PRIVATE, 0);</span>
<span>    if (r &lt; 0)</span>
<span>        return r;</span>
    r = vm_brk(current-&gt;mm-&gt;start_brk, 0);
    if (r &lt; 0)
        return r;
</code></pre></td></tr></tbody></table>

<p>After memory has actually been allocated, we will set the process's
program break to its starting value. Our process should now have a
functional heap that the program can dynamically modify.</p>

<p>In order to test this new feature, I've written an implementation of
<code>cat</code>, one that reads all of standard input into memory before doing
any output. It's not an interesting program beyond being a basic
demonstration of low-level heap allocation, so I won't go into it. If
you're curious, you can see the source here:
<a href="https://www.muppetlabs.com/~breadbox/txt/mopb/cat.asm.txt"><code>cat.asm</code></a>. For now, we'll just note that it
succeeds at allocating memory at runtime:</p>

<p>On my machine, <code>/etc/mailcap</code> is a text file well over
64k in size.</p>
<p>$ <b>nasm -f bin -o cat.com cat.asm</b><br>$ <b>chmod +x cat.com</b><br>$ <b>./cat.com &lt;/etc/mailcap | cmp - /etc/mailcap</b><br>$ <b>wc -c cat.com</b><br>    100 cat.com</p>

<p>This version of <code>cat</code> is not really a <code>cat</code> utility, however, as it
can only read from standard input. A proper <code>cat</code> program — and,
indeed, a majority of proper programs — will need to be able to open
files named on the command line. So how do we access the command-line
arguments?</p>

<p>Frankly, we can't, at least not as things stand. You see, when an ELF
binary runs, it has values for <code>argc</code>, <code>argv</code>, and <code>envp</code> placed at
the top of its stack. Surprise! Those values are put there by the
loader. Yes, this issue is also the responsiblity of our kernel
module.</p>

<p>So let's add support for this, too.</p>

<h3>Version 0.3: Leaving Room for Arguments</h3>

<p>To be sure, the strings that make up the command-line arguments are
present in our process's image — specifically, they're sitting in
memory just above the stack. (Which means, given that the stack is
currently empty, that the <code>rsp</code> register currently points to them.)
But this is no neat array of string pointers. It's just a lot of
strings, one after the other. A string of strings, if you will. Worse,
the environment variables come immediately after the command-line
arguments, without any indication of where one set ends and the other
begins. So they aren't really usable, as they stand.</p>

<p>At the absolute least, a program needs to know how many of the strings
are in each set. Well, it turns out that our kernel module has exactly
that information. In the <code>linux_binprm</code> struct (provided via the
argument to our callback function, remember) there are two fields
named <code>argc</code> and <code>envc</code>. These are the number of command-line
arguments and environment variables, respectively. In theory, if we
transmit these two values to the running program, that would be enough
for the code to safely access the data. Of course, if that's all we
did, then every <code>.com</code> program would need to trawl through their
string of strings, to determine where each item begins and ends. We
could just accept that as a fact of life for programmers using our
format, but since we're doing this work anyway, why not take the time
to do it right? We should provide our processes with <code>argv</code> and <code>envp</code>
arguments — neat arrays of pointers to the strings in question —
like all the cool binary formats do.</p>

<p>Since these two arrays don't currently exist, we'll need to reserve
some memory for them. It may feel intuitive to tap our newly-minted
heap, but for this it actually makes more sense to just take it off
the top of the stack. (In fact, these arrays can be seen as forming a
sort of zeroth stack frame.) The top of the stack is at the top of
memory, which is stored in the <code>linux_binprm</code> struct in the
intuitively-named field <code>p</code>. So we want to build arrays in the memory
immediately preceding this address, and then move the top of the stack
down to precede our arrays.</p>

<p>Note, however, that we cannot use familiar functions like <code>strlen()</code>
to walk through these strings. Why? Because the memory holding these
strings isn't owned by the kernel; it belongs to the process itself.
So far, we've only been dealing with addresses in the process's
memory. We haven't tried to access that memory, except through other
functions, such as <code>vm_mmap()</code>. It can thus be easy to forget that
kernel memory and user memory exist in two different address spaces
(not to mention different permission rings). The kernel is allowed to
access user memory, of course, but it needs to be intentional about
it, and this requires some extra work.</p>

<p>Within our kernel module, we use the <code>__user</code> annotation to declare
pointers to user memory. And instead of using the <code>*</code> operator to
dereference such pointers, we have two special macros: <code>get_user()</code> to
read through a user pointer, and <code>put_user()</code> to write through one.
And the kernel provides a handful of convenient functions, like
<code>strnlen_user()</code>, that will operate on strings stored in user space.</p>

<p>Once we have gone through the strings and populated our two arrays,
we'll still need to communicate the values for <code>argc</code>, <code>argv</code>, and
<code>envp</code> to the program. The usual way to do this is to place them on
the stack, allowing the program to access them at its convenience.</p>

<p>So let's add all this to our kernel module. We'll start by defining a
separate function to handle the work of walking through the strings
and building the two arrays.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>/* Given argc + envc strings above the top of the stack, construct the
 * argv and envp arrays in the memory preceding, and then push argc,
 * argv, and envp onto the stack. Return the new stack top address.
 */
static unsigned long make_arrays(struct linux_binprm const *lbp)
{
    void* __user *sp;
    char* __user *argv;
    char* __user *envp;
    char __user *p;
    int i;

    p = (char __user *)lbp-&gt;p;
    envp = (char* __user *)ALIGN(lbp-&gt;p, sizeof *envp);
    envp = envp - (lbp-&gt;envc + 1);
    argv = envp - (lbp-&gt;argc + 1);
    sp = (void* __user *)argv - 3;

    current-&gt;mm-&gt;arg_start = (unsigned long)p;
    for (i = 0 ; i &lt; lbp-&gt;argc ; ++i) {
        put_user(p, argv + i);
        p += strnlen_user(p, MAX_ARG_STRLEN);
    }
    put_user(NULL, argv + i);
    current-&gt;mm-&gt;arg_end = (unsigned long)p;

    current-&gt;mm-&gt;env_start = (unsigned long)p;
    for (i = 0 ; i &lt; lbp-&gt;envc ; ++i) {
        put_user(p, envp + i);
        p += strnlen_user(p, MAX_ARG_STRLEN);
    }
    put_user(NULL, envp + i);
    current-&gt;mm-&gt;env_end = (unsigned long)p;

    put_user((void*)(unsigned long)lbp-&gt;argc, sp);
    put_user(argv, sp + 1);
    put_user(envp, sp + 2);

    return (unsigned long)sp;
}
</code></pre></td></tr></tbody></table>

<p>There's a fair bit of casting in this function because the kernel
tends to store user addresses as <code>unsigned long</code> values. This may
sound counterproductive, but it's somewhat natural given that kernel
code rarely dereferences such addresses. But our function wants to
work with them as pointer types, in order to take advantage of pointer
arithmetic. (We also have to cast <code>argc</code> into a pointer while we
briefly pretend that the stack is an array.)</p>

<p>With this function in our code, we just need to use it at the
appropriate time, after the stack has been created and its address has
been finalized.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    r = setup_arg_pages(lbp, STACK_TOP, EXSTACK_DEFAULT);</span>
<span>    if (r)</span>
<span>        return r;</span>
    current-&gt;mm-&gt;start_stack = make_arrays(lbp);
</code></pre></td></tr></tbody></table>

<p>In order to verify that all of these changes do in fact work, we can
write a couple more program, <a href="https://www.muppetlabs.com/~breadbox/txt/mopb/echo.asm.txt"><code>echo.asm</code></a> and
<a href="https://www.muppetlabs.com/~breadbox/txt/mopb/env.asm.txt"><code>env.asm</code></a>. Again, they aren't particularly
interesting in the details, so I won't dissect them here. But if
you're at all familiar with reading x86 assembly, they should be
relatively straightforward to understand.</p>

<div><p>$ <b>nasm -f bin -o echo.com echo.asm</b><br>$ <b>chmod +x echo.com</b><br>$ <b>./echo.com foo bar baz</b><br>foo bar baz<br>$ <b>./echo.com</b></p><p>$ <b>wc -c echo.com</b><br>     84 echo.com</p></div>

<h3>Take This Discussion of Practicality Outside</h3>

<p>At this point, we have created a binary format for the Linux kernel
that functions without metadata. Writing code for it is a bit of a
pain, though — we have to write everything in assembly, and none of
the standard tools work with our format.</p>

<p>Well, it so happens that there is something that we can do about that.
With some investment of effort, we can coax our familiar tools into
generating <code>.com</code> binaries, allowing us to use things like C compilers
once more. There's a number of steps to the whole journey, however, so
I've decided to put the gory details in a separate appendix, and I
encourage you to peruse it if you are at all curious.</p>

<p><a href="https://www.muppetlabs.com/~breadbox/txt/mopb-app.html">Click here to check out the appendix.</a></p>

<p>But for now, I don't want to be sidelined by meandering distractions
like "usability". The focus of this essay, after all, is using kernel
modules to let us produce working binaries that are <em>really teensy</em>.
We have already produced a valid seven-byte executable file, and it is
undeniably a thing of beauty. But a question immediately presents
itself.</p>

<p>Could it be even smaller?</p>

<p>Well, we can't shrink the program itself down any further. It's as
small as it can get. But maybe we could get by with a simpler program,
if we changed the binary loader a little bit. Nothing too ridiculous,
mind you. But I'm thinking … what if our binaries could just
automatically exit when they came to the end, instead of forcing the
programmer to use the <code>exit</code> system call? I mean, a majority of
programming languages work that way, right? If a Python program makes
it to the end of the file, it just quietly exits. Could we make our
binaries do that as well?</p>

<h3>Version 0.?: Hello, I Must Be Going</h3>

<p>We absolutely can. What we would need to do is append a few extra
bytes of machine code to the end of our file image. This code will
only be executed if the program would have crashed otherwise, so
one could argue that this is a purely beneficial modification to our
binary format.</p>

<p>However, it does mean that the code size will now be larger than the
file size. This alters the addresses of how we lay out memory, which
could mess with programmers' assumptions, given that programs are
generally written in low-level assembly.</p>

<p>Rather than calling this a minor feature upgrade, I therefore feel
compelled to fork the code base at this point, and give this file
format a new name, so as not to muddy the until-now transparent ABI of
the <code>.com</code> format.</p>

<p><img src="https://www.muppetlabs.com/~breadbox/txt/mopb/poster.jpg" alt="" width="190" height="250">Originally, I was planning on calling this new, extended
format "dot-e-com", or "dot-x-com" or something equally trite.
However, after some reflection, I decided to be less boring and
instead I called it the "keep-calm" (and carry on) format. This name
refers naturally to the fact that you no longer have to fret about
setting up mandatory instructions for exiting. Instead you can just
carry on, right up to the end of the program.</p>

<p>However, I decided I didn't like using <code>.calm</code> as a filename
extension. It was too easy to confuse with <code>.com</code> when said aloud. So
I instead chose to adopt the Unicode character for a crown as the
extension: <code>.</code>♚. (This is U+265A, one of the Unicode chess piece
glyphs.)</p>

<p>Now I realize that some people may find it a bit controversial to use
a non-ASCII symbol in a filename extension. But hey, the Unicode
Consortium has gone to a great deal of trouble to standardize
thousands upon thousands of glyphs, and we programmers continue to
draw upon the same 100 or so characters for our symbols, keywords, and
filenames. All these others are just sitting around, neglected. We
should start using them more. I mean, why not? Heck, put emojis in
your filenames. I'm not your dad. </p><p>Alan, if you're reading this: I
forbid you to put emojis in your filenames.</p>


<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    ext = strrchr(lbp-&gt;filename, '.');</span>
    <s>if (!ext || strcmp(ext, ".com"))</s>
    if (!ext || strcmp(ext, ".♚"))
<span>        return -ENOEXEC;</span>
</code></pre></td></tr></tbody></table>

<p>(If for whatever reason you don't trust your compiler to properly
handle Unicode characters, you can instead assume a UTF-8 environment
and write the second argument to <code>strcmp()</code> as <code>".\342\231\232"</code>.)</p>

<p>Anyway. The machine code that we want to append to the program can
be squeezed into eight bytes:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>epilog.lst</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>00000000 31FF           xor	edi, edi
00000002 678D473C       lea	eax, [edi + 60]
00000006 0F05           syscall
</code></pre></td></tr></tbody></table>

<p>That's convenient, as it means that we can stuff it all into a <code>long</code>
value, which can be stored in user memory with a simple <code>put_user()</code>.
The next change we need to make is to reserve an extra eight bytes in
the layout that we report to the memory manager.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    filesize = generic_file_llseek(lbp-&gt;file, 0, SEEK_END);</span>
<span>    generic_file_llseek(lbp-&gt;file, 0, SEEK_SET);</span>
    <s>allocsize = PAGE_ALIGN(filesize);</s>
    codesize = filesize + 8;
    allocsize = PAGE_ALIGN(codesize);
<span></span>
<span>    current-&gt;mm-&gt;start_code = loadaddr;</span>
    <s>current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + filesize;</s>
    current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + codesize;
<span>    current-&gt;mm-&gt;start_data = current-&gt;mm-&gt;end_code;</span>
<span>    current-&gt;mm-&gt;end_data = loadaddr + allocsize;</span>
<span>    current-&gt;mm-&gt;start_brk = current-&gt;mm-&gt;end_data;</span>
<span>    current-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk;</span>
</code></pre></td></tr></tbody></table>

<p>We will still use <code>filesize</code> when we call <code>vm_mmap()</code>, since we can
only map what's in the file. And here we hit a subtle point. Due to
the fact that memory is always mapped in page-sized chunks, we
typically get more memory than we ask for from <code>vm_mmap()</code> — but not
always. If the binary file happens to be exactly (or nearly exactly)
page-sized, then there won't be enough memory mapped for our
eight-byte epilog. So, we need to check for this edge case, and when
it happens we need to call <code>vm_mmap()</code> a second time to reserve a page
of anonymous memory immediately following:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    r = vm_mmap(lbp-&gt;file, loadaddr, filesize,</span>
<span>                PROT_READ | PROT_WRITE | PROT_EXEC,</span>
<span>                MAP_FIXED | MAP_PRIVATE, 0);</span>
<span>    if (r &lt; 0)</span>
<span>        return r;</span>
    if (allocsize != PAGE_ALIGN(filesize)) {
        r = vm_mmap(NULL, loadaddr + PAGE_ALIGN(filesize), PAGE_SIZE,
                    PROT_READ | PROT_WRITE | PROT_EXEC,
                    MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS, 0);
        if (r &lt; 0)
            return r;
    }
<span>    r = vm_brk(current-&gt;mm-&gt;start_brk, 0);</span>
<span>    if (r &lt; 0)</span>
<span>        return r;</span>

    put_user(0x050F3C478D67FF31, (long __user *)(loadaddr + filesize));
</code></pre></td></tr></tbody></table>

<p>And of course that ridiculous-looking 64-bit magic number at the
bottom is the little-endian encoding of our epilog.</p>

<p>We don't need to <code>rmmod</code> the previous module
this time, since we are defining a new binary format. The two can be
active simultaneously without interfering with each other.</p>
<p>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/calm modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/calm/calmfile.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/calm/calmfile.mod.o<br>  LD [M]  /home/breadbox/km/calm/calmfile.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>sudo insmod ./calmfile.ko</b><br>$ <b>lsmod | head -n3</b><br>Module                  Size  Used by<br>calmfile               16384  0<br>comfile                16384  0</p>

<p>Of the programs we've currently written, <a href="https://www.muppetlabs.com/~breadbox/txt/mopb/cat.asm.txt"><code>cat.asm</code></a>
is the best candidate to benefit from this change, having twelve
bytes' worth of machine code that can be omitted with the new format:</p>

<p>To enter a Unicode glyph at the terminal, type
Ctrl-Shift-U, followed by the codepoint number, and then Enter. The
sequence for the crown symbol is thus Ctrl-Shift-U 2 6 5 A Enter.</p>
<p>$ <b>cp -i cat.com cat.♚</b><br>$ <b>./cat.♚ &lt;hello.txt</b><br>hello, world<br>$ <b>truncate -s -12 cat.♚</b><br>$ <b>wc -c cat.♚</b><br>     88 cat.♚<br>$ <b>./cat.♚ &lt;hello.txt</b><br>hello, world<br>$ <b>echo $?</b><br>0</p>

<p>The only down side of this change is that the exit status no longer
reports error values from read failures.</p>

<p>No, that's not true. The other, more signficant, down side of this
change is that this new feature can't be used to improve the size of
our seven-byte executable! That program still has to explicitly exit,
in order to exit with a non-zero status. (And the non-zero exit is how
we can be certain that the program actually ran, and wasn't, say,
mistakenly handled as a do-nothing shell script.)</p>

<p>Well, it so happens that I have the perfect answer to both of these
concerns.</p>

<h3>Version 0.??: This Is Not At All a Ridiculous Idea</h3>

<p>The way to address these issues is to modify our epilog so that
instead of always returning zero, it uses the value at the top of the
stack as the exit code. Additionally (and here's the brilliant part),
the loader will set up our stack so that it starts out with a zero
entry at the top. That way, if the program is well-behaved and pops
everything off the stack that it pushed, it will automatically exit
with a successful zero status — but it can also quit prematurely at
any time, leaving an error code on the stack that will be
automatically transmitted to the user. This is clearly an improvement
to our original idea, right? I think it makes perfect sense, and isn't
at all contrived.</p>

<p>Fortunately, this new epilog will still fit snugly into eight bytes:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>epilog.lst</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>00000000 5F             pop	rdi
00000001 B83C000000     mov	eax, 60
00000006 0F05           syscall
</code></pre></td></tr></tbody></table>

<p>This improvement requires only a three-line change to our kernel
module:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    r = vm_brk(current-&gt;mm-&gt;start_brk, 0);</span>
<span>    if (r &lt; 0)</span>
<span>        return r;</span>
<span></span>
    <s>put_user(0x050F3C478D67FF31, (long __user *)(loadaddr + filesize));</s>
    put_user(0x050F0000003CB85F, (long __user *)(loadaddr + filesize));
    current-&gt;mm-&gt;start_stack -= sizeof(void*);
    put_user(0, (long __user *)current-&gt;mm-&gt;start_stack);
<span></span>
<span>    install_exec_creds(lbp);</span>
</code></pre></td></tr></tbody></table>

<p>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/calm modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/calm/calmfile.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/calm/calmfile.mod.o<br>  LD [M]  /home/breadbox/km/calm/calmfile.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>sudo rmmod ./calmfile.ko</b><br>$ <b>sudo insmod ./calmfile.ko</b></p>

<p>Once we've verified that it builds, let's revisit our current-best
seven-byte binary. That same program should work just as well in our
new format:</p>

<p>$ <b>./cat.♚ &lt;tiny.asm</b><br>BITS 64<br>	push	42<br>	pop	rdi<br>	mov	al, 60<br>	syscall<br>$ <b>nasm -f bin -o tiny.♚ tiny.asm</b><br>$ <b>chmod +x tiny.♚</b><br>$ <b>./tiny.♚</b><br>$ <b>echo $?</b><br>42<br>$ <b>wc -c tiny.♚</b><br>      7 tiny.♚</p>

<p>But it should also work if we push the number 42 onto the stack
and just leave it there. In other words, if the program just
consists of the <code>push</code> instruction.</p>

<p>$ <b>truncate -s 2 tiny.♚</b><br>$ <b>./tiny.♚</b><br>$ <b>echo $?</b><br>42<br>$ <b>wc -c tiny.♚</b><br>      2 tiny.♚</p>

<p>Two bytes. <em>Two bytes!</em> Our program is the size of a single
machine-language instruction! This is the limit! There's no way to
make a working program any smaller than that!</p>

<p>Well, I mean. I don't think there is. That is, obviously, there does
exist a number that is less than two, so <em>in theory</em> it could be
smaller, but how would that even be possible? Like, if there was a
one-byte instruction for storing an arbitrary value on the stack, then
maybe. But there isn't. The only other realistic possibility I can
think of would be if the binary file could make use of some metadata
to request a particular value to place on the stack initially, instead
of having it be a hard-coded zero value. But there is no metadata in
our file! That's the whole point of the format, right? I mean, of
course, all files have some metadata; that's just the nature of
filesystems. You could argue that the filename itself counts as
metadata. I mean, we are basically using the filename as metadata
already, I suppose. We're looking at the extension to determine the
file type. So you could in theory potentially maybe argue that, just
for example, using the character immediately preceding the extension
would also be valid metadata, and that could be defined to specify
optional behavior, like the default stack value for example …</p>

<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    put_user(0x050F0000003CB85F, (long __user *)(loadaddr + filesize));</span>
<span>    current-&gt;mm-&gt;start_stack -= sizeof(void*);</span>
    <s>put_user(0, (long __user *)current-&gt;mm-&gt;start_stack);</s>
    put_user(ext[-1], (long __user *)current-&gt;mm-&gt;start_stack);
</code></pre></td></tr></tbody></table>

<p><code>ext</code> is the pointer to the filename's extension, that we initialized
way back at the top of the function, so <code>ext[-1]</code> is the character
directly to the left of the dot. Don't get me wrong; I fully realize
that this is indefensibly contrived — especially since, as it turns
out, the ASCII character for 42 is the asterisk. That's quite an
inconvenient character to have in a filename.</p>

<p>But having come this far, how can I <em>not</em> continue?</p>

<p>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/calm modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/calm/calmfile.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/calm/calmfile.mod.o<br>  LD [M]  /home/breadbox/km/calm/calmfile.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>sudo rmmod calmfile</b><br>$ <b>sudo insmod ./calmfile.ko</b><br>$ <b>touch '*.♚'</b><br>$ <b>chmod +x '*.♚'</b><br>$ <b>'./*.♚'</b><br>$ <b>echo $?</b><br>42</p>

<p>Okay.</p>

<p><span>$ wc -c '*.♚'</span><br><span>      0 *.♚</span></p>

<p>Beat <strong>that</strong>, Internet Random Person™!</p>

<p><img src="https://www.muppetlabs.com/~breadbox/txt/mopb/cartoon2.jpg"><br>Illustration
of author surveying the fruits of his labor by Bomberanian</p>

<p><a href="https://www.muppetlabs.com/~breadbox/txt/mopb-app.html">(appendix)</a></p>

<hr>
<small><a href="http://www.muppetlabs.com/~breadbox/txt/">Texts</a></small>
<br>
<small><a href="http://www.muppetlabs.com/~breadbox/">Brian Raiter</a></small>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[How a $2k 'Made in the USA' Phone Is Manufactured (172 pts)]]></title>
            <link>https://www.404media.co/how-a-2-000-made-in-the-usa-liberty-phone-phone-is-manufactured/</link>
            <guid>43646920</guid>
            <pubDate>Thu, 10 Apr 2025 18:43:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.404media.co/how-a-2-000-made-in-the-usa-liberty-phone-phone-is-manufactured/">https://www.404media.co/how-a-2-000-made-in-the-usa-liberty-phone-phone-is-manufactured/</a>, See on <a href="https://news.ycombinator.com/item?id=43646920">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <article>
          <div>
              
<!--kg-card-begin: html-->

<!--kg-card-end: html-->
<p>Earlier this week I wrote an article called “<a href="https://www.404media.co/a-us-made-iphone-is-pure-fantasy/" rel="noreferrer">A US-Made iPhone Is Pure Fantasy</a>." The long and short of it is that Trump’s dream of moving all high tech manufacturing to the US is extremely difficult because global supply chains are so intricate, manufacturing expertise exists primarily in China, Vietnam, Cambodia, and other countries, and the components that go into a phone are often made in other countries as well.</p><p>But there is currently one smartphone that qualifies for a “Made in the USA” title from the FTC. <a href="https://shop.puri.sm/shop/liberty-phone/?ref=404media.co" rel="noreferrer">It’s the Liberty Phone</a>, which is made by a company called Purism. The phone is a version of Purism’s Librem 5. The Made-in-China Librem 5 costs $800, and the Liberty phone costs $2,000. It has 4 GB of memory, and <a href="https://www.androidauthority.com/purism-librem-liberty-phone-3342049/?ref=404media.co" rel="noreferrer">reviewers say that its specs are pretty outdated</a>. Not every single component in the Liberty Phone is made in the USA, but the company has been trying very hard to make it as American-made as possible. The fact that it exists at all is kind of a miracle, and the way that Purism is approaching manufacturing is really interesting, so I called Purism’s founder, Todd Weaver, to talk about smartphone supply chains, making tech products in the United States, and tariffs. Here’s our discussion, which has been edited for length and clarity. The full, hour-long discussion is available here as a bonus episode of the 404 Media podcast:</p>
<!--kg-card-begin: html-->

<!--kg-card-end: html-->
<p>&nbsp;<strong>404 Media: What you're doing is super interesting and I know you've been doing it for a while. I know that there's been tons of discussion over the last few weeks about bringing manufacturing back to the United States, the difficulty of doing that with different supply chains and components and things like that. And I know to the best of your ability, you've </strong><a href="https://puri.sm/products/liberty-phone/?ref=404media.co"><strong><u>brought the Liberty Phone</u></strong></a><strong> to the U.S. Can you tell me a little bit about what the Liberty Phone is and how long you've been doing it for?&nbsp;</strong></p><p><strong>Todd Weaver:</strong> So the first thing is I started the company, Purism, in 2014. The original business plan is actually what we were able to execute on over the course of the last 10 years, and looking at doing a fair number of things different than is currently done.</p><p>One of those is US manufacturing for a lot of reasons, secure supply chain, where we get to manage all the components, full transparency, I can also release my schematics. And then that gets us to where we're really targeting that security market as well, because the security market needs to have control and also verify the claims of any technology stack being used. When I started the company, we also did laptops. And then I knew I wanted to get to the point of phones. But I also knew that I had to increment my way there by building laptops first, showcasing that I'm able to do all of that on the hardware, software services side, and then get to the point of the phone. When we did the phone, it was the Librem 5 phone.</p><p>After we were successful on the Librem 5 crowdfunding campaign, we took our own electronics engineers (EEs), and then we worked with Chinese design and manufacturing through 2018, 2019, and 2020, because that's where every phone is made.</p><p>We had to leverage the knowledge base that was offshored into that country to do so. And so at that point, we were able to take our designs and educate our staff on the entire process and produce the Librem 5. And then we were able to take all those designs and spin up our own SMT, it's called Surface Mount Technology, where we can actually produce the entire electronics of the device at our facility, therefore bringing it back to US soil. And so we have a few different SKUs of our product offering that are manufactured in our facility.&nbsp;</p><figure><img src="https://www.404media.co/content/images/2025/04/CleanShot-2025-04-10-at-11.03.11@2x.png" alt="" loading="lazy" width="1380" height="904" srcset="https://www.404media.co/content/images/size/w600/2025/04/CleanShot-2025-04-10-at-11.03.11@2x.png 600w, https://www.404media.co/content/images/size/w1000/2025/04/CleanShot-2025-04-10-at-11.03.11@2x.png 1000w, https://www.404media.co/content/images/2025/04/CleanShot-2025-04-10-at-11.03.11@2x.png 1380w" sizes="(min-width: 720px) 720px"><figcaption><span>One of the Liberty Phone's boards. Image: Purism</span></figcaption></figure><p>We have a varying degree of the country of origin for components or the total product. So on one end of that spectrum, you have our server, which is an Intel reference design manufactured out of China, and then we're importing it. And then you go through the whole scale all the way down to Liberty Phone and <a href="https://puri.sm/products/librem-key/?ref=404media.co"><u>our Librem Key</u></a> that are 100% produced at our facility in Carlsbad, California.</p><p>On those two products we take the printed circuit board, which is just a blank board that has no components and run that through our surface mount technology by our line operators. And so we go from resistors and capacitors and integrated circuits, put them all on the board, take it off the board, do quality control, any firmware loading. Then we assemble the entire phone and then do a software load for the customer and then ship it direct. That whole process is top to bottom done at our facility.</p><p><strong>There’s a difference between a phone that is fully made and manufactured in the United States and one that is assembled in the United States. Do you believe that you're manufacturing the phone from start to finish in the United States?</strong></p><p>There's no question about it. The difference is actually defined by the FTC. So the Federal Trade Commission has language that describes the difference between assembled and manufactured. Assembly is where you are putting parts together. And they actually even have a sub definition of that called screwdriver assembly. So if you only take a screwdriver to it, and that's the only tool you're using, meaning snapping parts and using a screwdriver, then you cannot claim it was ‘<a href="https://www.ftc.gov/business-guidance/resources/complying-made-usa-standard?ref=404media.co"><u>made in the USA</u></a>’ or you can't even claim ‘assembled in the USA.’ When you're looking at the Liberty phone, we are taking the bare board and we are doing the entire manufacturing process of all of the electronics, meaning resistors, capacitors, integrated circuits are being put onto that board.</p><p>It's going from raw materials to finished goods at our facility. And then we assemble the entire printed circuit board into the actual chassis of the phone. And then we also load our own operating system and then ship it to the customer. So, not only are we doing full electronics manufacturing at our facility on US soil, but we're also doing the entire operating system and authorship and releasing of that.&nbsp;</p><p><strong>You're not buying components from overseas and then screwing them together here? You're making the components here as well?</strong></p><p>Components are the things that you're actually purchasing like a resistor and a capacitor and integrated circuit. Those we are buying from a Western distributor and each chip set that you use has a country of origin. In our case, we also use chip sets that are like ST Micro [a <a href="https://www.st.com/content/st_com/en.html?ref=404media.co"><u>Swiss company with American factories</u></a>], Texas instruments. These are manufactured on US soil.</p><p>So we also go down as deep as we possibly can to purchase from US or Westernized distribution or manufacturers of those components and chips. So obviously resistors, capacitors are manufactured on US oil. We purchase those and install them. When you're talking about the PCB, which is the blank board and the PCBA, which is the printed circuit board assembly. You're taking those raw components and you're putting them onto a board, meaning soldering them onto a board, and then you have a finished electronic circuit board. When you're talking about other companies, what they're importing is typically finished goods, finished electronics. Meaning the chassis, the battery, the whole entire electronics inside. And in rare cases, they might import just the motherboard, meaning the printed circuit board or PCBA assembly. We're very unique in the sense that we actually go from parts in stock all the way to the manufacturing process, all the way to finished goods at our facility. It is a vertically integrated manufacturing process. And that is, as you can recognize, extremely rare.</p><p><strong>The last part of this is the raw materials, the minerals that are being mined and turned into the different parts that you're sourcing from suppliers. Do you try to work with suppliers who are making parts using materials mined in the US? Or is that too hard to follow that deep into the supply chain?</strong></p><p>Yes, we do, but there's levels of complexity, as you can imagine, where the desire is there, but sometimes the parts aren't, or sometimes the negotiation with the suppliers turn into much more challenging or time consuming for the scale that we happen to be at. And then there's another bit of that, which also is leverage. If you're talking millions of units, as a manufacturer you have a lot more leverage than if you have a hundred thousand or tens of thousands. And so there is a degree of how hard can you push into the supply chain for contractual sourcing of raw materials, meaning mined materials. What we tend to do when we're doing Liberty phone is use Western distribution which has to comply with an awful lot more regulation on where it can source components from.&nbsp;</p><blockquote> "If you scoured the United States, you would be able to probably actually still count the number of skilled electronics engineers. If you go to Shenzhen, there's floor after floor after floor after floor of skilled EE's"</blockquote><p>Our philosophy from the very early days, especially as it relates to US manufacturing, is we go as deep as we possibly can to releasing our schematics, to sourcing our components, to having our HBOM, it's called a hardware bill of materials, a country of origin available, to the transparency of all of our source code that we author being published as well so you can verify that all of our claims are accurate.</p><p><strong>How long did it take you to implement this vision for manufacturing everything in the United States?&nbsp;</strong></p><p>2017 was when we actually began to say ‘We want to manufacture a phone and we would like to do it on US soil.’ We then actually <a href="https://puri.sm/products/librem-key/?ref=404media.co"><u>manufactured our Librem Key</u></a> as a very small security token at the same facility, same US soil manufacturing process. But it was a much easier product to produce, but that also showed, hey, we're able to do it on a simpler product.&nbsp;</p><p>Then in 2019, we were able to get what's called PVT samples. That's where you sort of get the initial versions of hardware being produced. So that two years is really about design changes that we needed, developing every bit out. But also in parallel to that, we were educating our electronic engineers to say, every time we're sourcing a Chinese resistor [a circuit board component], let's make sure we're getting the same resistance on a US resistor.</p><p>We always were sort of maintaining two different bills of materials of Chinese componentry and Western componentry because they're different. Then we produced five different iterations of the Librem 5 phone through Chinese contract manufacturing. And we iterated through those five changes over the course of about 18 months. At that point, we finally had a production ready product. And then we were able to take everything that we did and bring it to US soil.&nbsp;</p><p>[The Librem 5 USA was released in 2020, after three years of development.]</p><p>Imagine this literally starting from scratch, you're looking at probably a three year cycle from, from ‘Let's take an existing made-in-China product and then just produce the same thing in the US.’&nbsp;</p><p><strong>Were there specific components or specific parts of the phone that were harder to source in the United States or harder to manufacture in the United States because we don't make that type of component in the US or there's not a US supplier that sells it?</strong></p><p>Yes. There's US-manufactured, and then there’s ‘Westernized’ sourcing, so something from Germany or Europe or Canada. There's a bunch of these where you can’t get a US-component but you can get a ‘Western’ component. And then there’s things you can’t get [from a Western manufacturer].</p><p>One specific item is a type of crystal that needs to be put into phones, which is basically for keeping track of time and a few other measurement metrics. That crystal is something that only comes from China, and maybe I think you can get it from South Korea, which is where we either are sourcing or trying to source that last component from.</p><p>Even where we care to do 100 percent of it, there's still always something that you can try and dig one level deeper and you realize, that's a mineral or a mineral resource of something that's coming from somewhere that would be outside of the U.S. So then you need to import it and you wonder, ‘Is that ever going to be produced in the US or is there some company who would like to begin doing so?’ It's obviously a very complex question when you're dealing with, you know, in our case, 200 unique parts and the entire sourcing of all of them.</p><p>You can imagine the majority of companies who are just selling electronics from manufacturers somewhere else, they don't care. There's no transparency, no visibility, and the company itself doesn't even know the designs or what goes into it.</p><p><strong>Your </strong><a href="https://puri.sm/products/liberty-phone/?ref=404media.co"><strong><u>table of component origins</u></strong></a><strong> on the Liberty Phone site shows where things come from. Most of it is USA, but then you have the M2 Modem module that says its origin declaration is China. Is there a specific reason that’s not USA?&nbsp;</strong></p><p>The M2 module, we actually have options for US made and then we also have European, Germany. That module, specifically for cellular, it depends on the bands that you're looking to install it at or in some cases cost, right? So we have that as an actual module that you can snap in. The one that we ship for when we sell the [Chinese-made] Librem 5 is a Chinese modem. But we have a US-made one and a few other westernized countries for that modem module. We have the options of different bands, different country of origin, and to be able to put that in after the fact or during final assembly.</p><p><strong>But I would just imagine that the Chinese one is a lot cheaper.</strong></p><p>Yeah, absolutely. It's cheaper, it also has pretty wide bands.&nbsp;</p><p><strong>The phone that you were able to manufacture in the United States is not as fast as the latest iPhone. Can the newest best chips and components be manufactured in the US, and what would it take to do it here?</strong></p><p>The short answer is yes, I do, because you didn't ask me the timing. It's going to be multiples of years and a major investment and undertaking. And it has to show that there's a ROI and that there’s stability, like ‘This is the future that we’re going to live in, so let’s actually invest in doing all those things.’</p><p>When you're talking chipsets, the actual CPUs inside of Apple and Samsung and Google phones, those are a complete computer where it's hardware, the CPU, memory, and baseband modem, the cellular modem all combined onto one. And typically that's from Qualcomm or MediaTek. And those particular chipsets are produced outside of China. So really what you're referring to is the actual design of a finished good saying, take the semiconductor and put it into a phone and then add all the other components, the 200 and some other unique components into the finished good. And that is done in China specifically for Apple and a bunch of other major manufacturers.</p><p>It's obviously far more complex, but to try and just level set a little bit about that, where you're at now is you say ‘Let's take what we have in China and try to replicate that in the U.S.’ Well, the challenge is that all high tech jobs were put into China. You have a brain transfer where the ODMs, the original design manufacturers, are in China. If you scoured the United States, you would be able to probably actually still count the number of skilled electronics engineers. If you go to Shenzhen, there's floor after floor after floor after floor of skilled EE's.&nbsp;</p><p>These are people who design the actual board that goes into devices. That training takes time and effort and energy to get to the point where you can design new devices.&nbsp;</p><p>Then you have the next step, which is the actual assembly process. When you're looking at costing, machine versus machine, it's the same price to produce a product in US or China. Because the machine is doing the effort.&nbsp;</p><p>But then you have a person who physically grabs the board and does the assembly, which is a much more costly endeavor in the US than it is in China. China can solve problems by throwing people at it. The US and Western countries can solve problems by throwing engineering at it. If you were to go to Dongguan, China, and you see a manufacturing line, they're going to have rows and rows and rows of people who are taking a tablet or a phone that passes by them, and they just do [quality assurance on] pinch to zoom. They have gloves and they touch the screen, drag it open and drag it back and then it moves on the line. If one doesn't do pinch to zoom properly, they send it back. And that is a job for an entire row of people.&nbsp;</p><p>But what we did at Purism is we solved it with engineering. How we do that is we actually plug in the phone and we flash the entire device and we run through what we call auto Quality Assurance. And that is where we actually hack the firmware to receive or fake to receive a touch screen event into the firmware itself on the screen. And then we actually replicate a pinch to zoom, take a picture and then back again and take another picture. And as long as those pictures match, we have a functioning touch interface, where we didn't have to have people doing that task.&nbsp;</p><p>You can look at our concrete numbers. We sell a Chinese made Librem 5 phone for $799. We sell the Liberty phone for $2,000. When you're looking at just those numbers alone, that looks like a giant leap in cost. But there's a couple of factors that are not publicly known when you're looking at just those prices. When you're looking at COGS, cost of goods sold, our Librem 5 phone is equivalent in cost to about an iPhone. It's about $500 and some odd dollars, $550. So we can see that the Librem 5 phone doesn't have a very high margin when we sell it. The Liberty phone, same COGS componentry wise, but to produce it on US soil, we're adding not quite a hundred dollars. So it's about $650 to produce that entire phone. But what we're doing by selling it for greater originally, we're looking at a lot of differentiators for us. It wasn't just made in the USA. It's the fact that it's a secure supply chain, that you know, staff that's completely auditing every component, which means we're selling to a government security market with all those additional layers that we've added on top.</p><p><strong>Do you feel like you are in a better spot tariffs-wise than a company that is doing all of their manufacturing in China because you've done all of this?</strong></p><p>Absolutely, without question. If there’s a vertically integrated company where they have engineers, they have designers, they have the knowledge to be able to do it, then those companies will be able to adapt and bring it forth. If they choose to do US manufacturing, they have at least the ability to.</p><p>Whereas a company that is marketing and finance, and that's really the bulk of what they're doing, and they don't have any engineering, and they've offloaded all of those tasks. If they have no R&amp;D budget, and they have no operating expenses for any type of engineering or manufacturing, then they're gonna be in a very difficult position because you can also imagine there's kind of a run on the bank, right? Everybody is going to be looking for a company who can build their product at the same time. They have no knowledge of how to do it because that entire process has been brought into China. In China, you’re basically talking to a project manager, who's finding all of the right parties that does all the other tasks, and then they bring in all the engineers and everything else that's needed operationally and what you're receiving at the end of the day is something you can drop ship to a customer without ever actually even opening the box. It’s going to be very challenging to find someone in the US who's going to fill that same void at the same time that everybody else is looking to see if they can fill that void.</p><p><strong>You are doing this manufacturing in Carlsbad, California. Did you find it difficult to find workers who were able to work on a high tech factory line?</strong></p><p>We did not have difficulty in finding line operators, or what we call ‘skilled labor’ where you're able to solder something or do assembly with tweezers. That type of skilled labor exists, but it’s also in [geographical] pockets. If you're to say ‘Why in the world are you in Carlsbad, California?’ It's because there’s skilled labor there. There's companies here that currently work for government contract manufacturers, so that's where the labor is, that's why it was easy for us to spin up a line there and hire skilled labor from some of the other companies who have trained up those same staff.&nbsp;</p><p>Electronics engineers is a rarer position. And that's what I was describing earlier when you scour the nation you'd come up with, you could count the number of skilled electronics engineers on US soil and there's probably a million in Shenzhen alone.&nbsp;</p><p><strong>One thing that I worry about or think might be a problem is if you have tons of companies trying to do this all at once, very quickly, what is that going to be like? Are there enough skilled people to do that here?</strong></p><p>The answer has to be no. There's enough skilled labor to handle the necessary manufacturing that we're currently doing and you know if you increment it slowly then you can probably get there. If you're talking full EEs, that's multi years of education to get to the point of actually being able to do proper designs that actually work.&nbsp;</p><blockquote>"If the tariff from China is 100%, and you know it is going to be 100 % for the next 10 years, you will make a different business decision than if it is, ‘Might be 100%, not sure what's going to be in three months, what's it going to be in a year from now, and what's it going to be in three years from now.’ That uncertainty does not create stable markets. It does not create very accurate business decisions."</blockquote><p>There's another bit that you sort of hinted at there that I think is important, and I’m going to address it. The reliability of knowing that a tariff is in place and how long it's going to be in place allows a business to make informed decisions. If it was something where you knew that importing from China is going to be a hundred percent tariff for the next 10 years concretely, every business owner would be making decisions based off of that assumption, and the reliability of that assumption is important.&nbsp;</p><p>If it's something where ‘Hey, this is what's going to be 100%, but in two months it might not be, and who knows what's going to happen in three years or four years?’ It makes it very hard for a business owner or the board of directors to say ‘It's worth spinning all this up.’&nbsp;</p><p><strong>Did you look at bringing manufacturing to the US as a political project for you? Were you interested in the politics of doing this in the United States or was it a matter of differentiating yourselves?</strong></p><p>There's like probably about 10 items on the list of reasons why we chose to do manufacturing in the US. And obviously one of those is from a civil liberties perspective. So manufacturing high tech componentry in a hostile nation to the United States is not good geopolitical politics, right? Purism as a company, we also care tremendously about civil liberties and the privacy side of things which is to say we manufacture a phone that doesn't spy on you. That's why we manufacture it and also do all the source code. We can't have some nefarious chip put into the supply chain from a hostile country.&nbsp;</p><p>So the short answer is not in the short-term political game, but more of the geopolitical game and also understanding security and privacy and sort of how all those things weave together&nbsp;</p><p><strong>I think no matter where you are on the political spectrum, you can look at the last two weeks of tariffs, more tariffs, maybe not tariffs, maybe a delay in tariffs, increased Chinese tariffs and agree that this is chaotic. And you mentioned the stability of sort of knowing what the rules are going to be. Does this all stress you out?</strong></p><p>I do not stress about the SKUs that we are fully making in the US, right? We don't have to worry about it for our US side, because the majority of it will not be affected. But for others [that we make overseas], you can’t project out, right? What is it gonna be in three months? Should we buy components now? What is it gonna be a year from now? Maybe we should stock up on a bunch of other things?</p><p>Should we buy it today? Then maybe somebody on your procurement team says, ‘Well, maybe we should wait a week, right?’ Because if it's going to change, is it going to change for the better or worse? And you can imagine those little micro example carries forward to everything else that a business has to decide</p><p>If the tariff from China is 100%, and you know it is going to be 100 % for the next 10 years, you will make a different business decision than if it is, ‘Might be 100%, not sure what's going to be in three months, what's it going to be in a year from now, and what's it going to be in three years from now.’ That uncertainty does not create stable markets. It does not create very accurate business decisions.&nbsp;</p>
<!--kg-card-begin: html-->

<!--kg-card-end: html-->

                    <div>
    <div>
      <p>About the author</p>
      <p>Jason is a cofounder of 404 Media. He was previously the editor-in-chief of Motherboard. He loves the Freedom of Information Act and surfing.</p>
      
    </div>
      <p><img data-src="/content/images/2023/08/404-jason-01-copy.jpeg" alt="Jason Koebler" src="https://www.404media.co/content/images/2023/08/404-jason-01-copy.jpeg">  
      </p>
  </div>
          </div>
        </article>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Demystifying the (Shebang): Kernel Adventures (135 pts)]]></title>
            <link>https://crocidb.com/post/kernel-adventures/demystifying-the-shebang/</link>
            <guid>43646698</guid>
            <pubDate>Thu, 10 Apr 2025 18:21:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://crocidb.com/post/kernel-adventures/demystifying-the-shebang/">https://crocidb.com/post/kernel-adventures/demystifying-the-shebang/</a>, See on <a href="https://news.ycombinator.com/item?id=43646698">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
      <p>From my first experience creating a shell script, I learned about the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)"><strong>shebang</strong></a> (<code>#!</code>), the special first line used to specify the interpreter for executing the script:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span><span>#! /usr/bin/sh
</span></span></span><span><span><span></span>echo <span>"Hello, World!"</span>
</span></span></code></pre></div><p>So that you can just invoke it with <code>./hello.sh</code> and it will run with the specified interpreter, assuming the file has execute permissions.</p>
<p>Of course, the shebang isn’t limited to shell scripts; you can use it for any script type:</p>
<div><pre tabindex="0"><code data-lang="python"><span><span><span>#! /usr/bin/python3</span>
</span></span><span><span>print(<span>"Hello, World!"</span>)
</span></span></code></pre></div><p>This is particularly useful because many bundled Linux utilities are actually scripts. Thanks to the shebang, you don’t need to explicitly invoke their interpreters. For example, there are two (very confusing) programs to create a user on Linux: <code>useradd</code> and <code>adduser</code>. One of them is the actual program that will create the user in the system, the other one is a utility that will create the user, the home directory and configure the user for you. Since I never remember which one is which, a good way to check is using the utility <code>file</code>:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>$ file <span>$(</span>which useradd<span>)</span>
</span></span><span><span>/usr/sbin/useradd: ELF 64-bit LSB pie executable, x86-64, version <span>1</span> <span>(</span>SYSV<span>)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2 <span>(</span>...<span>)</span>
</span></span><span><span>
</span></span><span><span>$ file <span>$(</span>which adduser<span>)</span>
</span></span><span><span>/usr/sbin/adduser: Perl script text executable
</span></span></code></pre></div><p>Ok, we know that <code>addser</code> is the tool we want to use, because it’s more user-friendly and generally does what you’d expect when adding a user. And yes, if you check how it starts:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>$ head -n <span>1</span> /usr/sbin/adduser
</span></span><span><span><span>#! /usr/bin/perl</span>
</span></span></code></pre></div><p>I had always assumed the <em>shell</em> used the shebang as a hint, but that’s incorrect! <strong>This functionality is actually handled directly by the Linux Kernel.</strong></p>
<h2 id="tracking-the-kernel-execution">Tracking the kernel execution</h2>
<p>One good way to track any executable in Linux is using <code>strace</code>, which traces all the system calls made by a process:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>$ strace ./test.sh
</span></span><span><span>execve<span>(</span><span>"./test.sh"</span>, <span>[</span><span>"./test.sh"</span><span>]</span>, 0x7ffed15d9828 /* <span>33</span> vars */<span>)</span> <span>=</span> <span>0</span>
</span></span><span><span>brk<span>(</span>NULL<span>)</span>                               <span>=</span> 0x59aea5a28000
</span></span><span><span>mmap<span>(</span>NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0<span>)</span> <span>=</span> 0x78ee2be49000
</span></span><span><span>access<span>(</span><span>"/etc/ld.so.preload"</span>, R_OK<span>)</span>      <span>=</span> -1 ENOENT <span>(</span>No such file or directory<span>)</span>
</span></span><span><span><span>(</span>...<span>)</span>
</span></span></code></pre></div><p>Interesting, the call to <code>test.sh</code> goes straight into <code>execve</code>, the syscall to start running a program from a file. This implies the kernel itself is <em>responsible for finding</em> the correct interpreter and executing it.</p>
<p>If we start digging into the kernel code, we can see that the entry point for the <code>execve</code> syscall is in the function <code>do_execveat_common</code>, found in <a href="https://github.com/torvalds/linux/blob/master/fs/exec.c#L1967"><code>fs/exec.c</code></a>. It starts by creating a <code>struct linux_binprm *bprm;</code> which means “binary program”, then performing some checks, and eventually calling <code>bprm_execve</code>:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span>retval <span>=</span> <span>bprm_execve</span>(bprm);
</span></span></code></pre></div><p><code>bprm_execve</code> then proceeds to <code>exec_binprm</code>, which will then eventually invoke <code>search_binary_handler</code>. This function is responsible for identifying the file’s executable format. It starts with <code>retval = prepare_binprm(bprm)</code> and following that function, we realize it’s actually copying part of the contents of the file into the <code>bprm-&gt;buf</code>:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>/*
</span></span></span><span><span><span> * Fill the binprm structure from the inode.
</span></span></span><span><span><span> * Read the first BINPRM_BUF_SIZE bytes
</span></span></span><span><span><span> *
</span></span></span><span><span><span> * This may be called multiple times for binary chains (scripts for example).
</span></span></span><span><span><span> */</span>
</span></span><span><span><span>static</span> <span>int</span> <span>prepare_binprm</span>(<span>struct</span> linux_binprm <span>*</span>bprm)
</span></span><span><span>{
</span></span><span><span>	<span>loff_t</span> pos <span>=</span> <span>0</span>;
</span></span><span><span>
</span></span><span><span>	<span>memset</span>(bprm<span>-&gt;</span>buf, <span>0</span>, BINPRM_BUF_SIZE);
</span></span><span><span>	<span>return</span> <span>kernel_read</span>(bprm<span>-&gt;</span>file, bprm<span>-&gt;</span>buf, BINPRM_BUF_SIZE, <span>&amp;</span>pos);
</span></span><span><span>}
</span></span></code></pre></div><p><code>BINPRM_BUF_SIZE</code> is <em>256</em> in <code>include/linux/binfmts.h</code></p>
<p>Then it proceeds to look through a list of formats and checks which one the current program is:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>list_for_each_entry</span>(fmt, <span>&amp;</span>formats, lh) {
</span></span><span><span>	<span>if</span> (<span>!</span><span>try_module_get</span>(fmt<span>-&gt;</span>module))
</span></span><span><span>		<span>continue</span>;
</span></span><span><span>	<span>read_unlock</span>(<span>&amp;</span>binfmt_lock);
</span></span><span><span>
</span></span><span><span>	retval <span>=</span> fmt<span>-&gt;</span><span>load_binary</span>(bprm);
</span></span><span><span>
</span></span><span><span>	<span>read_lock</span>(<span>&amp;</span>binfmt_lock);
</span></span><span><span>	<span>put_binfmt</span>(fmt);
</span></span><span><span>	<span>if</span> (bprm<span>-&gt;</span>point_of_no_return <span>||</span> (retval <span>!=</span> <span>-</span>ENOEXEC)) {
</span></span><span><span>		<span>read_unlock</span>(<span>&amp;</span>binfmt_lock);
</span></span><span><span>		<span>return</span> retval;
</span></span><span><span>	}
</span></span><span><span>}
</span></span></code></pre></div><p>Those format modules are:</p>
<ul>
<li>binfmt_elf.c</li>
<li>binfmt_elf_fdpic.c</li>
<li>binfmt_flat.c</li>
<li>binfmt_misc.c</li>
<li>binfmt_script.c</li>
</ul>
<p>And they all are responsible for registering themselves so <code>search_binary_handler</code> test each one of them. We know that <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a> is the regular binary format that Linux uses, <a href="https://cateee.net/lkddb/web-lkddb/BINFMT_ELF_FDPIC.html">ELF FDPIC</a> is an extension to ELF, FLAT binaries are just the instructions without any specific system configuration (<a href="https://stackoverflow.com/questions/1283342/executing-a-flat-binary-file-under-linux">this question</a> explains a bit), SCRIPT is the format that interprets our shebang, but what really caught my eye was MISC.</p>
<p>According to the <a href="https://docs.kernel.org/admin-guide/binfmt-misc.html">official Kernel Admin Guide</a>:</p>
<blockquote>
<p>This Kernel feature allows you to invoke almost (for restrictions see below) every program by simply typing its name in the shell. This includes for example compiled Java(TM), Python or Emacs programs. To achieve this you must tell binfmt_misc which interpreter has to be invoked with which binary. Binfmt_misc recognises the binary-type by matching some bytes at the beginning of the file with a magic byte sequence (masking out specified bits) you have supplied. Binfmt_misc can also recognise a filename extension aka&nbsp;<code>.com</code>&nbsp;or&nbsp;<code>.exe</code>.</p></blockquote>
<p>It’s another way to tell the Kernel what interpreter to run when invoking a program that’s not native (ELF). For scripts (text files) we mostly use a shebang, but for byte-coded binaries, such as Java’s JAR or Mono EXE files, it’s the way to go!</p>
<p>Returning to our shebang investigation, let’s examine <code>fs/binfmt_script.c</code>. Checking its registration mechanism near the end of the file reveals some key information:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>core_initcall</span>(init_script_binfmt);
</span></span><span><span><span>module_exit</span>(exit_script_binfmt);
</span></span><span><span><span>MODULE_DESCRIPTION</span>(<span>"Kernel support for scripts starting with #!"</span>);
</span></span><span><span><span>MODULE_LICENSE</span>(<span>"GPL"</span>);
</span></span></code></pre></div><p>There’s the module description (yep, shebang is not an official term), then a <code>core_initcall</code> call pointing to <code>init_script_binfmt</code>:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>static</span> <span>int</span> __init <span>init_script_binfmt</span>(<span>void</span>)
</span></span><span><span>{
</span></span><span><span>	<span>register_binfmt</span>(<span>&amp;</span>script_format);
</span></span><span><span>	<span>return</span> <span>0</span>;
</span></span><span><span>}
</span></span></code></pre></div><p>That registers the <code>script_format</code> object, which is defined like this:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>static</span> <span>struct</span> linux_binfmt script_format <span>=</span> {
</span></span><span><span>	.module		<span>=</span> THIS_MODULE,
</span></span><span><span>	.load_binary	<span>=</span> load_script,
</span></span><span><span>};
</span></span></code></pre></div><p>And when we examine the <code>load_script</code> function, boom:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>static</span> <span>int</span> <span>load_script</span>(<span>struct</span> linux_binprm <span>*</span>bprm)
</span></span><span><span>{
</span></span><span><span>	<span>const</span> <span>char</span> <span>*</span>i_name, <span>*</span>i_sep, <span>*</span>i_arg, <span>*</span>i_end, <span>*</span>buf_end;
</span></span><span><span>	<span>struct</span> file <span>*</span>file;
</span></span><span><span>	<span>int</span> retval;
</span></span><span><span>
</span></span><span><span>	<span>/* Not ours to exec if we don't start with "#!". */</span>
</span></span><span><span>	<span>if</span> ((bprm<span>-&gt;</span>buf[<span>0</span>] <span>!=</span> <span>'#'</span>) <span>||</span> (bprm<span>-&gt;</span>buf[<span>1</span>] <span>!=</span> <span>'!'</span>))
</span></span><span><span>		<span>return</span> <span>-</span>ENOEXEC;
</span></span><span><span>(...)
</span></span></code></pre></div><p>There the check is!</p>
<p>This function is very well-commented, detailing almost every step, so I recommend reading the source code <a href="https://github.com/torvalds/linux/blob/e48e99b6edf41c69c5528aa7ffb2daf3c59ee105/fs/binfmt_script.c#L34">here</a>. Essentially, it reads the first line, parses the interpreter path (and any arguments), opens the interpreter’s executable file, and assigns a reference to it to <code>bprm-&gt;interpreter</code>.</p>
<p>Back in <code>exec_binprm</code>, it will check for if an interpreter (from script or misc binary formats) was found, then if so:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span>(...)
</span></span><span><span>ret <span>=</span> <span>search_binary_handler</span>(bprm);
</span></span><span><span><span>if</span> (ret <span>&lt;</span> <span>0</span>)
</span></span><span><span>	<span>return</span> ret;
</span></span><span><span><span>if</span> (<span>!</span>bprm<span>-&gt;</span>interpreter)
</span></span><span><span>	<span>break</span>;
</span></span><span><span>
</span></span><span><span>exec <span>=</span> bprm<span>-&gt;</span>file;
</span></span><span><span>bprm<span>-&gt;</span>file <span>=</span> bprm<span>-&gt;</span>interpreter;
</span></span><span><span>bprm<span>-&gt;</span>interpreter <span>=</span> NULL;
</span></span><span><span>
</span></span><span><span><span>exe_file_allow_write_access</span>(exec);
</span></span><span><span><span>if</span> (<span>unlikely</span>(bprm<span>-&gt;</span>have_execfd)) {
</span></span><span><span>	<span>if</span> (bprm<span>-&gt;</span>executable) {
</span></span><span><span>		<span>fput</span>(exec);
</span></span><span><span>		<span>return</span> <span>-</span>ENOEXEC;
</span></span><span><span>	}
</span></span><span><span>	bprm<span>-&gt;</span>executable <span>=</span> exec;
</span></span><span><span>} <span>else</span>
</span></span><span><span>	<span>fput</span>(exec);
</span></span><span><span>(...)
</span></span></code></pre></div><p>If an interpreter <em>is</em> found, <code>bprm-&gt;file</code> is updated to point to the interpreter’s file (replacing the script file), and the reference count for the original script file (<code>exec</code>) is decremented via <code>fput(exec)</code>.</p>
<p>So, a single <code>execve</code> syscall on the script file triggers the kernel to: open the script, detect the <code>#!</code>, find and open the specified interpreter, and finally load and execute the <em>interpreter</em>, passing the script path as an argument. The kernel effectively replaces the process image with the interpreter’s.</p>
<h2 id="but-i-can-run-a-shellscript-without-">But I can run a shellscript without #!</h2>
<p>That’s true. You don’t really need #! to run shellscripts, but that’s a fallback mechanism implemented by the shell, rather than the kernel, for example, if you try to strace the execution of a shell script lacking a shebang:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>$ cat test.sh
</span></span><span><span>echo <span>"Hello, World!"</span>
</span></span><span><span>
</span></span><span><span>$ ./test.sh
</span></span><span><span>Hello, World!
</span></span><span><span>
</span></span><span><span>$ strace ./test.sh
</span></span><span><span>execve<span>(</span><span>"./test.sh"</span>, <span>[</span><span>"./test.sh"</span><span>]</span>, 0x7ffd9a1afcf0 /* <span>33</span> vars */<span>)</span> <span>=</span> -1 ENOEXEC <span>(</span>Exec format error<span>)</span>
</span></span><span><span>strace: exec: Exec format error
</span></span><span><span>+++ exited with <span>1</span> +++
</span></span></code></pre></div><p>It will fail with <code>ENOEXEC (Exec format error)</code>, since there’s no indication of format for that file.</p>
<p>To observe the shell’s fallback behavior, we can trace a <em>new</em> shell instance invoking the script. We use <code>sh -c './test.sh'</code> to ensure the child shell attempts the <code>execve</code>, rather than the parent shell interpreting the script directly. We’ll use <code>strace</code> with <code>-f</code> (to follow child processes) and filter for key syscalls:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>strace -e trace<span>=</span>execve,openat,read,close -f sh -c <span>"./test.sh"</span>
</span></span></code></pre></div><p>If there’s a <code>#!</code> in <code>test.sh</code>, it will return this:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>$ cat test.sh
</span></span><span><span><span>#! /usr/bin/sh</span>
</span></span><span><span>echo <span>"Hello, World!"</span>
</span></span><span><span>
</span></span><span><span>$ strace -e trace<span>=</span>execve,openat,read,close -f sh -c <span>"./test.sh"</span>
</span></span><span><span>execve<span>(</span><span>"/usr/bin/sh"</span>, <span>[</span><span>"sh"</span>, <span>"-c"</span>, <span>"./test.sh"</span><span>]</span>, 0x7ffd51f86418 /* <span>33</span> vars */<span>)</span> <span>=</span> <span>0</span>
</span></span><span><span><span>(</span>...<span>)</span>
</span></span><span><span>strace: Process <span>2522303</span> attached
</span></span><span><span><span>[</span>pid 2522303<span>]</span> execve<span>(</span><span>"./test.sh"</span>, <span>[</span><span>"./test.sh"</span><span>]</span>, 0x5ec40c994540 /* <span>33</span> vars */<span>)</span> <span>=</span> <span>0</span>
</span></span><span><span><span>(</span>...<span>)</span>
</span></span><span><span><span>[</span>pid 2522303<span>]</span> openat<span>(</span>AT_FDCWD, <span>"./test.sh"</span>, O_RDONLY<span>)</span> <span>=</span> <span>3</span>
</span></span><span><span><span>[</span>pid 2522303<span>]</span> close<span>(</span>3<span>)</span>                  <span>=</span> <span>0</span>
</span></span><span><span><span>[</span>pid 2522303<span>]</span> read<span>(</span>10, <span>"#! /usr/bin/sh\necho \"Hello, Worl"</span>..., 8192<span>)</span> <span>=</span> <span>36</span>
</span></span><span><span>Hello, World!
</span></span><span><span><span>[</span>pid 2522303<span>]</span> read<span>(</span>10, <span>""</span>, 8192<span>)</span>        <span>=</span> <span>0</span>
</span></span><span><span><span>[</span>pid 2522303<span>]</span> +++ exited with <span>0</span> +++
</span></span><span><span><span>(</span>...<span>)</span>
</span></span></code></pre></div><p>If no <code>#!</code> is found:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>$ cat test.sh
</span></span><span><span>echo <span>"Hello, World!"</span>
</span></span><span><span>
</span></span><span><span>$ strace -e trace<span>=</span>execve,openat,read,close -f sh -c <span>"./test.sh"</span>
</span></span><span><span>execve<span>(</span><span>"/usr/bin/sh"</span>, <span>[</span><span>"sh"</span>, <span>"-c"</span>, <span>"./test.sh"</span><span>]</span>, 0x7ffd4de7e798 /* <span>33</span> vars */<span>)</span> <span>=</span> <span>0</span>
</span></span><span><span><span>(</span>...<span>)</span>
</span></span><span><span>strace: Process <span>2524967</span> attached
</span></span><span><span><span>[</span>pid 2524967<span>]</span> execve<span>(</span><span>"./test.sh"</span>, <span>[</span><span>"./test.sh"</span><span>]</span>, 0x651ce522f540 /* <span>33</span> vars */<span>)</span> <span>=</span> -1 ENOEXEC <span>(</span>Exec format error<span>)</span>
</span></span><span><span><span>[</span>pid 2524967<span>]</span> openat<span>(</span>AT_FDCWD, <span>"./test.sh"</span>, O_RDONLY|O_NOCTTY<span>)</span> <span>=</span> <span>3</span>
</span></span><span><span><span>[</span>pid 2524967<span>]</span> read<span>(</span>3, <span>"echo \"Hello, World!\"\n"</span>, 128<span>)</span> <span>=</span> <span>21</span>
</span></span><span><span><span>[</span>pid 2524967<span>]</span> close<span>(</span>3<span>)</span>                  <span>=</span> <span>0</span>
</span></span><span><span><span>[</span>pid 2524967<span>]</span> execve<span>(</span><span>"/bin/sh"</span>, <span>[</span><span>"/bin/sh"</span>, <span>"./test.sh"</span><span>]</span>, 0x651ce522f540 /* <span>33</span> vars */<span>)</span> <span>=</span> <span>0</span>
</span></span><span><span><span>(</span>...<span>)</span>
</span></span><span><span><span>[</span>pid 2524967<span>]</span> openat<span>(</span>AT_FDCWD, <span>"./test.sh"</span>, O_RDONLY<span>)</span> <span>=</span> <span>3</span>
</span></span><span><span><span>[</span>pid 2524967<span>]</span> close<span>(</span>3<span>)</span>                  <span>=</span> <span>0</span>
</span></span><span><span><span>[</span>pid 2524967<span>]</span> read<span>(</span>10, <span>"echo \"Hello, World!\"\n"</span>, 8192<span>)</span> <span>=</span> <span>21</span>
</span></span><span><span>Hello, World!
</span></span><span><span><span>[</span>pid 2524967<span>]</span> read<span>(</span>10, <span>""</span>, 8192<span>)</span>        <span>=</span> <span>0</span>
</span></span><span><span><span>[</span>pid 2524967<span>]</span> +++ exited with <span>0</span> +++
</span></span><span><span><span>(</span>...<span>)</span>
</span></span></code></pre></div><p>After filtering the output, it’s clear that in the first case (with shebang), it’s doing the initial <code>execve</code>for the shell instance we’re creating, then another <code>execve</code> for <code>test.sh</code> and do all the process we described before. In the second case (no shebang), the child process’s <code>execve</code> on <code>./test.sh</code> fails with <code>ENOEXEC</code>. The parent shell (<code>sh -c</code>) catches this error. It then likely uses <code>openat</code> and <code>read</code> to examine the file. Detecting it’s likely a shell script, it then explicitly executes <code>/bin/sh ./test.sh</code> via a <em>second</em> <code>execve</code> call.</p>
<h2 id="bonus-dealing-with-permissions">Bonus: Dealing with Permissions</h2>
<p>We found out that the kernel runs the scripts through its own <code>execve</code> syscall assuming it contains a <code>#!</code> <em>and</em> has execute permission set. But where is that permission checked?</p>
<p>If we try to invoke a script that doesn’t have execute permissions, we’ll get this:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>$ ./test.sh
</span></span><span><span>zsh: permission denied: ./test.sh
</span></span></code></pre></div><p>But it doesn’t give off too much. However, if we <code>strace</code> it again:</p>
<div><pre tabindex="0"><code data-lang="shell"><span><span>$ strace ./test.sh
</span></span><span><span>execve<span>(</span><span>"./test.sh"</span>, <span>[</span><span>"./test.sh"</span><span>]</span>, 0x7ffd2b4a52d0 /* <span>33</span> vars */<span>)</span> <span>=</span> -1 EACCES <span>(</span>Permission denied<span>)</span>
</span></span><span><span>strace: exec: Permission denied
</span></span><span><span>+++ exited with <span>1</span> +++
</span></span></code></pre></div><p>It returns the error code and description from the syscall: <code>EACCES (Permission denied)</code>. <strong>Error codes are always a good start point</strong>. Searching for <code>EACCES</code> in <code>fs/exec.c</code> leads us to the check within the <code>do_open_execat</code> function</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>if</span> (<span>WARN_ON_ONCE</span>(<span>!</span><span>S_ISREG</span>(<span>file_inode</span>(file)<span>-&gt;</span>i_mode)) <span>||</span>
</span></span><span><span>	<span>path_noexec</span>(<span>&amp;</span>file<span>-&gt;</span>f_path))
</span></span><span><span>	<span>return</span> <span>ERR_PTR</span>(<span>-</span>EACCES);
</span></span></code></pre></div><p>Tracing the call stack back from <code>do_open_execat</code>, we find it’s called during the setup of the <code>bprm</code> structure within <code>do_execveat_common</code>, the entrypoint to the <code>execve</code> syscall:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span>bprm <span>=</span> <span>alloc_bprm</span>(fd, filename, flags);
</span></span><span><span><span>if</span> (<span>IS_ERR</span>(bprm)) {
</span></span><span><span>	retval <span>=</span> <span>PTR_ERR</span>(bprm);
</span></span><span><span>	<span>goto</span> out_ret;
</span></span><span><span>}
</span></span></code></pre></div><p>Now, understanding how <code>path_noexec</code> checks the <em>execute</em> permission in the file involves a lot of other stuff like understanding how the kernel deals with the filesystem. But that’ll be a future post.</p>
<h3 id="edit">EDIT</h3>
<ul>
<li>Switched the usage of <code>where</code> for <code>which</code>, since it’s a zsh-only command. These add to my list of confusing commands just like <code>adduser</code> and <code>useradd</code>. Thanks <strong>u/pihkal</strong>.</li>
<li>I corrected calling ELF the “traditional binary format” of linux to “regular binary format”. Although ELF has been the regular format for so many years, calling it traditional was maybe not correct. Thanks <strong>/u/Admqui</strong>. Some material on ELF and the old <code>a.out</code> format:
<ul>
<li><a href="https://web.archive.org/web/20040713171954/http://www.ibiblio.org/pub/historic-linux/distributions/slackware/3.9/docs/ELF-HOWTO">The Linux ELF HOWTO (1996)</a></li>
<li><a href="https://lwn.net/Articles/631631/">How programs get run: ELF binaries (2015)</a></li>
</ul>
</li>
</ul>
<p>Join the discussion on <a href="https://www.reddit.com/r/programming/comments/1jukuv3/demystifying_the_shebang_kernel_adventures/">Reddit</a>.</p>

      </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Big Book of R (220 pts)]]></title>
            <link>https://www.bigbookofr.com/</link>
            <guid>43646219</guid>
            <pubDate>Thu, 10 Apr 2025 17:34:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bigbookofr.com/">https://www.bigbookofr.com/</a>, See on <a href="https://news.ycombinator.com/item?id=43646219">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="quarto-document-content" data-number="1">
<h2 data-number="1"> Your last-ever bookmark</h2><p><img src="https://www.bigbookofr.com/cover1.png" title="Big Book of R"></p>
<p>Thanks for stopping by. If you’re like me, you can’t help but bookmark every R-related programming book you find in the hopes that one day you, or someone you know, might find it useful.</p>
<p>Hopefully this is the only bookmark you’ll need in future ;).</p>
<p>When I initially released this collection in late August 2020, it contained about 100 books that I’d been collecting over the previous two years. Since then I’ve found a few more and there have been contributions from many people. The collection now stands at over 400 free, open-sourced books.</p>
<p>Most of these are free. Some are paid but usually quite affordable.</p>
<section id="searching" data-number="1.1">
<h2 data-number="1.1" data-anchor-id="searching"> Searching</h2>
<p>If there’s something specific you’re looking for, use the menu or search using the magnifying glass icon at the top of the screen.</p>
</section>
<section id="supporting" data-number="1.2">
<h2 data-number="1.2" data-anchor-id="supporting"> Supporting</h2>
<p>If you’d like to show your appreciation with a donation you’re most welcome to do so here:</p>
<p><a href="https://ko-fi.com/I2I1K189U" target="_blank"><img height="36" src="https://storage.ko-fi.com/cdn/kofi3.png?v=3" alt="Buy Me a Coffee at ko-fi.com"></a></p>
</section>
<section id="contributing" data-number="1.3">
<h2 data-number="1.3" data-anchor-id="contributing"> Contributing</h2>
<p>Please feel free to contribute paid and free books - see <a href="https://github.com/oscarbaruffa/BigBookofR">GitHub.</a> or submit via the <a href="https://docs.google.com/forms/d/e/1FAIpQLScLSaVzr8dh1dOE2M338QAhfvKfDkydB7QZGMrVWI-VudhQbA/viewform">Google Form</a>.</p>
</section>
<section id="big-thanks-to-fathom-data" data-number="1.4">
<h2 data-number="1.4" data-anchor-id="big-thanks-to-fathom-data"> Big thanks to Fathom Data</h2>
<p>I want to give a special thanks to the folks at <a href="https://www.fathomdata.dev/">Fathom Data</a> who converted the site from bookdown to Quarto. I’ve worked with Fathom Data for many years and can highly recommend their services!</p>
</section>
<section id="license" data-number="1.5">
<h2 data-number="1.5" data-anchor-id="license"> License</h2>
<p>This website/book is free to use, and is licensed under the <a href="https://creativecommons.org/licenses/by-nc-nd/3.0/us/" target="&quot;blank">Creative Commons Attribution-NonCommercial-NoDerivs 3.0 License</a>.</p>
</section>
<section id="live-stats" data-number="1.6">
<h2 data-number="1.6" data-anchor-id="live-stats"> Live stats</h2>
<p>Who says you can’t have privacy AND transparency??</p>
<p>I’m guessing that if you’re interested in R then you also like data ;).</p>
<p>Note that “unique” visits will be higher in Plausible than you’d find with Google Analytics. Because Plausible is GDPR compliant and privacy focused, each user is identified for only 1 day. If someone visits the site 2 days in a row, that’s counted as 2 “uniques” whereas in Google Analytics it would only be counted as 1 unique visitor because of the presence of persistent cookies and such that allows for tracking of users.</p>
<p>From now on, you can view the <strong><a href="https://plausible.io/bigbookofr.com?ref=BigBoofofR">LIVE site stats right here</a></strong>.</p>
</section>
<section id="about-me" data-number="1.7">
<h2 data-number="1.7" data-anchor-id="about-me"> About me</h2>
<p>I’m Oscar. If you like this book, feel free to say “Hi!” on <a href="https://fosstodon.org/@OscarBaruffa">Mastodon</a> or <a href="https://www.linkedin.com/in/oscarbaruffa/">LinkedIn</a>.</p>
<p>If you want to stay in the loop on other data-related products I create, or major updates to this book, sign up to my <a href="https://oscarbaruffa.com/newsletter?utm_source=BigBookofR_index&amp;utm_content=Link">newsletter</a>.</p>


</section>
</section><p>Created and maintained by <a href="https://oscarbaruffa.com/" target="_blank">Oscar Baruffa</a>. <br>



Keen to support the site? You're most welcome to <a href="https://ko-fi.com/I2I1K189U" target="_blank"><img height="36" src="https://storage.ko-fi.com/cdn/kofi3.png?v=3" alt="Buy Me a Coffee at ko-fi.com"></a> </p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Garfield Minus Garfield (581 pts)]]></title>
            <link>https://garfieldminusgarfield.net</link>
            <guid>43646095</guid>
            <pubDate>Thu, 10 Apr 2025 17:21:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://garfieldminusgarfield.net">https://garfieldminusgarfield.net</a>, See on <a href="https://news.ycombinator.com/item?id=43646095">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[SDL2 for macOS 9 “rough draft” (119 pts)]]></title>
            <link>https://macintoshgarden.org/apps/sdl2-macos-9-rough-draft</link>
            <guid>43645183</guid>
            <pubDate>Thu, 10 Apr 2025 15:54:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://macintoshgarden.org/apps/sdl2-macos-9-rough-draft">https://macintoshgarden.org/apps/sdl2-macos-9-rough-draft</a>, See on <a href="https://news.ycombinator.com/item?id=43645183">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="paper">
							<p><span>This page is a wiki. Please <a href="https://macintoshgarden.org/user/login">login</a> or <a href="https://macintoshgarden.org/user/register">create an account</a> to begin editing.</span></p>									

<p>This is a "rough draft" of SDL2 for MacOS 9, using CodeWarrior Pro 6 and 7.  Enough was done to get it building in CW, and the start of a "macosclassic" video driver was created.  It DOES seem to basically work, but much still needs to be done.  Event handling is just enough to handling Command-Q, there is no audio, etc etc etc.</p>
<p>----</p>
<p><b>Dev notes</b>: Getting just SDL2 itself building, did take a lot of effort, but it was mostly "mechanical", dealing with the foibles of CodeWarrior, creating project files from scratch, things it couldn't handle, "simple" things like headers missing that are standard on more modern systems, etc.  The first step was doing that with all "dummy" drivers.  Was a bit shocked I got even that far.  The results did absolutely NOTHING in the test programs.  With a dummy video driver, they don't even try to set up textures, etc.  </p>
<p>The key missing part was a Classic MacOS "video" driver, which also includes event handling.  I determined it was not possible to "port" the SDL1 driver due to too many changes in paradigms of SDL itself.  Once I'd sketched a new one out, and got it hooked into the proper places, the debug output showed the test programs actually working.  I then started adding basic MacOS implementations. This effort is in src/video/macosclassic.  (I used the QNX driver as a skeleton as it was the smallest and easier to understand.)</p>
<p><strong>Compatibility</strong><br>
	Architecture: 68k	PPC</p><p>MacOS 9 PPC, MacOS 7.6 M68k, using CodeWarrior 6 and 7 Pro.</p>
			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why Tap a Wheel of Cheese? (178 pts)]]></title>
            <link>https://www.cheeseprofessor.com/blog/cheese-wheel-tapping</link>
            <guid>43644970</guid>
            <pubDate>Thu, 10 Apr 2025 15:35:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cheeseprofessor.com/blog/cheese-wheel-tapping">https://www.cheeseprofessor.com/blog/cheese-wheel-tapping</a>, See on <a href="https://news.ycombinator.com/item?id=43644970">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-nc-base="header" data-controller="AncillaryLayout">
          

          <main>
            
              <section data-content-field="main-content">
                <article id="post-67db627dd26bc85960ec6e58" data-item-id="67db627dd26bc85960ec6e58">

    
      
    

    <div data-layout-label="Post Body" data-type="item" data-updated-on="1742430985836" id="item-67db627dd26bc85960ec6e58"><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1742430987491_2867">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg" data-image="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg" data-image-dimensions="2000x1500" data-image-focal-point="0.5,0.5" alt="" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg" width="2000" height="1500" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/47068e8c-a296-4cd9-900e-82471d52c105/Renato+Giudici+demonstrates+his+skill+photo+credit+Kristine+Jannuzzi.jpg?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
          
          <figcaption>
            <p>Renato Giudici demonstrates his skill photo credit Kristine Jannuzzi</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="2" id="block-d8dd6648bed1d15ba862">

<p>Behind the approximately 4 million wheels of Parmigiano Reggiano produced annually, there is a tiny team of 24 battitori responsible for ensuring the quality of each one. Armed with a small metal hammer, these specialized “drummers” tap every wheel after the minimum aging period of 12 months, and within 6-7 seconds they can detect if there are any defects, based purely on the sounds they hear.</p>




















  
  



</div><div data-block-type="2" id="block-yui_3_17_2_1_1742430987491_4520">

<p>
  <h2>Shadowing the Battitori</h2>
</p>




















  
  



</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1742430987491_9226">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg" data-image="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg" data-image-dimensions="1500x2000" data-image-focal-point="0.5,0.5" alt="Author Kristine Jannuzzi with Alessandro Stocchi and Renato Giudici" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg" width="1500" height="2000" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f92641c-1416-4d52-93cb-6210e7658e5c/Author+Kristine+Jannuzzi+with+Alessandro+Stocchi+and+Renato+Giudici.jpg?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
          
          <figcaption>
            <p>Author Kristine Jannuzzi with Alessandro Stocchi and Renato Giudici</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="2" id="block-yui_3_17_2_1_1742430987491_10348">
  <p>I had the privilege of spending the morning with two of these maestros on the job in Emilia-Romagna: Alessandro Stocchi, a dynamic 37-year-old native of Reggio Emilia who began training to become a battitore in 2014, and his mentor, Renato Giudici, who at 81 years old, embodies a lifetime of passion for Parmigiano Reggiano.&nbsp;Renato is a former cheesemaker who made Parmigiano Reggiano for many years, and rather than retire, he chose to become a guardian of the King of Cheeses as a <em>battitore.</em></p><p>There’s no course to learn the niche skills and nuances of this trade; Alessandro accompanied and apprenticed with Renato and other experts for about 3 years, learning through firsthand experience how to assess each wheel.</p><p>“The particularity of this profession to me is that it’s like it was 200 years ago, and it’s a skill that’s handed down from generation to generation. You go around with the most expert, most experienced battitori, and you watch and listen to them, and slowly they start to give you the hammer. You try with them next to you, piano piano, and gradually, you begin to do more on your own,” explained Stocchi. “It’s a big responsibility, you have to be really capable of doing it, you can’t damage the cheese.”</p>
</div><div data-block-type="2" id="block-yui_3_17_2_1_1742430987491_11526">

<p>
  <h2>How Parmigiano Reggiano is Evaluated</h2>
</p>




















  
  



</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1742430987491_12606">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg" data-image="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg" data-image-dimensions="2000x1500" data-image-focal-point="0.5,0.5" alt="Alessandro Stocchi explains the grading system" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg" width="2000" height="1500" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/1f071018-9c6d-4711-a2a9-2197ed3675ab/Alessandro+Stocchi+explains+the+grading+system+photo+credit+Kristine+Jannuzzi.jpg?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
          
          <figcaption>
            <p>Alessandro Stocchi explains the grading system photo credit Kristine Jannuzzi</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="2" id="block-yui_3_17_2_1_1742430987491_13707">
  <p>Renato showed me the ideal setup, with a wheel of Parmigiano Reggiano flat on a stool underneath the one that is being evaluated, so there is no extraneous noise. If the sound is homogeneous throughout the tapping, there are no defects.</p><p>“We hit all of the surfaces of the cheese, and from the sound of the hammer against the surface we can imagine in our mind an Xray of the wheel and how it is internally. For a perfect wheel with no defects, the paste is completely compact, no empty space. If there are structural defects, such as little fissures or cavities, we can hear that the sound of the hammer is different,” explained Stocchi.</p>
</div><div data-block-type="2" id="block-yui_3_17_2_1_1742430987491_14982">

<p>
  <h2>Parmigiano Reggiano Categories</h2>
</p>




















  
  



</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1742430987491_16522">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg" data-image="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg" data-image-dimensions="2000x1500" data-image-focal-point="0.5,0.5" alt="A cheese wheel with double parallel lines" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg" width="2000" height="1500" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/28d79f5d-2ea5-4c4e-9303-e34cd253f5b9/A+cheese+wheel+with+double+parallel+lines+photo+credit+Kristine+Jannuzzi.jpg?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
          
          <figcaption>
            <p>A cheese wheel with double parallel lines photo credit Kristine Jannuzzi</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="2" id="block-yui_3_17_2_1_1742430987491_17674">
  <ul data-rte-list="default"><li><p> Top quality, suitable for longer aging</p></li><li><p> Lower quality, best consumed young</p></li><li><p> Significant defects, not labeled Parmigiano Reggiano</p></li></ul><p>There are three different categories to which the wheels are assigned. The first is perfect, or with negligible defects, and these wheels receive the fire-branded Parmigiano Reggiano mark. The second category with minor defects is still marked Parmigiano Reggiano, but the rind is engraved with parallel lines to indicate to the consumer that this is not the highest level, and probably best consumed young. And the third category is for wheels with more significant flaws, and the rind and all identifying marks are removed, so the cheese is sold as generic table cheese.</p>
</div><div data-test="image-block-inline-outer-wrapper" data-block-type="5" id="block-yui_3_17_2_1_1742430987491_20574">

      

      
        <figure>
          
        
        

        
          
            
          <div data-animation-role="image">
            <p><img data-stretch="false" data-src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg" data-image="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg" data-image-dimensions="2000x1500" data-image-focal-point="0.5,0.5" alt="Renato Giudici taps a wheel" data-load="false" elementtiming="system-image-block" src="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg" width="2000" height="1500" sizes="(max-width: 640px) 100vw, (max-width: 767px) 100vw, 100vw" onload="this.classList.add(&quot;loaded&quot;)" srcset="https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg?format=100w 100w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg?format=300w 300w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg?format=500w 500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg?format=750w 750w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg?format=1000w 1000w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg?format=1500w 1500w, https://images.squarespace-cdn.com/content/v1/5eb43938f468c330e7d8d665/09731e54-168d-4805-978c-4754ccbcd395/Renato+Giudici+taps+a+wheel+photo+credit+Kristine+Jannuzzi.jpg?format=2500w 2500w" loading="lazy" decoding="async" data-loader="sqs">

            </p>
          </div>
        
          
        

        
          
          <figcaption>
            <p>Renato Giudici taps a wheel photo credit Kristine Jannuzzi</p>
          </figcaption>
        
      
        </figure>
      

    </div><div data-block-type="2" id="block-yui_3_17_2_1_1742430987491_19128">
  <p>“Sometimes when I do events and find a defect while I’m tapping a wheel, people who are watching turn their noses up. But to me it’s a beautiful thing that there are defects, and I’m not just saying it because if there aren’t any, I lose my job,” says Stocchi, laughing. “But the fact that there are defects indicates even more the artisanal quality of our product—we work with raw milk, without preservatives, each year there are many variations. Anyone who works with something in nature knows that not everything always goes how we would want or expect. I always say the day when we have 100% perfect Parmigiano Reggiano, we’d have to ask ourselves some questions, because it’s not an industrial product, so it’s normal that sometimes there are flaws.”</p><p>The number of wheels with defects remains low; in recent years, approximately 10% fell into the second category, and only about 1.5% were classified as third category.</p><p>“To do this job requires great passion, respect, and humility. My elder colleagues tell me you never stop learning, even after 50 years of doing it,” recounted Stocchi. “The day you think you’ve learned everything is the day you’ll start making errors.”</p>
</div></div>

    

    

    

  </article>





  
              </section>
            
          </main>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Isaac Asimov describes how AI will liberate humans and their creativity (1992) (155 pts)]]></title>
            <link>https://www.openculture.com/2025/04/isaac-asimov-describes-how-ai-will-liberate-humans-their-creativity.html</link>
            <guid>43644179</guid>
            <pubDate>Thu, 10 Apr 2025 14:30:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.openculture.com/2025/04/isaac-asimov-describes-how-ai-will-liberate-humans-their-creativity.html">https://www.openculture.com/2025/04/isaac-asimov-describes-how-ai-will-liberate-humans-their-creativity.html</a>, See on <a href="https://news.ycombinator.com/item?id=43644179">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<div>
<p><span><iframe title="YouTube video player" type="text/html" width="640" height="505" src="//www.youtube.com/embed/gGib6vIuVds?wmode=transparent&amp;fs=1&amp;hl=en&amp;showsearch=0&amp;rel=0&amp;theme=dark" frameborder="0" allowfullscreen="" loading="lazy"></iframe></span>
	</p>
</div>

<p>Arti­fi­cial intel­li­gence may be one of the major top­ics of our his­tor­i­cal moment, but it can be sur­pris­ing­ly tricky to define. In <a href="https://youtu.be/gGib6vIuVds">the more than 30-year-old inter­view clip above</a>, Isaac Asi­mov describes arti­fi­cial intel­li­gence as “a phrase that we use for any device that does things which, in the past, we have asso­ci­at­ed only with human intel­li­gence.” At one time, not so very long before, “only human beings could alpha­bet­ize cards”; in the machines that could even then do it in a frac­tion of a sec­ond, “you’ve got an exam­ple of arti­fi­cial intel­li­gence.” Not that humans were ever espe­cial­ly good at card alpha­bet­i­za­tion, nor at arith­metic: “the cheap­est com­put­er in the world can mul­ti­ply and divide more accu­rate­ly than we can.”</p>
<p>You could see arti­fi­cial intel­li­gence as a kind of fron­tier, then, which moves for­ward as com­put­er­ized machines take over the tasks humans pre­vi­ous­ly had to do them­selves. “Every indus­try, the gov­ern­ment itself, tax-col­lect­ing agen­cies, air­planes: every­thing depends on com­put­ers. We have per­son­al com­put­ers in the home, and they are con­stant­ly get­ting bet­ter, cheap­er, more ver­sa­tile, capa­ble of doing more things, so that we can look into the future, when, for the first time, human­i­ty in gen­er­al will be freed from all kinds of work that’s real­ly an insult to the human brain.” Such work “requires no great thought, no great cre­ativ­i­ty. Leave all that to the com­put­er, and we can leave to our­selves those things that com­put­ers can’t do.”</p>


<p>This inter­view was shot for <a href="https://www.youtube.com/watch?v=V4Ux83nJC0U"><em>Isaac Asi­mov’s Visions of the Future</em></a>, a tele­vi­sion doc­u­men­tary that aired in 1992, the last year of its sub­jec­t’s life. One won­ders what Asi­mov would make of the world of 2025, and whether he’d still see arti­fi­cial and nat­ur­al intel­li­gence as com­ple­men­tary, rather than in com­pe­ti­tion. “They work togeth­er,” he argues. “Each sup­plies the lack of the oth­er. And in coop­er­a­tion, they can advance far more rapid­ly than either could by itself.” But as a sci­ence-fic­tion nov­el­ist, he could hard­ly fail to acknowl­edge that tech­no­log­i­cal progress does­n’t come easy: “Will there be dif­fi­cul­ties? Undoubt­ed­ly. Will there be things that we won’t like? Undoubt­ed­ly. But we’ve got to think about it now, so as to be pre­pared for pos­si­ble unpleas­ant­ness and try to guard against it before it’s too late.”</p>
<p>These are fair points, though it’s what comes next that most stands out to the twen­ty-first-cen­tu­ry mind. “It’s like in the old days, when the auto­mo­bile was invent­ed,” Asi­mov says. “It would’ve been so much bet­ter if we had built our cities with the auto­mo­bile in mind, instead of build­ing cities for a pre-auto­mo­bile age and find­ing we can hard­ly find any place to put the auto­mo­biles or allow them to dri­ve.” Yet the cities we most enjoy today aren’t the new metrop­o­lis­es built or great­ly expand­ed in the car-ori­ent­ed decades after the Sec­ond World War, but pre­cise­ly those old ones whose streets were built to the seem­ing­ly obso­lete scale of human beings on foot. Per­haps, upon reflec­tion, we’d do best by future gen­er­a­tions to keep as many ele­ments of the pre-AI world around as we pos­si­bly can.</p>
<p><strong>Relat­ed Con­tent:</strong></p>
<p><a href="https://www.openculture.com/2024/02/isaac-asimov-predicts-the-future-in-1982.html">Isaac Asi­mov Pre­dicts the Future in 1982: Com­put­ers Will Be “at the Cen­ter of Every­thing;” Robots Will Take Human Jobs</a></p>
<p><a href="https://www.openculture.com/2024/12/arthur-c-clarke-predicts-the-rise-of-artificial-intelligence-questions-what-will-happen-to-humanity-1978.html">Sci-Fi Writer Arthur C. Clarke Pre­dict­ed the Rise of Arti­fi­cial Intel­li­gence &amp; the Exis­ten­tial Ques­tions We Would Need to Answer (1978)</a></p>
<p><a href="https://www.openculture.com/2015/11/stephen-hawking-wonders-whether-capitalism-or-artificial-intelligence-will-doom-the-human-race.html">Stephen Hawk­ing Won­ders Whether Cap­i­tal­ism or Arti­fi­cial Intel­li­gence Will Doom the Human Race</a></p>
<p><a href="https://www.openculture.com/2019/04/9-science-fiction-authors-predict-the-future.html">9 Sci­ence-Fic­tion Authors Pre­dict the Future: How Jules Verne, Isaac Asi­mov, William Gib­son, Philip K. Dick &amp; More Imag­ined the World Ahead</a></p>
<p><a href="https://www.openculture.com/2023/02/noam-chomsky-on-chatgpt.html">Noam Chom­sky on Chat­G­PT: It’s “Basi­cal­ly High-Tech Pla­gia­rism” and “a Way of Avoid­ing Learn­ing”</a></p>
<p><em>Based in Seoul,&nbsp;</em><em><a href="http://blog.colinmarshall.org/">Col­in</a></em><em><a href="http://blog.colinmarshall.org/">&nbsp;M</a></em><em><a href="http://blog.colinmarshall.org/">a</a></em><em><a href="http://blog.colinmarshall.org/">rshall</a>&nbsp;writes and broad­cas</em><em>ts on cities, lan­guage, and cul­ture. His projects include the Sub­stack newslet­ter</em>&nbsp;<a href="https://colinmarshall.substack.com/">Books on Cities</a><em>&nbsp;and the book&nbsp;</em>The State­less City: a Walk through 21st-Cen­tu­ry Los Ange­les.&nbsp;<em>Fol­low him on the social net­work for­mer­ly known as Twit­ter at&nbsp;<a href="https://twitter.com/#%21/colinmarshall" rel="nofollow">@colinm</a></em><em><a href="https://twitter.com/#%21/colinmarshall" rel="nofollow">a</a></em><em><a href="https://twitter.com/#%21/colinmarshall" rel="nofollow">rshall</a>.</em></p>
<br>		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[.localhost Domains (212 pts)]]></title>
            <link>https://inclouds.space/localhost-domains</link>
            <guid>43644043</guid>
            <pubDate>Thu, 10 Apr 2025 14:19:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://inclouds.space/localhost-domains">https://inclouds.space/localhost-domains</a>, See on <a href="https://news.ycombinator.com/item?id=43644043">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
<p>I’ve found a way to configure private, custom domains for web-apps I have running on my computer. So instead of having to remember and type “localhost:4333”, I can simply navigate to “appname.localhost”. I love it! </p><p>Here’s how the system works:</p><ol><li><p>Each app is set up as a <a href="https://en.wikipedia.org/wiki/Launchd" title="">launchd</a> daemon listening on a unique port. <a href="https://gist.github.com/charlesetc/af42b15d3e5e3a64c1aeddaa54b8f1fd" title="">Here’s an example</a> plist.</p></li><li><p>I configure <a href="https://claude.ai/share/d62b8bdb-622b-4e97-b614-06b6f16ff3e5" title="">/etc/hosts</a> to redirect traffic to these domains to 127.0.0.1 instead.</p></li><li><p>I then run and configure <a href="https://caddyserver.com/docs/" title="">Caddy</a> to redirect traffic from 127.0.0.1 to the right port for the domain.</p></li></ol><p>So, if I’m running an app on port 5050, I will have a corresponding entry in /etc/host:</p><pre><code>127.0.0.1 inclouds.localhost</code></pre><p>and a section in my Caddyfile like this:</p><pre><code>inclouds.localhost {</code></pre><pre><code>    reverse_proxy localhost:5050</code></pre><pre><code>    tls internal</code></pre><pre><code>    encode gzip zstd</code></pre><pre><code>}</code></pre><pre><code><br></code></pre><p>This is working well but I’d really like to see this process simplified. How cool would it be to install or uninstall apps to .localhost domains with a single command, instead of manually editing three files? But that’s a project for another day. </p><p>Thanks for reading!</p><p>Update: <a href="https://bsky.app/profile/arquipelago.org" title="">cristóbal</a> came up with <a href="https://github.com/tobyshooters/localhost" title="">a command</a> using dnsmasq that makes this even better!</p>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Arroyo (YC W23) has been acquired by Cloudflare (103 pts)]]></title>
            <link>https://www.arroyo.dev/blog/arroyo-is-joining-cloudflare</link>
            <guid>43643968</guid>
            <pubDate>Thu, 10 Apr 2025 14:12:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.arroyo.dev/blog/arroyo-is-joining-cloudflare">https://www.arroyo.dev/blog/arroyo-is-joining-cloudflare</a>, See on <a href="https://news.ycombinator.com/item?id=43643968">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main"><div><h2>Blog</h2><p>Updates from the Arroyo team</p></div><div><div><div><p><time>April 10, 2025</time></p><p>Arroyo has been acquired by Cloudflare to bring serverless SQL stream processing to the Cloudflare Developer Platfrorm, integrated with Queues, Workers, and R2. The Arroyo Engine will remain open-source and self-hostable.</p><div><p><a href="https://www.linkedin.com/in/wylde/"><img alt="Micah Wylde" loading="lazy" width="53" height="53" decoding="async" data-nimg="1" srcset="https://www.arroyo.dev/cdn-cgi/image/width=64,quality=90/_next/static/media/micah.042df2ff.jpeg 1x, https://www.arroyo.dev/cdn-cgi/image/width=128,quality=90/_next/static/media/micah.042df2ff.jpeg 2x" src="https://www.arroyo.dev/cdn-cgi/image/width=128,quality=90/_next/static/media/micah.042df2ff.jpeg"></a></p><div><a href="https://www.linkedin.com/in/wylde/"><p>Micah Wylde</p></a><p>CEO of Arroyo</p></div></div></div><p><img alt="" loading="lazy" width="778" height="437.625" decoding="async" data-nimg="1" srcset="https://www.arroyo.dev/cdn-cgi/image/width=828,quality=90/posts/arroyo-cloudflare/arroyo-cloudflare.webp 1x, https://www.arroyo.dev/cdn-cgi/image/width=1920,quality=90/posts/arroyo-cloudflare/arroyo-cloudflare.webp 2x" src="https://www.arroyo.dev/cdn-cgi/image/width=1920,quality=90/posts/arroyo-cloudflare/arroyo-cloudflare.webp"></p></div><article></article></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Usability Improvements in GCC 15 (226 pts)]]></title>
            <link>https://developers.redhat.com/articles/2025/04/10/6-usability-improvements-gcc-15</link>
            <guid>43643886</guid>
            <pubDate>Thu, 10 Apr 2025 14:03:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://developers.redhat.com/articles/2025/04/10/6-usability-improvements-gcc-15">https://developers.redhat.com/articles/2025/04/10/6-usability-improvements-gcc-15</a>, See on <a href="https://news.ycombinator.com/item?id=43643886">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
<p>I work at Red Hat on <a href="https://gcc.gnu.org/">GCC, the GNU Compiler Collection</a>. I spent most of the past year working on how GCC emits diagnostics (errors and warnings) in the hope of making it easier to use. Let's take a look at 6 improvements to look forward to in the upcoming GCC 15.</p><h2>1. Prettier execution paths</h2><p>I added a <a href="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10">static analyzer to GCC in GCC 10</a> that prints visualizations of predicted paths of execution through the user's code, demonstrating each problem it predicts.</p><p>Here's an example that shows some of the improvements I've made to this in GCC 15:</p><pre><code>infinite-loop-linked-list.c: In function ‘while_loop_missing_next’:
infinite-loop-linked-list.c:30:10: warning: infinite loop [CWE-835] [-Wanalyzer-infinite-loop]
   30 |   while (n)
      |          ^
  ‘while_loop_missing_next’: events 1-3
   30 |   while (n)
      |          ^
      |          |
      |          (1) ⚠️  infinite loop here
      |          (2) when ‘n’ is non-NULL: always following ‘true’ branch... ─&gt;─┐
      |                                                                         │
      |                                                                         │
      |┌────────────────────────────────────────────────────────────────────────┘
   31 |│    {
   32 |│      sum += n-&gt;val;
      |│             ~~~~~~
      |│              |
      |└─────────────&gt;(3) ...to here
  ‘while_loop_missing_next’: event 4
   32 |       sum += n-&gt;val;
      |       ~~~~^~~~~~~~~
      |           |
      |           (4) looping back... ─&gt;─┐
      |                                  │
  ‘while_loop_missing_next’: event 5
      |                                  │
      |┌─────────────────────────────────┘
   30 |│  while (n)
      |│         ^
      |│         |
      |└────────&gt;(5) ...to here
	</code></pre><p>I've added a warning emoji (⚠️) to the event in the path where the problem occurs (event 1 in the above), and I've added "ASCII art" to show control flow, such as the lines connecting events 2 and 3, and those connecting events 4 and 5 (compare with the <a href="https://developers.redhat.com/articles/2024/04/03/improvements-static-analysis-gcc-14-compiler#solving_the_halting_problem_">GCC 14 output seen here</a>).</p><p>Another example of an execution path can be seen in this new <a href="https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html"><code>-fanalyzer</code></a> warning <a href="https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html#index-Wanalyzer-undefined-behavior-ptrdiff"><code>-Wanalyzer-undefined-behavior-ptrdiff</code></a>, which warns about pointer subtractions involving different chunks of memory:</p><pre><code>demo.c: In function ‘test_invalid_calc_of_array_size’:
demo.c:9:20: warning: undefined behavior when subtracting pointers [CWE-469] [-Wanalyzer-undefined-behavior-ptrdiff]
    9 |   return &amp;sentinel - arr;
      |                    ^
  events 1-2
    │
    │    3 | int arr[42];
    │      |     ~~~
    │      |     |
    │      |     (2) underlying object for right-hand side of subtraction created here
    │    4 | int sentinel;
    │      |     ^~~~~~~~
    │      |     |
    │      |     (1) underlying object for left-hand side of subtraction created here
    │
    └──&gt; ‘test_invalid_calc_of_array_size’: event 3
           │
           │    9 |   return &amp;sentinel - arr;
           │      |                    ^
           │      |                    |
           │      |                    (3) ⚠️  subtraction of pointers has undefined behavior if they do not point into the same array object
           │
    </code></pre><p>There's a line on the left-hand side that visualizes the stack depth to highlight calls and returns. &nbsp;As of GCC 15 this now uses unicode box-drawing characters (where the locale supports this), and for purely intraprocedual cases like the &nbsp;<a href="https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html#index-Wanalyzer-infinite-loop"><code>-Wanalyzer-infinite-loop</code></a> example above, we now omit it altogether, which saves some visual "noise."</p><h2>2. A new look for C++ template errors</h2><p>Compiler errors involving C++ templates are notoriously difficult to read.</p><p>Consider this invalid C++ code:</p><pre><code>struct widget {};
void draw (widget &amp;);

struct diagram {};
void draw (diagram &amp;);

template &lt;class W&gt;
concept drawable = requires(W w) { w.draw (); };

template &lt;drawable T&gt;
void draw(T);

int main ()
{
  draw (widget ());
}</code></pre><p>Attempting to <a href="https://godbolt.org/z/5GqYnqd6E">compile it with GCC 14</a> with <code>-fconcepts -fconcepts-diagnostics-depth=2</code> gives 34 lines of output, which is relatively simple as far as these go, and even this can be hard to decipher. I'll post it here for reference, but I confess that my eyes tend to glaze over when I try to read it:</p><pre><code>&lt;source&gt;: In function 'int main()':
&lt;source&gt;:15:8: error: no matching function for call to 'draw(widget)'
   15 |   draw (widget ());
      |   ~~~~~^~~~~~~~~~~
&lt;source&gt;:2:6: note: candidate: 'void draw(widget&amp;)' (near match)
    2 | void draw (widget &amp;);
      |      ^~~~
&lt;source&gt;:2:6: note:   conversion of argument 1 would be ill-formed:
&lt;source&gt;:15:9: error: cannot bind non-const lvalue reference of type 'widget&amp;' to an rvalue of type 'widget'
   15 |   draw (widget ());
      |         ^~~~~~~~~
&lt;source&gt;:5:6: note: candidate: 'void draw(diagram&amp;)'
    5 | void draw (diagram &amp;);
      |      ^~~~
&lt;source&gt;:5:12: note:   no known conversion for argument 1 from 'widget' to 'diagram&amp;'
    5 | void draw (diagram &amp;);
      |            ^~~~~~~~~
&lt;source&gt;:11:6: note: candidate: 'template&lt;class T&gt;  requires  drawable&lt;T&gt; void draw(T)'
   11 | void draw(T);
      |      ^~~~
&lt;source&gt;:11:6: note:   template argument deduction/substitution failed:
&lt;source&gt;:11:6: note: constraints not satisfied
&lt;source&gt;: In substitution of 'template&lt;class T&gt;  requires  drawable&lt;T&gt; void draw(T) [with T = widget]':
&lt;source&gt;:15:8:   required from here
   15 |   draw (widget ());
      |   ~~~~~^~~~~~~~~~~
&lt;source&gt;:8:9:   required for the satisfaction of 'drawable&lt;T&gt;' [with T = widget]
&lt;source&gt;:8:20:   in requirements with 'W w' [with W = widget]
&lt;source&gt;:8:43: note: the required expression 'w.draw()' is invalid, because
    8 | concept drawable = requires(W w) { w.draw (); };
      |                                    ~~~~~~~^~
&lt;source&gt;:8:38: error: 'struct widget' has no member named 'draw'
    8 | concept drawable = requires(W w) { w.draw (); };
      |                                    ~~^~~~</code></pre><p>One of the issues is that there is a hierarchical structure to these messages, but we're printing them as a "flat" list, which obscures the meaning.</p><p>I've been experimenting with a new way of presenting this information, taking inspiration from <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2429r0.pdf">Sy Brand's excellent "Concepts Error Messages for Humans" paper</a>. It's not ready to turn on by default in GCC for all C++ users, but it's available in GCC 15 through a command-line option for people who want to try it out: <code>-fdiagnostics-set-output=text:experimental-nesting=yes</code></p><p>Here's the example we just saw, adding the <code>-fdiagnostics-set-output=text:experimental-nesting=yes</code> "cheat code":</p><pre><code>demo.cc: In function ‘int main()’:
demo.cc:19:8: error: no matching function for call to ‘draw(widget)’
   19 |   draw (widget ());
      |   ~~~~~^~~~~~~~~~~
  • there are 3 candidates
    • candidate 1: ‘void draw(widget&amp;)’ (near match)
      demo.cc:6:6:
          6 | void draw (widget &amp;);
            |      ^~~~
      • conversion of argument 1 would be ill-formed:
      • error: cannot bind non-const lvalue reference of type ‘widget&amp;’ to an rvalue of type ‘widget’
        demo.cc:19:9:
           19 |   draw (widget ());
              |         ^~~~~~~~~
    • candidate 2: ‘void draw(diagram&amp;)’
      demo.cc:9:6:
          9 | void draw (diagram &amp;);
            |      ^~~~
      • no known conversion for argument 1 from ‘widget’ to ‘diagram&amp;’
        demo.cc:9:12:
            9 | void draw (diagram &amp;);
              |            ^~~~~~~~~
    • candidate 3: ‘template&lt;class T&gt;  requires  drawable&lt;T&gt; void draw(T)’
      demo.cc:15:6:
         15 | void draw(T);
            |      ^~~~
      • template argument deduction/substitution failed:
        • constraints not satisfied
          • demo.cc: In substitution of ‘template&lt;class T&gt;  requires  drawable&lt;T&gt; void draw(T) [with T = widget]’:
          • required from here
            demo.cc:19:8:   
               19 |   draw (widget ());
                  |   ~~~~~^~~~~~~~~~~
          • required for the satisfaction of ‘drawable&lt;T&gt;’ [with T = widget]
            demo.cc:12:9:   
               12 | concept drawable = requires(W w) { w.draw (); };
                  |         ^~~~~~~~
          • in requirements with ‘W w’ [with W = widget]
            demo.cc:12:20:   
               12 | concept drawable = requires(W w) { w.draw (); };
                  |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
          • the required expression ‘w.draw()’ is invalid, because
            demo.cc:12:43:
               12 | concept drawable = requires(W w) { w.draw (); };
                  |                                    ~~~~~~~^~
            • error: ‘struct widget’ has no member named ‘draw’
              demo.cc:12:38:
                 12 | concept drawable = requires(W w) { w.draw (); };
                    |                                    ~~^~~~
</code></pre><p>This presentation of the errors uses indentation and nested bullet points to show the logical structure of what the compiler is doing, eliminates redundant "visual noise" where it can, and clarifies the wording to state clearly that the compiler tried 3 different candidates for the function call, and spells out why each candidate was unsuitable.&nbsp;</p><p>I've tried turning this on for my day-to-day C++ work and it feels like a huge improvement. I hope we'll be able to turn it on by default in GCC 16; you can try it yourself <a href="https://godbolt.org/z/381oT3bxj">here</a>.</p><h2>3. Machine-readable diagnostics</h2><p><a href="https://gcc.gnu.org/wiki/SARIF">SARIF</a> is a file format intended for storing the results of static analysis tools in a machine-readable, interchangeable format; as such, it's a great fit for compiler diagnostics. I added support in GCC 13 for writing out GCC's diagnostics in SARIF form, but it was an all-or-nothing deal: you could choose either GCC's classic text output on stderr, or SARIF, but not both.&nbsp;</p><p>For GCC 15, I've reworked the insides of how we handle diagnostics so that there can be multiple "output sinks," and added a new command-line option <a href="https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-add-output"><code>-fdiagnostics-add-output=ARGS</code></a> for adding new sinks. For example, using <a href="https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-add-output"><code>-fdiagnostics-add-output=sarif</code></a> will get you diagnostics emitted both as text on stderr and in SARIF form to a file.&nbsp;</p><p>Various sub-options are available; for example, <a href="https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-add-output"><code>-fdiagnostics-add-output=sarif:version=2.2-prerelease</code></a> will select SARIF 2.2 output for that sink (though given that we're still working on the SARIF 2.2 specification, it uses an unofficial draft of the specification, and is subject to change).</p><p>I've also improved the SARIF that GCC emits. The output now captures all locations and labeled source ranges associated with a diagnostic. For example, for:</p><pre><code>PATH/missing-semicolon.c: In function 'missing_semicolon':
PATH/missing-semicolon.c:9:12: error: expected ';' before '}' token
    9 |   return 42
      |            ^
      |            ;
   10 | }
      | ~
</code></pre><p>the GCC SARIF output now captures the secondary location (that of the trailing close brace), as well as that of the missing semicolon. Similarly, for:</p><pre><code>bad-binary-ops.c: In function ‘bad_plus’:
bad-binary-ops.c:64:23: error: invalid operands to binary + (have ‘S’ {aka ‘struct s’} and ‘T’ {aka ‘struct t’})
  64 |   return callee_4a () + callee_4b ();
     |          ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~
     |          |              |
     |          |              T {aka struct t}
     |          S {aka struct s}
</code></pre><p>the SARIF output captures those underlined ranges and their labels.&nbsp;</p><p>GCC's SARIF output now captures the command-line arguments (<a href="https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/sarif-v2.1.0-errata01-os-complete.html#_Toc141790819">§3.20.2</a>), timestamps for the start and end of compilation (<a href="https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/sarif-v2.1.0-errata01-os-complete.html#_Toc141790824">§§3.20.7-8</a>), and the working directory (<a href="https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/sarif-v2.1.0-errata01-os-complete.html#_Toc141790836">§3.20.19</a>). It also now sets the <code>roles</code> property for SARIF <code>artifact</code> objects (<a href="https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/sarif-v2.1.0-errata01-os-complete.html#_Toc141790867">§3.24.6</a>), captures any embedded URLs in the text of messages (<a href="https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/sarif-v2.1.0-errata01-os-complete.html#_Toc141790717">§3.11.6</a>). For diagnostics relating to header files, the SARIF output now captures the chain of <code>#include</code> directives that led to the diagnostic's location (using SARIF <code>locationRelationship</code> objects, <a href="https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/sarif-v2.1.0-errata01-os-complete.html#_Toc141790978">§3.34</a>).&nbsp;</p><p>As well as improving the SARIF that GCC produces, I've added a tool to GCC 15 for <strong>consuming</strong> SARIF: <code>sarif-replay</code>. This is a simple command-line tool for viewing <code>.sarif</code> files, showing ("replaying") any diagnostics found in the <code>.sarif</code> files in text form as if they were GCC diagnostics, with support for details such as quoting source code, underlined ranges, fix-it hints, and diagnostic paths.&nbsp;</p><p>For example, here's a replay of a <code>.sarif</code> file emitted by GCC's <code>-fanalyzer</code> static analysis option:</p><pre><code>$ sarif-replay signal-warning.sarif
In function 'custom_logger':
signal.c:13:3: warning: call to ‘fprintf’ from within signal handler [-Wanalyzer-unsafe-call-within-signal-handler]
   13 |   fprintf(stderr, "LOG: %s", msg);
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  'main': events 1-2
    │
    │   21 | int main(int argc, const char *argv)
    │      |     ^~~~
    │      |     |
    │      |     (1) entry to ‘main’
    │......
    │   25 |   signal(SIGINT, handler);
    │      |   ~~~~~~~~~~~~~~~~~~~~~~~
    │      |   |
    │      |   (2) registering ‘handler’ as signal handler
    │
  event 3
    │
    │GNU C17:
    │ (3): later on, when the signal is delivered to the process
    │
    └──&gt; 'handler': events 4-5
           │
           │   16 | static void handler(int signum)
           │      |             ^~~~~~~
           │      |             |
           │      |             (4) entry to ‘handler’
           │   17 | {
           │   18 |   custom_logger("got signal");
           │      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
           │      |   |
           │      |   (5) calling ‘custom_logger’ from ‘handler’
           │
           └──&gt; 'custom_logger': events 6-7
                  │
                  │   11 | void custom_logger(const char *msg)
                  │      |      ^~~~~~~~~~~~~
                  │      |      |
                  │      |      (6) entry to ‘custom_logger’
                  │   12 | {
                  │   13 |   fprintf(stderr, "LOG: %s", msg);
                  │      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  │      |   |
                  │      |   (7) call to ‘fprintf’ from within signal handler
                  │</code></pre><h2>4. An easier transition to C23</h2><p>When compiling C code, GCC 14 and earlier defaulted to <a href="https://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#index-std-1"><code>-std=gnu17</code></a> (i.e., the "C17" version of the C standard, plus extensions). GCC 15 now defaults to <a href="https://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#index-std-1"><code>-std=gnu23</code></a> (based on C23), so if your build system isn't specifying which C version to use, you might run into <a href="https://gcc.gnu.org/gcc-15/porting_to.html#c23">C17 versus C23 incompatibilities</a>.</p><p>I attempted to rebuild a large subset of Fedora with GCC 15 and thus defaulting to C23 to try to <a href="https://fedoraproject.org/wiki/F42-gcc-15-mass-prebuild">shake out problems</a> that would arise, and in doing so found various diagnostics that needed improving. For example, <code>bool</code>, <code>true</code>, and <code>false</code> are keywords in C23, so I've tweaked the error message that occurs on <a href="https://godbolt.org/z/7W8fMT9zd">old code</a> such as:</p><pre><code>typedef int bool;</code></pre><p>so that you immediately know it's a C23 compatibility problem:</p><pre><code>&lt;source&gt;:1:13: error: 'bool' cannot be defined via 'typedef'
    1 | typedef int bool;
      |             ^~~~
&lt;source&gt;:1:13: note: 'bool' is a keyword with '-std=c23' onwards</code></pre><p>Similarly, C17 and C23 treat function declarations without parameters such as <code>int foo(); </code>differently. In C23, it's equivalent to <code>int foo(void);</code> whereas, in earlier versions of C, such a declaration plays fast and loose with the type system—essentially meaning, "we don't know how many parameters this function takes or their types; let's hope your code is correct!". In my tests, this led to lots of errors on old code, such as in <a href="https://godbolt.org/z/11hzWYEeK">this example</a>:</p><pre><code>#include &lt;signal.h&gt;

void test()
{
  void (*handler)();
  handler = signal(SIGQUIT, SIG_IGN);
}</code></pre><p>So I've clarified these error messages so that they tell you the types of the functions (or function pointers) and show you where the pertinent <code>typedef</code> is:</p><pre><code>&lt;source&gt;: In function 'test':
&lt;source&gt;:6:11: error: assignment to 'void (*)(void)' from incompatible pointer type '__sighandler_t' {aka 'void (*)(int)'} [-Wincompatible-pointer-types]
    6 |   handler = signal(SIGQUIT, SIG_IGN);
      |           ^
In file included from &lt;source&gt;:1:
/usr/include/signal.h:72:16: note: '__sighandler_t' declared here
   72 | typedef void (*__sighandler_t) (int);
      |                ^~~~~~~~~~~~~~
</code></pre><p>Similarly, I've clarified the C front end's error messages for bad call sites:</p><pre><code>struct p { int (*bar)(); };
    
void baz() {
    struct p q;
    q.bar(1);
}</code></pre><pre><code>t.c: In function 'baz':
t.c:7:5: error: too many arguments to function 'q.bar'; expected 0, have 1
    7 |     q.bar(1);
      |     ^     ~
t.c:2:15: note: declared here
    2 |         int (*bar)();
      |               ^~~
   </code></pre><p>showing the expected parameter count versus the actual argument count, underlining the first extraneous argument at the call site, and showing the pertinent field declaration of the callback.</p><h2>5. A revamped color scheme</h2><p>GCC will use color when emitting its text messages on stderr at a suitably modern terminal, using a few colors that seem to work well in a number of different terminal themes—but the exact rules for choosing which color to use for each aspect of the output have been rather arbitrary.</p><p>For GCC 15, I've gone through C and C++'s errors, looking for places where two different things in the source are being contrasted, such as type mismatches. These diagnostics now use color to visually highlight and distinguish the differences.&nbsp;</p><p>For example, this error (Figure 1) shows a bogus attempt to use a binary <code>+</code> operator due to the two operands being structs (via <code>typedef</code>s <code>S</code> and <code>T</code>), rather than numeric types.</p><figure role="group">
<article>
  
      
        <div>  <picture><source srcset="https://developers.redhat.com/sites/default/files/screenshot_from_2025-04-01_11-29-19.png.webp" type="image/webp"><img loading="lazy" src="https://developers.redhat.com/sites/default/files/screenshot_from_2025-04-01_11-29-19.png" width="710" height="210" alt="screenshot of a C type error from GCC 15 showing color usage" typeof="foaf:Image"></picture>

</div>
  </article>

<figcaption>Figure 1: A new color scheme for errors in GCC 15.</figcaption>
</figure>
<p>The two significant things here are the types, so GCC 15 uses two colors to consistently highlight the different types: in the message itself, in the quoted source, and the labels. Here, the left-hand type (<code>typedef struct s S;</code>) is shown throughout in green and the right-hand type (<code>typedef struct t T;</code>) in dark blue. I hope this approach better ties together the message's text with the source code and makes such errors a little easier to figure out.</p><h2>6. libgdiagnostics</h2><p>Figure 1 above shows off some of the features that GCC's diagnostics subsystem has: code for colorization, quoting source code, labelling ranges of source, fix-it hints, execution paths, SARIF output, and so on. Previously this code was hidden inside GCC and only usable by GCC itself.&nbsp;</p><p>For GCC 15, I've made this functionality available as a shared library for other projects to use: <a href="https://gcc.gnu.org/wiki/libgdiagnostics">libgdiagnostics</a>. There is a C API, along with C++ and Python bindings. For example, I was able to use the Python bindings to write a <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=8d6de758cca6d16eb930ac1a7008ee54ec5489d9">"linting" script for our testsuite</a>, and "for free" got source quoting, colorization, and fix-it hints. Adding the ability to this script to output as SARIF would be a one-liner, rather than having to write lots of JSON-handling code.</p><h2>Try GCC 15</h2><p>We're still fixing bugs, but we hope that <a href="https://gcc.gnu.org/gcc-14/changes.html">GCC 15</a> will be ready to officially release (as 15.1) sometime later this month. With my "downstream" hat on, we're already using the prerelease (GCC 15.0) within <a href="https://fedoramagazine.org/announcing-fedora-linux-40-beta/">Fedora 42 Beta</a>.</p><p>Finally, you can use the <a href="https://godbolt.org/z/s18GhbdeM">excellent Compiler Explorer site</a> to play with the new compiler. Have fun!</p>

          
                            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Busy Bar (259 pts)]]></title>
            <link>https://busy.bar</link>
            <guid>43643534</guid>
            <pubDate>Thu, 10 Apr 2025 13:23:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://busy.bar">https://busy.bar</a>, See on <a href="https://news.ycombinator.com/item?id=43643534">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="allrecords" data-hook="blocks-collection-content-node" data-tilda-project-id="5980709" data-tilda-page-id="33135376" data-tilda-formskey="72a9d0927061ad9cf29836af25980709" data-tilda-imgoptimoff="yes" data-tilda-lazy="yes" data-tilda-project-lang="EN" data-tilda-root-zone="com" data-tilda-project-headcode="yes" data-tilda-page-headcode="yes" data-tilda-ts="y"> <div data-artboard-recid="944010936" data-artboard-screens="1200,1440,1920" data-artboard-height="800" data-artboard-valign="top" data-artboard-height_vh="90" data-artboard-upscale="grid" data-artboard-ovrflw="visible" data-artboard-height-res-1200="600" data-artboard-height-res-1440="780" id="rec944010936" data-animationappear="off" data-record-type="396" data-screen-min="1200px" data-bg-color="#f7f7f7">         <p data-elem-id="1719222332853" data-elem-type="text" data-field-top-value="1" data-field-left-value="0" data-field-height-value="108" data-field-width-value="770" data-field-axisy-value="center" data-field-axisx-value="center" data-field-container-value="window" data-field-topunits-value="%" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-1200-value="1" data-field-left-res-1200-value="1" data-field-width-res-1200-value="641" data-field-axisy-res-1200-value="center" data-field-container-res-1200-value="window" data-field-top-res-1440-value="5" data-field-left-res-1440-value="0" data-field-width-res-1440-value="644" data-field-axisy-res-1440-value="center"> <h2 field="tn_text_1719222332853"><strong>BUSY Bar</strong> is a productivity multi-tool device with an LED pixel display.<br>Focu﻿s timer with distraction blocking feature on your phone and PC.<br>Fully customizable, open-source, and smart home ready.</h2> </p>         </div> <div data-artboard-recid="905405968" data-artboard-screens="1200,1440,1920,2560" data-artboard-height="100" data-artboard-valign="top" data-artboard-height_vh="10" data-artboard-upscale="grid" data-artboard-ovrflw="visible" data-artboard-height-res-1200="100" data-artboard-height-res-1440="100" id="rec905405968" data-animationappear="off" data-record-type="396" data-screen-min="1200px">   <div data-elem-id="1737563694242" data-elem-type="text" data-field-top-value="-16" data-field-left-value="1438" data-field-height-value="54" data-field-width-value="378" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-1200-value="-4" data-field-left-res-1200-value="658" data-field-width-res-1200-value="203" data-field-axisy-res-1200-value="top" data-field-axisx-res-1200-value="left" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="-8" data-field-left-res-1440-value="841" data-field-width-res-1440-value="214" data-field-top-res-1920-value="-16" data-field-left-res-1920-value="1116" data-field-height-res-1920-value="81" data-field-width-res-1920-value="318"> <p>Connect to Google Home and Apple Home via t﻿he Matter protocol</p> </div>   <div data-elem-id="1720525375792" data-elem-type="text" data-field-top-value="-15" data-field-left-value="1991" data-field-height-value="54" data-field-width-value="395" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-1200-value="-4" data-field-left-res-1200-value="966" data-field-width-res-1200-value="212" data-field-axisy-res-1200-value="top" data-field-axisx-res-1200-value="left" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="-9" data-field-left-res-1440-value="1174" data-field-width-res-1440-value="249" data-field-top-res-1920-value="-15" data-field-left-res-1920-value="1570" data-field-height-res-1920-value="81" data-field-width-res-1920-value="320"> <p>Open HTTP API, open-source SDK, Python / Go / JavaScript libs, MQTT, no vendor lock-in</p> </div>    <div data-elem-id="1720525334455" data-elem-type="text" data-field-top-value="-16" data-field-left-value="852" data-field-height-value="54" data-field-width-value="390" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-1200-value="-4" data-field-left-res-1200-value="351" data-field-width-res-1200-value="230" data-field-axisy-res-1200-value="top" data-field-axisx-res-1200-value="left" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="-8" data-field-left-res-1440-value="459" data-field-width-res-1440-value="260" data-field-top-res-1920-value="-16" data-field-left-res-1920-value="629" data-field-height-res-1920-value="81" data-field-width-res-1920-value="313"> <p>App Library, connection to 3rd-party software, in﻿tegrations with calendar events and calls</p> </div>  <div data-elem-id="1719342365342" data-elem-type="text" data-field-top-value="-16" data-field-left-value="267" data-field-height-value="54" data-field-width-value="390" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-1200-value="-4" data-field-left-res-1200-value="73" data-field-width-res-1200-value="191" data-field-axisy-res-1200-value="top" data-field-axisx-res-1200-value="left" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="-8" data-field-left-res-1440-value="117" data-field-width-res-1440-value="243" data-field-top-res-1920-value="-16" data-field-left-res-1920-value="154" data-field-height-res-1920-value="81" data-field-width-res-1920-value="306"> <p>Distraction blocker, custom BUSY message, focus timer, cross-platform sync</p> </div>   </div> <div data-artboard-recid="944012111" data-artboard-screens="320,420,640,1920" data-artboard-height="1000" data-artboard-valign="top" data-artboard-height_vh="100" data-artboard-upscale="window" data-artboard-height-res-320="590" data-artboard-height-res-420="710" data-artboard-height_vh-res-420="100" data-artboard-upscale-res-420="window" data-artboard-height-res-640="890" id="rec944012111" data-animationappear="off" data-record-type="396" data-screen-max="1200px" data-bg-color="#eaeaeb">          <p data-elem-id="1719222332853" data-elem-type="text" data-field-top-value="524" data-field-left-value="641" data-field-height-value="132" data-field-width-value="641" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="153" data-field-left-res-320-value="-376" data-field-width-res-320-value="305" data-field-top-res-420-value="-329" data-field-left-res-420-value="18" data-field-width-res-420-value="395" data-field-axisy-res-420-value="bottom" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="372" data-field-left-res-640-value="22" data-field-height-res-640-value="81" data-field-width-res-640-value="597" data-field-container-res-640-value="grid"> <h2 field="tn_text_1719222332853"><strong>BUSY Bar</strong> is&nbsp;a&nbsp;productivity multi-tool device with an&nbsp;LED pixel display. Focu﻿s timer with distraction blocking feature on&nbsp;your phone and&nbsp;PC. Fully customizable, open-source, and smart home ready.</h2> </p>               <p data-elem-id="1723455307198" data-elem-type="text" data-field-top-value="-115" data-field-left-value="1013" data-field-height-value="132" data-field-width-value="641" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="-264" data-field-left-res-320-value="15" data-field-height-res-320-value="144" data-field-width-res-320-value="305" data-field-axisy-res-320-value="bottom" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="331" data-field-left-res-420-value="682" data-field-width-res-420-value="388" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid"> <h2 field="tn_text_1723455307198"><strong>Busy Bar</strong> is&nbsp;a&nbsp;productivity multi-tool device with an&nbsp;LED pixel screen. Displays a&nbsp;personal busy message. Built-in Pomodoro timer and Apps. Fully customizable, open-source, and hacker-friendly.</h2> </p>  </div>    <div data-artboard-recid="944014051" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1351" data-artboard-valign="center" data-artboard-upscale="grid" data-artboard-height-res-320="600" data-artboard-height-res-420="819" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="926" data-artboard-height-res-1200="780" data-artboard-height-res-1440="930" data-artboard-height-res-1720="1100" id="rec944014051" data-animationappear="off" data-record-type="396">     <div data-elem-id="1722514063649" data-elem-type="text" data-field-top-value="1032" data-field-left-value="171" data-field-height-value="29" data-field-width-value="465" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="366" data-field-left-res-320-value="747" data-field-height-res-320-value="41" data-field-width-res-320-value="230" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="458" data-field-left-res-420-value="573" data-field-height-res-420-value="21" data-field-width-res-420-value="351" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-topunits-res-420-value="px" data-field-leftunits-res-420-value="px" data-field-heightunits-res-420-value="px" data-field-widthunits-res-420-value="px" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="499" data-field-left-res-640-value="47" data-field-height-res-640-value="18" data-field-width-res-640-value="213" data-field-textfit-res-640-value="fixedsize" data-field-widthmode-res-640-value="fixed" data-field-heightmode-res-640-value="fixed" data-field-top-res-1200-value="619" data-field-left-res-1200-value="80" data-field-height-res-1200-value="19" data-field-width-res-1200-value="226" data-field-container-res-1200-value="grid" data-field-heightunits-res-1200-value="px" data-field-widthunits-res-1200-value="px" data-field-textfit-res-1200-value="autowidth" data-field-widthmode-res-1200-value="hug" data-field-heightmode-res-1200-value="hug" data-field-top-res-1440-value="705" data-field-left-res-1440-value="130" data-field-height-res-1440-value="22" data-field-width-res-1440-value="351" data-field-heightunits-res-1440-value="px" data-field-textfit-res-1440-value="fixedsize" data-field-widthmode-res-1440-value="fixed" data-field-heightmode-res-1440-value="fixed" data-field-top-res-1720-value="809" data-field-left-res-1720-value="149" data-field-height-res-1720-value="26" data-field-width-res-1720-value="440" id="molecule-173923455350610910" data-fields="top,left" data-group-id="173923455350610910" data-group-type-value="physical" data-group-top-value="1032" data-group-left-value="154" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="row" data-group-flexalignitems="flex-start" data-group-widthmode="fixed" data-group-heightmode="hug" data-group-height-value="29" data-group-width-value="482" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="366" data-group-left-res-320-value="732" data-group-height-res-320-value="41" data-group-width-res-320-value="250" data-group-widthmode-res-320="fixed" data-group-top-res-420-value="458" data-group-left-res-420-value="557" data-group-height-res-420-value="21" data-group-width-res-420-value="482" data-group-top-res-640-value="499" data-group-left-res-640-value="32" data-group-height-res-640-value="18" data-group-top-res-1200-value="619" data-group-left-res-1200-value="65" data-group-height-res-1200-value="19" data-group-width-res-1200-value="287" data-group-widthmode-res-1200="fixed" data-group-top-res-1440-value="705" data-group-left-res-1440-value="114" data-group-height-res-1440-value="22" data-group-width-res-1440-value="337" data-group-widthmode-res-1440="fixed" data-group-top-res-1720-value="809" data-group-left-res-1720-value="133" data-group-height-res-1720-value="26" data-group-width-res-1720-value="431" data-group-widthmode-res-1720="fixed"> <p>Notification blocker on iPhone / Android</p> </div> <div data-elem-id="1722857497787" data-elem-type="text" data-field-top-value="1070" data-field-left-value="171" data-field-height-value="29" data-field-width-value="451" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="414" data-field-left-res-320-value="747" data-field-height-res-320-value="40" data-field-width-res-320-value="225" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="484" data-field-left-res-420-value="573" data-field-height-res-420-value="42" data-field-width-res-420-value="204" data-field-container-res-420-value="grid" data-field-top-res-640-value="522" data-field-left-res-640-value="47" data-field-height-res-640-value="18" data-field-width-res-640-value="190" data-field-textfit-res-640-value="fixedsize" data-field-widthmode-res-640-value="fixed" data-field-heightmode-res-640-value="fixed" data-field-top-res-1200-value="642" data-field-left-res-1200-value="80" data-field-height-res-1200-value="19" data-field-width-res-1200-value="177" data-field-container-res-1200-value="grid" data-field-heightunits-res-1200-value="px" data-field-widthunits-res-1200-value="px" data-field-textfit-res-1200-value="autowidth" data-field-widthmode-res-1200-value="hug" data-field-heightmode-res-1200-value="hug" data-field-top-res-1440-value="732" data-field-left-res-1440-value="130" data-field-height-res-1440-value="26" data-field-width-res-1440-value="364" data-field-top-res-1720-value="841" data-field-left-res-1720-value="149" data-field-height-res-1720-value="26" data-field-width-res-1720-value="405" id="molecule-173923455595957980" data-fields="top,left" data-group-id="173923455595957980" data-group-type-value="physical" data-group-top-value="1070" data-group-left-value="154" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="row" data-group-flexalignitems="flex-start" data-group-widthmode="fixed" data-group-heightmode="hug" data-group-height-value="29" data-group-width-value="482" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="414" data-group-left-res-320-value="732" data-group-height-res-320-value="40" data-group-width-res-320-value="249" data-group-widthmode-res-320="fixed" data-group-top-res-420-value="484" data-group-left-res-420-value="557" data-group-height-res-420-value="42" data-group-width-res-420-value="482" data-group-top-res-640-value="522" data-group-left-res-640-value="32" data-group-height-res-640-value="18" data-group-top-res-1200-value="642" data-group-left-res-1200-value="65" data-group-height-res-1200-value="19" data-group-width-res-1200-value="287" data-group-widthmode-res-1200="fixed" data-group-top-res-1440-value="732" data-group-left-res-1440-value="114" data-group-height-res-1440-value="22" data-group-width-res-1440-value="337" data-group-widthmode-res-1440="fixed" data-group-top-res-1720-value="841" data-group-left-res-1720-value="133" data-group-height-res-1720-value="26" data-group-width-res-1720-value="431" data-group-widthmode-res-1720="fixed"> <p>Integration with 3rd-party apps</p> </div> <div data-elem-id="1722857506371" data-elem-type="text" data-field-top-value="1108" data-field-left-value="171" data-field-height-value="29" data-field-width-value="370" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="460" data-field-left-res-320-value="747" data-field-height-res-320-value="40" data-field-width-res-320-value="230" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="510" data-field-left-res-420-value="573" data-field-height-res-420-value="21" data-field-width-res-420-value="217" data-field-container-res-420-value="grid" data-field-top-res-640-value="545" data-field-left-res-640-value="47" data-field-height-res-640-value="18" data-field-width-res-640-value="224" data-field-textfit-res-640-value="fixedsize" data-field-widthmode-res-640-value="fixed" data-field-heightmode-res-640-value="fixed" data-field-top-res-1200-value="665" data-field-left-res-1200-value="80" data-field-height-res-1200-value="19" data-field-width-res-1200-value="186" data-field-heightunits-res-1200-value="px" data-field-widthunits-res-1200-value="px" data-field-textfit-res-1200-value="autowidth" data-field-widthmode-res-1200-value="hug" data-field-heightmode-res-1200-value="hug" data-field-top-res-1440-value="759" data-field-left-res-1440-value="130" data-field-height-res-1440-value="26" data-field-width-res-1440-value="388" data-field-top-res-1720-value="873" data-field-left-res-1720-value="149" data-field-height-res-1720-value="26" data-field-width-res-1720-value="333" id="molecule-173923455700084050" data-fields="top,left" data-group-id="173923455700084050" data-group-type-value="physical" data-group-top-value="1108" data-group-left-value="154" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="row" data-group-flexalignitems="flex-start" data-group-widthmode="fixed" data-group-heightmode="hug" data-group-height-value="29" data-group-width-value="482" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="460" data-group-left-res-320-value="732" data-group-height-res-320-value="40" data-group-width-res-320-value="263" data-group-widthmode-res-320="fixed" data-group-top-res-420-value="510" data-group-left-res-420-value="557" data-group-height-res-420-value="21" data-group-width-res-420-value="482" data-group-top-res-640-value="545" data-group-left-res-640-value="32" data-group-height-res-640-value="18" data-group-top-res-1200-value="665" data-group-left-res-1200-value="65" data-group-height-res-1200-value="19" data-group-width-res-1200-value="287" data-group-widthmode-res-1200="fixed" data-group-top-res-1440-value="759" data-group-left-res-1440-value="114" data-group-height-res-1440-value="22" data-group-width-res-1440-value="337" data-group-widthmode-res-1440="fixed" data-group-top-res-1720-value="873" data-group-left-res-1720-value="133" data-group-height-res-1720-value="26" data-group-width-res-1720-value="431" data-group-widthmode-res-1720="fixed"> <p>Customizable BUSY automations</p> </div>  <div id="molecule-173923519266615910" data-fields="top,left" data-group-id="173923519266615910" data-group-type-value="physical" data-group-top-value="998" data-group-left-value="729" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="column" data-group-flexalignitems="flex-start" data-group-widthmode="fixed" data-group-heightmode="hug" data-group-height-value="164" data-group-width-value="482" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="937" data-group-left-res-320-value="728" data-group-height-res-320-value="132" data-group-top-res-420-value="698" data-group-left-res-420-value="552" data-group-height-res-420-value="115" data-group-width-res-420-value="398" data-group-top-res-640-value="480" data-group-left-res-640-value="352" data-group-height-res-640-value="100" data-group-top-res-1200-value="594" data-group-left-res-1200-value="425" data-group-height-res-1200-value="107" data-group-top-res-1440-value="678" data-group-left-res-1440-value="535" data-group-height-res-1440-value="126" data-group-top-res-1720-value="783" data-group-left-res-1720-value="614" data-group-height-res-1720-value="143" data-group-width-res-1720-value="398" data-group-widthmode-res-1720="fixed"> <div field="tn_text_1739235192714" data-elem-id="1739235192714" data-elem-type="text" data-field-top-value="998" data-field-left-value="746" data-field-height-value="58" data-field-width-value="358" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-top-res-320-value="937" data-field-left-res-320-value="743" data-field-height-res-320-value="42" data-field-width-res-320-value="215" data-field-top-res-420-value="698" data-field-left-res-420-value="568" data-field-height-res-420-value="42" data-field-width-res-420-value="352" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-topunits-res-420-value="px" data-field-leftunits-res-420-value="px" data-field-heightunits-res-420-value="px" data-field-widthunits-res-420-value="px" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="480" data-field-left-res-640-value="367" data-field-height-res-640-value="36" data-field-textfit-res-640-value="fixedsize" data-field-widthmode-res-640-value="fixed" data-field-heightmode-res-640-value="fixed" data-field-top-res-1200-value="594" data-field-left-res-1200-value="440" data-field-height-res-1200-value="38" data-field-width-res-1200-value="232" data-field-container-res-1200-value="grid" data-field-heightunits-res-1200-value="px" data-field-widthunits-res-1200-value="px" data-field-textfit-res-1200-value="fixedsize" data-field-widthmode-res-1200-value="fixed" data-field-heightmode-res-1200-value="fixed" data-field-top-res-1440-value="678" data-field-left-res-1440-value="551" data-field-height-res-1440-value="44" data-field-width-res-1440-value="313" data-field-textfit-res-1440-value="fixedsize" data-field-widthmode-res-1440-value="fixed" data-field-heightmode-res-1440-value="fixed" data-field-top-res-1720-value="783" data-field-left-res-1720-value="630" data-field-height-res-1720-value="53" data-field-width-res-1720-value="313" data-field-heightunits-res-1720-value="px" data-field-textfit-res-1720-value="fixedsize" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed" id="molecule-173923519266695230" data-fields="top,left" data-group-id="173923519266695230" data-group-type-value="physical" data-group-top-value="998" data-group-left-value="729" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="row" data-group-flexalignitems="flex-start" data-group-widthmode="fill" data-group-heightmode="hug" data-group-height-value="58" data-group-width-value="482" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="937" data-group-left-res-320-value="728" data-group-height-res-320-value="42" data-group-width-res-320-value="250" data-group-widthmode-res-320="fixed" data-group-top-res-420-value="698" data-group-left-res-420-value="552" data-group-height-res-420-value="42" data-group-width-res-420-value="482" data-group-top-res-640-value="480" data-group-left-res-640-value="352" data-group-height-res-640-value="36" data-group-top-res-1200-value="594" data-group-left-res-1200-value="425" data-group-height-res-1200-value="38" data-group-width-res-1200-value="272" data-group-widthmode-res-1200="fixed" data-group-top-res-1440-value="678" data-group-left-res-1440-value="535" data-group-height-res-1440-value="44" data-group-width-res-1440-value="341" data-group-widthmode-res-1440="fixed" data-group-top-res-1720-value="783" data-group-left-res-1720-value="614" data-group-height-res-1720-value="53" data-group-width-res-1720-value="395" data-group-widthmode-res-1720="fixed"><p>Display LED status: choose from the </p><u>l</u><p>ibrary or create a custom one</p></div> <div data-elem-id="1739235192799" data-elem-type="text" data-field-top-value="1065" data-field-left-value="746" data-field-height-value="59" data-field-width-value="325" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="fixedsize" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="984" data-field-left-res-320-value="743" data-field-height-res-320-value="40" data-field-width-res-320-value="225" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="745" data-field-left-res-420-value="568" data-field-height-res-420-value="21" data-field-width-res-420-value="311" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="521" data-field-left-res-640-value="367" data-field-height-res-640-value="18" data-field-width-res-640-value="265" data-field-textfit-res-640-value="fixedsize" data-field-widthmode-res-640-value="fixed" data-field-heightmode-res-640-value="fixed" data-field-top-res-1200-value="638" data-field-left-res-1200-value="440" data-field-height-res-1200-value="38" data-field-width-res-1200-value="265" data-field-container-res-1200-value="grid" data-field-heightunits-res-1200-value="px" data-field-widthunits-res-1200-value="px" data-field-textfit-res-1200-value="fixedsize" data-field-widthmode-res-1200-value="fixed" data-field-heightmode-res-1200-value="fixed" data-field-top-res-1440-value="730" data-field-left-res-1440-value="551" data-field-height-res-1440-value="44" data-field-width-res-1440-value="255" data-field-textfit-res-1440-value="fixedsize" data-field-widthmode-res-1440-value="fixed" data-field-heightmode-res-1440-value="fixed" data-field-top-res-1720-value="842" data-field-left-res-1720-value="630" data-field-height-res-1720-value="52" data-field-width-res-1720-value="336" data-field-textfit-res-1720-value="fixedsize" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed" id="molecule-173923519277418130" data-fields="top,left" data-group-id="173923519277418130" data-group-type-value="physical" data-group-top-value="1065" data-group-left-value="729" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="row" data-group-flexalignitems="flex-start" data-group-widthmode="fill" data-group-heightmode="hug" data-group-height-value="59" data-group-width-value="482" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="984" data-group-left-res-320-value="728" data-group-height-res-320-value="40" data-group-width-res-320-value="249" data-group-widthmode-res-320="fixed" data-group-top-res-420-value="745" data-group-left-res-420-value="552" data-group-height-res-420-value="21" data-group-width-res-420-value="482" data-group-top-res-640-value="521" data-group-left-res-640-value="352" data-group-height-res-640-value="18" data-group-width-res-640-value="228" data-group-widthmode-res-640="fixed" data-group-top-res-1200-value="638" data-group-left-res-1200-value="425" data-group-height-res-1200-value="38" data-group-width-res-1200-value="288" data-group-widthmode-res-1200="fixed" data-group-top-res-1440-value="730" data-group-left-res-1440-value="535" data-group-height-res-1440-value="44" data-group-width-res-1440-value="351" data-group-widthmode-res-1440="fixed" data-group-top-res-1720-value="842" data-group-left-res-1720-value="614" data-group-height-res-1720-value="52" data-group-width-res-1720-value="414" data-group-widthmode-res-1720="fixed"> <p>Add a timer for focused work: simple or interval</p> </div> <div data-elem-id="1739235192867" data-elem-type="text" data-field-top-value="1133" data-field-left-value="746" data-field-height-value="29" data-field-width-value="403" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="fixedsize" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="1029" data-field-left-res-320-value="743" data-field-height-res-320-value="40" data-field-width-res-320-value="230" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="771" data-field-left-res-420-value="568" data-field-height-res-420-value="42" data-field-width-res-420-value="309" data-field-top-res-640-value="544" data-field-left-res-640-value="367" data-field-height-res-640-value="36" data-field-width-res-640-value="176" data-field-textfit-res-640-value="fixedsize" data-field-widthmode-res-640-value="fixed" data-field-heightmode-res-640-value="fixed" data-field-top-res-1200-value="682" data-field-left-res-1200-value="440" data-field-height-res-1200-value="19" data-field-width-res-1200-value="267" data-field-heightunits-res-1200-value="px" data-field-widthunits-res-1200-value="px" data-field-textfit-res-1200-value="autowidth" data-field-widthmode-res-1200-value="hug" data-field-heightmode-res-1200-value="hug" data-field-top-res-1440-value="782" data-field-left-res-1440-value="551" data-field-height-res-1440-value="22" data-field-width-res-1440-value="388" data-field-textfit-res-1440-value="fixedsize" data-field-widthmode-res-1440-value="fixed" data-field-heightmode-res-1440-value="fixed" data-field-top-res-1720-value="900" data-field-left-res-1720-value="630" data-field-height-res-1720-value="26" data-field-width-res-1720-value="390" data-field-textfit-res-1720-value="fixedsize" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed" id="molecule-173923519284047020" data-fields="top,left" data-group-id="173923519284047020" data-group-type-value="physical" data-group-top-value="1133" data-group-left-value="729" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="row" data-group-flexalignitems="flex-start" data-group-widthmode="fill" data-group-heightmode="hug" data-group-height-value="29" data-group-width-value="482" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="1029" data-group-left-res-320-value="728" data-group-height-res-320-value="40" data-group-width-res-320-value="263" data-group-widthmode-res-320="fixed" data-group-top-res-420-value="771" data-group-left-res-420-value="552" data-group-height-res-420-value="42" data-group-width-res-420-value="482" data-group-top-res-640-value="544" data-group-left-res-640-value="352" data-group-height-res-640-value="36" data-group-top-res-1200-value="682" data-group-left-res-1200-value="425" data-group-height-res-1200-value="19" data-group-width-res-1200-value="286" data-group-widthmode-res-1200="fixed" data-group-top-res-1440-value="782" data-group-left-res-1440-value="535" data-group-height-res-1440-value="22" data-group-width-res-1440-value="349" data-group-widthmode-res-1440="fixed" data-group-top-res-1720-value="900" data-group-left-res-1720-value="614" data-group-height-res-1720-value="26" data-group-width-res-1720-value="401" data-group-widthmode-res-1720="fixed"> <p>Auto-activation by microphone, camera, or app</p> </div> </div>  <p data-elem-id="1739235193059" data-elem-type="text" data-field-top-value="947" data-field-left-value="729" data-field-height-value="35" data-field-width-value="443" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="261" data-field-left-res-320-value="171" data-field-height-res-320-value="44" data-field-width-res-320-value="125" data-field-top-res-420-value="344" data-field-left-res-420-value="216" data-field-width-res-420-value="172" data-field-container-res-420-value="grid" data-field-top-res-640-value="448" data-field-left-res-640-value="352" data-field-top-res-1200-value="560" data-field-left-res-1200-value="425" data-field-height-res-1200-value="45" data-field-width-res-1200-value="283" data-field-top-res-1440-value="640" data-field-left-res-1440-value="535" data-field-height-res-1440-value="58" data-field-width-res-1440-value="347" data-field-top-res-1720-value="742" data-field-left-res-1720-value="614" data-field-width-res-1720-value="435"> <h3 field="tn_text_1739235193059">Design your own BUSY status message</h3> </p>   <p data-elem-id="1722514020064" data-elem-type="text" data-field-top-value="946" data-field-left-value="154" data-field-height-value="70" data-field-width-value="470" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="261" data-field-left-res-320-value="16" data-field-width-res-320-value="129" data-field-top-res-420-value="344" data-field-left-res-420-value="18" data-field-height-res-420-value="42" data-field-width-res-420-value="168" data-field-container-res-420-value="grid" data-field-top-res-640-value="448" data-field-left-res-640-value="32" data-field-width-res-640-value="248" data-field-top-res-1200-value="560" data-field-left-res-1200-value="65" data-field-height-res-1200-value="68" data-field-width-res-1200-value="271" data-field-top-res-1440-value="642" data-field-left-res-1440-value="114" data-field-width-res-1440-value="345" data-field-top-res-1720-value="738" data-field-left-res-1720-value="133" data-field-width-res-1720-value="391"> <h3 field="tn_text_1722514020064">Pomodoro timer and distraction blocker for deep focus workflow</h3> </p>      <div data-elem-id="1743524725081" data-elem-type="text" data-field-top-value="1051" data-field-left-value="1270" data-field-height-value="42" data-field-width-value="240" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-top-res-320-value="431" data-field-left-res-320-value="33" data-field-width-res-320-value="325" data-field-top-res-420-value="578" data-field-left-res-420-value="38" data-field-width-res-420-value="349" data-field-container-res-420-value="grid" data-field-top-res-640-value="746" data-field-left-res-640-value="198" data-field-height-res-640-value="15" data-field-width-res-640-value="236" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="629" data-field-left-res-1200-value="779" data-field-width-res-1200-value="171" data-field-top-res-1440-value="713" data-field-left-res-1440-value="951" data-field-height-res-1440-value="15" data-field-width-res-1440-value="171" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="831" data-field-left-res-1720-value="1090" data-field-height-res-1720-value="40" data-field-width-res-1720-value="228" data-field-container-res-1720-value="grid" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <p>&gt; Offline API <span>(no internet required)</span></p> </div>  <div data-elem-id="1743524759842" data-elem-type="text" data-field-top-value="1142" data-field-left-value="1270" data-field-height-value="42" data-field-width-value="240" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-top-res-320-value="471" data-field-left-res-320-value="33" data-field-width-res-320-value="325" data-field-top-res-420-value="630" data-field-left-res-420-value="37" data-field-width-res-420-value="326" data-field-container-res-420-value="grid" data-field-top-res-640-value="788" data-field-left-res-640-value="199" data-field-height-res-640-value="15" data-field-width-res-640-value="216" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="687" data-field-left-res-1200-value="780" data-field-width-res-1200-value="157" data-field-top-res-1440-value="774" data-field-left-res-1440-value="951" data-field-height-res-1440-value="15" data-field-width-res-1440-value="171" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="913" data-field-left-res-1720-value="1090" data-field-height-res-1720-value="20" data-field-width-res-1720-value="286" data-field-container-res-1720-value="grid" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <p>&gt; Web interface over USB and Wi-Fi</p> </div> <div data-elem-id="1743524559296" data-elem-type="text" data-field-top-value="940" data-field-left-value="1270" data-field-height-value="56" data-field-width-value="512" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fill" data-field-top-res-320-value="376" data-field-left-res-320-value="33" data-field-width-res-320-value="249" data-field-top-res-420-value="500" data-field-left-res-420-value="38" data-field-width-res-420-value="326" data-field-container-res-420-value="grid" data-field-top-res-640-value="685" data-field-left-res-640-value="198" data-field-height-res-640-value="34" data-field-width-res-640-value="225" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="558" data-field-left-res-1200-value="779" data-field-width-res-1200-value="341" data-field-top-res-1440-value="641" data-field-left-res-1440-value="951" data-field-height-res-1440-value="15" data-field-width-res-1440-value="375" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="738" data-field-left-res-1720-value="1090" data-field-height-res-1720-value="48" data-field-width-res-1720-value="463" data-field-container-res-1720-value="grid" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <p>Developers can integrate BUSY Bar into any system using Open API</p> </div> <div data-elem-id="1722514579043" data-elem-type="text" data-field-top-value="1016" data-field-left-value="1540" data-field-height-value="42" data-field-width-value="240" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-top-res-320-value="491" data-field-left-res-320-value="33" data-field-height-res-320-value="14" data-field-width-res-320-value="236" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="656" data-field-left-res-420-value="37" data-field-height-res-420-value="21" data-field-width-res-420-value="355" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="809" data-field-left-res-640-value="199" data-field-height-res-640-value="15" data-field-width-res-640-value="224" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="607" data-field-left-res-1200-value="969" data-field-width-res-1200-value="174" data-field-top-res-1440-value="690" data-field-left-res-1440-value="1157" data-field-height-res-1440-value="15" data-field-width-res-1440-value="188" data-field-container-res-1440-value="grid" data-field-heightunits-res-1440-value="px" data-field-textfit-res-1440-value="autoheight" data-field-widthmode-res-1440-value="fixed" data-field-top-res-1720-value="799" data-field-left-res-1720-value="1376" data-field-height-res-1720-value="40" data-field-width-res-1720-value="234" data-field-container-res-1720-value="grid" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <p>&gt; Libs for Python/JavaScript/Go</p> </div> <div data-elem-id="1743524822097" data-elem-type="text" data-field-top-value="1107" data-field-left-value="1540" data-field-height-value="42" data-field-width-value="205" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-top-res-320-value="533" data-field-left-res-320-value="33" data-field-height-res-320-value="14" data-field-width-res-320-value="319" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="686" data-field-left-res-420-value="38" data-field-height-res-420-value="21" data-field-width-res-420-value="354" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="851" data-field-left-res-640-value="199" data-field-height-res-640-value="15" data-field-width-res-640-value="238" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="665" data-field-left-res-1200-value="969" data-field-width-res-1200-value="178" data-field-top-res-1440-value="751" data-field-left-res-1440-value="1157" data-field-height-res-1440-value="15" data-field-width-res-1440-value="188" data-field-container-res-1440-value="grid" data-field-heightunits-res-1440-value="px" data-field-textfit-res-1440-value="autoheight" data-field-widthmode-res-1440-value="fixed" data-field-top-res-1720-value="881" data-field-left-res-1720-value="1376" data-field-height-res-1720-value="40" data-field-width-res-1720-value="226" data-field-container-res-1720-value="grid" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <p>&gt; Apps for macOS, iOS and Android</p> </div> <div data-elem-id="1743524810731" data-elem-type="text" data-field-top-value="1072" data-field-left-value="1540" data-field-height-value="21" data-field-width-value="240" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-top-res-320-value="512" data-field-left-res-320-value="33" data-field-height-res-320-value="14" data-field-width-res-320-value="236" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="716" data-field-left-res-420-value="39" data-field-height-res-420-value="21" data-field-width-res-420-value="338" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="830" data-field-left-res-640-value="199" data-field-height-res-640-value="15" data-field-width-res-640-value="207" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="643" data-field-left-res-1200-value="969" data-field-width-res-1200-value="207" data-field-top-res-1440-value="728" data-field-left-res-1440-value="1157" data-field-height-res-1440-value="15" data-field-width-res-1440-value="188" data-field-container-res-1440-value="grid" data-field-heightunits-res-1440-value="px" data-field-textfit-res-1440-value="autoheight" data-field-widthmode-res-1440-value="fixed" data-field-top-res-1720-value="849" data-field-left-res-1720-value="1376" data-field-height-res-1720-value="20" data-field-width-res-1720-value="226" data-field-container-res-1720-value="grid" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <p>&gt; Self-hosted cloud control</p> </div>  <div data-elem-id="1739224559295" data-elem-type="image" data-field-top-value="282" data-field-left-value="300" data-field-height-value="514" data-field-width-value="1320" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1920" data-field-fileheight-value="748" data-field-heightmode-value="hug" data-field-top-res-320-value="97" data-field-left-res-320-value="11" data-field-height-res-320-value="116" data-field-width-res-320-value="298" data-field-top-res-420-value="120" data-field-left-res-420-value="10" data-field-height-res-420-value="156" data-field-width-res-420-value="400" data-field-container-res-420-value="grid" data-field-top-res-640-value="144" data-field-left-res-640-value="38" data-field-height-res-640-value="220" data-field-width-res-640-value="565" data-field-top-res-1200-value="167" data-field-left-res-1200-value="215" data-field-height-res-1200-value="300" data-field-width-res-1200-value="771" data-field-top-res-1440-value="178" data-field-left-res-1440-value="262" data-field-height-res-1440-value="334" data-field-width-res-1440-value="917" data-field-top-res-1720-value="230" data-field-left-res-1720-value="371" data-field-height-res-1720-value="381" data-field-width-res-1720-value="979"> <p><img data-original="img/tild3064-3439-4439-b633-346432393930__bs.jpg" alt="" imgfield="tn_img_1739224559295" src="https://busy.bar/img/tild3064-3439-4439-b633-346432393930__bs.jpg"> </p> </div> </div> <div data-artboard-recid="944015141" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1010" data-artboard-valign="center" data-artboard-height_vh="100" data-artboard-upscale="grid" data-artboard-height-res-320="560" data-artboard-height-res-420="760" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="900" data-artboard-height-res-1200="740" data-artboard-height-res-1440="790" id="rec944015141" data-animationappear="off" data-record-type="396">      <div data-elem-id="1729538564896" data-elem-type="image" data-field-top-value="445" data-field-left-value="111" data-field-height-value="143" data-field-width-value="173" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="528" data-field-fileheight-value="435" data-field-heightmode-value="hug" data-field-top-res-320-value="377" data-field-left-res-320-value="11" data-field-height-res-320-value="58" data-field-width-res-320-value="71" data-field-top-res-420-value="498" data-field-left-res-420-value="18" data-field-height-res-420-value="92" data-field-width-res-420-value="112" data-field-top-res-640-value="621" data-field-left-res-640-value="40" data-field-height-res-640-value="89" data-field-width-res-640-value="108" data-field-top-res-1200-value="337" data-field-left-res-1200-value="41" data-field-height-res-1200-value="101" data-field-width-res-1200-value="123" data-field-top-res-1440-value="348" data-field-left-res-1440-value="40" data-field-height-res-1440-value="121" data-field-width-res-1440-value="147" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="458" data-field-left-res-1720-value="103" data-field-height-res-1720-value="124" data-field-width-res-1720-value="150"> <p><img data-original="img/tild3462-3862-4838-a131-613261623063__icon_instant_activat.png" alt="" imgfield="tn_img_1729538564896" src="https://busy.bar/img/tild3462-3862-4838-a131-613261623063__icon_instant_activat.png"> </p> </div> <div data-elem-id="1729538575126" data-elem-type="image" data-field-top-value="620" data-field-left-value="111" data-field-height-value="143" data-field-width-value="173" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="528" data-field-fileheight-value="435" data-field-heightmode-value="hug" data-field-top-res-320-value="459" data-field-left-res-320-value="10" data-field-height-res-320-value="58" data-field-width-res-320-value="71" data-field-top-res-420-value="609" data-field-left-res-420-value="17" data-field-height-res-420-value="93" data-field-width-res-420-value="113" data-field-container-res-420-value="grid" data-field-top-res-640-value="741" data-field-left-res-640-value="40" data-field-height-res-640-value="89" data-field-width-res-640-value="108" data-field-top-res-1200-value="469" data-field-left-res-1200-value="41" data-field-height-res-1200-value="101" data-field-width-res-1200-value="123" data-field-top-res-1440-value="486" data-field-left-res-1440-value="40" data-field-height-res-1440-value="121" data-field-width-res-1440-value="147" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="610" data-field-left-res-1720-value="105" data-field-height-res-1720-value="124" data-field-width-res-1720-value="150"> <p><img data-original="img/tild3834-3335-4834-b937-633436316135__icon_set_timer.png" alt="" imgfield="tn_img_1729538575126" src="https://busy.bar/img/tild3834-3335-4834-b937-633436316135__icon_set_timer.png"> </p> </div> <p data-elem-id="1728941773068" data-elem-type="text" data-field-top-value="711" data-field-left-value="304" data-field-height-value="62" data-field-width-value="471" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="496" data-field-left-res-320-value="90" data-field-width-res-320-value="221" data-field-top-res-420-value="646" data-field-left-res-420-value="141" data-field-width-res-420-value="267" data-field-top-res-640-value="788" data-field-left-res-640-value="163" data-field-width-res-640-value="347" data-field-top-res-1200-value="528" data-field-left-res-1200-value="178" data-field-height-res-1200-value="51" data-field-width-res-1200-value="383" data-field-top-res-1440-value="565" data-field-left-res-1440-value="201" data-field-height-res-1440-value="52" data-field-width-res-1440-value="385" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="680" data-field-left-res-1720-value="277" data-field-width-res-1720-value="380"> <h3 field="tn_text_1728941773068">Set an optional expiration timer using the scroll wheel to let others know when you’ll be available again.</h3> </p> <p data-elem-id="1728941773073" data-elem-type="text" data-field-top-value="535" data-field-left-value="304" data-field-height-value="62" data-field-width-value="522" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="410" data-field-left-res-320-value="91" data-field-width-res-320-value="218" data-field-top-res-420-value="533" data-field-left-res-420-value="141" data-field-width-res-420-value="238" data-field-top-res-640-value="668" data-field-left-res-640-value="162" data-field-width-res-640-value="396" data-field-top-res-1200-value="396" data-field-left-res-1200-value="177" data-field-height-res-1200-value="51" data-field-width-res-1200-value="430" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="426" data-field-left-res-1440-value="200" data-field-height-res-1440-value="52" data-field-width-res-1440-value="436" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="531" data-field-left-res-1720-value="278" data-field-height-res-1720-value="61" data-field-width-res-1720-value="437"> <h3 field="tn_text_1728941773073">Start and stop the BUSY status manually with a large button. Works comple﻿tely offline, with no extra software required.</h3> </p> <p data-elem-id="1728941773072" data-elem-type="text" data-field-top-value="497" data-field-left-value="304" data-field-height-value="26" data-field-width-value="380" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="392" data-field-left-res-320-value="91" data-field-height-res-320-value="13" data-field-width-res-320-value="136" data-field-container-res-320-value="grid" data-field-top-res-420-value="510" data-field-left-res-420-value="142" data-field-width-res-420-value="180" data-field-axisy-res-420-value="top" data-field-top-res-640-value="640" data-field-left-res-640-value="162" data-field-top-res-1200-value="364" data-field-left-res-1200-value="177" data-field-width-res-1200-value="287" data-field-top-res-1440-value="394" data-field-left-res-1440-value="199" data-field-height-res-1440-value="22" data-field-width-res-1440-value="267" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="494" data-field-left-res-1720-value="278" data-field-width-res-1720-value="348"> <h2 field="tn_text_1728941773072">Instant activation</h2> </p> <p data-elem-id="1739274231142" data-elem-type="text" data-field-top-value="337" data-field-left-value="113" data-field-height-value="76" data-field-width-value="657" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="325" data-field-left-res-320-value="14" data-field-width-res-320-value="290" data-field-top-res-420-value="429" data-field-left-res-420-value="18" data-field-width-res-420-value="384" data-field-axisy-res-420-value="top" data-field-top-res-640-value="536" data-field-left-res-640-value="40" data-field-height-res-640-value="54" data-field-width-res-640-value="469" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="239" data-field-left-res-1200-value="40" data-field-width-res-1200-value="493" data-field-top-res-1440-value="258" data-field-left-res-1440-value="40" data-field-width-res-1440-value="560" data-field-top-res-1720-value="365" data-field-left-res-1720-value="100" data-field-height-res-1720-value="98" data-field-width-res-1720-value="597"> <h2 field="tn_text_1739274231142">Stop others from interrupting your deep focus. The display shows you’re busy and when you’ll be free again.</h2> </p> <p data-elem-id="1728941773067" data-elem-type="text" data-field-top-value="673" data-field-left-value="304" data-field-height-value="26" data-field-width-value="380" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="478" data-field-left-res-320-value="90" data-field-width-res-320-value="136" data-field-top-res-420-value="622" data-field-left-res-420-value="141" data-field-width-res-420-value="180" data-field-axisy-res-420-value="top" data-field-top-res-640-value="759" data-field-left-res-640-value="163" data-field-top-res-1200-value="495" data-field-left-res-1200-value="178" data-field-width-res-1200-value="212" data-field-top-res-1440-value="532" data-field-left-res-1440-value="200" data-field-height-res-1440-value="22" data-field-width-res-1440-value="205" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="642" data-field-left-res-1720-value="277"> <h2 field="tn_text_1728941773067">Set timer</h2> </p> <p data-elem-id="1723037385419" data-elem-type="text" data-field-top-value="236" data-field-left-value="112" data-field-height-value="79" data-field-width-value="585" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="283" data-field-left-res-320-value="14" data-field-height-res-320-value="152" data-field-width-res-320-value="294" data-field-top-res-420-value="378" data-field-left-res-420-value="18" data-field-width-res-420-value="356" data-field-axisy-res-420-value="top" data-field-top-res-640-value="478" data-field-left-res-640-value="40" data-field-height-res-640-value="50" data-field-width-res-640-value="466" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="160" data-field-left-res-1200-value="40" data-field-width-res-1200-value="466" data-field-top-res-1440-value="172" data-field-left-res-1440-value="40" data-field-width-res-1440-value="516" data-field-top-res-1720-value="275" data-field-left-res-1720-value="100" data-field-width-res-1720-value="571"> <h2 field="tn_text_1723037385419">Show you’re BUSY</h2> </p>  </div>  <div data-artboard-recid="944015646" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1190" data-artboard-valign="center" data-artboard-upscale="grid" data-artboard-height-res-320="680" data-artboard-height-res-420="808" data-artboard-height_vh-res-420="100" data-artboard-upscale-res-420="window" data-artboard-height-res-640="920" data-artboard-height-res-1200="820" data-artboard-height-res-1440="920" data-artboard-height-res-1720="1070" id="rec944015646" data-animationappear="off" data-record-type="396">   <div data-elem-id="1723037353616" data-elem-type="image" data-field-top-value="274" data-field-left-value="297" data-field-height-value="1095" data-field-width-value="1790" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1920" data-field-fileheight-value="1175" data-field-heightmode-value="hug" data-field-top-res-320-value="-557" data-field-left-res-320-value="35" data-field-height-res-320-value="358" data-field-width-res-320-value="585" data-field-top-res-420-value="216" data-field-left-res-420-value="-987" data-field-height-res-420-value="442" data-field-width-res-420-value="723" data-field-top-res-640-value="126" data-field-left-res-640-value="-165" data-field-height-res-640-value="503" data-field-width-res-640-value="822" data-field-top-res-1200-value="191" data-field-left-res-1200-value="193" data-field-height-res-1200-value="783" data-field-width-res-1200-value="1280" data-field-top-res-1440-value="204" data-field-left-res-1440-value="149" data-field-height-res-1440-value="939" data-field-width-res-1440-value="1535" data-field-top-res-1720-value="246" data-field-left-res-1720-value="301" data-field-height-res-1720-value="927" data-field-width-res-1720-value="1514"> <p><img data-original="img/tild6365-3563-4631-a532-353164356565__asao_desktop_2.jpg" alt="" imgfield="tn_img_1723037353616" src="https://busy.bar/img/tild6365-3563-4631-a532-353164356565__asao_desktop_2.jpg"> </p> </div> <div data-elem-id="1723051146284" data-elem-type="image" data-field-top-value="162" data-field-left-value="2238" data-field-height-value="122" data-field-width-value="200" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1680" data-field-fileheight-value="1028" data-field-heightmode-value="hug" data-field-top-res-320-value="90" data-field-left-res-320-value="-125" data-field-height-res-320-value="304" data-field-width-res-320-value="496" data-field-top-res-420-value="118" data-field-left-res-420-value="-167" data-field-height-res-420-value="390" data-field-width-res-420-value="638" data-field-container-res-420-value="grid" data-field-height-res-640-value="122" data-field-height-res-1200-value="122" data-field-height-res-1440-value="122" data-field-height-res-1720-value="122"> <p><img data-original="img/tild3837-3261-4631-b335-646365383962__asao_mobile_2.jpg" alt="" imgfield="tn_img_1723051146284" src="https://busy.bar/img/tild3837-3261-4631-b335-646365383962__asao_mobile_2.jpg"> </p> </div>    <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="366" data-field-left-value="111" data-field-height-value="108" data-field-width-value="685" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="349" data-field-left-res-320-value="14" data-field-height-res-320-value="129" data-field-width-res-320-value="284" data-field-top-res-420-value="416" data-field-left-res-420-value="18" data-field-width-res-420-value="352" data-field-top-res-640-value="497" data-field-left-res-640-value="40" data-field-width-res-640-value="562" data-field-top-res-1200-value="245" data-field-left-res-1200-value="40" data-field-width-res-1200-value="507" data-field-top-res-1440-value="275" data-field-left-res-1440-value="42" data-field-width-res-1440-value="564" data-field-top-res-1720-value="321" data-field-width-res-1720-value="571"> <h3 field="tn_text_1723037385412">BUSY Bar integrates with <a href="https://busy.app/">desktop software</a> and automatically activates when you’re on a call, live on stream, recording audio, or when a certain program is active.</h3> </p>   <div data-elem-id="1723037523349" data-elem-type="text" data-field-top-value="578" data-field-left-value="191" data-field-height-value="58" data-field-width-value="465" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="471" data-field-left-res-320-value="63" data-field-height-res-320-value="83" data-field-width-res-320-value="233" data-field-top-res-420-value="553" data-field-left-res-420-value="70" data-field-height-res-420-value="77" data-field-width-res-420-value="321" data-field-top-res-640-value="634" data-field-left-res-640-value="94" data-field-width-res-640-value="412" data-field-top-res-1200-value="397" data-field-left-res-1200-value="92" data-field-height-res-1200-value="51" data-field-width-res-1200-value="459" data-field-top-res-1440-value="443" data-field-left-res-1440-value="102" data-field-height-res-1440-value="51" data-field-width-res-1440-value="396" data-field-top-res-1720-value="493" data-field-left-res-1720-value="191" data-field-height-res-1720-value="48" data-field-width-res-1720-value="450" data-field-container-res-1720-value="grid" data-field-heightunits-res-1720-value="px" data-field-textfit-res-1720-value="autoheight"> <p>When the microphone is activated on your computer, BUSY Bar will automatically display an ON CALL status.</p> </div> <div data-elem-id="1723037779285" data-elem-type="text" data-field-top-value="720" data-field-left-value="191" data-field-height-value="58" data-field-width-value="561" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="539" data-field-left-res-320-value="63" data-field-width-res-320-value="236" data-field-top-res-420-value="637" data-field-left-res-420-value="70" data-field-height-res-420-value="103" data-field-width-res-420-value="330" data-field-top-res-640-value="738" data-field-left-res-640-value="94" data-field-width-res-640-value="473" data-field-top-res-1200-value="511" data-field-left-res-1200-value="92" data-field-height-res-1200-value="51" data-field-width-res-1200-value="480" data-field-top-res-1440-value="561" data-field-left-res-1440-value="102" data-field-height-res-1440-value="51" data-field-width-res-1440-value="473" data-field-top-res-1720-value="615" data-field-width-res-1720-value="492"> <p>When you’re streaming through any software like OBS (Open Broadcaster Software), BUSY Bar will automatically turn on.</p> </div>    <div data-elem-id="1723037822598" data-elem-type="text" data-field-top-value="863" data-field-left-value="191" data-field-height-value="29" data-field-width-value="453" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="622" data-field-left-res-320-value="63" data-field-width-res-320-value="263" data-field-top-res-420-value="740" data-field-left-res-420-value="70" data-field-width-res-420-value="352" data-field-top-res-640-value="841" data-field-left-res-640-value="94" data-field-top-res-1200-value="627" data-field-left-res-1200-value="92" data-field-width-res-1200-value="376" data-field-top-res-1440-value="683" data-field-left-res-1440-value="102" data-field-width-res-1440-value="416" data-field-top-res-1720-value="738"> <p>Supports Windows, macOS, and Linux (coming soon).</p> </div>  <p data-elem-id="1723037385419" data-elem-type="text" data-field-top-value="157" data-field-left-value="499" data-field-height-value="86" data-field-width-value="922" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="6" data-field-height-res-320-value="152" data-field-width-res-320-value="307" data-field-top-res-420-value="60" data-field-left-res-420-value="0" data-field-width-res-420-value="420" data-field-axisy-res-420-value="top" data-field-top-res-640-value="65" data-field-left-res-640-value="-117" data-field-top-res-1200-value="104" data-field-left-res-1200-value="163" data-field-height-res-1200-value="67" data-field-width-res-1200-value="875" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="114" data-field-left-res-1440-value="283" data-field-width-res-1440-value="875" data-field-top-res-1720-value="135" data-field-left-res-1720-value="399"> <h2 field="tn_text_1723037385419">Automatic BUSY status</h2> </p> </div> <div data-artboard-recid="944017726" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="900" data-artboard-valign="center" data-artboard-upscale="grid" data-artboard-ovrflw="visible" data-artboard-height-res-320="520" data-artboard-height-res-420="670" data-artboard-height_vh-res-420="100" data-artboard-upscale-res-420="window" data-artboard-height-res-640="430" data-artboard-height-res-1200="600" data-artboard-height-res-1440="720" data-artboard-height-res-1720="810" id="rec944017726" data-animationappear="off" data-record-type="396" data-screen-min="640px">     <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="170" data-field-left-value="198" data-field-height-value="114" data-field-width-value="670" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="338" data-field-left-res-320-value="15" data-field-width-res-320-value="288" data-field-top-res-420-value="454" data-field-left-res-420-value="15" data-field-width-res-420-value="383" data-field-top-res-640-value="81" data-field-left-res-640-value="40" data-field-width-res-640-value="300" data-field-top-res-1200-value="112" data-field-left-res-1200-value="93" data-field-width-res-1200-value="498" data-field-top-res-1440-value="129" data-field-left-res-1440-value="105" data-field-width-res-1440-value="546" data-field-top-res-1720-value="142" data-field-left-res-1720-value="179" data-field-width-res-1720-value="554"> <h3 field="tn_text_1723037385412">Control BUSY Bar remotely over the internet. Place it&nbsp;on&nbsp;the wall or&nbsp;door and use the desktop app to&nbsp;automatically activate the BUSY status when you’re on&nbsp;calls.</h3> </p> <p data-elem-id="1730474458405" data-elem-type="text" data-field-top-value="93" data-field-left-value="198" data-field-height-value="53" data-field-width-value="850" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="55" data-field-left-res-320-value="16" data-field-width-res-320-value="317" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="65" data-field-left-res-420-value="28" data-field-width-res-420-value="364" data-field-axisy-res-420-value="top" data-field-container-res-420-value="grid" data-field-top-res-640-value="43" data-field-left-res-640-value="40" data-field-height-res-640-value="26" data-field-width-res-640-value="506" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="53" data-field-left-res-1200-value="93" data-field-top-res-1440-value="65" data-field-left-res-1440-value="105" data-field-width-res-1440-value="506" data-field-top-res-1720-value="75" data-field-left-res-1720-value="179"> <h2 field="tn_text_1730474458405">Remote control over Wi-Fi</h2> </p> </div>  <div data-artboard-recid="944019311" data-artboard-screens="320,420,1200,1440,1720,1920" data-artboard-height="900" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="670" data-artboard-height-res-420="820" data-artboard-height_vh-res-420="100" data-artboard-upscale-res-420="window" data-artboard-height-res-1200="600" data-artboard-height-res-1440="720" data-artboard-height-res-1720="810" id="rec944019311" data-animationappear="off" data-record-type="396" data-screen-max="640px">     <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="170" data-field-left-value="198" data-field-height-value="114" data-field-width-value="670" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="82" data-field-left-res-320-value="13" data-field-height-res-320-value="130" data-field-width-res-320-value="288" data-field-container-res-320-value="grid" data-field-top-res-420-value="110" data-field-left-res-420-value="18" data-field-width-res-420-value="362" data-field-top-res-1200-value="112" data-field-left-res-1200-value="93" data-field-width-res-1200-value="487" data-field-top-res-1440-value="129" data-field-left-res-1440-value="105" data-field-width-res-1440-value="524" data-field-top-res-1720-value="151" data-field-left-res-1720-value="179" data-field-width-res-1720-value="615"> <h3 field="tn_text_1723037385412">Control BUSY Bar remotely over the internet. Place it&nbsp;on&nbsp;the wall or&nbsp;door and use the desktop app to&nbsp;automatically activate the BUSY status when you’re on&nbsp;calls.</h3> </p> <p data-elem-id="1730474458405" data-elem-type="text" data-field-top-value="93" data-field-left-value="198" data-field-height-value="53" data-field-width-value="850" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="40" data-field-left-res-320-value="14" data-field-height-res-320-value="30" data-field-width-res-320-value="306" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="60" data-field-left-res-420-value="18" data-field-width-res-420-value="420" data-field-axisy-res-420-value="top" data-field-container-res-420-value="grid" data-field-top-res-1200-value="53" data-field-left-res-1200-value="93" data-field-top-res-1440-value="65" data-field-left-res-1440-value="105" data-field-width-res-1440-value="506" data-field-top-res-1720-value="75" data-field-left-res-1720-value="179"> <h2 field="tn_text_1730474458405">Remote control over Wi-Fi</h2> </p> </div> <div data-artboard-recid="944019621" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1330" data-artboard-valign="center" data-artboard-upscale="grid" data-artboard-height-res-320="930" data-artboard-height-res-420="1170" data-artboard-height_vh-res-420="100" data-artboard-upscale-res-420="window" data-artboard-height-res-640="1250" data-artboard-height-res-1200="900" data-artboard-height-res-1440="1010" data-artboard-height-res-1720="1110" id="rec944019621" data-animationappear="off" data-record-type="396">   <p data-elem-id="1723037385419" data-elem-type="text" data-field-top-value="151" data-field-left-value="543" data-field-height-value="72" data-field-width-value="537" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="50" data-field-left-res-320-value="15" data-field-width-res-320-value="306" data-field-top-res-420-value="60" data-field-left-res-420-value="18" data-field-width-res-420-value="401" data-field-axisy-res-420-value="top" data-field-top-res-640-value="65" data-field-left-res-640-value="40" data-field-top-res-1200-value="116" data-field-left-res-1200-value="324" data-field-top-res-1440-value="128" data-field-left-res-1440-value="386" data-field-width-res-1440-value="442" data-field-top-res-1720-value="145" data-field-left-res-1720-value="481"> <h2 field="tn_text_1723037385419">Manual controls</h2> </p> <div data-elem-id="1723037523349" data-elem-type="text" data-field-top-value="247" data-field-left-value="543" data-field-height-value="114" data-field-width-value="759" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="90" data-field-left-res-320-value="15" data-field-width-res-320-value="294" data-field-top-res-420-value="111" data-field-left-res-420-value="18" data-field-width-res-420-value="393" data-field-top-res-640-value="123" data-field-left-res-640-value="40" data-field-width-res-640-value="544" data-field-top-res-1200-value="192" data-field-left-res-1200-value="324" data-field-width-res-1200-value="579" data-field-top-res-1440-value="214" data-field-left-res-1440-value="386" data-field-width-res-1440-value="644" data-field-top-res-1720-value="229" data-field-left-res-1720-value="481" data-field-width-res-1720-value="648"> <p>Physical buttons allow you to control the device manually without connecting to PC or the mobile app. The large buttons are designed for easy use without looking at the device.</p> </div> <div data-elem-id="1724086975881" data-elem-type="image" data-field-top-value="649" data-field-left-value="441" data-field-height-value="338" data-field-width-value="1375" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1920" data-field-fileheight-value="472" data-field-heightmode-value="hug" data-field-top-res-320-value="264" data-field-left-res-320-value="47" data-field-height-res-320-value="155" data-field-width-res-320-value="632" data-field-top-res-420-value="342" data-field-left-res-420-value="64" data-field-height-res-420-value="226" data-field-width-res-420-value="918" data-field-top-res-640-value="331" data-field-left-res-640-value="298" data-field-height-res-640-value="195" data-field-width-res-640-value="793" data-field-top-res-1200-value="491" data-field-left-res-1200-value="302" data-field-height-res-1200-value="211" data-field-width-res-1200-value="857" data-field-top-res-1440-value="518" data-field-left-res-1440-value="341" data-field-height-res-1440-value="261" data-field-width-res-1440-value="1061" data-field-top-res-1720-value="554" data-field-left-res-1720-value="414" data-field-height-res-1720-value="301" data-field-width-res-1720-value="1225"> <p><img data-original="img/tild3231-3332-4864-a137-393964616637__busybar_manual_contr.png" alt="" imgfield="tn_img_1724086975881" src="https://busy.bar/img/tild3231-3332-4864-a137-393964616637__busybar_manual_contr.png"> </p> </div> <div data-elem-id="1741096751130" data-elem-type="image" data-field-top-value="374" data-field-left-value="2185" data-field-height-value="338" data-field-width-value="1375" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1920" data-field-fileheight-value="472" data-field-heightmode-value="hug" data-field-top-res-320-value="702" data-field-left-res-320-value="-90" data-field-height-res-320-value="99" data-field-width-res-320-value="401" data-field-top-res-420-value="902" data-field-left-res-420-value="-108" data-field-height-res-420-value="127" data-field-width-res-420-value="515" data-field-container-res-420-value="grid" data-field-top-res-640-value="875" data-field-left-res-640-value="-185" data-field-height-res-640-value="195" data-field-width-res-640-value="793" data-field-widthmode-res-640-value="fixed" data-field-top-res-1200-value="501" data-field-left-res-1200-value="312" data-field-height-res-1200-value="211" data-field-width-res-1200-value="857" data-field-top-res-1440-value="528" data-field-left-res-1440-value="351" data-field-height-res-1440-value="261" data-field-width-res-1440-value="1061" data-field-top-res-1720-value="564" data-field-left-res-1720-value="424" data-field-height-res-1720-value="301" data-field-width-res-1720-value="1225"> <p><img data-original="img/tild6136-3931-4564-b039-383730666233__busybar_manual_contr.png" alt="" imgfield="tn_img_1741096751130" src="https://busy.bar/img/tild6136-3931-4564-b039-383730666233__busybar_manual_contr.png"> </p> </div>    <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="484" data-field-left-value="862" data-field-height-value="38" data-field-width-value="251" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="622" data-field-left-res-320-value="48" data-field-width-res-320-value="125" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-top-res-420-value="809" data-field-left-res-420-value="74" data-field-width-res-420-value="167" data-field-top-res-640-value="781" data-field-left-res-640-value="107" data-field-height-res-640-value="29" data-field-textfit-res-640-value="fixedsize" data-field-top-res-1200-value="370" data-field-left-res-1200-value="570" data-field-width-res-1200-value="185" data-field-top-res-1440-value="389" data-field-left-res-1440-value="649" data-field-width-res-1440-value="213" data-field-top-res-1720-value="401" data-field-left-res-1720-value="756"> <h3 field="tn_text_1723037385412">Start / Pause button</h3> </p> <div data-elem-id="1723037779285" data-elem-type="text" data-field-top-value="523" data-field-left-value="862" data-field-height-value="48" data-field-width-value="264" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="644" data-field-left-res-320-value="48" data-field-width-res-320-value="139" data-field-top-res-420-value="836" data-field-left-res-420-value="74" data-field-height-res-420-value="51" data-field-width-res-420-value="168" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-widthmode-res-420-value="fixed" data-field-top-res-640-value="810" data-field-left-res-640-value="107" data-field-top-res-1200-value="399" data-field-left-res-1200-value="570" data-field-width-res-1200-value="241" data-field-top-res-1440-value="421" data-field-left-res-1440-value="649" data-field-width-res-1440-value="247" data-field-top-res-1720-value="431" data-field-left-res-1720-value="756"> <p>Start and stop your status. Also works as an OK button in the menu.</p> </div>  <div data-elem-id="1724087966604" data-elem-type="text" data-field-top-value="523" data-field-left-value="1491" data-field-height-value="48" data-field-width-value="172" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="645" data-field-left-res-320-value="202" data-field-width-res-320-value="95" data-field-top-res-420-value="834" data-field-left-res-420-value="252" data-field-height-res-420-value="34" data-field-width-res-420-value="111" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-top-res-640-value="810" data-field-left-res-640-value="391" data-field-height-res-640-value="19" data-field-width-res-640-value="211" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="398" data-field-left-res-1200-value="966" data-field-width-res-1200-value="138" data-field-top-res-1440-value="420" data-field-left-res-1440-value="1154" data-field-width-res-1440-value="130" data-field-top-res-1720-value="436" data-field-left-res-1720-value="1342" data-field-width-res-1720-value="163"> <p>Go back in the menu and quit apps.</p> </div> <p data-elem-id="1724087966609" data-elem-type="text" data-field-top-value="484" data-field-left-value="1532" data-field-height-value="38" data-field-width-value="217" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="623" data-field-left-res-320-value="223" data-field-width-res-320-value="114" data-field-top-res-420-value="807" data-field-left-res-420-value="279" data-field-height-res-420-value="24" data-field-width-res-420-value="103" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-top-res-640-value="781" data-field-left-res-640-value="418" data-field-height-res-640-value="27" data-field-width-res-640-value="125" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="370" data-field-left-res-1200-value="995" data-field-width-res-1200-value="125" data-field-top-res-1440-value="389" data-field-left-res-1440-value="1184" data-field-width-res-1440-value="119" data-field-top-res-1720-value="401" data-field-left-res-1720-value="1379" data-field-width-res-1720-value="167"> <h3 field="tn_text_1724087966609">Back button</h3> </p>   <p data-elem-id="1724088230393" data-elem-type="text" data-field-top-value="1061" data-field-left-value="740" data-field-height-value="38" data-field-width-value="217" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="1396" data-field-left-res-320-value="579" data-field-width-res-320-value="294" data-field-top-res-420-value="1444" data-field-left-res-420-value="666" data-field-height-res-420-value="36" data-field-width-res-420-value="213" data-field-top-res-640-value="583" data-field-left-res-640-value="450" data-field-height-res-640-value="29" data-field-textfit-res-640-value="fixedsize" data-field-top-res-1200-value="746" data-field-left-res-1200-value="487" data-field-width-res-1200-value="161" data-field-top-res-1440-value="831" data-field-left-res-1440-value="567" data-field-width-res-1440-value="190" data-field-top-res-1720-value="913" data-field-left-res-1720-value="680" data-field-width-res-1720-value="226"> <h3 field="tn_text_1724088230393">5-position selector</h3> </p>  <p data-elem-id="1724088403682" data-elem-type="text" data-field-top-value="1061" data-field-left-value="1552" data-field-height-value="38" data-field-width-value="138" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="829" data-field-left-res-320-value="48" data-field-height-res-320-value="30" data-field-width-res-320-value="117" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-top-res-420-value="1065" data-field-left-res-420-value="74" data-field-height-res-420-value="24" data-field-width-res-420-value="105" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-widthunits-res-420-value="px" data-field-textfit-res-420-value="fixedsize" data-field-top-res-640-value="1109" data-field-left-res-640-value="107" data-field-top-res-1200-value="747" data-field-left-res-1200-value="956" data-field-width-res-1200-value="107" data-field-top-res-1440-value="831" data-field-left-res-1440-value="1182" data-field-width-res-1440-value="116" data-field-top-res-1720-value="913" data-field-left-res-1720-value="1375" data-field-width-res-1720-value="139"> <h3 field="tn_text_1724088403682">Scroll wheel</h3> </p> <div data-elem-id="1724088403679" data-elem-type="text" data-field-top-value="1100" data-field-left-value="1552" data-field-height-value="72" data-field-width-value="236" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="851" data-field-left-res-320-value="48" data-field-width-res-320-value="172" data-field-top-res-420-value="1092" data-field-left-res-420-value="74" data-field-width-res-420-value="189" data-field-top-res-640-value="1138" data-field-left-res-640-value="107" data-field-width-res-640-value="236" data-field-top-res-1200-value="776" data-field-left-res-1200-value="956" data-field-width-res-1200-value="195" data-field-top-res-1440-value="863" data-field-left-res-1440-value="1182" data-field-width-res-1440-value="199" data-field-top-res-1720-value="947" data-field-left-res-1720-value="1375" data-field-width-res-1720-value="241"> <p>Set the timer and navigate the menu by&nbsp;scrolling. Press to&nbsp;confirm or&nbsp;skip.</p> </div>   <div data-elem-id="1724087141516" data-elem-type="text" data-field-top-value="609" data-field-left-value="113" data-field-height-value="72" data-field-width-value="328" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="196" data-field-left-res-320-value="139" data-field-width-res-320-value="176" data-field-top-res-420-value="247" data-field-left-res-420-value="191" data-field-width-res-420-value="220" data-field-top-res-640-value="290" data-field-left-res-640-value="40" data-field-width-res-640-value="218" data-field-top-res-1200-value="451" data-field-left-res-1200-value="40" data-field-width-res-1200-value="262" data-field-top-res-1440-value="472" data-field-left-res-1440-value="41" data-field-width-res-1440-value="277" data-field-top-res-1720-value="506" data-field-left-res-1720-value="86" data-field-width-res-1720-value="338"> <p>Main focus mode. Distraction blocker, Pomodoro timer, and status display with mobile app and smart home integrations.</p> </div> <p data-elem-id="1724089610980" data-elem-type="text" data-field-top-value="1003" data-field-left-value="146" data-field-height-value="38" data-field-width-value="113" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="453" data-field-left-res-320-value="203" data-field-height-res-320-value="23" data-field-width-res-320-value="86" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-top-res-420-value="607" data-field-left-res-420-value="276" data-field-width-res-420-value="116" data-field-top-res-640-value="568" data-field-left-res-640-value="67" data-field-top-res-1200-value="725" data-field-left-res-1200-value="68" data-field-width-res-1200-value="92" data-field-top-res-1440-value="792" data-field-left-res-1440-value="71" data-field-width-res-1440-value="94" data-field-top-res-1720-value="872" data-field-left-res-1720-value="119" data-field-width-res-1720-value="101"> <h3 field="tn_text_1724089610980">Settings</h3> </p> <div data-elem-id="1724089610977" data-elem-type="text" data-field-top-value="1042" data-field-left-value="113" data-field-height-value="72" data-field-width-value="304" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="475" data-field-left-res-320-value="181" data-field-width-res-320-value="138" data-field-top-res-420-value="634" data-field-left-res-420-value="252" data-field-height-res-420-value="51" data-field-width-res-420-value="157" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-top-res-640-value="596" data-field-left-res-640-value="40" data-field-width-res-640-value="238" data-field-top-res-1200-value="753" data-field-left-res-1200-value="40" data-field-width-res-1200-value="302" data-field-top-res-1440-value="827" data-field-left-res-1440-value="41" data-field-width-res-1440-value="297" data-field-top-res-1720-value="913" data-field-left-res-1720-value="86"> <p>Wi-Fi / Bluetooth connections, screen brightness, sound volume, power saving mode, etc.</p> </div>   <div data-elem-id="1724087707294" data-elem-type="text" data-field-top-value="754" data-field-left-value="113" data-field-height-value="48" data-field-width-value="311" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="196" data-field-left-res-320-value="15" data-field-width-res-320-value="114" data-field-top-res-420-value="247" data-field-left-res-420-value="18" data-field-width-res-420-value="169" data-field-top-res-640-value="400" data-field-left-res-640-value="40" data-field-width-res-640-value="223" data-field-top-res-1200-value="557" data-field-left-res-1200-value="40" data-field-width-res-1200-value="249" data-field-top-res-1440-value="600" data-field-left-res-1440-value="41" data-field-width-res-1440-value="267" data-field-top-res-1720-value="658" data-field-left-res-1720-value="86"> <p>Your custom design status message. Bind your own BUSY workflow and automation.</p> </div> <p data-elem-id="1724089474017" data-elem-type="text" data-field-top-value="844" data-field-left-value="146" data-field-height-value="38" data-field-width-value="74" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="453" data-field-left-res-320-value="35" data-field-height-res-320-value="32" data-field-width-res-320-value="58" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-top-res-420-value="607" data-field-left-res-420-value="42" data-field-width-res-420-value="77" data-field-top-res-640-value="460" data-field-left-res-640-value="67" data-field-top-res-1200-value="617" data-field-left-res-1200-value="67" data-field-width-res-1200-value="55" data-field-top-res-1440-value="667" data-field-left-res-1440-value="73" data-field-width-res-1440-value="94" data-field-top-res-1720-value="729" data-field-left-res-1720-value="119" data-field-width-res-1720-value="77"> <h3 field="tn_text_1724089474017">Apps</h3> </p> <div data-elem-id="1724089474013" data-elem-type="text" data-field-top-value="883" data-field-left-value="113" data-field-height-value="72" data-field-width-value="305" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="475" data-field-left-res-320-value="15" data-field-width-res-320-value="152" data-field-top-res-420-value="634" data-field-left-res-420-value="18" data-field-height-res-420-value="51" data-field-width-res-420-value="188" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-top-res-640-value="488" data-field-left-res-640-value="40" data-field-width-res-640-value="206" data-field-top-res-1200-value="645" data-field-left-res-1200-value="40" data-field-height-res-1200-value="60" data-field-width-res-1200-value="252" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="702" data-field-left-res-1440-value="41" data-field-height-res-1440-value="60" data-field-width-res-1440-value="260" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="770" data-field-left-res-1720-value="86"> <p>Clock, weather, social media stats (YouTube, Instagram, TikTok), and more. Supports 3rd-party user applications.</p> </div>      <p data-elem-id="1743620451404" data-elem-type="text" data-field-top-value="471" data-field-left-value="2331" data-field-height-value="72" data-field-width-value="816" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="570" data-field-left-res-320-value="14" data-field-width-res-320-value="306" data-field-top-res-420-value="754" data-field-left-res-420-value="18" data-field-width-res-420-value="401" data-field-axisy-res-420-value="top" data-field-top-res-640-value="720" data-field-left-res-640-value="40" data-field-top-res-1200-value="48" data-field-left-res-1200-value="-651" data-field-top-res-1440-value="48" data-field-left-res-1440-value="-857" data-field-width-res-1440-value="442" data-field-top-res-1720-value="-58" data-field-left-res-1720-value="-816"> <h2 field="tn_text_1743620451404">Full control with buttons</h2> </p> </div> <div data-artboard-recid="944020711" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1033" data-artboard-valign="top" data-artboard-height_vh="100" data-artboard-upscale="grid" data-artboard-height-res-320="520" data-artboard-height-res-420="660" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="880" data-artboard-height_vh-res-640="" data-artboard-height-res-1200="740" data-artboard-height_vh-res-1200="100" data-artboard-height-res-1440="857" data-artboard-height-res-1720="960" data-artboard-height_vh-res-1720="100" id="rec944020711" data-animationappear="off" data-record-type="396">   <div data-elem-id="1740685462481" data-elem-type="image" data-field-top-value="257" data-field-left-value="2270" data-field-height-value="266" data-field-width-value="200" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1446" data-field-fileheight-value="1920" data-field-heightmode-value="hug" data-field-top-res-320-value="14" data-field-left-res-320-value="0" data-field-height-res-320-value="425" data-field-width-res-320-value="320" data-field-top-res-420-value="-2" data-field-left-res-420-value="0" data-field-height-res-420-value="558" data-field-width-res-420-value="420" data-field-container-res-420-value="grid" data-field-top-res-640-value="-60" data-field-left-res-640-value="0" data-field-height-res-640-value="800" data-field-width-res-640-value="640" data-field-container-res-640-value="grid" data-field-height-res-1200-value="266" data-field-height-res-1440-value="266" data-field-height-res-1720-value="266"> <p><img data-original="img/tild3539-3233-4465-b863-313830376636__bs_m.jpg" alt="" imgfield="tn_img_1740685462481" src="https://busy.bar/img/tild3539-3233-4465-b863-313830376636__bs_m.jpg"> </p> </div>   <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="-24" data-field-left-value="8" data-field-height-value="76" data-field-width-value="852" data-field-axisy-value="center" data-field-axisx-value="center" data-field-container-value="window" data-field-topunits-value="%" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="85" data-field-left-res-320-value="15" data-field-width-res-320-value="299" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="109" data-field-left-res-420-value="18" data-field-height-res-420-value="78" data-field-width-res-420-value="392" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-topunits-res-420-value="px" data-field-top-res-640-value="123" data-field-left-res-640-value="40" data-field-width-res-640-value="530" data-field-axisy-res-640-value="top" data-field-axisx-res-640-value="left" data-field-container-res-640-value="grid" data-field-topunits-res-640-value="px" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="-22" data-field-left-res-1200-value="4" data-field-height-res-1200-value="58" data-field-width-res-1200-value="639" data-field-top-res-1440-value="-23" data-field-left-res-1440-value="21" data-field-height-res-1440-value="64" data-field-width-res-1440-value="710" data-field-top-res-1720-value="-23" data-field-left-res-1720-value="-17" data-field-height-res-1720-value="64" data-field-width-res-1720-value="709" data-field-textfit-res-1720-value="fixedsize" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <h3 field="tn_text_1723037385412">Eye-friendly back screen allows you to control the device and see the status displayed on the main screen — even when it’s turned away from you.</h3> </p> <p data-elem-id="1740685609679" data-elem-type="text" data-field-top-value="-33" data-field-left-value="19" data-field-height-value="72" data-field-width-value="877" data-field-axisy-value="center" data-field-axisx-value="center" data-field-container-value="window" data-field-topunits-value="%" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="45" data-field-left-res-320-value="14" data-field-width-res-320-value="320" data-field-top-res-420-value="60" data-field-left-res-420-value="18" data-field-height-res-420-value="124" data-field-width-res-420-value="420" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="center" data-field-container-res-420-value="grid" data-field-topunits-res-420-value="px" data-field-top-res-640-value="65" data-field-left-res-640-value="40" data-field-width-res-640-value="866" data-field-axisy-res-640-value="top" data-field-axisx-res-640-value="left" data-field-container-res-640-value="grid" data-field-topunits-res-640-value="px" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="-31" data-field-left-res-1200-value="0" data-field-height-res-1200-value="56" data-field-width-res-1200-value="631" data-field-textfit-res-1200-value="fixedsize" data-field-widthmode-res-1200-value="fixed" data-field-heightmode-res-1200-value="fixed" data-field-top-res-1440-value="-32" data-field-left-res-1440-value="18" data-field-width-res-1440-value="703" data-field-top-res-1720-value="-32" data-field-left-res-1720-value="20" data-field-width-res-1720-value="791"> <h2 field="tn_text_1740685609679">Monochrome back screen</h2> </p> </div> <div data-artboard-recid="944021271" data-artboard-screens="320,420,1200,1440,1720,1920" data-artboard-height="960" data-artboard-valign="top" data-artboard-height_vh="100" data-artboard-upscale="grid" data-artboard-height-res-320="590" data-artboard-height-res-420="627" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-1200="720" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="827" data-artboard-height-res-1720="967" id="rec944021271" data-animationappear="off" data-record-type="396" data-screen-min="1200px">    <p data-elem-id="1727702192959" data-elem-type="text" data-field-top-value="154" data-field-left-value="543" data-field-height-value="76" data-field-width-value="638" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="271" data-field-left-res-320-value="15" data-field-height-res-320-value="30" data-field-width-res-320-value="305" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="360" data-field-left-res-420-value="13" data-field-height-res-420-value="38" data-field-width-res-420-value="381" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-1200-value="97" data-field-left-res-1200-value="323" data-field-height-res-1200-value="118" data-field-width-res-1200-value="552" data-field-top-res-1440-value="125" data-field-left-res-1440-value="386" data-field-width-res-1440-value="579" data-field-top-res-1720-value="145" data-field-left-res-1720-value="487" data-field-height-res-1720-value="141" data-field-width-res-1720-value="618"> <h2 field="tn_text_1727702192959">Interval focus timer</h2> </p> <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="254" data-field-left-value="543" data-field-height-value="114" data-field-width-value="828" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="440" data-field-left-res-320-value="15" data-field-height-res-320-value="137" data-field-width-res-320-value="294" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="486" data-field-left-res-420-value="14" data-field-height-res-420-value="203" data-field-width-res-420-value="399" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-1200-value="172" data-field-left-res-1200-value="323" data-field-width-res-1200-value="583" data-field-top-res-1440-value="210" data-field-left-res-1440-value="386" data-field-height-res-1440-value="96" data-field-width-res-1440-value="661" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="232" data-field-left-res-1720-value="487" data-field-height-res-1720-value="113" data-field-width-res-1720-value="698"> <h3 field="tn_text_1723037385412">BUSY Bar is an advanced productivity timer inspired by the Pomodoro technique, which divides work into short intervals — 25-minute work sessions followed by 5-minute breaks.</h3> </p>  </div> <div data-artboard-recid="944022016" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1047" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="440" data-artboard-height-res-420="600" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="790" data-artboard-height-res-1200="670" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="827" data-artboard-height-res-1720="907" id="rec944022016" data-animationappear="off" data-record-type="396" data-screen-max="1200px">      <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="253" data-field-left-value="196" data-field-height-value="152" data-field-width-value="555" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="77" data-field-left-res-320-value="14" data-field-height-res-320-value="137" data-field-width-res-320-value="295" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="112" data-field-left-res-420-value="18" data-field-height-res-420-value="203" data-field-width-res-420-value="379" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="125" data-field-left-res-640-value="40" data-field-width-res-640-value="549" data-field-top-res-1200-value="186" data-field-left-res-1200-value="91" data-field-width-res-1200-value="448" data-field-top-res-1440-value="211" data-field-left-res-1440-value="100" data-field-height-res-1440-value="96" data-field-width-res-1440-value="512" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="253" data-field-left-res-1720-value="182" data-field-height-res-1720-value="113" data-field-width-res-1720-value="530"> <h3 field="tn_text_1723037385412">BUSY Bar is&nbsp;an&nbsp;advanced productivity timer inspired by&nbsp;the Pomodoro technique, which divides work into short intervals&nbsp;— 25-minute work sessions followed by&nbsp;5-minute breaks.</h3> </p> <p data-elem-id="1727702192959" data-elem-type="text" data-field-top-value="74" data-field-left-value="196" data-field-height-value="76" data-field-width-value="688" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="38" data-field-left-res-320-value="14" data-field-height-res-320-value="30" data-field-width-res-320-value="305" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="60" data-field-left-res-420-value="18" data-field-height-res-420-value="88" data-field-width-res-420-value="374" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="65" data-field-left-res-640-value="40" data-field-top-res-1200-value="51" data-field-left-res-1200-value="91" data-field-height-res-1200-value="118" data-field-width-res-1200-value="476" data-field-top-res-1440-value="57" data-field-left-res-1440-value="100" data-field-width-res-1440-value="476" data-field-top-res-1720-value="79" data-field-left-res-1720-value="182" data-field-height-res-1720-value="141" data-field-width-res-1720-value="532"> <h2 field="tn_text_1727702192959">Interval focus timer</h2> </p> </div> <div data-artboard-recid="944023096" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="468" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="170" data-artboard-height-res-420="240" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="270" data-artboard-height-res-1200="320" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="380" data-artboard-height-res-1720="410" id="rec944023096" data-animationappear="off" data-record-type="396">   <p data-elem-id="1742386913915" data-elem-type="text" data-field-top-value="149" data-field-left-value="544" data-field-height-value="76" data-field-width-value="690" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="58" data-field-width-res-320-value="305" data-field-top-res-420-value="60" data-field-left-res-420-value="72" data-field-width-res-420-value="338" data-field-top-res-640-value="65" data-field-left-res-640-value="59" data-field-width-res-640-value="396" data-field-top-res-1200-value="99" data-field-left-res-1200-value="325" data-field-width-res-1200-value="501" data-field-top-res-1440-value="118" data-field-left-res-1440-value="384" data-field-top-res-1720-value="146" data-field-left-res-1720-value="487" data-field-height-res-1720-value="71" data-field-width-res-1720-value="646" data-field-container-res-1720-value="grid"> <h2 field="tn_text_1742386913915">New Pomodoro timer</h2> </p> <p data-elem-id="1742386831666" data-elem-type="text" data-field-top-value="240" data-field-left-value="544" data-field-height-value="114" data-field-width-value="690" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="85" data-field-left-res-320-value="14" data-field-width-res-320-value="276" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="116" data-field-left-res-420-value="18" data-field-width-res-420-value="377" data-field-top-res-640-value="123" data-field-left-res-640-value="59" data-field-width-res-640-value="426" data-field-top-res-1200-value="161" data-field-left-res-1200-value="325" data-field-width-res-1200-value="524" data-field-top-res-1440-value="193" data-field-left-res-1440-value="384" data-field-width-res-1440-value="646" data-field-top-res-1720-value="233" data-field-left-res-1720-value="487" data-field-height-res-1720-value="105" data-field-width-res-1720-value="654" data-field-container-res-1720-value="grid"> <h3 field="tn_text_1742386831666">We redesign the classic Pomodoro timer by combining it with a&nbsp;distraction blocker to help you stay focused and fight off notifications, social media, and other brain rot while you work.</h3> </p>  </div> <div data-artboard-recid="944023401" data-artboard-screens="320,420,1200,1440,1720,1920" data-artboard-height="457" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="80" data-artboard-height-res-420="110" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-1200="328" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="343" data-artboard-height-res-1720="409" id="rec944023401" data-animationappear="off" data-record-type="396" data-screen-min="1200px">   <div data-elem-id="1742570937987" data-elem-type="image" data-field-top-value="3" data-field-left-value="0" data-field-height-value="457" data-field-width-value="1920" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1920" data-field-fileheight-value="457" data-field-lazyoff-value="y" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="11" data-field-left-res-320-value="25" data-field-height-res-320-value="69" data-field-width-res-320-value="290" data-field-container-res-320-value="grid" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="10" data-field-left-res-420-value="20" data-field-height-res-420-value="95" data-field-width-res-420-value="400" data-field-widthmode-res-420-value="fixed" data-field-top-res-1200-value="1" data-field-left-res-1200-value="-1" data-field-height-res-1200-value="286" data-field-width-res-1200-value="1201" data-field-top-res-1440-value="0" data-field-left-res-1440-value="0" data-field-height-res-1440-value="343" data-field-width-res-1440-value="1440" data-field-widthmode-res-1440-value="fixed" data-field-top-res-1720-value="2" data-field-left-res-1720-value="0" data-field-height-res-1720-value="409" data-field-width-res-1720-value="1720" data-field-widthmode-res-1720-value="fixed"> <p><img src="https://busy.bar/img/tild6364-3233-4765-b366-386665623036__what-is-pomodoro-tim.svg" alt="" imgfield="tn_img_1742570937987"> </p> </div> <div data-elem-id="1742386869330" data-elem-type="image" data-field-top-value="3" data-field-left-value="0" data-field-height-value="457" data-field-width-value="1920" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-mobile="y" data-animate-sbs-event="intoview" data-animate-sbs-trg="1" data-animate-sbs-trgofst="0" data-animate-sbs-loop="loop" data-animate-sbs-opts="[{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':2000,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':0,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':0,'ro':0,'ti':6000,'ea':'0','dt':0}]" data-field-filewidth-value="1920" data-field-fileheight-value="457" data-field-lazyoff-value="y" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="1" data-field-left-res-320-value="15" data-field-height-res-320-value="69" data-field-width-res-320-value="290" data-field-container-res-320-value="grid" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="0" data-field-left-res-420-value="10" data-field-height-res-420-value="95" data-field-width-res-420-value="400" data-field-widthmode-res-420-value="fixed" data-field-top-res-1200-value="1" data-field-left-res-1200-value="-1" data-field-height-res-1200-value="286" data-field-width-res-1200-value="1201" data-field-top-res-1440-value="0" data-field-left-res-1440-value="0" data-field-height-res-1440-value="343" data-field-width-res-1440-value="1440" data-field-widthmode-res-1440-value="fixed" data-field-top-res-1720-value="2" data-field-left-res-1720-value="0" data-field-height-res-1720-value="409" data-field-width-res-1720-value="1720" data-field-widthmode-res-1720-value="fixed"> <p><img src="https://busy.bar/img/tild3337-3761-4561-a436-633466333238__what-is-pomodoro-tim.svg" alt="" imgfield="tn_img_1742386869330"> </p> </div>    </div> <div data-artboard-recid="944023846" data-artboard-screens="320,420,1200,1440,1720,1920" data-artboard-height="548" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="140" data-artboard-height-res-420="190" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-1200="338" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="420" data-artboard-height-res-1720="495" id="rec944023846" data-animationappear="off" data-record-type="396" data-screen-max="1200px">   <div data-elem-id="1742572068399" data-elem-type="image" data-field-top-value="3" data-field-left-value="0" data-field-height-value="358" data-field-width-value="744" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-sbs-event="intoview" data-animate-sbs-trg="1" data-animate-sbs-trgofst="0" data-animate-sbs-loop="loop" data-animate-sbs-opts="[{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':2000,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':0,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':0,'ro':0,'ti':6000,'ea':'0','dt':0}]" data-field-filewidth-value="405" data-field-fileheight-value="195" data-field-lazyoff-value="y" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="1" data-field-left-res-320-value="15" data-field-height-res-320-value="140" data-field-width-res-320-value="290" data-field-container-res-320-value="grid" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="0" data-field-left-res-420-value="10" data-field-height-res-420-value="193" data-field-width-res-420-value="400" data-field-widthmode-res-420-value="fixed" data-field-top-res-1200-value="11" data-field-left-res-1200-value="9" data-field-height-res-1200-value="341" data-field-width-res-1200-value="1201" data-field-top-res-1440-value="12" data-field-left-res-1440-value="-27" data-field-height-res-1440-value="430" data-field-width-res-1440-value="1514" data-field-widthmode-res-1440-value="fixed" data-field-top-res-1720-value="12" data-field-left-res-1720-value="-11" data-field-height-res-1720-value="500" data-field-width-res-1720-value="1760" data-field-widthmode-res-1720-value="fixed"> <p><img src="https://busy.bar/img/tild3634-3132-4233-b064-383131323032__mob_pomodoro-timer_5.svg" alt="" imgfield="tn_img_1742572068399"> </p> </div> <div data-elem-id="1742386869330" data-elem-type="image" data-field-top-value="3" data-field-left-value="0" data-field-height-value="358" data-field-width-value="744" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-mobile="y" data-animate-sbs-event="intoview" data-animate-sbs-trg="1" data-animate-sbs-trgofst="0" data-animate-sbs-loop="loop" data-animate-sbs-opts="[{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':1,'ro':0,'ti':2000,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':0,'ro':0,'ti':0,'ea':'0','dt':0},{'mx':0,'my':0,'sx':1,'sy':1,'op':0,'ro':0,'ti':6000,'ea':'0','dt':0}]" data-field-filewidth-value="405" data-field-fileheight-value="195" data-field-lazyoff-value="y" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="1" data-field-left-res-320-value="15" data-field-height-res-320-value="140" data-field-width-res-320-value="290" data-field-container-res-320-value="grid" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="0" data-field-left-res-420-value="10" data-field-height-res-420-value="193" data-field-width-res-420-value="400" data-field-widthmode-res-420-value="fixed" data-field-top-res-1200-value="1" data-field-left-res-1200-value="-1" data-field-height-res-1200-value="341" data-field-width-res-1200-value="1201" data-field-top-res-1440-value="2" data-field-left-res-1440-value="-37" data-field-height-res-1440-value="430" data-field-width-res-1440-value="1514" data-field-widthmode-res-1440-value="fixed" data-field-top-res-1720-value="2" data-field-left-res-1720-value="-21" data-field-height-res-1720-value="500" data-field-width-res-1720-value="1760" data-field-widthmode-res-1720-value="fixed"> <p><img src="https://busy.bar/img/tild3938-3166-4936-a635-363138383135__mob_pomodoro-timer_1.svg" alt="" imgfield="tn_img_1742386869330"> </p> </div>    </div> <div data-artboard-recid="944024211" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="834" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="296" data-artboard-height-res-420="412" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="546" data-artboard-height-res-1200="546" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="607" data-artboard-height-res-1720="721" id="rec944024211" data-animationappear="off" data-record-type="396">   <div data-elem-id="1742817057026" data-elem-type="image" data-field-top-value="191" data-field-left-value="526" data-field-height-value="317" data-field-width-value="289" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1000" data-field-fileheight-value="1096" data-field-heightmode-value="hug" data-field-top-res-320-value="71" data-field-left-res-320-value="191" data-field-height-res-320-value="115" data-field-width-res-320-value="105" data-field-top-res-420-value="100" data-field-left-res-420-value="240" data-field-height-res-420-value="147" data-field-width-res-420-value="134" data-field-container-res-420-value="grid" data-field-top-res-640-value="108" data-field-left-res-640-value="36" data-field-height-res-640-value="203" data-field-width-res-640-value="185" data-field-top-res-1200-value="118" data-field-left-res-1200-value="323" data-field-height-res-1200-value="194" data-field-width-res-1200-value="177" data-field-top-res-1440-value="147" data-field-left-res-1440-value="378" data-field-height-res-1440-value="214" data-field-width-res-1440-value="195" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="178" data-field-left-res-1720-value="472" data-field-height-res-1720-value="285" data-field-width-res-1720-value="260"> <p><img data-original="img/tild3335-6139-4331-b563-646535353466__ill1.jpg" alt="" imgfield="tn_img_1742817057026" src="https://busy.bar/img/tild3335-6139-4331-b563-646535353466__ill1.jpg"> </p> </div>  <div data-elem-id="1742387450665" data-elem-type="text" data-field-top-value="594" data-field-left-value="542" data-field-height-value="120" data-field-width-value="325" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="98" data-field-left-res-320-value="14" data-field-width-res-320-value="165" data-field-container-res-320-value="grid" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-top-res-420-value="143" data-field-left-res-420-value="18" data-field-height-res-420-value="72" data-field-width-res-420-value="199" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-top-res-640-value="363" data-field-left-res-640-value="40" data-field-width-res-640-value="213" data-field-top-res-1200-value="361" data-field-left-res-1200-value="325" data-field-width-res-1200-value="258" data-field-top-res-1440-value="428" data-field-left-res-1440-value="385" data-field-width-res-1440-value="272" data-field-top-res-1720-value="535" data-field-left-res-1720-value="487" data-field-width-res-1720-value="273"> <p>Brain-rotting content kills your focus. We block Instagram and TikTok while you’re in focus mode — so you can’t even open them.</p> </div>  <div data-elem-id="1742387113984" data-elem-type="text" data-field-top-value="594" data-field-left-value="979" data-field-height-value="120" data-field-width-value="385" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="196" data-field-left-res-320-value="14" data-field-width-res-320-value="187" data-field-top-res-420-value="280" data-field-left-res-420-value="18" data-field-width-res-420-value="221" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-top-res-640-value="363" data-field-left-res-640-value="314" data-field-width-res-640-value="261" data-field-top-res-1200-value="361" data-field-left-res-1200-value="611" data-field-width-res-1200-value="332" data-field-top-res-1440-value="428" data-field-left-res-1440-value="730" data-field-width-res-1440-value="319" data-field-top-res-1720-value="535" data-field-left-res-1720-value="880" data-field-width-res-1720-value="356"> <p>Just as you manage to concentrate, someone always tries to interrupt. BUSY Bar lets others know when you’re in deep focus — and when you’ll be available again.</p> </div>  <p data-elem-id="1742386592685" data-elem-type="text" data-field-top-value="82" data-field-left-value="540" data-field-height-value="58" data-field-width-value="641" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="30" data-field-left-res-320-value="14" data-field-width-res-320-value="305" data-field-top-res-420-value="40" data-field-left-res-420-value="18" data-field-width-res-420-value="406" data-field-top-res-640-value="35" data-field-left-res-640-value="40" data-field-top-res-1200-value="54" data-field-left-res-1200-value="326" data-field-height-res-1200-value="86" data-field-width-res-1200-value="548" data-field-container-res-1200-value="grid" data-field-heightunits-res-1200-value="px" data-field-textfit-res-1200-value="autoheight" data-field-top-res-1440-value="65" data-field-left-res-1440-value="385" data-field-width-res-1440-value="650" data-field-top-res-1720-value="91" data-field-left-res-1720-value="487" data-field-width-res-1720-value="743"> <h2 field="tn_text_1742386592685">We fight major focus killers</h2> </p> </div> <div data-artboard-recid="944033986" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1100" data-artboard-valign="top" data-artboard-height_vh="100" data-artboard-upscale="grid" data-artboard-height-res-320="570" data-artboard-height-res-420="727" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="920" data-artboard-height-res-1200="680" data-artboard-height_vh-res-1200="100" data-artboard-height-res-1440="808" data-artboard-height-res-1720="958" id="rec944033986" data-animationappear="off" data-record-type="396">         <p data-elem-id="1727702192959" data-elem-type="text" data-field-top-value="231" data-field-left-value="265" data-field-height-value="76" data-field-width-value="576" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="14" data-field-height-res-320-value="30" data-field-width-res-320-value="252" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="60" data-field-left-res-420-value="18" data-field-height-res-420-value="38" data-field-width-res-420-value="332" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="65" data-field-left-res-640-value="40" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="127" data-field-left-res-1200-value="216" data-field-top-res-1440-value="157" data-field-left-res-1440-value="217" data-field-width-res-1440-value="476" data-field-top-res-1720-value="172" data-field-left-res-1720-value="257"> <h2 field="tn_text_1727702192959">Block distractions</h2> </p> <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="331" data-field-left-value="281" data-field-height-value="114" data-field-width-value="601" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="88" data-field-left-res-320-value="14" data-field-height-res-320-value="137" data-field-width-res-320-value="281" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="110" data-field-left-res-420-value="18" data-field-height-res-420-value="203" data-field-width-res-420-value="393" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="125" data-field-left-res-640-value="40" data-field-width-res-640-value="562" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="202" data-field-left-res-1200-value="217" data-field-height-res-1200-value="116" data-field-width-res-1200-value="474" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="238" data-field-left-res-1440-value="237" data-field-height-res-1440-value="96" data-field-width-res-1440-value="512" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="259" data-field-left-res-1720-value="272"> <h3 field="tn_text_1723037385412">BUSY Bar can automatically mute notifications on your phone and PC when BUSY mode is activated. It helps you stay focused by blocking distractions as you work.</h3> </p> <p data-elem-id="1739203655498" data-elem-type="text" data-field-top-value="501" data-field-left-value="281" data-field-height-value="29" data-field-width-value="601" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="181" data-field-left-res-320-value="14" data-field-height-res-320-value="22" data-field-width-res-320-value="242" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-top-res-420-value="204" data-field-left-res-420-value="18" data-field-width-res-420-value="333" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="242" data-field-left-res-640-value="40" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="329" data-field-left-res-1200-value="204" data-field-width-res-1200-value="448" data-field-top-res-1440-value="376" data-field-left-res-1440-value="237" data-field-height-res-1440-value="32" data-field-width-res-1440-value="512" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="398" data-field-left-res-1720-value="269"> <h3 field="tn_text_1739203655498">Requires BUSY App integration (available for free):</h3> </p> </div> <div data-artboard-recid="944061206" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1080" data-artboard-valign="center" data-artboard-height_vh="100" data-artboard-upscale="grid" data-artboard-height-res-320="600" data-artboard-height-res-420="727" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="grid" data-artboard-height-res-640="630" data-artboard-height-res-1200="820" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="720" data-artboard-height-res-1720="960" data-artboard-height_vh-res-1720="90" id="rec944061206" data-animationappear="off" data-record-type="396">          <div data-elem-id="1744023595011" data-elem-type="text" data-field-top-value="81" data-field-left-value="156" data-field-width-value="530" data-field-axisy-value="center" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="488" data-field-left-res-320-value="14" data-field-height-res-320-value="75" data-field-width-res-320-value="135" data-field-container-res-320-value="grid" data-field-heightunits-res-320-value="px" data-field-textfit-res-320-value="autoheight" data-field-top-res-420-value="588" data-field-left-res-420-value="20" data-field-height-res-420-value="77" data-field-width-res-420-value="179" data-field-top-res-640-value="280" data-field-left-res-640-value="39" data-field-width-res-640-value="214" data-field-axisy-res-640-value="top" data-field-top-res-1200-value="57" data-field-left-res-1200-value="75" data-field-height-res-1200-value="51" data-field-width-res-1200-value="459" data-field-top-res-1440-value="68" data-field-left-res-1440-value="75" data-field-height-res-1440-value="51" data-field-width-res-1440-value="443" data-field-top-res-1720-value="71" data-field-left-res-1720-value="137" data-field-width-res-1720-value="455"> <p>Select the apps you want to block during focus mode. You’ll stop receiving notifications and won’t be able to open these apps until the timer runs out.</p> </div> <div data-elem-id="1744052458747" data-elem-type="text" data-field-top-value="237" data-field-left-value="156" data-field-height-value="58" data-field-width-value="530" data-field-axisy-value="center" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="488" data-field-left-res-320-value="162" data-field-height-res-320-value="83" data-field-width-res-320-value="131" data-field-top-res-420-value="588" data-field-left-res-420-value="215" data-field-height-res-420-value="77" data-field-width-res-420-value="179" data-field-top-res-640-value="478" data-field-left-res-640-value="39" data-field-width-res-640-value="257" data-field-axisy-res-640-value="top" data-field-top-res-1200-value="185" data-field-left-res-1200-value="75" data-field-height-res-1200-value="51" data-field-width-res-1200-value="446" data-field-top-res-1440-value="205" data-field-left-res-1440-value="75" data-field-height-res-1440-value="51" data-field-width-res-1440-value="443" data-field-top-res-1720-value="204" data-field-left-res-1720-value="137" data-field-height-res-1720-value="48" data-field-width-res-1720-value="455"> <p>Locks apps for the entire focus session with no way to bypass it. The only way to unlock them is a full phone reset.</p> </div>   <p data-elem-id="1739991966999" data-elem-type="text" data-field-top-value="-112" data-field-left-value="110" data-field-height-value="114" data-field-width-value="626" data-field-axisy-value="center" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="fixedsize" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="91" data-field-left-res-320-value="14" data-field-height-res-320-value="57" data-field-width-res-320-value="292" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-textfit-res-320-value="fixedsize" data-field-top-res-420-value="115" data-field-left-res-420-value="18" data-field-height-res-420-value="75" data-field-width-res-420-value="395" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="124" data-field-left-res-640-value="40" data-field-height-res-640-value="87" data-field-axisy-res-640-value="top" data-field-top-res-1200-value="-89" data-field-left-res-1200-value="41" data-field-height-res-1200-value="93" data-field-width-res-1200-value="459" data-field-top-res-1440-value="-101" data-field-left-res-1440-value="40" data-field-height-res-1440-value="102" data-field-width-res-1440-value="542" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="-95" data-field-left-res-1720-value="100" data-field-height-res-1720-value="96" data-field-width-res-1720-value="556"> <h3 field="tn_text_1739991966999">Short videos on TikTok and Instagram flood you with dopamine, making it hard to focus. BUSY App can blocks these apps while you’re in deep focus.</h3> </p> <p data-elem-id="1727702192959" data-elem-type="text" data-field-top-value="-229" data-field-left-value="110" data-field-height-value="76" data-field-width-value="701" data-field-axisy-value="center" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="50" data-field-left-res-320-value="14" data-field-height-res-320-value="30" data-field-width-res-320-value="301" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="60" data-field-left-res-420-value="18" data-field-height-res-420-value="110" data-field-width-res-420-value="419" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="65" data-field-left-res-640-value="38" data-field-height-res-640-value="59" data-field-width-res-640-value="625" data-field-axisy-res-640-value="top" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight" data-field-top-res-1200-value="-181" data-field-left-res-1200-value="41" data-field-top-res-1440-value="-199" data-field-left-res-1440-value="40" data-field-width-res-1440-value="625" data-field-top-res-1720-value="-194" data-field-left-res-1720-value="98" data-field-height-res-1720-value="71" data-field-width-res-1720-value="668" data-field-container-res-1720-value="grid"> <h2 field="tn_text_1727702192959">Pause scrolling</h2> </p> </div> <div data-artboard-recid="944069741" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1190" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="660" data-artboard-height-res-420="747" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="grid" data-artboard-height-res-640="600" data-artboard-height-res-1200="820" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="978" data-artboard-height-res-1720="1000" id="rec944069741" data-animationappear="off" data-record-type="396" data-screen-min="640px">     <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="258" data-field-left-value="-337" data-field-height-value="38" data-field-width-value="733" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="409" data-field-left-res-320-value="16" data-field-height-res-320-value="137" data-field-width-res-320-value="141" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="460" data-field-left-res-420-value="16" data-field-height-res-420-value="203" data-field-width-res-420-value="185" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="125" data-field-left-res-640-value="40" data-field-width-res-640-value="305" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="174" data-field-left-res-1200-value="-166" data-field-width-res-1200-value="600" data-field-top-res-1440-value="218" data-field-left-res-1440-value="-218" data-field-height-res-1440-value="96" data-field-width-res-1440-value="693" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="244" data-field-left-res-1720-value="-263"> <h3 field="tn_text_1723037385412">BUSY Bar integrates with the free cloud-based BUSY App infrastructure.</h3> </p> <p data-elem-id="1727702192959" data-elem-type="text" data-field-top-value="150" data-field-left-value="-416" data-field-height-value="76" data-field-width-value="576" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="62" data-field-left-res-320-value="34" data-field-height-res-320-value="30" data-field-width-res-320-value="252" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="70" data-field-left-res-420-value="1" data-field-height-res-420-value="38" data-field-width-res-420-value="419" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="65" data-field-left-res-640-value="40" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="90" data-field-left-res-1200-value="-228" data-field-top-res-1440-value="130" data-field-left-res-1440-value="-329" data-field-width-res-1440-value="476" data-field-top-res-1720-value="145" data-field-left-res-1720-value="-343" data-field-height-res-1720-value="71" data-field-width-res-1720-value="576" data-field-container-res-1720-value="grid"> <h2 field="tn_text_1727702192959">Mute all devices</h2> </p> <p data-elem-id="1739991966999" data-elem-type="text" data-field-top-value="350" data-field-left-value="-353" data-field-height-value="114" data-field-width-value="700" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="409" data-field-left-res-320-value="166" data-field-height-res-320-value="137" data-field-width-res-320-value="146" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="460" data-field-left-res-420-value="219" data-field-height-res-420-value="203" data-field-width-res-420-value="187" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="196" data-field-left-res-640-value="40" data-field-width-res-640-value="330" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="219" data-field-left-res-1200-value="-191" data-field-width-res-1200-value="550" data-field-top-res-1440-value="270" data-field-left-res-1440-value="-259" data-field-height-res-1440-value="128" data-field-width-res-1440-value="610" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="293" data-field-left-res-1720-value="-313" data-field-width-res-1720-value="634"> <h3 field="tn_text_1739991966999">Block distractions across all platforms simultaneously, so nothing pulls you away while you’re focused. BUSY App works on your computer, phone, and smartwatch.</h3> </p> </div> <div data-artboard-recid="944070556" data-artboard-screens="320,420,1200,1440,1720,1920" data-artboard-height="1190" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="690" data-artboard-height-res-420="857" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-1200="820" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="978" data-artboard-height-res-1720="1100" id="rec944070556" data-animationappear="off" data-record-type="396" data-screen-max="640px">      <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="258" data-field-left-value="-295" data-field-height-value="38" data-field-width-value="818" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="535" data-field-left-res-320-value="15" data-field-height-res-320-value="137" data-field-width-res-320-value="293" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="679" data-field-left-res-420-value="18" data-field-height-res-420-value="203" data-field-width-res-420-value="393" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-1200-value="174" data-field-left-res-1200-value="-195" data-field-width-res-1200-value="542" data-field-top-res-1440-value="218" data-field-left-res-1440-value="-255" data-field-height-res-1440-value="96" data-field-width-res-1440-value="619" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="250" data-field-left-res-1720-value="-263"> <h3 field="tn_text_1723037385412">BUSY Bar integrates with the free cloud-based BUSY App infrastr﻿ucture.</h3> </p> <p data-elem-id="1727702192959" data-elem-type="text" data-field-top-value="150" data-field-left-value="-416" data-field-height-value="76" data-field-width-value="576" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="34" data-field-height-res-320-value="30" data-field-width-res-320-value="252" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="60" data-field-left-res-420-value="1" data-field-height-res-420-value="38" data-field-width-res-420-value="419" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-1200-value="90" data-field-left-res-1200-value="-228" data-field-top-res-1440-value="130" data-field-left-res-1440-value="-329" data-field-width-res-1440-value="476" data-field-top-res-1720-value="150" data-field-left-res-1720-value="-343" data-field-height-res-1720-value="71" data-field-width-res-1720-value="576" data-field-container-res-1720-value="grid"> <h2 field="tn_text_1727702192959">Mute all devices</h2> </p> <p data-elem-id="1739991966999" data-elem-type="text" data-field-top-value="320" data-field-left-value="-353" data-field-height-value="114" data-field-width-value="700" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="584" data-field-left-res-320-value="15" data-field-height-res-320-value="137" data-field-width-res-320-value="290" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="741" data-field-left-res-420-value="18" data-field-height-res-420-value="203" data-field-width-res-420-value="389" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-1200-value="219" data-field-left-res-1200-value="-208" data-field-width-res-1200-value="515" data-field-top-res-1440-value="270" data-field-left-res-1440-value="-267" data-field-height-res-1440-value="128" data-field-width-res-1440-value="594" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="305" data-field-left-res-1720-value="-313" data-field-width-res-1720-value="634"> <h3 field="tn_text_1739991966999">Block distractions on all platforms simultaneously, so nothing pulls you away when you're focused. BUSY App works on your computer, phone, and smartwatch.</h3> </p> </div> <div data-artboard-recid="944071061" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1089" data-artboard-valign="center" data-artboard-height_vh="100" data-artboard-upscale="grid" data-artboard-height-res-320="627" data-artboard-height-res-420="797" data-artboard-upscale-res-420="window" data-artboard-height-res-640="1008" data-artboard-height-res-1200="748" data-artboard-height-res-1440="870" id="rec944071061" data-animationappear="off" data-record-type="396">    <div data-elem-id="1737399957003" data-elem-type="image" data-field-top-value="30" data-field-left-value="-484" data-field-height-value="370" data-field-width-value="200" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1037" data-field-fileheight-value="1920" data-field-heightmode-value="hug" data-field-top-res-320-value="36" data-field-left-res-320-value="0" data-field-height-res-320-value="592" data-field-width-res-320-value="320" data-field-container-res-320-value="grid" data-field-top-res-420-value="20" data-field-left-res-420-value="0" data-field-height-res-420-value="778" data-field-width-res-420-value="420" data-field-container-res-420-value="grid" data-field-widthmode-res-420-value="fixed" data-field-top-res-640-value="-118" data-field-left-res-640-value="0" data-field-height-res-640-value="1185" data-field-width-res-640-value="640" data-field-container-res-640-value="grid" data-field-height-res-1200-value="370" data-field-height-res-1440-value="370" data-field-height-res-1720-value="370"> <p><img data-original="img/tild3738-3163-4161-b731-303566383933__busybar_smart_home_w.jpg" alt="" imgfield="tn_img_1737399957003" src="https://busy.bar/img/tild3738-3163-4161-b731-303566383933__busybar_smart_home_w.jpg"> </p> </div>  <div data-elem-id="1737393860822" data-elem-type="text" data-field-top-value="216" data-field-left-value="543" data-field-height-value="72" data-field-width-value="772" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="89" data-field-left-res-320-value="15" data-field-width-res-320-value="286" data-field-top-res-420-value="112" data-field-left-res-420-value="18" data-field-width-res-420-value="386" data-field-top-res-640-value="127" data-field-left-res-640-value="40" data-field-width-res-640-value="451" data-field-top-res-1200-value="163" data-field-left-res-1200-value="323" data-field-width-res-1200-value="522" data-field-top-res-1440-value="194" data-field-left-res-1440-value="389" data-field-width-res-1440-value="619" data-field-top-res-1720-value="262" data-field-left-res-1720-value="481" data-field-height-res-1720-value="65" data-field-width-res-1720-value="684"> <p>Make your smart home react when you’re busy: pause music, turn on lights, and lock the door with just one button.</p> </div> <div data-elem-id="1737393898571" data-elem-type="text" data-field-top-value="310" data-field-left-value="543" data-field-height-value="72" data-field-width-value="741" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="160" data-field-left-res-320-value="15" data-field-width-res-320-value="289" data-field-top-res-420-value="196" data-field-left-res-420-value="18" data-field-width-res-420-value="393" data-field-top-res-640-value="197" data-field-left-res-640-value="40" data-field-width-res-640-value="410" data-field-top-res-1200-value="236" data-field-left-res-1200-value="323" data-field-width-res-1200-value="512" data-field-top-res-1440-value="274" data-field-left-res-1440-value="389" data-field-width-res-1440-value="608" data-field-top-res-1720-value="346" data-field-left-res-1720-value="481" data-field-height-res-1720-value="65" data-field-width-res-1720-value="673" data-field-container-res-1720-value="grid"> <p>BUSY Bar supports Matter®, a modern smart home protocol that connects to Apple Home and Google Home.</p> </div> <p data-elem-id="1737393860819" data-elem-type="text" data-field-top-value="110" data-field-left-value="543" data-field-height-value="72" data-field-width-value="759" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="14" data-field-width-res-320-value="320" data-field-top-res-420-value="55" data-field-left-res-420-value="18" data-field-height-res-420-value="88" data-field-width-res-420-value="442" data-field-axisy-res-420-value="top" data-field-container-res-420-value="grid" data-field-top-res-640-value="65" data-field-left-res-640-value="40" data-field-top-res-1200-value="86" data-field-left-res-1200-value="323" data-field-top-res-1440-value="108" data-field-left-res-1440-value="389" data-field-width-res-1440-value="663" data-field-top-res-1720-value="174" data-field-left-res-1720-value="481"> <h2 field="tn_text_1737393860819">Smart home integration</h2> </p> </div> <div data-artboard-recid="944071351" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1489" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="1160" data-artboard-height-res-420="1450" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="1350" data-artboard-height-res-1200="970" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="1168" data-artboard-height-res-1720="1238" id="rec944071351" data-animationappear="off" data-record-type="396" data-screen-min="980px">   <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="306" data-field-left-value="438" data-field-height-value="190" data-field-width-value="840" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="323" data-field-left-res-320-value="14" data-field-height-res-320-value="260" data-field-width-res-320-value="288" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="425" data-field-left-res-420-value="14" data-field-height-res-420-value="232" data-field-width-res-420-value="391" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="416" data-field-left-res-640-value="40" data-field-width-res-640-value="579" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="173" data-field-left-res-1200-value="260" data-field-width-res-1200-value="631" data-field-top-res-1440-value="221" data-field-left-res-1440-value="308" data-field-width-res-1440-value="696" data-field-top-res-1720-value="240" data-field-left-res-1720-value="309" data-field-width-res-1720-value="743"> <h3 field="tn_text_1723037385412">Matter is a modern smart home protocol developed by Apple, Google, Amazon, and Samsung to address the issue of smart device incompatibility and security. Designed for seamless interoperability, Matter ensures that supported devices can easily integrate into all major smart home platforms without the need for additional apps or software.</h3> </p> <p data-elem-id="1737403292305" data-elem-type="text" data-field-top-value="528" data-field-left-value="377" data-field-height-value="64" data-field-width-value="722" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="499" data-field-left-res-320-value="15" data-field-width-res-320-value="288" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="593" data-field-left-res-420-value="14" data-field-height-res-420-value="78" data-field-width-res-420-value="390" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="576" data-field-left-res-640-value="40" data-field-width-res-640-value="506" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="350" data-field-left-res-1200-value="253" data-field-width-res-1200-value="614" data-field-top-res-1440-value="412" data-field-left-res-1440-value="291" data-field-width-res-1440-value="669" data-field-top-res-1720-value="441" data-field-left-res-1720-value="253" data-field-width-res-1720-value="632"> <h3 field="tn_text_1737403292305">We are a member of the Connectivity Standards Alliance (CSA-IoT), and our products are currently in the process of being certified to work with the Matter standard.</h3> </p> <div data-elem-id="1737404085781" data-elem-type="image" data-field-top-value="1216" data-field-left-value="-669" data-field-height-value="91" data-field-width-value="356" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="397" data-field-fileheight-value="101" data-field-heightmode-value="hug" data-field-top-res-320-value="1066" data-field-left-res-320-value="16" data-field-height-res-320-value="45" data-field-width-res-320-value="178" data-field-top-res-420-value="1325" data-field-left-res-420-value="15" data-field-height-res-420-value="65" data-field-width-res-420-value="256" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-widthmode-res-420-value="fixed" data-field-top-res-640-value="1235" data-field-left-res-640-value="40" data-field-height-res-640-value="51" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="815" data-field-left-res-1200-value="-457" data-field-height-res-1200-value="51" data-field-width-res-1200-value="200" data-field-widthmode-res-1200-value="fixed" data-field-top-res-1440-value="960" data-field-left-res-1440-value="-513" data-field-height-res-1440-value="83" data-field-width-res-1440-value="328" data-field-widthmode-res-1440-value="fixed" data-field-top-res-1720-value="1009" data-field-left-res-1720-value="-595" data-field-height-res-1720-value="83" data-field-width-res-1720-value="328" data-field-widthmode-res-1720-value="fixed"> <p><img data-original="img/tild6633-3538-4565-b631-646332363633__image_1.png" alt="" imgfield="tn_img_1737404085781" src="https://busy.bar/img/tild6633-3538-4565-b631-646332363633__image_1.png"> </p> </div> <p data-elem-id="1737403889273" data-elem-type="text" data-field-top-value="1096" data-field-left-value="-513" data-field-height-value="64" data-field-width-value="668" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="1006" data-field-left-res-320-value="16" data-field-width-res-320-value="288" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="1244" data-field-left-res-420-value="15" data-field-height-res-420-value="78" data-field-width-res-420-value="390" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="1173" data-field-left-res-640-value="40" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="735" data-field-left-res-1200-value="-277" data-field-width-res-1200-value="557" data-field-top-res-1440-value="847" data-field-left-res-1440-value="-344" data-field-width-res-1440-value="669" data-field-top-res-1720-value="922" data-field-left-res-1720-value="-481" data-field-width-res-1720-value="555"> <h3 field="tn_text_1737403889273">Home Assistant is the most popular open-source smart home hub, with a wide range of integrations, powerful automation, and local control.</h3> </p> <p data-elem-id="1737403889268" data-elem-type="text" data-field-top-value="912" data-field-left-value="-425" data-field-height-value="152" data-field-width-value="840" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="870" data-field-left-res-320-value="15" data-field-height-res-320-value="260" data-field-width-res-320-value="288" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="1076" data-field-left-res-420-value="15" data-field-height-res-420-value="232" data-field-width-res-420-value="391" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="1040" data-field-left-res-640-value="40" data-field-width-res-640-value="565" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="587" data-field-left-res-1200-value="-243" data-field-width-res-1200-value="631" data-field-top-res-1440-value="687" data-field-left-res-1440-value="-328" data-field-width-res-1440-value="696" data-field-top-res-1720-value="755" data-field-left-res-1720-value="-381" data-field-height-res-1720-value="140" data-field-width-res-1720-value="755" data-field-container-res-1720-value="grid"> <h3 field="tn_text_1737403889268">BUSY Bar can be natively integrated into Home Assistant via its HTTP API, serving as an automation trigger when you’re busy. It can also act as an output device triggered by actions from Home Assistant, such as displaying a message when your wash﻿ing machine has finished its cycle.</h3> </p> <p data-elem-id="1737403889276" data-elem-type="text" data-field-top-value="835" data-field-left-value="-422" data-field-height-value="53" data-field-width-value="850" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="592" data-field-left-res-320-value="2" data-field-width-res-320-value="317" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="706" data-field-left-res-420-value="17" data-field-height-res-420-value="38" data-field-width-res-420-value="387" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="691" data-field-left-res-640-value="40" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="531" data-field-left-res-1200-value="-264" data-field-top-res-1440-value="621" data-field-left-res-1440-value="-384" data-field-width-res-1440-value="585" data-field-top-res-1720-value="687" data-field-left-res-1720-value="-334"> <h2 field="tn_text_1737403889276">Home Assistant support</h2> </p>  <p data-elem-id="1727702192959" data-elem-type="text" data-field-top-value="229" data-field-left-value="441" data-field-height-value="53" data-field-width-value="850" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="2" data-field-width-res-320-value="317" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="55" data-field-left-res-420-value="17" data-field-height-res-420-value="38" data-field-width-res-420-value="387" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="67" data-field-left-res-640-value="40" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="117" data-field-left-res-1200-value="184" data-field-top-res-1440-value="155" data-field-left-res-1440-value="199" data-field-width-res-1440-value="476" data-field-top-res-1720-value="172" data-field-left-res-1720-value="362"> <h2 field="tn_text_1727702192959">What is Matter protocol?</h2> </p>  </div> <div data-artboard-recid="944071921" data-artboard-screens="320,420,640,1200" data-artboard-height="970" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="610" data-artboard-height-res-420="760" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="750" id="rec944071921" data-animationappear="off" data-record-type="396" data-screen-max="980px">   <p data-elem-id="1723037385412" data-elem-type="text" data-field-top-value="173" data-field-left-value="260" data-field-height-value="145" data-field-width-value="631" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="83" data-field-left-res-320-value="14" data-field-height-res-320-value="260" data-field-width-res-320-value="282" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="110" data-field-left-res-420-value="18" data-field-height-res-420-value="232" data-field-width-res-420-value="380" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="135" data-field-left-res-640-value="138" data-field-width-res-640-value="474" data-field-axisx-res-640-value="left"> <h3 field="tn_text_1723037385412">Matter is a modern smart home protocol developed by Apple, Google, Amazon, and Samsung to address the issue of smart device incompatibility and security. Designed for seamless interoperability, Matter ensures that supported devices can easily integrate into all major smart home platforms without the need for additional apps or software.</h3> </p> <p data-elem-id="1737403292305" data-elem-type="text" data-field-top-value="350" data-field-left-value="253" data-field-height-value="58" data-field-width-value="614" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="259" data-field-left-res-320-value="15" data-field-width-res-320-value="288" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="305" data-field-left-res-420-value="18" data-field-height-res-420-value="78" data-field-width-res-420-value="308" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="318" data-field-left-res-640-value="138" data-field-height-res-640-value="44" data-field-width-res-640-value="468" data-field-axisx-res-640-value="left" data-field-container-res-640-value="grid" data-field-heightunits-res-640-value="px" data-field-textfit-res-640-value="autoheight"> <h3 field="tn_text_1737403292305">We are a member of the Connectivity Standards Alliance (CSA-IoT), and our products are currently in the process of being certified to work with the Matter standard.</h3> </p> <p data-elem-id="1737403889273" data-elem-type="text" data-field-top-value="735" data-field-left-value="-277" data-field-height-value="58" data-field-width-value="557" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="526" data-field-left-res-320-value="16" data-field-width-res-320-value="288" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="655" data-field-left-res-420-value="18" data-field-height-res-420-value="78" data-field-width-res-420-value="304" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="646" data-field-left-res-640-value="138" data-field-width-res-640-value="419" data-field-axisx-res-640-value="left"> <h3 field="tn_text_1737403889273">Home Assistant is the most popular open-source smart home hub, with a wide range of integrations, powerful automation, and local control.</h3> </p> <p data-elem-id="1727702192959" data-elem-type="text" data-field-top-value="117" data-field-left-value="371" data-field-height-value="40" data-field-width-value="476" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="47" data-field-width-res-320-value="317" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="60" data-field-left-res-420-value="68" data-field-height-res-420-value="38" data-field-width-res-420-value="387" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="67" data-field-left-res-640-value="40" data-field-axisx-res-640-value="left"> <h2 field="tn_text_1727702192959">What is Matter protocol?</h2> </p> <p data-elem-id="1737403889268" data-elem-type="text" data-field-top-value="587" data-field-left-value="-243" data-field-height-value="116" data-field-width-value="631" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="390" data-field-left-res-320-value="15" data-field-height-res-320-value="260" data-field-width-res-320-value="296" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="485" data-field-left-res-420-value="18" data-field-height-res-420-value="232" data-field-width-res-420-value="373" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="491" data-field-left-res-640-value="138" data-field-width-res-640-value="445" data-field-axisx-res-640-value="left"> <h3 field="tn_text_1737403889268">BUSY Bar can be natively integrated into Home Assistant via its HTTP API, serving as an automation trigger when you’re busy. It can also act as an output device triggered by actions from Home Assistant, such as displaying a message when your washing machine has finished its cycle.</h3> </p> <p data-elem-id="1737403889276" data-elem-type="text" data-field-top-value="531" data-field-left-value="-132" data-field-height-value="40" data-field-width-value="585" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="352" data-field-left-res-320-value="47" data-field-width-res-320-value="317" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="435" data-field-left-res-420-value="68" data-field-height-res-420-value="38" data-field-width-res-420-value="387" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="421" data-field-left-res-640-value="40" data-field-axisx-res-640-value="left"> <h2 field="tn_text_1737403889276">Home Assistant support</h2> </p>   </div> <div data-artboard-recid="944072466" data-artboard-screens="1200,1440,1720,1920" data-artboard-height="1129" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-1200="800" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="918" data-artboard-height-res-1720="947" id="rec944072466" data-animationappear="off" data-record-type="396" data-screen-min="1200px">      <p data-elem-id="1742214189322" data-elem-type="text" data-field-top-value="150" data-field-left-value="0" data-field-height-value="72" data-field-width-value="628" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-1200-value="116" data-field-left-res-1200-value="0" data-field-width-res-1200-value="586" data-field-top-res-1440-value="128" data-field-left-res-1440-value="0" data-field-width-res-1440-value="576" data-field-top-res-1720-value="145" data-field-left-res-1720-value="0"> <h2 field="tn_text_1742214189322">Developer-friendly</h2> </p> <p data-elem-id="1742214083231" data-elem-type="text" data-field-top-value="252" data-field-left-value="28" data-field-height-value="76" data-field-width-value="626" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-1200-value="204" data-field-left-res-1200-value="1" data-field-width-res-1200-value="438" data-field-top-res-1440-value="217" data-field-left-res-1440-value="11" data-field-width-res-1440-value="506" data-field-top-res-1720-value="241" data-field-left-res-1720-value="-5" data-field-width-res-1720-value="491"> <h3 field="tn_text_1742214083231">Right out of the box, BUSY Bar comes with an Open API, ready for integration into your project.</h3> </p>  <p data-elem-id="1742216414290" data-elem-type="text" data-field-top-value="824" data-field-left-value="41" data-field-height-value="64" data-field-width-value="420" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-1200-value="605" data-field-left-res-1200-value="-7" data-field-height-res-1200-value="58" data-field-width-res-1200-value="266" data-field-heightunits-res-1200-value="px" data-field-textfit-res-1200-value="autoheight" data-field-widthmode-res-1200-value="fixed" data-field-top-res-1440-value="684" data-field-left-res-1440-value="-12" data-field-height-res-1440-value="64" data-field-width-res-1440-value="303" data-field-top-res-1720-value="713" data-field-left-res-1720-value="185" data-field-height-res-1720-value="54" data-field-width-res-1720-value="276"> <h3 field="tn_text_1742216414290">Connect it t﻿o your smart home system for<br>seamless automation</h3> </p>  <div data-elem-id="1742216489748" data-elem-type="image" data-field-top-value="779" data-field-left-value="843" data-field-height-value="32" data-field-width-value="101" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="385" data-field-fileheight-value="121" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-1200-value="567" data-field-left-res-1200-value="530" data-field-height-res-1200-value="25" data-field-width-res-1200-value="78" data-field-widthmode-res-1200-value="fixed" data-field-heightmode-res-1200-value="hug" data-field-top-res-1440-value="643" data-field-left-res-1440-value="604" data-field-height-res-1440-value="27" data-field-width-res-1440-value="87" data-field-widthmode-res-1440-value="fixed" data-field-heightmode-res-1440-value="hug" data-field-top-res-1720-value="675" data-field-left-res-1720-value="752" data-field-height-res-1720-value="24" data-field-width-res-1720-value="77" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="hug"> <p><img data-original="img/tild6430-6561-4135-b237-663463363431__group_48097132.png" alt="" imgfield="tn_img_1742216489748" src="https://busy.bar/img/tild6430-6561-4135-b237-663463363431__group_48097132.png"> </p> </div> <p data-elem-id="1742214658736" data-elem-type="text" data-field-top-value="824" data-field-left-value="561" data-field-height-value="64" data-field-width-value="329" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-1200-value="606" data-field-left-res-1200-value="328" data-field-height-res-1200-value="58" data-field-width-res-1200-value="290" data-field-heightunits-res-1200-value="px" data-field-textfit-res-1200-value="autoheight" data-field-widthmode-res-1200-value="fixed" data-field-top-res-1440-value="684" data-field-left-res-1440-value="363" data-field-height-res-1440-value="64" data-field-width-res-1440-value="327" data-field-top-res-1720-value="713" data-field-left-res-1720-value="532" data-field-height-res-1720-value="54" data-field-width-res-1720-value="274"> <h3 field="tn_text_1742214658736">Display custom messages and images using JavaScript, GO, or Python</h3> </p>         </div> <div data-artboard-recid="944072701" data-artboard-screens="320,420,640" data-artboard-height="1050" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="660" data-artboard-height-res-420="830" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" id="rec944072701" data-animationappear="off" data-record-type="396" data-screen-max="1200px">      <p data-elem-id="1742214189322" data-elem-type="text" data-field-top-value="78" data-field-left-value="40" data-field-height-value="42" data-field-width-value="628" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="14" data-field-width-res-320-value="306" data-field-top-res-420-value="65" data-field-left-res-420-value="18" data-field-width-res-420-value="369" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid"> <h2 field="tn_text_1742214189322">Developer-friendly</h2> </p> <p data-elem-id="1742214083231" data-elem-type="text" data-field-top-value="137" data-field-left-value="40" data-field-height-value="52" data-field-width-value="435" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="87" data-field-left-res-320-value="14" data-field-height-res-320-value="260" data-field-width-res-320-value="286" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="117" data-field-left-res-420-value="18" data-field-height-res-420-value="232" data-field-width-res-420-value="388" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid"> <h3 field="tn_text_1742214083231">Right out of the box, BUSY Bar comes with an Open API, ready for integration into your project.</h3> </p> <p data-elem-id="1742216437125" data-elem-type="text" data-field-top-value="638" data-field-left-value="287" data-field-height-value="44" data-field-width-value="220" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="413" data-field-left-res-320-value="40" data-field-height-res-320-value="48" data-field-width-res-320-value="236" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="516" data-field-left-res-420-value="61" data-field-height-res-420-value="54" data-field-width-res-420-value="287" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid"> <h3 field="tn_text_1742216437125">Offline API access w﻿ithout internet,<br>or via BUSY App server</h3> </p>  <p data-elem-id="1742214658736" data-elem-type="text" data-field-top-value="492" data-field-left-value="137" data-field-height-value="44" data-field-width-value="232" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="315" data-field-left-res-320-value="49" data-field-height-res-320-value="48" data-field-width-res-320-value="165" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="401" data-field-left-res-420-value="74" data-field-height-res-420-value="54" data-field-width-res-420-value="195" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid"> <h3 field="tn_text_1742214658736">Ready to use SDK and Libs for Python, Javascript and Go</h3> </p> <div data-elem-id="1742216489748" data-elem-type="image" data-field-top-value="462" data-field-left-value="311" data-field-height-value="21" data-field-width-value="66" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="385" data-field-fileheight-value="121" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="294" data-field-left-res-320-value="175" data-field-height-res-320-value="18" data-field-width-res-320-value="58" data-field-axisy-res-320-value="top" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-topunits-res-320-value="px" data-field-leftunits-res-320-value="px" data-field-heightunits-res-320-value="px" data-field-widthunits-res-320-value="px" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="hug" data-field-top-res-420-value="374" data-field-left-res-420-value="239" data-field-height-res-420-value="17" data-field-width-res-420-value="54" data-field-widthmode-res-420-value="fixed"> <p><img data-original="img/tild6430-6561-4135-b237-663463363431__group_48097132.png" alt="" imgfield="tn_img_1742216489748" src="https://busy.bar/img/tild6430-6561-4135-b237-663463363431__group_48097132.png"> </p> </div>          </div> <div data-artboard-recid="944073386" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="958" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="720" data-artboard-height-res-420="809" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-640="1020" data-artboard-height-res-1200="680" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="788" data-artboard-height-res-1720="797" id="rec944073386" data-animationappear="off" data-record-type="396">    <p data-elem-id="1742224995812" data-elem-type="text" data-field-top-value="121" data-field-left-value="-423" data-field-height-value="53" data-field-width-value="850" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="45" data-field-left-res-320-value="15" data-field-width-res-320-value="287" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="60" data-field-left-res-420-value="18" data-field-height-res-420-value="44" data-field-width-res-420-value="393" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-top-res-640-value="82" data-field-left-res-640-value="40" data-field-width-res-640-value="569" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="92" data-field-left-res-1200-value="-271" data-field-top-res-1440-value="98" data-field-left-res-1440-value="-389" data-field-width-res-1440-value="581" data-field-top-res-1720-value="88" data-field-left-res-1720-value="-464" data-field-width-res-1720-value="593"> <h2 field="tn_text_1742224995812">Multiple network connectivity</h2> </p> <p data-elem-id="1742214083231" data-elem-type="text" data-field-top-value="119" data-field-left-value="526" data-field-height-value="38" data-field-width-value="840" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="152" data-field-left-res-320-value="15" data-field-height-res-320-value="260" data-field-width-res-320-value="252" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="206" data-field-left-res-420-value="18" data-field-height-res-420-value="54" data-field-width-res-420-value="397" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-heightunits-res-420-value="px" data-field-textfit-res-420-value="autoheight" data-field-top-res-640-value="224" data-field-left-res-640-value="40" data-field-width-res-640-value="503" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="97" data-field-left-res-1200-value="391" data-field-height-res-1200-value="29" data-field-width-res-1200-value="631" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="102" data-field-left-res-1440-value="409" data-field-width-res-1440-value="696" data-field-top-res-1720-value="89" data-field-left-res-1720-value="518" data-field-width-res-1720-value="802"> <h3 field="tn_text_1742214083231">You can connect to BUSY Bar in the following ways:</h3> </p> <p data-elem-id="1742228309799" data-elem-type="text" data-field-top-value="207" data-field-left-value="-503" data-field-height-value="76" data-field-width-value="689" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="113" data-field-left-res-320-value="15" data-field-height-res-320-value="260" data-field-width-res-320-value="268" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="156" data-field-left-res-420-value="18" data-field-height-res-420-value="232" data-field-width-res-420-value="359" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="148" data-field-left-res-640-value="40" data-field-width-res-640-value="510" data-field-axisx-res-640-value="left" data-field-top-res-1200-value="148" data-field-left-res-1200-value="-298" data-field-width-res-1200-value="525" data-field-top-res-1440-value="171" data-field-left-res-1440-value="-384" data-field-width-res-1440-value="592" data-field-top-res-1720-value="160" data-field-left-res-1720-value="-467" data-field-width-res-1720-value="586"> <h3 field="tn_text_1742228309799">Connect BUSY Bar to your project using Open API and any type of network connection: USB, LAN, or Cloud.</h3> </p>    <div id="molecule-174223026611652060" data-fields="top,left" data-group-id="174223026611652060" data-group-type-value="physical" data-group-top-value="211" data-group-left-value="1217" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="column" data-group-flexalignitems="flex-start" data-group-widthmode="fixed" data-group-heightmode="hug" data-group-height-value="222" data-group-width-value="572" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="547" data-group-left-res-320-value="71" data-group-height-res-320-value="122" data-group-width-res-320-value="227" data-group-widthmode-res-320="fixed" data-group-top-res-420-value="651" data-group-left-res-420-value="94" data-group-height-res-420-value="115" data-group-width-res-420-value="572" data-group-top-res-640-value="294" data-group-left-res-640-value="154" data-group-height-res-640-value="160" data-group-width-res-640-value="572" data-group-top-res-1200-value="156" data-group-left-res-1200-value="788" data-group-height-res-1200-value="161" data-group-width-res-1200-value="572" data-group-top-res-1440-value="176" data-group-left-res-1440-value="913" data-group-height-res-1440-value="187" data-group-width-res-1440-value="572" data-group-top-res-1720-value="161" data-group-left-res-1720-value="1110" data-group-height-res-1720-value="189" data-group-width-res-1720-value="572" data-group-widthmode-res-1720="fill" data-group-heightmode-res-1720="hug" data-group-topunits-res-1720-value="px" data-group-leftunits-res-1720-value="px"> <p data-elem-id="1742230003041" data-elem-type="text" data-field-top-value="261" data-field-left-value="1217" data-field-height-value="64" data-field-width-value="512" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="fixedsize" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="571" data-field-left-res-320-value="71" data-field-height-res-320-value="45" data-field-width-res-320-value="242" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="679" data-field-left-res-420-value="94" data-field-height-res-420-value="30" data-field-width-res-420-value="280" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="332" data-field-left-res-640-value="154" data-field-height-res-640-value="44" data-field-top-res-1200-value="194" data-field-left-res-1200-value="788" data-field-height-res-1200-value="45" data-field-width-res-1200-value="376" data-field-heightunits-res-1200-value="px" data-field-textfit-res-1200-value="fixedsize" data-field-widthmode-res-1200-value="fixed" data-field-heightmode-res-1200-value="fixed" data-field-top-res-1440-value="216" data-field-left-res-1440-value="913" data-field-height-res-1440-value="54" data-field-width-res-1440-value="475" data-field-textfit-res-1440-value="fixedsize" data-field-widthmode-res-1440-value="fixed" data-field-heightmode-res-1440-value="fixed" data-field-top-res-1720-value="203" data-field-left-res-1720-value="1110" data-field-height-res-1720-value="54" data-field-width-res-1720-value="476" data-field-textfit-res-1720-value="fixedsize" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <h3 field="tn_text_1742230003041">Connect the device to your BUSY App account for remote access via the interne﻿t, or connect to your own server.</h3> </p> <div data-elem-id="1742230066198" data-elem-type="text" data-field-top-value="337" data-field-left-value="1217" data-field-height-value="96" data-field-width-value="572" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fill" data-field-heightmode-value="fixed" data-field-top-res-320-value="624" data-field-left-res-320-value="71" data-field-height-res-320-value="72" data-field-width-res-320-value="264" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-top-res-420-value="721" data-field-left-res-420-value="94" data-field-height-res-420-value="54" data-field-width-res-420-value="294" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="388" data-field-left-res-640-value="154" data-field-top-res-1200-value="251" data-field-left-res-1200-value="788" data-field-height-res-1200-value="58" data-field-width-res-1200-value="290" data-field-heightunits-res-1200-value="px" data-field-textfit-res-1200-value="autoheight" data-field-widthmode-res-1200-value="fixed" data-field-top-res-1440-value="282" data-field-left-res-1440-value="913" data-field-height-res-1440-value="64" data-field-width-res-1440-value="572" data-field-top-res-1720-value="269" data-field-left-res-1720-value="1110" data-field-width-res-1720-value="572"> <h3 field="tn_text_1742230066198"><ul><li data-list="bullet">Remote access behind the NAT</li><li data-list="bullet">Connect to any cloud via MQTT</li><li data-list="bullet">No vendor lock-in</li></ul></h3> </div> </div> <div id="molecule-174223024933182770" data-fields="top,left" data-group-id="174223024933182770" data-group-type-value="physical" data-group-top-value="504" data-group-left-value="1217" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="column" data-group-flexalignitems="flex-start" data-group-widthmode="fixed" data-group-heightmode="hug" data-group-height-value="114" data-group-width-value="572" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="453" data-group-left-res-320-value="71" data-group-height-res-320-value="69" data-group-top-res-420-value="555" data-group-left-res-420-value="94" data-group-height-res-420-value="73" data-group-top-res-640-value="488" data-group-left-res-640-value="154" data-group-height-res-640-value="82" data-group-top-res-1200-value="365" data-group-left-res-1200-value="788" data-group-height-res-1200-value="82" data-group-top-res-1440-value="423" data-group-left-res-1440-value="913" data-group-height-res-1440-value="126" data-group-top-res-1720-value="413" data-group-left-res-1720-value="1110" data-group-height-res-1720-value="96">  <p data-elem-id="1742230229283" data-elem-type="text" data-field-top-value="554" data-field-left-value="1217" data-field-height-value="64" data-field-width-value="604" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="fixedsize" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="477" data-field-left-res-320-value="71" data-field-height-res-320-value="45" data-field-width-res-320-value="227" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="583" data-field-left-res-420-value="94" data-field-height-res-420-value="45" data-field-width-res-420-value="294" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="526" data-field-left-res-640-value="154" data-field-height-res-640-value="44" data-field-top-res-1200-value="403" data-field-left-res-1200-value="788" data-field-height-res-1200-value="44" data-field-width-res-1200-value="415" data-field-heightunits-res-1200-value="px" data-field-textfit-res-1200-value="fixedsize" data-field-widthmode-res-1200-value="fixed" data-field-heightmode-res-1200-value="fixed" data-field-top-res-1440-value="468" data-field-left-res-1440-value="913" data-field-height-res-1440-value="81" data-field-width-res-1440-value="495" data-field-textfit-res-1440-value="fixedsize" data-field-widthmode-res-1440-value="fixed" data-field-heightmode-res-1440-value="fixed" data-field-top-res-1720-value="455" data-field-left-res-1720-value="1110" data-field-height-res-1720-value="54" data-field-width-res-1720-value="520" data-field-textfit-res-1720-value="fixedsize" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <h3 field="tn_text_1742230229283">Get full access to the HTTP API, web interface and Matter smart hom﻿e protocol in your local network even if BUSY Bar has no internet access.</h3> </p> </div> <div id="molecule-174223027576529550" data-fields="top,left" data-group-id="174223027576529550" data-group-type-value="physical" data-group-top-value="690" data-group-left-value="1217" data-group-padding="0 0 0 0" data-group-flex="auto" data-group-flexdirection="column" data-group-flexalignitems="flex-start" data-group-widthmode="fixed" data-group-heightmode="hug" data-group-height-value="114" data-group-width-value="572" data-group-topunits-value="px" data-group-leftunits-value="px" data-group-top-res-320-value="198" data-group-left-res-320-value="71" data-group-height-res-320-value="69" data-group-width-res-320-value="235" data-group-widthmode-res-320="fixed" data-group-top-res-420-value="260" data-group-left-res-420-value="94" data-group-height-res-420-value="58" data-group-top-res-640-value="854" data-group-left-res-640-value="154" data-group-height-res-640-value="82" data-group-width-res-640-value="572" data-group-top-res-1200-value="497" data-group-left-res-1200-value="788" data-group-height-res-1200-value="82" data-group-top-res-1440-value="585" data-group-left-res-1440-value="913" data-group-height-res-1440-value="100" data-group-top-res-1720-value="572" data-group-left-res-1720-value="1110" data-group-height-res-1720-value="96">  <p data-elem-id="1742230275797" data-elem-type="text" data-field-top-value="740" data-field-left-value="1217" data-field-height-value="64" data-field-width-value="572" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fill" data-field-heightmode-value="fixed" data-field-top-res-320-value="222" data-field-left-res-320-value="71" data-field-height-res-320-value="45" data-field-width-res-320-value="232" data-field-axisx-res-320-value="left" data-field-container-res-320-value="grid" data-field-textfit-res-320-value="fixedsize" data-field-widthmode-res-320-value="fixed" data-field-heightmode-res-320-value="fixed" data-field-top-res-420-value="288" data-field-left-res-420-value="94" data-field-height-res-420-value="30" data-field-width-res-420-value="286" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-textfit-res-420-value="fixedsize" data-field-widthmode-res-420-value="fixed" data-field-heightmode-res-420-value="fixed" data-field-top-res-640-value="892" data-field-left-res-640-value="154" data-field-height-res-640-value="44" data-field-width-res-640-value="370" data-field-container-res-640-value="grid" data-field-textfit-res-640-value="fixedsize" data-field-widthmode-res-640-value="fixed" data-field-heightmode-res-640-value="fixed" data-field-top-res-1200-value="535" data-field-left-res-1200-value="788" data-field-height-res-1200-value="44" data-field-width-res-1200-value="370" data-field-heightunits-res-1200-value="px" data-field-textfit-res-1200-value="fixedsize" data-field-widthmode-res-1200-value="fixed" data-field-heightmode-res-1200-value="fixed" data-field-top-res-1440-value="630" data-field-left-res-1440-value="913" data-field-height-res-1440-value="55" data-field-width-res-1440-value="470" data-field-textfit-res-1440-value="fixedsize" data-field-widthmode-res-1440-value="fixed" data-field-heightmode-res-1440-value="fixed" data-field-top-res-1720-value="614" data-field-left-res-1720-value="1110" data-field-height-res-1720-value="54" data-field-width-res-1720-value="470" data-field-textfit-res-1720-value="fixedsize" data-field-widthmode-res-1720-value="fixed" data-field-heightmode-res-1720-value="fixed"> <h3 field="tn_text_1742230275797">Connect﻿ to PC to create a Virtual LAN interface, allowing access to the local web interface and HTTP API without Wi-Fi or internet.</h3> </p> </div>                     </div> <div data-elem-id="1744131702348" data-elem-type="text" data-field-top-value="-230" data-field-left-value="339" data-field-height-value="87" data-field-width-value="340" data-field-axisy-value="center" data-field-axisx-value="center" data-field-container-value="window" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-widthmode-value="fixed" data-field-heightmode-value="fixed" data-field-top-res-320-value="80" data-field-left-res-320-value="66" data-field-height-res-320-value="83" data-field-width-res-320-value="186" data-field-top-res-420-value="94" data-field-left-res-420-value="83" data-field-height-res-420-value="77" data-field-width-res-420-value="225" data-field-axisy-res-420-value="top" data-field-axisx-res-420-value="left" data-field-container-res-420-value="grid" data-field-top-res-640-value="-123" data-field-left-res-640-value="0" data-field-top-res-1200-value="-139" data-field-left-res-1200-value="166" data-field-height-res-1200-value="51" data-field-width-res-1200-value="230" data-field-top-res-1440-value="-170" data-field-left-res-1440-value="194" data-field-height-res-1440-value="51" data-field-width-res-1440-value="293" data-field-top-res-1720-value="-209" data-field-left-res-1720-value="255" data-field-height-res-1720-value="48" data-field-width-res-1720-value="313" data-field-container-res-1720-value="grid" data-field-heightunits-res-1720-value="px" data-field-textfit-res-1720-value="autoheight" data-artboard-recid="944073911" data-artboard-screens="320,420,640,1200,1440,1720,1920" data-artboard-height="1100" data-artboard-valign="center" data-artboard-height_vh="100" data-artboard-upscale="grid" data-artboard-height-res-320="360" data-artboard-height-res-420="490" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-1200="600" data-artboard-height-res-1440="720" data-artboard-height-res-1720="840" id="rec944073911" data-animationappear="off" data-record-type="396"> <p>The device is&nbsp;connected via USB to&nbsp;the Wi-Fi router which reports the WAN port speed using the HTTP API.</p> </div> <div data-artboard-recid="945624736" data-artboard-screens="320,420,1200,1440,1720,1920" data-artboard-height="4540" data-artboard-valign="top" data-artboard-upscale="grid" data-artboard-height-res-320="1610" data-artboard-height-res-420="2117" data-artboard-height_vh-res-420="" data-artboard-upscale-res-420="window" data-artboard-height-res-1200="2880" data-artboard-height_vh-res-1200="" data-artboard-height-res-1440="3410" data-artboard-height-res-1720="4080" id="rec945624736" data-animationappear="off" data-record-type="396">   <div data-elem-id="1739545157855" data-elem-type="image" data-field-top-value="-314" data-field-left-value="1254" data-field-height-value="103" data-field-width-value="200" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1074" data-field-fileheight-value="551" data-field-heightmode-value="hug" data-field-top-res-320-value="282" data-field-height-res-320-value="164" data-field-width-res-320-value="320" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="391" data-field-left-res-420-value="0" data-field-height-res-420-value="215" data-field-width-res-420-value="420" data-field-widthmode-res-420-value="fixed" data-field-height-res-1200-value="103" data-field-height-res-1440-value="103" data-field-height-res-1720-value="103"> <p><img data-original="img/tild3635-3165-4334-b561-376130616265__battery_mob.jpg" alt="" imgfield="tn_img_1739545157855" src="https://busy.bar/img/tild3635-3165-4334-b561-376130616265__battery_mob.jpg"> </p> </div> <div data-elem-id="1739544945031" data-elem-type="image" data-field-top-value="-262" data-field-left-value="898" data-field-height-value="87" data-field-width-value="200" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1074" data-field-fileheight-value="465" data-field-heightmode-value="hug" data-field-top-res-320-value="116" data-field-left-res-320-value="0" data-field-height-res-320-value="139" data-field-width-res-320-value="320" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="155" data-field-left-res-420-value="0" data-field-height-res-420-value="182" data-field-width-res-420-value="420" data-field-widthmode-res-420-value="fixed" data-field-height-res-1200-value="87" data-field-height-res-1440-value="87" data-field-height-res-1720-value="87"> <p><img data-original="img/tild3638-3065-4165-a365-313832636137__main-mob.jpg" alt="" imgfield="tn_img_1739544945031" src="https://busy.bar/img/tild3638-3065-4165-a365-313832636137__main-mob.jpg"> </p> </div> <div data-elem-id="1739528719900" data-elem-type="image" data-field-top-value="396" data-field-left-value="76" data-field-height-value="579" data-field-width-value="751" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1417" data-field-fileheight-value="1092" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="191" data-field-height-res-320-value="183" data-field-top-res-420-value="171" data-field-left-res-420-value="-422" data-field-height-res-420-value="183" data-field-width-res-420-value="237" data-field-top-res-1200-value="249" data-field-left-res-1200-value="50" data-field-height-res-1200-value="360" data-field-width-res-1200-value="467" data-field-top-res-1440-value="296" data-field-left-res-1440-value="58" data-field-height-res-1440-value="435" data-field-width-res-1440-value="564" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="351" data-field-left-res-1720-value="68" data-field-height-res-1720-value="518" data-field-width-res-1720-value="672" data-field-widthmode-res-1720-value="fixed"> <p><img data-original="img/tild6537-6437-4332-b561-356530663233__main-view-1.jpg" alt="" imgfield="tn_img_1739528719900" src="https://busy.bar/img/tild6537-6437-4332-b561-356530663233__main-view-1.jpg"> </p> </div> <div data-elem-id="1739528854010" data-elem-type="image" data-field-top-value="457" data-field-left-value="994" data-field-height-value="422" data-field-width-value="830" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1661" data-field-fileheight-value="845" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="318" data-field-height-res-320-value="265" data-field-top-res-420-value="298" data-field-left-res-420-value="620" data-field-height-res-420-value="265" data-field-width-res-420-value="520" data-field-container-res-420-value="grid" data-field-top-res-1200-value="287" data-field-left-res-1200-value="620" data-field-height-res-1200-value="265" data-field-width-res-1200-value="520" data-field-top-res-1440-value="339" data-field-left-res-1440-value="740" data-field-height-res-1440-value="320" data-field-width-res-1440-value="630" data-field-top-res-1720-value="410" data-field-left-res-1720-value="880" data-field-height-res-1720-value="378" data-field-width-res-1720-value="743" data-field-widthmode-res-1720-value="fixed"> <p><img data-original="img/tild6531-3064-4632-b365-313637643939__battery-usb.jpg" alt="" imgfield="tn_img_1739528854010" src="https://busy.bar/img/tild6531-3064-4632-b365-313637643939__battery-usb.jpg"> </p> </div> <div data-elem-id="1739529325805" data-elem-type="image" data-field-top-value="1398" data-field-left-value="280" data-field-height-value="952" data-field-width-value="1367" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1680" data-field-fileheight-value="1170" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="459" data-field-height-res-320-value="225" data-field-top-res-420-value="439" data-field-left-res-420-value="-482" data-field-height-res-420-value="225" data-field-width-res-420-value="323" data-field-top-res-1200-value="888" data-field-left-res-1200-value="172" data-field-height-res-1200-value="598" data-field-width-res-1200-value="858" data-field-top-res-1440-value="1063" data-field-left-res-1440-value="205" data-field-height-res-1440-value="719" data-field-width-res-1440-value="1033" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="1275" data-field-left-res-1720-value="248" data-field-height-res-1720-value="852" data-field-width-res-1720-value="1224" data-field-widthmode-res-1720-value="fixed"> <p><img data-original="img/tild3934-3731-4861-b232-346539346266__mech_.jpg" alt="" imgfield="tn_img_1739529325805" src="https://busy.bar/img/tild3934-3731-4861-b232-346539346266__mech_.jpg"> </p> </div> <div data-elem-id="1739529842813" data-elem-type="image" data-field-top-value="2821" data-field-left-value="-594" data-field-height-value="516" data-field-width-value="301" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1088" data-field-fileheight-value="1866" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="881" data-field-height-res-320-value="549" data-field-width-res-320-value="320" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="1159" data-field-left-res-420-value="0" data-field-height-res-420-value="720" data-field-width-res-420-value="420" data-field-widthmode-res-420-value="fixed" data-field-top-res-1200-value="2939" data-field-left-res-1200-value="-28" data-field-height-res-1200-value="326" data-field-width-res-1200-value="190" data-field-top-res-1440-value="3762" data-field-left-res-1440-value="425" data-field-height-res-1440-value="300" data-field-width-res-1440-value="175" data-field-top-res-1720-value="4260" data-field-left-res-1720-value="58" data-field-height-res-1720-value="280" data-field-width-res-1720-value="163" data-field-widthmode-res-1720-value="fixed"> <p><img data-original="img/tild3637-3263-4161-a566-323461626665__mount.jpg" alt="" imgfield="tn_img_1739529842813" src="https://busy.bar/img/tild3637-3263-4161-a566-323461626665__mount.jpg"> </p> </div> <div data-elem-id="1739546150741" data-elem-type="image" data-field-top-value="2792" data-field-left-value="19" data-field-height-value="1132" data-field-width-value="995" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1536" data-field-fileheight-value="1748" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="1211" data-field-height-res-320-value="478" data-field-top-res-420-value="1191" data-field-left-res-420-value="-602" data-field-height-res-420-value="478" data-field-width-res-420-value="420" data-field-widthmode-res-420-value="fixed" data-field-top-res-1200-value="1745" data-field-left-res-1200-value="7" data-field-height-res-1200-value="739" data-field-width-res-1200-value="649" data-field-top-res-1440-value="2092" data-field-left-res-1440-value="-2" data-field-height-res-1440-value="894" data-field-width-res-1440-value="786" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="2523" data-field-left-res-1720-value="22" data-field-height-res-1720-value="1023" data-field-width-res-1720-value="899" data-field-widthmode-res-1720-value="fixed"> <p><img data-original="img/tild6261-6665-4339-a138-376233396237__group_48097145.jpg" alt="" imgfield="tn_img_1739546150741" src="https://busy.bar/img/tild6261-6665-4339-a138-376233396237__group_48097145.jpg"> </p> </div> <div data-elem-id="1739537039444" data-elem-type="image" data-field-top-value="3794" data-field-left-value="240" data-field-height-value="623" data-field-width-value="1444" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1680" data-field-fileheight-value="725" data-field-heightmode-value="hug" data-field-top-res-320-value="1409" data-field-height-res-320-value="138" data-field-width-res-320-value="320" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="1864" data-field-left-res-420-value="0" data-field-height-res-420-value="181" data-field-width-res-420-value="420" data-field-top-res-1200-value="2413" data-field-left-res-1200-value="148" data-field-height-res-1200-value="390" data-field-width-res-1200-value="904" data-field-top-res-1440-value="2880" data-field-left-res-1440-value="175" data-field-height-res-1440-value="472" data-field-width-res-1440-value="1094" data-field-top-res-1720-value="3439" data-field-left-res-1720-value="205" data-field-height-res-1720-value="565" data-field-width-res-1720-value="1310"> <p><img data-original="img/tild6530-3264-4435-b231-353932363963__in-the-box.jpg" alt="" imgfield="tn_img_1739537039444" src="https://busy.bar/img/tild6530-3264-4435-b231-353932363963__in-the-box.jpg"> </p> </div> <p data-elem-id="1739462284255" data-elem-type="text" data-field-top-value="169" data-field-left-value="532" data-field-height-value="86" data-field-width-value="857" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="60" data-field-left-res-320-value="2" data-field-top-res-420-value="80" data-field-left-res-420-value="52" data-field-width-res-420-value="316" data-field-axisy-res-420-value="top" data-field-top-res-1200-value="100" data-field-left-res-1200-value="280" data-field-top-res-1440-value="124" data-field-left-res-1440-value="400" data-field-width-res-1440-value="641" data-field-top-res-1720-value="140" data-field-left-res-1720-value="462" data-field-width-res-1720-value="796"> <h2 field="tn_text_1739462284255">Tech specs</h2> </p> <div data-elem-id="1739537392912" data-elem-type="text" data-field-top-value="2837" data-field-left-value="672" data-field-height-value="72" data-field-width-value="577" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="893" data-field-left-res-320-value="14" data-field-width-res-320-value="259" data-field-top-res-420-value="1193" data-field-left-res-420-value="22" data-field-width-res-420-value="317" data-field-top-res-1200-value="1788" data-field-left-res-1200-value="386" data-field-width-res-1200-value="428" data-field-top-res-1440-value="2147" data-field-left-res-1440-value="482" data-field-height-res-1440-value="60" data-field-width-res-1440-value="477" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="2574" data-field-left-res-1720-value="597" data-field-height-res-1720-value="65" data-field-width-res-1720-value="527"> <p>Install BUSY ﻿Bar on any surface, such as walls, doors, and monitors. All required mounts are included.</p> </div> <p data-elem-id="1739537196572" data-elem-type="text" data-field-top-value="2769" data-field-left-value="-1" data-field-height-value="53" data-field-width-value="433" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="856" data-field-left-res-320-value="-20" data-field-width-res-320-value="252" data-field-top-res-420-value="1145" data-field-left-res-420-value="28" data-field-top-res-1200-value="1733" data-field-left-res-1200-value="1" data-field-top-res-1440-value="2089" data-field-left-res-1440-value="1" data-field-top-res-1720-value="2506" data-field-left-res-1720-value="1"> <h2 field="tn_text_1739537196572">Mount any﻿where</h2> </p>     <div data-elem-id="1739537757389" data-elem-type="text" data-field-top-value="1086" data-field-left-value="1259" data-field-height-value="81" data-field-width-value="289" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="449" data-field-left-res-320-value="185" data-field-top-res-420-value="606" data-field-left-res-420-value="232" data-field-width-res-420-value="161" data-field-top-res-1200-value="679" data-field-left-res-1200-value="788" data-field-top-res-1440-value="815" data-field-left-res-1440-value="941" data-field-top-res-1720-value="982" data-field-left-res-1720-value="1127"> <p>3250 mAh<br>Li-ion 1﻿8650 battery<br>Full charge in 1 hour (15W)</p> </div>   <div data-elem-id="1739537751007" data-elem-type="text" data-field-top-value="388" data-field-left-value="404" data-field-height-value="54" data-field-width-value="159" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="93" data-field-top-res-420-value="73" data-field-left-res-420-value="-437" data-field-top-res-1200-value="240" data-field-left-res-1200-value="247" data-field-top-res-1440-value="289" data-field-left-res-1440-value="301" data-field-height-res-1440-value="48" data-field-width-res-1440-value="159" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="347" data-field-left-res-1720-value="360"> <p>72x16 RGB<br>60 H﻿z refresh rate</p> </div>    <div data-elem-id="1739538114516" data-elem-type="text" data-field-top-value="1086" data-field-left-value="859" data-field-height-value="81" data-field-width-value="253" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="449" data-field-left-res-320-value="33" data-field-width-res-320-value="127" data-field-top-res-420-value="606" data-field-left-res-420-value="40" data-field-width-res-420-value="168" data-field-top-res-1200-value="679" data-field-left-res-1200-value="536" data-field-width-res-1200-value="197" data-field-top-res-1440-value="815" data-field-left-res-1440-value="639" data-field-top-res-1720-value="982" data-field-left-res-1720-value="771"> <p>Virtual Ethernet adapter <br>HTTP API via US﻿B Virtual LAN<br>Control via the desktop app</p> </div>   <div data-elem-id="1739538113292" data-elem-type="text" data-field-top-value="1086" data-field-left-value="461" data-field-height-value="108" data-field-width-value="237" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="165" data-field-left-res-320-value="211" data-field-width-res-320-value="118" data-field-top-res-420-value="214" data-field-left-res-420-value="272" data-field-top-res-1200-value="679" data-field-left-res-1200-value="284" data-field-top-res-1440-value="815" data-field-left-res-1440-value="343" data-field-top-res-1720-value="982" data-field-left-res-1720-value="413" data-field-width-res-1720-value="267"> <p>72x16 LED matrix<br>RGB w﻿ith 16 million colors<br>&gt;800 nits<br>Adaptive brightness</p> </div>    <div data-elem-id="1739538249841" data-elem-type="text" data-field-top-value="3114" data-field-left-value="140" data-field-height-value="27" data-field-width-value="301" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="1920" data-field-top-res-420-value="1900" data-field-left-res-420-value="565" data-field-top-res-1200-value="1958" data-field-left-res-1200-value="20" data-field-top-res-1440-value="2347" data-field-left-res-1440-value="50" data-field-top-res-1720-value="2816" data-field-left-res-1720-value="100"> <p>Use scr﻿ew or sticky tape</p> </div>   <div data-elem-id="1739538683427" data-elem-type="text" data-field-top-value="2410" data-field-left-value="461" data-field-height-value="162" data-field-width-value="301" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="1522" data-field-top-res-420-value="1502" data-field-left-res-420-value="618" data-field-top-res-1200-value="1525" data-field-left-res-1200-value="285" data-field-width-res-1200-value="193" data-field-top-res-1440-value="1818" data-field-left-res-1440-value="343" data-field-top-res-1720-value="2184" data-field-left-res-1720-value="413"> <p>Silicon Labs SiWG917 chip<br>Arm Cortex M4 core<br>Wi-Fi 6 (IEEE 802.11ax)<br>Single Band 2.4 GHz<br>WPA3 authentication support<br>Bluetooth Low Energy 5.4</p> </div>    <div data-elem-id="1739538419070" data-elem-type="text" data-field-top-value="2410" data-field-left-value="860" data-field-height-value="135" data-field-width-value="301" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="1522" data-field-top-res-420-value="1502" data-field-left-res-420-value="869" data-field-top-res-1200-value="1525" data-field-left-res-1200-value="536" data-field-width-res-1200-value="196" data-field-top-res-1440-value="1818" data-field-left-res-1440-value="644" data-field-top-res-1720-value="2184" data-field-left-res-1720-value="771"> <p>Monochrome OLED<br>160x80 px resolution<br>16 gray scales<br>Adaptive brightness<br>Mirrors the main display</p> </div> <div data-elem-id="1739538317999" data-elem-type="text" data-field-top-value="2410" data-field-left-value="1260" data-field-height-value="162" data-field-width-value="301" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="1522" data-field-top-res-420-value="1502" data-field-left-res-420-value="1122" data-field-top-res-1200-value="1525" data-field-left-res-1200-value="789" data-field-width-res-1200-value="199" data-field-top-res-1440-value="1818" data-field-left-res-1440-value="946" data-field-top-res-1720-value="2184" data-field-left-res-1720-value="1129"> <p>STMicroelectronics STM32U5M<br>Ultra low power MCU<br>Arm Cortex-M33 32-bit 160 MHz<br>2 MB Flash Memory<br>2.5 MB RAM<br>Additional 16 GB eMMC storage</p> </div>         <div data-elem-id="1739538230515" data-elem-type="text" data-field-top-value="1690" data-field-left-value="1279" data-field-height-value="54" data-field-width-value="167" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="1093" data-field-top-res-420-value="1073" data-field-left-res-420-value="1199" data-field-top-res-1200-value="1074" data-field-left-res-1200-value="800" data-field-width-res-1200-value="103" data-field-top-res-1440-value="1287" data-field-left-res-1440-value="959" data-field-width-res-1440-value="120" data-field-top-res-1720-value="1542" data-field-left-res-1720-value="1141" data-field-width-res-1720-value="148"> <p>Sw﻿itching between 4 work modes</p> </div>   <div data-elem-id="1739538173123" data-elem-type="text" data-field-top-value="782" data-field-left-value="1065" data-field-height-value="54" data-field-width-value="210" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="518" data-field-top-res-420-value="498" data-field-top-res-1200-value="487" data-field-left-res-1200-value="663" data-field-top-res-1440-value="586" data-field-left-res-1440-value="792" data-field-top-res-1720-value="697" data-field-left-res-1720-value="945"> <p>2 weeks in standby<br>8 hours of active status</p> </div>     <div data-elem-id="1739538020428" data-elem-type="text" data-field-top-value="782" data-field-left-value="1549" data-field-height-value="54" data-field-width-value="155" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="518" data-field-top-res-420-value="498" data-field-top-res-1200-value="487" data-field-left-res-1200-value="966" data-field-top-res-1440-value="586" data-field-left-res-1440-value="1162" data-field-top-res-1720-value="697" data-field-left-res-1720-value="1376"> <p>For charging and PC connection</p> </div>  <div data-elem-id="1739537993989" data-elem-type="text" data-field-top-value="388" data-field-left-value="684" data-field-height-value="54" data-field-width-value="179" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="93" data-field-top-res-420-value="73" data-field-left-res-420-value="-255" data-field-top-res-1200-value="240" data-field-left-res-1200-value="429" data-field-width-res-1200-value="114" data-field-top-res-1440-value="289" data-field-left-res-1440-value="513" data-field-height-res-1440-value="48" data-field-width-res-1440-value="132" data-field-container-res-1440-value="grid" data-field-top-res-1720-value="347" data-field-left-res-1720-value="613"> <p>For automatic brightness control</p> </div>  <div data-elem-id="1739530031177" data-elem-type="image" data-field-top-value="2959" data-field-left-value="1007" data-field-height-value="805" data-field-width-value="827" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1000" data-field-fileheight-value="974" data-field-widthmode-value="fixed" data-field-heightmode-value="hug" data-field-top-res-320-value="1735" data-field-height-res-320-value="506" data-field-top-res-420-value="1715" data-field-left-res-420-value="890" data-field-height-res-420-value="506" data-field-top-res-1200-value="1868" data-field-left-res-1200-value="627" data-field-height-res-1200-value="506" data-field-width-res-1200-value="520" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="2242" data-field-left-res-1440-value="751" data-field-height-res-1440-value="618" data-field-width-res-1440-value="635" data-field-top-res-1720-value="2678" data-field-left-res-1720-value="905" data-field-height-res-1720-value="707" data-field-width-res-1720-value="726" data-field-container-res-1720-value="grid" data-field-widthmode-res-1720-value="fixed"> <p><img data-original="img/tild3533-3837-4635-a636-643361663731__downloading-tiny.png" alt="" imgfield="tn_img_1739530031177" src="https://busy.bar/img/tild3533-3837-4635-a636-643361663731__downloading-tiny.png"> </p> </div> <p data-elem-id="1739537253836" data-elem-type="text" data-field-top-value="3707" data-field-left-value="1" data-field-height-value="53" data-field-width-value="433" data-field-axisy-value="top" data-field-axisx-value="center" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-animate-prx="scroll" data-field-textfit-value="autoheight" data-field-top-res-320-value="1375" data-field-left-res-320-value="-32" data-field-top-res-420-value="1819" data-field-left-res-420-value="-76" data-field-width-res-420-value="225" data-field-top-res-1200-value="2334" data-field-left-res-1200-value="-3" data-field-height-res-1200-value="53" data-field-width-res-1200-value="433" data-field-container-res-1200-value="grid" data-field-top-res-1440-value="2799" data-field-left-res-1440-value="1" data-field-top-res-1720-value="3359" data-field-left-res-1720-value="4" data-field-height-res-1720-value="53" data-field-width-res-1720-value="433" data-field-container-res-1720-value="grid"> <h2 field="tn_text_1739537253836">What’s in﻿ the box</h2> </p> <div data-elem-id="1739538305373" data-elem-type="text" data-field-top-value="3848" data-field-left-value="1289" data-field-height-value="81" data-field-width-value="301" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-textfit-value="autoheight" data-field-top-res-320-value="1375" data-field-left-res-320-value="222" data-field-top-res-420-value="1820" data-field-left-res-420-value="292" data-field-height-res-420-value="51" data-field-width-res-420-value="118" data-field-container-res-420-value="grid" data-field-top-res-1200-value="2449" data-field-left-res-1200-value="803" data-field-top-res-1440-value="2920" data-field-left-res-1440-value="979" data-field-top-res-1720-value="3489" data-field-left-res-1720-value="1155"> <p>BUSY Bar<br>Wall mount kit<br>USB-C cable (2m)</p> </div>     <div data-elem-id="1739549029097" data-elem-type="image" data-field-top-value="-301" data-field-left-value="547" data-field-height-value="159" data-field-width-value="200" data-field-axisy-value="top" data-field-axisx-value="left" data-field-container-value="grid" data-field-topunits-value="px" data-field-leftunits-value="px" data-field-heightunits-value="px" data-field-widthunits-value="px" data-field-filewidth-value="1680" data-field-fileheight-value="1333" data-field-heightmode-value="hug" data-field-top-res-320-value="545" data-field-height-res-320-value="254" data-field-width-res-320-value="320" data-field-widthmode-res-320-value="fixed" data-field-top-res-420-value="737" data-field-left-res-420-value="0" data-field-height-res-420-value="333" data-field-width-res-420-value="420" data-field-widthmode-res-420-value="fixed" data-field-height-res-1200-value="157" data-field-height-res-1440-value="157" data-field-height-res-1720-value="157"> <p><img data-original="img/tild3830-6433-4530-b561-393162356633__1921.jpg" alt="" imgfield="tn_img_1739549029097" src="https://busy.bar/img/tild3830-6433-4530-b561-393162356633__1921.jpg"> </p> </div> </div>      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sleep is essential – researchers are trying to work out why (226 pts)]]></title>
            <link>https://www.nature.com/articles/d41586-025-00964-w</link>
            <guid>43643390</guid>
            <pubDate>Thu, 10 Apr 2025 13:07:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nature.com/articles/d41586-025-00964-w">https://www.nature.com/articles/d41586-025-00964-w</a>, See on <a href="https://news.ycombinator.com/item?id=43643390">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    
                        <figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793216.jpg?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793216.jpg?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="The word 'Sleep', the letters in different colours, across a black background" loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793216.jpg"><figcaption><p><span>Reactive oxygen species in the guts of flies glow depending on the concentration of the molecules.</span><span>Credit: Alexandra Vaccaro and Yosef Kaplan Dor</span></p></figcaption></picture></figure><p>When neurobiologist Dragana Rogulja began studying sleep in her laboratory at Harvard Medical School in Boston, Massachusetts, in 2013, she had no idea what her experiments would tell her about how sleep affects the body. She wasn’t assuming — as many people do — that it’s a function mainly of the brain. She was just starting her lab and decided to throw the net wide, asking the question: if animals are sleep deprived, how long will it take until they die — and when they die, what is the specific cause?</p><p>She expected it would take years to answer these questions. But in six months, Rogulja’s postdoctoral assistant, Alexandra Vaccaro, found a tantalizing clue.</p><p>“We started looking at lifespan and saw that the moment when sleep-deprived animals would start dying was pretty much always the same,” Rogulja says. “When they lost about 90% of their sleep each night, they started dying within about ten days.” Those studies were in flies and mice — but the implications for other animals, including humans, was intriguing.</p><p>The average adult spends more than 20 years of their life sleeping, and the consequences of not getting enough are clearly harmful. But surprisingly little is known about why it’s necessary. That is, in part, because only in the past couple of decades have the tools become available to help scientists to understand the fundamental biological function of sleep. These include optogenetics, which involves directing laser light to specific neurons to wake a person or put them into deep sleep, and focused ultrasound, which has emerged in the past five years as a way to view the deep-brain neural oscillations that occur during sleep.</p><p>With the help of such tools, researchers are beginning to understand that sleep does more than just give our brains and bodies a respite from the rigours of the day. When we sleep, our genes, metabolism and hormones are regulated through increasing or slowing of their activity. </p><h2>Finding homeostasis</h2><p>What’s the most important function of the brain? It might be tempting to say a specific task, such as communicating, finding food or avoiding predators. But none of these roles is possible if the brain’s cellular machinery isn’t functioning reliably. Indeed, it is maintaining that reliability that might well be the main purpose of sleep, says Keith Hengen, a neuroscientist at Washington University in St. Louis, Missouri.</p><article data-label="Related"><a href="https://www.nature.com/collections/ecfaibfjcd" data-track="click" data-track-label="recommended article"><img alt="" src="https://media.nature.com/w400/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50831532.jpg"><p>Nature Outlook: Sleep</p></a></article><p>“This was like a light bulb for me a long time ago,” Hengen says. In terms of machine learning, “if you have a deep-learning network, and you continue to let it learn, it’ll exhibit catastrophic forgetting — the wheels come off and the thing stops. It just fails.”</p><p>Biology has solved this problem of brain overload by resetting to a ‘critical point’ — a process that occurs mainly during sleep. During the day, the brain is consumed with the many things it has to do, such as learning, coordinating movement and recognizing faces. These tasks all change connections in the brain, essentially undermining the platform that is set up for that learning. Sleep, Hengen contends, allows the brain to reset. According to this hypothesis, the restoration, which occurs through a common biological process known as homeostasis, is the ‘set point’ at which the brain is able to maximize information-processing potential<sup><a href="#ref-CR1" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">1</a></sup>.</p><p>Hengen compares homeostasis to the familiar workings of a home heating system. A drop in a room’s temperature below the set point causes the heater to turn on, restoring the environment to the desired level of warmth.</p><p>Likewise, when the brain is further from its critical point, a person will feel more tired and need to fall asleep to reset. The closer the brain is to its critical point the more likely the person is to stay awake, because they will have plenty of capacity for doing and learning.</p><p>Sleep has several mechanisms that help the brain to reset after the stimulus and onslaught of information of each day. According to a 2024 study, parts of the hippocampus go silent during sleep, preparing its neurons for use again the next day<sup><a href="#ref-CR2" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">2</a></sup>. And a 2017 study<sup><a href="#ref-CR3" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">3</a></sup> found that, in the brains of mice, sleep restores the balance of junctions between neurons called synapses, which grow during the day and shrink during sleep.</p><p>Rogulja’s team confirmed that sleep is indeed important for homeostasis, but that the organ in which this takes place is not the brain.</p><p>After determining the ten-day timeline for sleep deprivation and death in flies, Vaccaro, who had previously studied sleep deprivation and ageing, began looking for markers of ageing in these insects. She and her colleagues found that the concentrations of reactive oxygen species (ROS) in the guts of flies were at their highest when the animals started dying. Small amounts of ROS are beneficial — they regulate the body’s immune response and help cells to defend against pathogens. But without sleep these molecules accumulate to toxic levels<sup><a href="#ref-CR4" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">4</a></sup>.</p><p>“We looked at tissues all over the body,” Vaccaro says. “We looked at the brain and didn’t see anything. The one tissue that showed the most damage when the flies started to die was in the gut.”</p><p>The same happened in mice. When the animals were sleep deprived, then allowed to sleep for small periods, during that time, they stopped expressing genes for fat uptake. Organelles called mitochondria sense this nutrient deficiency and signal cellular enzymes to make ROS to stimulate the proliferation of cells in the gut that are better at absorption, Rogulja says. After just one day of restricting sleep in mice, Rogulja could see fats in the animals’ intestines that weren’t entering circulation. After five days, their guts were filled with fat although their bodies were starved of nutrients.</p><p>In rats, most genes seem to be upregulated while the animals are awake and downregulated during sleep. Genes that are upregulated during periods of sleep deprivation are responsible for functions such as energy metabolism, hormone reception and protein synthesis<sup><a href="#ref-CR5" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">5</a></sup>. In a 2023 study, researchers in Brazil found that fruit flies that were sleep deprived showed overexpression mostly of genes that affected metabolism, glucose, triglyceride and levels of the hormone dopamine<sup><a href="#ref-CR6" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">6</a></sup>.</p><h2>It’s brainwashing</h2><p>For decades, the main purpose of sleep was thought to be maintaining brain health. Babies and teenagers sleep for such long periods of time, according to this theory, because there is so much brain development going on at those stages.</p><p>It’s not just the amount of sleep we get that is important, however. Sleep quality, particularly the amount of deep sleep, might drastically improve memory consolidation. And researchers have found a way to artificially increase deep, or slow-wave, sleep in humans — by delivering acoustic stimulation in the form of soft pulses of ‘pink noise’ to a sleeping person through a headset. Unlike the familiar white noise, which contains equal parts of the sound spectrum, pink noise contains more low- than high-frequency sounds.</p><p>In a small study<sup><a href="#ref-CR7" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">7</a></sup>, half of the participants received pink-noise acoustic stimulation and the other half wore headsets playing a different sound pattern, as a control. Researchers monitored brain activity with an electroencephalogram and found that pink-noise recipients had increased slow-wave activity. Importantly, they also had increased memory retention the next day.</p><figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793218.jpg?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793218.jpg?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="Two women sitting at a table surrounded by laboratory equipment. One woman is wearing an orange hat and looking down at the table, the other woman is wearing glasses, holding two fingers towards her face and looks towards a microscope" loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793218.jpg"><figcaption><p><span>Dragana Rogulja (left) and Alexandra Vaccaro have shown that gut tissue is damaged in flies that are deprived of sleep.</span><span>Credit: Michael Crickmore</span></p></figcaption></picture></figure><p>“We asked them to remember word pairs during the day and then they slept,” says co-author Phyllis Zee, a neurologist and sleep-medicine specialist at the Feinberg School of Medicine in Chicago, Illinois. Overall, Zee says, those that had pink-noise stimulation performed almost 30% better on memory tests than did those who listened to the control sounds.</p><p>Sleep is thought to not only help memories to take root, but also clear the brain of anything superfluous. Neuroscientist Maiken Nedergaard at the University of Rochester in New York, has a theory of how that cleaning occurs.</p><p>In 2013, Nedergaard and her colleagues reported<sup><a href="#ref-CR8" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">8</a></sup> that one benefit of sleep might be the removal of neurotoxins from the brain. The brain’s glymphatic system is made up of what Nedergaard describes as a “doughnut-shaped tunnel” surrounding cerebral vessels that create a cell wall. In this tunnel, cerebrospinal fluid flows with interstitial fluid to remove proteins, including amyloid-β and tau, which are thought to have a role in Alzheimer’s disease.</p><p>“What we showed is, every time the heart beats, you have the arteries expanding and moving the vessel wall and putting fluid into the brain,” she says. “It’s a very beautiful biological system.” The paper reported that the interstitial space in mice grew by about 60% when they were sleeping. This drastically increased the amount of exchange of cerebrospinal fluid and interstitial fluid as well as the rate of clearance of amyloid-β.</p><p>This finding sent Nedergaard and her colleagues searching for the drivers of that fluid clearance. The heart is one way, but Nedergaard says it’s more likely to account for movement of fluid than its clearance. In February<sup><a href="#ref-CR9" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">9</a></sup>, she and her colleagues reported that norepinephrine, which induces vasoconstriction, is the main promoter of clearance through “spontaneous, rhythmic constriction and dilation of arteries”. And regular oscillations of norepinephrine levels in the brain occur during deep, slow-wave sleep.</p><p>“Sleep is the period where our brain doesn’t just rest, but it does all the housekeeping,” Nedergaard says. “The glial cells are the cleaning crew that come in when the brain is quiet and do the things that other organs do when we are awake. It’s a function of the brain that’s probably not compatible with wakefulness.”</p><p>Nedergaard’s theory about protein clearance during sleep has recently been disputed as an incomplete explanation, especially because it pertains to the <a href="https://www.nature.com/articles/d41586-025-00962-y" data-track="click" data-label="https://www.nature.com/articles/d41586-025-00962-y" data-track-category="body text link">link between sleep and Alzheimer’s disease</a>. The most prominent challenge to her ideas has come from biophysicist Nick Franks at Imperial College London. In May 2024, Franks and his colleagues used a fluorescent tracer to show that brain clearance is actually reduced during sleep<sup><a href="#ref-CR10" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">10</a></sup>.</p><figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793224.jpg?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793224.jpg?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="Two white and yellow tubular structures with tentacles at the bottom, hang from a green plant" loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_50793224.jpg"><figcaption><p><span>Even simple organisms such as <i>Hydra vulgaris</i> show a need for sleep.</span><span>Credit: Kim Taylor/naturepl.com</span></p></figcaption></picture></figure><p>Nedergaard defends her version of what happens during sleep. Franks, she contends, “misdefines brain clearance as the movement of a tracer from one location to another within the brain. In contrast, the correct definition of brain clearance is that the tracer must exit the brain entirely. This is akin to moving garbage from the kitchen to the bedroom and calling the house clean.”</p><p>Franks disputes this characterization and maintains that his results directly contradict Nedergaard’s. “We showed that tracer injected into the brain was retained at higher concentrations during sleep, compared to waking — in other words, less was cleared,” he says, adding that his data “cannot be reconciled with her conclusions about clearance during sleep”.</p><p>Moreover, Nedergaard says that her ideas about clearance align with a well-established theory about why people sleep — the synaptic homeostasis hypothesis. This says, in essence, that sleep is the price that animals pay for brain plasticity. During the day, the brain consumes energy, takes in noise and other stimulus, and spends time learning. During sleep, brain activity is reduced, and cells are restored.</p><h2>It does a body good</h2><p>It’s intuitive to view sleep as a function of the central nervous system. But that can’t be entirely the case, because creatures without central nervous systems also show sleep-like behaviour.</p><article data-label="Related"><a href="https://www.nature.com/news/outlooks-1.16103" data-track="click" data-track-label="recommended article"><img alt="" src="https://media.nature.com/w400/magazine-assets/d41586-025-00964-w/d41586-025-00964-w_16290238.jpg"><p>More from Nature Outlooks</p></a></article><p>In 2020, researchers found that hydra, a freshwater polyp with no brain, also enter a languid state at night<sup><a href="#ref-CR11" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">11</a></sup>. These creatures show a need for sleep homeostasis as well, resting longer the day after being sleep deprived.</p><p>There is other evidence that sleep’s function goes beyond the central nervous system. Sleep promotes the release of certain hormones, for example. This process has various physiological effects, including lowering the risk of cardiovascular disease and some cancers. Inadequate sleep can slow production of beneficial hormones, including cortisol and growth hormone. And the hormone melatonin can suppress breast cancer cells’ ability to proliferate, survive, spread and develop resistance to drugs<sup><a href="#ref-CR12" data-track="click" data-action="anchor-link" data-track-label="go to reference" data-track-category="references">12</a></sup>.</p><p>Zee and her colleagues’ study on the impact of slow-wave sleep found that people who listened to pink noise had lower spikes in morning cortisol levels and improved parasympathetic activity — slowing of the heart rate and lowering of the blood pressure. During sleep, parasympathetic activity gives the cardiovascular system a much-needed break. “We know that if you don’t sleep well, your heart rate and blood pressure go up and you are at greater risk for cardiovascular disease,” Zee says.</p><p>Despite myriad studies, there is still no consensus on why sleep is needed for survival. But the consequences of not getting enough of this fundamental physical process bear out the importance of continuing to seek answers.</p>
                    
                </div><p>This article is part of <a href="http://www.nature.com/collections/sleep-outlook" data-track="click" data-label="http://www.nature.com/collections/sleep-outlook" data-track-category="body text link">Nature Outlook: Sleep</a>, a supplement produced with financial support from Avadel Pharmaceuticals. <i>Nature</i> maintains full independence in all editorial decisions related to the content. <a href="https://partnerships.nature.com/commercial-content-at-nature-research/" data-track="click" data-label="https://partnerships.nature.com/commercial-content-at-nature-research/" data-track-category="body text link">About this content</a>.</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Owning my own data, part 1: Integrating a self-hosted calendar solution (345 pts)]]></title>
            <link>https://emilygorcenski.com/post/owning-my-own-data-part-1-integrating-a-self-hosted-calendar-solution/</link>
            <guid>43643343</guid>
            <pubDate>Thu, 10 Apr 2025 12:59:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://emilygorcenski.com/post/owning-my-own-data-part-1-integrating-a-self-hosted-calendar-solution/">https://emilygorcenski.com/post/owning-my-own-data-part-1-integrating-a-self-hosted-calendar-solution/</a>, See on <a href="https://news.ycombinator.com/item?id=43643343">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<h2 id="introduction">Introduction</h2>
<p>My calendar is a true nightmare. I travel a lot, some of it for my job, some of it for fun, and some of it because I’ve been managing a long distance relationship for years. Traveling a lot means it’s always hard for your loved ones or coworkers to know what time zone you’re in or when you’re on a plane. Managing a relationship across timezones means having to do constant mental math that is way harder than it needs to be. And because I don’t have an assistant, I’ve become frustrated with double entry of flights, trains, blockers for boarding flights or traveling to the airport, and so on.</p>
<p>As someone who travels a lot, it’s also one of those things where statistically speaking, the chances of me being on a plane whenever some newsworthy event happens is higher than for the average person. I want my wife, friends, coworkers to know what flights I’m on and what cities I’m in. I’ve survived one terror attack, nearly dodged two others and a mass shooting. It’s one of those things where I want to make sure people who care about me can check in easily to see where I am.</p>
<p>The thing is, calendar systems suck. All of them. The standards are a holdover from two computing generations ago, the frontend ecosystem is a mess of rent-seeking monthly subscription mobile apps with dubious features, and the user experience for most systems is pretty much terrible. Just as an example: if I book a flight, my email provider makes a calendar entry, but it often misses the connection flight or gets the timezones wrong, and even if it doens’t fail, it doesn’t make me the organizer, meaning I can’t share or modify it. The entire calendar ecosystem is a nightmare.</p>
<p>The sad thing is that in the entire space there’s really two good products: Google Calendar has basically captured the market for diary entries, and Facebook Events would be an admirable tool if it wasn’t attached to a company and service fuelled with undistilled demon blood. I’m trying to break off of big tech as much as I can, so I needed some kind of solution.</p>
<p>So I built my own. Kind of. I intend this to be the first part of a long-running series of how I’m building my own tech to regain control of my data.</p>
<h2 id="requirements">Requirements</h2>
<p>My core requirements:</p>
<ul>
<li>Allow events to show up as blockers in my work calendar;</li>
<li>Allow my wife to subscribe to the calendar;</li>
<li>Enter events at most once;</li>
<li>Allow editing from multiple devices;</li>
<li>Fully control my own data;</li>
<li>Cannot solve problem by sharing work calendar with my wife.</li>
</ul>
<p>Additional requirements:</p>
<ul>
<li>Import .ics attachments from email;</li>
<li>Import .ics over HTTP from my <a href="https://emilygorcenski.com/post/lingoda-review/">language school</a> calendar;</li>
<li>Import data automatically from my self-hosted flight tracker, <a href="https://github.com/johanohly/AirTrail/">Airtrail</a>;</li>
<li>Color code events in my work calendar;</li>
<li>Allow some events to be flagged as private for my work calendar;</li>
<li>Refresh frequently;</li>
<li>Use any front end.</li>
</ul>
<h2 id="previous-solution">Previous solution</h2>
<p>The big problem with existing calendar sharing solutions is that they require everyone to be on a common platform, like the broader Gmail or Outlook.com ecosystems, or share accounts in the same environment, like an Exchange environment, in order to have full functionality. The two common workarounds for this is either to publish a calendar in a “read only” mode by serving iCal data over HTTP, or to email iCal .ics files to recipients over email.</p>
<p>For my beta version of this calendar system I chose the former: I would host an .ics file on my website under a public but secret and unguessable URL, or actually multiple URLs for different use cases. I could then share the link or subscribe to it with my work account. To populate the calendar, I started writing out events in YAML and would generate a URL for each person I wanted to share it with:</p>
<div><pre tabindex="0"><code data-lang="yaml">- <span>name</span>: <span>World Aviation Festival</span>
  <span>begin</span>: <span>2024-10-07</span>
  <span>end</span>: <span>2024-10-10</span>
  <span>city</span>: <span>Amsterdam</span>
  <span>event</span>:
    <span>name</span>: <span>World Aviation Festival Conference Day</span>
    <span>type</span>: <span>CONFERENCE</span>
    <span>begin</span>: <span>2024-10-08T08:30:00</span><span>+02</span>:<span>00</span>
    <span>end</span>: <span>2024-10-08T18:00:00</span><span>+02</span>:<span>00</span>
    <span>location</span>: |<span>
</span><span>      RAI Exhibition and Convention Centre
</span><span>      Halls 1 &amp; 5 | Europaplein 24, Amsterdam</span>      
    <span>repeat</span>:
      <span>count</span>: <span>3</span>
      <span>frequency</span>: <span>daily</span>
  <span>flights</span>:
    - <span>flight number</span>: <span>LH2310</span>
      <span>departure</span>:
        <span>airport</span>: <span>MUC</span>
        <span>time</span>: <span>2024-10-07T20:05:00</span><span>+02</span>:<span>00</span>
      <span>arrival</span>:
        <span>airport</span>: <span>AMS</span>
        <span>time</span>: <span>2024-10-07T21:40:00</span><span>+02</span>:<span>00</span>
    - <span>flight number</span>: <span>LH2305</span>
      <span>departure</span>:
        <span>airport</span>: <span>AMS</span>
        <span>time</span>: <span>2024-10-10T15:40:00</span><span>+02</span>:<span>00</span>
      <span>arrival</span>:
        <span>airport</span>: <span>MUC</span>
        <span>time</span>: <span>2024-10-10T17:05:00</span><span>+02</span>:<span>00</span>
    - <span>flight number</span>: <span>LH1952</span>
      <span>departure</span>:
        <span>airport</span>: <span>MUC</span>
        <span>time</span>: <span>2024-10-10T18:00:00</span><span>+02</span>:<span>00</span>
      <span>arrival</span>:
        <span>airport</span>: <span>BER</span>
        <span>time</span>: <span>2024-10-10T19:05:00</span><span>+02</span>:<span>00</span>
  <span>hotel</span>:
    - <span>name</span>: <span>Sheraton Amsterdam Airport Hotel And Conference Center</span>
      <span>address</span>: <span>Schiphol Boulevard 101, Schiphol, 1, Netherlands 1118</span>
  <span>share</span>:
    - <span>Christine</span>
    - <span>Work</span>
    - <span>Em</span>
</code></pre></div><p>I’d take this YAML file and wrote a small script to re-serialize it as an ICS file in my CI/CD pipeline.</p>
<p>This worked for a while, but it got unweildly. Hand-writing YAML is fine for prototyping, but at scale it was too frequent that I would make mistakes, and this was a lot of work for what should be a fairly low-effort exercise. I needed a new solution.</p>
<h2 id="architecture">Architecture</h2>
<p>For my new solution, I knew I would need to move away from my static solution and would need to run something hosted. Even though that would cost me more, I’ve come to accept that moving off of big tech will eventually require me to host my own solutions for a variety of needs. So I decided to jump into the world of CalDAV.</p>
<p>CalDAV is an extension of the WebDAV distributed authoring specification with specific functionality relevant to calendar applications. WebDAV was an idea that emerged from the 90s, when web development was still very synchronous and web development felt more like software development. Nevertheless, it’s one of the few available solutions for running a self-hosted calendaring system.</p>
<p>Aside: This is an area begging for disruption. Just look at <a href="https://en.wikipedia.org/wiki/Comparison_of_CalDAV_and_CardDAV_implementations">this list of CalDAV and CardDAV implementations</a> on Wikipedia. It’s bleak out there, folks. No wonder why data aggregators under the guise of third party tools like Calendly and Doodle are so popular. The landscape is flat awful. Anyways.</p>
<p>With a CalDAV server, I can connect to it with frontend apps of my choosing from multiple devices. This will allow me to view and manage events from my laptop, phone, or whatever. But few CalDAV servers allow authentication-free subscriptions to the calendar with any ease. So I’ll need to have a script that regularly polls the server, extracts the events, and publishes them as an iCal file through my website.</p>
<p>Moreover, I’ll want to connect to various other data sources, some of which I control and others I do not. These include my flight tracker (self-hosted), my email (paid hosting), and my language school (external). The flow that I’ll build will look something like this:</p>
<ul>
<li>poll data sources for events</li>
<li>publish events programmatically to CalDAV</li>
<li>fetch all events from CalDAV and write to an .ics file</li>
<li>serve .ics file over HTTP</li>
</ul>
<p>To accomplish this, I’ve designed an architecture that looks something like this:</p>
<p><img src="https://emilygorcenski.com/photo-gallery/writing/cal-arch.png" alt="Calendar system architecture"></p>
<h2 id="setting-up-baïkal">Setting up Baïkal</h2>
<p>My tool of choice was <a href="https://sabre.io/baikal/">Baïkal</a>, a lightweight, self-hostable CalDAV (and CardDAV) server for managing calendars and contacts. Setting up the service was easy with Docker Compose:</p>
<div><pre tabindex="0"><code data-lang="yaml"><span>services</span>:
  <span>baikal</span>:
    <span>image</span>: <span>ckulka/baikal:0.9.5</span>
    <span>restart</span>: <span>always</span>
    <span>ports</span>:
      - <span>"XXXX:80"</span>
    <span>volumes</span>:
      - <span>/mnt/baikal/data:/var/www/baikal/config</span>
      - <span>/mnt/baikal/data:/var/www/baikal/Specific</span>

<span>volumes</span>:
  <span>config</span>:
  <span>data</span>:
</code></pre></div><p>You can configure Baïkal to use MySQL, but it also works fine with SQLLite, and this simplifies its administration. Set the port and modify the local volume if you want and start this with a simple <code>docker compose up -d</code>.</p>
<p>To make this available to the web, I’m running an nginx reverse proxy with a pretty basic configuration:</p>
<pre tabindex="0"><code>server {
    server_name MYDOMAIN;

    location / {
        proxy_pass http://localhost:XXXX;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /.well-known/caldav {
       return 301 https://MYDOMAIN/dav.php;
    }

    listen 80;
    listen [::]:80;
}
</code></pre><p>Of course, I used Let’s Encrypt to get this served securely, but I omitted this for simplicity. If you want to do the same, replace <code>MYDOMAIN</code> with whatever your subdomain/domain is.</p>
<p>One note: you’ll notice the <code>location</code> directive that performs a 301 redirect to <code>dav.php</code>. This <code>/.well-known/caldav</code> redirect is needed if you want to add this calendar to your iPhone or Mac calendar apps. When eventually setting up your calendar on MacOS or iOS, you’ll want to use manual settings, not automatic (and not advanced—I’m not sure why I couldn’t get the advanced settings to work when the manual settings worked fine).</p>
<p>I set up DNS and used <code>certbot</code> to generate a Let’s Encrypt certificate for my domain and it updated the nginx config file automatically.</p>
<p>Once this is up and running, I was able to navigate to my domain in my browser to set up an admin account. From there, I configured a user for myself and created a calendar. Theoretically, I could create multiple calendars if I chose to, for instance if I wanted to have a special calendar for travel or whatnot. But I didn’t find that necessary, as my goal is at-most-once data entry. To get the URL for my calendar, I had to navigate through to my user page, click the “Calendars” button, and then found it under the little info icon.</p>
<p><img src="https://emilygorcenski.com/photo-gallery/writing/baikal.png" alt="Baikal admin page showing calendar icon"></p>
<p>I hooked this up to my iOS and MacOS default calendar apps and everything went swimmingly.</p>
<h2 id="setting-up-an-event-taxonomy">Setting up an event taxonomy</h2>
<p>I’ll take a little detour here for another rant. The <a href="https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/">iCalendar specification</a> includes a provision for <a href="https://icalendar.org/iCalendar-RFC-5545/3-8-1-2-categories.html">an optional <code>CATEGORIES</code> property</a> for the <code>EVENT</code> component. The intention of this property appears to be to provide the ability for a user to categorize an event, such as an appointment, meeting, etc. This would be a really useful feature in a calendar frontend; I could easily search for and find a doctor appointment in a busy week, for instance. However, most frontends and calendar apps simply do not implement this feature in any way. MacOS Calendar does not. iOS Calendar does not. Google Calendar does not. Every tool I’ve used has completely ignored this otherwise useful field.</p>
<p>I want to use this field.</p>
<p>But there’s an issue with free text taxonimization: it sucks. It’s really hard to keep it consistent. It’s really hard to make it contextual meaningful while also being unambiguous, let alone universally understandable. So I need to do something about this.</p>
<p>Since I’m going to need to write some python scripts to extract calendar events anyways, it makes sense that I could try to encode these event types in a data model. So I wrote a little data model for this using python enums, an excerpt of which is here, forgive the random German:</p>
<div><pre tabindex="0"><code data-lang="python"><span>from</span> enum <span>import</span> Enum

<span>class</span> <span>TerminType</span>(Enum):
    MEETUP <span>=</span> <span>1</span>
    CONFERENCE <span>=</span> <span>2</span>
    CLASS <span>=</span> <span>3</span>
    TRAINING <span>=</span> <span>4</span>
    APPOINTMENT <span>=</span> <span>10</span> <span># values 10 or higher are set private for my work calendar</span>
    MEETING <span>=</span> <span>11</span>
    EXAM <span>=</span> <span>12</span>
    HEARING <span>=</span> <span>13</span>
    INTERVIEW <span>=</span> <span>14</span>

    <span>def</span> __str__(self):
        <span>return</span> self<span>.</span>name
    
<span>class</span> <span>CultureType</span>(Enum):
    MOVIE <span>=</span> <span>1</span>
    CONCERT <span>=</span> <span>2</span>
    SPORTS <span>=</span> <span>3</span>
    MUSEUM <span>=</span> <span>4</span>
    ENTERTAINMENT <span>=</span> <span>5</span>

    <span>def</span> __str__(self):
        <span>return</span> self<span>.</span>name

<span>class</span> <span>SocialType</span>(Enum):
    <span>...</span>

<span>class</span> <span>AwayType</span>(Enum):
    <span>...</span>

<span>class</span> <span>TransportType</span>(Enum):
    <span>...</span>

all_event_names <span>=</span> set(TerminType<span>.</span>_member_names_) \
                    <span>.</span>union(set(CultureType<span>.</span>_member_names_)) \
                    <span>.</span>union(set(SocialType<span>.</span>_member_names_)) \
                    <span>.</span>union(set(AwayType<span>.</span>_member_names_)) \
                    <span>.</span>union(set(TransportType<span>.</span>_member_names_))
</code></pre></div><p>There’s no real reason for breaking things down like this, except that it helps conceptually organize the types of events. Moreover, I do implement a little bit of hidden business logic: double-digit enum values are private by default for my work calendar.</p>
<p>Building this taxonomy will help me to implement an <em>ad hoc</em> solution to the problem described before: it will help me make events more searchable or visible at a glance for front-ends that allow you to color code events.</p>
<h2 id="compiling-and-sharing-the-calendar">Compiling and sharing the calendar</h2>
<p>I’ve said a few times that I want to do “at most once” data entry. This means that there are many events I don’t want to have to enter data for at all, such as scheduled classes with my online language school (which hosts an ICS file of my classes) or events extracted from my email. But to automate getting this data I need to poll these endpoints, as they don’t really publish events when new ones are added or old ones are deleted. This means I’ll need to write a little python script and hook it up to a cron job.</p>
<p>The python script needs a few components:</p>
<ul>
<li>a component for fetching events from my email over IMAP;</li>
<li>a component for extracting events from my flight tracker’s API;</li>
<li>a component for fetching events from my language school’s hosted ICS files;</li>
<li>a component for pushing all of these events to Baïkal; and</li>
<li>a component for fetching all events from Baïkal and re-serializing them to one or more sharable ICS files published undiscoverably on the web.</li>
</ul>
<p>The IMAP part is really nice, this provides Google Calendar-like functionality to this system. If someone emails me a calendar invite, this script fetches it and adds it to my calendar automatically.</p>
<p>This is a lot of code, most of it ad hoc, I won’t share it here all but it’s not so hard to write. What I will share is the entrypoint script for the cron job:</p>
<div><pre tabindex="0"><code data-lang="python"><span>from</span> enum <span>import</span> Enum
<span>from</span> ics <span>import</span> Calendar, Event

<span>import</span> event_types <span>as</span> Categories
<span>import</span> airtrail
<span>import</span> baikal
<span>import</span> imap

<span>def</span> <span>is_work_public</span>(event : Event) <span>-&gt;</span> bool:
    <span>def</span> <span>get_value</span>(type : Enum, category):
        <span>try</span>:
            <span>return</span> type[category]<span>.</span>value <span>&lt;</span> <span>10</span>
        <span>except</span>:
            <span>return</span> <span>False</span>
        
    <span>if</span> <span>not</span> event<span>.</span>categories:
        <span>return</span> <span>False</span>
    
    <span>return</span> all((get_value(Categories<span>.</span>TerminType, c) <span>|</span>
                get_value(Categories<span>.</span>AwayType, c) <span>|</span>
                get_value(Categories<span>.</span>TransportType, c))
               <span>for</span> c <span>in</span> event<span>.</span>categories)

<span>if</span> __name__ <span>==</span> <span>"__main__"</span>:
    family <span>=</span> Calendar()
    work <span>=</span> Calendar()

    <span># these add events to baikal directly</span>
    airtrail<span>.</span>fetch_airtrail_events()
    imap<span>.</span>fetch_email_events()
    <span># I left out my language school fetcher because it's not active at the moment</span>

    events <span>=</span> baikal<span>.</span>fetch_remote_events()

    <span>for</span> event <span>in</span> events:
        family<span>.</span>events<span>.</span>add(event)

        <span>if</span> <span>"work.email@example.com"</span> <span>not</span> <span>in</span> event<span>.</span>serialize():
            <span>if</span> is_work_public(event):
                event<span>.</span>classification <span>=</span> <span>"PUBLIC"</span>
            <span>else</span>:
                event<span>.</span>classification <span>=</span> <span>"PRIVATE"</span>
            work<span>.</span>events<span>.</span>add(event)

    <span>try</span>:
        <span>with</span> open(<span>"/www/calendar/emilygorcenski.ics"</span>, <span>"wt"</span>) <span>as</span> ics_file:
            ics_file<span>.</span>write(family<span>.</span>serialize())
        <span>with</span> open(<span>"/www/calendar/emilygorcenski_work.ics"</span>, <span>"wt"</span>) <span>as</span> ics_file:
            ics_file<span>.</span>write(work<span>.</span>serialize())
    <span>except</span>:
        <span>pass</span>
</code></pre></div><p>And the script to interface with Baïkal:</p>
<div><pre tabindex="0"><code data-lang="python"><span>import</span> os
<span>import</span> re
<span>import</span> requests
<span>import</span> xml.etree.ElementTree <span>as</span> ET
<span>from</span> dotenv <span>import</span> load_dotenv
<span>from</span> ics <span>import</span> Calendar, Event
<span>from</span> requests.auth <span>import</span> HTTPDigestAuth
<span>from</span> event_types <span>import</span> all_event_names

load_dotenv()

<span># Baikal server information</span>
USERNAME <span>=</span> os<span>.</span>environ[<span>"BAIKAL_USERNAME"</span>]
PASSWORD <span>=</span> os<span>.</span>environ[<span>"BAIKAL_PASSWORD"</span>]
BASE_URL <span>=</span> os<span>.</span>environ[<span>"BAIKAL_URL"</span>]

HEADERS <span>=</span> {
    <span>"Content-Type"</span>: <span>"application/xml; charset=utf-8"</span>,
    <span>"Depth"</span>: <span>"infinity"</span>
}

PROPFIND_BODY <span>=</span> <span>"""&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span>&lt;d:propfind xmlns:d="DAV:" xmlns:c="urn:ietf:params:xml:ns:caldav"&gt;
</span><span>    &lt;d:prop&gt;
</span><span>        &lt;d:displayname/&gt;
</span><span>        &lt;c:calendar-data/&gt;
</span><span>    &lt;/d:prop&gt;
</span><span>&lt;/d:propfind&gt;
</span><span>"""</span>

<span>def</span> <span>categorize</span>(event : Event) <span>-&gt;</span> Event:
    <span># ignores any user-input values that we don't care about, and focuses on what we do</span>
    <span># this is to convert the description field in an event into categories fields</span>
    <span># this allows manual categorization by editing the event description</span>
    <span>if</span> <span>not</span> event<span>.</span>description:
        <span>return</span> event
    category_match <span>=</span> re<span>.</span>search(<span>r</span><span>'\b(CATEGORIES:)(\S+)\b'</span>, event<span>.</span>description)
    <span>if</span> category_match:
        label <span>=</span> category_match<span>.</span>group(<span>1</span>) <span># this should always be "CATEGORIES:""</span>
        cat_list <span>=</span> category_match<span>.</span>group(<span>2</span>)
        categories <span>=</span> set(cat_list<span>.</span>split(<span>","</span>))
        event<span>.</span>categories <span>=</span> categories<span>.</span>intersection(all_event_names)
        event<span>.</span>description <span>=</span> event<span>.</span>description \
                                 <span>.</span>replace(label <span>+</span> cat_list, <span>""</span>) \
                                 <span>.</span>replace(<span>"  "</span>, <span>" "</span>) \
                                 <span>.</span>strip()
    <span>return</span> event

<span>def</span> <span>fetch_remote_events</span>() <span>-&gt;</span> list[Event]:
    response <span>=</span> requests<span>.</span>request(<span>"PROPFIND"</span>,
                                BASE_URL,
                                headers<span>=</span>HEADERS,
                                data<span>=</span>PROPFIND_BODY,
                                auth<span>=</span>HTTPDigestAuth(USERNAME, PASSWORD))

    <span>if</span> response<span>.</span>ok:
        root <span>=</span> ET<span>.</span>fromstring(response<span>.</span>content)

        propstats       <span>=</span> [r<span>.</span>find(<span>'</span><span>{DAV:}</span><span>propstat'</span>)
                           <span>for</span> r <span>in</span> root<span>.</span>findall(<span>'</span><span>{DAV:}</span><span>response'</span>)]
        calendar_data   <span>=</span> [p
                           <span>.</span>find(<span>'</span><span>{DAV:}</span><span>prop'</span>)
                           <span>.</span>find(<span>'{urn:ietf:params:xml:ns:caldav}calendar-data'</span>)
                           <span>for</span> p <span>in</span> filter(<span>lambda</span> x: x <span>is</span> <span>not</span> <span>None</span>, propstats)]
        events          <span>=</span> [categorize(event)
                           <span>for</span> data <span>in</span> filter(<span>lambda</span> x: x <span>is</span> <span>not</span> <span>None</span>, calendar_data)
                           <span>for</span> event <span>in</span> Calendar(data<span>.</span>text)<span>.</span>events]
        <span>return</span> events
    <span>return</span> []

<span>def</span> <span>add_event</span>(filename : str, event_ics : str):
    header <span>=</span> {
        <span>"Content-Type"</span>: <span>"text/calendar; charset=utf-8"</span>
    }
    event_ics <span>=</span> event_ics<span>.</span>replace(<span>"METHOD:REQUEST</span><span>\r\n</span><span>"</span>, <span>""</span>)

    r <span>=</span> requests<span>.</span>put(<span>f</span><span>"</span><span>{</span>BASE_URL<span>}{</span>filename<span>}</span><span>"</span>,
                     data<span>=</span>event_ics,
                     headers<span>=</span>header,
                     auth<span>=</span>HTTPDigestAuth(USERNAME, PASSWORD))
    <span>return</span> r<span>.</span>status_code
</code></pre></div><p>Note how I make sure that certain kinds of events (e.g. doctor appointments) are marked private and serialized to a separate file in my work calendar.</p>
<p>I then set up a redirect in nginx for serving these files via an unfindable URL, generated from a random, hashed and salted string.</p>
<p>I run this via a cron job every 15 minutes.</p>
<h2 id="sharing-my-events-with-on-my-work-calendar">Sharing my events with on my work calendar</h2>
<p>The whole point of this exercise wasn’t just that <em>I</em> could see events, but also that any events I put in my calendar will block my work calendar and be visible to coworkers so they know if I’m on a flight or traveling in another city. To do that, I need to copy these events to my work calendar.</p>
<p>This is a bit of an irony, because this whole exercise started when I was trying to <em>reduce</em> my dependency on Google Calendar. However, in fairness, Google Calendar is a choice of my workplace, and it’s not something <em>I</em> depend on outside of work. I’m not thrilled to give the data to Google, but at least I can walk away from them easily if I choose to.</p>
<p>To accomplish this, I’m using Google Script Engine and a modified version of <a href="https://github.com/derekantrican/GAS-ICS-Sync">this open source script</a>. In all honesty, I struggle with how this Javascript code is organized, but it gets the job done with minimal difficulty. I did modify this to read from the calendar <code>CATEGORIES</code> property and color code my calendar. The result means it’s really easy to parse my calendar at a glance—obviously I’m only sharing a small snippet of non-sensitive information.</p>
<p><img src="https://emilygorcenski.com/photo-gallery/writing/cal-colors.png" alt="Color coded blocks on a calendar showing a conference in green, a meeting in blue, and a flight in lavender"></p>
<p>I have this Google Script running on 30 minute intervals.</p>
<h2 id="conclusions">Conclusions</h2>
<p>I’ve been hacking around with this system for the last 6 months or so and making small tweaks and additions here or there in the meanwhile. I have to say, it works really great. The lastest update I made was integrating Airtrail via API. Now, when I book a flight, I enter the data into my flight tracker and within 15 minutes it’s added to my calendar, and within the hour it’s automatically copied to my work calendar. This is a huge quality of life improvement that saves me a ton of time in logistics management with my complicated travel requirements.</p>
<p>The overall cost of this system is pretty minimal. I’d imagine you can set this up and run it easily from a NAS at home if you want, but I opt to keep my data safely protected in Switzerland, so I subscribe to about $100 monthly of server time to run my websites and all my integrations. That’s a bit overkill—I can definitely optimize these costs and will do so over time, but the ease of getting everything set up on a docker host in a VM instance on a hosting provider was worth the extra money. And I’m easily saving $100 monthly in time just for making managing my schedule easier.</p>
<p>It’s not a perfect solution, but damn if it’s better than anything else I’ve tried yet.</p>
<p>Let me know if you ever try something similar!</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Elliptical Python Programming (173 pts)]]></title>
            <link>https://susam.net/elliptical-python-programming.html</link>
            <guid>43643292</guid>
            <pubDate>Thu, 10 Apr 2025 12:53:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://susam.net/elliptical-python-programming.html">https://susam.net/elliptical-python-programming.html</a>, See on <a href="https://news.ycombinator.com/item?id=43643292">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>By <b>Susam Pal</b> on 10 Apr 2025</p>
<p>
  One thing I love about Python is how it comes with its very own
  built-in zen.  In moments of tribulations, when I am wrestling with
  crooked code and tangled thoughts, I often find solace in its
  timeless wisdom.  Here's a glimpse of the clarity it provides:
</p>
<pre><samp>$ <kbd>python3 -m this | grep e-</kbd>
There should be one-- and preferably only one --obvious way to do it.</samp>
</pre>
<p>
  Indeed, there is one and only one <em>obvious</em> way to write the
  number 1 in Python, like so:
</p>
<pre><samp>&gt;&gt;&gt; <kbd>--(...==...)</kbd>
1</samp></pre>
<p>
  You may, quite naturally, place several ones adjacently to produce
  larger integers:
</p>
<pre><samp>&gt;&gt;&gt; <kbd>--(...==...)--(...==...)</kbd>
2</samp>
</pre>
<p>
  And so on, ad infinitum, or until your heap collapses like a poorly
  made soufflé.  Now, the "pre-decrement operator" at the beginning is
  entirely optional, much like the plus sign when you write "+5
  biscuits" in a letter to your grandmother.  It's not wrong, but it
  is unnecessary and, frankly, a bit pretentious.  So unless you want
  to look peculiar to your colleagues, you would likely want to adopt
  a more conventional style, such as this:
</p>
<pre><samp>&gt;&gt;&gt; <kbd>(...==...)--(...==...)--(...==...)</kbd>
3</samp>
</pre>
<p>
  Now, all computer programs are, in some sense, just a long, earnest
  stream of bits.  It is currently fashionable to bundle these bits
  into groups of eight and write them as integers.  Following this
  trend, we can compute absolutely anything that is computable as long
  as we know exactly what integers to write.  Now, I wouldn't want to
  bore you with the finer details of computer science – not in
  this day and age – fascinating as they may be.  I trust you
  are quite capable of drawing the rest of the
  f... well, <em>feathered</em>, nocturnal bird.  Once you've grasped
  the basics, a typical first Python program might look something like
  this:
</p>
<pre><code>exec('%ccode></pre>
<p>
  Now you might be wondering if this is <em>really</em> the way one
  ought to write production Python code.  Isn't it too much trouble to
  type those dots over and over again?  Not if you remap your
  <kbd>tab</kbd> key to type three dots, of course.  But I understand
  not everyone likes to remap their keys like this.  In particular,
  there exists a peculiar species of mammal known to remap their
  <kbd>tab</kbd> key to parentheses.  They claim it leads to
  enlightenment.  Such enlightened living forms may find the following
  program more convenient to type:
</p>
<pre><code>exec('%ccode></pre>
<p>
  This program is functionally equivalent to the earlier one.  But
  Python isn't meant for enlightenment.  It's meant for getting things
  done.  And to get things done, code should be readable,
  maintainable, and ideally not resemble an ancient summoning ritual.
  That's why I personally prefer the earlier style, the one with the
  ellipses.  It gracefully avoids the disconcerting void that lurks
  within the parentheses.  After all, programs must be written for
  people to read, and only incidentally for machines to execute.
</p>
<p>
  Finally, I must emphasise that you should never deploy code like
  this in production.  If you plan to use something like this for your
  production CGI scripts, I implore you to add some logging.  When
  dung inevitably collides with the fan, you'll be immensely glad you
  put some useful logs amidst your business logic.  With that little
  advice, I'll end this brief distraction from reading endless
  arguments on Internet forums.  Happy coding, and may your
  parentheses stay balanced (and may your ellipses be the punctuation
  that ...
  <!-- ).  Now, I can sleep peacefully!  -->
</p>
<!--
  For the enlightened folks who are offended by the penultimate
  paragraph, lighten up!  I am no stranger to the fine art of nested
  parentheses.  This very blog is crafted with an abundance of them,
  all forged through the mighty steel and bank machinery.
-->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[America Is Backsliding Toward Its Most Polluted Era (139 pts)]]></title>
            <link>https://www.theatlantic.com/health/archive/2025/04/air-pollution-trump-administration/682361/</link>
            <guid>43643243</guid>
            <pubDate>Thu, 10 Apr 2025 12:48:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theatlantic.com/health/archive/2025/04/air-pollution-trump-administration/682361/">https://www.theatlantic.com/health/archive/2025/04/air-pollution-trump-administration/682361/</a>, See on <a href="https://news.ycombinator.com/item?id=43643243">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header data-event-module="hero"><div><div><p>A third of Americans still breathe unhealthy air after decades of improvements—which the Trump administration wants to roll back.</p></div><div><figure><div data-flatplan-lead_figure_media="true"><picture><img alt="The U.S. Capitol with a smokestack in place of its dome" sizes="(min-width: 976px) 976px, 100vw" srcset="https://cdn.theatlantic.com/thumbor/Y1Zh1KNK6wIVhjO3tE3KuGq8z4A=/0x0:2000x1125/750x422/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 750w, https://cdn.theatlantic.com/thumbor/SfWEEZmwNCdWWmx_7WdhGg2wOII=/0x0:2000x1125/828x466/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 828w, https://cdn.theatlantic.com/thumbor/NcA_OV9sdf5oncAAx7R6PQW1tsQ=/0x0:2000x1125/960x540/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 960w, https://cdn.theatlantic.com/thumbor/DBcY48_b7NjkgdZHs4DSSVKRyNc=/0x0:2000x1125/976x549/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 976w, https://cdn.theatlantic.com/thumbor/3CBtwSuaUOTt6LZqpFaOAjMnsFw=/0x0:2000x1125/1952x1098/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 1952w" src="https://cdn.theatlantic.com/thumbor/NcA_OV9sdf5oncAAx7R6PQW1tsQ=/0x0:2000x1125/960x540/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg" id="article-lead-image" width="960" height="540"></picture></div><figcaption data-flatplan-lead_figure_caption="true">Illustration by Jonelle Afurong / The Atlantic. Sources: Thanasis / Getty; FOTOFORCE / Getty.</figcaption></figure></div></div><div><p><time datetime="2025-04-09T11:30:00Z" data-flatplan-timestamp="true">April 9, 2025, 7:30 AM ET</time> </p></div><gpt-ad format="injector" sizes-at-0="mobile-wide" targeting-pos="injector-article-start" sizes-at-976="desktop-wide"></gpt-ad></header><div data-view-action="view - audio player - start" data-view-label="682361" data-event-module="audio player" data-event-content-type="narrated" data-event-module-state="start" data-event-view="true"><div><p><img alt="The U.S. Capitol with a smokestack in place of its dome" sizes="80px" srcset="https://cdn.theatlantic.com/thumbor/nZRNvrZ7fKGwLGMgRx70kD4zXNw=/438x0:1563x1125/80x80/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 80w, https://cdn.theatlantic.com/thumbor/nmGToZ9ikqFmwklZWsU6wMxOkX4=/438x0:1563x1125/96x96/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 96w, https://cdn.theatlantic.com/thumbor/A5qcF2Ll4DQoSdYbVXCNMXNm84Q=/438x0:1563x1125/128x128/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 128w, https://cdn.theatlantic.com/thumbor/XP1BQRexRoACmcGTKDgOB8LkGXk=/438x0:1563x1125/160x160/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 160w, https://cdn.theatlantic.com/thumbor/bwVOxNd9D2-pO2wfm9Z82DXMSIc=/438x0:1563x1125/192x192/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 192w, https://cdn.theatlantic.com/thumbor/B9uJnGWtBOBEr-DfxUId5XajLxc=/438x0:1563x1125/256x256/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 256w, https://cdn.theatlantic.com/thumbor/r_UzrpCICMQj4sCPdfwl1f2O43o=/438x0:1563x1125/384x384/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 384w, https://cdn.theatlantic.com/thumbor/0ec44Kj7a0gdO0XkIKsCJ5bA6vE=/438x0:1563x1125/512x512/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg 512w" src="https://cdn.theatlantic.com/thumbor/nZRNvrZ7fKGwLGMgRx70kD4zXNw=/438x0:1563x1125/80x80/media/img/mt/2025/04/2035_4_1_Trump_Air_Quality_JA/original.jpg" width="80" height="80"></p></div><p>Produced by ElevenLabs and<!-- --> <a href="https://newsoveraudio.com/?offerId=atl_reader_exclusive_jks1kjl"> <!-- -->News Over Audio (Noa)</a> <!-- -->using AI narration. Listen to more stories on the Noa app.</p></div><section data-event-module="article body" data-flatplan-body="true"><div data-flatplan-paragraph="true"><p><small><em>Updated at 11:37 a.m. on April 9, 2025</em></small></p><p>  When you inhale a microscopic speck of soot, its journey may go like this: The particle enters your nose and heads into your lungs, penetrating even the tiny air sacs that facilitate gas exchange. Next it may slip into your bloodstream and flow into your heart, or past the blood-brain barrier. Most of us inhale some of these tiny particles every day. But inhaling enough can turn the act of breathing into an existential hazard, prompting or worsening asthma, COPD, respiratory infections, and permanent lung damage. In the heart, the specks can trigger heart disease, heart attacks, and most of the cardiovascular disorders you can think of. Air pollution is also associated with <a data-event-element="inline link" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC5332196/">depression and </a><a data-event-element="inline link" href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4373600/">anxiety</a>, and with higher <a data-event-element="inline link" href="https://www.nber.org/papers/w30626">rates</a> of suicide. It can trigger strokes and is linked to <a data-event-element="inline link" href="https://jamanetwork.com/journals/jamaneurology/article-abstract/2827124">dementia</a> or—even at average levels in this country—<a data-event-element="inline link" href="https://www.neurology.org/doi/10.1212/WNL.0000000000207871">Parkinson’s disease</a>.</p></div><p data-flatplan-paragraph="true">These particles <a data-event-element="inline link" href="https://www.nature.com/articles/s41467-019-11654-3">can also cross the placenta</a>, where they can reduce an infant’s <a data-event-element="inline link" href="https://environhealthprevmed.biomedcentral.com/articles/10.1186/s12199-021-00995-5">lung function</a> before birth. A pre-polluted baby is also more likely to arrive <a data-event-element="inline link" href="https://med.nyu.edu/departments-institutes/pediatrics/divisions/environmental-pediatrics/research/policy-initiatives/air-pollution-preterm-births">prematurely</a>, and at a <a data-event-element="inline link" href="https://www.sciencedirect.com/science/article/abs/pii/S0013935122014918">lower weight</a>. Exposure to bad air in utero is associated with a <a data-event-element="inline link" href="https://ehp.niehs.nih.gov/doi/10.1289/EHP9509">higher risk of autism</a>, and exposure in childhood has been linked to <a data-event-element="inline link" href="https://ehp.niehs.nih.gov/doi/10.1289/EHP10248">behavioral</a> and <a data-event-element="inline link" href="https://pubmed.ncbi.nlm.nih.gov/32889949/">cognitive</a> problems, including lower IQ. A person’s lungs can develop until age 25, and as Alison Lee, a pulmonologist at the Icahn School of Medicine at Mount Sinai, put it to me, “once you’ve lost lung function, you can’t get it back.” Persistent exposure to air pollution can cause permanent harm, creating health problems for children and setting them up to become sicker adults.</p><p data-flatplan-paragraph="true">It’s hard to picture a person dropping dead from air pollution, yet it happens all the time. In the United States, particulate matter is estimated to kill more than twice as many people as vehicular accidents do—in total, <a data-event-element="inline link" href="https://sustainability.stanford.edu/news/identifying-sources-deadly-air-pollution-us">some 100,000</a> to <a data-event-element="inline link" href="https://news.mit.edu/2013/study-air-pollution-causes-200000-early-deaths-each-year-in-the-us-0829">200,000</a> people a year, as an underlying factor of chronic disease or by way of heart attacks, asthma attacks, and other sudden events. Even as air quality in America has improved, researchers have found that relatively low concentrations of particulate matter can cause major hazards.</p><p data-flatplan-paragraph="true">All of this stems from a toxic and mostly invisible danger, largely the product of <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2020-08-27/as-wildfires-rage-the-pyrocene-age-is-upon-us?sref=OVk78rkt">burning things</a> for fuel and letting the remnant drift into the air and then into us—which is what happens unless the government regulates that process. The Trump administration, however, has shown little interest in doing so. Through new policies and aggressive cuts, the administration is taking steps that will encourage more pollution while muffling the science that shows the harms. The very air that Americans breathe will likely become less safe.</p><hr><p data-flatplan-paragraph="true">So far, the EPA has announced that it will pursue <a data-event-element="inline link" href="https://www.epa.gov/newsreleases/epa-launches-biggest-deregulatory-action-us-history">a suite of rollbacks</a> of environmental rules, among them a Joe Biden–era update to standards <a data-event-element="inline link" href="https://www.epa.gov/newsreleases/trump-epa-announces-path-forward-national-air-quality-standards-particulate-matter">for particulate matter</a> that were meant to be fully in force by 2032 and that the Biden EPA <a data-event-element="inline link" href="https://www.epa.gov/newsreleases/epa-finalizes-stronger-standards-harmful-soot-pollution-significantly-increasing">projected</a> would, in that year alone, prevent up to 4,500 premature deaths and 800,000 cases of asthma, reaping up to $46 billion in health benefits. It also plans to reassess a rule limiting the amount of airborne mercury and arsenic that power plants can release. In a statement <a data-event-element="inline link" href="https://www.epa.gov/newsreleases/trump-epa-announces-path-forward-national-air-quality-standards-particulate-matter">announcing</a> one of these rollbacks, the EPA said that the U.S. has already made major gains in air quality, implying that these are enough. In response to a request for comment, an agency spokesperson told me that EPA Administrator Lee Zeldin’s priority is “clean air, land, and water for EVERY American.”</p><p data-flatplan-paragraph="true">The air in the U.S. certainly is cleaner than it was when industrial air pollution billowed into the skies unmitigated. Over the past 25 years alone, particulate air pollution in the country has <a data-event-element="inline link" href="https://gispub.epa.gov/air/trendsreport/2023/#introduction">dropped</a> by more than 30 percent. Yet at least one in three Americans <a data-event-element="inline link" href="https://www.npr.org/2024/04/24/1246729103/unhealthy-dangerous-air-hurts-130-million-americans">lives</a> in a place where the air is still a health hazard. The particulate-matter standard that Zeldin intends to roll back is still nearly twice as high as the limit the World Health Organization recommends to protect health.</p><p data-flatplan-paragraph="true">Rolling back rules will take time, but America’s air quality could worsen in the interim. The EPA told businesses last month that they can simply <a data-event-element="inline link" href="https://www.nytimes.com/2025/03/27/climate/epa-air-pollution-exemption-mercury-coal-ash.html">email the agency</a> if they want an exemption from certain pollution regulations and that “the president will make a decision.” However they address those pleas, this opens a back door. The recent cuts to EPA personnel almost certainly mean that enforcement will suffer too. Meanwhile, worsening wildfire seasons, fueled by climate warming, are <a data-event-element="inline link" href="https://www.theatlantic.com/science/archive/2024/02/air-pollution-life-cost-great-recession/677523/">reversing</a> decades of air-quality progress in this country. And ignoring and even stoking climate change, as Donald Trump’s administration is doing, will produce worse wildfire seasons. The country’s slide back toward its more polluted past “will become a steeper trajectory,” Joan Casey, an environmental epidemiologist at the University of Washington whose work helped expose the <a data-event-element="inline link" href="https://pubmed.ncbi.nlm.nih.gov/39585704/">connection</a> between wildfire smoke and dementia risk, told me.</p><p data-flatplan-paragraph="true">The administration’s cuts to scientific research mean, too, that the impact of its deregulation may never be fully understood. In recent months, the government has <a data-event-element="inline link" href="https://www.cbsnews.com/news/state-department-stops-reporting-air-quality-levels/">pulled down</a> some air-quality data and canceled grants; it also plans to dissolve a whole <a data-event-element="inline link" href="https://www.nytimes.com/2025/03/17/climate/trump-eliminates-epa-science.html">EPA division</a> dedicated to studying how the environment affects public health. These actions create a sort of purposeful naivete: You can’t regulate what you can’t prove is harmful, and you can’t prove harm without research.</p><p data-flatplan-paragraph="true">And you certainly can’t solve for what you don’t yet know is a problem. Newer findings about how air pollution may addle a body—by worsening mental health or triggering more cases of neurodegenerative disease, for example—haven’t yet been included in the EPA’s risk-benefit assessments of air-quality regulations, Casey added. “I think often we’re underestimating the true impact,” she said.</p><p data-flatplan-paragraph="true">When I called Marianthi-Anna Kioumourtzoglou, an epidemiologist at Columbia University, she had just learned that the Trump administration had canceled her grant to study how impacts of climate change, including air pollution, alter cognitive function in aging people. (Earlier this year, too, she was dismissed from her appointment to the EPA’s Clean Air Scientific Advisory Committee, along with the rest of the panel.) Even so, the basics on air pollution have been studied enough that Kioumourtzoglou knows how current rollbacks will affect Americans: There will be “more heart attacks, more respiratory adverse health outcomes for sure,” she told me. “Our cognitive functions are going to be worse—the progression of Alzheimer’s, the progression of Parkinson’s.” Pollution-related depression and anxiety may go up. Even slightly increasing the risk or rate of any of these at the population level can diminish quality of life and, ultimately, productivity, she said. A sicker country is a poorer one.</p><p data-flatplan-paragraph="true">Compared with smoking, for example, an individual’s risk of inhaling a dangerous amount of air pollution and then having their health affected because of it is relatively small, she told me—but “the problem is that few people smoke, and everybody breathes.” If a portion of the population’s cognitive function is diminished, even a little bit, the overall impact is enormous.</p><hr><p data-flatplan-paragraph="true">Kioumourtzoglou wonders, too, how much further the Trump administration will push the idea that air pollution should not be a concern to Americans. When the Heritage Foundation published a report in December that made the radical case that no definitive link exists between air pollution and poor public-health outcomes, she disregarded it. But after watching <a data-event-element="inline link" href="https://www.politico.com/interactives/2025/trump-executive-orders-project-2025/">other Heritage Foundation goals</a> be enacted, she is concerned that its rationale could be taken seriously by the current administration. <a data-event-element="inline link" href="https://www.heritage.org/climate/report/air-quality-and-public-health-there-link">The Heritage report</a> attempts to cast doubt on the validity of decades of science by, in part, arguing that studies linking air pollution to health effects fail to prove causation, because they’re not randomized or controlled. (After this story was published, Diana Furchtgott-Roth, the director of Heritage’s Center for Energy, Climate, and Environment, said that the report was intended to guide federal policies and that it showed that “no causal link between particulates and heart attacks and deaths.”)</p><p data-flatplan-paragraph="true">This is an attack not just on air-pollution research but on an entire scientific approach. Most public-health research is observational by necessity, because exposing people to air pollution in a lab setting to see how sick they get, say, wouldn’t be ethical. Instead, scientists gather data from already-exposed populations and try to parse out how different variables affected people’s health. Over decades, researchers have developed biostatistical methods to determine causal relationships from large groups of studies.</p><p data-flatplan-paragraph="true">When EPA scientists and regulators link a pollutant and a health outcome, “they’re not making that assessment on one or two or three studies. It’s decades of scientific publications,” Corwin Zigler, a biostatistician at Brown University who served on an EPA scientific advisory panel on air pollution under the Biden administration, told me. He wasn’t surprised by the logic behind the Heritage Foundation report: The leader of the previous Trump administration’s air-pollution advisory panel had <a data-event-element="inline link" href="https://revealnews.org/article/trumps-air-pollution-adviser-clean-air-saves-no-lives/">begun to sow doubt</a> about basic air-pollution research. In response, the National Academies of Sciences, Engineering, and Medicine undertook a <a data-event-element="inline link" href="https://nap.nationalacademies.org/catalog/26612/advancing-the-framework-for-assessing-causality-of-health-and-welfare-effects-to-inform-national-ambient-air-quality-standard-reviews">major review</a> of the way the EPA assesses causal relationships, and though it recommended that the EPA’s process be more transparent, it found its methods scientifically robust. Zigler said he has no doubt that particulate matter is causing harm at current levels in the United States: “That’s the scientific consensus. That takes very seriously all of the limitations of any given scientific study.”</p><p data-flatplan-paragraph="true">Studies about how entire populations are harmed by air pollution are framed in probabilities and percentages, but they represent a multitude of individuals for whom daily living has been made tangibly worse. For Lee, the Mount Sinai pulmonologist, work became personal a few years ago, when her son, now 5, began having asthma attacks that would send him to the emergency room. Asthma is a common-enough ailment that an attack might seem like a routine and manageable health issue. But anyone who’s had a severe one will tell you differently. Over years of reporting on air pollution, I’ve had asthma attacks described to me as feeling like someone is stepping with their full weight on your ribcage, or as though you are suddenly a fish out of water, suffocating on land. It’s a traumatic event. Lee, knowing what she does about air pollution, decided to move her family from New York City to the suburbs a year and a half ago; they haven’t been to the emergency room since.</p><p data-flatplan-paragraph="true">“Clearly, we know that where you live determines your health,” Lee told me, but few people can make a choice like she did, to upend their life to breathe cleaner air. The Trump administration is also cutting the programs intended to <a data-event-element="inline link" href="https://www.theatlantic.com/science/archive/2025/03/trump-environmental-justice/681958/">address exactly these geographic disparities, while working to make the air worse for everyone. </a>EPA Administrator Zeldin has <a data-event-element="inline link" href="https://www.epa.gov/newsreleases/trump-epa-announces-path-forward-national-air-quality-standards-particulate-matter">said</a> these rollbacks are part of the administration’s plan to “unleash the Golden Age of American prosperity.” But prosperity does not mean choking to death in one’s own home or depriving a child of cognitive capacity. Whatever wealth is promised here is narrowly disbursed at others’ expense.</p></section><div data-event-module="footer"><p><h3>About the Author</h3></p><div><address id="article-writer-0" data-event-element="author" data-event-position="1"><div><div><p><a href="https://www.theatlantic.com/author/zoe-schlanger/" data-event-element="image"><img alt="" loading="lazy" src="https://cdn.theatlantic.com/thumbor/u8S5JVOtiftKFSYJUPgPfsZK710=/468x9:2384x1925/120x120/media/img/authors/2023/10/Sten_SSENSE_ZoeSchlanger_18_hi_res_version/original.jpg" width="60" height="60"></a></p></div><div><p><a href="https://www.theatlantic.com/author/zoe-schlanger/" data-label="https://www.theatlantic.com/author/zoe-schlanger/" data-action="click author - name">Zoë Schlanger</a> is a staff writer at <em>The Atlantic</em>. She is the author of <em><a href="https://bookshop.org/p/books/the-light-eaters-how-the-unseen-world-of-plant-intelligence-offers-a-new-understanding-of-life-on-earth-zoe-schlanger/20890522?ean=9780063073852">The Light Eaters</a>, </em>about the world of plant-behavior-and-intelligence research.</p></div></div></address></div></div><gpt-ad format="injector" sizes-at-0="mobile-wide,native,house" targeting-pos="injector-most-popular" sizes-at-976="desktop-wide,native,house"></gpt-ad></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Hacker News Hug of Deaf (431 pts)]]></title>
            <link>https://susam.net/hn-bell.html</link>
            <guid>43642123</guid>
            <pubDate>Thu, 10 Apr 2025 09:09:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://susam.net/hn-bell.html">https://susam.net/hn-bell.html</a>, See on <a href="https://news.ycombinator.com/item?id=43642123">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>By <b>Susam Pal</b> on 05 Apr 2025</p>
<blockquote>
  <p>
    "It's essentially the Hacker News Hug of Deaf."
    –
    <a href="https://news.ycombinator.com/item?id=30146019#30147639">@TonyTrapp</a>
  </p>
</blockquote>
<p>
  About three years ago, I set up a tiny <code>netcat</code> loop on
  one of my Debian servers to accept arbitrary connections from the
  Hacker News (HN) community.  The loop ran for 24 hours and did
  exactly three things whenever a client connected:
</p>
<ol>
  <li>
    Send a simple <code>ok</code> message to the client.
  </li>
  <li>
    Close the connection immediately.
  </li>
  <li>
    Make my terminal beep four times.
  </li>
</ol>
<p>
  That's it!  It was a playful experiment in response to a thread
  about quirky, do-it-yourself alerting systems for friends and
  family.  See
  <a href="https://news.ycombinator.com/item?id=30146019#30146451">this
  HN thread</a> for the original discussion.  Here is the exact
  command I ran on my server:
</p>
<pre><code>while true; do (echo ok | nc -q 1 -vlp 8000 2&gt;&amp;1; echo; date -u) | tee -a beeper.log; for i in 1 2 3 4; do printf '\a'; sleep 1; done &amp; done</code></pre>
<p>
  The <code>nc</code> command closes the connection immediately after
  sending the <code>ok</code> message and runs an
  inner <code>for</code> loop in a background shell that
  asynchronously prints the bell character to the terminal four times.
  Meanwhile, the outer <code>while</code> command loops back quickly
  to run a new <code>nc</code> process, thus making this one-liner
  script instantly ready to accept the next incoming connection.
</p>
<p>
  Soon after I shared this, members of the HN community began
  connecting to the demo running on <code>susam.net:8000</code>.
  Anyone on the Internet could use any client of their choice to
  connect.  Here's how I explained it in the HN thread:
</p>
<blockquote>
  <p>
    Now anytime someone connects to port 8000 of my system
    by <em>any</em> means, I will hear 4 beeps!  The other party can
    use <em>whatever client</em> they have to connect to port 8000 of
    my system, e.g., a web browser, <code>nc HOST
    8000</code>, <code>curl HOST:8000</code>, or even, <code>ssh HOST
    -p 8000</code>, <code>irssi -c HOST -p 8000</code>, etc.
  </p>
</blockquote>
<p>
  In the next 24 hours, I received over 4761 connections, each one
  triggering four beeps.  That's a total of 19044 terminal beeps
  echoing throughout the day!
</p>
<figure>
  <img src="https://susam.net/files/blog/beeper.png" alt="Graph">
  <figcaption>
    Number of beeper connections received every hour
  </figcaption>
</figure>
<p>
  The data for the above graph is available in
  <a href="https://gist.github.com/susam/159c7d92659b3185eb0b0d683998a3b7">beeper.log</a>.
  Now, 4761 isn't a huge number in the grand scheme of things, but it
  was still pretty cool to see people notice an obscure comment buried
  in a regular HN thread, act on it, and make my terminal beep
  thousands of time.
</p>
<p>
  At the end of the day, this was a fun experiment.  Pointless, but
  fun!  Computing isn't always about solving problems.  Sometimes,
  it's also about exploring quirky ideas.  The joy is in the
  exploration, and having others join in made it even more enjoyable.
  Activities like this keep computing fun for me!
</p>

</div></div>]]></description>
        </item>
    </channel>
</rss>