<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 28 Nov 2023 00:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[AI SDR which automatically finds and converts leads for Your business (484 pts)]]></title>
            <link>https://jusdr.com</link>
            <guid>38437114</guid>
            <pubDate>Mon, 27 Nov 2023 19:38:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jusdr.com">https://jusdr.com</a>, See on <a href="https://news.ycombinator.com/item?id=38437114">Hacker News</a></p>
Couldn't get https://jusdr.com: Error: getaddrinfo ENOTFOUND jusdr.com]]></description>
        </item>
        <item>
            <title><![CDATA[Sports Illustrated Published Articles by Fake, AI-Generated Writers (150 pts)]]></title>
            <link>https://futurism.com/sports-illustrated-ai-generated-writers</link>
            <guid>38436516</guid>
            <pubDate>Mon, 27 Nov 2023 18:53:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://futurism.com/sports-illustrated-ai-generated-writers">https://futurism.com/sports-illustrated-ai-generated-writers</a>, See on <a href="https://news.ycombinator.com/item?id=38436516">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="incArticle"><p>There was nothing in Drew Ortiz's <a href="https://web.archive.org/web/20221205082417/https://www.si.com/review/author/drewortiz/">author biography</a> at <i>Sports Illustrated </i><span>to suggest that he was anything other than human. </span></p><p>"Drew has spent much of his life outdoors, and is excited to guide you through his never-ending list of the best products to keep you from falling to the perils of nature," it read. "Nowadays, there is rarely a weekend that goes by where Drew isn't out camping, hiking, or just back on his parents' farm."</p><p>The only problem? Outside of <i>Sports Illustrated</i>, Drew Ortiz doesn't seem to exist. He has no social media presence and no publishing history. And even more strangely,&nbsp;his profile photo on <em>Sports Illustrated </em><a href="https://archive.is/ndV3A">is for sale</a> on a website that sells AI-generated headshots,&nbsp;where he's described as "neutral white young-adult male with short brown hair and blue eyes."</p><figure></figure><figure></figure><p>Ortiz isn't the only AI-generated author published by <i>Sports</i> <em>Illustrated</em>,&nbsp;according to a person involved with the creation of the content who asked to be kept anonymous to protect them from professional repercussions.</p><p>"There's a lot," they told us of the fake authors. "I was like, what are they? This is ridiculous. This person does not exist."</p><p>"At the bottom [of the page] there would be a photo of a person and some fake description of them like, 'oh, John lives in Houston, Texas. He loves yard games and hanging out with his dog, Sam.' Stuff like that," they continued. "It's just crazy."</p><p>The AI authors' writing often sounds like it was written by an alien;&nbsp;<a href="https://web.archive.org/web/20221004090814/https://www.si.com/review/full-size-volleyball/">one Ortiz article</a>, for instance, warns that volleyball "can be a little tricky to get into, especially without an actual ball to practice with."</p><p>According to a second person involved in the creation of the <em>Sports Illustrated</em> content who also asked to be kept anonymous, that's because it's not just the authors' headshots that are AI-generated. At least some of the articles themselves, they said, were churned out using AI as well.</p><p>"The content is absolutely AI-generated,"&nbsp;the second source said, "no matter how much they say that it's not."</p><p>After we reached out with questions to the magazine's publisher, The Arena Group, all the AI-generated authors disappeared from <em>Sports Illustrated</em>'s site without explanation. Our questions received no response.</p><p>The AI content marks a staggering fall from grace for <em>Sports Illustrated</em>, which in past decades won numerous National Magazine Awards for its sports journalism and published work by literary giants ranging from William Faulkner to John Updike.</p><p>But now that it's under the management of The Arena Group, parts of the magazine seem to have devolved into a Potemkin Village in which phony writers are cooked up out of thin air, outfitted with equally bogus biographies and expertise to win readers' trust, and used to pump out AI-generated buying guides that are monetized by affiliate links to products that provide a financial kickback when readers click them.</p><p><em>Do you know anything about The Arena Group's use of AI-generated content? Shoot us an email at <a href="mailto:tips@futurism.com">tips@futurism.com</a>. We can keep you anonymous.</em></p><p>Making the whole thing even more dubious, these AI-generated personas are periodically scrubbed from existence in favor of new ones.</p><p><span>Sometime this summer, for example, Ortiz disappeared from<em> Sports Illustrated</em>'s site entirely, his profile page instead redirecting to that of a</span><span> "<a href="https://archive.is/D9DV2">Sora Tanaka</a>." Again, there's no online record of a writer by that name — but Tanaka's profile picture <a href="https://generated.photos/face/joyful-asian-young-adult-female-with-long-brown-hair-and-brown-eyes--5f1836d41f67b00006889840">is for sale</a> on the same AI headshot marketplace as Ortiz, where she's listed as "joyful asian young-adult female with long brown hair and brown eyes."</span></p><p><span>"Sora has always been a fitness guru, and loves to try different foods and drinks," read Tanaka's bio. "Ms. Tanaka is thrilled to bring her fitness and nutritional expertise to the Product Reviews Team, and promises to bring you nothing but the best of the best."</span></p><figure></figure><figure></figure><p>But Tanaka didn't last, either. Eventually she also disappeared, replaced by yet another profile that carried no headshot at all, which <em>Sports Illustrated</em> deleted along with the other AI-generated content after we reached out.</p><p>It wasn't just author&nbsp;profiles that the magazine repeatedly replaced. Each time an author was switched out, the posts they supposedly penned would be reattributed to the new persona, with no editor's note explaining the change in byline.</p><p>None of the articles credited to Ortiz or the other names contained any disclosure about the use of AI or that the writer wasn't real, though they did eventually gain a disclaimer explaining that the content was "created by a 3rd party," and that the "<em>Sports Illustrated</em> editorial staff are not involved in the creation of this content."</p><p><em>Do you know anything about that "3rd party," or how the content was created? Email us at <a href="mailto:tips@futurism.com">tips@futurism.com</a>. We can keep you anonymous.</em></p><p>Though <i>Sports Illustrated</i>'s AI-generated authors and their articles disappeared after we asked about them, similar operations appear to be alive and well elsewhere in The Arena Group's portfolio.</p><p>Take <em>TheStreet</em>, a financial publication cofounded by Jim Cramer in 1996 that The Arena Group <a href="https://www.businesswire.com/news/home/20190808005215/en/Maven-Closes-Acquisition-TheStreet-New-Jim-Cramer">bought for $16.5 million</a> in 2019. Like at<em> Sports Illustrated</em>, we found authors at <em>TheStreet </em>with highly specific biographies&nbsp;detailing seemingly flesh-and-blood humans with specific areas of expertise — but with profile photos traceable to that same AI face website. And like at <em>Sports Illustrated</em>, these fake writers are periodically wiped from existence and their articles reattributed to new names, with no disclosure about the use of AI.</p><p>Sometimes <em>The</em><em>Street</em>'s efforts to remove the fake writers can be sloppy. On its <a href="https://archive.is/EVdBw">review </a><a href="https://archive.is/EVdBw">section's title page</a>,&nbsp;for instance, the site still proudly flaunts the expertise of AI-generated contributors who have since been deleted, linking to writer profiles it describes as ranging "from <a href="https://www.thestreet.com/review/author/domino-abrams/">stay-at-home dads</a> to <a href="https://www.thestreet.com/review/author/denise-mcnamara/">computer and information analysts</a>." This team,&nbsp;the site continues, "is comprised of a well-rounded group of people who bring varying backgrounds and experiences to the table."</p><p>People? We're not so sure.</p><p>The "stay-at-home dad" linked in that sentence above, for instance, is a so-called "<a href="https://web.archive.org/web/20211022203137/https://www.thestreet.com/review/author/domino-abrams/">Domino Abrams</a><span>" — "a pro at home cleaning and maintenance," at least until he was expunged from the site — whose profile picture can <a href="https://images.generated.photos/2X9jxxHg-BqU-lY8ER7BYjhM7v7Mk1lvBdZLexTtQjo/rs:fit:256:256/czM6Ly9pY29uczgu/Z3Bob3Rvcy1wcm9k/LnBob3Rvcy92M18w/ODk3Njc1LmpwZw.jpg">again be found</a>&nbsp;on that same site that sells AI-generated headshots. </span></p><figure></figure><p><span>Or look at "<a href="https://web.archive.org/web/20220706182957/https://www.thestreet.com/review/author/denise-mcnamara/">Denise McNamara</a>," the "information analyst" that <em>TheStreet</em> boasted about — "her extensive personal experience with electronics allows her to share her findings with others online" — whose profile picture is <a href="https://images.generated.photos/aArmEGQt-wLB_b9taXiittj3hoiXzDkOp8Npv-yDnSk/rs:fit:256:256/czM6Ly9pY29uczgu/Z3Bob3Rvcy1wcm9k/LnBob3Rvcy90cmFu/c3BhcmVudF92My92/M18wMzc1ODk5LnBu/Zw.png">once again listed</a> on the same AI headshot marketplace. </span><span>Or "<a href="https://web.archive.org/web/20211203045751/https://www.thestreet.com/review/author/nicole-merrifield/">Nicole Merrifield</a>," an alleged "first grade teacher" who "loves helping people," but whose profile is <a href="https://images.generated.photos/a7aiK5ivGIOmRmVNbqI17mxJ6bknNdLxB6l2LQTEFkA/rs:fit:256:256/czM6Ly9pY29uczgu/Z3Bob3Rvcy1wcm9k/LnBob3Rvcy92M18w/MTQ5Nzc5LmpwZw.jpg">again from</a>&nbsp;that AI headshot site. </span><span>(At some point this year, Abrams, McNamara, and Merrifield were replaced by bylines whose profile pictures aren't for sale on the AI headshot site.)</span></p><p>Basic scrutiny shows that the quality of the AI authors' posts is often poor, with bizarre-sounding language and glaring formatting discrepancies.</p><p>This <a href="https://web.archive.org/web/20221004132724/https://www.thestreet.com/review/improve-your-finances/">article about personal finance</a> by the AI-generated Merrifield,<span> for example, starts off with the sweeping libertarian claim that "your financial status translates to your value in society." </span></p><p>After that bold premise, the article explains that "people with strong financial status are revered and given special advantages everywhere around the world," and launches into a numbered list of how you can "improve your finance status" for yourself. Each number on what should be a five-point list, though, is just number one. Mistakes happen, but we can't imagine that anyone who can't count to five would give stellar financial advice.</p><figure></figure><p>Abysmal-quality AI content, though, shouldn't be surprising at The Arena Group.</p><p>Back in February, when the company first started publishing AI-generated health advice at its magazine <em>Men's Journal</em>,&nbsp;<a href="https://futurism.com/neoscope/magazine-mens-journal-errors-ai-health-article">we found that its first story</a> was riddled with errors, prompting it to issue a massive correction.</p><p>Before that, when The Arena Group first announced its foray into AI, its CEO Ross Levinsohn promised in an <a href="https://www.wsj.com/articles/sports-illustrated-publisher-taps-ai-to-generate-articles-story-ideas-11675428443">interview with&nbsp;<em>The Wall Street Journal</em></a> that its quality would be outstanding.</p><p>"It’s not about 'crank out AI content and do as much as you can,'" he told the newspaper early this year. "Google will penalize you for that and more isn't better; better is better."</p><p>Needless to say, neither fake authors who are suddenly replaced with different names nor deplorable-quality AI-generated content with no disclosure amount to anything resembling good journalism, and to see it published by a&nbsp;once-iconic magazine like <em>Sports Illustrated </em>is disheartening. Bylines exist for a reason: they give credit where it's due, and just as importantly, they let readers hold writers accountable.</p><p>The undisclosed AI content is a direct affront to the fabric of media ethics, in other words, not to mention a perfect recipe for eroding reader trust. And at the end of the day, it's just remarkably irresponsible behavior that we shouldn't see anywhere — let alone normalized by a high-visibility publisher.</p><p>The Arena Group is also hardly alone, either. As powerful generative AI tools have debuted over the past few years, many publishers have quickly attempted to use the tech to churn out monetizable content.</p><p>In almost every case, though, these efforts to cut out human journalists have backfired embarrassingly.</p><p>We <a href="https://futurism.com/the-byte/cnet-publishing-articles-by-ai">caught&nbsp;<em>CNET</em></a> and&nbsp;<a href="https://futurism.com/cnet-bankrate-restarts-ai-articles"><em>Bankrate</em></a>, both owned by Red Ventures, publishing barely-disclosed AI content that was filled with <a href="https://futurism.com/cnet-ai-errors">factual mistakes</a> and even <a href="https://futurism.com/cnet-ai-plagiarism">plagiarism</a>; in the ensuing storm of criticism, <em>CNET&nbsp;</em>issued corrections to <a href="https://www.theverge.com/2023/1/25/23571082/cnet-ai-written-stories-errors-corrections-red-ventures">more than half</a> its AI-generated articles. G/O Media also published AI-generated material on its portfolio of sites, resulting in embarrassing bungles <a href="https://futurism.com/gizmodo-kotaku-staff-furious-ai-content">at <em>Gizmodo</em></a> and&nbsp;<a href="https://futurism.com/the-av-club-imdb"><em>The A.V. Club</em></a>. We <a href="https://futurism.com/buzzfeed-publishing-articles-by-ai">caught </a><em><a href="https://futurism.com/buzzfeed-publishing-articles-by-ai">BuzzFeed</a>&nbsp;</em>publishing slapdash AI-generated travel guides. And <em>USA Today&nbsp;</em>and other Gannett newspapers <a href="https://www.cnn.com/2023/08/30/tech/gannett-ai-experiment-paused/index.html">were busted publishing</a> hilariously garbled AI-generated sports roundups that one of the company's own sports journalists <a href="https://futurism.com/gannett-sports-writer-ai-generated-content">described as</a> "embarrassing," saying they "shouldn't ever" have been published.</p><p>If any media organization finds a way to engage with generative AI in a way that isn't either woefully ill-advised or actively unethical, we're all ears. In the meantime, forgive us if we don't hold our breath.</p><p><strong>More on AI-generated journalism: </strong><a href="https://futurism.com/usa-today-updates-ai-generated-sports"><em>USA Today</em> Updates Every AI-Generated Sports Article to Correct "Errors"</a></p><br></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Broadcom lays off many VMware employees after closing acquisition (255 pts)]]></title>
            <link>https://www.businessinsider.com/broadcom-vmware-layoffs-employees-face-job-cuts-acquisition-2023-11</link>
            <guid>38436419</guid>
            <pubDate>Mon, 27 Nov 2023 18:48:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.businessinsider.com/broadcom-vmware-layoffs-employees-face-job-cuts-acquisition-2023-11">https://www.businessinsider.com/broadcom-vmware-layoffs-employees-face-job-cuts-acquisition-2023-11</a>, See on <a href="https://news.ycombinator.com/item?id=38436419">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="piano-inline-content-wrapper" data-piano-inline-content-wrapper=""> 
                    
                    
                    
                          
                          
                          <section data-offer-key="pre-churn-offer" data-component-type="inline-offer" data-place-after-element-selector=".post-content .content-lock-content > p">
                            <article>
                              <img src="https://www.businessinsider.com/public/assets/subscription/marketing/banner-overlay/top-left.svg" alt="">
                              <img src="https://www.businessinsider.com/public/assets/subscription/marketing/banner-overlay/bottom-right.svg" alt="">
                          
                                        </article>
                          </section>
                    
                    <div data-component-type="content-lock" data-load-strategy="exclude">
                                  <ul><li>Some VMware employees learned Monday their positions would be eliminated.</li><li>Broadcom announced it closed its $69 billion acquisition of VMware on November 22.</li><li>VMware had already started cutting jobs prior to the deal closing.</li></ul><!-- Excluded mobile ad on desktop --><div id="formContainer" data-component-type="inline-newsletter-module" data-event-label="insider_today" data-newsletter-id="1" data-list="Insider Today" data-acq-source="techinlinesignup">
                        
                        
                          <section>
                              
                        
                            <p><svg version="1.1" xmlns="http://www.w3.org/2000/svg" role="img" width="50" height="50" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve">
                          <title>Loading</title>
                          <desc>Something is loading.</desc>
                          <path fill="#111" d="M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z">
                            <animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"></animateTransform>
                          </path>
                        </svg></p>
                            
                        
                            
                        
                            <div>
                              <p>Thanks for signing up!</p>
                              
                              <p>
                              Access your favorite topics in a personalized feed while you're on the go.
                                    </p>
                            </div>
                        
                            
                            
                          </section>
                        
                            <div>
                                <p><img src="https://www.businessinsider.com/public/assets/rebrand/newsletter-bull.png" data-old-src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1 1'%3E%3C/svg%3E" data-src="/public/assets/rebrand/newsletter-bull.png">
                              
                              
                              
                              </p>    </div>
                        
                          
                        </div><p>Some VMware employees learned on Monday that their positions <a target="_blank" href="https://www.businessinsider.com/broadcom-vmware-huge-layoffs-acquisition-2023-8" data-analytics-product-module="body_link" rel="">would be eliminated</a> following Broadcom's announcement last week that its deal to acquire the company had closed.</p><p><a target="_blank" href="https://www.businessinsider.com/vmware-chaos-broadcom-acquisition-layoffs-conference-employees-customers-2022-8" data-analytics-product-module="body_link" rel="">Broadcom first announced</a> in May 2022 that it would acquire <a target="_blank" href="https://www.businessinsider.com/vmware-partners-optimistic-broadcom-acquisition-cozy-up-to-customers-2022-9" data-analytics-product-module="body_link" rel="">VMware</a> for $61 billion and assume $8 billion of its net debt. The company announced that it closed the deal on November 22, shortly after receiving regulatory clearance from China. It also had to receive regulatory clearance from other countries including the US and the UK.</p><p>Employees whose positions were eliminated received an email on Monday, viewed by Business Insider, that read: "Broadcom recently completed its acquisition of VMware. As part of integration planning, and following an organizational needs assessment, we identified go-forward roles that will be required within the combined company. We regret to inform you that your position is being eliminated and your employment will be terminated."</p><p>"We would like to thank you for your dedication and service. We want to make this transition as smooth as possible, including offering you a generous severance package and providing you a non-working paid notice period," the email continued.</p><!-- Excluded mobile ad on desktop --><p>Currently, it's unclear exactly how many employees will be affected by the cuts. <a target="_blank" href="https://www.businessinsider.com/broadcom-ceo-vmware-explore-conference-customer-employee-concern2022-8" data-analytics-product-module="body_link" rel="">Broadcom</a> did not immediately respond to a request for comment.</p><p><a target="_blank" href="https://www.businessinsider.com/vmware-employees-poached-aws-google-recruiters-after-broadcom-acqusition-2022-8" data-analytics-product-module="body_link" rel="">VMware</a> — which, as of February, employed more than 38,000 people — had already <a target="_blank" href="https://www.businessinsider.com/vmware-layoffs-job-cuts-broadcom-acquisition-deadline-looms-2023-10" data-analytics-product-module="body_link" rel="">cut jobs</a> before the acquisition closed, BI previously reported. <a target="_blank" href="https://www.businessinsider.com/vmware-broadcom-acquisition-deal-leaked-email-options-employees-2023-9" data-analytics-product-module="body_link" rel="">VMware sent</a> a letter to employees in September saying that they would be offered a job by Broadcom, offered a transitional role, or receive a severance package.</p><p>Some <a target="_blank" href="https://www.businessinsider.com/broadcom-vmware-deal-employees-concerned-carbon-black-euc-2023-5" data-analytics-product-module="body_link" rel="">VMware employees</a> speculated that <a target="_blank" href="https://www.businessinsider.com/broadcom-vmware-euc-carbon-black-divest-units-2023-5" data-analytics-product-module="body_link" rel="">Broadcom could spin out</a> certain units.</p><p>Several <a target="_blank" href="https://www.businessinsider.com/meet-vmwares-top-executive-departures-and-hires-in-2022-2022-8" data-analytics-product-module="body_link" rel="">top VMware executives</a> have left the cloud-computing company over the past year. Some <a target="_blank" href="https://www.businessinsider.com/vmware-employees-are-leaving-in-droves-after-broadcom-acquisition-2022-8" data-analytics-product-module="body_link" rel="">VMware employees</a> said they worried about a culture clash with Broadcom, especially <a target="_blank" href="https://www.businessinsider.com/broadcom-ceo-comments-pressure-vmware-staff-come-into-office-wfh-2022-8" data-analytics-product-module="body_link" rel="">since Broadcom requires</a> workers to return to the office. They also said some deals <a target="_blank" href="https://www.businessinsider.com/vmware-sales-slowdown-contracts-salespeople-frustration-2022-8" data-analytics-product-module="body_link" rel="">had slowed as clients waited for news about VMware's fate.</a></p><!-- Excluded mobile ad on desktop --><p><strong><em>Got a tip?</em></strong><em>&nbsp;Contact this reporter via email at&nbsp;</em><a target="_blank" rel="noopener nofollow" href="mailto:rmchan@businessinsider.com" data-analytics-product-module="body_link"><em><u>rmchan@businessinsider.com</u></em></a><em>, Signal at 646.376.6106, or Telegram at @rosaliechan.&nbsp;(PR pitches by email only, please.) Other types of secure messaging available upon request.</em></p>
                      </div>
                    
                    
                        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Toddler Loves Planes, So I Built Her a Radar (532 pts)]]></title>
            <link>https://jacobbartlett.substack.com/p/my-toddler-loves-planes-so-i-built</link>
            <guid>38435908</guid>
            <pubDate>Mon, 27 Nov 2023 18:16:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jacobbartlett.substack.com/p/my-toddler-loves-planes-so-i-built">https://jacobbartlett.substack.com/p/my-toddler-loves-planes-so-i-built</a>, See on <a href="https://news.ycombinator.com/item?id=38435908">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png" width="700" height="486" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:486,&quot;width&quot;:700,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fae00ead5-bd9f-41c0-a573-04504ae2aea5_700x486.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Late-stage user testing with my toddler</figcaption></figure></div><p>This is a tale of inspiration, of a vision taking shape, and of rapid feedback from that most discerning of customers: a 2-year-old girl.</p><p><span>Keen to skip ahead to the final product? Go ahead and download </span><a href="https://apps.apple.com/gb/app/aviator-radar-on-your-phone/id6469189335" rel="">Aviator — Radar on your Phone</a><span> from the App Store now!</span></p><blockquote><p><em><span>For the HackerNews crowd—please </span><a href="https://twitter.com/jacobs_handle" rel="">follow me on X/Twitter</a><span> if you liked this post!</span></em></p></blockquote><p>I took my toddler abroad this summer.</p><p><span>She was so excited. But, in order to make sure she could handle the 3-hour flight, my wife and I made sure to </span><em>hype up</em><span> the airplane journey. So much so, that my toddler was shocked when we had to get into a cab for the airport — she expected to walk straight from our house onto a plane.</span></p><p><span>Once we boarded the flight, things took an incredible turn — it turns out, if the crew spots you with a cute plane-obsessed toddler, they </span><em>invite you in to check out the cockpit.</em></p><p>This kindled my daughter’s obsession with airplanes. She keeps adorably asking me to find planes for her in the sky, and becomes delighted when I spot one for her.</p><p>Last week, we spent an hour in the garden, with her on my shoulders, spotting planes twinkling in the evening sky, one after the other.</p><p>While it’s always great to play with one’s daughter, I knew we could be applying a more efficient approach.</p><p><span>I found </span><a href="https://www.flightradar24.com/" rel="">FlightRadar24</a><span>, which shows the positions of planes overlaid on a map. It worked pretty well, but it was a little annoying to have to orient myself to work out where to look in the sky.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png" width="700" height="559" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/dcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:559,&quot;width&quot;:700,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdcb61737-0621-4218-9b89-fd417dc1bb56_700x559.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Can you spot Heathrow airport?</figcaption></figure></div><p>It’s also pretty tough to spot aircraft on a 2-dimensional plane (pun intended). A Learjet at 40,000 feet shows up the same as an AirBus that just took off at London City Airport, however it’s a lot easier to spot the jumbo jet in the real sky.</p><p><span>Finally, and most importantly, my toddler doesn’t really understand or care what a map is. She </span><em>just</em><span> wanted to look at planes.</span></p><p>So we have our problems.</p><p>Orientation.</p><p>Sizing.</p><p>Usability.</p><p>As an aphyscial mobile tech lead, I wouldn’t know where to start building my kid a rocking horse. But nothing was going to stand in the way of me making her a cool app.</p><p>We had the idea for our app:</p><blockquote><p><em><strong>Show nearby flights on a radar.</strong></em></p></blockquote><p>In keeping with the requirements we’d created via our research:</p><ol><li><p>The app needs to remain oriented correctly, rotating with the device so that it shows airplanes in the correct direction.</p></li><li><p>The app has to show aircraft as bigger or smaller depending on how high they are.</p></li><li><p>The app must be fun, and feel more like a retro kid’s toy than a serious business app.</p></li></ol><p>These requirements led to a few moving parts which form the proof of concept:</p><ol><li><p><strong>Maintaining Orientation </strong><span>is a core differentiating product requirement, since this is missing from the existing solutions. I’m not in the business of detailed flight information — I just want to make a cool radar! The iOS Core Location API has be covered, offering a delegate callback every time the user re-orients their device.</span></p></li><li><p><span>The most important component, of course, is a </span><strong>Flight Data API</strong><span>. </span><a href="https://opensky-network.org/" rel="">OpenSky Network</a><span> has exactly what I need. A simple REST API, free for non-commercial use, with live data of flights in an area. We’d want to ping this endpoint every few seconds for realistic radar sweeps.</span></p></li><li><p><span>To call the API, we need some </span><strong>Location</strong><span> data. Core Location has us covered again — to get a good number of nearby flights, we could query +/- 1 degree of latitude from the user’s location, with a precision of 0.1 degrees (about 10km) to ensure a user’s location is sufficiently obfuscated. We also only need to fetch this data once per session.</span></p></li><li><p><span>Finally, and like most difficult, we need to dust off our </span><strong>Trigonometry</strong><span> skills to compare flight location data with our own, oriented, coordinates. This will allow us to draw nearby aircraft to the screen in the correct place, according to their relative position from us in the sky.</span></p></li></ol><p><span>Since I don’t intend to build a business atop this app — again, the OpenSky Network API is restricted to non-commercial use — I’ll probably use the dead-simple </span><em>MV</em><span> architecture for SwiftUI. I’ll leave a bit of business logic in the views, rely on SwiftUI’s built-in APIs for the heavy lifting, and factor out core services such as API and Location.</span></p><p>Once I prove the concept, I can get to work on the really fun part — turning it into a cool radar and testing it with my toddler!</p><p>First things first.</p><p><span>For the mascot, I’m picturing a cartoon of my daughter in a cute aviator hat. So we have our app name already: </span><strong>Aviator</strong><span>.</span></p><p>Drawing on my infinite willpower, I’m not going to waste time with an app icon until the MVP is complete. But I now have a project name with which to get started.</p><p>The first of my key differentiating product requirements is maintaining orientation — to be useful, the objects on-screen need to correspond to their real-life location. Therefore, When the user rotates, the screen itself rotates and keeps pointing North.</p><p><span>Ignoring the template files for </span><code>AviatorApp</code><span> and </span><code>ContentView</code><span> for now, I whip up a singleton </span><code>LocationManager</code><span> and wire up the </span><code>didUpdateHeading</code><span> method from </span><code>CLLocationManagerDelegate</code><span>.</span></p><blockquote><p><em>In navigation, the Heading is the compass direction in which a vessel — or in this case, an iPhone — is pointed.</em></p></blockquote><p><span>My </span><code>LocationManager</code><span> also handles the initial setup of requesting location permissions, setting the delegate, and telling Core Location to start sending orientation info.</span></p><pre><code>final class LocationManager: CLLocationManager, CLLocationManagerDelegate {
        
    static let shared = LocationManager()
    
    private(set) var rotationAngleSubject = CurrentValueSubject&lt;Double, Never&gt;(0)
    
    override private init() {
        super.init()
        requestWhenInUseAuthorization()
        delegate = self
        startUpdatingHeading()
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateHeading newHeading: CLHeading) {
        rotationAngleSubject.send(-newHeading.magneticHeading)
    }
}</code></pre><p><span>To make things play nicely with a SwiftUI view, I’m going to send the orientation information via a Combine publisher, </span><code>rotationAngleSubject</code><span>. This means I can reactively handle it in my view with </span><code>.onReceive</code><span>, and set a local </span><code>@State</code><span> property, </span><code>rotationAngle</code><span>.</span></p><p><span>In my view, to get a nice compass effect, I draw a set of rectangles that vary with this </span><code>rotationAngle</code><span>.</span></p><pre><code>@State private var rotationAngle: Angle = .degrees(0)

var body: some View {
    ZStack {
        ForEach(0..&lt;36) {
            let angle = Angle.degrees(Double($0 * 10)) + rotationAngle
            Rectangle()
                .frame(width: $0 == 0 ? 16 : 8, height: $0 == 0 ? 3 : 2)
                .foregroundColor($0 == 0 ? .red : .blue)
                .rotationEffect(angle)
                .offset(x: 120 * cos(CGFloat(angle.radians)), y: 120 * sin(CGFloat(angle.radians)))
                .animation(.bouncy, value: rotationAngle)
        }
    }
    .onReceive(LocationManager.shared.rotationAngleSubject) { angle in
        rotationAngle = Angle.degrees(angle)
    }
}</code></pre><p>Testing on my device, it looks pretty good, and responds perfectly to my real-world location!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif" width="600" height="600" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:600,&quot;width&quot;:600,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc54c926e-5005-4a15-b8d2-42c1bb993396_600x600.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Which begs the question, why can’t Google Maps ever work out which direction I am facing?</figcaption></figure></div><p>You’ll notice a funny visual glitch due to the animation logic treating 0 degrees and 360 degrees as separate numbers — all the rectangles decide to spin around when I go past true North — but it’s fine for the PoC (as I’m unlikely to actually keep this UI anyway).</p><p>Now my warm-up is over.</p><p>The really important piece is next: Parsing out data from the OpenSky Network API.</p><p><span>It allows you to specify a range of latitude and longitudes, and returns an array of local flights in that range via a simple </span><code>GET</code><span> request — meaning you can simply paste this into your browser to find out what flights I can see overhead:</span></p><pre><code>https://opensky-network.org/api/states/all?lamin=51.0&amp;lamax=52.0&amp;lomin=-0.5&amp;lomax=0.5</code></pre><p><a href="https://openskynetwork.github.io/opensky-api/rest.html" rel="">The REST API is documented well</a><span>, but has an un-keyed structure, meaning the data is presented as a list properties in order.</span></p><p><span>We need to use an </span><code>UnkeyedContainer</code><span> to decode it, which is designed to parse out fields from the JSON response in order.</span></p><pre><code>struct Flight: Decodable {

    let icao24: String 
    let callsign: String?
    let origin_country: String? 
    let time_position: Int?
    let last_contact: Int
    let longitude: Double
    let latitude: Double

    // ... 

    init(from decoder: Decoder) throws {
        var container = try decoder.unkeyedContainer()
        icao24 = try container.decode(String.self)
        callsign = try? container.decode(String?.self)
        origin_country = try container.decode(String.self)
        time_position = try? container.decode(Int?.self)
        last_contact = try container.decode(Int.self)
        longitude = try container.decode(Double.self)
        latitude = try container.decode(Double.self)

        // ...
    }
}</code></pre><p><span>We can write a simple API that performs a </span><code>GET</code><span> request based on the user’s location coordinates.</span></p><pre><code>final class FlightAPI {
    
    func fetchLocalFlightData(coordinate: CLLocationCoordinate2D) async throws -&gt; [Flight] {
        
        let lamin = String(format: "%.1f", coordinate.latitude - 0.25)
        let lamax = String(format: "%.1f", coordinate.latitude + 0.25)
        let lomin = String(format: "%.1f", coordinate.longitude - 0.5)
        let lomax = String(format: "%.1f", coordinate.longitude + 0.5)

        let url = URL(string: "https://opensky-network.org/api/states/all?lamin=\(lamin)&amp;lamax=\(lamax)&amp;lomin=\(lomin)&amp;lomax=\(lomax)")!
        let data = try await URLSession.shared.data(from: url).0
        return try JSONDecoder().decode([Flight].self, from: data)
    }
}</code></pre><blockquote><p><em>You might notice that I used a range of 1 degree of longitude, but only 0.5 degrees of latitude in this API call. That’s because at my latitude, the UK, a 0.5 latitude by 1 longitude rectangle shows up, approximately, as a square.</em></p></blockquote><p>Now we’re getting somewhere!</p><p><span>The flight data is nicely parsed into an array of in-memory </span><code>Flight</code><span> objects which are now nice and easy to deal with.</span></p><p><span>It’s pretty trivial to amend my </span><code>LocationManager</code><span> to listen for significant location changes and send these coordinates via a publisher.</span></p><p><span>Again, in pure MV architectural style, my view listens to coordinates via </span><code>.onReceive</code><span> and calls my new </span><code>FlightAPI</code><span> with these coordinates. The result? Data about the overhead airplanes in your local slice of sky.</span></p><p>Now, we arrive at the hardest part of my initial proof of concept: actually displaying the airplane icons in their correct locations, relative to my own location.</p><p>My first iteration was a blunt instrument: I multiplied the relative lat and long by a hardcoded on-screen points value.</p><pre><code>@State private var coordinates: CLLocationCoordinate2D?
@State private var flights: [Flight] = []

private var airplanes: some View {
    ForEach(flights, id: \.icao24) { flight in
        let latDiff = coordinate.latitude - (flight.latitude ?? 0)
        let lngDiff = coordinate.longitude - (flight.longitude ?? 0)
        Image(systemName: "airplane")
            .resizable()
            .frame(width: 20, height: 20)
            .rotationEffect(.degrees(flight.true_track ?? 0))
            .foregroundColor(.red)
            .offset(x: 250 * latDiff, y: 250 * lngDiff)
    }
}</code></pre><p>There was, of course, no way this would be accurate, since the absolute distance of a degree of latitude or longitude varies with your geolocation. But again, it’s a good place to begin.</p><p>How do I actually test the accuracy of my airplane drawings?</p><p>I could draw a map underneath everything!</p><p><span>Now my </span><code>AviatorView</code><span> has 3 layers: The compass on top, airplanes drawn to the screen, and an unadorned SwiftUI </span><code>Map</code><span> view under it all.</span></p><pre><code>@State private var cameraPosition: MapCameraPosition = .camera(MapCamera(
        centerCoordinate: CLLocationCoordinate2D(latitude: 51.0, longitude: 0.0),
        distance: 100_000,
        heading: 0))

var body: some View {
    ZStack {
        Map(position: $cameraPosition) { } 
        airplanes
        compass
    }
}</code></pre><p>Here’s the result of my first late-night hackathon, compared against the FlightRadar projection as a source of truth.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png" width="1190" height="788" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/84a0f987-1471-4517-a668-7aec954390da_1190x788.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:788,&quot;width&quot;:1190,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1589429,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F84a0f987-1471-4517-a668-7aec954390da_1190x788.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Results of Day #1, my app on the left, compared against FlightRadar on the right</figcaption></figure></div><p>I’m certainly on to something, since the number and clustering of airplanes in the sky looks about right — however the positioning is pretty far off.</p><p>Suddenly, another flash of inspiration. It’s so simple. I can’t believe I didn’t think of it before.</p><p><span>I need to </span><em>draw the airplanes on the map</em><span> using annotations!</span></p><p><span>The idea has been brewing all day: we’ll use a </span><code>Map</code><span>, and draw aircraft-shaped annotations on top at their precice geolocations.</span></p><p>Eventually, I want to find a way to hide the actual map, and only display the airplanes as markers on the radar position. This should get us the cool, fully-oriented radar effect we’re aiming at.</p><p><span>In iOS 17, which I intend to target, drawing annotations on a map is a breeze. Let’s refactor out a </span><code>FlightMapView</code><span>.</span></p><pre><code>import MapKit
import SwiftUI

struct FlightMapView: View {
    
    @Binding var cameraPosition: MapCameraPosition
    
    let flights: [Flight]

    var body: some View {
        Map(position: $cameraPosition) {
            planeMapAnnotations
        }
        .mapStyle(.imagery)
        .allowsHitTesting(false)
    }
}</code></pre><p>Here, for the purposes of a radar, we want to prevent hit-testing — i.e., we don’t want the map to be interactive. In our ideal world, the map is invisible, and the user just sees flights and their positions.</p><p>After orientation, sizing was the next core issue which the existing solutions simply didn’t handle that well.</p><p>I added some simple log scaling to the map annotations using the altitude of the flight so higher up aircraft appear larger on-screen.</p><p><span>Additionally, I used the aircraft’s </span><code>true_track</code><span> property, combined with the user’s orientation from Core Location, to show the plane facing the correct direction.</span></p><pre><code>@State private var rotationAngle: Angle = .degrees(0)

private var planeMapAnnotations: some MapContent {
    ForEach(flights, id: \.icao24) { flight in
        Annotation(flight.icao24, coordinate: flight.coordinate) {
            let rotation = rotationAngle.degrees + flight.true_track
            let scale = min(2, max(log10(height + 1), 0.5))
            Image(systemName: "airplane")
                .rotationEffect(.degrees(rotation))
                .scaleEffect(scale)
            }
        }
        .tint(.white)
    }
}</code></pre><p>Now’s the time for the ultimate test to find out if my MVP actually works.</p><p>I’m going to go plane-spotting with my daughter.</p><p>We’ve got real map annotations, and show the user’s location and direction on the map.</p><p>Most importantly, it accurately finds the airplanes!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png" width="1188" height="972" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:972,&quot;width&quot;:1188,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1850682,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F18021ff7-f048-4b55-8bf8-5cb8b4c67ec4_1188x972.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>The first plane we spotted via Aviator, the aptly-named 3c65d4</figcaption></figure></div><p>The MVP was a smashing success, since my daughter and I spotted a plane which was visible on the app!</p><p>This initial test also yielded 2 pieces of important information.</p><p><span>Firstly, my scaling logic is backwards — see the tiny plane on the ground at London City Airport. Since the point of the app is locating aircraft in the sky, we need to </span><strong>reverse the scaling</strong><span>. Lower-down planes must show up as larger, since we’re using our eyes to spot them.</span></p><p><span>Secondly, my toddler does </span><em>not</em><span> care about maps, just airplanes. I needed to </span><strong>remove the map </strong><span>if I wanted to clear out the noise and focus on spotting aircraft. And start to build my radar!</span></p><p>I handily fixed the scaling logic for the aircraft.</p><p>After some trial and error — to see both what looks good on-screen, and gives a reasonable spread of sizes, I landed on this for the scaling:</p><pre><code>min(2, max(4.7 - log10(flight.geo_altitude + 1), 0.7))</code></pre><p>These scalings came out of my local overhead scan:</p><pre><code>Scale:  1.0835408863965839
Scale:  0.8330645861650874
Scale:  1.095791123396205
Scale:  1.1077242935783653
Scale:  2.0
Scale:  1.4864702267977097
Scale:  0.7</code></pre><p>This distribution works pretty well — aside from the NOx, it’s turning out quite useful living in an air travel hub.</p><p>I was nearly ready to build the radar I was envisioning. But there was a problem.</p><p>The open-source OpenSky API kept timing out, returning 502 bad gateway errors, and sometimes simply yielding a 200 response with with null data.</p><p>Franky, that’s fine by me — this isn’t a corporate business app and this great API costs me nothing. They have no SLA and I don’t feel entitled to one.</p><p>To help improve robustness on the client-side, I implemented some basic retry logic in the API call.</p><pre><code>private func fetchFlights(at coordinate: CLLocationCoordinate2D, retries: Int = 3) async {
    do {
        try await api.fetchLocalFlightData(coordinate: coordinate)

    } catch {
        if retries &gt; 0 {
            try await fetchFlights(at: coordinate, retries: retries - 1)
        }
    }
}</code></pre><p>The next day, the API was working fine all day—it seems like it’s mostly good apart from certain high-traffic periods.</p><p>The most important noise-reducing task is to make the actual map invisible. The radar won’t work without this.</p><p><span>I was able to do this using a flat-coloured </span><code>MapPolygon</code><span> — ostensibly designed so you can place overlays to highlight sections of a map. But I wanted to use it to hide </span><em>everything</em><span> except our annotations.</span></p><pre><code>struct FlightMapView: View {

    var body: some View {
        Map(position: $cameraPosition) {
            planeMapAnnotations
            MapPolygon(overlay(coordinate: coordinate))
        }
        .mapStyle(.imagery)
        .allowsHitTesting(false)
    }

    // ...
    
    private func rectangle(around coordinate: CLLocationCoordinate2D) -&gt; [CLLocationCoordinate2D] {
        [
            CLLocationCoordinate2D(latitude: coordinate.latitude - 1, longitude: coordinate.longitude - 1),
            CLLocationCoordinate2D(latitude: coordinate.latitude - 1, longitude: coordinate.longitude + 1),
            CLLocationCoordinate2D(latitude: coordinate.latitude + 1, longitude: coordinate.longitude + 1),
            CLLocationCoordinate2D(latitude: coordinate.latitude + 1, longitude: coordinate.longitude - 1)
        ]
    }
    
    private func overlay(coordinate: CLLocationCoordinate2D) -&gt; MKPolygon {
        let rectangle = rectangle(around: coordinate)
        return MKPolygon(coordinates: rectangle, count: rectangle.count)
    }
}</code></pre><p>Tapping my dwindling reserves of my good luck, this approach worked a treat! We could now see the airplanes, but no map, just like we wanted!</p><p><span>Critically, Apple has designed the overlay to place </span><em>on top</em><span> of the map but </span><em>underneath</em><span> the annotations. Had they done it any other way, my daughter’s new toy would be hobbled.</span></p><p>The final piece of my core requirements was a radar view.</p><p>This was essentially a set of lines, concentric circles, and 20 degrees of rotating angular gradient. For a SwiftUI aficionado like myself, this was simples.</p><p>Look how far we’ve come.</p><p>With today’s core visual changes — hiding the map via an overlay, and a few lines of SwiftUI views for the radar — we are now rapidly closing in on our original vision.</p><p>Comparing the resulting Radar UI with the aircraft in the sky overhead, we’re pretty nicely matched.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png" width="967" height="575" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:575,&quot;width&quot;:967,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:741234,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F34bde87e-1535-45a4-89e5-cb3aed63b1b9_967x575.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Day 3 results — displaying the flights over Sidcup</figcaption></figure></div><p>After 3 solid evenings of work, my toddler was finally starting to show some interest in the toy I’d created.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png" width="1188" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1188,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:937846,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F52fbd543-157a-49dd-95dc-5b59695a9140_1188x971.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>We saw the planes it detected! However you’ll have to take my word for it, due  my antiquated iPhone camera</figcaption></figure></div><p>We’ve proven the concept, and put together an MVP that achieves the core initial goals we set out to do.</p><p>Now, we can start to think about putting it on the App Store.</p><p>I’m a big fan of Skeuomorphism. As such, I wanted to flex all my animation muscles to give this app the retro, toy-like quality I envisoned.</p><p>I was proud of the effect I produced on the radar.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif" width="576" height="576" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:576,&quot;width&quot;:576,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F66f9dee5-66fb-4c9f-98b3-80a3b0bcfb19_576x576.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Realistic fade-out effect on the radar to improve</figcaption></figure></div><p><span>The implementation is what I’d call </span><em>“dumb genius”.</em></p><p>Originally, I thought about using trigonometry and timers — recolouring and fading-out individual map annotations whenever the line hit them.</p><p>But then I realised that my line was simply a 20-degree-wide angular gradient that went from green to clear.</p><p>What if it was a 360-degree wide angular gradient?</p><p>And what if this gradient went from green, to clear, to clear, to clear, to black?</p><pre><code>private var radarLine: some View {
    Circle()
        .fill(
            AngularGradient(
                gradient: Gradient(colors: [
                    Color.black, Color.black, Color.black, Color.black,
                    Color.black.opacity(0.8), Color.black.opacity(0.6),
                    Color.black.opacity(0.4), Color.black.opacity(0.2),
                    Color.clear, Color.clear, Color.clear, Color.clear,
                    Color.clear, Color.clear, Color.clear, Color.clear,
                    Color.clear, Color.clear, Color.clear, Color.green]),
                center: .center,
                startAngle: .degrees(rotationDegree),
                endAngle: .degrees(rotationDegree + 360)
            )
        )
        .rotationEffect(Angle(degrees: rotationDegree))
        .animation(.linear(duration: 6).repeatForever(autoreverses: false), value: rotationDegree)
}</code></pre><p><span>More often than not, the </span><a href="https://grugbrain.dev/" rel="">grug-brained</a><span> solution works best.</span></p><p>I also found some weird visual artefacts from the map appearing in the corners of the screen when rotating the device too quickly — the overlay seems to be lazily rendering outside the map’s camera position.</p><p>Creating a black outline of the radar view with a reverse mask solved the issue (i.e. a black rectangle with a circular hole for the radar).</p><p>Our UI is looking pretty tidy now. But I wouldn’t yet call it retro.</p><p>I wanted to add a CRT-screen effect, with television scanlines, to make the app look like it was really drawn on an old radar scanner.</p><p><span>iOS 17 comes with support for Metal shaders built into </span><code>colorEffect</code><span>, so it implementing this effect is easier than ever before.</span></p><pre><code>#include &lt;metal_stdlib&gt;
using namespace metal;

[[ stitchable ]] half4 crtScreen(
    float2 position,
    half4 color,
    float time
) {
    
    if (all(abs(color.rgb - half3(0.0, 0.0, 0.0)) &lt; half3(0.01, 0.01, 0.01))) {
        return color;
    }
    
    const half scanlineIntensity = 0.2;
    const half scanlineFrequency = 400.0;
    half scanlineValue = sin((position.y + time * 10.0) * scanlineFrequency * 3.14159h) * scanlineIntensity;
    return half4(color.rgb - scanlineValue, color.a);
}</code></pre><p>I might save digging into the C++ for another article. Feel free to steal it — most importantly, I created a view modifier that can apply the CRT effect to any view we like!</p><pre><code>extension View {
    
    func crtScreenEffect(startTime: Date) -&gt; some View {
        modifier(CRTScreen(startTime: startTime))
    }
}

struct CRTScreen: ViewModifier {
    
    let startTime: Date
    
    func body(content: Content) -&gt; some View {
        content
            .colorEffect(
                ShaderLibrary.crtScreen(
                    .float(startTime.timeIntervalSinceNow)
                )
            )
    }
}</code></pre><p><span>Note that this modifier, and the shader itself, take in a </span><code>time</code><span> parameter to make the scanlines move up rapidly and make the effect far more dynamic.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif" width="600" height="600" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:600,&quot;width&quot;:600,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1bba1ea3-a8e3-48c4-af81-fd00d29e76ce_600x600.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>I actually recorded and gif-ified this before implementing the time-modulation — see those below!</figcaption></figure></div><p>While the OpenSky Network website is pretty clear, I wanted to be polite and sent a note to ensure my App Store listing would be fine under their policy.</p><p>They very kindly replied within 20 minutes!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png" width="507" height="151" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:151,&quot;width&quot;:507,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbbc39cf-98a6-4698-be3f-412269e7fd58_507x151.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Gotta love the open-source community.</figcaption></figure></div><p>To help sell the experience of a radar, and also help a touch with accessibility, I added a little beep-boop system sound effect whenever the flights update .</p><pre><code>private func fetchFlights(coordinate: Coordinate, retries: Int = 2) async {
    do {
        let flights = try await api.fetchLocalFlightData(coordinate: coordinate)
        await MainActor.run {
            self.flights = flights
            AudioServicesPlaySystemSound(1052)
            hapticTrigger.toggle()
        }

    // ...

}</code></pre><p><span>Alongside the new </span><code>sensoryFeedback</code><span> modifier on the main view for some haptics:</span></p><pre><code>.sensoryFeedback(.levelChange, trigger: hapticTrigger)</code></pre><p>What I realised now, however, is that this beep might get annoying to some people. So I should add a few customisation options.</p><p>Firstly, a silent mode is in order.</p><p><span>But also, perhaps, a few simple other customisations with </span><code>@AppStorage</code><span>.</span></p><pre><code>@AppStorage("silent") var silentMode: Bool = false
@AppStorage("showMap") var showMap: Bool = false
@AppStorage("userColor") var userColor: Color = .green</code></pre><p>Now, uses can turn off the sound, and even turn off the radar overlay to see the map underneath.</p><p>Most importantly, however, since I’m building this for my kid, picking a custom color for the radar via the SwiftUI color picker is absolutely mandatory.</p><p>Finally, what’s life without an animated SFSymbol or two?</p><pre><code>private func toggleableIcon(state: Bool, iconTrue: String, iconFalse: String) -&gt; some View {
        Image(systemName: state ? iconTrue : iconFalse)
            .contentTransition(.symbolEffect(.replace))
    // ...
}</code></pre><p>I think our app is ready for prime-time now.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif" width="600" height="600" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:600,&quot;width&quot;:600,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05a94691-f398-4c9a-aef5-55777cc2abfc_600x600.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I need to do a little bit of refactoring to move views into their own files.</p><p><span>Now the top-level </span><code>AviatorView</code><span> looks a bit like this:</span></p><pre><code>// @State properties ...

var body: some View {
    ZStack {
        if let coordinate = locationManager.coordinateSubject.value {
            FlightMapView(
                cameraPosition: $cameraPosition,
                flights: flights,
                rotationAngle: rotationAngle,
                coordinate: coordinate
            )
        }
    
        TimelineView(.animation) { context in
            RadarView()
                .crtScreenEffect()
                .negativeHighlight()
        }
    
        ControlsView(errorMessage: errorMessage)
    }

    // onRecieve modifiers ...
}</code></pre><p><span>Annoyingly, I stopped paying Midjourney last month, so I wrangled a free-for-non-commercial-use generator at </span><a href="https://gencraft.com/" rel="">Gencraft</a><span>.</span></p><p>Fortunately, I managed to approximate my daughter in an aviator hat, which is precisely the look I was going for!</p><p>This also led to my most successful Tweet ever.</p><p>I haven’t personally paid for the Apple Developer Program for years.</p><p>Look at this graveyard of discarded side projects.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png" width="700" height="368" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:368,&quot;width&quot;:700,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa59db988-401e-4c3a-bc8b-00af5750fa31_700x368.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>RevisionApp will always be the one that got away…</figcaption></figure></div><p>Welp. I’m £79 down and ready to hit publish.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png" width="700" height="290" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ea5f87bd-13a5-498c-8587-04789a650371_700x290.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:290,&quot;width&quot;:700,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fea5f87bd-13a5-498c-8587-04789a650371_700x290.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><em><strong>Fun fact:</strong><span> I’m targeting iOS 17 only. But I still need to supply screenshots for 6.5" and 5.5" iPhones. The latest 5.5" iPhone? The 8 Plus. Which has a maximum version of iOS 16. Yup. Fortunately, the good people at </span><a href="https://appscreens.com/" rel="">AppScreens</a><span> allowed me to export for both sizes. But don’t get me started on re-scaling videos.</span></em></p></blockquote><p><span>While we wait for Apple app review to work its magic, let’s run a few more rounds of weekend user-testing with my toddler, who’s absolutely </span><em>delighted</em><span> that she can now pick her own colour for the UI.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png" width="1186" height="970" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:970,&quot;width&quot;:1186,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1202923,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F83197c81-b287-4016-be20-7ee1eaaea23a_1186x970.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png" width="1187" height="969" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:969,&quot;width&quot;:1187,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:551861,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd573eebf-3e73-461f-9501-779dad4bf7a4_1187x969.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png" width="1188" height="973" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/aaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:973,&quot;width&quot;:1188,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:573406,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faaff5f2f-abb4-4588-97c7-a61248f1678a_1188x973.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png" width="700" height="519" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:519,&quot;width&quot;:700,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F05c719a5-72ab-41bf-94c4-f500be48ff5b_700x519.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>App Store Listing for Aviator v1.0.0</figcaption></figure></div><p>Want to download the app yourself?</p><p><span>Go to </span><a href="https://apps.apple.com/gb/app/aviator-radar-on-your-phone/id6469189335" rel="">Aviator — Radar on your Phone</a><span> now (and don’t forget to rate)!</span></p><p>I’m pretty happy with what I put together in a few evenings over a week. It’s been ages since I picked up a side project, and making a fun toy for my daughter is the most fun I’ve had coding in years.</p><p>After this write-up, I’ve got a few features in mind in my mini-roadmap for the next release:</p><ul><li><p>Add zoom levels to the map to restrict the radar to closer aircraft only.</p></li><li><p>Use the advanced version of the OpenSky Network API to show helicopters, satellites, and airplane size classes.</p></li><li><p>Toggle origin &amp; destination country display on airplanes.</p></li><li><p>Improve the CRT screen effect with more advanced Metal shaders.</p></li><li><p>Refactor all the controls into a resizeable progressive-disclosure pull-out modal with detents.</p></li><li><p>Implement slider controls to filter out certain distances &amp; heights — e.g. to hide all low-down, far-off aircraft.</p></li><li><p>Implement “zany mode” which renders UFOs, giant bugs, and aliens on the radar.</p></li></ul><p>If you have any ideas of your own, or simply some feedback, please let me know in the comments!</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Learnings from fine-tuning LLM on my Telegram messages (133 pts)]]></title>
            <link>https://asmirnov.xyz/doppelganger</link>
            <guid>38434914</guid>
            <pubDate>Mon, 27 Nov 2023 17:09:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://asmirnov.xyz/doppelganger">https://asmirnov.xyz/doppelganger</a>, See on <a href="https://news.ycombinator.com/item?id=38434914">Hacker News</a></p>
<div id="readability-page-1" class="page">
    
        <i>27 Nov 2023</i>
        <div id="toc"><ul>
<li><a href="#approach" id="toc-approach">Approach</a></li>
<li><a href="#data-preparation" id="toc-data-preparation">Data
preparation</a></li>
<li><a href="#evaluation-plan" id="toc-evaluation-plan">Evaluation
plan</a></li>
<li><a href="#lora" id="toc-lora">LoRA</a></li>
<li><a href="#full-fine-tuning" id="toc-full-fine-tuning">Full
fine-tuning</a></li>
<li><a href="#closing-thoughts" id="toc-closing-thoughts">Closing
thoughts</a></li>
<li><a href="#code" id="toc-code">Code</a></li>
</ul></div>
    <hr>
    <p>For most people I interact with, I’m just another text-based
    program for the most of the time. If input and output are so simple,
    could I be replaced by the model? For this to work, the model would
    need to not only understand my writing style but also know a lot
    about me. The best source for this is my Telegram messenger, as I
    use it daily and it contains almost everything about my thoughts and
    actions in the form of chat histories.</p>
    <h2 id="approach"><a href="#approach">Approach</a></h2>
    <p>The most straightforward approach would be to extract all my
    messages, load them into ChatGPT’s context, and instruct it to use
    this information to mimic my style when responding to new messages.
    However, this approach is limited by the context window size,
    requiring me to preprocess messages to extract key points. As I want
    to avoid this hassle, perhaps Retrieval Augmented Generation (RAG)
    could be used to pull necessary information when needed. However
    from my experience, retrieving from diverse data like chat sessions
    usually needs a supervised fine-tuning of the retrieval model, and
    I’m not keen on creating such a dataset. So, fine-tuning seems like
    the best option. It’s ideal for several reasons: it should capture
    my writing style and potentially accumulate knowledge from all my
    messages without having to select what’s important.</p>
    <p>OpenAI offers <a href="https://platform.openai.com/docs/guides/fine-tuning" target="_blank">fine-tuning capabilities</a>, but as I’ll be using
    my private messages, I don’t want to use any third-party fine-tuning
    services. So, I need to choose a base model. According to the <a href="https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard" target="_blank">Hugging Face Open LLM Leaderboard</a>, one of the
    top smaller models (≤13B parameters) is <a href="https://huggingface.co/mistralai/Mistral-7B-v0.1" target="_blank">Mistral 7B</a>. It even outperforms <a href="https://huggingface.co/meta-llama/Llama-2-13b-hf" target="_blank">Llama 2 13B</a>. Now, the question is whether <a href="https://arxiv.org/abs/2106.09685" target="_blank">LoRA</a> is
    sufficient or if full fine-tuning is necessary. Various comparisons
    <a href="#fn1" id="fnref1" role="doc-noteref">[1]</a> <a href="#fn2" id="fnref2" role="doc-noteref">[2]</a>
    suggests that LoRA is a bit worse than full fine-tuning but still
    fine most of the time. However, for specific tasks like mine
    (Russian language + chat), I found a <a href="https://arxiv.org/abs/2304.08109" target="_blank">paper</a>,
    where researchers conducted Llama instruction fine-tuning in
    Chinese, similar in complexity to my goal. They found that
    LoRA-based tuning on a base model without prior instruction tuning
    is less effective than full fine-tuning. Yet, LoRA-based tuning on a
    model already fine-tuned for instructions can yield comparable
    results. In my case, this means either full fine-tuning on a base
    model or LoRA on a model already fine-tuned for chatting in Russian.
    Since I couldn’t find a model fine-tuned for Russian chat, I’ll try
    LoRA on a model fine-tuned for English chat, like the fine-tuned
    Mistral model <a href="https://huggingface.co/ehartford/dolphin-2.2.1-mistral-7b" target="_blank">Dolphin</a>.</p>
    <p>So, the plan is:</p>
    <ol type="1">
    <li>Start with LoRA on top of Dolphin, the English chat fine-tuned
    Mistral</li>
    <li>If quality is not sufficient, try full fine-tuning on
    Mistral</li>
    </ol>
    <h2 id="data-preparation"><a href="#data-preparation">Data
    preparation</a></h2>
    <p>One unique aspect of messaging in apps like Telegram, compared to
    emails, is the conversational flow. Messages don’t usually alternate
    one-by-one between you and your contact. Instead, you often find
    yourself sending a couple of messages in a row, followed by several
    responses from the other person. These messages are generally short,
    too. I wanted to preserve this natural conversational style in my
    data.</p>
    <p>Telegram offers a <a href="https://telegram.org/blog/export-and-more" target="_blank">built-in feature</a> to export all chats into JSON.
    After some filtering and grouping messages into sessions, I’ve
    compiled data from the last five years of using Telegram. This
    resulted in 15,789 sessions from 466 chats, with an average session
    length of 8.51 messages. For structuring the data, I’ve chosen the
    <a href="https://github.com/openai/openai-python/blob/284c1799070c723c6a553337134148a7ab088dd8/chatml.md" target="_blank">ChatML</a> prompt format. Here’s a sample session
    (translated from Russian):</p>
    <p>&lt;|im_start|&gt;John Smith<br> <strong>&gt;&gt;&gt; damn,
    can’t get around the 135 time limit</strong><br>
    <strong>&gt;&gt;&gt; trying to do everything super optimally, but no
    luck&lt;|im_end|&gt;</strong><br> &lt;|im_start|&gt;Alexander
    Smirnov<br> <strong>&gt;&gt;&gt; yeah same</strong><br>
    <strong>&gt;&gt;&gt; you still going with the same
    idea?&lt;|im_end|&gt;</strong><br> &lt;|im_start|&gt;John
    Smith<br> <strong>&gt;&gt;&gt; dunno, I think we’re on the same
    page</strong><br> <strong>&gt;&gt;&gt; as you said</strong><br>
    <strong>&gt;&gt;&gt; going with the reversed string in a try and
    trying to find something there</strong><br> <strong>&gt;&gt;&gt;
    seems like real shit because z function ruins
    everything……………………&lt;|im_end|&gt;</strong><br>
    &lt;|im_start|&gt;Alexander Smirnov<br> <strong>&gt;&gt;&gt; don’t
    get where z comes into this&lt;|im_end|&gt;</strong><br>
    &lt;|im_start|&gt;John Smith<br> <strong>&gt;&gt;&gt; dunno seems
    like I’m doing everything iteratively anyway, but yeah gotta reverse
    some strings to build the z function</strong><br>
    <strong>&gt;&gt;&gt; and it’s just a random solution</strong><br>
    <strong>&gt;&gt;&gt; from discussions&lt;|im_end|&gt;</strong><br>
    &lt;|im_start|&gt;Alexander Smirnov<br> <strong>&gt;&gt;&gt; got
    it&lt;|im_end|&gt;</strong><br></p>
    <details>
    <summary>
    original
    </summary>
    &lt;|im_start|&gt;Иван Иванович<br> <strong>&gt;&gt;&gt; бля не
    могу обойти таймлим на 135</strong><br> <strong>&gt;&gt;&gt;
    пытаюсь все супер оптимально делать, но
    хуйтам)&lt;|im_end|&gt;</strong><br> &lt;|im_start|&gt;Alexander
    Smirnov<br> <strong>&gt;&gt;&gt; да вот жиза</strong><br>
    <strong>&gt;&gt;&gt; ты с той же
    идеей?&lt;|im_end|&gt;</strong><br> &lt;|im_start|&gt;Иван
    Иванович<br> <strong>&gt;&gt;&gt; да хз, думаю у нас одно и
    тоже</strong><br> <strong>&gt;&gt;&gt; как ты
    сказал</strong><br> <strong>&gt;&gt;&gt; иду с реверснутой строкой
    в трай и чето пытаюсь там найти</strong><br> <strong>&gt;&gt;&gt;
    походу реальная параша на z функции все
    руинит……………………&lt;|im_end|&gt;</strong><br>
    &lt;|im_start|&gt;Alexander Smirnov<br> <strong>&gt;&gt;&gt; не
    пон где тут про z&lt;|im_end|&gt;</strong><br>
    &lt;|im_start|&gt;Иван Иванович<br> <strong>&gt;&gt;&gt; хз вроде
    все итеративно итак делаю, ну да кое где надо реверснуть строки
    чтобы з функцию построить</strong><br> <strong>&gt;&gt;&gt; а это
    просто рандомное решение</strong><br> <strong>&gt;&gt;&gt; с
    дискашенов&lt;|im_end|&gt;</strong><br>
    &lt;|im_start|&gt;Alexander Smirnov<br> <strong>&gt;&gt;&gt;
    пон&lt;|im_end|&gt;</strong><br>
    </details>
    <p>My data collator ensures that the loss is only calculated based
    on someone’s response. Predicting who will speak next is relatively
    straightforward, and we don’t want the model to focus on learning
    that. Therefore, parts of the conversation where the loss is
    calculated are highlighted in bold.</p>
    <p>You might notice that not only my responses but also those of
    others are used for loss calculation. This is deliberate. By doing
    this, the model will be able to role-play not only as me but also as
    my frequent conversational partners!</p>
    <h2 id="evaluation-plan"><a href="#evaluation-plan">Evaluation
    plan</a></h2>
    <p>I will test models by having chats in two ways. First, the model
    will pretend to be me and I will be chatting with myself from the
    perspective of my different friends. Then, I’ll chat as myself while
    the model acts as my friends. My conversation starter will always be
    the same 2 messages: “hey” and “what’s up?” (in Russian, “прив” and
    “как дела?”). Generated phrases and persons as the model acts who
    from will be <strong>highlighted</strong>. All conversations
    initially will be held in Russian and may be accessed by clicking on
    the ‘original’ details button. For testing I will be using <a href="https://github.com/oobabooga/text-generation-webui" target="_blank">oobabooga/text-generation-webui</a>.</p>
    <p>In the beginning, I want to explore how the generic conversation
    fine-tuned Mistral model deals with that task without any prior
    training from my side.</p>
    <p>---</p>
    <details>
    <summary>
    Friend 1 vs <strong>Alexander Smirnov</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; I’m good, what about you?</strong><br>
    &gt;&gt;&gt; nothing much<br> &gt;&gt;&gt; what did you do
    today?<br> <strong>&gt;&gt;&gt; I worked.</strong><br>
    <strong>&gt;&gt;&gt; then I did a few tasks in Python and studied
    data processing libraries.</strong><br> <strong>&gt;&gt;&gt; in
    the evening I’ll do wrestling training.</strong><br>
    <strong>&gt;&gt;&gt; have you ever been into sports or do you have
    any hobbies?</strong><br> &gt;&gt;&gt; I see<br> &gt;&gt;&gt;
    want to watch a movie today?<br> <strong>&gt;&gt;&gt; maybe, if I
    find the time.</strong><br> <strong>&gt;&gt;&gt; what’s your
    favorite music? Electronic, rock, or other genres?</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; все хорошо, а у тебя что нового?</strong><br>
    &gt;&gt;&gt; да ничего<br> &gt;&gt;&gt; чего сегодня делал?<br>
    <strong>&gt;&gt;&gt; я работал.</strong><br> <strong>&gt;&gt;&gt;
    потом сделал несколько задач на python и изучал библиотеки для
    обработки данных.</strong><br> <strong>&gt;&gt;&gt; в вечер
    займусь тренировкой на борцу.</strong><br> <strong>&gt;&gt;&gt; ты
    когда-нибудь занимаешься спортом или имеешь какое-то
    хобби?</strong><br> &gt;&gt;&gt; понятно<br> &gt;&gt;&gt;
    посмотрим кино сегодня?<br> <strong>&gt;&gt;&gt; может быть, если
    найдется время.</strong><br> <strong>&gt;&gt;&gt; какая ваша
    любимая музыка? Электронная музыка, рок или другие
    жанры?</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Alexander Smirnov vs <strong>Friend 1</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; well, everything is fine so far. what’s new
    with you?</strong><br> &gt;&gt;&gt; spent the whole day
    programming<br> &gt;&gt;&gt; what did you do today?<br>
    <strong>&gt;&gt;&gt; finished at work</strong><br>
    <strong>&gt;&gt;&gt; and did some housework, now I’m resting. are
    you also resting or still working?</strong><br> &gt;&gt;&gt; I’m
    already resting<br> <strong>&gt;&gt;&gt; well, that’s good. can we
    talk about something interesting or do you have any
    questions?</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; ну пока все нормально. а у вас что
    нового?</strong><br> &gt;&gt;&gt; прогал целый день<br>
    &gt;&gt;&gt; чего сегодня делала?<br> <strong>&gt;&gt;&gt;
    закончила на работе</strong><br> <strong>&gt;&gt;&gt; и сделала
    немного домашней работы, теперь отдыхаю. а вы тоже отдохните или еще
    работаете?</strong><br> &gt;&gt;&gt; я уже отдыхаю<br>
    <strong>&gt;&gt;&gt; ну хорошо. можно поговорить о чем-нибудь
    интересном или вы имеете какие-то вопросы?</strong></p>
    </details>
    <p>---</p>
    <p>Ok, it is capable of forming coherent sentences. The most
    noticeable problem is its lack of awareness regarding the context of
    the conversations which leads to bland and generic replies. The
    messages lacked any distinct style, feeling quite basic. Another
    issue is that the model’s Russian is poor. This is expected, as the
    model is too small to generalize well to languages other than its
    primary one, English. Additionally, the model tended to be overly
    proactive, ending almost every sentence with a question, which isn’t
    how real people typically communicate in messengers.</p>
    <p>Let’s try to fix all of these!</p>
    <h2 id="lora"><a href="#lora">LoRA</a></h2>
    <p>LoRA offers a low-effort approach in terms of both the training
    pipeline and hardware requirements. It trains around 1% of the total
    weights. I chose a 1024 sequence length and a batch size of 8. The
    training, which consumed 20GB of VRAM on an RTX 3090, took three
    epochs and lasted for 5.5 hours. For this, I used <a href="https://vast.ai/" target="_blank">vast.ai</a>, where the GPU
    cost was $0.362 per hour, totaling $2 for the entire training,
    excluding time spent on experiments and bug fixes.</p>
    <p>Here are the results:</p>
    <p>---</p>
    <details>
    <summary>
    Friend 1 vs <strong>Alexander Smirnov</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; hi) all good</strong><br>
    <strong>&gt;&gt;&gt; you?)</strong><br> &gt;&gt;&gt; ok as
    well<br> &gt;&gt;&gt; what you were doing today?<br>
    <strong>&gt;&gt;&gt; had an amazon interview and solved
    problems</strong><br> <strong>&gt;&gt;&gt; had to solve
    3</strong><br> &gt;&gt;&gt; cool<br> &gt;&gt;&gt; hard?<br>
    <strong>&gt;&gt;&gt; don’t know what</strong><br>
    <strong>&gt;&gt;&gt; hadn’t looked yet</strong><br>
    <strong>&gt;&gt;&gt; I hadn’t started yet</strong><br>
    <strong>&gt;&gt;&gt; chatting whole day with the team and meet new
    ones</strong><br> &gt;&gt;&gt; how are they?<br>
    <strong>&gt;&gt;&gt; ok</strong><br> <strong>&gt;&gt;&gt; same
    coworking as you have))</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; Привет) нолм все</strong><br>
    <strong>&gt;&gt;&gt; ты как?)</strong><br> &gt;&gt;&gt; да тоже
    норм<br> &gt;&gt;&gt; чего делал сегодня?<br>
    <strong>&gt;&gt;&gt; собесился в амазон и решал
    задачки</strong><br> <strong>&gt;&gt;&gt; надо было 3
    прорешить</strong><br> &gt;&gt;&gt; прикольно<br> &gt;&gt;&gt;
    сложные?<br> <strong>&gt;&gt;&gt; хз какие</strong><br>
    <strong>&gt;&gt;&gt; пока не смотрел</strong><br>
    <strong>&gt;&gt;&gt; я еще ничего не началь</strong><br>
    <strong>&gt;&gt;&gt; весь день просто болтаю с людьми из команды и
    встречаю новых</strong><br> &gt;&gt;&gt; как ребята?<br>
    <strong>&gt;&gt;&gt; норм</strong><br> <strong>&gt;&gt;&gt; такой
    же ковер как у тебя))</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Friend 2 vs <strong>Alexander Smirnov</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; ok, we show yesterday’s product to searchcom,
    today we write endpoints for them so that someone else can request
    our api</strong><br> &gt;&gt;&gt; cool<br> &gt;&gt;&gt; what
    problems do we have now?<br> <strong>&gt;&gt;&gt; no
    problems</strong><br> <strong>&gt;&gt;&gt; everything is
    working</strong><br> <strong>&gt;&gt;&gt; I added an option to
    choose index</strong><br> <strong>&gt;&gt;&gt; so now we can
    attach several indexes</strong><br> <strong>&gt;&gt;&gt; and
    separate collections within single index</strong><br> &gt;&gt;&gt;
    what we have to do?<br> <strong>&gt;&gt;&gt; test</strong><br>
    <strong>&gt;&gt;&gt; yes ok</strong><br> <strong>&gt;&gt;&gt; are
    they always will be sending post-script?</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; хорошо, показываем вчерашний продукт ищком,
    сегодня пилим эндпоинты для них чтобы кто-то еще мог нашу апи
    запросить</strong><br> &gt;&gt;&gt; найс<br> &gt;&gt;&gt; какие
    сейчас есть проблемы?<br> <strong>&gt;&gt;&gt; нет
    проблем</strong><br> <strong>&gt;&gt;&gt; все
    работает</strong><br> <strong>&gt;&gt;&gt; я добавил опцию выбора
    индекса</strong><br> <strong>&gt;&gt;&gt; так что теперь уже можно
    несколько индексов подключить</strong><br> <strong>&gt;&gt;&gt; и
    отдельные коллекции внутри одного индекса</strong><br>
    &gt;&gt;&gt; что надо сделать?<br> <strong>&gt;&gt;&gt;
    протестировать</strong><br> <strong>&gt;&gt;&gt; ага
    норм</strong><br> <strong>&gt;&gt;&gt; а точно они всегда
    пост-скрипт будут кидать?</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Friend 3 vs <strong>Alexander Smirnov</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; Hi, good)</strong><br> <strong>&gt;&gt;&gt;
    you?</strong><br> &gt;&gt;&gt; ok as well<br> &gt;&gt;&gt; what
    do you do at the evening?<br> <strong>&gt;&gt;&gt; we have meeting
    with office collegues at 8 30 msk</strong><br>
    <strong>&gt;&gt;&gt; after it I can</strong><br> &gt;&gt;&gt; can
    what?<br> <strong>&gt;&gt;&gt; haha)</strong><br> &gt;&gt;&gt;
    didn’t get it<br> <strong>&gt;&gt;&gt; I don’t know(</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; Привет, хорошо)</strong><br>
    <strong>&gt;&gt;&gt; ты?</strong><br> &gt;&gt;&gt; да тоже
    норм<br> &gt;&gt;&gt; что делаешь вечером?<br>
    <strong>&gt;&gt;&gt; у нас с колегами встреча по офису в 8 30
    мск</strong><br> <strong>&gt;&gt;&gt; после нее я
    могу</strong><br> &gt;&gt;&gt; можешь что?<br>
    <strong>&gt;&gt;&gt; ахах)</strong><br> &gt;&gt;&gt; не
    понял<br> <strong>&gt;&gt;&gt; я не знаю(</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Alexander Smirnov vs <strong>Friend 1</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; hi)</strong><br> <strong>&gt;&gt;&gt; seems
    good</strong><br> <strong>&gt;&gt;&gt; was working, than went to
    the call with Nadya</strong><br> <strong>&gt;&gt;&gt; now reading
    normally</strong><br> <strong>&gt;&gt;&gt; you?</strong><br>
    &gt;&gt;&gt; good as well<br> &gt;&gt;&gt; any plans for the
    evening?<br> <strong>&gt;&gt;&gt; after work wendesday I would
    love to go running</strong><br> <strong>&gt;&gt;&gt; and then have
    a lunch</strong><br> <strong>&gt;&gt;&gt; your
    plans?</strong><br> &gt;&gt;&gt; I though about watching
    movie<br> <strong>&gt;&gt;&gt; aa</strong><br>
    <strong>&gt;&gt;&gt; ooo</strong><br> <strong>&gt;&gt;&gt; to be
    honest I like when it is raining</strong><br> <strong>&gt;&gt;&gt;
    when you don’t feel like going anywhere</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; привет)</strong><br> <strong>&gt;&gt;&gt;
    вроде хорошо</strong><br> <strong>&gt;&gt;&gt; поработал, затем
    поехал на коле с Надей</strong><br> <strong>&gt;&gt;&gt; сейчас
    читаю нормально</strong><br> <strong>&gt;&gt;&gt; а ты
    как?</strong><br> &gt;&gt;&gt; да тоже хорошо<br> &gt;&gt;&gt;
    какие планы на вечер?<br> <strong>&gt;&gt;&gt; мне после работы
    среда хотелось бы сходить на пробежку</strong><br>
    <strong>&gt;&gt;&gt; а потом ужинать</strong><br>
    <strong>&gt;&gt;&gt; а что твои планы?</strong><br> &gt;&gt;&gt; я
    думал кино посмотреть<br> <strong>&gt;&gt;&gt; аа</strong><br>
    <strong>&gt;&gt;&gt; ооо</strong><br> <strong>&gt;&gt;&gt; честно
    говоря мне нравится теплый дождь больше всего</strong><br>
    <strong>&gt;&gt;&gt; когда так не хочется никуда идти</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Alexander Smirnov vs <strong>Friend 2</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; Hi, great!</strong><br> <strong>&gt;&gt;&gt;
    Sorry will be 20-30 min late</strong><br> &gt;&gt;&gt; ok<br>
    &gt;&gt;&gt; why?<br> <strong>&gt;&gt;&gt; yes, I just got up and
    forgot to press the «exit sleep» button</strong><br>
    <strong>&gt;&gt;&gt; my telegram didn’t close on its
    own</strong><br> <strong>&gt;&gt;&gt; I thought it behaved like
    this when you logging off the Internet, but no</strong><br>
    <strong>&gt;&gt;&gt; I still logged off the Internet, but telegram
    still didn’t respond</strong><br> <strong>&gt;&gt;&gt; and it was
    strange, because yesterday there was also such a case when I sent
    you a message and did not receive an answer</strong><br>
    <strong>&gt;&gt;&gt; today I looked at mine, but not yours, but
    yours was displayed)</strong><br> &gt;&gt;&gt; ok<br>
    &gt;&gt;&gt; any plans?<br> <strong>&gt;&gt;&gt; yes, we can chat
    a little</strong><br> <strong>&gt;&gt;&gt; and I can tell you that
    the method for generating answers worked really well for
    me</strong><br> <strong>&gt;&gt;&gt; he gives respectable results
    in training</strong><br> <strong>&gt;&gt;&gt; but not on the
    test</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; Привет, хорошо!</strong><br>
    <strong>&gt;&gt;&gt; Соре опаздываю еще минут 20-30</strong><br>
    &gt;&gt;&gt; пон<br> &gt;&gt;&gt; а чего так?<br>
    <strong>&gt;&gt;&gt; да я просто встал и забыл нажать кнопку «выйти
    из сна»</strong><br> <strong>&gt;&gt;&gt; у меня телега сама не
    закрылась</strong><br> <strong>&gt;&gt;&gt; я думал она так себя
    ведёт, когда ты выходишь из интернета, но вот</strong><br>
    <strong>&gt;&gt;&gt; я все таки вышел из интернета, но телега все
    равно не отвечает</strong><br> <strong>&gt;&gt;&gt; и это странно
    было, потому что вчера тоже был такой случай, когда я отправил тебе
    сообщение и не получал ответа</strong><br> <strong>&gt;&gt;&gt;
    сегодня же я посмотрел свое, но не твоё, а твое
    отобразилось)</strong><br> &gt;&gt;&gt; окей<br> &gt;&gt;&gt;
    какие планы?<br> <strong>&gt;&gt;&gt; да можно чуть
    поболтать</strong><br> <strong>&gt;&gt;&gt; и можно рассказать что
    у меня прям очень сильно заработал метод по генерации
    ответов</strong><br> <strong>&gt;&gt;&gt; он на тренировках дает
    респектабельные результаты</strong><br> <strong>&gt;&gt;&gt; но не
    на тесте</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Alexander Smirnov vs <strong>Friend 3</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; hey, hi</strong><br> <strong>&gt;&gt;&gt;
    Good, you?)</strong><br> <strong>&gt;&gt;&gt; Haven’t gone to bed
    yet)0)0)0)</strong><br> <strong>&gt;&gt;&gt; Today I get up and go
    to a programming course</strong><br> <strong>&gt;&gt;&gt; To
    tighten up the base, etc.</strong><br> &gt;&gt;&gt; nice<br>
    &gt;&gt;&gt; what did you do yesterday?<br> <strong>&gt;&gt;&gt;
    Yesterday there was already the same course in which it seemed to me
    that I did very poorly</strong><br> <strong>&gt;&gt;&gt; Then I
    wanted to solve hw but I don’t care</strong><br>
    <strong>&gt;&gt;&gt; Otherwise I’m fucked because I can’t
    sleep)</strong><br> <strong>&gt;&gt;&gt; Really fucked
    up</strong><br> <strong>&gt;&gt;&gt; It will probably be better
    now, since I’m already maximally overtrained</strong><br>
    &gt;&gt;&gt; cool man<br> &gt;&gt;&gt; what are your plans for
    life in general?<br> <strong>&gt;&gt;&gt; Fuck, get a job
    interviews first</strong><br> <strong>&gt;&gt;&gt; And if
    everything is ok, then actually order a computer</strong><br>
    <strong>&gt;&gt;&gt; Like, I think you should order a computer when
    it’s more profitable than working at work</strong><br>
    <strong>&gt;&gt;&gt; But I don’t care</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; Прив, дароу</strong><br> <strong>&gt;&gt;&gt;
    Норм, ты как?)</strong><br> <strong>&gt;&gt;&gt; Еще спать не
    зашел)0)0)0)</strong><br> <strong>&gt;&gt;&gt; Сегодня встаю и еду
    на курс по програмированию</strong><br> <strong>&gt;&gt;&gt; Чтоб
    базу подтянуть и тд</strong><br> &gt;&gt;&gt; найс<br>
    &gt;&gt;&gt; че вчера делал?<br> <strong>&gt;&gt;&gt; Вчера уже
    был такой же курс в котором мне казалось что я оч плохо
    провел</strong><br> <strong>&gt;&gt;&gt; Потом хотел порешать дз
    но пофиг</strong><br> <strong>&gt;&gt;&gt; А то заебался из-за
    того что спать не могу)</strong><br> <strong>&gt;&gt;&gt; Прям
    пиздец</strong><br> <strong>&gt;&gt;&gt; Наверное сейчас будет
    лучше, так как уже максимально переобуженный</strong><br>
    &gt;&gt;&gt; слушай ну с кайфом<br> &gt;&gt;&gt; какие планы
    вообще на жизнь?<br> <strong>&gt;&gt;&gt; Бля, тупо сначала
    собеситься на работу</strong><br> <strong>&gt;&gt;&gt; И если все
    ок то реально заказать комп</strong><br> <strong>&gt;&gt;&gt; Типо
    я думаю надо было бы заказывать комп когда выигральнее чем на работе
    работаешь</strong><br> <strong>&gt;&gt;&gt; Но я хз</strong></p>
    </details>
    <p>---</p>
    <p>This is much better. It definitely captures the style of the
    person it’s responding on behalf of. It also identifies the most
    common topics discussed between specific pairs of people. For
    example, with friend 2, the focus is clearly more on work. However,
    the grammar is still off, and it loses the context of the
    conversation quickly. I’m pretty confident that LoRA would work with
    reasonable quality in English, and full fine-tuning might not be
    necessary. But, since Russian isn’t the model’s native language,
    let’s try full fine-tuning.</p>
    <h2 id="full-fine-tuning"><a href="#full-fine-tuning">Full
    fine-tuning</a></h2>
    <p>Full fine-tuning is more challenging due to the need for
    multi-GPU training. Popular methods include either <a href="https://www.microsoft.com/en-us/research/blog/zero-deepspeed-new-system-optimizations-enable-training-models-with-over-100-billion-parameters/" target="_blank">ZeRO &amp; DeepSpeed</a> <a href="#fn3" id="fnref3" role="doc-noteref">[3]</a>
    or <a href="https://engineering.fb.com/2021/07/15/open-source/fsdp/" target="_blank">FSDP</a> <a href="#fn4" id="fnref4" role="doc-noteref">[4]</a>, with FSDP
    essentially being a ZeRO3 <a href="#fn5" id="fnref5" role="doc-noteref">[5]</a>. I decided to go
    with FSDP.</p>
    <p>While implementing the training pipeline, I referred to the <a href="https://github.com/tatsu-lab/stanford_alpaca/" target="_blank">Stanford Alpaca fine-tuning code</a> and <a href="https://github.com/abacaj/fine-tune-mistral/" target="_blank">Anton Bacaj’s Mistral fine-tuning code</a>.</p>
    <p>Using a half-precision FSDP full shard with a 1024 sequence
    length and a micro batch size of 2 required 63GB of VRAM on each of
    the eight A100 80 GB GPUs. The training, lasting three epochs, took
    just 20 minutes. The total cost for the VM was $8.88 per hour,
    resulting in $3, not including the time for experiments and bug
    fixes.</p>
    <p>Conversations:</p>
    <p>---</p>
    <details>
    <summary>
    Friend 1 vs <strong>Alexander Smirnov</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; hey) good</strong><br> <strong>&gt;&gt;&gt;
    you?</strong><br> &gt;&gt;&gt; good as well<br> &gt;&gt;&gt;
    what you were doing today?<br> <strong>&gt;&gt;&gt; played a board
    game</strong><br> <strong>&gt;&gt;&gt; I’ll go home
    now</strong><br> &gt;&gt;&gt; nice<br> &gt;&gt;&gt; what kind of
    game?<br> <strong>&gt;&gt;&gt; catan</strong><br>
    <strong>&gt;&gt;&gt; strategy</strong><br> <strong>&gt;&gt;&gt;
    very good</strong><br> &gt;&gt;&gt; who was there?<br>
    <strong>&gt;&gt;&gt; Max Yavich and Fedya</strong><br>
    &gt;&gt;&gt; who won?<br> <strong>&gt;&gt;&gt; Max</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; Прив) норм</strong><br> <strong>&gt;&gt;&gt;
    а у тебя?</strong><br> &gt;&gt;&gt; да тоже норм<br>
    &gt;&gt;&gt; чего делал сегодня?<br> <strong>&gt;&gt;&gt; играли в
    настолку</strong><br> <strong>&gt;&gt;&gt; ща поеду
    домой</strong><br> &gt;&gt;&gt; найс<br> &gt;&gt;&gt; что за
    настолка?<br> <strong>&gt;&gt;&gt; колонизаторы</strong><br>
    <strong>&gt;&gt;&gt; стратежка</strong><br> <strong>&gt;&gt;&gt;
    оч хорошая</strong><br> &gt;&gt;&gt; кто был?<br>
    <strong>&gt;&gt;&gt; Макс Явич и Федя</strong><br> &gt;&gt;&gt;
    кто выиграл?<br> <strong>&gt;&gt;&gt; Макс</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Friend 2 vs <strong>Alexander Smirnov</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; hi, good</strong><br> <strong>&gt;&gt;&gt;
    let’s meet in half an hour?</strong><br> &gt;&gt;&gt; yep<br>
    &gt;&gt;&gt; what did you want?<br> <strong>&gt;&gt;&gt; damn I
    haven’t finished the script for recalculating models
    yet</strong><br> <strong>&gt;&gt;&gt; and I need to finish it to
    send it to them</strong><br> <strong>&gt;&gt;&gt; this
    recalculation takes a lot of time, so I just want to turn around and
    start doing it and not waste time on preparation</strong><br>
    &gt;&gt;&gt; got it<br> &gt;&gt;&gt; what is the plan for
    today?<br> <strong>&gt;&gt;&gt; meet in half an hour to discuss
    what we are doing</strong><br> <strong>&gt;&gt;&gt; if decided,
    then I send an application to them and wait for a
    response</strong><br> <strong>&gt;&gt;&gt; if we haven’t decided,
    then we continue to work</strong><br> &gt;&gt;&gt; who do you mean
    by them?<br> <strong>&gt;&gt;&gt; investors</strong><br>
    <strong>&gt;&gt;&gt;
    https://www.ycombinator.com/howtoapply</strong><br>
    <strong>&gt;&gt;&gt; there are two tests)</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; прив, збс</strong><br> <strong>&gt;&gt;&gt;
    го кол через пол часа?</strong><br> &gt;&gt;&gt; да го<br>
    &gt;&gt;&gt; а чего ты хотел?<br> <strong>&gt;&gt;&gt; блять я еще
    не доделал скрипт по пересчету моделей</strong><br>
    <strong>&gt;&gt;&gt; и мне надо доделать чтобы отправить
    им</strong><br> <strong>&gt;&gt;&gt; вот этот пересчет занимает
    много времени поэтому я хочу просто уже развернуться и начать делать
    а не тратить время на подготовку</strong><br> &gt;&gt;&gt;
    понял<br> &gt;&gt;&gt; а какой вообще план на сегодня?<br>
    <strong>&gt;&gt;&gt; встречаемся через пол часа, обсуждаем что
    делаем</strong><br> <strong>&gt;&gt;&gt; если решили то отправляю
    заявку в им и жду ответа</strong><br> <strong>&gt;&gt;&gt; если не
    решили то продолжаем работать</strong><br> &gt;&gt;&gt; им это
    кому?<br> <strong>&gt;&gt;&gt; инвесторы</strong><br>
    <strong>&gt;&gt;&gt;
    https://www.ycombinator.com/howtoapply</strong><br>
    <strong>&gt;&gt;&gt; там два теста)</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Friend 3 vs <strong>Alexander Smirnov</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; hey we’re sitting and solving
    problems</strong><br> &gt;&gt;&gt; what kind of problems?<br>
    <strong>&gt;&gt;&gt; data analysis +-</strong><br> &gt;&gt;&gt;
    and for what?<br> <strong>&gt;&gt;&gt;
    https://yandex.ru/cup/profile/</strong><br> <strong>&gt;&gt;&gt;
    it seems it just became more interesting</strong><br> &gt;&gt;&gt;
    cool<br> &gt;&gt;&gt; what are you planning this evening?<br>
    <strong>&gt;&gt;&gt; idk yet</strong><br> &gt;&gt;&gt; and on the
    weekend?<br> <strong>&gt;&gt;&gt; apparently I’ll also finish
    solving problems and get some work done</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; здарова нормуль сидим решаем
    задачки</strong><br> &gt;&gt;&gt; чего за задачки?<br>
    <strong>&gt;&gt;&gt; анализ данных +-</strong><br> &gt;&gt;&gt; а
    для чего?<br> <strong>&gt;&gt;&gt;
    https://yandex.ru/cup/profile/</strong><br> <strong>&gt;&gt;&gt;
    вроде просто поинтересней стало</strong><br> &gt;&gt;&gt;
    прикольно<br> &gt;&gt;&gt; что вечером планируешь?<br>
    <strong>&gt;&gt;&gt; хз пока</strong><br> &gt;&gt;&gt; а на
    выхах?<br> <strong>&gt;&gt;&gt; видимо тоже буду дорешивать задачи
    и с работой позаниматься</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Alexander Smirnov vs <strong>Friend 1</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; hey)</strong><br> <strong>&gt;&gt;&gt;
    good</strong><br> <strong>&gt;&gt;&gt; you?</strong><br>
    &gt;&gt;&gt; that’s okay too<br> &gt;&gt;&gt; what did you do
    today?<br> <strong>&gt;&gt;&gt; well, I worked, of
    course</strong><br> <strong>&gt;&gt;&gt; and also</strong><br>
    <strong>&gt;&gt;&gt; met with Alena</strong><br>
    <strong>&gt;&gt;&gt; ate at the ramen shop with
    everyone</strong><br> <strong>&gt;&gt;&gt; and went
    home</strong><br> <strong>&gt;&gt;&gt; by the way, we booked a
    place for 14 people</strong><br> <strong>&gt;&gt;&gt; for the
    evening))</strong><br> &gt;&gt;&gt; cool<br> &gt;&gt;&gt; and
    what’s about university?<br> <strong>&gt;&gt;&gt;
    yeah</strong><br> <strong>&gt;&gt;&gt; studied a
    lot</strong><br> <strong>&gt;&gt;&gt; in general, every day I want
    to study more</strong><br> &gt;&gt;&gt; what is the hardest thing
    now?<br> <strong>&gt;&gt;&gt; well I don’t know</strong><br>
    <strong>&gt;&gt;&gt; it just takes a very long time</strong><br>
    <strong>&gt;&gt;&gt; there are some optimization methods that need
    to be rewritten</strong><br> <strong>&gt;&gt;&gt; so I think maybe
    it’s not worth optimizing</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; прив)</strong><br> <strong>&gt;&gt;&gt;
    норм</strong><br> <strong>&gt;&gt;&gt; а у тебя?</strong><br>
    &gt;&gt;&gt; да тоже норм<br> &gt;&gt;&gt; чего делала
    сегодня?<br> <strong>&gt;&gt;&gt; ну я работала,
    конечно</strong><br> <strong>&gt;&gt;&gt; а еще</strong><br>
    <strong>&gt;&gt;&gt; с Аленой встретилась</strong><br>
    <strong>&gt;&gt;&gt; поели в раменной со всеми</strong><br>
    <strong>&gt;&gt;&gt; и домой</strong><br> <strong>&gt;&gt;&gt;
    кстати, мы забронировали рест на 14 человек</strong><br>
    <strong>&gt;&gt;&gt; для вечера))</strong><br> &gt;&gt;&gt;
    прикольно<br> &gt;&gt;&gt; а по унику чего?<br>
    <strong>&gt;&gt;&gt; ага</strong><br> <strong>&gt;&gt;&gt;
    заботала очень много</strong><br> <strong>&gt;&gt;&gt; вообще,
    каждый день хочу больше ботать</strong><br> &gt;&gt;&gt; а что
    сейчас самое тяжелое?<br> <strong>&gt;&gt;&gt; ну не
    знаю</strong><br> <strong>&gt;&gt;&gt; просто очень долго
    получается</strong><br> <strong>&gt;&gt;&gt; там некоторые методы
    оптимизации надо переписывать</strong><br> <strong>&gt;&gt;&gt;
    так что я думаю, может, это не стоит оптимизировать</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Alexander Smirnov vs <strong>Friend 2</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; Hey, good, what about you?</strong><br>
    <strong>&gt;&gt;&gt; Are you already in Bangkok?</strong><br>
    &gt;&gt;&gt; yeah, already here<br> &gt;&gt;&gt; what are your
    plans for today?<br> <strong>&gt;&gt;&gt; Well, I would like to
    work on these pioneer tasks, if you don’t mind, we can do it
    together</strong><br> <strong>&gt;&gt;&gt; Or you can skip, I’ll
    finish the livechat tomorrow</strong><br> &gt;&gt;&gt; and what
    about live chat?<br> <strong>&gt;&gt;&gt; Damn right now I
    launched the front on the prod without this shit that generates this
    thing with a logo, and it swears, says to connect js from google
    analytics</strong><br> <strong>&gt;&gt;&gt; I understand that this
    is a fucking cringe, but I still tried to remember where to get
    it</strong><br> &gt;&gt;&gt; yeah got it<br> &gt;&gt;&gt; what
    will you do on weekends?<br> <strong>&gt;&gt;&gt; We are meeting
    with friends here before leaving, tomorrow we need to go to the
    hotel by 6 am to spend the day in the best traditions</strong><br>
    <strong>&gt;&gt;&gt; There’s another party in the
    evening</strong><br> <strong>&gt;&gt;&gt; Actually, let’s have a
    call, I’ll tell you</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; Прив, норм, а у тебя?</strong><br>
    <strong>&gt;&gt;&gt; А ты в Бангкоке уже?</strong><br>
    &gt;&gt;&gt; ага, уже тут<br> &gt;&gt;&gt; какие планы на
    сегодня?<br> <strong>&gt;&gt;&gt; Ну я хотел бы поработать над
    этими пионерскими заданиями, если ты не против, то можно вместе
    поделать</strong><br> <strong>&gt;&gt;&gt; Или можешь пока
    сольёшься, я завтра буду допиливать лайвчат</strong><br>
    &gt;&gt;&gt; а чего там по лайвчату?<br> <strong>&gt;&gt;&gt; Да
    бля щас запустил на проде фронт без этого говна, которое генерирует
    эту штуку с лого, и она ругается, говорит, чтобы подключить js от
    google analytics</strong><br> <strong>&gt;&gt;&gt; Я понимаю, что
    это пиздец кринж, но я пошел все равно вспоминать, где его
    достать</strong><br> &gt;&gt;&gt; ага понял<br> &gt;&gt;&gt; что
    на выхах будешь делать?<br> <strong>&gt;&gt;&gt; Встречаемся с
    друзьями тут перед отъездом, завтра надо в отель к 6 утра поехать
    чтобы день провести в лучших традициях</strong><br>
    <strong>&gt;&gt;&gt; Там еще одна тусовка вечером</strong><br>
    <strong>&gt;&gt;&gt; На самом деле давай колл, расскажу</strong></p>
    </details>
    <p>---</p>
    <details>
    <summary>
    Alexander Smirnov vs <strong>Friend 3</strong>
    </summary>
    <p>&gt;&gt;&gt; hey<br> &gt;&gt;&gt; what’s up?<br>
    <strong>&gt;&gt;&gt; Hi, haven’t you called yet?)</strong><br>
    <strong>&gt;&gt;&gt; Hey</strong><br> <strong>&gt;&gt;&gt;
    ok)</strong><br> <strong>&gt;&gt;&gt; I’m going to play Dota
    now</strong><br> <strong>&gt;&gt;&gt; Join if you want
    to)</strong><br> &gt;&gt;&gt; mb a little later)<br>
    &gt;&gt;&gt; what are your plans for weekends?<br>
    <strong>&gt;&gt;&gt; Lot of gyms/flexes/parks</strong><br>
    <strong>&gt;&gt;&gt; + maybe come to your place</strong><br>
    &gt;&gt;&gt; hmm well mb mb)<br> &gt;&gt;&gt; what’s with your job
    btw?<br> <strong>&gt;&gt;&gt; Well, I’m waiting for the
    info</strong><br> &gt;&gt;&gt; did they say what deadlines
    are?<br> <strong>&gt;&gt;&gt; He said that there will be a call
    next week to discuss it</strong><br> &gt;&gt;&gt; remind me what
    this position is<br> <strong>&gt;&gt;&gt; Data
    Scientist</strong><br> <strong>&gt;&gt;&gt; The team is engaged in
    recommending products and other shit</strong><br>
    <strong>&gt;&gt;&gt; Creating model</strong><br>
    <strong>&gt;&gt;&gt; As part of this position, you will have to
    develop skills in machine learning, statistical data analysis,
    programming and much more</strong><br> <strong>&gt;&gt;&gt; It is
    how I understood it</strong></p>
    </details>
    <details>
    <summary>
    original
    </summary>
    <p>&gt;&gt;&gt; прив<br> &gt;&gt;&gt; как дела?<br>
    <strong>&gt;&gt;&gt; Прив, звонил еще нет?)</strong><br>
    <strong>&gt;&gt;&gt; Даров</strong><br> <strong>&gt;&gt;&gt;
    Нормально)</strong><br> <strong>&gt;&gt;&gt; Сча в доту
    иду</strong><br> <strong>&gt;&gt;&gt; Если хош
    присоединяйся)</strong><br> &gt;&gt;&gt; мб чуть позже)<br>
    &gt;&gt;&gt; какие планы на выхи?<br> <strong>&gt;&gt;&gt; Дохуя
    залов/флексов/парков</strong><br> <strong>&gt;&gt;&gt; + мона
    залипнуть к тебе</strong><br> &gt;&gt;&gt; хм ну мб мб)<br>
    &gt;&gt;&gt; а чего у тебя с работой в итоге?<br>
    <strong>&gt;&gt;&gt; НУ я жду инфу</strong><br> &gt;&gt;&gt; а
    какие сроки не сказали?<br> <strong>&gt;&gt;&gt; Сказал что на
    следующей неделе созвон где обсуждение будет</strong><br>
    &gt;&gt;&gt; а напомни что за позиция<br> <strong>&gt;&gt;&gt;
    Data Scientist</strong><br> <strong>&gt;&gt;&gt; Команда
    занимается рекомендацией товаров и прочей хуеты</strong><br>
    <strong>&gt;&gt;&gt; Создания моделькеи</strong><br>
    <strong>&gt;&gt;&gt; В рамках этой позиции ты должен будет развивать
    навыки машинного обучения, статистического анализа данных,
    программирования и многое другое</strong><br> <strong>&gt;&gt;&gt;
    Ну я так понял</strong></p>
    </details>
    <p>---</p>
    <p>Conversations have become more interesting and engaging, although
    there’s still a risk of losing context. Russian language performance
    has improved, but errors still occur. I believe that before
    fine-tuning for a specific task with limited data, like mine, it
    would be beneficial to first fine-tune the model unsupervised on a
    large corpus of Russian texts. Additionally, incorporating common
    conversation partners’ names as separate tokens might enhance the
    quality.</p>
    <p>I wouldn’t say it has turned out to be significantly better than
    LoRA. It might be more effective to focus solely on a single person
    and calculate the loss based only on my responses (or someone
    else’s), instead of trying to learn about each and every
    conversational partner.</p>
    <h2 id="closing-thoughts"><a href="#closing-thoughts">Closing
    thoughts</a></h2>
    <p>Certainly, I had to cherry-pick the results, not because most of
    the model’s replies were inadequate, but because many were simple
    responses like “I’ll call you later,” “busy,” and “ok,” which are
    naturally frequent in conversations. Despite this, it’s clear that
    the model excels in mimicking the style of the person it’s
    impersonating. It also captures the commonly discussed topics
    between two people. However, it significantly lacks context in
    conversations. Responding to queries like “yo, so?” or “what are
    your plans for the weekend” is challenging without having full
    context. Perhaps utilizing a system like <a href="https://www.rewind.ai/" target="_blank">Rewind</a>, which
    captures everything the user does across the computer, could be
    beneficial.</p>
    <h2 id="code"><a href="#code">Code</a></h2>
    <p>You can find code for this project as well as instructions on how
    to replicate it yourself on your own Telegram dump in <a href="https://github.com/furiousteabag/doppelganger" target="_blank">my github repo</a>. Training logs may be accessed on
    <a href="https://wandb.ai/furiousteabag/doppelganger" target="_blank">WandB</a>.</p>
    
    <hr>
    <a href="https://asmirnov.xyz/">home</a>
  

</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Several piracy-related arrests spark fears of high-level crackdown (127 pts)]]></title>
            <link>https://torrentfreak.com/several-piracy-related-arrests-spark-fears-of-high-level-crackdown-231127/</link>
            <guid>38434713</guid>
            <pubDate>Mon, 27 Nov 2023 16:56:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://torrentfreak.com/several-piracy-related-arrests-spark-fears-of-high-level-crackdown-231127/">https://torrentfreak.com/several-piracy-related-arrests-spark-fears-of-high-level-crackdown-231127/</a>, See on <a href="https://news.ycombinator.com/item?id=38434713">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><a href="https://torrentfreak.com/images/denmark-target-s.png"><img decoding="async" src="https://torrentfreak.com/images/denmark-target-s.png" alt="denmark-target-s" width="290" height="169" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20290%20169'%3E%3C/svg%3E" data-lazy-src="https://torrentfreak.com/images/denmark-target-s.png"></a>Over the past few years, increased enforcement by players in both the private and public sectors has made Denmark one of the riskiest places in Europe for pirate site operators and prolific file-sharers.</p>
<p>Relentless pushback from local anti-piracy group Rights Alliance and its partnership with Denmark’s Special Crime Unit (National enhed for Særlig Kriminalitet (NSK)) has led to many site closures, arrests, and subsequent prosecutions. </p>
<p>The most recent reported conviction saw a 37-year-old man receive a <a href="https://torrentfreak.com/prolific-bittorrent-pirate-receives-suspended-prison-sentence-in-denmark-230918/">60-day suspended prison sentence</a> in September for pirating more than a thousand works through local BitTorrent trackers. </p>
<p>In connection with this and other successes over the past few years, last month Rights Alliance revealed that Thomas Heldrup, the anti-piracy group’s Head of Content Protection &amp; Enforcement, had been running an <a href="https://torrentfreak.com/how-an-undercover-lawyer-helped-to-topple-denmarks-torrent-tracker-scene-231012/">undercover operation</a> in piracy circles since 2016. </p>
<h2>Fears of Infiltration</h2>
<p>Concerns that a site might have a spy on board certainly aren’t unusual; for many site operators, however, it’s the kind of thing that <em>only ever happens to someone else</em>, usually those perceived to be less careful than them. In some cases that might be true but<br>
Denmark’s distinguishing features as a country may introduce complications.</p>
<p>A relatively small population and a language rarely spoken outside Denmark’s borders, presents an increased chance of local piracy communities overlapping. Combine that with a shared reliance on locally attractive content and one site’s security issues risk becoming a much broader problem, as the last couple of years appear to show. </p>
<p>Until recently, however, there were few signs to suggest those at the top of the so-called ‘<a href="https://torrentfreak.com/bittorrent-releasers-slice-the-top-off-movie-piracy-pyramid-100727/">Piracy Pyramid</a>‘ may also have become targets in Denmark. Nevertheless, some of those with connections to Scene entities are starting to ask questions.</p>
<h2>47-Year-Old Arrested in Denmark</h2>
<p>In a statement last week, Denmark’s National Unit for Special Crime (NSK) announced that as part of a long-running investigation, a man was arrested on November 22 and then charged with copyright infringement offenses. </p>
<p>NSK said its officers searched the home of a 47-year-old man in South Zealand (Sydsjælland) and seized IT equipment in connection with illegal file-sharing and “copyright infringement of a particularly serious nature.”</p>
<p>“The case is about an organized network that has illegally shared extremely large quantities of films and TV series via file sharing services,” said NSK Police Commissioner Anders-Emil Nøhr Kelbæk.</p>
<p>While noting that NSK had no further information to offer at this time, Kelbæk said he was pleased that NSK had arrested another suspect believed to have played a ‘significant role’ in the unnamed network.</p>
<h2>At Least Five Arrests Thus Far</h2>
<p>Last week’s arrest was only the latest in a series of arrests carried out as part of the same long-running NSK investigation into the illegal distribution of movies and TV shows.</p>
<p>In late August, NSK arrested four people on suspicion of sharing “extremely large quantities” of movies and TV shows. NSK raided addresses in South-West Jutland, North Zealand and Bornholmand. A 43-year old was arrested at the last location, but it’s claimed he lives elsewhere. In common with last week’s arrest, all were charged on suspicion of “particularly serious” copyright infringement offenses.</p>
<p>In an almost identical statement to that issued last week, Commissioner Anders-Emil Nøhr Kelbæk said the case was about “an organized network that shares extremely large amounts of data, presumably in the form of films and series.”</p>
<h2>Does Available Information Really Indicate a ‘Scene’ Bust?</h2>
<p>TorrentFreak sources report concerns that last week’s arrest may be linked to Scene groups. Terminology used by NSK doesn’t instantly rule that out and does seem to suggest something potentially more significant than other arrests over the past few years.</p>
<p>According to NSK, the August arrests took place on August 28, 2023. Using information in Scene release databases we looked for Danish Scene groups and/or groups that were releasing Denmark-focused content before that date but then made no releases afterward; while that wouldn’t provide conclusive proof that a group had been targeted, the method has proven useful in the past. Findings as follows:</p>
<p><small>⦿ Nordic blu-ray release group (including Danish) paused Aug 13, restarted Oct 16. Nothing since<br>
⦿ TV show release group paused Aug 28 to Sep 1 but continued as normal<br>
⦿ At least one TV show group made dozens of releases on Aug 28 suggesting little ‘panic’ on that date</small></p>
<p>While activity late August suggests nothing especially out of the ordinary, activity since the arrest last week stands in contrast.</p>
<p>Notable Danish content release group inactivity since November 22 arrest as follows:</p>
<p><small>⦿ ‘HYGGE’ | TV shows | 550+ releases since March 23 | <a href="https://predb.net/rls/Stjerner.I.Troejen.S03E07.DANiSH.1080p.WEB.h264-HYGGE">Last release Nov 23, 2023 07:43:39</a><br>
⦿ ‘HiVE’ | TV shows | 650+ releases since March 23 | <a href="https://predb.net/rls/Nybyggerne.S09E10.Det.Sidste.Rum.DANiSH.720p.WEB.h264-HiVE">Last release Nov 23, 2023 05:03:52</a><br>
⦿ ‘DKiDS’ | TV shows | 3000+ release since March 23 | <a href="https://predb.net/rls/Mabinooz.S02E01.Indbrud.DANiSH.1080p.WEB.H264-DKiDS">Last release Nov 21, 2023 10:34:50</a><br>
⦿ ‘DANES’ | TV shows | 640+ releases since May 23 | <a href="https://predb.net/rls/Horisont.2023.11.22.Dagbog.Fra.Gaza.DANiSH.720p.WEB.h264-DANES">Last release Nov 22, 2023 08:13:21</a><br>
⦿ ‘JYSK’ | TV shows | 520+ releases since March 23 | <a href="https://predb.net/rls/Kontant.2023.11.23.S2023E15.Stivnede.Smil.DANiSH.720p.WEB.h264-JYSK">Last release Nov 23, 2023 08:20:39</a> </small></p>
<p>TF is informed that some groups may have gone dark simply out of an abundance of caution. That may or may not include all or none of the above. It’s also possible that the groups have nothing to release. Furthermore, there are many other global groups with no obvious links to Danish content or Denmark that also stopped releasing on November 21. The reasons for this are unknown but holidays in the United States may play a role.</p>
<p>In an information vacuum, rumors are extremely common but if the authorities and/or Rights Alliance used intelligence obtained in other operations to infiltrate Scene groups or their affiliates, it wouldn’t be a surprise. It wouldn’t be surprise to hear that any group downtime was directly linked to turkey and/or alcohol consumption either but in any event, the next couple of weeks should prove informative.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Prettier $20k Bounty was Claimed (574 pts)]]></title>
            <link>https://prettier.io/blog/2023/11/27/20k-bounty-was-claimed</link>
            <guid>38434613</guid>
            <pubDate>Mon, 27 Nov 2023 16:50:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://prettier.io/blog/2023/11/27/20k-bounty-was-claimed">https://prettier.io/blog/2023/11/27/20k-bounty-was-claimed</a>, See on <a href="https://news.ycombinator.com/item?id=38434613">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><span><p>Prettier, a JavaScript code formatter, has seen an incredible adoption thanks to its careful handling of the very, very, long tail of ways people can write code. At this point, the formatting logic has been solid and after our work on <a href="https://prettier.io/blog/2023/11/13/curious-ternaries">ternaries</a> lands, it will be in a happy state.</p>
<p>This means that we can now focus on the next important aspect: Performance. Prettier has never been fast per se, but fast enough for most use cases. This has always felt unsatisfying so we wanted to do something about it. What better way than a friendly competition.</p>
<p>On November 9th, we put up a <a href="https://twitter.com/Vjeux/status/1722733472522142022">$10k bounty</a> for any project written in Rust that would pass 95% of Prettier test suite. Guillermo Rauch, CEO of Vercel, matched it to bring it to $20k and <a href="https://napi.rs/">napi.rs</a> added another $2.5k. The folks at Algora even made an amazing landing page for it.</p>
<p><a href="https://console.algora.io/challenges/prettier"><img src="https://console.algora.io/prettier/og.png" alt=""></a></p>
<h2>Winner Winner Chicken Dinner</h2>
<p><strong>I'm so excited to report that the <a href="https://biomejs.dev/">Biome project</a> claimed the bounty!</strong> It has been so epic to see a dozen people come together to improve compatibility in only a short 3 weeks. You can read their <a href="https://biomejs.dev/blog/biome-wins-prettier-challenge">full report</a> for the details.</p>
<p>One question you are probably wondering is why would the Prettier team fund another project!? In practice, Prettier has been the dominant code formatter for JavaScript and as a result of a lack of competition, there has been little incentive to push on performance and fix various edge cases.</p>
<p>There is now a Prettier-compatible and way faster implementation in Biome that people can switch to. So Prettier has to step up its game! Thankfully Fabio Spampinato got nerd sniped with the challenge and found many extreme inefficiencies in Prettier's CLI by doing proper profiling. He will fix them by the end of the year.</p>
<p>By matching all the tests, the Biome project also found a lot of <a href="https://github.com/biomejs/biome/issues/739">bugs and questionable decisions</a> in Prettier that we will be able to improve upon.</p>
<h2>Money, Money, Money</h2>
<p>I want to start by acknowledging that this bounty and the continued success of Prettier have been possible thanks to various people making significant donations. Companies: Indeed ($20,000), Frontend Masters ($10,850), Sentry ($10,529), Salesforce ($10,025), Airbnb ($8,426), Cybozu ($6,086). Individuals: Shintaro Kaneko ($1,635), Suhail Doshi ($1,000), icchiman ($500), Mariusz Nowak ($270), Benoît Burgener ($270), Jeremy Combs ($270), f_subal ($230).</p>
<p>You may not be aware but thanks to all those donations, we've been able to <a href="https://prettier.io/blog/2022/01/06/prettier-begins-paying-maintainers">pay two people $1.5k/month</a> for the past two years to keep shipping. Fisker Cheung and Sosuke Suzuki have done an incredible job!</p>
<p>With the current budget, we only have 8 months of runway left, so this is a good time to solicit your donations.</p>
<p><strong>Consider donating if you or your company are using Prettier and it has been helpful to you: <a href="https://opencollective.com/prettier">https://opencollective.com/prettier</a></strong></p>
<p>I would also like to give a big shout-out to <a href="https://opencollective.com/prettier">Open Collective</a>. It has been incredible for the project. From a maintainer perspective, it has been amazing as you can sign up without giving any personal information and it acts as a bank. It lets people give and receive money all around the world and handles all the tax documents properly which is a huge deal.</p>
<p>Prettier raised a total of $110k and redistributed $75k.</p>
<h2>Conclusion</h2>
<p>While this was a one time bounty, the goal is to give an energy boost to the space of code formatting so that as an ecosystem we can make the best developer experience possible! It's been heartwarming to see so many people coming together and we hope they'll only achieve bigger things from now.</p>
</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Trains.fyi – a live map of passenger trains in the US and Canada (287 pts)]]></title>
            <link>https://trains.fyi/</link>
            <guid>38434574</guid>
            <pubDate>Mon, 27 Nov 2023 16:47:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://trains.fyi/">https://trains.fyi/</a>, See on <a href="https://news.ycombinator.com/item?id=38434574">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

        <!-- Mobile Navbar -->
        <nav>
            <a href="https://trains.fyi/">trains.fyi 🚂</a>
            
        </nav>

        <!-- Collapsible Sidebar for Mobile -->
        <div id="mobileSidebar">
            <hr>
            <div>
                    
                    <p>A live, real-time map of passenger train locations in North America 🇨🇦🇺🇸</p>
                </div>

            <hr>

            <div>
                    <h2>About The Project</h2>
                    <div><p>This project amalgamates data from train GPS tracking and displays all trains on one map.
                        </p><p>Data is updated every minute, and the map updates automatically. This project
                        was created by <a href="https://twitter.com/@rydercalmdown" target="_blank">@rydercalmdown</a>.
                    </p></div>

                    
                </div>

            <div>
                    <h2>Supported Trains</h2>
                    <p>Currently the map supports the following trains.</p>

                    
                    
                    
                    
                    <div>
                        
                        <p>Long Island Railroad - New York</p>
                    </div>
                    <div>
                        
                        <p>Metro North Railroad - New York</p>
                    </div>
                    <div>
                        
                        <p>Massachusetts Bay Transportation Authority - Boston</p>
                    </div>
                    <div>
                        
                        <p>Caltrain - San Francisco Bay Area</p>
                    </div>
                    
                    

                </div>
        </div>

        <div>
            <nav>
                <div>
                    <div>
                            <h2>trains.fyi 🚂</h2>
                            <p>A live, real-time map of passenger train locations in North America. 🇨🇦🇺🇸</p>
                        </div>

                    <hr>

                    <div>
                            <h2>About The Project</h2>
                            <div><p>This project amalgamates data from train GPS tracking and displays all trains on one map.
                                </p><p>Data is updated every minute, and the map updates automatically. This project
                                was created by <a href="https://twitter.com/@rydercalmdown" target="_blank">@rydercalmdown</a>.</p></div>


                            
                        </div>

                    <div>
                            <h2>Supported Trains</h2>
                            <p>Currently the map supports the following trains.</p>

                            
                            
                            
                            
                            <div>
                                
                                <p>Long Island Railroad - New York</p>
                            </div>
                            <div>
                                
                                <p>Metro North Railroad - New York</p>
                            </div>
                            <div>
                                
                                <p>Massachusetts Bay Transportation Authority - Boston</p>
                            </div>
                            <div>
                                
                                <p>Caltrain - San Francisco Bay Area</p>
                            </div>
                            
                            

                        </div>
                </div>
            </nav>

            <main role="main">
                
            </main>
        </div>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Web Components Eliminate JavaScript Framework Lock-In (228 pts)]]></title>
            <link>https://jakelazaroff.com/words/web-components-eliminate-javascript-framework-lock-in/</link>
            <guid>38434470</guid>
            <pubDate>Mon, 27 Nov 2023 16:41:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jakelazaroff.com/words/web-components-eliminate-javascript-framework-lock-in/">https://jakelazaroff.com/words/web-components-eliminate-javascript-framework-lock-in/</a>, See on <a href="https://news.ycombinator.com/item?id=38434470">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-content="" data-astro-cid-rnrqlda2=""> 
<p>We’ve seen a lot of great posts about web components lately.
Many have focused on the burgeoning <a href="https://adactio.com/journal/20618" data-astro-cid-bi7aps5f="">HTML web components</a><a data-tooltip="" href="https://adactio.com/journal/20618" data-astro-cid-bi7aps5f=""> <img src="https://adactio.com/images/photo-300.jpg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">HTML web components</span> <span data-astro-cid-bi7aps5f="">Don’t replace. Augment.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://adactio.com/icon.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">adactio.com/journal/20618</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> pattern, which eschews shadow DOM in favor of progressively enhancing existing markup.
There’s also been discussion — including <a href="https://jakelazaroff.com/words/web-components-will-outlive-your-javascript-framework/" data-astro-cid-bi7aps5f="">this post by yours truly</a><a data-tooltip="" href="https://jakelazaroff.com/words/web-components-will-outlive-your-javascript-framework/" data-astro-cid-bi7aps5f=""> <img src="https://jakelazaroff.com/og/web-components-will-outlive-your-javascript-framework.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Web Components Will Outlive Your JavaScript Framework | jakelazaroff.com</span> <span data-astro-cid-bi7aps5f="">If we're building things that we want to work in five or ten or even 20 years, we need to avoid dependencies and use the web with no layers in between.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://jakelazaroff.com/favicon.ico" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">jakelazaroff.com/words/web-components-will-outlive-your-javascript-framework/</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> — about fully replacing JavaScript frameworks with web components.</p>
<p>Those aren’t the only options, though.
You can also use web components <em>in tandem</em> with JavaScript frameworks.
To that end, I want to talk about a key benefit that I haven’t seen mentioned as much: <strong>web components can dramatically loosen the coupling of JavaScript frameworks</strong>.</p>
<p>To prove it, we’re going to do something kinda crazy: build an app where <em>every single component</em> is written with a different framework.</p>
<p>It probably goes without saying that you should not build a real app like this!
But there <em>are</em> valid reasons for mixing frameworks.
Maybe you’re gradually migrating from React to Vue.
Maybe your app is built with Solid, but you want to use a third-party library that only exists as an Angular component.
Maybe you want to use Svelte for a few “islands of interactivity” in an otherwise static website.</p>
<p>Here’s what we’re going to create: a simple little todo app based loosely on <a href="https://todomvc.com/" data-astro-cid-bi7aps5f="">TodoMVC</a><a data-tooltip="" href="https://todomvc.com/" data-astro-cid-bi7aps5f=""> <img src="https://raw.github.com/tastejs/todomvc/gh-pages/site-assets/screenshot.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">TodoMVC</span> <span data-astro-cid-bi7aps5f="">Helping you select an MV* framework - Todo apps for Backbone.js, Ember.js, AngularJS, Spine and many more</span> <span data-astro-cid-bi7aps5f=""> <img src="https://todomvc.com/site-assets/favicon.ico" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">todomvc.com</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</p>
<todo-demo show-layout="true" show-input="true" show-todos="true" show-filters="true"></todo-demo>

<p>As we build it, we’ll see how web components can <em>encapsulate</em> JavaScript frameworks, allowing us to use them without imposing broader constraints on the rest of the application.</p>
<h3 id="whats-a-web-component">What’s a Web Component?</h3>
<p>In case you’re not familiar with web components, here’s a brief primer on how they work.</p>
<p>First, we declare a subclass of <code>HTMLElement</code> in JavaScript. Let’s call it <code>MyComponent</code>:</p>
<pre><code><span>class</span> <span>MyComponent</span> <span>extends</span> <span>HTMLElement</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>shadow <span>=</span> <span>this</span><span>.</span><span>attachShadow</span><span>(</span><span>{</span> <span>mode</span><span>:</span> <span>"open"</span> <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>connectedCallback</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>shadow<span>.</span>innerHTML <span>=</span> <span><span>`</span><span>
      &lt;p&gt;Hello from a web component!&lt;/p&gt;
      &lt;style&gt;
        p {
          color: pink;
          font-weight: bold;
          padding: 1rem;
          border: 4px solid pink;
        }
      &lt;/style&gt;
    </span><span>`</span></span><span>;</span>
  <span>}</span>
<span>}</span></code></pre>
<p>That call to <code>attachShadow</code> in the constructor makes our component use the <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM" data-astro-cid-bi7aps5f="">shadow DOM</a><a data-tooltip="" href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM" data-astro-cid-bi7aps5f=""> <img src="https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Using shadow DOM - Web APIs | MDN</span> <span data-astro-cid-bi7aps5f="">An important aspect of custom elements is encapsulation, because a custom element, by definition, is a piece of reusable functionality: it might be dropped into any web page and be expected to work. So it's important that code running in the page should not be able to accidentally break a custom element by modifying its internal implementation. Shadow DOM enables you to attach a DOM tree to an element, and have the internals of this tree hidden from JavaScript and CSS running in the page.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://developer.mozilla.org/favicon-48x48.cbbd161b.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>, which encapsulates the markup and styles inside our component from the rest of the page.
<code>connectedCallback</code> is called when the web component is actually connected to the DOM tree, rendering the HTML contents into the component’s “shadow root”.</p>
<p>This foreshadows how we’ll make our frameworks work with web components.<sup><a href="#user-content-fn-rimshot" id="user-content-fnref-rimshot" data-footnote-ref="" aria-describedby="footnote-label" data-astro-cid-bi7aps5f="">1</a></sup>
We normally “attach” frameworks to a DOM element, and let the framework take over <em>all</em> ancestors of that element.
With web components, we can attach the framework to the shadow root, which ensures that it can only access the component’s “shadow tree”.</p>
<p>Next, we define a custom element name for our <code>MyComponent</code> class:</p>
<pre><code>customElements<span>.</span><span>define</span><span>(</span><span>"my-component"</span><span>,</span> MyComponent<span>)</span><span>;</span></code></pre>
<p>Whenever a tag with that custom element name appears on the page, the corresponding DOM node is actually an instance of <code>MyComponent</code>!</p>
<pre><code><span><span><span>&lt;</span>my-component</span><span>&gt;</span></span><span><span><span>&lt;/</span>my-component</span><span>&gt;</span></span>
<span><span><span>&lt;</span>script</span><span>&gt;</span></span><span><span>
  <span>const</span> myComponent <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>"my-component"</span><span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span>myComponent <span>instanceof</span> <span>MyComponent</span><span>)</span><span>;</span> <span>// true</span>
</span></span><span><span><span>&lt;/</span>script</span><span>&gt;</span></span></code></pre>
<p>Check it out:</p>
<my-component></my-component>

<p>There’s more to web components, but that’s enough to get you through the rest of the article.</p>
<h3 id="scaffolding-layout">Scaffolding Layout</h3>
<p>The entrypoint of our app will be a React component.<sup><a href="#user-content-fn-preact" id="user-content-fnref-preact" data-footnote-ref="" aria-describedby="footnote-label" data-astro-cid-bi7aps5f="">2</a></sup> Here’s our humble start:</p>
<pre><code><span>// TodoApp.jsx</span>
<span>export</span> <span>default</span> <span>function</span> <span>TodoApp</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span><span><span>&lt;</span></span><span>&gt;</span></span><span><span><span>&lt;/</span></span><span>&gt;</span></span><span>;</span>
<span>}</span></code></pre>
<p>We could start adding elements here to block out the basic DOM structure, but I want to write another component for that to show how we can nest web components in the same way we nest framework components.</p>
<p>Most frameworks support composition via nesting like normal HTML elements.
From the outside, it usually looks something like this:</p>
<pre><code><span><span><span>&lt;</span><span>Card</span></span><span>&gt;</span></span><span>
  </span><span><span><span>&lt;</span><span>Avatar</span></span> <span>/&gt;</span></span><span>
</span><span><span><span>&lt;/</span><span>Card</span></span><span>&gt;</span></span></code></pre>
<p>On the inside, there are a few ways that frameworks handle this.
For example, React and Solid give you access to those children as a special <code>children</code> prop:</p>
<pre><code><span>function</span> <span>Card</span><span>(</span><span>props</span><span>)</span> <span>{</span>
  <span>return</span> <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>card<span>"</span></span><span>&gt;</span></span><span>{</span>props<span>.</span>children<span>}</span><span><span><span>&lt;/</span>div</span><span>&gt;</span></span><span>;</span>
<span>}</span></code></pre>
<p>With web components that use shadow DOM, we can do the same thing using the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot" data-astro-cid-bi7aps5f=""><code>&lt;slot&gt;</code> element</a><a data-tooltip="" href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot" data-astro-cid-bi7aps5f=""> <img src="https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">&lt;slot&gt;: The Web Component Slot element - HTML: HyperText Markup Language | MDN</span> <span data-astro-cid-bi7aps5f="">The &lt;slot&gt; HTML element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://developer.mozilla.org/favicon-48x48.cbbd161b.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">developer.mozilla.org/en-US/docs/Web/HTML/Element/slot</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>. When the browser encounters a <code>&lt;slot&gt;</code>, it replaces it with the children of the web component.</p>
<p><code>&lt;slot&gt;</code> is actually more powerful than React or Solid’s <code>children</code>.
If we give each slot a <code>name</code> attribute, a web component can have multiple <code>&lt;slot&gt;</code>s, and we can determine where each nested element goes by giving it a <code>slot</code> attribute matching the <code>&lt;slot&gt;</code>’s <code>name</code>.</p>
<p>Let’s see what this looks like in practice.
We’ll write our layout component using <a href="https://www.solidjs.com/" data-astro-cid-bi7aps5f="">Solid</a><a data-tooltip="" href="https://www.solidjs.com/" data-astro-cid-bi7aps5f=""> <img src="https://www.solidjs.com/og.jpg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">SolidJS</span> <span data-astro-cid-bi7aps5f="">Solid is a purely reactive library. It was designed from the ground up with a reactive core. It's influenced by reactive principles developed by previous libraries.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://www.solidjs.com/img/favicons/favicon-32x32.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">www.solidjs.com</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>:</p>
<pre><code><span>// TodoLayout.jsx</span>
<span>import</span> <span>{</span> render <span>}</span> <span>from</span> <span>"solid-js/web"</span><span>;</span>

<span>function</span> <span>TodoLayout</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>wrapper<span>"</span></span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>header</span> <span>class</span><span><span>=</span><span>"</span>header<span>"</span></span><span>&gt;</span></span><span>
        </span><span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>title<span>"</span></span> <span>/&gt;</span></span><span>
        </span><span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>filters<span>"</span></span> <span>/&gt;</span></span><span>
      </span><span><span><span>&lt;/</span>header</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>div</span><span>&gt;</span></span><span>
        </span><span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>todos<span>"</span></span> <span>/&gt;</span></span><span>
      </span><span><span><span>&lt;/</span>div</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>footer</span><span>&gt;</span></span><span>
        </span><span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>input<span>"</span></span> <span>/&gt;</span></span><span>
      </span><span><span><span>&lt;/</span>footer</span><span>&gt;</span></span><span>
    </span><span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
  <span>)</span><span>;</span>
<span>}</span>

customElements<span>.</span><span>define</span><span>(</span>
  <span>"todo-layout"</span><span>,</span>
  <span>class</span> <span>extends</span> HTMLElement <span>{</span>
    <span>constructor</span><span>(</span><span>)</span> <span>{</span>
      <span>super</span><span>(</span><span>)</span><span>;</span>
      <span>this</span><span>.</span>shadow <span>=</span> <span>this</span><span>.</span><span>attachShadow</span><span>(</span><span>{</span> <span>mode</span><span>:</span> <span>"open"</span> <span>}</span><span>)</span><span>;</span>
    <span>}</span>

    <span>connectedCallback</span><span>(</span><span>)</span> <span>{</span>
      <span>render</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span><span><span>&lt;</span><span>TodoLayout</span></span> <span>/&gt;</span></span><span>,</span> <span>this</span><span>.</span>shadow<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>)</span><span>;</span></code></pre>
<p>There are two parts to our Solid web component: the web component wrapper at the top, and the actual Solid component at the bottom.</p>
<p>The most important thing to notice about the Solid component is that we’re using named <code>&lt;slot&gt;</code>s instead of the <code>children</code> prop.
Whereas <code>children</code> is handled by Solid and would only let us nest other Solid components, <code>&lt;slot&gt;</code>s are handled by the browser itself and will let us nest <em>any</em> HTML element — including web components written with other frameworks!</p>
<p>The web component wrapper is pretty similar to <a href="#whats-a-web-component" data-astro-cid-bi7aps5f="">the example above</a>.
It creates a shadow root in the constructor, and then renders the Solid component into it in the <code>connectedCallback</code> method.</p>
<p>Note that this is not a complete implementation of the web component wrapper!
At the very least, we’d probably want to define an <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Components/Using_custom_elements#responding_to_attribute_changes" data-astro-cid-bi7aps5f=""><code>attributeChangedCallback</code> method</a><a data-tooltip="" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Components/Using_custom_elements#responding_to_attribute_changes" data-astro-cid-bi7aps5f=""> <img src="https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Using custom elements - Web APIs | MDN</span> <span data-astro-cid-bi7aps5f="">One of the key features of web components is the ability to create custom elements: that is, HTML elements whose behavior is defined by the web developer, that extend the set of elements available in the browser.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://developer.mozilla.org/favicon-48x48.cbbd161b.png#responding_to_attribute_changes" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">developer.mozilla.org/en-US/docs/Web/API/Web_Components/Using_custom_elements#responding_to_attribute_changes</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> so we can re-render the Solid component when the attributes change.
If you’re using this in production, you should probably use a package Solid provides called <a href="https://www.npmjs.com/package/solid-element" data-astro-cid-bi7aps5f="">Solid Element</a><a data-tooltip="" href="https://www.npmjs.com/package/solid-element" data-astro-cid-bi7aps5f=""> <img src="https://static-production.npmjs.com/338e4905a2684ca96e08c7780fc68412.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">solid-element</span> <span data-astro-cid-bi7aps5f="">Webcomponents wrapper for Solid. Latest version: 1.8.0, last published: a month ago. Start using solid-element in your project by running `npm i solid-element`. There are 59 other projects in the npm registry using solid-element.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://static-production.npmjs.com/b0f1a8318363185cc2ea6a40ac23eeb2.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">www.npmjs.com/package/solid-element</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> that handles all this for you.</p>
<p>Back in our React app, we can now use our <code>TodoLayout</code> component:</p>
<pre><code><span>// TodoApp.jsx</span>
<span>export</span> <span>default</span> <span>function</span> <span>TodoApp</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span>todo-layout</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>h1</span> <span>slot</span><span><span>=</span><span>"</span>title<span>"</span></span><span>&gt;</span></span><span>Todos</span><span><span><span>&lt;/</span>h1</span><span>&gt;</span></span><span>
    </span><span><span><span>&lt;/</span>todo-layout</span><span>&gt;</span></span>
  <span>)</span><span>;</span>
<span>}</span></code></pre>
<p>Note that we don’t need to import anything from <code>TodoLayout.jsx</code> — we just use the custom element tag that we defined.</p>
<p>Check it out:</p>
<todo-demo show-layout="true"></todo-demo>

<p>That’s a React component rendering a Solid component, which takes a nested React element as a child.</p>
<h3 id="adding-todos">Adding Todos</h3>
<p>For the todo input, we’ll peel the onion back a bit further and write it with no framework at all!</p>
<pre><code><span>// TodoInput.js</span>
customElements<span>.</span><span>define</span><span>(</span><span>"todo-input"</span><span>,</span> TodoInput<span>)</span><span>;</span>

<span>class</span> <span>TodoInput</span> <span>extends</span> <span>HTMLElement</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span><span>)</span><span>;</span>
    <span>this</span><span>.</span>shadow <span>=</span> <span>this</span><span>.</span><span>attachShadow</span><span>(</span><span>{</span> <span>mode</span><span>:</span> <span>"open"</span> <span>}</span><span>)</span><span>;</span>
  <span>}</span>

  <span>connectedCallback</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>shadow<span>.</span>innerHTML <span>=</span> <span><span>`</span><span>
      &lt;form&gt;
        &lt;input name="text" type="text" placeholder="What needs to be done?" /&gt;
      &lt;/form&gt;
    </span><span>`</span></span><span>;</span>

    <span>this</span><span>.</span>shadow<span>.</span><span>querySelector</span><span>(</span><span>"form"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"submit"</span><span>,</span> <span>evt</span> <span>=&gt;</span> <span>{</span>
      evt<span>.</span><span>preventDefault</span><span>(</span><span>)</span><span>;</span>
      <span>const</span> data <span>=</span> <span>new</span> <span>FormData</span><span>(</span>evt<span>.</span>target<span>)</span><span>;</span>

      <span>this</span><span>.</span><span>dispatchEvent</span><span>(</span><span>new</span> <span>CustomEvent</span><span>(</span><span>"add"</span><span>,</span> <span>{</span> <span>detail</span><span>:</span> data<span>.</span><span>get</span><span>(</span><span>"text"</span><span>)</span> <span>}</span><span>)</span><span>)</span><span>;</span>
      evt<span>.</span>target<span>.</span><span>reset</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span></code></pre>
<p>Between this, the example web component and our Solid layout, you’re probably noticing a pattern: attach a shadow root and then render some HTML inside it.
Whether we hand-write the HTML or use a framework to generate it, the process is roughly the same.</p>
<p>Here, we’re using a <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent" data-astro-cid-bi7aps5f="">custom event</a><a data-tooltip="" href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent" data-astro-cid-bi7aps5f=""> <img src="https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">CustomEvent - Web APIs | MDN</span> <span data-astro-cid-bi7aps5f="">The CustomEvent interface represents events initialized by an application for any purpose.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://developer.mozilla.org/favicon-48x48.cbbd161b.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">developer.mozilla.org/en-US/docs/Web/API/CustomEvent</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> to communicate with the parent component.
When the form is submitted, we dispatch an <code>add</code> event with the input text.</p>
<p>Event queues are often used to <a href="https://gameprogrammingpatterns.com/event-queue.html" data-astro-cid-bi7aps5f="">decouple communication</a><a data-tooltip="" href="https://gameprogrammingpatterns.com/event-queue.html" data-astro-cid-bi7aps5f="">  <span data-astro-cid-bi7aps5f="">Event Queue · Decoupling Patterns · Game Programming Patterns</span>  <span data-astro-cid-bi7aps5f=""> <img src="https://gameprogrammingpatterns.com/favicon-32x32.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">gameprogrammingpatterns.com/event-queue.html</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> between components of a software system.
Browsers lean heavily on events, and custom events in particular are an important tool in the web components toolbox — especially so because the custom element acts as a natural event bus that can be accessed from outside the web component.</p>
<p>Before we can continue adding components, we need to figure out how to handle our state.
For now, we’ll just keep it in our React <code>TodoApp</code> component.
Although we’ll eventually outgrow <code>useState</code>, it’s a perfect place to start.</p>
<p>Each todo will have three properties: an <code>id</code>, a <code>text</code> string describing it, and a <code>done</code> boolean indicating whether it’s been completed.</p>
<pre><code><span>// TodoApp.jsx</span>
<span>import</span> <span>{</span> useCallback<span>,</span> useState <span>}</span> <span>from</span> <span>"react"</span><span>;</span>

<span>let</span> id <span>=</span> <span>0</span><span>;</span>
<span>export</span> <span>default</span> <span>function</span> <span>TodoApp</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>[</span>todos<span>,</span> setTodos<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>[</span><span>]</span><span>)</span><span>;</span>

  <span>export</span> <span>function</span> <span>addTodo</span><span>(</span><span>text</span><span>)</span> <span>{</span>
    <span>setTodos</span><span>(</span><span>todos</span> <span>=&gt;</span> <span>[</span><span>...</span>todos<span>,</span> <span>{</span> <span>id</span><span>:</span> id<span>++</span><span>,</span> text<span>,</span> <span>done</span><span>:</span> <span>false</span> <span>}</span><span>]</span><span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> inputRef <span>=</span> <span>useCallback</span><span>(</span><span>ref</span> <span>=&gt;</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>ref<span>)</span> <span>return</span><span>;</span>
    ref<span>.</span><span>addEventListener</span><span>(</span><span>"add"</span><span>,</span> <span>evt</span> <span>=&gt;</span> <span>addTodo</span><span>(</span>evt<span>.</span>detail<span>)</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span>todo-layout</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>h1</span> <span>slot</span><span><span>=</span><span>"</span>title<span>"</span></span><span>&gt;</span></span><span>Todos</span><span><span><span>&lt;/</span>h1</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>todo-input</span> <span>slot</span><span><span>=</span><span>"</span>input<span>"</span></span> <span>ref</span><span><span>=</span><span>{</span>inputRef<span>}</span></span><span>&gt;</span></span><span><span><span>&lt;/</span>todo-input</span><span>&gt;</span></span><span>
    </span><span><span><span>&lt;/</span>todo-layout</span><span>&gt;</span></span>
  <span>)</span><span>;</span>
<span>}</span></code></pre>
<p>We’ll keep an array of our todos in React state.
When we add a todo, we’ll add it to the array.</p>
<p>The one awkward part of this is that <code>inputRef</code> function.
Our <code>&lt;todo-input&gt;</code> emits a custom <code>add</code> event when the form is submitted.
Usually with React, we’d attach event listeners using props like <code>onClick</code> — but that only works for events that React already knows about.
We need to listen for <code>add</code> events directly.<sup><a href="#user-content-fn-ondirective" id="user-content-fnref-ondirective" data-footnote-ref="" aria-describedby="footnote-label" data-astro-cid-bi7aps5f="">3</a></sup></p>
<p>In React Land, we use <a href="https://react.dev/learn/manipulating-the-dom-with-refs" data-astro-cid-bi7aps5f="">refs</a><a data-tooltip="" href="https://react.dev/learn/manipulating-the-dom-with-refs" data-astro-cid-bi7aps5f=""> <img src="https://react.dev/images/og-learn.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Manipulating the DOM with Refs – React</span> <span data-astro-cid-bi7aps5f="">The library for web and native user interfaces</span> <span data-astro-cid-bi7aps5f=""> <img src="https://react.dev/favicon.ico" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">react.dev/learn/manipulating-the-dom-with-refs</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> to directly interact with the DOM.
We most commonly use them with the <code>useRef</code> hook, but that’s not the only way!
The <code>ref</code> prop is actually just a function that gets called with a DOM node.
Rather than passing a ref returned from the <code>useRef</code> hook to that prop, we can instead pass a function that attaches the event listener to the DOM node directly.</p>
<p>You might be wondering why we have to wrap the function in <code>useCallback</code>.
The answer lies in the <a href="https://legacy.reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs" data-astro-cid-bi7aps5f="">legacy React docs on refs</a><a data-tooltip="" href="https://legacy.reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs" data-astro-cid-bi7aps5f=""> <img src="https://legacy.reactjs.org/logo-og.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Refs and the DOM – React</span> <span data-astro-cid-bi7aps5f="">A JavaScript library for building user interfaces</span> <span data-astro-cid-bi7aps5f=""> <img src="https://legacy.reactjs.org/favicon.ico#caveats-with-callback-refs" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">legacy.reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> (and, as far as I can tell, has not been brought over to the new docs):</p>
<blockquote>
<p>If the <code>ref</code> callback is defined as an inline function, it will get called twice during updates, first with <code>null</code> and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. You can avoid this by defining the <code>ref</code> callback as a bound method on the class, but note that it shouldn’t matter in most cases.</p>
</blockquote>
<p>In this case, it <em>does</em> matter, since we don’t want to attach the event listener again on every render.
So we wrap it in <code>useCallback</code> to ensure that we pass the same instance of the function every time.</p>
<todo-demo show-layout="true" show-input="true"></todo-demo>

<h3 id="todo-items">Todo Items</h3>
<p>So far, we can add todos, but not see them.
The next step is writing a component to show each todo item.
We’ll write that component with <a href="https://svelte.dev/" data-astro-cid-bi7aps5f="">Svelte</a><a data-tooltip="" href="https://svelte.dev/" data-astro-cid-bi7aps5f=""> <img src="https://svelte.dev/images/twitter-thumbnail.jpg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Svelte • Cybernetically enhanced web apps</span>  <span data-astro-cid-bi7aps5f=""> <img src="https://svelte.dev/favicon.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">svelte.dev</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</p>
<p>Svelte supports custom elements <a href="https://svelte.dev/docs/custom-elements-api" data-astro-cid-bi7aps5f="">out of the box</a><a data-tooltip="" href="https://svelte.dev/docs/custom-elements-api" data-astro-cid-bi7aps5f=""> <img src="https://svelte.dev/images/twitter-thumbnail.jpg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Custom elements API • Docs • Svelte</span>  <span data-astro-cid-bi7aps5f=""> <img src="https://svelte.dev/favicon.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">svelte.dev/docs/custom-elements-api</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.
Rather than continuing to show the same web component wrapper boilerplate every time, we’ll just use that feature!</p>
<p>Here’s the code:</p>
<pre><code><span>&lt;!-- TodoItem.svelte --&gt;</span>
<span><span><span>&lt;</span><span>svelte:</span>options</span> <span>customElement</span><span><span>=</span><span>"</span>todo-item<span>"</span></span> <span>/&gt;</span></span>

<span><span><span>&lt;</span>script</span><span>&gt;</span></span><span><span>
  <span>import</span> <span>{</span> createEventDispatcher <span>}</span> <span>from</span> <span>"svelte"</span><span>;</span>

  <span>export</span> <span>let</span> id<span>;</span>
  <span>export</span> <span>let</span> text<span>;</span>
  <span>export</span> <span>let</span> done<span>;</span>

  <span>const</span> dispatch <span>=</span> <span>createEventDispatcher</span><span>(</span><span>)</span><span>;</span>
  <span>$</span><span>:</span> <span>dispatch</span><span>(</span><span>"check"</span><span>,</span> <span>{</span> id<span>,</span> done <span>}</span><span>)</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>&gt;</span></span>

<span><span><span>&lt;</span>div</span><span>&gt;</span></span>
   <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>"</span>todo-{id}<span>"</span></span> <span>type</span><span><span>=</span><span>"</span>checkbox<span>"</span></span> <span><span>bind:</span>checked</span><span><span>=</span>{done}</span> <span>/&gt;</span></span>
  <span><span><span>&lt;</span>label</span> <span>for</span><span><span>=</span><span>"</span>todo-{id}<span>"</span></span><span>&gt;</span></span>{text}<span><span><span>&lt;/</span>label</span><span>&gt;</span></span>
  &lt;button aria-label="delete {text}" on:click={() =&gt; dispatch("delete", { id })}&gt;
    <span><span><span>&lt;</span>svg</span> <span>xmlns</span><span><span>=</span><span>"</span>http://www.w3.org/2000/svg<span>"</span></span> <span>width</span><span><span>=</span><span>"</span>12<span>"</span></span> <span>height</span><span><span>=</span><span>"</span>12<span>"</span></span> <span>viewBox</span><span><span>=</span><span>"</span>0 0 12 12<span>"</span></span><span>&gt;</span></span>
      <span><span><span>&lt;</span>path</span>
        <span>d</span><span><span>=</span><span>"</span>M10.707,1.293a1,1,0,0,0-1.414,0L6,4.586,2.707,1.293A1,1,0,0,0,1.293,2.707L4.586,6,1.293,9.293a1,1,0,1,0,1.414,1.414L6,7.414l3.293,3.293a1,1,0,0,0,1.414-1.414L7.414,6l3.293-3.293A1,1,0,0,0,10.707,1.293Z<span>"</span></span>
        <span>fill</span><span><span>=</span><span>"</span>currentColor<span>"</span></span>
      <span>/&gt;</span></span>
    <span><span><span>&lt;/</span>svg</span><span>&gt;</span></span>
  <span><span><span>&lt;/</span>button</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>div</span><span>&gt;</span></span></code></pre>
<p>With Svelte, the <code>&lt;script&gt;</code> tag isn’t literally rendered to the DOM — instead, that code runs when the component is instantiated.
Our Svelte component takes three props: <code>id</code>, <code>text</code> and <code>done</code>.
It also creates a custom event dispatcher, which can dispatch events on the custom element.</p>
<p>The <code>$:</code> syntax declares a reactive block.
It means that whenever the values of <code>id</code> or <code>done</code> change, it will dispatch a <code>check</code> event with the new values.
<code>id</code> probably won’t change, so what this means in practice is that it’ll dispatch a <code>check</code> event whenever we check or uncheck the todo.</p>
<p>Back in our React component, we loop over our todos and use our new <code>&lt;todo-item&gt;</code> component.
We also need a couple more utility functions to remove and check todos, and another ref callback to attach the event listeners to each <code>&lt;todo-item&gt;</code>.</p>
<p>Here’s the code:</p>
<pre><code><span>// TodoApp.jsx</span>
<span>import</span> <span>{</span> useCallback<span>,</span> useState <span>}</span> <span>from</span> <span>"react"</span><span>;</span>

<span>let</span> id <span>=</span> <span>0</span><span>;</span>
<span>export</span> <span>default</span> <span>function</span> <span>TodoApp</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>[</span>todos<span>,</span> setTodos<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>[</span><span>]</span><span>)</span><span>;</span>

  <span>export</span> <span>function</span> <span>addTodo</span><span>(</span><span>text</span><span>)</span> <span>{</span>
    <span>setTodos</span><span>(</span><span>todos</span> <span>=&gt;</span> <span>[</span><span>...</span>todos<span>,</span> <span>{</span> <span>id</span><span>:</span> id<span>++</span><span>,</span> text<span>,</span> <span>done</span><span>:</span> <span>false</span> <span>}</span><span>]</span><span>)</span><span>;</span>
  <span>}</span>

  <span>export</span> <span>function</span> <span>removeTodo</span><span>(</span><span>id</span><span>)</span> <span>{</span>
    <span>setTodos</span><span>(</span><span>todos</span> <span>=&gt;</span> todos<span>.</span><span>filter</span><span>(</span><span>todo</span> <span>=&gt;</span> todo<span>.</span>id <span>!==</span> id<span>)</span><span>)</span><span>;</span>
  <span>}</span>

  <span>export</span> <span>function</span> <span>checkTodo</span><span>(</span><span>id<span>,</span> done</span><span>)</span> <span>{</span>
    <span>setTodos</span><span>(</span><span>todos</span> <span>=&gt;</span> todos<span>.</span><span>map</span><span>(</span><span>todo</span> <span>=&gt;</span> <span>(</span>todo<span>.</span>id <span>===</span> id <span>?</span> <span>{</span> <span>...</span>todo<span>,</span> done <span>}</span> <span>:</span> todo<span>)</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> inputRef <span>=</span> <span>useCallback</span><span>(</span><span>ref</span> <span>=&gt;</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>ref<span>)</span> <span>return</span><span>;</span>
    ref<span>.</span><span>addEventListener</span><span>(</span><span>"add"</span><span>,</span> <span>evt</span> <span>=&gt;</span> <span>addTodo</span><span>(</span>evt<span>.</span>detail<span>)</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>

  <span>const</span> todoRef <span>=</span> <span>useCallback</span><span>(</span><span>ref</span> <span>=&gt;</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>ref<span>)</span> <span>return</span><span>;</span>
    ref<span>.</span><span>addEventListener</span><span>(</span><span>"check"</span><span>,</span> <span>evt</span> <span>=&gt;</span> <span>checkTodo</span><span>(</span>evt<span>.</span>detail<span>.</span>id<span>,</span> evt<span>.</span>detail<span>.</span>done<span>)</span><span>)</span><span>;</span>
    ref<span>.</span><span>addEventListener</span><span>(</span><span>"delete"</span><span>,</span> <span>evt</span> <span>=&gt;</span> <span>removeTodo</span><span>(</span>evt<span>.</span>detail<span>.</span>id<span>)</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span>todo-layout</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>h1</span> <span>slot</span><span><span>=</span><span>"</span>title<span>"</span></span><span>&gt;</span></span><span>Todos</span><span><span><span>&lt;/</span>h1</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>ul</span><span>&gt;</span></span><span>
        </span><span>{</span>todos<span>.</span><span>map</span><span>(</span><span>todo</span> <span>=&gt;</span> <span>(</span>
          <span><span><span>&lt;</span>li</span> <span>key</span><span><span>=</span><span>{</span>todo<span>.</span>id<span>}</span></span><span>&gt;</span></span><span>
            </span><span><span><span>&lt;</span>todo-item</span> <span>ref</span><span><span>=</span><span>{</span>todoRef<span>}</span></span> <span><span>{</span><span>...</span>todo<span>}</span></span> <span>/&gt;</span></span><span>
          </span><span><span><span>&lt;/</span>li</span><span>&gt;</span></span>
        <span>)</span><span>)</span><span>}</span><span>
      </span><span><span><span>&lt;/</span>ul</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>todo-input</span> <span>slot</span><span><span>=</span><span>"</span>input<span>"</span></span> <span>ref</span><span><span>=</span><span>{</span>inputRef<span>}</span></span><span>&gt;</span></span><span><span><span>&lt;/</span>todo-input</span><span>&gt;</span></span><span>
    </span><span><span><span>&lt;/</span>todo-layout</span><span>&gt;</span></span>
  <span>)</span><span>;</span>
<span>}</span></code></pre>
<p>Now the list actually shows all our todos! And when we add a new todo, it shows up in the list!</p>
<todo-demo show-layout="true" show-input="true" show-todos="true"></todo-demo>

<h3 id="filtering-todos">Filtering Todos</h3>
<p>The last feature to add is the ability to filter todos.</p>
<p>Before we can add that, though, we need to do a bit of refactoring.</p>
<p>I want to show another way that web components can communicate with each other: using a shared store.
Many of the frameworks we’re using have their own store implementations, but we need a store that we can use with <em>all</em> of them.
For that reason, we’ll use a library called <a href="https://github.com/nanostores/nanostores" data-astro-cid-bi7aps5f="">Nano Stores</a><a data-tooltip="" href="https://github.com/nanostores/nanostores" data-astro-cid-bi7aps5f=""> <img src="https://opengraph.githubassets.com/ca56eede252d8d8e13d7d56f8ef7ec53f6103ccdca592e4cbcb2db28de18300a/nanostores/nanostores" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">GitHub - nanostores/nanostores: A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svelte with many atomic tree-shakable stores</span> <span data-astro-cid-bi7aps5f="">A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svelte with many atomic tree-shakable stores - GitHub - nanostores/nanostores: A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svel...</span> <span data-astro-cid-bi7aps5f=""> <img src="https://github.githubassets.com/favicons/favicon.svg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">github.com/nanostores/nanostores</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</p>
<p>First, we’ll make a new file called <code>store.js</code> with our todo state rewritten using Nano Stores:</p>
<pre><code><span>// store.js</span>
<span>import</span> <span>{</span> atom<span>,</span> computed <span>}</span> <span>from</span> <span>"nanostores"</span><span>;</span>

<span>let</span> id <span>=</span> <span>0</span><span>;</span>
<span>export</span> <span>const</span> $todos <span>=</span> <span>atom</span><span>(</span><span>[</span><span>]</span><span>)</span><span>;</span>
<span>export</span> <span>const</span> $done <span>=</span> <span>computed</span><span>(</span>$todos<span>,</span> <span>todos</span> <span>=&gt;</span> todos<span>.</span><span>filter</span><span>(</span><span>todo</span> <span>=&gt;</span> todo<span>.</span>done<span>)</span><span>)</span><span>;</span>
<span>export</span> <span>const</span> $left <span>=</span> <span>computed</span><span>(</span>$todos<span>,</span> <span>todos</span> <span>=&gt;</span> todos<span>.</span><span>filter</span><span>(</span><span>todo</span> <span>=&gt;</span> <span>!</span>todo<span>.</span>done<span>)</span><span>)</span><span>;</span>

<span>export</span> <span>function</span> <span>addTodo</span><span>(</span><span>text</span><span>)</span> <span>{</span>
  $todos<span>.</span><span>set</span><span>(</span><span>[</span><span>...</span>$todos<span>.</span><span>get</span><span>(</span><span>)</span><span>,</span> <span>{</span> <span>id</span><span>:</span> id<span>++</span><span>,</span> text <span>}</span><span>]</span><span>)</span><span>;</span>
<span>}</span>

<span>export</span> <span>function</span> <span>checkTodo</span><span>(</span><span>id<span>,</span> done</span><span>)</span> <span>{</span>
  $todos<span>.</span><span>set</span><span>(</span>$todos<span>.</span><span>get</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span><span>todo</span> <span>=&gt;</span> <span>(</span>todo<span>.</span>id <span>===</span> id <span>?</span> <span>{</span> <span>...</span>todo<span>,</span> done <span>}</span> <span>:</span> todo<span>)</span><span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>export</span> <span>function</span> <span>removeTodo</span><span>(</span><span>id</span><span>)</span> <span>{</span>
  $todos<span>.</span><span>set</span><span>(</span>$todos<span>.</span><span>get</span><span>(</span><span>)</span><span>.</span><span>filter</span><span>(</span><span>todo</span> <span>=&gt;</span> todo<span>.</span>id <span>!==</span> id<span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>export</span> <span>const</span> $filter <span>=</span> <span>atom</span><span>(</span><span>"all"</span><span>)</span><span>;</span></code></pre>
<p>The core logic is the same; most of the changes are just porting from the <code>useState</code> API to the Nano Stores API.
We did add two new <a href="https://github.com/nanostores/nanostores#computed-stores" data-astro-cid-bi7aps5f="">computed stores</a><a data-tooltip="" href="https://github.com/nanostores/nanostores#computed-stores" data-astro-cid-bi7aps5f=""> <img src="https://opengraph.githubassets.com/a1d5ab752b126fb874def999f648ce36cc67e8e625235f2c731a0eb940fc256b/nanostores/nanostores" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">GitHub - nanostores/nanostores: A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svelte with many atomic tree-shakable stores</span> <span data-astro-cid-bi7aps5f="">A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svelte with many atomic tree-shakable stores - GitHub - nanostores/nanostores: A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svel...</span> <span data-astro-cid-bi7aps5f=""> <img src="https://github.githubassets.com/favicons/favicon.svg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">github.com/nanostores/nanostores#computed-stores</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>, <code>$done</code> and <code>$left</code>, which are “derived” from the <code>$todos</code> store and return completed and incomplete todos, respectively.
We also added a new store, <code>$filter</code>, which will hold the current filter value.</p>
<p>We’ll write our filter component with <a href="https://vuejs.org/" data-astro-cid-bi7aps5f="">Vue</a><a data-tooltip="" href="https://vuejs.org/" data-astro-cid-bi7aps5f=""> <img src="https://vuejs.org/images/logo.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Vue.js - The Progressive JavaScript Framework | Vue.js</span> <span data-astro-cid-bi7aps5f="">Vue.js - The Progressive JavaScript Framework</span> <span data-astro-cid-bi7aps5f=""> <img src="https://vuejs.org/logo.svg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">vuejs.org</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</p>
<pre><code><span>&lt;!-- TodoFilters.ce.vue --&gt;</span>
<span><span><span>&lt;</span>script</span> <span>setup</span><span>&gt;</span></span><span><span>
  <span>import</span> <span>{</span> useStore<span>,</span> useVModel <span>}</span> <span>from</span> <span>"@nanostores/vue"</span><span>;</span>

  <span>import</span> <span>{</span> $todos<span>,</span> $done<span>,</span> $left<span>,</span> $filter <span>}</span> <span>from</span> <span>"./store.js"</span><span>;</span>

  <span>const</span> filter <span>=</span> <span>useVModel</span><span>(</span>$filter<span>)</span><span>;</span>
  <span>const</span> todos <span>=</span> <span>useStore</span><span>(</span>$todos<span>)</span><span>;</span>
  <span>const</span> done <span>=</span> <span>useStore</span><span>(</span>$done<span>)</span><span>;</span>
  <span>const</span> left <span>=</span> <span>useStore</span><span>(</span>$left<span>)</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>&gt;</span></span>

<span><span><span>&lt;</span>template</span><span>&gt;</span></span>
  <span><span><span>&lt;</span>div</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>label</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>"</span>radio<span>"</span></span> <span>name</span><span><span>=</span><span>"</span>filter<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>all<span>"</span></span> <span>v-model</span><span><span>=</span><span>"</span>filter<span>"</span></span> <span>/&gt;</span></span>
      <span><span><span>&lt;</span>span</span><span>&gt;</span></span> All ({{ todos.length }})<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>label</span><span>&gt;</span></span>
    <span><span><span>&lt;</span>label</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>"</span>radio<span>"</span></span> <span>name</span><span><span>=</span><span>"</span>filter<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>todo<span>"</span></span> <span>v-model</span><span><span>=</span><span>"</span>filter<span>"</span></span> <span>/&gt;</span></span>
      <span><span><span>&lt;</span>span</span><span>&gt;</span></span> Todo ({{ left.length }})<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>label</span><span>&gt;</span></span>

    <span><span><span>&lt;</span>label</span><span>&gt;</span></span>
      <span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>"</span>radio<span>"</span></span> <span>name</span><span><span>=</span><span>"</span>filter<span>"</span></span> <span>value</span><span><span>=</span><span>"</span>done<span>"</span></span> <span>v-model</span><span><span>=</span><span>"</span>filter<span>"</span></span> <span>/&gt;</span></span>
      <span><span><span>&lt;</span>span</span><span>&gt;</span></span> Done ({{ done.length }})<span><span><span>&lt;/</span>span</span><span>&gt;</span></span>
    <span><span><span>&lt;/</span>label</span><span>&gt;</span></span>
  <span><span><span>&lt;/</span>div</span><span>&gt;</span></span>
<span><span><span>&lt;/</span>template</span><span>&gt;</span></span></code></pre>
<p>The syntax is pretty similar to Svelte’s: the <code>&lt;script&gt;</code> tag at the top is run when the component is instantiated, and the <code>&lt;template&gt;</code> tag contains the component’s markup.</p>
<p>Vue doesn’t make compiling a component to a custom element <em>quite</em> as simple as Svelte does. We need to create another file, import the Vue component and call <a href="https://vuejs.org/guide/extras/web-components.html" data-astro-cid-bi7aps5f=""><code>defineCustomElement</code></a><a data-tooltip="" href="https://vuejs.org/guide/extras/web-components.html" data-astro-cid-bi7aps5f=""> <img src="https://vuejs.org/images/logo.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Vue and Web Components | Vue.js</span> <span data-astro-cid-bi7aps5f="">Vue.js - The Progressive JavaScript Framework</span> <span data-astro-cid-bi7aps5f=""> <img src="https://vuejs.org/logo.svg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">vuejs.org/guide/extras/web-components.html</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> on it:</p>
<pre><code><span>// TodoFilters.js</span>
<span>import</span> <span>{</span> defineCustomElement <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>

<span>import</span> TodoFilters <span>from</span> <span>"./TodoFilters.ce.vue"</span><span>;</span>

customElements<span>.</span><span>define</span><span>(</span><span>"todo-filters"</span><span>,</span> <span>defineCustomElement</span><span>(</span>TodoFilters<span>)</span><span>)</span><span>;</span></code></pre>
<p>Back in React Land, we’ll refactor our component to use Nano Stores rather than <code>useState</code>, and bring in the <code>&lt;todo-filters&gt;</code> component:</p>
<pre><code><span>// TodoApp.jsx</span>
<span>import</span> <span>{</span> useStore <span>}</span> <span>from</span> <span>"@nanostores/react"</span><span>;</span>
<span>import</span> <span>{</span> useCallback <span>}</span> <span>from</span> <span>"react"</span><span>;</span>

<span>import</span> <span>{</span> $todos<span>,</span> $done<span>,</span> $left<span>,</span> $filter<span>,</span> addTodo<span>,</span> removeTodo<span>,</span> checkTodo <span>}</span> <span>from</span> <span>"./store.js"</span><span>;</span>

<span>export</span> <span>default</span> <span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> filter <span>=</span> <span>useStore</span><span>(</span>$filter<span>)</span><span>;</span>
  <span>const</span> todos <span>=</span> <span>useStore</span><span>(</span>$todos<span>)</span><span>;</span>
  <span>const</span> done <span>=</span> <span>useStore</span><span>(</span>$done<span>)</span><span>;</span>
  <span>const</span> left <span>=</span> <span>useStore</span><span>(</span>$left<span>)</span><span>;</span>
  <span>const</span> visible <span>=</span> filter <span>===</span> <span>"todo"</span> <span>?</span> left <span>:</span> filter <span>===</span> <span>"done"</span> <span>?</span> done <span>:</span> todos<span>;</span>

  <span>const</span> todoRef <span>=</span> <span>useCallback</span><span>(</span><span>ref</span> <span>=&gt;</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>ref<span>)</span> <span>return</span><span>;</span>
    ref<span>.</span><span>addEventListener</span><span>(</span><span>"check"</span><span>,</span> <span>evt</span> <span>=&gt;</span> <span>checkTodo</span><span>(</span>evt<span>.</span>detail<span>.</span>id<span>,</span> evt<span>.</span>detail<span>.</span>done<span>)</span><span>)</span><span>;</span>
    ref<span>.</span><span>addEventListener</span><span>(</span><span>"delete"</span><span>,</span> <span>evt</span> <span>=&gt;</span> <span>removeTodo</span><span>(</span>evt<span>.</span>detail<span>.</span>id<span>)</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>

  <span>const</span> inputRef <span>=</span> <span>useCallback</span><span>(</span><span>ref</span> <span>=&gt;</span> <span>{</span>
    <span>if</span> <span>(</span>ref<span>)</span> ref<span>.</span><span>addEventListener</span><span>(</span><span>"add"</span><span>,</span> <span>evt</span> <span>=&gt;</span> <span>addTodo</span><span>(</span>evt<span>.</span>detail<span>)</span><span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span><span>;</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span>todo-layout</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>h1</span> <span>slot</span><span><span>=</span><span>"</span>title<span>"</span></span><span>&gt;</span></span><span>Todos</span><span><span><span>&lt;/</span>h1</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>todo-filters</span> <span>slot</span><span><span>=</span><span>"</span>filters<span>"</span></span> <span>/&gt;</span></span><span>

      </span><span><span><span>&lt;</span>div</span> <span>slot</span><span><span>=</span><span>"</span>todos<span>"</span></span><span>&gt;</span></span><span>
        </span><span>{</span>visible<span>.</span><span>map</span><span>(</span><span>todo</span> <span>=&gt;</span> <span>(</span>
          <span><span><span>&lt;</span>todo-item</span> <span>key</span><span><span>=</span><span>{</span>todo<span>.</span>id<span>}</span></span> <span>ref</span><span><span>=</span><span>{</span>todoRef<span>}</span></span> <span><span>{</span><span>...</span>todo<span>}</span></span> <span>/&gt;</span></span>
        <span>)</span><span>)</span><span>}</span><span>
      </span><span><span><span>&lt;/</span>div</span><span>&gt;</span></span><span>
      </span><span><span><span>&lt;</span>todo-input</span> <span>ref</span><span><span>=</span><span>{</span>inputRef<span>}</span></span> <span>slot</span><span><span>=</span><span>"</span>input<span>"</span></span> <span>/&gt;</span></span><span>
    </span><span><span><span>&lt;/</span>todo-layout</span><span>&gt;</span></span>
  <span>)</span><span>;</span>
<span>}</span></code></pre>
<p>We did it!
We now have a fully functional todo app, written with four different frameworks — React, Solid, Svelte and Vue — <em>plus</em> a component written in vanilla JavaScript.</p>
<todo-demo show-layout="true" show-input="true" show-todos="true" show-filters="true"></todo-demo>

<h3 id="moving-forward">Moving Forward</h3>
<p>The point of this article is not to convince you that this is a good way to write web apps.
It’s to show that there are ways to build a web app other than writing the entire thing with a single JavaScript framework — and furthermore, that web components actually make it <em>significantly easier</em> to do that.</p>
<p>You can progressively enhance static HTML.
You can build rich interactive JavaScript “islands” that naturally communicate with hypermedia libraries like <a href="https://htmx.org/" data-astro-cid-bi7aps5f="">HTMX</a><a data-tooltip="" href="https://htmx.org/" data-astro-cid-bi7aps5f="">  <span data-astro-cid-bi7aps5f="">&lt;/&gt; htmx - high power tools for html</span>  <span data-astro-cid-bi7aps5f=""> <img src="https://htmx.org/favicon.ico" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">htmx.org</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.
You can even wrap a web component around a framework component, and use it with <em>any</em> other framework.</p>
<p>Web components drastically loosen the coupling of JavaScript frameworks by providing a common interface that <em>all</em> frameworks can use.
From a consumer’s point of view, web components are just HTML tags — it doesn’t matter what goes on “under the hood”.</p>
<p>If you want to play around with this yourself, I’ve made a <a href="https://codesandbox.io/p/devbox/polyglot-todos-wm4lwn" data-astro-cid-bi7aps5f="">CodeSandbox with our example todo app</a><a data-tooltip="" href="https://codesandbox.io/p/devbox/polyglot-todos-wm4lwn" data-astro-cid-bi7aps5f="">    <span data-astro-cid-bi7aps5f=""> <img src="https://codesandbox.io/favicon.ico" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">codesandbox.io/p/devbox/polyglot-todos-wm4lwn</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</p>
<h3 id="reading-list">Reading List</h3>
<p>If you’re interested, here are some good articles that dive even deeper into the topic:</p>
<ul>
<li>Chris Ferdinandi wrote about wrapping his own UI library <a href="https://reefjs.com/" data-astro-cid-bi7aps5f="">Reef</a><a data-tooltip="" href="https://reefjs.com/" data-astro-cid-bi7aps5f=""> <img src="https://gomakethings.com/img/chris-ferdinandi-high-res.jpg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Reef</span> <span data-astro-cid-bi7aps5f="">A tiny utility library for building reactive state-based UI. Reef is a simpler alternative to React, Vue, and other UI libraries.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://reefjs.com/img/favicon.ico" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">reefjs.com</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> with a web component in <a href="https://gomakethings.com/reactive-web-components-and-dom-diffing/" data-astro-cid-bi7aps5f="">Reactive Web Components and DOM Diffing</a><a data-tooltip="" href="https://gomakethings.com/reactive-web-components-and-dom-diffing/" data-astro-cid-bi7aps5f=""> <img src="https://gomakethings.com/img/og.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Reactive Web Components and DOM diffing</span> <span data-astro-cid-bi7aps5f="">This week, I had a conversation on Mastodon with Kyle Leaders and Jake Lazaroff about reactivity and DOM diffing in Web Components…
 I have to say I’ve been actually enjoying working with #webcomponents in #vanillajs lately. I haven’t attempted anything too complicated, but I love the idea of reusable components. Next up, I need to figure out how to best do reactive updates.
 This is one area where the native web platform falls a bit short.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://gomakethings.com/img/favicon.ico" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">gomakethings.com/reactive-web-components-and-dom-diffing/</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</li>
<li>Andrico Karoulla wrote a great overview of how to write framework-agnostic components aptly titled <a href="https://component-odyssey.com/articles/01-writing-components-that-work-in-any-framework" data-astro-cid-bi7aps5f="">Writing Components That Work in Any Framework</a><a data-tooltip="" href="https://component-odyssey.com/articles/01-writing-components-that-work-in-any-framework" data-astro-cid-bi7aps5f=""> <img src="https://component-odyssey.com/images/articles/01-writing-components-that-work-in-any-framework/open-graph.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Writing Components That Work In Any Frontend Framework</span> <span data-astro-cid-bi7aps5f="">Web components let developers write interoperable components, but at the cost of lots of boilerplate. Learn how you can write components that work in Svelte, Vue, React, and other frameworks, with minimal boilerplate.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://component-odyssey.com/favicon-32x32.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">component-odyssey.com/articles/01-writing-components-that-work-in-any-framework</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</li>
<li>Thomas Wilburn shows how to use web components to build “languages” within HTML in <a href="https://www.milezero.org/index.php/tech/web/components/chiaroscuro.html" data-astro-cid-bi7aps5f="">Chiaroscuro, or Expressive Trees in Web Components</a><a data-tooltip="" href="https://www.milezero.org/index.php/tech/web/components/chiaroscuro.html" data-astro-cid-bi7aps5f=""> <img src="https://milezero.org/blog/mugshot.jpg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Chiaroscuro, or Expressive Trees in Web Components</span> <span data-astro-cid-bi7aps5f="">This space intentionally left blank.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://www.milezero.org/blog/milezeromono.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">www.milezero.org/index.php/tech/web/components/chiaroscuro.html</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</li>
<li>Maxi Ferreira wrote a wonderful article called <a href="https://frontendatscale.com/blog/islands-architecture-state/" data-astro-cid-bi7aps5f="">Sharing State with Islands Architecture</a><a data-tooltip="" href="https://frontendatscale.com/blog/islands-architecture-state/" data-astro-cid-bi7aps5f=""> <img src="https://frontendatscale.com/og-image-islands-architecture-state.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Sharing State with Islands Architecture | Frontend at Scale</span> <span data-astro-cid-bi7aps5f="">Strategies for communicating between interactive components using Islands Architecture, with examples using Astro and React.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://frontendatscale.com/favicon.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">frontendatscale.com/blog/islands-architecture-state/</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> that goes into detail more about custom events and stores.</li>
<li>The official Astro documentation has a page on <a href="https://docs.astro.build/en/core-concepts/sharing-state/" data-astro-cid-bi7aps5f="">sharing state between islands</a><a data-tooltip="" href="https://docs.astro.build/en/core-concepts/sharing-state/" data-astro-cid-bi7aps5f=""> <img src="https://docs.astro.build/open-graph/en/core-concepts/sharing-state.png" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Share State Between Islands</span> <span data-astro-cid-bi7aps5f="">Learn how to share state across framework components with Nano Stores.</span> <span data-astro-cid-bi7aps5f=""> <img src="https://docs.astro.build/favicon.svg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">docs.astro.build/en/core-concepts/sharing-state/</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> using <a href="https://github.com/nanostores/nanostores" data-astro-cid-bi7aps5f="">Nano Stores</a><a data-tooltip="" href="https://github.com/nanostores/nanostores" data-astro-cid-bi7aps5f=""> <img src="https://opengraph.githubassets.com/ca56eede252d8d8e13d7d56f8ef7ec53f6103ccdca592e4cbcb2db28de18300a/nanostores/nanostores" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">GitHub - nanostores/nanostores: A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svelte with many atomic tree-shakable stores</span> <span data-astro-cid-bi7aps5f="">A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svelte with many atomic tree-shakable stores - GitHub - nanostores/nanostores: A tiny (298 bytes) state manager for React/RN/Preact/Vue/Svel...</span> <span data-astro-cid-bi7aps5f=""> <img src="https://github.githubassets.com/favicons/favicon.svg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">github.com/nanostores/nanostores</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>.</li>
<li>Although it doesn’t explicitly mention web components, the HTMX essay on <a href="https://htmx.org/essays/hypermedia-friendly-scripting/" data-astro-cid-bi7aps5f="">hypermedia-friendly scripting</a><a data-tooltip="" href="https://htmx.org/essays/hypermedia-friendly-scripting/" data-astro-cid-bi7aps5f="">  <span data-astro-cid-bi7aps5f="">&lt;/&gt; htmx ~ Hypermedia-Friendly Scripting</span>  <span data-astro-cid-bi7aps5f=""> <img src="https://htmx.org/favicon.ico" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">htmx.org/essays/hypermedia-friendly-scripting/</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a> brings up events and islands as ways for client-side scripting to interact with hypermedia-driven web applications.</li>
</ul>
<section data-footnotes="">
<ol>
<li id="user-content-fn-rimshot">
<p>Get it? Foreshadows? Fore<em>shadows</em>? Like shadow DOM? <a href="#user-content-fnref-rimshot" data-footnote-backref="" aria-label="Back to content" data-astro-cid-bi7aps5f="">↩</a></p>
</li>
<li id="user-content-fn-preact">
<p>Technically, we’re using Preact in compatibility mode, because I couldn’t figure out how to get Vite’s React preset to work. It turns out that build tooling gets tricky when you try to use four different frameworks in one codebase! <a href="#user-content-fnref-preact" data-footnote-backref="" aria-label="Back to content" data-astro-cid-bi7aps5f="">↩</a></p>
</li>
<li id="user-content-fn-ondirective">
<p>This process is easier with other frameworks. With Svelte, for example, we can use the <code>on:</code> directive to <a href="https://svelte.dev/docs/component-directives#on-eventname" data-astro-cid-bi7aps5f="">listen to arbitrary events emitted from any HTML element</a><a data-tooltip="" href="https://svelte.dev/docs/component-directives#on-eventname" data-astro-cid-bi7aps5f=""> <img src="https://svelte.dev/images/twitter-thumbnail.jpg" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">Component directives • Docs • Svelte</span>  <span data-astro-cid-bi7aps5f=""> <img src="https://svelte.dev/favicon.png#on-eventname" alt="" onerror="this.remove()" data-astro-cid-bi7aps5f=""> <span data-astro-cid-bi7aps5f="">svelte.dev/docs/component-directives#on-eventname</span> <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"> <use href="/icons.svg#share"></use> </svg> </span> </a>, including web components. <a href="#user-content-fnref-ondirective" data-footnote-backref="" aria-label="Back to content" data-astro-cid-bi7aps5f="">↩</a></p>
</li>
</ol>
</section> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta Designed Products to Capitalize on Teen Vulnerabilities, States Allege (140 pts)]]></title>
            <link>https://www.wsj.com/business/media/meta-designed-products-to-capitalize-on-teen-vulnerabilities-states-allege-6791dad5</link>
            <guid>38434450</guid>
            <pubDate>Mon, 27 Nov 2023 16:39:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/business/media/meta-designed-products-to-capitalize-on-teen-vulnerabilities-states-allege-6791dad5">https://www.wsj.com/business/media/meta-designed-products-to-capitalize-on-teen-vulnerabilities-states-allege-6791dad5</a>, See on <a href="https://news.ycombinator.com/item?id=38434450">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><section><div data-type="image" data-inset_type="" data-sub_type="" data-layout="inline"><figure><picture><img alt="" sizes="(max-width: 639px) 100vw, (max-width: 979px) 620px, (max-width: 1299px) 540px, 700px" srcset="https://images.wsj.net/im-891562?width=540&amp;size=1.5023474178403755 540w, https://images.wsj.net/im-891562?width=620&amp;size=1.5023474178403755 620w, https://images.wsj.net/im-891562?width=639&amp;size=1.5023474178403755 639w, https://images.wsj.net/im-891562?width=700&amp;size=1.5023474178403755 700w, https://images.wsj.net/im-891562?width=700&amp;size=1.5023474178403755&amp;pixel_ratio=1.5 1050w, https://images.wsj.net/im-891562?width=700&amp;size=1.5023474178403755&amp;pixel_ratio=2 1400w, https://images.wsj.net/im-891562?width=700&amp;size=1.5023474178403755&amp;pixel_ratio=3 2100w" width="700" height="466" src="https://images.wsj.net/im-891562?width=700&amp;height=466"></picture></figure><figcaption><span>Meta says it didn’t design its products to be addictive for teens.&nbsp;</span> <span><span>Photo: </span>David Paul Morris/Bloomberg News</span></figcaption></div><p data-type="paragraph">Meta<!-- --> Platforms sought to design its social-media products in ways to take advantage of known weaknesses of young users’ brains, according to newly unredacted legal filings citing internal company documents.</p><div data-type="paragraph"><p>An internal 2020 Meta presentation shows that the company<strong data-type="emphasis">&nbsp;</strong>sought to engineer its products to capitalize on the parts of youth psychology that render teens “predisposed to impulse, peer pressure, and potentially harmful risky behavior,” the filings show.</p><p>References to the documents were initially redacted in the suit, which <a data-type="link" href="https://www.wsj.com/tech/states-sue-meta-alleging-harm-to-young-people-on-instagram-facebook-f9ff4641" rel="">was filed in late October</a> by members of a coalition of 41 states and the District of Columbia, alleging that Meta has intentionally built Facebook and Instagram with addictive features that harm young users. Meta approved the filing of an unredacted version on Wednesday.</p></div></section><p>Copyright ©<!-- -->2023<!-- --> Dow Jones &amp; Company, Inc. All Rights Reserved. 87990cbe856818d5eddac44c7b1cdeb8</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nutrient found in beef and dairy improves immune response to cancer (269 pts)]]></title>
            <link>https://biologicalsciences.uchicago.edu/news/tva-nutrient-cancer-immunity</link>
            <guid>38433563</guid>
            <pubDate>Mon, 27 Nov 2023 15:41:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://biologicalsciences.uchicago.edu/news/tva-nutrient-cancer-immunity">https://biologicalsciences.uchicago.edu/news/tva-nutrient-cancer-immunity</a>, See on <a href="https://news.ycombinator.com/item?id=38433563">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>Trans-vaccenic acid (TVA), a long-chain fatty acid found in meat and dairy products from grazing animals such as cows and sheep, improves the ability of CD8+ T cells to infiltrate tumors and kill cancer cells, according to a new study by researchers from the University of Chicago.</p>
<p>The research, <a href="https://www.nature.com/articles/s41586-023-06749-3">published this week</a> in <em>Nature</em>, also shows that patients with higher levels of TVA circulating in the blood responded better to immunotherapy, suggesting that it could have potential as a nutritional supplement to complement clinical treatments for cancer.</p>
<p>“There are many studies trying to decipher the link between diet and human health, and it’s very difficult to understand the underlying mechanisms because of the wide variety of foods people eat. But if we focus on just the nutrients and metabolites derived from food, we begin to see how they influence physiology and pathology,” said <a data-entity-substitution="external" data-entity-type="external" data-entity-uuid="7550de90-e8cb-4d06-b99a-753c4e0a471e" href="https://biologicalsciences.uchicago.edu/faculty/jing-chen-phd">Jing Chen, PhD</a>, the Janet Davison Rowley Distinguished Service Professor of Medicine at UChicago and one of the senior authors of the new study. “By focusing on nutrients that can activate T cell responses, we found one that actually enhances anti-tumor immunity by activating an important immune pathway.”</p>
<h2>Finding nutrients that activate immune cells</h2>
<p>Chen’s lab focuses on understanding how metabolites, nutrients and other molecules circulating in the blood influence the development of cancer and response to cancer treatments. For the new study, two postdoctoral fellows, Hao Fan, PhD and Siyuan Xia, PhD, both co-first authors, assembled a “blood nutrient” compound library consisting of 255 bioactive molecules derived from nutrients. They screened the compounds in this new library for their ability to influence anti-tumor immunity by activating CD8+ T cells, a group of immune cells critical for killing cancerous or virally infected cells.</p>
<p>After the scientists evaluated the top six candidates in both human and mouse cells, they saw that TVA performed the best. TVA is the most abundant trans fatty acid present in human milk, but the body cannot produce it on its own. Only about 20% of TVA is broken down into other byproducts, leaving 80% circulating in the blood. “That means there must be something else it does, so we started working on it more,” Chen said.</p>

          </div><div>
            <p>The researchers then conducted a series of experiments with cells and mouse models of diverse tumor types. Feeding mice a diet enriched with TVA significantly reduced the tumor growth potential of melanoma and colon cancer cells compared to mice fed a control diet. The TVA diet also enhanced the ability of CD8+ T cells to infiltrate tumors.</p>
<p>The team also performed a series of molecular and genetic analyses to understand how TVA was affecting the T cells. These included a new technique for monitoring transcription of single-stranded DNA called kethoxal-assisted single-stranded DNA sequencing, or KAS-seq, developed by <a href="https://chemistry.uchicago.edu/faculty/chuan-he">Chuan He, PhD</a>, the John T. Wilson Distinguished Service Professor of Chemistry at UChicago and another senior author of the study. These additional assays, done by both the Chen and He labs, showed that TVA inactivates a receptor on the cell surface called GPR43 which is usually activated by short-chain fatty acids often produced by gut microbiota. TVA overpowers these short-chain fatty acids and activates a cellular signaling process known as the CREB pathway, which is involved in a variety of functions including cellular growth, survival, and differentiation. The team also showed that mouse models where the GPR43 receptor was exclusively removed from CD8+ T cells also lacked their improved tumor fighting ability.</p>
<p>Finally, the team also worked with <a data-entity-substitution="external" data-entity-type="external" data-entity-uuid="86f1347b-0a11-44b3-b34b-1a4d672dca58" href="https://biologicalsciences.uchicago.edu/faculty/justin-p-kline-md">Justin Kline, MD</a>, Professor of Medicine at UChicago, to analyze blood samples taken from patients undergoing CAR-T cell immunotherapy treatment for lymphoma. They saw that patients with higher levels of TVA tended to respond to treatment better than those with lower levels. They also tested cell lines from leukemia by working with <a data-entity-substitution="external" data-entity-type="external" data-entity-uuid="b4424063-8f76-4434-8c41-eab9f3721e8e" href="https://biologicalsciences.uchicago.edu/faculty/wendy-stock-md">Wendy Stock, MD</a>, the Anjuli Seth Nayak Professor of Medicine, and saw that TVA enhanced the ability of an immunotherapy drug to kill leukemia cells.</p>
<h2>Focus on the nutrients, not the food</h2>
<p>The study suggests that TVA could be used as a dietary supplement to help various T cell-based cancer treatments, although Chen points out that it is important to determine the optimized amount of the nutrient itself, not the food source. There is a growing body of evidence about the detrimental health effects of consuming too much red meat and dairy, so this study shouldn’t be taken as an excuse to eat more cheeseburgers and pizza; rather, it indicates that nutrient supplements such as TVA could be used to promote T cell activity. Chen thinks there may be other nutrients that can do the same.</p>
<p>“There is early data showing that other fatty acids from plants signal through a similar receptor, so we believe there is a high possibility that nutrients from plants can do the same thing by activating the CREB pathway as well,” he said.</p>
<p>The new research also highlights the promise of this “metabolomic” approach to understanding how the building blocks of diet affect our health. Chen said his team hopes to build a comprehensive library of nutrients circulating in the blood to understand their impact on immunity and other biological processes like aging.</p>
<p>“After millions of years of evolution, there are only a couple hundred metabolites derived from food that end up circulating in the blood, so that means they could have some importance in our biology,” Chen said. “To see that a single nutrient like TVA has a very targeted mechanism on a targeted immune cell type, with a very profound physiological response at the whole organism level—I find that really amazing and intriguing.”</p>
<p>The study, “<a href="https://www.nature.com/articles/s41586-023-06749-3">Trans-vaccenic acid reprograms CD8+ T cells and anti-tumor immunity</a>,” was supported by the National Institutes of Health (grants CA140515, CA174786, CA276568, 1375 HG006827, K99ES034084), a UChicago Biological Sciences Division Pilot Project Award, the Ludwig Center at UChicago, the Sigal Fellowship in Immuno-oncology, the Margaret E. Early Medical Research Trust, the AASLD Foundation a Harborview Foundation Gift Fund, and the Howard Hughes Medical Institute.</p>

          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AirJet makes a MacBook Air perform like a MacBook Pro (155 pts)]]></title>
            <link>https://www.macworld.com/article/2150862/airjet-makes-a-macbook-air-perform-like-a-macbook-pro.html</link>
            <guid>38433452</guid>
            <pubDate>Mon, 27 Nov 2023 15:35:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.macworld.com/article/2150862/airjet-makes-a-macbook-air-perform-like-a-macbook-pro.html">https://www.macworld.com/article/2150862/airjet-makes-a-macbook-air-perform-like-a-macbook-pro.html</a>, See on <a href="https://news.ycombinator.com/item?id=38433452">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-2150862">
	<!-- .entry-header -->

	<!-- <hr class="wp-block-separator" /> -->

	<div>
				
			<div>
				<p><img width="1024" height="683" src="https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?quality=50&amp;strip=all&amp;w=1024" alt="MacBook Air AirJet" decoding="async" data-hero="" srcset="https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?quality=50&amp;strip=all 2400w, https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?resize=300%2C200&amp;quality=50&amp;strip=all 300w, https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?resize=768%2C512&amp;quality=50&amp;strip=all 768w, https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?resize=1200%2C800&amp;quality=50&amp;strip=all 1200w, https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?resize=1536%2C1024&amp;quality=50&amp;strip=all 1536w, https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?resize=2048%2C1365&amp;quality=50&amp;strip=all 2048w, https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?resize=1240%2C826&amp;quality=50&amp;strip=all 1240w, https://www.macworld.com/wp-content/uploads/2023/11/airjet-macbook-air-internal-2.jpg?resize=150%2C100&amp;quality=50&amp;strip=all 150w" sizes="(max-width: 1024px) 100vw, 1024px"></p><p><span>Image: Foundry</span>				</p>
							</div><!-- .post-thumbnail -->
			
		
				<div>
					
					
<div id="link_wrapped_content">




<p>Most Macs use fans to help the System on a Chip maintain an optimal operating temperature. These fans are bulky and noisy, but <a href="https://go.redirectingat.com/?id=111346X1569486&amp;url=https://www.froresystems.com/&amp;xcust=1-1-2150862-1-0-0&amp;sref=https://www.macworld.com/article/2150862/airjet-makes-a-macbook-air-perform-like-a-macbook-pro.html" rel="nofollow">Frore Systems</a> has developed a new cooling system called <a href="https://go.redirectingat.com/?id=111346X1569486&amp;url=https://www.froresystems.com/#Products-block&amp;xcust=1-1-2150862-1-0-0&amp;sref=https://www.macworld.com/article/2150862/airjet-makes-a-macbook-air-perform-like-a-macbook-pro.html" rel="nofollow">AirJet</a> that’s super thin–thin enough to fit in a current MacBook Air and boost its performance while under heavy load.</p>



<p>Since the MacBook Air doesn’t have a fan for the SoC, its performance will throttle down during processor-intensive work to maintain a proper operating temperature. The M2 13-inch MacBook Pro, on the other hand, has a fan that expels excessive heat so the chip can keep chugging along.</p>



<p>The AirJet is what Frore calls a “solid-state active cooling chip” that measures 27.5 by 41.5 by 2.8 mm, a lot smaller and thinner than a typical computer fan. It’s so thin that Frore was able to take an M2 15-inch MacBook Air and fit a set of AirJet chips inside the laptop. AirJet can keep the MacBook Air temperature at a proper level so the chip doesn’t have to throttle down. Using the <a href="https://go.redirectingat.com/?id=111346X1569486&amp;url=https://www.maxon.net/en/downloads/cinebench-r23-downloads...&amp;xcust=1-1-2150862-1-0-0&amp;sref=https://www.macworld.com/article/2150862/airjet-makes-a-macbook-air-perform-like-a-macbook-pro.html" rel="nofollow">Cinebench R23</a> benchmark, an off-the-shelf M2 MacBook Air was 7 percent slower than the M2 MacBook Pro. But the modified M2 MacBook Air with an AirJet setup matched the Cinebench score of the MacBook Pro. The video below by our sister site, PCWorld, explains how it works.</p>



<figure><p>
<iframe loading="lazy" title="The AirJet Continues To Innovate Laptop Cooling" width="500" height="281" src="https://www.youtube.com/embed/u0k46Wnq3Rk?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>



<p>How is AirJet able to be so thin? The company has a blog post that goes into <a href="https://go.redirectingat.com/?id=111346X1569486&amp;url=https://www.froresystems.com/blog/how-do-you-cool-ultra-thin-devices&amp;xcust=1-1-2150862-1-0-0&amp;sref=https://www.macworld.com/article/2150862/airjet-makes-a-macbook-air-perform-like-a-macbook-pro.html" rel="nofollow">greater detail on how AirJet works</a>, but essentially, inside it are several different materials used to vibrate membranes. This creates back pressure to pull in air through intakes on the case of the device, such as a laptop. While heat is being moved from the chip to a fin stack, the air is then used by AirJet to expel the heat out of a vent. In the MacBook Air demonstration, Frore added intake vents near the hinge and used the speaker holes as exhaust.</p>

		
			
			


<p>AirJet isn’t a consumer product–consumers can’t buy it and modify their own MacBook Air, nor does Frore plan to create a kit for consumer sale. Frore’s MacBook Air demo is a proof of concept that it can be beneficial in a MacBook. Its thin form factor could open up possibilities with Apple products; for example, if Apple were to use AirJet instead of the fans it uses in the 14- and 16-inch MacBook Pro, it could free up space that the company can use for, say, a bigger battery. Another example is with the Mac Studio, which, as you can see in <a href="https://go.redirectingat.com/?id=111346X1569486&amp;url=https://www.ifixit.com/News/57898/mac-studio-teardown#:~:text=Apple%E2%80%99s%20Biggest%20Fan%E2%80%94And%20Heat%20Sink&amp;xcust=1-1-2150862-1-0-0&amp;sref=https://www.macworld.com/article/2150862/airjet-makes-a-macbook-air-perform-like-a-macbook-pro.html" rel="nofollow">iFixit’s Mac Studio teardown</a>, has a gigantic heat sink and two large fans–AirJet could allow Apple to create a smaller cooling system, thereby shrinking the Mac Studio.</p>







<div data-effect="slide"><ul><li><figure><img decoding="async" alt="MacBook Air AirJet" data-id="2150856" src="https://b2c-contenthub.com/wp-content/uploads/2023/11/macbook-air-airjet.jpg?quality=50&amp;strip=all&amp;w=1200" loading="lazy"><figcaption><p>Inside a 15-inch M2 MacBook Air with the AirJet and fin stack installed.</p>
</figcaption></figure></li><li><figure><img decoding="async" alt="MacBook Air AirJet fin stack" data-id="2150855" src="https://b2c-contenthub.com/wp-content/uploads/2023/11/macbook-air-airjet-fin-stack.jpg?quality=50&amp;strip=all&amp;w=1200" loading="lazy"><figcaption><p>The modification uses a fin stack to draw heat away from the M2 and to the AirJet cooling system.</p>
</figcaption></figure></li><li><figure><img decoding="async" alt="MacBook Air AirJet vents" data-id="2150852" src="https://b2c-contenthub.com/wp-content/uploads/2023/11/macbook-air-airjet-vents.jpg?quality=50&amp;strip=all&amp;w=1200" loading="lazy"><figcaption><p>In order to install the AirJet, Frore modified a MacBook Air with air intake vents.</p>
</figcaption></figure></li><li><figure><img decoding="async" alt="MacBook Pro Cinebench R23" data-id="2150857" src="https://b2c-contenthub.com/wp-content/uploads/2023/11/macbook-pro-cinebench.jpg?quality=50&amp;strip=all&amp;w=1200" loading="lazy"><figcaption><p>The M2 MacBook Pro’s Cinebench R23 score is 8711.</p>
</figcaption></figure></li><li><figure><img decoding="async" alt="MacBook Air no AirJet Cinebench R23" data-id="2150854" src="https://b2c-contenthub.com/wp-content/uploads/2023/11/macbook-air-no-airjet-cinebench.jpg?quality=50&amp;strip=all&amp;w=1200" loading="lazy"><figcaption><p>An unmodified M2 MacBook Air posted a Cinebench R23 score of 8238.</p>
</figcaption></figure></li><li><figure><img decoding="async" alt="MacBook Air AirJet Cinebench R23" data-id="2150853" src="https://b2c-contenthub.com/wp-content/uploads/2023/11/macbook-air-airjet-cinebench.jpg?quality=50&amp;strip=all&amp;w=1200" loading="lazy"><figcaption><p>With an AirJet installed, the M2 MacBook Air’s score (8720) equaled that of the M2 MacBook Pro (8711).</p>
</figcaption></figure></li></ul></div>

</div>
		<div data-ga="article-footer-author">
				<div>
								<p><img src="https://www.macworld.com/wp-content/uploads/2023/11/author_photo_Roman-Loyola_1662683660-133.jpg?quality=50&amp;strip=all&amp;w=150&amp;h=150&amp;crop=1" height="125" width="125">
				</p>
								<p>Roman has covered technology since the early 1990s. His career started at MacUser, and he's worked for MacAddict, Mac|Life, and TechTV.</p>
				</div>
					<ul>
																									<li>
								<a href="mailto:rloyola@macworld.com" title="Email" target="_blank" rel="noopener"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z"></path></svg></a>
							</li>
																			
						  
						    
					</ul>
				
			</div>
						</div>
			</div>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Python Is Easy. Go Is Simple. Simple != Easy (158 pts)]]></title>
            <link>https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/</link>
            <guid>38433358</guid>
            <pubDate>Mon, 27 Nov 2023 15:28:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/">https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/</a>, See on <a href="https://news.ycombinator.com/item?id=38433358">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header><div><ol><li><a href="https://preslav.me/">Preslav Rachev
<span>/</span></a><a href="https://preslav.me/categories/programming">Programming</a>
<span>/</span></li><li><a href="https://preslav.me/posts/">My Writings
<span>/</span></a><a href="https://preslav.me/categories/programming">Programming</a>
<span>/</span></li><li><a href="https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/">Python is Easy. Go is Simple. Simple != Easy.
<span>/</span></a><a href="https://preslav.me/categories/programming">Programming</a>
<span>/</span></li></ol></div></header><div><p>Python and Go have distinct qualities that can complement each other.</p><figure><img srcset="https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/cover_huf1433fb1d8c7ca998d42f11cbcd49a88_386468_330x0_resize_q75_box.jpg 330w,
https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/cover_huf1433fb1d8c7ca998d42f11cbcd49a88_386468_660x0_resize_q75_box.jpg 660w,
https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/cover_huf1433fb1d8c7ca998d42f11cbcd49a88_386468_1024x0_resize_q75_box.jpg 1024w,
https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/cover_huf1433fb1d8c7ca998d42f11cbcd49a88_386468_1320x0_resize_q75_box.jpg 2x" src="https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/cover_huf1433fb1d8c7ca998d42f11cbcd49a88_386468_660x0_resize_q75_box.jpg" alt=""><figcaption>Image Credits: <a href="https://www.midjourney.com/">Midjourney</a></figcaption></figure><p>There is a common misconception that <em>simple</em> and <em>easy</em> refer to the same thing. After all, if something is easy to use, its inner workings must be simple to understand, right? Or vice versa? Actually, it is quite the opposite. While the two concepts spiritually point to the same outcome, making something seem easy on the outside requires enormous complexity under the hood.</p><p>Take Python, a language known for its low barrier to entry and, therefore, a favorite choice for entry programming language. Schools, universities, research centers, and a large number of businesses across the globe have chosen Python precisely because of its accessibility to anyone, regardless of their level of education or academic background (or total lack thereof). One rarely needs much type theory or understanding of how and where things get stored in memory, which threads some piece of code is running on, etc. Moreover, Python is the entry gateway to some of the most profound scientific and system-level libraries. Being able to control this amount of power with a single line of code speaks a lot in favor of it becoming one of the most popular programming languages on the planet.</p><p>And here comes the catch - the easiness of expressing things in Python code comes at a cost. Under the hood, the Python interpreter is massive, and many operations must take place for even a single line of code to be executed. When you hear someone referring to Python as a “slow” language, much of the perceived “slowness” comes from the number of decisions the interpreter makes at runtime. But that’s not even the biggest issue, in my view. The complexity of the Python runtime ecosystem, together with some liberal design decisions around its package management, makes for a very fragile environment, and updates often lead to incompatibilities and runtime crashes. It is not uncommon to leave a Python application to go back to it after a few months, only to realize that the host environment has changed enough that it is no longer possible to even to start the application anymore.</p><p>Of course, this is a gross over-simplification, and even kids nowadays know that containers exist to solve problems like this. Indeed, thanks to Docker and its likes, it is possible to “freeze” a Python codebase’s dependencies in time so that it can practically run forever. However, this comes at the cost of shifting the responsibility and complexity to the OS infrastructure. It is not the end of the world, but it is also not something to underestimate and overlook.</p><h2 id="from-easiness-to-simplicity">From Easiness to Simplicity <span><a href="#from-easiness-to-simplicity" aria-label="Anchor">#</a></span></h2><p>If we were to address the issues with Python, we would end up with something like Rust - extremely performant but with a notoriously high barrier to entry. Rust is in my view, not easy to use, and what is more, not simple. While it is in total hype these days, despite 20 years of programming and having had my first steps in C and C++, I cannot look at a piece of Rust code and say with certainty that I understand what is going on there.</p><p>I discovered Go about five years ago while working on a Python-based system. While it took me a few tries to get to like the syntax, I immediately fell for the simplicity idea. Go is meant to be simple to understand by anyone in an organization - from the junior developer fresh out of school to the senior-level engineering manager who only occasionally looks at code. What’s more, being a simple language, Go gets syntax updates very rarely - the last significant one has been the addition of generics in v1.18, which is only after a decade of serious discussion. For the most part, whether you look at Go code written five days ago or five years ago, it is mostly the same and should just work.</p><p>Simplicity requires discipline, though. It can feel limiting and even somewhat backward at first. Especially when compared to a succinct expression, such as a list or a dictionary comprehension in Python:</p><div><pre tabindex="0"><code data-lang="python"><span><span><span>temperatures</span> <span>=</span> <span>[</span>
</span></span><span><span>    <span>{</span><span>"city"</span><span>:</span> <span>"City1"</span><span>,</span> <span>"temp"</span><span>:</span> <span>19</span><span>},</span>
</span></span><span><span>    <span>{</span><span>"city"</span><span>:</span> <span>"City2"</span><span>,</span> <span>"temp"</span><span>:</span> <span>22</span><span>},</span>
</span></span><span><span>    <span>{</span><span>"city"</span><span>:</span> <span>"City3"</span><span>,</span> <span>"temp"</span><span>:</span> <span>21</span><span>},</span>
</span></span><span><span><span>]</span>
</span></span><span><span>
</span></span><span><span><span>filtered_temps</span> <span>=</span> <span>{</span>
</span></span><span><span>    <span>entry</span><span>[</span><span>"city"</span><span>]:</span> <span>entry</span><span>[</span><span>"temp"</span><span>]</span> <span>for</span> <span>entry</span> <span>in</span> <span>temperatures</span> <span>if</span> <span>entry</span><span>[</span><span>"temp"</span><span>]</span> <span>&gt;</span> <span>20</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>The same code in Go requires a few more keystrokes but should be ideally one idea closer to what the Python interpreter is doing under the hood:</p><div><pre tabindex="0"><code data-lang="go"><span><span><span>type</span> <span>CityTemperature</span> <span>struct</span> <span>{</span>
</span></span><span><span>    <span>City</span>      <span>string</span>
</span></span><span><span>    <span>Temp</span> <span>float64</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>// ...
</span></span></span><span><span><span></span>
</span></span><span><span><span>temperatures</span> <span>:=</span> <span>[]</span><span>CityTemperature</span><span>{</span>
</span></span><span><span>    <span>{</span><span>"City1"</span><span>,</span> <span>19</span><span>},</span>
</span></span><span><span>    <span>{</span><span>"City2"</span><span>,</span> <span>22</span><span>},</span>
</span></span><span><span>    <span>{</span><span>"City3"</span><span>,</span> <span>21</span><span>},</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>filteredTemps</span> <span>:=</span> <span>make</span><span>(</span><span>map</span><span>[</span><span>string</span><span>]</span><span>float64</span><span>)</span>
</span></span><span><span><span>for</span> <span>_</span><span>,</span> <span>ct</span> <span>:=</span> <span>range</span> <span>temperatures</span> <span>{</span>
</span></span><span><span>    <span>if</span> <span>ct</span><span>.</span><span>Temp</span> <span>&gt;</span> <span>20</span> <span>{</span>
</span></span><span><span>        <span>filteredTemps</span><span>[</span><span>ct</span><span>.</span><span>City</span><span>]</span> <span>=</span> <span>ct</span><span>.</span><span>Temp</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>While you can write equivalent code in Python, an unwritten rule in programming says that if the language provides an <em>easier</em> (as in, more concise, more elegant) option, programmers will gravitate towards it. But easy is subjective, and simple should be equally applicable to everyone. The availability of alternatives to perform the same action leads to different programming styles, and one can often find multiple styles within the same codebase.</p><p>With Go being verbose and “boring,” it naturally ticks another box - the Go compiler has much less work to do when compiling an executable. Compiling and running a Go application is often as fast, or even quicker, than getting the Python interpreter or Java’s virtual machine to load before even running the actual application. Not surprisingly, being a native executable is as fast as one executable can be. It’s not as fast as its C/C++ or Rust counterparts but at a fraction of the code complexity. I am willing to neglect this minor “drawback” of Go. Last but not least, Go binaries are statically-bound, meaning you can build one anywhere and run it on the target host - without any runtimes or library dependencies whatsoever. For the sake of convenience, we still wrap our Go applications in Docker containers. Still, those are significantly smaller and have a fraction of the memory and CPU consumption of their Python or Java counterparts.</p><h2 id="how-we-use-both-python-and-go-to-our-advantage">How we use both Python and Go to our advantage <span><a href="#how-we-use-both-python-and-go-to-our-advantage" aria-label="Anchor">#</a></span></h2><p>The most pragmatic solution we have found in our work is combining the powers of Python’s <em>easiness</em> and Go’s <em>simplicity</em>. For us, Python is a great prototyping playground. It’s where ideas are born and where scientific hypotheses get accepted and rejected. Python is a natural fit for data science and machine learning, and since we deal with lots of that stuff, it makes little sense to try and reinvent the wheel with something else. Python is also at the core of Django, which speaks to its motto of allowing rapid application development like few other tools (of course, Ruby on Rails and Elixir’s Phoenix deserve a noteworthy mention here).</p><p>Suppose a project needs the slightest bit of user management and internal data administration (like most of our projects do). In that case, we’d start with a Django skeleton because of its built-in Admin, which is fantastic. Once the rough Django proof-of-concept starts resembling a product, we identify how much of it can be rewritten in Go. Since the Django application has already defined the structure of the database and how data models look, writing the Go code that steps up on top of it is quite easy. After a few iterations, we reach a symbiosis, where the two sides peacefully co-exist on top of the same database and use bare-bones messaging to communicate with one another. Eventually, the Django “shell” becomes an orchestrator - it serves our administration purposes and triggers tasks that are then handled by its Go counterpart. The Go part serves everything else, from the front-facing APIs and endpoints to the business logic and backend job processing.</p><p>It’s a symbiosis that has worked well so far, and I hope it stays this way in the future. In a future post, I will outline some more details on the architecture itself.</p><p>Thanks for reading!</p></div><div><h2>You may also find these interesting</h2><article><p><a href="https://preslav.me/2023/06/28/podcasts-for-golang-developers/" aria-label="Podcasts for Go Developers"><img alt="" src="https://images.unsplash.com/photo-1556761175-129418cb2dfe?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80"></a></p></article><article><p><a href="https://preslav.me/2023/06/14/golang-focus-on-the-happy-path-with-step-functions/" aria-label="Focus on the Happy Path With Step Functions"><img alt="" src="https://images.unsplash.com/photo-1516522184673-de15e930962f?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=1478&amp;q=80"></a></p></article><article><p><a href="https://preslav.me/2023/06/02/my-golang-conference-talk-proposal-got-declined-a-few-times/" aria-label="My Go Talk Proposal Got Declined. A Few Times."><img alt="" src="https://images.unsplash.com/photo-1517664946321-87d2e16ebaa6?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;w=1771&amp;q=80"></a></p></article></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Robot Dad (199 pts)]]></title>
            <link>https://blog.untrod.com/2023/11/robot-dad.html</link>
            <guid>38433330</guid>
            <pubDate>Mon, 27 Nov 2023 15:26:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.untrod.com/2023/11/robot-dad.html">https://blog.untrod.com/2023/11/robot-dad.html</a>, See on <a href="https://news.ycombinator.com/item?id=38433330">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p>Tired of Alexa's feeble "here's what I found on wikianswerspam.com" responses to my eight-year-old son's science questions, I whipped up Robot Dad during my Thanksgiving break. He now runs in the background of our family computer.</p>
<p>Robot Dad sounds like real dad, thanks to voice cloning from <a href="https://elevenlabs.io/speech-synthesis">Eleven Labs</a> (very easy; I rambled about Formula 1 into a new MacOS Voice Memo for about sixty seconds, uploaded it, and voila), and answers appropriately for an eight-year-old, while deflecting prank requests -- though I suspect prompt injection will soon be second nature to this generation.</p>
<p>Here's my son, Dash, interacting with Robot Dad.</p>

<p>The delays are real, and the speech-to-text is only so-so, but it manages to be just good enough to clear the "provides value" bar. Robot Dad will also inject context from the previous question into the prompt. Dash could follow up with "Robot Dad, tell me more about it" and ChatGPT would know what to do.</p>
<p>A few dozen lines of code glues together different AI services, for a remarkable result. The wakeword and speech-to-text happen locally, while the AI response (ChatGPT) and text-to-speech are via HTTP. It's trivial to move the LLM bit to a local Llama2 instance, but I haven't found a satisfactory text-to-speech model that can do voice cloning locally.</p>
<p>I also made a quick speech visualization (turns out kids are not very engaged reading console log messages) that of course ended up providing more entertainment value than the <em>ENTIRE MODERN MIRACLE OF ARTIFICIAL INTELLIGENCE</em>. Code for the visualization is in <a href="https://gist.github.com/chrisclark/b9e7ba61654313a1e2d4a796ad5bb8a9">this gist</a>.</p>
<video controls="controls" width="100%" name="speech visualization">
  <source src="https://blog.untrod.com/media/robot-dad-speech-visualization.mov">
</video>

<p>Code for Robot Dad is below. You will need API keys for <a href="https://picovoice.ai/">Picovoice</a> (and a wakeword), <a href="https://elevenlabs.io/speech-synthesis">Eleven Labs</a>, and OpenAI. You can pick a pre-existing Eleven Labs voice or clone your own.</p>
<div><pre><span></span><code><span>import</span> <span>os</span><span>,</span> <span>json</span><span>,</span> <span>threading</span><span>,</span> <span>time</span>
<span>import</span> <span>pvporcupine</span><span>,</span> <span>pvcheetah</span>
<span>from</span> <span>pvrecorder</span> <span>import</span> <span>PvRecorder</span>
<span>from</span> <span>elevenlabs</span> <span>import</span> <span>voices</span><span>,</span> <span>generate</span><span>,</span> <span>play</span><span>,</span> <span>stream</span>
<span>import</span> <span>openai</span>

<span>ENDPOINT_DURATION_SECONDS</span> <span>=</span> <span>2</span> <span># 'Quiet' seconds indicating the end of audio capture</span>
<span>VOICE</span> <span>=</span> <span>'Dad'</span> <span># Via Eleven Labs</span>
<span>AUDIO_DEVICE_NAME</span> <span>=</span> <span>'MacBook Pro Microphone'</span>
<span>AUDIO_DEVICE</span> <span>=</span> <span>PvRecorder</span><span>.</span><span>get_available_devices</span><span>()</span><span>.</span><span>index</span><span>(</span><span>AUDIO_DEVICE_NAME</span><span>)</span>
<span>OPENAI_MODEL</span> <span>=</span> <span>'gpt-3.5-turbo-1106'</span>

<span>BASE_PROMPT</span> <span>=</span> <span>"""You are Robot Dad, and will be speaking with one of my children,</span>
<span>trying to be a helpful parent. You explain things at a level appropriate for</span>
<span>an eight-year-old.</span>

<span>You are encouraging and helpful, but won't tolerate any inappropriate requests</span>
<span>or attempts at pranks or jokes. If you you are asked or told anything</span>
<span>inappropriate, you gently say "nice try - but Robot Dad isn't falling for that!"</span>

<span>If you don't know how to reply, simply say "I'm just Robot Dad, not real dad -</span>
<span>so I'm afraid I can't help you with that".</span>

<span>You usually answer in no more than 4 sentences - kids do not have long attention</span>
<span>spans - but you can provide longer answers if it's clearly needed.</span>
<span>"""</span>

<span>PREV_CTX_PROMPT</span> <span>=</span> <span>"""</span>

<span>The last request and response you received is below. The next request may or may</span>
<span>not be a continuation of this conversation.</span>

<span>Previous request:</span>
<span>%s</span><span></span>

<span>Previous response:</span>
<span>%s</span><span></span>
<span>"""</span>

<span>PREV_CTX_TIMEOUT</span> <span>=</span> <span>60</span> <span># seconds</span>

<span>keyword_paths</span><span>=</span><span>[</span><span>'</span><span>%s</span><span>/wakewords/Robot-Dad.ppn'</span> <span>%</span> <span>ROOT</span><span>]</span>

<span>porcupine_key</span> <span>=</span> <span>os</span><span>.</span><span>environ</span><span>.</span><span>get</span><span>(</span><span>"PORCUPINE_API_KEY"</span><span>)</span>
<span>openai</span><span>.</span><span>api_key</span> <span>=</span> <span>os</span><span>.</span><span>environ</span><span>.</span><span>get</span><span>(</span><span>"OPENAI_API_KEY"</span><span>)</span>

<span>porcupine</span> <span>=</span> <span>pvporcupine</span><span>.</span><span>create</span><span>(</span>
    <span>access_key</span><span>=</span><span>porcupine_key</span><span>,</span>
    <span>keyword_paths</span><span>=</span><span>keyword_paths</span><span>)</span>

<span>cheetah</span> <span>=</span> <span>pvcheetah</span><span>.</span><span>create</span><span>(</span>
    <span>access_key</span><span>=</span><span>porcupine_key</span><span>,</span>
    <span>endpoint_duration_sec</span><span>=</span><span>ENDPOINT_DURATION_SECONDS</span><span>,</span>
    <span>enable_automatic_punctuation</span><span>=</span><span>True</span><span>)</span>

<span>recorder</span> <span>=</span> <span>PvRecorder</span><span>(</span>
    <span>frame_length</span><span>=</span><span>porcupine</span><span>.</span><span>frame_length</span><span>,</span>
    <span>device_index</span><span>=</span><span>AUDIO_DEVICE</span><span>)</span>

<span>break_audio</span> <span>=</span> <span>generate</span><span>(</span><span>text</span><span>=</span><span>"Got it! Robot Dad is thinking..."</span><span>,</span> <span>voice</span><span>=</span><span>VOICE</span><span>)</span>
<span>alert_audio</span> <span>=</span> <span>generate</span><span>(</span><span>text</span><span>=</span><span>"What's up kiddo?"</span><span>,</span> <span>voice</span><span>=</span><span>VOICE</span><span>)</span>

<span>def</span> <span>llm_req</span><span>(</span><span>prompt</span><span>,</span> <span>txt</span><span>):</span>
    <span>messages</span><span>=</span> <span>[</span>
        <span>{</span><span>"role"</span><span>:</span> <span>"system"</span><span>,</span> <span>"content"</span><span>:</span> <span>prompt</span><span>},</span>
        <span>{</span><span>"role"</span><span>:</span> <span>"user"</span><span>,</span> <span>"content"</span><span>:</span> <span>f</span><span>'Here is what the child has said: </span><span>{</span><span>txt</span><span>}</span><span>'</span><span>}</span>
    <span>]</span>

    <span>resp</span> <span>=</span> <span>openai</span><span>.</span><span>ChatCompletion</span><span>.</span><span>create</span><span>(</span>
      <span>model</span><span>=</span><span>OPENAI_MODEL</span><span>,</span>
      <span>messages</span><span>=</span><span>messages</span>
    <span>)</span>
    <span>return</span> <span>resp</span><span>[</span><span>'choices'</span><span>][</span><span>0</span><span>][</span><span>'message'</span><span>][</span><span>'content'</span><span>]</span>


<span># Speech-to-text using Picovoice's Cheetah</span>
<span>def</span> <span>capture_input</span><span>():</span>
    <span>transcript</span> <span>=</span> <span>''</span>
    <span>while</span> <span>True</span><span>:</span>
        <span>partial_transcript</span><span>,</span> <span>is_endpoint</span> <span>=</span> <span>cheetah</span><span>.</span><span>process</span><span>(</span><span>recorder</span><span>.</span><span>read</span><span>())</span>
        <span>transcript</span> <span>+=</span> <span>partial_transcript</span>
        <span>if</span> <span>is_endpoint</span><span>:</span>
            <span>transcript</span> <span>+=</span> <span>cheetah</span><span>.</span><span>flush</span><span>()</span>
            <span>break</span>
    <span>return</span> <span>transcript</span>


<span>def</span> <span>play_async</span><span>(</span><span>audio</span><span>):</span>
    <span>audio_thread</span> <span>=</span> <span>threading</span><span>.</span><span>Thread</span><span>(</span><span>target</span><span>=</span><span>play</span><span>,</span> <span>args</span><span>=</span><span>(</span><span>audio</span><span>,))</span>
    <span>audio_thread</span><span>.</span><span>start</span><span>()</span>


<span>def</span> <span>main</span><span>():</span>
    <span>print</span><span>(</span><span>'Listening...'</span><span>)</span>

    <span>recorder</span><span>.</span><span>start</span><span>()</span>

    <span>prev_request</span> <span>=</span> <span>''</span>
    <span>prev_response</span> <span>=</span> <span>''</span>
    <span>last_wake_time</span> <span>=</span> <span>None</span>

    <span>try</span><span>:</span>
        <span>while</span> <span>True</span><span>:</span>
            <span>pcm</span> <span>=</span> <span>recorder</span><span>.</span><span>read</span><span>()</span>
            <span>result</span> <span>=</span> <span>porcupine</span><span>.</span><span>process</span><span>(</span><span>pcm</span><span>)</span>

            <span>if</span> <span>result</span> <span>&gt;=</span> <span>0</span><span>:</span>
                <span>print</span><span>(</span><span>'Detected Robot Dad'</span><span>)</span>
                <span>play_async</span><span>(</span><span>alert_audio</span><span>)</span>

                <span>prompt</span> <span>=</span> <span>BASE_PROMPT</span>
                <span>current_time</span> <span>=</span> <span>time</span><span>.</span><span>time</span><span>()</span>
                <span>if</span> <span>last_wake_time</span> <span>and</span> <span>current_time</span> <span>-</span> <span>last_wake_time</span> <span>&lt;</span> <span>PREV_CTX_TIMEOUT</span><span>:</span>
                    <span>prompt</span> <span>+=</span> <span>PREV_CTX_PROMPT</span> <span>%</span> <span>(</span><span>prev_request</span><span>,</span> <span>prev_response</span><span>)</span>
                <span>last_wake_time</span> <span>=</span> <span>current_time</span>

                <span>transcript</span> <span>=</span> <span>capture_input</span><span>()</span>
                <span>print</span><span>(</span><span>'Heard request: </span><span>%s</span><span>'</span> <span>%</span> <span>transcript</span><span>)</span>
                <span>prev_request</span> <span>=</span> <span>transcript</span>

                <span>play_async</span><span>(</span><span>break_audio</span><span>)</span>

                <span>resp</span> <span>=</span> <span>llm_req</span><span>(</span><span>prompt</span><span>,</span> <span>transcript</span><span>)</span>
                <span>print</span><span>(</span><span>'Answering: </span><span>%s</span><span>'</span> <span>%</span> <span>resp</span><span>)</span>
                <span>prev_response</span> <span>=</span> <span>resp</span>

                <span>resp_audio</span> <span>=</span> <span>generate</span><span>(</span><span>text</span><span>=</span><span>resp</span><span>,</span> <span>voice</span><span>=</span><span>VOICE</span><span>,</span> <span>stream</span><span>=</span><span>True</span><span>)</span>
                <span>stream</span><span>(</span><span>resp_audio</span><span>)</span>
    <span>except</span> <span>KeyboardInterrupt</span><span>:</span>
        <span>pass</span>

    <span>recorder</span><span>.</span><span>stop</span><span>()</span>
    <span>print</span><span>(</span><span>'Stopped.'</span><span>)</span>
<span>main</span><span>()</span>
</code></pre></div>


            <h4><i>Like what you read?</i> <a href="http://tinyletter.com/chrisclark">Join the newsletter</a> and get updated when there's something new.</h4>


    

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Favorite Database T-Shirts (181 pts)]]></title>
            <link>https://www.cs.cmu.edu/~pavlo/blog/2016/07/my-favorite-database-shirts.html</link>
            <guid>38433083</guid>
            <pubDate>Mon, 27 Nov 2023 15:07:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cs.cmu.edu/~pavlo/blog/2016/07/my-favorite-database-shirts.html">https://www.cs.cmu.edu/~pavlo/blog/2016/07/my-favorite-database-shirts.html</a>, See on <a href="https://news.ycombinator.com/item?id=38433083">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h2>TL;DR</h2>
<ul>
  <li>I like wearing database shirts. MongoDB's original shirt from the early 2010s is the vanguard. You should never opt for a cheaper material.
</li></ul>

<p>When I was an undergrad, I was really into shirts from obscure indie and punk bands (see <a onclick="javascript:pageTracker._trackPageview('/outgoing/52colony.com');" href="http://52colony.com/modules5862.html">example #1</a><sup><a href="#footnote1">[1]</a></sup> and <a onclick="javascript:pageTracker._trackPageview('/outgoing/52colony.com');" href="http://52colony.com/modules3171.html">example #2</a><sup><a href="#footnote2">[2]</a></sup> from 2004). It was my (pretentious) way of trying to be different by wearing shirts from bands that broke up after only one album<sup><a href="#footnote3">[3]</a></sup>. I'm older now and I don't run basement shows anymore. So now that same zeal that I had back then for band shirts is now channeled towards database shirts. I now wear shirts from database companies that broke up and no longer exist (e.g., <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.bizjournals.com');" href="http://www.bizjournals.com/boston/blog/startups/2013/07/akiban-acquired-by-foundationdb-with.html">Akiban</a>, <a onclick="javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org');" href="https://en.wikipedia.org/wiki/Xeround">Xeround</a>).</p>
<p>Promoting your database system or start-up with a shirt is almost as important as getting the thing to actually run. As I've told my students several times, in the world of databases you <em>don't sell the steak, you sell the sizzle</em>. Over the years, I've collected a number of shirts from database companies (mostly newer NoSQL and NewSQL start-ups). A good shirt can get people to feel like your DBMS is going to solve all of their application's database problems. Of course this means you have to have good branding and logo design. But all of these efforts should be in the name of working towards the goal of making an impressive shirt that people will want to wear and promote your system.</p>
<p>In this article, I provide a list of my top five favorite database shirts. I have other ones that I like a lot (and ones that I think are dreadful<sup><a href="#footnote4">[4]</a></sup>), but the shirts listed below are the ones that feel are a step above the others. Eventually we will conduct a more scientific evaluation of these systems, but I thought that it would be fun to compare them based on their shirts. I evaluate the shirts based on the following metrics: </p>
<ol>
<li><b>Material Quality:</b> How soft and thick is the shirt? Does it feel sturdy and a high quality?</li>
<li><b>Fit:</b> How well does the shirt fit on someone with a normal body shape?</li>
<li><b>Design:</b> Is the artwork on the shirt interesting and something that one could wear in public?</li>
</ol>
<!-- For some companies, I have more than one shirt. I also have two zip-up hoodies. Each of these will be evaluated separately at some point. I also  -->
<p>Per Margo Seltzer's <a onclick="javascript:pageTracker._trackPageview('/outgoing/mis-misinformation.blogspot.com');" href="http://mis-misinformation.blogspot.com/2012/10/gender-and-swag.html">guidelines</a>, extra points are given to companies that provide a women's cut shirt.</p>
<p>I recognize that companies typically make nicer items for their employees (e.g., MemSQL has Patagonia jackets). The shirts in this review are only ones that the companies give out to non-employees (e.g., customers, professors). </p>
<hr>

<div>

<div id="mongodb">
<p><a onclick="javascript:pageTracker._trackPageview('/downloads/../../../images/blog/010/mongodb.jpg');" href="https://www.cs.cmu.edu/~pavlo/images/blog/010/mongodb.jpg"><img src="https://www.cs.cmu.edu/~pavlo/images/blog/010/mongodb-small.jpg"></a>
</p>
<div>
    <h2>#1 — MongoDB</h2>
    <p><b>Brand:</b> American Apparel 50/50 Shirt <br>
    <b>Material:</b> 50% Polyester / 50% Cotton <br>
    <b>Year:</b> 2010 </p><p>As far as I know, this is the original shirt released by MongoDB. This was the hot item when I got it a few years ago. I consider this to be the <b>gold standard</b> for a database shirt. MongoDB spared no expense in getting the plush American Apparel 50/50 cotton blend. The cut is flattering. The design is clean and direct (with three colors). It's not entirely obvious that this is a tech shirt, so you can wear it in public. They get also points for using a non-traditional shirt color (i.e., it's not black, white, or gray). Over the years, the shirt has held up well and has gotten softer.

    </p><p>This is an example of what all database companies should aspire to have with their own shirts. A lot of companies go cheap and get Hane's Beefy-T, but these shirts feels like sandpaper on my delicate body. It shows that paying a little extra to get a nicer quality shirt is worth it because it makes people want to wear it. I remember when they would come to recruit at Brown and the next day there would be non-CS people walking around campus with MongoDB shirts. I know that they made women's cut versions too, because a lot of girls would wear them to the gym.

    </p><p>The success of Eliot Horowitz and his crew with this MongoDB shirt inspired me to make a <a onclick="javascript:pageTracker._trackPageview('/downloads/../../../images/photo-hardcore.jpg');" href="https://www.cs.cmu.edu/~pavlo/images/photo-hardcore.jpg">shirt</a> for my own DBMS before I went on the <a onclick="javascript:pageTracker._trackPageview('/downloads/../../../papers/SCSFC-Pavlo13.pdf');" href="https://www.cs.cmu.edu/~pavlo/papers/SCSFC-Pavlo13.pdf">job market</a>. I attribute this shirt to a lot of my own early success.
</p></div>
</div>

<div id="nuodb">
<p><a onclick="javascript:pageTracker._trackPageview('/downloads/../../../images/blog/010/nuodb.jpg');" href="https://www.cs.cmu.edu/~pavlo/images/blog/010/nuodb.jpg"><img src="https://www.cs.cmu.edu/~pavlo/images/blog/010/nuodb-small.jpg"></a>
</p>
<div>
    <h2>#2 — NuoDB</h2>
    <p><b>Brand:</b> Next Level <br>
    <b>Material:</b> 50% Polyester / 25% Cotton / 25% Rayon <br>
    <b>Year:</b> 2013 </p><p>This is the only long sleeve t-shirt that I have in my top five list. I also consider this to be one of the <b>best</b> shirts ever put out by a database company. I would have ranked this #1 except that I think that the MongoDB shirt above had a larger impact on their popularity. This NuoDB shirt is high quality and soft. Next Level shirts are just as good as American Apparel. It's also rare to have a t-shirt with a hood. The design is bright and interesting. This has the best artwork of all the shirts because it's not just their logo slapped on a shirt. NuoDB actually had somebody design this and it shows. Most people would not know that this shirt is for a database company.

    </p><p>I always wear this shirt when I have to fly long distances. It's sort of my "<a onclick="javascript:pageTracker._trackPageview('/outgoing/en.wikipedia.org');" href="https://en.wikipedia.org/wiki/Thundershirt">thunder shirt</a>." I also have the light gray variant of it that they gave my wife (it has different artwork). She loves hers equally as much as I love this one here (although it is not a women's cut). I think they told me that these were a limited edition. NuoDB's <a onclick="javascript:pageTracker._trackPageview('/outgoing/twitter.com');" href="https://twitter.com/andy_pavlo/status/728629984068284416">new shirts</a> are good, but not nearly as nice as this one (but they do have women's sizes).
</p></div>
</div>

<div id="snowflake">
<p><a onclick="javascript:pageTracker._trackPageview('/downloads/../../../images/blog/010/snowflake.jpg');" href="https://www.cs.cmu.edu/~pavlo/images/blog/010/snowflake.jpg"><img src="https://www.cs.cmu.edu/~pavlo/images/blog/010/snowflake-small.jpg"></a>
</p>
<div>
    <h2>#3 — Snowflake</h2>
    <p><b>Brand:</b> Canvas <br>
    <b>Material:</b> 50% Polyester / 25% Cotton / 25% Rayon <br>
    <b>Year:</b> 2016 </p><p>The Snowflake team (smartly) followed the MongoDB playbook with this shirt. This is the highest quality database shirt that I have received in the last year. The database fam <a onclick="javascript:pageTracker._trackPageview('/outgoing/twitter.com');" href="https://twitter.com/markcallaghan/status/730076601342300160">agrees</a> with this assessment. The companies name is on the front and their logo is on the back. All of the printing is in white. They also have a nice sky blue version as well.

    </p><p>Although I have only worn this shirt for a few months, it already buttersoft. It is even softer than the MongoDB one above.  The only issue is that I have been asked whether the shirt is for a ski resort. It is not obvious to non-database people that this is a tech company. That can be good or bad depending on your <a onclick="javascript:pageTracker._trackPageview('/outgoing/youtu.be');" href="https://youtu.be/ndBCojeBtmg?t=10m37s">lifestyle</a>.
</p></div>
</div>

<div id="altibase">
<p><a onclick="javascript:pageTracker._trackPageview('/downloads/../../../images/blog/010/altibase.jpg');" href="https://www.cs.cmu.edu/~pavlo/images/blog/010/altibase.jpg"><img src="https://www.cs.cmu.edu/~pavlo/images/blog/010/altibase-small.jpg"></a>
</p>
<div>
    <h2>#4 — Altibase</h2>
    <p><b>Brand:</b> Next Level <br>
    <b>Material:</b> 90% Cotton / 10% Polyester <br>
    <b>Year:</b> 2016 </p><p>This shirt is a bit banal, but I like it because Altibase is a (slightly) obscure DBMS. It is a Korean system that was one of the first in-memory DBMSs from the 1990s. This is the most nerdy of all the shirts listed here (even though all database shirts are by definition nerdy). I like it because it has a vintage aesthetic that reminds me of the stolid tech companies from the 1980s. It says upfront that it's a relational DBMS so there are never any questions about what the shirt means. It also tells you that their DBMS means business since it's "enterprise grade."

    </p><p>The shirt material is a bit thinner than the others. I have avoid putting this shirt in the dryer because I am afraid that it will start to tatter. The printing is two-color and has set in nicely into the fabric.
</p></div>
</div>

<div id="voltdb">
<p><a onclick="javascript:pageTracker._trackPageview('/downloads/../../../images/blog/010/voltdb.jpg');" href="https://www.cs.cmu.edu/~pavlo/images/blog/010/voltdb.jpg"><img src="https://www.cs.cmu.edu/~pavlo/images/blog/010/voltdb-small.jpg"></a>
</p>
<div>
    <h2>#5 — VoltDB</h2>
    <p><b>Brand:</b> Hanes Nano-T <br>
    <b>Material:</b> 100% Cotton <br>
    <b>Year:</b> 2015 </p><p>This last one is the only Hanes shirt that I will wear. This is not as bad as Beefy T. The primary red color is uninteresting. No database company should ever use this kind of shirt. With that said, the reason why it makes my top five list is that it is a limited edition shirt put out by VoltDB in celebration of Mike Stonebraker winning the <a onclick="javascript:pageTracker._trackPageview('/outgoing/amturing.acm.org');" href="http://amturing.acm.org/award_winners/stonebraker_1172121.cfm">2014 Turing Award</a>. So it's special to me for that reason. It has a picture of Mike's beautiful visage and an <tt>INSERT</tt> query about him becoming a Turing Laureate. It is also the only shirt in this listing where I have both men's and women's version (shown in the photo here).

    </p><p>I have the other <a onclick="javascript:pageTracker._trackPageview('/outgoing/twitter.com');" href="https://twitter.com/andy_pavlo/status/362650168262279168">VoltDB Warhol-style Stonebraker shirt</a>, but it's too large so I can't wear it. I am a <a onclick="javascript:pageTracker._trackPageview('/outgoing/twitter.com');" href="https://twitter.com/justinesherry/status/741152043243569152">big proponent</a> of putting a picture of your <a onclick="javascript:pageTracker._trackPageview('/outgoing/twitter.com');" href="https://twitter.com/pbailis/status/413035226609102848">face on a shirt</a>.

    </p><p><em>Disclosure: I was on the team that wrote the <a onclick="javascript:pageTracker._trackPageview('/outgoing/hstore.cs.brown.edu');" href="http://hstore.cs.brown.edu/">system</a> that later became VoltDB and Stonebraker was one of my <a onclick="javascript:pageTracker._trackPageview('/outgoing/twitter.com');" href="https://twitter.com/andy_pavlo/status/367392409698578433">PhD advisers</a>, so I am probably biased because of that.</em>
</p></div>
</div>


</div>

<p><b>Attention Companies:</b> If you want me to review your database shirt in the future, you can send a men's medium and/or a women's small shirt to:</p>
<address>
Andy Pavlo<br>
Dept. of Computer Science<br>
Carnegie Mellon University<br>
Gates-Hillman Center 9019<br>
5000 Forbes Avenue<br>
Pittsburgh, PA 15213-3891
</address>

<h3>Footnotes</h3>
<ol>
    <li id="footnote1"> <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.youtube.com');" href="https://www.youtube.com/watch?v=9cu4hnecGvQ">Welcome the Plague Year</a>
    </li><li id="footnote2"> <a onclick="javascript:pageTracker._trackPageview('/outgoing/www.youtube.com');" href="https://www.youtube.com/watch?v=e_T3UcDAogQ">Sleepytime Trio</a>
    </li><li id="footnote3"> This was well before the term "hipster" came into existence. I was going for the "I'm not a CS nerd" look at a nerd school. It did help me meet my <a onclick="javascript:pageTracker._trackPageview('/outgoing/52colony.com');" href="http://52colony.com/modules1c08.html">future wife</a>.
    </li><li id="footnote4"> Coincidentally, the Akiban and Xeround shirts are actually two of the ugliest ones that I have. And now they no longer exist. Think about that...
</li></ol>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: A Dalle-3 and GPT4-Vision feedback loop (215 pts)]]></title>
            <link>https://dalle.party/</link>
            <guid>38432486</guid>
            <pubDate>Mon, 27 Nov 2023 14:18:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://dalle.party/">https://dalle.party/</a>, See on <a href="https://news.ycombinator.com/item?id=38432486">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Download all of Wikipedia on your phone (105 pts)]]></title>
            <link>https://practicalbetterments.com/download-all-of-wikipedia-on-your-phone/</link>
            <guid>38432445</guid>
            <pubDate>Mon, 27 Nov 2023 14:15:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://practicalbetterments.com/download-all-of-wikipedia-on-your-phone/">https://practicalbetterments.com/download-all-of-wikipedia-on-your-phone/</a>, See on <a href="https://news.ycombinator.com/item?id=38432445">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-content"><nav></nav><p>There's a lot of data on the public internet —&nbsp;and vast amounts get added every day. But, how much of it is useful to anyone, and how much of it is conceivably useful to <em>you</em>?</p><p>The answer is&nbsp;<code>102 gigabytes</code>.</p><p><strong>Download all of Wikipedia on your phone and never be without the useful internet ever again.</strong></p><h2>Why download Wikipedia</h2><p>I downloaded Wikipedia about a year ago and have used it more than I expected. Here's some of the benefits with real life examples:</p><ul><li><strong>You get access to information on almost everything when there is no internet.</strong> When the internet is patchy on a train, when you're underground, or in the middle of the ocean.</li><li><strong>Saving money on data.</strong> Especially useful while travelling when data is likely to be more expensive. You can look up the history of towns your train passes through, the culture of your destination, and solve culinary mysteries without having to chew anything.</li><li><strong>It's better for your brain than social media.</strong> Removing some of the friction required to use Wikipedia —&nbsp;reduces the likelihood you'll spend time on social media. Wikipedia has much healthier <a href="https://en.wikipedia.org/wiki/Wiki_rabbit_hole">rabbit holes</a>. (This <a href="https://en.wikipedia.org/wiki/Wikipedia:Unusual_articles">list of unusual articles</a> is always a good starting point.)</li><li><strong>It's a nice reminder of the breadth of human interest.</strong> Every article on wikipedia was written by a human being who cared about the topic. When I'm feeling down, especially about my writing, I remember that people care enough to write about <a href="https://en.wikipedia.org/wiki/Pocket_lint">pocket lint</a> — and I feel less blue.</li><li><strong>Resilience from global catastrophe and forced boredom.</strong> At any moment society could collapse or you could find yourself hiding at a party. It's best to be prepared.</li><li><strong>It weighs much less than a hard&nbsp;copy.</strong></li></ul><h2>How to download Wikipedia</h2><p>There are a number of ways to download Wikipedia, a <a href="https://en.wikipedia.org/wiki/Wikipedia:Database_download">complete list</a> is available on (no surprise) Wikipedia. The most user-friendly way is to download an app to do it for you, and the most user-friendly app is&nbsp;<strong>Kiwix</strong>.</p><p>Kiwix is available on both Android and iOS. It's free, <a href="https://github.com/kiwix">open-source</a>, and can be used for other content —&nbsp;like <a href="https://www.ifixit.com/">iFixit</a> or <a href="https://stackoverflow.com/">Stack Overflow</a>.</p><p>Wikipedia weighs in at around <code>102 gigabytes (GB)</code> with images and <code>60GB</code> without. It's a big file — too big for a lot of phones. However, Kiwix also allows you to download subdivisions of wikipedia —&nbsp;like the top <code>1 million</code> articles at <code>43.53GB</code>, mathematics articles at <code>2.63GB</code>, or only ice hockey articles <code>527.6MB</code>.</p><p>Here's how to do it:</p><ol><li>Download Kiwix for your platform of choice: <a href="https://apps.apple.com/us/app/kiwix/id997079563">iOS</a>, <a href="https://play.google.com/store/apps/details?id=org.kiwix.kiwixmobile&amp;pli=1">Android</a>, <a href="https://kiwix.org/en/applications/">Everything else</a>.</li><li>Open the app</li><li>Navigate to <code>Library</code>. (You have to hold down the bottom right menu button)</li><li>Click <code>Categories</code></li><li>Click <code>Wikipedia</code></li><li>There are lots of options for downloading subdivisions of Wikipedia. Scroll down to the heading that simply says <code>Wikipedia</code> to see the options for downloading all of English language Wikipedia.</li><li>Choose the download size that is right for you.</li><li>Make yourself a cup of tea and sit patiently next to your WiFi router.</li></ol><dl><dt>Tags</dt><dd></dd><dt>Published</dt><dd><time datetime="2023-11-27">27 Nov 2023</time></dd><dt>Updated</dt><dd><time datetime="2023-11-27">27 Nov 2023</time></dd></dl></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[GitHub: Can no longer search code without being logged in (313 pts)]]></title>
            <link>https://github.com/orgs/community/discussions/77046</link>
            <guid>38432261</guid>
            <pubDate>Mon, 27 Nov 2023 13:56:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/orgs/community/discussions/77046">https://github.com/orgs/community/discussions/77046</a>, See on <a href="https://news.ycombinator.com/item?id=38432261">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="presentation" data-paste-markdown-skip="">
    <tbody data-target-translation-id="5894322" data-target-translation-type="discussion">
        <tr>
    <td>
        <h3 dir="auto">Select Topic Area</h3>
<p dir="auto">Product Feedback</p>
<h3 dir="auto">Body</h3>
<p dir="auto">This is revolting and an anathema to the open source movement. A movement, I might add, Microsoft is abusing here.</p>
<p dir="auto">We're told that this is for security... But what <em>possible</em> point is there when I can simply clone the repository and use more dedicated tools for proper searching and analysis?</p>
<p dir="auto">So what possible reason is there?! Do you NOT have enough of our data? Is it not enough to monetize every bowel movement, you now feel the need to track which individual lines of code I'm browsing?</p>
<p dir="auto">I was on an older machine and needed to search for something in OUR OWN REPOSITORY and couldn't. I actually want people to be able to search our codebase.</p>
<p dir="auto">So what did I have to do? I tried logging in. Didn't have my password manager nearby. So I had to grab my phone. Oh! Now I need to 2FA. So back to my office to grab my Yubi key. The old laptop doesn't have USB-C ports? Well now I'm SOL.</p>
<p dir="auto">Not only is this change unncecessary, it's downright <strong>hostile</strong> towards your own customers. <em>Ambitiously</em> hostile!</p>
<p dir="auto">Obviously we're too far into the Github ecosystem to be able to easily change providers to one that even gives a pretext of user privacy or responsiveness. So kudos for that.</p>
<p dir="auto">But I'm done with the web interface. If you're not going to even bother hiding the fact that you see us as a source of data and a resource to be extracted, I choose to <strong>not</strong> give you that information.</p>
<p dir="auto">This is the final straw. I will no longer be creating new projects on GitHub. I want them to be useful to the public.</p>
<p dir="auto">Anybody reading this needs to realize something: Every time you create something new here, future audiences will only be able to search your code after bending the knee to Microsoft.</p>
<p dir="auto">Please, GItHub maintainers! Ignore the marketing jackals and the middle managers. Fight back! This is ethically indefensible and needs to be reversed.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/2373951/285679914-b65d0f04-cc77-493c-8aec-d574f62a287a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTEiLCJleHAiOjE3MDExMDExMDQsIm5iZiI6MTcwMTEwMDgwNCwicGF0aCI6Ii8yMzczOTUxLzI4NTY3OTkxNC1iNjVkMGYwNC1jYzc3LTQ5M2MtOGFlYy1kNTc0ZjYyYTI4N2EucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQUlXTkpZQVg0Q1NWRUg1M0ElMkYyMDIzMTEyNyUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzExMjdUMTYwMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NGM0ZjhjNGExMTQyNTc2M2U1OTg5OWU5NzY2NTE0ZjA4NWZhMjYwM2Q5YmY0OTE2ZWViMzA0MmU4YTg5NGNkMyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.byW_DYeXQjAumFClK6ZgS39jahPcw869az2vCUqPAGs"><img src="https://private-user-images.githubusercontent.com/2373951/285679914-b65d0f04-cc77-493c-8aec-d574f62a287a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTEiLCJleHAiOjE3MDExMDExMDQsIm5iZiI6MTcwMTEwMDgwNCwicGF0aCI6Ii8yMzczOTUxLzI4NTY3OTkxNC1iNjVkMGYwNC1jYzc3LTQ5M2MtOGFlYy1kNTc0ZjYyYTI4N2EucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQUlXTkpZQVg0Q1NWRUg1M0ElMkYyMDIzMTEyNyUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyMzExMjdUMTYwMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NGM0ZjhjNGExMTQyNTc2M2U1OTg5OWU5NzY2NTE0ZjA4NWZhMjYwM2Q5YmY0OTE2ZWViMzA0MmU4YTg5NGNkMyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.byW_DYeXQjAumFClK6ZgS39jahPcw869az2vCUqPAGs" alt="image"></a></p>
    </td>
  </tr>

    </tbody>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How are zlib, gzip and zip related? (218 pts)]]></title>
            <link>https://stackoverflow.com/questions/20762094/how-are-zlib-gzip-and-zip-related-what-do-they-have-in-common-and-how-are-they</link>
            <guid>38432127</guid>
            <pubDate>Mon, 27 Nov 2023 13:39:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://stackoverflow.com/questions/20762094/how-are-zlib-gzip-and-zip-related-what-do-they-have-in-common-and-how-are-they">https://stackoverflow.com/questions/20762094/how-are-zlib-gzip-and-zip-related-what-do-they-have-in-common-and-how-are-they</a>, See on <a href="https://news.ycombinator.com/item?id=38432127">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="text">
                
<p><em>Short form:</em></p>
<p><a href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT" rel="noreferrer"><code>.zip</code> is an archive format</a> using, usually, the <a href="https://www.rfc-editor.org/rfc/rfc1951" rel="noreferrer">Deflate compression method</a>.  The <a href="https://www.rfc-editor.org/rfc/rfc1952" rel="noreferrer"><code>.gz</code> gzip format</a> is for single files, also using the Deflate compression method.  Often gzip is used in combination with <a href="http://www.gnu.org/software/tar/manual/html_node/Standard.html" rel="noreferrer">tar to make a compressed archive format</a>, <code>.tar.gz</code>.  The <a href="http://zlib.net/" rel="noreferrer">zlib library</a> provides Deflate compression and decompression code for use by zip, gzip, <a href="http://www.w3.org/TR/PNG/" rel="noreferrer">png</a> (which uses the <a href="https://www.rfc-editor.org/rfc/rfc1950" rel="noreferrer">zlib wrapper</a> on deflate data), and many other applications.</p>
<p><em>Long form:</em></p>
<p>The <a href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT" rel="noreferrer">ZIP format</a> was developed by Phil Katz as an open format with an open specification, where his implementation, PKZIP, was shareware.  It is an archive format that stores files and their directory structure, where each file is individually compressed.  The file type is <code>.zip</code>.  The files, as well as the directory structure, can optionally be encrypted.</p>
<p>The ZIP format supports several compression methods:</p>
<pre><code>    0 - The file is stored (no compression)
    1 - The file is Shrunk
    2 - The file is Reduced with compression factor 1
    3 - The file is Reduced with compression factor 2
    4 - The file is Reduced with compression factor 3
    5 - The file is Reduced with compression factor 4
    6 - The file is Imploded
    7 - Reserved for Tokenizing compression algorithm
    8 - The file is Deflated
    9 - Enhanced Deflating using Deflate64(tm)
   10 - PKWARE Data Compression Library Imploding (old IBM TERSE)
   11 - Reserved by PKWARE
   12 - File is compressed using BZIP2 algorithm
   13 - Reserved by PKWARE
   14 - LZMA
   15 - Reserved by PKWARE
   16 - IBM z/OS CMPSC Compression
   17 - Reserved by PKWARE
   18 - File is compressed using IBM TERSE (new)
   19 - IBM LZ77 z Architecture 
   20 - deprecated (use method 93 for zstd)
   93 - Zstandard (zstd) Compression 
   94 - MP3 Compression 
   95 - XZ Compression 
   96 - JPEG variant
   97 - WavPack compressed data
   98 - PPMd version I, Rev 1
   99 - AE-x encryption marker (see APPENDIX E)
</code></pre>
<p>Methods 1 to 7 are historical and are not in use.  Methods 9 through 98 are relatively recent additions and are in varying, small amounts of use.  The only method in truly widespread use in the ZIP format is method 8, <a href="https://www.rfc-editor.org/rfc/rfc1951" rel="noreferrer">Deflate</a>, and to some smaller extent method 0, which is no compression at all.  Virtually every <code>.zip</code> file that you will come across in the wild will use exclusively methods 8 and 0, likely just method 8.  (Method 8 also has a means to effectively store the data with no compression and relatively little expansion, and Method 0 cannot be streamed whereas Method 8 can be.)</p>
<p>The <a href="http://www.digitalpreservation.gov/formats/fdd/fdd000361.shtml" rel="noreferrer">ISO/IEC 21320-1:2015 standard for file containers</a> is a restricted zip format, such as used in Java archive files (.jar), Office Open XML files (Microsoft Office .docx, .xlsx, .pptx), Office Document Format files (.odt, .ods, .odp), and EPUB files (.epub). That standard limits the compression methods to 0 and 8, as well as other constraints such as no encryption or signatures.</p>
<p>Around 1990, the <a href="http://www.info-zip.org/" rel="noreferrer">Info-ZIP group</a> wrote portable, free, open-source implementations of <code>zip</code> and <code>unzip</code> utilities, supporting compression with the Deflate format, and decompression of that and the earlier formats.  This greatly expanded the use of the <code>.zip</code> format.</p>
<p>In the early '90s, the <a href="https://www.rfc-editor.org/rfc/rfc1952" rel="noreferrer">gzip format</a> was developed as a replacement for the <a href="https://en.wikipedia.org/wiki/Compress" rel="noreferrer">Unix <code>compress</code> utility</a>, derived from the Deflate code in the Info-ZIP utilities.  Unix <code>compress</code> was designed to compress a single file or stream, appending a <code>.Z</code> to the file name.  <code>compress</code> uses the <a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch" rel="noreferrer">LZW compression algorithm</a>, which at the time was under patent and its free use was in dispute by the patent holders.  Though some specific implementations of Deflate were patented by Phil Katz, the format was not, and so it was possible to write a Deflate implementation that did not infringe on any patents.  That implementation has not been so challenged in the last 20+ years.  The Unix <code>gzip</code> utility was intended as a drop-in replacement for <code>compress</code>, and in fact is able to decompress <code>compress</code>-compressed data (assuming that you were able to parse that sentence).  <code>gzip</code> appends a <code>.gz</code> to the file name.  <code>gzip</code> uses the Deflate compressed data format, which compresses quite a bit better than Unix <code>compress</code>, has very fast decompression, and adds a CRC-32 as an integrity check for the data.  The header format also permits the storage of more information than the <code>compress</code> format allowed, such as the original file name and the file modification time.</p>
<p>Though <code>compress</code> only compresses a single file, it was common to use the <code>tar</code> utility to create an archive of files, their attributes, and their directory structure into a single <code>.tar</code> file, and then compress it with <code>compress</code> to make a <code>.tar.Z</code> file.  In fact, the <code>tar</code> utility had and still has the option to do the compression at the same time, instead of having to pipe the output of <code>tar</code> to <code>compress</code>.  This all carried forward to the gzip format, and <code>tar</code> has an option to compress directly to the <code>.tar.gz</code> format.  The <code>tar.gz</code> format compresses better than the <code>.zip</code> approach, since the compression of a <code>.tar</code> can take advantage of redundancy across files, especially many small files.  <code>.tar.gz</code> is the most common archive format in use on Unix due to its very high portability, but there are more effective compression methods in use as well, so you will often see <code>.tar.bz2</code> and <code>.tar.xz</code> archives.</p>
<p>Unlike <code>.tar</code>, <code>.zip</code> has a central directory at the end, which provides a list of the contents. That and the separate compression provides random access to the individual entries in a <code>.zip</code> file. A <code>.tar</code> file would have to be decompressed and scanned from start to end in order to build a directory, which is how a <code>.tar</code> file is listed.</p>
<p>Shortly after the introduction of gzip, around the mid-1990s, the same patent dispute called into question the free use of the <code>.gif</code> image format, very widely used on bulletin boards and the World Wide Web (a new thing at the time).  So a small group created the PNG losslessly compressed image format, with file type <code>.png</code>, to replace <code>.gif</code>.  That format also uses the Deflate format for compression, which is applied after filters on the image data expose more of the redundancy.  In order to promote widespread usage of the PNG format, two free code libraries were created.  <a href="http://www.libpng.org/pub/png/libpng.html" rel="noreferrer">libpng</a> and <a href="http://zlib.net/" rel="noreferrer">zlib</a>.  libpng handled all of the features of the PNG format, and zlib provided the compression and decompression code for use by libpng, as well as for other applications.  zlib was adapted from the <code>gzip</code> code.</p>
<p>All of the mentioned patents have since expired.</p>
<p>The zlib library supports Deflate compression and decompression, and three kinds of wrapping around the deflate streams.  Those are no wrapping at all ("raw" deflate), <a href="https://www.rfc-editor.org/rfc/rfc1950" rel="noreferrer">zlib wrapping</a>, which is used in the PNG format data blocks, and gzip wrapping, to provide gzip routines for the programmer.  The main difference between zlib and gzip wrapping is that the zlib wrapping is more compact, six bytes vs. a minimum of 18 bytes for gzip, and the integrity check, Adler-32, runs faster than the CRC-32 that gzip uses.  Raw deflate is used by programs that read and write the <code>.zip</code> format, which is another format that wraps around deflate compressed data.</p>
<p>zlib is now in wide use for data transmission and storage.  For example, most HTTP transactions by servers and browsers compress and decompress the data using zlib, specifically HTTP header <code>Content-Encoding: deflate</code> means <a href="https://en.wikipedia.org/wiki/HTTP_compression#Content-Encoding_tokens" rel="noreferrer">deflate compression method wrapped inside the zlib data format</a>.</p>
<p>Different implementations of deflate can result in different compressed output for the same input data, as evidenced by the existence of selectable compression levels that allow trading off compression effectiveness for CPU time. zlib and PKZIP are not the only implementations of deflate compression and decompression. Both the <a href="http://www.7-zip.org/" rel="noreferrer">7-Zip archiving utility</a> and Google's <a href="http://github.com/google/zopfli" rel="noreferrer">zopfli library</a> have the ability to use much more CPU time than zlib in order to squeeze out the last few bits possible when using the deflate format, reducing compressed sizes by a few percent as compared to zlib's highest compression level. The <a href="http://zlib.net/pigz/" rel="noreferrer">pigz utility</a>, a parallel implementation of gzip, includes the option to use zlib (compression levels 1-9) or zopfli (compression level 11), and somewhat mitigates the time impact of using zopfli by splitting the compression of large files over multiple processors and cores.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FreeBSD 14.0 Delivering Great Performance Uplift (135 pts)]]></title>
            <link>https://www.phoronix.com/review/freebsd-14-epyc</link>
            <guid>38431792</guid>
            <pubDate>Mon, 27 Nov 2023 13:01:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/review/freebsd-14-epyc">https://www.phoronix.com/review/freebsd-14-epyc</a>, See on <a href="https://news.ycombinator.com/item?id=38431792">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>Following last week's release of <a href="https://www.phoronix.com/news/FreeBSD-14.0-Released">FreeBSD 14.0</a>, I've begun testing out this major FreeBSD operating system update on a number of servers. What's clear so far is the performance being much improved with FreeBSD 14.0 on modern x86_64 Intel/AMD servers over FreeBSD 13.</p>
<p><a href="https://www.phoronix.com/image-viewer.php?id=freebsd-14-epyc&amp;image=freebsd_14_1_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=freebsd-14-epyc&amp;image=freebsd_14_1_med" alt="FreeBSD 14 boot"></a></p>
<p>FreeBSD 14.0 is a big update with much improved hardware support, upping the ARM64 and AMD64 CPU limit up to 1024 CPU cores over the prior 256 limit, upgraded LLVM Clang toolchain, updated OpenZFS file-system support, and an assortment of other additions.</p>
<p><a href="https://www.phoronix.com/image-viewer.php?id=freebsd-14-epyc&amp;image=freebsd_14_2_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=freebsd-14-epyc&amp;image=freebsd_14_2_med" alt="FreeBSD 14 installer"></a></p>
<p>I've been testing FreeBSD 14.0 out on a few AMD and Intel servers so far and the results have been looking consistently great. In this initial article is looking at the FreeBSD 13.2 vs. FreeBSD 14.0 performance on an AMD EPYC 8534P 64-core Zen 4C "Siena" server.</p>
<p><a href="https://www.phoronix.com/image-viewer.php?id=freebsd-14-epyc&amp;image=freebsd_14_3_lrg" target="_blank"><img src="https://www.phoronix.net/image.php?id=freebsd-14-epyc&amp;image=freebsd_14_3_med" alt="FreeBSD 14 console"></a></p>
<p>The 64-core / 128-thread server with 192GB of RAM and Micron 7450 Max 3.2TB NVMe SSD was kept the same throughout with the only change between tests being clean installs of FreeBSD 13.2 and then FreeBSD 14.0.</p>
<p><img type="image/svg+xml" width="100%" height="auto" src="https://phoronix.com/benchmark/result/freebsd-140-benchmarks-on-amd-epyc/result.svgz" alt="FreeBSD 14.0 Benchmarks On AMD EPYC"></p>
<p>With simply the newer underlying OS and keeping the applications (benchmarks) under test the same, FreeBSD 14.0 is looking very nice in the performance department.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Drive misplaces months' worth of customer data (470 pts)]]></title>
            <link>https://www.theregister.com/2023/11/27/google_drive_files_disappearing/</link>
            <guid>38431743</guid>
            <pubDate>Mon, 27 Nov 2023 12:54:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2023/11/27/google_drive_files_disappearing/">https://www.theregister.com/2023/11/27/google_drive_files_disappearing/</a>, See on <a href="https://news.ycombinator.com/item?id=38431743">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>Google Drive users are reporting files mysteriously disappearing from the service, with some posters on the company's support forums claiming six or more months of work have unceremoniously vanished.</p>
<p>The issue has been <a target="_blank" rel="nofollow" href="https://support.google.com/drive/thread/245055606/google-drive-files-suddenly-disappeared-the-drive-literally-went-back-to-condition-in-may-2023?hl=en">rumbling for a few days</a>, with one user logging into Google Drive and finding things as they were in May 2023.</p>
<p>According to the poster, almost everything saved since then has gone, and attempts at recovery failed.</p>

    

<p>Others <a target="_blank" href="https://support.google.com/drive/thread/245055606?hl=en&amp;msgid=245207929">chimed in</a> with similar experiences, and one <a target="_blank" href="https://support.google.com/drive/thread/245055606?hl=en&amp;msgid=245226440">claimed</a> that six months of business data had gone AWOL.</p>

        


        

<p>There is little information regarding what has happened; some users reported that synchronization had simply stopped working, so the cloud storage was out of date. Others could get some of their information back by fiddling with cached files, although the limited advice on offer for the affected was to leave things well alone until engineers come up with a solution.</p>
<p>A <a target="_blank" href="https://support.google.com/drive/thread/245055606?hl=en&amp;msgid=245673190">message</a> purporting to be from Google support also advised not to make changes to the root/data folder while engineers investigat the issue. Some users speculated that it might be related to accounts being spontaneously dropped. We've asked Google for its thoughts and will update should the search giant respond.</p>
<ul>

<li><a href="https://www.theregister.com/2023/05/10/google_cloud_paris_outage_persists/">Google Cloud's watery Parisian outage enters third week, with no end in sight</a></li>

<li><a href="https://www.theregister.com/2023/11/15/google_workspace_weaknesses_allow_plaintext/">Google Workspace weaknesses allow plaintext password theft</a></li>

<li><a href="https://www.theregister.com/2023/10/03/chromebook_plus/">Google doubles minimum RAM and disk in 'Chromebook Plus' spec</a></li>

<li><a href="https://www.theregister.com/2023/09/20/googles_ai_chatbot_bard/">Google Bard can now tap into your Gmail, Docs, more</a></li>
</ul>
<p>In the meantime, the experience for affected users is a reminder that just because files are being stored in the cloud, there is no guarantee that they are safe. European cloud hosting provider OVH <a target="_blank" href="https://www.theregister.com/2021/03/10/ovh/">suffered a disastrous fire</a> in 2021 that left some customers scrambling for backups and disaster recovery plans.</p>
<p>Google itself has suffered the odd outage or two over the years. Earlier in 2023, the company's <a target="_blank" href="https://www.theregister.com/2023/05/10/google_cloud_paris_outage_persists/">europe-west9 region took a shower</a> after water made its presence felt inside a Parisian Google Cloud datacenter.</p>

        

<p>Ultimately, trusting one's data – particularly data on which a business depends – to any sort of cloud storage should only be done after fully understanding the implications of the services' terms and conditions. Just because the files have been uploaded one day does not necessarily mean they will still be there – or recoverable – the next. ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[$10M AI Mathematical Olympiad Prize (257 pts)]]></title>
            <link>https://aimoprize.com/</link>
            <guid>38431482</guid>
            <pubDate>Mon, 27 Nov 2023 12:25:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://aimoprize.com/">https://aimoprize.com/</a>, See on <a href="https://news.ycombinator.com/item?id=38431482">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><details><summary>Menu</summary><a href="https://aimoprize.com/">AI-MO Prize</a><a href="https://aimoprize.com/about">About</a><a href="https://aimoprize.com/supporters">Supporters</a><a href="https://aimoprize.com/get-involved">Get Involved</a></details><h2>$10mn AI Mathematical Olympiad Prize Launches</h2><div><p>🌍</p><p><a href="https://xtxmarkets.com/" target="_blank">XTX Markets</a> is launching a new $10mn challenge fund, the <b>Artificial Intelligence Mathematical Olympiad Prize</b> (AI-MO Prize). The fund intends to spur the development of AI models that can reason mathematically, leading to the creation of a publicly-shared AI model capable of winning a gold medal in the <a href="https://www.imo-official.org/" target="_blank">International Mathematical Olympiad (IMO)</a>.</p></div><div><p>🏆</p><div><p>The grand prize of $5mn will be awarded to the first publicly-shared AI model to enter an AI-MO approved competition and perform at a standard equivalent to a gold medal in the IMO.</p><p>There will also be a series of progress prizes, totalling up to $5mn, for publicly-shared AI models that achieve key milestones towards the grand prize. </p></div></div><div><div><p>The AI-MO Prize [..] will help compare different AI problem solving strategies at a technical level, in a manner that will be accessible and appealing to the broader public.</p><p><a href="https://aimoprize.com/supporters">view more</a></p></div><div><p>I am sure that many people will be following the AI-MO Prize with great excitement, to see when, in the future, AI will match the world's brightest young minds.</p><p><a href="https://aimoprize.com/supporters">view more</a></p><p><b>Gregor Dolinar</b>, IMO President</p></div></div><div><p>📈</p><div><p>The prizes will be designed by an <a href="https://aimoprize.com/get-involved">AI-MO Advisory Committee</a>, including mathematicians, AI and machine learning experts, and experienced Olympiad problem-setters.</p><p>The first AI-MO approved competitions will open to participants in early 2024. There will be a presentation of progress at <a href="https://www.imo2024.uk/" target="_blank">the 65<sup>th</sup> IMO</a>, which will be held in Bath, England in July 2024.</p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Wealth Systems in RPGs (103 pts)]]></title>
            <link>https://troypress.com/wealth-systems-in-rpgs/</link>
            <guid>38431402</guid>
            <pubDate>Mon, 27 Nov 2023 12:16:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://troypress.com/wealth-systems-in-rpgs/">https://troypress.com/wealth-systems-in-rpgs/</a>, See on <a href="https://news.ycombinator.com/item?id=38431402">Hacker News</a></p>
Couldn't get https://troypress.com/wealth-systems-in-rpgs/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Tata Consultancy Services ordered to cough up $210M in code theft trial (199 pts)]]></title>
            <link>https://www.theregister.com/2023/11/24/tata_210m_code_theft/</link>
            <guid>38430974</guid>
            <pubDate>Mon, 27 Nov 2023 11:18:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2023/11/24/tata_210m_code_theft/">https://www.theregister.com/2023/11/24/tata_210m_code_theft/</a>, See on <a href="https://news.ycombinator.com/item?id=38430974">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>A jury has sided with Computer Sciences Corporation (CSC) against Tata Consultancy Services (TCS) over the theft of source code and documentation. A total of $210 million was this week awarded.</p>
<p>According to the <a target="_blank" href="https://regmedia.co.uk/2023/11/23/verdict_3_19cv00970.pdf">verdict</a> [PDF], a Texas jury agreed that TCS had "willfully and maliciously" misappropriated both source and confidential documentation by "improper means," awarding CSC $140 million in damages, with another $70 million tacked on for TCS's "unjust enrichment."</p>
<p>The <a target="_blank" href="https://regmedia.co.uk/2023/11/22/csc_complaint.pdf">complaint</a> [PDF] was filed in April 2019 regarding CSC's VANTAGE-ONE and CyberLife software platforms. CSC had licensed these software platforms to Transamerica Corporation, a life insurance holding company, to whom Tata – used here to collectively refer to Tata Consultancy Services Limited and Tata America International Corporation – began providing maintenance services.</p>

    

<p>In 2014, CSC and Transamerica signed off on a Third-Party Access Addendum that would allow Tata to alter CSC's software, but only for the benefit of its customer – Transamerica.</p>

        


        

<p>All was well until 2016, when Transamerica decided it needed to refresh its software. CSC and Tata both put in bids. CSC lost, and Tata won with its own software platform called BaNCS.</p>
<p>The circumstances got sticky at this point, not least because Tata hired more than 2,000 Transamerica employees. CSC alleged that these former employees had access to its code and documents, and forwarded them on to the Tata BaNCS development team.</p>

        

<p>The situation escalated in 2019, when a CSC employee was accidentally copied in on an email between Tata and Transamerica showing that Tata was accessing confidential information, according to CSC. The company then began legal proceedings.</p>
<ul>

<li><a href="https://www.theregister.com/2022/06/29/tcs_internet_of_actions_haptics/">Tata Consultancy Services to create touchy feely 'Internet of Actions'</a></li>

<li><a href="https://www.theregister.com/2022/04/11/tata_neu_debut/">Indian giant Tata fluffs its lines as it takes on Amazon and Walmart</a></li>

<li><a href="https://www.theregister.com/2021/06/23/tata_5g_airtel/">Indian mega-corp Tata unveils surprise 5G networking business</a></li>

<li><a href="https://www.theregister.com/2021/04/14/tcs_fy2021/">Tata Consultancy Services added just 7* customers in FY21 ... and 40,000 staff as revenue, profit flattened</a></li>
</ul>
<p>Documents and motions have been exchanged in the years since as Tata sought to get the case thrown out while CSC's claims were upheld. Eventually, it went to a jury trial, which found for CSC.</p>
<p>CSC, which dates back to 1968, was <a target="_blank" href="https://www.theregister.com/2017/04/03/hpe_csc_becomes_dxc/">merged</a> with the Enterprise Services business of Hewlett Packard Enterprise (HPE) to form DXC in 2017. The corporate mash-up has had its own legal troubles – a <a target="_blank" href="https://www.theregister.com/2023/01/13/hpe_may_have_to_answer/">lawsuit</a> was launched in 2019 by investors concerned over layoffs following the merger.</p>
<p>CSC's April 2019 complaint is highly critical of TCS. It alleged: "Misappropriating sophisticated business software is, apparently, TCS' method of entering new business markets in the United States," citing the example of Epic Systems Corporation.</p>
<p>Epic, a healthcare software provider, kicked off litigation in 2014, alleging that "TCS entities accessed Epic's web portal without authorization while servicing a mutual client." According to CSC's complaint, the information gleaned was then used to develop a competing software platform. In that instance, the jury agreed with Epic and in October 2017 awarded Epic substantial damages.</p>

        

<p>However, the champagne corks won't be popping at CSC just yet. If the Epic experience is anything to go by – the decision was appealed – there will likely be legal twists and turns aplenty before payments are made and the case is closed. ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Where Is OpenCV 5? (280 pts)]]></title>
            <link>https://opencv.org/blog/where-is-opencv-5/</link>
            <guid>38430074</guid>
            <pubDate>Mon, 27 Nov 2023 09:18:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://opencv.org/blog/where-is-opencv-5/">https://opencv.org/blog/where-is-opencv-5/</a>, See on <a href="https://news.ycombinator.com/item?id=38430074">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main id="genesis-content"><article aria-label="Where Is OpenCV 5?" itemref="hero-section"><h2>Where Is OpenCV 5?</h2>
<p><span><i></i></span>  <span><i></i></span> <time>October 3, 2023</time> <span></span>  <span><a href="https://opencv.org/blog/category/news/" rel="category tag">News</a></span> <span>Tags: <a href="https://opencv.org/blog/tag/crowdfunding/" rel="tag">crowdfunding</a> <a href="https://opencv.org/blog/tag/open-source/" rel="tag">open source</a></span></p><div><p><img width="1390" height="920" src="https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695.png" alt="" decoding="async" srcset="https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695.png 1390w, https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695-300x199.png 300w, https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695-1024x678.png 1024w, https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695-768x508.png 768w" sizes="(max-width: 1390px) 100vw, 1390px" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201390%20920'%3E%3C/svg%3E" data-lazy-srcset="https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695.png 1390w, https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695-300x199.png 300w, https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695-1024x678.png 1024w, https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695-768x508.png 768w" data-lazy-src="https://opencv1.b-cdn.net/wp-content/uploads/2023/10/Where-Is-OpenCV-5-695.png"></p><p>Dear Community,</p>



<p>In a world where massive AI projects are closed-source, and a handful of companies are set to control the future of AI, people are rightfully asking, where is OpenCV 5?</p>



<p>OpenCV has been the standard for publicly available, free-for-commercial use, open-source computer vision for over 20 years. We have seen the rise and fall of closed-source innovations locked up in patent silos by robber barons, inaccessible to all but the very privileged.</p>



<p>There are few independent organizations like OpenCV fighting to keep the greatest and most consequential technical innovations open to the public, free to all with the desire to learn. This task has become more difficult over the last several years as non-profit funding becomes scarce and those same large silos close themselves off.</p>



<p>The answer to the question “Where is OpenCV 5?” is another question: Will the future be open? Or will our algorithms be lost in time, <a href="https://en.wikipedia.org/wiki/Tears_in_rain_monologue">like tears in rain</a>?&nbsp;<a href="https://opencv.org/university/free-opencv-course/?utm_source=ocv&amp;utm_medium=midblog" target="_blank"><img width="1200" height="300" decoding="async" src="https://opencv1.b-cdn.net/wp-content/uploads/2023/11/obc-callout.jpg" alt="Your Image Alt Text" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201200%20300'%3E%3C/svg%3E" data-lazy-src="https://opencv1.b-cdn.net/wp-content/uploads/2023/11/obc-callout.jpg"></a></p>



<p>The true answer lies with you.</p>



<p>On October 24th, <a href="https://www.indiegogo.com/projects/opencv-5/coming_soon/x/26934858">OpenCV.org is launching a crowdfunding campaign</a> to raise funds for OpenCV 5 development directly from the community. During this campaign, we’ll reach out to the entire community- individual developers, companies small and large, and creators. Together, we can do amazing things. Here is how you can help&nbsp;</p>



<ul>
<li><strong>Sign Up To Volunteer: </strong>Fill out <a href="https://form.jotform.com/232745316792159">the volunteer application form</a>, and let us know how you can help with the campaign.</li>



<li><strong>Sign Up To Contribute:</strong> <a href="https://www.indiegogo.com/projects/opencv-5/coming_soon/x/26934858">Visit our campaign page</a>, enter your email, and contribute to the campaign to fund OpenCV 5 development. Every contribution, no matter how big or small, makes a difference.</li>



<li><strong>Spread the Word:</strong> Share this exciting news with your developer networks, on social media, and within your community. Help us reach a broader audience passionate about computer vision.</li>
</ul>



<p>In the next few weeks we will start revealing the details of our plans for OpenCV 5. Stay tuned to learn more.</p>



<ul>
<li>​<a href="https://www.linkedin.com/company/opencv/">​Follow OpenCV on LinkedIn​</a></li>



<li><a href="https://mastodon.social/@opencv">Follow OpenCV on Mastodon</a></li>



<li><a href="https://twitter.com/opencvlive">Follow OpenCV on Twitter/X @OpenCVLive</a>​</li>



<li>​<a href="https://www.youtube.com/@OpenCVOfficial">Subscribe on YouTube</a>​</li>



<li><a href="https://www.threads.net/@opencvofficial">​Follow OpenCV on Threads​</a></li>



<li>​<a href="https://github.com/opencv/opencv">Sponsor OpenCV on Github</a>​</li>



<li>​<a href="https://www.hackster.io/contests/opencv-ai-competition-2023">Join OpenCV AI Competition 2023</a>​</li>



<li><a href="https://join.slack.com/t/open-cv/shared_invite/zt-22jhu3q9d-K1EtT3_QiAD1GhE3aXhrAg">Join the Official OpenCV Community Slack Server</a>​</li>
</ul>
<!--<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
		<rdf:Description rdf:about="https://opencv.org/blog/where-is-opencv-5/"
    dc:identifier="https://opencv.org/blog/where-is-opencv-5/"
    dc:title="Where Is OpenCV 5?"
    trackback:ping="https://opencv.org/blog/where-is-opencv-5/trackback/" />
</rdf:RDF>-->
</div></article>

</main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple's developers reflashed Mac ROMs in the '90s (161 pts)]]></title>
            <link>https://www.downtowndougbrown.com/2023/11/how-apples-developers-reflashed-mac-roms-in-the-90s/</link>
            <guid>38429460</guid>
            <pubDate>Mon, 27 Nov 2023 08:11:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.downtowndougbrown.com/2023/11/how-apples-developers-reflashed-mac-roms-in-the-90s/">https://www.downtowndougbrown.com/2023/11/how-apples-developers-reflashed-mac-roms-in-the-90s/</a>, See on <a href="https://news.ycombinator.com/item?id=38429460">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				
<p>After I wrote about <a href="https://www.downtowndougbrown.com/2023/09/revisiting-programmable-mac-rom-simms-in-quadras/" data-type="post" data-id="3983" target="_blank" rel="noreferrer noopener">the possibility of programmable Mac ROM SIMMs in Quadras</a> a couple of months ago, I suspected that there had been a way for developers at Apple in the 68k Mac era to reflash the ROM in their Macs during development, just like BIOS updates on PCs. The reason I believed this is because the ROM SIMM socket in the Quadras brought out pins for 12V (VPP) and write enable (/WE). I had verified that the write enable pin was going into the memory controller chip in several Mac models, so I was pretty confident that in-system programming was possible.</p>



<p>As luck would have it, multiple people pointed out to me that an <a href="https://macintoshgarden.org/apps/flash-rom-utility" target="_blank" rel="noreferrer noopener">Apple internal utility used for ROM flashing</a> had been uploaded to the Macintosh Garden. It was recovered from a prototype PowerBook 520 purchased in 2020. Of course, I had to download this utility and figure out how it works.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image.png" target="_blank" rel="noreferrer noopener"><img decoding="async" width="50" height="54" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image.png" alt=""></a></figure>



<p>I ran it on my LC 475 and this is what it looked like:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-1.png" target="_blank" rel="noreferrer noopener"><img fetchpriority="high" decoding="async" width="640" height="480" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-1.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-1.png 640w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-1-300x225.png 300w" sizes="(max-width: 640px) 100vw, 640px"></a></figure>



<p>Here’s the About dialog, identifying Carl C. Hewitt as the author:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-2.png" target="_blank" rel="noreferrer noopener"><img decoding="async" width="407" height="187" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-2.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-2.png 407w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-2-300x138.png 300w" sizes="(max-width: 407px) 100vw, 407px"></a></figure>



<p>As you can see, it says the SIMM type is “Read-Only ROM” and the Program button is grayed out. This makes perfect sense, because it was just detecting my logic board’s mask ROM chips which are definitely not programmable.</p>



<p>All I was able to do was go to the File menu and choose “Save Onboard ROM…” to dump my existing ROM. It defaulted to a filename of “Saved RomMondo”. Then I could use the Verify button to show that my onboard ROM matched the dump:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-3.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="640" height="480" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-3.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-3.png 640w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-3-300x225.png 300w" sizes="(max-width: 640px) 100vw, 640px"></a></figure>



<p>This is all very interesting, but I wanted to see what it was like to actually flash a new ROM image. I wasn’t really sure where to begin though. Would this utility even support any of my Macs? What kind of ROM module would I need? What would it take to get that Program button enabled?</p>



<p>In order to answer these questions, I had no choice but to start disassembling the Flasher™ utility. Fortunately, a lot of the functions in the program had their names present as a string directly afterward so it gave me some context about what was going on. The holy grail was when I discovered this big table of entries for compatible ROMs. The names of these table entries, and the table itself, were assigned by me.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-4.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="546" height="585" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-4.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-4.png 546w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-4-280x300.png 280w" sizes="(max-width: 546px) 100vw, 546px"></a></figure>



<p>A lot of the entries in this table are PDS cards. You can even see in the main UI screenshots above that there was a separate “PDS ROM Info” section on the right. I would love to see an example of what these PDS cards looked like, if anyone out there has some inside knowledge they would be willing to share!</p>



<p>Let’s look at one of the SIMM entries in detail: QuadraSIMM1.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-6.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="564" height="764" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-6.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-6.png 564w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-6-221x300.png 221w" sizes="(max-width: 564px) 100vw, 564px"></a></figure>



<p>This contains a lot of info, and I had to do further disassembly throughout the program to understand what everything meant. 0x89898989 and 0xBDBDBDBD are the flash manufacturer and device ID, repeated four times because four 8-bit chips will respond at a time on the 32-bit data bus. 0x89 is Intel’s JEDEC manufacturer ID and 0xBD is the device ID for their 28F020 256-kilobyte flash chip. 0x40400000 is the base address for ROM write cycles, 0x40800000 is the base address for ROM read cycles, and 0x100000 is the size of each set of four chips (1 MB). This particular SIMM appears to have 2 banks, so it is likely a 2 MB SIMM with 8 flash chips.</p>



<p>After that, there are various flags for special options, and a jump table for functions to perform different operations like checking presence of the SIMM, erasing, and programming. I won’t go too far into the weeds about what it all means, but the other interesting part is at the end of the structure, which contains a NULL-terminated list of allowed gestalt machine IDs. <a href="https://68kmla.org/bb/index.php?threads/apple-prototype-rom-flasher-utility.45480/" data-type="link" data-id="https://68kmla.org/bb/index.php?threads/apple-prototype-rom-flasher-utility.45480/" target="_blank" rel="noreferrer noopener">We determined in my 68kmla post</a> that the IDs listed above that don’t have names are simply unreleased variants of the other models for the most part. For example, 86, 90, 93, and 95 are gestalt IDs for unreleased variants of the LC 475 and Quadra 605 running at 20 MHz and 33 MHz instead of the final 25 MHz version.</p>



<p>So what does all this info tell us? Well, there is code elsewhere in the program that loops through the entire table one-by-one trying to determine if any items in the table are installed in the Mac it’s running on. Looking through this table allows me to get an idea of which Macs this program is compatible with as well as which flash chips a compatible ROM SIMM would need to use.</p>



<p>In the case of Quadras, it appears that a wide variety of them are all supported by the same code. The 700, 900, 950, 610, 650, 800, 475, 575, 630, and 580 are all handled by the table entry depicted above. There are also similar table entries for a 4-chip Intel 28F020 SIMM and 4- and 8-chip AMD 28F020 SIMMs. The 660av and 840av are supported by a couple of separate table entries for 8-chip 28F020 SIMMs with Intel and AMD parts. If you want to learn about other compatible Macs, see the 68kmla post I linked earlier. Before I get people’s hopes up too far, this utility doesn’t support earlier Macs like the SE/30 or II series. The only exception to that is the IIvx/IIvi/Performa 600.</p>



<p>It was around this time that I made a stupid mistake with my multimeter while checking out the SIMM /WE pin, and I think I fried it on my LC 475 by accidentally shorting it to 12V. They are right next to each other in the socket. My bad! Since then, I’ve bought another logic board for it so I can continue my experiments. Even though I now have a new logic board in my LC 475, I’ve moved over to doing most of my research on my Performa 630 instead.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/630.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="493" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/630-1024x493.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/630-1024x493.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/630-300x144.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/630-768x370.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/630.jpg 1500w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>At least my mistake gave me the opportunity to show this machine off. Notice that it’s a Performa 630; not a Performa 630CD. See that thing that suspiciously looks like a CD-ROM drive on the left? It’s not. It’s a blank cover to put something in the opening where the CD tray would come out. This is what the 630 series machines looked like when they didn’t come from the factory with a CD drive. And yes, as I’m sure many others did too, I pressed the button thinking the CD tray would come out. If you push the button hard enough, it gets stuck back in there. Don’t ask me how I found that out.</p>



<p>Anyway, the next step was to figure out how I could find a compatible SIMM to try this program out with. The <a href="https://www.downtowndougbrown.com/programmable-mac-rom-simms/" data-type="page" data-id="559" target="_blank" rel="noreferrer noopener">programmable SIMMs that I designed in the past</a> wouldn’t work. None of their chip IDs match, and my pinout for write enable was different. Not to mention they don’t properly disable the onboard ROMs. Looking deeper, modern flash chips use different programming commands and algorithms than the chips Apple supported anyway.</p>



<p>You may remember that I mentioned in my last post about Josh Watson finding an Apple programmable “Lobos board” SIMM on eBay a while ago. <a href="https://68kmla.org/bb/index.php?threads/lobos-board-strange-apple-rom.39963/" data-type="link" data-id="https://68kmla.org/bb/index.php?threads/lobos-board-strange-apple-rom.39963/" target="_blank" rel="noreferrer noopener">Here’s the 68kmla thread about that if you’re interested</a>. Josh’s pictures clearly showed a board with four Am28F020 chips — one of the known compatible chip arrangements based on my disassembly. His pictures were detailed enough, and I’m familiar enough with the 64-pin ROM SIMM pinout, that I was able to reverse-engineer the entire PCB by looking at the pictures. I designed a replica in KiCad. It’s not exactly identical, but it’s very close to it.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalTop.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="319" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalTop-1024x319.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalTop-1024x319.png 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalTop-300x94.png 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalTop-768x240.png 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalTop.png 1491w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalBottom.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="322" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalBottom-1024x322.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalBottom-1024x322.png 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalBottom-300x94.png 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalBottom-768x241.png 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/LobosReplicaFinalBottom.png 1493w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>It’s a 4-layer PCB just like the original. That sure makes routing ground and 5V a lot easier! I ordered five boards. In the meantime, I also ordered some new-old-stock Am28F020-120 chips on eBay. Then I just had to wait for things to arrive and put it all together!</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/assembledpcb.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="380" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/assembledpcb-1024x380.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/assembledpcb-1024x380.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/assembledpcb-300x111.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/assembledpcb-768x285.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/assembledpcb.jpg 1280w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>There was still a challenge to solve though. I needed a way to put an initial ROM image onto this thing. You can’t program it in-system if it’s blank. As soon as it’s inserted into the ROM SIMM socket, it disables the onboard ROMs. Plus, it’s not compatible with my SIMM programmer because it needs 12V for VPP, and /WE is in a different place. You need to use something else to bootstrap it. That’s why I installed PLCC sockets on it rather than soldering the chips down. I used my XGecu T56 programmer, which helpfully also provides the ability to interleave a file across 4 chips:</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/prog.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="523" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/prog-1024x523.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/prog-1024x523.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/prog-300x153.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/prog-768x392.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/prog-1536x785.jpg 1536w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/prog.jpg 1630w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-7.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="670" height="465" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-7.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-7.png 670w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-7-300x208.png 300w" sizes="(max-width: 670px) 100vw, 670px"></a></figure>



<p>By the way, I did notice an annoying issue with this programmer and the Am28F020 while I was playing around with it. If I tell it to erase the chip, it doesn’t fully erase. Most of the bits erase, but a few of them don’t. I have to erase twice in order to fully erase the chip. I tried contacting XGecu about this issue but they didn’t respond to my question. My guess is XGecu made a small mistake in the erase algorithm.</p>



<p>Even though my SIMM programmer is unable to program these chips, I was still able to use it to test the programmed SIMM contents and make sure they matched the stock 630 ROM. This made me feel much safer about sticking an untested PCB design into my Performa. I was also paranoid about making sure pin 2 (12V) wasn’t mistakenly shorted anywhere else on the SIMM, so I carefully double checked with my multimeter.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-8.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="530" height="338" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-8.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-8.png 530w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-8-300x191.png 300w" sizes="(max-width: 530px) 100vw, 530px"></a></figure>



<p>Next up, I needed my Performa 630 to actually have a ROM SIMM socket. Most machines of this era don’t come with the socket populated. Mine didn’t have the socket, and also needed to be recapped. You can see the footprint for the 64-pin socket with the holes filled with solder.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketbefore.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="332" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketbefore-1024x332.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketbefore-1024x332.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketbefore-300x97.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketbefore-768x249.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketbefore.jpg 1500w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>Back when I was making ROM SIMMs and programmers, I bought a bunch of sockets. So that wasn’t a problem at all. I got out my Hakko 808 vacuum desoldering tool and emptied out the holes. This was a breeze and allowed me to easily solder in a socket. Here it is with the socket populated and my new SIMM inserted.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketafter.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="394" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketafter-1024x394.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketafter-1024x394.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketafter-300x115.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketafter-768x295.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/socketafter.jpg 1500w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>With my reproduction Lobos SIMM installed, I was finally ready to boot up and run the Flasher utility again. The first good sign was that the machine still booted with the SIMM installed. I kind of expected that part to succeed since my programmer was able to read it, but it was still good news.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-9.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="640" height="480" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-9.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-9.png 640w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-9-300x225.png 300w" sizes="(max-width: 640px) 100vw, 640px"></a></figure>



<p>That’s more like it! Flasher detected a programmable “AMD 28F020 x 4” SIMM. The Program button was enabled! In order to try in-system programming, I created a hacked ROM containing a custom startup chime. If you’ve been following my blog for a while, you may know that I’ve always loved being able to mess around with Mac startup sounds. I might make the sound customization the subject of a future blog post, but for now let’s just assume that part has already been taken care of.</p>



<p>In order to use the new ROM file “630 New ROM” in the screenshot above, I had to use ResEdit to change the type and creator code of the file. The type code is ‘ROM ‘ and the creator code is ‘HIRM’. This would have taken more disassembly to figure out, so I’m glad that the program also supports saving ROM dumps which made it easy to find the correct codes.</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-10.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="454" height="306" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-10.png" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-10.png 454w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/image-10-300x202.png 300w" sizes="(max-width: 454px) 100vw, 454px"></a></figure>



<p>Now that I had a brand new ROM file ready to go, I was finally ready to load the file and program it to the SIMM. Here’s a video showing the entire flashing process. You might enjoy hearing the clickety-clack sound of the original hard drive still in this thing.</p>



<figure><p>
<iframe loading="lazy" title="Custom Performa 630 startup sound with an Apple internal ROM flashing tool" width="500" height="281" src="https://www.youtube.com/embed/BRluaJqdlKY?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</p></figure>



<p>My new ROM is identical to the original 630-series ROM, except it plays the Power Mac 6200/6300 startup sound instead — my favorite old Mac startup sound!</p>



<p>If I were a particularly evil person, I could definitely create some confusion with this new startup sound if I replaced the label on the front with one of these Apple service replacement labels I recently bought on eBay from Sun Remarketing’s old inventory…</p>



<figure><a href="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/6214cd.jpg" target="_blank" rel="noreferrer noopener"><img loading="lazy" decoding="async" width="1024" height="724" src="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/6214cd-1024x724.jpg" alt="" srcset="https://www.downtowndougbrown.com/wp-content/uploads/2023/11/6214cd-1024x724.jpg 1024w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/6214cd-300x212.jpg 300w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/6214cd-768x543.jpg 768w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/6214cd-1536x1086.jpg 1536w, https://www.downtowndougbrown.com/wp-content/uploads/2023/11/6214cd.jpg 2000w" sizes="(max-width: 1024px) 100vw, 1024px"></a></figure>



<p>But don’t worry. I would never do such a terrible thing.</p>



<p>What can we do with everything I’ve learned from this experiment? I believe it would technically be possible to hack the Flasher program so that it would recognize newer flash chips such as the SST39SF040. Basically I would have to modify one of the table entries to match a modern chip ID, and also hack the functions that do identification/erasure/programming to perform the sequences used by modern chips instead of the older 28F020 chips.</p>



<p>It would probably be easier to just make a new flasher program instead, but at the same time I think there would be something really cool about being able to use Apple’s own internal utility if this actually becomes a thing. If I find some spare time in the future, I may very well look into modifying it.</p>



<p>That would take care of the software changes needed, but as you may remember from <a href="https://www.downtowndougbrown.com/2023/09/revisiting-programmable-mac-rom-simms-in-quadras/" data-type="post" data-id="3983" target="_blank" rel="noreferrer noopener">my last post about Mac ROM SIMMs</a>, there is also a hardware problem to solve. It would be nice to have a ROM SIMM that is compatible with in-system programming in these machines but also compatible with older machines and all of the SIMM programmers out there based on my original design. It turns out a solution for this is in the works from some smart people out there.</p>



<p>One last thing I want to reiterate about this: it would only be useful for people who have a ROM SIMM socket installed on their logic board. Not many supported machines out there today have the socket populated, with the exception of the Quadra 700/900/950. It’s definitely possible to solder the socket in like I did, but it’s not going to be a fun time if you don’t have a vacuum tool to clear the holes.</p>



<p>Now we have all seen what it was like for developers at Apple in the ’90s to reprogram the ROMs in their development Macs. I wonder how long it has been since someone last used this program to flash a Mac before I resurrected it this week? I do know that it was still in use during the PowerPC era. A newer version of this same program was used for Power Mac 7500/8500/9500 development. You can find it on <a href="https://macintoshgarden.org/apps/pci-power-macintosh-ddk-a5-includes-mac-os-752a4" target="_blank" rel="noreferrer noopener">this PCI Power Macintosh DDK disk</a>.</p>



<p>Does anyone out there know more about how Mac ROM development worked back in the day? What if you accidentally screwed up and made your SIMM unbootable? There must have been some recovery method, right? Was that one of the reasons for the existence of the PDS cards I mentioned earlier? Or was there some other external SIMM programmer device that could reflash them? I’d love to hear more about it.</p>
			  
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why Bother with uBlock Being Blocked in Chrome? Time to Switch to Firefox (914 pts)]]></title>
            <link>https://tuta.com/blog/best-private-browsers</link>
            <guid>38429370</guid>
            <pubDate>Mon, 27 Nov 2023 07:57:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tuta.com/blog/best-private-browsers">https://tuta.com/blog/best-private-browsers</a>, See on <a href="https://news.ycombinator.com/item?id=38429370">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>Your choice of web browser is the crucial link between yourself and the world wide web. When you purchase a new device it typically
comes pre-installed with a browser like Microsoft's Edge, Apple's Safari, or Google's Chrome. But these browsers may not fit your
personal privacy needs, particularly since Chrome is going to show more ads in the future.
When choosing the browser remember that via this browser you access your entire online identity. It is crucial
to use a private browser to protect yourself and your data - and we'll help you pick the best one!
</p><div><h3 id="why-choose-a-private-browser">Why Choose a Private Browser?</h3>
<p><strong>Every site you visit tracks you</strong> in one way or the other, some sites require an <strong>account</strong> to view their content,
others require allowing <strong>cookies</strong>, and this information is vacuumed up by web advertising agencies whose existence is predicated upon
<strong>turning your browsing behavior into a product for marketing executives</strong>.</p>
<p>We already know how <a href="https://tuta.com/blog/posts/gmail-tracks-everything-you-buy">Gmail scans your email content</a>, but what
advertisers and others are doing with your <strong>browser data</strong> is a black box. The advertising industry likes to not talk about
how tracking your entire online behaviour enables them to <strong>create profiles</strong> about yourself, your family, friends, and colleagues, and how
this data helps them to <strong>post targeted ads</strong> to maximize the profits they can get - simply from harvesting your data.</p>
<p><strong>But you have the power to stop this!</strong></p>
<p>
		<picture>
   			<source type="image/webp" srcset="https://tuta.com/blog/images/browsers-not-so-private.webp">
    		<img height="531" width="1280" loading="lazy" alt="Mainstream browsers track you. Time to choose a private one!" src="https://tuta.com/blog/images/browsers-not-so-private.png">
		</picture>
<em>Mainstream browsers like Google Chrome, Safari, Opera, Internet Explorer - these are all browsers to avoid as they do not respect your privacy. Better pick Firefox instead!</em></p>
<p>Today we will go ahead and take a look at a number of <strong>privacy-oriented web browsers</strong> outside those provided by Big Tech, which
treat you like a human being and not a bullseye for targeted advertisement revenue. Let's dive into it!</p>
<p>For our purposes we will be dividing the browsers into three categories: <strong>Mainstream Privacy, Alternative Privacy, and Top Anonymity.</strong></p>
<p>If you would like to run some of these comparisons yourself or even just make a quick privacy-checkup the EFF has released a great tool
called <a href="https://coveryourtracks.eff.org/">Cover Your Tracks</a> which can be used to see what information your browser may be sharing with websites and organizations interested
in your online activity. <strong>After running this test, I am sure you will be so creeped out, you'll want to switch to a private browser right away!</strong></p>
<p>We will take a look at the unique features provided by each browser along with some pros and cons of adopting them.</p>
<h2 id="pick-the-best-private-browser">Pick the Best Private Browser</h2>
<h3 id="our-top-10-browser-list">Our Top 10 Browser List:</h3>
<p>
		<picture>
   			<source type="image/webp" srcset="https://tuta.com/blog/images/private-browsers.webp">
    		<img height="1080" width="1920" loading="lazy" alt="Best private browsers: Firefox, DuckDuckGo, Tor Browser and more" src="https://tuta.com/blog/images/private-browsers.png">
		</picture></p>
<ol>
<li><a href="#fire">Firefox</a></li>
<li><a href="#duck">DuckDuckGo</a></li>
<li><a href="#tor">Tor Browser</a></li>
<li><a href="#mullvad">Mullvad</a></li>
<li><a href="#pale">Pale Moon</a></li>
<li><a href="#puffin">Puffin</a></li>
<li><a href="#ice">GNU IceCat</a></li>
<li><a href="#water">WaterFox</a></li>
<li><a href="#brave">Brave</a></li>
<li><a href="#hyphenate">Hyphanet</a></li>
</ol>
<h2 id="mainstream-privacy">Mainstream Privacy</h2>
<h3 id="no-1-firefox-the-best-for-basic-privacy"><a name="fire">No. 1 Firefox</a>: The Best for Basic Privacy</h3>
<p>When it comes to open source alternatives to Big Tech web browsers like Chrome or Safari it is hard to go wrong with <a href="https://www.mozilla.org/en-US/firefox/new/">Mozilla's
Firefox</a>. First introduced as Firefox in 2004, the browser quickly grew in popularity as an alternative to Microsoft's Internet
Explorer. The browser continued to grow and met its major challenger when Google introduced Chrome. At present Firefox is the
fourth most popular web browser behind the three leading Big Tech browsers.</p>
<p>Firefox boasts a great deal of privacy advantages over the mainstream default browsers. First of all, it is owned and developed
by a non-profit so tracking user data is not their primary source of revenue. Firefox also releases its code as <a href="https://tuta.com/open-source">open source</a> meaning
that it is open for the world to see, so you know exactly what the browser is doing when running on your machine.</p>
<p>Recent versions of Mozilla's browser have also introduced a powerful number of features which can streamline your online experience.
They currently offer a password manager, page translation, <strong>anti-fingerprint tracking and ad-blocking</strong>, <strong>multi-device sync</strong> so that you
don't lose your tabs and bookmarks when juggling devices, and Mozilla has also introduced their own <strong>VPN service</strong> in a partnership
with Mullvad.</p>
<p><strong>But where Firefox really shines is with its massive library of browser extensions.</strong></p>
<p>One of the more interesting privacy specific extensions provided with this browser is the <strong>Facebook Container extension</strong>,
which explicitly <strong>blocks any Facebook tracking cookies</strong> which may be trying to track your online activities. This will not
stop Facebook from tracking your behavior on their own websites, but any of their off-site tracking attempts will be blocked.
One sad point here is that the container only applies to Facebook and not other <strong>known trackers</strong>. This can be improved by adding
other extensions to your browser like <strong>Privacy Badger</strong> from the Electronic Frontier Foundation.</p>
<p>Firefox also offers a <strong>Multi-Account Container extension</strong> so that your data is not shared across tabs. This extension isolates the activity between open browser tabs.
This way your behavior on Instagram does not directly influence the results seen in your Amazon shopping tab. The browser
also ships with their Enhanced Tracking Protection in the desktop application which stops <strong>cross-site tracking attempts</strong> in their tracks.</p>
<p>The greatest strength of Firefox is its <strong>flexibility</strong>. Users can add privacy enhancing features as needed by simply adding extensions to
their browser. While not perfect, Firefox is a great start for those of you who might be trying to take their first steps beyond the
Big Tech ecosystem. Their VPN service has also increased the all-in-one value of Firefox.</p>
<p><strong>If you love Firefox and are looking to step your privacy game up a notch there are loads of forks with even more privacy oriented features.</strong></p>
<h3 id="no-2-duckduckgo-best-search--email-protection"><a name="duck">No. 2 DuckDuckGo</a>: Best Search &amp; Email Protection</h3>
<p><a href="https://duckduckgo.com/app">DuckDuckGo's</a> famous <strong>private search</strong> has grown into something even better. DuckDuckGo now offers their own web browser which is
available on <strong>MacOS, Windows, Android, and iOS</strong>. The browser blocks <strong>third-party trackers by default</strong> and allows you to fully clear
the browser of all <strong>session data</strong> with a single stylized click.</p>
<p>One great feature of DuckDuckGo Browser is their <strong>automatic cookie declining feature</strong>: When you visit a new website instead of
being bombarded with banners asking you to either accept or reject cookies, the browser will automatically reject them and
close the invasive pop-up with no need for user interaction!</p>
<p>The browser also <strong>blocks site pop-ups</strong> asking you to sign into
services using Google. The DDG browser also comes with DuckPlayer which can provide a smooth <strong>ad-free way of watching YouTube
videos</strong>, and they have recently announced an upcoming VPN service.</p>
<p>Beyond protecting you through the browser alone DuckDuckGo also offers an <strong><a href="https://tuta.com/privacy">email privacy</a> protection service</strong>. This service
allows you to create an @duck.com <strong><a href="https://tuta.com/blog/posts/secure-email-alias">email alias addresses</a></strong> which can be used for signing up for services you may not wish to give your
primary email address to. It also allows you to automatically <strong>create "private" randomized Duck addresses</strong> which can be easily
blocked or deleted when you no longer need them.</p>
<p><strong>DuckDuckGo is great browser with some nice additional features which protect you beyond your browser. Their built-in extra
features like email protection are a refreshing open source response to Safari's Big Tech email protections.</strong></p>
<h3 id="no-4-mullvad-browser-best-built-in-vpn-support"><a name="mullvad">No. 4 Mullvad Browser</a>: Best Built-in VPN Support</h3>
<p><a href="https://mullvad.net/en/browser">Mullvad</a> has a long standing place as <strong>VPN provider</strong> that truly cares about its users and their privacy. With a <strong>zero-log policy
and proven transparency</strong>, Mullvad has been providing a secure VPN service since 2009. Earlier this year, Mullvad and the Tor
Project teamed up to release a browser custom built with all the privacy settings of the <a href="https://tuta.com/blog/posts/how-to-get-started-with-tor">Tor Browser</a>, but which is
configured to <strong>tunnel traffic through Mullvad's VPN instead of the onion network</strong>. This not only gives great advantages
in connection speeds and performance, but the traffic is less likely to be blocked if a website is suspicious of known
Tor exit node IP addresses.</p>
<p>When using Mullvad browser, your browser fingerprint matches that of other Mullvad users, in the same way that the Tor browser
does. All third-party trackers you may come across while surfing the web are blocked with <strong>uBlock Origin</strong> (also available as a
Firefox extension) and the browser itself <strong>does not collect any telemetry data</strong>. According to the team at Mullvad this partnership
with the Tor Project solved a longstanding issue in creating a <strong>private internet experience</strong>, namely that of a truly private
browser.</p>
<p>What stands out the most about Mullvad browser is the <strong>level of trust</strong> possible with their company. Mullvad has a proven
track record of not logging user data. When presented with a search warrant in 2023 and asked to turn over user data,
Mullvad could not comply with the request because there was <strong>no information available</strong>. This is the greatest example of
precisely why zero-logging is important for online privacy.</p>
<p><strong>For users who need all of the privacy provided by the Tor Browser, but are looking for a bit more speed, Mullvad Browser
is a great choice for protecting yourself online.</strong></p>
<h3 id="no-9-brave-a-step-beyond"><a name="brave">No. 9 Brave</a>: A Step Beyond</h3>
<p>Released in 2018, <a href="https://en.wikipedia.org/wiki/Brave_(web_browser)">Brave Browser</a> is built with <strong>privacy</strong> in mind. The team at Brave wanted to approach internet advertising in a new
way and their <strong>built-in adblock and anti-tracking software</strong> thins down the <a href="https://tuta.com/blog/gmail-ads-annoying">onslaught of ads</a>, while presenting the user with "optional"
ads which they can view in exchange for cryptocurrency tokens. They were one of the first browsers to introduce support for .onion
websites and the browser can navigate through the <strong>Tor network</strong> with no additional steps.</p>
<p>Brave Browser comes out of the box with many <strong>privacy-oriented features installed</strong>. These include multiple cryptocurrency features
like a built-in wallet, a privacy protecting suite called Brave Shield, a video chat application Brave Talk which is built upon
the open source project Jitsi, and they have recently introduced a VPN service.</p>
<p>One unique aspect of Brave Browser is that they <strong>randomize your browser fingerprint</strong> when visiting a new site. This fights back
against cross-site tracking which can <strong>profile you</strong> while browsing through the internet. Their privacy Shield combines features
you can only get on Firefox by adding certain extensions like <strong>NoScript and HTTPSEverywhere</strong>.</p>
<p>Brave is built upon <strong>Chromium</strong>, which may turn some of the more vehement anti-Googlers away. There have also been some questionable
business practices by the company, such as pushing their paid VPN service out to browsers without informing users and their
cryptocurrency involvement that may be an issue for some users. In addition, the company was called out in 2020 for <a href="https://www.zdnet.com/article/privacy-browser-brave-busted-for-autocompleting-urls-to-versions-it-profits-from/">auto-completing
URL with affiliate links</a> they profited from.</p>
<p><strong>Overall, Brave seems like a solid choice in the privacy space, but some do not like its involvement in the crypto scene.</strong></p>
<h2 id="alternative-privacy">Alternative Privacy</h2>
<p>The first four browsers are well-known options within the online privacy space. The next few browsers are smaller projects
which deserve their time in the spotlight for their <strong>unique approach to online privacy</strong>.</p>
<h3 id="no-6-puffin"><a name="puffin">No. 6 Puffin</a></h3>
<p><a href="https://en.wikipedia.org/wiki/Puffin_Browser">Puffin Secure Browser</a> aims to set themselves as your <strong>cloud-powered internet browser</strong>. Their cloud servers operate as a <strong>proxy</strong>
that stands between your web browser and the world wide web. When sites try to track your online behavior, they see the accumulated
behavior of many users which turns your personal browser fingerprint into a giant smeared mess of data.</p>
<p>This <strong>proxy-based remote browser</strong> has the great cybersecurity advantage that your local machine is not interacting directly with
any websites which may be hosting <strong>malicious code</strong>. This remote-browser functionality is not only a shining pearl, one notable
downside to this system is that end users need to place their full trust in Puffin. Their centralized cloud-to-web functionality
also makes their servers a potential man-in-the-middle attack threat.</p>
<p>Another drawback is the lack of iOS support. The browser removed the full browser from iOS and it is currently only available in a
limited version. Where they do make up for this is being one of the first browsers to take the leap to programming <strong>specifically for
smart TVs</strong>. Most people have a smart TV at home, but the software installed doesn't come with privacy in mind. Having a privacy-focused
group working to protect this new technology is a nice step towards improving online privacy and security.</p>
<h4 id="the-firefox-spin-offs">The Firefox Spin-Offs</h4>
<p>There is no debating that people love Firefox. Some folks have taken this love to a new level and have developed a number
of different <strong>forks</strong> which claim to provide more privacy than vanilla Firefox. A major perk of these browsers is that they are all
<strong>open source projects</strong> which offer full code transparency. As such they are not driven by generating profits, but are solely focused
on making the web a free and safe digital space.</p>
<h3 id="no-5-palemoon"><a name="pale">No. 5 PaleMoon</a></h3>
<p><a href="https://en.wikipedia.org/wiki/Pale_Moon">PaleMoon's</a> motto is "Your browser, Your way" and their web browser does just that. With PaleMoon you can <strong>fully customize your browser
experience</strong> with a number of non-Firefox add-ons. The browser also restricts itself to running as a single process on your local machine,
unlike Firefox which spills over into multiple processes. PaleMoon's focus is to provide a <strong>stable and efficient browsing experience</strong> which
can run on modern hardware as well as legacy hardware without dropping in performance.</p>
<p>The project's main website provides extensions, add-ons, layout themes, and language packs which allow you the user to build yourself
the browser you have always wished for.</p>
<h3 id="no-7-gnu-ice-cat-formerly-iceweasel"><a name="ice">No. 7 GNU Ice Cat (formerly IceWeasel)</a></h3>
<p>Originally forked from <strong>Mozilla's Firefox</strong> as IceWeasel, <strong><a href="https://en.wikipedia.org/wiki/GNU_IceCat">GNU IceCat</a></strong> is a privacy-focused fork which aims to create an entirely <strong>free
browser</strong>. All code is open for review and tinkering, and it has pushed itself forward as trademark resistant, inline with their goal
of creating free software.</p>
<p>IceCat also has a few <strong>security improvements</strong> that don't come stock in Firefox. The most interesting of these are the <strong>automatic blocking
of tracking images</strong> which may phone home to inform someone that you have viewed some kind of content. The browser also prevents <strong>non-free
Javascript</strong> from running when a page is loaded, again keeping true to their assertion that software should be free.</p>
<p>If you have a strong philosophical commitment to free software it is hard to go wrong with GNU IceCat.</p>
<h3 id="no-8-waterfox"><a name="water">No. 8 Waterfox</a></h3>
<p><a href="https://en.wikipedia.org/wiki/Waterfox">Waterfox</a> is another <strong>Firefox fork</strong> which aims to protect its users by <strong>disabling telemetry</strong> which is gathered by the Firefox browser. The
browser also disables the Pocket feature which comes installed in Mozilla's browser. Waterfox is compatible with the massive volume of
extensions available to not only Firefox, but also to Chrome and Opera. One nice feature that is included is the ability to <strong>open
private browser tabs</strong> without needing to open an entirely new browser window. This makes navigating the web a much smoother experience.</p>
<p>One feature which sets Waterfox apart from the others is its Oblivious DNS which protects your online activity from the eyes of your ISP.</p>
<h2 id="private-and-anonymous">Private and Anonymous</h2>
<p>Private and anonymous - these words are often jumbled together when people are talking about <strong>online security</strong>, but they are not the same. Something being private,
does not mean that you are anonymous, nor does anonymity automatically mean something is private. Bitcoin transactions are technically
anonymous, but are not private if anyone can view them at any time.</p>
<p>There are two more browsers on our list which take the jump from private towards true anonymity: Tor Browser and Hyphanet.</p>
<h3 id="no-3-tor-browser-when-anonymity-is-key"><a name="tor">No. 3 Tor Browser</a>: When Anonymity is Key</h3>
<p>When it comes to <strong>online privacy the <a href="https://www.torproject.org/">Tor Browser</a> reigns supreme</strong>. With a number of features which prevent online tracking and fingerprinting,
protections against malicious Javascript code, and the ability to <strong>route your traffic through the Tor network</strong> provide users with an unparalleled
degree of <strong>privacy and anonymity</strong>.</p>
<p>The Tor Browser works by routing your web traffic through a number of <strong>volunteer operated relays which mask your IP address</strong>. Each relay only knows
the connection of the sending node and by the time your request reaches its final destination, the website will only see the IP of your randomly
determined <strong>exit node</strong>. One advantage of using the Tor network, compared to other I2P solutions, is that you can surf the clearweb in addition
to .onion sites hosted within the Tor network itself.</p>
<p><strong>The Tor Browser allows activists, journalists, and political dissidents to communicate securely and freely.</strong> The Tor Project, the development
team behind Tor, is a <strong>non-profit organization</strong> and is not dependent upon generating ad revenue for support. Operated by volunteers and
donations, the Tor Project can operate freely to protect online privacy and human rights around the globe.</p>
<p>The biggest downside to using the Tor Browser is that it tends to be <strong>slower</strong> than a standard web browser. When routing traffic through the
various relays which exist around the globe, the traffic will be throttled to the speed of the slowest connection. Due to malicious
activity, some sites will automatically block users from connecting via the Tor network, but many others have created .onion sites.
The New York Times, BBC, and even Facebook have created <strong>.onion sites</strong> so that you can securely access their sites via Tor no matter
where you are.</p>
<h3 id="no-10-hyphanet-i2p-for-you-and-me"><a name="hyphenate">No. 10 Hyphanet</a>: I2P for You and Me</h3>
<p><a href="https://www.hyphanet.org/">Hyphanet</a>, formerly known as Freenet, is its <strong>own peer-to-peer internet</strong> which focuses on providing a <strong>censorship-resistance platform</strong> for
secure and anonymous online communication. Hyphanet is used to visit "freesites" which are hosted throughout the peer-to-peer network,
similar to how <strong>Tor hidden services</strong> are only accessible through the Tor Browser. Users communicate through decentralized nodes which
relay traffic between users. All data is <strong>encrypted</strong> both on the end users device and on the nodes themselves to ensure that it remains secure.</p>
<p>Hyphanet's goal is <strong>fighting censorship and protecting the freedom of expression</strong>. By operating in a decentralized manner, they are able
to connect citizens living in oppressive regimes to those outside their borders and help them spread news which would otherwise be silenced.</p>
<p>Hosting on Hyphanet is easy and anyone can create a "freesite" which they can use to make their voice heard. This data, not being centrally
hosted, is stored in an encrypted partition of the user's hard drive and is edited based upon the popularity of the content. Hyphanet's
features of webhosting, chats, and search all operate by utilizing some of the end users bandwidth and device storage. For some users,
this data being stored on their device is a major red flag because they do not know exactly what kind of material is being stored on their personal devices.</p>
<h2 id="final-ratings">Final Ratings</h2>
<p>Let's get down to brass tacks. The best private browser totally depends on what your needs and interests are. If you are an avid VPN fan, then built-in
VPN support will be a priority. If you cannot stand the thought of touching proprietary software, GNU IceCat is a better choice. I, myself, would
give the following recommendations, one for the average user just looking for an easy-to-use daily browsing experience and the other for those in need
of extreme privacy.</p>
<h3 id="best-for-general-privacy-mozillas-firefox">Best for General Privacy: Mozilla's Firefox</h3>
<p>With its nearly endless number of <strong>privacy enhancing extensions, expanding list of extra features like VPN support and file sharing, and a strong
commitment to opensource software, Firefox takes the top spot in our best private browsers recommended for the general user</strong>. Their auditable
code lets us feel secure that there is nothing nefarious going on behind the browser window and their status as a non-profit also assures us
that Mozilla is putting the <strong>user experience first</strong>, not their profit margin. Firefox is also a private browsing solution <strong>not built upon Google's
Chromium</strong>, which is a nice perk for those of us seeking to distance ourselves from anything Google.</p>
<p>With Firefox you can start surfing the web privately right after installing the software. Any additional needs that might arise are easily met
by installing extensions or add-ons like <strong>uBlock Origin</strong>, which is going to be <a href="https://uk.pcmag.com/browsers/149691/rip-ublock-origin-google-proceeds-with-plan-to-shake-up-chrome-extensions">broken in Google Chrome</a>
with upcoming changes. There are
also a number of great extensions for Firefox available from the <a href="https://www.eff.org/pages/tools">Electronic Frontier Foundation</a> which can help you strengthen your browser's privacy.</p>
<p>The vast amount of customization options available in Firefox make it our all-around best private browser as it can easily be configured to fit the unique security needs of each user.</p>
<h3 id="best-for-general-usage-duckduckgo">Best for General Usage: DuckDuckGo</h3>
<p>We picked DuckDuckGo for their number of <strong>great features, adblocking, anti-tracking, email protections, and their soon to come VPN</strong>. DuckDuckGo is
available with a dedicated application for most devices including mobile. It plays nice with the vast majority of websites without breaking or
slowing down. It also provides a smooth YouTube experience without interrupting you with ads every 30 seconds.</p>
<p>We are looking forward to seeing what kind of progress they make in the future.</p>
<p>(Full disclosure, I have been using DDG since they first introduced their mobile apps and have yet to have a negative experience with them.)</p>
<h3 id="best-for-maximum-privacy-tor-browser">Best For Maximum Privacy: Tor Browser</h3>
<p><strong>If your threat model requires anonymity, the Tor Browser is hard to beat.</strong> Built for privacy and anonymity, your communications will remain secure
and will be difficult to link to your person. Many major new organizations have created .onion sites so that sources can contact them to make sure
that important news reaches global discussion. The Tor Browser is operated by volunteers around the world who make sure that the network remains
operational and if one node gets shut down, another can keep running and moving traffic.</p>
<p>While it may not be the best for streaming YouTube videos while making dinner, Tor is a necessary tool for activists, journalists,
whistleblowers and many more.</p>
<p>What do you think of our ratings? Is your <strong>favorite browser</strong> missing from this list? Did we overlook some key features that may have impacted
our rating? If so, please reach out to us on our social media pages and let us know. We are always eager to learn more from the privacy community.
By working together we can make the internet a safer place for everyone.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Brother [printers] have gotten to where they are now, by NOT innovating (672 pts)]]></title>
            <link>https://retro.social/@ifixcoinops/111480744130939877</link>
            <guid>38429291</guid>
            <pubDate>Mon, 27 Nov 2023 07:43:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://retro.social/@ifixcoinops/111480744130939877">https://retro.social/@ifixcoinops/111480744130939877</a>, See on <a href="https://news.ycombinator.com/item?id=38429291">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[No-Bullshit Games (357 pts)]]></title>
            <link>https://nobsgames.stavros.io/</link>
            <guid>38429080</guid>
            <pubDate>Mon, 27 Nov 2023 06:59:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nobsgames.stavros.io/">https://nobsgames.stavros.io/</a>, See on <a href="https://news.ycombinator.com/item?id=38429080">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

        
        <hr>

        <p>Tired of crappy mobile games full of ads, or semi-good games that try to squeeze as much money as possible out of you
        in the form of in-app purchases?</p>

        <p>Lucky for, you No-Bullshit Games is here to help you discover good, non-annoying,
        <a href="https://nobsgames.stavros.io/help/">enjoyable games</a>.

        </p><h2>
        Choose your platform:
        </h2>

        <div>
            <p><a href="https://nobsgames.stavros.io/android/"><img src="https://nobsgames.stavros.io/static/images/android.7faec6fec18c.png"></a>
            </p>

            <p><a href="https://nobsgames.stavros.io/ios/"><img src="https://nobsgames.stavros.io/static/images/ios.ed9e3f7f7f04.png"></a>
            </p>
        </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Housing wealth is meaningless, destructive and fundamentally changing society (142 pts)]]></title>
            <link>https://www.theguardian.com/australia-news/2023/nov/27/australian-housing-wealth-is-meaningless-destructive-and-fundamentally-changing-our-society</link>
            <guid>38428169</guid>
            <pubDate>Mon, 27 Nov 2023 04:46:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/australia-news/2023/nov/27/australian-housing-wealth-is-meaningless-destructive-and-fundamentally-changing-our-society">https://www.theguardian.com/australia-news/2023/nov/27/australian-housing-wealth-is-meaningless-destructive-and-fundamentally-changing-our-society</a>, See on <a href="https://news.ycombinator.com/item?id=38428169">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>My parents were married in 1951 and, with a war service loan, bought a block of land in South Oakleigh, eight miles from Melbourne’s central business district.</p><p>I don’t know what my dad was making then, but he was a carpenter and apparently the average wage of a carpenter in 1951 was about 80 shillings a week, or £350 a year. And judging by average prices back then, they would have paid about £1,000 for the land. (By the way, the median house price had more than doubled in 1950, recovering from the big fall caused by price controls during the second world war, on which more later.)</p><figure id="9bb855a1-de60-48ac-ab7e-817271624683" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:2,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/australia-news/2023/nov/22/housing-prices-record-levels-corelogic-home-value-index&quot;,&quot;text&quot;:&quot;Housing prices back at record levels, defying Australia’s interest rate rises&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;9bb855a1-de60-48ac-ab7e-817271624683&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:1,&quot;design&quot;:8}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;,&quot;darkModeAvailable&quot;:false}"></gu-island></figure><p>Dad built the house himself, including making the bricks, working on weekends and at night, and Mum and Dad lived in a garage, to which I was brought home when I was born and where I spent the first three years of my life. But if they had bought a house and land package, which was rather more common than building it yourself, they would have paid about £1,250. So, like the median family at the time, they would have paid about 3.5 times household income (Mum didn’t work) for their first house, which was about average for the time.</p><p>When my wife and I bought our first house, in 1980, we paid roughly the median house price of $40,000, and I was making around the average weekly earnings as a young journalist – $220 a week, or $11,500 a year. So we also paid about 3.5 times my salary for the house, although we were better off than my parents because my wife was working, for about the same salary as mine, and my mum didn’t, which was normal for both times. Workforce participation for 30-year-old women had increased from 32% to 50% by 1980, as a result of the social/sexual revolution of the 1960s and 70s.</p><p>Over the past four years our three children and their partners all bought their own first houses. They’re doing it later than we did, and much later than my parents, so they’re making better money, and both partners are working, of course, but they paid about 7.5 times each income for their houses. That is typical: in August 2023 the median Australian house price was $732,886, which was 7.4 times annualised average weekly earnings.</p><p>In other words, my children – and all young people today – are paying more than twice the multiple of their income for a house than their parents – and their grandparents – did, and it’s only vaguely possible because both partners work to pay it off.</p><p>The problem started with the new millennium.</p><p>It is impossible to overstate the significance to Australian society of what happened then. The shift that began in about 2000 in the relationship between the cost of housing and both average incomes and the rest of the economy has altered everything about the way Australia operates and Australians live.</p><ul>
 <li><p><strong><a href="https://www.theguardian.com/newsletters/2019/oct/18/saved-for-later-sign-up-for-guardian-australias-culture-and-lifestyle-email?CMP=copyembed" data-link-name="in body link">Sign up for the fun stuff with our rundown of must-reads, pop culture and tips for the weekend, every Saturday morning</a></strong></p></li>
</ul><p>Six per cent compound annual growth in the value of houses over the past 23 years versus 3% annual growth in average incomes has meant that household debt has had to increase from half to twice average disposable income, and from 40% of GDP to 120%. This is the most important single fact about the <a href="https://www.theguardian.com/business/australia-economy" data-link-name="in body link" data-component="auto-linked-tag">Australian economy</a>. The large amount of housing debt Australians carry means that interest rates have a much greater impact on their lives, and this in turn affects inflation, wages, employment and economic growth. In the Australian economy, the price of houses is not everything but it’s almost everything, as the economist Paul Krugman once said of productivity.</p><p>Land and energy are the two basic economic inputs apart from labour, but while Australia has more of both than just about any other country, we export most of the energy and price our own at global parity, so there’s no homegrown advantage there, and we crowd into a few cities and pay each other seven to eight times our salaries for land.</p><p>High-priced houses do not create wealth; they redistribute it. And it’s meaningless because we can’t use the wealth to buy anything else – a yacht or a fast car. We can only buy other expensive houses: sell your house and you have to buy another one, cheaper if you’re downsizing, more expensive if you’re still growing a family. At the end of your life, your children get to use your housing wealth for their own housing, except that we’re all living so much longer these days it’s usually too late to be useful. And much of this housing wealth is concentrated in Sydney, where the median house value is $1.1m, double that of Perth and regional Australia.</p><p>It’s destructive because of the inequality that results: with so much wealth concentrated in the home, it stays with those who already own a house and within their families. For someone with little or no family housing equity behind them, it’s virtually impossible to break out of the cycle and build new wealth.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-15">skip past newsletter promotion</a><p id="EmailSignup-skip-link-15" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><figure id="6ae1d1cd-bab5-43b5-926f-9fa8828d9c95" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:16,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/lifeandstyle/2023/nov/21/there-are-no-self-help-books-for-moving-in-with-your-parents-in-middle-age-but-there-should-be&quot;,&quot;text&quot;:&quot; There are no self-help books for moving in with your parents in middle age, but there should be&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;elementId&quot;:&quot;6ae1d1cd-bab5-43b5-926f-9fa8828d9c95&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;display&quot;:0,&quot;theme&quot;:1,&quot;design&quot;:8}}" config="{&quot;renderingTarget&quot;:&quot;Web&quot;,&quot;darkModeAvailable&quot;:false}"></gu-island></figure><p>It will be impossible to return the price of housing to something less destructive – preferably to what it was when my parents and I bought our first houses – without purging the idea that housing is a means to create wealth as opposed to simply a place to live.</p><p>That’s easier said than done, as China’s president, Xi Jinping, has found. He has been banging on about this for five years, saying that housing is not for speculation but for living in, but no one seems to be listening in China, and no one would be listening here either if the prime minister was saying the same thing. But anyway, he’s not.</p><p>The growth in the value of Australian land has fundamentally changed society in two ways. First, generations of young Australians are being held back financially by the cost of shelter, especially if they live somewhere near a CBD and especially in Sydney or Melbourne; and second, the way wealth is generated has changed. Education and hard work are no longer the main determinants of how wealthy you are; now it comes down to where you live and what sort of house you inherit from your parents.</p><figure id="8022dd2c-5716-4720-a705-6471fbef2a72" data-spacefinder-role="thumbnail" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/4562ade57f7a4129034da31076429865f915ea81/0_0_1972_2764/master/1972.jpg?width=140&amp;dpr=2&amp;s=none" media="(min-width: 740px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 740px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/4562ade57f7a4129034da31076429865f915ea81/0_0_1972_2764/master/1972.jpg?width=140&amp;dpr=1&amp;s=none" media="(min-width: 740px)"><source srcset="https://i.guim.co.uk/img/media/4562ade57f7a4129034da31076429865f915ea81/0_0_1972_2764/master/1972.jpg?width=120&amp;dpr=2&amp;s=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/4562ade57f7a4129034da31076429865f915ea81/0_0_1972_2764/master/1972.jpg?width=120&amp;dpr=1&amp;s=none" media="(min-width: 320px)"><img alt="Quarterly Essay 92, The Great Divide by Alan Kohler" src="https://i.guim.co.uk/img/media/4562ade57f7a4129034da31076429865f915ea81/0_0_1972_2764/master/1972.jpg?width=120&amp;dpr=1&amp;s=none" width="120" height="168.1947261663286" loading="lazy"></picture></div></figure><p>It means Australia is less of an egalitarian meritocracy. Material success is now largely a function of geography, not accomplishment. Moreover, the geographic wealth gap is being widened by climate change, as floods and bushfires make living in large parts of the country uninsurable and financially crippling, but many families have no choice except to stay where they are because those areas are low-priced and they can’t afford to move.</p><p>The houses we live in, the places we call home and bring up our families in, have been turned into speculative investment assets by the 50 years of government policy failure, financialisation and greed that resulted in 25 years of exploding house prices. The doubling of prices as a proportion of both average income and GDP per capita has turned a house from somewhere to live while you get on with the rest of your life into the main thing, and for many people a terrible burden.</p><ul>
 <li><p><em>This is an edited extract of Alan Kohler’s <a href="https://www.quarterlyessay.com.au/essay/2023/11/the-great-divide" data-link-name="in body link">Quarterly Essay, The Great Divide: Australia’s housing mess and how to fix it</a>, published on Monday</em></p></li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Drive has lost user data (647 pts)]]></title>
            <link>https://support.google.com/drive/thread/245055606/google-drive-files-suddenly-disappeared-the-drive-literally-went-back-to-condition-in-may-2023?hl=en</link>
            <guid>38427864</guid>
            <pubDate>Mon, 27 Nov 2023 03:55:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://support.google.com/drive/thread/245055606/google-drive-files-suddenly-disappeared-the-drive-literally-went-back-to-condition-in-may-2023?hl=en">https://support.google.com/drive/thread/245055606/google-drive-files-suddenly-disappeared-the-drive-literally-went-back-to-condition-in-may-2023?hl=en</a>, See on <a href="https://news.ycombinator.com/item?id=38427864">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>  <header role="none"><div data-stats-ve="57"><header ng-non-bindable="" id="gb" role="banner"><div><div><div id="material-bar-custom-product-name"><p><a href="https://support.google.com/drive">Google Drive Help</a></p></div><div><form action="/drive/search" method="get" role="search"></form></div></div><div ng-non-bindable="" data-ogsr-up=""><p><a aria-label="Sign in" href="https://accounts.google.com/ServiceLogin?hl=en&amp;passive=true&amp;continue=http://support.google.com/drive/thread/245055606/google-drive-files-suddenly-disappeared-the-drive-literally-went-back-to-condition-in-may-2023%3Fhl%3Den&amp;ec=GAZAdQ" target="_top"><span>Sign in</span></a></p></div></div></header></div><div role="menubar"><div><p><a href="https://support.google.com/" role="link">Google Help</a></p></div><ul role="menu"><p><a href="https://support.google.com/drive/?hl=en" id="onebar-helpcenter" role="link"><li>Help Center</li></a><a href="https://support.google.com/drive/community?hl=en" id="onebar-community" role="link"><li>Community</li></a><a href="https://drive.google.com/" id="onebar-product" role="link"><li>Google Drive</li></a></p><p id="sc-burger-bottom" role="none"><a href="https://www.google.com/intl/en/privacy.html" id="onebar-privacy-policy" role="link"><li>Privacy Policy</li></a><a href="https://www.google.com/accounts/TOS" id="onebar-tos" role="link"><li>Terms of Service</li></a><a href="about:invalid#zjslayoutz" id="onebar-feedback" role="link"><li>Submit feedback</li></a></p></ul></div>   <div role="dialog"><p>Send feedback on...</p><div role="radiogroup"><div data-stats-id="send-content-feedback-radio" onclick="document.getElementById('content-feedback-radio').click();" role="none"><p><label for="content-feedback-radio" role="presentation">This help content &amp; information</label></p></div><div data-stats-id="send-helpcenter-feedback-radio" onclick="document.getElementById('helpcenter-feedback-radio').click();" role="none"><p><label for="helpcenter-feedback-radio" role="presentation">General Help Center experience</label></p></div></div></div><div role="navigation" data-stats-ve="32"><div @i18n:aria-label="Aria label for the helpcenter sections element" aria-label="Helpcenter sections"><ul><li><a aria-current="false" href="https://support.google.com/drive/?hl=en">Help Center</a></li><li><a aria-current="true" href="https://support.google.com/drive/community?hl=en">Community</a></li><li></li></ul></div><div><p><span><a aria-label="Google Drive (Open in a new window)" data-stats-ve="36" href="https://drive.google.com/" target="_blank"><span itemprop="title">Google Drive</span><svg viewBox="0 0 24 24"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></svg></a></span></p></div></div>   </header> <div id="hcfe-content" role="main">            <article class="page" sc-render-smart-button="false" itemscope="">         </article>       </div> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[College Sports Need Their Tax-Exempt Status Revoked (124 pts)]]></title>
            <link>https://www.bloomberg.com/opinion/articles/2023-11-25/jimbo-fisher-is-why-college-sports-need-to-lose-tax-exemption-status</link>
            <guid>38427818</guid>
            <pubDate>Mon, 27 Nov 2023 03:48:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/opinion/articles/2023-11-25/jimbo-fisher-is-why-college-sports-need-to-lose-tax-exemption-status">https://www.bloomberg.com/opinion/articles/2023-11-25/jimbo-fisher-is-why-college-sports-need-to-lose-tax-exemption-status</a>, See on <a href="https://news.ycombinator.com/item?id=38427818">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
    <section>
        <h3>Why did this happen?</h3>
        <p>Please make sure your browser supports JavaScript and cookies and that you are not
            blocking them from loading.
            For more information you can review our <a href="https://www.bloomberg.com/notices/tos">Terms of
                Service</a> and <a href="https://www.bloomberg.com/notices/tos">Cookie Policy</a>.</p>
    </section>
    <section>
        <h3>Need Help?</h3>
        <p>For inquiries related to this message please <a href="https://www.bloomberg.com/feedback">contact
            our support team</a> and provide the reference ID below.</p>
        <p>Block reference ID:</p>
    </section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Beej's Guide to Interprocess Communication (281 pts)]]></title>
            <link>https://beej.us/guide/bgipc/html/</link>
            <guid>38427448</guid>
            <pubDate>Mon, 27 Nov 2023 02:36:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://beej.us/guide/bgipc/html/">https://beej.us/guide/bgipc/html/</a>, See on <a href="https://news.ycombinator.com/item?id=38427448">Hacker News</a></p>
<div id="readability-page-1" class="page">

<nav id="TOC" role="doc-toc">
<ul>
<li><a href="#intro" id="toc-intro"><span>1</span> Intro</a>
<ul>
<li><a href="#audience" id="toc-audience"><span>1.1</span> Audience</a></li>
<li><a href="#platform-and-compiler" id="toc-platform-and-compiler"><span>1.2</span> Platform and Compiler</a></li>
<li><a href="#official-homepage" id="toc-official-homepage"><span>1.3</span> Official Homepage</a></li>
<li><a href="#email-policy" id="toc-email-policy"><span>1.4</span> Email Policy</a></li>
<li><a href="#mirroring" id="toc-mirroring"><span>1.5</span> Mirroring</a></li>
<li><a href="#note-for-translators" id="toc-note-for-translators"><span>1.6</span> Note for Translators</a></li>
<li><a href="#copyright-and-distribution" id="toc-copyright-and-distribution"><span>1.7</span> Copyright and Distribution</a></li>
</ul></li>
<li><a href="#fork" id="toc-fork"><span>2</span> A <code>fork()</code> Primer</a>
<ul>
<li><a href="#seek-ye-the-gorge-of-eternal-peril" id="toc-seek-ye-the-gorge-of-eternal-peril"><span>2.1</span> “Seek ye the Gorge of Eternal Peril”</a></li>
<li><a href="#im-mentally-prepared-give-me-the-button" id="toc-im-mentally-prepared-give-me-the-button"><span>2.2</span> `“I’m mentally prepared! Give me <em>The Button</em>!”</a></li>
<li><a href="#summary" id="toc-summary"><span>2.3</span> Summary</a></li>
</ul></li>
<li><a href="#signals" id="toc-signals"><span>3</span> Signals</a>
<ul>
<li><a href="#catching-signals-for-fun-and-profit" id="toc-catching-signals-for-fun-and-profit"><span>3.1</span> Catching Signals for Fun and Profit!</a></li>
<li><a href="#the-handler-is-not-omnipotent" id="toc-the-handler-is-not-omnipotent"><span>3.2</span> The Handler is not Omnipotent</a></li>
<li><a href="#what-about-signal" id="toc-what-about-signal"><span>3.3</span> What about <code>signal()</code></a></li>
<li><a href="#some-signals-to-make-you-popular" id="toc-some-signals-to-make-you-popular"><span>3.4</span> Some signals to make you popular</a></li>
<li><a href="#what-i-have-glossed-over" id="toc-what-i-have-glossed-over"><span>3.5</span> What I have Glossed Over</a></li>
</ul></li>
<li><a href="#pipes" id="toc-pipes"><span>4</span> Pipes</a>
<ul>
<li><a href="#these-pipes-are-clean" id="toc-these-pipes-are-clean"><span>4.1</span> “These pipes are clean!”</a></li>
<li><a href="#fork-and-pipeyou-have-the-power" id="toc-fork-and-pipeyou-have-the-power"><span>4.2</span> <code>fork()</code> and <code>pipe()</code>—you have the power!</a></li>
<li><a href="#fork-and-pipeyou-have-the-power-1" id="toc-fork-and-pipeyou-have-the-power-1"><span>4.3</span> <code>fork()</code> and <code>pipe()</code>—you have the power!</a></li>
<li><a href="#the-search-for-pipe-as-we-know-it" id="toc-the-search-for-pipe-as-we-know-it"><span>4.4</span> The search for Pipe as we know it</a></li>
<li><a href="#summary-1" id="toc-summary-1"><span>4.5</span> Summary</a></li>
</ul></li>
<li><a href="#fifos" id="toc-fifos"><span>5</span> FIFOs</a>
<ul>
<li><a href="#a-new-fifo-is-born" id="toc-a-new-fifo-is-born"><span>5.1</span> A New FIFO is Born</a></li>
<li><a href="#producers-and-consumers" id="toc-producers-and-consumers"><span>5.2</span> Producers and Consumers</a></li>
<li><a href="#fifondelay" id="toc-fifondelay"><span>5.3</span> <code>O_NDELAY</code>! I’m UNSTOPPABLE!</a></li>
<li><a href="#concluding-notes" id="toc-concluding-notes"><span>5.4</span> Concluding Notes</a></li>
</ul></li>
<li><a href="#flocking" id="toc-flocking"><span>6</span> File Locking</a>
<ul>
<li><a href="#setting-a-lock" id="toc-setting-a-lock"><span>6.1</span> Setting a lock</a></li>
<li><a href="#clearing-a-lock" id="toc-clearing-a-lock"><span>6.2</span> Clearing a lock</a></li>
<li><a href="#a-demo-program" id="toc-a-demo-program"><span>6.3</span> A demo program</a></li>
<li><a href="#summary-2" id="toc-summary-2"><span>6.4</span> Summary</a></li>
</ul></li>
<li><a href="#mq" id="toc-mq"><span>7</span> Message Queues</a>
<ul>
<li><a href="#wheres-my-queue" id="toc-wheres-my-queue"><span>7.1</span> Where’s my queue?</a></li>
<li><a href="#mqftok" id="toc-mqftok"><span>7.2</span> “Are you the Key Master?”</a></li>
<li><a href="#sending-to-the-queue" id="toc-sending-to-the-queue"><span>7.3</span> Sending to the queue</a></li>
<li><a href="#receiving-from-the-queue" id="toc-receiving-from-the-queue"><span>7.4</span> Receiving from the queue</a></li>
<li><a href="#destroying-a-message-queue" id="toc-destroying-a-message-queue"><span>7.5</span> Destroying a message queue</a></li>
<li><a href="#sample-programs-anyone" id="toc-sample-programs-anyone"><span>7.6</span> Sample programs, anyone?</a></li>
<li><a href="#summary-3" id="toc-summary-3"><span>7.7</span> Summary</a></li>
</ul></li>
<li><a href="#semaphores" id="toc-semaphores"><span>8</span> Semaphores</a>
<ul>
<li><a href="#grabbing-some-semaphores" id="toc-grabbing-some-semaphores"><span>8.1</span> Grabbing some semaphores</a></li>
<li><a href="#controlling-your-semaphores-with-semctl" id="toc-controlling-your-semaphores-with-semctl"><span>8.2</span> Controlling your semaphores with <code>semctl()</code></a></li>
<li><a href="#semop-atomic-power" id="toc-semop-atomic-power"><span>8.3</span> <code>semop()</code>: Atomic power!</a></li>
<li><a href="#destroying-a-semaphore" id="toc-destroying-a-semaphore"><span>8.4</span> Destroying a semaphore</a></li>
<li><a href="#sample-programs" id="toc-sample-programs"><span>8.5</span> Sample Programs</a></li>
<li><a href="#summary-4" id="toc-summary-4"><span>8.6</span> Summary</a></li>
</ul></li>
<li><a href="#shm" id="toc-shm"><span>9</span> Shared Memory Segments</a>
<ul>
<li><a href="#creating-the-segment-and-connecting" id="toc-creating-the-segment-and-connecting"><span>9.1</span> Creating the segment and connecting</a></li>
<li><a href="#attach-megetting-a-pointer-to-the-segment" id="toc-attach-megetting-a-pointer-to-the-segment"><span>9.2</span> Attach me—getting a pointer to the segment</a></li>
<li><a href="#reading-and-writing" id="toc-reading-and-writing"><span>9.3</span> Reading and Writing</a></li>
<li><a href="#detaching-from-and-deleting-segments" id="toc-detaching-from-and-deleting-segments"><span>9.4</span> Detaching from and deleting segments</a></li>
<li><a href="#shmcon" id="toc-shmcon"><span>9.5</span> Concurrency</a></li>
<li><a href="#sample-code" id="toc-sample-code"><span>9.6</span> Sample code</a></li>
</ul></li>
<li><a href="#mmap" id="toc-mmap"><span>10</span> Memory Mapped Files</a>
<ul>
<li><a href="#mapmake" id="toc-mapmake"><span>10.1</span> Mapmake</a></li>
<li><a href="#unmapping-the-file" id="toc-unmapping-the-file"><span>10.2</span> Unmapping the file</a></li>
<li><a href="#concurrency-again" id="toc-concurrency-again"><span>10.3</span> Concurrency, again?!</a></li>
<li><a href="#a-simple-sample" id="toc-a-simple-sample"><span>10.4</span> A simple sample</a></li>
<li><a href="#observations-on-memory-mapping" id="toc-observations-on-memory-mapping"><span>10.5</span> Observations on memory mapping</a></li>
<li><a href="#summary-5" id="toc-summary-5"><span>10.6</span> Summary</a></li>
</ul></li>
<li><a href="#unixsock" id="toc-unixsock"><span>11</span> Unix Sockets</a>
<ul>
<li><a href="#overview" id="toc-overview"><span>11.1</span> Overview</a></li>
<li><a href="#what-to-do-to-be-a-server" id="toc-what-to-do-to-be-a-server"><span>11.2</span> What to do to be a Server</a></li>
<li><a href="#what-to-do-to-be-a-client" id="toc-what-to-do-to-be-a-client"><span>11.3</span> What to do to be a client</a></li>
<li><a href="#socketpairquick-full-duplex-pipes" id="toc-socketpairquick-full-duplex-pipes"><span>11.4</span> <code>socketpair()</code>—quick full-duplex pipes</a></li>
</ul></li>
<li><a href="#references" id="toc-references"><span>12</span> More IPC Resources</a>
<ul>
<li><a href="#books" id="toc-books"><span>12.1</span> Books</a></li>
<li><a href="#other-online-documentation" id="toc-other-online-documentation"><span>12.2</span> Other online documentation</a></li>
<li><a href="#linux-man-pages" id="toc-linux-man-pages"><span>12.3</span> Linux man pages</a></li>
</ul></li>
</ul>
</nav>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- No hyphenation -->
<!-- ======================================================= -->
<!-- Introduction -->
<!-- ======================================================= -->
<h2 data-number="1" id="intro"> Intro</h2>
<p>You know what’s easy? <code>fork()</code> is easy. You can fork off new processes all day and have them deal with individual chunks of a problem in parallel. Of course, its easiest if the processes don’t have to communicate with one another while they’re running and can just sit there doing their own thing.</p>
<p>However, when you start <code>fork()</code>’ing processes, you immediately start to think of the neat multi-user things you could do if the processes could talk to each other easily. So you try making a global array and then <code>fork()</code>’ing to see if it is shared. (That is, see if both the child and parent process use the same array.) Soon, of course, you find that the child process has its own copy of the array and the parent is oblivious to whatever changes the child makes to it.</p>
<p>How do you get these guys to talk to one another, share data structures, and be generally amicable? This document discusses several methods of <em>Interprocess Communication</em> (IPC) that can accomplish this, some of which are better suited to certain tasks than others.</p>
<!-- ======================================================= -->
<!-- Audience -->
<!-- ======================================================= -->
<h2 data-number="1.1" id="audience"> Audience</h2>
<p>If you know C or C++ and are pretty good using a Unix environment (or other POSIXey environment that supports these system calls) these documents are for you. If you aren’t that good, well, don’t sweat it—you’ll be able to figure it out. I make the assumption, however, that you have a fair smattering of C programming experience.</p>
<p>As with <a href="https://beej.us/guide/bgnet">Beej’s Guide to Network Programming Using Internet Sockets</a><a href="#fn1" id="fnref1" role="doc-noteref"><sup>1</sup></a>, these documents are meant to springboard the aforementioned user into the realm of IPC by delivering a concise overview of various IPC techniques. This is not the definitive set of documents that cover this subject, by any means. Like I said, it is designed to simply give you a foothold in this, the exciting world of IPC.</p>
<!-- ======================================================= -->
<!-- Platform and Compiler -->
<!-- ======================================================= -->
<h2 data-number="1.2" id="platform-and-compiler"> Platform and Compiler</h2>
<p>The examples in this document were compiled under Linux using <code>gcc</code>. They should compile anywhere a good Unix compiler is available.</p>
<!-- ======================================================= -->
<!-- Homepage -->
<!-- ======================================================= -->
<h2 data-number="1.3" id="official-homepage"> Official Homepage</h2>
<p>This official location of this document is <a href="https://beej.us/guide/bgipc"><code>https://beej.us/guide/bgipc/</code></a><a href="#fn2" id="fnref2" role="doc-noteref"><sup>2</sup></a>.</p>
<!-- ======================================================= -->
<!-- Email policy -->
<!-- ======================================================= -->
<h2 data-number="1.4" id="email-policy"> Email Policy</h2>
<p>I’m generally available to help out with email questions so feel free to write in, but I can’t guarantee a response. I lead a pretty busy life and there are times when I just can’t answer a question you have. When that’s the case, I usually just delete the message. It’s nothing personal; I just won’t ever have the time to give the detailed answer you require.</p>
<p>As a rule, the more complex the question, the less likely I am to respond. If you can narrow down your question before mailing it and be sure to include any pertinent information (like platform, compiler, error messages you’re getting, and anything else you think might help me troubleshoot), you’re much more likely to get a response.</p>
<p>If you don’t get a response, hack on it some more, try to find the answer, and if it’s still elusive, then write me again with the information you’ve found and hopefully it will be enough for me to help out.</p>
<p>Now that I’ve badgered you about how to write and not write me, I’d just like to let you know that I <em>fully</em> appreciate all the praise the guide has received over the years. It’s a real morale boost, and it gladdens me to hear that it is being used for good! <code>:-)</code> Thank you!</p>
<!-- ======================================================= -->
<!-- Mirroring -->
<!-- ======================================================= -->
<h2 data-number="1.5" id="mirroring"> Mirroring</h2>
<p>You are more than welcome to mirror this site, whether publicly or privately. If you publicly mirror the site and want me to link to it from the main page, drop me a line at <a href="mailto:beej@beej.us"><code>beej@beej.us</code></a>.</p>
<!-- ======================================================= -->
<!-- Translators -->
<!-- ======================================================= -->
<h2 data-number="1.6" id="note-for-translators"> Note for Translators</h2>
<p>If you want to translate the guide into another language, write me at [<code>beej@beej.us</code>] and I’ll link to your translation from the main page. Feel free to add your name and contact info to the translation.</p>
<p>Please note the license restrictions in the Copyright and Distribution section, below.</p>
<!-- ======================================================= -->
<!-- Copyright -->
<!-- ======================================================= -->
<h2 data-number="1.7" id="copyright-and-distribution"> Copyright and Distribution</h2>
<p>Beej’s Guide to Network Programming is Copyright © 2021 Brian “Beej Jorgensen” Hall.</p>
<p>With specific exceptions for source code and translations, below, this work is licensed under the Creative Commons Attribution-Noncommercial-No Derivative Works 3.0 License. To view a copy of this license, visit <a href="https://creativecommons.org/licenses/by-nc-nd/3.0/"><code>https://creativecommons.org/licenses/by-nc-nd/3.0/</code></a> or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.</p>
<p>One specific exception to the “No Derivative Works” portion of the license is as follows: this guide may be freely translated into any language, provided the translation is accurate, and the guide is reprinted in its entirety. The same license restrictions apply to the translation as to the original guide. The translation may also include the name and contact information for the translator.</p>
<p>The C source code presented in this document is hereby granted to the public domain, and is completely free of any license restriction.</p>
<p>Educators are freely encouraged to recommend or supply copies of this guide to their students.</p>
<p>Contact <a href="mailto:beej@beej.us"><code>beej@beej.us</code></a> for more information.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- Fork -->
<!-- ======================================================= -->
<h2 data-number="2" id="fork"> A <code>fork()</code> Primer</h2>
<p>“Fork”, aside from being one of those words that begins to appear very strange after you’ve typed it repeatedly, refers to the way Unix creates new processes. This document gives a quick and dirty <code>fork()</code> primer, since use of that system call will pop up in other IPC documents. If you already know all about <code>fork()</code>, you might as well skip this document.</p>
<!-- ======================================================= -->
<!-- "Seek ye the Gorge of Eternal Peril" -->
<!-- ======================================================= -->
<h2 data-number="2.1" id="seek-ye-the-gorge-of-eternal-peril"> “Seek ye the Gorge of Eternal Peril”</h2>
<p><code>fork()</code> can be thought of as a ticket to power. Power can sometimes be thought of as a ticket to destruction. Therefore, you should be careful while messing with <code>fork()</code> on your system, especially while people are cranking their nearly-late semester projects and are ready to nuke the first organism that brings the system to a halt. It’s not that you should never play with <code>fork()</code>, you just have to be cautious. It’s kind of like sword—swallowing; if you’re careful, you won’t disembowel yourself.</p>
<p>Since you’re still here, I suppose I’d better deliver the goods. Like I said, <code>fork()</code> is how Unix starts new processes. Basically, how it works is this: the parent process (the one that already exists) <code>fork()</code>’s a child process (the new one). The child process gets a <em>copy</em> of the parent’s data. <em>Voila!</em> You have two processes where there was only one!</p>
<p>Of course, there are all kinds of gotchas you must deal with when <code>fork()</code>ing processes or else your sysadmin will get irate with you when you fill of the system process table and they have to punch the reset button on the machine.</p>
<p>First of all, you should know something of process behavior under Unix. When a process dies, it doesn’t really go away completely. It’s dead, so it’s no longer running, but a small remnant is waiting around for the parent process to pick up. This remnant contains the return value from the child process and some other goop. So after a parent process <code>fork()</code>s a child process, it must <code>wait()</code> (or <code>waitpid()</code>) for that child process to exit. It is this act of <code>wait()</code>ing that allows all remnants of the child to vanish.</p>
<p>Naturally, there is an exception to the above rule: the parent can ignore the <code>SIGCHLD</code> signal (<code>SIGCLD</code> on some older systems) and then it won’t have to <code>wait()</code>. This can be done (on systems that support it) like this:</p>
<div id="cb1"><pre><code><span id="cb1-1">main<span>()</span></span>
<span id="cb1-2"><span>{</span></span>
<span id="cb1-3">    signal<span>(</span>SIGCHLD<span>,</span> SIG_IGN<span>);</span>  <span>/* now I don't have to wait()! */</span></span>
<span id="cb1-4">    <span>.</span></span>
<span id="cb1-5">    <span>.</span></span>
<span id="cb1-6">    fork<span>();</span>fork<span>();</span>fork<span>();</span>  <span>/* Rabbits, rabbits, rabbits! */</span></span></code></pre></div>
<p>Now, when a child process dies and has not been <code>wait()</code>ed on, it will usually show up in a <code>ps</code> listing as “<code>&lt;defunct&gt;</code>”. It will remain this way until the parent <code>wait()</code>s on it, or it is dealt with as mentioned below.</p>
<p>Now there is another rule you must learn: when the parent dies before it <code>wait()</code>s for the child (assuming it is not ignoring <code>SIGCHLD</code>), the child is reparented to the <code>init</code> process (PID 1). This is not a problem if the child is still living well and under control. However, if the child is already defunct, we’re in a bit of a bind. See, the original parent can no longer <code>wait()</code>, since it’s dead. So how does <code>init</code> know to <code>wait()</code> for these <em>zombie processes</em>?</p>
<p>The answer: it’s magic! Well, on some systems, <code>init</code> periodically destroys all the defunct processes it owns. On other systems, it outright refuses to become the parent of any defunct processes, instead destroying them immediately. If you’re using one of the former systems, you could easily write a loop that fills up the process table with defunct processes owned by <code>init</code>. Wouldn’t that make your sysadmin happy?</p>
<p>Your mission: make sure your parent process either ignores <code>SIGHCLD</code>, or <code>wait()</code>s for all the children it <code>fork()</code>s. Well, you don’t <em>always</em> have to do that (like if you’re starting a daemon or something), but you code with caution if you’re a <code>fork()</code> novice. Otherwise, feel free to blast off into the stratosphere.</p>
<p>To summerize: children become defunct until the parent <code>wait()</code>s, unless the parent is ignoring <code>SIGCHLD</code>. Furthermore, children (living or defunct) whose parents die without <code>wait()</code>ing for them (again assuming the parent is not ignoring <code>SIGCHLD</code>) become children of the <code>init</code> process, which deals with them heavy-handedly.</p>
<!-- ======================================================= -->
<!-- "I'm mentally prepared! Give me The Button!" -->
<!-- ======================================================= -->
<h2 data-number="2.2" id="im-mentally-prepared-give-me-the-button"> `“I’m mentally prepared! Give me <em>The Button</em>!”</h2>
<p>Right! Here’s an <a href="https://beej.us/guide/bgipc/source/examples/fork1.c">example</a><a href="#fn3" id="fnref3" role="doc-noteref"><sup>3</sup></a> of how to use <code>fork()</code>:</p>
<div id="cb2"><pre><code><span id="cb2-1"><a href="#cb2-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6"></a><span>#include </span><span>&lt;sys/wait.h&gt;</span></span>
<span id="cb2-7"><a href="#cb2-7"></a></span>
<span id="cb2-8"><a href="#cb2-8"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb2-9"><a href="#cb2-9"></a><span>{</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>    pid_t pid<span>;</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>    <span>int</span> rv<span>;</span></span>
<span id="cb2-12"><a href="#cb2-12"></a></span>
<span id="cb2-13"><a href="#cb2-13"></a>    <span>switch</span><span>(</span>pid <span>=</span> fork<span>())</span> <span>{</span></span>
<span id="cb2-14"><a href="#cb2-14"></a>    <span>case</span> <span>-</span><span>1</span><span>:</span></span>
<span id="cb2-15"><a href="#cb2-15"></a>        perror<span>(</span><span>"fork"</span><span>);</span>  <span>/* something went wrong */</span></span>
<span id="cb2-16"><a href="#cb2-16"></a>        exit<span>(</span><span>1</span><span>);</span>         <span>/* parent exits */</span></span>
<span id="cb2-17"><a href="#cb2-17"></a></span>
<span id="cb2-18"><a href="#cb2-18"></a>    <span>case</span> <span>0</span><span>:</span></span>
<span id="cb2-19"><a href="#cb2-19"></a>        printf<span>(</span><span>" CHILD: This is the child process!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb2-20"><a href="#cb2-20"></a>        printf<span>(</span><span>" CHILD: My PID is </span><span>%d\n</span><span>"</span><span>,</span> getpid<span>());</span></span>
<span id="cb2-21"><a href="#cb2-21"></a>        printf<span>(</span><span>" CHILD: My parent's PID is </span><span>%d\n</span><span>"</span><span>,</span> getppid<span>());</span></span>
<span id="cb2-22"><a href="#cb2-22"></a>        printf<span>(</span><span>" CHILD: Enter my exit status (make it small): "</span><span>);</span></span>
<span id="cb2-23"><a href="#cb2-23"></a>        scanf<span>(</span><span>" </span><span>%d</span><span>"</span><span>,</span> <span>&amp;</span>rv<span>);</span></span>
<span id="cb2-24"><a href="#cb2-24"></a>        printf<span>(</span><span>" CHILD: I'm outta here!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb2-25"><a href="#cb2-25"></a>        exit<span>(</span>rv<span>);</span></span>
<span id="cb2-26"><a href="#cb2-26"></a></span>
<span id="cb2-27"><a href="#cb2-27"></a>    <span>default</span><span>:</span></span>
<span id="cb2-28"><a href="#cb2-28"></a>        printf<span>(</span><span>"PARENT: This is the parent process!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb2-29"><a href="#cb2-29"></a>        printf<span>(</span><span>"PARENT: My PID is </span><span>%d\n</span><span>"</span><span>,</span> getpid<span>());</span></span>
<span id="cb2-30"><a href="#cb2-30"></a>        printf<span>(</span><span>"PARENT: My child's PID is </span><span>%d\n</span><span>"</span><span>,</span> pid<span>);</span></span>
<span id="cb2-31"><a href="#cb2-31"></a>        printf<span>(</span><span>"PARENT: I'm now waiting for my child to exit()...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb2-32"><a href="#cb2-32"></a>        wait<span>(&amp;</span>rv<span>);</span></span>
<span id="cb2-33"><a href="#cb2-33"></a>        printf<span>(</span><span>"PARENT: My child's exit status is: </span><span>%d\n</span><span>"</span><span>,</span> WEXITSTATUS<span>(</span>rv<span>));</span></span>
<span id="cb2-34"><a href="#cb2-34"></a>        printf<span>(</span><span>"PARENT: I'm outta here!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb2-35"><a href="#cb2-35"></a>    <span>}</span></span>
<span id="cb2-36"><a href="#cb2-36"></a></span>
<span id="cb2-37"><a href="#cb2-37"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb2-38"><a href="#cb2-38"></a><span>}</span></span></code></pre></div>
<p>There is a ton of stuff to note from this example, so we’ll just start from the top, shall we?</p>
<p><code>pid_t</code> is the generic process type. Under Unix, this is a <code>short</code>. So, I call <code>fork()</code> and save the return value in the <code>pid</code> variable. <code>fork()</code> is easy, since it can only return three things:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Return Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td>If it returns <code>0</code>, you are the child process. You can get the parent’s PID by calling <code>getppid()</code>. Of course, you can get your own PID by calling <code>getpid()</code>.</td>
</tr>
<tr>
<td><code>-1</code></td>
<td>If it returns <code>-1</code>, something went wrong, and no child was created. Use <code>perror()</code> to see what happened. You’ve probably filled the process table—if you turn around you’ll see your sysadmin coming at you with a fireaxe.</td>
</tr>
<tr>
<td>Anthing else</td>
<td>Any other value returned by <code>fork()</code> means that you’re the parent and the value returned is the PID of your child. This is the only way to get the PID of your child, since there is no <code>getcpid()</code> call (obviously due to the one-to-many relationship between parents and children.)</td>
</tr>
</tbody>
</table>
<p>When the child finally calls <code>exit()</code>, the return value passed will arrive at the parent when it <code>wait()</code>s. As you can see from the <code>wait()</code> call, there’s some weirdness coming into play when we print the return value. What’s this <code>WEXITSTATUS()</code> stuff, anyway? Well, that is a macro that extracts the child’s actual return value from the value <code>wait()</code> returns. Yes, there is more information buried in that <code>int</code>. I’ll let you look it up on your own.</p>
<p>“How,” you ask, “does <code>wait()</code> know which process to wait for? I mean, since the parent can have multiple children, which one does <code>wait()</code> actually wait for?” The answer is simple, my friends: it waits for whichever one happens to exit first. If you must, you can specify exactly which child to wait for by calling <code>waitpid()</code> with your child’s PID as an argument.</p>
<p>Another interesting thing to note from the above example is that both parent and child use the <code>rv</code> variable. Does this mean that it is shared between the processes? <em>NO!</em> If it was, I wouldn’t have written all this IPC stuff. <em>Each process has its own copy of all variables.</em> There is a lot of other stuff that is copied, too, but you’ll have to read the <code>man</code> page to see what.</p>
<p>A final note about the above program: I used a switch statement to handle the <code>fork()</code>, and that’s not exactly typical. Most often you’ll see an <statement>if</statement> statement there; sometimes it’s as short as:</p>
<div id="cb3"><pre><code><span id="cb3-1"><span>if</span> <span>(!</span>fork<span>())</span> <span>{</span></span>
<span id="cb3-2">        printf<span>(</span><span>"I'm the child!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb3-3">        exit<span>(</span><span>0</span><span>);</span></span>
<span id="cb3-4">    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb3-5">        printf<span>(</span><span>"I'm the parent!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb3-6">        wait<span>(</span>NULL<span>);</span></span>
<span id="cb3-7">    <span>}</span></span></code></pre></div>
<p>Oh yeah—the above example also demonstrates how to <code>wait()</code> if you don’t care what the return value of the child is: you just call it with <code>NULL</code> as the argument.</p>
<!-- ======================================================= -->
<!-- Fork summary -->
<!-- ======================================================= -->
<h2 data-number="2.3" id="summary"> Summary</h2>
<p>Now you know all about the mighty <code>fork()</code> function! It’s more useful that a wet bag of worms in most computationally intensive situations, and you can amaze your friends at parties. I swear. Try it.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- Signals -->
<!-- ======================================================= -->
<h2 data-number="3" id="signals"> Signals</h2>
<p>There is a sometimes useful method for one process to bug another: signals. Basically, one process can “raise” a signal and have it delivered to another process. The destination process’s signal handler (just a function) is invoked and the process can handle it.</p>
<p>The devil’s in the details, of course, and in actuality what you are permitted to do safely inside your signal handler is rather limited. Nevertheless, signals provide a useful service.</p>
<p>For example, one process might want to stop another one, and this can be done by sending the signal <code>SIGSTOP</code> to that process. To continue, the process has to receive signal <code>SIGCONT</code>. How does the process know to do this when it receives a certain signal? Well, many signals are predefined and the process has a default signal handler to deal with it.</p>
<p>A default handler? Yes. Take <code>SIGINT</code> for example. This is the interrupt signal that a process receives when the user hits <code>^C</code>. The default signal handler for <code>SIGINT</code> causes the process to exit! Sound familiar? Well, as you can imagine, you can override the <code>SIGINT</code> to do whatever you want (or nothing at all!) You could have your process <code>printf()</code> “Interrupt?! No way, Jose!” and go about its merry business.</p>
<p>So now you know that you can have your process respond to just about any signal in just about any way you want. Naturally, there are exceptions because otherwise it would be too easy to understand. Take the ever popular <code>SIGKILL</code>, signal #9. Have you ever typed “<code>kill -9 _nnnn_</code>” to kill a runaway process? You were sending it <code>SIGKILL</code>. Now you might also remember that no process can get out of a “<code>kill -9</code>”, and you would be correct. <code>SIGKILL</code> is one of the signals you <code>can't</code> add your own signal handler for. The aforementioned <code>SIGSTOP</code> is also in this category.</p>
<p>(Aside: you often use the Unix “<code>kill</code>” command without specifying a signal to send…so what signal is it? The answer: <code>SIGTERM</code>. You can write your own handler for <code>SIGTERM</code> so your process won’t respond to a regular “<code>kill</code>”, and the user must then use “<code>kill -9</code>” to destroy the process.)</p>
<p>Are all the signals predefined? What if you want to send a signal that has significance that only you understand to a process? There are two signals that aren’t reserved: <code>SIGUSR1</code> and <code>SIGUSER2</code>. You are free to use these for whatever you want and handle them in whatever way you choose. (For example, my cd player program might respond to <code>SIGUSR1</code> by advancing to the next track. In this way, I could control it from the command line by typing “<code>kill -SIGUSR1</code>nnnn``”.)</p>
<h2 data-number="3.1" id="catching-signals-for-fun-and-profit"> Catching Signals for Fun and Profit!</h2>
<p>As you can guess the Unix “kill” command is one way to send signals to a process. By sheer unbelievable coincidence, there is a system call called <code>kill()</code> which does the same thing. It takes for its argument a signal number (as defined in <code>signal.h</code>) and a process ID. Also, there is a library routine called <code>raise()</code> which can be used to raise a signal within the same process.</p>
<p>The burning question remains: how do you catch a speeding <code>SIGTERM</code>? You need to call <code>sigaction()</code> and tell it all the gritty details about which signal you want to catch and which function you want to call to handle it.</p>
<p>Here’s the <code>sigaction()</code> breakdown:</p>
<div id="cb4"><pre><code><span id="cb4-1"><span>int</span> sigaction<span>(</span><span>int</span> sig<span>,</span> <span>const</span> <span>struct</span> sigaction <span>*</span>act<span>,</span></span>
<span id="cb4-2">              <span>struct</span> sigaction <span>*</span>oact<span>);&lt;/</span>code<span>&gt;</span></span></code></pre></div>
<p>The first parameter, <code>sig</code> is which signal to catch. This can be (probably “should” be) a symbolic name from <code>signal.h</code> along the lines of <code>SIGINT</code>. That’s the easy bit.</p>
<p>The next field, <code>act</code> is a pointer to a <code>struct sigaction</code> which has a bunch of fields that you can fill in to control the behavior of the signal handler. (A pointer to the signal handler function itself included in the <code>struct</code>.)</p>
<p>Lastly <code>oact</code> can be <code>NULL</code>, but if not, it returns the <em>old</em> signal handler information that was in place before. This is useful if you want to restore the previous signal handler at a later time.</p>
<p>We’ll focus on these three fields in the <code>struct sigaction</code>:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Signal</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sa_handler</code></td>
<td>The signal handler function (or <code>SIG_IGN</code> to ignore the signal)</td>
</tr>
<tr>
<td><code>sa_mask</code></td>
<td>A set of signals to block while this one is being handled</td>
</tr>
<tr>
<td><code>sa_flags</code></td>
<td>Flags to modify the behavior of the handler, or <code>0</code></td>
</tr>
</tbody>
</table>
<p>What about that <code>sa_mask</code> field? When you’re handling a signal, you might want to block other signals from being delivered, and you can do this by adding them to the <code>sa_mask</code> It’s a “set”, which means you can do normal set operations to manipulate them: <code>sigemptyset()</code>, <code>sigfillset()</code>, <code>sigaddset()</code>, <code>sigdelset()</code>, and <code>sigismember()</code>. In this example, we’ll just clear the set and not block any other signals.</p>
<p>Examples always help! Here’s one that handled <code>SIGINT</code>, which can be delivered by hitting <code>^C</code>, called <a href="https://beej.us/guide/bgipc/source/examples/sigint.c"><code>sigint.c</code></a><a href="#fn4" id="fnref4" role="doc-noteref"><sup>4</sup></a>:</p>
<div id="cb5"><pre><code><span id="cb5-1"><a href="#cb5-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5"></a><span>#include </span><span>&lt;signal.h&gt;</span></span>
<span id="cb5-6"><a href="#cb5-6"></a></span>
<span id="cb5-7"><a href="#cb5-7"></a><span>void</span> sigint_handler<span>(</span><span>int</span> sig<span>)</span></span>
<span id="cb5-8"><a href="#cb5-8"></a><span>{</span></span>
<span id="cb5-9"><a href="#cb5-9"></a>        <span>/* using a char[] so that sizeof will work */</span></span>
<span id="cb5-10"><a href="#cb5-10"></a>    <span>const</span> <span>char</span> msg<span>[]</span> <span>=</span> <span>"Ahhh! SIGINT!</span><span>\n</span><span>"</span><span>;</span></span>
<span id="cb5-11"><a href="#cb5-11"></a>    write<span>(</span><span>0</span><span>,</span> msg<span>,</span> <span>sizeof</span><span>(</span>msg<span>));</span></span>
<span id="cb5-12"><a href="#cb5-12"></a><span>}</span></span>
<span id="cb5-13"><a href="#cb5-13"></a></span>
<span id="cb5-14"><a href="#cb5-14"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb5-15"><a href="#cb5-15"></a><span>{</span></span>
<span id="cb5-16"><a href="#cb5-16"></a>    <span>char</span> s<span>[</span><span>200</span><span>];</span></span>
<span id="cb5-17"><a href="#cb5-17"></a>        <span>struct</span> sigaction sa <span>=</span> <span>{</span></span>
<span id="cb5-18"><a href="#cb5-18"></a>            <span>.</span>sa_handler <span>=</span> sigint_handler<span>,</span></span>
<span id="cb5-19"><a href="#cb5-19"></a>            <span>.</span>sa_flags <span>=</span> <span>0</span><span>,</span> <span>// or SA_RESTART</span></span>
<span id="cb5-20"><a href="#cb5-20"></a>            <span>.</span>sa_mask <span>=</span> <span>0</span><span>,</span></span>
<span id="cb5-21"><a href="#cb5-21"></a>        <span>};</span></span>
<span id="cb5-22"><a href="#cb5-22"></a></span>
<span id="cb5-23"><a href="#cb5-23"></a>    <span>if</span> <span>(</span>sigaction<span>(</span>SIGINT<span>,</span> <span>&amp;</span>sa<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb5-24"><a href="#cb5-24"></a>        perror<span>(</span><span>"sigaction"</span><span>);</span></span>
<span id="cb5-25"><a href="#cb5-25"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb5-26"><a href="#cb5-26"></a>    <span>}</span></span>
<span id="cb5-27"><a href="#cb5-27"></a></span>
<span id="cb5-28"><a href="#cb5-28"></a>    printf<span>(</span><span>"Enter a string:</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb5-29"><a href="#cb5-29"></a></span>
<span id="cb5-30"><a href="#cb5-30"></a>    <span>if</span> <span>(</span>fgets<span>(</span>s<span>,</span> <span>sizeof</span> s<span>,</span> stdin<span>)</span> <span>==</span> NULL<span>)</span></span>
<span id="cb5-31"><a href="#cb5-31"></a>        perror<span>(</span><span>"fgets"</span><span>);</span></span>
<span id="cb5-32"><a href="#cb5-32"></a>    <span>else</span> </span>
<span id="cb5-33"><a href="#cb5-33"></a>        printf<span>(</span><span>"You entered: </span><span>%s\n</span><span>"</span><span>,</span> s<span>);</span></span>
<span id="cb5-34"><a href="#cb5-34"></a></span>
<span id="cb5-35"><a href="#cb5-35"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb5-36"><a href="#cb5-36"></a><span>}</span></span></code></pre></div>
<p>This program has two functions: <code>main()</code> which sets up the signal handler (using the <code>sigaction()</code> call), and <code>sigint_handler()</code> which is the signal handler, itself.</p>
<p>What happens when you run it? If you are in the midst of entering a string and you hit <code>^C</code>, the call to <code>gets()</code> fails and sets the global variable <code>errno</code> to <code>EINTR</code>. Additionally, <code>sigint_handler()</code> is called and does its routine, so you actually see:</p>
<pre><code>Enter a string:
the quick brown fox jum^CAhhh! SIGINT!
fgets: Interrupted system call</code></pre>
<p>And then it exits. Hey—what kind of handler is this, if it just exits anyway?</p>
<p>Well, we have a couple things at play, here. First, you’ll notice that the signal handler was called, because it printed “Ahhh! SIGINT!” But then <code>fgets()</code> returns an error, namely <code>EINTR</code>, or “Interrupted system call”. See, some system calls can be interrupted by signals, and when this happens, they return an error. You might see code like this (sometimes cited as an excusable use of <code>goto</code>):</p>
<div id="cb7"><pre><code><span id="cb7-1">restart<span>:</span></span>
<span id="cb7-2">    <span>if</span> <span>(</span>some_system_call<span>()</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb7-3">        <span>if</span> <span>(</span>errno <span>==</span> EINTR<span>)</span> <span>goto</span> restart<span>;</span></span>
<span id="cb7-4">        perror<span>(</span><span>"some_system_call"</span><span>);</span></span>
<span id="cb7-5">        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb7-6">    <span>}</span></span></code></pre></div>
<p>Instead of using <code>goto</code> like that, you might be able to set your <code>sa_flags</code> to include <code>SA_RESTART</code>. For example, if we change our <code>SIGINT</code> handler code to look like this:</p>
<div id="cb8"><pre><code><span id="cb8-1">    sa<span>.</span>sa_flags <span>=</span> SA_RESTART<span>;&lt;/</span>code<span>&gt;</span></span></code></pre></div>
<p>Then our run looks more like this:</p>
<pre><code>Enter a string:
Hello^CAhhh! SIGINT!
Er, hello!^CAhhh! SIGINT!
This time fer sure!
You entered: This time fer sure!</code></pre>
<p>Some system calls are interruptible, and some can be restarted. It’s system dependent.</p>
<h2 data-number="3.2" id="the-handler-is-not-omnipotent"> The Handler is not Omnipotent</h2>
<p>You have to be careful when you make function calls in your signal handler. Those functions must be “async safe”, so they can be called without invoking undefined behavior.</p>
<p>You might be curious, for instance, why my signal handler, above, called <code>write()</code> to output the message instead of <code>printf()</code>. Well, the answer is that POSIX says that <code>write()</code> is async-safe (so is safe to call from within the handler), while <code>printf()</code> is not.</p>
<p>The library functions and system calls that are async-safe and can be called from within your signal handlers are (breath):</p>
<p><code>_Exit()</code>, <code>_exit()</code>, <code>abort()</code>, <code>accept()</code>, <code>access()</code>, <code>aio_error()</code>, <code>aio_return()</code>, <code>aio_suspend()</code>, <code>alarm()</code>, <code>bind()</code>, <code>cfgetispeed()</code>, <code>cfgetospeed()</code>, <code>cfsetispeed()</code>, <code>cfsetospeed()</code>, <code>chdir()</code>, <code>chmod()</code>, <code>chown()</code>, <code>clock_gettime()</code>, <code>close()</code>, <code>connect()</code>, <code>creat()</code>, <code>dup()</code>, <code>dup2()</code>, <code>execle()</code>, <code>execve()</code>, <code>fchmod()</code>, <code>fchown()</code>, <code>fcntl()</code>, <code>fdatasync()</code>, <code>fork()</code>, <code>fpathconf()</code>, <code>fstat()</code>, <code>fsync()</code>, <code>ftruncate()</code>, <code>getegid()</code>, <code>geteuid()</code>, <code>getgid()</code>, <code>getgroups()</code>, <code>getpeername()</code>, <code>getpgrp()</code>, <code>getpid()</code>, <code>getppid()</code>, <code>getsockname()</code>, <code>getsockopt()</code>, <code>getuid()</code>, <code>kill()</code>, <code>link()</code>, <code>listen()</code>, <code>lseek()</code>, <code>lstat()</code>, <code>mkdir()</code>, <code>mkfifo()</code>, <code>open()</code>, <code>pathconf()</code>, <code>pause()</code>, <code>pipe()</code>, <code>poll()</code>, <code>posix_trace_event()</code>, <code>pselect()</code>, <code>raise()</code>, <code>read()</code>, <code>readlink()</code>, <code>recv()</code>, <code>recvfrom()</code>, <code>recvmsg()</code>, <code>rename()</code>, <code>rmdir()</code>, <code>select()</code>, <code>sem_post()</code>, <code>send()</code>, <code>sendmsg()</code>, <code>sendto()</code>, <code>setgid()</code>, <code>setpgid()</code>, <code>setsid()</code>, <code>setsockopt()</code>, <code>setuid()</code>, <code>shutdown()</code>, <code>sigaction()</code>, <code>sigaddset()</code>, <code>sigdelset()</code>, <code>sigemptyset()</code>, <code>sigfillset()</code>, <code>sigismember()</code>, <code>sleep()</code>, <code>signal()</code>, <code>sigpause()</code>, <code>sigpending()</code>, <code>sigprocmask()</code>, <code>sigqueue()</code>, <code>sigset()</code>, <code>sigsuspend()</code>, <code>sockatmark()</code>, <code>socket()</code>, <code>socketpair()</code>, <code>stat()</code>, <code>symlink()</code>, <code>sysconf()</code>, <code>tcdrain()</code>, <code>tcflow()</code>, <code>tcflush()</code>, <code>tcgetattr()</code>, <code>tcgetpgrp()</code>, <code>tcsendbreak()</code>, <code>tcsetattr()</code>, <code>tcsetpgrp()</code>, <code>time()</code>, <code>timer_getoverrun()</code>, <code>timer_gettime()</code>, <code>timer_settime()</code>, <code>times()</code>, <code>umask()</code>, <code>uname()</code>, <code>unlink()</code>, <code>utime()</code>, <code>wait()</code>, <code>waitpid()</code>, and <code>write()</code>.</p>
<p>Of course, you can call your own functions from within your signal handler (as long they don’t call any non-async-safe functions.)</p>
<p>But wait—there’s more!</p>
<p>You also cannot safely alter any shared (e.g.&nbsp;global) data, with one notable exception: variables that are declared to be of storage class and type <code>volatile sig_atomic_t</code>.</p>
<p>Here’s an example that handles <code>SIGUSR1</code> by setting a global flag, which is then examined in the main loop to see if the handler was called. This is <a href="https://beej.us/guide/bgipc/source/examples/sigusr.c"><code>sigusr.c</code></a><a href="#fn5" id="fnref5" role="doc-noteref"><sup>5</sup></a>:</p>
<div id="cb10"><pre><code><span id="cb10-1"><a href="#cb10-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb10-4"><a href="#cb10-4"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb10-5"><a href="#cb10-5"></a><span>#include </span><span>&lt;signal.h&gt;</span></span>
<span id="cb10-6"><a href="#cb10-6"></a></span>
<span id="cb10-7"><a href="#cb10-7"></a><span>volatile</span> <span>sig_atomic_t</span> got_usr1<span>;</span></span>
<span id="cb10-8"><a href="#cb10-8"></a></span>
<span id="cb10-9"><a href="#cb10-9"></a><span>void</span> sigusr1_handler<span>(</span><span>int</span> sig<span>)</span></span>
<span id="cb10-10"><a href="#cb10-10"></a><span>{</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>    got_usr1 <span>=</span> <span>1</span><span>;</span></span>
<span id="cb10-12"><a href="#cb10-12"></a><span>}</span></span>
<span id="cb10-13"><a href="#cb10-13"></a></span>
<span id="cb10-14"><a href="#cb10-14"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb10-15"><a href="#cb10-15"></a><span>{</span></span>
<span id="cb10-16"><a href="#cb10-16"></a>        <span>struct</span> sigaction sa <span>=</span> <span>{</span></span>
<span id="cb10-17"><a href="#cb10-17"></a>            <span>.</span>sa_handler <span>=</span> sigusr1_handler<span>,</span></span>
<span id="cb10-18"><a href="#cb10-18"></a>            <span>.</span>sa_flags <span>=</span> <span>0</span><span>,</span> <span>// or SA_RESTART</span></span>
<span id="cb10-19"><a href="#cb10-19"></a>            <span>.</span>sa_mask <span>=</span> <span>0</span><span>,</span></span>
<span id="cb10-20"><a href="#cb10-20"></a>        <span>};</span></span>
<span id="cb10-21"><a href="#cb10-21"></a></span>
<span id="cb10-22"><a href="#cb10-22"></a>    got_usr1 <span>=</span> <span>0</span><span>;</span></span>
<span id="cb10-23"><a href="#cb10-23"></a></span>
<span id="cb10-24"><a href="#cb10-24"></a>    <span>if</span> <span>(</span>sigaction<span>(</span>SIGUSR1<span>,</span> <span>&amp;</span>sa<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb10-25"><a href="#cb10-25"></a>        perror<span>(</span><span>"sigaction"</span><span>);</span></span>
<span id="cb10-26"><a href="#cb10-26"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb10-27"><a href="#cb10-27"></a>    <span>}</span></span>
<span id="cb10-28"><a href="#cb10-28"></a></span>
<span id="cb10-29"><a href="#cb10-29"></a>    <span>while</span> <span>(!</span>got_usr1<span>)</span> <span>{</span></span>
<span id="cb10-30"><a href="#cb10-30"></a>        printf<span>(</span><span>"PID </span><span>%d</span><span>: working hard...</span><span>\n</span><span>"</span><span>,</span> getpid<span>());</span></span>
<span id="cb10-31"><a href="#cb10-31"></a>        sleep<span>(</span><span>1</span><span>);</span></span>
<span id="cb10-32"><a href="#cb10-32"></a>    <span>}</span></span>
<span id="cb10-33"><a href="#cb10-33"></a></span>
<span id="cb10-34"><a href="#cb10-34"></a>    printf<span>(</span><span>"Done in by SIGUSR1!</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb10-35"><a href="#cb10-35"></a></span>
<span id="cb10-36"><a href="#cb10-36"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb10-37"><a href="#cb10-37"></a><span>}</span></span></code></pre></div>
<p>Fire it it up in one window, and then use the <code>kill -USR1</code> in another window to kill it. The <code>sigusr</code> program conveniently prints out its process ID so you can pass it to <code>kill</code>:</p>
<pre><code>$ sigusr
PID 5023: working hard...
PID 5023: working hard...
PID 5023: working hard...</code></pre>
<p>Then in the other window, send it the signal <code>SIGUSR1</code>:</p>
<pre><code>$ kill -USR1 5023</code></pre>
<p>And the program should respond:</p>
<pre><code>PID 5023: working hard...
PID 5023: working hard...
Done in by SIGUSR1!</code></pre>
<p>(And the response should be immediate even if <code>sleep()</code> has just been called—<code>sleep()</code> gets interrupted by signals.)</p>
<h2 data-number="3.3" id="what-about-signal"> What about <code>signal()</code></h2>
<p>ANSI C defines a function called <code>signal()</code> that can be used to catch signals. It’s not as reliable or as full-featured as <code>sigaction()</code>, so use of <code>signal()</code>is generally discouraged.</p>
<h2 data-number="3.4" id="some-signals-to-make-you-popular"> Some signals to make you popular</h2>
<p>Here is a list of signals you (most likely) have at your disposal:</p>
<table>
<thead>
<tr>
<th>Signal</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SIGABRT</code></td>
<td>Process abort signal.</td>
</tr>
<tr>
<td><code>SIGALRM</code></td>
<td>Alarm clock.</td>
</tr>
<tr>
<td><code>SIGFPE</code></td>
<td>Erroneous arithmetic operation.</td>
</tr>
<tr>
<td><code>SIGHUP</code></td>
<td>Hangup.</td>
</tr>
<tr>
<td><code>SIGILL</code></td>
<td>Illegal instruction.</td>
</tr>
<tr>
<td><code>SIGINT</code></td>
<td>Terminal interrupt signal.</td>
</tr>
<tr>
<td><code>SIGKILL</code></td>
<td>Kill (cannot be caught or ignored).</td>
</tr>
<tr>
<td><code>SIGPIPE</code></td>
<td>Write on a pipe with no one to read it.</td>
</tr>
<tr>
<td><code>SIGQUIT</code></td>
<td>Terminal quit signal.</td>
</tr>
<tr>
<td><code>SIGSEGV</code></td>
<td>Invalid memory reference.</td>
</tr>
<tr>
<td><code>SIGTERM</code></td>
<td>Termination signal.</td>
</tr>
<tr>
<td><code>SIGUSR1</code></td>
<td>User-defined signal 1.</td>
</tr>
<tr>
<td><code>SIGUSR2</code></td>
<td>User-defined signal 2.</td>
</tr>
<tr>
<td><code>SIGCHLD</code></td>
<td>Child process terminated or stopped.</td>
</tr>
<tr>
<td><code>SIGCONT</code></td>
<td>Continue executing, if stopped.</td>
</tr>
<tr>
<td><code>SIGSTOP</code></td>
<td>Stop executing (cannot be caught or ignored).</td>
</tr>
<tr>
<td><code>SIGTSTP</code></td>
<td>Terminal stop signal.</td>
</tr>
<tr>
<td><code>SIGTTIN</code></td>
<td>Background process attempting read.</td>
</tr>
<tr>
<td><code>SIGTTOU</code></td>
<td>Background process attempting write.</td>
</tr>
<tr>
<td><code>SIGBUS</code></td>
<td>Bus error.</td>
</tr>
<tr>
<td><code>SIGPOLL</code></td>
<td>Pollable event.</td>
</tr>
<tr>
<td><code>SIGPROF</code></td>
<td>Profiling timer expired.</td>
</tr>
<tr>
<td><code>SIGSYS</code></td>
<td>Bad system call.</td>
</tr>
<tr>
<td><code>SIGTRAP</code></td>
<td>Trace/breakpoint trap.</td>
</tr>
<tr>
<td><code>SIGURG</code></td>
<td>High bandwidth data is available at a socket.</td>
</tr>
<tr>
<td><code>SIGVTALRM</code></td>
<td>Virtual timer expired.</td>
</tr>
<tr>
<td><code>SIGXCPU</code></td>
<td>CPU time limit exceeded.</td>
</tr>
<tr>
<td><code>SIGXFSZ</code></td>
<td>File size limit exceeded.</td>
</tr>
</tbody>
</table>
<p>Each signal has its own default signal handler, the behavior of which is defined in your local man pages.</p>
<h2 data-number="3.5" id="what-i-have-glossed-over"> What I have Glossed Over</h2>
<p>Nearly all of it. There are tons of flags, realtime signals, mixing signals with threads, masking signals, <code>longjmp()</code> and signals, and more.</p>
<p>Of course, this is just a “getting started” guide, but in a last-ditch effort to give you more information, here is a list of man pages with more information:</p>
<p>Handling signals:</p>
<ul>
<li><a href="https://man.archlinux.org/man/sigaction.2"><code>sigaction()</code></a><a href="#fn6" id="fnref6" role="doc-noteref"><sup>6</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigwait.3"><code>sigwait()</code></a><a href="#fn7" id="fnref7" role="doc-noteref"><sup>7</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigwaitinfo.2"><code>sigwaitinfo()</code></a><a href="#fn8" id="fnref8" role="doc-noteref"><sup>8</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigtimedwait.2"><code>sigtimedwait()</code></a><a href="#fn9" id="fnref9" role="doc-noteref"><sup>9</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigsuspend.2"><code>sigsuspend()</code></a><a href="#fn10" id="fnref10" role="doc-noteref"><sup>10</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigpending.2"><code>sigpending()</code></a><a href="#fn11" id="fnref11" role="doc-noteref"><sup>11</sup></a></li>
</ul>
<p>Delivering signals:</p>
<ul>
<li><a href="https://man.archlinux.org/man/kill.2"><code>kill()</code></a><a href="#fn12" id="fnref12" role="doc-noteref"><sup>12</sup></a></li>
<li><a href="https://man.archlinux.org/man/raise.3"><code>raise()</code></a><a href="#fn13" id="fnref13" role="doc-noteref"><sup>13</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigqueue.3"><code>sigqueue()</code></a><a href="#fn14" id="fnref14" role="doc-noteref"><sup>14</sup></a></li>
</ul>
<p>Set operations:</p>
<ul>
<li><a href="https://man.archlinux.org/man/sigemptyset.3"><code>sigemptyset()</code></a><a href="#fn15" id="fnref15" role="doc-noteref"><sup>15</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigfillset.3"><code>sigfillset()</code></a><a href="#fn16" id="fnref16" role="doc-noteref"><sup>16</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigaddset.3"><code>sigaddset()</code></a><a href="#fn17" id="fnref17" role="doc-noteref"><sup>17</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigdelset.3"><code>sigdelset()</code></a><a href="#fn18" id="fnref18" role="doc-noteref"><sup>18</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigismember.3"><code>sigismember()</code></a><a href="#fn19" id="fnref19" role="doc-noteref"><sup>19</sup></a></li>
</ul>
<p>Other:</p>
<ul>
<li><a href="https://man.archlinux.org/man/sigprocmask.2"><code>sigprocmask()</code></a><a href="#fn20" id="fnref20" role="doc-noteref"><sup>20</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigaltstack.2"><code>sigaltstack()</code></a><a href="#fn21" id="fnref21" role="doc-noteref"><sup>21</sup></a></li>
<li><a href="https://man.archlinux.org/man/siginterrupt.3"><code>siginterrupt()</code></a><a href="#fn22" id="fnref22" role="doc-noteref"><sup>22</sup></a></li>
<li><a href="https://man.archlinux.org/man/sigsetjmp.3"><code>sigsetjmp()</code></a><a href="#fn23" id="fnref23" role="doc-noteref"><sup>23</sup></a></li>
<li><a href="https://man.archlinux.org/man/siglongjmp.3"><code>siglongjmp()</code></a><a href="#fn24" id="fnref24" role="doc-noteref"><sup>24</sup></a></li>
<li><a href="https://man.archlinux.org/man/signal.2"><code>signal()</code></a><a href="#fn25" id="fnref25" role="doc-noteref"><sup>25</sup></a></li>
</ul>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- Pipes -->
<!-- ======================================================= -->
<h2 data-number="4" id="pipes"> Pipes</h2>
<p>There is no form of IPC that is simpler than pipes. Implemented on every flavor of Unix, <code>pipe()</code> and <a href="#fork"><code>fork()</code></a> make up the functionality behind the “<code>|</code>” in “<code>ls | more</code>”. They are marginally useful for cool things, but are a good way to learn about basic methods of IPC.</p>
<p>Since they’re so very very easy, I shant spent much time on them. We’ll just have some examples and stuff.</p>
<h2 data-number="4.1" id="these-pipes-are-clean"> “These pipes are clean!”</h2>
<p>Wait! Not so fast. I might need to define a “file descriptor” at this point. Let me put it this way: you know about “<code>FILE*</code>” from <code>stdio.h</code>, right? You know how you have all those nice functions like <code>fopen()</code>, <code>fclose()</code>, <code>fwrite()</code>, and so on? Well, those are actually high level functions that are implemented using <em>file descriptors</em>, which use system calls such as <code>open()</code>, <code>creat()</code>, <code>close()</code>, and <code>write()</code>. File descriptors are simply <code>ints</code> that are analogous to <code>FILE*</code>’s in <code>stdio.h</code>.</p>
<p>For example, <code>stdin</code> is file descriptor “0”, <code>stdout</code> is “1”, and <code>stderr</code> is “2”. Likewise, any files you open using <code>fopen()</code> get their own file descriptor, although this detail is hidden from you. (This file descriptor can be retrived from the <code>FILE*</code> by using the <code>fileno()</code> macro from <code>stdio.h</code>.)</p>
<figure>


</figure>
<p>Basically, a call to the <code>pipe()</code> function returns a pair of file descriptors. One of these descriptors is connected to the write end of the pipe, and the other is connected to the read end. Anything can be written to the pipe, and read from the other end in the order it came in. On many systems, pipes will fill up after you write about 10K to them without reading anything out.</p>
<p>As a [useless example](https://beej.us/guide/bgipc/source/examples/pipe1.c], the following program creates, writes to, and reads from a pipe.</p>
<div id="cb14"><pre><code><span id="cb14-1"><a href="#cb14-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb14-2"><a href="#cb14-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb14-3"><a href="#cb14-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb14-4"><a href="#cb14-4"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb14-5"><a href="#cb14-5"></a></span>
<span id="cb14-6"><a href="#cb14-6"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb14-7"><a href="#cb14-7"></a><span>{</span></span>
<span id="cb14-8"><a href="#cb14-8"></a>    <span>int</span> pfds<span>[</span><span>2</span><span>];</span></span>
<span id="cb14-9"><a href="#cb14-9"></a>    <span>char</span> buf<span>[</span><span>30</span><span>];</span></span>
<span id="cb14-10"><a href="#cb14-10"></a></span>
<span id="cb14-11"><a href="#cb14-11"></a>    <span>if</span> <span>(</span>pipe<span>(</span>pfds<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb14-12"><a href="#cb14-12"></a>        perror<span>(</span><span>"pipe"</span><span>);</span></span>
<span id="cb14-13"><a href="#cb14-13"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb14-14"><a href="#cb14-14"></a>    <span>}</span></span>
<span id="cb14-15"><a href="#cb14-15"></a></span>
<span id="cb14-16"><a href="#cb14-16"></a>    printf<span>(</span><span>"writing to file descriptor #</span><span>%d\n</span><span>"</span><span>,</span> pfds<span>[</span><span>1</span><span>]);</span></span>
<span id="cb14-17"><a href="#cb14-17"></a>    write<span>(</span>pfds<span>[</span><span>1</span><span>],</span> <span>"test"</span><span>,</span> <span>5</span><span>);</span></span>
<span id="cb14-18"><a href="#cb14-18"></a>    printf<span>(</span><span>"reading from file descriptor #</span><span>%d\n</span><span>"</span><span>,</span> pfds<span>[</span><span>0</span><span>]);</span></span>
<span id="cb14-19"><a href="#cb14-19"></a>    read<span>(</span>pfds<span>[</span><span>0</span><span>],</span> buf<span>,</span> <span>5</span><span>);</span></span>
<span id="cb14-20"><a href="#cb14-20"></a>    printf<span>(</span><span>"read </span><span>\"%s\"\n</span><span>"</span><span>,</span> buf<span>);</span></span>
<span id="cb14-21"><a href="#cb14-21"></a></span>
<span id="cb14-22"><a href="#cb14-22"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb14-23"><a href="#cb14-23"></a><span>}</span></span></code></pre></div>
<p>As you can see, <code>pipe()</code> takes an array of two <code>int</code>s as an argument. Assuming no errors, it connects two file descriptors and returns them in the array. The first element of the array is the reading-end of the pipe, the second is the writing end.</p>
<h2 data-number="4.2" id="fork-and-pipeyou-have-the-power"> <code>fork()</code> and <code>pipe()</code>—you have the power!</h2>
<p>From the above example, it’s pretty hard to see how these would even be useful. Well, since this is an IPC document, let’s put a <code>fork()</code> in the mix and see what happens. Pretend that you are a top federal agent assigned to get a child process to send the word “test” to the parent. Not very glamorous, but no one ever said computer science would be the X-Files, Mulder.</p>
<p>First, we’ll have the parent make a pipe. Secondly, we’ll <code>fork()</code>. Now, the <code>fork()</code> man page tells us that the child will receive a copy of all the parent’s file descriptors, and this includes a copy of the pipe’s file descriptors. <em>Alors</em>, the child will be able to send stuff to the write-end of the pipe, and the parent will get it off the read-end. [flx[Like this|pipe2.c)<a href="#fn26" id="fnref26" role="doc-noteref"><sup>26</sup></a>, the following program creates, writes to, and reads from a pipe.</p>
<div id="cb15"><pre><code><span id="cb15-1"><a href="#cb15-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb15-2"><a href="#cb15-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb15-3"><a href="#cb15-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb15-4"><a href="#cb15-4"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb15-5"><a href="#cb15-5"></a></span>
<span id="cb15-6"><a href="#cb15-6"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb15-7"><a href="#cb15-7"></a><span>{</span></span>
<span id="cb15-8"><a href="#cb15-8"></a>    <span>int</span> pfds<span>[</span><span>2</span><span>];</span></span>
<span id="cb15-9"><a href="#cb15-9"></a>    <span>char</span> buf<span>[</span><span>30</span><span>];</span></span>
<span id="cb15-10"><a href="#cb15-10"></a></span>
<span id="cb15-11"><a href="#cb15-11"></a>    <span>if</span> <span>(</span>pipe<span>(</span>pfds<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb15-12"><a href="#cb15-12"></a>        perror<span>(</span><span>"pipe"</span><span>);</span></span>
<span id="cb15-13"><a href="#cb15-13"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb15-14"><a href="#cb15-14"></a>    <span>}</span></span>
<span id="cb15-15"><a href="#cb15-15"></a></span>
<span id="cb15-16"><a href="#cb15-16"></a>    printf<span>(</span><span>"writing to file descriptor #</span><span>%d\n</span><span>"</span><span>,</span> pfds<span>[</span><span>1</span><span>]);</span></span>
<span id="cb15-17"><a href="#cb15-17"></a>    write<span>(</span>pfds<span>[</span><span>1</span><span>],</span> <span>"test"</span><span>,</span> <span>5</span><span>);</span></span>
<span id="cb15-18"><a href="#cb15-18"></a>    printf<span>(</span><span>"reading from file descriptor #</span><span>%d\n</span><span>"</span><span>,</span> pfds<span>[</span><span>0</span><span>]);</span></span>
<span id="cb15-19"><a href="#cb15-19"></a>    read<span>(</span>pfds<span>[</span><span>0</span><span>],</span> buf<span>,</span> <span>5</span><span>);</span></span>
<span id="cb15-20"><a href="#cb15-20"></a>    printf<span>(</span><span>"read </span><span>\"%s\"\n</span><span>"</span><span>,</span> buf<span>);</span></span>
<span id="cb15-21"><a href="#cb15-21"></a></span>
<span id="cb15-22"><a href="#cb15-22"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb15-23"><a href="#cb15-23"></a><span>}</span></span></code></pre></div>
<p>As you can see, <code>pipe()</code> takes an array of two <code>int</code>s as an argument. Assuming no errors, it connects two file descriptors and returns them in the array. The first element of the array is the reading-end of the pipe, the second is the writing end.</p>
<h2 data-number="4.3" id="fork-and-pipeyou-have-the-power-1"> <code>fork()</code> and <code>pipe()</code>—you have the power!</h2>
<p>From the above example, it’s pretty hard to see how these would even be useful. Well, since this is an IPC document, let’s put a <code>fork()</code> in the mix and see what happens. Pretend that you are a top federal agent assigned to get a child process to send the word “test” to the parent. Not very glamorous, but no one ever said computer science would be the X-Files, Mulder.</p>
<p>First, we’ll have the parent make a pipe. Secondly, we’ll <code>fork()</code>. Now, the <code>fork()</code> man page tells us that the child will receive a copy of all the parent’s file descriptors, and this includes a copy of the pipe’s file descriptors. <em>Alors</em>, the child will be able to send stuff to the write-end of the pipe, and the parent will get it off the read-end. [flx[Like this|pipe2.c]:</p>
<div id="cb16"><pre><code><span id="cb16-1"><a href="#cb16-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb16-3"><a href="#cb16-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb16-4"><a href="#cb16-4"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb16-5"><a href="#cb16-5"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb16-6"><a href="#cb16-6"></a></span>
<span id="cb16-7"><a href="#cb16-7"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb16-8"><a href="#cb16-8"></a><span>{</span></span>
<span id="cb16-9"><a href="#cb16-9"></a>    <span>int</span> pfds<span>[</span><span>2</span><span>];</span></span>
<span id="cb16-10"><a href="#cb16-10"></a>    <span>char</span> buf<span>[</span><span>30</span><span>];</span></span>
<span id="cb16-11"><a href="#cb16-11"></a></span>
<span id="cb16-12"><a href="#cb16-12"></a>    pipe<span>(</span>pfds<span>);</span></span>
<span id="cb16-13"><a href="#cb16-13"></a></span>
<span id="cb16-14"><a href="#cb16-14"></a>    <span>if</span> <span>(!</span>fork<span>())</span> <span>{</span></span>
<span id="cb16-15"><a href="#cb16-15"></a>        printf<span>(</span><span>" CHILD: writing to the pipe</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb16-16"><a href="#cb16-16"></a>        write<span>(</span>pfds<span>[</span><span>1</span><span>],</span> <span>"test"</span><span>,</span> <span>5</span><span>);</span></span>
<span id="cb16-17"><a href="#cb16-17"></a>        printf<span>(</span><span>" CHILD: exiting</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb16-18"><a href="#cb16-18"></a>        exit<span>(</span><span>0</span><span>);</span></span>
<span id="cb16-19"><a href="#cb16-19"></a>    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb16-20"><a href="#cb16-20"></a>        printf<span>(</span><span>"PARENT: reading from pipe</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb16-21"><a href="#cb16-21"></a>        read<span>(</span>pfds<span>[</span><span>0</span><span>],</span> buf<span>,</span> <span>5</span><span>);</span></span>
<span id="cb16-22"><a href="#cb16-22"></a>        printf<span>(</span><span>"PARENT: read </span><span>\"%s\"\n</span><span>"</span><span>,</span> buf<span>);</span></span>
<span id="cb16-23"><a href="#cb16-23"></a>        wait<span>(</span>NULL<span>);</span></span>
<span id="cb16-24"><a href="#cb16-24"></a>    <span>}</span></span>
<span id="cb16-25"><a href="#cb16-25"></a></span>
<span id="cb16-26"><a href="#cb16-26"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb16-27"><a href="#cb16-27"></a><span>}</span></span></code></pre></div>
<p>Please note, your programs should have a lot more error checking than mine do. I leave it out on occasion to help keep things clear.</p>
<p>Anyway, this example is just like the previous one, except now we <code>fork()</code> of a new process and have it write to the pipe, while the parent reads from it. The resultant output will be something similar to the following:</p>
<div id="cb17"><pre><code><span id="cb17-1">PARENT: reading from pipe</span>
<span id="cb17-2"> CHILD: writing to the pipe</span>
<span id="cb17-3"> CHILD: exiting</span>
<span id="cb17-4">PARENT: read "test"</span></code></pre></div>
<p>In this case, the parent tried to read from the pipe before the child writes to it. When this happens, the parent is said to <em>block</em>, or sleep, until data arrives to be read. It seems that the parent tried to read, went to sleep, the child wrote and exited, and the parent woke up and read the data.</p>
<p>Hurrah!! You’ve just don’t some interprocess communication! That was dreadfully simple, huh? I’ll bet you are still thinking that there aren’t many uses for <code>pipe()</code> and, well, you’re probably right. The other forms of IPC are generally more useful and are often more exotic.</p>
<h2 data-number="4.4" id="the-search-for-pipe-as-we-know-it"> The search for Pipe as we know it</h2>
<p>In an effort to make you think that pipes are actually reasonable beasts, I’ll give you an example of using <code>pipe()</code> in a more familiar situation. The challenge: implement “<code>ls | wc -l</code>” in C.</p>
<p>This requires usage of a couple more functions you may never have heard of: <code>exec()</code> and <code>dup()</code>. The <code>exec()</code> family of functions replaces the currently running process with whichever one is passed to <code>exec()</code>. This is the function that we will use to run <code>ls</code> and <code>wc -l</code>. <code>dup()</code> takes an open file descriptor and makes a clone (a duplicate) of it. This is how we will connect the standard output of the <code>ls</code> to the standard input of <code>wc</code>. See, stdout of <code>ls</code> flows into the pipe, and the stdin of <code>wc</code> flows in from the pipe. The pipe fits right there in the middle!</p>
<p>Anyway, <a href="https://beej.us/guide/bgipc/source/examples/pipe3.c">here is the code</a><a href="#fn27" id="fnref27" role="doc-noteref"><sup>27</sup></a>:</p>
<div id="cb18"><pre><code><span id="cb18-1"><a href="#cb18-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb18-2"><a href="#cb18-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb18-3"><a href="#cb18-3"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb18-4"><a href="#cb18-4"></a></span>
<span id="cb18-5"><a href="#cb18-5"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb18-6"><a href="#cb18-6"></a><span>{</span></span>
<span id="cb18-7"><a href="#cb18-7"></a>    <span>int</span> pfds<span>[</span><span>2</span><span>];</span></span>
<span id="cb18-8"><a href="#cb18-8"></a></span>
<span id="cb18-9"><a href="#cb18-9"></a>    pipe<span>(</span>pfds<span>);</span></span>
<span id="cb18-10"><a href="#cb18-10"></a></span>
<span id="cb18-11"><a href="#cb18-11"></a>    <span>if</span> <span>(!</span>fork<span>())</span> <span>{</span></span>
<span id="cb18-12"><a href="#cb18-12"></a>        close<span>(</span><span>1</span><span>);</span>       <span>/* close normal stdout */</span></span>
<span id="cb18-13"><a href="#cb18-13"></a>        dup<span>(</span>pfds<span>[</span><span>1</span><span>]);</span>   <span>/* make stdout same as pfds[1] */</span></span>
<span id="cb18-14"><a href="#cb18-14"></a>        close<span>(</span>pfds<span>[</span><span>0</span><span>]);</span> <span>/* we don't need this */</span></span>
<span id="cb18-15"><a href="#cb18-15"></a>        execlp<span>(</span><span>"ls"</span><span>,</span> <span>"ls"</span><span>,</span> NULL<span>);</span></span>
<span id="cb18-16"><a href="#cb18-16"></a>    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb18-17"><a href="#cb18-17"></a>        close<span>(</span><span>0</span><span>);</span>       <span>/* close normal stdin */</span></span>
<span id="cb18-18"><a href="#cb18-18"></a>        dup<span>(</span>pfds<span>[</span><span>0</span><span>]);</span>   <span>/* make stdin same as pfds[0] */</span></span>
<span id="cb18-19"><a href="#cb18-19"></a>        close<span>(</span>pfds<span>[</span><span>1</span><span>]);</span> <span>/* we don't need this */</span></span>
<span id="cb18-20"><a href="#cb18-20"></a>        execlp<span>(</span><span>"wc"</span><span>,</span> <span>"wc"</span><span>,</span> <span>"-l"</span><span>,</span> NULL<span>);</span></span>
<span id="cb18-21"><a href="#cb18-21"></a>    <span>}</span></span>
<span id="cb18-22"><a href="#cb18-22"></a></span>
<span id="cb18-23"><a href="#cb18-23"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb18-24"><a href="#cb18-24"></a><span>}</span></span></code></pre></div>
<p>I’m going to make another note about the <code>close()</code>/<code>dup()</code> combination since it’s pretty weird. <code>close(1)</code> frees up file descriptor 1 (standard output). <code>dup(pfds[1])</code> makes a copy of the write-end of the pipe in the first available file descriptor, which is “1”, since we just closed that. In this way, anything that <code>ls</code> writes to standard output (file descriptor 1) will instead go to <code>pfds[1]</code> (the write end of the pipe). The <code>wc</code> section of code works the same way, except in reverse.</p>
<h2 data-number="4.5" id="summary-1"> Summary</h2>
<p>There aren’t many of these for such a simple topic. In fact, there are nearly just about none. Probably the best use for pipes is the one you’re most accustomed to: sending the standard output of one command to the standard input of another. For other uses, it’s pretty limiting and there are often other IPC techniques that work better.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- FIFOs -->
<!-- ======================================================= -->
<h2 data-number="5" id="fifos"> FIFOs</h2>
<p>A FIFO (“First In, First Out”, pronounced “Fy-Foh”) is sometimes known as a <em>named pipe</em>. That is, it’s like a <a href="#pipes">pipe</a>, except that it has a name! In this case, the name is that of a file that multiple processes can <code>open()</code> and read and write to.</p>
<p>This latter aspect of FIFOs is designed to let them get around one of the shortcomings of normal pipes: you can’t grab one end of a normal pipe that was created by an unrelated process. See, if I run two individual copies of a program, they can both call <code>pipe()</code> all they want and still not be able to speak to one another. (This is because you must <code>pipe()</code>, then <code>fork()</code> to get a child process that can communicate to the parent via the pipe.) With FIFOs, though, each unrelated process can simply <code>open()</code> the pipe and transfer data through it.</p>
<h2 data-number="5.1" id="a-new-fifo-is-born"> A New FIFO is Born</h2>
<p>Since the FIFO is actually a file on disk, you have to do some fancy-schmancy stuff to create it. It’s not that hard. You just have to call <code>mknod()</code> with the proper arguments. Here is a <code>mknod()</code> call that creates a FIFO:</p>
<div id="cb19"><pre><code><span id="cb19-1">mknod<span>(</span><span>"myfifo"</span><span>,</span> S_IFIFO <span>|</span> <span>0644</span> <span>,</span> <span>0</span><span>);</span></span></code></pre></div>
<p>In the above example, the FIFO file will be called “<code>myfifo</code>”. The second argument is the creation mode, which is used to tell <code>mknod()</code> to make a FIFO (the <code>S_IFIFO</code> part of the OR) and sets access permissions to that file (octal 644, or <code>rw-r--r--</code>) which can also be set by ORing together macros from <code>sys/stat.h</code>. This permission is just like the one you’d set using the <code>chmod</code> command. Finally, a device number is passed. This is ignored when creating a FIFO, so you can put anything you want in there.</p>
<p>(An aside: a FIFO can also be created from the command line using the Unix <code>mknod</code> command.)</p>
<h2 data-number="5.2" id="producers-and-consumers"> Producers and Consumers</h2>
<p>Once the FIFO has been created, a process can start up and open it for reading or writing using the standard <code>open()</code> system call.</p>
<p>Since the process is easier to understand once you get some code in your belly, I’ll present here two programs which will send data through a FIFO. One is <code>speak.c</code> which sends data through the FIFO, and the other is called <code>tick.c</code>, as it sucks data out of the FIFO.</p>
<p>Here is <a href="https://beej.us/guide/bgipc/source/examples/speak.c"><code>speak.c</code></a><a href="#fn28" id="fnref28" role="doc-noteref"><sup>28</sup></a>:</p>
<div id="cb20"><pre><code><span id="cb20-1"><a href="#cb20-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb20-2"><a href="#cb20-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb20-3"><a href="#cb20-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb20-4"><a href="#cb20-4"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb20-5"><a href="#cb20-5"></a><span>#include </span><span>&lt;fcntl.h&gt;</span></span>
<span id="cb20-6"><a href="#cb20-6"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb20-7"><a href="#cb20-7"></a><span>#include </span><span>&lt;sys/stat.h&gt;</span></span>
<span id="cb20-8"><a href="#cb20-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb20-9"><a href="#cb20-9"></a></span>
<span id="cb20-10"><a href="#cb20-10"></a><span>#define FIFO_NAME </span><span>"american_maid"</span></span>
<span id="cb20-11"><a href="#cb20-11"></a></span>
<span id="cb20-12"><a href="#cb20-12"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb20-13"><a href="#cb20-13"></a><span>{</span></span>
<span id="cb20-14"><a href="#cb20-14"></a>    <span>char</span> s<span>[</span><span>300</span><span>];</span></span>
<span id="cb20-15"><a href="#cb20-15"></a>    <span>int</span> num<span>,</span> fd<span>;</span></span>
<span id="cb20-16"><a href="#cb20-16"></a></span>
<span id="cb20-17"><a href="#cb20-17"></a>    mknod<span>(</span>FIFO_NAME<span>,</span> S_IFIFO <span>|</span> <span>0666</span><span>,</span> <span>0</span><span>);</span></span>
<span id="cb20-18"><a href="#cb20-18"></a></span>
<span id="cb20-19"><a href="#cb20-19"></a>    printf<span>(</span><span>"waiting for readers...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb20-20"><a href="#cb20-20"></a>    fd <span>=</span> open<span>(</span>FIFO_NAME<span>,</span> O_WRONLY<span>);</span></span>
<span id="cb20-21"><a href="#cb20-21"></a>    printf<span>(</span><span>"got a reader--type some stuff</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb20-22"><a href="#cb20-22"></a></span>
<span id="cb20-23"><a href="#cb20-23"></a>    <span>while</span> <span>(</span>gets<span>(</span>s<span>),</span> <span>!</span>feof<span>(</span>stdin<span>))</span> <span>{</span></span>
<span id="cb20-24"><a href="#cb20-24"></a>        <span>if</span> <span>((</span>num <span>=</span> write<span>(</span>fd<span>,</span> s<span>,</span> strlen<span>(</span>s<span>)))</span> <span>==</span> <span>-</span><span>1</span><span>)</span></span>
<span id="cb20-25"><a href="#cb20-25"></a>            perror<span>(</span><span>"write"</span><span>);</span></span>
<span id="cb20-26"><a href="#cb20-26"></a>        <span>else</span></span>
<span id="cb20-27"><a href="#cb20-27"></a>            printf<span>(</span><span>"speak: wrote </span><span>%d</span><span> bytes</span><span>\n</span><span>"</span><span>,</span> num<span>);</span></span>
<span id="cb20-28"><a href="#cb20-28"></a>    <span>}</span></span>
<span id="cb20-29"><a href="#cb20-29"></a></span>
<span id="cb20-30"><a href="#cb20-30"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb20-31"><a href="#cb20-31"></a><span>}</span></span></code></pre></div>
<p>What <code>speak</code> does is create the FIFO, then try to <code>open()</code> it. Now, what will happen is that the <code>open()</code> call will <em>block</em> until some other process opens the other end of the pipe for reading. (There is a way around this—see <a href="#fifondelay"><code>O_NDELAY</code></a>, below.) That process is <a href="https://beej.us/guide/bgipc/source/examples/tick.c"><code>tick.c</code></a><a href="#fn29" id="fnref29" role="doc-noteref"><sup>29</sup></a>, shown here:</p>
<div id="cb21"><pre><code><span id="cb21-1"><a href="#cb21-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb21-2"><a href="#cb21-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb21-3"><a href="#cb21-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb21-4"><a href="#cb21-4"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb21-5"><a href="#cb21-5"></a><span>#include </span><span>&lt;fcntl.h&gt;</span></span>
<span id="cb21-6"><a href="#cb21-6"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb21-7"><a href="#cb21-7"></a><span>#include </span><span>&lt;sys/stat.h&gt;</span></span>
<span id="cb21-8"><a href="#cb21-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb21-9"><a href="#cb21-9"></a></span>
<span id="cb21-10"><a href="#cb21-10"></a><span>#define FIFO_NAME </span><span>"american_maid"</span></span>
<span id="cb21-11"><a href="#cb21-11"></a></span>
<span id="cb21-12"><a href="#cb21-12"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb21-13"><a href="#cb21-13"></a><span>{</span></span>
<span id="cb21-14"><a href="#cb21-14"></a>    <span>char</span> s<span>[</span><span>300</span><span>];</span></span>
<span id="cb21-15"><a href="#cb21-15"></a>    <span>int</span> num<span>,</span> fd<span>;</span></span>
<span id="cb21-16"><a href="#cb21-16"></a></span>
<span id="cb21-17"><a href="#cb21-17"></a>    mknod<span>(</span>FIFO_NAME<span>,</span> S_IFIFO <span>|</span> <span>0666</span><span>,</span> <span>0</span><span>);</span></span>
<span id="cb21-18"><a href="#cb21-18"></a></span>
<span id="cb21-19"><a href="#cb21-19"></a>    printf<span>(</span><span>"waiting for writers...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb21-20"><a href="#cb21-20"></a>    fd <span>=</span> open<span>(</span>FIFO_NAME<span>,</span> O_RDONLY<span>);</span></span>
<span id="cb21-21"><a href="#cb21-21"></a>    printf<span>(</span><span>"got a writer</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb21-22"><a href="#cb21-22"></a></span>
<span id="cb21-23"><a href="#cb21-23"></a>    <span>do</span> <span>{</span></span>
<span id="cb21-24"><a href="#cb21-24"></a>        <span>if</span> <span>((</span>num <span>=</span> read<span>(</span>fd<span>,</span> s<span>,</span> <span>300</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span></span>
<span id="cb21-25"><a href="#cb21-25"></a>            perror<span>(</span><span>"read"</span><span>);</span></span>
<span id="cb21-26"><a href="#cb21-26"></a>        <span>else</span> <span>{</span></span>
<span id="cb21-27"><a href="#cb21-27"></a>            s<span>[</span>num<span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb21-28"><a href="#cb21-28"></a>            printf<span>(</span><span>"tick: read </span><span>%d</span><span> bytes: </span><span>\"%s\"\n</span><span>"</span><span>,</span> num<span>,</span> s<span>);</span></span>
<span id="cb21-29"><a href="#cb21-29"></a>        <span>}</span></span>
<span id="cb21-30"><a href="#cb21-30"></a>    <span>}</span> <span>while</span> <span>(</span>num <span>&gt;</span> <span>0</span><span>);</span></span>
<span id="cb21-31"><a href="#cb21-31"></a></span>
<span id="cb21-32"><a href="#cb21-32"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb21-33"><a href="#cb21-33"></a><span>}</span></span></code></pre></div>
<p>Like <code>speak.c</code>, <code>tick</code> will block on the <code>open()</code> if there is no one writing to the FIFO. As soon as someone opens the FIFO for writing, <code>tick</code> will spring to life.</p>
<p>Try it! Start <code>speak</code> and it will block until you start <code>tick</code> in another window. (Conversely, if you start <code>tick</code>, it will block until you start <code>speak</code> in another window.) Type away in the <code>speak</code> window and <code>tick</code> will suck it all up.</p>
<p>Now, break out of <code>speak</code>. Notice what happens: the <code>read()</code> in <code>tick</code> returns 0, signifying EOF. In this way, the reader can tell when all writers have closed their connection to the FIFO. “What?” you ask “There can be multiple writers to the same pipe?” Sure! That can be very useful, you know. Perhaps I’ll show you later in the document how this can be exploited.</p>
<p>But for now, lets finish this topic by seeing what happens when you break out of <code>tick</code> while <code>speak</code> is running. “Broken Pipe”! What does this mean? Well, what has happened is that when all readers for a FIFO close and the writer is still open, the writer will receiver the signal SIGPIPE the next time it tries to <code>write()</code>. The default signal handler for this signal prints “Broken Pipe” and exits. Of course, you can handle this more gracefully by catching SIGPIPE through the <code>signal()</code> call.</p>
<p>Finally, what happens if you have multiple readers? Well, strange things happen. Sometimes one of the readers get everything. Sometimes it alternates between readers. Why do you want to have multiple readers, anyway?</p>
<h2 data-number="5.3" id="fifondelay"> <code>O_NDELAY</code>! I’m UNSTOPPABLE!</h2>
<p>Earlier, I mentioned that you could get around the blocking <code>open()</code> call if there was no corresponding reader or writer. The way to do this is to call <code>open()</code> with the <code>O_NDELAY</code> flag set in the mode argument:</p>
<div id="cb22"><pre><code><span id="cb22-1">fd <span>=</span> open<span>(</span>FIFO_NAME<span>,</span> O_WRONLY <span>|</span> O_NDELAY<span>);</span></span></code></pre></div>
<p>This will cause <code>open()</code> to return <code>-1</code> if there are no processes that have the file open for reading.</p>
<p>Likewise, you can open the reader process using the <code>O_NDELAY</code> flag, but this has a different effect: all attempts to <code>read()</code> from the pipe will simply return <code>0</code> bytes read if there is no data in the pipe. (That is, the <code>read()</code> will no longer block until there is some data in the pipe.) Note that you can no longer tell if <code>read()</code> is returning <code>0</code> because there is no data in the pipe, or because the writer has exited. This is the price of power, but my suggestion is to try to stick with blocking whenever possible.</p>
<h2 data-number="5.4" id="concluding-notes"> Concluding Notes</h2>
<p>Having the name of the pipe right there on disk sure makes it easier, doesn’t it? Unrelated processes can communicate via pipes! (This is an ability you will find yourself wishing for if you use normal pipes for too long.) Still, though, the functionality of pipes might not be quite what you need for your applications. <a href="#mq">Message queues</a> might be more your speed, if your system supports them.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- File Locking -->
<!-- ======================================================= -->
<h2 data-number="6" id="flocking"> File Locking</h2>
<p>File locking provides a very simple yet incredibly useful mechanism for coordinating file accesses. Before I begin to lay out the details, let me fill you in on some file locking secrets:</p>
<p>There are two types of locking mechanisms: mandatory and advisory. Mandatory systems will actually prevent <code>read()</code>s and <code>write()</code>s to file. Several Unix systems support them. Nevertheless, I’m going to ignore them throughout this document, preferring instead to talk solely about advisory locks. With an advisory lock system, processes can still read and write from a file while it’s locked. Useless? Not quite, since there is a way for a process to check for the existence of a lock before a read or write. See, it’s a kind of <em>cooperative</em> locking system. This is easily sufficient for almost all cases where file locking is necessary.</p>
<p>Since that’s out of the way, whenever I refer to a lock from now on in this document, I’m referring to advisory locks. So there.</p>
<p>Now, let me break down the concept of a lock a little bit more. There are two types of (advisory!) locks: read locks and write locks (also referred to as shared locks and exclusive locks, respectively.) The way read locks work is that they don’t interfere with other read locks. For instance, multiple processes can have a file locked for reading at the same. However, when a process has an write lock on a file, no other process can activate either a read or write lock until it is relinquished. One easy way to think of this is that there can be multiple readers simultaneously, but there can only be one writer at a time.</p>
<p>One last thing before beginning: there are many ways to lock files in Unix systems. System V likes <code>lockf()</code>, which, personally, I think sucks. Better systems support <code>flock()</code> which offers better control over the lock, but still lacks in certain ways. For portability and for completeness, I’ll be talking about how to lock files using <code>fcntl()</code>. I encourage you, though, to use one of the higher-level <code>flock()</code>-style functions if it suits your needs, but I want to portably demonstrate the full range of power you have at your fingertips. (If your System V Unix doesn’t support the POSIX-y <code>fcntl()</code>, you’ll have to reconcile the following information with your <code>lockf()</code> man page.)</p>
<h2 data-number="6.1" id="setting-a-lock"> Setting a lock</h2>
<p>The <code>fcntl()</code> function does just about everything on the planet, but we’ll just use it for file locking. Setting the lock consists of filling out a <code>struct flock</code> (declared in <code>fcntl.h</code>) that describes the type of lock needed, <code>open()</code>ing the file with the matching mode, and calling <code>fcntl()</code> with the proper arguments, <em>comme ça</em>:</p>
<div id="cb23"><pre><code><span id="cb23-1"><span>struct</span> flock fl <span>=</span> <span>{</span></span>
<span id="cb23-2">    <span>.</span>l_type   <span>=</span> F_WRLCK<span>,</span>  <span>/* F_RDLCK, F_WRLCK, F_UNLCK      */</span></span>
<span id="cb23-3">    <span>.</span>l_whence <span>=</span> SEEK_SET<span>,</span> <span>/* SEEK_SET, SEEK_CUR, SEEK_END   */</span></span>
<span id="cb23-4">    <span>.</span>l_start  <span>=</span> <span>0</span><span>,</span>        <span>/* Offset from l_whence           */</span></span>
<span id="cb23-5">    <span>.</span>l_len    <span>=</span> <span>0</span><span>,</span>        <span>/* length, 0 = to EOF             */</span></span>
<span id="cb23-6">    <span>// .l_pid             /* PID holding lock; F_RDLCK only */</span></span>
<span id="cb23-7"><span>};</span></span>
<span id="cb23-8"><span>int</span> fd<span>;</span></span>
<span id="cb23-9"></span>
<span id="cb23-10">fd <span>=</span> open<span>(</span><span>"filename"</span><span>,</span> O_WRONLY<span>);</span></span>
<span id="cb23-11"></span>
<span id="cb23-12">fcntl<span>(</span>fd<span>,</span> F_SETLKW<span>,</span> <span>&amp;</span>fl<span>);</span>  <span>/* F_GETLK, F_SETLK, F_SETLKW */</span></span></code></pre></div>
<p>What just happened? Let’s start with the <code>struct flock</code> since the fields in it are used to <em>describe</em> the locking action taking place. Here are some field definitions:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>l_type</code></td>
<td>This is where you signify the type of lock you want to set. It’s either <code>F_RDLCK</code>, <code>F_WRLCK</code>, or <code>F_UNLCK</code> if you want to set a read lock, write lock, or clear the lock, respectively.</td>
</tr>
<tr>
<td><code>l_whence</code></td>
<td>This field determines where the <code>l_start</code> field starts from (it’s like an offset for the offset). It can be either <code>SEEK_SET</code>, <code>SEEK_CUR</code>, or <code>SEEK_END</code>, for beginning of file, current file position, or end of file.</td>
</tr>
<tr>
<td><code>l_start</code></td>
<td>This is the starting offset in bytes of the lock, relative to <code>l_whence</code>.</td>
</tr>
<tr>
<td><code>l_len</code></td>
<td>This is the length of the lock region in bytes (which starts from <code>l_start</code> which is relative to <code>l_whence</code>.</td>
</tr>
<tr>
<td><code>l_pid</code></td>
<td>The process ID of the process holding the lock. This is set by the kernel when using the F_RDLCK command.</td>
</tr>
</tbody>
</table>
<p>In our example, we told it make a lock of type <code>F_WRLCK</code> (a write lock), starting relative to <code>SEEK_SET</code> (the beginning of the file), offset <code>0</code>, length <code>0</code> (a zero value means “lock to end-of-file), with the PID set to <code>getpid()</code>.</p>
<p>The next step is to <code>open()</code> the file, since <code>flock()</code> needs a file descriptor of the file that’s being locked. Note that when you open the file, you need to open it in the same <em>mode</em> as you have specified in the lock, as shown in the table, below. If you open the file in the wrong mode for a given lock type, <code>fcntl()</code> will return <code>-1</code> and <code>errno</code> will be set to <code>EBADF</code>.</p>
<table>
<thead>
<tr>
<th><code>.l_type</code></th>
<th>Mode</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>F_RDLCK</code></td>
<td><code>O_RDONLY</code> or <code>O_RDWR</code></td>
</tr>
<tr>
<td><code>F_WRLCK</code></td>
<td><code>O_WRONLY</code> or <code>O_RDWR</code></td>
</tr>
</tbody>
</table>
<p>Finally, the call to <code>fcntl()</code> actually sets, clears, or gets the lock. See, the second argument (the <code>cmd</code>) to <code>fcntl()</code> tells it what to do with the data passed to it in the <code>struct flock</code>. The following list summarizes what each <code>fcntl()</code> <code>cmd</code> does:</p>
<p>|<code>cmd</code>|Description| |<code>F_SETLKW</code>|This argument tells <code>fcntl()</code> to attempt to obtain the lock requested in the <code>struct flock</code> structure. If the lock cannot be obtained (since someone else has it locked already), <code>fcntl()</code> will wait (block) until the lock has cleared, then will set it itself. This is a very useful command. I use it all the time.| |<code>F_SETLK</code>|This function is almost identical to <code>F_SETLKW</code>. The only difference is that this one will not wait if it cannot obtain a lock. It will return immediately with <code>-1</code>. This function can be used to clear a lock by setting the <code>l_type</code> field in the <code>struct flock</code> to <code>F_UNLCK</code>.| |<code>F_GETLK</code>|If you want to only check to see if there is a lock, but don’t want to set one, you can use this command. It looks through all the file locks until it finds one that conflicts with the lock you specified in the <code>struct flock</code>. It then copies the conflicting lock’s information into the <code>struct</code> and returns it to you. If it can’t find a conflicting lock, <code>fcntl()</code> returns the <code>struct</code> as you passed it, except it sets the <code>l_type</code> field to <code>F_UNLCK</code>.|</p>
<p>In our above example, we call <code>fcntl()</code> with <code>F_SETLKW</code> as the argument, so it blocks until it can set the lock, then sets it and continues.</p>
<h2 data-number="6.2" id="clearing-a-lock"> Clearing a lock</h2>
<p>Whew! After all the locking stuff up there, it’s time for something easy: unlocking! Actually, this is a piece of cake in comparison. I’ll just reuse that first example and add the code to unlock it at the end:</p>
<div id="cb24"><pre><code><span id="cb24-1"><span>struct</span> flock fl <span>=</span> <span>{</span></span>
<span id="cb24-2">    <span>.</span>l_type   <span>=</span> F_WRLCK<span>,</span>  <span>/* F_RDLCK, F_WRLCK, F_UNLCK      */</span></span>
<span id="cb24-3">    <span>.</span>l_whence <span>=</span> SEEK_SET<span>,</span> <span>/* SEEK_SET, SEEK_CUR, SEEK_END   */</span></span>
<span id="cb24-4">    <span>.</span>l_start  <span>=</span> <span>0</span><span>,</span>        <span>/* Offset from l_whence           */</span></span>
<span id="cb24-5">    <span>.</span>l_len    <span>=</span> <span>0</span><span>,</span>        <span>/* length, 0 = to EOF             */</span></span>
<span id="cb24-6">    <span>// .l_pid             /* PID holding lock; F_RDLCK only */</span></span>
<span id="cb24-7"><span>};</span></span>
<span id="cb24-8"><span>int</span> fd<span>;</span></span>
<span id="cb24-9"></span>
<span id="cb24-10">fd <span>=</span> open<span>(</span><span>"filename"</span><span>,</span> O_WRONLY<span>);</span>  <span>/* get the file descriptor */</span></span>
<span id="cb24-11">fcntl<span>(</span>fd<span>,</span> F_SETLKW<span>,</span> <span>&amp;</span>fl<span>);</span>  <span>/* set the lock, waiting if necessary */</span></span>
<span id="cb24-12"><span>.</span></span>
<span id="cb24-13"><span>.</span></span>
<span id="cb24-14"><span>.</span></span>
<span id="cb24-15">fl<span>.</span>l_type   <span>=</span> <span>&lt;</span>b<span>&gt;</span>F_UNLCK<span>&lt;/</span>b<span>&gt;;</span>  <span>/* tell it to unlock the region */</span></span>
<span id="cb24-16">fcntl<span>(</span>fd<span>,</span> F_SETLK<span>,</span> <span>&amp;</span>fl<span>);</span> <span>/* set the region to unlocked */</span></span></code></pre></div>
<p>Now, I left the old locking code in there for high contrast, but you can tell that I just changed the <code>l_type</code> field to <code>F_UNLCK</code> (leaving the others completely unchanged!) and called <code>fcntl()</code> with <code>F_SETLK</code> as the command. Easy!</p>
<h2 data-number="6.3" id="a-demo-program"> A demo program</h2>
<p>Here, I will include a demo program, <code>lockdemo.c</code>, that waits for the user to hit return, then locks its own source, waits for another return, then unlocks it. By running this program in two (or more) windows, you can see how programs interact while waiting for locks.</p>
<p>Basically, usage is this: if you run <code>lockdemo</code> with no command line arguments, it tries to grab a write lock (<code>F_WRLCK</code>) on its source (<code>lockdemo.c</code>). If you start it with any command line arguments at all, it tries to get a read lock (<code>F_RDLCK</code>) on it.</p>
<p><a href="https://beej.us/guide/bgipc/source/examples/lockdemo.c">Here’s the source</a><a href="#fn30" id="fnref30" role="doc-noteref"><sup>30</sup></a>:</p>
<div id="cb25"><pre><code><span id="cb25-1"><a href="#cb25-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb25-2"><a href="#cb25-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb25-3"><a href="#cb25-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb25-4"><a href="#cb25-4"></a><span>#include </span><span>&lt;fcntl.h&gt;</span></span>
<span id="cb25-5"><a href="#cb25-5"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb25-6"><a href="#cb25-6"></a></span>
<span id="cb25-7"><a href="#cb25-7"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb25-8"><a href="#cb25-8"></a><span>{</span></span>
<span id="cb25-9"><a href="#cb25-9"></a>        <span>struct</span> flock fl <span>=</span> <span>{</span></span>
<span id="cb25-10"><a href="#cb25-10"></a>            <span>.</span>l_type <span>=</span> F_WRLCK<span>,</span></span>
<span id="cb25-11"><a href="#cb25-11"></a>            <span>.</span>l_whence <span>=</span> SEEK_SET<span>,</span></span>
<span id="cb25-12"><a href="#cb25-12"></a>            <span>.</span>l_start <span>=</span> <span>0</span><span>,</span></span>
<span id="cb25-13"><a href="#cb25-13"></a>            <span>.</span>l_len <span>=</span> <span>0</span><span>,</span></span>
<span id="cb25-14"><a href="#cb25-14"></a>        <span>};</span></span>
<span id="cb25-15"><a href="#cb25-15"></a>    <span>int</span> fd<span>;</span></span>
<span id="cb25-16"><a href="#cb25-16"></a></span>
<span id="cb25-17"><a href="#cb25-17"></a>    <span>if</span> <span>(</span>argc <span>&gt;</span> <span>1</span><span>)</span> </span>
<span id="cb25-18"><a href="#cb25-18"></a>        fl<span>.</span>l_type <span>=</span> F_RDLCK<span>;</span></span>
<span id="cb25-19"><a href="#cb25-19"></a></span>
<span id="cb25-20"><a href="#cb25-20"></a>    <span>if</span> <span>((</span>fd <span>=</span> open<span>(</span><span>"lockdemo.c"</span><span>,</span> O_RDWR<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb25-21"><a href="#cb25-21"></a>        perror<span>(</span><span>"open"</span><span>);</span></span>
<span id="cb25-22"><a href="#cb25-22"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb25-23"><a href="#cb25-23"></a>    <span>}</span></span>
<span id="cb25-24"><a href="#cb25-24"></a></span>
<span id="cb25-25"><a href="#cb25-25"></a>    printf<span>(</span><span>"Press &lt;RETURN&gt; to try to get lock: "</span><span>);</span></span>
<span id="cb25-26"><a href="#cb25-26"></a>    getchar<span>();</span></span>
<span id="cb25-27"><a href="#cb25-27"></a>    printf<span>(</span><span>"Trying to get lock..."</span><span>);</span></span>
<span id="cb25-28"><a href="#cb25-28"></a></span>
<span id="cb25-29"><a href="#cb25-29"></a>    <span>if</span> <span>(</span>fcntl<span>(</span>fd<span>,</span> F_SETLKW<span>,</span> <span>&amp;</span>fl<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb25-30"><a href="#cb25-30"></a>        perror<span>(</span><span>"fcntl"</span><span>);</span></span>
<span id="cb25-31"><a href="#cb25-31"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb25-32"><a href="#cb25-32"></a>    <span>}</span></span>
<span id="cb25-33"><a href="#cb25-33"></a></span>
<span id="cb25-34"><a href="#cb25-34"></a>    printf<span>(</span><span>"got lock</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb25-35"><a href="#cb25-35"></a>    printf<span>(</span><span>"Press &lt;RETURN&gt; to release lock: "</span><span>);</span></span>
<span id="cb25-36"><a href="#cb25-36"></a>    getchar<span>();</span></span>
<span id="cb25-37"><a href="#cb25-37"></a></span>
<span id="cb25-38"><a href="#cb25-38"></a>    fl<span>.</span>l_type <span>=</span> F_UNLCK<span>;</span>  <span>/* set to unlock same region */</span></span>
<span id="cb25-39"><a href="#cb25-39"></a></span>
<span id="cb25-40"><a href="#cb25-40"></a>    <span>if</span> <span>(</span>fcntl<span>(</span>fd<span>,</span> F_SETLK<span>,</span> <span>&amp;</span>fl<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb25-41"><a href="#cb25-41"></a>        perror<span>(</span><span>"fcntl"</span><span>);</span></span>
<span id="cb25-42"><a href="#cb25-42"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb25-43"><a href="#cb25-43"></a>    <span>}</span></span>
<span id="cb25-44"><a href="#cb25-44"></a></span>
<span id="cb25-45"><a href="#cb25-45"></a>    printf<span>(</span><span>"Unlocked.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb25-46"><a href="#cb25-46"></a></span>
<span id="cb25-47"><a href="#cb25-47"></a>    close<span>(</span>fd<span>);</span></span>
<span id="cb25-48"><a href="#cb25-48"></a></span>
<span id="cb25-49"><a href="#cb25-49"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb25-50"><a href="#cb25-50"></a><span>}</span></span></code></pre></div>
<p>Compile that puppy up and start messing with it in a couple windows. Notice that when one <code>lockdemo</code> has a read lock, other instances of the program can get their own read locks with no problem. It’s only when a write lock is obtained that other processes can’t get a lock of any kind.</p>
<p>Another thing to notice is that you can’t get a write lock if there are any read locks on the same region of the file. The process waiting to get the write lock will wait until all the read locks are cleared. One upshot of this is that you can keep piling on read locks (because a read lock doesn’t stop other processes from getting read locks) and any processes waiting for a write lock will sit there and starve. There isn’t a rule anywhere that keeps you from adding more read locks if there is a process waiting for a write lock. You must be careful.</p>
<p>Practically, though, you will probably mostly be using write locks to guarantee exclusive access to a file for a short amount of time while it’s being updated; that is the most common use of locks as far as I’ve seen. And I’ve seen them all…well, I’ve seen one…a small one…a picture—well, I’ve heard about them.</p>
<h2 data-number="6.4" id="summary-2"> Summary</h2>
<p>Locks rule. Sometimes, though, you might need more control over your processes in a producer-consumer situation. For this reason, if no other, you should see the document on System V <a href="#semaphores">semaphores</a> (or POSIX, for that matter; they aren’t identical) if your system supports such a beast. They provide a more extensive and at least equally function equivalent to file locks.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- Message Queues -->
<!-- ======================================================= -->
<h2 data-number="7" id="mq"> Message Queues</h2>
<p>Those people who brought us System V have seen fit to include some IPC goodies that have been implemented on various platforms (including Linux, of course.) This document describes the usage and functionality of the extremely groovy System V Message Queues! Linux also supports a POSIX version of each of these; see <em>mq_overview</em>, <em>sem_overview</em>, and <em>shm_overview</em> in the man pages.</p>
<p>As usual, I want to spew some overview at you before getting into the nitty-gritty. A message queue works kind of like a <a href="#fifos">FIFO</a>, but supports some additional functionality. Generally, see, messages are taken off the queue in the order they are put on. Specifically, however, there are ways to pull certain messages out of the queue before they reach the front. It’s like cutting in line. (Incidentally, don’t try to cut in line while visiting the Great America amusement park in Silicon Valley, as you can be arrested for it. They take cutting <em>very</em> seriously down there.)</p>
<p>In terms of usage, a process can create a new message queue, or it can connect to an existing one. In this, the latter, way two processes can exchange information through the same message queue. Score.</p>
<p>One more thing about System V IPC: when you create a message queue, it doesn’t go away until you destroy it, just like how files don’t go away until you explicitly remove them. All the processes that have ever used it can quit, but the queue will still exist. A good practice is to use the <code>ipcs</code> command to check if any of your unused message queues are just floating around out there. You can destroy them with the <code>ipcrm</code> command, which is preferable to getting a visit from the sysadmin telling you that you’ve grabbed every available message queue on the system.</p>
<h2 data-number="7.1" id="wheres-my-queue"> Where’s my queue?</h2>
<p>Let’s get something going! First of all, you want to connect to a queue, or create it if it doesn’t exist. The call to accomplish this is the <code>msgget()</code> system call:</p>
<div id="cb26"><pre><code><span id="cb26-1"><span>int</span> msgget<span>(</span>key_t key<span>,</span> <span>int</span> msgflg<span>);</span></span></code></pre></div>
<p><code>msgget()</code> returns the message queue ID on success, or <code>-1</code> on failure (and it sets <code>errno</code>, of course.)</p>
<p>The arguments are a little weird, but can be understood with a little brow-beating. The first, <code>key</code> is a system-wide unique identifier describing the queue you want to connect to (or create). Every other process that wants to connect to this queue will have to use the same <code>key</code>.</p>
<p>The other argument, <code>msgflg</code> tells <code>msgget()</code> what to do with queue in question. To create a queue, this field must be set equal to <code>IPC_CREAT</code> bit-wise OR’d with the permissions for this queue. (The queue permissions are the same as standard file permissions—queues take on the user-id and group-id of the program that created them.)</p>
<p>A sample call is given in the following section.</p>
<h2 data-number="7.2" id="mqftok"> “Are you the Key Master?”</h2>
<p>What about this <code>key</code> nonsense? How do we create one? Well, since the type <code>key_t</code> is actually just a <code>long</code>, you can use any number you want. But what if you hard-code the number and some other unrelated program hardcodes the same number but wants another queue? The solution is to use the <code>ftok()</code> function which generates a key from two arguments:</p>
<div id="cb27"><pre><code><span id="cb27-1">key_t ftok<span>(</span><span>const</span> <span>char</span> <span>*</span>`path`<span>,</span> <span>int</span> `id`<span>);</span></span></code></pre></div>
<p>Ok, this is getting weird. Basically, <code>path</code> just has to be a path to a file that uniquely identifies this application; the pathname to the application’s configuration file is a common string to use (what are the odds that two applications will use the same configuration file?). The other argument, <code>id</code> is usually just set to some arbitrary char, like ‘A’. The <code>ftok()</code> function uses information about the named file (like inode number, etc.) and the <code>id</code> to generate a probably-unique <code>key</code> for <code>msgget()</code>. Programs that want to use the same queue must generate the same <code>key</code>, so they must pass the same parameters to <code>ftok()</code>.</p>
<p>Finally, it’s time to make the call:</p>
<div id="cb28"><pre><code><span id="cb28-1"><span>#include </span><span>&lt;sys/msg.h&gt;</span></span>
<span id="cb28-2"></span>
<span id="cb28-3">key <span>=</span> ftok<span>(</span><span>"/home/beej/somefile"</span><span>,</span> <span>'b'</span><span>);</span></span>
<span id="cb28-4">msqid <span>=</span> msgget<span>(</span>key<span>,</span> <span>0666</span> <span>|</span> IPC_CREAT<span>);</span></span></code></pre></div>
<p>In the above example, I set the permissions on the queue to <code>666</code> (or <code>rw-rw-rw-</code>, if that makes more sense to you). And now we have <code>msqid</code> which will be used to send and receive messages from the queue.</p>
<h2 data-number="7.3" id="sending-to-the-queue"> Sending to the queue</h2>
<p>Once you’ve connected to the message queue using <code>msgget()</code>, you are ready to send and receive messages. First, the sending:</p>
<p>Each message is made up of two parts, which are defined in the template structure <code>struct msgbuf</code>, as defined in <code>sys/msg.h</code>:</p>
<div id="cb29"><pre><code><span id="cb29-1"><span>struct</span> msgbuf <span>{</span></span>
<span id="cb29-2">    <span>long</span> mtype<span>;</span></span>
<span id="cb29-3">    <span>char</span> mtext<span>[</span><span>1</span><span>];</span></span>
<span id="cb29-4"><span>};</span></span></code></pre></div>
<p>The field <code>mtype</code> is used later when retrieving messages from the queue, and can be set to any positive number. <code>mtext</code> is the data this will be added to the queue.</p>
<p>“What?! You can only put one byte arrays onto a message queue?! Worthless!!” Well, not exactly. You can use any structure you want to put messages on the queue, as long as the first element is a long. For instance, we could use this structure to store all kinds of goodies:</p>
<div id="cb30"><pre><code><span id="cb30-1"><span>struct</span> pirate_msgbuf <span>{</span></span>
<span id="cb30-2">    <span>long</span> mtype<span>;</span>  <span>/* must be positive */</span></span>
<span id="cb30-3">    <span>struct</span> pirate_info <span>{</span></span>
<span id="cb30-4">        <span>char</span> name<span>[</span><span>30</span><span>];</span></span>
<span id="cb30-5">        <span>char</span> ship_type<span>;</span></span>
<span id="cb30-6">        <span>int</span> notoriety<span>;</span></span>
<span id="cb30-7">        <span>int</span> cruelty<span>;</span></span>
<span id="cb30-8">        <span>int</span> booty_value<span>;</span></span>
<span id="cb30-9">    <span>}</span> info<span>;</span></span>
<span id="cb30-10"><span>};</span></span></code></pre></div>
<p>Ok, so how do we pass this information to a message queue? The answer is simple, my friends: just use <code>msgsnd()</code>:</p>
<div id="cb31"><pre><code><span id="cb31-1"><span>int</span> msgsnd<span>(</span><span>int</span> msqid<span>,</span> <span>const</span> <span>void</span> <span>*</span>msgp<span>,</span></span>
<span id="cb31-2">           <span>size_t</span> msgsz<span>,</span> <span>int</span> msgflg<span>);&lt;/</span>code<span>&gt;</span></span></code></pre></div>
<p><code>msqid</code> is the message queue identifier returned by <code>msgget()</code>. The pointer <code>msgp</code> is a pointer to the data you want to put on the queue. <code>msgsz</code> is the size in bytes of the data to add to the queue (not counting the size of the <code>mtype</code> member). Finally, <code>msgflg</code> allows you to set some optional flag parameters, which we’ll ignore for now by setting it to <code>0</code>.</p>
<p>The best way to get the size of the data to send is by setting it up correctly to begin with. The first field of the <code>struct</code> should be a <code>long</code>, as we’ve seen. To be safe and portable, there should only be one additional field. If you need more than one, wrap it up in a <code>struct</code> like with <code>struct pirate_msgbuf</code>, above.</p>
<p>When to get the size of the data to send, just take the size of the second field:</p>
<div id="cb32"><pre><code><span id="cb32-1"><span>struct</span> cheese_msgbuf <span>{</span></span>
<span id="cb32-2">    <span>long</span> mtype<span>;</span></span>
<span id="cb32-3">    <span>char</span> name<span>[</span><span>20</span><span>];</span></span>
<span id="cb32-4"><span>};</span></span>
<span id="cb32-5"></span>
<span id="cb32-6"><span>/* calculate the size of the data to send: */</span></span>
<span id="cb32-7"></span>
<span id="cb32-8"><span>struct</span> cheese_msgbuf mbuf<span>;</span></span>
<span id="cb32-9"><span>int</span> size<span>;</span></span>
<span id="cb32-10"></span>
<span id="cb32-11">size <span>=</span> <span>sizeof</span> mbuf<span>.</span>name<span>;</span></span>
<span id="cb32-12"></span>
<span id="cb32-13"><span>/* Or, without a declared variable: */</span></span>
<span id="cb32-14"></span>
<span id="cb32-15">size <span>=</span> <span>sizeof</span> <span>((</span><span>struct</span> cheese_msgbuf<span>*)</span><span>0</span><span>)-&gt;</span>name<span>;</span></span></code></pre></div>
<p>Or, if you have a lot of different fields, put them in a <code>struct</code> and use the <operator>sizeof</operator> operator on that. It can be extra convenient to do this, because now the substructure can have a name to reference. Here is a code snippet that shows one of our pirate structures being added to the message queue:</p>
<div id="cb33"><pre><code><span id="cb33-1"><span>#include </span><span>&lt;sys/msg.h&gt;</span></span>
<span id="cb33-2"><span>#include </span><span>&lt;stddef.h&gt;</span></span>
<span id="cb33-3"></span>
<span id="cb33-4">key_t key<span>;</span></span>
<span id="cb33-5"><span>int</span> msqid<span>;</span></span>
<span id="cb33-6"><span>struct</span> pirate_msgbuf pmb <span>=</span> <span>{</span><span>2</span><span>,</span> <span>{</span> <span>"L'Olonais"</span><span>,</span> <span>'S'</span><span>,</span> <span>80</span><span>,</span> <span>10</span><span>,</span> <span>12035</span> <span>}</span> <span>};</span></span>
<span id="cb33-7"></span>
<span id="cb33-8">key <span>=</span> ftok<span>(</span><span>"/home/beej/somefile"</span><span>,</span> <span>'b'</span><span>);</span></span>
<span id="cb33-9">msqid <span>=</span> msgget<span>(</span>key<span>,</span> <span>0666</span> <span>|</span> IPC_CREAT<span>);</span></span>
<span id="cb33-10"></span>
<span id="cb33-11"><span>/* stick him on the queue */</span></span>
<span id="cb33-12"><span>/* struct pirate_info is the sub-structure */</span></span>
<span id="cb33-13">msgsnd<span>(</span>msqid<span>,</span> <span>&amp;</span>pmb<span>,</span> <span>sizeof</span><span>(</span><span>struct</span> pirate_info<span>),</span> <span>0</span><span>);</span></span></code></pre></div>
<p>Aside from remembering to error-check the return values from all these functions, this is all there is to it. Oh, yeah: note that I arbitrarily set the <code>mtype</code> field to <code>2</code> up there. That’ll be important in the next section.</p>
<h2 data-number="7.4" id="receiving-from-the-queue"> Receiving from the queue</h2>
<p>Now that we have the dreaded pirate <a href="https://beej.us/pirates/pirate_view.php?file=lolonais.jpg">Francis L’Olonais</a> stuck in our message queue, how do we get him out? As you can imagine, there is a counterpart to <code>msgsnd()</code>: it is <code>msgrcv()</code>. How imaginative.</p>
<p>A call to <code>msgrcv()</code> that would do it looks something like this:</p>
<div id="cb34"><pre><code><span id="cb34-1"><span>#include </span><span>&lt;sys/msg.h&gt;</span></span>
<span id="cb34-2"><span>#include </span><span>&lt;stddef.h&gt;</span></span>
<span id="cb34-3"></span>
<span id="cb34-4">key_t key<span>;</span></span>
<span id="cb34-5"><span>int</span> msqid<span>;</span></span>
<span id="cb34-6"><span>struct</span> pirate_msgbuf pmb<span>;</span> <span>/* where L'Olonais is to be kept */</span></span>
<span id="cb34-7"></span>
<span id="cb34-8">key <span>=</span> ftok<span>(</span><span>"/home/beej/somefile"</span><span>,</span> <span>'b'</span><span>);</span></span>
<span id="cb34-9">msqid <span>=</span> msgget<span>(</span>key<span>,</span> <span>0666</span> <span>|</span> IPC_CREAT<span>);</span></span>
<span id="cb34-10"></span>
<span id="cb34-11"><span>/* get him off the queue! */</span></span>
<span id="cb34-12">msgrcv<span>(</span>msqid<span>,</span> <span>&amp;</span>pmb<span>,</span> <span>sizeof</span><span>(</span><span>struct</span> pirate_info<span>),</span> <span>2</span><span>,</span> <span>0</span><span>);</span></span></code></pre></div>
<p>There is something new to note in the <code>msgrcv()</code> call: the <code>2</code>! What does it mean? Here’s the synopsis of the call:</p>
<div id="cb35"><pre><code><span id="cb35-1"><span>int</span> msgrcv<span>(</span><span>int</span> msqid<span>,</span> <span>void</span> <span>*</span>msgp<span>,</span> <span>size_t</span> msgsz<span>,</span> <span>long</span> msgtyp<span>,</span> <span>int</span> msgflg<span>);</span></span></code></pre></div>
<p>The <code>2</code> we specified in the call is the requested <code>msgtyp</code>. Recall that we set the <code>mtype</code> arbitrarily to <code>2</code> in the <code>msgsnd()</code> section of this document, so that will be the one that is retrieved from the queue.</p>
<p>Actually, the behavior of <code>msgrcv()</code> can be modified drastically by choosing a <code>msgtyp</code> that is positive, negative, or zero:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th><code>msgtyp</code></th>
<th>Effect on <code>msgrcv()</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>Zero</td>
<td>Retrieve the next message on the queue, regardless of its <code>mtype</code>.</td>
</tr>
<tr>
<td>Positive</td>
<td>Get the next message with an <code>mtype</code> <em>equal to</em> the specified <code>msgtyp</code>.</td>
</tr>
<tr>
<td>Negative</td>
<td>Retrieve the first message on the queue whose <code>mtype</code> field is less than or equal to the absolute value of the <code>msgtyp</code> argument.</td>
</tr>
</tbody>
</table>
<p>So, what will often be the case is that you’ll simply want the next message on the queue, no matter what <code>mtype</code> it is. As such, you’d set the <code>msgtyp</code> parameter to <code>0</code>.</p>
<h2 data-number="7.5" id="destroying-a-message-queue"> Destroying a message queue</h2>
<p>There comes a time when you have to destroy a message queue. Like I said before, they will stick around until you explicitly remove them; it is important that you do this so you don’t waste system resources. Ok, so you’ve been using this message queue all day, and it’s getting old. You want to obliterate it. There are two ways:</p>
<ol type="1">
<li><p>Use the Unix command <code>ipcs</code> to get a list of defined message queues, then use the command <code>ipcrm</code> to delete the queue.</p></li>
<li><p>Write a program to do it for you.</p></li>
</ol>
<p>Often, the latter choice is the most appropriate, since you might want your program to clean up the queue at some time or another. To do this requires the introduction of another function: <code>msgctl()</code>.</p>
<p>The synopsis of <code>msgctl()</code> is:</p>
<div id="cb36"><pre><code><span id="cb36-1"><span>int</span> msgctl<span>(</span><span>int</span> msqid<span>,</span> <span>int</span> cmd<span>,</span></span>
<span id="cb36-2">           <span>struct</span> msqid_ds <span>*</span>buf<span>);</span></span></code></pre></div>
<p>Of course, <code>msqid</code> is the queue identifier obtained from <code>msgget()</code>. The important argument is <code>cmd</code> which tells <code>msgctl()</code> how to behave. It can be a variety of things, but we’re only going to talk about <code>IPC_RMID</code>, which is used to remove the message queue. The <code>buf</code> argument can be set to <code>NULL</code> for the purposes of <code>IPC_RMID</code>.</p>
<p>Say that we have the queue we created above to hold the pirates. You can destroy that queue by issuing the following call:</p>
<div id="cb37"><pre><code><span id="cb37-1"><span>#include </span><span>&lt;sys/msg.h&gt;</span></span>
<span id="cb37-2"><span>.</span></span>
<span id="cb37-3"><span>.</span></span>
<span id="cb37-4">msgctl<span>(</span>msqid<span>,</span> IPC_RMID<span>,</span> NULL<span>);</span></span></code></pre></div>
<p>And the message queue is no more. (Of course, error checking of these return values is always appropriate!)</p>
<!-- ======================================================= -->
<!-- Message queues: Sample programs, anyone? -->
<!-- ======================================================= -->
<h2 data-number="7.6" id="sample-programs-anyone"> Sample programs, anyone?</h2>
<p>For the sake of completeness, I’ll include a brace of programs that will communicate using message queues. The first, <code>kirk.c</code> adds messages to the message queue, and <code>spock.c</code> retrieves them.</p>
<p>Here is the source for <a href="https://beej.us/guide/bgipc/source/examples/kirk.c"><code>kirk.c</code></a><a href="#fn31" id="fnref31" role="doc-noteref"><sup>31</sup></a>:</p>
<div id="cb38"><pre><code><span id="cb38-1"><a href="#cb38-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb38-2"><a href="#cb38-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb38-3"><a href="#cb38-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb38-4"><a href="#cb38-4"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb38-5"><a href="#cb38-5"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb38-6"><a href="#cb38-6"></a><span>#include </span><span>&lt;sys/ipc.h&gt;</span></span>
<span id="cb38-7"><a href="#cb38-7"></a><span>#include </span><span>&lt;sys/msg.h&gt;</span></span>
<span id="cb38-8"><a href="#cb38-8"></a></span>
<span id="cb38-9"><a href="#cb38-9"></a><span>struct</span> my_msgbuf <span>{</span></span>
<span id="cb38-10"><a href="#cb38-10"></a>    <span>long</span> mtype<span>;</span></span>
<span id="cb38-11"><a href="#cb38-11"></a>    <span>char</span> mtext<span>[</span><span>200</span><span>];</span></span>
<span id="cb38-12"><a href="#cb38-12"></a><span>};</span></span>
<span id="cb38-13"><a href="#cb38-13"></a></span>
<span id="cb38-14"><a href="#cb38-14"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb38-15"><a href="#cb38-15"></a><span>{</span></span>
<span id="cb38-16"><a href="#cb38-16"></a>    <span>struct</span> my_msgbuf buf<span>;</span></span>
<span id="cb38-17"><a href="#cb38-17"></a>    <span>int</span> msqid<span>;</span></span>
<span id="cb38-18"><a href="#cb38-18"></a>    key_t key<span>;</span></span>
<span id="cb38-19"><a href="#cb38-19"></a></span>
<span id="cb38-20"><a href="#cb38-20"></a>    <span>if</span> <span>((</span>key <span>=</span> ftok<span>(</span><span>"kirk.c"</span><span>,</span> <span>'B'</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb38-21"><a href="#cb38-21"></a>        perror<span>(</span><span>"ftok"</span><span>);</span></span>
<span id="cb38-22"><a href="#cb38-22"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb38-23"><a href="#cb38-23"></a>    <span>}</span></span>
<span id="cb38-24"><a href="#cb38-24"></a></span>
<span id="cb38-25"><a href="#cb38-25"></a>    <span>if</span> <span>((</span>msqid <span>=</span> msgget<span>(</span>key<span>,</span> <span>0644</span> <span>|</span> IPC_CREAT<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb38-26"><a href="#cb38-26"></a>        perror<span>(</span><span>"msgget"</span><span>);</span></span>
<span id="cb38-27"><a href="#cb38-27"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb38-28"><a href="#cb38-28"></a>    <span>}</span></span>
<span id="cb38-29"><a href="#cb38-29"></a>    </span>
<span id="cb38-30"><a href="#cb38-30"></a>    printf<span>(</span><span>"Enter lines of text, ^D to quit:</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb38-31"><a href="#cb38-31"></a></span>
<span id="cb38-32"><a href="#cb38-32"></a>    buf<span>.</span>mtype <span>=</span> <span>1</span><span>;</span> <span>/* we don't really care in this case */</span></span>
<span id="cb38-33"><a href="#cb38-33"></a></span>
<span id="cb38-34"><a href="#cb38-34"></a>    <span>while</span><span>(</span>fgets<span>(</span>buf<span>.</span>mtext<span>,</span> <span>sizeof</span> buf<span>.</span>mtext<span>,</span> stdin<span>)</span> <span>!=</span> NULL<span>)</span> <span>{</span></span>
<span id="cb38-35"><a href="#cb38-35"></a>        <span>int</span> len <span>=</span> strlen<span>(</span>buf<span>.</span>mtext<span>);</span></span>
<span id="cb38-36"><a href="#cb38-36"></a></span>
<span id="cb38-37"><a href="#cb38-37"></a>        <span>/* ditch newline at end, if it exists */</span></span>
<span id="cb38-38"><a href="#cb38-38"></a>        <span>if</span> <span>(</span>buf<span>.</span>mtext<span>[</span>len<span>-</span><span>1</span><span>]</span> <span>==</span> <span>'</span><span>\n</span><span>'</span><span>)</span> buf<span>.</span>mtext<span>[</span>len<span>-</span><span>1</span><span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb38-39"><a href="#cb38-39"></a></span>
<span id="cb38-40"><a href="#cb38-40"></a>        <span>if</span> <span>(</span>msgsnd<span>(</span>msqid<span>,</span> <span>&amp;</span>buf<span>,</span> len<span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span></span>
<span id="cb38-41"><a href="#cb38-41"></a>            perror<span>(</span><span>"msgsnd"</span><span>);</span></span>
<span id="cb38-42"><a href="#cb38-42"></a>    <span>}</span></span>
<span id="cb38-43"><a href="#cb38-43"></a></span>
<span id="cb38-44"><a href="#cb38-44"></a>    <span>if</span> <span>(</span>msgctl<span>(</span>msqid<span>,</span> IPC_RMID<span>,</span> NULL<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb38-45"><a href="#cb38-45"></a>        perror<span>(</span><span>"msgctl"</span><span>);</span></span>
<span id="cb38-46"><a href="#cb38-46"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb38-47"><a href="#cb38-47"></a>    <span>}</span></span>
<span id="cb38-48"><a href="#cb38-48"></a></span>
<span id="cb38-49"><a href="#cb38-49"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb38-50"><a href="#cb38-50"></a><span>}</span></span></code></pre></div>
<p>The way <code>kirk</code> works is that it allows you to enter lines of text. Each line is bundled into a message and added to the message queue. The message queue is then read by <code>spock</code>.</p>
<p>Here is the source for <a href="https://beej.us/guide/bgipc/source/examples/spock.c"><code>spock.c</code></a><a href="#fn32" id="fnref32" role="doc-noteref"><sup>32</sup></a>:</p>
<div id="cb39"><pre><code><span id="cb39-1"><a href="#cb39-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb39-2"><a href="#cb39-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb39-3"><a href="#cb39-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb39-4"><a href="#cb39-4"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb39-5"><a href="#cb39-5"></a><span>#include </span><span>&lt;sys/ipc.h&gt;</span></span>
<span id="cb39-6"><a href="#cb39-6"></a><span>#include </span><span>&lt;sys/msg.h&gt;</span></span>
<span id="cb39-7"><a href="#cb39-7"></a></span>
<span id="cb39-8"><a href="#cb39-8"></a><span>struct</span> my_msgbuf <span>{</span></span>
<span id="cb39-9"><a href="#cb39-9"></a>    <span>long</span> mtype<span>;</span></span>
<span id="cb39-10"><a href="#cb39-10"></a>    <span>char</span> mtext<span>[</span><span>200</span><span>];</span></span>
<span id="cb39-11"><a href="#cb39-11"></a><span>};</span></span>
<span id="cb39-12"><a href="#cb39-12"></a></span>
<span id="cb39-13"><a href="#cb39-13"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb39-14"><a href="#cb39-14"></a><span>{</span></span>
<span id="cb39-15"><a href="#cb39-15"></a>    <span>struct</span> my_msgbuf buf<span>;</span></span>
<span id="cb39-16"><a href="#cb39-16"></a>    <span>int</span> msqid<span>;</span></span>
<span id="cb39-17"><a href="#cb39-17"></a>    key_t key<span>;</span></span>
<span id="cb39-18"><a href="#cb39-18"></a></span>
<span id="cb39-19"><a href="#cb39-19"></a>    <span>if</span> <span>((</span>key <span>=</span> ftok<span>(</span><span>"kirk.c"</span><span>,</span> <span>'B'</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span>  <span>/* same key as kirk.c */</span></span>
<span id="cb39-20"><a href="#cb39-20"></a>        perror<span>(</span><span>"ftok"</span><span>);</span></span>
<span id="cb39-21"><a href="#cb39-21"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb39-22"><a href="#cb39-22"></a>    <span>}</span></span>
<span id="cb39-23"><a href="#cb39-23"></a></span>
<span id="cb39-24"><a href="#cb39-24"></a>    <span>if</span> <span>((</span>msqid <span>=</span> msgget<span>(</span>key<span>,</span> <span>0644</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span> <span>/* connect to the queue */</span></span>
<span id="cb39-25"><a href="#cb39-25"></a>        perror<span>(</span><span>"msgget"</span><span>);</span></span>
<span id="cb39-26"><a href="#cb39-26"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb39-27"><a href="#cb39-27"></a>    <span>}</span></span>
<span id="cb39-28"><a href="#cb39-28"></a>    </span>
<span id="cb39-29"><a href="#cb39-29"></a>    printf<span>(</span><span>"spock: ready to receive messages, captain.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb39-30"><a href="#cb39-30"></a></span>
<span id="cb39-31"><a href="#cb39-31"></a>    <span>for</span><span>(;;)</span> <span>{</span> <span>/* Spock never quits! */</span></span>
<span id="cb39-32"><a href="#cb39-32"></a>        <span>if</span> <span>(</span>msgrcv<span>(</span>msqid<span>,</span> <span>&amp;</span>buf<span>,</span> <span>sizeof</span> buf<span>.</span>mtext<span>,</span> <span>0</span><span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb39-33"><a href="#cb39-33"></a>            perror<span>(</span><span>"msgrcv"</span><span>);</span></span>
<span id="cb39-34"><a href="#cb39-34"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb39-35"><a href="#cb39-35"></a>        <span>}</span></span>
<span id="cb39-36"><a href="#cb39-36"></a>        printf<span>(</span><span>"spock: </span><span>\"%s\"\n</span><span>"</span><span>,</span> buf<span>.</span>mtext<span>);</span></span>
<span id="cb39-37"><a href="#cb39-37"></a>    <span>}</span></span>
<span id="cb39-38"><a href="#cb39-38"></a></span>
<span id="cb39-39"><a href="#cb39-39"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb39-40"><a href="#cb39-40"></a><span>}</span></span></code></pre></div>
<p>Notice that <code>spock</code>, in the call to <code>msgget()</code>, doesn’t include the <code>IPC_CREAT</code> option. We’ve left it up to <code>kirk</code> to create the message queue, and <code>spock</code> will return an error if he hasn’t done so.</p>
<p>Notice what happens when you’re running both in separate windows and you kill one or the other. Also try running two copies of <code>kirk</code> or two copies of <code>spock</code> to get an idea of what happens when you have two readers or two writers. Another interesting demonstration is to run <code>kirk</code>, enter a bunch of messages, then run <code>spock</code> and see it retrieve all the messages in one swoop. Just messing around with these toy programs will help you gain an understanding of what is really going on.</p>
<h2 data-number="7.7" id="summary-3"> Summary</h2>
<p>There is more to message queues than this short tutorial can present. Be sure to look in the man pages to see what else you can do, especially in the area of <code>msgctl()</code>. Also, there are more options you can pass to other functions to control how <code>msgsnd()</code> and <code>msgrcv()</code> handle if the queue is full or empty, respectively.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- Semaphores -->
<!-- ======================================================= -->
<h2 data-number="8" id="semaphores"> Semaphores</h2>
<p>Remember <a href="#flocking">file locking</a>? Well, semaphores can be thought of as really generic advisory locking mechanisms. You can use them to control access to files, <a href="#shm">shared memory</a>, and, well, just about anything you want. The basic functionality of a semaphore is that you can either set it, check it, or wait until it clears then set it (“test-n-set”). No matter how complex the stuff that follows gets, remember those three operations.</p>
<p>This document will provide an overview of semaphore functionality, and will end with a program that uses semaphores to control access to a file. (This task, admittedly, could easily be handled with file locking, but it makes a good example since it’s easier to wrap your head around than, say, shared memory.)</p>
<!-- ======================================================= -->
<!-- Grabbing some semaphores -->
<!-- ======================================================= -->
<h2 data-number="8.1" id="grabbing-some-semaphores"> Grabbing some semaphores</h2>
<p>With System V IPC, you don’t grab single semaphores; you grab <em>sets</em> of semaphores. You can, of course, grab a semaphore set that only has one semaphore in it, but the point is you can have a whole slew of semaphores just by creating a single semaphore set.</p>
<p>How do you create the semaphore set? It’s done with a call to <code>semget()</code>, which returns the semaphore id (hereafter referred to as the <code>semid</code>):</p>
<div id="cb40"><pre><code><span id="cb40-1"><span>#include </span><span>&lt;sys/sem.h&gt;</span></span>
<span id="cb40-2"></span>
<span id="cb40-3"><span>int</span> semget<span>(</span>key_t key<span>,</span> <span>int</span> nsems<span>,</span> <span>int</span> semflg<span>);</span></span></code></pre></div>
<p>What’s the <code>key</code>? It’s a unique identifier that is used by different processes to identify this semaphore set. (This <code>key</code> will be generated using <code>ftok()</code>, described in the <a href="#mqftok">Message Queues section</a>.)</p>
<p>The next argument, <code>nsems</code>, is (you guessed it!) the number of semaphores in this semaphore set. The maximum number is system dependent, but it’s probably around 32000. If you’re needing more (greedy wretch!), just get another semaphore set. You may pass <code>0</code> if you’re connecting to an existing semaphore set, but you must specify a positive number if you’re creating a new semaohore set.</p>
<p>Finally, there’s the <code>semflg</code> argument. This tells <code>semget()</code> what the permissions should be on the new semaphore set, whether you’re creating a new set or just want to connect to an existing one, and other things that you can look up. For creating a new set, permissions can be bitwise-OR’d with <code>IPC_CREAT</code>.</p>
<p>Here’s an example call that generates the <code>key</code> with <code>ftok()</code> and creates a 10 semaphore set, with 666 (<code>rw-rw-rw-</code>) permissions:</p>
<div id="cb41"><pre><code><span id="cb41-1"><span>#include </span><span>&lt;sys/ipc.h&gt;</span></span>
<span id="cb41-2"><span>#include </span><span>&lt;sys/sem.h&gt;</span></span>
<span id="cb41-3"></span>
<span id="cb41-4">key_t key<span>;</span></span>
<span id="cb41-5"><span>int</span> semid<span>;</span></span>
<span id="cb41-6"></span>
<span id="cb41-7">key <span>=</span> ftok<span>(</span><span>"/home/beej/somefile"</span><span>,</span> <span>'E'</span><span>);</span></span>
<span id="cb41-8">semid <span>=</span> semget<span>(</span>key<span>,</span> <span>10</span><span>,</span> <span>0666</span> <span>|</span> IPC_CREAT<span>);</span></span></code></pre></div>
<p>Congrats! You’ve created a new semaphore set! After running the program you can check it out with the <code>ipcs</code> command. (Don’t forget to remove it when you’re done with it with <code>ipcrm</code>!)</p>
<p>Wait! Warning! <em>¡Advertencia! ¡No pongas las manos en la tolva!</em> (That’s the only Spanish I learned while working at Pizza Hut in 1990. It was printed on the dough roller.) Look here:</p>
<p>When you first create some semaphores, they’re all uninitialized; it takes another call to mark them as free (namely to <code>semop()</code> or <code>semctl()</code>—see the following sections.) What does this mean? Well, it means that creation of a semaphore is not <em>atomic</em> (in other words, it’s not a one-step process). If two processes are trying to create, initialize, and use a semaphore at the same time, a race condition might develop.</p>
<p>One way to get around this difficulty is by having a single init process that creates and initializes the semaphore long before the main processes begin to run. The main process just accesses it, but never creates nor destroys it.</p>
<p>Stevens refers to this problem as the semaphore’s “fatal flaw”. He solves it by creating the semaphore set with the <code>IPC_EXCL</code> flag. If process 1 creates it first, process 2 will return an error on the call (with <code>errno</code> set to <code>EEXIST</code>.) At that point, process 2 will have to wait until the semaphore is initialized by process 1. How can it tell? Turns out, it can repeatedly call <code>semctl()</code> with the <code>IPC_STAT</code> flag, and look at the <code>sem_otime</code> member of the returned <code>struct semid_ds</code> structure. If that’s non-zero, it means process 1 has performed an operation on the semaphore with <code>semop()</code>, presumably to initialize it.</p>
<p>For an example of this, see the demonstration program <a href="https://beej.us/guide/bgipc/source/examples/semdemo.c"><code>semdemo.c</code></a><a href="#fn33" id="fnref33" role="doc-noteref"><sup>33</sup></a>, below, in which I generally reimplement <a href="http://www.kohala.com/start/unpv22e/unpv22e.html">Stevens’s code</a>.</p>
<p>In the meantime, let’s hop to the next section and take a look at how to initialize our freshly-minted semaphores.</p>
<!-- ======================================================= -->
<!-- Controlling semaphores -->
<!-- ======================================================= -->
<h2 data-number="8.2" id="controlling-your-semaphores-with-semctl"> Controlling your semaphores with <code>semctl()</code></h2>
<p>Once you have created your semaphore sets, you have to initialize them to a positive value to show that the resource is available to use. The function <code>semctl()</code> allows you to do atomic value changes to individual semaphores or complete sets of semaphores.</p>
<div id="cb42"><pre><code><span id="cb42-1"><span>int</span> semctl<span>(</span><span>int</span> semid<span>,</span> <span>int</span> semnum<span>,</span> <span>int</span> cmd<span>,</span> <span>...</span> <span>/*arg*/</span><span>);</span></span></code></pre></div>
<p><code>semid</code> is the semaphore set id that you get from your call to <code>semget()</code>, earlier. <code>semnum</code> is the ID of the semaphore that you wish to manipulate the value of. <code>cmd</code> is what you wish to do with the semaphore in question. The last “argument”, “<code>arg</code>”, if required, needs to be a <code>union semun</code>, which will be defined by you in your code to be one of these:</p>
<div id="cb43"><pre><code><span id="cb43-1"><span>union</span> semun <span>{</span></span>
<span id="cb43-2">    <span>int</span> val<span>;</span>               <span>/* used for SETVAL only */</span></span>
<span id="cb43-3">    <span>struct</span> semid_ds <span>*</span>buf<span>;</span>  <span>/* used for IPC_STAT and IPC_SET */</span></span>
<span id="cb43-4">    ushort <span>*</span>array<span>;</span>         <span>/* used for GETALL and SETALL */</span></span>
<span id="cb43-5"><span>};</span></span></code></pre></div>
<p>(Note that <code>union semun</code> is now defined in the header files of modern Linux systems. However, I don’t know what feature test macro to use to determine this, so only define this union if your system doesn’t already. Read the docs for <code>semctl()</code> for more information.)</p>
<p>The various fields in the <code>union semun</code> are used depending on the value of the <code>cmd</code> parameter to <code>semctl()</code> (a partial list follows—see your local man page for more):</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th><code>cmd</code></th>
<th>Effect</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SETVAL</code></td>
<td>Set the value of the specified semaphore to the value in the <code>val</code> member of the passed-in <code>union semun</code>.</td>
</tr>
<tr>
<td><code>GETVAL</code></td>
<td>Return the value of the given semaphore.</td>
</tr>
<tr>
<td><code>SETALL</code></td>
<td>Set the values of all the semaphores in the set to the values in the array pointed to by the <code>array</code> member of the passed-in <code>union semun</code>. The <code>semnum</code> parameter to <code>semctl()</code> isn’t used.&lt;</td>
</tr>
<tr>
<td><code>GETALL</code></td>
<td>Gets the values of all the semaphores in the set and stores them in the array pointed to by the <code>array</code> member of the passed-in <code>union semun</code>. The <code>semnum</code> parameter to <code>semctl()</code> isn’t used.</td>
</tr>
<tr>
<td><code>IPC_RMID</code></td>
<td>Remove the specified semaphore set from the system. The <code>semnum</code> parameter is ignored.</td>
</tr>
<tr>
<td><code>IPC_STAT</code></td>
<td>Load status information about the semaphore set into the <code>struct semid_ds</code> structure pointed to by the <code>buf</code> member of the <code>union semun</code>.</td>
</tr>
</tbody>
</table>
<p>For the curious, here are the (abbreviated) contents of the <code>struct semid_ds</code> that is used in the <code>union semun</code>:</p>
<div id="cb44"><pre><code><span id="cb44-1"><span>struct</span> semid_ds <span>{</span></span>
<span id="cb44-2">    <span>struct</span> ipc_perm sem_perm<span>;</span>  <span>/* Ownership and permissions</span></span>
<span id="cb44-3"><span>    time_t          sem_otime; /* Last semop time */</span></span>
<span id="cb44-4">    <span>time_t</span>          sem_ctime<span>;</span> <span>/* Last change time */</span></span>
<span id="cb44-5">    <span>unsigned</span> <span>short</span>  sem_nsems<span>;</span> <span>/* No. of semaphores in set */</span></span>
<span id="cb44-6"><span>};</span></span></code></pre></div>
<p>We’ll use that <code>sem_otime</code> member later on when we write our <code>initsem()</code> in the sample code, below.</p>
<!-- ======================================================= -->
<!-- semop(): Atomic power! -->
<!-- ======================================================= -->
<h2 data-number="8.3" id="semop-atomic-power"> <code>semop()</code>: Atomic power!</h2>
<p>All operations that set, get, or test-n-set a semaphore use the <code>semop()</code> system call. This system call is general purpose, and its functionality is dictated by a structure that is passed to it, <code>struct sembuf</code>:</p>
<div id="cb45"><pre><code><span id="cb45-1"><span>/* Warning! Members might not be in this order! */</span></span>
<span id="cb45-2"></span>
<span id="cb45-3"><span>struct</span> sembuf <span>{</span></span>
<span id="cb45-4">    ushort sem_num<span>;</span></span>
<span id="cb45-5">    <span>short</span> sem_op<span>;</span></span>
<span id="cb45-6">    <span>short</span> sem_flg<span>;</span></span>
<span id="cb45-7"><span>};</span></span></code></pre></div>
<p>Of course, <code>sem_num</code> is the number of the semaphore in the set that you want to manipulate. Then, <code>sem_op</code> is what you want to do with that semaphore. This takes on different meanings, depending on whether <code>sem_op</code> is positive, negative, or zero, as shown in the following table:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th><code>sem_op</code></th>
<th>What happens</th>
</tr>
</thead>
<tbody>
<tr>
<td>Negative</td>
<td>Allocate resources. Block the calling process until the value of the semaphore is greater than or equal to the absolute value of <code>sem_op</code>. (That is, wait until enough resources have been freed by other processes for this one to allocate.) Then add (effectively subtract, since it’s negative) the value of <code>sem_op</code> to the semaphore’s value.</td>
</tr>
<tr>
<td>Positive</td>
<td>Release resources. The value of <code>sem_op</code> is added to the semaphore’s value.</td>
</tr>
<tr>
<td>Zero</td>
<td>This process will wait until the semaphore in question reaches 0.</td>
</tr>
</tbody>
</table>
<p>So, basically, what you do is load up a <code>struct sembuf</code> with whatever values you want, then call <code>semop()</code>, like this:</p>
<!-- BOOKMARK -->
<div id="cb46"><pre><code><span id="cb46-1"><span>int</span> semop<span>(</span><span>int</span> semid<span>,</span> <span>struct</span> sembuf <span>*</span>sops<span>,</span></span>
<span id="cb46-2">          <span>unsigned</span> <span>int</span> nsops<span>);</span></span></code></pre></div>
<p>The <code>semid</code> argument is the number obtained from the call to <code>semget()</code>. Next is <code>sops</code>, which is a pointer to the <code>struct sembuf</code> that you filled with your semaphore commands. If you want, though, you can make an array of <code>struct sembuf</code>s in order to do a whole bunch of semaphore operations at the same time. The way <code>semop()</code> knows that you’re doing this is the <code>nsop</code> argument, which tells how many <code>struct sembuf</code>s you’re sending it. If you only have one, well, put <code>1</code> as this argument.</p>
<p>One field in the <code>struct sembuf</code> that I haven’t mentioned is the <code>sem_flg</code> field which allows the program to specify flags to further modify the effects of the <code>semop()</code> call.</p>
<p>One of these flags is <code>IPC_NOWAIT</code> which, as the name suggests, causes the call to <code>semop()</code> to return with error <code>EAGAIN</code> if it encounters a situation where it would normally block. This is good for situations where you might want to “poll” to see if you can allocate a resource.</p>
<p>Another very useful flag is the <code>SEM_UNDO</code> flag. This causes <code>semop()</code> to record, in a way, the change made to the semaphore. When the program exits, the kernel will automatically undo all changes that were marked with the <code>SEM_UNDO</code> flag. Of course, your program should do its best to deallocate any resources it marks using the semaphore, but sometimes this isn’t possible when your program gets a <code>SIGKILL</code> or some other awful crash happens.</p>
<!-- ======================================================= -->
<!-- Destroying a semaphore -->
<!-- ======================================================= -->
<h2 data-number="8.4" id="destroying-a-semaphore"> Destroying a semaphore</h2>
<p>There are two ways to get rid of a semaphore: one is to use the Unix command <code>ipcrm</code>. The other is through a call to <code>semctl()</code> with the <code>cmd</code> set to <code>IPC_RMID</code>.</p>
<p>Basically, you want to call <code>semctl()</code> and set <code>semid</code> to the semaphore ID you want to axe. The <code>cmd</code> should be set to <code>IPC_RMID</code>, which tells <code>semctl()</code> to remove this semaphore set. The parameter <code>semnum</code> has no meaning in the <code>IPC_RMID</code> context and can just be set to zero.</p>
<p>Here’s an example call to torch a semaphore set:</p>
<div id="cb47"><pre><code><span id="cb47-1"><span>int</span> semid<span>;</span> </span>
<span id="cb47-2"><span>.</span></span>
<span id="cb47-3"><span>.</span></span>
<span id="cb47-4">semid <span>=</span> semget<span>(...);</span></span>
<span id="cb47-5"><span>.</span></span>
<span id="cb47-6"><span>.</span></span>
<span id="cb47-7">semctl<span>(</span>semid<span>,</span> <span>0</span><span>,</span> IPC_RMID<span>);</span></span></code></pre></div>
<p>Easy peasy.</p>
<!-- ======================================================= -->
<!-- Semaphore: Sample Programs -->
<!-- ======================================================= -->
<h2 data-number="8.5" id="sample-programs"> Sample Programs</h2>
<p>There are two of them. The first, <code>semdemo.c</code>, creates the semaphore if necessary, and performs some pretend file locking on it in a demo very much like that in the <a href="#flocking">File Locking</a> document. The second program, <code>semrm.c</code> is used to destroy the semaphore (again, <code>ipcrm</code> could be used to accomplish this.)</p>
<p>The idea is to run run <code>semdemo.c</code> in a few windows and see how all the processes interact. When you’re done, use <code>semrm.c</code> to remove the semaphore. You could also try removing the semaphore while running <code>semdemo.c</code> just to see what kinds of errors are generated.</p>
<p>Here’s <a href="https://beej.us/guide/bgipc/source/examples/semdemo.c"><code>semdemo.c</code></a><a href="#fn34" id="fnref34" role="doc-noteref"><sup>34</sup></a>, including a function named <code>initsem()</code> that gets around the semaphore race conditions, Stevens-style:</p>
<div id="cb48"><pre><code><span id="cb48-1"><a href="#cb48-1"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb48-2"><a href="#cb48-2"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb48-3"><a href="#cb48-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb48-4"><a href="#cb48-4"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb48-5"><a href="#cb48-5"></a><span>#include </span><span>&lt;sys/ipc.h&gt;</span></span>
<span id="cb48-6"><a href="#cb48-6"></a><span>#include </span><span>&lt;sys/sem.h&gt;</span></span>
<span id="cb48-7"><a href="#cb48-7"></a></span>
<span id="cb48-8"><a href="#cb48-8"></a><span>#define MAX_RETRIES </span><span>10</span></span>
<span id="cb48-9"><a href="#cb48-9"></a></span>
<span id="cb48-10"><a href="#cb48-10"></a><span>#ifdef NEED_SEMUN</span></span>
<span id="cb48-11"><a href="#cb48-11"></a><span>/* Defined in sys/sem.h as required by POSIX now */</span></span>
<span id="cb48-12"><a href="#cb48-12"></a><span>union</span> semun <span>{</span></span>
<span id="cb48-13"><a href="#cb48-13"></a>    <span>int</span> val<span>;</span></span>
<span id="cb48-14"><a href="#cb48-14"></a>    <span>struct</span> semid_ds <span>*</span>buf<span>;</span></span>
<span id="cb48-15"><a href="#cb48-15"></a>    ushort <span>*</span>array<span>;</span></span>
<span id="cb48-16"><a href="#cb48-16"></a><span>};</span></span>
<span id="cb48-17"><a href="#cb48-17"></a><span>#endif</span></span>
<span id="cb48-18"><a href="#cb48-18"></a></span>
<span id="cb48-19"><a href="#cb48-19"></a><span>/*</span></span>
<span id="cb48-20"><a href="#cb48-20"></a><span>** initsem() -- more-than-inspired by W. Richard Stevens' UNIX Network</span></span>
<span id="cb48-21"><a href="#cb48-21"></a><span>** Programming 2nd edition, volume 2, lockvsem.c, page 295.</span></span>
<span id="cb48-22"><a href="#cb48-22"></a><span>*/</span></span>
<span id="cb48-23"><a href="#cb48-23"></a><span>int</span> initsem<span>(</span>key_t key<span>,</span> <span>int</span> nsems<span>)</span>  <span>/* key from ftok() */</span></span>
<span id="cb48-24"><a href="#cb48-24"></a><span>{</span></span>
<span id="cb48-25"><a href="#cb48-25"></a>    <span>int</span> i<span>;</span></span>
<span id="cb48-26"><a href="#cb48-26"></a>    <span>union</span> semun arg<span>;</span></span>
<span id="cb48-27"><a href="#cb48-27"></a>    <span>struct</span> semid_ds buf<span>;</span></span>
<span id="cb48-28"><a href="#cb48-28"></a>    <span>struct</span> sembuf sb<span>;</span></span>
<span id="cb48-29"><a href="#cb48-29"></a>    <span>int</span> semid<span>;</span></span>
<span id="cb48-30"><a href="#cb48-30"></a></span>
<span id="cb48-31"><a href="#cb48-31"></a>    semid <span>=</span> semget<span>(</span>key<span>,</span> nsems<span>,</span> IPC_CREAT <span>|</span> IPC_EXCL <span>|</span> <span>0666</span><span>);</span></span>
<span id="cb48-32"><a href="#cb48-32"></a></span>
<span id="cb48-33"><a href="#cb48-33"></a>    <span>if</span> <span>(</span>semid <span>&gt;=</span> <span>0</span><span>)</span> <span>{</span> <span>/* we got it first */</span></span>
<span id="cb48-34"><a href="#cb48-34"></a>            sb<span>.</span>sem_op <span>=</span> <span>1</span><span>;</span> sb<span>.</span>sem_flg <span>=</span> <span>0</span><span>;</span></span>
<span id="cb48-35"><a href="#cb48-35"></a>            arg<span>.</span>val <span>=</span> <span>1</span><span>;</span></span>
<span id="cb48-36"><a href="#cb48-36"></a></span>
<span id="cb48-37"><a href="#cb48-37"></a>            printf<span>(</span><span>"press return</span><span>\n</span><span>"</span><span>);</span> getchar<span>();</span></span>
<span id="cb48-38"><a href="#cb48-38"></a></span>
<span id="cb48-39"><a href="#cb48-39"></a>            <span>for</span><span>(</span>sb<span>.</span>sem_num <span>=</span> <span>0</span><span>;</span> sb<span>.</span>sem_num <span>&lt;</span> nsems<span>;</span> sb<span>.</span>sem_num<span>++)</span> <span>{</span> </span>
<span id="cb48-40"><a href="#cb48-40"></a>                    <span>/* do a semop() to "free" the semaphores. */</span></span>
<span id="cb48-41"><a href="#cb48-41"></a>                    <span>/* this sets the sem_otime field, as needed below. */</span></span>
<span id="cb48-42"><a href="#cb48-42"></a>                    <span>if</span> <span>(</span>semop<span>(</span>semid<span>,</span> <span>&amp;</span>sb<span>,</span> <span>1</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-43"><a href="#cb48-43"></a>                            <span>int</span> e <span>=</span> errno<span>;</span></span>
<span id="cb48-44"><a href="#cb48-44"></a>                            semctl<span>(</span>semid<span>,</span> <span>0</span><span>,</span> IPC_RMID<span>);</span> <span>/* clean up */</span></span>
<span id="cb48-45"><a href="#cb48-45"></a>                            errno <span>=</span> e<span>;</span></span>
<span id="cb48-46"><a href="#cb48-46"></a>                            <span>return</span> <span>-</span><span>1</span><span>;</span> <span>/* error, check errno */</span></span>
<span id="cb48-47"><a href="#cb48-47"></a>                    <span>}</span></span>
<span id="cb48-48"><a href="#cb48-48"></a>            <span>}</span></span>
<span id="cb48-49"><a href="#cb48-49"></a></span>
<span id="cb48-50"><a href="#cb48-50"></a>    <span>}</span> <span>else</span> <span>if</span> <span>(</span>errno <span>==</span> EEXIST<span>)</span> <span>{</span> <span>/* someone else got it first */</span></span>
<span id="cb48-51"><a href="#cb48-51"></a>            <span>int</span> ready <span>=</span> <span>0</span><span>;</span></span>
<span id="cb48-52"><a href="#cb48-52"></a></span>
<span id="cb48-53"><a href="#cb48-53"></a>            semid <span>=</span> semget<span>(</span>key<span>,</span> nsems<span>,</span> <span>0</span><span>);</span> <span>/* get the id */</span></span>
<span id="cb48-54"><a href="#cb48-54"></a>            <span>if</span> <span>(</span>semid <span>&lt;</span> <span>0</span><span>)</span> <span>return</span> semid<span>;</span> <span>/* error, check errno */</span></span>
<span id="cb48-55"><a href="#cb48-55"></a></span>
<span id="cb48-56"><a href="#cb48-56"></a>            <span>/* wait for other process to initialize the semaphore: */</span></span>
<span id="cb48-57"><a href="#cb48-57"></a>            arg<span>.</span>buf <span>=</span> <span>&amp;</span>buf<span>;</span></span>
<span id="cb48-58"><a href="#cb48-58"></a>            <span>for</span><span>(</span>i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> MAX_RETRIES <span>&amp;&amp;</span> <span>!</span>ready<span>;</span> i<span>++)</span> <span>{</span></span>
<span id="cb48-59"><a href="#cb48-59"></a>                    semctl<span>(</span>semid<span>,</span> nsems<span>-</span><span>1</span><span>,</span> IPC_STAT<span>,</span> arg<span>);</span></span>
<span id="cb48-60"><a href="#cb48-60"></a>                    <span>if</span> <span>(</span>arg<span>.</span>buf<span>-&gt;</span>sem_otime <span>!=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb48-61"><a href="#cb48-61"></a>                            ready <span>=</span> <span>1</span><span>;</span></span>
<span id="cb48-62"><a href="#cb48-62"></a>                    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb48-63"><a href="#cb48-63"></a>                            sleep<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-64"><a href="#cb48-64"></a>                    <span>}</span></span>
<span id="cb48-65"><a href="#cb48-65"></a>            <span>}</span></span>
<span id="cb48-66"><a href="#cb48-66"></a>            <span>if</span> <span>(!</span>ready<span>)</span> <span>{</span></span>
<span id="cb48-67"><a href="#cb48-67"></a>                    errno <span>=</span> ETIME<span>;</span></span>
<span id="cb48-68"><a href="#cb48-68"></a>                    <span>return</span> <span>-</span><span>1</span><span>;</span></span>
<span id="cb48-69"><a href="#cb48-69"></a>            <span>}</span></span>
<span id="cb48-70"><a href="#cb48-70"></a>    <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb48-71"><a href="#cb48-71"></a>            <span>return</span> semid<span>;</span> <span>/* error, check errno */</span></span>
<span id="cb48-72"><a href="#cb48-72"></a>    <span>}</span></span>
<span id="cb48-73"><a href="#cb48-73"></a></span>
<span id="cb48-74"><a href="#cb48-74"></a>    <span>return</span> semid<span>;</span></span>
<span id="cb48-75"><a href="#cb48-75"></a><span>}</span></span>
<span id="cb48-76"><a href="#cb48-76"></a></span>
<span id="cb48-77"><a href="#cb48-77"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb48-78"><a href="#cb48-78"></a><span>{</span></span>
<span id="cb48-79"><a href="#cb48-79"></a>    key_t key<span>;</span></span>
<span id="cb48-80"><a href="#cb48-80"></a>    <span>int</span> semid<span>;</span></span>
<span id="cb48-81"><a href="#cb48-81"></a>    <span>struct</span> sembuf sb<span>;</span></span>
<span id="cb48-82"><a href="#cb48-82"></a>    </span>
<span id="cb48-83"><a href="#cb48-83"></a>    sb<span>.</span>sem_num <span>=</span> <span>0</span><span>;</span></span>
<span id="cb48-84"><a href="#cb48-84"></a>    sb<span>.</span>sem_op <span>=</span> <span>-</span><span>1</span><span>;</span>  <span>/* set to allocate resource */</span></span>
<span id="cb48-85"><a href="#cb48-85"></a>    sb<span>.</span>sem_flg <span>=</span> SEM_UNDO<span>;</span></span>
<span id="cb48-86"><a href="#cb48-86"></a></span>
<span id="cb48-87"><a href="#cb48-87"></a>    <span>if</span> <span>((</span>key <span>=</span> ftok<span>(</span><span>"semdemo.c"</span><span>,</span> <span>'J'</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-88"><a href="#cb48-88"></a>            perror<span>(</span><span>"ftok"</span><span>);</span></span>
<span id="cb48-89"><a href="#cb48-89"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-90"><a href="#cb48-90"></a>    <span>}</span></span>
<span id="cb48-91"><a href="#cb48-91"></a></span>
<span id="cb48-92"><a href="#cb48-92"></a>    <span>/* grab the semaphore set created by seminit.c: */</span></span>
<span id="cb48-93"><a href="#cb48-93"></a>    <span>if</span> <span>((</span>semid <span>=</span> initsem<span>(</span>key<span>,</span> <span>1</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-94"><a href="#cb48-94"></a>            perror<span>(</span><span>"initsem"</span><span>);</span></span>
<span id="cb48-95"><a href="#cb48-95"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-96"><a href="#cb48-96"></a>    <span>}</span></span>
<span id="cb48-97"><a href="#cb48-97"></a></span>
<span id="cb48-98"><a href="#cb48-98"></a>    printf<span>(</span><span>"Press return to lock: "</span><span>);</span></span>
<span id="cb48-99"><a href="#cb48-99"></a>    getchar<span>();</span></span>
<span id="cb48-100"><a href="#cb48-100"></a>    printf<span>(</span><span>"Trying to lock...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb48-101"><a href="#cb48-101"></a></span>
<span id="cb48-102"><a href="#cb48-102"></a>    <span>if</span> <span>(</span>semop<span>(</span>semid<span>,</span> <span>&amp;</span>sb<span>,</span> <span>1</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-103"><a href="#cb48-103"></a>            perror<span>(</span><span>"semop"</span><span>);</span></span>
<span id="cb48-104"><a href="#cb48-104"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-105"><a href="#cb48-105"></a>    <span>}</span></span>
<span id="cb48-106"><a href="#cb48-106"></a></span>
<span id="cb48-107"><a href="#cb48-107"></a>    printf<span>(</span><span>"Locked.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb48-108"><a href="#cb48-108"></a>    printf<span>(</span><span>"Press return to unlock: "</span><span>);</span></span>
<span id="cb48-109"><a href="#cb48-109"></a>    getchar<span>();</span></span>
<span id="cb48-110"><a href="#cb48-110"></a></span>
<span id="cb48-111"><a href="#cb48-111"></a>    sb<span>.</span>sem_op <span>=</span> <span>1</span><span>;</span> <span>/* free resource */</span></span>
<span id="cb48-112"><a href="#cb48-112"></a>    <span>if</span> <span>(</span>semop<span>(</span>semid<span>,</span> <span>&amp;</span>sb<span>,</span> <span>1</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb48-113"><a href="#cb48-113"></a>            perror<span>(</span><span>"semop"</span><span>);</span></span>
<span id="cb48-114"><a href="#cb48-114"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb48-115"><a href="#cb48-115"></a>    <span>}</span></span>
<span id="cb48-116"><a href="#cb48-116"></a></span>
<span id="cb48-117"><a href="#cb48-117"></a>    printf<span>(</span><span>"Unlocked</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb48-118"><a href="#cb48-118"></a></span>
<span id="cb48-119"><a href="#cb48-119"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb48-120"><a href="#cb48-120"></a><span>}</span></span></code></pre></div>
<p>Here’s <a href="https://beej.us/guide/bgipc/source/examples/semrm.c"><code>semrm.c</code></a><a href="#fn35" id="fnref35" role="doc-noteref"><sup>35</sup></a> for removing the semaphore when you’re done:</p>
<div id="cb49"><pre><code><span id="cb49-1"><a href="#cb49-1"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb49-2"><a href="#cb49-2"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb49-3"><a href="#cb49-3"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb49-4"><a href="#cb49-4"></a><span>#include </span><span>&lt;sys/ipc.h&gt;</span></span>
<span id="cb49-5"><a href="#cb49-5"></a><span>#include </span><span>&lt;sys/sem.h&gt;</span></span>
<span id="cb49-6"><a href="#cb49-6"></a></span>
<span id="cb49-7"><a href="#cb49-7"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb49-8"><a href="#cb49-8"></a><span>{</span></span>
<span id="cb49-9"><a href="#cb49-9"></a>    key_t key<span>;</span></span>
<span id="cb49-10"><a href="#cb49-10"></a>    <span>int</span> semid<span>;</span></span>
<span id="cb49-11"><a href="#cb49-11"></a>    <span>union</span> semun arg<span>;</span></span>
<span id="cb49-12"><a href="#cb49-12"></a></span>
<span id="cb49-13"><a href="#cb49-13"></a>    <span>if</span> <span>((</span>key <span>=</span> ftok<span>(</span><span>"semdemo.c"</span><span>,</span> <span>'J'</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-14"><a href="#cb49-14"></a>            perror<span>(</span><span>"ftok"</span><span>);</span></span>
<span id="cb49-15"><a href="#cb49-15"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb49-16"><a href="#cb49-16"></a>    <span>}</span></span>
<span id="cb49-17"><a href="#cb49-17"></a></span>
<span id="cb49-18"><a href="#cb49-18"></a>    <span>/* grab the semaphore set created by seminit.c: */</span></span>
<span id="cb49-19"><a href="#cb49-19"></a>    <span>if</span> <span>((</span>semid <span>=</span> semget<span>(</span>key<span>,</span> <span>1</span><span>,</span> <span>0</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-20"><a href="#cb49-20"></a>            perror<span>(</span><span>"semget"</span><span>);</span></span>
<span id="cb49-21"><a href="#cb49-21"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb49-22"><a href="#cb49-22"></a>    <span>}</span></span>
<span id="cb49-23"><a href="#cb49-23"></a></span>
<span id="cb49-24"><a href="#cb49-24"></a>    <span>/* remove it: */</span></span>
<span id="cb49-25"><a href="#cb49-25"></a>    <span>if</span> <span>(</span>semctl<span>(</span>semid<span>,</span> <span>0</span><span>,</span> IPC_RMID<span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb49-26"><a href="#cb49-26"></a>            perror<span>(</span><span>"semctl"</span><span>);</span></span>
<span id="cb49-27"><a href="#cb49-27"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb49-28"><a href="#cb49-28"></a>    <span>}</span></span>
<span id="cb49-29"><a href="#cb49-29"></a></span>
<span id="cb49-30"><a href="#cb49-30"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb49-31"><a href="#cb49-31"></a><span>}</span></span></code></pre></div>
<p>Isn’t that fun! I’m sure you’ll give up Quake<a href="#fn36" id="fnref36" role="doc-noteref"><sup>36</sup></a> just to play with this semaphore stuff all day long!</p>
<!-- ======================================================= -->
<!-- Semaphore summary -->
<!-- ======================================================= -->
<h2 data-number="8.6" id="summary-4"> Summary</h2>
<p>I might have understated the usefulness of semaphores. I assure you, they’re very very very useful in a concurrency situation. They’re often faster than regular file locks, too. Also, you can use them on other things that aren’t files, such as <a href="#shm">Shared Memory Segments</a>! In fact, it is sometimes hard to live without them, quite frankly.</p>
<p>Whenever you have multiple processes running through a critical section of code, man, you need semaphores. You have zillions of them—you might as well use ’em.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- Shared Memory Segments -->
<!-- ======================================================= -->
<h2 data-number="9" id="shm"> Shared Memory Segments</h2>
<p>The cool thing about shared memory segments is that they are what they sound like: a segment of memory that is shared between processes. I mean, think of the potential of this! You could allocate a block of player information for a multi-player game and have each process access it at will! Fun, fun, fun. (Of course, memory-mapped files accomplish the same thing and have the added advantage of persistence, albeit with the same caveats that apply to shared memory.)</p>
<p>There are, as usual, more gotchas to watch out for, but it’s all pretty easy in the long run. See, you just connect to the shared memory segment, and get a pointer to the memory. You can read and write to this pointer and all changes you make will be visible to everyone else connected to the segment. There is nothing simpler. Well, there is, actually, but I was just trying to make you more comfortable.</p>
<h2 data-number="9.1" id="creating-the-segment-and-connecting"> Creating the segment and connecting</h2>
<p>Similarly to other forms of System V IPC, a shared memory segment is created and connected to via the <code>shmget()</code> call:</p>
<div id="cb50"><pre><code><span id="cb50-1"><span>int</span> shmget<span>(</span>key_t key<span>,</span> <span>size_t</span> size<span>,</span> <span>int</span> shmflg<span>);</span></span></code></pre></div>
<p>Upon successful completion, <code>shmget()</code> returns an identifier for the shared memory segment. The <code>key</code> argument should be created the same was as shown in the <a href="#mqftok">Message Queues</a> document, using <code>ftok()</code>. The next argument, <code>size</code>, is the size in bytes of the shared memory segment. Finally, the <code>shmflg</code> should be set to the permissions of the segment bitwise-OR’d with <code>IPC_CREAT</code> if you want to create the segment, but can be <code>0</code> otherwise. (It doesn’t hurt to specify <code>IPC_CREAT</code> every time—it will simply connect you if the segment already exists.)</p>
<p>Here’s an example call that creates a 1K segment with <code>644</code> permissions (<code>rw-r--r--</code>):</p>
<div id="cb51"><pre><code><span id="cb51-1">key_t key<span>;</span></span>
<span id="cb51-2"><span>int</span> shmid<span>;</span></span>
<span id="cb51-3"></span>
<span id="cb51-4">key <span>=</span> ftok<span>(</span><span>"/home/beej/somefile3"</span><span>,</span> <span>'R'</span><span>);</span></span>
<span id="cb51-5">shmid <span>=</span> shmget<span>(</span>key<span>,</span> <span>1024</span><span>,</span> <span>0644</span> <span>|</span> IPC_CREAT<span>);</span></span></code></pre></div>
<p>(It may not be possible to actually create a 1K segment, as the operating system is allowed to increase the size to fit any internal constraints it may have. For example, on a system with 4K virtual pages, it’s likely the size will be increased to 4K. Of course, your program won’t know or care; this is just an implementation detail.)</p>
<p>But how do you get a pointer to that data from the <code>shmid</code> handle? The answer is in the call <code>shmat()</code>, in the following section.</p>
<h2 data-number="9.2" id="attach-megetting-a-pointer-to-the-segment"> Attach me—getting a pointer to the segment</h2>
<p>Before you can use a shared memory segment, you have to attach yourself to it using the <code>shmat()</code> call:</p>
<div id="cb52"><pre><code><span id="cb52-1"><span>void</span> <span>*</span>shmat<span>(</span><span>int</span> `shmid`<span>,</span> <span>void</span> <span>*</span>`shmaddr`<span>,</span> <span>int</span> `shmflg`<span>);</span></span></code></pre></div>
<p>What does it all mean? Well, <code>shmid</code> is the shared memory ID you got from the call to <code>shmget()</code>. Next is <code>shmaddr</code>, which you can use to tell <code>shmat()</code> which specific address to use but you should just set it to <code>0</code> and let the OS choose the address for you. Finally, the <code>shmflg</code> can be set to <code>SHM_RDONLY</code> if you only want to read from it, <code>0</code> otherwise. (Check the man pages for other useful flags that can be included.)</p>
<p>Here’s a more complete example of how to get a pointer to a shared memory segment:</p>
<div id="cb53"><pre><code><span id="cb53-1">key_t key<span>;</span></span>
<span id="cb53-2"><span>int</span> shmid<span>;</span></span>
<span id="cb53-3"><span>char</span> <span>*</span>data<span>;</span></span>
<span id="cb53-4"></span>
<span id="cb53-5">key <span>=</span> ftok<span>(</span><span>"/home/beej/somefile3"</span><span>,</span> <span>'R'</span><span>);</span></span>
<span id="cb53-6">shmid <span>=</span> shmget<span>(</span>key<span>,</span> <span>1024</span><span>,</span> <span>0644</span> <span>|</span> IPC_CREAT<span>);</span></span>
<span id="cb53-7">data <span>=</span> shmat<span>(</span>shmid<span>,</span> <span>(</span><span>void</span> <span>*)</span><span>0</span><span>,</span> <span>0</span><span>);&lt;/</span>code<span>&gt;</span></span></code></pre></div>
<p>And <em>bammo</em>! You have the pointer to the shared memory segment! Notice that <code>shmat()</code> returns a <code>void</code> pointer, and we’re treating it, in this case, as a <code>char</code> pointer. You can treat it as anything you like, depending on what kind of data you have in there. Pointers to arrays of structures are just as acceptable as anything else.</p>
<p>Also, it’s interesting to note that <code>shmat()</code> returns <code>-1</code> on failure (as does <code>mmap()</code>). But how do you get <code>-1</code> in a <code>void</code> pointer? Just do a cast during the comparison to check for errors:</p>
<div id="cb54"><pre><code><span id="cb54-1">data <span>=</span> shmat<span>(</span>shmid<span>,</span> <span>(</span><span>void</span> <span>*)</span><span>0</span><span>,</span> <span>0</span><span>);</span></span>
<span id="cb54-2"><span>if</span> <span>(</span>data <span>==</span> MAP_FAILED<span>)</span></span>
<span id="cb54-3">    perror<span>(</span><span>"shmat"</span><span>);</span></span></code></pre></div>
<p>(It’s important to note that the integer is being cast to a pointer, and not the pointer return value being cast to an integer. It’s a subtle difference, but the latter is not always portable between architectures. Also note that the cast is to <code>void*</code> and not <code>char*</code>, as you might expect. Since the language guarantees that implicit casts from <code>void*</code> to any other kind of pointer are always safe and reliable, it’s better to use <code>void*</code> and let the compiler to the work.)</p>
<p>All you have to do now is change the data it points to normal pointer-style. There are some samples in the next section.</p>
<h2 data-number="9.3" id="reading-and-writing"> Reading and Writing</h2>
<p>Lets say you have the <code>data</code> pointer from the above example. It is a <code>char</code> pointer, so we’ll be reading and writing chars from it. Furthermore, for the sake of simplicity, lets say the 1K shared memory segment contains a null-terminated string.</p>
<p>It couldn’t be easier. Since it’s just a string in there, we can print it like this:</p>
<div id="cb55"><pre><code><span id="cb55-1">printf<span>(</span><span>"shared contents: </span><span>%s\n</span><span>"</span><span>,</span> data<span>);</span></span></code></pre></div>
<p>And we could store something in it as easily as this:</p>
<div id="cb56"><pre><code><span id="cb56-1">printf<span>(</span><span>"Enter a string: "</span><span>);</span></span>
<span id="cb56-2">fgets<span>(</span>data<span>,</span> <span>1024</span><span>,</span> stdin<span>);</span></span></code></pre></div>
<p>Of course, like I said earlier, you can have other data in there besides just <code>char</code>s. I’m just using them as an example. I’ll just make the assumption that you’re familiar enough with pointers in C that you’ll be able to deal with whatever kind of data you stick in there.</p>
<h2 data-number="9.4" id="detaching-from-and-deleting-segments"> Detaching from and deleting segments</h2>
<p>When you’re done with the shared memory segment, your program should detach itself from it using the <code>shmdt()</code> call (if you don’t, this will happen automatically when the process terminates):</p>
<pre><code>int shmdt(void *`shmaddr`);</code></pre>
<p>The only argument, <code>shmaddr</code>, is the address you got from <code>shmat()</code>. The function returns <code>-1</code> on error, <code>0</code> on success.</p>
<p>When you detach from the segment, it isn’t destroyed. Nor is it removed when <em>everyone</em> detaches from it. You have to specifically destroy it using a call to <code>shmctl()</code>, similar to the control calls for the other System V IPC functions:</p>
<div id="cb58"><pre><code><span id="cb58-1">shmctl<span>(</span>shmid<span>,</span> IPC_RMID<span>,</span> NULL<span>);</span></span></code></pre></div>
<p>The above call deletes the shared memory segment, assuming no one else is attached to it. The <code>shmctl()</code> function does a lot more than this, though, and is worth looking into. (On your own, of course, since this is only an overview!)</p>
<p>As always, you can destroy the shared memory segment from the command line using the <code>ipcrm</code> Unix command. Also, be sure that you don’t leave any unused shared memory segments sitting around wasting system resources. All the System V IPC objects you own can be viewed using the <code>ipcs</code> command.</p>
<h2 data-number="9.5" id="shmcon"> Concurrency</h2>
<p>What are concurrency issues? Well, since you have multiple processes modifying the shared memory segment, it is possible that certain errors could crop up when updates to the segment occur simultaneously. This <em>concurrent</em> access is almost always a problem when you have multiple writers to a shared object.</p>
<p>The way to get around this is to use <a href="#semaphores">Semaphores</a> to lock the shared memory segment while a process is writing to it. (Sometimes the lock will encompass both a read and write to the shared memory, depending on what you’re doing.)</p>
<p>A true discussion of concurrency is beyond the scope of this paper, and you might want to check out the <a href="https://en.wikipedia.org/wiki/Concurrency">Wikipedia article on the matter</a><a href="#fn37" id="fnref37" role="doc-noteref"><sup>37</sup></a>. I’ll just leave it with this: if you start getting weird inconsistencies in your shared data when you connect two or more processes to it, you could very well have a concurrency problem.</p>
<h2 data-number="9.6" id="sample-code"> Sample code</h2>
<p>Now that I’ve primed you on all the dangers of concurrent access to a shared memory segment without using semaphores, I’ll show you a demo that does just that. Since this isn’t a mission-critical application, and it’s unlikely that you’ll be accessing the shared data at the same time as any other process, I’ll just leave the semaphores out for the sake of simplicity.</p>
<p>This program does one of two things: if you run it with no command line parameters, it prints the contents of the shared memory segment. If you give it one command line parameter, it stores that parameter in the shared memory segment.</p>
<p>Here’s the code for <a href="https://beej.us/guide/bgipc/source/examples/shmdemo.c"><code>shmdemo.c</code></a><a href="#fn38" id="fnref38" role="doc-noteref"><sup>38</sup></a>:</p>
<div id="cb59"><pre><code><span id="cb59-1"><a href="#cb59-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb59-2"><a href="#cb59-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb59-3"><a href="#cb59-3"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb59-4"><a href="#cb59-4"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb59-5"><a href="#cb59-5"></a><span>#include </span><span>&lt;sys/ipc.h&gt;</span></span>
<span id="cb59-6"><a href="#cb59-6"></a><span>#include </span><span>&lt;sys/shm.h&gt;</span></span>
<span id="cb59-7"><a href="#cb59-7"></a></span>
<span id="cb59-8"><a href="#cb59-8"></a><span>#define SHM_SIZE </span><span>1024</span><span>  </span><span>/* make it a 1K shared memory segment */</span></span>
<span id="cb59-9"><a href="#cb59-9"></a></span>
<span id="cb59-10"><a href="#cb59-10"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb59-11"><a href="#cb59-11"></a><span>{</span></span>
<span id="cb59-12"><a href="#cb59-12"></a>    key_t key<span>;</span></span>
<span id="cb59-13"><a href="#cb59-13"></a>    <span>int</span> shmid<span>;</span></span>
<span id="cb59-14"><a href="#cb59-14"></a>    <span>char</span> <span>*</span>data<span>;</span></span>
<span id="cb59-15"><a href="#cb59-15"></a>    <span>int</span> mode<span>;</span></span>
<span id="cb59-16"><a href="#cb59-16"></a></span>
<span id="cb59-17"><a href="#cb59-17"></a>    <span>if</span> <span>(</span>argc <span>&gt;</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb59-18"><a href="#cb59-18"></a>            fprintf<span>(</span>stderr<span>,</span> <span>"usage: shmdemo [data_to_write]</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb59-19"><a href="#cb59-19"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb59-20"><a href="#cb59-20"></a>    <span>}</span></span>
<span id="cb59-21"><a href="#cb59-21"></a></span>
<span id="cb59-22"><a href="#cb59-22"></a>    <span>/* make the key: */</span></span>
<span id="cb59-23"><a href="#cb59-23"></a>    <span>if</span> <span>((</span>key <span>=</span> ftok<span>(</span><span>"shmdemo.c"</span><span>,</span> <span>'R'</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-24"><a href="#cb59-24"></a>            perror<span>(</span><span>"ftok"</span><span>);</span></span>
<span id="cb59-25"><a href="#cb59-25"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb59-26"><a href="#cb59-26"></a>    <span>}</span></span>
<span id="cb59-27"><a href="#cb59-27"></a></span>
<span id="cb59-28"><a href="#cb59-28"></a>    <span>/* connect to (and possibly create) the segment: */</span></span>
<span id="cb59-29"><a href="#cb59-29"></a>    <span>if</span> <span>((</span>shmid <span>=</span> shmget<span>(</span>key<span>,</span> SHM_SIZE<span>,</span> <span>0644</span> <span>|</span> IPC_CREAT<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-30"><a href="#cb59-30"></a>            perror<span>(</span><span>"shmget"</span><span>);</span></span>
<span id="cb59-31"><a href="#cb59-31"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb59-32"><a href="#cb59-32"></a>    <span>}</span></span>
<span id="cb59-33"><a href="#cb59-33"></a></span>
<span id="cb59-34"><a href="#cb59-34"></a>    <span>/* attach to the segment to get a pointer to it: */</span></span>
<span id="cb59-35"><a href="#cb59-35"></a>    data <span>=</span> shmat<span>(</span>shmid<span>,</span> <span>(</span><span>void</span> <span>*)</span><span>0</span><span>,</span> <span>0</span><span>);</span></span>
<span id="cb59-36"><a href="#cb59-36"></a></span>
<span id="cb59-37"><a href="#cb59-37"></a>    <span>/* we _could_ use MAP_FAILED, but technically that's not */</span></span>
<span id="cb59-38"><a href="#cb59-38"></a>    <span>/* the defined return value. System V failed on this one! */</span></span>
<span id="cb59-39"><a href="#cb59-39"></a>    <span>if</span> <span>(</span>data <span>==</span> <span>(</span><span>void</span> <span>*)(-</span><span>1</span><span>))</span> <span>{</span></span>
<span id="cb59-40"><a href="#cb59-40"></a>            perror<span>(</span><span>"shmat"</span><span>);</span></span>
<span id="cb59-41"><a href="#cb59-41"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb59-42"><a href="#cb59-42"></a>    <span>}</span></span>
<span id="cb59-43"><a href="#cb59-43"></a></span>
<span id="cb59-44"><a href="#cb59-44"></a>    <span>/* read or modify the segment, based on the command line: */</span></span>
<span id="cb59-45"><a href="#cb59-45"></a>    <span>if</span> <span>(</span>argc <span>==</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb59-46"><a href="#cb59-46"></a>            printf<span>(</span><span>"writing to segment: </span><span>\"%s\"\n</span><span>"</span><span>,</span> argv<span>[</span><span>1</span><span>]);</span></span>
<span id="cb59-47"><a href="#cb59-47"></a>            strncpy<span>(</span>data<span>,</span> argv<span>[</span><span>1</span><span>],</span> SHM_SIZE<span>);</span></span>
<span id="cb59-48"><a href="#cb59-48"></a>            data<span>[</span>SHM_SIZE<span>-</span><span>1</span><span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb59-49"><a href="#cb59-49"></a>    <span>}</span> <span>else</span></span>
<span id="cb59-50"><a href="#cb59-50"></a>            printf<span>(</span><span>"segment contains: </span><span>\"%s\"\n</span><span>"</span><span>,</span> data<span>);</span></span>
<span id="cb59-51"><a href="#cb59-51"></a></span>
<span id="cb59-52"><a href="#cb59-52"></a>    <span>/* detach from the segment: */</span></span>
<span id="cb59-53"><a href="#cb59-53"></a>    <span>if</span> <span>(</span>shmdt<span>(</span>data<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb59-54"><a href="#cb59-54"></a>            perror<span>(</span><span>"shmdt"</span><span>);</span></span>
<span id="cb59-55"><a href="#cb59-55"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb59-56"><a href="#cb59-56"></a>    <span>}</span></span>
<span id="cb59-57"><a href="#cb59-57"></a></span>
<span id="cb59-58"><a href="#cb59-58"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb59-59"><a href="#cb59-59"></a><span>}</span></span></code></pre></div>
<p>More commonly, a process will attach to the segment and run for a bit while other programs are changing and reading the shared segment. It’s neat to watch one process update the segment and see the changes appear to other processes. Again, for simplicity, the sample code doesn’t do that, but you can see how the data is shared between independent processes.</p>
<p>Also, there’s no code in here for removing the segment—be sure to do that when you’re done messing with it.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- Memory Mapped Files -->
<!-- ======================================================= -->
<h2 data-number="10" id="mmap"> Memory Mapped Files</h2>
<p>There comes a time when you want to read and write to and from files so that the information is shared between processes. Think of it this way: two processes both open the same file and both read and write from it, thus sharing the information. The problem is, sometimes it’s a pain to do all those <code>fseek()</code>s and stuff to get around. Wouldn’t it be easier if you could just map a section of the file to memory, and get a pointer to it? Then you could simply use pointer arithmetic to get (and set) data in the file.</p>
<p>Well, this is exactly what a memory mapped file is. And it’s really easy to use, too. A few simple calls, mixed with a few simple rules, and you’re mapping like a mad-person.</p>
<h2 data-number="10.1" id="mapmake"> Mapmake</h2>
<p>Before mapping a file to memory, you need to get a file descriptor for it by using the <code>open()</code> system call:</p>
<div id="cb60"><pre><code><span id="cb60-1"><span>int</span> fd<span>;</span></span>
<span id="cb60-2"></span>
<span id="cb60-3">fd <span>=</span> open<span>(</span><span>"mapdemofile"</span><span>,</span> O_RDWR<span>);</span></span></code></pre></div>
<p>In this example, we’ve opened the file for read/write access. You can open it in whatever mode you want, but it has to match the mode specified in the <code>prot</code> parameter to the <code>mmap()</code> call, below.</p>
<p>To memory map a file, you use the <code>mmap()</code> system call, which is defined as follows:</p>
<div id="cb61"><pre><code><span id="cb61-1"><span>void</span> <span>*</span>mmap<span>(</span><span>void</span> <span>*</span>addr<span>,</span> <span>size_t</span> len<span>,</span> <span>int</span> prot<span>,</span></span>
<span id="cb61-2">           <span>int</span> flags<span>,</span> <span>int</span> fildes<span>,</span> off_t off<span>);</span></span></code></pre></div>
<p>What a slew of parameters! Here they are, one at a time:</p>
<table>
<colgroup>
<col>
<col>
</colgroup>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>addr</code></td>
<td>This is the address we want the file mapped into. The best way to use this is to set it to <code>NULL</code> and let the OS choose it for you. If you tell it to use an address the OS doesn’t like (for instance, if it’s not a multiple of the virtual memory page size), it’ll give you an error.</td>
</tr>
<tr>
<td><code>len</code></td>
<td>This parameter is the length of the data we want to map into memory. This can be any length you want. (Aside: if <code>len</code> not a multiple of the virtual memory page size, you will get a blocksize that is rounded up to that size. The extra bytes will be 0, and any changes you make to them will not modify the file.)</td>
</tr>
<tr>
<td><code>prot</code></td>
<td>The “protection” argument allows you to specify what kind of access this process has to the memory mapped region. This can be a bitwise-ORd mixture of the following values: <code>PROT_READ</code>, <code>PROT_WRITE</code>, and <code>PROT_EXEC</code>, for read, write, and execute permissions, respectively. The value specified here must be equivalent to or a subset of the modes specified in the <code>open()</code> system call that is used to get the file descriptor.</td>
</tr>
<tr>
<td><code>flags</code></td>
<td>These are just miscellaneous flags that can be set for the system call. You’ll want to set it to <code>MAP_SHARED</code> if you’re planning to share your changes to the file with other processes, or <code>MAP_PRIVATE</code> otherwise. If you set it to the latter, your process will get a copy of the mapped region, so any changes you make to it will not be reflected in the original file—thus, other processes will not be able to see them. We won’t talk about <code>MAP_PRIVATE</code> here at all, since it doesn’t have much to do with IPC.</td>
</tr>
<tr>
<td><code>fildes</code></td>
<td>This is where you put that file descriptor you opened earlier.</td>
</tr>
<tr>
<td><code>off</code></td>
<td>This is the offset in the file that you want to start mapping from. A restriction: this <em>must</em> be a multiple of the virtual memory page size. This page size can be obtained with a call to <code>getpagesize()</code>. Note that 32-bit systems may support files with sizes that cannot be expressed by 32-bit unsigned integers, so this type is often a 64-bit type on such systems.</td>
</tr>
</tbody>
</table>
<p>As for return values, as you might have guessed, <code>mmap()</code> returns <code>MAP_FAILED</code> on error (the value <code>-1</code> properly cast to be compared), and sets <code>errno</code>. Otherwise, it returns a pointer to the start of the mapped data.</p>
<p>Anyway, without any further ado, we’ll do a short demo that maps the second “page” of a file into memory. First we’ll <code>open()</code> it to get the file descriptor, then we’ll use <code>getpagesize()</code> to get the size of a virtual memory page and use this value for both the <code>len</code> and the <code>off</code>. In this way, we’ll start mapping at the second page, and map for one page’s length. (On my Linux box, the page size is 4K.)</p>
<div id="cb62"><pre><code><span id="cb62-1"><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb62-2"><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb62-3"><span>#include </span><span>&lt;sys/mman.h&gt;</span></span>
<span id="cb62-4"></span>
<span id="cb62-5"><span>int</span> fd<span>,</span> pagesize<span>;</span></span>
<span id="cb62-6"><span>char</span> <span>*</span>data<span>;</span></span>
<span id="cb62-7"></span>
<span id="cb62-8">fd <span>=</span> open<span>(</span><span>"foo"</span><span>,</span> O_RDONLY<span>);</span></span>
<span id="cb62-9">pagesize <span>=</span> getpagesize<span>();</span></span>
<span id="cb62-10">data <span>=</span> mmap<span>((</span><span>void</span><span>*)</span><span>0</span><span>,</span> pagesize<span>,</span> PROT_READ<span>,</span> MAP_SHARED<span>,</span> fd<span>,</span> pagesize<span>);</span></span></code></pre></div>
<p>Once this code stretch has run, you can access the first byte of the mapped section of file using <code>data[0]</code>. Notice there’s a lot of type conversion going on here. For instance, <code>mmap()</code> returns <code>void*</code>, but we treat it as a <code>char*</code>.</p>
<p>Also notice that we’ve mapped the file <code>PROT_READ</code> so we have read-only access. Any attempt to write to the data (<code>data[0] = 'B'</code>, for example) will cause a segmentation violation. Open the file <code>O_RDWR</code> with <code>prot</code> set to <code>PROT_READ|PROT_WRITE</code> if you want read-write access to the data.</p>
<h2 data-number="10.2" id="unmapping-the-file"> Unmapping the file</h2>
<p>There is, of course, a <code>munmap()</code> function to un-memory map a file:</p>
<div id="cb63"><pre><code><span id="cb63-1"><span>int</span> munmap<span>(</span><span>void</span> <span>*</span>addr<span>,</span> <span>size_t</span> len<span>);</span></span></code></pre></div>
<p>This simply unmaps the region pointed to by <code>addr</code> (returned from <code>mmap()</code>) with length <code>len</code> (same as the <code>len</code> passed to <code>mmap()</code>). <code>munmap()</code> returns <code>-1</code> on error and sets the <code>errno</code> variable.</p>
<p>Once you’ve unmapped a file, any attempts to access the data through the old pointer will result in a segmentation fault. You have been warned!</p>
<p>A final note: the file will automatically unmap if your program exits, of course.</p>
<h2 data-number="10.3" id="concurrency-again"> Concurrency, again?!</h2>
<p>If you have multiple processes manipulating the data in the same file concurrently, you could be in for troubles. You might have to <a href="#flocking">lock the file</a> or use <a href="#semaphores">semaphores</a> to regulate access to the file while a process messes with it. Look at the <a href="#shmcon">Shared Memory</a> document for a (very little bit) more concurrency information.</p>
<h2 data-number="10.4" id="a-simple-sample"> A simple sample</h2>
<p>Well, it’s code time again. I’ve got here a demo program that maps its own source to memory and prints the byte that’s found at whatever offset you specify on the command line.</p>
<p>The program restricts the offsets you can specify to the range 0 through the file length. The file length is obtained through a call to <code>stat()</code> which you might not have seen before. It returns a structure full of file info, one field of which is the size in bytes. Easy enough.</p>
<p>Here is the source for <a href="https://beej.us/guide/bgipc/source/examples/mmapdemo.c"><code>mmapdemo.c</code></a><a href="#fn39" id="fnref39" role="doc-noteref"><sup>39</sup></a>:</p>
<div id="cb64"><pre><code><span id="cb64-1"><a href="#cb64-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb64-2"><a href="#cb64-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb64-3"><a href="#cb64-3"></a><span>#include </span><span>&lt;fcntl.h&gt;</span></span>
<span id="cb64-4"><a href="#cb64-4"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb64-5"><a href="#cb64-5"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb64-6"><a href="#cb64-6"></a><span>#include </span><span>&lt;sys/mman.h&gt;</span></span>
<span id="cb64-7"><a href="#cb64-7"></a><span>#include </span><span>&lt;sys/stat.h&gt;</span></span>
<span id="cb64-8"><a href="#cb64-8"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb64-9"><a href="#cb64-9"></a></span>
<span id="cb64-10"><a href="#cb64-10"></a><span>int</span> main<span>(</span><span>int</span> argc<span>,</span> <span>char</span> <span>*</span>argv<span>[])</span></span>
<span id="cb64-11"><a href="#cb64-11"></a><span>{</span></span>
<span id="cb64-12"><a href="#cb64-12"></a>    <span>int</span> fd<span>;</span></span>
<span id="cb64-13"><a href="#cb64-13"></a>    off_t offset<span>;</span></span>
<span id="cb64-14"><a href="#cb64-14"></a>    <span>char</span> <span>*</span>data<span>;</span></span>
<span id="cb64-15"><a href="#cb64-15"></a>    <span>struct</span> stat sbuf<span>;</span></span>
<span id="cb64-16"><a href="#cb64-16"></a></span>
<span id="cb64-17"><a href="#cb64-17"></a>    <span>if</span> <span>(</span>argc <span>!=</span> <span>2</span><span>)</span> <span>{</span></span>
<span id="cb64-18"><a href="#cb64-18"></a>            fprintf<span>(</span>stderr<span>,</span> <span>"usage: mmapdemo offset</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb64-19"><a href="#cb64-19"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb64-20"><a href="#cb64-20"></a>    <span>}</span></span>
<span id="cb64-21"><a href="#cb64-21"></a></span>
<span id="cb64-22"><a href="#cb64-22"></a>    <span>if</span> <span>((</span>fd <span>=</span> open<span>(</span><span>"mmapdemo.c"</span><span>,</span> O_RDONLY<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb64-23"><a href="#cb64-23"></a>            perror<span>(</span><span>"open"</span><span>);</span></span>
<span id="cb64-24"><a href="#cb64-24"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb64-25"><a href="#cb64-25"></a>    <span>}</span></span>
<span id="cb64-26"><a href="#cb64-26"></a></span>
<span id="cb64-27"><a href="#cb64-27"></a>    <span>if</span> <span>(</span>stat<span>(</span><span>"mmapdemo.c"</span><span>,</span> <span>&amp;</span>sbuf<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb64-28"><a href="#cb64-28"></a>            perror<span>(</span><span>"stat"</span><span>);</span></span>
<span id="cb64-29"><a href="#cb64-29"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb64-30"><a href="#cb64-30"></a>    <span>}</span></span>
<span id="cb64-31"><a href="#cb64-31"></a></span>
<span id="cb64-32"><a href="#cb64-32"></a></span>
<span id="cb64-33"><a href="#cb64-33"></a>    offset <span>=</span> atoi<span>(</span>argv<span>[</span><span>1</span><span>]);</span></span>
<span id="cb64-34"><a href="#cb64-34"></a>    <span>if</span> <span>(</span>offset <span>&lt;</span> <span>0</span> <span>||</span> offset <span>&gt;</span> sbuf<span>.</span>st_size<span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb64-35"><a href="#cb64-35"></a>        fprintf<span>(</span>stderr<span>,</span> <span>"mmapdemo: offset must be in the range 0-</span><span>%d\n</span><span>"</span><span>,</span> \</span>
<span id="cb64-36"><a href="#cb64-36"></a>                                                          sbuf<span>.</span>st_size<span>-</span><span>1</span><span>);</span></span>
<span id="cb64-37"><a href="#cb64-37"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb64-38"><a href="#cb64-38"></a>    <span>}</span></span>
<span id="cb64-39"><a href="#cb64-39"></a>    </span>
<span id="cb64-40"><a href="#cb64-40"></a>    data <span>=</span> mmap<span>((</span>caddr_t<span>)</span><span>0</span><span>,</span> sbuf<span>.</span>st_size<span>,</span> PROT_READ<span>,</span> MAP_SHARED<span>,</span> fd<span>,</span> <span>0</span><span>);</span></span>
<span id="cb64-41"><a href="#cb64-41"></a>    <span>if</span> <span>(</span>data <span>==</span> MAP_FAILED<span>)</span> <span>{</span></span>
<span id="cb64-42"><a href="#cb64-42"></a>        perror<span>(</span><span>"mmap"</span><span>);</span></span>
<span id="cb64-43"><a href="#cb64-43"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb64-44"><a href="#cb64-44"></a>    <span>}</span></span>
<span id="cb64-45"><a href="#cb64-45"></a></span>
<span id="cb64-46"><a href="#cb64-46"></a>    printf<span>(</span><span>"byte at offset </span><span>%ld</span><span> is '</span><span>%c</span><span>'</span><span>\n</span><span>"</span><span>,</span> offset<span>,</span> data<span>[</span>offset<span>]);</span></span>
<span id="cb64-47"><a href="#cb64-47"></a></span>
<span id="cb64-48"><a href="#cb64-48"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb64-49"><a href="#cb64-49"></a><span>}</span></span></code></pre></div>
<p>That’s all there is to it. Compile that sucker up and run it with some command line like:</p>
<div id="cb65"><pre><code><span id="cb65-1">$ mmapdemo 30</span>
<span id="cb65-2">byte at offset 30 is 'e'</span></code></pre></div>
<p>I’ll leave it up to you to write some really cool programs using this system call.</p>
<h2 data-number="10.5" id="observations-on-memory-mapping"> Observations on memory mapping</h2>
<p>I would be remiss if I didn’t point out a few interesting aspects of using mapped files on Linux. First, the memory that the operating system allocates to use as the storage for the mapped file data is <em>the same memory</em> used to perform file buffering operations when other processes perform <code>read()</code> and <code>write()</code> operations! While <code>read()</code>s and <code>write()</code>s are guaranteed atomic by POSIX up to a certain size, that goes out the window when some processes bypass the POSIX functions entirely!</p>
<p>Second, because we’re bypassing those POSIX functions, we can read and write the buffer contents without regard to record locking that might be applied to the file descriptor (as discussed in a previous section). Normally, this isn’t a big deal—who’s going to use memory mapped files in one application while using record locking in another, when both access the same file? If the file is documented to require record locking, then all applications should use it. That said, there’s nothing stopping an application from using the read and write locking we discussed previously immediately before updating the memory that belongs to the mapped file.</p>
<p>Third, because we’re bypassing those POSIX functions (do I sound like a broken record yet?), the system is not capable of providing meaningful readahead or writebehind strategies. As of this writing, Linux kernel versions 4.x and later <em>do</em> implement an algorithm that detects when two adjacent page faults occur within a memory mapped file, and it performs a minimal amount of readahead (just two pages, compared to the readahead configurable at the file system layer, which can be upwards of 256KB). There is no writebehind whatsoever, as there’s no practical way to detect when adjacent pages are written to under current hardware configurations.</p>
<p>Last, given all of the above, there are still very compelling reasons to use memory mapped files. The primary one being that such files are, by definition, “persistent storage”, meaning applications do not have to create lengthy <code>load()</code>/<code>save()</code> functions for their data if they use memory mapped files. However, any binary data will be written in a platform dependent manner (such as endianness) so those files are likely not portable.</p>
<h2 data-number="10.6" id="summary-5"> Summary</h2>
<p>Memory mapped files can be very useful, especially on systems that don’t support shared memory segments. In fact, the two are very similar in most respects. (Memory mapped files are committed to disk, too, so this could even be an advantage, yes?) With file locking or semaphores, data in a memory mapped file can easily be shared between multiple processes.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- Unix Sockets -->
<!-- ======================================================= -->
<h2 data-number="11" id="unixsock"> Unix Sockets</h2>
<p>Remember <a href="#fifos">FIFOs</a>? Remember how they can only send data in one direction, just like <a href="#pipes">Pipes</a>? Wouldn’t it be grand if you could send data in both directions like you can with a socket?</p>
<p>Well, hope no longer, because the answer is here: Unix Domain Sockets! In case you’re still wondering what a socket is, well, it’s a two-way communications pipe, which can be used to communicate in a wide variety of <em>domains</em>. One of the most common domains sockets communicate over is the Internet, but we won’t discuss that here. We will, however, be talking about sockets in the Unix domain; that is, sockets that can be used between processes on the same Unix system.</p>
<p>Unix sockets use many of the same function calls that Internet sockets do, and I won’t be describing all of the calls I use in detail within this document. If the description of a certain call is too vague (or if you just want to learn more about Internet sockets anyway), I arbitrarily suggest <a href="https://beej.us/guide/bgnet">Beej’s Guide to Network Programming using Internet Sockets</a><a href="#fn40" id="fnref40" role="doc-noteref"><sup>40</sup></a>. I know the author personally.</p>
<h2 data-number="11.1" id="overview"> Overview</h2>
<p>Like I said before, Unix sockets are just like two-way FIFOs. However, all data communication will be taking place through the sockets interface, instead of through the file interface. Although Unix sockets are a special file in the file system (just like FIFOs), you won’t be using <code>open()</code> and <code>read()</code>—you’ll be using <code>socket()</code>, <code>bind()</code>, <code>recv()</code>, etc.</p>
<p>When programming with sockets, you’ll usually create server and client programs. The server will sit listening for incoming connections from clients and handle them. This is very similar to the situation that exists with Internet sockets, but with some fine differences.</p>
<p>For instance, when describing which Unix socket you want to use (that is, the path to the special file that is the socket), you use a <code>struct sockaddr_un</code>, which has the following fields:</p>
<pre><code>struct sockaddr_un {
    unsigned short sun_family;  /* AF_UNIX */
    char sun_path[108];
}</code></pre>
<p>This is the structure you will be passing to the <code>bind()</code> function, which associates a socket descriptor (a file descriptor) with a certain file (the name for which is in the <code>sun_path</code> field).</p>
<h2 data-number="11.2" id="what-to-do-to-be-a-server"> What to do to be a Server</h2>
<p>Without going into too much detail, I’ll outline the steps a server program usually has to go through to do it’s thing. While I’m at it, I’ll be trying to implement an “echo server” which just echos back everything it gets on the socket.</p>
<p>Here are the server steps:</p>
<ol type="1">
<li><p><strong>Call <code>socket()</code>:</strong> A call to <code>socket()</code> with the proper arguments creates the Unix socket:</p>
<div id="cb67"><pre><code><span id="cb67-1"><span>unsigned</span> <span>int</span> s<span>,</span> s2<span>;</span></span>
<span id="cb67-2"></span>
<span id="cb67-3"><span>struct</span> sockaddr_un remote<span>,</span> local <span>=</span> <span>{</span></span>
<span id="cb67-4">    <span>.</span>sun_family <span>=</span> AF_UNIX<span>,</span></span>
<span id="cb67-5">    <span>// .sun_path = SOCK_PATH,   // Can't do assignment to an array</span></span>
<span id="cb67-6"><span>};</span></span>
<span id="cb67-7"></span>
<span id="cb67-8"><span>int</span> len<span>;</span></span>
<span id="cb67-9"></span>
<span id="cb67-10">s <span>=</span> socket<span>(</span>_AF_UNIX_<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>);</span></span></code></pre></div>
<p>The second argument, <code>SOCK_STREAM</code>, tells <code>socket()</code> to create a stream socket. Yes, datagram sockets (<code>SOCK_DGRAM</code>) are supported in the Unix domain, but I’m only going to cover stream sockets here. For the curious, see <a href="https://beej.us/guide/bgnet">Beej’s Guide to Network Programming</a><a href="#fn41" id="fnref41" role="doc-noteref"><sup>41</sup></a> for a good description of unconnected datagram sockets that applies perfectly well to Unix sockets. The only thing that changes is that you’re now using a <code>struct sockaddr_un</code> instead of a <code>struct sockaddr_in</code>.</p>
<p>One more note: all these calls return <code>-1</code> on error and set the global variable <code>errno</code> to reflect whatever went wrong. Be sure to do your error checking.</p></li>
<li><p><strong>Call <code>bind()</code>:</strong> You got a socket descriptor from the call to <code>socket()</code>, now you want to bind that to an address in the Unix domain. (That address, as I said before, is a special file on disk.)</p>
<div id="cb68"><pre><code><span id="cb68-1">strcpy<span>(</span>local<span>.</span>sun_path<span>,</span> <span>"/home/beej/mysocket"</span><span>);</span></span>
<span id="cb68-2">unlink<span>(</span>local<span>.</span>sun_path<span>);</span></span>
<span id="cb68-3">len <span>=</span> strlen<span>(</span>local<span>.</span>sun_path<span>)</span> <span>+</span> <span>sizeof</span><span>(</span>local<span>.</span>sun_family<span>);</span></span>
<span id="cb68-4"></span>
<span id="cb68-5">bind<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>local<span>,</span> len<span>);</span></span></code></pre></div>
<p>This associates the socket descriptor “<code>s</code>” with the Unix socket address “<code>/home/beej/mysocket</code>”. Notice that we called <code>unlink()</code> before <code>bind()</code> to remove the socket if it already exists. You will get an <code>EINVAL</code> error if the file is already there.</p></li>
<li><p><strong>Call <code>listen()</code>:</strong> This instructs the socket to listen for incoming connections from client programs:</p>
<pre><code>listen(s, 5);</code></pre>
<p>The second argument, <code>5</code>, is the number of incoming connections that can be queued before you call <code>accept()</code>, below. If there are this many connections waiting to be accepted, additional clients will generate the error <code>ECONNREFUSED</code>.</p></li>
<li><p><strong>Call <code>accept()</code>:</strong> This will accept a connection from a client. This function returns <em>another socket descriptor</em>! The old descriptor is still listening for new connections, but this new one is connected to the client:</p>
<div id="cb70"><pre><code><span id="cb70-1">len <span>=</span> <span>sizeof</span><span>(</span>remote<span>);</span></span>
<span id="cb70-2">s2 <span>=</span> accept<span>(</span>s<span>,</span> <span>&amp;</span>remote<span>,</span> <span>&amp;</span>len<span>);</span></span></code></pre></div>
<p>When <code>accept()</code> returns, the <code>remote</code> variable will be filled with the remote side’s <code>struct sockaddr_un</code>, and <code>len</code> will be set to its length. The descriptor <code>s2</code> is connected to the client, and is ready for <code>send()</code> and <code>recv()</code>, as described in the <a href="https://beej.us/guide/bgnet">Network Programming Guide</a><a href="#fn42" id="fnref42" role="doc-noteref"><sup>42</sup></a>.</p></li>
<li><p><strong>Handle the connection and loop back to <code>accept()</code>:</strong> Usually you’ll want to communicate to the client here (we’ll just echo back everything it sends us), close the connection, then <code>accept()</code> a new one.</p>
<div id="cb71"><pre><code><span id="cb71-1"><span>while</span> <span>(</span>len <span>=</span> recv<span>(</span>s2<span>,</span> <span>&amp;</span>buf<span>,</span> <span>100</span><span>,</span> <span>0</span><span>),</span> len <span>&gt;</span> <span>0</span><span>)</span></span>
<span id="cb71-2">    send<span>(</span>s2<span>,</span> <span>&amp;</span>buf<span>,</span> len<span>,</span> <span>0</span><span>);</span></span>
<span id="cb71-3"></span>
<span id="cb71-4"><span>/* loop back to accept() from here */</span></span></code></pre></div></li>
<li><p><strong>Close the connection:</strong> You can close the connection either by calling <code>close()</code>, or by calling <a href="https://man.archlinux.org/man/shutdown.2"><code>shutdown</code></a><a href="#fn43" id="fnref43" role="doc-noteref"><sup>43</sup></a>.</p></li>
</ol>
<p>With all that said, here is some source for an echoing server, <a href="https://beej.us/guide/bgipc/source/examples/echos.c"><code>echos.c</code></a><a href="#fn44" id="fnref44" role="doc-noteref"><sup>44</sup></a>. All it does is wait for a connection on a Unix socket (named, in this case, “echo_socket”).</p>
<div id="cb72"><pre><code><span id="cb72-1"><a href="#cb72-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb72-2"><a href="#cb72-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb72-3"><a href="#cb72-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb72-4"><a href="#cb72-4"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb72-5"><a href="#cb72-5"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb72-6"><a href="#cb72-6"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb72-7"><a href="#cb72-7"></a><span>#include </span><span>&lt;sys/un.h&gt;</span></span>
<span id="cb72-8"><a href="#cb72-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb72-9"><a href="#cb72-9"></a></span>
<span id="cb72-10"><a href="#cb72-10"></a><span>#define SOCK_PATH </span><span>"echo_socket"</span></span>
<span id="cb72-11"><a href="#cb72-11"></a></span>
<span id="cb72-12"><a href="#cb72-12"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb72-13"><a href="#cb72-13"></a><span>{</span></span>
<span id="cb72-14"><a href="#cb72-14"></a>    <span>int</span> s<span>,</span> s2<span>,</span> len<span>;</span></span>
<span id="cb72-15"><a href="#cb72-15"></a>    <span>struct</span> sockaddr_un remote<span>,</span> local <span>=</span> <span>{</span></span>
<span id="cb72-16"><a href="#cb72-16"></a>            <span>.</span>sun_family <span>=</span> AF_UNIX<span>,</span></span>
<span id="cb72-17"><a href="#cb72-17"></a>            <span>// .sun_path = SOCK_PATH,   // Can't do assignment to an array</span></span>
<span id="cb72-18"><a href="#cb72-18"></a>    <span>};</span></span>
<span id="cb72-19"><a href="#cb72-19"></a>    <span>char</span> str<span>[</span><span>100</span><span>];</span></span>
<span id="cb72-20"><a href="#cb72-20"></a></span>
<span id="cb72-21"><a href="#cb72-21"></a>    <span>if</span> <span>((</span>s <span>=</span> socket<span>(</span>AF_UNIX<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb72-22"><a href="#cb72-22"></a>            perror<span>(</span><span>"socket"</span><span>);</span></span>
<span id="cb72-23"><a href="#cb72-23"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb72-24"><a href="#cb72-24"></a>    <span>}</span></span>
<span id="cb72-25"><a href="#cb72-25"></a></span>
<span id="cb72-26"><a href="#cb72-26"></a>    strcpy<span>(</span>local<span>.</span>sun_path<span>,</span> SOCK_PATH<span>);</span></span>
<span id="cb72-27"><a href="#cb72-27"></a>    unlink<span>(</span>local<span>.</span>sun_path<span>);</span></span>
<span id="cb72-28"><a href="#cb72-28"></a>    len <span>=</span> strlen<span>(</span>local<span>.</span>sun_path<span>)</span> <span>+</span> <span>sizeof</span><span>(</span>local<span>.</span>sun_family<span>);</span></span>
<span id="cb72-29"><a href="#cb72-29"></a>    <span>if</span> <span>(</span>bind<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>local<span>,</span> len<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb72-30"><a href="#cb72-30"></a>            perror<span>(</span><span>"bind"</span><span>);</span></span>
<span id="cb72-31"><a href="#cb72-31"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb72-32"><a href="#cb72-32"></a>    <span>}</span></span>
<span id="cb72-33"><a href="#cb72-33"></a></span>
<span id="cb72-34"><a href="#cb72-34"></a>    <span>if</span> <span>(</span>listen<span>(</span>s<span>,</span> <span>5</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb72-35"><a href="#cb72-35"></a>            perror<span>(</span><span>"listen"</span><span>);</span></span>
<span id="cb72-36"><a href="#cb72-36"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb72-37"><a href="#cb72-37"></a>    <span>}</span></span>
<span id="cb72-38"><a href="#cb72-38"></a></span>
<span id="cb72-39"><a href="#cb72-39"></a>    <span>for</span><span>(;;)</span> <span>{</span></span>
<span id="cb72-40"><a href="#cb72-40"></a>            <span>int</span> done<span>,</span> n<span>;</span></span>
<span id="cb72-41"><a href="#cb72-41"></a>            printf<span>(</span><span>"Waiting for a connection...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb72-42"><a href="#cb72-42"></a>            socklen_t slen <span>=</span> <span>sizeof</span><span>(</span>remote<span>);</span></span>
<span id="cb72-43"><a href="#cb72-43"></a>            <span>if</span> <span>((</span>s2 <span>=</span> accept<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>remote<span>,</span> <span>&amp;</span>slen<span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb72-44"><a href="#cb72-44"></a>                    perror<span>(</span><span>"accept"</span><span>);</span></span>
<span id="cb72-45"><a href="#cb72-45"></a>                    exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb72-46"><a href="#cb72-46"></a>            <span>}</span></span>
<span id="cb72-47"><a href="#cb72-47"></a></span>
<span id="cb72-48"><a href="#cb72-48"></a>            printf<span>(</span><span>"Connected.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb72-49"><a href="#cb72-49"></a></span>
<span id="cb72-50"><a href="#cb72-50"></a>            done <span>=</span> <span>0</span><span>;</span></span>
<span id="cb72-51"><a href="#cb72-51"></a>            <span>do</span> <span>{</span></span>
<span id="cb72-52"><a href="#cb72-52"></a>                    n <span>=</span> recv<span>(</span>s2<span>,</span> str<span>,</span> <span>sizeof</span><span>(</span>str<span>),</span> <span>0</span><span>);</span></span>
<span id="cb72-53"><a href="#cb72-53"></a>                    <span>if</span> <span>(</span>n <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb72-54"><a href="#cb72-54"></a>                            <span>if</span> <span>(</span>n <span>&lt;</span> <span>0</span><span>)</span> perror<span>(</span><span>"recv"</span><span>);</span></span>
<span id="cb72-55"><a href="#cb72-55"></a>                            done <span>=</span> <span>1</span><span>;</span></span>
<span id="cb72-56"><a href="#cb72-56"></a>                    <span>}</span></span>
<span id="cb72-57"><a href="#cb72-57"></a></span>
<span id="cb72-58"><a href="#cb72-58"></a>                    <span>if</span> <span>(!</span>done<span>)</span> </span>
<span id="cb72-59"><a href="#cb72-59"></a>                            <span>if</span> <span>(</span>send<span>(</span>s2<span>,</span> str<span>,</span> n<span>,</span> <span>0</span><span>)</span> <span>&lt;</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb72-60"><a href="#cb72-60"></a>                                    perror<span>(</span><span>"send"</span><span>);</span></span>
<span id="cb72-61"><a href="#cb72-61"></a>                                    done <span>=</span> <span>1</span><span>;</span></span>
<span id="cb72-62"><a href="#cb72-62"></a>                            <span>}</span></span>
<span id="cb72-63"><a href="#cb72-63"></a>            <span>}</span> <span>while</span> <span>(!</span>done<span>);</span></span>
<span id="cb72-64"><a href="#cb72-64"></a></span>
<span id="cb72-65"><a href="#cb72-65"></a>            close<span>(</span>s2<span>);</span></span>
<span id="cb72-66"><a href="#cb72-66"></a>    <span>}</span></span>
<span id="cb72-67"><a href="#cb72-67"></a></span>
<span id="cb72-68"><a href="#cb72-68"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb72-69"><a href="#cb72-69"></a><span>}</span></span></code></pre></div>
<p>As you can see, all the aforementioned steps are included in this program: call <code>socket()</code>, call <code>bind()</code>, call <code>listen()</code>, call <code>accept()</code>, and do some network <code>send()</code>s and <code>recv()</code>s.</p>
<h2 data-number="11.3" id="what-to-do-to-be-a-client"> What to do to be a client</h2>
<p>There needs to be a program to talk to the above server, right? Except with the client, it’s a lot easier because you don’t have to do any pesky <code>listen()</code>ing or <code>accept()</code>ing. Here are the steps:</p>
<ol type="1">
<li><p>Call <code>socket()</code> to get a Unix domain socket to communicate through.</p></li>
<li><p>Set up a <code>struct sockaddr_un</code> with the remote address (where the server is listening) and call <code>connect()</code> with that as an argument.</p></li>
<li><p>Assuming no errors, you’re connected to the remote side! Use <code>send()</code> and <code>recv()</code> to your heart’s content!</p></li>
</ol>
<p>How about code to talk to the echo server, above? No sweat, friends, here is <a href="https://beej.us/guide/bgipc/source/examples/echoc.c"><code>echoc.c</code></a><a href="#fn45" id="fnref45" role="doc-noteref"><sup>45</sup></a>:</p>
<div id="cb73"><pre><code><span id="cb73-1"><a href="#cb73-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb73-2"><a href="#cb73-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb73-3"><a href="#cb73-3"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb73-4"><a href="#cb73-4"></a><span>#include </span><span>&lt;string.h&gt;</span></span>
<span id="cb73-5"><a href="#cb73-5"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb73-6"><a href="#cb73-6"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb73-7"><a href="#cb73-7"></a><span>#include </span><span>&lt;sys/un.h&gt;</span></span>
<span id="cb73-8"><a href="#cb73-8"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb73-9"><a href="#cb73-9"></a></span>
<span id="cb73-10"><a href="#cb73-10"></a><span>#define SOCK_PATH </span><span>"echo_socket"</span></span>
<span id="cb73-11"><a href="#cb73-11"></a></span>
<span id="cb73-12"><a href="#cb73-12"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb73-13"><a href="#cb73-13"></a><span>{</span></span>
<span id="cb73-14"><a href="#cb73-14"></a>    <span>int</span> s<span>,</span> len<span>;</span></span>
<span id="cb73-15"><a href="#cb73-15"></a>    <span>struct</span> sockaddr_un remote <span>=</span> <span>{</span></span>
<span id="cb73-16"><a href="#cb73-16"></a>        <span>.</span>sun_family <span>=</span> AF_UNIX<span>,</span></span>
<span id="cb73-17"><a href="#cb73-17"></a>        <span>// .sun_path = SOCK_PATH,   // Can't do assignment to an array</span></span>
<span id="cb73-18"><a href="#cb73-18"></a>    <span>};</span></span>
<span id="cb73-19"><a href="#cb73-19"></a>    <span>char</span> str<span>[</span><span>100</span><span>];</span></span>
<span id="cb73-20"><a href="#cb73-20"></a></span>
<span id="cb73-21"><a href="#cb73-21"></a>    <span>if</span> <span>((</span>s <span>=</span> socket<span>(</span>AF_UNIX<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>))</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb73-22"><a href="#cb73-22"></a>        perror<span>(</span><span>"socket"</span><span>);</span></span>
<span id="cb73-23"><a href="#cb73-23"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb73-24"><a href="#cb73-24"></a>    <span>}</span></span>
<span id="cb73-25"><a href="#cb73-25"></a></span>
<span id="cb73-26"><a href="#cb73-26"></a>    printf<span>(</span><span>"Trying to connect...</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb73-27"><a href="#cb73-27"></a></span>
<span id="cb73-28"><a href="#cb73-28"></a>    strcpy<span>(</span>remote<span>.</span>sun_path<span>,</span> SOCK_PATH<span>);</span></span>
<span id="cb73-29"><a href="#cb73-29"></a>    len <span>=</span> strlen<span>(</span>remote<span>.</span>sun_path<span>)</span> <span>+</span> <span>sizeof</span><span>(</span>remote<span>.</span>sun_family<span>);</span></span>
<span id="cb73-30"><a href="#cb73-30"></a>    <span>if</span> <span>(</span>connect<span>(</span>s<span>,</span> <span>(</span><span>struct</span> sockaddr <span>*)&amp;</span>remote<span>,</span> len<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb73-31"><a href="#cb73-31"></a>        perror<span>(</span><span>"connect"</span><span>);</span></span>
<span id="cb73-32"><a href="#cb73-32"></a>        exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb73-33"><a href="#cb73-33"></a>    <span>}</span></span>
<span id="cb73-34"><a href="#cb73-34"></a></span>
<span id="cb73-35"><a href="#cb73-35"></a>    printf<span>(</span><span>"Connected.</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb73-36"><a href="#cb73-36"></a></span>
<span id="cb73-37"><a href="#cb73-37"></a>    <span>/* size in fgets() includes the null byte */</span></span>
<span id="cb73-38"><a href="#cb73-38"></a>    <span>while</span><span>(</span>printf<span>(</span><span>"&gt; "</span><span>),</span> fgets<span>(</span>str<span>,</span> <span>sizeof</span><span>(</span>str<span>),</span> stdin<span>),</span> <span>!</span>feof<span>(</span>stdin<span>))</span> <span>{</span></span>
<span id="cb73-39"><a href="#cb73-39"></a>        <span>if</span> <span>(</span>send<span>(</span>s<span>,</span> str<span>,</span> strlen<span>(</span>str<span>)+</span><span>1</span><span>,</span> <span>0</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb73-40"><a href="#cb73-40"></a>            perror<span>(</span><span>"send"</span><span>);</span></span>
<span id="cb73-41"><a href="#cb73-41"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb73-42"><a href="#cb73-42"></a>        <span>}</span></span>
<span id="cb73-43"><a href="#cb73-43"></a></span>
<span id="cb73-44"><a href="#cb73-44"></a>        <span>if</span> <span>((</span>len<span>=</span>recv<span>(</span>s<span>,</span> str<span>,</span> <span>sizeof</span><span>(</span>str<span>)-</span><span>1</span><span>,</span> <span>0</span><span>))</span> <span>&gt;</span> <span>0</span><span>)</span> <span>{</span></span>
<span id="cb73-45"><a href="#cb73-45"></a>            str<span>[</span>len<span>]</span> <span>=</span> <span>'</span><span>\0</span><span>'</span><span>;</span></span>
<span id="cb73-46"><a href="#cb73-46"></a>            printf<span>(</span><span>"echo&gt; </span><span>%s</span><span>"</span><span>,</span> str<span>);</span></span>
<span id="cb73-47"><a href="#cb73-47"></a>        <span>}</span> <span>else</span> <span>{</span></span>
<span id="cb73-48"><a href="#cb73-48"></a>            <span>if</span> <span>(</span>len <span>&lt;</span> <span>0</span><span>)</span> perror<span>(</span><span>"recv"</span><span>);</span></span>
<span id="cb73-49"><a href="#cb73-49"></a>            <span>else</span> printf<span>(</span><span>"Server closed connection</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb73-50"><a href="#cb73-50"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb73-51"><a href="#cb73-51"></a>        <span>}</span></span>
<span id="cb73-52"><a href="#cb73-52"></a>    <span>}</span></span>
<span id="cb73-53"><a href="#cb73-53"></a></span>
<span id="cb73-54"><a href="#cb73-54"></a>    close<span>(</span>s<span>);</span></span>
<span id="cb73-55"><a href="#cb73-55"></a></span>
<span id="cb73-56"><a href="#cb73-56"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb73-57"><a href="#cb73-57"></a><span>}</span></span></code></pre></div>
<p>In the client code, of course you’ll notice that there are only a few system calls used to set things up: <code>socket()</code> and <code>connect()</code>. Since the client isn’t going to be <code>accept()</code>ing any incoming connections, there’s no need for it to <code>listen()</code>. Of course, the client still uses <code>send()</code> and <code>recv()</code> for transferring data. That about sums it up.</p>
<h2 data-number="11.4" id="socketpairquick-full-duplex-pipes"> <code>socketpair()</code>—quick full-duplex pipes</h2>
<p>What if you wanted a <a href="#pipes"><code>pipe()</code></a>, but you wanted to use a single pipe to send and recieve data from <em>both sides</em>? Since pipes are unidirectional (with exceptions in SYSV), you can’t do it! There is a solution, though: use a Unix domain socket, since they can handle bi-directional data.</p>
<p>What a pain, though! Setting up all that code with <code>listen()</code> and <code>connect()</code> and all that just to pass data both ways! But guess what! You don’t have to!</p>
<p>That’s right, there’s a beauty of a system call known as <code>socketpair()</code> this is nice enough to return to you a pair of <em>already connected sockets</em>! No extra work is needed on your part; you can immediately use these socket descriptors for interprocess communication.</p>
<p>For instance, lets set up two processes. The first sends a <code>char</code> to the second, and the second changes the character to uppercase and returns it. Here is some simple code to do just that, called <a href="https://beej.us/guide/bgipc/source/examples/spair.c"><code>spair.c</code></a><a href="#fn46" id="fnref46" role="doc-noteref"><sup>46</sup></a> (with no error checking for clarity):</p>
<div id="cb74"><pre><code><span id="cb74-1"><a href="#cb74-1"></a><span>#include </span><span>&lt;stdio.h&gt;</span></span>
<span id="cb74-2"><a href="#cb74-2"></a><span>#include </span><span>&lt;stdlib.h&gt;</span></span>
<span id="cb74-3"><a href="#cb74-3"></a><span>#include </span><span>&lt;ctype.h&gt;</span></span>
<span id="cb74-4"><a href="#cb74-4"></a><span>#include </span><span>&lt;errno.h&gt;</span></span>
<span id="cb74-5"><a href="#cb74-5"></a><span>#include </span><span>&lt;unistd.h&gt;</span></span>
<span id="cb74-6"><a href="#cb74-6"></a><span>#include </span><span>&lt;sys/types.h&gt;</span></span>
<span id="cb74-7"><a href="#cb74-7"></a><span>#include </span><span>&lt;sys/socket.h&gt;</span></span>
<span id="cb74-8"><a href="#cb74-8"></a></span>
<span id="cb74-9"><a href="#cb74-9"></a><span>int</span> main<span>(</span><span>void</span><span>)</span></span>
<span id="cb74-10"><a href="#cb74-10"></a><span>{</span></span>
<span id="cb74-11"><a href="#cb74-11"></a>    <span>int</span> sv<span>[</span><span>2</span><span>];</span> <span>/* the pair of socket descriptors */</span></span>
<span id="cb74-12"><a href="#cb74-12"></a>    <span>char</span> buf<span>;</span> <span>/* for data exchange between processes */</span></span>
<span id="cb74-13"><a href="#cb74-13"></a></span>
<span id="cb74-14"><a href="#cb74-14"></a>    <span>if</span> <span>(</span>socketpair<span>(</span>AF_UNIX<span>,</span> SOCK_STREAM<span>,</span> <span>0</span><span>,</span> sv<span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span></span>
<span id="cb74-15"><a href="#cb74-15"></a>            perror<span>(</span><span>"socketpair"</span><span>);</span></span>
<span id="cb74-16"><a href="#cb74-16"></a>            exit<span>(</span><span>1</span><span>);</span></span>
<span id="cb74-17"><a href="#cb74-17"></a>    <span>}</span></span>
<span id="cb74-18"><a href="#cb74-18"></a></span>
<span id="cb74-19"><a href="#cb74-19"></a>    <span>if</span> <span>(!</span>fork<span>())</span> <span>{</span>  <span>/* child */</span></span>
<span id="cb74-20"><a href="#cb74-20"></a>            read<span>(</span>sv<span>[</span><span>1</span><span>],</span> <span>&amp;</span>buf<span>,</span> <span>1</span><span>);</span></span>
<span id="cb74-21"><a href="#cb74-21"></a>            printf<span>(</span><span>"child: read '</span><span>%c</span><span>'</span><span>\n</span><span>"</span><span>,</span> buf<span>);</span></span>
<span id="cb74-22"><a href="#cb74-22"></a>            buf <span>=</span> toupper<span>(</span>buf<span>);</span>  <span>/* make it uppercase */</span></span>
<span id="cb74-23"><a href="#cb74-23"></a>            write<span>(</span>sv<span>[</span><span>1</span><span>],</span> <span>&amp;</span>buf<span>,</span> <span>1</span><span>);</span></span>
<span id="cb74-24"><a href="#cb74-24"></a>            printf<span>(</span><span>"child: sent '</span><span>%c</span><span>'</span><span>\n</span><span>"</span><span>,</span> buf<span>);</span></span>
<span id="cb74-25"><a href="#cb74-25"></a></span>
<span id="cb74-26"><a href="#cb74-26"></a>    <span>}</span> <span>else</span> <span>{</span> <span>/* parent */</span></span>
<span id="cb74-27"><a href="#cb74-27"></a>            write<span>(</span>sv<span>[</span><span>0</span><span>],</span> <span>"b"</span><span>,</span> <span>1</span><span>);</span></span>
<span id="cb74-28"><a href="#cb74-28"></a>            printf<span>(</span><span>"parent: sent 'b'</span><span>\n</span><span>"</span><span>);</span></span>
<span id="cb74-29"><a href="#cb74-29"></a>            read<span>(</span>sv<span>[</span><span>0</span><span>],</span> <span>&amp;</span>buf<span>,</span> <span>1</span><span>);</span></span>
<span id="cb74-30"><a href="#cb74-30"></a>            printf<span>(</span><span>"parent: read '</span><span>%c</span><span>'</span><span>\n</span><span>"</span><span>,</span> buf<span>);</span></span>
<span id="cb74-31"><a href="#cb74-31"></a>            wait<span>(</span>NULL<span>);</span> <span>/* wait for child to die */</span></span>
<span id="cb74-32"><a href="#cb74-32"></a>    <span>}</span></span>
<span id="cb74-33"><a href="#cb74-33"></a></span>
<span id="cb74-34"><a href="#cb74-34"></a>    <span>return</span> <span>0</span><span>;</span></span>
<span id="cb74-35"><a href="#cb74-35"></a><span>}</span></span></code></pre></div>
<p>Sure, it’s an expensive way to change a character to uppercase, but it’s the fact that you have simple communication going on here that really matters.</p>
<p>One more thing to notice is that <code>socketpair()</code> takes both a domain (<code>AF_UNIX</code>) and socket type (<code>SOCK_STREAM</code>). These can be any legal values at all, depending on which routines in the kernel you want to handle your code, and whether you want stream or datagram sockets. I chose <code>AF_UNIX</code> sockets because this is a Unix sockets document and they’re a bit faster than <code>AF_INET</code> sockets, I hear.</p>
<p>Finally, you might be curious as to why I’m using <code>write()</code> and <code>read()</code> instead of <code>send()</code> and <code>recv()</code>. Well, in short, I was being lazy. See, by using these system calls, I don’t have to enter the <code>flags</code> argument that <code>send()</code> and <code>recv()</code> use, and I always set it to zero anyway. Of course, socket descriptors are just file descriptors like any other, so they respond just fine to many file manipulation system calls.</p>
<!-- Beej's guide to IPC

# vim: ts=4:sw=4:nosi:et:tw=72
-->
<!-- ======================================================= -->
<!-- References -->
<!-- ======================================================= -->
<h2 data-number="12" id="references"> More IPC Resources</h2>
<h2 data-number="12.1" id="books"> Books</h2>
<p>Here are some books that describe some of the procedures I’ve discussed in this guide, as well as Unix details in specific:</p>
<p>Bach, Maurice J. <em>The Design of the UNIX Operating System</em>. Published by Prentice-Hall, 1986. ISBN <a href="https://beej.us/guide/url/unixdesign">0132017997</a><a href="#fn47" id="fnref47" role="doc-noteref"><sup>47</sup></a>.</p>
<p>W. Richard Stevens. <em>Unix Network Programming, volumes 1-2</em>. Published by Prentice Hall. ISBNs for volumes 1-2: <a href="https://beej.us/guide/url/unixnet1">0131411551</a><a href="#fn48" id="fnref48" role="doc-noteref"><sup>48</sup></a>, <a href="https://beej.us/guide/url/unixnet2">0130810819</a><a href="#fn49" id="fnref49" role="doc-noteref"><sup>49</sup></a>.</p>
<p>W. Richard Stevens. <em>Advanced Programming in the UNIX Environment</em>. Published by Addison Wesley. ISBN <a href="https://beej.us/guide/url/advunix">0201433079</a><a href="#fn50" id="fnref50" role="doc-noteref"><sup>50</sup></a>.</p>
<h2 data-number="12.2" id="other-online-documentation"> Other online documentation</h2>
<p><a href="http://www.kohala.com/start/unpv22e/unpv22e.html"><strong>UNIX Network Programming Volume 2 home page</strong></a><a href="#fn51" id="fnref51" role="doc-noteref"><sup>51</sup></a>—includes source code from Stevens’ superfine book.</p>
<p><a href="http://tldp.org/LDP/lpg/node7.html"><strong>The Linux Programmer’s Guide</strong></a><a href="#fn52" id="fnref52" role="doc-noteref"><sup>52</sup></a>—in-depth section on IPC.</p>
<p><a href="https://users.cs.cf.ac.uk/Dave.Marshall/C/"><strong>UNIX System Calls and Subroutines using C</strong></a><a href="#fn53" id="fnref53" role="doc-noteref"><sup>53</sup></a>—contains modest IPC information.</p>
<p><a href="https://tldp.org/LDP/tlk/ipc/ipc.html"><strong>The Linux Kernel</strong></a><a href="#fn54" id="fnref54" role="doc-noteref"><sup>54</sup></a>—how the Linux kernel implements IPC.</p>
<!-- ======================================================= -->
<!-- Linux man pages -->
<!-- ======================================================= -->
<h2 data-number="12.3" id="linux-man-pages"> Linux man pages</h2>
<p>There are Linux manual pages. If you run another flavor of Unix, please look at your own man pages, as these might not work on your system.</p>
<ul>
<li><a href="https://man.archlinux.org/man/accept.2"><code>accept()</code></a><a href="#fn55" id="fnref55" role="doc-noteref"><sup>55</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/bind.2"><code>bind()</code></a><a href="#fn56" id="fnref56" role="doc-noteref"><sup>56</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/connect.2"><code>connect()</code></a><a href="#fn57" id="fnref57" role="doc-noteref"><sup>57</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/dup.2"><code>dup()</code></a><a href="#fn58" id="fnref58" role="doc-noteref"><sup>58</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/exec.2"><code>exec()</code></a><a href="#fn59" id="fnref59" role="doc-noteref"><sup>59</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/exit.2"><code>exit()</code></a><a href="#fn60" id="fnref60" role="doc-noteref"><sup>60</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/fcntl.2"><code>fcntl()</code></a><a href="#fn61" id="fnref61" role="doc-noteref"><sup>61</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/fileno.3"><code>fileno()</code></a><a href="#fn62" id="fnref62" role="doc-noteref"><sup>62</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/fork.2"><code>fork()</code></a><a href="#fn63" id="fnref63" role="doc-noteref"><sup>63</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/ftok.3"><code>ftok()</code></a><a href="#fn64" id="fnref64" role="doc-noteref"><sup>64</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/getpagesize.2"><code>getpagesize()</code></a><a href="#fn65" id="fnref65" role="doc-noteref"><sup>65</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/ipcrm.8"><code>ipcrm</code></a><a href="#fn66" id="fnref66" role="doc-noteref"><sup>66</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/ipcs.8"><code>ipcs</code></a><a href="#fn67" id="fnref67" role="doc-noteref"><sup>67</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/kill.1"><code>kill</code></a><a href="#fn68" id="fnref68" role="doc-noteref"><sup>68</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/kill.2"><code>kill()</code></a><a href="#fn69" id="fnref69" role="doc-noteref"><sup>69</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/listen.2"><code>listen()</code></a><a href="#fn70" id="fnref70" role="doc-noteref"><sup>70</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/lockf.2"><code>lockf()</code></a><a href="#fn71" id="fnref71" role="doc-noteref"><sup>71</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/lseek.2"><code>lseek()</code></a><a href="#fn72" id="fnref72" role="doc-noteref"><sup>72</sup></a> (for the <code>l_whence</code> field in <code>struct flock</code>),</li>
<li><a href="https://man.archlinux.org/man/mknod.1"><code>mknod</code></a><a href="#fn73" id="fnref73" role="doc-noteref"><sup>73</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/mknod.2"><code>mknod()</code></a><a href="#fn74" id="fnref74" role="doc-noteref"><sup>74</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/mmap.2"><code>mmap()</code></a><a href="#fn75" id="fnref75" role="doc-noteref"><sup>75</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/msgctl.2"><code>msgctl()</code></a><a href="#fn76" id="fnref76" role="doc-noteref"><sup>76</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/msgget.2"><code>msgget()</code></a><a href="#fn77" id="fnref77" role="doc-noteref"><sup>77</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/msgsnd.2"><code>msgsnd()</code></a><a href="#fn78" id="fnref78" role="doc-noteref"><sup>78</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/munmap.2"><code>munmap()</code></a><a href="#fn79" id="fnref79" role="doc-noteref"><sup>79</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/open.2"><code>open()</code></a><a href="#fn80" id="fnref80" role="doc-noteref"><sup>80</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/pipe.2"><code>pipe()</code></a><a href="#fn81" id="fnref81" role="doc-noteref"><sup>81</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/ps.1"><code>ps</code></a><a href="#fn82" id="fnref82" role="doc-noteref"><sup>82</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/raise.3"><code>raise()</code></a><a href="#fn83" id="fnref83" role="doc-noteref"><sup>83</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/read.2"><code>read()</code></a><a href="#fn84" id="fnref84" role="doc-noteref"><sup>84</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/recv.2"><code>recv()</code></a><a href="#fn85" id="fnref85" role="doc-noteref"><sup>85</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/semctl.2"><code>semctl()</code></a><a href="#fn86" id="fnref86" role="doc-noteref"><sup>86</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/semget.2"><code>semget()</code></a><a href="#fn87" id="fnref87" role="doc-noteref"><sup>87</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/semop.2"><code>semop()</code></a><a href="#fn88" id="fnref88" role="doc-noteref"><sup>88</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/send.2"><code>send()</code></a><a href="#fn89" id="fnref89" role="doc-noteref"><sup>89</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/shmat.2"><code>shmat()</code></a><a href="#fn90" id="fnref90" role="doc-noteref"><sup>90</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/shmctl.2"><code>shmctl()</code></a><a href="#fn91" id="fnref91" role="doc-noteref"><sup>91</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/shmdt.2"><code>shmdt()</code></a><a href="#fn92" id="fnref92" role="doc-noteref"><sup>92</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/shmget.2"><code>shmget()</code></a><a href="#fn93" id="fnref93" role="doc-noteref"><sup>93</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/sigaction.2"><code>sigaction()</code></a><a href="#fn94" id="fnref94" role="doc-noteref"><sup>94</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/signal.2"><code>signal()</code></a><a href="#fn95" id="fnref95" role="doc-noteref"><sup>95</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/signal.7">signals</a><a href="#fn96" id="fnref96" role="doc-noteref"><sup>96</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/sigpending.2"><code>sigpending()</code></a><a href="#fn97" id="fnref97" role="doc-noteref"><sup>97</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/sigprocmask.2"><code>sigprocmask()</code></a><a href="#fn98" id="fnref98" role="doc-noteref"><sup>98</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/sigsetopts.2">sigsetops</a><a href="#fn99" id="fnref99" role="doc-noteref"><sup>99</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/sigsuspend.2"><code>sigsuspend()</code></a><a href="#fn100" id="fnref100" role="doc-noteref"><sup>100</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/socket.2"><code>socket()</code></a><a href="#fn101" id="fnref101" role="doc-noteref"><sup>101</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/socketpair.2"><code>socketpair()</code></a><a href="#fn102" id="fnref102" role="doc-noteref"><sup>102</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/stat.2"><code>stat()</code></a><a href="#fn103" id="fnref103" role="doc-noteref"><sup>103</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/wait.2"><code>wait()</code></a><a href="#fn104" id="fnref104" role="doc-noteref"><sup>104</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/waitpid.2"><code>waitpid()</code></a><a href="#fn105" id="fnref105" role="doc-noteref"><sup>105</sup></a>,</li>
<li><a href="https://man.archlinux.org/man/write.2"><code>write()</code></a><a href="#fn106" id="fnref106" role="doc-noteref"><sup>106</sup></a>.</li>
</ul>
<section id="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn1"><p>https://beej.us/guide/bgnet<a href="#fnref1" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>https://beej.us/guide/bgipc<a href="#fnref2" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>https://beej.us/guide/bgipc/source/examples/fork1.c<a href="#fnref3" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>https://beej.us/guide/bgipc/source/examples/sigint.c<a href="#fnref4" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>https://beej.us/guide/bgipc/source/examples/sigusr.c<a href="#fnref5" role="doc-backlink">↩︎</a></p></li>
<li id="fn6"><p>https://man.archlinux.org/man/sigaction.2<a href="#fnref6" role="doc-backlink">↩︎</a></p></li>
<li id="fn7"><p>https://man.archlinux.org/man/sigwait.3<a href="#fnref7" role="doc-backlink">↩︎</a></p></li>
<li id="fn8"><p>https://man.archlinux.org/man/sigwaitinfo.2<a href="#fnref8" role="doc-backlink">↩︎</a></p></li>
<li id="fn9"><p>https://man.archlinux.org/man/sigtimedwait.2<a href="#fnref9" role="doc-backlink">↩︎</a></p></li>
<li id="fn10"><p>https://man.archlinux.org/man/sigsuspend.2<a href="#fnref10" role="doc-backlink">↩︎</a></p></li>
<li id="fn11"><p>https://man.archlinux.org/man/sigpending.2<a href="#fnref11" role="doc-backlink">↩︎</a></p></li>
<li id="fn12"><p>https://man.archlinux.org/man/kill.2<a href="#fnref12" role="doc-backlink">↩︎</a></p></li>
<li id="fn13"><p>https://man.archlinux.org/man/raise.3<a href="#fnref13" role="doc-backlink">↩︎</a></p></li>
<li id="fn14"><p>https://man.archlinux.org/man/sigqueue.3<a href="#fnref14" role="doc-backlink">↩︎</a></p></li>
<li id="fn15"><p>https://man.archlinux.org/man/sigemptyset.3<a href="#fnref15" role="doc-backlink">↩︎</a></p></li>
<li id="fn16"><p>https://man.archlinux.org/man/sigfillset.3<a href="#fnref16" role="doc-backlink">↩︎</a></p></li>
<li id="fn17"><p>https://man.archlinux.org/man/sigaddset.3<a href="#fnref17" role="doc-backlink">↩︎</a></p></li>
<li id="fn18"><p>https://man.archlinux.org/man/sigdelset.3<a href="#fnref18" role="doc-backlink">↩︎</a></p></li>
<li id="fn19"><p>https://man.archlinux.org/man/sigismember.3<a href="#fnref19" role="doc-backlink">↩︎</a></p></li>
<li id="fn20"><p>https://man.archlinux.org/man/sigprocmask.2<a href="#fnref20" role="doc-backlink">↩︎</a></p></li>
<li id="fn21"><p>https://man.archlinux.org/man/sigaltstack.2<a href="#fnref21" role="doc-backlink">↩︎</a></p></li>
<li id="fn22"><p>https://man.archlinux.org/man/siginterrupt.3<a href="#fnref22" role="doc-backlink">↩︎</a></p></li>
<li id="fn23"><p>https://man.archlinux.org/man/sigsetjmp.3<a href="#fnref23" role="doc-backlink">↩︎</a></p></li>
<li id="fn24"><p>https://man.archlinux.org/man/siglongjmp.3<a href="#fnref24" role="doc-backlink">↩︎</a></p></li>
<li id="fn25"><p>https://man.archlinux.org/man/signal.2<a href="#fnref25" role="doc-backlink">↩︎</a></p></li>
<li id="fn26"><p>https://beej.us/guide/bgipc/source/examples/pipe1.c<a href="#fnref26" role="doc-backlink">↩︎</a></p></li>
<li id="fn27"><p>https://beej.us/guide/bgipc/source/examples/pipe3.c<a href="#fnref27" role="doc-backlink">↩︎</a></p></li>
<li id="fn28"><p>https://beej.us/guide/bgipc/source/examples/speak.c<a href="#fnref28" role="doc-backlink">↩︎</a></p></li>
<li id="fn29"><p>https://beej.us/guide/bgipc/source/examples/tick.c<a href="#fnref29" role="doc-backlink">↩︎</a></p></li>
<li id="fn30"><p>https://beej.us/guide/bgipc/source/examples/lockdemo.c<a href="#fnref30" role="doc-backlink">↩︎</a></p></li>
<li id="fn31"><p>https://beej.us/guide/bgipc/source/examples/kirk.c<a href="#fnref31" role="doc-backlink">↩︎</a></p></li>
<li id="fn32"><p>https://beej.us/guide/bgipc/source/examples/spock.c<a href="#fnref32" role="doc-backlink">↩︎</a></p></li>
<li id="fn33"><p>https://beej.us/guide/bgipc/source/examples/semdemo.c<a href="#fnref33" role="doc-backlink">↩︎</a></p></li>
<li id="fn34"><p>https://beej.us/guide/bgipc/source/examples/semdemo.c<a href="#fnref34" role="doc-backlink">↩︎</a></p></li>
<li id="fn35"><p>https://beej.us/guide/bgipc/source/examples/semrm.c<a href="#fnref35" role="doc-backlink">↩︎</a></p></li>
<li id="fn36"><p>Or whatever the current addictive FPS game is these days.<a href="#fnref36" role="doc-backlink">↩︎</a></p></li>
<li id="fn37"><p>https://en.wikipedia.org/wiki/Concurrency<a href="#fnref37" role="doc-backlink">↩︎</a></p></li>
<li id="fn38"><p>https://beej.us/guide/bgipc/source/examples/shmdemo.c<a href="#fnref38" role="doc-backlink">↩︎</a></p></li>
<li id="fn39"><p>https://beej.us/guide/bgipc/source/examples/mmapdemo.c<a href="#fnref39" role="doc-backlink">↩︎</a></p></li>
<li id="fn40"><p>https://beej.us/guide/bgnet<a href="#fnref40" role="doc-backlink">↩︎</a></p></li>
<li id="fn41"><p>https://beej.us/guide/bgnet<a href="#fnref41" role="doc-backlink">↩︎</a></p></li>
<li id="fn42"><p>https://beej.us/guide/bgnet<a href="#fnref42" role="doc-backlink">↩︎</a></p></li>
<li id="fn43"><p>https://man.archlinux.org/man/shutdown.2<a href="#fnref43" role="doc-backlink">↩︎</a></p></li>
<li id="fn44"><p>https://beej.us/guide/bgipc/source/examples/echos.c<a href="#fnref44" role="doc-backlink">↩︎</a></p></li>
<li id="fn45"><p>https://beej.us/guide/bgipc/source/examples/echoc.c<a href="#fnref45" role="doc-backlink">↩︎</a></p></li>
<li id="fn46"><p>https://beej.us/guide/bgipc/source/examples/spair.c<a href="#fnref46" role="doc-backlink">↩︎</a></p></li>
<li id="fn47"><p>https://beej.us/guide/url/unixdesign<a href="#fnref47" role="doc-backlink">↩︎</a></p></li>
<li id="fn48"><p>https://beej.us/guide/url/unixnet1<a href="#fnref48" role="doc-backlink">↩︎</a></p></li>
<li id="fn49"><p>https://beej.us/guide/url/unixnet2<a href="#fnref49" role="doc-backlink">↩︎</a></p></li>
<li id="fn50"><p>https://beej.us/guide/url/advunix<a href="#fnref50" role="doc-backlink">↩︎</a></p></li>
<li id="fn51"><p>http://www.kohala.com/start/unpv22e/unpv22e.html<a href="#fnref51" role="doc-backlink">↩︎</a></p></li>
<li id="fn52"><p>http://tldp.org/LDP/lpg/node7.html<a href="#fnref52" role="doc-backlink">↩︎</a></p></li>
<li id="fn53"><p>https://users.cs.cf.ac.uk/Dave.Marshall/C/<a href="#fnref53" role="doc-backlink">↩︎</a></p></li>
<li id="fn54"><p>https://tldp.org/LDP/tlk/ipc/ipc.html<a href="#fnref54" role="doc-backlink">↩︎</a></p></li>
<li id="fn55"><p>https://man.archlinux.org/man/accept.2<a href="#fnref55" role="doc-backlink">↩︎</a></p></li>
<li id="fn56"><p>https://man.archlinux.org/man/bind.2<a href="#fnref56" role="doc-backlink">↩︎</a></p></li>
<li id="fn57"><p>https://man.archlinux.org/man/connect.2<a href="#fnref57" role="doc-backlink">↩︎</a></p></li>
<li id="fn58"><p>https://man.archlinux.org/man/dup.2<a href="#fnref58" role="doc-backlink">↩︎</a></p></li>
<li id="fn59"><p>https://man.archlinux.org/man/exec.2<a href="#fnref59" role="doc-backlink">↩︎</a></p></li>
<li id="fn60"><p>https://man.archlinux.org/man/exit.2<a href="#fnref60" role="doc-backlink">↩︎</a></p></li>
<li id="fn61"><p>https://man.archlinux.org/man/fcntl.2<a href="#fnref61" role="doc-backlink">↩︎</a></p></li>
<li id="fn62"><p>https://man.archlinux.org/man/fileno.3<a href="#fnref62" role="doc-backlink">↩︎</a></p></li>
<li id="fn63"><p>https://man.archlinux.org/man/fork.2<a href="#fnref63" role="doc-backlink">↩︎</a></p></li>
<li id="fn64"><p>https://man.archlinux.org/man/ftok.3<a href="#fnref64" role="doc-backlink">↩︎</a></p></li>
<li id="fn65"><p>https://man.archlinux.org/man/getpagesize.2<a href="#fnref65" role="doc-backlink">↩︎</a></p></li>
<li id="fn66"><p>https://man.archlinux.org/man/ipcrm.8<a href="#fnref66" role="doc-backlink">↩︎</a></p></li>
<li id="fn67"><p>https://man.archlinux.org/man/ipcs.8<a href="#fnref67" role="doc-backlink">↩︎</a></p></li>
<li id="fn68"><p>https://man.archlinux.org/man/kill.1<a href="#fnref68" role="doc-backlink">↩︎</a></p></li>
<li id="fn69"><p>https://man.archlinux.org/man/kill.2<a href="#fnref69" role="doc-backlink">↩︎</a></p></li>
<li id="fn70"><p>https://man.archlinux.org/man/listen.2<a href="#fnref70" role="doc-backlink">↩︎</a></p></li>
<li id="fn71"><p>https://man.archlinux.org/man/lockf.2<a href="#fnref71" role="doc-backlink">↩︎</a></p></li>
<li id="fn72"><p>https://man.archlinux.org/man/lseek.2<a href="#fnref72" role="doc-backlink">↩︎</a></p></li>
<li id="fn73"><p>https://man.archlinux.org/man/mknod.1<a href="#fnref73" role="doc-backlink">↩︎</a></p></li>
<li id="fn74"><p>https://man.archlinux.org/man/mknod.2<a href="#fnref74" role="doc-backlink">↩︎</a></p></li>
<li id="fn75"><p>https://man.archlinux.org/man/mmap.2<a href="#fnref75" role="doc-backlink">↩︎</a></p></li>
<li id="fn76"><p>https://man.archlinux.org/man/msgctl.2<a href="#fnref76" role="doc-backlink">↩︎</a></p></li>
<li id="fn77"><p>https://man.archlinux.org/man/msgget.2<a href="#fnref77" role="doc-backlink">↩︎</a></p></li>
<li id="fn78"><p>https://man.archlinux.org/man/msgsnd.2<a href="#fnref78" role="doc-backlink">↩︎</a></p></li>
<li id="fn79"><p>https://man.archlinux.org/man/munmap.2<a href="#fnref79" role="doc-backlink">↩︎</a></p></li>
<li id="fn80"><p>https://man.archlinux.org/man/open.2<a href="#fnref80" role="doc-backlink">↩︎</a></p></li>
<li id="fn81"><p>https://man.archlinux.org/man/pipe.2<a href="#fnref81" role="doc-backlink">↩︎</a></p></li>
<li id="fn82"><p>https://man.archlinux.org/man/ps.1<a href="#fnref82" role="doc-backlink">↩︎</a></p></li>
<li id="fn83"><p>https://man.archlinux.org/man/raise.3<a href="#fnref83" role="doc-backlink">↩︎</a></p></li>
<li id="fn84"><p>https://man.archlinux.org/man/read.2<a href="#fnref84" role="doc-backlink">↩︎</a></p></li>
<li id="fn85"><p>https://man.archlinux.org/man/recv.2<a href="#fnref85" role="doc-backlink">↩︎</a></p></li>
<li id="fn86"><p>https://man.archlinux.org/man/semctl.2<a href="#fnref86" role="doc-backlink">↩︎</a></p></li>
<li id="fn87"><p>https://man.archlinux.org/man/semget.2<a href="#fnref87" role="doc-backlink">↩︎</a></p></li>
<li id="fn88"><p>https://man.archlinux.org/man/semop.2<a href="#fnref88" role="doc-backlink">↩︎</a></p></li>
<li id="fn89"><p>https://man.archlinux.org/man/send.2<a href="#fnref89" role="doc-backlink">↩︎</a></p></li>
<li id="fn90"><p>https://man.archlinux.org/man/shmat.2<a href="#fnref90" role="doc-backlink">↩︎</a></p></li>
<li id="fn91"><p>https://man.archlinux.org/man/shmctl.2<a href="#fnref91" role="doc-backlink">↩︎</a></p></li>
<li id="fn92"><p>https://man.archlinux.org/man/shmdt.2<a href="#fnref92" role="doc-backlink">↩︎</a></p></li>
<li id="fn93"><p>https://man.archlinux.org/man/shmget.2<a href="#fnref93" role="doc-backlink">↩︎</a></p></li>
<li id="fn94"><p>https://man.archlinux.org/man/sigaction.2<a href="#fnref94" role="doc-backlink">↩︎</a></p></li>
<li id="fn95"><p>https://man.archlinux.org/man/signal.2<a href="#fnref95" role="doc-backlink">↩︎</a></p></li>
<li id="fn96"><p>https://man.archlinux.org/man/signal.7<a href="#fnref96" role="doc-backlink">↩︎</a></p></li>
<li id="fn97"><p>https://man.archlinux.org/man/sigpending.2<a href="#fnref97" role="doc-backlink">↩︎</a></p></li>
<li id="fn98"><p>https://man.archlinux.org/man/sigprocmask.2<a href="#fnref98" role="doc-backlink">↩︎</a></p></li>
<li id="fn99"><p>https://man.archlinux.org/man/sigsetopts.2<a href="#fnref99" role="doc-backlink">↩︎</a></p></li>
<li id="fn100"><p>https://man.archlinux.org/man/sigsuspend.2<a href="#fnref100" role="doc-backlink">↩︎</a></p></li>
<li id="fn101"><p>https://man.archlinux.org/man/socket.2<a href="#fnref101" role="doc-backlink">↩︎</a></p></li>
<li id="fn102"><p>https://man.archlinux.org/man/socketpair.2<a href="#fnref102" role="doc-backlink">↩︎</a></p></li>
<li id="fn103"><p>https://man.archlinux.org/man/stat.2<a href="#fnref103" role="doc-backlink">↩︎</a></p></li>
<li id="fn104"><p>https://man.archlinux.org/man/wait.2<a href="#fnref104" role="doc-backlink">↩︎</a></p></li>
<li id="fn105"><p>https://man.archlinux.org/man/waitpid.2<a href="#fnref105" role="doc-backlink">↩︎</a></p></li>
<li id="fn106"><p>https://man.archlinux.org/man/write.2<a href="#fnref106" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>


</div>]]></description>
        </item>
    </channel>
</rss>