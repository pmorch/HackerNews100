<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 23 Jan 2025 16:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Hacking Subaru: Tracking and Controlling Cars via the Starlink Admin Panel (130 pts)]]></title>
            <link>https://samcurry.net/hacking-subaru</link>
            <guid>42803279</guid>
            <pubDate>Thu, 23 Jan 2025 12:22:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://samcurry.net/hacking-subaru">https://samcurry.net/hacking-subaru</a>, See on <a href="https://news.ycombinator.com/item?id=42803279">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 id="introduction">Introduction</h2>
<p>On November 20, 2024, Shubham Shah and I discovered a security vulnerability in Subaru’s STARLINK connected vehicle service that gave us unrestricted targeted access to all vehicles and customer accounts in the United States, Canada, and Japan.</p>
<p>Using the access provided by the vulnerability, an attacker who only knew the victim’s last name and ZIP code, email address, phone number, or license plate could have done the following:</p>
<ul>
<li>Remotely start, stop, lock, unlock, and retrieve the current location of any vehicle.</li>
<li>Retrieve any vehicle’s complete location history from the past year, accurate to within 5 meters and updated each time the engine starts.</li>
<li>Query and retrieve the personally identifiable information (PII) of any customer, including emergency contacts, authorized users, physical address, billing information (e.g., last 4 digits of credit card, excluding full card number), and vehicle PIN.</li>
<li>Access miscellaneous user data including support call history, previous owners, odometer reading, sales history, and more.</li>
</ul>
<p>After reporting the vulnerability, the affected system was patched within 24 hours and never exploited maliciously.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<iframe width="800" height="500" src="https://www.youtube.com/embed/0i8juy6RPBI?si=ZsJUYd6fKj36FthV" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
<p><em>Taking over a Subaru using only the license plate in about 10 seconds, retrieving over a years worth of location history from the vehicle</em></p>

<p><em>Map displaying 1,600 leaked coordinates from a 2023 Subaru Impreza, similar data was retrievable for any internet-connected Subaru</em></p>
<h2 id="vulnerability-writeup">Vulnerability Writeup</h2>
<p>A little over a year ago, I bought my mom a 2023 Subaru Impreza with the promise that she would let me borrow it to try and hack it. I’d spent the last few years hunting for vulnerabilities in other automakers, but didn’t yet have the chance to look at Subaru.</p>
<p>While visiting home for thanksgiving this year, I took my opportunity and asked for the account login to see if I could get anywhere.</p>
<h3 id="auditing-the-mysubaru-mobile-app">Auditing the MySubaru Mobile App</h3>
<p>The first thing I wanted to test was the MySubaru app. This app allowed users to send vehicle commands, so I proxied the app using Burp Suite and intercepted the telematic command HTTP requests, hoping to find a vulnerability to unlock cars without authorization.</p>
<p>The below request was sent when unlocking a car via the app:</p>
<pre><code><span>POST</span> <span>/g2v30/service/g2/unlock/execute.json;jsessionid=AE6E4482F5C4493A79C8F3BD656F8BBA</span> <span>HTTP/1.1</span>
<span>Host:</span> <span>mobileapi.prod.subarucs.com</span>
<span>Content-Type:</span> <span>application/json</span>
<span>Connection:</span> <span>keep-alive</span>
<span>Accept:</span> <span>*/*</span>
<span>User-Agent:</span> <span>MySubaru-PROD-SOA/2024110100</span> <span>CFNetwork/1568.300.101</span> <span>Darwin/24.2.0</span>
<span>Content-Length:</span> <span>83</span>
<span>Accept-Language:</span> <span>en-US,en;q=0.9</span>
<span>Accept-Encoding:</span> <span>gzip,</span> <span>deflate,</span> <span>br</span>

{
  <span>"delay":</span> <span>0</span>,
  <span>"unlockDoorType":</span> <span>"ALL_DOORS_CMD"</span>,
  <span>"vin":</span> <span>"4S3GTAV64P3701234"</span>,
  <span>"pin":</span> <span>"1234"</span>
}
</code></pre>
<p>After failing to bypass the authorization for in-app vehicle commands, I looked around the app a bit more but couldn’t find anything interesting to test. Everything seemed properly secured. There weren’t a lot of endpoints. The authorization worked really well.</p>
<p>Maybe testing the MySubaru app was the wrong approach.</p>
<p>From my past experience with car companies, I knew there could be publicly accessible employee-facing applications with broader permissions than the customer-facing apps. With that in mind, I decided to shift focus and started hunting for other Subaru-related websites to test.</p>
<h3 id="finding-the-subaru-admin-panel">Finding the Subaru Admin Panel</h3>
<p>I sent my friend Shubs a message over Discord to see if he’d be interested in helping me find any potential Subaru employee applications. He said sure -- and then immediately sent me this message:</p>
<pre><code><span>shubs</span> <span>—</span> <span>11</span><span>/19/2024</span>
<span>have</span> <span>you</span> <span>seen</span> <span>this</span> <span>host</span> <span>before?</span>
<span>subarucs.com</span>
</code></pre>
<p>He noticed that ‘my.subaru.com’ (a domain that the MySubaru app was using) was a CNAME for ‘mys.prod.subarucs.com’ (a domain that I hadn’t seen before).</p>
<pre><code><span>nslookup</span> <span>my.subaru.com</span>
<span>Server:</span>         <span>127.0</span><span>.0</span><span>.53</span>
<span>Address:</span>        <span>127.0</span><span>.0</span><span>.53</span><span>#53</span>

<span>Non-authoritative answer:</span>
<span>my.subaru.com</span>   <span>canonical</span> <span>name</span> <span>=</span> <span>www.mysubaru.com.</span>
<span>www.mysubaru.com</span>        <span>canonical</span> <span>name</span> <span>=</span> <span>mys.prod.subarucs.com.</span>
<span>Name:</span>   <span>mys.prod.subarucs.com</span>
</code></pre>
<p>We ran a scan to find other subdomains and checked the output:</p>
<pre><code><span>…</span>
<span>STARLINK®</span> <span>Admin</span> <span>Portal</span> <span>-</span> <span>https://portal.prod.subarucs.com/login.html</span>
<span>…</span>
</code></pre>
<p>Well, that definitely looked like employee functionality. From a quick Google, it appeared that STARLINK was the name of Subaru’s in-vehicle infotainment system which provided all of the remote functionality for the vehicle. This appeared to be an admin panel related to it.</p>
<figure><img alt="The Subaru STARLINK admin panel." loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fn1.png&amp;w=3840&amp;q=75"><figcaption>The Subaru STARLINK admin panel.</figcaption></figure>
<h3 id="arbitrary-account-takeover-on-subaru-starlink-admin-portal">Arbitrary Account Takeover on Subaru STARLINK Admin Portal</h3>
<p>At first glance, it didn’t seem like there would be much here. It was just a login panel, and we didn’t have any credentials. I checked the source of the website hoping to see a bit more, and the following bit caught my eye:</p>
<pre><code><span>&lt;<span>script</span> <span>type</span>=<span>"text/javascript"</span> <span>src</span>=<span>"/assets/_js/starlinkEnroll.js"</span>&gt;</span><span>&lt;/<span>script</span>&gt;</span>
</code></pre>
<p>There were some interesting JavaScript files under the “/assets/_js/” folder that were loaded into the login page, so I went ahead and brute forced the directory in hopes of finding other JavaScript files.</p>
<p>After a few minutes of running <a href="https://github.com/ffuf/ffuf">FFuF</a>, we got a hit for a “login.js” file which the following very interesting code snippet:</p>
<pre><code>$(<span>'#new_password_submit'</span>).<span>on</span>(<span>'click'</span>, <span>function</span>(<span>e</span>) {
	e.<span>preventDefault</span>();
	<span>if</span>($(<span>'#forgot-password-step4-form'</span>).<span>valid</span>()) {
		<span>disableBtns</span>();
		$.<span>ajax</span>({
            <span>url</span>: <span>"/forgotPassword/resetPassword.json"</span>,
			<span>type</span>: <span>"POST"</span>,
            <span>contentType</span>: <span>"application/json"</span>,
            <span>data</span>: <span>JSON</span>.<span>stringify</span>({
                <span>email</span>: email,
                <span>password</span>: $(<span>'#new_password'</span>).<span>val</span>(),
                <span>passwordConfirmation</span>: $(<span>'#confirm_new_password'</span>).<span>val</span>()
            }),
			<span>async</span>: <span>false</span>
		}).<span>done</span>(<span>function</span> (<span>response</span>) {
</code></pre>
<p>It appeared that there was a “resetPassword.json” endpoint that would reset employee’s accounts without a confirmation token!</p>
<p>If this worked how it was written in the JavaScript, then an attacker could simply enter any valid employee email and take over their account. I sent the following POST request to confirm that the functionality was even accessible:</p>
<p><strong>HTTP Request</strong></p>
<pre><code><span>POST</span> <span>/forgotPassword/resetPassword.json</span> <span>HTTP/1.1</span>
<span>Host:</span> <span>portal.prod.subarucs.com</span>

{
  <span>"email":</span> <span>"random@random.com"</span>,
  <span>"password":</span> <span>"Example123!"</span>,
  <span>"passwordConfirmation":</span> <span>"Example123!"</span>
}
</code></pre>
<p><strong>HTTP Response</strong></p>
<pre><code><span>HTTP/1.1</span> <span>200</span>
<span>Content-type:</span> <span>application/json</span>
<span>Content-length:</span> <span>7</span>

<span>“error”</span>
</code></pre>
<p>It seemed to be working, we just needed to find an employee’s email address to test it on. Since this was a fairly large application, there were probably a bunch of different users, we just needed to find some way to enumerate them. I dug through the rest of the JS looking for an endpoint that might let us enumerate emails until I saw the following:</p>
<p><strong>HTTP Request</strong></p>
<pre><code><span>GET</span> <span>/adminProfile/getSecurityQuestion.json?email=example@example.com</span> <span>HTTP/1.1</span>
<span>Host:</span> <span>portal.prod.subarucs.com</span>
</code></pre>
<p><strong>HTTP Response</strong></p>
<pre><code><span>HTTP/1.1</span> <span>200</span>
<span>Content-type:</span> <span>application/json</span>
<span>Content-length:</span> <span>7</span>

{
  <span>"error":</span> <span>"Invalid email"</span>
}
</code></pre>
<p>The above endpoint would return the user’s security questions if their email was valid. We could use this to enumerate user accounts until we found someone that was active on this platform.</p>
<h3 id="enumerating-employee-emails">Enumerating Employee Emails</h3>
<p>Using LinkedIn, we did a quick search for “Subaru STARLINK” and found a few employees who appeared to be software engineers. After getting their names, we Googled and found that Subaru emails are in the following format:</p>
<pre><code>[<span>first_initial</span>][<span>last</span>]<span>@subaru.com</span>
</code></pre>
<p>We tossed the few emails that we’d pieced together into the “getSecurityQuestion.json” endpoint and hit send. On the fourth attempt, we got a response back!</p>
<pre><code><span>&lt;<span>label</span> <span>for</span>=<span>"securityQuestionId"</span>&gt;</span>
  <span>&lt;<span>span</span> <span>class</span>=<span>"securityQuestionText"</span>&gt;</span>What city were you born in?<span>&lt;/<span>span</span>&gt;</span>
<span>&lt;/<span>label</span>&gt;</span>
</code></pre>
<p>The <code>jdoe@subaru.com</code> (redacted) email was valid! We went back to the reset password endpoint and hit send.</p>
<p><strong>HTTP Request</strong></p>
<pre><code><span>POST</span> <span>/forgotPassword/resetPassword.json</span> <span>HTTP/1.1</span>
<span>Host:</span> <span>portal.prod.subarucs.com</span>

{
  <span>"email":</span> <span>"jdoe@subaru.com"</span>,
  <span>"password":</span> <span>"Example123!"</span>,
  <span>"passwordConfirmation":</span> <span>"Example123!"</span>
}
</code></pre>
<p><strong>HTTP Response</strong></p>
<pre><code><span>HTTP/1.1</span> <span>200</span>
<span>Date:</span> <span>Wed,</span> <span>20</span> <span>Nov</span> <span>2024 03:02:31 </span><span>GMT</span>
<span>Content-Type:</span> <span>application/json</span>
<span>Connection:</span> <span>close</span>
<span>X-Frame-Options:</span> <span>SAMEORIGIN</span>
<span>Content-Length:</span> <span>9</span>

<span>"success"</span>
</code></pre>
<p>It worked! We tried logging in.</p>
<figure><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F1.png&amp;w=3840&amp;q=75"><figcaption></figcaption></figure>
<p>We had successfully taken over an employee’s account, but there was now a 2FA prompt to actually use the website. It was custom, so we tried to see if there was anything to do to bypass it.</p>
<h3 id="bypassing-2fa">Bypassing 2FA</h3>
<p>We tried the simplest thing that we could think of: removing the client-side overlay from the UI.</p>
<p><strong>Match</strong></p>
<pre><code>$(<span>'#securityQuestionModal'</span>).<span>modal</span>(<span>'show'</span>);
</code></pre>
<p><strong>Replace</strong></p>
<pre><code><span>//$('#securityQuestionModal').modal('show');</span>
</code></pre>
<p>After removing the client-side overlay, we clicked around and the whole app seemed to function normally. All of the buttons worked, and were returning server-side data.</p>
<figure><img alt="2FA bypassed." loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fmysub.png&amp;w=3840&amp;q=75"><figcaption>2FA bypassed.</figcaption></figure>
<h3 id="tracking-my-mom-for-the-last-year">Tracking My Mom for the Last Year</h3>
<p>The left navbar had a ton of different functionality, but the juiciest sounding one was “Last Known Location”. I went ahead and typed in my mom’s last name and ZIP code. Her car popped up in the search results. I clicked it and saw everywhere my mom had traveled the last year:</p>
<table><thead><tr><th>Date</th><th>Odometer</th><th>Location</th></tr></thead><tbody><tr><td>11/21/2024 6:18:56 PM</td><td>14472.6</td><td>41.30136,-96.161142</td></tr><tr><td>11/21/2024 4:59:51 AM</td><td>14472.6</td><td>41.301402,-96.161134</td></tr><tr><td>11/21/2024 4:49:02 AM</td><td>14472.6</td><td>41.301286,-96.161145</td></tr><tr><td>…</td><td>…</td><td>…</td></tr><tr><td>11/02/2023 1:44:24 PM</td><td>6440.6</td><td>41.256003,-96.080627</td></tr><tr><td>11/01/2023 9:52:47 PM</td><td>6432.5</td><td>41.301248,-96.159951</td></tr><tr><td>11/01/2023 12:16:02 PM</td><td>6425.2</td><td>41.259397,-96.078775</td></tr></tbody></table>
<p>The “Last Known Location” endpoint was more than the last location, it gave me the exact coordinates of everywhere that she had started her engine or used a telematics command over the <strong>last year</strong>. I didn’t realize this data was being collected, but it seemed that we had agreed to the STARLINK enrollment when we purchased it.</p>
<p>To better understand the data, I exported a year’s worth of location history from my mom’s 2023 Impreza and imported it into the Google Maps iframe below. She kindly gave her permission to share it, saying that her life is "too boring" for anyone to misuse the information.</p>
<h3 id="visualizing-a-year-of-subaru-location-history">Visualizing a Year of Subaru Location History</h3>

<p><em>Map displaying 1,600 leaked coordinates from a 2023 Subaru Impreza, similar data was retrievable for any internet-connected Subaru</em></p>
<figure><img alt="Our STARLINK purchase agreement history, accessible from the admin panel." loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F3.png&amp;w=3840&amp;q=75"><figcaption>Our STARLINK purchase agreement history, accessible from the admin panel.</figcaption></figure>
<p>There were a ton of other endpoints. One of them was a vehicle search which let you query a customer’s last name and zip code, phone number, email address, or VIN number (retrievable via license plate) and grant/modify access to their vehicle.</p>
<figure><img alt="Retrieving street address, phone number, email, emergency contacts, authorized users, and billing information of any Subaru STARLINK customer." loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F4.png&amp;w=3840&amp;q=75"><figcaption>Retrieving street address, phone number, email, emergency contacts, authorized users, and billing information of any Subaru STARLINK customer.</figcaption></figure>
<figure><img alt="The STARLINK search functionality which allows you to search via zip code and last name, VIN, email address, and phone number." loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F6.png&amp;w=3840&amp;q=75"><figcaption>The STARLINK search functionality which allows you to search via zip code and last name, VIN, email address, and phone number.</figcaption></figure>
<h3 id="unlocking-a-friends-car">Unlocking a Friend’s Car</h3>
<p>After searching and finding my own vehicle in the dashboard, I confirmed that the STARLINK admin dashboard should have access to pretty much any Subaru in the United States, Canada, and Japan. We wanted to confirm that there was nothing we were missing, so we reached out to a friend and asked if we could hack her car to demonstrate that there was no pre-requisite or feature which would’ve actually prevented a full vehicle takeover.</p>
<p>She sent us her license plate, we pulled up her vehicle in the admin panel, then finally we added ourselves to her car.</p>
<figure><img alt="Adding ourselves as an authorized user to our friend's Subaru to demonstrate that we could execute commands on their vehicle." loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2F7.png&amp;w=3840&amp;q=75"><figcaption>Adding ourselves as an authorized user to our friend's Subaru to demonstrate that we could execute commands on their vehicle.</figcaption></figure>
<p>We waited a few minutes, then we saw that our account had been created successfully.</p>
<figure><img alt="" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fxzf.png&amp;w=3840&amp;q=75"><figcaption></figcaption></figure>
<p>Now that we had access, I asked if they could peek outside and see if anything was happening with their car. I sent the “unlock” command. They then sent us this video.</p>
<figure><img alt="Success!" loading="lazy" width="100" height="100" decoding="async" data-nimg="1" sizes="100vw" srcset="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=640&amp;q=75 640w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=750&amp;q=75 750w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=828&amp;q=75 828w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=1080&amp;q=75 1080w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=1200&amp;q=75 1200w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=1920&amp;q=75 1920w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=2048&amp;q=75 2048w, https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=3840&amp;q=75 3840w" src="https://samcurry.net/_next/image?url=%2Fimages%2Fhacking-subaru%2Fring.gif&amp;w=3840&amp;q=75"><figcaption>Success!</figcaption></figure>
<p>Afterwards, she confirmed that she did not receive any notification, text message, or email after we added ourselves as an authorized user and unlocked her car.</p>
<h2 id="timeline">Timeline</h2>
<ul>
<li>11/20/24 11:54 PM CST: Initial report sent to SecOps email</li>
<li>11/21/24 7:40 AM CST: Initial response from Subaru team</li>
<li>11/21/24 4:00 PM CST: Vulnerability fixed, unable to reproduce</li>
<li>01/23/24 6:00 AM CST: Blog post released</li>
</ul>
<h2 id="addendum">Addendum</h2>
<p>When writing this, I had a really hard time trying to do another blog post on car hacking. Most readers of this blog already work in security, so I really don’t think the actual password reset or 2FA bypass techniques are new to anyone. The part that I felt was worth sharing was the impact of the bug itself, and how the connected car systems actually work.</p>
<p>The auto industry is unique in that an 18-year-old employee from Texas can query the billing information of a vehicle in California, and it won’t really set off any alarm bells. It’s part of their normal day-to-day job. The employees all have access to a ton of personal information, and the whole thing relies on trust.</p>
<p>It seems really hard to really secure these systems when such broad access is built into the system by default.</p>
<h2 id="thanks">Thanks</h2>
<p>Happy (late) holidays, thanks for reading! Huge thanks to the following people for helping write and review this post:</p>
<ul>
<li>Gren (<a href="https://bsky.app/profile/grenlith.bsky.social">https://bsky.app/profile/grenlith.bsky.social</a>)</li>
<li>Ian Carroll (<a href="https://x.com/iangcarroll">https://x.com/iangcarroll</a>)</li>
<li>Justin Rhinehart (<a href="https://twitter.com/sshell">https://twitter.com/sshell</a>_)</li>
<li>Joseph Thacker (<a href="https://x.com/rez0">https://x.com/rez0</a>__)</li>
<li>Brett Buerhaus (<a href="https://x.com/bbuerhaus">https://x.com/bbuerhaus</a>)</li>
<li>Maik Robert (<a href="https://x.com/xehle">https://x.com/xehle</a>_)</li>
<li>Joel Margolis (<a href="https://x.com/0xteknogeek">https://x.com/0xteknogeek</a>)</li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Where is London's most central sheep? (146 pts)]]></title>
            <link>https://diamondgeezer.blogspot.com/2025/01/londons-most-central-sheep.html</link>
            <guid>42802498</guid>
            <pubDate>Thu, 23 Jan 2025 09:58:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://diamondgeezer.blogspot.com/2025/01/londons-most-central-sheep.html">https://diamondgeezer.blogspot.com/2025/01/londons-most-central-sheep.html</a>, See on <a href="https://news.ycombinator.com/item?id=42802498">Hacker News</a></p>
Couldn't get https://diamondgeezer.blogspot.com/2025/01/londons-most-central-sheep.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Bun 1.2 Is Released (207 pts)]]></title>
            <link>https://bun.sh/blog/bun-v1.2</link>
            <guid>42801370</guid>
            <pubDate>Thu, 23 Jan 2025 06:50:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bun.sh/blog/bun-v1.2">https://bun.sh/blog/bun-v1.2</a>, See on <a href="https://news.ycombinator.com/item?id=42801370">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><p>Bun is complete toolkit for building and testing full-stack JavaScript and TypeScript applications. If you're new to Bun, you can learn more from the <a href="https://bun.sh/blog/bun-v1.0#bun-is-an-all-in-one-toolkit">Bun 1.0</a> blog post.</p><p><iframe src="https://www.youtube.com/embed/uSzffuqfJQk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe></p><h2 level="2" anchor-id="bun-1-2" id="bun-1-2"><a name="bun-1-2"></a><a href="#bun-1-2">Bun 1.2</a></h2><p>Bun 1.2 is a huge update, and we're excited to share it with you.</p><p>Here's the tl;dr of what changed in Bun 1.2:</p><ul><li>There's a major update on Bun's progress towards <a href="#node-js-compatibility">Node.js compatibility</a></li><li>Bun now has a built-in S3 object storage API: <a href="#s3-support-with-bun-s3"><code>Bun.s3</code></a></li><li>Bun now has a built-in Postgres client: <a href="#postgres-support-with-bun-sql"><code>Bun.sql</code></a> (with MySQL coming soon)</li><li><code>bun install</code> now uses a text-based lockfile: <a href="#bun-is-a-package-manager"><code>bun.lock</code></a></li></ul><p>We also made Express <a href="#express-is-3x-faster">3x faster</a> in Bun.</p><h2 level="2" anchor-id="node-js-compatibility" id="node-js-compatibility"><a name="node-js-compatibility"></a><a href="#node-js-compatibility">Node.js compatibility</a></h2><p>Bun is designed as a drop-in replacement for Node.js.</p><p>In Bun 1.2, we started to run the Node.js test suite for every change we make to Bun. Since then, we've fixed thousands of bugs and the following Node.js modules now pass over 90% of their tests with Bun.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/83919108-1bfa-41e3-9001-fa9624f3c554"><img src="https://github.com/user-attachments/assets/83919108-1bfa-41e3-9001-fa9624f3c554" width="75%" caption="For each of these Node modules, Bun passes over 90% of the Node.js test suite."></a><figcaption>For each of these Node modules, Bun passes over 90% of the Node.js test suite.</figcaption></figure><p>Here's how we did it.</p><h3 level="3" anchor-id="how-do-you-measure-compatibility" id="how-do-you-measure-compatibility"><a name="how-do-you-measure-compatibility"></a><a href="#how-do-you-measure-compatibility">How do you measure compatibility?</a></h3><p>In Bun 1.2, we changed how we test and improve Bun's compatibility with Node.js. Previously, we prioritized and fixed Node.js bugs as they were reported, usually from GitHub issues where someone tried to use an npm package that didn't work in Bun.</p><p>While this fixed actual bugs real users ran into, it was too much of a "wack-a-mole" approach. It discouraged doing the large refactors necessary for us to have a shot at 100% Node.js compatibility.</p><p>That's when we thought: what if we just run the Node.js test suite?</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/ee1c977f-8d85-4038-9cab-8f38a1bc81d6"><img src="https://github.com/user-attachments/assets/ee1c977f-8d85-4038-9cab-8f38a1bc81d6" alt="A screenshot of the Node.js test suite" caption="There are so many tests in the Node.js repository, that the files can't all be listed on GitHub."></a><figcaption>There are so many tests in the Node.js repository, that the files can't all be listed on GitHub.</figcaption></figure><h3 level="3" anchor-id="running-node-js-tests-in-bun" id="running-node-js-tests-in-bun"><a name="running-node-js-tests-in-bun"></a><a href="#running-node-js-tests-in-bun">Running Node.js tests in Bun</a></h3><p>Node.js has thousands of test files in its repository, with most of them in the <a href="https://github.com/nodejs/node/tree/main/test/parallel"><code>test/parallel</code></a> directory. While it might seem simple enough to "just run" their tests, it's more involved than you might think.</p><h4 level="4" id="internal-apis">Internal APIs</h4><p>For example, many tests rely on the internal implementation details of Node.js. In the following test, <code>getnameinfo</code> is stubbed to always error, to test the error handling of <code>dns.lookupService()</code>.</p><div><p>test/parallel/test-dns-lookupService.js</p><div><pre><code><span><span>const</span><span> { internalBinding } </span><span>=</span><span> </span><span>require</span><span>(</span><span>"</span><span>internal/test/binding</span><span>"</span><span>);</span></span>
<span><span>const</span><span> cares </span><span>=</span><span> </span><span>internalBinding</span><span>(</span><span>"</span><span>cares_wrap</span><span>"</span><span>);</span></span>
<span><span>const</span><span> { UV_ENOENT } </span><span>=</span><span> </span><span>internalBinding</span><span>(</span><span>"</span><span>uv</span><span>"</span><span>);</span></span>
<span></span>
<span><span>cares.</span><span>getnameinfo</span><span> </span><span>=</span><span> () </span><span>=&gt;</span><span> UV_ENOENT;</span></span>
<span></span></code></pre></div></div><p>To run this test in Bun, we had to replace the internal bindings with our own stubs.</p><div><p>test/parallel/test-dns-lookupService.js</p><div><pre><code><span><span>Bun.dns.</span><span>lookupService</span><span> </span><span>=</span><span> (</span><span>addr</span><span>, </span><span>port</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>const</span><span> error </span><span>=</span><span> </span><span>new</span><span> </span><span>Error</span><span>(</span><span>`getnameinfo ENOENT </span><span>${</span><span>addr</span><span>}</span><span>`</span><span>);</span></span>
<span><span>  error.code </span><span>=</span><span> </span><span>"</span><span>ENOENT</span><span>"</span><span>;</span></span>
<span><span>  error.syscall </span><span>=</span><span> </span><span>"</span><span>getnameinfo</span><span>"</span><span>;</span></span>
<span><span>  </span><span>throw</span><span> error;</span></span>
<span><span>};</span></span>
<span></span></code></pre></div></div><h4 level="4" id="error-messages">Error messages</h4><p>There are also Node.js tests that check the <em>exact</em> string of error messages. And while Node.js usually doesn't change error messages, they don't guarantee it won't change between releases.</p><div><pre><code><span><span>const</span><span> common </span><span>=</span><span> </span><span>require</span><span>(</span><span>"</span><span>../common</span><span>"</span><span>);</span></span>
<span><span>const</span><span> assert </span><span>=</span><span> </span><span>require</span><span>(</span><span>"</span><span>assert</span><span>"</span><span>);</span></span>
<span><span>const</span><span> cp </span><span>=</span><span> </span><span>require</span><span>(</span><span>"</span><span>child_process</span><span>"</span><span>);</span></span>
<span></span>
<span><span>assert.</span><span>throws</span><span>(</span></span>
<span><span>  () </span><span>=&gt;</span><span> {</span></span>
<span><span>    cp.</span><span>spawnSync</span><span>(process.execPath, [__filename, </span><span>"</span><span>child</span><span>"</span><span>], { argv0</span><span>:</span><span> [] });</span></span>
<span><span>  },</span></span>
<span><span>  {</span></span>
<span><span>    code</span><span>:</span><span> </span><span>"</span><span>ERR_INVALID_ARG_TYPE</span><span>"</span><span>,</span></span>
<span><span>    name</span><span>:</span><span> </span><span>"</span><span>TypeError</span><span>"</span><span>,</span></span>
<span><span>    message</span><span>:</span></span>
<span><span>      </span><span>'</span><span>The "options.argv0" property must be of type string.</span><span>'</span><span> </span><span>+</span></span>
<span><span>      common.</span><span>invalidArgTypeHelper</span><span>([]),</span></span>
<span><span>  },</span></span>
<span><span>);</span></span>
<span></span></code></pre></div><p>To work around this, we had to change the assertion logic in some tests to check the <code>name</code> and <code>code</code>, instead of the <code>message</code>. This is also the standard practice for checking error types in Node.js.</p><div><pre><code><span><span>{</span></span>
<span><span>  code: </span><span>"</span><span>ERR_INVALID_ARG_TYPE</span><span>"</span><span>,</span></span>
<span><span>  name: </span><span>"</span><span>TypeError</span><span>"</span><span>,</span></span>
<span><span>   message:</span></span>
<span><span>     </span><span>'</span><span>The "options.argv0" property must be of type string.</span><span>'</span><span> </span><span>+</span></span>
<span><span>     common.</span><span>invalidArgTypeHelper</span><span>([]),</span></span>
<span><span>},</span></span></code></pre></div><p>While we do try to match the error messages of Node.js as much as possible, there are times where we want to provide a more helpful error message, as long as the <code>name</code> and <code>code</code> are the same.</p><h4 level="4" id="progress-so-far">Progress so far</h4><p>We've ported thousands of files from the Node.js test suite to Bun. That means for every commit we make to Bun, we run the Node.js test suite to ensure compatibility.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/c04ef5b9-a8d6-4be7-90a8-6f632aefbe17"><img src="https://github.com/user-attachments/assets/c04ef5b9-a8d6-4be7-90a8-6f632aefbe17" alt="A screenshot of Bun's CI where we run the Node.js test suite for every commit." caption="A screenshot of Bun's CI where we run the Node.js test suite for every commit."></a><figcaption>A screenshot of Bun's CI where we run the Node.js test suite for every commit.</figcaption></figure><p>Every day, we are adding more and more passing Node.js tests to Bun, and we're excited to share more progress on Node.js compatibility very soon.</p><p>In addition to fixing existing Node.js APIs, we've also added support for the following Node.js modules.</p><h3 level="3" anchor-id="node-http2-server" id="node-http2-server"><a name="node-http2-server"></a><a href="#node-http2-server"><code>node:http2</code> server</a></h3><p>You can now use <a href="https://nodejs.org/api/http2.html#core-api"><code>node:http2</code></a> to create HTTP/2 servers. HTTP/2 is also necessary for gRPC servers, which are also now supported in Bun. Previously, there was only support for the HTTP/2 client.</p><div><pre><code><span><span>import</span><span> { createSecureServer } </span><span>from</span><span> </span><span>"</span><span>node:http2</span><span>"</span><span>;</span></span>
<span><span>import</span><span> { readFileSync } </span><span>from</span><span> </span><span>"</span><span>node:fs</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> server </span><span>=</span><span> </span><span>createSecureServer</span><span>({</span></span>
<span><span>  key</span><span>:</span><span> </span><span>readFileSync</span><span>(</span><span>"</span><span>key.pem</span><span>"</span><span>),</span></span>
<span><span>  cert</span><span>:</span><span> </span><span>readFileSync</span><span>(</span><span>"</span><span>cert.pem</span><span>"</span><span>),</span></span>
<span><span>});</span></span>
<span></span>
<span><span>server.</span><span>on</span><span>(</span><span>"</span><span>stream</span><span>"</span><span>, (</span><span>stream</span><span>, </span><span>headers</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  stream.</span><span>respond</span><span>({</span></span>
<span><span>    </span><span>"</span><span>:status</span><span>"</span><span>:</span><span> </span><span>200</span><span>,</span></span>
<span><span>    </span><span>"</span><span>content-type</span><span>"</span><span>:</span><span> </span><span>"</span><span>text/html; charset=utf-8</span><span>"</span><span>,</span></span>
<span><span>  });</span></span>
<span><span>  stream.</span><span>end</span><span>(</span><span>"</span><span>&lt;h1&gt;Hello from Bun!&lt;/h1&gt;</span><span>"</span><span>);</span></span>
<span><span>});</span></span>
<span></span>
<span><span>server.</span><span>listen</span><span>(</span><span>3000</span><span>);</span></span>
<span></span></code></pre></div><p>In Bun 1.2, the HTTP/2 server is <a href="https://twitter.com/bunjavascript/status/1847014951661326396">2x faster</a> than in Node.js. When we support new APIs to Bun, we spend a lot of time tuning performance to ensure that it not only works, but it's also faster.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/30ebbbc3-13e1-4fb5-a3a8-a0e7374ca094"><img src="https://github.com/user-attachments/assets/30ebbbc3-13e1-4fb5-a3a8-a0e7374ca094" caption="Benchmark of a &quot;hello world&quot; node:http2 server running in Bun 1.2 and Node.js 22.13."></a><figcaption>Benchmark of a "hello world" node:http2 server running in Bun 1.2 and Node.js 22.13.</figcaption></figure><h3 level="3" anchor-id="node-dgram" id="node-dgram"><a name="node-dgram"></a><a href="#node-dgram"><code>node:dgram</code></a></h3><p>You can now bind and connect to UDP sockets using <a href="https://nodejs.org/api/dgram.html#udpdatagram-sockets"><code>node:dgram</code></a>. UDP is a low-level unreliable messaging protocol, often used by telemetry providers and game engines.</p><div><pre><code><span><span>import</span><span> { createSocket } </span><span>from</span><span> </span><span>"</span><span>node:dgram</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> server </span><span>=</span><span> </span><span>createSocket</span><span>(</span><span>"</span><span>udp4</span><span>"</span><span>);</span></span>
<span><span>const</span><span> client </span><span>=</span><span> </span><span>createSocket</span><span>(</span><span>"</span><span>udp4</span><span>"</span><span>);</span></span>
<span></span>
<span><span>server.</span><span>on</span><span>(</span><span>"</span><span>listening</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>const</span><span> { port, address } </span><span>=</span><span> server.</span><span>address</span><span>();</span></span>
<span><span>  </span><span>for</span><span> (</span><span>let</span><span> i </span><span>=</span><span> </span><span>0</span><span>; i </span><span>&lt;</span><span> </span><span>10</span><span>; i</span><span>++</span><span>) {</span></span>
<span><span>    client.</span><span>send</span><span>(</span><span>`data </span><span>${</span><span>i</span><span>}</span><span>`</span><span>, port, address);</span></span>
<span><span>  }</span></span>
<span><span>  server.</span><span>unref</span><span>();</span></span>
<span><span>});</span></span>
<span></span>
<span><span>server.</span><span>on</span><span>(</span><span>"</span><span>message</span><span>"</span><span>, (</span><span>data</span><span>, { </span><span>address</span><span>, </span><span>port</span><span> }) </span><span>=&gt;</span><span> {</span></span>
<span><span>  console.</span><span>log</span><span>(</span><span>`Received: data=</span><span>${</span><span>data</span><span>}</span><span> source=</span><span>${</span><span>address</span><span>}</span><span>:</span><span>${</span><span>port</span><span>}</span><span>`</span><span>);</span></span>
<span><span>  client.</span><span>unref</span><span>();</span></span>
<span><span>});</span></span>
<span></span>
<span><span>server.</span><span>bind</span><span>();</span></span>
<span></span></code></pre></div><p>This allows packages like DataDog's <a href="https://github.com/DataDog/dd-trace-js"><code>dd-trace</code></a> and <a href="https://github.com/ClickHouse/clickhouse-js"><code>@clickhouse/client</code></a> to work in Bun 1.2.</p><h3 level="3" anchor-id="node-cluster" id="node-cluster"><a name="node-cluster"></a><a href="#node-cluster"><code>node:cluster</code></a></h3><p>You can use <a href="https://nodejs.org/api/cluster.html#cluster"><code>node:cluster</code></a> to spawn multiple instances of Bun. This is often used to enable higher throughput by running tasks across multiple CPU cores.</p><p>Here's an example of how you can create a multi-threaded HTTP server using <code>cluster</code>:</p><ul><li>The primary worker spawns <code>n</code> child workers (usually equal to the number of CPU cores)</li><li>Each child worker listens on the same port (using <a href="https://lwn.net/Articles/542629/"><code>reusePort</code></a>)</li><li>Incoming HTTP requests are load balanced across the child workers</li></ul><div><pre><code><span><span>import</span><span> cluster </span><span>from</span><span> </span><span>"</span><span>node:cluster</span><span>"</span><span>;</span></span>
<span><span>import</span><span> { createServer } </span><span>from</span><span> </span><span>"</span><span>node:http</span><span>"</span><span>;</span></span>
<span><span>import</span><span> { cpus } </span><span>from</span><span> </span><span>"</span><span>node:os</span><span>"</span><span>;</span></span>
<span></span>
<span><span>if</span><span> (cluster.isPrimary) {</span></span>
<span><span>  console.</span><span>log</span><span>(</span><span>`Primary </span><span>${</span><span>process.pid</span><span>}</span><span> is running`</span><span>);</span></span>
<span></span>
<span><span>  </span><span>// Start N workers for the number of CPUs</span></span>
<span><span>  </span><span>for</span><span> (</span><span>let</span><span> i </span><span>=</span><span> </span><span>0</span><span>; i </span><span>&lt;</span><span> </span><span>cpus</span><span>().length; i</span><span>++</span><span>) {</span></span>
<span><span>    cluster.</span><span>fork</span><span>();</span></span>
<span><span>  }</span></span>
<span></span>
<span><span>  cluster.</span><span>on</span><span>(</span><span>"</span><span>exit</span><span>"</span><span>, (</span><span>worker</span><span>, </span><span>code</span><span>, </span><span>signal</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    console.</span><span>log</span><span>(</span><span>`Worker </span><span>${</span><span>worker.process.pid</span><span>}</span><span> exited`</span><span>);</span></span>
<span><span>  });</span></span>
<span><span>} </span><span>else</span><span> {</span></span>
<span><span>  </span><span>// Incoming requests are handled by the pool of workers</span></span>
<span><span>  </span><span>// instead of the primary worker.</span></span>
<span><span>  </span><span>createServer</span><span>((</span><span>req</span><span>, </span><span>res</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>    res.</span><span>writeHead</span><span>(</span><span>200</span><span>);</span></span>
<span><span>    res.</span><span>end</span><span>(</span><span>`Hello from worker </span><span>${</span><span>process.pid</span><span>}</span><span>`</span><span>);</span></span>
<span><span>  }).</span><span>listen</span><span>(</span><span>3000</span><span>);</span></span>
<span></span>
<span><span>  console.</span><span>log</span><span>(</span><span>`Worker </span><span>${</span><span>process.pid</span><span>}</span><span> started`</span><span>);</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><p>Note that <code>reusePort</code> is only effective on Linux. On Windows and macOS, the operating system does not load balance HTTP connections as one would expect.</p><h3 level="3" anchor-id="node-zlib" id="node-zlib"><a name="node-zlib"></a><a href="#node-zlib"><code>node:zlib</code></a></h3><p>In Bun 1.2, we rewrote the entire <a href="https://nodejs.org/api/zlib.html#zlib"><code>node:zlib</code></a> module from JavaScript to native code. This not only fixed a bunch of bugs, but it made it <a href="https://x.com/bunjavascript/status/1832370723895247277">2x faster</a> than Bun 1.1.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/cc3760d5-352c-4f7a-a75b-2f48fec52dfa"><img src="https://github.com/user-attachments/assets/cc3760d5-352c-4f7a-a75b-2f48fec52dfa" caption="Benchmark of inflateSync using node:zlib in Bun and Node.js."></a><figcaption>Benchmark of inflateSync using node:zlib in Bun and Node.js.</figcaption></figure><p>We also added support for <a href="https://github.com/google/brotli">Brotli</a> in <code>node:zlib</code>, which was missing in Bun 1.1.</p><div><pre><code><span><span>import</span><span> { brotliCompressSync, brotliDecompressSync } </span><span>from</span><span> </span><span>"</span><span>node:zlib</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> compressed </span><span>=</span><span> </span><span>brotliCompressSync</span><span>(</span><span>"</span><span>Hello, world!</span><span>"</span><span>);</span></span>
<span><span>compressed.</span><span>toString</span><span>(</span><span>"</span><span>hex</span><span>"</span><span>); </span><span>// "0b068048656c6c6f2c20776f726c642103"</span></span>
<span></span>
<span><span>const</span><span> decompressed </span><span>=</span><span> </span><span>brotliDecompressSync</span><span>(compressed);</span></span>
<span><span>decompressed.</span><span>toString</span><span>(</span><span>"</span><span>utf8</span><span>"</span><span>); </span><span>// "Hello, world!"</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="c-addons-using-v8-apis" id="c-addons-using-v8-apis"><a name="c-addons-using-v8-apis"></a><a href="#c-addons-using-v8-apis">C++ addons using V8 APIs</a></h3><p>If you want to use <a href="https://nodejs.org/api/addons.html#c-addons">C++ addons</a> alongside your JavaScript code, the easiest way is to use <a href="https://bun.sh/docs/api/node-api">N-API</a>.</p><p>However, before N-API existed, some packages used the internal V8 C++ APIs in Node.js. What makes this complicated is that Node.js and Bun use different JavaScript engines: Node.js uses <a href="https://v8.dev/">V8</a> (used by Chrome), and Bun uses <a href="https://docs.webkit.org/Deep%20Dive/JSC/JavaScriptCore.html">JavaScriptCore</a> (used by Safari).</p><p>Previously, npm packages like <a href="https://www.npmjs.com/package/cpu-features"><code>cpu-features</code></a>, which rely on these V8 APIs, would not work in Bun.</p><div><pre><code><span><span>require</span><span>(</span><span>"</span><span>cpu-features</span><span>"</span><span>)();</span></span>
<span></span></code></pre></div><div><pre><code><span><span>dyld[94465]: missing symbol called</span></span>
<span><span>fish: Job 1, </span><span>'</span><span>bun index.ts</span><span>'</span><span> terminated by signal SIGABRT (Abort)</span></span>
<span></span></code></pre></div><p>To fix this, we undertook the unprecedented engineering effort of implementing V8's public C++ API in JavaScriptCore, so these packages can "just work" in Bun. It's so complicated and nerdy to explain, we wrote a <a href="https://bun.sh/blog/how-bun-supports-v8-apis-without-using-v8-part-1">3-part blog</a> series on how we supported the V8 APIs... without using V8.</p><p>In Bun 1.2, packages like <code>cpu-features</code> can be imported and just work.</p><div><pre><code><span><span>$ bun index.ts</span></span>
<span><span>{</span></span>
<span><span>  arch: </span><span>"</span><span>aarch64</span><span>"</span><span>,</span></span>
<span><span>  flags: {</span></span>
<span><span>    fp: </span><span>true</span><span>,</span></span>
<span><span>    asimd: </span><span>true</span><span>,</span></span>
<span><span>    </span><span>// ...</span></span>
<span><span>  },</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><p>The V8 C++ APIs are <em>very</em> complicated to support, so most packages will still have missing features. We're continuing to improve support, so packages like <code>node-canvas@v2</code> and <code>node-sqlite3</code> can work in the future.</p><h3 level="3" anchor-id="node-v8" id="node-v8"><a name="node-v8"></a><a href="#node-v8"><code>node:v8</code></a></h3><p>In addition to the V8 C++ APIs, we've also added support for heap snapshots using <a href="https://nodejs.org/api/v8.html"><code>node:v8</code></a>.</p><div><pre><code><span><span>import</span><span> { writeHeapSnapshot } </span><span>from</span><span> </span><span>"</span><span>node:v8</span><span>"</span><span>;</span></span>
<span></span>
<span><span>// Writes a heap snapshot to the current working directory in the form:</span></span>
<span><span>// `Heap-{date}-{pid}.heapsnapshot`</span></span>
<span><span>writeHeapSnapshot</span><span>();</span></span>
<span></span></code></pre></div><p>In Bun 1.2, you can use <a href="https://nodejs.org/api/v8.html#v8getheapsnapshot"><code>getHeapSnapshot</code></a> and <a href="https://nodejs.org/api/v8.html#v8writeheapsnapshot"><code>writeHeapSnapshot</code></a> to read and write V8 heap snapshots. This allows you to use Chrome DevTools to inspect the heap of Bun.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/d953c24c-b124-4baf-95e1-60482cb2d8e0"><img src="https://github.com/user-attachments/assets/d953c24c-b124-4baf-95e1-60482cb2d8e0" caption="You can view a heap snapshot of Bun using Chrome DevTools."></a><figcaption>You can view a heap snapshot of Bun using Chrome DevTools.</figcaption></figure><h3 level="3" anchor-id="express-is-3x-faster" id="express-is-3x-faster"><a name="express-is-3x-faster"></a><a href="#express-is-3x-faster">Express is 3x faster</a></h3><p>While compatibility is important for fixing bugs, it also helps us fix performance issues in Bun.</p><p>In Bun 1.2, the popular <code>express</code> framework can serve HTTP requests up to <a href="https://x.com/bunjavascript/status/1820610675296940227">3x faster</a> than in Node.js. This was made possible by improving compatibility with <code>node:http</code>, and optimizing Bun's HTTP server.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/2c47977c-f099-4c5f-ae24-e4a259e0b240"><img src="https://github.com/user-attachments/assets/2c47977c-f099-4c5f-ae24-e4a259e0b240"></a></figure><h2 level="2" anchor-id="s3-support-with-bun-s3" id="s3-support-with-bun-s3"><a name="s3-support-with-bun-s3"></a><a href="#s3-support-with-bun-s3">S3 support with <code>Bun.s3</code></a></h2><p>Bun aims to be a cloud-first JavaScript runtime. That means supporting all the tools and services you need to run a production application in the cloud.</p><p>Modern applications store files in object storage, instead of the local POSIX file system. When end-users upload a file attachment to a website, it's not being stored on the server's local disk, it's being stored in a S3 bucket. Decoupling storage from compute prevents an entire class of reliability issues: low disk space, high p95 response times from busy I/O, and security issues with shared file storage.</p><p>S3 is the <a href="https://en.wikipedia.org/wiki/De_facto_standard">defacto-standard</a> for object storage in the cloud. The <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_Operations_Amazon_Simple_Storage_Service.html">S3 APIs</a> are implemented by a variety of cloud services, including Amazon S3, Google Cloud Storage, Cloudflare R2, and dozens more.</p><p>That's why Bun 1.2 adds built-in support for S3. You can read, write, and delete files from an S3 bucket using APIs that are compatible with Web standards like <code>Blob</code>.</p><h3 level="3" anchor-id="reading-files-from-s3" id="reading-files-from-s3"><a name="reading-files-from-s3"></a><a href="#reading-files-from-s3">Reading files from S3</a></h3><p>You can use the new <a href="https://bun.sh/docs/api/s3#bun-s3client-bun-s3"><code>Bun.s3</code></a> API to access the default <a href="https://bun.sh/docs/api/s3#bun-s3client-bun-s3"><code>S3Client</code></a>. The client provides a <code>file()</code> method that returns a lazy-reference to an S3 file, which is the same API as Bun's <a href="https://bun.sh/docs/api/file-io#reading-files-bun-file"><code>File</code></a>.</p><div><pre><code><span><span>import</span><span> { s3 } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> file </span><span>=</span><span> s3.</span><span>file</span><span>(</span><span>"</span><span>folder/my-file.txt</span><span>"</span><span>);</span></span>
<span><span>// file instanceof Blob</span></span>
<span></span>
<span><span>const</span><span> content </span><span>=</span><span> </span><span>await</span><span> file.</span><span>text</span><span>();</span></span>
<span><span>// or:</span></span>
<span><span>//   file.json()</span></span>
<span><span>//   file.arrayBuffer()</span></span>
<span><span>//   file.stream()</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="5x-faster-than-node-js" id="5x-faster-than-node-js"><a name="5x-faster-than-node-js"></a><a href="#5x-faster-than-node-js">5x faster than Node.js</a></h3><p>Bun's S3 client is written in native code, instead of JavaScript. When you compare it to using packages like <code>@aws-sdk/client-s3</code> with Node.js, it's 5x faster at downloading files from a S3 bucket.</p><figure><a target="_blank" href="https://bun.sh/bun-s3-node.gif"><img src="https://bun.sh/bun-s3-node.gif" caption="Left: Bun 1.2 with Bun.s3. Right: Node.js with @aws-sdk/client-s3."></a><figcaption>Left: Bun 1.2 with Bun.s3. Right: Node.js with @aws-sdk/client-s3.</figcaption></figure><h3 level="3" anchor-id="writing-files-to-s3" id="writing-files-to-s3"><a name="writing-files-to-s3"></a><a href="#writing-files-to-s3">Writing files to S3</a></h3><p>You can use the <a href="https://bun.sh/docs/api/s3#writing-uploading-files-to-s3"><code>write()</code></a> method to upload a file to S3. It's that simple:</p><div><pre><code><span><span>import</span><span> { s3 } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> file </span><span>=</span><span> s3.</span><span>file</span><span>(</span><span>"</span><span>folder/my-file.txt</span><span>"</span><span>);</span></span>
<span></span>
<span><span>await</span><span> file.</span><span>write</span><span>(</span><span>"</span><span>hello s3!</span><span>"</span><span>);</span></span>
<span><span>// or:</span></span>
<span><span>//   file.write(new Uint8Array([1, 2, 3]));</span></span>
<span><span>//   file.write(new Blob(["hello s3!"]));</span></span>
<span><span>//   file.write(new Response("hello s3!"));</span></span>
<span></span></code></pre></div><p>For larger files, you can use the <a href="https://bun.sh/docs/api/s3#writing-uploading-files-to-s3"><code>writer()</code></a> method to obtain a file writer that does a <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/mpuoverview.html">multi-part upload</a>, so you don't have to worry about the details.</p><div><pre><code><span><span>import</span><span> { s3 } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> file </span><span>=</span><span> s3.</span><span>file</span><span>(</span><span>"</span><span>folder/my-file.txt</span><span>"</span><span>);</span></span>
<span><span>const</span><span> writer </span><span>=</span><span> file.</span><span>writer</span><span>();</span></span>
<span></span>
<span><span>for</span><span> (</span><span>let</span><span> i </span><span>=</span><span> </span><span>0</span><span>; i </span><span>&lt;</span><span> </span><span>1000</span><span>; i</span><span>++</span><span>) {</span></span>
<span><span>  writer.</span><span>write</span><span>(</span><span>String</span><span>(i).</span><span>repeat</span><span>(</span><span>1024</span><span>));</span></span>
<span><span>}</span></span>
<span></span>
<span><span>await</span><span> writer.</span><span>end</span><span>();</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="presigned-urls" id="presigned-urls"><a name="presigned-urls"></a><a href="#presigned-urls">Presigned URLs</a></h3><p>When your production service needs to let users upload files to your server, it's often more reliable for the user to upload directly to S3 instead of your server acting as an intermediary.</p><p>To make this work, you use the <a href="https://bun.sh/docs/api/s3#presigning-urls"><code>presign()</code></a> method to generate a <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-presigned-url.html">presigned URL</a> for a file. This generates a URL with a signature that allows a user to securely upload that specific file to S3, without exposing your credentials or granting them unnecessary access to your bucket.</p><div><pre><code><span><span>import</span><span> { s3 } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> url </span><span>=</span><span> s3.</span><span>presign</span><span>(</span><span>"</span><span>folder/my-file.txt</span><span>"</span><span>, {</span></span>
<span><span>  expiresIn</span><span>:</span><span> </span><span>3600</span><span>, </span><span>// 1 hour</span></span>
<span><span>  acl</span><span>:</span><span> </span><span>"</span><span>public-read</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="using-bun-serve" id="using-bun-serve"><a name="using-bun-serve"></a><a href="#using-bun-serve">Using <code>Bun.serve()</code></a></h3><p>Since Bun's S3 APIs extend the <code>File</code> API, you can use <a href="https://bun.sh/docs/api/bun#bun-serve"><code>Bun.serve()</code></a> to serve S3 files over HTTP.</p><div><pre><code><span><span>import</span><span> { serve, s3 } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>serve</span><span>({</span></span>
<span><span>  port</span><span>:</span><span> </span><span>3000</span><span>,</span></span>
<span><span>  </span><span>async</span><span> </span><span>fetch</span><span>(</span><span>request</span><span>) {</span></span>
<span><span>    </span><span>const</span><span> { url } </span><span>=</span><span> request;</span></span>
<span><span>    </span><span>const</span><span> { pathname } </span><span>=</span><span> </span><span>new</span><span> </span><span>URL</span><span>(url);</span></span>
<span><span>    </span><span>// ...</span></span>
<span><span>    </span><span>if</span><span> (pathname </span><span>===</span><span> </span><span>"</span><span>/favicon.ico</span><span>"</span><span>) {</span></span>
<span><span>      </span><span>const</span><span> file </span><span>=</span><span> s3.</span><span>file</span><span>(</span><span>"</span><span>assets/favicon.ico</span><span>"</span><span>);</span></span>
<span><span>      </span><span>return</span><span> </span><span>new</span><span> </span><span>Response</span><span>(file);</span></span>
<span><span>    }</span></span>
<span><span>    </span><span>// ...</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><p>When you use <code>new Response(s3.file(...))</code>, instead of downloading the S3 file to your server and sending it back to the user, Bun redirects the user to the presigned URL for the S3 file.</p><div><pre><code><span><span>Response</span><span> (</span><span>0</span><span> KB) {</span></span>
<span><span>  status: </span><span>302</span><span>,</span></span>
<span><span>  headers: Headers {</span></span>
<span><span>    </span><span>"</span><span>location</span><span>"</span><span>: </span><span>"</span><span>https://s3.amazonaws.com/my-bucket/assets/favicon.ico?...</span><span>"</span><span>,</span></span>
<span><span>  },</span></span>
<span><span>  redirected: </span><span>true</span><span>,</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><p>This saves you memory, time, and the bandwidth cost of downloading the file to your server.</p><h3 level="3" anchor-id="using-bun-file" id="using-bun-file"><a name="using-bun-file"></a><a href="#using-bun-file">Using <code>Bun.file()</code></a></h3><p>If you want to access S3 files using the same code as the local file-system, you can reference them using the <code>s3://</code> URL protocol. It's the same concept as using <code>file://</code> to reference local files.</p><div><pre><code><span><span>import</span><span> { file } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>async</span><span> </span><span>function</span><span> </span><span>createFile</span><span>(</span><span>url</span><span>, </span><span>content</span><span>) {</span></span>
<span><span>  </span><span>const</span><span> fileObject </span><span>=</span><span> </span><span>file</span><span>(url);</span></span>
<span><span>  </span><span>if</span><span> (</span><span>await</span><span> fileObject.</span><span>exists</span><span>()) {</span></span>
<span><span>    </span><span>return</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>  </span><span>await</span><span> fileObject.</span><span>write</span><span>(content);</span></span>
<span><span>}</span></span>
<span></span>
<span><span>await</span><span> </span><span>createFile</span><span>(</span><span>"</span><span>s3://folder/my-file.txt</span><span>"</span><span>, </span><span>"</span><span>hello s3!</span><span>"</span><span>);</span></span>
<span><span>await</span><span> </span><span>createFile</span><span>(</span><span>"</span><span>file://folder/my-file.txt</span><span>"</span><span>, </span><span>"</span><span>hello posix!</span><span>"</span><span>);</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="using-fetch" id="using-fetch"><a name="using-fetch"></a><a href="#using-fetch">Using <code>fetch()</code></a></h3><p>You can even use <code>fetch()</code> to read, write, and delete files from S3.</p><div><pre><code><span><span>// Upload to S3</span></span>
<span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>s3://folder/my-file.txt</span><span>"</span><span>, {</span></span>
<span><span>  method</span><span>:</span><span> </span><span>"</span><span>PUT</span><span>"</span><span>,</span></span>
<span><span>  body</span><span>:</span><span> </span><span>"</span><span>hello s3!</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span>
<span><span>// Download from S3</span></span>
<span><span>const</span><span> response </span><span>=</span><span> </span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>s3://folder/my-file.txt</span><span>"</span><span>);</span></span>
<span><span>const</span><span> content </span><span>=</span><span> </span><span>await</span><span> response.</span><span>text</span><span>(); </span><span>// "hello s3!"</span></span>
<span></span>
<span><span>// Delete from S3</span></span>
<span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>s3://folder/my-file.txt</span><span>"</span><span>, {</span></span>
<span><span>  method</span><span>:</span><span> </span><span>"</span><span>DELETE</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="using-s3client" id="using-s3client"><a name="using-s3client"></a><a href="#using-s3client">Using <code>S3Client</code></a></h3><p>When you import <code>Bun.s3</code>, it returns a default client that is configured using <a href="https://bun.sh/docs/api/s3#credentials">well-known</a> environment variables, such as <code>AWS_ACCESS_KEY_ID</code> and <code>AWS_SECRET_ACCESS_KEY</code>.</p><div><pre><code><span><span>import</span><span> { s3, S3Client } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span><span>// s3 instanceof S3Client</span></span>
<span></span></code></pre></div><p>You can also create your own <a href="https://bun.sh/docs/api/s3#s3client-objects"><code>S3Client</code></a>, then set it as the default.</p><div><pre><code><span><span>import</span><span> { S3Client } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> client </span><span>=</span><span> </span><span>new</span><span> </span><span>S3Client</span><span>({</span></span>
<span><span>  accessKeyId</span><span>:</span><span> </span><span>"</span><span>my-access-key-id</span><span>"</span><span>,</span></span>
<span><span>  secretAccessKey</span><span>:</span><span> </span><span>"</span><span>my-secret-access-key</span><span>"</span><span>,</span></span>
<span><span>  region</span><span>:</span><span> </span><span>"</span><span>auto</span><span>"</span><span>,</span></span>
<span><span>  endpoint</span><span>:</span><span> </span><span>"</span><span>https://&lt;account-id&gt;.r2.cloudflarestorage.com</span><span>"</span><span>,</span></span>
<span><span>  bucket</span><span>:</span><span> </span><span>"</span><span>my-bucket</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span>
<span><span>// Sets the default client to be your custom client</span></span>
<span><span>Bun.s3 </span><span>=</span><span> client;</span></span>
<span></span></code></pre></div><h2 level="2" anchor-id="postgres-support-with-bun-sql" id="postgres-support-with-bun-sql"><a name="postgres-support-with-bun-sql"></a><a href="#postgres-support-with-bun-sql">Postgres support with <code>Bun.sql</code></a></h2><p>Just like object storage, another datastore that production applications often need is a SQL database.</p><p>Since the beginning, Bun has had a built-in <a href="https://bun.sh/docs/api/sqlite">SQ<em>Lite</em></a> client. SQLite is great for smaller applications and quick scripts, where you don't want to worry about the hastle of setting up a production database.</p><p>In Bun 1.2, we're expanding Bun's support for SQL databases by introducing <a href="https://bun.sh/docs/api/sql"><code>Bun.sql</code></a>, a built-in SQL client with Postgres support. We also have a <a href="https://github.com/oven-sh/bun/pull/15274">pull request</a> to add MySQL support very soon.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/ecb31227-e5e7-43a6-aff8-47452cf81578"><img src="https://github.com/user-attachments/assets/ecb31227-e5e7-43a6-aff8-47452cf81578" alt="" width="75%"></a></figure><h3 level="3" anchor-id="using-bun-sql" id="using-bun-sql"><a name="using-bun-sql"></a><a href="#using-bun-sql">Using <code>Bun.sql</code></a></h3><p>You can use <a href="https://bun.sh/docs/api/sql"><code>Bun.sql</code></a> to run SQL queries using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">tagged-template literals</a>. This allows you to pass JavaScript values as parameters to your SQL queries.</p><p>Most importantly, it escapes strings and uses prepared statements for you to prevent SQL injection.</p><div><pre><code><span><span>import</span><span> { sql } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> users </span><span>=</span><span> [</span></span>
<span><span>  { name</span><span>:</span><span> </span><span>"</span><span>Alice</span><span>"</span><span>, age</span><span>:</span><span> </span><span>25</span><span> },</span></span>
<span><span>  { name</span><span>:</span><span> </span><span>"</span><span>Bob</span><span>"</span><span>, age</span><span>:</span><span> </span><span>65</span><span> },</span></span>
<span><span>];</span></span>
<span></span>
<span><span>await</span><span> </span><span>sql</span><span>`</span></span>
<span><span>  INSERT INTO users (name, age)</span></span>
<span><span>  VALUES </span><span>${</span><span>sql</span><span>(users)</span><span>}</span></span>
<span><span>`</span><span>;</span></span>
<span></span></code></pre></div><p>Reading rows is just as easy. Results are returned as an array of objects, with the column name as the key.</p><div><pre><code><span><span>import</span><span> { sql } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> seniorAge </span><span>=</span><span> </span><span>65</span><span>;</span></span>
<span><span>const</span><span> seniorUsers </span><span>=</span><span> </span><span>await</span><span> </span><span>sql</span><span>`</span></span>
<span><span>  SELECT name, age FROM users</span></span>
<span><span>  WHERE age &gt;= </span><span>${</span><span>seniorAge</span><span>}</span></span>
<span><span>`</span><span>;</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(seniorUsers); </span><span>// [{ name: "Bob", age: 65 }]</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="50-faster-than-other-clients" id="50-faster-than-other-clients"><a name="50-faster-than-other-clients"></a><a href="#50-faster-than-other-clients">50% faster than other clients</a></h3><p><code>Bun.sql</code> is written in native code with optimizations like:</p><ul><li>Automatic prepared statements</li><li>Query pipelining</li><li>Binary wire protocol support</li><li>Connection pooling</li><li>Structure caching</li></ul><p>Optimizations stack like buffs in World of Warcraft.</p><p>The result is that <code>Bun.sql</code> is up to 50% faster at reading rows than using the most popular Postgres clients with Node.js.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/09066ce9-aacd-439c-ab28-f2640c0ce814"><img src="https://github.com/user-attachments/assets/09066ce9-aacd-439c-ab28-f2640c0ce814" alt="" width="75%"></a></figure><h3 level="3" anchor-id="migrate-from-postgres-js-to-bun-sql" id="migrate-from-postgres-js-to-bun-sql"><a name="migrate-from-postgres-js-to-bun-sql"></a><a href="#migrate-from-postgres-js-to-bun-sql">Migrate from <code>postgres.js</code> to <code>Bun.sql</code></a></h3><p>The <code>Bun.sql</code> APIs are inspired by the popular <a href="https://github.com/porsager/postgres"><code>postgres.js</code></a> package. This makes it easy to migrate your existing code to using Bun's built-in SQL client.</p><div><pre><code><span><span>  </span><span>import</span><span> { postgres } </span><span>from</span><span> </span><span>"</span><span>postgres</span><span>"</span><span>;</span></span>
<span><span>  </span><span>import</span><span> { postgres } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> sql </span><span>=</span><span> </span><span>postgres</span><span>({</span></span>
<span><span>  host</span><span>:</span><span> </span><span>"</span><span>localhost</span><span>"</span><span>,</span></span>
<span><span>  port</span><span>:</span><span> </span><span>5432</span><span>,</span></span>
<span><span>  database</span><span>:</span><span> </span><span>"</span><span>mydb</span><span>"</span><span>,</span></span>
<span><span>  user</span><span>:</span><span> </span><span>"</span><span>...</span><span>"</span><span>,</span></span>
<span><span>  password</span><span>:</span><span> </span><span>"</span><span>...</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span>
<span><span>const</span><span> users </span><span>=</span><span> </span><span>await</span><span> </span><span>sql</span><span>`SELECT name, age FROM users LIMIT 1`</span><span>;</span></span>
<span><span>console.</span><span>log</span><span>(users); </span><span>// [{ name: "Alice", age: 25 }]</span></span></code></pre></div><h2 level="2" anchor-id="bun-is-a-package-manager" id="bun-is-a-package-manager"><a name="bun-is-a-package-manager"></a><a href="#bun-is-a-package-manager">Bun is a package manager</a></h2><p>Bun is a npm-compatible package manager that makes it easy to install and update your node modules. You can use <a href="https://bun.sh/docs/cli/install"><code>bun install</code></a> to install dependencies, even if you're using Node.js as a runtime.</p><h3 level="3" anchor-id="replace-npm-install-with-bun-install" id="replace-npm-install-with-bun-install"><a name="replace-npm-install-with-bun-install"></a><a href="#replace-npm-install-with-bun-install">Replace <code>npm install</code> with <code>bun install</code></a></h3><div><pre><code><span><span>$ npm install</span></span>
<span><span>$ bun install</span></span></code></pre></div><p>In Bun 1.2, we've made the biggest change yet to the package manager.</p><h3 level="3" anchor-id="problems-with-bun-lockb" id="problems-with-bun-lockb"><a name="problems-with-bun-lockb"></a><a href="#problems-with-bun-lockb">Problems with <code>bun.lockb</code></a></h3><p>Since the beginning, Bun has used a binary lockfile: <code>bun.lockb</code>.</p><p>Unlike other package managers that use text-based lockfiles, like JSON or YAML, a binary lockfile allowed us to make <code>bun install</code> almost 30x faster than <code>npm</code>.</p><p>However, we found that there were a lot of paper cuts when using a binary lockfile. First, you couldn't view the contents of the lockfile on GitHub and other platforms. This sucked.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/c6c937c1-9074-427e-a1d2-82c7c871538e"><img src="https://github.com/user-attachments/assets/c6c937c1-9074-427e-a1d2-82c7c871538e" alt=""></a></figure><p>What happens if you receive a pull request from an external contributor that changes the <code>bun.lockb</code> file? Do you trust it? Probably not.</p><p>That's also assuming there isn't a merge conflict! Which for a binary lockfile, is almost impossible to resolve, aside from manually deleting the lockfiles and running <code>bun install</code> again.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/e97db642-1499-40c5-b17f-3a932157d0f2"><img src="https://github.com/user-attachments/assets/e97db642-1499-40c5-b17f-3a932157d0f2" alt=""></a></figure><p>This also made it hard for tools to read the lockfile. For example, dependency management tools like <a href="https://github.com/dependabot/dependabot-core">Dependabot</a> would need an API to parse the lockfile, and we didn't offer one.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/65ed123a-8e56-4550-ae0b-9967520e805e"><img src="https://github.com/user-attachments/assets/65ed123a-8e56-4550-ae0b-9967520e805e" alt=""></a></figure><p>Bun will continue to support <code>bun.lockb</code> for a <em>long</em> time. However, for all these reasons, we've decided to switch to a text-based lockfile as the default in Bun 1.2.</p><h3 level="3" anchor-id="introducing-bun-lock" id="introducing-bun-lock"><a name="introducing-bun-lock"></a><a href="#introducing-bun-lock">Introducing <code>bun.lock</code></a></h3><p>In Bun 1.2, we're introducing a new, text-based lockfile: <a href="https://bun.sh/docs/install/lockfile"><code>bun.lock</code></a>.</p><p>You can migrate to the new lockfile by using the <code>--save-text-lockfile</code> flag.</p><div><pre><code><span><span>bun install --save-text-lockfile</span></span></code></pre></div><p><code>bun.lock</code> is a JSONC file, which is JSON with added support for comments and trailing commas.</p><div><p>bun.lock</p><div><pre><code><span><span>// bun.lock</span></span>
<span><span>{</span></span>
<span><span>  </span><span>"</span><span>lockfileVersion</span><span>"</span><span>:</span><span> </span><span>0</span><span>,</span></span>
<span><span>  </span><span>"</span><span>packages</span><span>"</span><span>:</span><span> [</span></span>
<span><span>    [</span><span>"</span><span>express@4.21.2</span><span>"</span><span>, </span><span>/* ... */</span><span>, </span><span>"</span><span>sha512-...</span><span>"</span><span>],</span></span>
<span><span>    [</span><span>"</span><span>body-parser@1.20.3</span><span>"</span><span>, </span><span>/* ... */</span><span>],</span></span>
<span><span>    </span><span>/* ... and more */</span></span>
<span><span>  ],</span></span>
<span><span>  </span><span>"</span><span>workspaces</span><span>"</span><span>:</span><span> { </span><span>/* ... */</span><span> },</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div><p>This makes it much easier to view diffs in pull requests, and trailing commas make it much less likely to cause merge conflicts.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/c873d6fe-3b44-47ca-81fd-913d9ace7b8e"><img src="https://github.com/user-attachments/assets/c873d6fe-3b44-47ca-81fd-913d9ace7b8e" alt=""></a></figure><p>For new projects without a lockfile, Bun will generate a new <code>bun.lock</code> file.</p><p>For existing projects with a <code>bun.lockb</code> file, Bun will continue to support the binary lockfile, <em>without migration to the new lockfile</em>. We will continue to support the binary lockfile for a <em>long</em> time, so you can continue to use commands, like <code>bun add</code> and <code>bun update</code>, and it will update your <code>bun.lockb</code> file.</p><h3 level="3" anchor-id="bun-install-gets-30-faster" id="bun-install-gets-30-faster"><a name="bun-install-gets-30-faster"></a><a href="#bun-install-gets-30-faster"><code>bun install</code> gets 30% faster</a></h3><p>You might think that after we migrated to a text-based lockfile, <code>bun install</code> would be slower. Wrong!</p><p>Most software projects get slower as more features are added, Bun is not one of those projects. We spent a lot of time tuning and optimizing Bun, so we could make <code>bun install</code> <em>even</em> faster.</p><p>That's why in Bun 1.2, <code>bun install</code> is 30% faster than Bun 1.1</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/679db20c-dfc1-4a36-b656-8abc16733c55"><img src="https://github.com/user-attachments/assets/679db20c-dfc1-4a36-b656-8abc16733c55" alt=""></a></figure><h3 level="3" anchor-id="jsonc-support-in-package-json" id="jsonc-support-in-package-json"><a name="jsonc-support-in-package-json"></a><a href="#jsonc-support-in-package-json">JSONC support in <code>package.json</code></a></h3><p>Have you ever added something to your <code>package.json</code> and forgot why months later? Or wanted to explain to your teammates why a dependency needs a specific version? Or have you ever had a merge conflict in a package.json file due to a comma?</p><p>Often these problems are due to the fact that <code>package.json</code> is a JSON file, and that means you can't use comments or trailing commas in it.</p><div><p>package.json</p><div><pre><code><span><span>{</span></span>
<span><span>  </span><span>"</span><span>dependencies</span><span>"</span><span>:</span><span> {</span></span>
<span><span>    </span><span>// this would cause a syntax error</span></span>
<span><span>    </span><span>"</span><span>express</span><span>"</span><span>:</span><span> </span><span>"</span><span>4.21.2</span><span>"</span></span>
<span><span>  }</span></span>
<span><span>}</span></span></code></pre></div></div><p>This is a bad experience. Modern tools like TypeScript allow for comments and trailing commas in their configuration files, <code>tsconfig.json</code> for example, and it's great. We also asked the community on your thoughts, and it seemed that the status-quo needed to change.</p><div><blockquote><p lang="en" dir="ltr">What JS ecosystem upgrade path would you prefer to permit comments in package.json?</p>— Rob Palmer (@robpalmer2) <a href="https://twitter.com/robpalmer2/status/1780495081637548305?ref_src=twsrc%5Etfw">April 17, 2024</a></blockquote> </div><p>In Bun 1.2, you can use comments and trailing commas in your <code>package.json</code>. It just works.</p><div><p>package.json</p><div><pre><code><span><span>{</span></span>
<span><span>  </span><span>"</span><span>name</span><span>"</span><span>: </span><span>"</span><span>app</span><span>"</span><span>,</span></span>
<span><span>  </span><span>"</span><span>dependencies</span><span>"</span><span>: {</span></span>
<span><span>    </span><span>// We need 0.30.8 because of a bug in 0.30.9</span></span>
<span><span>    </span><span>"</span><span>drizzle-orm</span><span>"</span><span>:</span><span> </span><span>"</span><span>0.30.8</span><span>"</span><span>, </span><span>/* &lt;- trailing comma */</span></span>
<span><span>  },</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div><p>Since there are many tools that read <code>package.json</code> files, we've added support to <code>require()</code> or <code>import()</code> these files with comments and trailing commas. You don't need to change your code.</p><div><pre><code><span><span>const</span><span> pkg </span><span>=</span><span> </span><span>require</span><span>(</span><span>"</span><span>./package.json</span><span>"</span><span>);</span></span>
<span><span>const</span><span> {</span></span>
<span><span>  </span><span>default</span><span>:</span><span> { name },</span></span>
<span><span>} </span><span>=</span><span> </span><span>await</span><span> </span><span>import</span><span>(</span><span>"</span><span>./package.json</span><span>"</span><span>);</span></span>
<span></span></code></pre></div><p>Since this isn't widely supported in the JavaScript ecosystem, we'd advice you to use this feature "at your own risk." However, we think this is the right direction to go: to make things easier for you.</p><h3 level="3" anchor-id="npmrc-support" id="npmrc-support"><a name="npmrc-support"></a><a href="#npmrc-support"><code>.npmrc</code> support</a></h3><p>In Bun 1.2, we added support for reading npm's config file: <a href="https://bun.sh/docs/install/npmrc"><code>.npmrc</code></a>.</p><p>You can use <code>.npmrc</code> to configure your npm registry and configure scoped packages. This is often necessary for corporate environments, where you might need to authenticate to a private registry.</p><div><p>.npmrc</p><div><pre><code><span><span>@my-company:</span><span>registry=</span><span>https://packages.my-company.com</span></span>
<span><span>@my-org:</span><span>registry=</span><span>https://packages.my-company.com/my-org</span></span>
<span></span></code></pre></div></div><p>Bun will look for an <code>.npmrc</code> file in your project's root directory, and in your home directory.</p><h3 level="3" anchor-id="bun-run-filter" id="bun-run-filter"><a name="bun-run-filter"></a><a href="#bun-run-filter"><code>bun run --filter</code></a></h3><p>You can now use <code>bun run --filter</code> to run a script in multiple workspaces at the same time.</p><p>This will run the <code>dev</code> script, concurrently, in all workspaces that match the glob pattern. It will also interleave the output of each script, so you can see the output of each workspace as it runs.</p><figure><a target="_blank" href="https://github.com/oven-sh/bun/assets/48869301/2a103e42-9921-4c33-948f-a1ad6e6bac71"><img src="https://github.com/oven-sh/bun/assets/48869301/2a103e42-9921-4c33-948f-a1ad6e6bac71" width="100%"></a></figure><p>You can also pass multiple filters to <code>--filter</code>, and you can just use <code>bun</code> instead of <code>bun run</code>.</p><div><pre><code><span><span>bun --filter </span><span>'</span><span>api/*</span><span>'</span><span> --filter </span><span>'</span><span>frontend/*</span><span>'</span><span> dev</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="bun-outdated" id="bun-outdated"><a name="bun-outdated"></a><a href="#bun-outdated"><code>bun outdated</code></a></h3><p>You can now view which dependencies are out-of-date using <a href="https://bun.sh/docs/cli/outdated"><code>bun outdated</code></a>.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/cb41e234-d0f6-4830-9864-fb87bd568cfe"><img src="https://github.com/user-attachments/assets/cb41e234-d0f6-4830-9864-fb87bd568cfe" alt=""></a></figure><p>It will show a list of your <code>package.json</code> dependencies, and which versions are out-of-date. The "update" column shows the next semver-matching version, and the "latest" column shows the latest version.</p><p>If you notice there's a specific dependency you want to update, you can use <code>bun update</code>.</p><div><div><pre><code><span><span>bun update @typescript-eslint/parser </span><span># Updates to "7.18.0"</span></span></code></pre></div><div><pre><code><span><span>bun update @typescript-eslint/parser --latest </span><span># Updates to "8.2.0"</span></span></code></pre></div></div><p>You can also filter which dependencies you want to check for updates. Just make sure to quote patterns, so your shell doesn't expand them as glob patterns!</p><div><div><pre><code><span><span>bun outdated </span><span>"</span><span>is-*</span><span>"</span><span> </span><span># check is-even, is-odd, etc.</span></span></code></pre></div><div><pre><code><span><span>bun outdated </span><span>"</span><span>@discordjs/*</span><span>"</span><span> </span><span># check @discordjs/voice, @discordjs/rest, etc.</span></span></code></pre></div><div><pre><code><span><span>bun outdated jquery --filter=</span><span>"</span><span>foo</span><span>"</span><span> </span><span># check jquery in the `foo` workspace</span></span></code></pre></div></div><h3 level="3" anchor-id="bun-publish" id="bun-publish"><a name="bun-publish"></a><a href="#bun-publish"><code>bun publish</code></a></h3><p>You can now publish npm packages using <a href="https://bun.sh/docs/cli/publish"><code>bun publish</code></a>.</p><figure><a target="_blank" href="https://github.com/user-attachments/assets/3ab14008-f874-4f70-aa12-0be550f6fda5"><img src="https://github.com/user-attachments/assets/3ab14008-f874-4f70-aa12-0be550f6fda5" alt=""></a></figure><p>It's a drop-in replacement for <code>npm publish</code>, and supports many of the same features like:</p><ul><li>Reading <a href="https://bun.sh/docs/install/npmrc"><code>.npmrc</code></a> files for authentication.</li><li>Packing tarballs, accounting for <code>.gitignore</code> and <code>.npmignore</code> files in multiple directories.</li><li>OTP / Two-factor authentication.</li><li>Handling edgecases with package.json fields like <code>bin</code>, <code>files</code>, etc.</li><li>Handling missing <code>README</code> files carefully.</li></ul><p>We've also added support for commands that are useful for publishing, like:</p><ul><li><a href="https://bun.sh/docs/cli/pm#whoami"><code>bun pm whoami</code></a>, which prints your npm username.</li><li><a href="https://bun.sh/docs/cli/pm#pack"><code>bun pm pack</code></a>, which creates an npm package tarball for publishing or installing locally.</li></ul><h3 level="3" anchor-id="bun-patch" id="bun-patch"><a name="bun-patch"></a><a href="#bun-patch"><code>bun patch</code></a></h3><p>Sometimes, your dependencies have bugs or missing features. While you could fork the package, make your changes, and publish it — that's a lot of work. What if you don't want to maintain a fork?</p><p>In Bun 1.2, we've added support for patching dependencies. Here's how it works:</p><ol><li>Run <code>bun patch &lt;package&gt;</code> to patch a package.</li><li>Edit the files in the <code>node_modules/&lt;package&gt;</code> directory.</li><li>Run <code>bun patch --commit &lt;package&gt;</code> to save your changes. That's it!</li></ol><p>Bun generates a <code>.patch</code> file with your changes in the <code>patches/</code> directory, which is automatically applied on <code>bun install</code>. You can then commit the patch file to your repository, and share it with your team.</p><p>For example, you could create a patch to replace a dependency with your own code.</p><div><p>./patches/is-even@1.0.0.patch</p><div><pre><code><span><span>diff --git a/index.js b/index.js</span></span>
<span><span>index 832d92223a9ec491364ee10dcbe3ad495446ab80..2a61f0dd2f476a4a30631c570e6c8d2d148d419a 100644</span></span>
<span><span>--- a/index.js</span></span>
<span><span>+++ b/index.js</span></span>
<span><span>@@ -1,14 +1 @@</span></span>
<span><span>- 'use strict';</span></span>
<span><span>-</span></span>
<span><span>- var isOdd = require('is-odd');</span></span>
<span><span>-</span></span>
<span><span>- module.exports = function isEven(i) {</span></span>
<span><span>-   return !isOdd(i);</span></span>
<span><span>- };</span></span>
<span><span>+ module.exports = (i) =&gt; (i % 2 === 0)</span></span>
<span></span></code></pre></div></div><p>Bun clones the package from the <code>node_modules</code> directory with a fresh copy of itself. This allows you to safely make edits to files in the package's directory without impacting shared file caches.</p><h3 level="3" anchor-id="easier-to-use" id="easier-to-use"><a name="easier-to-use"></a><a href="#easier-to-use">Easier to use</a></h3><p>We've also made a bunch of small improvements to make <code>bun install</code> easier to use.</p><h4 level="4" id="ca-certificates">CA certificates</h4><p>You can now configure CA certificates for <code>bun install</code>. This is useful when you need to install packages from your company's private registry, or if you want to use self-signed certificate.</p><div><p>bunfig.toml</p><div><pre><code><span><span>[</span><span>install</span><span>]</span></span>
<span><span># The CA certificate as a string</span></span>
<span><span>ca</span><span> </span><span>=</span><span> </span><span>"</span><span>-----BEGIN CERTIFICATE-----</span><span>\n</span><span>...</span><span>\n</span><span>-----END CERTIFICATE-----</span><span>"</span></span>
<span></span>
<span><span># A path to a CA certificate file. The file can contain multiple certificates.</span></span>
<span><span>cafile</span><span> </span><span>=</span><span> </span><span>"</span><span>path/to/cafile</span><span>"</span></span>
<span></span></code></pre></div></div><p>If you don't want to change your <a href="https://bun.sh/docs/runtime/bunfig#install-ca-and-install-cafile"><code>bunfig.toml</code></a> file, you can also use the <code>--ca</code> and <code>--cafile</code> flags.</p><div><pre><code><span><span>bun install --cafile=/path/to/cafile</span></span></code></pre></div><p>If you are using an existing <a href="https://bun.sh/docs/install/npmrc"><code>.npmrc</code></a> file, you can also configure CA certificates there.</p><div><p>.npmrc</p><div><pre><code><span><span>cafile=</span><span>/path/to/cafile</span></span>
<span><span>ca=</span><span>"</span><span>...</span><span>"</span></span>
<span></span></code></pre></div></div><h4 level="4" id="bundledependencies-support"><code>bundleDependencies</code> support</h4><p>You can now use <a href="https://docs.npmjs.com/cli/v11/configuring-npm/package-json#bundledependencies"><code>bundleDependencies</code></a> in your <code>package.json</code>.</p><div><p>package.json</p><div><pre><code><span><span>{</span></span>
<span><span>  </span><span>"</span><span>bundleDependencies</span><span>"</span><span>:</span><span> [</span><span>"</span><span>is-even</span><span>"</span><span>]</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div><p>These are dependencies that you expect to already exist in your <code>node_modules</code> folder, and are not installed like other dependencies.</p><h4 level="4" id="bun-add-respects-package-json-indentation"><code>bun add</code> respects <code>package.json</code> indentation</h4><p>We fixed a bug where <code>bun add</code> would not respect the spacing and indentation in your <code>package.json</code>. Bun will now preserve the indentation of your <code>package.json</code>, no matter how wacky it is.</p><div><p>package.json</p><div><pre><code><span><span>// an intentionally wacky package.json</span></span>
<span><span>{</span></span>
<span><span>  </span><span>"</span><span>dependencies</span><span>"</span><span>:</span><span> {</span></span>
<span><span>              </span><span>"</span><span>is-even</span><span>"</span><span>:</span><span> </span><span>"</span><span>1.0.0</span><span>"</span><span>,</span></span>
<span><span>              </span><span>"</span><span>is-odd</span><span>"</span><span>:</span><span> </span><span>"</span><span>1.0.0</span><span>"</span></span>
<span><span>  }</span></span>
<span><span>}</span></span></code></pre></div></div><h4 level="4" id="omit-dev-optional-peer-support"><code>--omit=dev|optional|peer</code> support</h4><p>Bun now supports the <code>--omit</code> flag with <code>bun install</code>, which allows you to omit dev, optional, or peer dependencies.</p><div><div><pre><code><span><span>bun install --omit=dev </span><span># omit dev dependencies</span></span></code></pre></div><div><pre><code><span><span>bun install --omit=optional </span><span># omit optional dependencies</span></span></code></pre></div><div><pre><code><span><span>bun install --omit=peer </span><span># omit peer dependencies</span></span></code></pre></div><div><pre><code><span><span>bun install --omit=dev --omit=optional </span><span># omit dev and optional dependencies</span></span></code></pre></div></div><h2 level="2" anchor-id="bun-is-a-test-runner" id="bun-is-a-test-runner"><a name="bun-is-a-test-runner"></a><a href="#bun-is-a-test-runner">Bun is a test runner</a></h2><p>Bun has a built-in test runner that makes it easy to write and run tests in JavaScript, TypeScript, and JSX. It supports many of the same APIs as Jest and Vitest, which includes the <a href="https://jestjs.io/docs/expect#expect"><code>expect()</code></a>-style APIs.</p><p>In Bun 1.2, we've made a lot of improvements to <code>bun test</code>.</p><h3 level="3" anchor-id="junit-support" id="junit-support"><a name="junit-support"></a><a href="#junit-support">JUnit support</a></h3><p>To use <code>bun test</code> with CI/CD tools like Jenkins, CircleCI, and GitLab CI, you can use the <code>--reporter</code> option to output test results to a JUnit XML file.</p><div><pre><code><span><span>bun </span><span>test</span><span> --reporter=junit --reporter-outfile=junit.xml</span></span></code></pre></div><div><p>junit.xml</p><div><pre><code><span><span>&lt;?</span><span>xml</span><span> version</span><span>=</span><span>"</span><span>1.0</span><span>"</span><span> encoding</span><span>=</span><span>"</span><span>UTF-8</span><span>"</span><span>?&gt;</span></span>
<span><span>&lt;</span><span>testsuites</span><span> </span><span>name</span><span>=</span><span>"</span><span>bun test</span><span>"</span><span> </span><span>tests</span><span>=</span><span>"</span><span>1</span><span>"</span><span> </span><span>assertions</span><span>=</span><span>"</span><span>1</span><span>"</span><span> </span><span>failures</span><span>=</span><span>"</span><span>1</span><span>"</span><span> </span><span>time</span><span>=</span><span>"</span><span>0.001</span><span>"</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>testsuite</span><span> </span><span>name</span><span>=</span><span>"</span><span>index.test.ts</span><span>"</span><span> </span><span>tests</span><span>=</span><span>"</span><span>1</span><span>"</span><span> </span><span>assertions</span><span>=</span><span>"</span><span>1</span><span>"</span><span> </span><span>failures</span><span>=</span><span>"</span><span>1</span><span>"</span><span> </span><span>time</span><span>=</span><span>"</span><span>0.001</span><span>"</span><span>&gt;</span></span>
<span><span>    </span><span>&lt;!-- ... --&gt;</span></span>
<span><span>  &lt;/</span><span>testsuite</span><span>&gt;</span></span>
<span><span>&lt;/</span><span>testsuites</span><span>&gt;</span></span>
<span></span></code></pre></div></div><p>You can also enable JUnit reporting by adding the following to your <a href="https://bun.sh/docs/runtime/bunfig"><code>bunfig.toml</code></a> file.</p><div><p>bunfig.toml</p><div><pre><code><span><span>[</span><span>test</span><span>.</span><span>reporter</span><span>]</span></span>
<span><span>junit</span><span> </span><span>=</span><span> </span><span>"</span><span>junit.xml</span><span>"</span></span>
<span></span></code></pre></div></div><h3 level="3" anchor-id="lcov-support" id="lcov-support"><a name="lcov-support"></a><a href="#lcov-support">LCOV support</a></h3><p>You can use <code>bun test --coverage</code> to generate a text-based coverage report of your tests.</p><p>In Bun 1.2, we added support for LCOV coverage reporting. <a href="https://github.com/linux-test-project/lcov">LCOV</a> is a standard format for code coverage reports, and is used by many tools like Codecov.</p><div><pre><code><span><span>bun </span><span>test</span><span> --coverage --coverage-reporter=lcov</span></span></code></pre></div><p>By default, this outputs a <code>lcov.info</code> coverage report file in the <code>coverage</code> directory. You can change the coverage directory with <code>--coverage-dir</code>.</p><p>If you want to always enable coverage reporting, you can add the following to your <a href="https://bun.sh/docs/runtime/bunfig"><code>bunfig.toml</code></a> file.</p><div><p>bunfig.toml</p><div><pre><code><span><span>[</span><span>test</span><span>]</span></span>
<span><span>coverage</span><span> </span><span>=</span><span> </span><span>true</span></span>
<span><span>coverageReporter</span><span> </span><span>=</span><span> [</span><span>"</span><span>lcov</span><span>"</span><span>]  </span><span># default ["text"]</span></span>
<span><span>coverageDir</span><span> </span><span>=</span><span> </span><span>"</span><span>./path/to/folder</span><span>"</span><span>  </span><span># default "./coverage"</span></span>
<span></span></code></pre></div></div><h3 level="3" anchor-id="inline-snapshots" id="inline-snapshots"><a name="inline-snapshots"></a><a href="#inline-snapshots">Inline snapshots</a></h3><p>You can now use <a href="https://jestjs.io/docs/snapshot-testing#inline-snapshots">inline snapshots</a> using <code>expect().toMatchInlineSnapshot()</code>.</p><p>Unlike <a href="https://jestjs.io/docs/expect#tomatchsnapshotpropertymatchers-hint"><code>toMatchSnapshot()</code></a>, which stores the snapshot in a separate file, <a href="https://jestjs.io/docs/expect#tomatchinlinesnapshotpropertymatchers-inlinesnapshot"><code>toMatchInlineSnapshot()</code></a> stores snapshots directly in the test file. This makes it easier see, and even change your snapshots.</p><p>First, write a test that uses <code>toMatchInlineSnapshot()</code>.</p><div><p>snapshot.test.ts</p><div><pre><code><span><span>import</span><span> { expect, test } </span><span>from</span><span> </span><span>"</span><span>bun:test</span><span>"</span><span>;</span></span>
<span></span>
<span><span>test</span><span>(</span><span>"</span><span>toMatchInlineSnapshot()</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>expect</span><span>(</span><span>new</span><span> </span><span>Date</span><span>()).</span><span>toMatchInlineSnapshot</span><span>();</span></span>
<span><span>});</span></span>
<span></span></code></pre></div></div><p>Next, update the snapshot with <code>bun test -u</code>, which is short for <code>--update-snapshots</code>.</p><p>Then, voilà! Bun has updated the test file with your snapshot.</p><div><p>snapshot.test.ts</p><div><pre><code><span><span>import</span><span> { expect, test } </span><span>from</span><span> </span><span>"</span><span>bun:test</span><span>"</span><span>;</span></span>
<span></span>
<span><span>test</span><span>(</span><span>"</span><span>toMatchInlineSnapshot()</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>   </span><span>expect</span><span>(</span><span>new</span><span> </span><span>Date</span><span>()).</span><span>toMatchInlineSnapshot</span><span>();</span></span>
<span><span>   </span><span>expect</span><span>(</span><span>new</span><span> </span><span>Date</span><span>()).</span><span>toMatchInlineSnapshot</span><span>(</span><span>`2025-01-18T02:35:53.332Z`</span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><p>You can also use these matchers, which do a similar thing:</p><ul><li><a href="https://jestjs.io/docs/expect#tothrowerrormatchingsnapshothint"><code>toThrowErrorMatchingSnapshot()</code></a></li><li><a href="https://jestjs.io/docs/expect#tothrowerrormatchinginlinesnapshotinlinesnapshot"><code>toThrowErrorMatchingInlineSnapshot()</code></a></li></ul><h3 level="3" anchor-id="test-only" id="test-only"><a name="test-only"></a><a href="#test-only"><code>test.only()</code></a></h3><p>You can use <a href="https://jestjs.io/docs/api#testonlyname-fn-timeout"><code>test.only()</code></a> to run a single test, excluding all other tests. This is useful when you're debugging a specific test, and don't want to run the entire test suite.</p><div><pre><code><span><span>import</span><span> { test } </span><span>from</span><span> </span><span>"</span><span>bun:test</span><span>"</span><span>;</span></span>
<span></span>
<span><span>test.</span><span>only</span><span>(</span><span>"</span><span>test a</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>/* Only run this test  */</span></span>
<span><span>});</span></span>
<span></span>
<span><span>test</span><span>(</span><span>"</span><span>test b</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>/* Don't run this test */</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><p>Previously, for this to work in Bun, you had to use the <code>--only</code> flag.</p><p>This was annoying, you'd usually forget to do it, and test runners like Jest don't need it! In Bun 1.2, we've made this "just work", without the need for flags.</p><h3 level="3" anchor-id="new-expect-matchers" id="new-expect-matchers"><a name="new-expect-matchers"></a><a href="#new-expect-matchers">New <code>expect()</code> matchers</a></h3><p>In Bun 1.2, we added a bunch of matchers to the <a href="https://jestjs.io/docs/expect"><code>expect()</code></a> API. These are the same matchers that are implemented by Jest, Vitest, or the <a href="https://jest-extended.jestcommunity.dev/"><code>jest-extended</code></a> library.</p><p>You can use <a href="https://jest-extended.jestcommunity.dev/docs/matchers/object/#tocontainvaluevalue"><code>toContainValue()</code></a> and derivatives to check if an object contains a value.</p><div><pre><code><span><span>const</span><span> object </span><span>=</span><span> </span><span>new</span><span> </span><span>Set</span><span>([</span><span>"</span><span>bun</span><span>"</span><span>, </span><span>"</span><span>node</span><span>"</span><span>, </span><span>"</span><span>npm</span><span>"</span><span>]);</span></span>
<span></span>
<span><span>expect</span><span>(object).</span><span>toContainValue</span><span>(</span><span>"</span><span>bun</span><span>"</span><span>);</span></span>
<span><span>expect</span><span>(object).</span><span>toContainValues</span><span>([</span><span>"</span><span>bun</span><span>"</span><span>, </span><span>"</span><span>node</span><span>"</span><span>]);</span></span>
<span><span>expect</span><span>(object).</span><span>toContainAllValues</span><span>([</span><span>"</span><span>bun</span><span>"</span><span>, </span><span>"</span><span>node</span><span>"</span><span>, </span><span>"</span><span>npm</span><span>"</span><span>]);</span></span>
<span><span>expect</span><span>(object).not.</span><span>toContainAnyValues</span><span>([</span><span>"</span><span>done</span><span>"</span><span>]);</span></span>
<span></span></code></pre></div><p>Or, use <a href="https://jest-extended.jestcommunity.dev/docs/matchers/object/#tocontainkeykey"><code>toContainKey()</code></a> and derivatives to check if an object contains a key.</p><div><pre><code><span><span>const</span><span> object </span><span>=</span><span> </span><span>new</span><span> </span><span>Map</span><span>([</span></span>
<span><span>  [</span><span>"</span><span>bun</span><span>"</span><span>, </span><span>"</span><span>1.2.0</span><span>"</span><span>],</span></span>
<span><span>  [</span><span>"</span><span>node</span><span>"</span><span>, </span><span>"</span><span>22.13.0</span><span>"</span><span>],</span></span>
<span><span>  [</span><span>"</span><span>npm</span><span>"</span><span>, </span><span>"</span><span>9.1.2</span><span>"</span><span>],</span></span>
<span><span>]);</span></span>
<span></span>
<span><span>expect</span><span>(object).</span><span>toContainKey</span><span>(</span><span>"</span><span>bun</span><span>"</span><span>);</span></span>
<span><span>expect</span><span>(object).</span><span>toContainKeys</span><span>([</span><span>"</span><span>bun</span><span>"</span><span>, </span><span>"</span><span>node</span><span>"</span><span>]);</span></span>
<span><span>expect</span><span>(object).</span><span>toContainAllKeys</span><span>([</span><span>"</span><span>bun</span><span>"</span><span>, </span><span>"</span><span>node</span><span>"</span><span>, </span><span>"</span><span>npm</span><span>"</span><span>]);</span></span>
<span><span>expect</span><span>(object).not.</span><span>toContainAnyKeys</span><span>([</span><span>"</span><span>done</span><span>"</span><span>]);</span></span>
<span></span></code></pre></div><p>You can also use <a href="https://jestjs.io/docs/expect#tohavereturned"><code>toHaveReturned()</code></a> and derivatives to check if a mocked function has returned a value.</p><div><pre><code><span><span>import</span><span> { jest, test, expect } </span><span>from</span><span> </span><span>"</span><span>bun:test</span><span>"</span><span>;</span></span>
<span></span>
<span><span>test</span><span>(</span><span>"</span><span>toHaveReturned()</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>const</span><span> mock </span><span>=</span><span> jest.</span><span>fn</span><span>(() </span><span>=&gt;</span><span> </span><span>"</span><span>foo</span><span>"</span><span>);</span></span>
<span><span>  </span><span>mock</span><span>();</span></span>
<span><span>  </span><span>expect</span><span>(mock).</span><span>toHaveReturned</span><span>();</span></span>
<span><span>  </span><span>mock</span><span>();</span></span>
<span><span>  </span><span>expect</span><span>(mock).</span><span>toHaveReturnedTimes</span><span>(</span><span>2</span><span>);</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="custom-error-messages" id="custom-error-messages"><a name="custom-error-messages"></a><a href="#custom-error-messages">Custom error messages</a></h3><p>We've also added support for custom error messages using <code>expect()</code>.</p><p>You can now pass a string as the second argument to <code>expect()</code>, which will be used as the error message. This is useful when you want to document what the assertion is checking.</p><div><p>example.test.ts</p><div><pre><code><span><span>import</span><span> { test, expect } </span><span>from</span><span> </span><span>'</span><span>bun:test</span><span>'</span><span>;</span></span>
<span></span>
<span><span>test</span><span>(</span><span>"</span><span>custom error message</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>expect</span><span>(</span><span>0.1</span><span> </span><span>+</span><span> </span><span>0.2</span><span>).</span><span>toBe</span><span>(</span><span>0.3</span><span>);</span></span>
<span><span>  </span><span>expect</span><span>(</span><span>0.1</span><span> </span><span>+</span><span> </span><span>0.2</span><span>, </span><span>"</span><span>Floating point has precision error</span><span>"</span><span>).</span><span>toBe</span><span>(</span><span>0.3</span><span>);</span></span>
<span><span>});</span></span></code></pre></div></div><div><pre><code><span><span>1 </span><span>|</span><span> import { test, expect } from </span><span>'</span><span>bun:test</span><span>'</span><span>;</span></span>
<span><span>2 </span><span>|</span></span>
<span><span>3 </span><span>|</span><span> test(</span><span>"</span><span>custom error message</span><span>"</span><span>, () =</span><span>&gt;</span><span> {</span></span>
<span><span>4 </span><span>|</span><span>   expect(0.1 + 0.2, </span><span>"</span><span>Floating point has precision error</span><span>"</span><span>).toBe(0.3)</span><span>;</span></span>
<span><span>                                                              ^</span></span>
<span><span>error: expect(received).toBe(expected)</span></span>
<span><span>error: Floating point has precision error</span></span>
<span></span>
<span><span>Expected: 0.3</span></span>
<span><span>Received: 0.30000000000000004</span></span></code></pre></div><h3 level="3" anchor-id="jest-settimeout" id="jest-settimeout"><a name="jest-settimeout"></a><a href="#jest-settimeout"><code>jest.setTimeout()</code></a></h3><p>You can now use Jest's <a href="https://jestjs.io/docs/jest-object#jestsettimeouttimeout"><code>setTimeout()</code></a> API to change the default timeout for tests in the current scope or module, instead of setting the timeout for each test.</p><div><pre><code><span><span>jest.</span><span>setTimeout</span><span>(</span><span>60</span><span> </span><span>*</span><span> </span><span>1000</span><span>); </span><span>// 1 minute</span></span>
<span></span>
<span><span>test</span><span>(</span><span>"</span><span>do something that takes a long time</span><span>"</span><span>, </span><span>async</span><span> () </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>await</span><span> Bun.</span><span>sleep</span><span>(</span><span>Infinity</span><span>);</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><p>You can also import <code>setDefaultTimeout()</code> from Bun's test APIs, which does the same thing. We chose a different name to avoid confusion with the global <code>setTimeout()</code> function.</p><div><pre><code><span><span>import</span><span> { setDefaultTimeout } </span><span>from</span><span> </span><span>"</span><span>bun:test</span><span>"</span><span>;</span></span>
<span></span>
<span><span>setDefaultTimeout</span><span>(</span><span>60</span><span> </span><span>*</span><span> </span><span>1000</span><span>); </span><span>// 1 minute</span></span>
<span></span></code></pre></div><h2 level="2" anchor-id="bun-is-a-javascript-bundler" id="bun-is-a-javascript-bundler"><a name="bun-is-a-javascript-bundler"></a><a href="#bun-is-a-javascript-bundler">Bun is a JavaScript bundler</a></h2><p>Bun is a JavaScript and TypeScript bundler, transpiler, and minifier that can be used to bundle code for the browser, Node.js, and other platforms.</p><h3 level="3" anchor-id="html-imports" id="html-imports"><a name="html-imports"></a><a href="#html-imports">HTML imports</a></h3><p>In Bun 1.2, we've added support for HTML imports. This allows you to replace your entire frontend toolchain with a single import statement.</p><p>To get started, pass an HTML import to the <code>static</code> option in <code>Bun.serve</code>:</p><div><pre><code><span><span>import</span><span> homepage </span><span>from</span><span> </span><span>"</span><span>./index.html</span><span>"</span><span>;</span></span>
<span></span>
<span><span>Bun.</span><span>serve</span><span>({</span></span>
<span><span>  static</span><span>:</span><span> {</span></span>
<span><span>    </span><span>"</span><span>/</span><span>"</span><span>:</span><span> homepage,</span></span>
<span><span>  },</span></span>
<span></span>
<span><span>  </span><span>async</span><span> </span><span>fetch</span><span>(</span><span>req</span><span>) {</span></span>
<span><span>    </span><span>// ... api requests</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><p>When you make a request to <code>/</code>, Bun automatically bundles the <code>&lt;script&gt;</code> and <code>&lt;link&gt;</code> tags in the HTML files, exposes them as static routes, and serves the result.</p><p>An index.html file like this:</p><div><p>index.html</p><div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span><span> </span><span>html</span><span>&gt;</span></span>
<span><span>&lt;</span><span>html</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>head</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>title</span><span>&gt;Home&lt;/</span><span>title</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>link</span><span> </span><span>rel</span><span>=</span><span>"</span><span>stylesheet</span><span>"</span><span> </span><span>href</span><span>=</span><span>"</span><span>./reset.css</span><span>"</span><span> /&gt;</span></span>
<span><span>    &lt;</span><span>link</span><span> </span><span>rel</span><span>=</span><span>"</span><span>stylesheet</span><span>"</span><span> </span><span>href</span><span>=</span><span>"</span><span>./styles.css</span><span>"</span><span> /&gt;</span></span>
<span><span>  &lt;/</span><span>head</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>body</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>div</span><span> </span><span>id</span><span>=</span><span>"</span><span>root</span><span>"</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>script</span><span> </span><span>type</span><span>=</span><span>"</span><span>module</span><span>"</span><span> </span><span>src</span><span>=</span><span>"</span><span>./sentry-and-preloads.ts</span><span>"</span><span>&gt;&lt;/</span><span>script</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>script</span><span> </span><span>type</span><span>=</span><span>"</span><span>module</span><span>"</span><span> </span><span>src</span><span>=</span><span>"</span><span>./my-app.tsx</span><span>"</span><span>&gt;&lt;/</span><span>script</span><span>&gt;</span></span>
<span><span>  &lt;/</span><span>body</span><span>&gt;</span></span>
<span><span>&lt;/</span><span>html</span><span>&gt;</span></span>
<span></span></code></pre></div></div><p>Becomes something like this:</p><div><p>index.html</p><div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span><span> </span><span>html</span><span>&gt;</span></span>
<span><span>&lt;</span><span>html</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>head</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>title</span><span>&gt;Home&lt;/</span><span>title</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>link</span><span> </span><span>rel</span><span>=</span><span>"</span><span>stylesheet</span><span>"</span><span> </span><span>href</span><span>=</span><span>"</span><span>/index-[hash].css</span><span>"</span><span> /&gt;</span></span>
<span><span>  &lt;/</span><span>head</span><span>&gt;</span></span>
<span><span>  &lt;</span><span>body</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>div</span><span> </span><span>id</span><span>=</span><span>"</span><span>root</span><span>"</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></span>
<span><span>    &lt;</span><span>script</span><span> </span><span>type</span><span>=</span><span>"</span><span>module</span><span>"</span><span> </span><span>src</span><span>=</span><span>"</span><span>/index-[hash].js</span><span>"</span><span>&gt;&lt;/</span><span>script</span><span>&gt;</span></span>
<span><span>  &lt;/</span><span>body</span><span>&gt;</span></span>
<span><span>&lt;/</span><span>html</span><span>&gt;</span></span>
<span></span></code></pre></div></div><p>To read more about HTML imports and how they're implemented, check out the <a href="https://bun.sh/docs/bundler/fullstack">HTML imports</a> documentation.</p><h3 level="3" anchor-id="standalone-executables" id="standalone-executables"><a name="standalone-executables"></a><a href="#standalone-executables">Standalone executables</a></h3><p>You can use <a href="https://bun.sh/docs/bundler/executables"><code>bun build --compile</code></a> to compile your application, and Bun, into a standalone executable.</p><p>In Bun 1.2, we've added support for cross-compilation. This allows you to build a Windows or macOS binary on a Linux machine, and vice versa.</p><p>You can run the following command on a macOS or Linux machine, and it will compile a Windows binary.</p><div><div><pre><code><span><span>bun build --compile --target=bun-windows-x64 app.ts</span></span></code></pre></div><div><pre><code><span><span>   [8ms]  bundle  1 modules</span></span>
<span><span>[1485ms] compile  app.exe bun-windows-x64-v1.2.0</span></span></code></pre></div></div><p>For Windows specific builds, you can customize the icon and hide the console window.</p><div><pre><code><span><span>bun build --compile --windows-icon=./icon.ico --windows-hide-console app.ts</span></span></code></pre></div><h3 level="3" anchor-id="bytecode-caching" id="bytecode-caching"><a name="bytecode-caching"></a><a href="#bytecode-caching">Bytecode caching</a></h3><p>You can also use <a href="https://bun.sh/docs/bundler/build#bytecode"><code>bun build --bytecode</code></a> flag to generate a bytecode cache. This improves the startup time of applications like <code>eslint</code> to be <a href="https://x.com/jarredsumner/status/1840729983528137043">2x faster</a>.</p><div><pre><code><span><span>bun build --bytecode --compile app.ts</span></span></code></pre></div><p>You can also use the bytecode cache without <code>--compile</code>.</p><div><pre><code><span><span>bun build --bytecode --outdir=dist app.ts</span></span></code></pre></div><p>When Bun generates output files, it will also generate <code>.jsc</code> files, which contain the bytecode cache of its respective <code>.js</code> file. Both files are necessary to run, as the bytecode compilation doesn't currently compile async functions, generators, or eval.</p><p>The bytecode cache can be 8x larger than the source code, so this makes startup faster at a cost of increased disk space.</p><h3 level="3" anchor-id="commonjs-output-format" id="commonjs-output-format"><a name="commonjs-output-format"></a><a href="#commonjs-output-format">CommonJS output format</a></h3><p>You can now set the output format to CommonJS with <code>bun build</code>. Previously, only ESM was supported.</p><div><pre><code><span><span>bun build --format=cjs app.ts</span></span></code></pre></div><p>This makes it easier to create libraries and applications meant for older versions of Node.js.</p><div id="DkFZlprlTQ"><div><p>app.ts</p><div><pre><code><span><span>// app.ts</span></span>
<span><span>export</span><span> </span><span>default</span><span> </span><span>"</span><span>Hello, world!</span><span>"</span><span>;</span></span>
<span></span></code></pre></div></div><div><p>app.js</p><div><pre><code><span><span>var</span><span> __defProp </span><span>=</span><span> </span><span>Object</span><span>.defineProperty;</span></span>
<span><span>var</span><span> __getOwnPropNames </span><span>=</span><span> </span><span>Object</span><span>.getOwnPropertyNames;</span></span>
<span><span>var</span><span> __getOwnPropDesc </span><span>=</span><span> </span><span>Object</span><span>.getOwnPropertyDescriptor;</span></span>
<span><span>var</span><span> __hasOwnProp </span><span>=</span><span> </span><span>Object</span><span>.prototype.hasOwnProperty;</span></span>
<span><span>var</span><span> __moduleCache </span><span>=</span><span> </span><span>/* @__PURE__ */</span><span> </span><span>new</span><span> </span><span>WeakMap</span><span>;</span></span>
<span><span>var</span><span> </span><span>__toCommonJS</span><span> </span><span>=</span><span> (</span><span>from</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>var</span><span> entry </span><span>=</span><span> __moduleCache.</span><span>get</span><span>(from), desc;</span></span>
<span><span>  </span><span>if</span><span> (entry)</span></span>
<span><span>    </span><span>return</span><span> entry;</span></span>
<span><span>  entry </span><span>=</span><span> </span><span>__defProp</span><span>({}, </span><span>"</span><span>__esModule</span><span>"</span><span>, { value</span><span>:</span><span> </span><span>true</span><span> });</span></span>
<span><span>  </span><span>if</span><span> (from </span><span>&amp;&amp;</span><span> </span><span>typeof</span><span> from </span><span>===</span><span> </span><span>"</span><span>object</span><span>"</span><span> </span><span>||</span><span> </span><span>typeof</span><span> from </span><span>===</span><span> </span><span>"</span><span>function</span><span>"</span><span>)</span></span>
<span><span>    </span><span>__getOwnPropNames</span><span>(from).</span><span>map</span><span>((</span><span>key</span><span>) </span><span>=&gt;</span><span> </span><span>!</span><span>__hasOwnProp.</span><span>call</span><span>(entry, key) </span><span>&amp;&amp;</span><span> </span><span>__defProp</span><span>(entry, key, {</span></span>
<span><span>      </span><span>get</span><span>:</span><span> () </span><span>=&gt;</span><span> from[key],</span></span>
<span><span>      enumerable</span><span>:</span><span> </span><span>!</span><span>(desc </span><span>=</span><span> </span><span>__getOwnPropDesc</span><span>(from, key)) </span><span>||</span><span> desc.enumerable</span></span>
<span><span>    }));</span></span>
<span><span>  __moduleCache.</span><span>set</span><span>(from, entry);</span></span>
<span><span>  </span><span>return</span><span> entry;</span></span>
<span><span>};</span></span>
<span><span>var</span><span> </span><span>__export</span><span> </span><span>=</span><span> (</span><span>target</span><span>, </span><span>all</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>for</span><span> (</span><span>var</span><span> name </span><span>in</span><span> all)</span></span>
<span><span>    </span><span>__defProp</span><span>(target, name, {</span></span>
<span><span>      get</span><span>:</span><span> all[name],</span></span>
<span><span>      enumerable</span><span>:</span><span> </span><span>true</span><span>,</span></span>
<span><span>      configurable</span><span>:</span><span> </span><span>true</span><span>,</span></span>
<span><span>      </span><span>set</span><span>:</span><span> (</span><span>newValue</span><span>) </span><span>=&gt;</span><span> all[name] </span><span>=</span><span> () </span><span>=&gt;</span><span> newValue</span></span>
<span><span>    });</span></span>
<span><span>};</span></span>
<span></span>
<span><span>// app.js</span></span>
<span><span>var</span><span> exports_site </span><span>=</span><span> {};</span></span>
<span><span>__export</span><span>(exports_site, {</span></span>
<span><span>  </span><span>default</span><span>:</span><span> () </span><span>=&gt;</span><span> site_default</span></span>
<span><span>});</span></span>
<span><span>module</span><span>.</span><span>exports</span><span> </span><span>=</span><span> </span><span>__toCommonJS</span><span>(exports_site);</span></span>
<span><span>var</span><span> site_default </span><span>=</span><span> </span><span>"</span><span>Hello, world!</span><span>"</span><span>;</span></span>
<span></span></code></pre></div></div></div><h3 level="3" anchor-id="better-commonjs-detection" id="better-commonjs-detection"><a name="better-commonjs-detection"></a><a href="#better-commonjs-detection">Better CommonJS detection</a></h3><p>Some packages <em>really</em> want to trick bundlers and get the current module's file path, do a runtime require, or check if the current module is the main module. They try all kinds of things to make it work, such as:</p><div><pre><code><span><span>"</span><span>use strict</span><span>"</span><span>;</span></span>
<span></span>
<span><span>if</span><span> (</span><span>eval</span><span>(</span><span>"</span><span>require.main</span><span>"</span><span>) </span><span>===</span><span> </span><span>eval</span><span>(</span><span>"</span><span>module.main</span><span>"</span><span>)) {</span></span>
<span><span>  </span><span>// ...</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><p>Bun supports both CommonJS and ESM; in fact, you can use <code>require()</code> and <code>import</code> in the same file. However, one of the challenges of supporting both is that there's a lot of ambiguity.</p><p>Consider the following code, is it CommonJS or ESM?</p><p>There's no way to tell. Then, how about this?</p><div><pre><code><span><span>console.</span><span>log</span><span>(</span><span>module</span><span>.</span><span>require</span><span>(</span><span>"</span><span>path</span><span>"</span><span>));</span></span>
<span></span></code></pre></div><p>CommonJS, because it's using <code>module.require()</code> to get the <code>path</code> module. And this?</p><div><pre><code><span><span>import</span><span> path </span><span>from</span><span> </span><span>"</span><span>path</span><span>"</span><span>;</span></span>
<span><span>console.</span><span>log</span><span>(path);</span></span>
<span></span></code></pre></div><p>ESM, because it's using <code>import</code>. But, what about this?</p><div><pre><code><span><span>import</span><span> path </span><span>from</span><span> </span><span>"</span><span>path</span><span>"</span><span>;</span></span>
<span><span>const</span><span> fs </span><span>=</span><span> </span><span>require</span><span>(</span><span>"</span><span>fs</span><span>"</span><span>);</span></span>
<span><span>console.</span><span>log</span><span>(fs.</span><span>readFileSync</span><span>(path.</span><span>resolve</span><span>(</span><span>"</span><span>package.json</span><span>"</span><span>), </span><span>"</span><span>utf8</span><span>"</span><span>));</span></span>
<span></span></code></pre></div><p>ESM, because it's using <code>import</code>. If we said it was CommonJS due to the require, then the <code>import</code> would break the code. We want to simplify building stuff in JavaScript, so let's just say it's ESM and not be fussy.</p><p>Finally, what about this?</p><div><pre><code><span><span>"</span><span>use strict</span><span>"</span><span>;</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(</span><span>eval</span><span>(</span><span>"</span><span>module.require('path')</span><span>"</span><span>));</span></span>
<span></span></code></pre></div><p>Previously, Bun would have said ESM, because it's the default when there's no way to tell (including when the file extension is ambiguous, there's no "type" field in package.json, no export, no import, etc).</p><p>In Bun 1.2, Bun will say CommonJS, because of the "use strict" directive at the top of the file. ESM is always in strict mode, so an explicit "use strict" would be redundant.</p><p>Also, most build tools that output CommonJS include "use strict" at the top of the file. So we can now use this as a last-chance heuristic when it's completely ambiguous whether the file is CommonJS or ESM.</p><h3 level="3" anchor-id="plugin-api" id="plugin-api"><a name="plugin-api"></a><a href="#plugin-api">Plugin API</a></h3><p>Bun has a universal <a href="https://bun.sh/docs/bundler/plugins">plugin API</a> for extending the bundler <em>and</em> the runtime.</p><p>You can use plugins to intercept <code>import()</code> statements, add custom loaders for extensions like <code>.yaml</code>, and implement frameworks for Bun.</p><h3 level="3" anchor-id="onbeforeparse" id="onbeforeparse"><a name="onbeforeparse"></a><a href="#onbeforeparse"><code>onBeforeParse()</code></a></h3><p>In Bun 1.2, we're introducing a new lifecycle hook for plugins, <a href="https://bun.sh/docs/bundler/plugins#onbeforeparse"><code>onBeforeParse()</code></a>.</p><p>Unlike the existing lifecycle hooks that run JavaScript code, this hook must be a <a href="https://bun.sh/docs/api/node-api">N-API addon</a>, which can be implemented in a compiled language like Rust, C/C++, or Zig.</p><p>The hook is called immediately before parsing, without cloning the source code, without undergoing string conversion, and with practically zero overhead.</p><p>For example, you can create a Rust plugin that replaces all occurrences of <code>foo</code> with <code>bar</code>.</p><div><pre><code><span><span>cargo add bun-native-plugin</span></span></code></pre></div><p>From there, you can implement the <code>onBeforeParse()</code> hook. These are advanced APIs, primarily designed for plugin and framework authors who want to use native code to make their plugins really fast.</p><div id="WPLUPcOMOc"><div><p>lib.rs</p><div><pre><code><span><span>use</span><span> bun_native_plugin</span><span>::</span><span>{define_bun_plugin, </span><span>OnBeforeParse</span><span>, bun, </span><span>Result</span><span>, anyhow, </span><span>BunLoader</span><span>};</span></span>
<span><span>use</span><span> napi_derive</span><span>::</span><span>napi;</span></span>
<span></span>
<span><span>define_bun_plugin!</span><span>(</span><span>"foo-bar-plugin"</span><span>);</span></span>
<span></span>
<span><span>#[bun]</span></span>
<span><span>pub</span><span> </span><span>fn</span><span> </span><span>replace_foo_with_bar</span><span>(handle</span><span>:</span><span> </span><span>&amp;mut</span><span> </span><span>OnBeforeParse</span><span>) </span><span>-&gt;</span><span> </span><span>Result</span><span>&lt;()&gt; {</span></span>
<span><span>  </span><span>let</span><span> input_source_code </span><span>=</span><span> handle</span><span>.</span><span>input_source_code</span><span>()</span><span>?</span><span>;</span></span>
<span><span>  </span><span>let</span><span> output_source_code </span><span>=</span><span> input_source_code</span><span>.</span><span>replace</span><span>(</span><span>"foo"</span><span>, </span><span>"bar"</span><span>);</span></span>
<span></span>
<span><span>  handle</span><span>.</span><span>set_output_source_code</span><span>(output_source_code, </span><span>BunLoader</span><span>::</span><span>BUN_LOADER_JSX</span><span>);</span></span>
<span><span>  </span><span>Ok</span><span>(())</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div><div><p>build.ts</p><div><pre><code><span><span>import</span><span> { build } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span><span>import</span><span> fooBarPlugin </span><span>from</span><span> </span><span>"</span><span>./foo-bar-plugin</span><span>"</span><span>;</span></span>
<span></span>
<span><span>await</span><span> </span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./app.tsx</span><span>"</span><span>],</span></span>
<span><span>  plugins</span><span>:</span><span> [</span></span>
<span><span>    {</span></span>
<span><span>      name</span><span>:</span><span> </span><span>"</span><span>foo-bar-plugin</span><span>"</span><span>,</span></span>
<span><span>      </span><span>setup</span><span>(</span><span>build</span><span>) {</span></span>
<span><span>        build.</span><span>onBeforeParse</span><span>(</span></span>
<span><span>          {</span></span>
<span><span>            namespace</span><span>:</span><span> </span><span>"</span><span>file</span><span>"</span><span>,</span></span>
<span><span>            filter</span><span>:</span><span> </span><span>"</span><span>**/*.tsx</span><span>"</span><span>,</span></span>
<span><span>          },</span></span>
<span><span>          {</span></span>
<span><span>            napiModule</span><span>:</span><span> fooBarPlugin,</span></span>
<span><span>            symbol</span><span>:</span><span> </span><span>"</span><span>replace_foo_with_bar</span><span>"</span><span>,</span></span>
<span><span>          },</span></span>
<span><span>        );</span></span>
<span><span>      },</span></span>
<span><span>    },</span></span>
<span><span>  ],</span></span>
<span><span>});</span></span>
<span></span></code></pre></div></div></div><h3 level="3" anchor-id="other-changes" id="other-changes"><a name="other-changes"></a><a href="#other-changes">Other changes</a></h3><p>We also made a lot of other improvements to <code>bun build</code> and the <code>Bun.build()</code> APIs.</p><h4 level="4" id="inject-environment-variables">Inject environment variables</h4><p>You can now inject environment variables from your system environment into your bundle.</p><div id="qundCAWRKi"><div><p>CLI</p><div><pre><code><span><span>bun build --env=</span><span>"</span><span>PUBLIC_*</span><span>"</span><span> app.tsx</span></span>
<span></span></code></pre></div></div><div><p>JavaScript</p><div><pre><code><span><span>import</span><span> { build } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>await</span><span> </span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./app.tsx</span><span>"</span><span>],</span></span>
<span><span>  outdir</span><span>:</span><span> </span><span>"</span><span>./out</span><span>"</span><span>,</span></span>
<span><span>  </span><span>// Environment variables starting with "PUBLIC_"</span></span>
<span><span>  </span><span>// will be injected in the build as process.env.PUBLIC_*</span></span>
<span><span>  env</span><span>:</span><span> </span><span>"</span><span>PUBLIC_*</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span></code></pre></div></div></div><h4 level="4" id="bun-build-drop"><code>bun build --drop</code></h4><p>You can use <code>--drop</code> to remove function calls from your JavaScript bundle. For example, if you pass <code>--drop=console</code>, all calls to <code>console.log()</code> will be removed from your code.</p><div id="zkrZCMYZKk"><div><p>JavaScript</p><div><pre><code><span><span>import</span><span> { build } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>await</span><span> </span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./index.tsx</span><span>"</span><span>],</span></span>
<span><span>  outdir</span><span>:</span><span> </span><span>"</span><span>./out</span><span>"</span><span>,</span></span>
<span><span>  drop</span><span>:</span><span> [</span><span>"</span><span>console</span><span>"</span><span>, </span><span>"</span><span>anyIdentifier.or.propertyAccess</span><span>"</span><span>],</span></span>
<span><span>});</span></span>
<span></span></code></pre></div></div><div><p>CLI</p><div><pre><code><span><span>bun build ./index.tsx --outdir ./out --drop=console --drop=anyIdentifier.or.propertyAccess</span></span></code></pre></div></div></div><h4 level="4" id="banner-and-footer">Banner and footer</h4><p>You can now use the banner and footer options in <code>bun build</code> to add content above or below the bundle.</p><div id="DWDdTGktQn"><div><p>CLI</p><div><pre><code><span><span>bun build --banner </span><span>"</span><span>/* Banner! */</span><span>"</span><span> --footer </span><span>"</span><span>/* Footer! */</span><span>"</span><span> app.ts</span></span></code></pre></div></div><div><p>JavaScript</p><div><pre><code><span><span>import</span><span> { build } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>await</span><span> </span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./app.ts</span><span>"</span><span>],</span></span>
<span><span>  outdir</span><span>:</span><span> </span><span>"</span><span>./dist</span><span>"</span><span>,</span></span>
<span><span>  banner</span><span>:</span><span> </span><span>"</span><span>/* Banner! */</span><span>"</span><span>,</span></span>
<span><span>  footer</span><span>:</span><span> </span><span>"</span><span>/* Footer! */</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span></code></pre></div></div></div><p>This is useful for appending content above or below the bundle, such as a license or copyright notice.</p><div><pre><code><span><span>/**</span></span>
<span><span> * Banner!</span></span>
<span><span> */</span></span>
<span><span>export</span><span> </span><span>default</span><span> </span><span>"</span><span>Hello, world!</span><span>"</span><span>;</span></span>
<span><span>/**</span></span>
<span><span> * Footer!</span></span>
<span><span> */</span></span>
<span></span></code></pre></div><h4 level="4" id="bun-embeddedfiles"><code>Bun.embeddedFiles()</code></h4><p>You can use the new <code>Bun.embeddedFiles()</code> API to see a list of all embedded files in a standalone executable, compiled with <code>bun build --compile</code>.</p><div><pre><code><span><span>import</span><span> { embeddedFiles } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>for</span><span> (</span><span>const</span><span> file </span><span>of</span><span> embeddedFiles) {</span></span>
<span><span>  console.</span><span>log</span><span>(file.name); </span><span>// "logo.png"</span></span>
<span><span>  console.</span><span>log</span><span>(file.size); </span><span>// 1234</span></span>
<span><span>  console.</span><span>log</span><span>(</span><span>await</span><span> file.</span><span>bytes</span><span>()); </span><span>// Uint8Array(1234) [...]</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><h4 level="4" id="require-main-module"><code>require.main === module</code></h4><p>Previously, using <code>require.main === module</code> would mark the module as CommonJS. Now, Bun rewrites this into <code>import.meta.main</code>, meaning you can use this pattern alongside import statements.</p><div><pre><code><span><span>import</span><span> </span><span>*</span><span> </span><span>as</span><span> fs </span><span>from</span><span> </span><span>"</span><span>fs</span><span>"</span><span>;</span></span>
<span></span>
<span><span>if</span><span> (</span><span>typeof</span><span> require </span><span>!==</span><span> </span><span>"</span><span>undefined</span><span>"</span><span> </span><span>&amp;&amp;</span><span> require.main </span><span>===</span><span> </span><span>module</span><span>) {</span></span>
<span><span>  console.</span><span>log</span><span>(</span><span>"</span><span>main!</span><span>"</span><span>, fs);</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><h4 level="4" id="ignore-dce-annotations"><code>--ignore-dce-annotations</code></h4><p>Some JavaScript tools support special annotations that can influence behavior during dead-code elimination. For example, the <code>@__PURE__</code> annotation tells bundlers that a function call is pure (regardless of whether it actually is), and that the call can be removed if it is not used.</p><div><pre><code><span><span>let</span><span> button </span><span>=</span><span> </span><span>/* @__PURE__ */</span><span> React.</span><span>createElement</span><span>(Button, </span><span>null</span><span>);</span></span>
<span></span></code></pre></div><p>Sometimes, a library may include incorrect annotations, which can cause Bun to remove side effects which were needed.</p><p>To workaround these issue, you can use the <code>--ignore-dce-annotations</code> flag when running <code>bun build</code> to ignore all annotations. This should only be used if dead-code elimination breaks bundles, and fixing the annotations should be preferred to leaving this flag on.</p><h4 level="4" id="packages-external"><code>--packages=external</code></h4><p>You can now control if package dependencies are included in your bundle or not. If the import does not start with <code>.</code>, <code>..</code> or <code>/</code>, then it is considered a package.</p><div id="EMJFzGWNqn"><div><p>CLI</p><div><pre><code><span><span>bun build ./index.ts --packages external</span></span></code></pre></div></div><div><p>JavaScript</p><div><pre><code><span><span>await</span><span> Bun.</span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./index.ts</span><span>"</span><span>],</span></span>
<span><span>  packages</span><span>:</span><span> </span><span>"</span><span>external</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span></code></pre></div></div></div><p>This is useful when bundling libraries. It lets you reduce the number of files your users have to download, while continuing to support peer or external dependencies.</p><h2 level="2" anchor-id="built-in-css-parser" id="built-in-css-parser"><a name="built-in-css-parser"></a><a href="#built-in-css-parser">Built-in CSS parser</a></h2><p>In Bun 1.2, we implemented a new CSS parser and bundler in Bun.</p><p>It's derived from the great work of <a href="https://github.com/parcel-bundler/lightningcss">LightningCSS</a>, and re-written from Rust to Zig so it can be integrated with Bun's custom JavaScript and TypeScript parser, bundler, and runtime.</p><p>Bun is an complete toolkit for running and building JavaScript and TypeScript. One of the missing pieces of Bun's built-in JavaScript bundler, <code>bun build</code>, is support for bundling and minifying CSS.</p><h3 level="3" anchor-id="how-it-works" id="how-it-works"><a name="how-it-works"></a><a href="#how-it-works">How it works</a></h3><p>CSS bundlers combine multiple CSS files and assets referenced using directives like <code>url</code>, <code>@import</code>, <code>@font-face</code>, into a single CSS file you can send to browsers, avoiding a waterfall of network requests.</p><div id="TtOJlMjHqz"><div><p>index.css</p><div><pre><code><span><span>@import</span><span> </span><span>"</span><span>foo.css</span><span>"</span><span>;</span></span>
<span><span>@import</span><span> </span><span>"</span><span>bar.css</span><span>"</span><span>;</span></span>
<span></span></code></pre></div></div><div><p>foo.css</p><div><pre><code><span><span>.foo</span><span> {</span></span>
<span><span>  </span><span>background</span><span>:</span><span> </span><span>red</span><span>;</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div><div><p>bar.css</p><div><pre><code><span><span>.bar</span><span> {</span></span>
<span><span>  </span><span>background</span><span>:</span><span> </span><span>blue</span><span>;</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div></div><p>To see how it works, you can try it using <code>bun build</code>.</p><p>You'll see how the CSS files are combined into a single CSS file.</p><div><p>dist.css</p><div><pre><code><span><span>/** foo.css */</span></span>
<span><span>.foo</span><span> {</span></span>
<span><span>  </span><span>background</span><span>:</span><span> </span><span>red</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>/** bar.css */</span></span>
<span><span>.bar</span><span> {</span></span>
<span><span>  </span><span>background</span><span>:</span><span> </span><span>blue</span><span>;</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div><h3 level="3" anchor-id="import-css-files-from-javascript" id="import-css-files-from-javascript"><a name="import-css-files-from-javascript"></a><a href="#import-css-files-from-javascript">Import <code>.css</code> files from JavaScript</a></h3><p>We've also made it possible to import <code>.css</code> files in your JavaScript and TypeScript code. This will create an additional CSS entrypoint that combines all the CSS files imported from a JavaScript module graph, along with <code>@import</code> rules.</p><div><p>index.ts</p><div><pre><code><span><span>import</span><span> </span><span>"</span><span>./style.css</span><span>"</span><span>;</span></span>
<span><span>import</span><span> MyComponent </span><span>from</span><span> </span><span>"</span><span>./MyComponent.tsx</span><span>"</span><span>;</span></span>
<span></span>
<span><span>// ... rest of your app</span></span>
<span></span></code></pre></div></div><p>In this example, if <code>MyComponent.tsx</code> imports another CSS file, instead of adding extra <code>.css</code> files to the bundle, all the CSS imported per entrypoint is flattened into a single CSS file.</p><div><p>shell</p><div><pre><code><span><span>bun build ./index.ts --outdir=dist</span></span></code></pre></div><div><pre><code><span><span>  index.js     0.10 KB</span></span>
<span><span>  index.css    0.10 KB</span></span>
<span><span>[5ms] bundle 4 modules</span></span></code></pre></div></div><h3 level="3" anchor-id="using-bun-build" id="using-bun-build"><a name="using-bun-build"></a><a href="#using-bun-build">Using <code>Bun.build()</code></a></h3><p>You can also bundle CSS using the programmatic <code>Bun.build()</code> API. This allows you to bundle both CSS and JavaScript in the same build, with the same API.</p><div><p>api.ts</p><div><pre><code><span><span>import</span><span> { build } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> results </span><span>=</span><span> </span><span>await</span><span> </span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./index.css</span><span>"</span><span>],</span></span>
<span><span>  outdir</span><span>:</span><span> </span><span>"</span><span>./dist</span><span>"</span><span>,</span></span>
<span><span>});</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(results);</span></span>
<span></span></code></pre></div></div><h2 level="2" anchor-id="bun-apis" id="bun-apis"><a name="bun-apis"></a><a href="#bun-apis">Bun APIs</a></h2><p>In addition to supporting Node.js and Web APIs, Bun also has a growing standard library that makes it easy to do common tasks, without adding more external dependencies.</p><h3 level="3" anchor-id="static-routes-in-bun-serve" id="static-routes-in-bun-serve"><a name="static-routes-in-bun-serve"></a><a href="#static-routes-in-bun-serve">Static routes in <code>Bun.serve()</code></a></h3><p>Bun has a built-in HTTP server that makes it easy to respond to HTTP requests using standard APIs like <code>Request</code> and <code>Response</code>. In Bun 1.2, we added support for static routes using the new <code>static</code> property.</p><p>To define a static route, pass the request path as the key and a <code>Response</code> object as the value.</p><div><pre><code><span><span>import</span><span> { serve } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>serve</span><span>({</span></span>
<span><span>  static</span><span>:</span><span> {</span></span>
<span><span>    </span><span>"</span><span>/health-check</span><span>"</span><span>:</span><span> </span><span>new</span><span> </span><span>Response</span><span>(</span><span>"</span><span>Ok!</span><span>"</span><span>),</span></span>
<span><span>    </span><span>"</span><span>/old-link</span><span>"</span><span>:</span><span> Response.</span><span>redirect</span><span>(</span><span>"</span><span>/new-link</span><span>"</span><span>, </span><span>301</span><span>),</span></span>
<span><span>    </span><span>"</span><span>/api/version</span><span>"</span><span>:</span><span> Response.</span><span>json</span><span>(</span></span>
<span><span>      {</span></span>
<span><span>        app</span><span>:</span><span> </span><span>require</span><span>(</span><span>"</span><span>./package.json</span><span>"</span><span>).version,</span></span>
<span><span>        bun</span><span>:</span><span> Bun.version,</span></span>
<span><span>      },</span></span>
<span><span>      {</span></span>
<span><span>        headers</span><span>:</span><span> { </span><span>"</span><span>X-Powered-By</span><span>"</span><span>:</span><span> </span><span>"</span><span>bun</span><span>"</span><span> },</span></span>
<span><span>      },</span></span>
<span><span>    ),</span></span>
<span><span>  },</span></span>
<span><span>  </span><span>async</span><span> </span><span>fetch</span><span>(</span><span>request</span><span>) {</span></span>
<span><span>    </span><span>return</span><span> </span><span>new</span><span> </span><span>Response</span><span>(</span><span>"</span><span>Dynamic!</span><span>"</span><span>);</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><p>Static routes are up to <a href="https://x.com/jarredsumner/status/1828042864531833035">40% faster</a> than doing it yourself in the <code>fetch()</code> handler. The response body, headers, and status code are cached in memory, so there's no JavaScript allocation or garbage collection.</p><p>If you want to reload the static routes, you can use the <code>reload()</code> method. This is useful if you want to update the static routes on a schedule, or when a file changes.</p><div><pre><code><span><span>import</span><span> { serve } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> server </span><span>=</span><span> </span><span>serve</span><span>({</span></span>
<span><span>  static</span><span>:</span><span> {</span></span>
<span><span>    </span><span>"</span><span>/</span><span>"</span><span>:</span><span> </span><span>new</span><span> </span><span>Response</span><span>(</span><span>"</span><span>Static!</span><span>"</span><span>),</span></span>
<span><span>  },</span></span>
<span><span>  </span><span>async</span><span> </span><span>fetch</span><span>(</span><span>request</span><span>) {</span></span>
<span><span>    </span><span>return</span><span> </span><span>new</span><span> </span><span>Response</span><span>(</span><span>"</span><span>Dynamic!</span><span>"</span><span>);</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span>
<span><span>setInterval</span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>const</span><span> date </span><span>=</span><span> </span><span>new</span><span> </span><span>Date</span><span>().</span><span>toISOString</span><span>();</span></span>
<span><span>  server.</span><span>reload</span><span>({</span></span>
<span><span>    static</span><span>:</span><span> {</span></span>
<span><span>      </span><span>"</span><span>/</span><span>"</span><span>:</span><span> </span><span>new</span><span> </span><span>Response</span><span>(</span><span>`Static! Updated at </span><span>${</span><span>date</span><span>}</span><span>`</span><span>),</span></span>
<span><span>    },</span></span>
<span><span>  });</span></span>
<span><span>}, </span><span>1000</span><span>);</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="bun-udpsocket" id="bun-udpsocket"><a name="bun-udpsocket"></a><a href="#bun-udpsocket"><code>Bun.udpSocket()</code></a></h3><p>While we added support for <code>node:dgram</code> in Bun 1.2, we also introduced UDP socket support in Bun's APIs. <a href="https://bun.sh/docs/api/udp"><code>Bun.udpSocket()</code></a> is a faster, modern alternative and is similar to the existing <a href="https://bun.sh/docs/api/tcp"><code>Bun.listen()</code></a> API.</p><div><pre><code><span><span>import</span><span> { udpSocket } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> server </span><span>=</span><span> </span><span>await</span><span> </span><span>udpSocket</span><span>({</span></span>
<span><span>  socket</span><span>:</span><span> {</span></span>
<span><span>    </span><span>data</span><span>(</span><span>socket</span><span>, </span><span>data</span><span>, </span><span>port</span><span>, </span><span>addr</span><span>) {</span></span>
<span><span>      console.</span><span>log</span><span>(</span><span>`Received data from </span><span>${</span><span>addr</span><span>}</span><span>:</span><span>${</span><span>port</span><span>}</span><span>:`</span><span>, data.</span><span>toString</span><span>());</span></span>
<span><span>    },</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span>
<span><span>const</span><span> client </span><span>=</span><span> </span><span>await</span><span> </span><span>udpSocket</span><span>({ port</span><span>:</span><span> </span><span>0</span><span> });</span></span>
<span><span>client.</span><span>send</span><span>(</span><span>"</span><span>Hello!</span><span>"</span><span>, server.port, </span><span>"</span><span>127.0.0.1</span><span>"</span><span>);</span></span>
<span></span></code></pre></div><p>Bun's UDP socket API is built for performance. Unlike Node.js, it can send multiple UDP datagrams with a single syscall, and supports responding to backpressure from the operating system.</p><div><pre><code><span><span>const</span><span> socket </span><span>=</span><span> </span><span>await</span><span> Bun.</span><span>udpSocket</span><span>({</span></span>
<span><span>  port</span><span>:</span><span> </span><span>0</span><span>,</span></span>
<span><span>  socket</span><span>:</span><span> {</span></span>
<span><span>    </span><span>drain</span><span>(</span><span>socket</span><span>) {</span></span>
<span><span>      </span><span>// Socket is no longer under backpressure</span></span>
<span><span>    },</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span>
<span><span>// Send multiple UDP datagrams with a single syscall:</span></span>
<span><span>// [ &lt;data&gt;, &lt;port&gt;, &lt;address&gt; ][]</span></span>
<span><span>socket.</span><span>sendMany</span><span>([</span></span>
<span><span>  [</span><span>"</span><span>Hello</span><span>"</span><span>, </span><span>12345</span><span>, </span><span>"</span><span>127.0.0.1</span><span>"</span><span>],</span></span>
<span><span>  [</span><span>"</span><span>from</span><span>"</span><span>, </span><span>12346</span><span>, </span><span>"</span><span>127.0.0.1</span><span>"</span><span>],</span></span>
<span><span>  [</span><span>"</span><span>Bun 1.2</span><span>"</span><span>, </span><span>12347</span><span>, </span><span>"</span><span>127.0.0.1</span><span>"</span><span>],</span></span>
<span><span>]);</span></span>
<span></span></code></pre></div><p>This is great for building game servers that need to broadcast game state updates to every peer.</p><h3 level="3" anchor-id="bun-file" id="bun-file"><a name="bun-file"></a><a href="#bun-file"><code>Bun.file()</code></a></h3><p>Bun has a built-in <a href="https://bun.sh/docs/api/file-io#reading-files-bun-file"><code>Bun.file()</code></a> API that makes it easy to read and write files. It extends the Web-standard <code>Blob</code> API, and makes it easier to work with files in a server environment.</p><p>In Bun 1.2, we've added support for even more <code>Bun.file()</code> APIs.</p><h4 level="4" id="delete"><code>delete()</code></h4><p>You can now delete files using the <code>delete()</code> method. An alias of <code>unlink()</code> is also supported.</p><div><pre><code><span><span>import</span><span> { file } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>await</span><span> </span><span>file</span><span>(</span><span>"</span><span>./package.json</span><span>"</span><span>).</span><span>delete</span><span>();</span></span>
<span><span>await</span><span> </span><span>file</span><span>(</span><span>"</span><span>./node_modules</span><span>"</span><span>).</span><span>unlink</span><span>();</span></span>
<span></span></code></pre></div><h4 level="4" id="stat"><code>stat()</code></h4><p>You can now use the <code>stat()</code> method to get a file's metadata. This returns the same <a href="https://nodejs.org/api/fs.html#class-fsstats"><code>Stats</code></a> object as <code>fs.stat()</code> in Node.js.</p><div><pre><code><span><span>import</span><span> { file } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> stat </span><span>=</span><span> </span><span>await</span><span> </span><span>file</span><span>(</span><span>"</span><span>./package.json</span><span>"</span><span>).</span><span>stat</span><span>();</span></span>
<span><span>console.</span><span>log</span><span>(stat.size); </span><span>// =&gt; 1024</span></span>
<span><span>console.</span><span>log</span><span>(stat.mode); </span><span>// =&gt; 33206</span></span>
<span><span>console.</span><span>log</span><span>(stat.</span><span>isFile</span><span>()); </span><span>// =&gt; true</span></span>
<span><span>console.</span><span>log</span><span>(stat.</span><span>isDirectory</span><span>()); </span><span>// =&gt; false</span></span>
<span><span>console.</span><span>log</span><span>(stat.ctime); </span><span>// =&gt; 2025-01-21T16:00:00+00:00</span></span>
<span></span></code></pre></div><h4 level="4" id="support-for-s3-files">Support for S3 files</h4><p>With newly added built-in support for S3, you can use the same <code>Bun.file()</code> APIs with a S3 file.</p><div><pre><code><span><span>import</span><span> { s3 } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> stat </span><span>=</span><span> </span><span>await</span><span> </span><span>s3</span><span>(</span><span>"</span><span>s3://folder/my-file.txt</span><span>"</span><span>).</span><span>stat</span><span>();</span></span>
<span><span>console.</span><span>log</span><span>(stat.size); </span><span>// =&gt; 1024</span></span>
<span><span>console.</span><span>log</span><span>(stat.type); </span><span>// =&gt; "text/plain;charset=utf-8"</span></span>
<span></span>
<span><span>await</span><span> </span><span>s3</span><span>(</span><span>"</span><span>s3://folder/</span><span>"</span><span>).</span><span>unlink</span><span>();</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="bun-color" id="bun-color"><a name="bun-color"></a><a href="#bun-color"><code>Bun.color()</code></a></h3><p>To support CSS with <code>bun build</code>, we implemented our own CSS parser in Bun 1.2. In doing this work, we decided to expose some useful APIs for working with colors.</p><p>You can use <a href="https://bun.sh/docs/api/color"><code>Bun.color()</code></a> to parse, normalize, and convert colors into a variety of formats. It supports CSS, ANSI color codes, RGB, HSL, and more.</p><div><pre><code><span><span>import</span><span> { color } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>color</span><span>(</span><span>"</span><span>#ff0000</span><span>"</span><span>, </span><span>"</span><span>css</span><span>"</span><span>); </span><span>// =&gt; "red"</span></span>
<span><span>color</span><span>(</span><span>"</span><span>rgb(255, 0, 0)</span><span>"</span><span>, </span><span>"</span><span>css</span><span>"</span><span>); </span><span>// =&gt; "red"</span></span>
<span><span>color</span><span>(</span><span>"</span><span>red</span><span>"</span><span>, </span><span>"</span><span>ansi</span><span>"</span><span>); </span><span>// =&gt; "\x1b[31m"</span></span>
<span><span>color</span><span>(</span><span>"</span><span>#f00</span><span>"</span><span>, </span><span>"</span><span>ansi-16m</span><span>"</span><span>); </span><span>// =&gt; "\x1b[38;2;255;0;0m"</span></span>
<span><span>color</span><span>(</span><span>0xff0000</span><span>, </span><span>"</span><span>ansi-256</span><span>"</span><span>); </span><span>// =&gt; "\u001b[38;5;196m"</span></span>
<span><span>color</span><span>({ r</span><span>:</span><span> </span><span>255</span><span>, g</span><span>:</span><span> </span><span>0</span><span>, b</span><span>:</span><span> </span><span>0</span><span> }, </span><span>"</span><span>number</span><span>"</span><span>); </span><span>// =&gt; 16711680</span></span>
<span><span>color</span><span>(</span><span>"</span><span>hsl(0, 0%, 50%)</span><span>"</span><span>, </span><span>"</span><span>{rgba}</span><span>"</span><span>); </span><span>// =&gt; { r: 128, g: 128, b: 128, a: 1 }</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="dns-prefetch" id="dns-prefetch"><a name="dns-prefetch"></a><a href="#dns-prefetch"><code>dns.prefetch()</code></a></h3><p>You can use the new <a href="https://bun.sh/docs/api/dns#dns-prefetch"><code>dns.prefetch()</code></a> API to prefetch DNS records before they are needed. This is useful if you want to pre-warm the DNS cache on startup.</p><div><pre><code><span><span>import</span><span> { dns } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>// ...on startup</span></span>
<span><span>dns.</span><span>prefetch</span><span>(</span><span>"</span><span>example.com</span><span>"</span><span>);</span></span>
<span></span>
<span><span>// ...later on</span></span>
<span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>https://example.com/</span><span>"</span><span>);</span></span>
<span></span></code></pre></div><p>This will prefetch the DNS record for example.com and make it available for use in <code>fetch()</code> requests. You can also use the <a href="https://bun.sh/docs/api/dns#dns-getcachestats"><code>dns.getCacheStats()</code></a> API to observe the DNS cache.</p><div><pre><code><span><span>import</span><span> { dns } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>https://example.com/</span><span>"</span><span>);</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(dns.</span><span>getCacheStats</span><span>());</span></span>
<span><span>// {</span></span>
<span><span>//   cacheHitsCompleted: 0,</span></span>
<span><span>//   cacheHitsInflight: 0,</span></span>
<span><span>//   cacheMisses: 1,</span></span>
<span><span>//   size: 1,</span></span>
<span><span>//   errors: 0,</span></span>
<span><span>//   totalCount: 1,</span></span>
<span><span>// }</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="helpful-utilities" id="helpful-utilities"><a name="helpful-utilities"></a><a href="#helpful-utilities">Helpful utilities</a></h3><p>We also added a few random utilities to Bun's APIs.</p><h4 level="4" id="bun-inspect-table"><code>Bun.inspect.table()</code></h4><p>You can now use <code>Bun.inspect.table()</code> to format tabular data into a string. It's similar to <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/table_static"><code>console.table</code></a>, except it returns a string rather than printing to the console.</p><div><pre><code><span><span>console.</span><span>log</span><span>(</span></span>
<span><span>  Bun.inspect.</span><span>table</span><span>([</span></span>
<span><span>    { a</span><span>:</span><span> </span><span>1</span><span>, b</span><span>:</span><span> </span><span>2</span><span>, c</span><span>:</span><span> </span><span>3</span><span> },</span></span>
<span><span>    { a</span><span>:</span><span> </span><span>4</span><span>, b</span><span>:</span><span> </span><span>5</span><span>, c</span><span>:</span><span> </span><span>6</span><span> },</span></span>
<span><span>    { a</span><span>:</span><span> </span><span>7</span><span>, b</span><span>:</span><span> </span><span>8</span><span>, c</span><span>:</span><span> </span><span>9</span><span> },</span></span>
<span><span>  ]),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>// ┌───┬───┬───┬───┐</span></span>
<span><span>// │   │ a │ b │ c │</span></span>
<span><span>// ├───┼───┼───┼───┤</span></span>
<span><span>// │ 0 │ 1 │ 2 │ 3 │</span></span>
<span><span>// │ 1 │ 4 │ 5 │ 6 │</span></span>
<span><span>// │ 2 │ 7 │ 8 │ 9 │</span></span>
<span><span>// └───┴───┴───┴───┘</span></span>
<span></span></code></pre></div><h4 level="4" id="bun-randomuuidv7"><code>Bun.randomUUIDv7()</code></h4><p>You can use <code>Bun.randomUUIDv7()</code> to generate a <a href="https://www.ietf.org/archive/id/draft-peabody-dispatch-new-uuid-format-01.html#name-uuidv7-layout-and-bit-order">UUID v7</a>, a monotonic UUID suitable for sorting and databases.</p><div><p>index.ts</p><div><pre><code><span><span>import</span><span> { randomUUIDv7 } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> uuid </span><span>=</span><span> </span><span>randomUUIDv7</span><span>();</span></span>
<span><span>// =&gt; "0192ce11-26d5-7dc3-9305-1426de888c5a"</span></span>
<span></span></code></pre></div></div><h2 level="2" anchor-id="new-in-bun-s-built-in-sqlite-client" id="new-in-bun-s-built-in-sqlite-client"><a name="new-in-bun-s-built-in-sqlite-client"></a><a href="#new-in-bun-s-built-in-sqlite-client">New in Bun's built-in SQLite client</a></h2><p>Bun has a built-in <a href="https://bun.sh/docs/api/sqlite">SQLite client</a> that makes it easy to query SQLite databases. In Bun 1.2, we've added a few new features to make it even easier to use.</p><h3 level="3" anchor-id="orm-less-object-mapping" id="orm-less-object-mapping"><a name="orm-less-object-mapping"></a><a href="#orm-less-object-mapping">ORM-less object mapping</a></h3><p>When you query a SQL database, you often want to map your query results to a JavaScript object. That's why there's so many popular <a href="https://www.prisma.io/dataguide/types/relational/what-is-an-orm#do-i-need-an-orm">ORM</a> (Object-Relational Mapping) packages like Prisma and TypeORM.</p><p>You can now use <a href="https://bun.sh/docs/api/sqlite#as-class-map-query-results-to-a-class"><code>query.as(Class)</code></a> to map query results to instances of a class. This lets you attach methods, getters, and setters without using an ORM.</p><div><pre><code><span><span>import</span><span> { Database } </span><span>from</span><span> </span><span>"</span><span>bun:sqlite</span><span>"</span><span>;</span></span>
<span></span>
<span><span>class</span><span> </span><span>Tweet</span><span> {</span></span>
<span><span>  id</span><span>:</span><span> </span><span>number</span><span>;</span></span>
<span><span>  text</span><span>:</span><span> </span><span>string</span><span>;</span></span>
<span><span>  username</span><span>:</span><span> </span><span>string</span><span>;</span></span>
<span></span>
<span><span>  </span><span>get</span><span> </span><span>isMe</span><span>() {</span></span>
<span><span>    </span><span>return</span><span> </span><span>this</span><span>.username </span><span>===</span><span> </span><span>"</span><span>jarredsumner</span><span>"</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> db </span><span>=</span><span> </span><span>new</span><span> </span><span>Database</span><span>(</span><span>"</span><span>tweets.db</span><span>"</span><span>);</span></span>
<span><span>const</span><span> tweets </span><span>=</span><span> db.</span><span>query</span><span>(</span><span>"</span><span>SELECT * FROM tweets</span><span>"</span><span>).</span><span>as</span><span>(Tweet);</span></span>
<span></span>
<span><span>for</span><span> (</span><span>const</span><span> tweet </span><span>of</span><span> tweets.</span><span>all</span><span>()) {</span></span>
<span><span>  </span><span>if</span><span> (</span><span>!</span><span>tweet.isMe) {</span></span>
<span><span>    console.</span><span>log</span><span>(</span><span>`</span><span>${</span><span>tweet.username</span><span>}</span><span>: </span><span>${</span><span>tweet.text</span><span>}</span><span>`</span><span>);</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><p>For performance reasons, class constructors, default initializers, and private fields are not supported. Instead, it uses the equivalent of <code>Object.create()</code> to create a new object with the class's prototype and assigns the values of the row to it.</p><p>It's also important to note that this is <em>not</em> an ORM. It doesn't manage relationships, generate SQL queries, or anything like that. However, it does remove a lot of boilerplate to get JavaScript objects from SQLite!</p><h3 level="3" anchor-id="iterable-queries" id="iterable-queries"><a name="iterable-queries"></a><a href="#iterable-queries">Iterable queries</a></h3><p>You can now use <a href="https://bun.sh/docs/api/sqlite#iterate-iterator"><code>query.iterate()</code></a> to get an iterator that yields rows as they are returned from the database. This is useful when you want to process rows at a time, without loading them all into memory.</p><div><pre><code><span><span>import</span><span> { Database } </span><span>from</span><span> </span><span>"</span><span>bun:sqlite</span><span>"</span><span>;</span></span>
<span></span>
<span><span>class</span><span> </span><span>User</span><span> {</span></span>
<span><span>  id</span><span>:</span><span> </span><span>number</span><span>;</span></span>
<span><span>  email</span><span>:</span><span> </span><span>string</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> db </span><span>=</span><span> </span><span>new</span><span> </span><span>Database</span><span>(</span><span>"</span><span>users.db</span><span>"</span><span>);</span></span>
<span><span>const</span><span> rows </span><span>=</span><span> db.</span><span>query</span><span>(</span><span>"</span><span>SELECT * FROM users</span><span>"</span><span>).</span><span>as</span><span>(User).</span><span>iterate</span><span>();</span></span>
<span></span>
<span><span>for</span><span> (</span><span>const</span><span> row </span><span>of</span><span> rows) {</span></span>
<span><span>  console.</span><span>log</span><span>(row);</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><p>You can also iterate over the query using a <code>for</code> loop, without calling <code>iterate()</code>.</p><div><pre><code><span><span>for</span><span> (</span><span>const</span><span> row </span><span>of</span><span> db.</span><span>query</span><span>(</span><span>"</span><span>SELECT * FROM users</span><span>"</span><span>)) {</span></span>
<span><span>  console.</span><span>log</span><span>(row); </span><span>// { id: 1, email: "hello@bun.sh" }</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="strict-query-parameters" id="strict-query-parameters"><a name="strict-query-parameters"></a><a href="#strict-query-parameters">Strict query parameters</a></h3><p>You can now omit the <code>$</code>, <code>@</code>, or <code>:</code> prefix when passing JavaScript values as query parameters.</p><div><pre><code><span><span>import</span><span> { Database } </span><span>from</span><span> </span><span>"</span><span>bun:sqlite</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> db </span><span>=</span><span> </span><span>new</span><span> </span><span>Database</span><span>(</span><span>"</span><span>:memory:</span><span>"</span><span>, {</span></span>
<span><span>  strict</span><span>:</span><span> </span><span>false</span><span>,</span></span>
<span><span>  strict</span><span>:</span><span> </span><span>true</span><span>,</span></span>
<span><span>});</span></span>
<span></span>
<span><span>const</span><span> query </span><span>=</span><span> db.</span><span>query</span><span>(</span><span>`select $message;`</span><span>);</span></span>
<span></span>
<span><span>query.</span><span>all</span><span>({</span></span>
<span><span>  $message</span><span>:</span><span> </span><span>"</span><span>Hello world</span><span>"</span></span>
<span><span>  message: </span><span>"</span><span>Hello world</span><span>"</span></span>
<span><span>});</span></span></code></pre></div><p>To use this behavior, enable the <a href="https://bun.sh/docs/api/sqlite#strict-mode"><code>strict</code></a> option. This will allow you to omit the <code>$</code>, <code>@</code>, or <code>:</code> prefixes, and will throw an error if a parameter is missing.</p><h3 level="3" anchor-id="tracking-changed-rows" id="tracking-changed-rows"><a name="tracking-changed-rows"></a><a href="#tracking-changed-rows">Tracking changed rows</a></h3><p>You can now access the number of rows changed and the last inserted row ID when running queries.</p><div><pre><code><span><span>import</span><span> { Database } </span><span>from</span><span> </span><span>"</span><span>bun:sqlite</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> db </span><span>=</span><span> </span><span>new</span><span> </span><span>Database</span><span>(</span><span>"</span><span>:memory:</span><span>"</span><span>);</span></span>
<span><span>db.</span><span>run</span><span>(</span><span>`CREATE TABLE users (id INTEGER, username TEXT)`</span><span>);</span></span>
<span></span>
<span><span>const</span><span> { changes, lastInsertRowid } </span><span>=</span><span> db.</span><span>run</span><span>(</span></span>
<span><span>  </span><span>`INSERT INTO users VALUES (1, 'jarredsumner')`</span><span>,</span></span>
<span><span>);</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>({</span></span>
<span><span>  changes, </span><span>// =&gt; 1</span></span>
<span><span>  lastInsertRowid, </span><span>// =&gt; 1</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="bigint-support" id="bigint-support"><a name="bigint-support"></a><a href="#bigint-support">BigInt support</a></h3><p>If you want to use 64-bit integers, you can enable the <a href="https://bun.sh/docs/api/sqlite#safeintegers-true"><code>safeIntegers</code></a> option. This will return integers as as a <code>BigInt</code>, instead of a truncated <code>number</code>.</p><div><pre><code><span><span>import</span><span> { Database } </span><span>from</span><span> </span><span>"</span><span>bun:sqlite</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> db </span><span>=</span><span> </span><span>new</span><span> </span><span>Database</span><span>(</span><span>"</span><span>:memory:</span><span>"</span><span>, { safeIntegers</span><span>:</span><span> </span><span>true</span><span> });</span></span>
<span><span>const</span><span> query </span><span>=</span><span> db.</span><span>query</span><span>(</span></span>
<span><span>  </span><span>`SELECT </span><span>${</span><span>BigInt</span><span>(</span><span>Number</span><span>.</span><span>MAX_SAFE_INTEGER</span><span>)</span><span> </span><span>+</span><span> </span><span>1</span><span>n</span><span>}</span><span> as maxInteger`</span><span>,</span></span>
<span><span>);</span></span>
<span></span>
<span><span>const</span><span> { maxInteger } </span><span>=</span><span> query.</span><span>get</span><span>();</span></span>
<span><span>console.</span><span>log</span><span>(maxInteger); </span><span>// =&gt; 9007199254740992n</span></span>
<span></span></code></pre></div><p>You can also enable this on a per-query basis using the <a href="https://bun.sh/docs/api/sqlite#safeintegers-true"><code>safeIntegers()</code></a> method.</p><div><pre><code><span><span>import</span><span> { Database } </span><span>from</span><span> </span><span>"</span><span>bun:sqlite</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> db </span><span>=</span><span> </span><span>new</span><span> </span><span>Database</span><span>(</span><span>"</span><span>:memory:</span><span>"</span><span>, { strict</span><span>:</span><span> </span><span>true</span><span> });</span></span>
<span><span>const</span><span> query </span><span>=</span><span> db.</span><span>query</span><span>(</span><span>"</span><span>SELECT $value as value</span><span>"</span><span>).</span><span>safeIntegers</span><span>(</span><span>true</span><span>);</span></span>
<span></span>
<span><span>const</span><span> { value } </span><span>=</span><span> query.</span><span>get</span><span>({</span></span>
<span><span>  value</span><span>:</span><span> </span><span>BigInt</span><span>(</span><span>Number</span><span>.MAX_SAFE_INTEGER) </span><span>+</span><span> </span><span>1</span><span>n</span><span>,</span></span>
<span><span>});</span></span>
<span><span>console.</span><span>log</span><span>(value); </span><span>// =&gt; 9007199254740992n</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="reliable-cleanup-with-using" id="reliable-cleanup-with-using"><a name="reliable-cleanup-with-using"></a><a href="#reliable-cleanup-with-using">Reliable cleanup with <code>using</code></a></h3><p>With JavaScript's <a href="https://github.com/tc39/proposal-explicit-resource-management?tab=readme-ov-file#ecmascript-explicit-resource-management"><code>using</code></a> syntax, you can automatically close statements and databases when their variables go out of scope. This allows you to clean up database resources, even if there's a thrown error. <a href="#resource-management-with-using">Read on</a> for more details on Bun's support for this new JavaScript feature.</p><div><pre><code><span><span>import</span><span> { Database } </span><span>from</span><span> </span><span>"</span><span>bun:sqlite</span><span>"</span><span>;</span></span>
<span></span>
<span><span>{</span></span>
<span><span>  using db </span><span>=</span><span> </span><span>new</span><span> </span><span>Database</span><span>(</span><span>"</span><span>file.db</span><span>"</span><span>);</span></span>
<span><span>  using query </span><span>=</span><span> db.</span><span>query</span><span>(</span><span>"</span><span>SELECT * FROM users</span><span>"</span><span>);</span></span>
<span><span>  </span><span>for</span><span> (</span><span>const</span><span> row </span><span>of</span><span> query.</span><span>all</span><span>()) {</span></span>
<span><span>    </span><span>throw</span><span> </span><span>new</span><span> </span><span>Error</span><span>(</span><span>"</span><span>Oops!</span><span>"</span><span>); </span><span>// no try/catch block needed!</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>// scope ends here, so `db` and `query` are automatically closed</span></span>
<span></span></code></pre></div><h2 level="2" anchor-id="compile-and-run-c-from-javascript" id="compile-and-run-c-from-javascript"><a name="compile-and-run-c-from-javascript"></a><a href="#compile-and-run-c-from-javascript">Compile and run C from JavaScript</a></h2><p>We've added experimental support for compiling and running C from JavaScript. This is a simple way to use C system libraries from JavaScript <em>without a build step</em>.</p><div id="llLuIhiAxG"><div><p>random.c</p><div><pre><code><span><span>#include</span><span> </span><span>&lt;</span><span>stdio.h</span><span>&gt;</span></span>
<span><span>#include</span><span> </span><span>&lt;</span><span>stdlib.h</span><span>&gt;</span></span>
<span></span>
<span><span>int</span><span> </span><span>random</span><span>() {</span></span>
<span><span>  </span><span>return</span><span> </span><span>rand</span><span>() </span><span>+</span><span> </span><span>42</span><span>;</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div><div><p>random.ts</p><div><pre><code><span><span>import</span><span> { cc } </span><span>from</span><span> </span><span>"</span><span>bun:ffi</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> { </span><span>symbols</span><span>:</span><span> { random } } </span><span>=</span><span> </span><span>cc</span><span>({</span></span>
<span><span>  source</span><span>:</span><span> </span><span>"</span><span>./random.c</span><span>"</span><span>,</span></span>
<span><span>  symbols</span><span>:</span><span> {</span></span>
<span><span>    random</span><span>:</span><span> {</span></span>
<span><span>      returns</span><span>:</span><span> </span><span>"</span><span>int</span><span>"</span><span>,</span></span>
<span><span>      args</span><span>:</span><span> [],</span></span>
<span><span>    },</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(</span><span>random</span><span>()); </span><span>// 42</span></span>
<span></span></code></pre></div></div></div><h3 level="3" anchor-id="why-is-this-useful" id="why-is-this-useful"><a name="why-is-this-useful"></a><a href="#why-is-this-useful">Why is this useful?</a></h3><p>For advanced use-cases or where performance is really important, you sometimes need to use system libraries from JavaScript. Today, the most common way to do this is by compiling a <a href="https://nodejs.org/api/n-api.html">N-API addon</a> using <a href="https://github.com/nodejs/node-gyp"><code>node-gyp</code></a>. You might notice if a package uses this, because it runs a postinstall script when you install it.</p><p>However, this isn't a great experience. Your system needs a modern version of Python and a C compiler, which is usually installed using a command like <code>apt install build-essential</code>.</p><p>And hopefully you don't run into a compiler or node-gyp error, which can be quite frustrating.</p><div><pre><code><span><span>gyp ERR</span><span>!</span><span> </span><span>command</span><span> </span><span>"</span><span>/usr/bin/node</span><span>"</span><span> </span><span>"</span><span>/tmp/node-gyp@latest--bunx/node_modules/.bin/node-gyp</span><span>"</span><span> </span><span>"</span><span>configure</span><span>"</span><span> </span><span>"</span><span>build</span><span>"</span></span>
<span><span>gyp ERR</span><span>!</span><span> cwd /bun/test/node_modules/bktree-fast</span></span>
<span><span>gyp ERR</span><span>!</span><span> node -v v12.22.9</span></span>
<span><span>gyp ERR</span><span>!</span><span> node-gyp -v v9.4.0</span></span>
<span><span>gyp ERR</span><span>!</span><span> Node-gyp failed to build your package.</span></span>
<span><span>gyp ERR</span><span>!</span><span> Try to update npm and/or node-gyp and </span><span>if</span><span> it does not </span><span>help</span><span> file an issue with the package author.</span></span>
<span><span>error: </span><span>"</span><span>node-gyp</span><span>"</span><span> exited with code 7 (SIGBUS)</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="how-does-it-work" id="how-does-it-work"><a name="how-does-it-work"></a><a href="#how-does-it-work">How does it work?</a></h3><p>In case you didn't know, Bun embeds a built-in C compiler called <a href="https://github.com/TinyCC/tinycc"><code>tinycc</code></a>. Surprise!</p><p>Unlike traditional C compilers, like <code>gcc</code> or <code>clang</code>, that can take seconds to compile a simple program, <code>tinycc</code> compiles simple C code in milliseconds. This makes it possible for Bun to compile your C code on-demand, without a build step.</p><p>Using the <a href="https://bun.sh/docs/api/cc"><code>bun:ffi</code></a> APIs, you can compile and run C code from JavaScript. Here's an example project that uses the <a href="https://bun.sh/docs/api/node-api">N-API</a> to return a JavaScript string from C code.</p><div id="hiWPLqPndC"><div><p>hello-napi.c</p><div><pre><code><span><span>#include</span><span> </span><span>&lt;</span><span>node/node_api.h</span><span>&gt;</span></span>
<span></span>
<span><span>napi_value </span><span>hello_napi</span><span>(napi_env </span><span>env</span><span>) {</span></span>
<span><span>  napi_value result;</span></span>
<span><span>  </span><span>napi_create_string_utf8</span><span>(env, </span><span>"</span><span>Hello, N-API!</span><span>"</span><span>, NAPI_AUTO_LENGTH, </span><span>&amp;</span><span>result);</span></span>
<span><span>  </span><span>return</span><span> result;</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div><div><p>hello-napi.js</p><div><pre><code><span><span>import</span><span> { cc } </span><span>from</span><span> </span><span>"</span><span>bun:ffi</span><span>"</span><span>;</span></span>
<span><span>import</span><span> source </span><span>from</span><span> </span><span>"</span><span>./hello-napi.c</span><span>"</span><span> with { type: "file" };</span></span>
<span></span>
<span><span>const</span><span> hello </span><span>=</span><span> </span><span>cc</span><span>({</span></span>
<span><span>  source,</span></span>
<span><span>  symbols</span><span>:</span><span> {</span></span>
<span><span>    hello_napi</span><span>:</span><span> {</span></span>
<span><span>      args</span><span>:</span><span> [</span><span>"</span><span>napi_env</span><span>"</span><span>],</span></span>
<span><span>      returns</span><span>:</span><span> </span><span>"</span><span>napi_value</span><span>"</span><span>,</span></span>
<span><span>    },</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(</span><span>hello</span><span>());</span></span>
<span><span>// =&gt; "Hello, N-API!"</span></span>
<span></span></code></pre></div></div></div><p>Instead of requiring a build step with <code>node-gyp</code>, as long as you have Bun, this just works.</p><h2 level="2" anchor-id="musl-support" id="musl-support"><a name="musl-support"></a><a href="#musl-support">musl support</a></h2><p>In Bun 1.2, we've introduced a new build of Bun that works on Linux distros that use the <a href="https://www.musl-libc.org/">musl libc</a> instead of glibc, like <a href="https://www.alpinelinux.org/">Alpine Linux</a>. This is supported on both Linux x64 and aarch64.</p><p>You can also use the <a href="https://hub.docker.com/r/oven/bun">alpine version</a> of Bun in Docker.</p><div><pre><code><span><span>docker run --rm -it oven/bun:alpine bun --print </span><span>'</span><span>Bun.file("/etc/alpine-release").text()</span><span>'</span></span></code></pre></div><p>While musl enables smaller container images, it tends to perform slightly slower than the glibc version of Bun. We recommend using glibc unless you have a specific reason to use musl.</p><h2 level="2" anchor-id="javascript-features" id="javascript-features"><a name="javascript-features"></a><a href="#javascript-features">JavaScript features</a></h2><p>JavaScript is a language that is constantly evolving. In Bun 1.2, even more JavaScript features are available thanks to the collaboration of the <a href="https://tc39.es/">TC39</a> committees, and the hard work of the <a href="https://webkit.org/">WebKit</a> team.</p><h3 level="3" anchor-id="import-attributes" id="import-attributes"><a name="import-attributes"></a><a href="#import-attributes">Import attributes</a></h3><p>You can now specify an <a href="https://github.com/tc39/proposal-import-attributes">import attribute</a> when importing a file. This is useful when you want to import a file that isn't JavaScript code, like a JSON object or a text file.</p><div><pre><code><span><span>import</span><span> json </span><span>from</span><span> </span><span>"</span><span>./package.json</span><span>"</span><span> with { type: "json" };</span></span>
<span><span>typeof</span><span> json; </span><span>// "object"</span></span>
<span></span>
<span><span>import</span><span> html </span><span>from</span><span> </span><span>"</span><span>./index.html</span><span>"</span><span> with { type: "text" };</span></span>
<span><span>typeof</span><span> html; </span><span>// "string"</span></span>
<span></span>
<span><span>import</span><span> toml </span><span>from</span><span> </span><span>"</span><span>./bunfig.toml</span><span>"</span><span> with { type: "toml" };</span></span>
<span><span>typeof</span><span> toml; </span><span>// "object"</span></span>
<span></span></code></pre></div><p>You can also specify import attributes using <code>import()</code>.</p><div><pre><code><span><span>const</span><span> { </span><span>default</span><span>:</span><span> json } </span><span>=</span><span> </span><span>await</span><span> </span><span>import</span><span>(</span><span>"</span><span>./package.json</span><span>"</span><span>, {</span></span>
<span><span>  with</span><span>:</span><span> { type</span><span>:</span><span> </span><span>"</span><span>json</span><span>"</span><span> },</span></span>
<span><span>});</span></span>
<span><span>typeof</span><span> json; </span><span>// "object"</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="resource-management-with-using" id="resource-management-with-using"><a name="resource-management-with-using"></a><a href="#resource-management-with-using">Resource management with <code>using</code></a></h3><p>With the newly introduced <a href="https://github.com/tc39/proposal-explicit-resource-management?tab=readme-ov-file#ecmascript-explicit-resource-management"><code>using</code></a> syntax in JavaScript, you can automatically close resources when a variable goes out of scope.</p><p>Instead of defining a variable with <code>let</code> or <code>const</code>, you can now define a variable with <code>using</code>.</p><div><pre><code><span><span>import</span><span> { serve } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>{</span></span>
<span><span>  using server </span><span>=</span><span> </span><span>serve</span><span>({</span></span>
<span><span>    port</span><span>:</span><span> </span><span>0</span><span>,</span></span>
<span><span>    </span><span>fetch</span><span>(</span><span>request</span><span>) {</span></span>
<span><span>      </span><span>return</span><span> </span><span>new</span><span> </span><span>Response</span><span>(</span><span>"</span><span>Hello, world!</span><span>"</span><span>);</span></span>
<span><span>    },</span></span>
<span><span>  });</span></span>
<span></span>
<span><span>  </span><span>doStuff</span><span>(server);</span></span>
<span><span>}</span></span>
<span></span>
<span><span>function</span><span> </span><span>doStuff</span><span>(</span><span>server</span><span>) {</span></span>
<span><span>  </span><span>// ...</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><p>In this example, the server is automatically closed when the <code>server</code> variable goes out of scope, even if an exception is thrown. This is useful for ensuring that resources are properly cleaned up, especially in tests.</p><p>To support this, an object's prototype must define a <code>[Symbol.dispose]</code> method, or <code>[Symbol.asyncDispose]</code> method if it's an async resource.</p><div><pre><code><span><span>class</span><span> </span><span>Resource</span><span> {</span></span>
<span><span>  [</span><span>Symbol</span><span>.dispose]() { </span><span>/* ... */</span><span> }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>using resource </span><span>=</span><span> </span><span>new</span><span> </span><span>Resource</span><span>();</span></span>
<span></span>
<span><span>class</span><span> </span><span>AsyncResource</span><span> {</span></span>
<span><span>  </span><span>async</span><span> [</span><span>Symbol</span><span>.asyncDispose]() { </span><span>/* ... */</span><span> }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>await</span><span> using asyncResource </span><span>=</span><span> </span><span>new</span><span> </span><span>AsyncResource</span><span>();</span></span>
<span></span></code></pre></div><p>We've also added support for <code>using</code> in dozens of Bun APIs, including <code>Bun.spawn()</code>, <code>Bun.serve()</code>, <code>Bun.connect()</code>, <code>Bun.listen()</code>, and <code>bun:sqlite</code>.</p><div><pre><code><span><span>import</span><span> { spawn } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span><span>import</span><span> { test, expect } </span><span>from</span><span> </span><span>"</span><span>bun:test</span><span>"</span><span>;</span></span>
<span></span>
<span><span>test</span><span>(</span><span>"</span><span>able to spawn a process</span><span>"</span><span>, </span><span>async</span><span> () </span><span>=&gt;</span><span> {</span></span>
<span><span>  using subprocess </span><span>=</span><span> </span><span>spawn</span><span>({</span></span>
<span><span>    cmd</span><span>:</span><span> [process.execPath, </span><span>"</span><span>-e</span><span>"</span><span>, </span><span>"</span><span>console.log('Hello, world!')</span><span>"</span><span>],</span></span>
<span><span>    stdout</span><span>:</span><span> </span><span>"</span><span>pipe</span><span>"</span><span>,</span></span>
<span><span>  });</span></span>
<span></span>
<span><span>  </span><span>// Even if this expectation fails, the subprocess will still be closed.</span></span>
<span><span>  </span><span>const</span><span> stdout </span><span>=</span><span> </span><span>new</span><span> </span><span>Response</span><span>(subprocess.stdout).</span><span>text</span><span>();</span></span>
<span><span>  </span><span>await</span><span> </span><span>expect</span><span>(stdout).resolves.</span><span>toBe</span><span>(</span><span>"</span><span>Hello, world!</span><span>"</span><span>);</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="promise-withresolvers" id="promise-withresolvers"><a name="promise-withresolvers"></a><a href="#promise-withresolvers"><code>Promise.withResolvers()</code></a></h3><p>You can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers"><code>Promise.withResolvers()</code></a> to create a promise that resolves or rejects when you call the <code>resolve</code> or <code>reject</code> functions.</p><div><pre><code><span><span>const</span><span> { promise, resolve, reject } </span><span>=</span><span> </span><span>Promise</span><span>.</span><span>withResolvers</span><span>();</span></span>
<span><span>setTimeout</span><span>(() </span><span>=&gt;</span><span> </span><span>resolve</span><span>(), </span><span>1000</span><span>);</span></span>
<span><span>await</span><span> promise;</span></span>
<span></span></code></pre></div><p>This is a useful alternative to <code>new Promise()</code>, since you don't need to create a new scope.</p><div><pre><code><span><span>const</span><span> promise </span><span>=</span><span> </span><span>new</span><span> </span><span>Promise</span><span>((</span><span>resolve</span><span>, </span><span>reject</span><span>) </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>setTimeout</span><span>(() </span><span>=&gt;</span><span> </span><span>resolve</span><span>(), </span><span>1000</span><span>);</span></span>
<span><span>});</span></span>
<span><span>await</span><span> promise;</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="promise-try" id="promise-try"><a name="promise-try"></a><a href="#promise-try"><code>Promise.try()</code></a></h3><p>You can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/try"><code>Promise.try()</code></a> to create a promise that wraps a synchronous or asynchronous function.</p><div><pre><code><span><span>const</span><span> </span><span>syncFn</span><span> </span><span>=</span><span> () </span><span>=&gt;</span><span> </span><span>1</span><span> </span><span>+</span><span> </span><span>1</span><span>;</span></span>
<span><span>const</span><span> </span><span>asyncFn</span><span> </span><span>=</span><span> </span><span>async</span><span> (</span><span>a</span><span>, </span><span>b</span><span>) </span><span>=&gt;</span><span> </span><span>1</span><span> </span><span>+</span><span> a </span><span>+</span><span> b;</span></span>
<span></span>
<span><span>await</span><span> </span><span>Promise</span><span>.</span><span>try</span><span>(syncFn); </span><span>// =&gt; 2</span></span>
<span><span>await</span><span> </span><span>Promise</span><span>.</span><span>try</span><span>(asyncFn, </span><span>2</span><span>, </span><span>3</span><span>); </span><span>// =&gt; 6</span></span>
<span></span></code></pre></div><p>This is useful if you don't know if a function is synchronous or asynchronous. Previously, you would have to do something like this:</p><div><pre><code><span><span>await</span><span> </span><span>new</span><span> </span><span>Promise</span><span>((</span><span>resolve</span><span>) </span><span>=&gt;</span><span> </span><span>resolve</span><span>(</span><span>syncFn</span><span>()));</span></span>
<span><span>await</span><span> </span><span>new</span><span> </span><span>Promise</span><span>((</span><span>resolve</span><span>) </span><span>=&gt;</span><span> </span><span>resolve</span><span>(</span><span>asyncFn</span><span>(</span><span>2</span><span>, </span><span>3</span><span>)));</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="error-iserror" id="error-iserror"><a name="error-iserror"></a><a href="#error-iserror"><code>Error.isError()</code></a></h3><p>You can now check if an object is an <code>Error</code> instance using <a href="https://github.com/tc39/proposal-is-error/tree/main?tab=readme-ov-file#erroriserror"><code>Error.isError()</code></a>.</p><div><pre><code><span><span>Error</span><span>.</span><span>isError</span><span>(</span><span>new</span><span> </span><span>Error</span><span>()); </span><span>// =&gt; true</span></span>
<span><span>Error</span><span>.</span><span>isError</span><span>({}); </span><span>// =&gt; false</span></span>
<span><span>Error</span><span>.</span><span>isError</span><span>(</span><span>new</span><span> (</span><span>class</span><span> </span><span>Error</span><span> {})()); </span><span>// =&gt; false</span></span>
<span><span>Error</span><span>.</span><span>isError</span><span>({ [</span><span>Symbol</span><span>.toStringTag]</span><span>:</span><span> </span><span>"</span><span>Error</span><span>"</span><span> }); </span><span>// =&gt; false</span></span>
<span></span></code></pre></div><p>This is more correct than using <code>instanceof</code> because the prototype chain can be tampered with, and <code>instanceof</code> can return false-negatives when using <code>node:vm</code>.</p><div><pre><code><span><span>import</span><span> { runInNewContext } </span><span>from</span><span> </span><span>"</span><span>node:vm</span><span>"</span><span>;</span></span>
<span><span>const</span><span> crossRealmError </span><span>=</span><span> </span><span>runInNewContext</span><span>(</span><span>"</span><span>new Error()</span><span>"</span><span>);</span></span>
<span></span>
<span><span>crossRealmError </span><span>instanceof</span><span> </span><span>Error</span><span>; </span><span>// =&gt; false</span></span>
<span><span>Error</span><span>.</span><span>isError</span><span>(crossRealmError); </span><span>// =&gt; true</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="uint8array-tobase64" id="uint8array-tobase64"><a name="uint8array-tobase64"></a><a href="#uint8array-tobase64"><code>Uint8Array.toBase64()</code></a></h3><p>You can now encode and decode base64 strings using <code>Uint8Array</code>.</p><ul><li><code>toBase64()</code> converts a <code>Uint8Array</code> to a base64 string</li><li><code>fromBase64()</code> converts a base64 string to a <code>Uint8Array</code></li></ul><div><pre><code><span><span>new</span><span> </span><span>Uint8Array</span><span>([</span><span>1</span><span>, </span><span>2</span><span>, </span><span>3</span><span>, </span><span>4</span><span>, </span><span>5</span><span>]).</span><span>toBase64</span><span>(); </span><span>// "AQIDBA=="</span></span>
<span><span>Unit8Array.</span><span>fromBase64</span><span>(</span><span>"</span><span>AQIDBA==</span><span>"</span><span>); </span><span>// [1, 2, 3, 4, 5]</span></span>
<span></span></code></pre></div><p>These APIs are standard alternatives to the usage of <code>Buffer.toString("base64")</code> in Node.js.</p><h3 level="3" anchor-id="uint8array-tohex" id="uint8array-tohex"><a name="uint8array-tohex"></a><a href="#uint8array-tohex"><code>Uint8Array.toHex()</code></a></h3><p>You can also convert <code>Uint8Array</code> to and from hex strings.</p><ul><li><code>toHex()</code> converts a <code>Uint8Array</code> to a hex string</li><li><code>fromHex()</code> converts a hex string to a <code>Uint8Array</code></li></ul><div><pre><code><span><span>new</span><span> </span><span>Uint8Array</span><span>([</span><span>1</span><span>, </span><span>2</span><span>, </span><span>3</span><span>, </span><span>4</span><span>, </span><span>5</span><span>]).</span><span>toHex</span><span>(); </span><span>// "0102030405"</span></span>
<span><span>Unit8Array.</span><span>fromHex</span><span>(</span><span>"</span><span>0102030405</span><span>"</span><span>); </span><span>// [1, 2, 3, 4, 5]</span></span>
<span></span></code></pre></div><p>These APIs are standard alternatives to the usage of <code>Buffer.toString("hex")</code> in Node.js.</p><h3 level="3" anchor-id="iterator-helpers" id="iterator-helpers"><a name="iterator-helpers"></a><a href="#iterator-helpers">Iterator helpers</a></h3><p>There are new APIs that make it easier to work with JavaScript iterators and generators.</p><h4 level="4" id="iterator-map-fn"><code>iterator.map(fn)</code></h4><p>Returns an iterator that yields the results of the <code>fn</code> function applied to each value of the original iterator, similar to <code>Array.prototype.map</code>.</p><div><pre><code><span><span>function*</span><span> </span><span>range</span><span>(</span><span>start</span><span>:</span><span> </span><span>number</span><span>, </span><span>end</span><span>:</span><span> </span><span>number</span><span>)</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>number</span><span>&gt; {</span></span>
<span><span>  </span><span>for</span><span> (</span><span>let</span><span> i </span><span>=</span><span> start; i </span><span>&lt;</span><span> end; i</span><span>++</span><span>) {</span></span>
<span><span>    </span><span>yield</span><span> i;</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>range</span><span>(</span><span>3</span><span>, </span><span>5</span><span>).</span><span>map</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> x </span><span>*</span><span> </span><span>2</span><span>);</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { value: 6, done: false }</span></span>
<span></span></code></pre></div><h4 level="4" id="iterator-flatmap-fn"><code>iterator.flatMap(fn)</code></h4><p>Returns an iterator that yields the values of the original iterator, but flattens the results of the <code>fn</code> function, similar to <code>Array.prototype.flatMap</code>.</p><div><pre><code><span><span>function*</span><span> </span><span>randomThoughts</span><span>()</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>string</span><span>&gt; {</span></span>
<span><span>  </span><span>yield</span><span> </span><span>"</span><span>Bun is written in Zig</span><span>"</span><span>;</span></span>
<span><span>  </span><span>yield</span><span> </span><span>"</span><span>Bun runs JavaScript and TypeScript</span><span>"</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>randomThoughts</span><span>().</span><span>flatMap</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> x.</span><span>split</span><span>(</span><span>"</span><span> </span><span>"</span><span>));</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { value: "Bun", done: false }</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { value: "is", done: false }</span></span>
<span><span>// ...</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { value: "TypeScript", done: false }</span></span>
<span></span></code></pre></div><h4 level="4" id="iterator-filter-fn"><code>iterator.filter(fn)</code></h4><p>Returns an iterator that only yields values that pass the <code>fn</code> predicate, similar to <code>Array.prototype.filter</code>.</p><div><pre><code><span><span>function*</span><span> </span><span>range</span><span>(</span><span>start</span><span>:</span><span> </span><span>number</span><span>, </span><span>end</span><span>:</span><span> </span><span>number</span><span>)</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>number</span><span>&gt; {</span></span>
<span><span>  </span><span>for</span><span> (</span><span>let</span><span> i </span><span>=</span><span> start; i </span><span>&lt;</span><span> end; i</span><span>++</span><span>) {</span></span>
<span><span>    </span><span>yield</span><span> i;</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>range</span><span>(</span><span>3</span><span>, </span><span>5</span><span>).</span><span>filter</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> x </span><span>%</span><span> </span><span>2</span><span> </span><span>===</span><span> </span><span>0</span><span>);</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { value: 4, done: false }</span></span>
<span></span></code></pre></div><h4 level="4" id="iterator-take-n"><code>iterator.take(n)</code></h4><p>Returns an iterator that yields the first <code>n</code> values of the original iterator.</p><div><pre><code><span><span>function*</span><span> </span><span>odds</span><span>()</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>number</span><span>&gt; {</span></span>
<span><span>  </span><span>let</span><span> i </span><span>=</span><span> </span><span>1</span><span>;</span></span>
<span><span>  </span><span>while</span><span> (</span><span>true</span><span>) {</span></span>
<span><span>    </span><span>yield</span><span> i;</span></span>
<span><span>    i </span><span>+=</span><span> </span><span>2</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>odds</span><span>().</span><span>take</span><span>(</span><span>1</span><span>);</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { value: 1, done: false }</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { done: true }</span></span>
<span></span></code></pre></div><h4 level="4" id="iterator-drop-n"><code>iterator.drop(n)</code></h4><p>Returns an iterator that yields all values of the original iterator, except the first <code>n</code> values.</p><div><pre><code><span><span>function*</span><span> </span><span>evens</span><span>()</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>number</span><span>&gt; {</span></span>
<span><span>  </span><span>let</span><span> i </span><span>=</span><span> </span><span>0</span><span>;</span></span>
<span><span>  </span><span>while</span><span> (</span><span>true</span><span>) {</span></span>
<span><span>    </span><span>yield</span><span> i;</span></span>
<span><span>    i </span><span>+=</span><span> </span><span>2</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>evens</span><span>().</span><span>drop</span><span>(</span><span>2</span><span>);</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { value: 4, done: false }</span></span>
<span><span>result.</span><span>next</span><span>(); </span><span>// { value: 6, done: false }</span></span>
<span></span></code></pre></div><h4 level="4" id="iterator-reduce-fn-initialvalue"><code>iterator.reduce(fn, initialValue)</code></h4><p>Reduces the values of an iterator with a function, similar to <code>Array.prototype.reduce</code>.</p><div><pre><code><span><span>function*</span><span> </span><span>powersOfTwo</span><span>()</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>number</span><span>&gt; {</span></span>
<span><span>  </span><span>let</span><span> i </span><span>=</span><span> </span><span>1</span><span>;</span></span>
<span><span>  </span><span>while</span><span> (</span><span>true</span><span>) {</span></span>
<span><span>    </span><span>yield</span><span> i;</span></span>
<span><span>    i </span><span>*=</span><span> </span><span>2</span><span>;</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>powersOfTwo</span><span>()</span></span>
<span><span>  .</span><span>take</span><span>(</span><span>5</span><span>)</span></span>
<span><span>  .</span><span>reduce</span><span>((</span><span>acc</span><span>, </span><span>x</span><span>) </span><span>=&gt;</span><span> acc </span><span>+</span><span> x, </span><span>0</span><span>);</span></span>
<span><span>console.</span><span>log</span><span>(result); </span><span>// 15</span></span>
<span></span></code></pre></div><h4 level="4" id="iterator-toarray"><code>iterator.toArray()</code></h4><p>Returns an array that contains all the values of the original iterator. Make sure that the iterator is finite, otherwise this will cause an infinite loop.</p><div><pre><code><span><span>function*</span><span> </span><span>range</span><span>(</span><span>start</span><span>:</span><span> </span><span>number</span><span>, </span><span>end</span><span>:</span><span> </span><span>number</span><span>)</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>number</span><span>&gt; {</span></span>
<span><span>  </span><span>for</span><span> (</span><span>let</span><span> i </span><span>=</span><span> start; i </span><span>&lt;</span><span> end; i</span><span>++</span><span>) {</span></span>
<span><span>    </span><span>yield</span><span> i;</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>range</span><span>(</span><span>1</span><span>, </span><span>5</span><span>).</span><span>toArray</span><span>();</span></span>
<span><span>console.</span><span>log</span><span>(result); </span><span>// [1, 2, 3, 4]</span></span>
<span></span></code></pre></div><h4 level="4" id="iterator-foreach-fn"><code>iterator.forEach(fn)</code></h4><p>Calls the <code>fn</code> function on each value of the original iterator, similar to <code>Array.prototype.forEach</code>.</p><div><pre><code><span><span>function*</span><span> </span><span>randomThoughts</span><span>()</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>string</span><span>&gt; {</span></span>
<span><span>  </span><span>yield</span><span> </span><span>"</span><span>Bun is written in Zig</span><span>"</span><span>;</span></span>
<span><span>  </span><span>yield</span><span> </span><span>"</span><span>Bun runs JavaScript and TypeScript</span><span>"</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>randomThoughts</span><span>().</span><span>forEach</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> console.</span><span>log</span><span>(x));</span></span>
<span><span>// Bun is written in Zig</span></span>
<span><span>// Bun runs JavaScript and TypeScript</span></span>
<span></span></code></pre></div><h4 level="4" id="iterator-find-fn"><code>iterator.find(fn)</code></h4><p>Returns the first value of the original iterator that passes the <code>fn</code> predicate, similar to <code>Array.prototype.find</code>. If no such value exists, it returns <code>undefined</code>.</p><div><pre><code><span><span>function*</span><span> </span><span>range</span><span>(</span><span>start</span><span>:</span><span> </span><span>number</span><span>, </span><span>end</span><span>:</span><span> </span><span>number</span><span>)</span><span>:</span><span> </span><span>Generator</span><span>&lt;</span><span>number</span><span>&gt; {</span></span>
<span><span>  </span><span>for</span><span> (</span><span>let</span><span> i </span><span>=</span><span> start; i </span><span>&lt;</span><span> end; i</span><span>++</span><span>) {</span></span>
<span><span>    </span><span>yield</span><span> i;</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>range</span><span>(</span><span>0</span><span>, </span><span>99</span><span>).</span><span>find</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> x </span><span>%</span><span> </span><span>100</span><span> </span><span>===</span><span> </span><span>0</span><span>);</span></span>
<span><span>console.</span><span>log</span><span>(result); </span><span>// undefined</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="float16array" id="float16array"><a name="float16array"></a><a href="#float16array"><code>Float16Array</code></a></h3><p>There's now support for 16-bit floating point arrays using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float16Array"><code>Float16Array</code></a>. While 16-bit floating point numbers are less precise than 32-bit floating point numbers, they are much more memory efficient.</p><div><pre><code><span><span>const</span><span> float16 </span><span>=</span><span> </span><span>new</span><span> </span><span>Float16Array</span><span>(</span><span>3</span><span>);</span></span>
<span><span>const</span><span> float32 </span><span>=</span><span> </span><span>new</span><span> </span><span>Float32Array</span><span>(</span><span>3</span><span>);</span></span>
<span></span>
<span><span>for</span><span> (</span><span>let</span><span> i </span><span>=</span><span> </span><span>0</span><span>; i </span><span>&lt;</span><span> </span><span>3</span><span>; i</span><span>++</span><span>) {</span></span>
<span><span>  float16[i] </span><span>=</span><span> i </span><span>+</span><span> </span><span>0.123</span><span>;</span></span>
<span><span>  float32[i] </span><span>=</span><span> i </span><span>+</span><span> </span><span>0.123</span><span>;</span></span>
<span><span>}</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(float16); </span><span>// Float16Array(3) [ 0, 1.123046875, 2.123046875 ]</span></span>
<span><span>console.</span><span>log</span><span>(float32); </span><span>// Float32Array(3) [ 0, 1.1230000257492065, 2.122999906539917 ]</span></span>
<span></span></code></pre></div><h2 level="2" anchor-id="web-apis" id="web-apis"><a name="web-apis"></a><a href="#web-apis">Web APIs</a></h2><p>In addition to new JavaScript features, there are also new Web-standard APIs that you can use in Bun.</p><h3 level="3" anchor-id="textdecoderstream" id="textdecoderstream"><a name="textdecoderstream"></a><a href="#textdecoderstream"><code>TextDecoderStream</code></a></h3><p>You can now use <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextDecoderStream"><code>TextDecoderStream</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextEncoderStream"><code>TextEncoderStream</code></a> to encode and decode streams of data. These APIs are the streaming equivalents of <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder"><code>TextDecoder</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder"><code>TextEncoder</code></a>.</p><p>You can use <code>TextDecoderStream</code> to decode a stream of bytes into a stream of UTF-8 strings.</p><div><pre><code><span><span>const</span><span> response </span><span>=</span><span> </span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>https://example.com</span><span>"</span><span>);</span></span>
<span><span>const</span><span> body </span><span>=</span><span> response.body.</span><span>pipeThrough</span><span>(</span><span>new</span><span> </span><span>TextDecoderStream</span><span>());</span></span>
<span></span>
<span><span>for</span><span> </span><span>await</span><span> (</span><span>const</span><span> chunk </span><span>of</span><span> body) {</span></span>
<span><span>  console.</span><span>log</span><span>(chunk); </span><span>// typeof chunk === "string"</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><p>Or you can use <code>TextEncoderStream</code> to encode a stream of UTF-8 strings into a stream of bytes. In Bun, this is up to <a href="https://twitter.com/jarredsumner/status/1822221334056935771">30x faster</a> than in Node.js.</p><div><pre><code><span><span>const</span><span> stream </span><span>=</span><span> </span><span>new</span><span> </span><span>ReadableStream</span><span>({</span></span>
<span><span>  </span><span>start</span><span>(</span><span>controller</span><span>) {</span></span>
<span><span>    controller.</span><span>enqueue</span><span>(</span><span>"</span><span>Hello, world!</span><span>"</span><span>);</span></span>
<span><span>    controller.</span><span>close</span><span>();</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span><span>const</span><span> body </span><span>=</span><span> stream.</span><span>pipeThrough</span><span>(</span><span>new</span><span> </span><span>TextEncoderStream</span><span>());</span></span>
<span></span>
<span><span>for</span><span> </span><span>await</span><span> (</span><span>const</span><span> chunk </span><span>of</span><span> body) {</span></span>
<span><span>  console.</span><span>log</span><span>(chunk); </span><span>// chunk instanceof Uint8Array</span></span>
<span><span>}</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="textdecoder-with-stream-option" id="textdecoder-with-stream-option"><a name="textdecoder-with-stream-option"></a><a href="#textdecoder-with-stream-option"><code>TextDecoder</code> with <code>stream</code> option</a></h3><p>There is also support for the <code>stream</code> option in <code>TextDecoder</code>. This tells the decoder that chunks are part of a larger stream, and it should not throw an error if chunk is not a complete UTF-8 code point.</p><div><pre><code><span><span>const</span><span> decoder </span><span>=</span><span> </span><span>new</span><span> </span><span>TextDecoder</span><span>(</span><span>"</span><span>utf-8</span><span>"</span><span>);</span></span>
<span><span>const</span><span> first </span><span>=</span><span> decoder.</span><span>decode</span><span>(</span><span>new</span><span> </span><span>Uint8Array</span><span>([</span><span>226</span><span>, </span><span>153</span><span>]), { stream</span><span>:</span><span> </span><span>true</span><span> });</span></span>
<span><span>const</span><span> second </span><span>=</span><span> decoder.</span><span>decode</span><span>(</span><span>new</span><span> </span><span>Uint8Array</span><span>([</span><span>165</span><span>]), { stream</span><span>:</span><span> </span><span>true</span><span> });</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(first); </span><span>// ""</span></span>
<span><span>console.</span><span>log</span><span>(second); </span><span>// "♥"</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="bytes-api" id="bytes-api"><a name="bytes-api"></a><a href="#bytes-api"><code>bytes()</code> API</a></h3><p>You can now use the <code>bytes()</code> method on streams, which returns a <code>Uint8Array</code> of the stream's data.</p><div><pre><code><span><span>const</span><span> response </span><span>=</span><span> </span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>https://example.com/</span><span>"</span><span>);</span></span>
<span><span>const</span><span> bytes </span><span>=</span><span> </span><span>await</span><span> response.</span><span>bytes</span><span>();</span></span>
<span><span>console.</span><span>log</span><span>(bytes); </span><span>// Uint8Array(1256) [ 60, 33, ... ]</span></span>
<span></span></code></pre></div><p>Previously, you'd have to use <code>arrayBuffer()</code>, then create a new <code>Uint8Array</code>:</p><div><pre><code><span><span>const</span><span> blob </span><span>=</span><span> </span><span>new</span><span> </span><span>Blob</span><span>([</span><span>"</span><span>Hello, world!</span><span>"</span><span>]);</span></span>
<span><span>const</span><span> buffer </span><span>=</span><span> </span><span>await</span><span> blob.</span><span>arrayBuffer</span><span>();</span></span>
<span><span>const</span><span> bytes </span><span>=</span><span> </span><span>new</span><span> </span><span>Uint8Array</span><span>(buffer);</span></span>
<span></span></code></pre></div><p>The <code>bytes()</code> method is supported by several APIs, including <code>Response</code>, <code>Blob</code>, and <code>Bun.file()</code>.</p><div><pre><code><span><span>import</span><span> { file } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> content </span><span>=</span><span> </span><span>await</span><span> </span><span>file</span><span>(</span><span>"</span><span>./hello.txt</span><span>"</span><span>).</span><span>bytes</span><span>();</span></span>
<span><span>console.</span><span>log</span><span>(content); </span><span>// Uint8Array(1256) [ 60, 33, ... ]</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="streaming-fetch-uploads" id="streaming-fetch-uploads"><a name="streaming-fetch-uploads"></a><a href="#streaming-fetch-uploads">Streaming <code>fetch()</code> uploads</a></h3><p>You can now send a <a href="https://developer.mozilla.org/en-US/docs/Web/API/fetch"><code>fetch()</code></a> request with a streaming body. This is useful for uploading large files, or streams of data where the content length is not known ahead of time.</p><div><pre><code><span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>https://example.com/upload</span><span>"</span><span>, {</span></span>
<span><span>  method</span><span>:</span><span> </span><span>"</span><span>POST</span><span>"</span><span>,</span></span>
<span><span>  </span><span>body</span><span>:</span><span> </span><span>async</span><span> </span><span>function*</span><span> () {</span></span>
<span><span>    </span><span>yield</span><span> </span><span>"</span><span>Hello</span><span>"</span><span>;</span></span>
<span><span>    </span><span>yield</span><span> </span><span>"</span><span> </span><span>"</span><span>;</span></span>
<span><span>    </span><span>yield</span><span> </span><span>"</span><span>world!</span><span>"</span><span>;</span></span>
<span><span>  },</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="console-group" id="console-group"><a name="console-group"></a><a href="#console-group"><code>console.group()</code></a></h3><p>You can now use <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/group_static"><code>console.group()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd_static"><code>console.groupEnd()</code></a> to create a nested log messages. Previously, these were not implemented in Bun, and it would do nothing.</p><div><p>index.js</p><div><pre><code><span><span>console.</span><span>group</span><span>(</span><span>"</span><span>begin</span><span>"</span><span>);</span></span>
<span><span>console.</span><span>log</span><span>(</span><span>"</span><span>indent!</span><span>"</span><span>);</span></span>
<span><span>console.</span><span>groupEnd</span><span>();</span></span>
<span><span>// begin</span></span>
<span><span>//   indent!</span></span>
<span></span></code></pre></div></div><h3 level="3" anchor-id="url-createobjecturl" id="url-createobjecturl"><a name="url-createobjecturl"></a><a href="#url-createobjecturl"><code>URL.createObjectURL()</code></a></h3><p>There is now support for <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL"><code>URL.createObjectURL()</code></a>, which creates a URL from a Blob object. These urls can then be used in APIs like <code>fetch()</code>, <code>Worker</code>, and <code>import()</code>.</p><p>When combined with <code>Worker</code>, it allows for an easy way to spawn additional threads without creating a new separate URL for the worker's script. Since worker scripts also run through Bun's transpiler, TypeScript syntax is supported.</p><div><p>worker.ts</p><div><pre><code><span><span>const</span><span> code </span><span>=</span><span> </span><span>`</span></span>
<span><span>  const foo: number = 123;</span></span>
<span><span>  postMessage({ foo } satisfies Data);</span></span>
<span><span>`</span><span>;</span></span>
<span><span>const</span><span> blob </span><span>=</span><span> </span><span>new</span><span> </span><span>File</span><span>([code], </span><span>"</span><span>worker.ts</span><span>"</span><span>);</span></span>
<span><span>const</span><span> url </span><span>=</span><span> </span><span>URL</span><span>.</span><span>createObjectURL</span><span>(blob);</span></span>
<span></span>
<span><span>const</span><span> worker </span><span>=</span><span> </span><span>new</span><span> </span><span>Worker</span><span>(url);</span></span>
<span><span>worker.</span><span>onmessage</span><span> </span><span>=</span><span> ({ </span><span>data</span><span> }) </span><span>=&gt;</span><span> {</span></span>
<span><span>  console.</span><span>log</span><span>(</span><span>"</span><span>Received data:</span><span>"</span><span>, data);</span></span>
<span><span>};</span></span>
<span></span></code></pre></div></div><h3 level="3" anchor-id="abortsignal-any" id="abortsignal-any"><a name="abortsignal-any"></a><a href="#abortsignal-any"><code>AbortSignal.any()</code></a></h3><p>You can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static"><code>AbortSignal.any()</code></a> to combine multiple instances of <code>AbortSignal</code>. If one of the child signals is aborted, the parent signal is also aborted.</p><div><pre><code><span><span>const</span><span> { </span><span>signal</span><span>:</span><span> firstSignal } </span><span>=</span><span> </span><span>new</span><span> </span><span>AbortController</span><span>();</span></span>
<span><span>fetch</span><span>(</span><span>"</span><span>https://example.com/</span><span>"</span><span>, { signal</span><span>:</span><span> firstSignal });</span></span>
<span></span>
<span><span>const</span><span> { </span><span>signal</span><span>:</span><span> secondSignal } </span><span>=</span><span> </span><span>new</span><span> </span><span>AbortController</span><span>();</span></span>
<span><span>fetch</span><span>(</span><span>"</span><span>https://example.com/</span><span>"</span><span>, { signal</span><span>:</span><span> secondSignal });</span></span>
<span></span>
<span><span>// Cancels if either `firstSignal` or `secondSignal` is aborted</span></span>
<span><span>const</span><span> signal </span><span>=</span><span> AbortSignal.</span><span>any</span><span>([firstSignal, secondSignal]);</span></span>
<span><span>await</span><span> </span><span>fetch</span><span>(</span><span>"</span><span>https://example.com/slow</span><span>"</span><span>, { signal });</span></span>
<span></span></code></pre></div><h2 level="2" anchor-id="behaviour-changes" id="behaviour-changes"><a name="behaviour-changes"></a><a href="#behaviour-changes">Behaviour changes</a></h2><p>Bun 1.2 contains a few behaviour tweaks to that you should be aware of, but we think is unlikely to break your code. We avoid making these changes unless we think the status-quo is <em>so broken</em> that it's worth it.</p><h3 level="3" anchor-id="bun-run-uses-the-correct-directory" id="bun-run-uses-the-correct-directory"><a name="bun-run-uses-the-correct-directory"></a><a href="#bun-run-uses-the-correct-directory"><code>bun run</code> uses the correct directory</a></h3><p>Previously, when you ran a <code>package.json</code> script using <code>bun run</code>, the working directory of the script was the same as the current working directory of your shell.</p><p>In most cases, you don't notice a difference, because your shell's working directory is <em>usually</em> the same as the parent directory of your <code>package.json</code> file.</p><p>However, if you <code>cd</code> into a different directory, you'll notice the difference.</p><p>This does not match what other package managers do, like <code>npm</code> or <code>yarn</code>, and more-often-than-not causes unexpected behaviour.</p><p>In Bun 1.2, the working directory of the script is now the parent directory of the <code>package.json</code> file, instead of the current working directory of your shell.</p><div><pre><code><span><span>/path/to/project/dist</span></span>
<span><span>/path/to/project</span></span></code></pre></div><h3 level="3" anchor-id="uncaught-errors-in-bun-test" id="uncaught-errors-in-bun-test"><a name="uncaught-errors-in-bun-test"></a><a href="#uncaught-errors-in-bun-test">Uncaught errors in <code>bun test</code></a></h3><p>Previously, <code>bun test</code> would not fail when there was an uncaught error or rejection between test cases.</p><div><pre><code><span><span>import</span><span> { test, expect } </span><span>from</span><span> </span><span>"</span><span>bun:test</span><span>"</span><span>;</span></span>
<span></span>
<span><span>test</span><span>(</span><span>"</span><span>should have failed, but didn't</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>  </span><span>setTimeout</span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>    </span><span>throw</span><span> </span><span>new</span><span> </span><span>Error</span><span>(</span><span>"</span><span>Oops!</span><span>"</span><span>);</span></span>
<span><span>  }, </span><span>1</span><span>);</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><p>In Bun 1.2, this has now been fixed, and <code>bun test</code> will report the failure.</p><div><pre><code><span><span># Unhandled error between tests</span></span>
<span><span>-------------------------------</span></span>
<span><span>1</span><span> </span><span>|</span><span> </span><span>import</span><span> { test, expect } </span><span>from</span><span> </span><span>"</span><span>bun:test</span><span>"</span><span>;</span></span>
<span><span>2</span><span> </span><span>|</span></span>
<span><span>3</span><span> </span><span>|</span><span> </span><span>test</span><span>(</span><span>"</span><span>should have failed, but didn't</span><span>"</span><span>, () </span><span>=&gt;</span><span> {</span></span>
<span><span>4</span><span> </span><span>|</span><span>   </span><span>setTimeout</span><span>(() </span><span>=&gt;</span><span> {</span></span>
<span><span>5</span><span> </span><span>|</span><span>     </span><span>throw</span><span> </span><span>new</span><span> </span><span>Error</span><span>(</span><span>"</span><span>Oops!</span><span>"</span><span>);</span></span>
<span><span>              </span><span>^</span></span>
<span><span>error: Oops</span><span>!</span></span>
<span><span>      at foo.test.ts:</span><span>5</span><span>:</span><span>11</span></span>
<span><span>-------------------------------</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="server-stop-returns-a-promise" id="server-stop-returns-a-promise"><a name="server-stop-returns-a-promise"></a><a href="#server-stop-returns-a-promise"><code>server.stop()</code> returns a Promise</a></h3><p>Previously, there was no way to gracefully wait for connections to close from Bun's HTTP server.</p><p>To make this possible, we made <code>stop()</code> return a promise, which resolves when in-flight HTTP connections are closed.</p><div><pre><code><span><span>interface</span><span> </span><span>Server</span><span> {</span></span>
<span><span>   </span><span>stop</span><span>()</span><span>:</span><span> </span><span>void</span><span>;</span></span>
<span><span>   </span><span>stop</span><span>()</span><span>:</span><span> </span><span>Promise</span><span>&lt;</span><span>void</span><span>&gt;;</span></span>
<span><span>}</span></span></code></pre></div><h3 level="3" anchor-id="bun-build-rejects-when-it-fails" id="bun-build-rejects-when-it-fails"><a name="bun-build-rejects-when-it-fails"></a><a href="#bun-build-rejects-when-it-fails"><code>Bun.build()</code> rejects when it fails</a></h3><p>Previously, when <code>Bun.build()</code> would fail, it would report the error in the <code>logs</code> array. This was often confusing, because the promise would resolve successfully.</p><div><pre><code><span><span>import</span><span> { build } </span><span>from</span><span> </span><span>"</span><span>bun</span><span>"</span><span>;</span></span>
<span></span>
<span><span>const</span><span> result </span><span>=</span><span> </span><span>await</span><span> </span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./bad.ts</span><span>"</span><span>],</span></span>
<span><span>});</span></span>
<span></span>
<span><span>console.</span><span>log</span><span>(result.logs[</span><span>0</span><span>]); </span><span>// error: ModuleNotFound resolving "./bad.ts" (entry point)</span></span>
<span></span></code></pre></div><p>In Bun 1.2, <code>Bun.build()</code> will now reject when it fails, instead of returning errors in the <code>logs</code> array.</p><div><pre><code><span><span>const</span><span> result </span><span>=</span><span> </span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./bad.ts</span><span>"</span><span>],</span></span>
<span><span>});</span></span>
<span></span>
<span><span>await</span><span> result; </span><span>// error: ModuleNotFound resolving "./bad.ts" (entry point)</span></span>
<span></span></code></pre></div><p>If you want to restore to the old behaviour, you can set the <code>throw: false</code> option.</p><div><pre><code><span><span>const</span><span> result </span><span>=</span><span> </span><span>await</span><span> </span><span>build</span><span>({</span></span>
<span><span>  entrypoints</span><span>:</span><span> [</span><span>"</span><span>./bad.ts</span><span>"</span><span>],</span></span>
<span><span>  throw</span><span>:</span><span> </span><span>false</span><span>,</span></span>
<span><span>});</span></span>
<span></span></code></pre></div><h3 level="3" anchor-id="bun-p-is-an-alias-for-bun-print" id="bun-p-is-an-alias-for-bun-print"><a name="bun-p-is-an-alias-for-bun-print"></a><a href="#bun-p-is-an-alias-for-bun-print"><code>bun -p</code> is an alias for <code>bun --print</code></a></h3><p>Previously, <code>bun -p</code> was an alias for <code>bun --port</code>, which was used to change the port of <code>Bun.serve()</code>. The alias was added before Bun supported <code>bun --print</code>.</p><p>To match Node.js, we've changed <code>bun -p</code> to be an alias for <code>bun --print</code>.</p><h3 level="3" anchor-id="bun-build-sourcemap" id="bun-build-sourcemap"><a name="bun-build-sourcemap"></a><a href="#bun-build-sourcemap"><code>bun build --sourcemap</code></a></h3><p>Previously, using <code>bun build --sourcemap</code> would default to inlined source maps.</p><div><pre><code><span><span>bun build --sourcemap ./index.ts --outfile ./index.js</span></span></code></pre></div><div><p>index.js</p><div><pre><code><span><span>console.</span><span>log</span><span>(</span><span>"</span><span>Hello Bun!</span><span>"</span><span>);</span></span>
<span><span>//# sourceMappingURL=data:application/json;base64,...</span></span>
<span></span></code></pre></div></div><p>This was confusing, because it is the opposite of what other tools do, like <code>esbuild</code>.</p><p>In Bun 1.2, <code>bun build --sourcemap</code> now defaults to <code>linked</code> source maps.</p><div id="yDJYdzBhMs"><div><p>index.js</p><div><pre><code><span><span>console.</span><span>log</span><span>(</span><span>"</span><span>Hello Bun!</span><span>"</span><span>);</span></span>
<span></span></code></pre></div></div><div><p>index.js.map</p><div><pre><code><span><span>{</span></span>
<span><span>  </span><span>"</span><span>version</span><span>"</span><span>:</span><span> </span><span>3</span><span>,</span></span>
<span><span>  </span><span>"</span><span>sources</span><span>"</span><span>:</span><span> [</span><span>"</span><span>index.ts</span><span>"</span><span>],</span></span>
<span><span>  </span><span>// ...</span></span>
<span><span>}</span></span>
<span></span></code></pre></div></div></div><p>If you want to restore to the old behaviour, you can use <code>--sourcemap=inline</code>.</p><h2 level="2" anchor-id="bun-is-even-faster" id="bun-is-even-faster"><a name="bun-is-even-faster"></a><a href="#bun-is-even-faster">Bun is even faster</a></h2><p>We spend a lot of time improving performance in Bun. We post almost daily updates of "<a href="https://x.com/search?q=from%3Abunjavascript%20%22In%20the%20next%20version%20of%20Bun%22&amp;src=typed_query&amp;f=live">In the next version of Bun</a>" which you can follow on <a href="https://x.com/bunjavascript">@bunjavascript</a>.</p><p>Here's a preview of some of the performance improvements we made in Bun 1.2.</p><div><details> <summary><code>node:http2</code> is 2x faster</summary> <blockquote><div lang="en" dir="ltr"><p>In the next version of Bun</p><p>node:http2 server support is implemented. For the same code:</p><p>Bun v1.1.31: 128,879 req/s (2.4x faster)<br>Node v23.0.0: 52,785 req/s <a href="https://t.co/SIM0I0Td4T">pic.twitter.com/SIM0I0Td4T</a></p></div>— Bun (@bunjavascript) <a href="https://twitter.com/bunjavascript/status/1847014951661326396?ref_src=twsrc%5Etfw">October 17, 2024</a></blockquote>  </details><details> <summary><code>node:http</code> is 5x faster at uploading to S3</summary> <blockquote>— Ciro Spaciari (@cirospaciari) <a href="https://twitter.com/cirospaciari/status/1826086715393716457?ref_src=twsrc%5Etfw">August 21, 2024</a></blockquote>  <p>Not to be confused with Bun's built-in S3 client, which is even 5x faster.</p> </details><details> <summary><code>path.resolve()</code> is 30x faster</summary> <blockquote>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1834353346318401915?ref_src=twsrc%5Etfw">September 12, 2024</a></blockquote>  </details><details> <summary><code>fetch()</code> is 2x faster at DNS resolution</summary> <blockquote><p lang="en" dir="ltr">yOu cAnT mAkE fEtCh fAsTeR <a href="https://t.co/Ie8a6YM8Js">pic.twitter.com/Ie8a6YM8Js</a></p>— Bun (@bunjavascript) <a href="https://twitter.com/bunjavascript/status/1791678083449393219?ref_src=twsrc%5Etfw">May 18, 2024</a></blockquote>  </details><details> <summary><code>bun --hot</code> uses 2x less memory</summary> <blockquote><div lang="en" dir="ltr"><p>In the next version of Bun</p><p>bun --hot uses less memory after many runs</p><p>left: Bun v1.1.22 (new)<br>right: Bun v1.1.21 (old) <a href="https://t.co/eDl5iqZsme">pic.twitter.com/eDl5iqZsme</a></p></div>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1818918642022858847?ref_src=twsrc%5Etfw">August 1, 2024</a></blockquote>  </details><details> <summary><code>fs.readdirSync()</code> is 5% faster on macOS</summary> <blockquote>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1805067761103814828?ref_src=twsrc%5Etfw">June 24, 2024</a></blockquote>  </details><details> <summary><code>String.at()</code> is 44% faster</summary> <blockquote>— Bun (@bunjavascript) <a href="https://twitter.com/bunjavascript/status/1867203604777676961?ref_src=twsrc%5Etfw">December 12, 2024</a></blockquote>  </details><details> <summary><code>atob()</code> is 8x faster</summary> <p>For large string inputs, <code>atob()</code> is up to 8x faster.</p> <blockquote>— Bun (@bunjavascript) <a href="https://twitter.com/bunjavascript/status/1790658507479646469?ref_src=twsrc%5Etfw">May 15, 2024</a></blockquote>  </details><details> <summary><code>fetch()</code> decompresses 30% faster</summary> <blockquote>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1817067294591451208?ref_src=twsrc%5Etfw">July 27, 2024</a></blockquote>  </details><details> <summary><code>Buffer.from(String, "base64")</code> is 30x faster</summary> <p>For large string inputs, <code>Buffer.from(string, "base64")</code> is up to 30x faster.</p> <blockquote>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1803570321309704258?ref_src=twsrc%5Etfw">June 19, 2024</a></blockquote>  </details><details> <summary><code>JSON.parse()</code> is up to 4x faster</summary> <p>For large string inputs, <code>JSON.parse()</code> is between 2x and 4x faster.<br>For object inputs, it's 6% faster.</p> <blockquote>— Bun (@bunjavascript) <a href="https://twitter.com/bunjavascript/status/1788826914570019245?ref_src=twsrc%5Etfw">May 10, 2024</a></blockquote>  </details><details> <summary><code>Bun.serve()</code> has 2x more throughput</summary> <p>The fast path for <code>request.json()</code> and similar methods now works after accessing the request <code>body</code>. This makes throughput for some <code>Bun.serve()</code> applications up to 2x faster.</p> <blockquote><div lang="en" dir="ltr"><p>In the next version of Bun</p><p>The fast path in request.json() &amp; similar methods now works after accessing "body"</p><p>New: 65,000 req/s<br>Prev: 29,000 req/s <a href="https://t.co/2EqYyCoq4G">pic.twitter.com/2EqYyCoq4G</a></p></div>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1830900845778743450?ref_src=twsrc%5Etfw">September 3, 2024</a></blockquote>  </details><details> <summary><code>Error.captureStackTrace()</code> is 9x faster</summary> <blockquote>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1845736532298383391?ref_src=twsrc%5Etfw">October 14, 2024</a></blockquote>  </details><details> <summary><code>fs.readFile()</code> is 10% faster</summary> <p>For small files, <code>fs.readFile()</code> is up to 10% faster.</p> <blockquote><div lang="en" dir="ltr"><p>In the next version of Bun</p><p>fs.readFile gets up to 10% faster at reading small files (reminder: 1 µs == 1000ns) <a href="https://t.co/3vgg8FRfMs">pic.twitter.com/3vgg8FRfMs</a></p></div>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1855427363133333870?ref_src=twsrc%5Etfw">November 10, 2024</a></blockquote>  </details><details> <summary><code>console.log(String)</code> is 50% faster</summary> <p>When you use <code>console.log()</code> with a string as an argument, it's now 50% faster.</p> <blockquote>— Bun (@bunjavascript) <a href="https://twitter.com/bunjavascript/status/1823263542067536197?ref_src=twsrc%5Etfw">August 13, 2024</a></blockquote>  </details><details> <summary>JavaScript is faster on Windows</summary> <p>In Bun 1.2, we enabled the <a href="https://www.webkit.org/blog/5852/introducing-the-b3-jit-compiler/">JIT</a> on Windows. Previously, the JIT was only available on macOS and Linux.</p> <blockquote>— Jarred Sumner (@jarredsumner) <a href="https://twitter.com/jarredsumner/status/1810497635624890391?ref_src=twsrc%5Etfw">July 9, 2024</a></blockquote>  <p>JIT, or just-in-time compilation, is a technique that compiles code at runtime, instead of ahead-of-time compilation. This makes JavaScript faster, but it's also a lot more complex to implement.</p> <p>JavaScript, across the board, now runs faster on Windows. For example:</p> <ul> <li><code>Object.entries()</code> is 20% faster</li> <li><code>Array.map()</code> is 50% faster</li> </ul> <p>The JIT does a lot, it's over 25,000 lines of C++ code!</p> </details></div><h2 level="2" anchor-id="getting-started" id="getting-started"><a name="getting-started"></a><a href="#getting-started">Getting started</a></h2><p>That's it — that's Bun 1.2, and it's still just the beginning for Bun.</p><p>We've added a ton of new features and APIs that make it easier than ever to build full-stack JavaScript and TypeScript applications.</p><h3 level="3" anchor-id="install-bun" id="install-bun"><a name="install-bun"></a><a href="#install-bun">Install Bun</a></h3><p>To get started, run any of the following commands in your terminal.</p><div id="QuHjTRnfih"><div><p>curl</p><div><pre><code><span><span>curl -fsSL https://bun.sh/install </span><span>|</span><span> bash</span></span></code></pre></div></div><div><p>powershell</p><div><pre><code><span><span>powershell </span><span>-c</span><span> </span><span>"</span><span>irm bun.sh/install.ps1 | iex</span><span>"</span></span></code></pre></div></div><div><p>docker</p><div><pre><code><span><span>docker run --rm --init --ulimit memlock=-1:-1 oven/bun</span></span></code></pre></div></div></div><h3 level="3" anchor-id="upgrade-bun" id="upgrade-bun"><a name="upgrade-bun"></a><a href="#upgrade-bun">Upgrade Bun</a></h3><p>If you already installed Bun, you can upgrade with the following command.</p><h2 level="2" anchor-id="we-re-hiring" id="we-re-hiring"><a name="we-re-hiring"></a><a href="#we-re-hiring">We're hiring</a></h2><p>We're hiring engineers, designers, and contributors to JavaScript engines like V8, WebKit, Hermes, and SpiderMonkey to join our team in-person in San Francisco to build the future of JavaScript.</p><p>You can check out our <a href="https://bun.sh/careers">careers</a> page or send us an <a href="mailto:jobs@bun.sh">email</a>.</p><h2 level="2" anchor-id="thank-you" id="thank-you"><a name="thank-you"></a><a href="#thank-you">Thank you!</a></h2><p>Bun is free, open source, and MIT-licensed.</p><p>We receive a lot of open source contributions from the community. So, we'd like to thank everyone who has fixed a bug or contributed a feature. We appreciate your help!</p><ul><li><a href="https://github.com/nektro">@nektro</a></li><li><a href="https://github.com/dylan-conway">@dylan-conway</a></li><li><a href="https://github.com/pfgithub">@pfgithub</a></li><li><a href="https://github.com/heimskr">@heimskr</a></li><li><a href="https://github.com/cirospaciari">@cirospaciari</a></li><li><a href="https://github.com/Devanand-Sharma">@Devanand-Sharma</a></li><li><a href="https://github.com/lgarron">@lgarron</a></li><li><a href="https://github.com/zackradisic">@zackradisic</a></li><li><a href="https://github.com/DonIsaac">@DonIsaac</a></li><li><a href="https://github.com/RiskyMH">@RiskyMH</a></li><li><a href="https://github.com/paperclover">@paperclover</a></li><li><a href="https://github.com/rgarcia">@rgarcia</a></li><li><a href="https://github.com/fel1x-developer">@fel1x-developer</a></li><li><a href="https://github.com/190n">@190n</a></li><li><a href="https://github.com/lcrespom">@lcrespom</a></li><li><a href="https://github.com/versecafe">@versecafe</a></li><li><a href="https://github.com/dtinth">@dtinth</a></li><li><a href="https://github.com/yooneskh">@yooneskh</a></li><li><a href="https://github.com/sroussey">@sroussey</a></li><li><a href="https://github.com/ArnaudBarre">@ArnaudBarre</a></li><li><a href="https://github.com/kjjd84">@kjjd84</a></li><li><a href="https://github.com/cainba">@cainba</a></li><li><a href="https://github.com/robertshuford">@robertshuford</a></li><li><a href="https://github.com/Gobd">@Gobd</a></li><li><a href="https://github.com/citkane">@citkane</a></li><li><a href="https://github.com/marcosrjjunior">@marcosrjjunior</a></li><li><a href="https://github.com/thecrypticace">@thecrypticace</a></li><li><a href="https://github.com/metonym">@metonym</a></li><li><a href="https://github.com/ianzone">@ianzone</a></li><li><a href="https://github.com/chawyehsu">@chawyehsu</a></li><li><a href="https://github.com/komiya-atsushi">@komiya-atsushi</a></li><li><a href="https://github.com/jbergstroem">@jbergstroem</a></li><li><a href="https://github.com/sirmews">@sirmews</a></li><li><a href="https://github.com/laesse">@laesse</a></li><li><a href="https://github.com/WingLim">@WingLim</a></li><li><a href="https://github.com/martinamps">@martinamps</a></li><li><a href="https://github.com/brainkim">@brainkim</a></li><li><a href="https://github.com/Electroid">@Electroid</a></li><li><a href="https://github.com/01101sam">@01101sam</a></li><li><a href="https://github.com/eventualbuddha">@eventualbuddha</a></li><li><a href="https://github.com/snoglobe">@snoglobe</a></li><li><a href="https://github.com/nattui">@nattui</a></li><li><a href="https://github.com/swen128">@swen128</a></li><li><a href="https://github.com/hex2f">@hex2f</a></li><li><a href="https://github.com/imide">@imide</a></li><li><a href="https://github.com/cdfzo">@cdfzo</a></li><li><a href="https://github.com/alii">@alii</a></li><li><a href="https://github.com/Kapsonfire-DE">@Kapsonfire-DE</a></li><li><a href="https://github.com/NReilingh">@NReilingh</a></li><li><a href="https://github.com/SunsetTechuila">@SunsetTechuila</a></li><li><a href="https://github.com/luavixen">@luavixen</a></li><li><a href="https://github.com/rtzll">@rtzll</a></li><li><a href="https://github.com/advaith1">@advaith1</a></li><li><a href="https://github.com/gvilums">@gvilums</a></li><li><a href="https://github.com/Nanome203">@Nanome203</a></li><li><a href="https://github.com/ippsav">@ippsav</a></li><li><a href="https://github.com/guest271314">@guest271314</a></li><li><a href="https://github.com/yamalight">@yamalight</a></li><li><a href="https://github.com/ceymard">@ceymard</a></li><li><a href="https://github.com/adhamu">@adhamu</a></li><li><a href="https://github.com/gjungb">@gjungb</a></li><li><a href="https://github.com/kaioduarte">@kaioduarte</a></li><li><a href="https://github.com/BjornTheProgrammer">@BjornTheProgrammer</a></li><li><a href="https://github.com/arthurvanl">@arthurvanl</a></li><li><a href="https://github.com/lirantal">@lirantal</a></li><li><a href="https://github.com/Eckhardt-D">@Eckhardt-D</a></li><li><a href="https://github.com/CanadaHonk">@CanadaHonk</a></li><li><a href="https://github.com/sourcegr">@sourcegr</a></li><li><a href="https://github.com/alexlamsl">@alexlamsl</a></li><li><a href="https://github.com/refi64">@refi64</a></li><li><a href="https://github.com/huseeiin">@huseeiin</a></li><li><a href="https://github.com/FaSe22">@FaSe22</a></li><li><a href="https://github.com/deiga">@deiga</a></li><li><a href="https://github.com/Skywalker13">@Skywalker13</a></li><li><a href="https://github.com/KiwiZ0">@KiwiZ0</a></li><li><a href="https://github.com/lewismiddleton">@lewismiddleton</a></li><li><a href="https://github.com/matubu">@matubu</a></li><li><a href="https://github.com/mjomble">@mjomble</a></li><li><a href="https://github.com/wpaulino">@wpaulino</a></li><li><a href="https://github.com/Xmarmalade">@Xmarmalade</a></li><li><a href="https://github.com/bakkot">@bakkot</a></li><li><a href="https://github.com/stilt0n">@stilt0n</a></li><li><a href="https://github.com/levabala">@levabala</a></li><li><a href="https://github.com/DannyJJK">@DannyJJK</a></li><li><a href="https://github.com/Marukome0743">@Marukome0743</a></li><li><a href="https://github.com/sacsbrainz">@sacsbrainz</a></li><li><a href="https://github.com/mohit-s96">@mohit-s96</a></li><li><a href="https://github.com/fmorency">@fmorency</a></li><li><a href="https://github.com/jakeboone02">@jakeboone02</a></li><li><a href="https://github.com/17hz">@17hz</a></li><li><a href="https://github.com/jakebailey">@jakebailey</a></li><li><a href="https://github.com/oddyamill">@oddyamill</a></li><li><a href="https://github.com/MARCROCK22">@MARCROCK22</a></li><li><a href="https://github.com/vktrl">@vktrl</a></li><li><a href="https://github.com/mroyme">@mroyme</a></li><li><a href="https://github.com/inad9300">@inad9300</a></li><li><a href="https://github.com/billywhizz">@billywhizz</a></li><li><a href="https://github.com/pythonmcpi">@pythonmcpi</a></li><li><a href="https://github.com/m1212e">@m1212e</a></li><li><a href="https://github.com/dariushalipour">@dariushalipour</a></li><li><a href="https://github.com/eval">@eval</a></li><li><a href="https://github.com/davidstevens37">@davidstevens37</a></li><li><a href="https://github.com/zpix1">@zpix1</a></li><li><a href="https://github.com/HibanaSama">@HibanaSama</a></li><li><a href="https://github.com/mangs">@mangs</a></li><li><a href="https://github.com/victor-homyakov">@victor-homyakov</a></li><li><a href="https://github.com/silverwind">@silverwind</a></li><li><a href="https://github.com/ghoshArnab">@ghoshArnab</a></li><li><a href="https://github.com/Ptitet">@Ptitet</a></li><li><a href="https://github.com/ThatOneBro">@ThatOneBro</a></li><li><a href="https://github.com/Imgodmaoyouknow">@Imgodmaoyouknow</a></li><li><a href="https://github.com/lmmfranco">@lmmfranco</a></li><li><a href="https://github.com/farcaller">@farcaller</a></li><li><a href="https://github.com/ryuujo1573">@ryuujo1573</a></li><li><a href="https://github.com/otecd">@otecd</a></li><li><a href="https://github.com/bjon">@bjon</a></li><li><a href="https://github.com/rista404">@rista404</a></li><li><a href="https://github.com/trcio">@trcio</a></li><li><a href="https://github.com/kdrag0n">@kdrag0n</a></li><li><a href="https://github.com/speelbarrow">@speelbarrow</a></li><li><a href="https://github.com/0livare">@0livare</a></li><li><a href="https://github.com/exoego">@exoego</a></li><li><a href="https://github.com/vadzim">@vadzim</a></li><li><a href="https://github.com/umarfchy">@umarfchy</a></li><li><a href="https://github.com/jmho">@jmho</a></li><li><a href="https://github.com/panva">@panva</a></li><li><a href="https://github.com/vitch">@vitch</a></li><li><a href="https://github.com/perkrlsn">@perkrlsn</a></li><li><a href="https://github.com/ibanks42">@ibanks42</a></li><li><a href="https://github.com/erik-dunteman">@erik-dunteman</a></li><li><a href="https://github.com/nmarks413">@nmarks413</a></li><li><a href="https://github.com/forcefieldsovereign">@forcefieldsovereign</a></li><li><a href="https://github.com/bomberstudios">@bomberstudios</a></li><li><a href="https://github.com/mohiwalla">@mohiwalla</a></li><li><a href="https://github.com/surprisedpika">@surprisedpika</a></li><li><a href="https://github.com/ShrootBuck">@ShrootBuck</a></li><li><a href="https://github.com/oscarfsbs">@oscarfsbs</a></li><li><a href="https://github.com/diogomdp">@diogomdp</a></li><li><a href="https://github.com/LudvigHz">@LudvigHz</a></li><li><a href="https://github.com/nacmartin">@nacmartin</a></li><li><a href="https://github.com/nithinkjoy-tech">@nithinkjoy-tech</a></li><li><a href="https://github.com/Sushants-Git">@Sushants-Git</a></li><li><a href="https://github.com/tobycm">@tobycm</a></li><li><a href="https://github.com/creator318">@creator318</a></li><li><a href="https://github.com/janos-r">@janos-r</a></li><li><a href="https://github.com/AbhiPrasad">@AbhiPrasad</a></li><li><a href="https://github.com/JonnyBurger">@JonnyBurger</a></li><li><a href="https://github.com/HUMORCE">@HUMORCE</a></li><li><a href="https://github.com/zawodskoj">@zawodskoj</a></li><li><a href="https://github.com/eigilsagafos">@eigilsagafos</a></li><li><a href="https://github.com/jess-render">@jess-render</a></li><li><a href="https://github.com/gaurishhs">@gaurishhs</a></li><li><a href="https://github.com/ridiculousfish">@ridiculousfish</a></li><li><a href="https://github.com/jakeg">@jakeg</a></li><li><a href="https://github.com/ananis25">@ananis25</a></li><li><a href="https://github.com/DaleSeo">@DaleSeo</a></li><li><a href="https://github.com/ahaoboy">@ahaoboy</a></li><li><a href="https://github.com/lafkpages">@lafkpages</a></li><li><a href="https://github.com/henrikstorck">@henrikstorck</a></li><li><a href="https://github.com/rcaselles">@rcaselles</a></li><li><a href="https://github.com/yhdgms1">@yhdgms1</a></li><li><a href="https://github.com/e3dio">@e3dio</a></li><li><a href="https://github.com/jrmccannon">@jrmccannon</a></li><li><a href="https://github.com/anchan828">@anchan828</a></li><li><a href="https://github.com/ghost">@ghost</a></li><li><a href="https://github.com/fzn0x">@fzn0x</a></li><li><a href="https://github.com/windwiny">@windwiny</a></li><li><a href="https://github.com/RanolP">@RanolP</a></li><li><a href="https://github.com/dsernst">@dsernst</a></li><li><a href="https://github.com/yus-ham">@yus-ham</a></li><li><a href="https://github.com/jlucaso1">@jlucaso1</a></li><li><a href="https://github.com/KilianB">@KilianB</a></li><li><a href="https://github.com/josephjclark">@josephjclark</a></li><li><a href="https://github.com/Uziniii">@Uziniii</a></li><li><a href="https://github.com/erikbrinkman">@erikbrinkman</a></li><li><a href="https://github.com/boyer-victor">@boyer-victor</a></li><li><a href="https://github.com/welfuture">@welfuture</a></li><li><a href="https://github.com/jwigert">@jwigert</a></li><li><a href="https://github.com/Deckluhm">@Deckluhm</a></li><li><a href="https://github.com/liudonghua123">@liudonghua123</a></li><li><a href="https://github.com/tuttarealstep">@tuttarealstep</a></li><li><a href="https://github.com/LukasKastern">@LukasKastern</a></li><li><a href="https://github.com/jdfwarrior">@jdfwarrior</a></li><li><a href="https://github.com/evanshortiss">@evanshortiss</a></li><li><a href="https://github.com/jdalton">@jdalton</a></li><li><a href="https://github.com/jprinaldi">@jprinaldi</a></li><li><a href="https://github.com/yoavbls">@yoavbls</a></li><li><a href="https://github.com/tomerh2001">@tomerh2001</a></li><li><a href="https://github.com/Bellisario">@Bellisario</a></li><li><a href="https://github.com/sitiom">@sitiom</a></li></ul></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tech takes the Pareto principle too far (214 pts)]]></title>
            <link>https://bobbylox.com/blog/tech-takes-the-pareto-principle-too-far/</link>
            <guid>42800557</guid>
            <pubDate>Thu, 23 Jan 2025 03:53:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bobbylox.com/blog/tech-takes-the-pareto-principle-too-far/">https://bobbylox.com/blog/tech-takes-the-pareto-principle-too-far/</a>, See on <a href="https://news.ycombinator.com/item?id=42800557">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

		
<p>There’s a reason video games build what’s called a ‘vertical slice’.  If you’re not familiar, a vertical slice is a single playable area, with all mechanics, final art, vfx, sfx, music, etc.  Basically, a little piece of exactly how the finished game will look and feel and play.  The vertical slice is what game developers show publishers and investors to demonstrate not only that the game itself is going to be good, but also that the game development team has all the skills necessary to deliver the game to the level of polish the market demands.</p>



<p>Contrast this with the tech industry, which submits for approval an ‘MVP’.  A minimum viable product is the absolute least one can create that someone will pay for.  It seems tech investors have gotten very used to evaluating MVPs, and rightly so — they need to be able to assess the potential of these prototypes so they can decide which are worth their investment.  The problem is that MVPs don’t actually establish whether the team /could/ get to a finished product, and in practice many can’t.</p>



<figure><img decoding="async" src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.trustedreviews.com%2Fwp-content%2Fuploads%2Fsites%2F54%2F2017%2F12%2FMagic_Leap_One-920x470.jpg&amp;f=1&amp;nofb=1&amp;ipt=a9962e376cfc5425f10e77c8b0f406304a4f24d69bf21bd1e44bb6bff9c96156&amp;ipo=images" alt=""></figure>



<p>Recently, getting VC funding has become such an end in itself that engineers in the tech industry, centered around Silicon Valley, have optimized their skillset for prototyping.  There’s an oft quoted idea called the Pareto Principle, which states that 20% of the effort produces 80% of the results.  So, if you can just prioritize the right 20%, you can get most of the way towards the desired outcome.  The whole sector has become great at this, nearly to the exclusion of all else.  And who can blame them?  Look at the inverse — doing 80% of the work to complete only 20% of the job doesn’t sound like much fun.</p>



<p>What the Pareto Principle doesn’t capture, and what its adherents seem to forget, is that you still HAVE TO DO that last 20%.  End users usually don’t enjoy using 80% of a website, or driving 80% of a car.  Unfortunately, with so many digital products abandoned at the funding stage or forced to release early, engineers and designers often don’t have any practice with the last 80% of the effort required to finish something.  I’ve worked with many such engineers, and it can be really sad knowing that you can never get to the level of polish the concept deserves.</p>



<figure><img decoding="async" src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F9%2F93%2FTesla_Cybertruck_and_Cyberquad_for_kids.jpg%2F440px-Tesla_Cybertruck_and_Cyberquad_for_kids.jpg&amp;f=1&amp;nofb=1&amp;ipt=2006be94bbdadbfc03d551487cd1befe75cd9602814c25db4dbc35905215dc48&amp;ipo=images" alt=""></figure>



<p>Because there is such a culture around early adoption of new technology, there’s a big population willing to overlook that the things they use are unfinished.  It’s good that there are folks willing to try out nascent products, but we don’t need those products lionized, nor the people who use them.  Because of their approval, the broader population has begun to defend the truncated.  This applies to games as well.  Day 1 patches are the norm, as are DLC which feels like it ought have been part of the core game.  When products remain incomplete it’s often because all potential customers have already paid and there’s no financial incentive to finish.  How many of the products you use every day feel like they needed a few more iterations to really work correctly?</p>



<p>However, there is another, more frustrating reason why a product might remain unfinished.  Maybe it’s literally impossible to complete.  I think that’s the situation we find ourselves in for certain applications of AI, like self-driving cars, image generation, and text generation.  Even people who advocate for these technologies rarely assert that the results are useable as-is, especially in a world where people are accustomed to a much higher, human-level quality.  At best they are useful as a starting point for a human to then finish the image, or the cover letter, or to take the wheel.  The problem is I don’t think that the current methodology is capable of taking us the other 80/20% of the way.  </p>



<p>I’ll break from my main point briefly to justify that assertion.  It’s funny to think about now, but in the 70s, AI researchers believed they were most of the way towards achieving AGI (artificial general intelligence, aka the AI from the movies).  They thought that if an expert system, or a perceptron, or a set of predicates was just developed far enough they would eventually reach sentience, or at least eliminate tedious work.  Many believed that the hardware explosion Moore’s law promised was enough to create AI, and the software would take care of itself.  Some of that was true — expert systems handle things like WebMD, and constraint solvers manage the incredible logistics of modern freight.  The limits of the techniques of the time weren’t felt until much later.  That’s where we are with Generative AI, too.</p>



<figure><img decoding="async" src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2FgMsQO5u7-NQ%2Fmaxresdefault.jpg&amp;f=1&amp;nofb=1&amp;ipt=fdd2997108e811fdb42b21739ed07fbd74c16bde959eb62ee35ab44bde2c1d04&amp;ipo=images" alt=""></figure>



<p>I think that the Pareto Principle is technically true in a lot of fields, but I also feel our society would be a lot better off if we didn’t know about it.  As I said, doing the last 80% of the work to produce only the final 20% of the result is hard on morale.  It’s no wonder  that work is so often abandoned, or outsourced.  Perhaps more investors should demand to see a vertical slice, instead.</p>



<p>If we took a more craftsmanlike view of software, we would realize that a chair is not 80% done when you can sit on it.  It’s the details and the polish that make something worthy of use.  So while from a utilitarian standpoint something may have most of the features a person might ask for, from a humanist point of view 20% of the work still only produces 20% of the results.</p>



<hr>



<p><strong>Bobby Lockhart </strong>is an award-winning designer of learning games.</p>



<p>Keep in touch on <a href="http://bobbylox.bsky.social/" target="_blank" rel="noopener" title="Bluesky">Bluesky</a> or on <a href="http://linkedin.com/in/bobbylox" title="Bobby on LinkedIn">LinkedIn</a></p>





		
		
		
		


	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Foundations of Large Language Models (193 pts)]]></title>
            <link>https://arxiv.org/abs/2501.09223</link>
            <guid>42799629</guid>
            <pubDate>Thu, 23 Jan 2025 01:33:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2501.09223">https://arxiv.org/abs/2501.09223</a>, See on <a href="https://news.ycombinator.com/item?id=42799629">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2501.09223">View PDF</a></p><blockquote>
            <span>Abstract:</span>This is a book about large language models. As indicated by the title, it primarily focuses on foundational concepts rather than comprehensive coverage of all cutting-edge technologies. The book is structured into four main chapters, each exploring a key area: pre-training, generative models, prompting techniques, and alignment methods. It is intended for college students, professionals, and practitioners in natural language processing and related fields, and can serve as a reference for anyone interested in large language models.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Tong Xiao [<a href="https://arxiv.org/show-email/54711210/2501.09223" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Thu, 16 Jan 2025 01:03:56 UTC (361 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I organized Bluesky feeds by categories and growth rankings (129 pts)]]></title>
            <link>https://www.bskyinfo.com/feeds/</link>
            <guid>42799574</guid>
            <pubDate>Thu, 23 Jan 2025 01:26:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bskyinfo.com/feeds/">https://www.bskyinfo.com/feeds/</a>, See on <a href="https://news.ycombinator.com/item?id=42799574">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>Discover the hottest Bluesky feeds! Here are the top 30 feeds with the largest like increase from yesterday.</p><div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:jfhpnnst6flqway4eaeqzj2a/bafkreiexbusja2q52nwi44ov5rpyyz7d5n74kxr4ucunfigmv2e26dxrim@jpeg" alt="Science"></p></div><p>The Science Feed. A curated feed from Bluesky professional scientists,  science communicators, and science/nature photographer/artists. See https://l.bossett.io/vkeNf for more information! 🧪</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:q6gjnaw2blty4crticxkmujt/bafkreigaqrisa35bofawrhn4jusxqycxa3h7ljl3yyenwgxjkg4dpiv7mi@jpeg" alt="Cat Pics"></p></div><p>A feed of cat pictures from the whole network (sometimes not cats)</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:geoqe3qls5mwezckxxsewys2/bafkreid5a46dpr65muaum2jlitwkfh6oyzg5eyzaqltcf4c4d54fnasfza@jpeg" alt="BookSky 💙📚 #booksky"></p></div><p>a feed for anyone who likes reading and books! share what you're reading with us by using 💙📚 or #booksky in your posts.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:mk6ifd3oztj2f2l3v3ysrw2c/bafkreiachvonzcv64kvaqzukcspgsqajqmaj6ig74iiw7tkv4sw4a47mwa@jpeg" alt="Taylor Swift Feed"></p></div><p>Feed of just posts including the name "Taylor Swift"!!</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:u45hqzk7counfbwyg5edhmvi/bafkreifdzkvzy2wzida6bo4xwd2xt5n6rqzlfrwxhli3n47u5w2ubxkiyq@jpeg" alt="NBAsky"></p></div><p>People who cover, talk about, or just enjoy NBA basketball</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:inryethr5hci6ka2nz26zxmg/bafkreigosslezbt2tklnkpzwm7xenssuvawn3ds7l4qvka5occw2anqe5i@jpeg" alt="Video Games"></p></div><p>A curated feed for everything video game related! Use the 🎮 emoji if you'd like to make sure your post ends up in the feed.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:w4xbfzo7kqfes5zb7r6qv3rw/bafkreicdae7mynd5ybfb4mjwofnrv75cy2eiyv3izjd2pge55ck2p5ra5y@jpeg" alt="Blacksky"></p></div><p>An algorithm showcasing posts by Black users on the network.
Use #AddToBlackSky at least once to add yourself.
Use #BlackSky to add only a single post.

Subscribe to @blacksky.app to report posts or accounts that should be removed.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:q6gjnaw2blty4crticxkmujt/bafkreibkd66ytcwzevjodi5ljnilup7rouafhwobnm3vol5bnlkcve7vb4@jpeg" alt="Dog Pics"></p></div><p>A feed of dog pictures from the whole network (sometimes not dogs)</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:2hwwem55ce6djnk6bn62cstr/bafkreiaveg76cilukmnrpazhzq4hnzphh6emva7yf6yvhnxjeganqmwssm@jpeg" alt="📽️ Film"></p></div><p>A better movies feed for film lovers! Filmsky posts, movie news &amp; reviews, trailers, Letterboxd chatter — it’s all here.

To publish to it use the film projector emoji 📽️

And if you use this feed, please ❤️ this feed!</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:tazrmeme4dzahimsykusrwrk/bafkreiexb64egsm7umldq4obb4osvnawwhxqlyk6i7hnn2x3ulr6dtai2m@jpeg" alt="Anime &amp; Manga EN 🆕"></p></div><p>Feed of Anime and Manga fandom Keywords mostly in English in chronological order. // Made at BlueskyFeeds.com</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:szp4irbz2ncknd4our3ihbwt/bafkreigqnqi3jmjmef6ambgv74xaoozpyz777meaybmowlskykupcjbzhm@jpeg" alt="FitnessSky"></p></div><p>Welcome to the Bluesky Fitness Community! 👟💪🦋

This feed is for anyone who prioritizes health &amp; wellness! Come connect with others and post your workouts, diets, tips, &amp; progress at the gym.

For visibility, use: #fitnesssky, #gymsky, or #healthsky in your posts. Like, pin, and share the feed! ❤️📌 ↻</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:w4xbfzo7kqfes5zb7r6qv3rw/bafkreihgq34ubq7x5l4npq4dwnlnb65a26ixnq7tji3vjxvuofpbf5xygi@jpeg" alt="Blacksky: Trending"></p></div><p>Trending content from the Black users of Bluesky.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:y7crv2yh74s7qhmtx3mvbgv5/bafkreig3fngiavcnf2ludxu56egx6hgmxsyrfi5hugocgqxjpmhenzrib4@jpeg" alt="Art: Trending"></p></div><p>Image posts from artists across Bluesky, sorted by trending.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:wirbykm2muekiqtumrcjao5j/bafkreieeras46u3pa7g5gsva23jeivmsx3wydedwuwm54bd63lfjtz3rmi@jpeg" alt="NHL"></p></div><p>Welcome to the official BlueSky NHL Feed, created by The Hockey Hotline</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:ffkgesg3jsv2j7aagkzrtcvt/bafkreie6bxjqp5wzsnwyjm3dlga4qvdfmrwz4opvuwqvqhl6zgmjf6niae@jpeg" alt="Birds! 🦉"></p></div><p>Bird galore! Users must be added to the contributor list to be able to post to the feed. 
More info: https://blueskyfeedcreator.com/p/daryllmarie.bsky.social/aaagllxbcbsje</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:lfdf4srj43iwdng7jn35tjsp/bafkreihaxtqyyrfjtaqe5kdo7zhwgg6zuuojmfq35tamdql5aq6353hnpe@jpeg" alt="PopSky (Pop Culture 💅😭💀)"></p></div><p>#popsky to show up in the feed. The feed pulls lots of keywords/accounts like popbase so it might get buried (posts are weighed by recency and likes). DM @nahuel with feedback. Hoping eventually to prioritize #popsky as more users join! 

Onika Burgers Charli XBox Flopianna Grande</p></div><div><p>MusicSky is a feed for music lovers . This feed populates posts with the Hashtag #MusicSky and Posts from users on the MusicSky list with Hashtags #NowPlaying , #NowLooping , #CLT ,#NowSpinning or Bsky Radio or STEMSongs. If you would like to be added to this Feed , CC @krisk.xyz using #AddMusicSky</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:szp4irbz2ncknd4our3ihbwt/bafkreign4lywne7lav35drusdw7ub4r34fk2yn4443kvlwrt7p4pygh2sa@jpeg" alt="FashionSky "></p></div><p>Welcome to the official Bluesky Fashion Community! 🪡🦋🤍

This feed is for anyone who loves and is interested in fashion! Come and connect with others and post anything fashion. 
 
For visibility, add #fashionsky to your posts. Don't forget to like, pin, &amp; share the feed! ❤️📌↻

⬇️ Click &amp; see who liked!</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:mvxkwzfa3kdji35alzo6tcxu/bafkreihahifjppa7kovxzipktjms6yozl6vsth6t5xnl3hinydrn7inazm@jpeg" alt="#WNBA"></p></div><p>This is a simple feed for WNBA posts. 

Keywords:
WNBA (all caps)
#WNBA
Full team names with city and designation
Team name hashtags (e.g. #ChicagoSky, #LVAces, #LasVegasAces)</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:4jrld6fwpnwqehtce56qshzv/bafkreigz5uhyigkiw35xcpmb65auiu6oi3o4b4j3sltyh47ablsihlmdlm@jpeg" alt="Game Dev"></p></div><p>
Posts about all aspects of game development.

Opt in with "game", followed by animation, art, audio, design, dev, jam, lighting, music, narrative, or writing.
Opt out with #Private, #NoFeed, or #NoGameDev.

Discuss at https://trezy.studio/discord.
Image by @nascent-space.bsky.social.
</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:q6gjnaw2blty4crticxkmujt/bafkreihnljdeysyavy2qrvxrpvk4h7sosurzuleoxpn6xg62y75j2g4734@jpeg" alt="📌"></p></div><p>A feed of posts you've replied to with a 📌.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:tenurhgjptubkk5zf5qhi3og/bafkreidqngvtdmktgz62wvkkpno4lay6ihigsg3blrcdxdn5afyv3ajoue@jpeg" alt="OnlyPosts"></p></div><p>Posts from people you follow without reposts and replies</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:jcoy7v3a2t4rcfdh6i4kza25/bafkreidaqyviajpxpjuwbbjmxgbhkieqtzk4ffioh6umt4vy3pmj6lj5ry@jpeg" alt="Astronomy"></p></div><p>Astronomy posts, from astronomers!
Any astronomer can post here by signing up via @bot.astronomy.blue
Contains posts from signed up users with a 🔭, #astronomy, or #astro.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:lcn5zsz2e7kjwoe4ldf3chr5/bafkreigdodwpvpfnr4zxtvyz2vfufskd6a6x4wua4t7hb5wq4tfvdhyj5u@jpeg" alt="Sports"></p></div><p>Box Scores, Sports News, Blogs, and Podcasts
Direct Commentary From Sports Journalists
⚽🏉🏟🏑🤸🏒🏃🏾🥍🏋🏈🏓🤼🤾‍♀️🚴🏿🥎🏏🤺👟🏅🎽🛹⛷🎿⛸🏀🎯🏹🏸⛳️🏌️🏆

If you're a professional sports pundit and you want to be added to the feed, message @crevier.bsky.social</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:jk6ljensb63qoo73ngfcgijt/bafkreiffv2xcmhqoi6ybb476oyrq2wncbfdri3kx75x2esjpilio2l6cbe@jpeg" alt="Skincare, Makeup, Beauty"></p><div><h2>Skincare, Makeup, Beauty</h2><p>by<!-- --> <a href="https://bsky.app/profile/did:plc:jk6ljensb63qoo73ngfcgijt" target="_blank" rel="noopener noreferrer">@<!-- -->Rena</a></p></div></div><p>Skincare, makeup, beauty enthusiats this is your feed!

To post: have @abmuse.net add you, use #smb |#skincare|#makeup|#beauty for your SMB-specific posts 

Treat people with kindness &amp; respect
No spam
No fearmongering without proper proof
No businesses or business activity
No excess filters
No NSFW</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:m2sjv3wncvsasdapla35hzwj/bafkreigx6uv3fsn3krmcavl4qhheqvgghjipgk6h4nkxv4s6vxsxck3ata@jpeg" alt="Web Development Trending"></p></div><p>Trending web dev topics on bsky. 

View the algorithm definition: https://www.graze.social/feeds/1702

Want to improve it? Post at @hipstsersmoothie.com</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:y7crv2yh74s7qhmtx3mvbgv5/bafkreihnkpilrudoqqfutlvey3oh45xxhute6sn4bhj36etih25nabbw7i@jpeg" alt="Art: Discover"></p></div><p>Image posts from artists across Bluesky, sorted by discover.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:geoqe3qls5mwezckxxsewys2/bafkreiczatqux5mrekclq6b3wug3hf7ttwlrwdbbaq5la5t7nzmhgkhb3a@jpeg" alt="What's Cooking 🍽️"></p></div><p>home cooking, fermentation, homebrewing, pickling, baking, canning, preserving, delicious food and much more! 🍽️

run by @clarabelle.xyz - see pinned post to join the club of Contributing Chefs and post to feed.</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:odqmsar3ikz5ubokya4sempk/bafkreiaba6v35rvp5hwwl23o25hyn5s7t7iedxxnvvqmzazs2yz2xdgdsm@jpeg" alt="Art: What's Hot"></p></div><p>See what's hot in art by human artists! Filters out AI/NFTs. Use #art to post. Pulls from a growing list of popular art related hashtags. Please Pin, Like and Share to help the feed get discovered!</p></div><div><div><p><img src="https://cdn.bsky.app/img/avatar/plain/did:plc:yawvjolsrewds2wlit5krql4/bafkreiabsyua7vjpasvdy6rxm4k74llqr4x2e4pb6i6zh4dqwlgowswdn4@jpeg" alt="Pop Punk"></p></div><p>Feed for posts about pop punk/emo/scene/warped tour-type artists and their fans.

If you're a band that wants to be added to the auto-list, DM me! https://bsky.app/profile/reelmccoytweets.bsky.social

BlueskyFeedCreator.com</p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Trae: An AI-powered IDE by ByteDance (191 pts)]]></title>
            <link>https://www.trae.ai/home</link>
            <guid>42799540</guid>
            <pubDate>Thu, 23 Jan 2025 01:21:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.trae.ai/home">https://www.trae.ai/home</a>, See on <a href="https://news.ycombinator.com/item?id=42799540">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="root"><p>Ship Faster with Trae</p><p>Trae is an adaptive AI IDE that transforms how you work, collaborating with you to run faster.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[gRPC vs. REST: Understand gRPC, OpenAPI and REST and When to Use in API Design (279 pts)]]></title>
            <link>https://cloud.google.com/blog/products/api-management/understanding-grpc-openapi-and-rest-and-when-to-use-them</link>
            <guid>42799245</guid>
            <pubDate>Thu, 23 Jan 2025 00:47:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cloud.google.com/blog/products/api-management/understanding-grpc-openapi-and-rest-and-when-to-use-them">https://cloud.google.com/blog/products/api-management/understanding-grpc-openapi-and-rest-and-when-to-use-them</a>, See on <a href="https://news.ycombinator.com/item?id=42799245">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h5>Martin Nally</h5><p>Software Developer and API designer, Apigee</p></div><div jsname="tx2NYc"><section><span jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip="" ssk="5:kbe95"><p>As most software developers no doubt know, there are two primary models for API design: RPC and REST. Regardless of model, most modern APIs are implemented by mapping them in one way or another to the same HTTP protocol. It has also become common for RPC API designs to adopt one or two ideas from HTTP while staying within the RPC model, which has increased the range of choices that an API designer faces. This post tries to explain the choices, and give guidance on how to choose between them.</p><p>gRPC is a technology for implementing RPC APIs that uses HTTP 2.0 as its underlying transport protocol. You might expect that gRPC and HTTP would be mutually exclusive, since they are based on opposite conceptual models. gRPC is based on the Remote Procedure Call (RPC) model, in which the addressable entities are procedures, and the data is hidden behind the procedures. HTTP works the inverse way. In HTTP, the addressable entities are “data entities” (called “resources” in the HTTP specifications), and the behaviors are hidden behind the data—the behavior of the system results from creating, modifying, and deleting resources.</p><p>In fact, many of the APIs created here at Google and elsewhere combine RPC with a few ideas from HTTP in an interesting way. These APIs adopt an entity-oriented model, as does HTTP, but are defined and implemented using gRPC, and the resulting APIs can be invoked using standard HTTP technologies. We will try to describe how this works, why it might be good for you, and where it might not.</p><p>Let's first take a closer look at how HTTP is commonly used for APIs.</p><h2>The three primary ways to use HTTP for APIs</h2><p>Most public APIs and many private distributed APIs use HTTP as the transport, at least in part because organizations are accustomed to dealing with the security issues of allowing HTTP traffic on ports 80 and 443.</p><p>In my opinion there are three significant and distinct approaches for building APIs that use HTTP. They are:</p><ol><li><p>REST</p></li><li><p>gRPC (and Apache Thrift and others)</p></li><li><p>OpenAPI (and its competitors)</p></li></ol><h3>REST</h3><p>The least-commonly used API model is REST—only a small minority of APIs are designed this way, even though the word REST is used (or abused) more broadly. A signature characteristic of this style of API is that clients do not construct URLs from other information—they just use the URLs that are passed out by the server as-is. This is how the browser works—it does not construct the URLs it uses from piece parts, and it does not understand the website-specific formats of the URLs it uses; it just blindly follows the URLs that it finds in the current page received from the server, or that were bookmarked from previous pages or are entered by the user. The only parsing of a URL that a browser does is to extract the information required to send an HTTP request, and the only construction of URLs that a browser does is to form an absolute URL from relative and base URLs. If your API is a REST API, then your clients never have to understand the format of your URLs and those formats are not part of the API specification given to clients<sup>1</sup>.&nbsp;</p><p>REST APIs can be very simple. Lots of additional technologies have been invented for use with REST APIs—for example JSON API, ODATA, HAL, Siren or JSON Hyper-Schema and others—but you don't need any of those to do REST well.</p><h3>gRPC</h3><p>A second model for using HTTP for APIs is illustrated by gRPC. gRPC uses HTTP/2 under the covers, but HTTP is not exposed to the API designer. gRPC-generated stubs and skeletons hide HTTP from the client and server too, so nobody has to worry how the RPC concepts are mapped to HTTP—they just have to learn gRPC.&nbsp;</p><p>The way a client uses a gRPC API is by following these three steps:</p><ol><li><p>Decide which procedure to call</p></li><li><p>Calculate the parameter values to use (if any)</p></li><li><p>Use a code-generated stub to make the call, passing the parameter values</p></li></ol><h3>OpenAPI</h3><p>Probably the most popular way of designing RPC APIs that use HTTP is to use specification languages like OpenAPI (formerly known as the Swagger specification).</p><p>A signature characteristic of the OpenAPI style of API is that clients use the API by constructing URLs from other information. The way a client uses an OpenAPI API is by following these three steps:</p><ol><li><p>Decide which OpenAPI URL path template to use</p></li><li><p>Calculate the parameter values to use (if any)</p></li><li><p>Plug the parameter values into the URL path template and send an HTTP request.</p></li></ol><p>It should be immediately obvious that an API that works this way is not a REST API. The OpenAPI method of using HTTP requires clients to have detailed knowledge of the format of the URLs they use in requests and to construct URLs that conform to that format from other information. This is the opposite of the way a REST API works, where clients are completely blind to the formats of the URLs they use, and never have to construct them. The model supported by OpenAPI is very popular and successful and is one of the most important options available to API designers—the fact that the OpenAPI model is not REST does not diminish its usefulness or importance.</p></span></section><section><span jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip="" ssk="5:kbe95"><p>The second observation you will probably make is that the client model for using an OpenAPI API is very similar to the client model for using a gRPC API. Where a gRPC client chooses a procedure to call, an OpenAPI client chooses a URL path template to use. gRPC and OpenAPI clients both calculate parameter values. Where a gRPC client uses a stub procedure to combine the parameters with the procedure signature and make the call, an OpenAPI client inserts the parameter values into the URL path template and issues an HTTP request. The detail is different but the overall model is very similar. OpenAPI also includes tools that will optionally generate a client stub procedure in the client programming language that hides these details, making the client experience of the two even more similar.<br></p><p>One way to explain the close similarity between the client models of gRPC and OpenAPI is to consider OpenAPI to be a language for specifying a classic RPC API with a custom mapping to HTTP requests. If you accept that idea, then gRPC and OpenAPI are both RPC interface definition languages (IDLs), with the essential difference between them being that OpenAPI exposes the details of the underlying HTTP transport to the client and allows the API designer to control the mapping, while gRPC hides all the HTTP details using a predefined mapping.</p><p>Even if you don't accept the idea that the fundamental API model used by OpenAPI is just good old-fashioned RPC, it is hard to deny that there are some obvious parallels between the two, and they are both distinct from REST. Either way, I think the parallels help motivate the more detailed comparison that follows.</p><p>Each of these approaches has some benefits and drawbacks—we'll explore all three and leave you with some thoughts on how to decide which one is best for your application.</p><h2>Look how easy and obvious RPC is!</h2><p>Here is an example from a popular&nbsp;<a href="https://www.freecodecamp.org/news/rest-is-the-new-soap-97ff6c09896d/" target="_blank">blog post</a>&nbsp;that extols the virtues of RPC (we'll come back to this blog post later):</p></span></section><section><span jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip="" ssk="5:kbe95"><p>The blogger says that many people find it easy to define an RPC API for this problem, but struggle to figure out how to solve the same problem using HTTP, wasting a lot of time and energy without realizing any benefit to their project. I agree. One reason is that designing an API on top of HTTP is a skill that has to be learned, and there are many options.</p><h2>Using the REST model is also easy and obvious</h2><p>Since we have designed many APIs using REST, it seems just as obvious to us how to express this example in REST. Here is what I would do:</p></span></section><section><span jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip="" ssk="5:kbe95"><p>The username, contact_email, password, account_URL, and other bits of data supplied by the client are just simple JSON name/value pairs in the request body. I left out the details of what is in the headers, and how the results are returned, because it's all explained in the HTTP specifications—there aren't really choices or decisions to make.</p><p>All the identifiers passed between the client and the server in both directions are URLs—there are no identifiers in the API that are not also URLs. Whenever one resource includes a reference to another, that reference is expressed using the other resource's URL. This technique is called hypertext, or hypermedia—if your API does not use URLs this way, it is not using the REST model, since hypertext linking is a signature feature that distinguishes REST from other models<sup>2</sup>. RPC APIs also express relationships between entities by including the identifiers of one entity in another entity, but those identifiers are not URLs that can be used directly without requiring additional information.</p><h2>Advantages of REST</h2><p>The claimed advantages of REST are basically those of the world wide web itself, like stability, uniformity, and universality. They are documented elsewhere, and REST is anyway a minority interest, so we won't dwell on them too much here. An exception is the entity-orientation inherent in the HTTP/REST model. This feature is of special interest because it has been widely discussed and adopted by proponents of non-REST models like gRPC and OpenAPI.&nbsp;</p><p>In my experience, entity-oriented models are simpler, more regular, easier to understand, and more stable over time than simple RPC models. RPC APIs tend to grow organically as one procedure after another is added, each one implementing an action that the system can perform.</p><p>An entity-oriented model provides an overall organization for the system's behaviors. For example, we are all familiar with the entity model of online shopping, with its products, carts, orders, accounts, and so on. If that capability were expressed using only RPC procedures, it would result in a long, unstructured list of procedures for browsing catalogs of products, adding them to carts, checking out, tracking deliveries, and returning products.&nbsp;</p><p>The list quickly becomes overwhelming, and it's difficult to achieve coherence between the procedure definitions. One way to bring structure and order to the list is to model all the behaviors using a standard set of procedures for each entity type. HTTP is inherently entity-oriented, but you can also add entity-orientation to RPC, as discussed later. Grouping procedures by entity type is also one of the key ideas of object-oriented languages.</p><h2>How you use OpenAPI</h2><p>In OpenAPI, you define things called paths. An OpenAPI path looks like this in YAML:</p></span></section><section><span jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip="" ssk="5:kbe95"><p>APIs that define paths like these expose the values of {petId} to the client in various places in the API, and require the client to use an appropriate path definition in order to convert the {petId} value (and other values) into a URL that can be used in HTTP requests.</p><p>Expressing and using IDs this way is an alternative to the hypertext link that is a signature idea of REST.</p><p>OpenAPI calls the variables in these paths "parameters" and the combination of a path and an HTTP method is called an operation—similar terminology to RPC systems.&nbsp;</p><p><i><b>OpenAPI's use of URL templates with parameters can be viewed as a way to express RPC-like concepts with custom mappings to HTTP.</b></i></p><h2>OpenAPI advantages and disadvantages</h2><p>In my opinion, OpenAPI has two fundamental characteristics that account for its success. The first is that the OpenAPI model is similar to the traditional RPC model with which most programmers are familiar and comfortable. The model also fits well with the concepts of the programming languages they use. The second reason is that it allows programmers to define a custom mapping of those RPC concepts to HTTP requests. This second characteristic brings with it both benefits and problems. The primary benefit is that clients can access the API using only standard HTTP technologies. This is especially important for public APIs because it means that the API is accessible from almost all programming languages and environments without requiring the client to adopt any additional technology. A disadvantage is that it can require significant effort to design the HTTP details—witness all the guidance on the web on what you should and shouldn't do, much of it contradictory—and further effort by the consumer to learn it.</p><h2>When might gRPC be a better option than OpenAPI?</h2><p>Your design challenge for APIs described with OpenAPI is to define a combination of URL paths and HTTP methods to represent your "operations" and their "parameters." This can be tricky work, because there are lots of options. It is not clear that it is a good use of time and energy for most projects. Frustrations resulting from this approach are described with passion in the blog post comparing SOAP to REST by Pascal Chambon that we mentioned before, which also supplied the RPC example we opened with.&nbsp;</p><p>Chambon's post contains some misinformation and misunderstanding, and most of the <a href="https://philsturgeon.uk/api/2017/12/18/rest-confusion-explained/" target="_blank">reaction to his post</a> focused on correcting that, but Chambon's mistakes actually add support to his main point, which is that designing your own mapping of RPC-like concepts onto HTTP is fairly complicated and difficult.</p><p>Most of the advice that was offered in response to Chambon's blog post promoted REST as an alternative to the RPC-like model that Chambon and most other people are familiar with. This is certainly an option—the simple REST example that we described at the beginning of this post is a minimalist's take on how exactly to do that.</p><p>Another option for Chambon is to keep his basic RPC model, but use gRPC instead of OpenAPI to express it. This avoids the complexity of defining a custom mapping of the API to HTTP. The RPC model has shown much more enduring popularity than any alternative, and if API designers are going to use an RPC-like model anyway, then they should weigh all the available technologies for doing that.</p><h2>gRPC benefits</h2><p>gRPC expresses an RPC API in an <a href="https://en.wikipedia.org/wiki/Interface_description_language" target="_blank">interface description language</a> (IDL) that benefits from a long tradition of RPC IDLs that includes DCE IDL, Corba IDL, and many others. gRPC's IDL provides a simpler and more direct way of defining remote procedures than OpenAPI's approach of using URL paths, their parameters, and the HTTP methods that are used with them.</p><p>gRPC uses HTTP/2 under the covers, but gRPC does not expose any of HTTP/2 to the API designer or API user. gRPC has already made all the decisions on how to layer the RPC model on top of HTTP so you don't have to—those decisions are built into the gRPC software and generated code. This makes life simpler for API designers and clients. By contrast, OpenAPI requires API designers to specify the details of how the RPC model is expressed on top of HTTP for their specific API, and the client of the API has to learn that detail. An important advantage of the OpenAPI approach is that it lets API clients use standard HTTP tools and technologies, which for many API designers justifies the effort.</p><p>Regardless of how your API uses HTTP, it is likely that you will want to create client-side programming libraries in various languages for programmers to use. These programming libraries will take the form of procedures (possibly called functions or methods, depending on the programming language). One of gRPC's most attractive characteristics is that it is very good at generating client-side programming libraries that are intuitive for programmers to use and execute efficiently. OpenAPI can also generate client-side programming libraries, but I find the gRPC version simpler and more obvious, probably because its IDL only has to express RPC concepts and does not have to simultaneously describe a mapping of those concepts to HTTP.</p><p>APIs specified in gRPC are also simple to implement on the server side. Because of the frameworks, libraries, and code-generation that gRPC provides, it may be simpler to create the server implementation of a gRPC method than to write a standard HTTP request handler that parses incoming requests and calls the right implementation functions, despite the many frameworks that aim to help with that.</p><p>Another characteristic of gRPC is good performance. gRPC uses a binary payload that is efficient to create and to parse, and it exploits HTTP/2 for efficient management of connections. Of course, you can also use binary payloads and HTTP/2 directly without using gRPC, but this requires you and your clients to master more technology.</p><p>gRPC also avoids the problem that even the best HTTP-based APIs don't implement the whole HTTP protocol, which requires API providers and clients to figure out how to specify and learn which subset of HTTP is supported by a particular API. This is a problem for both REST and OpenAPI APIs. gRPC avoids this problem by requiring the client and the server to both adopt special software that implements the complete gRPC protocol. We hope gRPC succeeds in keeping that protocol stable for at least 25 years as HTTP has done, so that clients don't break when servers are upgraded and vice versa.</p><h2>How do you combine the entity-oriented model with RPC?</h2><p>Regardless of whether you are using gRPC or OpenAPI, the trick to using RPC in an entity-oriented way is to constrain the RPC method definitions to only those that map easily to the standard entity operations (Create, Retrieve, Update and Delete, often called CRUD<sup>3</sup>, plus List) for each resource type.&nbsp;</p><p>To use RPC in an entity-oriented style, you reverse the usual RPC thought process—instead of starting with procedure definitions, you start by defining your resource types, and then make RPC method definitions corresponding to the common entity operations on those types plus any additional operations you find necessary.</p><p>Using RPC in an entity-oriented style depends on teaching people a constrained usage pattern. In practice we see that APIs that are designed this way are sometimes a blend of entity-oriented and procedure-oriented concepts, which undermines some of the benefits.</p><h2>So what are the downsides of gRPC?</h2><p>Every technology has downsides and limitations. We’ve already discussed some of OpenAPI's.</p><p>A popular feature of HTTP APIs is that clients can use them and servers can implement them using only general-purpose and widely available technologies. API calls can easily be made by simply typing URLs into a browser, or issuing cURL commands in a terminal window or in a bash script. Programmers can access or implement an HTTP API using no more technology than a basic HTTP library. In contrast, gRPC requires special software on both the client and the server. gRPC-generated code has to be incorporated into client and server build processes—this may be onerous to some, especially those who are used to working in dynamic languages like Javascript or Python where the build process, at least on development machines, may be non-existent. The Google <a href="https://cloud.google.com/endpoints/docs/grpc/transcoding">Cloud Endpoints</a> product enables gRPC APIs to be accessed via HTTP and JSON without special software, which restores many options for clients, but not everyone wants to or is able to use Cloud Endpoints or find or build an equivalent.</p><p>It’s simple to write a bot that crawls the entirety of a REST API without metadata<sup>4</sup>, similarly to the way a browser or a web bot can crawl the entire HTML web. You can’t do this with an RPC-style API, regardless of whether it’s described using gRPC or OpenAPI, because RPC gives each entity type a different API that requires custom software or metadata to use it. In practice it usually isn't critical to be able to write general-purpose API clients, although it can be useful.</p><p>HTTP APIs are often proxied to add security features, perform input validation, map data formats, and solve many other problems. This typically requires adding, removing or modifying headers, and parsing and even modifying the body. Proxies use a combination of standard and custom headers to achieve this. These features are commonly implemented using products like Apigee Edge that do not require traditional programming skills or the kind of software development environments that can easily integrate gRPC. I think it would be much harder to do this sort of proxying for gRPC, and I am not aware of it being commonly done.</p></span></section><section><span jsaction="rcuQ6b:npT2md" jscontroller="YSybTb" data-track-type="" soy-skip="" ssk="5:kbe95"><p>Using an entity-oriented approach with gRPC is mostly useful for new-builds—you won't find it easy to retrofit to an existing RPC API.<br></p><p>gRPC does not define a standard mechanism to prevent loss of data when two clients try to update the same resource at the same time, so if you use gRPC, you will likely have to invent your own. HTTP defines standard Etag and If-Match headers for this purpose—most of the HTTP APIs we design use these headers.<br></p><p>Nor does gRPC define a mechanism for making partial updates, so you will likely have to invent your own. HTTP defines a method—PATCH—for partial updates but does not say what a patch should look like or how to apply it. There are two additional IETF standards that fill this gap for JSON: <a href="https://tools.ietf.org/html/rfc7386" target="_blank">JSON merge patch</a> and <a href="https://tools.ietf.org/html/rfc6902" target="_blank">JSON patch</a>. The first is simpler to use but does not handle all cases, particularly updates of arrays; the second handles more cases but is more complex to use. Most of the recent HTTP APIs I have built implement both standards and let the client choose; the Kubernetes API works this way too.<br></p><h3>Conclusion</h3><p>There are a few APIs that use the same REST hypertext model used by the HTML web. They aim to inherit the core qualities of the HTML web, like stability, uniformity, and universality. If you already know how to design APIs this way, or are motivated to learn, then this is a fine approach. This is my own preference.</p><p>APIs that are described with OpenAPI are based on concepts analogous to those of RPC, but with a custom mapping to HTTP. This approach allows clients to access the resulting API using only commonly-available HTTP technologies, but it also adds additional design choices to these APIs, which can make them more difficult to design and build and more difficult to learn.</p><p>If you are considering using OpenAPI for an API, you should also consider the option of designing and implementing it using gRPC. The fundamental API models of the two are comparable and gRPC avoids the need to invent your own mapping onto HTTP.&nbsp;</p><p>Regardless of whether you use gRPC or OpenAPI for your API, you can obtain some, but not all, of the benefits of a REST API if you organize the API in an entity-oriented style, standardize the names of your procedures (for example by sticking to the verbs create, retrieve, update, delete and list), and impose other naming conventions. gRPC will bring some other benefits of its own. Using gRPC is especially attractive if one of the following is true:</p><ul><li><p>You can use a product like Cloud Endpoints so that your clients are not forced to adopt gRPC technologies just because you did.</p></li><li><p>The API is internal, where you control the technology choices of all the clients as well as the server.</p></li></ul><p>If you adopt gRPC in place of OpenAPI or REST, you should at least be aware of the much more limited opportunity to augment or remediate the API's behaviors in proxies, especially those implemented using API management tools like Apigee Edge or its competitors. Depending on how and where you intend to use gRPC, this may or may not be a problem.</p><p>As with most design challenges, there are many factors to consider and tradeoffs to be made. Hopefully this discussion has helped explain some of the ways in which HTTP and RPC-style APIs match up against one another.</p><p><i>Special thanks to Nandan Sridhar and Marsh Gardiner for their contributions to this post.</i></p><hr><p><sub>1. Some REST APIs allow clients to append a query to a base URL, in which case clients need to understand the query syntax supported by the server in the query portion of the URL, although they don't need to know the format of the rest of the URL. Some REST API designers allow queries to be encoded in URL paths, in which case their query URLs start to look like the OpenAPI-style URLs discussed below.<br>2.&nbsp;Some REST commentators say that in order to claim compliance with the REST model you have to also implement something akin to HTML forms in JSON, but almost all would agree that if hypertext links are not a prominent feature of the API then it is not REST.<br>3.&nbsp;Even in strictly entity-oriented APIs we sometimes come across the need for a fifth operation that we think of as "translate" or "convert". Translate takes in one entity and produces another without creating a persistent resource. HTTP doesn't have a special method for this operation, so we have to use POST for both "create" and "translate". Sometimes we also use POST for retrieve to get around limitations on URL length, usually for URLs that include queries.<br>4.&nbsp;With a small amount of extra work on the server you can let the browser itself crawl a REST API.</sub></p></span></section><section><span>Posted in</span><ul><li><a href="https://cloud.google.com/blog/products/api-management" track-metadata-position="body" track-metadata-eventdetail="cloud.google.com/blog/products/api-management" track-metadata-module="tag list" track-metadata-module_headline="posted in">API Management</a></li><li><a href="https://cloud.google.com/blog/products/application-development" track-metadata-position="body" track-metadata-eventdetail="cloud.google.com/blog/products/application-development" track-metadata-module="tag list" track-metadata-module_headline="posted in">Application Development</a></li><li><a href="https://cloud.google.com/blog/products/apigee" track-metadata-position="body" track-metadata-eventdetail="cloud.google.com/blog/products/apigee" track-metadata-module="tag list" track-metadata-module_headline="posted in">Apigee</a></li></ul></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tailwind V4 Is Finally Out (368 pts)]]></title>
            <link>https://tailwindcss.com/blog/tailwindcss-v4</link>
            <guid>42799136</guid>
            <pubDate>Thu, 23 Jan 2025 00:33:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tailwindcss.com/blog/tailwindcss-v4">https://tailwindcss.com/blog/tailwindcss-v4</a>, See on <a href="https://news.ycombinator.com/item?id=42799136">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><img alt="Tailwind CSS v4.0" loading="lazy" width="1200" height="630" decoding="async" data-nimg="1" srcset="https://tailwindcss.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcard.22502194.jpg&amp;w=1200&amp;q=75 1x, https://tailwindcss.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcard.22502194.jpg&amp;w=3840&amp;q=75 2x" src="https://tailwindcss.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcard.22502194.jpg&amp;w=3840&amp;q=75">
<p>Holy shit it's actually done — we just tagged Tailwind CSS v4.0.</p>
<p>Tailwind CSS v4.0 is an all-new version of the framework optimized for performance and flexibility, with a reimagined configuration and customization experience, and taking full advantage of the latest advancements the web platform has to offer.</p>
<ul>
<li><a href="#new-high-performance-engine">New high-performance engine</a> — where full builds are up to 5x faster, and incremental builds are over 100x faster — and measured in microseconds.</li>
<li><a href="#designed-for-the-modern-web">Designed for the modern web</a> — built on cutting-edge CSS features like cascade layers, registered custom properties with <code>@property</code>, and <code>color-mix()</code>.</li>
<li><a href="#simplified-installation">Simplified installation</a> — fewer dependencies, zero configuration, and just a single line of code in your CSS file.</li>
<li><a href="#first-party-vite-plugin">First-party Vite plugin</a> — tight integration for maximum performance and minimum configuration.</li>
<li><a href="#automatic-content-detection">Automatic content detection</a> — all of your template files are discovered automatically, with no configuration required.</li>
<li><a href="#built-in-import-support">Built-in import support</a> — no additional tooling necessary to bundle multiple CSS files.</li>
<li><a href="#css-first-configuration">CSS-first configuration</a> — a reimagined developer experience where you customize and extend the framework directly in CSS instead of a JavaScript configuration file.</li>
<li><a href="#css-theme-variables">CSS theme variables</a> — all of your design tokens exposed as native CSS variables so you can access them anywhere.</li>
<li><a href="#dynamic-utility-values-and-variants">Dynamic utility values and variants</a> — stop guessing what values exist in your spacing scale, or extending your configuration for things like basic data attributes.</li>
<li><a href="#modernized-p3-color-palette">Modernized P3 color palette</a> — a redesigned, more vivid color palette that takes full advantage of modern display technology.</li>
<li><a href="#container-queries">Container queries</a> — first-class APIs for styling elements based on their container size, no plugins required.</li>
<li><a href="#new-3d-transform-utilities">New 3D transform utilities</a> — transform elements in 3D space directly in your HTML.</li>
<li><a href="#expanded-gradient-apis">Expanded gradient APIs</a> — radial and conic gradients, interpolation modes, and more.</li>
<li><a href="#starting-style-support">@starting-style support</a> — a new variant you can use to create enter and exit transitions, without the need for JavaScript.</li>
<li><a href="#not-variant">not-* variant</a> — style an element only when it doesn't match another variant, custom selector, or media or feature query.</li>
<li><a href="#even-more-new-utilities-and-variants">Even more new utilities and variants</a> — including support for <code>color-scheme</code>, <code>field-sizing</code>, complex shadows, <code>inert</code>, and more.</li>
</ul>
<p>Start using Tailwind CSS v4.0 today by <a href="https://tailwindcss.com/docs/installation">installing it in a new project</a>, or playing with it directly in the browser on <a href="https://play.tailwindcss.com/">Tailwind Play</a>.</p>
<p>For existing projects, we've published a comprehensive <a href="https://tailwindcss.com/docs/upgrade-guide">upgrade guide</a> and built an <a href="https://tailwindcss.com/docs/upgrade-guide#using-the-upgrade-tool">automated upgrade tool</a> to get you on the latest version as quickly and painlessly as possible.</p>
<hr>
<h2 id="new-high-performance-engine"><a href="#new-high-performance-engine">New high-performance engine</a></h2>
<p>Tailwind CSS v4.0 is a ground-up rewrite of the framework, taking everything we've learned about the architecture over the years and optimizing it to be as fast as possible.</p>
<p>When benchmarking it on our own projects, we've found full rebuilds to be over 3.5x faster, and incremental builds to be over 8x faster.</p>
<p>Here are the median build times we saw when we benchmarked Tailwind CSS v4.0 against <a href="https://tailwindui.com/templates/catalyst">Catalyst</a>:</p>
<table><thead><tr><th></th><th>v3.4</th><th>v4.0</th><th>Improvement</th></tr></thead><tbody><tr><td>Full build</td><td>378ms</td><td>100ms</td><td>3.78x</td></tr><tr><td>Incremental rebuild with new CSS</td><td>44ms</td><td>5ms</td><td>8.8x</td></tr><tr><td>Incremental rebuild with no new CSS</td><td>35ms</td><td>192µs</td><td>182x</td></tr></tbody></table>
<p>The most impressive improvement is on incremental builds that don't actually need to compile any new CSS — these builds are over 100x faster and complete in <em>microseconds</em>. And the longer you work on a project, the more of these builds you run into because you're just using classes you've already used before, like <code>flex</code>, <code>col-span-2</code>, or <code>font-bold</code>.</p>
<hr>
<h2 id="designed-for-the-modern-web"><a href="#designed-for-the-modern-web">Designed for the modern web</a></h2>
<p>The platform has evolved a lot since we released Tailwind CSS v3.0, and v4.0 takes full advantage of many of these improvements.</p>
<div><p>CSS</p><div><pre tabindex="0"><code><span><span>@layer</span><span> theme</span><span>,</span><span> base</span><span>,</span><span> components</span><span>,</span><span> utilities</span><span>;</span></span><span></span><span><span>@layer</span><span> utilities </span><span>{</span></span><span><span>  .mx-6</span><span> {</span></span><span><span>    margin-inline</span><span>: </span><span>calc</span><span>(</span><span>var</span><span>(</span><span>--spacing</span><span>)</span><span> *</span><span> 6</span><span>);</span></span><span><span>  }</span></span><span><span>  .bg-blue-500</span><span>\/</span><span>50</span><span> {</span></span><span><span>    background-color</span><span>: </span><span>color-mix</span><span>(</span><span>in oklab</span><span>,</span><span> var</span><span>(</span><span>--color-blue-500</span><span>)</span><span> 50</span><span>%</span><span>,</span><span> transparent</span><span>);</span></span><span><span>  }</span></span><span><span>}</span></span><span></span><span><span>@property</span><span> --tw-gradient-from </span><span>{</span></span><span><span>  syntax: "&lt;color</span><span>&gt;</span><span>";</span></span><span><span>  inherits: false;</span></span><span><span>  initial-value</span><span>: </span><span>#</span><span>0000;</span></span><span><span>}</span></span><span></span></code></pre></div></div>
<p>We're leveraging modern CSS features like:</p>
<ul>
<li><strong>Native cascade layers</strong> — giving us more control than ever over how different style rules interact with each other.</li>
<li><strong>Registered custom properties</strong> — making it possible to do things like animate gradients, and significantly improving performance on large pages.</li>
<li><strong>color-mix()</strong> — which lets us adjust the opacity of any color value, including CSS variables and <code>currentColor</code>.</li>
<li><strong>Logical properties</strong> — simplifying RTL support and reducing the size of your generated CSS.</li>
</ul>
<p>Many of these features have even simplified Tailwind internally, reducing the surface area for bugs and making the framework easier for us to maintain.</p>
<hr>
<h2 id="simplified-installation"><a href="#simplified-installation">Simplified installation</a></h2>
<p>We've streamlined the setup process a ton in v4.0, reducing the number of steps and removing a lot of boilerplate.</p>
<div data-stack="true"><div><p>1. Install Tailwind CSS</p><div><pre tabindex="0"><code><span><span>npm</span><span> i</span><span> tailwindcss</span><span> @tailwindcss/postcss</span><span>;</span></span><span></span></code></pre></div></div><div><p>2. Add the PostCSS plugin</p><div><pre tabindex="0"><code><span><span>export</span><span> default</span><span> {</span></span><span><span>  plugins</span><span>:</span><span> [</span><span>"@tailwindcss/postcss"</span><span>]</span><span>,</span></span><span><span>};</span></span><span></span></code></pre></div></div><div><p>3. Import Tailwind in your CSS</p></div></div>
<p>With the improvements we've made to this process for v4.0, Tailwind feels more light-weight than ever:</p>
<ul>
<li><strong>Just one-line of CSS</strong> — no more <code>@tailwind</code> directives, just add <code>@import "tailwindcss"</code> and start building.</li>
<li><strong>Zero configuration</strong> — you can start using the framework without configuring anything, not even the paths to your template files.</li>
<li><strong>No external plugins required</strong> — we bundle <code>@import</code> rules for you out of the box, and use <a href="https://lightningcss.dev/">Lightning CSS</a> under the hood for vendor prefixing and modern syntax transforms.</li>
</ul>
<p>Sure you only go through this once per project, but it adds up when you're starting and abandoning a different side-project every weekend.</p>
<h2 id="first-party-vite-plugin"><a href="#first-party-vite-plugin">First-party Vite plugin</a></h2>
<p>If you're a Vite user, you can now integrate Tailwind using <a href="https://tailwindcss.com/docs/installation/using-vite"><code>@tailwindcss/vite</code></a> instead of PostCSS:</p>
<div><p>vite.config.ts</p><div><pre tabindex="0"><code><span><span>import</span><span> {</span><span> defineConfig</span><span> }</span><span> from</span><span> "vite"</span><span>;</span></span><span><span>import</span><span> tailwindcss</span><span> from</span><span> "@tailwindcss/vite"</span><span>;</span></span><span></span><span><span>export</span><span> default</span><span> defineConfig</span><span>(</span><span>{</span></span><span><span>  plugins</span><span>:</span><span> [</span></span><span><span>    tailwindcss</span><span>()</span><span>,</span></span><span><span>  ]</span><span>,</span></span><span><span>}</span><span>)</span><span>;</span></span><span></span></code></pre></div></div>
<p>Tailwind CSS v4.0 is incredibly fast when used as a PostCSS plugin, but you'll get even better performance using the Vite plugin.</p>
<h2 id="automatic-content-detection"><a href="#automatic-content-detection">Automatic content detection</a></h2>
<p>You know how you always had to configure that annoying <code>content</code> array in Tailwind CSS v3? In v4.0, we came up with a bunch of heuristics for detecting all of that stuff automatically so you don’t have to configure it at all.</p>
<p>For example, we automatically ignore anything in your <code>.gitignore</code> file to avoid scanning dependencies or generated files that aren’t under version control:</p>
<div><p>.gitignore</p><div><pre tabindex="0"><code><span><span>/node_modules</span></span><span><span>/coverage</span></span><span><span>/.next/</span></span><span><span>/build</span></span><span></span></code></pre></div></div>
<p>We also automatically ignore all binary extensions like images, videos, .zip files, and more.</p>
<p>And if you ever need to explicitly add a source that's excluded by default, you can always add it with the <code>@source</code> directive, right in your CSS file:</p>
<div><p>CSS</p><div><pre tabindex="0"><code><span><span>@import</span><span> "tailwindcss"</span><span>;</span></span><span><span>@source</span><span> "../node_modules/@my-company/ui-lib"</span><span>;</span></span><span></span></code></pre></div></div>
<p>The <code>@source</code> directive uses the same heuristics under the hood, so it will exclude binary file types for example as well, without you having to specify all of the extensions to scan explicitly.</p>
<p>Learn more about in our new documentation on <a href="https://tailwindcss.com/docs/detecting-classes-in-source-files">detecting classes in source files</a>.</p>
<hr>
<h2 id="built-in-import-support"><a href="#built-in-import-support">Built-in import support</a></h2>
<p>Before v4.0, if you wanted to inline other CSS files using <code>@import</code> you'd have to configure another plugin like <code>postcss-import</code> to handle it for you.</p>
<p>Now we handle this out of the box, so you don't need any other tools:</p>
<div><p>postcss.config.js</p><div><pre tabindex="0"><code><span><span>export</span><span> default</span><span> {</span></span><span><span>  plugins</span><span>:</span><span> [</span></span><span><span>    "postcss-import"</span><span>,</span></span><span><span>    "@tailwindcss/postcss"</span><span>,</span></span><span><span>  ]</span><span>,</span></span><span><span>};</span></span><span></span></code></pre></div></div>
<p>Our import system is purpose-built for Tailwind CSS, so we've also been able to make it even faster by tightly integrating it with our engine.</p>
<hr>
<h2 id="css-first-configuration"><a href="#css-first-configuration">CSS-first configuration</a></h2>
<p>One of the biggest changes in Tailwind CSS v4.0 is the shift from configuring your project in JavaScript to configuring it in CSS.</p>
<p>Instead of a <code>tailwind.config.js</code> file, you can configure all of your customizations directly in the CSS file where you import Tailwind, giving you one less file to worry about in your project:</p>
<div><p>CSS</p><div><pre tabindex="0"><code><span><span>@import</span><span> "tailwindcss"</span><span>;</span></span><span></span><span><span>@theme</span><span> {</span></span><span><span>  --font-display</span><span>: </span><span>"Satoshi"</span><span>,</span><span> "sans-serif"</span><span>;</span></span><span></span><span><span>  --breakpoint-3xl</span><span>: </span><span>1920</span><span>px</span><span>;</span></span><span></span><span><span>  --color-avocado-100</span><span>: </span><span>oklch</span><span>(</span><span>0.99 0 0</span><span>);</span></span><span><span>  --color-avocado-200</span><span>: </span><span>oklch</span><span>(</span><span>0.98 0.04 113.22</span><span>);</span></span><span><span>  --color-avocado-300</span><span>: </span><span>oklch</span><span>(</span><span>0.94 0.11 115.03</span><span>);</span></span><span><span>  --color-avocado-400</span><span>: </span><span>oklch</span><span>(</span><span>0.92 0.19 114.08</span><span>);</span></span><span><span>  --color-avocado-500</span><span>: </span><span>oklch</span><span>(</span><span>0.84 0.18 117.33</span><span>);</span></span><span><span>  --color-avocado-600</span><span>: </span><span>oklch</span><span>(</span><span>0.53 0.12 118.34</span><span>);</span></span><span></span><span><span>  --ease-fluid</span><span>: </span><span>cubic-bezier</span><span>(</span><span>0.3</span><span>,</span><span> 0</span><span>,</span><span> 0</span><span>,</span><span> 1</span><span>);</span></span><span><span>  --ease-snappy</span><span>: </span><span>cubic-bezier</span><span>(</span><span>0.2</span><span>,</span><span> 0</span><span>,</span><span> 0</span><span>,</span><span> 1</span><span>);</span></span><span></span><span><span>  /* ... */</span></span><span><span>}</span></span><span></span></code></pre></div></div>
<p>The new CSS-first configuration lets you do just about everything you could do in your <code>tailwind.config.js</code> file, including configuring your design tokens, defining custom utilities and variants, and more.</p>
<p>To learn more about how it all works, read the new <a href="https://tailwindcss.com/docs/theme">theme variables</a> documentation.</p>
<hr>
<h2 id="css-theme-variables"><a href="#css-theme-variables">CSS theme variables</a></h2>
<p>Tailwind CSS v4.0 takes all of your design tokens and makes them available as CSS variables by default, so you can reference any value you need at run-time using just CSS.</p>
<p>Using the example <code>@theme</code> from earlier, all of these values will be added to your CSS to as regular custom properties:</p>
<div><p>Generated CSS</p><div><pre tabindex="0"><code><span><span>:root</span><span> {</span></span><span><span>  --font-display</span><span>: </span><span>"Satoshi"</span><span>,</span><span> "sans-serif"</span><span>;</span></span><span></span><span><span>  --breakpoint-3xl</span><span>: </span><span>1920</span><span>px</span><span>;</span></span><span></span><span><span>  --color-avocado-100</span><span>: </span><span>oklch</span><span>(</span><span>0.99 0 0</span><span>);</span></span><span><span>  --color-avocado-200</span><span>: </span><span>oklch</span><span>(</span><span>0.98 0.04 113.22</span><span>);</span></span><span><span>  --color-avocado-300</span><span>: </span><span>oklch</span><span>(</span><span>0.94 0.11 115.03</span><span>);</span></span><span><span>  --color-avocado-400</span><span>: </span><span>oklch</span><span>(</span><span>0.92 0.19 114.08</span><span>);</span></span><span><span>  --color-avocado-500</span><span>: </span><span>oklch</span><span>(</span><span>0.84 0.18 117.33</span><span>);</span></span><span><span>  --color-avocado-600</span><span>: </span><span>oklch</span><span>(</span><span>0.53 0.12 118.34</span><span>);</span></span><span></span><span><span>  --ease-fluid</span><span>: </span><span>cubic-bezier</span><span>(</span><span>0.3</span><span>,</span><span> 0</span><span>,</span><span> 0</span><span>,</span><span> 1</span><span>);</span></span><span><span>  --ease-snappy</span><span>: </span><span>cubic-bezier</span><span>(</span><span>0.2</span><span>,</span><span> 0</span><span>,</span><span> 0</span><span>,</span><span> 1</span><span>);</span></span><span></span><span><span>  /* ... */</span></span><span><span>}</span></span><span></span></code></pre></div></div>
<p>This makes it easy to reuse these values as inline styles or pass them to libraries like <a href="https://motion.dev/docs/react-animation#css-variables">Motion</a> to animate them.</p>
<hr>
<h2 id="dynamic-utility-values-and-variants"><a href="#dynamic-utility-values-and-variants">Dynamic utility values and variants</a></h2>
<p>We've simplified the way many utilities and variants work in v4.0 by effectively allowing them to accept certain types of arbitrary values, <em>without</em> the need for any configuration or dropping down to the arbitrary value syntax.</p>
<p>For example, in Tailwind CSS v4.0 you can create grids of any size out of the box:</p>
<div><p>HTML</p><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"grid </span><span>grid-cols-15</span><span>"</span><span>&gt;</span></span><span><span>  &lt;!-- ... --&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></div>
<p>You can also target custom boolean data attributes without needing to define them:</p>
<div><p>HTML</p><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> data-current</span><span> class</span><span>=</span><span>"opacity-75 </span><span>data-current:opacity-100</span><span>"</span><span>&gt;</span></span><span><span>  &lt;!-- ... --&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></div>
<p>Even spacing utilities like <code>px-*</code>, <code>mt-*</code>, <code>w-*</code>, <code>h-*</code>, and more are now dynamically derived from a single spacing scale variable and accept any value out of the box:</p>
<div><p>Generated CSS</p><div><pre tabindex="0"><code><span><span>@layer</span><span> theme </span><span>{</span></span><span><span>  :root</span><span> {</span></span><span><span>    --spacing</span><span>: </span><span>0.25</span><span>rem</span><span>;</span></span><span><span>  }</span></span><span><span>}</span></span><span></span><span><span>@layer</span><span> utilities </span><span>{</span></span><span><span>  .mt-8</span><span> {</span></span><span><span>    margin-top</span><span>: </span><span>calc</span><span>(</span><span>var</span><span>(</span><span>--spacing</span><span>)</span><span> *</span><span> 8</span><span>);</span></span><span><span>  }</span></span><span><span>  .w-17</span><span> {</span></span><span><span>    width</span><span>: </span><span>calc</span><span>(</span><span>var</span><span>(</span><span>--spacing</span><span>)</span><span> *</span><span> 17</span><span>);</span></span><span><span>  }</span></span><span><span>  .pr-29</span><span> {</span></span><span><span>    padding-right</span><span>: </span><span>calc</span><span>(</span><span>var</span><span>(</span><span>--spacing</span><span>)</span><span> *</span><span> 29</span><span>);</span></span><span><span>  }</span></span><span><span>}</span></span><span></span></code></pre></div></div>
<p>The upgrade tool we released alongside v4.0 will even simplify most of these utilities for you automatically if it notices you using an arbitrary value that's no longer needed.</p>
<hr>
<h2 id="modernized-p3-color-palette"><a href="#modernized-p3-color-palette">Modernized P3 color palette</a></h2>
<p>We've upgraded the entire default color palette from <code>rgb</code> to <code>oklch</code>, taking advantage of the wider gamut to make the colors more vivid in places where we were previously limited by the sRGB color space.</p>

<p>We've tried to keep the balance between all the colors the same as it was in v3, so even though we've refreshed things across the board, it shouldn't feel like a breaking change when upgrading your existing projects.</p>
<hr>
<h2 id="container-queries"><a href="#container-queries">Container queries</a></h2>
<p>We've brought container query support into core for v4.0, so you don't need the <code>@tailwindcss/container-queries</code> plugin anymore:</p>
<div><p>HTML</p><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>@container</span><span>"</span><span>&gt;</span></span><span><span>  &lt;</span><span>div</span><span> class</span><span>=</span><span>"grid grid-cols-1 </span><span>@sm:grid-cols-3</span><span> </span><span>@lg:grid-cols-4</span><span>"</span><span>&gt;</span></span><span><span>    &lt;!-- ... --&gt;</span></span><span><span>  &lt;/</span><span>div</span><span>&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></div>
<p>We've also added support for max-width container queries using the new <code>@max-*</code> variant:</p>
<div><p>HTML</p><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>@container</span><span>"</span><span>&gt;</span></span><span><span>  &lt;</span><span>div</span><span> class</span><span>=</span><span>"grid grid-cols-3 </span><span>@max-md:grid-cols-1</span><span>"</span><span>&gt;</span></span><span><span>    &lt;!-- ... --&gt;</span></span><span><span>  &lt;/</span><span>div</span><span>&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></div>
<p>Like our regular breakpoint variants, you can also stack <code>@min-*</code> and <code>@max-*</code> variants to define container query ranges:</p>
<div><p>HTML</p><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>@container</span><span>"</span><span>&gt;</span></span><span><span>  &lt;</span><span>div</span><span> class</span><span>=</span><span>"flex </span><span>@min-md:@max-xl:hidden</span><span>"</span><span>&gt;</span></span><span><span>    &lt;!-- ... --&gt;</span></span><span><span>  &lt;/</span><span>div</span><span>&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></div>
<p>Learn more in our all-new <a href="https://tailwindcss.com/docs/responsive-design#container-queries">container queries</a> documentation.</p>
<hr>
<h2 id="new-3d-transform-utilities"><a href="#new-3d-transform-utilities">New 3D transform utilities</a></h2>
<p>We've finally added APIs for doing 3D transforms, like <code>rotate-x-*</code>, <code>rotate-y-*</code>, <code>scale-z-*</code>, <code>translate-z-*</code>, and tons more.</p>
<div><figure><div><article><img src="https://images.unsplash.com/photo-1496128858413-b36217c2ce36?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=3603&amp;q=80" alt=""><div><p><time datetime="2020-03-16">Mar 16, 2020</time></p><div><svg view-box="0 0 2 2"><circle r="1" cx="1" cy="1"></circle></svg><p><img src="https://images.unsplash.com/photo-1519244703995-f4e0f30006d5?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=facearea&amp;facepad=2&amp;w=256&amp;h=256&amp;q=80" alt="">Michael Foster</p></div></div><p><span></span>Boost your conversion rate</p></article></div><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>perspective-distant</span><span>"</span><span>&gt;</span></span><span><span>  &lt;</span><span>article</span><span> class</span><span>=</span><span>"</span><span>rotate-x-51</span><span> </span><span>rotate-z-43</span><span> </span><span>transform-3d</span><span> ..."</span><span>&gt;</span></span><span><span>    &lt;!-- ... --&gt;</span></span><span><span>  &lt;/</span><span>article</span><span>&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></figure></div>
<p>Check out the updated <a href="https://tailwindcss.com/docs/transform-style"><code>transform-style</code></a>, <a href="https://tailwindcss.com/docs/rotate"><code>rotate</code></a>, <a href="https://tailwindcss.com/docs/perspective"><code>perspective</code></a>, and <a href="https://tailwindcss.com/docs/perspective-origin"><code>perspective-origin</code></a> documentation to get started.</p>
<hr>
<h2 id="expanded-gradient-apis"><a href="#expanded-gradient-apis">Expanded gradient APIs</a></h2>
<p>We've added a ton of new gradient features in v4.0, so you can pull off even fancier effects without having to write any custom CSS.</p>
<h3 id="linear-gradient-angles"><a href="#linear-gradient-angles">Linear gradient angles</a></h3>
<p>Linear gradients now support angles as values, so you can use utilities like <code>bg-linear-45</code> to create a gradient on a 45 degree angle:</p>
<div><figure><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>bg-linear-45</span><span> from-indigo-500 via-purple-500 to-pink-500"</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></figure></div>
<p>You may notice we've renamed <code>bg-gradient-*</code> to <code>bg-linear-*</code> too — you'll see why shortly!</p>
<h3 id="gradient-interpolation-modifiers"><a href="#gradient-interpolation-modifiers">Gradient interpolation modifiers</a></h3>
<p>We've added the ability to control the color interpolation mode for gradients using a modifier, so a class like <code>bg-linear-to-r/srgb</code> interpolates using sRGB, and <code>bg-linear-to-r/oklch</code> interpolates using OKLCH:</p>
<div><figure><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>bg-linear-to-r/srgb</span><span> from-indigo-500 to-teal-400"</span><span>&gt;</span><span>...</span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>bg-linear-to-r/oklch</span><span> from-indigo-500 to-teal-400"</span><span>&gt;</span><span>...</span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></figure></div>
<p>Using polar color spaces like OKLCH or HSL can lead to much more vivid gradients when the <code>from-*</code> and <code>to-*</code> colors are far apart on the color wheel. We're using OKLAB by default in v4.0 but you can always interpolate using a different color space by adding one of these modifiers.</p>
<h3 id="conic-and-radial-gradients"><a href="#conic-and-radial-gradients">Conic and radial gradients</a></h3>
<p>We've added new <code>bg-conic-*</code> and <code>bg-radial-*</code> utilities for creating conic and radial gradients:</p>
<div><figure><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"size-24 rounded-full </span><span>bg-conic/[in_hsl_longer_hue]</span><span> from-red-600 to-red-600"</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></span><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"size-24 rounded-full </span><span>bg-radial-[at_25%_25%]</span><span> from-white to-zinc-900 to-75%"</span><span>&gt;&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></figure></div>
<p>These new utilities work alongside the existing <code>from-*</code>, <code>via-*</code>, and <code>to-*</code> utilities to let you create conic and radial gradients the same way you create linear gradients, and include modifiers for setting the color interpolation method and arbitrary value support for controlling details like the gradient position.</p>
<hr>
<h2 id="starting-style-support"><a href="#starting-style-support">@starting-style support</a></h2>
<p>The new <code>starting</code> variant adds support for the new CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@starting-style"><code>@starting-style</code></a> feature, making it possible to transition element properties when an element is first displayed:</p>
<div><figure><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span>&gt;</span></span><span><span>  &lt;</span><span>button</span><span> popovertarget</span><span>=</span><span>"my-popover"</span><span>&gt;</span><span>Check for updates</span><span>&lt;/</span><span>button</span><span>&gt;</span></span><span><span>  &lt;</span><span>div</span><span> popover</span><span> id</span><span>=</span><span>"my-popover"</span><span> class</span><span>=</span><span>"</span><span>transition-discrete</span><span> </span><span>starting:open:opacity-0</span><span> ..."</span><span>&gt;</span></span><span><span>    &lt;!-- ... --&gt;</span></span><span><span>  &lt;/</span><span>div</span><span>&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></figure></div>
<p>With <code>@starting-style</code>, you can finally animate elements as they appear on the page without the need for any JavaScript at all. <a href="https://caniuse.com/mdn-css_at-rules_starting-style">Browser support</a> probably isn't quite there yet for most teams, but we're getting close!</p>
<hr>
<h2 id="not-variant"><a href="#not-variant">not-* variant</a></h2>
<p>We've added a new <code>not-*</code> variant which finally adds support for the CSS <code>:not()</code> pseudo-class:</p>
<div data-stack="true"><div><p>HTML</p><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>not-hover:opacity-75</span><span>"</span><span>&gt;</span></span><span><span>  &lt;!-- ... --&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></div><div><p>CSS</p><div><pre tabindex="0"><code><span><span>.not-hover</span><span>\:</span><span>opacity-75:not</span><span>(</span><span>*:hover</span><span>)</span><span> {</span></span><span><span>  opacity</span><span>: </span><span>75</span><span>%</span><span>;</span></span><span><span>}</span></span><span><span>@media</span><span> not</span><span> (</span><span>hover</span><span>:</span><span> hover</span><span>)</span><span> {</span></span><span><span>  .not-hover</span><span>\:</span><span>opacity-75</span><span> {</span></span><span><span>    opacity</span><span>: </span><span>75</span><span>%</span><span>;</span></span><span><span>  }</span></span><span><span>}</span></span><span></span></code></pre></div></div></div>
<p>It does double duty and also lets you negate media queries and <code>@supports</code> queries:</p>
<div data-stack="true"><div><p>HTML</p><div><pre tabindex="0"><code><span><span>&lt;</span><span>div</span><span> class</span><span>=</span><span>"</span><span>not-supports-hanging-punctation:px-4</span><span>"</span><span>&gt;</span></span><span><span>  &lt;!-- ... --&gt;</span></span><span><span>&lt;/</span><span>div</span><span>&gt;</span></span><span></span></code></pre></div></div><div><p>CSS</p><div><pre tabindex="0"><code><span><span>.not-supports-hanging-punctation</span><span>\:</span><span>px-4</span><span> {</span></span><span><span>  @</span><span>supports</span><span> not</span><span> (</span><span>hanging-punctation</span><span>: </span><span>var</span><span>(</span><span>--tw</span><span>)) {</span></span><span><span>    padding-inline</span><span>: </span><span>calc</span><span>(</span><span>var</span><span>(</span><span>--spacing</span><span>)</span><span> *</span><span> 4</span><span>);</span></span><span><span>  }</span></span><span><span>}</span></span><span></span></code></pre></div></div></div>
<p>Check out the new <a href="https://tailwindcss.com/docs/hover-focus-and-other-states#not"><code>not-*</code> documentation</a> to learn more.</p>
<hr>
<h2 id="even-more-new-utilities-and-variants"><a href="#even-more-new-utilities-and-variants">Even more new utilities and variants</a></h2>
<p>We've added a ton of other new utilities and variants to v4.0 too, including:</p>
<ul>
<li><strong>New <a href="https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow"><code>inset-shadow-*</code></a> and <a href="https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring"><code>inset-ring-*</code></a> utilities</strong> — making it possible to stack up to four layers of box shadows on a single element.</li>
<li><strong>New <a href="https://tailwindcss.com/docs/field-sizing"><code>field-sizing</code></a> utilities</strong> — for auto-resizing textareas without writing a single line of JavaScript.</li>
<li><strong>New <a href="https://tailwindcss.com/docs/color-scheme"><code>color-scheme</code></a> utilities</strong> — so you can finally get rid of those ugly light scrollbars in dark mode.</li>
<li><strong>New <a href="https://tailwindcss.com/docs/font-stretch"><code>font-stretch</code></a> utilities</strong> — for carefully tweaking variable fonts that support different widths.</li>
<li><strong>New <a href="https://tailwindcss.com/docs/hover-focus-and-other-states#styling-inert-elements"><code>inert</code></a> variant</strong> — for styling non-interactive elements marked with the <code>inert</code> attribute.</li>
<li><strong>New <a href="https://tailwindcss.com/docs/hover-focus-and-other-states#first-last-odd-and-even"><code>nth-*</code></a> variants</strong> — for doing really clever things you'll eventually regret.</li>
<li><strong>New <a href="https://tailwindcss.com/docs/hover-focus-and-other-states#implicit-groups"><code>in-*</code></a> variant</strong> — which is a lot like <code>group-*</code>, but without the need for the <code>group</code> class.</li>
<li><strong>Support for <a href="https://tailwindcss.com/docs/hover-focus-and-other-states#openclosed-state"><code>:popover-open</code></a></strong> — using the existing <code>open</code> variant to also target open popovers.</li>
<li><strong>New <a href="https://tailwindcss.com/docs/hover-focus-and-other-states#styling-all-descendants">descendant variant</a></strong> — for styling all descendant elements, for better or for worse.</li>
</ul>
<p>Check out the relevant documentation for all of these features to learn more.</p>
<hr>
<p><strong>And that's it — that's Tailwind CSS v4.0.</strong> It's been years of work to get to this point, but we're all extremely proud of this release and we can't wait to see what you build with it.</p>
<p>Check it out, play with it, maybe even break it, and definitely let us know what you think.</p>
<p>Just no bug reports until tomorrow please — let us at least enjoy one celebratory team dinner and maybe relax in the hot tub at this hotel for a bit believing that somehow we really did ship flawless software.</p></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Most Influential Papers in Computer Science History (305 pts)]]></title>
            <link>https://terriblesoftware.org/2025/01/22/the-7-most-influential-papers-in-computer-science-history/</link>
            <guid>42799103</guid>
            <pubDate>Thu, 23 Jan 2025 00:29:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://terriblesoftware.org/2025/01/22/the-7-most-influential-papers-in-computer-science-history/">https://terriblesoftware.org/2025/01/22/the-7-most-influential-papers-in-computer-science-history/</a>, See on <a href="https://news.ycombinator.com/item?id=42799103">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><br>Before we begin, let me be clear: yes, this <em>is</em> a subjective list. It’s not meant to end the debate — but to start it. These seven papers (sorted by date) stand out to me mostly because of their impact in today’s world. Honestly, each one deserves a blog post (or even a book!) of its own — but let’s keep it short for now. If your favorite doesn’t show up here, don’t worry, stick around for the bonus section at the end, where I’ll call out a few more that came <em>this</em> close to making the main list. So let’s dive in!</p>



<h3><br><strong>1. “On Computable Numbers, with an Application to the Entscheidungsproblem” (1936)</strong></h3>



<p><strong>Author:</strong> Alan Turing</p>



<p>It’s the 1930s, and a “programmable machine” sounds like something out of a sci-fi novel. Then along comes Alan Turing, laying the groundwork for what computers can theoretically do. He sketches out a hypothetical “Turing Machine,” proving that, if something is computable at all, a machine (in principle) can handle it.</p>



<h4><strong>The big idea</strong></h4>



<p>Turing’s simple model — just a tape, a head for reading/writing, and a finite set of states, turned into the granddaddy of all modern computation. It defined what’s solvable (and what’s not) in a purely mechanical sense, basically giving us the “rules of the game” for digital problem-solving.</p>



<h4><strong>Why it matters today</strong></h4>



<p>Every single programming language, every single piece of code out there, is playing by Turing’s rules. Even when we talk about quantum computing, we’re still referencing the boundaries Turing described. That’s a huge testament to the power of one paper published in the mid-1930s.</p>



<h4><strong>Learn more</strong></h4>



<ul>
<li><a href="https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf">https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf</a></li>



<li><a href="https://en.wikipedia.org/wiki/Turing%27s_proof">https://en.wikipedia.org/wiki/Turing%27s_proof</a></li>



<li><a href="https://www.youtube.com/watch?v=dNRDvLACg5Q">https://www.youtube.com/watch?v=dNRDvLACg5Q</a></li>
</ul>



<h3><br><strong>2. “A Mathematical Theory of Communication” (1948)</strong></h3>



<p><strong>Author:</strong> Claude Shannon</p>



<p>Now that Turing showed us what machines can (and can’t) do, how do we actually move information around? Enter Claude Shannon, who basically invented <a href="https://en.wikipedia.org/wiki/Information_theory">information theory</a> so we could talk about bits, entropy, and noisy channels in a rigorous way.</p>



<h4><strong>The big idea</strong></h4>



<p>Shannon took the abstract notion of “information” and turned it into something a little <em>bit</em> (pun intended) more measurable. This helped us figure out how to pack data more efficiently (compression) and how to protect it from errors (error-correcting codes), whether we’re sending signals into space or streaming Netflix on a Friday night.</p>



<h4><strong>Why it matters today</strong></h4>



<p>Every single time you send a text, stream a video, or call your mom on FaceTime, you’re using Shannon’s ideas. Without them, you’d be dealing with a lot more scrambled audio and jumbled data, trust me.</p>



<h4><strong><strong>Learn more</strong></strong></h4>



<ul>
<li><a href="https://people.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf">https://people.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf</a></li>



<li><a href="https://en.wikipedia.org/wiki/A_Mathematical_Theory_of_Communication">https://en.wikipedia.org/wiki/A_Mathematical_Theory_of_Communication</a></li>



<li><a href="https://www.youtube.com/watch?v=b6VdGHSV6qg">https://www.youtube.com/watch?v=b6VdGHSV6qg</a></li>



<li><a href="https://www.youtube.com/watch?v=kP0zi5lX-Fo">https://www.youtube.com/watch?v=kP0zi5lX-Fo</a></li>
</ul>



<h3><br><strong>3. “A Relational Model of Data for Large Shared Data Banks” (1970)</strong></h3>



<p><strong>Author:</strong> Edgar F. Codd</p>



<p>So, we can compute and communicate — awesome. But eventually, we’re buried under mountains of data. Edgar F. Codd saw this coming and introduced the relational model, which is basically the reason we’re able to store and query data.</p>



<h4><strong>The big idea</strong></h4>



<p>Codd said, “Let’s store data in tables and manipulate it with logical operations.” This might sound obvious now, but at the time it was revolutionary. His blueprint led to SQL and the huge family of relational databases that power, oh, basically every bank, retail website, and enterprise system you can imagine.</p>



<h4><strong>Why it matters today</strong></h4>



<p>Even in the NoSQL era, the underlying concepts of how we organize data (tables, schemas, consistency) trace right back to Codd. If you ever wrote a SQL query in your life — it’s all thanks to him.</p>



<h4><strong>Learn more</strong></h4>



<ul>
<li><a href="https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf">https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf</a></li>



<li><a href="https://en.wikipedia.org/wiki/Codd%27s_12_rules">https://en.wikipedia.org/wiki/Codd%27s_12_rules</a></li>
</ul>



<h3><br><strong>4. “The Complexity of Theorem-Proving Procedures” (1971)</strong></h3>



<div><p><strong>Author:</strong> Stephen A. Cook</p><p>Now that we’re storing data efficiently, what about the computation itself? Turns out some problems are just…painfully hard. Stephen Cook’s paper introduced NP-completeness, a concept that basically says, “Yep, some tasks are so difficult that even supercomputers sweat.”</p></div>



<h4><strong>The big idea</strong></h4>



<p>Cook showed that the <a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem">Boolean satisfiability problem</a> (SAT) is NP-complete, meaning if you magically solve SAT quickly, you’ve instantly cracked a whole bunch of other seemingly impossible problems. This created a universal language for talking about problem difficulty.</p>



<h4><strong>Why it matters today</strong></h4>



<p>Whenever you see “NP-hard” in a problem description, or wonder why route optimization kills your CPU, that’s Cook’s legacy. It led to huge developments in algorithms, cryptography, and the hunt for efficient solutions (or at least decent approximations).</p>



<h4><strong>Learn more</strong></h4>



<ul>
<li><a href="https://www.inf.unibz.it/~calvanese/teaching/14-15-tc/material/cook-1971-NP-completeness-of-SAT.pdf">https://www.inf.unibz.it/~calvanese/teaching/14-15-tc/material/cook-1971-NP-completeness-of-SAT.pdf</a></li>



<li><a href="https://en.wikipedia.org/wiki/P_versus_NP_problem">https://en.wikipedia.org/wiki/P_versus_NP_problem</a></li>



<li><a href="https://www.youtube.com/watch?v=dJUEkjxylBw">https://www.youtube.com/watch?v=dJUEkjxylBw</a></li>
</ul>



<h3><br><strong>5. “A Protocol for Packet Network Intercommunication” (1974)</strong></h3>



<p><strong>Authors:</strong> Vinton G. Cerf and Robert E. Kahn</p>



<p>Great, we have tough problems to solve and data to store — but how do we hook all these computers together? Cerf and Kahn’s TCP turned isolated networks into an interconnected web, letting data hop around the planet in tiny packets.</p>



<h3><strong>The big idea</strong></h3>



<p>They created a universal language for different networks to talk. Packets get split up, zipped through various routes, and reassembled on the other side. This flexibility opened the door for global connectivity — no single monolithic network required.</p>



<h3><strong>Why it matters today</strong></h3>



<p>Short answer? Pretty much the entire internet. Whenever you browse the web, send an email, or securely log in to your bank’s website, you’re leaning on TCP/IP to move those bits around reliably. Sure, some real-time applications might use UDP, but the core idea of IP-based networking — laid out by Cerf and Kahn — still unites all our devices under one global network.</p>



<h3><strong>Learn more</strong></h3>



<ul>
<li><a href="https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf">https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf</a></li>



<li><a href="https://www.youtube.com/watch?v=PG9oKZdFb7w">https://www.youtube.com/watch?v=PG9oKZdFb7w</a></li>
</ul>



<h3><br><strong>6. “Information Management: A Proposal” (1989)</strong></h3>



<p><strong>Author:</strong> Tim Berners-Lee</p>



<p>And speaking of TCP/IP — once machines could talk to each other easily, Tim Berners-Lee asked, “How about we make this thing friendly for everyone?” That’s where the World Wide Web was born.</p>



<h3><strong>The big idea</strong></h3>



<p>Berners-Lee pitched a global hypertext system, complete with hyperlinks, URLs, and HTTP. Suddenly, documents around the world were no longer isolated; they were “webbed” together, turning the internet into something normal people (not just scientists) could navigate.</p>



<h3><strong>Why it matters today</strong></h3>



<p>We live on the web. Whether it’s social media, online shopping, or reading obscure blog posts at 3 a.m., the seeds of it all came from this straightforward proposal. It changed how we share knowledge forever.</p>



<h3>Learn more</h3>



<ul>
<li><a href="https://cds.cern.ch/record/369245/files/dd-89-001.pdf">https://cds.cern.ch/record/369245/files/dd-89-001.pdf</a></li>



<li><a href="https://time.com/21039/tim-berners-lee-web-proposal-at-25/">https://time.com/21039/tim-berners-lee-web-proposal-at-25/</a></li>



<li><a href="https://www.youtube.com/watch?v=qJNrvVv7SdU">https://www.youtube.com/watch?v=qJNrvVv7SdU</a></li>
</ul>



<h3><br><strong>7. “The Anatomy of a Large-Scale Hypertextual Web Search Engine” (1998)</strong></h3>



<p><strong>Authors:</strong> Sergey Brin and Larry Page</p>



<p>Once Berners-Lee’s web blew up, it became a jungle of links, pages, and cat memes. Sergey Brin and Larry Page decided to tame that jungle. Their approach, based on link analysis, evolved into the search engine we now call “Google.”</p>



<h3><strong>The big idea</strong></h3>



<p>They introduced PageRank, which viewed links as votes of confidence rather than just a new dimension to count keywords. The result was a seismic jump in relevant search results, making the web feel, well…searchable.</p>



<h3><strong><strong>Why it matters today</strong></strong></h3>



<p>Type a question into Google and get an instant answer? That’s PageRank (and a lot of subsequent innovation) at work. It redefined how we navigate information online and kicked off a new era of data-driven tech—ads, analytics, machine learning, you name it.</p>



<h3>Learn more</h3>



<ul>
<li><a href="https://snap.stanford.edu/class/cs224w-readings/Brin98Anatomy.pdf">https://snap.stanford.edu/class/cs224w-readings/Brin98Anatomy.pdf</a></li>



<li><a href="https://en.wikipedia.org/wiki/PageRank">https://en.wikipedia.org/wiki/PageRank</a></li>



<li><a href="https://www.youtube.com/watch?v=v7n7wZhHJj8&amp;t=184s">https://www.youtube.com/watch?v=v7n7wZhHJj8&amp;t=184s</a></li>
</ul>



<hr>



<h2>Bonuses (5 That Almost Made the List)</h2>



<p>1. <strong>“Recursive Functions of Symbolic Expressions and Their Computation by Machine” (1960) – John McCarthy</strong></p>



<p>Introduced Lisp and the functional programming style that still sneaks into modern languages and frameworks.</p>



<p>2. <strong>“Go To Statement Considered Harmful” (1968) – Edsger Dijkstra</strong></p>



<p>A short but fiery editorial that argued <strong>goto</strong> leads to messy, unstructured code, sparking the structured programming revolution.</p>



<p>3. <strong>“Time, Clocks, and the Ordering of Events in a Distributed System” (1978) – Leslie Lamport</strong></p>



<p>You can’t sync real clocks perfectly in distributed systems, so you need logical ones. This is a must-read if you’re into distributed computing.</p>



<p>4. <strong><strong>“No Silver Bullet—Essence and Accident in Software Engineering” (1986) – Fred Brooks</strong></strong></p>



<p>Brooks argued that there’s no single magical fix for the inherent complexity of software development. Decades later, as we chase the “next big thing” in frameworks or methodologies, his message remains a sobering reminder that some problems are just hard.</p>



<p>5. <strong>“Attention Is All You Need” (2017) – Vaswani et al.</strong></p>



<p>The transformer architecture behind GPT and other big-name AI models. If you’re impressed by large language models, here’s your blueprint.</p>



<h2><strong>Conclusion</strong></h2>



<p>These days, we’re flooded with new stuff: fresh languages, mind-blowing AI breakthroughs, quantum leaps, and the JavaScript framework of the week. It’s all super exciting, but here’s the thing: foundations matter. Without them, we’re just piling on new toys without fully understanding the ground we’re building on. The papers in this post are a reminder of where our core concepts — data structures, algorithms, the very web — came from.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NIH hit with freezes on meetings, travel, communications, and hiring (258 pts)]]></title>
            <link>https://www.science.org/content/article/trump-hits-nih-devastating-freezes-meetings-travel-communications-and-hiring</link>
            <guid>42798960</guid>
            <pubDate>Thu, 23 Jan 2025 00:06:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/trump-hits-nih-devastating-freezes-meetings-travel-communications-and-hiring">https://www.science.org/content/article/trump-hits-nih-devastating-freezes-meetings-travel-communications-and-hiring</a>, See on <a href="https://news.ycombinator.com/item?id=42798960">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/trump-hits-nih-devastating-freezes-meetings-travel-communications-and-hiring: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Lossless Compression of Vector IDs for Approximate Nearest Neighbor Search (124 pts)]]></title>
            <link>https://arxiv.org/abs/2501.10479</link>
            <guid>42798811</guid>
            <pubDate>Wed, 22 Jan 2025 23:46:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2501.10479">https://arxiv.org/abs/2501.10479</a>, See on <a href="https://news.ycombinator.com/item?id=42798811">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2501.10479">View PDF</a>
    <a href="https://arxiv.org/html/2501.10479v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>Approximate nearest neighbor search for vectors relies on indexes that are most often accessed from RAM. Therefore, storage is the factor limiting the size of the database that can be served from a machine. Lossy vector compression, i.e., embedding quantization, has been applied extensively to reduce the size of indexes. However, for inverted file and graph-based indices, auxiliary data such as vector ids and links (edges) can represent most of the storage cost. We introduce and evaluate lossless compression schemes for these cases. These approaches are based on asymmetric numeral systems or wavelet trees that exploit the fact that the ordering of ids is irrelevant within the data structures. In some settings, we are able to compress the vector ids by a factor 7, with no impact on accuracy or search runtime. On billion-scale datasets, this results in a reduction of 30% of the index size. Furthermore, we show that for some datasets, these methods can also compress the quantized vector codes losslessly, by exploiting sub-optimalities in the original quantization algorithm. The source code for our approach available at <a href="https://github.com/facebookresearch/vector_db_id_compression" rel="external noopener nofollow">this https URL</a>.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Daniel Severo [<a href="https://arxiv.org/show-email/6b939155/2501.10479" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Thu, 16 Jan 2025 20:45:11 UTC (270 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Fiber is coming to Las Vegas (175 pts)]]></title>
            <link>https://fiber.googleblog.com/2025/01/las-vegas-get-ready-for-your-close-up.html</link>
            <guid>42798293</guid>
            <pubDate>Wed, 22 Jan 2025 22:41:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fiber.googleblog.com/2025/01/las-vegas-get-ready-for-your-close-up.html">https://fiber.googleblog.com/2025/01/las-vegas-get-ready-for-your-close-up.html</a>, See on <a href="https://news.ycombinator.com/item?id=42798293">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-version="1" id="main">

<article data-id="6670367414901558241" itemscope="" itemtype="http://schema.org/BlogPosting">

<section>
<p>
January 16, 2025
</p>

<ul>
<li>
<span>, </span>city news
</li>
</ul>



</section>
<section>
<p><img id="main_img" src="https://storage.googleapis.com/prod-fiber/blog/default_blue.svg">
</p>
<div>
<p>Network construction is officially underway in Las Vegas! We’ve broken ground on the west side of the city, with construction to follow in additional parts of Clark County next month.&nbsp;&nbsp;</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjMc8Soj302rB-Gqf9OqLEd6H5_XYnUIJTJNEGHFP_q-Kod8AoDo-dmdvBxu3YQW6XT9iNr13qco4L_sLau6bsADwrkFvSHu8YOasVXkeV9N4P3leKE7bH59LofCRmnRVD1iP4UyLjfVMWaCWn8HCHloRMWgwuG-asGkrtE0mtTwi-WGAU2obwx3nS59h-2/s2114/PXL_20250113_204948933.MP.jpg"><img alt="Thumbnail" data-original-height="2002" data-original-width="2114" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjMc8Soj302rB-Gqf9OqLEd6H5_XYnUIJTJNEGHFP_q-Kod8AoDo-dmdvBxu3YQW6XT9iNr13qco4L_sLau6bsADwrkFvSHu8YOasVXkeV9N4P3leKE7bH59LofCRmnRVD1iP4UyLjfVMWaCWn8HCHloRMWgwuG-asGkrtE0mtTwi-WGAU2obwx3nS59h-2/s16000/PXL_20250113_204948933.MP.jpg" title="Ashley Church, General Manager West Region"></a></p><p>Google Fiber announced agreements with both the <a href="https://fiber.google.com/blog/2024/05/light-it-up-gfiber-is-coming-to-vegas.html" target="_blank">City of Las Vegas</a> and<a href="https://www.instagram.com/p/C3BSJ6PrtRd/" target="_blank"> Clark County </a>in 2024. Now that construction has officially begun, we will continue to work closely with the city and county to build our network while minimizing disruption to residents.</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjk_AOQmpiX-BHkwHE-2jMbhvSqt46sAUF9xUn8fRQrwDVSqwrwm5bX_yb9DNZ6ThpdNEz-f-rRDtyG_kUtcjdxsxAw9K5BFUHyuFrlNydGs-B5crJzWbAd296n_uyo_ABRQ1Ht_yMGHHpomPChZDxO1DlDKgMi87r82H8OpazdNmacWUh5v3XqZhFUh38I/s4080/PXL_20250113_172538879.jpg"><img data-original-height="4080" data-original-width="3072" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjk_AOQmpiX-BHkwHE-2jMbhvSqt46sAUF9xUn8fRQrwDVSqwrwm5bX_yb9DNZ6ThpdNEz-f-rRDtyG_kUtcjdxsxAw9K5BFUHyuFrlNydGs-B5crJzWbAd296n_uyo_ABRQ1Ht_yMGHHpomPChZDxO1DlDKgMi87r82H8OpazdNmacWUh5v3XqZhFUh38I/s16000/PXL_20250113_172538879.jpg"></a></p><br><div><p>GFiber service will be available in parts of the metro area later this year. Nevada residents and business owners will be able to choose between <a href="https://fiber.google.com/states/nevada/" target="_blank">Google Fiber’s plans</a> with prices that haven’t changed since 2012 and speeds up to 8 gig.&nbsp;</p><p>For updates on construction progress, products and availability, sign up <a href="https://fiber.google.com/cities/metrolasvegas/" target="_blank">here</a>. We’re excited to be part of connecting this vibrant city.</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi2Djz58kaMw5M-LyrpMmHcak23ZNaBFsskQkZ2hTibpuqnOFKRYijhrR1nwsmT2IRtENWZT8wGWwTOyTUA76vRkj1VoHTP1K-uqX25ugbHCJof-hp69Zb2L4t4dSjRcbfLHeHrrZ2oXEZ7sApaGXSYR06phk0TNZJ-BYAEHgyFFbhhK1P8MG1ZRC5umMQY/s2048/image.jpg"><img data-original-height="2048" data-original-width="1542" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi2Djz58kaMw5M-LyrpMmHcak23ZNaBFsskQkZ2hTibpuqnOFKRYijhrR1nwsmT2IRtENWZT8wGWwTOyTUA76vRkj1VoHTP1K-uqX25ugbHCJof-hp69Zb2L4t4dSjRcbfLHeHrrZ2oXEZ7sApaGXSYR06phk0TNZJ-BYAEHgyFFbhhK1P8MG1ZRC5umMQY/s16000/image.jpg"></a></p><p>Posted by Ashley Church, General Manager West Region</p></div><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi3q_OgXU-IdCV4T8xU1ReWftTOH0wGov2NipSZW9PcbKV2n_o6vNPh9o4BG3PXfd6Zhjjnun3Sykxsovo2E6OZ3a3tnE92RqWL0FaTvIB5MeEpgi_wMOcklBVJz45p_lGlOCBi208wog-nflwsDClwdhA9Por2KxTWDYF0jQrqLe3teanuCktybwyjDHkE/s155/ashley%20church.png"><img data-original-height="155" data-original-width="155" height="155" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi3q_OgXU-IdCV4T8xU1ReWftTOH0wGov2NipSZW9PcbKV2n_o6vNPh9o4BG3PXfd6Zhjjnun3Sykxsovo2E6OZ3a3tnE92RqWL0FaTvIB5MeEpgi_wMOcklBVJz45p_lGlOCBi208wog-nflwsDClwdhA9Por2KxTWDYF0jQrqLe3teanuCktybwyjDHkE/s1600/ashley%20church.png" width="155"></a></p><br></div>

</section>
</article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[F-Droid's Progress and What's Coming in 2025 (297 pts)]]></title>
            <link>https://f-droid.org/2025/01/21/a-look-back-at-2024-f-droids-progress-and-whats-coming-in-2025.html</link>
            <guid>42798108</guid>
            <pubDate>Wed, 22 Jan 2025 22:18:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://f-droid.org/2025/01/21/a-look-back-at-2024-f-droids-progress-and-whats-coming-in-2025.html">https://f-droid.org/2025/01/21/a-look-back-at-2024-f-droids-progress-and-whats-coming-in-2025.html</a>, See on <a href="https://news.ycombinator.com/item?id=42798108">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>With 2024 now behind us, we wanted to take a moment to reflect on the growth
and achievements we accomplished as a community last year, and celebrate the
incredible support we received from the FOSS community throughout the
journey.</p>

<p>This year has been a milestone for us, with significant strides in
decentralizing app distribution, expanding the F-Droid ecosystem, and
solidifying our infrastructure. All of these advancements were made possible
thanks to donations, grants, our volunteers and regular contributors. So
thank you again to everyone who helped make 2024 another great year for
F-Droid. Now let’s take a closer look at what we accomplished.</p>

<h2 id="a-review-of-key-accomplishments-in-2024">A Review of Key Accomplishments in 2024</h2>

<h3 id="decentralizing-app-distribution-a-core-focus">Decentralizing App Distribution: A Core Focus</h3>

<p>One of the most important initiatives we worked on in 2024 was the continued
development of our app decentralization efforts. Our aim is to make F-Droid
a more robust and accessible platform, making further in-roads into the hold
Big Tech currently has on app distribution.  Building on the <a href="https://f-droid.org/en/2022/02/05/decentralizing-distribution.html">work we
started in
2022</a>, as a
part of the <a href="https://www.ffdweb.org/blog/guardian-project-annoucement/">Filecoin Foundation for the Decentralized Web
grant</a>, we
continued to make substantial progress this year in providing developers and
end-users with more options to distribute their apps through a
decentralized, equitable and privacy-oriented process. The goal for this
project is to enable individuals and organizations to mirror and distribute
F-Droid apps in a community-driven fashion, reducing reliance on centralized
services. This work ties into a larger vision of creating a truly
open-source ecosystem for Android apps that is not governed by proprietary
companies.</p>

<p>In 2024 we completed the following infrastructure upgrades:</p>

<ul>
  <li>
    <p>Broke out and overhauled core client logic around publishing and consuming
repositories.</p>
  </li>
  <li>
    <p>Made client logic into
<a href="https://f-droid.org/en/2023/05/02/three-client-libraries.html">libraries</a> to
make it easy to embed repositories in any app that needs it.</p>
  </li>
  <li>
    <p>Added support for mirroring repositories onto both IPFS and Filecoin.</p>
  </li>
  <li>
    <p>Added support in F-Droid client to use mirrors and repositories hosted on
IPFS and Filecoin.</p>
  </li>
  <li>
    <p>Improved F-Droid client “<a href="https://f-droid.org/en/docs/Whitelabel_Builds/">whitelabel
builds</a>”.</p>
  </li>
  <li>
    <p>Enhanced F-Droid client’s existing “nearby” and “app swap” capabilities.</p>
  </li>
  <li>
    <p>Updated F-Droid’s Repomaker tool (for easy “point and click” curation and
publishing of app repos) and add support for IPFS publishing.</p>
  </li>
  <li>
    <p>Supported iOS apps and progressive web apps (PWA) as packages that can be
shipped via repositories.</p>
  </li>
</ul>

<p>2024 marked the end of this grant period, however the tools, features and
policies established within the scope of the grant, will continue to be
developed thanks to donations and other funders who are committed to further
decentralizing app distribution.</p>

<h2 id="expanding-the-f-droid-ecosystem-repomaker-and-mobifree">Expanding the F-Droid Ecosystem: Repomaker and Mobifree</h2>

<p>Another key project we
<a href="https://f-droid.org/en/2024/05/24/mobifree.html">started</a> in 2024 was the
further exploration and expansion of tools within the F-Droid
ecosystem. Thanks to a major grant from <a href="https://cordis.europa.eu/project/id/101135795">EU Horizon
Europe</a>, we were able to
deepen our focus on tools like <a href="https://f-droid.org/en/repomaker/">Repomaker</a>,
which helps developers create their own F-Droid-compatible
repositories. This tool is crucial for maintaining and growing the diverse
range of apps available on F-Droid, and its expansion will support more
developers who wish to contribute to the platform.</p>

<p><a href="https://mobifree.org/">Mobifree</a> is an initiative that aims to provide a
free, open-source, and decentralized alternative to traditional mobile app
stores. It focuses on the freedom of choice, privacy, and user
empowerment. Our contributions to this project will help strengthen the ties
between F-Droid and other decentralized app distribution systems, ensuring
that we remain a key player in the future of open-source mobile software.</p>

<p>Do you have your own project ideas for Mobifree? You can apply for up to
50,000€ from <a href="https://nlnet.nl/mobifree/">NLnet NGI Mobifree</a>.  We can help
you apply, just reach out via the <a href="https://f-droid.org/en/about/#contact">regular F-Droid
channels</a>.</p>

<p>Key Contributions in 2024:</p>

<ul>
  <li>User research to understand app developer distribution workflows,
compensation models, index preferences and APK metadata.</li>
  <li>Built on existing Fastlane tooling to further automate the app package and
upload the process to F-Droid.</li>
  <li>Repomaker feature development made the repo creation and distribution
process easier for non-tech users, non-profit and humanitarian
organizations.</li>
  <li>Created a central registry of all DAPPER compatible repos and API for app
stores like Murena’s <a href="https://doc.e.foundation/app-lounge-main">App
Lounge</a> to pull in compatible
repos and further decentralize app distribution process.</li>
</ul>

<p>In 2025, we continue to contribute to the Mobifree project, getting our
tools, apps and software ready for pilot testing this spring. From there, we
will continue to improve the software based on user-testing feedback,
ultimately making the tools available for the general public to use and
enjoy.</p>



<p>None of this would be possible without the incredible contributions from the
FOSS community. In 2024, we saw a substantial increase in the number of
contributions to F-Droid. From bug fixes and app updates to new apps being
added to the store, our community of developers, testers, and contributors
have been pivotal in keeping F-Droid running smoothly.</p>

<p>Here are some statistics that highlight the community’s impact this year:</p>

<ul>
  <li>App Updates: Over 7205 app updates were made, keeping the app catalog
fresh and secure.</li>
  <li>New Apps Added: We welcomed over 402 new apps to the F-Droid repository,
further expanding the variety of open-source apps available to users.</li>
  <li>Archived Apps: 939 Apps were successfully archived.</li>
  <li>Packages per Hour: Approximately 2-3 packages were created every hour,
without interruption. Between updated and new apps, F-Droid built apps
over 7600 times. Since most modern apps are split per device architecture,
this means that each app version required multiple packages to be built,
sometimes up to 4 packages for each app version. This increases the real
number of builds by 2.5-3x. Putting it all together, that would equal
between 2-3 packages created per hour, without interruption in 2024.</li>
</ul>

<p>These numbers are a reflection of the dedication and passion of the F-Droid
community. We are immensely grateful for each and every contributor who made
these achievements possible.</p>

<h2 id="looking-ahead-in-2025">Looking Ahead in 2025</h2>

<h3 id="new-team-members-and-big-plans-for-2025">New Team Members and Big Plans for 2025</h3>

<p>As we look forward to 2025, we are excited to announce two key additions to
the F-Droid team who will help us scale our efforts in the coming
year. Hailey Still has joined us as a new project manager and UX
designer. Hailey brings a diverse background of experience in managing
complex projects and designing user-friendly and intuitive interfaces. Her
expertise will continue to be instrumental in helping us secure new grant
opportunities, streamline our operations and improve the user experience
tools we work on.</p>

<p>We are also pleased to welcome Nzambi Kakusu as our new grant
administrator. Nzambi will play a crucial role in helping us secure and
manage funding for F-Droid’s continued development. With her experience in
grant management, Nzambi will help ensure that we can continue to sustain
and grow the project in a way that aligns with our mission and values.</p>

<h3 id="otf-grant-and-infrastructure-work">OTF Grant and Infrastructure Work</h3>

<p>In 2025 we are thrilled to begin working on a grant funded by the <a href="https://www.opentech.fund/funds/free-and-open-source-software-sustainability-fund/">Open
Technology
Fund</a>.
This grant will help us maintain F-Droid and focus on critical
infrastructure work that was often overlooked, due to lack of consistent
funding in the past. We’ll be working on improving the resilience and
security of our systems, ensuring that F-Droid continues to serve as a
reliable, open-source app distribution platform for years to come. There
will be an official announcement article coming soon.</p>

<h2 id="to-wrap-it-up">To Wrap it Up</h2>

<p>As we continue to grow and evolve, we are committed to our mission of
decentralizing app distribution, expanding the F-Droid ecosystem, and
empowering users with open-source alternatives to proprietary software. With
the support of our community, our volunteers, and our new team members, we
are excited for what 2025 will bring.</p>

<p>Thank you for being part of the F-Droid journey!</p>

<p>We look forward to an exciting year ahead, and we invite you to continue
supporting F-Droid through <a href="https://f-droid.org/en/contribute/">contributions</a>,
<a href="https://f-droid.org/en/donate/">donations</a>, and <a href="https://floss.social/@fdroidorg">spreading the
word</a> about our mission. Let’s make 2025
another year of progress for the open-source community!</p>

  </div>

</article>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Federal Court (Finally) Rules Backdoor Searches of Data Unconstitutional (305 pts)]]></title>
            <link>https://www.eff.org/deeplinks/2025/01/victory-federal-court-finally-rules-backdoor-searches-702-data-unconstitutional</link>
            <guid>42797756</guid>
            <pubDate>Wed, 22 Jan 2025 21:32:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.eff.org/deeplinks/2025/01/victory-federal-court-finally-rules-backdoor-searches-702-data-unconstitutional">https://www.eff.org/deeplinks/2025/01/victory-federal-court-finally-rules-backdoor-searches-702-data-unconstitutional</a>, See on <a href="https://news.ycombinator.com/item?id=42797756">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article role="article">
  
  
  <div><p>Better late than never: last night a federal district court held that backdoor searches of databases full of Americans’ private communications collected under Section 702 ordinarily require a warrant. The landmark ruling comes in a criminal case, <a href="https://www.eff.org/cases/united-states-v-hasbajrami"><em>United States v. Hasbajrami</em></a>, after more than a decade of litigation, and over four years since the Second Circuit Court of Appeals <a href="https://cases.justia.com/federal/appellate-courts/ca2/15-2684/15-2684-2019-12-18.pdf?ts=1576692009">found</a> that backdoor searches constitute “separate Fourth Amendment events” and directed the district court to determine a warrant was required. Now, that has been officially decreed.</p>
<p>In the intervening years, Congress <a href="https://www.eff.org/deeplinks/2024/04/us-senate-and-biden-administration-shamefully-renew-and-expand-fisa-section-702-0">has reauthorized</a> Section 702 multiple times, each time ignoring overwhelming evidence that the FBI and the intelligence community abuse their access to databases of warrantlessly collected messages and other data. The Foreign Intelligence Surveillance Court (FISC), which Congress assigned with the primary role of judicial oversight of Section 702, has also <a href="https://www.eff.org/deeplinks/2023/06/foreign-intelligence-surveillance-court-has-made-mockery-constitutional-right">repeatedly dismissed</a> arguments that the backdoor searches violate the Fourth Amendment, giving the intelligence community endless do-overs despite its <a href="https://www.eff.org/deeplinks/2019/10/secret-court-rules-fbis-backdoor-searches-americans-violated-fourth-amendment">repeated transgressions</a> of even lax safeguards on these searches.</p>
<p>This decision sheds light on the government’s liberal use of what is essential a “finders keepers” rule regarding your communication data. As a legal authority, FISA Section 702 allows the intelligence community to collect a massive amount of communications data from overseas in the name of “national security.” But, in cases where one side of that conversation is a person on US soil, that data is still collected and retained in large databases searchable by federal law enforcement. Because the US-side of these communications is already collected and just sitting there, the government has claimed that law enforcement agencies do not need a warrant to sift through them. EFF argued for over a decade that this is unconstitutional, and now a federal court agrees with us.</p>
<p>EFF argued for over a decade that this is unconstitutional, and now a federal court agrees with us.</p>
<p><em>Hasbajrami </em>involves a U.S. resident who was arrested at New York JFK airport in 2011 on his way to Pakistan and charged with providing material support to terrorists. Only after his original conviction did the government explain that its case was premised in part on emails between Mr. Hasbajrami and an unnamed foreigner associated with terrorist groups, emails collected warrantless using Section 702 programs, placed in a database, then searched, again without a warrant, using terms related to Mr. Hasbajrami himself.</p>
<p>The district court found that regardless of whether the government can lawfully warrantlessly collect communications between foreigners and Americans using Section 702, it cannot ordinarily rely on a “foreign intelligence exception” to the Fourth Amendment’s warrant clause when searching these communications, as is the FBI’s routine practice. And, even if such an exception did apply, the court found that the intrusion on privacy caused by reading our most sensitive communications rendered these searches “unreasonable” under the meaning of the Fourth Amendment. In 2021 alone, the FBI conducted <a href="https://www.dni.gov/files/CLPT/documents/2022_ASTR_for_CY2020_FINAL.pdf">3.4 million warrantless</a> searches of US person’s 702 data.</p>
<p>In light of this ruling, we ask Congress to uphold its responsibility to protect civil rights and civil liberties by refusing to renew Section 702 absent a number of necessary reforms, including an official warrant requirement for querying US persons data and increased transparency. On April 15, 2026, Section 702 is set to expire. We expect any lawmaker worthy of that title to listen to what this federal court is saying and create a legislative warrant requirement so that the intelligence community does not continue to trample on the constitutionally protected rights to private communications. More immediately, the FISC should amend its rules for backdoor searches and require the FBI to seek a warrant before conducting them.</p>

</div>

          </article>
    </div><div>
          <h2>Join EFF Lists</h2>
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The ultra-fast cancer treatments which could replace conventional radiotherapy (122 pts)]]></title>
            <link>https://www.bbc.com/future/article/20250121-the-physics-transforming-cancer</link>
            <guid>42797281</guid>
            <pubDate>Wed, 22 Jan 2025 20:43:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/future/article/20250121-the-physics-transforming-cancer">https://www.bbc.com/future/article/20250121-the-physics-transforming-cancer</a>, See on <a href="https://news.ycombinator.com/item?id=42797281">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0kl5vy5.jpg.webp 160w,https://ichef.bbci.co.uk/images/ic/240xn/p0kl5vy5.jpg.webp 240w,https://ichef.bbci.co.uk/images/ic/320xn/p0kl5vy5.jpg.webp 320w,https://ichef.bbci.co.uk/images/ic/480xn/p0kl5vy5.jpg.webp 480w,https://ichef.bbci.co.uk/images/ic/640xn/p0kl5vy5.jpg.webp 640w,https://ichef.bbci.co.uk/images/ic/800xn/p0kl5vy5.jpg.webp 800w,https://ichef.bbci.co.uk/images/ic/1024xn/p0kl5vy5.jpg.webp 1024w,https://ichef.bbci.co.uk/images/ic/1376xn/p0kl5vy5.jpg.webp 1376w,https://ichef.bbci.co.uk/images/ic/1920xn/p0kl5vy5.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0kl5vy5.jpg.webp" alt="Getty Images A patient being prepared for proton therapy at The Rinecker Proton Therapy Center in Munich, Germany (Credit: Getty Images)"><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>(Credit: Getty Images)<!-- --></figcaption></p></figure><p><b id="a-pioneering-new-treatment-promises-to-tackle-a-wider-range-of-cancers,-with-fewer-side-effects-than-conventional-radiotherapy.-it-also-takes-less-than-a-second.">A pioneering new treatment promises to tackle a wider range of cancers, with fewer side-effects than conventional radiotherapy. It also takes less than a second.<!-- --></b></p><p>In a series of vast underground caverns on the outskirts of Geneva, Switzerland, experiments are taking place which may one day lead to new generation of radiotherapy machines. The hope is that these devices could make it possible to <!-- --><a target="_blank" href="https://indico.cern.ch/event/1248259/contributions/5491082/attachments/2694709/4676565/Nature%20review.pdf">cure complex brain tumours<!-- --></a>, <!-- --><a target="_blank" href="https://www.appliedradiationoncology.com/articles/flash-radiation-therapy-review-of-the-literature-and-considerations-for-future-research-and-proton-therapy-flash-trials">eliminate cancers that have metastasised<!-- --></a> to distant organs, and generally <!-- --><a target="_blank" href="https://www.spandidos-publications.com/10.3892/ol.2022.13539">limit the toll<!-- --></a> which cancer treatment exerts on the human body.<!-- --></p><p>The home of these experiments is the European Laboratory for Particle Physics (Cern), best known to the world as the particle physics hub that developed the Large Hadron Collider, a 27 kilometre (16.7 mile)-long ring of superconducting magnets capable of accelerating particles to near the speed of light.<!-- --></p><p>Arguably Cern's crowning achievement was the <!-- --><a target="_blank" href="https://link.springer.com/article/10.1140/epjh/e2014-50026-9">2012 discovery<!-- --></a> of the Higgs boson, the so-called "God Particle" which gives other particles their mass and in doing so lays the foundation for everything that exists in the universe. But in recent years, the centre's unique expertise in accelerating high-energy particles has found a new niche – the world of cancer radiotherapy.<!-- --></p><p>Eleven years ago, Marie-Catherine Vozenin, a radiobiologist now working at Geneva University Hospitals (Hug), and others published <!-- --><a target="_blank" href="https://www.science.org/doi/10.1126/scitranslmed.3008973">a paper<!-- --></a> outlining a paradigm-shifting approach to traditional radiotherapy treatment which they called Flash. By delivering radiation at ultra-high dose rates, with exposures of less than a second, they showed that it was possible to destroy tumours in rodents while sparing healthy tissue.<!-- --></p><p>Its impact was immediate. International experts <!-- --><a target="_blank" href="https://www.sciencedirect.com/science/article/abs/pii/S1053429624000286">described it<!-- --></a> as a seminal breakthrough, and it galvanised fellow radiobiologists around the world to conduct their own experiments using the Flash approach to treat a wide variety of tumours in rodents, household pets, and now humans.<!-- --></p><p>The Flash concept resonated as it addressed some of the long-standing limitations of radiotherapy, one of the most common cancer therapies, which <!-- --><a target="_blank" href="https://www.oncotarget.com/article/18409/text/">two-thirds of all cancer patients<!-- --></a> will receive at some point in their treatment journey. Typically delivered through administering a beam of X-rays or other particles over the course of two to five minutes, the total dose is usually spread across dozens of individual treatment sessions over up to eight weeks, to make it more tolerable for the patient.<!-- --></p><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0kl5w4t.jpg.webp 160w,https://ichef.bbci.co.uk/images/ic/240xn/p0kl5w4t.jpg.webp 240w,https://ichef.bbci.co.uk/images/ic/320xn/p0kl5w4t.jpg.webp 320w,https://ichef.bbci.co.uk/images/ic/480xn/p0kl5w4t.jpg.webp 480w,https://ichef.bbci.co.uk/images/ic/640xn/p0kl5w4t.jpg.webp 640w,https://ichef.bbci.co.uk/images/ic/800xn/p0kl5w4t.jpg.webp 800w,https://ichef.bbci.co.uk/images/ic/1024xn/p0kl5w4t.jpg.webp 1024w,https://ichef.bbci.co.uk/images/ic/1376xn/p0kl5w4t.jpg.webp 1376w,https://ichef.bbci.co.uk/images/ic/1920xn/p0kl5w4t.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0kl5w4t.jpg.webp" alt="Getty Images Conventional radiotherapy involves exposing cancerous tissues to radiation, usually X-rays, for at least several minutes (Credit: Getty Images)"><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>Conventional radiotherapy involves exposing cancerous tissues to radiation, usually X-rays, for at least several minutes (Credit: Getty Images)<!-- --></figcaption></p></figure><p>Over the past three decades, advanced imaging scans and state-of-the-art radiotherapy machines have made it possible to target an individual tumour <!-- --><a target="_blank" href="https://www.nature.com/articles/s41416-019-0412-y">with increasing precision<!-- --></a>. But the risk of <!-- --><a target="_blank" href="https://acsjournals.onlinelibrary.wiley.com/doi/10.3322/caac.21689">damaging or deadly side effects<!-- --></a> is still present.<!-- --></p><p>Vozenin cites the example of paediatric brain tumours, which can often be cured by blasting the brain with radiotherapy, but at a great cost. "The survivors are often left with lifelong anxiety and depression, while the impact of the radiation affects brain development, causing significant loss of IQ," she says. "We're [sometimes] able to cure these kids but the price they pay is high."<!-- --></p><p>Billy Loo, a professor of radiation oncology who runs the Flash sciences lab at Stanford University School of Medicine in the US, explains that tumours, especially those of larger volume, are rarely neatly segregated from the surrounding tissue. This means it's often next to impossible to avoid harming healthy cells, so oncologists are often unable to use as high a dose as they would like, says Loo.<!-- --></p><p>Cancer specialists have long believed that being able to boost the radiation dose would greatly enhance their ability to cure patients with difficult-to-treat cancers, according to Vozenin. For example, research has previously indicated that being able to <!-- --><a target="_blank" href="https://www.frontiersin.org/journals/oncology/articles/10.3389/fonc.2020.576700/full">increase the radiation dose<!-- --></a> in lung cancer patients with tumours that have metastasised to the brain could improve survival.<!-- --></p><p>In recent years, animal studies have repeatedly shown that Flash makes it possible to markedly increase the amount of radiation delivered to the body while minimising the impact that it has on surrounding healthy tissue. In one experiment, healthy lab mice <!-- --><a target="_blank" href="https://www.biorxiv.org/content/10.1101/2024.07.08.602528v1.abstract">which were given two rounds of radiation via Flash<!-- --></a> did not develop the typical side effects which would be expected during the second round. In another study, animals <!-- --><a target="_blank" href="https://aacrjournals.org/mct/article/23/6/877/745462">treated with<!-- --></a> Flash for head and neck cancers experienced fewer side effects, such as reduced saliva production or difficulty swallowing.<!-- --></p><p>Loo is cautiously optimistic that going forwards, such benefits may also translate to human patients. "Flash produces less normal tissue injury than conventional irradiation, without compromising anti-tumour efficacy – which could be game-changing," he says. An additional hope is that this could then <!-- --><a target="_blank" href="https://onkder.org/pdf/pdf_TOD_1443.pdf">reduce the risk of secondary cancers<!-- --></a>, resulting from radiation-induced damage later in life, although it is still too early to know if that will be the case.<!-- --></p><p>Now, increasing numbers of human trials are beginning to take place around the world. Cincinnati Children's Hospital in Ohio, US, is <!-- --><a target="_blank" href="https://clinicaltrials.gov/study/NCT05524064?intr=FLASH%20Radiotherapy&amp;rank=1">planning an early stage trial<!-- --></a> in children with metastatic cancer that has spread to their chest bones. Meanwhile, oncologists at Lausanne University Hospital in Switzerland are conducting a <!-- --><a target="_blank" href="https://clinicaltrials.gov/study/NCT05724875?intr=FLASH%20Radiotherapy&amp;rank=3">Phase 2 trial<!-- --></a> – where the details are finessed, including the optimum dose, how effective the treatment is and if there are any side effects – for patients with localised skin cancer.<!-- --></p><p>But the next phase of research is not only about testing whether Flash works in people. It's also about identifying which <!-- --><i id="kind">kind<!-- --></i> of radiation is the best one to use.<!-- --></p><p data-component="subheadline-block"><h2><span id="a-choice-of-particles"><b id="a-choice-of-particles">A choice of particles<!-- --></b></span></h2></p><p>From carbon ions to protons and electrons, there are many ways of delivering radiotherapy, each with different applications and challenges. One of the most precise forms of radiotherapy is hadron therapy, delivered with carbon ions. But there are only 14 facilities which can deliver this in the entire world, each one costing <!-- --><a target="_blank" href="https://www.tandfonline.com/doi/full/10.1080/0284186X.2020.1769184">an estimated $150m (£122m)<!-- --></a>. Currently this therapy is delivered using a conventional dosing regime, in which the radiation is delivered over <!-- --><a target="_blank" href="https://pubmed.ncbi.nlm.nih.gov/35816888/">several minutes<!-- --></a>. However, with the Flash protocol the ions would be delivered in less than a second.<!-- --></p><p>"High energy electrons can be used to treat superficial tumours in the skin," says André-Dante Durham Faivre, a radiation oncologist at Hug. "Photons, i.e. X-rays, or protons [a type of subatomic particle], can be used to treat deeper tumours, while we save carbon ions and helium particles for very specialised cases, as it's only very, very big clinical centres that can offer that type of treatment. The particle accelerator needed to administer carbon ion radiotherapy is the size of a building."<!-- --></p><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0kl5wcg.jpg.webp 160w,https://ichef.bbci.co.uk/images/ic/240xn/p0kl5wcg.jpg.webp 240w,https://ichef.bbci.co.uk/images/ic/320xn/p0kl5wcg.jpg.webp 320w,https://ichef.bbci.co.uk/images/ic/480xn/p0kl5wcg.jpg.webp 480w,https://ichef.bbci.co.uk/images/ic/640xn/p0kl5wcg.jpg.webp 640w,https://ichef.bbci.co.uk/images/ic/800xn/p0kl5wcg.jpg.webp 800w,https://ichef.bbci.co.uk/images/ic/1024xn/p0kl5wcg.jpg.webp 1024w,https://ichef.bbci.co.uk/images/ic/1376xn/p0kl5wcg.jpg.webp 1376w,https://ichef.bbci.co.uk/images/ic/1920xn/p0kl5wcg.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0kl5wcg.jpg.webp" alt="Getty Images Proton therapy can be more precisely targeted at cancers, leading to less damage to healthy tissues (Credit: Getty Images)"><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>Proton therapy can be more precisely targeted at cancers, leading to less damage to healthy tissues (Credit: Getty Images)<!-- --></figcaption></p></figure><p>This is one tricky problem with Flash therapies. Because creating subatomic particles requires <!-- --><a target="_blank" href="https://www.sciencedirect.com/science/article/pii/S1120179720301964">extremely complex particle accelerators<!-- --></a>, at the moment this treatment can only be delivered via vast pieces of equipment in specialist centres, which is expensive. This means patients will most likely need to travel long distances for their treatment – and while researchers hope that eventually Flash will be <!-- --><a target="_blank" href="https://news.cancerresearchuk.org/2024/01/25/revolutionising-radiotherapy-how-were-innovating-a-century-old-cancer-treatment">available to everyone<!-- --></a> who needs it, at the moment treatments such as proton therapy are only <!-- --><a target="_blank" href="https://www.sciencedirect.com/science/article/pii/S1053429624000298">available to a relatively small minority of patients<!-- --></a>.<!-- --></p><p>So far, protons have been the particle of choice for human Flash trials, both because they can penetrate <!-- --><a target="_blank" href="https://ukprotontherapy.co.uk/about-proton-therapy/how-proton-therapy-works/">up to 30cm (12in)<!-- --></a> into the body, enabling them to reach relatively deep internal organs, and because existing proton radiotherapy machines can be adapted relatively easily to deliver Flash dose rates.<!-- --></p><p>In 2020, the University of Cincinnati Medical Centre launched the first ever clinical trial of Flash proton radiotherapy in patients whose primary cancer had metastasised to the bones, with <!-- --><a target="_blank" href="https://jamanetwork.com/journals/jamaoncology/fullarticle/2797843">early results<!-- --></a> suggesting that the treatment was just as effective as conventional radiotherapy and the incidence of adverse events was similar. Now, radiation oncologists at the University of Pennsylvania Perelman School of Medicine are hoping to launch their own trial later this year in patients with recurrent head and neck cancer.<!-- --></p><p>"These are patients who have few other options as their tumours are impossible to remove via surgery," says Alexander Lin, professor of radiation oncology at the University of Pennsylvania, who will lead the proposed trial. "Going through another course of standard radiotherapy would potentially lead to dangerous side effects such as jaw fractures, mouth wounds and even potentially fatal damage to the carotid artery. We believe that proton Flash will be less toxic."<!-- --></p><p data-component="subheadline-block"><h2><span id="a-practical-challenge"><b id="a-practical-challenge">A practical challenge<!-- --></b></span></h2></p><p>However, if proton Flash were to be approved by regulators in future, Durham Faivre says that one of the disadvantages is that the machines required are still relatively large, meaning the treatment could only be administered in a select number of centres, restricting patient access.<!-- --></p><p>Now Cern <!-- --><a target="_blank" href="https://home.cern/news/news/knowledge-sharing/cern-chuv-and-theryq-join-forces-world-first-cancer-radiotherapy">are working<!-- --></a> with researchers at Lausanne University Hospital and the French company TheryQ to try and develop a new form of accelerator which delivers even more radiation – described as <!-- --><a target="_blank" href="https://www.nature.com/articles/s41598-024-60997-5">very high energy electrons<!-- --></a> – at Flash dose rates. And according to Durham Faivre, Hug researchers are currently in discussions with commercial partners to develop an X-ray Flash machine.<!-- --></p><p>Such accelerators could enable the benefits of Flash to be applied to deep tumours without requiring a vast machine, says Durham Faivre. The ultimate goal is to make it possible for any hospital with radiotherapy equipment to be able to provide Flash. "We believe that X-ray Flash machines could in time replace existing conventional X-ray machines," he says.<!-- --></p><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0kl5wvy.jpg.webp 160w,https://ichef.bbci.co.uk/images/ic/240xn/p0kl5wvy.jpg.webp 240w,https://ichef.bbci.co.uk/images/ic/320xn/p0kl5wvy.jpg.webp 320w,https://ichef.bbci.co.uk/images/ic/480xn/p0kl5wvy.jpg.webp 480w,https://ichef.bbci.co.uk/images/ic/640xn/p0kl5wvy.jpg.webp 640w,https://ichef.bbci.co.uk/images/ic/800xn/p0kl5wvy.jpg.webp 800w,https://ichef.bbci.co.uk/images/ic/1024xn/p0kl5wvy.jpg.webp 1024w,https://ichef.bbci.co.uk/images/ic/1376xn/p0kl5wvy.jpg.webp 1376w,https://ichef.bbci.co.uk/images/ic/1920xn/p0kl5wvy.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0kl5wvy.jpg.webp" alt="Getty Images A patient being prepared for conventional radiotherapy alongside electron beam radiotherapy at a hospital in Savoie, France (Credit: Getty Images)"><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>A patient being prepared for conventional radiotherapy alongside electron beam radiotherapy at a hospital in Savoie, France (Credit: Getty Images)<!-- --></figcaption></p></figure><p>In particular, Durham Faivre is optimistic that newer accelerators <!-- --><a target="_blank" href="https://www.sciencedirect.com/science/article/pii/S0167814024000987">could allow<!-- --></a> oncologists to tackle more complex tumours such as glioblastoma, the <!-- --><a target="_blank" href="https://www.cancerresearchuk.org/about-cancer/brain-tumours/types/glioblastoma">most common form of brain cancer<!-- --></a> and one of the deadliest forms of the disease, with a five-year survival rate of <!-- --><a target="_blank" href="https://www.thebraintumourcharity.org/brain-tumour-diagnosis-treatment/types-of-brain-tumour-adult/glioblastoma/glioblastoma-prognosis/">just 5%<!-- --></a>.<!-- --></p><p>Following on from the University of Cincinnati trial, oncologists are also hopeful that Flash machines <!-- --><a target="_blank" href="https://www.frontiersin.org/journals/oncology/articles/10.3389/fonc.2023.1254601/full">could improve<!-- --></a> the treatment of various forms of metastatic disease (where the cancer has spread from its primary location) and actually cure patients who were previously considered incurable. Loo predicts that Flash could be used to destroy the primary and secondary tumours, then followed by chemotherapy or immunotherapy to eliminate the microscopic cancer cells which are enabling the disease to spread.<!-- --></p><p>"Metastatic cancers involve large volumes of the body because of their diffuse distribution," says Durham Faivre. He explains that this means they're usually hard to cure, because it wouldn’t be possible to deliver enough radiation to the body’s tissues to kill all the cancerous cells. If you did, the patient may not survive the effects of the radiation on previously healthy tissue. But newer treatments are changing this, he says, particularly in people with limited metastases. &nbsp;“Flash offers the prospect of safely treating many more metastases," he says.<!-- --></p><p>Another hope is that Flash could ultimately help make radiotherapy more accessible to all.<!-- --></p><p data-component="subheadline-block"><h2><span id="the-radiotherapy-gap"><b id="the-radiotherapy-gap">The radiotherapy gap<!-- --></b></span></h2></p><p>At last September's UICC World Cancer Congress – a conference that brings together cancer experts from around the world – Katy Graef, vice-president of the non-profit Bio Ventures for Global Health, highlighted a major challenge in global health which is sometimes referred to as "<!-- --><a target="_blank" href="https://www.redjournal.org/article/S0360-3016(24)03372-8/abstract">the radiotherapy gap<!-- --></a>".<!-- --></p><p>Using data compiled by the <!-- --><a target="_blank" href="https://www.thelancet.com/commissions/radiotherapy-theranostics">Lancet Oncology Commission<!-- --></a>, Graef described how there are only 195 radiotherapy machines in the whole of sub-Saharan Africa, compared with 4,172 in the US and Canada. With the annual incidence and mortality from cancer <!-- --><a target="_blank" href="https://www.frontiersin.org/journals/public-health/articles/10.3389/fpubh.2022.839835/full">expected to double<!-- --></a> across the African continent by 2040, she explained that it has been projected that the region will require more than 5,000 additional machines in the next two decades, a demand which many nations will struggle to afford.<!-- --></p><p>In December, <!-- --><a target="_blank" href="https://www.thelancet.com/journals/lanonc/article/PIIS1470-2045(24)00405-4/abstract">a new review<!-- --></a> of national cancer control plans around the globe highlighted how the radiotherapy gap extends beyond Africa to many low and middle-income countries. "Only about 10% of cancer patients in low-income countries have access to radiotherapy, compared to 90% in high-income countries," says Lisa Stevens, director of the programme of action for cancer therapy at the International Atomic Energy Agency, and one of the authors on the paper. "The integration of radiotherapy into cancer control strategies is more crucial than ever."<!-- --></p><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/images/ic/160xn/p0kl5wq5.jpg.webp 160w,https://ichef.bbci.co.uk/images/ic/240xn/p0kl5wq5.jpg.webp 240w,https://ichef.bbci.co.uk/images/ic/320xn/p0kl5wq5.jpg.webp 320w,https://ichef.bbci.co.uk/images/ic/480xn/p0kl5wq5.jpg.webp 480w,https://ichef.bbci.co.uk/images/ic/640xn/p0kl5wq5.jpg.webp 640w,https://ichef.bbci.co.uk/images/ic/800xn/p0kl5wq5.jpg.webp 800w,https://ichef.bbci.co.uk/images/ic/1024xn/p0kl5wq5.jpg.webp 1024w,https://ichef.bbci.co.uk/images/ic/1376xn/p0kl5wq5.jpg.webp 1376w,https://ichef.bbci.co.uk/images/ic/1920xn/p0kl5wq5.jpg.webp 1920w" src="https://ichef.bbci.co.uk/images/ic/480xn/p0kl5wq5.jpg.webp" alt="Getty Images Particle accelerators are expanding the range of radiation treatments available to cancer patients (Credit: Getty Images)"><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>Particle accelerators are expanding the range of radiation treatments available to cancer patients (Credit: Getty Images)<!-- --></figcaption></p></figure><p>The challenges behind these statistics go beyond the mere costs of the machines. In hot and humid environments, radiotherapy particle accelerators often break down, and with few trained technicians, repairs can take time. As a result, the International Cancer Expert Corps (ICEC) have launched an initiative called <!-- --><a target="_blank" href="https://home.cern/news/news/knowledge-sharing/re-engineering-radiotherapy">Project Stella<!-- --></a>, in partnership with Cern and several UK universities, which aims to develop next-generation accelerators with integrated software that can predict faults in advance and streamline maintenance, enabling countries to make the best use of the machines they have by minimising downtime.<!-- --></p><p>But Durham Faivre is optimistic that Flash machines could also have a role to play, eventually making it easier for cancer patients living in low- and middle-income countries to receive the treatment they need. Instead of needing to repeatedly travel long distances over the course of many days and weeks to receive multiple radiotherapy sessions, Flash could enable them to receive it all in either a single session or a small handful of sessions. Because each treatment takes less than a second, it would also enable doctors to treat many more patients in a single day.<!-- --></p><p>"If we can get a normal sized machine that fits in all the hospital bunkers in the world and can administer Flash, that can allow countries to treat many more patients," says Durham Faivre. "If instead of treating 50 patients a day, you can treat 150, you're massively increasing your capacity, and your ability to handle the public health need."<!-- --></p><p>Many experts feel that this would also yield substantial cost savings benefits for high-income countries, as well as having a potentially enormous improvement for patients' quality of life.&nbsp;<!-- --></p><p>"It should be a more cost-effective treatment once the initial investment is made, since much fewer treatments are needed," says Constantinos Koumenis, professor of radiation oncology at the University of Pennsylvania Perelman School of Medicine in the US. Savings to the health system could also come due to fewer hospitalisations due to complications, he adds.<!-- --></p><p>The first step, Koumenis explains, is investigating just how good Flash is – and whether it’s actually better than standard radiotherapy.<!-- --></p><p>--<!-- --></p><p><i id="for-trusted-insights-into-better-health-and-wellbeing-rooted-in-science,-sign-up-to-the">For&nbsp;trusted insights into better health and wellbeing rooted in science, sign up to the&nbsp;<!-- --></i><a target="_self" href="https://cloud.email.bbc.com/HealthFix_Newsletter_Signup?&amp;at_bbc_team=studios&amp;at_medium=emails&amp;at_objective=acquisition&amp;at_ptr_type=&amp;at_ptr_name=bbc.com&amp;at_format=Module&amp;at_link_origin=featurescallout&amp;at_campaign=healthfix&amp;at_campaign_type=owned"><b id="health-fix-newsletter"><i id="health-fix-newsletter">Health Fix newsletter<!-- --></i></b></a><i id=",-while">,&nbsp;while&nbsp;<!-- --></i><a target="_self" href="https://cloud.email.bbc.com/SignUp10_08?&amp;at_bbc_team=studios&amp;at_medium=Onsite&amp;at_objective=acquisition&amp;at_ptr_name=bbc.com&amp;at_link_origin=featuresarticle&amp;at_campaign=essentiallist&amp;at_campaign_type=owned"><b id="the-essential-list"><i id="the-essential-list">The Essential List<!-- --></i></b></a><i id="delivers-a-handpicked-selection-of-features-and-insights.">&nbsp;delivers a handpicked selection of features and insights.<!-- --></i></p><div data-component="text-block"><p><i id="for-more-science,-technology,-environment-and-health-stories-from-the-bbc,-follow-us-on">For more science, technology, environment and health stories from the BBC, follow us on&nbsp;<!-- --></i><a target="_blank" href="https://www.facebook.com/BBCFuture/"><b id="facebook"><i id="facebook">Facebook<!-- --></i></b></a><i id=",">,&nbsp;<!-- --></i><a target="_blank" href="https://x.com/BBC_Future"><b id="x"><i id="x">X<!-- --></i></b></a>&nbsp;<!-- --><i id="and">and&nbsp;<!-- --></i><a target="_blank" href="https://www.instagram.com/bbcfuture_official/"><b id="instagram"><i id="instagram">Instagram<!-- --></i></b></a><b id="."><i id=".">.<!-- --></i></b><i id=""> <!-- --></i></p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I Made an Open-Source Laptop from Scratch (2026 pts)]]></title>
            <link>https://www.byran.ee/posts/creation/</link>
            <guid>42797260</guid>
            <pubDate>Wed, 22 Jan 2025 20:41:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.byran.ee/posts/creation/">https://www.byran.ee/posts/creation/</a>, See on <a href="https://news.ycombinator.com/item?id=42797260">Hacker News</a></p>
<div id="readability-page-1" class="page"><article> 
<blockquote>
<p>I do not think there is any thrill that can go through the human heart like that felt by the inventor as he sees some creation of the brain unfolding to success
– <a href="https://en.wikipedia.org/wiki/Nikola_Tesla" target="_blank">Nikola Tesla</a></p>
</blockquote>
<p><strong>It’s got a 4K AMOLED display, a Cherry MX mechanical keyboard, plays Minecraft at 4K, runs +7B LLMs, surfs the web, and has ~7h battery life. All open-source.</strong></p>
<h2 id="video">Video</h2>
<p><a href="https://youtu.be/fks3PBodyiE" target="_blank"><img src="https://www.byran.ee/img/thumbnail.jpg"></a></p>
<p><em>How I Made A Laptop From Scratch (YouTube.com). Demo at 22:14.</em></p>
<p><strong>The writeup below pretty much abridges the video above.</strong></p>
<p><em><a href="https://www.byran.ee/progress">See the progression updates from the development journey here.</a></em></p>
<p>Imagine a skill-chart of qualities of technology: screen, audio, performance, build, tactility, touch-interaction, efficiency, size, and so many more. At the balancing point of all these qualities is the laptop. To that end, let’s build a laptop that hits as many qualities of a modern commercial thin &amp; light laptop—while trying to do as much from scratch as possible.</p>
<img src="https://www.byran.ee/img/photo.jpg">
<p><em>Booting and inserting magnetically attached keyboard</em></p>
<img src="https://www.byran.ee/img/minecraft.jpg">
<p><em>Epic Hypixel Bedwars gaming</em></p>
<h2 id="finding-an-electron-in-a-cloud">Finding an electron in a cloud</h2>
<p>I first made a mental map and transferred it into Obsidian:</p>
<p><img src="https://www.byran.ee/img/map.png"></p>
<p>Boiling it down, it landed me with a lofty list of goals:</p>
<ul>
<li><a href="https://www.rock-chips.com/uploads/pdf/2022.8.26/192/RK3588%20Brief%20Datasheet.pdf" target="_blank">RK3588</a> SoC Motherboard
<ul>
<li><a href="https://wiki.friendlyelec.com/wiki/index.php/CM3588" target="_blank">CM3588</a>-based</li>
<li>USB-C USB3.1 Gen 1</li>
<li>PCIe Wi-Fi/BT + SSD</li>
</ul>
</li>
<li>Powertrain
<ul>
<li><a href="https://www.espressif.com/sites/default/files/documentation/esp32-s3-mini-1_mini-1u_datasheet_en.pdf" target="_blank">ESP32-S3</a> embedded controller</li>
<li>~60Wh Li-ion battery pack</li>
</ul>
</li>
<li>Peripherals
<ul>
<li>Wireless mechanical keyboard</li>
<li>Glass-topped multi-touch trackpad</li>
</ul>
</li>
<li>4K AMOLED 13.3” display</li>
<li>Anodized aluminum CNC chassis</li>
</ul>
<p><img src="https://www.byran.ee/img/general.jpg"></p>
<p><em>General system overview</em></p>
<h2 id="fermionic-analysis">Fermionic Analysis</h2>
<h3 id="choosing-the-chip">Choosing <em>the</em> chip</h3>
<p>I looked towards single-board computer SoCs, as board manufacturers commonly release schematics for reference. In many aspects, the Rockchip RK3588 is the fastest consumer-procurable chip on the market. Despite the spotty software support, the hardware documentation has lots of developer resources and <a href="https://wiki.friendlyelec.com/wiki/images/1/15/CM3588_NAS_SDK_2309_SCH.PDF" target="_blank">reference schematics</a> from SBC manufacturers.</p>
<p>Some quick specs:</p>
<ul>
<li>Quad core A76 and quad core A55</li>
<li>Mali-G10 GPU</li>
<li>6TOPs NPU</li>
<li>8K@60FPS decoder</li>
<li>I/O: 8K display, dual USB3.1, PCIe 3.0 x 4, HDMI2.1/eDP 1.4, etc.</li>
</ul>
<p>With only a few months to work on this project, an SoM (system on module) like the Raspberry Pi CM5 presented the best option for its hardware compatibility and a high likelihood of a snug integration. Choosing an SoM also alleviates memory and other high-speed signaling concerns. Looking around for a RK3588 SoM, I came across the CM3588 by FriendlyElec. Cheap, well-documented, and easily procurable. Sounds good!</p>
<img src="https://www.byran.ee/img/cm3588.jpg">
<p><em>FriendlyElec CM3588 SoM</em></p>
<h3 id="display">Display</h3>
<p>I hopped on <a href="https://www.panelook.com/" target="_blank">panelook.com</a> and filtered by size and resolution. I’ve always been a sucker for high pixel density, so I went with a 4K AMOLED 13.3” display. Cross referencing stock availability on Taobao (Chinese domestic Aliexpress), the <a href="https://www.panelook.com/ATNA33TP11_Samsung_13.3_OLED_parameter_59424.html" target="_blank">ATNA33TP11</a> seemed to be the one with most <em>brand-new</em> stock since OLED risked burn-in.</p>
<p>A highlight: during display evaluation, switching out a connector and shortening the board by 2mm improved signal integrity <em>just enough</em> for the 1.5GHz x 4 signals go pass through. Getting the display running on Linux meant finding system logs from Asus laptops that have this display, reverse-engineering the values, and tuning the power-on timings amongst other things <em>just right</em>. TLDR; getting a 4K AMOLED eDP display running on non-mainline Linux was a heck of a journey, so read <a href="">this if you’re interested</a> (coming soon).</p>
<img src="https://www.byran.ee/img/screen.jpg">
<p><em>ATNA33TP11 working with display evaluation board V2 short</em></p>
<h3 id="powertrain">Powertrain</h3>
<p>The cells had to be 6mm thin and four packs lined up should take roughly half of the entire chassis volume. Chinese manufacturers don’t stock batteries readily, and shipping them to the US would be a pain. Thus, I looked on the American side. I stumbled upon with <a href="https://www.batteryspace.com/polymerli-ionmodule37v4250mah157wh85arate-prewiredwithpcbpl5467100.aspx" target="_blank">these batteries</a> from AA Portable Power Corp. or batteryspace.com. or Powerizer. Doing the power calculations, we get: 4.250Ah <em>3.7V</em> 4S = 62.9 Wh with max 8A (so max 134.4W discharge)! Solid.</p>
<p>The total voltage is 4.2V (peak) * 4S = 16.8V. The system’s designed for up to 20V USB-C (AKA 100W) and passed into the <a href="https://www.ti.com/product/BQ25713" target="_blank">BQ25713</a> charging IC. The batteries are balanced with the <a href="https://www.ti.com/product/BQ77915" target="_blank">BQ77915</a> to ensure safe charging, and the power is tracked with an <a href="https://www.analog.com/en/products/ltc2943.html" target="_blank">LTC2943</a> to calculate a state-of-charge percentage. I popped in an ESP32-S3 module as the controller for everything, and set it to production.</p>
<p>After writing drivers and sitting on the undecipherable datasheets for days, I had the batteries charging. I successfully <a href="https://a.co/d/3b8R9mN" target="_blank">load tested</a> it to around 5A and powered the full system. There’s still a lot of quiescent current (about ~50mA), but I haven’t had the time to optimize the firmware.</p>
<p>The USB of the ESP32 connects to the internal USB on the motherboard to feed the power telemetry over UART. A Python script and kernel module in the OS forwards it to the battery service in the kernel to display it natively.</p>
<img src="https://www.byran.ee/img/powertrain.jpg">
<p><em>Powertrain V0.2 inside laptop</em></p>

<p>In settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll</p>
<p><a href="https://kicanvas.org/?github=https%3A%2F%2Fgithub.com%2FHello9999901%2Flaptop%2Ftree%2Fmain%2Fpower" target="_blank">Powertrain V0.2 KiCanvas Full Link</a></p>
<h3 id="mainboard">Mainboard</h3>
<p>With those decisions made up, I aimed for &gt;90mm motherboard width based on a prelim CAD from the batteries and display dimensions.</p>
<p>On the physical I/O side, I settled on dual USB3.1 Type-C ports, a USB2.0 Type-A port, a headphone jack, and a microSD card slot. Internally, the M.2 E-key connects to an <a href="https://a.co/d/4lJDnwX" target="_blank">RTL8852BE</a> WiFi 6 (802.11ax) + BT5.2 wireless card and the M.2 M-key accommodates up to an 2242-sized NVMe SSD. A full size NVMe SSD can fit with some modifications of the chassis too.</p>
<p>Tangent over, this leaves me with around ~90mm of board height. Implementing all the features on the final mainboard would stretch this writeup too long, so read <a href="">this if you’re interested</a> (coming soon).</p>

<p>In settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll</p>
<p><a href="https://kicanvas.org/?github=https%3A%2F%2Fgithub.com%2FHello9999901%2Flaptop%2Ftree%2Fmain%2Fmotherboard" target="_blank">Motherboard V1.0 KiCanvas Full Link</a></p>
<img src="https://www.byran.ee/img/mainboard.jpg">
<p><em>Mainboard B-roll shot</em></p>
<p><img src="https://www.byran.ee/img/hardware.jpg"></p>
<p><em>Detailed hardware overview</em></p>
<h3 id="operating-on-a-system">Operating on a System</h3>
<p><a href="https://github.com/Joshua-Riek/ubuntu-rockchip" target="_blank">Joshua Riek’s ubuntu-rockchip</a> kernel/distro combined an out-of-the-box experience with lots of optimizations. Using Armbian’s kernel (I believe it’s still off Rockchip’s kernel) meant that it offered nearly all the features of the RK3588 on a developer-ready kernel configuration.</p>
<p>Since nearly all the work I needed to do was abstracted in the DeviceTree (DTS) hardware configuration language implemented with U-boot, the bootloader, I took advantage of their system-agnostic nature to speed up my trial-and-error process having never done any Linux work.</p>
<p>Instead of developing and compiling code on the RK3588 itself, I used my daily driver MacBook and Visual Studio Code. Once I made a change in the DTS, I’d use Orbstack (virtualization software) running Ubuntu 24.04 (shared filesystem and kernel with macOS) and compile the DeviceTree there.</p>
<pre tabindex="0" data-language="txt"><code><span><span>DTSI, DTS, and DTS Overlay Files (some for SoC, some for other ICs, etc.) -&gt; dtcpp binary (preprocessing &amp; linking various DeviceTree definitions) -&gt; dtc binary (DeviceTree compilation) -&gt; anyon_e.dtb (compiled DeviceTree binary!)</span></span></code></pre>
<p>Pointing U-Boot to a custom compiled DTB (devicetree binary), I <code>scp</code>’ed the compiled <code>anyon_e.dtb</code> to the OS. A <code>u-boot-update</code> regenerates the bootloader configurations, and a reboot updates the changes.</p>
<p>That’s how I did the hardware bringup—display configurations, PCIe, USB, and other low-level system tweaks. The rest is just a standard install of Ubuntu 24.04 LTS with Linux Kernel 6.1.</p>
<img src="https://www.byran.ee/img/working.jpg">
<p><em>Testing batteries and writing DTS</em></p>
<p><img src="https://www.byran.ee/img/software.jpg"></p>
<p><em>In-depth software overview</em></p>
<h3 id="peripherals">Peripherals</h3>
<p>Imagine being able to just pull out your laptop’s keyboard and use it as just another wireless keyboard for literally anything! Just me? Maybe.</p>
<p>Being a mechanical keyboard addict with quite a few <a href="https://zmk.dev/" target="_blank">ZMK keyboards</a> designed, I chose the <a href="https://github.com/pashutk/Cherry_MX_ULP" target="_blank">Cherry MX ULP mechanical switches</a> for the best feel. Of course, a battery and fully mechanical switches add <em>a lot</em> of height. I used a 1mm thin <a href="https://www.powerstream.com/thin-lithium-ion.htm" target="_blank">200mAh battery</a> and a custom battery protection board that sticks up between two rows of keys to cut down on ~1.6mm (PCB height). The nRF52840 SoC running ZMK Firmware is right underneath the spacebar. A sandwich of PLA and 6061 aluminum from Fabworks crammed everything under ~7mm.</p>
<p>Since the keycaps aren’t easily procurable, I got a <a href="https://www.printedsolid.com/products/e3d-revo-nozzles?srsltid=AfmBOopKMJDs7gFpzrJg3kHQ-aJLDFTjeFO0ZJAYf1hADzy5iurNlkLB" target="_blank">0.15mm nozzle</a> for my Bambu Lab X1C and printed them with PLA. It got me down a rabbit hole of tungsten nozzles, and I got quoted ~$400 for 20x 0.15mm nozzles. I’ve been thinking of trying that out too. But alas, printing out all the keycaps and assembling for the last time, the keyboard was done.</p>
<p>Moving on to the trackpad, it was quite quick. I knew from the start that I wanted a good trackpad, so making my own with zero capacitive tracking experience is a no-go. Searching online, I came across the Azoteq <a href="https://www.mouser.com/ProductDetail/Azoteq/PXM0057-401-S?qs=t7xnP681wgVkp9ZZYy6TPA%3D%3D" target="_blank">PXM0057-401</a> evaluation module on Mouser. It had it all—glass surface, multi-touch, and worked over USB. And, it was only 35 bucks or so. However, the trackpad has ceased production without many alternatives.</p>
<p>With the keyboard and trackpad working, it was time to put on the finishing touches.</p>

<p>In settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll</p>
<p><a href="https://kicanvas.org/?github=https%3A%2F%2Fgithub.com%2FHello9999901%2Flaptop%2Ftree%2Fmain%2Fkeyboard" target="_blank">Keyboard V1.0 KiCanvas Full Link</a></p>
<img src="https://www.byran.ee/img/peripherals.jpg">
<p>*Counterclockwise from top left: keyboard side profile, typing on keyboard, trackpad, 1mm battery on back, nRF52840 SoC area</p>
<p><img src="https://www.byran.ee/img/wireframe_exploded.jpg"></p>
<p><em>OnShape wireframe exploded view</em></p>
<h3 id="mechanical">Mechanical</h3>
<p>Roughly the same time I began the system design, I sent a few CNC aluminum blocks off to JLC for evaluation with different anodization finishes. The dark gray anodization felt “best”, but I preferred the look of the matte black, so I settled on that.
Using PTC OnShape, I (attempted) CAD’ed a robust and minimalistic look and a blend of my two favorite laptop lineup designs, the Razer Blade and the MacBook Pro. Because of the removable keyboard, the bottom has no screws. Instead, the palm rest screws into the bottom chassis. <a href="https://cad.onshape.com/documents/a18bb6df7dbba66df24a7ec8/w/967d921e60c207e3b6f5cf7b/e/1f78a9387b17c2d178742295?renderMode=0&amp;uiState=678da20d5bee0d1ad2dd55f1" target="_blank">CAD Link here.</a></p>
<p>The hardest part about the chassis was the hinge. I used <a href="https://frame.work/products/display-hinge-kit?v=FRANFB0001" target="_blank">Framework’s 13.3” hinge</a> because it has a 3D model. I constrained it in OnShape so I can see the exact closing angles.</p>
<p>The chassis layout is fairly simple: batteries on the bottom, the power board on the right, motherboard on the left, and the hinge mechanism on top. Oh, and a transparent PETG FDM printed power button that lights up on a custom PCB. To balance out the asymmetric hinge (caused by the mainboard being too wide), a little <a href="https://www.mcmaster.com/2153T11/" target="_blank">carbon fiber rod</a> lines up on the left side too.</p>
<img src="https://www.byran.ee/img/chassis_empty.jpg">
<p><em>Chassis test fitting</em></p>
<p>It was a battle to get the screen assembly to not hit anything while also covering
Although I started considering thermals way in advance, hence the gap here for the heatpipe to go through, I still had difficulty fitting everything in. The distance between the bottom of the keyboard and the top of the heatsink is less than a half a millimeter. The cooling system is really constrained because I don’t have the resources to make a custom heatpipe and fin solution. So, I made a full copper CNC heatsink (from JLCCNC) and a heatpipe connected to a fan. It’s all connected with <a href="https://www.lttstore.com/products/ptm7950-phase-change-thermal-pad" target="_blank">PTM7950</a>.</p>
<p>I also added <a href="https://puiaudio.com/product/speakers-and-receivers/as04004mo-sp40" target="_blank">these</a> PUI audio speakers on either side. The audio from the CM3588’s DAC didn’t work and I ran out of debugging time, so I made a USB to audio converter board separately and shot it through an Class-D amplifier. I would’ve also made the amp, but I ran out of time.</p>
<p>As I reached final assembly, I used a mix of JLC’s selective laser sintering (SLS) of nylon powder and FDM printed PA6-CF for smaller structural parts. Putting it all together with the matte black CNC aluminum chassis, I finally had my laptop.</p>
<img src="https://www.byran.ee/img/inside.jpg">
<p><em>Inside full laptop assembly</em></p>
<h2 id="reflection">Reflection</h2>
<p>The hardest class I’ve taken so far was quantum mechanics in my junior spring term. A few months before spending hours solving time-independent and dependent Schrödinger equations, I was on the squash bus (the sport, not the vegetable). My friend suggested I make a laptop for my senior project—and that was all.
I came up with the name anyon_e in June, after I finished the quantum course.</p>
<p>Making this laptop was hard. Mentally pressured with a deadline, and a constant inter-disciplinary challenge across electrical, software, and mechanical systems. Summing up everything I’ve ever done. It took up most of my mind from May until now.</p>
<p>Inspired by open-source projects like <a href="https://zmk.dev/" target="_blank">ZMK</a>, <a href="https://www.kicad.org/" target="_blank">KiCAD</a>, <a href="https://www.blender.org/" target="_blank">Blender</a>, and countless <a href="https://certification.oshwa.org/basics.html" target="_blank">OSHW</a> projects, I want to do my own little part. To put power in people’s hands in creation, innovation, imagination, or whatever else. To attempt the impossible.</p>
<img src="https://www.byran.ee/img/conclusion.jpg">
<p>Sincerely,<br>
<em>Byran</em></p> </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to improve your WFH lighting to reduce eye strain (530 pts)]]></title>
            <link>https://rustle.ca/posts/articles/work-from-home-lighting</link>
            <guid>42796950</guid>
            <pubDate>Wed, 22 Jan 2025 20:08:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rustle.ca/posts/articles/work-from-home-lighting">https://rustle.ca/posts/articles/work-from-home-lighting</a>, See on <a href="https://news.ycombinator.com/item?id=42796950">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-{{post-slug}}">


	
		
<div>
  <p><em>I work from home everyday, I am susceptible to eye strain, eye pain, and dizziness. Having a working environment that’s as easy on my eyes as possible is of critical importance. I hope that by sharing what I've learned, it can be helpful to you if you work from home, and like many, have experienced WFH eye strain.</em></p><p><em>Disclaimer: I'm not an ergonomist or optometrist. These tips are intended to help improve your work from home comfort based on my own personal experience.</em></p></div><h2><strong>TLDR</strong></h2><div>
  <ol><li>An even, diffused lighting environment is best for the eyes</li><li>When it comes to light brightness, too much is just as problematic as too little</li><li>Use natural light wherever possible&nbsp;</li><li>Quality of artificial light matters</li><li>The best lighting for camera, is not necessarily the best lighting for ergonomics</li><li>Even the perfect lighting environment will fatigue you — take breaks, and take care of yourself</li></ol></div>

<hr><h2>What is it about computer screens that makes them fatiguing?</h2><h6>Monitor flicker</h6>
<p>Most monitors have some level of flicker. This flickering is generally not visually noticeable, but can still be fatiguing. Monitors at lower brightness levels exhibit more flicker - as they use PWM dimming (Pulse Width Modulation). In some monitors this is done by changing the ON/OFF intervals, increasing OFF timing, and lowering ON timing — while maintaining the same brightness! This creates an awful strobe-effect, and can be very exhausting — especially when working in an environment where the monitor is the sole light source.</p><h6>High contrast lighting</h6>
<p>High contrast lighting can exist in a few different formats. It can exist as <strong>glare</strong> — that is for example light coming in from a window, into a dark room, illuminating a part of your desk. This glare is fatiguing on your eyes because they are accommodating for two levels of brightness simultaneously, while also trying to conduct tasks on a computer monitor — such as reading. High contrast can also exist in a room with bright light on the left, and darkness on the right. This is fatiguing for your eyes to compensate for.</p><h6>Fixed focal distance</h6>
<p>When working at a computer, most of the time <em>we, </em>and the <em>monitor </em>don't move significantly. We focus at the same distances for long periods of time. This causes our eye muscles to get tight and overworked. This can cause our eyes to get tired, spasm, or sometimes even make it very hard to relax our eyes. Although improved office lighting can help with this, the main way to solve for this problem is to take breaks practicing the 20/20/20 rule: Every 20 minutes, look up from your screen and focus on something approximately 20 feet away for at least 20 seconds.</p>
<hr><h2>My setup before</h2><h4>Daytime</h4>
<p>Light in the office primarily comes in from the sun. The direct light causes glare, and because of the lack of diffusion, makes for dark corners in the room. Even with a light overhead, it's not enough to equal the amount from outside. This results in high contrast, dark spots behind the monitor, and harsh shadows. Blackout curtains are of little help because they only serve to reduce the size of the light coming in, as opposed to aiding with diffusion. Anytime it's dark outside, it's like working at night. Not fun.</p>
<figure data-ratio="auto">
  <ul>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/9809349dd1-1731865447/day-before-desk.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/c733c07775-1731865447/day-before-front.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/85d239183d-1731865447/day-before-window.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
      </ul>
    <figcaption>
    Daylight is harsh and direct, creating glare or harsh shadows. The lack of diffused light makes for dark spots in the office.  </figcaption>
  </figure>

<hr><h4>Nighttime</h4>
<p>Light primarily comes from above. Because of this single light source, it makes for harsh shadows, dark spots, and high contrast. The contrast issue is particularly apparent with the monitor, which although can be dimmed, creates a bright monitor, which also self-shades the wall behind resulting in a dark background.</p>
<figure data-ratio="auto">
  <ul>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/3b7d5c6411-1731865447/night-before-desk.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/654bebe9ff-1731865447/night-before-front.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/7cfe65b949-1731865447/night-before-window.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
      </ul>
    <figcaption>
    A single light source from above creates harsh shadows, and high contrast. In addition, the light from above is blocked by me sitting in the desk chair.  </figcaption>
  </figure>

<hr><h2>My setup after</h2><h4>Daytime</h4>
<figure data-ratio="auto">
  <ul>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2bf4e23391-1731865417/day-after-desk.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/6d01169556-1731865417/day-after-front.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/e312779390-1731863983/day-after-window.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
      </ul>
    <figcaption>
    Light is much more evenly distributed, diffused, and balanced. Shadows are soft, and the lighting from left to right, and top to bottom is much more even.  </figcaption>
  </figure>

<hr><h4>Nighttime</h4>
<figure data-ratio="auto">
  <ul>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/2cb450a85b-1731869048/night-after-window-r3.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/ac8d839167-1731869048/night-after-desk-r3.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
        <li>
            <img src="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=1200" srcset="https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=400 400w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=600 600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=800 800w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=1000 100w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=1200 1200w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=1600 1600w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=2000 2000w,https://rustle.ca/media/pages/posts/articles/work-from-home-lighting/5b4f0f8570-1731869048/night-after-front-r3.png?width=2400 2400w," sizes="(max-width: 592px) 100vw, (max-width: 1200px) 1200px, (min-width: 1201px) 1200px" loading="lazy">
    </li>
      </ul>
    <figcaption>
    Light levels are now much more balanced, with less blown out light, and less harsh shadows. In addition, corners of the room are illuminated and counter-balance the light from above and from the monitor. Backlighting and desk-lighting help to create a relaxing, low contrast task environment.  </figcaption>
  </figure>

<hr><h3>What's changed</h3><h5>Window light sources, and filtering light</h5>
<div><p>Windows now have light-filtering curtains, which helps to not only reduce the amount of light on bright days, but also to heavily diffuse the light coming in, which makes for a beautiful glow in the room. In addition, I've installed wood-blinds (not shown) behind the curtains which helps to further control the amount of light entering the office on very bright days.</p><p><em>Products used: Sheer curtains • Wood Blinds</em></p></div><h5>Wall &amp; ceiling lighting</h5>
<div>
  <p>Each corner of the room now has a torchiere lamp, which helps to create an even lighting environment. These lamps point directly up and light the room indirectly through reflections off of the walls and ceiling. In the center of the ceiling, a fabric wrapped light fixture provides  diffused lighting. This light is dimmable and can be adjusted to match the amount of light from the standing lamps. </p><p><em>Products used: IKEA NOT Lamp (Discontinued but </em><a href="https://www.ikea.com/ca/en/p/tagarp-floor-uplighter-black-white-60464049/"><em>TAGARP is comparable</em></a><em>) • </em><a href="https://www.homedepot.ca/product/philips-ultradefinition-led-a19-e26-60w-equivalent-light-bulb-dimmable-soft-white-2700k-2-pack/1001664067?eid=PS_GO_140203__ALL_PLA-526641&amp;eid=ds_ads_van_27772_FY24%20%7C%20MS%20%7C%20Always%20on%20%7C%20Google%20Shopping&amp;pid=1001664067&amp;store=7158&amp;utm_source=google&amp;utm_medium=vantage&amp;utm_campaign=25029&amp;utm_content=26766&amp;gad_source=1&amp;gclid=CjwKCAiAxea5BhBeEiwAh4t5K7JuMnZCfX-pH8h00lhpixTdd7IHwLgyH18hfcewKmL6MXn-lSnxUhoCPCUQAvD_BwE#reviews"><em>Philipps Ultra Definition LED Soft White (Glass)</em></a></p></div><h5>Desk lighting</h5>
<div>
  <p>The desk now has even lighting. The brightness of the monitor is now matched by a dimmable flicker-free backlight, which makes working at the display less fatiguing. In addition, a monitor lightbar (not shown), provides indirect light to the desk, reflected off the surface which is completely dimmable and flicker-free. These two lights together help to make for an even lighting environment during the day, and a calm and cozy environment at night. In addition to the two lights, the Apple Studio display has an ambient light sensor, which adjusts the brightness to match the ambient light, which is a game changer for light sensitive people. </p><p><em>Products used: </em><a href="https://www.benq.com/en-ca/lighting/monitor-light/screenbar-plus.html" target="_blank" title="BenQ Screenbar Plus"><em>BenQ ScreenBar Plus</em></a><em> • Warm White LED Strips • </em><a href="https://store.waveformlighting.com/products/filmgrade-flicker-free-dimmer-for-led-strip#:~:text=Waveform%20Lighting's%20innovative%20flicker%2Dfree,an%20existing%20LED%20system%20setup." title="Waveform Flicker-Free LED Dimmer"><em>WaveForm Flicker-Free </em></a><a href="https://store.waveformlighting.com/products/filmgrade-flicker-free-dimmer-for-led-strip#:~:text=Waveform%20Lighting's%20innovative%20flicker%2Dfree,an%20existing%20LED%20system%20setup." target="_blank" title="Waveform Flicker-Free LED Dimmer"><em>LED</em></a><a href="https://store.waveformlighting.com/products/filmgrade-flicker-free-dimmer-for-led-strip#:~:text=Waveform%20Lighting's%20innovative%20flicker%2Dfree,an%20existing%20LED%20system%20setup." title="Waveform Flicker-Free LED Dimmer"><em> Dimmer</em></a></p></div>
<hr><h2>Takeaways</h2>
<div>
  <ol><li><p><strong>An even, diffused lighting environment is best for the eyes. </strong>Try to balance out dark/light spots with additional lighting, and diffusing strong light sources — like the sun.<br></p></li><li><p><strong>When it comes to light brightness, too much is just as problematic as too little. </strong>When dealing with too little light, add additional light sources which provide indirect, and reflective lights — such as up-lights, or torchieres, or lights that have a shade. When dealing with too much light — use blinds, sheer curtains, or light filtering curtains. If you have too much light from an artificial source, use lower wattage bulbs, or consider adding a dimmer switch.<br></p></li><li><p><strong>Use natural light wherever possible. </strong>If you've got natural light, use it to your advantage. Natural light is healthier than artificial light — there's no flicker, and it can provide us with much needed vitamin D. For rooms with small windows, use mirrors to help reflect natural light and fill the room. <br></p></li><li><p><strong>Quality of Artificial Light Matters. </strong>Wherever possible seek out high quality lighting that is dimmable and flicker-free. Spending a few extra dollars for these products is worth it, and it will result in less fatigue. For regular bulbs, I recommend <a href="https://www.homedepot.ca/product/philips-ultradefinition-led-a19-e26-60w-equivalent-light-bulb-dimmable-soft-white-2700k-2-pack/1001664067?eid=PS_GO_140203__ALL_PLA-526641&amp;eid=ds_ads_van_27772_FY24%20%7C%20MS%20%7C%20Always%20on%20%7C%20Google%20Shopping&amp;pid=1001664067&amp;store=7158&amp;utm_source=google&amp;utm_medium=vantage&amp;utm_campaign=25029&amp;utm_content=26766&amp;gad_source=1&amp;gclid=CjwKCAiAxea5BhBeEiwAh4t5K7JuMnZCfX-pH8h00lhpixTdd7IHwLgyH18hfcewKmL6MXn-lSnxUhoCPCUQAvD_BwE#reviews"><em>Philipps Ultra Definition LED Soft White</em></a><em> </em>bulbs which have low flicker rates, glass enclosures, high color rendering index, and a relatively inexpensive pricepoint.<br></p></li><li><p><strong>The best lighting for camera, is not necessarily the best lighting for ergonomics. </strong>When working from home, we spend a lot of time on video calls, and it's natural to want to look our best. Studio lights that attach to our desks, or facing a window outdoor will result in great lighting on camera, but can also cause fatigue. Consider reserving this lighting for calls, or see if generally better room lighting can result in a similar light quality on camera.<strong><br></strong></p></li><li><p><strong>Even the perfect lighting environment will fatigue you — take breaks, and think beyond lighting! </strong>Having a great lighting environment will help you with stamina, but having good work habits like the 20/20/20 rule, and changing up posture and working environments are important in order to take the best care of your eyes, and your body. Think beyond lighting when considering ergonomics, such as room humidity (to limit dry eye), posture, chair position, and stay moving to keep blood flowing.<br></p></li></ol></div>
<hr>
<p><em>It may seem daunting, but I believe that with some small changes it can make a big difference. I hope this gives you new ideas to try, and I'd love to hear what you are doing in your own office as well! Cheers!</em></p>			</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I made a multiplayer shooter game in Lisp, here is my journey (188 pts)]]></title>
            <link>https://ertu.dev/posts/i-made-an-online-shooter-game-in-lisp/</link>
            <guid>42796906</guid>
            <pubDate>Wed, 22 Jan 2025 20:03:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ertu.dev/posts/i-made-an-online-shooter-game-in-lisp/">https://ertu.dev/posts/i-made-an-online-shooter-game-in-lisp/</a>, See on <a href="https://news.ycombinator.com/item?id=42796906">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div><p>Developing a multiplayer third-person shooter game as a solo developer is a journey filled with challenges and
rewards. I embarked on this adventure to create <strong>Wizard Masters</strong>, a web-based multiplayer game where players battle as
mages wielding elemental spells.</p><p>Built using <strong>Clojure</strong>, a Lisp dialect, this project pushed the boundaries of web game
development and my own skills as a programmer. Here’s how it went.</p><p>In Wizard Masters, players can choose from six elemental spells—fire, toxic, ice, lightning, and earth—and compete in
two modes: solo and team deathmatch. I published the game on CrazyGames to reach a broader audience. However, its
multiplayer nature demanded a large player base, which was a constant challenge.</p><p>Game Link: <a href="https://wizardmasters.io/">https://wizardmasters.io</a></p><h3 id="why-clojure">Why Clojure?</h3><p>Clojure is my go-to programming language, both professionally and personally. It’s a full-stack language:</p><ul><li>Clojure runs on the JVM for backend development.</li><li>ClojureScript compiles to JavaScript, enabling smooth browser-based applications.</li></ul><p>This one language to rule them all approach made it an obvious choice for me. Additionally, Clojure’s REPL <em>(
Read-Eval-Print Loop)</em> system is a game-changer. Unlike typical REPLs, Clojure’s REPL is highly interactive and organic,
allowing live updates to the game without refreshing the browser. This significantly sped up my development process,
enabling me to create and test mechanics in real time.</p><p>I created a YouTube video showing how to use the REPL with jMonkeyEngine, a Java-based game framework. You
can <a href="https://www.youtube.com/watch?v=IOPz9I49snM">watch it here</a>.</p><h3 id="graphics-library">Graphics Library</h3><p>After experimenting with several graphics libraries, including Three.js and PlayCanvas, I chose Babylon.js. Here’s why:</p><ul><li>Feature-rich: Babylon.js offers a robust set of tools for 3D development.</li><li>Great documentation: Compared to other libraries, Babylon’s documentation stands out for its clarity and
comprehensiveness.</li><li>Supportive community: The community’s assistance proved invaluable.</li></ul><p>ClojureScript’s npm integration through <strong>shadow-cljs</strong> made it easy to incorporate Babylon.js, allowing me to focus on
building the game.</p><h3 id="code">Code</h3><p>The following code snippet showcases the implementation of a <code>:player/jump</code> rule, which handles the player’s ability to
jump in the game. This rule uses a <code>:what</code> block, essentially a hashmap, to define the conditions under which the rule
is triggered.</p><p>In <strong>Wizard Masters</strong>, all game data resides in a global game database—a single large hashmap. The fields referenced in
the :what block (e.g., :pointer-locked?, :player/ground?) are keys in this global hashmap. To execute the rule, several
conditions must be met:</p><ol><li>Each key in the <code>:what</code> block must have a non-null value.</li><li>The <code>:when</code> block must evaluate to true.</li><li>The <code>:then</code> block is executed when the above conditions are satisfied.</li></ol><p>The triggering of this rule occurs through the fire-rules function, which activates the rule whenever a <code>:what</code> field is
updated, regardless of whether the value changes. If a field has a <code>:then false</code> attribute, the rule will not trigger,
avoiding infinite loops and unnecessary executions. The rule system was influenced by the Clojure library <strong>O’Doyle
Rules by Zach Oakes</strong>.</p><p>Here’s the complete implementation for the <code>:player/jump</code> rule:</p><div><pre tabindex="0"><code data-lang="clojure"><span><span><span>(</span><span>reg-rule</span>
</span></span><span><span>  <span>:player/jump</span>
</span></span><span><span>  <span>{</span><span>:locals</span> <span>{</span><span>:jump-vec</span> <span>(</span><span>v3</span><span>)}</span>
</span></span><span><span>   <span>:what</span> <span>{</span><span>:keys-pressed</span> <span>{}</span>
</span></span><span><span>          <span>:player/mobile-jump-click?</span> <span>{}</span>
</span></span><span><span>          <span>:pointer-locked?</span> <span>{</span><span>:then</span> <span>false</span><span>}</span>
</span></span><span><span>          <span>:player/ground?</span> <span>{</span><span>:then</span> <span>false</span><span>}</span>
</span></span><span><span>          <span>:player/capsule</span> <span>{</span><span>:then</span> <span>false</span><span>}</span>
</span></span><span><span>          <span>:player/anim-groups</span> <span>{</span><span>:then</span> <span>false</span><span>}</span>
</span></span><span><span>          <span>:keys-was-pressed</span> <span>{</span><span>:then</span> <span>false</span><span>}</span>
</span></span><span><span>          <span>:player/jump-up?</span> <span>{</span><span>:then</span> <span>false</span><span>}}</span>
</span></span><span><span>   <span>:when</span> <span>(</span><span>fn </span><span>[{{</span><span>:keys</span> <span>[</span><span>player/game-started?</span>
</span></span><span><span>                       <span>player/mobile-jump-click?</span>
</span></span><span><span>                       <span>player/ground?</span>
</span></span><span><span>                       <span>player/dash?</span>
</span></span><span><span>                       <span>player/jump-up?</span>
</span></span><span><span>                       <span>player/current-running-anim-group</span>
</span></span><span><span>                       <span>player/current-health</span><span>]}</span> <span>:session</span><span>}]</span>
</span></span><span><span>             <span>(</span><span>and </span><span>game-started?</span>
</span></span><span><span>                  <span>(</span><span>nil? </span><span>current-running-anim-group</span><span>)</span>
</span></span><span><span>                  <span>(</span><span>or </span><span>(</span><span>re/key-is-pressed?</span> <span>"Space"</span><span>)</span> <span>mobile-jump-click?</span><span>)</span>
</span></span><span><span>                  <span>ground?</span>
</span></span><span><span>                  <span>(</span><span>not </span><span>(</span><span>freezing?</span><span>))</span>
</span></span><span><span>                  <span>(</span><span>not </span><span>(</span><span>wind-stunned?</span><span>))</span>
</span></span><span><span>                  <span>(</span><span>not </span><span>jump-up?</span><span>)</span>
</span></span><span><span>                  <span>(</span><span>not </span><span>dash?</span><span>)</span>
</span></span><span><span>                  <span>(</span><span>&gt; </span><span>current-health</span> <span>0</span><span>)))</span>
</span></span><span><span>   <span>:then</span> <span>(</span><span>fn </span><span>[{{</span><span>player-capsule</span> <span>:player/capsule</span>
</span></span><span><span>                <span>player-jump-force</span> <span>:player/jump-force</span><span>}</span> <span>:session</span>
</span></span><span><span>               <span>{</span><span>:keys</span> <span>[</span><span>jump-vec</span><span>]}</span> <span>:locals</span><span>}]</span>
</span></span><span><span>             <span>(</span><span>j/assoc!</span> <span>jump-vec</span> <span>:y</span> <span>player-jump-force</span><span>)</span>
</span></span><span><span>             <span>(</span><span>when-not </span><span>(</span><span>casting-spell?</span><span>)</span>
</span></span><span><span>                       <span>(</span><span>re/fire-rules</span> <span>{</span><span>:player/jump-up?</span> <span>true</span><span>}))</span>
</span></span><span><span>             <span>(</span><span>let </span><span>[</span><span>player-pos</span> <span>(</span><span>api.core/get-pos</span> <span>player-capsule</span><span>)]</span>
</span></span><span><span>                  <span>(</span><span>api.physics/apply-impulse</span> <span>player-capsule</span> <span>jump-vec</span> <span>player-pos</span><span>)))})</span>
</span></span></code></pre></div><h4 id="how-it-works">How It Works</h4><ul><li><code>:what</code> block defines dependencies, such as key presses and the character’s physical capsule etc.</li><li><code>:when</code> block ensures the jump can only occur under certain conditions (e.g., the player
isn’t frozen or stunned).</li><li><code>:then</code> block applies an upward force to the player’s capsule and triggers additional rules if needed.</li></ul><p>The next example demonstrates a rule for updating the player’s rotation every frame. This ensures the character always
faces the forward direction of the camera. Here, the <code>dt</code> field in the <code>:what</code> block represents the time elapsed between
the
current frame and the previous one, causing the rule to trigger <strong>on every frame</strong>.</p><div><pre tabindex="0"><code data-lang="clojure"><span><span><span>(</span><span>reg-rule</span>
</span></span><span><span>  <span>:player/rotation</span>
</span></span><span><span>  <span>{</span><span>:locals</span> <span>{</span><span>:forward-temp</span> <span>(</span><span>v3</span><span>)</span>
</span></span><span><span>            <span>:result-temp</span> <span>(</span><span>v3</span><span>)}</span>
</span></span><span><span>   <span>:what</span> <span>{</span><span>:dt</span> <span>{}</span>
</span></span><span><span>          <span>:camera</span> <span>{}</span>
</span></span><span><span>          <span>:player/model</span> <span>{}}</span>
</span></span><span><span>   <span>:when</span> <span>(</span><span>fn </span><span>[{{</span><span>:keys</span> <span>[</span><span>player/game-started?</span><span>]}</span> <span>:session</span><span>}]</span>
</span></span><span><span>             <span>game-started?</span><span>)</span>
</span></span><span><span>   <span>:then</span> <span>(</span><span>fn </span><span>[{{</span><span>camera</span> <span>:camera</span>
</span></span><span><span>                <span>player-model</span> <span>:player/model</span><span>}</span> <span>:session</span>
</span></span><span><span>               <span>{</span><span>:keys</span> <span>[</span><span>forward-temp</span> <span>result-temp</span><span>]}</span> <span>:locals</span><span>}]</span>
</span></span><span><span>             <span>(</span><span>let </span><span>[[</span><span>yaw</span> <span>offset</span><span>]</span> <span>(</span><span>api.camera/get-char-forward-dir</span> <span>{</span><span>:camera</span> <span>camera</span>
</span></span><span><span>                                                                  <span>:forward-temp</span> <span>forward-temp</span>
</span></span><span><span>                                                                  <span>:result-temp</span> <span>result-temp</span><span>})]</span>
</span></span><span><span>                  <span>(</span><span>m/assoc!</span> <span>player-model</span> <span>:rotation.y</span> <span>(</span><span>+ </span><span>yaw</span> <span>offset</span><span>))))})</span>
</span></span></code></pre></div><h3 id="network">Network</h3><p>Writing network code for a fast-paced multiplayer game was a monumental task. I initially chose to handle all the
networking myself, thinking it would be a rewarding experience. It was indeed rewarding—but also hellish. I used several
Clojure async libraries, including Aleph, Manifold, and core.async, to manage the complexity of real-time communication.</p><p>When a player joins a game, a WebSocket connection is established. The backend continuously sends world snapshots to all
connected players at a tick rate of 20 (one update every 50 milliseconds). Additionally, specific processes handle
actions like spellcasting, damage calculation, and player deaths.</p><p>The following snippet registers a process called <code>:super-nova</code>, which handles the logic for a player casting a <strong>Super
Nova</strong>
spell. When triggered, the backend processes the event asynchronously, computes the area of effect, and notifies
relevant players.</p><div><pre tabindex="0"><code data-lang="clj"><span><span><span>(</span><span>reg-pro</span>
</span></span><span><span>  <span>:super-nova</span>
</span></span><span><span>  <span>(</span><span>fn </span><span>[{</span><span>:keys</span> <span>[</span><span>id</span> <span>data</span><span>]}]</span>
</span></span><span><span>    <span>(</span><span>try</span>
</span></span><span><span>      <span>(</span><span>add-super-nova</span> <span>id</span> <span>(</span><span>:pos</span> <span>data</span><span>))</span> <span>;; Add the visual effect</span>
</span></span><span><span>      <span>(</span><span>apply-range-damage</span> <span>{</span><span>:current-player-id</span> <span>id</span>
</span></span><span><span>                           <span>:pos</span> <span>(</span><span>:pos</span> <span>data</span><span>)</span>
</span></span><span><span>                           <span>:radius</span> <span>super-nova-range</span>
</span></span><span><span>                           <span>:diameter</span> <span>super-nova-diameter</span>
</span></span><span><span>                           <span>:max-damage</span> <span>600</span>
</span></span><span><span>                           <span>:damage-pro-id</span> <span>:got-super-nova-hit</span><span>})</span> <span>;; Calculate damage</span>
</span></span><span><span>      <span>(</span><span>catch</span> <span>Exception</span> <span>e</span>
</span></span><span><span>        <span>(</span><span>log/error</span> <span>e</span> <span>"Super nova hit error!"</span><span>)))))</span>
</span></span></code></pre></div><h4 id="area-of-effect-damage-calculation">Area of Effect Damage Calculation</h4><p>The core of this process is the apply-range-damage function. This function determines which players are affected by a
spell, calculates the damage based on proximity, and updates the game state accordingly.</p><div><pre tabindex="0"><code data-lang="clj"><span><span><span>(</span><span>defn- </span><span>apply-range-damage</span> <span>[{</span><span>:keys</span> <span>[</span><span>current-player-id</span>
</span></span><span><span>                                   <span>pos</span>
</span></span><span><span>                                   <span>radius</span>
</span></span><span><span>                                   <span>height</span>
</span></span><span><span>                                   <span>diameter</span>
</span></span><span><span>                                   <span>max-damage</span>
</span></span><span><span>                                   <span>damage-pro-id</span>
</span></span><span><span>                                   <span>shape-type</span>
</span></span><span><span>                                   <span>damage-over-time</span>
</span></span><span><span>                                   <span>damage-params</span><span>]</span>
</span></span><span><span>                            <span>:or</span> <span>{</span><span>shape-type</span> <span>:sphere</span><span>}}]</span>
</span></span><span><span>  <span>(</span><span>when-let </span><span>[</span><span>room-id</span> <span>(</span><span>get-room-id-by-player-id</span> <span>current-player-id</span><span>)]</span>
</span></span><span><span>    <span>(</span><span>let </span><span>[</span><span>current-player-ids</span> <span>(</span><span>set </span><span>(</span><span>keys </span><span>(</span><span>get-players-with-same-room-id</span> <span>current-player-id</span><span>)))</span>
</span></span><span><span>          <span>my-team</span> <span>(</span><span>get-player-team</span> <span>current-player-id</span><span>)</span>
</span></span><span><span>          <span>players-within-range</span> <span>(</span><span>-&gt;&gt;</span> <span>(</span><span>get-world-by-player-id</span> <span>current-player-id</span><span>)</span>
</span></span><span><span>                                    <span>(</span><span>keep</span>
</span></span><span><span>                                      <span>(</span><span>fn </span><span>[[</span><span>player-id</span> <span>player-data</span><span>]]</span>
</span></span><span><span>                                        <span>(</span><span>let </span><span>[[</span><span>x</span> <span>y</span> <span>z</span><span>]</span> <span>[(</span><span>:px</span> <span>player-data</span><span>)</span> <span>(</span><span>:py</span> <span>player-data</span><span>)</span> <span>(</span><span>:pz</span> <span>player-data</span><span>)]</span>
</span></span><span><span>                                              <span>[</span><span>x1</span> <span>y1</span> <span>z1</span><span>]</span> <span>pos</span>
</span></span><span><span>                                              <span>player-distance</span> <span>(</span><span>distance</span> <span>x</span> <span>x1</span> <span>y</span> <span>y1</span> <span>z</span> <span>z1</span><span>)</span>
</span></span><span><span>                                              <span>within-range?</span> <span>(</span><span>if </span><span>(</span><span>= </span><span>shape-type</span> <span>:cylinder</span><span>)</span>
</span></span><span><span>                                                              <span>(</span><span>within-cylinder?</span> <span>pos</span> <span>[</span><span>x</span> <span>y</span> <span>z</span><span>]</span> <span>radius</span> <span>height</span><span>)</span>
</span></span><span><span>                                                              <span>(</span><span>&lt;= </span><span>player-distance</span> <span>radius</span><span>))]</span>
</span></span><span><span>                                          <span>(</span><span>when </span><span>(</span><span>and </span><span>(</span><span>not= </span><span>player-id</span> <span>current-player-id</span><span>)</span>
</span></span><span><span>                                                     <span>(</span><span>current-player-ids</span> <span>player-id</span><span>)</span>
</span></span><span><span>                                                     <span>(</span><span>enemy?</span> <span>room-id</span> <span>player-id</span> <span>my-team</span><span>)</span>
</span></span><span><span>                                                     <span>(</span><span>&gt; </span><span>(</span><span>:health</span> <span>player-data</span><span>)</span> <span>0</span><span>)</span>
</span></span><span><span>                                                     <span>(</span><span>:focus?</span> <span>player-data</span><span>)</span>
</span></span><span><span>                                                     <span>within-range?</span><span>)</span>
</span></span><span><span>                                            <span>[</span><span>player-id</span> <span>player-distance</span><span>])))))</span>
</span></span><span><span>          <span>damage-and-positions</span> <span>(</span><span>for </span><span>[[</span><span>player-id</span> <span>distance</span><span>]</span> <span>players-within-range</span>
</span></span><span><span>                                     <span>:let</span> <span>[</span><span>damage</span> <span>(</span><span>generate-damage</span> <span>{</span><span>:distance</span> <span>distance</span>
</span></span><span><span>                                                                    <span>:max-damage</span> <span>max-damage</span>
</span></span><span><span>                                                                    <span>:area-of-affect-diameter</span> <span>diameter</span>
</span></span><span><span>                                                                    <span>:shape-type</span> <span>shape-type</span><span>})</span>
</span></span><span><span>                                           <span>damage</span> <span>(</span><span>get-damage-for-player</span> <span>damage</span> <span>current-player-id</span> <span>player-id</span><span>)]</span>
</span></span><span><span>                                     <span>:when</span> <span>(</span><span>&gt; </span><span>damage</span> <span>0</span><span>)]</span>
</span></span><span><span>                                 <span>(</span><span>let </span><span>[</span><span>world</span> <span>(</span><span>swap!</span> <span>world</span> <span>(</span><span>fn </span><span>[</span><span>world</span><span>]</span>
</span></span><span><span>                                                            <span>(</span><span>let </span><span>[</span><span>health</span> <span>(</span><span>max </span><span>0</span> <span>(</span><span>- </span><span>(</span><span>get-in</span> <span>world</span> <span>[</span><span>room-id</span> <span>player-id</span> <span>:health</span><span>])</span> <span>damage</span><span>))</span>
</span></span><span><span>                                                                  <span>died?</span> <span>(</span><span>= </span><span>0</span> <span>health</span><span>)</span>
</span></span><span><span>                                                                  <span>world</span> <span>(</span><span>assoc-in</span> <span>world</span> <span>[</span><span>room-id</span> <span>player-id</span> <span>:health</span><span>]</span> <span>health</span><span>)]</span>
</span></span><span><span>                                                              <span>(</span><span>if </span><span>died?</span>
</span></span><span><span>                                                                <span>(</span><span>assoc-in</span> <span>world</span> <span>[</span><span>room-id</span> <span>player-id</span> <span>:st</span><span>]</span> <span>"die"</span><span>)</span>
</span></span><span><span>                                                                <span>world</span><span>))))</span>
</span></span><span><span>                                       <span>died?</span> <span>(</span><span>= </span><span>0</span> <span>(</span><span>get-in</span> <span>world</span> <span>[</span><span>room-id</span> <span>player-id</span> <span>:health</span><span>]))]</span>
</span></span><span><span>                                   <span>(</span><span>when </span><span>died?</span>
</span></span><span><span>                                     <span>(</span><span>update-stats-after-death</span> <span>current-player-id</span> <span>player-id</span><span>))</span>
</span></span><span><span>                                   <span>(</span><span>send!</span> <span>player-id</span> <span>damage-pro-id</span>
</span></span><span><span>                                          <span>(</span><span>merge </span><span>{</span><span>:player-id</span> <span>current-player-id</span>
</span></span><span><span>                                                  <span>:damage</span> <span>damage</span>
</span></span><span><span>                                                  <span>:died?</span> <span>died?</span><span>}</span>
</span></span><span><span>                                                 <span>damage-params</span><span>))</span>
</span></span><span><span>                                   <span>(</span><span>update-last-damage-time</span> <span>player-id</span><span>)</span>
</span></span><span><span>                                   <span>(</span><span>add-damage-effect</span> <span>player-id</span> <span>(</span><span>if </span><span>(</span><span>= </span><span>damage-pro-id</span> <span>:got-ice-tornado-hit</span><span>)</span>
</span></span><span><span>                                                                  <span>:ice</span>
</span></span><span><span>                                                                  <span>:fire</span><span>))</span>
</span></span><span><span>                                   <span>[</span><span>player-id</span> <span>damage</span> <span>died?</span><span>]))]</span>
</span></span><span><span>      <span>(</span><span>when </span><span>damage-over-time</span>
</span></span><span><span>        <span>(</span><span>register-enemies-for-damage-over-time</span> <span>(</span><span>now</span><span>)</span>
</span></span><span><span>                                               <span>current-player-id</span>
</span></span><span><span>                                               <span>room-id</span>
</span></span><span><span>                                               <span>damage-over-time</span>
</span></span><span><span>                                               <span>(</span><span>map first </span><span>players-within-range</span><span>)))</span>
</span></span><span><span>      <span>{</span><span>:damage-and-positions</span> <span>damage-and-positions</span><span>})))</span>
</span></span></code></pre></div><p>The process begins by filtering players to identify those in the same room, excluding teammates, and checking if they
are within the spell’s radius or cylindrical area. Once the affected players are identified, the damage is calculated,
decreasing with distance from the spell’s origin while ensuring it is positive and does not exceed a player’s current
health. Finally, the game state is updated by deducting the damage from each player’s health, marking players as “dead”
if their health reaches zero, notifying affected players of the damage, and updating the attacker’s stats accordingly.</p><p>The backend handles real-time complexity by continuously updating multiple players and ensuring synchronization across
all devices. Events such as spellcasting and deaths are processed asynchronously through queues to maintain performance.
Developing custom networking code from scratch was both challenging and educational, offering valuable insights into the
trade-offs between control and complexity.</p><h3 id="the-journey">The Journey</h3><p>At the beginning of my game development journey, everything felt fantastic. I was quickly iterating through features,
mechanics, and UI development, making substantial progress in short bursts. However, as the project grew, it became
increasingly challenging to manage. The difficulty wasn’t directly tied to Clojure’s nature—there were many other
contributing factors.</p><p>Game development is fundamentally an art of state management. States are everywhere, and managing numerous unrelated
systems in harmony is a challenging task. While Clojure’s immutability by default offers many advantages, it also
introduces complexity. To handle the intricate state management required for game development, I had to create my own
abstractions. Writing a custom DSL (domain-specific language) became a necessity, but it wasn’t easy.</p><p>Adding to the challenge was the lack of a strong Clojure game development community. While Clojure excels in domains
like SaaS products and finance, its adoption in game development is virtually nonexistent. The absence of shared tools,
libraries, and best practices in this space made the journey even more isolating.</p><p>I couldn’t help but feel envious of the tooling ecosystems surrounding major game engines like Unity and Unreal Engine.
While Babylon.js is a great library, it lacks the robust plugin ecosystems, frameworks, and tools that mainstream
engines offer. Developing with Babylon.js often meant building tools from scratch. While this taught me a lot about
graphics programming, it came at the cost of time—a critical resource in modern game development.</p><p>Good tooling is a cornerstone of game development today. The lack of it left me feeling perpetually one step behind.</p><p>Developing 3D games for the web comes with inherent limitations. While WebGL has improved significantly, and WebGPU is
on the horizon, web-based games are still far behind native games in terms of performance and graphical fidelity. These
limitations force developers to make compromises.</p><p>Resource constraints on the web are another hurdle. Users expect quick load times and minimal downloads. Asking players
to wait for a 500MB download before they can play is unrealistic. This restricts web games to being small, free, and
often simplistic. The result? Web games rarely rival the scale or polish of PC or console games.</p><p>Financially, web game development doesn’t make much sense. Monetization options are limited, with ads being the primary
choice. But ads disrupt immersion and often force you to design your game around them just to earn a modest income.</p><p>The web game market is tiny compared to PC and console markets. While there are a few success stories like Agar.io and
Wordle. Only a couple of major web game publishers, like <em>CrazyGames</em> and <em>Poki</em>, exist. Rejection from these platforms
can make it nearly impossible to reach a large audience. To sustain yourself financially, you’d need to create a high
volume of games in a short period, which is neither practical nor creatively satisfying.</p><p>The one advantage web games have is ease of distribution. Sharing a link is all it takes for anyone to jump in and start
playing. But this strength alone doesn’t compensate for the many weaknesses.</p><p>Making a game is hard; making a successful game is even harder. Creating a good game is like cooking a great meal—you
can do wonders with a handful of ingredients or fail miserably with a dozen. There’s no single formula for success.
Everything needs to align: timing, optimization, art, sound, trends, and theme.</p><p>A few years ago, the battle royale trend exploded, leading to a flood of games trying to capitalize on the craze. Even
great games like Spellbreak couldn’t sustain themselves. But following trends isn’t inherently bad; it’s about
execution. If done well, it can be a smart business move.</p><h3 id="final-thoughts">Final Thoughts</h3><p>Game development is a deeply rewarding yet demanding journey. Whether you’re building games with unconventional tools
like Clojure or navigating the limitations of web platforms, the challenges are immense. I’ve learned
several key lessons.</p><p>First, web games are fantastic for prototyping thanks to their ease of distribution, but resource
constraints make them unsuitable for larger projects.</p><p>Second, Clojure’s REPL and functional paradigm enabled rapid
iteration, but its niche nature and lack of game development resources added unnecessary difficulty.</p><p>Lastly, tooling is
crucial—while building custom tools taught me a lot, the absence of robust, ready-made tools significantly slowed
progress. Moving forward, transitioning to a mainstream engine like Unity or Unreal could streamline development and
allow me to focus more on the creative aspects of game design.</p><p>Ultimately, the act of creating games—bringing ideas to
life—remains an unparalleled experience, with each challenge offering invaluable lessons.</p><p>It’s not just about the end result but the lessons learned along the way.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[C stdlib isn't threadsafe and even safe Rust didn't save us (247 pts)]]></title>
            <link>https://www.edgedb.com/blog/c-stdlib-isn-t-threadsafe-and-even-safe-rust-didn-t-save-us</link>
            <guid>42796058</guid>
            <pubDate>Wed, 22 Jan 2025 18:38:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.edgedb.com/blog/c-stdlib-isn-t-threadsafe-and-even-safe-rust-didn-t-save-us">https://www.edgedb.com/blog/c-stdlib-isn-t-threadsafe-and-even-safe-rust-didn-t-save-us</a>, See on <a href="https://news.ycombinator.com/item?id=42796058">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-section-id="c-stdlib-isn-t-threadsafe-and-even-safe-rust-didn-t-save-us" id="c-stdlib-isn-t-threadsafe-and-even-safe-rust-didn-t-save-us" data-theme="dark">
<!-- -->
<p>We’re in the process of porting a significant portion of the network I/O code
            in EdgeDB from Python to Rust, and we’ve been learning a lot of very
            interesting lessons in the process.</p>
<div data-section-id="the-crash-that-only-happened-on-arm64" id="the-crash-that-only-happened-on-arm64">

<p>We’ve been working on a new HTTP fetch feature for EdgeDB, using <code>reqwest</code>
                as our HTTP client library. Everything was going smoothly: the feature
                worked locally, passed tests on x86_64 CI runners, and seemed stable.
                But then we noticed something strange: the tests started failing
                intermittently on our ARM64 CI runners.</p>
<p>At first glance, it looked like a deadlock. The test runner would start,
                hang indefinitely, and then the CI job would time out. The logs showed no
                errors—just a test spinning forever. And then, after a few hours, the job
                would fail with a timeout error.</p>
<p>Here’s what the CI output looked like:</p>
<div translate="no"><pre><span>Current runner version: '2.321.0'
Runner name: '&lt;instance-id&gt;'
Runner group name: 'Default'

(... 6 hrs of logs ...)

still running:
test_immediate_connection_drop_streaming (pid=451) for 19874.78s

still running:
test_immediate_connection_drop_streaming (pid=451) for 19875.78s

still running:
test_immediate_connection_drop_streaming (pid=451) for 19876.78s

still running:
test_immediate_connection_drop_streaming (pid=451) for 19877.78s

Shutting down test cluster...</span></pre></div>
<p>Not much to go on here. It looked like a deadlock causing an async task to
                improperly block to us at first. It turns out we were wrong.</p>
</div>
<div data-section-id="initial-theories" id="initial-theories">

<p>Why just ARM64? This didn’t make a lot of sense to us in the beginning.
                Our first theories were in the difference of memory models between Intel and
                ARM64. Intel has a fairly strict memory model—while some unusual behaviors
                can happen, memory writes have a total order that all processors agree on
                (<a href="https://www.msully.net/blog/2015/02/25/the-x86-memory-model/">[1]</a>, <a href="https://research.swtch.com/hwmm">[2]</a>, <a href="https://www.cl.cam.ac.uk/~pes20/weakmemory/x86tso-paper.tphols.pdf">[3]</a>).
                ARM has a much more weakly-ordered memory model <a href="https://dl.acm.org/doi/10.1145/1353522.1353528">[4]</a>, where
                (among other things) writes may appear in different orders to different
                threads.</p>
<p>Since Sully’s Ph.D. thesis was on this stuff <a href="https://www.msully.net/thesis/">[5]</a>,
                this is when he got pulled in to take a look.</p>
</div>
<div data-section-id="debugging-on-the-ci-machine" id="debugging-on-the-ci-machine">

<p>Our nightly CI machines run on Amazon AWS, which has the advantage of giving
                us a real, uncontainerized root user. While you can connect github runners via
                ssh <a href="https://github.com/marketplace/actions/ssh-to-github-action-runner">[6]</a>, it’s
                nice to have the ability to connect as the true root user to get access to
                dmesg and other system logs.</p>
<p>To figure out what was going on, we (Sully and Matt) decided to connect
                directly to the ARM64 runner and see what was happening under the hood.</p>
<p>First, we SSH’d into the CI machine to try and find that hung process
                to connect to it:</p>
<div translate="no"><pre><span>$ aws ssm start-session --region us-west-2 --target i-&lt;instance-id&gt;
$ ps aux | grep "451"
&lt;no output&gt;</span></pre></div>
<p>Oh, that’s right! We run the build in a Docker container and it has its own
                process namespace:</p>
<div translate="no"><pre><span>$ sudo docker exec -it &lt;container-id&gt; /bin/sh
# ps aux | grep "451"
&lt;no output&gt;</span></pre></div>
<p>Wait, hold on. The hung process isn’t there either.</p>
<p>This wasn’t a deadlock — the process had crashed.</p>
<p>It turns out our test runner failed to detect this—but that’s fine, and a fix
                for another day. We can see if the process left a coredump. Since a Docker
                container is just a process namespace, the core dump gets passed to the Docker
                host itself. We can try to find that from outside the container with
                <code>journalctl</code>:</p>
<div translate="no"><pre><span>$ sudo journalctl
systemd-coredump: Process 59530 (python3) of user 1000 dumped core.
                  Stack trace of thread &lt;tid&gt;:
                  ...</span></pre></div>
<p>Aha! We found it. And the core for that process lives in
                <code>/var/lib/systemd/coredump/</code> as expected. Note that we see a different pid
                here because of process namespaces: the pid outside of the container (59530)
                is different than the one inside (1000).</p>
<p>We loaded the core dump into <code>gdb</code> to see what happened. Unfortunately,
                we were greeted with a number of errors:</p>
<div translate="no"><pre><span>$ gdb
(gdb) core-file core.python3.1000.&lt;...&gt;.59530.&lt;...&gt;
warning: Can't open file /lib64/libnss_files-2.17.so during file-backed mapping note processing
warning: Can't open file /lib64/librt-2.17.so during file-backed mapping note processing
warning: Can't open file /lib64/libc-2.17.so during file-backed mapping note processing
warning: Can't open file /lib64/libm-2.17.so during file-backed mapping note processing
warning: Can't open file /lib64/libutil-2.17.so during file-backed mapping note processing
... etc ...
(gdb) bt
#0  0x0000ffff805a3e90 in ?? ()
#1  0x0000ffff806a7000 in ?? ()
Backtrace stopped: not enough registers or memory available to unwind further</span></pre></div>
<p>Ack. That’s not useful. We don’t have the necessary files outside of the
                container, and our containers are quite minimal and don’t allow us to easily
                install <code>gdb</code>.</p>
<p>Instead, we need to copy the relevant libraries out of the container,
                and tell <code>gdb</code> where the <code>.so</code> files live:</p>
<div translate="no"><pre><span># mkdir /container
# docker cp &lt;instance&gt;:/lib /container
# docker cp &lt;instance&gt;:/usr /container
... etc ...
$ gdb
(gdb) set solib-absolute-prefix /container
(gdb) file /container/edgedb/bin/python3
Reading symbols from /container/edgedb/bin/python3...
(No debugging symbols found in /container/edgedb/bin/python3)
(gdb) core-file core.python3.1000.&lt;...&gt;.59530.&lt;...&gt;
(gdb) bt
#0  0x0000ffff805a3e90 in getenv () from /container/lib64/libc.so.6
#1  0x0000ffff8059c174 in __dcigettext () from /container/lib64/libc.so.6</span></pre></div>
<p>Much better!</p>
<p>But rather than a crash in our new HTTP code, the backtrace revealed
                something unexpected:</p>
<div translate="no"><pre><span>(gdb) bt
#0  0x0000ffff805a3e90 in getenv () from /container/lib64/libc.so.6
#1  0x0000ffff8059c174 in __dcigettext () from /container/lib64/libc.so.6
#2  0x0000ffff805f263c in strerror_r () from /container/lib64/libc.so.6
#3  0x0000ffff805f254c in strerror () from /container/lib64/libc.so.6
#4  0x00000000005bb76c in PyErr_SetFromErrnoWithFilenameObjects ()
#5  0x00000000004e4c14 in ?? ()
#6  0x000000000049f66c in PyObject_VectorcallMethod ()
#7  0x00000000005d21e4 in ?? ()
#8  0x00000000005d213c in ?? ()
#9  0x00000000005d1ed4 in ?? ()
#10 0x00000000004985ec in _PyObject_MakeTpCall ()
#11 0x00000000004a7734 in _PyEval_EvalFrameDefault ()
#12 0x000000000049ccb4 in _PyObject_FastCallDictTstate ()
#13 0x00000000004ebce8 in ?? ()
#14 0x00000000004985ec in _PyObject_MakeTpCall ()
#15 0x00000000004a7734 in _PyEval_EvalFrameDefault ()
#16 0x00000000005bee10 in ?? ()
#17 0x0000ffff7ee1f5dc in ?? () from /container/.../_asyncio.cpython-312-aarch64-linux-gnu.so
#18 0x0000ffff7ee1fd94 in ?? () from /container/.../_asyncio.cpython-312-aarch64-linux-gnu.so</span></pre></div>
<p>We disassembled the crashing <code>getenv</code> function. Knowing that we build our
                containers using GLIBC 2.17, we also located the relevant source for <code>getenv</code>
                to follow along <a href="https://elixir.bootlin.com/glibc/glibc-2.17.90/source/stdlib/getenv.c#L33">[7]</a>:</p>
<div translate="no"><pre><span>
<span>char</span> <span>*</span> <span>getenv</span> <span>(</span><span>const</span> <span>char</span> <span>*</span>name<span>)</span> <span>{</span>
  <span>size_t</span> len <span>=</span> <span>strlen</span> <span>(</span>name<span>)</span><span>;</span>
  <span>char</span> <span>*</span><span>*</span>ep<span>;</span>
  <span>uint16_t</span> name_start<span>;</span>

  <span>if</span> <span>(</span>__environ <span>==</span> <span>NULL</span> <span>||</span> name<span>[</span><span>0</span><span>]</span> <span>==</span> <span>'\0'</span><span>)</span>
    <span>return</span> <span>NULL</span><span>;</span>

  <span>if</span> <span>(</span>name<span>[</span><span>1</span><span>]</span> <span>==</span> <span>'\0'</span><span>)</span> <span>{</span>
    
    name_start <span>=</span> <span>(</span><span>'='</span> <span>&lt;&lt;</span> <span>8</span><span>)</span> <span>|</span> <span>*</span><span>(</span><span>const</span> <span>unsigned</span> <span>char</span> <span>*</span><span>)</span> name<span>;</span>
    <span>for</span> <span>(</span>ep <span>=</span> __environ<span>;</span> <span>*</span>ep <span>!=</span> <span>NULL</span><span>;</span> <span>++</span>ep<span>)</span> <span>{</span>
        <span>uint16_t</span> ep_start <span>=</span> <span>(</span><span>(</span><span>(</span><span>unsigned</span> <span>char</span> <span>*</span><span>)</span> <span>*</span>ep<span>)</span><span>[</span><span>0</span><span>]</span>
                           <span>|</span> <span>(</span><span>(</span><span>(</span><span>unsigned</span> <span>char</span> <span>*</span><span>)</span> <span>*</span>ep<span>)</span><span>[</span><span>1</span><span>]</span> <span>&lt;&lt;</span> <span>8</span><span>)</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span>name_start <span>==</span> ep_start<span>)</span>
        <span>return</span> <span>&amp;</span><span>(</span><span>*</span>ep<span>)</span><span>[</span><span>2</span><span>]</span><span>;</span>
    <span>}</span>
  <span>}</span> <span>else</span> <span>{</span>
    name_start <span>=</span> <span>(</span><span>(</span><span>(</span><span>const</span> <span>unsigned</span> <span>char</span> <span>*</span><span>)</span> name<span>)</span><span>[</span><span>0</span><span>]</span>
      <span>|</span> <span>(</span><span>(</span><span>(</span><span>const</span> <span>unsigned</span> <span>char</span> <span>*</span><span>)</span> name<span>)</span><span>[</span><span>1</span><span>]</span> <span>&lt;&lt;</span> <span>8</span><span>)</span><span>)</span><span>;</span>
    len <span>-=</span> <span>2</span><span>;</span>
    name <span>+=</span> <span>2</span><span>;</span>

    <span>for</span> <span>(</span>ep <span>=</span> __environ<span>;</span> <span>*</span>ep <span>!=</span> <span>NULL</span><span>;</span> <span>++</span>ep<span>)</span> <span>{</span>
      <span>uint16_t</span> ep_start <span>=</span> <span>(</span><span>(</span><span>(</span><span>unsigned</span> <span>char</span> <span>*</span><span>)</span> <span>*</span>ep<span>)</span><span>[</span><span>0</span><span>]</span>
                           <span>|</span> <span>(</span><span>(</span><span>(</span><span>unsigned</span> <span>char</span> <span>*</span><span>)</span> <span>*</span>ep<span>)</span><span>[</span><span>1</span><span>]</span> <span>&lt;&lt;</span> <span>8</span><span>)</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span>name_start <span>==</span> ep_start <span>&amp;&amp;</span> <span>!</span><span>strncmp</span> <span>(</span><span>*</span>ep <span>+</span> <span>2</span><span>,</span> name<span>,</span> len<span>)</span>
          <span>&amp;&amp;</span> <span>(</span><span>*</span>ep<span>)</span><span>[</span>len <span>+</span> <span>2</span><span>]</span> <span>==</span> <span>'='</span><span>)</span>
        <span>return</span> <span>&amp;</span><span>(</span><span>*</span>ep<span>)</span><span>[</span>len <span>+</span> <span>3</span><span>]</span><span>;</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> <span>NULL</span><span>;</span>
<span>}</span></span></pre></div>
<div translate="no"><pre><span>(gdb) disassemble getenv
Dump of assembler code for function getenv:
    0x0000ffff805a3de4 &lt;+0&gt;:     stp     x29, x30, [sp, #-64]!
    0x0000ffff805a3de8 &lt;+4&gt;:     mov     x29, sp
    0x0000ffff805a3dec &lt;+8&gt;:     stp     x19, x20, [sp, #16]
    0x0000ffff805a3df0 &lt;+12&gt;:    stp     x21, x22, [sp, #32]
    0x0000ffff805a3df4 &lt;+16&gt;:    stp     x23, x24, [sp, #48]
    0x0000ffff805a3df8 &lt;+20&gt;:    mov     x22, x0
    0x0000ffff805a3dfc &lt;+24&gt;:    bl      0xffff805f2784 &lt;strlen&gt;
    0x0000ffff805a3e00 &lt;+28&gt;:    mov     x24, x0
    0x0000ffff805a3e04 &lt;+32&gt;:    adrp    x0, 0xffff806eb000
    0x0000ffff805a3e08 &lt;+36&gt;:    ldr     x0, [x0, #3704]
    0x0000ffff805a3e0c &lt;+40&gt;:    ldr     x20, [x0]
    0x0000ffff805a3e10 &lt;+44&gt;:    cbz     x20, 0xffff805a3ed8 &lt;getenv+244&gt;
    0x0000ffff805a3e14 &lt;+48&gt;:    ldrb    w1, [x22]
    0x0000ffff805a3e18 &lt;+52&gt;:    cbz     w1, 0xffff805a3ed0 &lt;getenv+236&gt;
    0x0000ffff805a3e1c &lt;+56&gt;:    ldrb    w21, [x22, #1]
    0x0000ffff805a3e20 &lt;+60&gt;:    ldr     x19, [x20]
    0x0000ffff805a3e24 &lt;+64&gt;:    cbnz    w21, 0xffff805a3e70 &lt;getenv+140&gt;
    0x0000ffff805a3e28 &lt;+68&gt;:    mov     w21, #0x3d00                    // #15616
    0x0000ffff805a3e2c &lt;+72&gt;:    orr     w21, w1, w21
    0x0000ffff805a3e30 &lt;+76&gt;:    cbnz    x19, 0xffff805a3e40 &lt;getenv+92&gt;
    0x0000ffff805a3e34 &lt;+80&gt;:    b       0xffff805a3e58 &lt;getenv+116&gt;
    0x0000ffff805a3e38 &lt;+84&gt;:    ldr     x19, [x20, #8]!
    0x0000ffff805a3e3c &lt;+88&gt;:    cbz     x19, 0xffff805a3e58 &lt;getenv+116&gt;
    0x0000ffff805a3e40 &lt;+92&gt;:    ldrb    w1, [x19, #1]
    0x0000ffff805a3e44 &lt;+96&gt;:    ldrb    w0, [x19]
    0x0000ffff805a3e48 &lt;+100&gt;:   orr     w0, w0, w1, lsl #8
    0x0000ffff805a3e4c &lt;+104&gt;:   cmp     w21, w0
    0x0000ffff805a3e50 &lt;+108&gt;:   b.ne    0xffff805a3e38 &lt;getenv+84&gt;  // b.any
    0x0000ffff805a3e54 &lt;+112&gt;:   add     x19, x19, #0x2
    0x0000ffff805a3e58 &lt;+116&gt;:   mov     x0, x19
    0x0000ffff805a3e5c &lt;+120&gt;:   ldp     x21, x22, [sp, #32]
    0x0000ffff805a3e60 &lt;+124&gt;:   ldp     x19, x20, [sp, #16]
    0x0000ffff805a3e64 &lt;+128&gt;:   ldp     x23, x24, [sp, #48]
    0x0000ffff805a3e68 &lt;+132&gt;:   ldp     x29, x30, [sp], #64
    0x0000ffff805a3e6c &lt;+136&gt;:   ret
    0x0000ffff805a3e70 &lt;+140&gt;:   orr     w21, w1, w21, lsl #8
    0x0000ffff805a3e74 &lt;+144&gt;:   sxth    w21, w21
    0x0000ffff805a3e78 &lt;+148&gt;:   sub     x23, x24, #0x2
    0x0000ffff805a3e7c &lt;+152&gt;:   add     x22, x22, #0x2
    0x0000ffff805a3e80 &lt;+156&gt;:   cbnz    x19, 0xffff805a3e90 &lt;getenv+172&gt;
    0x0000ffff805a3e84 &lt;+160&gt;:   b       0xffff805a3e58 &lt;getenv+116&gt;
    0x0000ffff805a3e88 &lt;+164&gt;:   ldr     x19, [x20, #8]!
    0x0000ffff805a3e8c &lt;+168&gt;:   cbz     x19, 0xffff805a3e58 &lt;getenv+116&gt;
 =&gt; 0x0000ffff805a3e90 &lt;+172&gt;:   ldrb    w4, [x19, #1]
    0x0000ffff805a3e94 &lt;+176&gt;:   ldrb    w3, [x19]
    0x0000ffff805a3e98 &lt;+180&gt;:   orr     w3, w3, w4, lsl #8
    0x0000ffff805a3e9c &lt;+184&gt;:   cmp     w21, w3, sxth
    0x0000ffff805a3ea0 &lt;+188&gt;:   b.ne    0xffff805a3e88 &lt;getenv+164&gt;  // b.any
    0x0000ffff805a3ea4 &lt;+192&gt;:   add     x0, x19, #0x2
    0x0000ffff805a3ea8 &lt;+196&gt;:   mov     x1, x22
    0x0000ffff805a3eac &lt;+200&gt;:   mov     x2, x23
    0x0000ffff805a3eb0 &lt;+204&gt;:   bl      0xffff805f2a44 &lt;strncmp&gt;
    0x0000ffff805a3eb4 &lt;+208&gt;:   cbnz    w0, 0xffff805a3e88 &lt;getenv+164&gt;
    0x0000ffff805a3eb8 &lt;+212&gt;:   ldrb    w0, [x19, x24]
    0x0000ffff805a3ebc &lt;+216&gt;:   cmp     w0, #0x3d
    0x0000ffff805a3ec0 &lt;+220&gt;:   b.ne    0xffff805a3e88 &lt;getenv+164&gt;  // b.any
    0x0000ffff805a3ec4 &lt;+224&gt;:   add     x24, x24, #0x1
    0x0000ffff805a3ec8 &lt;+228&gt;:   add     x19, x19, x24
    0x0000ffff805a3ecc &lt;+232&gt;:   b       0xffff805a3e58 &lt;getenv+116&gt;
    0x0000ffff805a3ed0 &lt;+236&gt;:   mov     x19, #0x0                       // #0
    0x0000ffff805a3ed4 &lt;+240&gt;:   b       0xffff805a3e58 &lt;getenv+116&gt;
    0x0000ffff805a3ed8 &lt;+244&gt;:   mov     x19, x20
    0x0000ffff805a3edc &lt;+248&gt;:   b       0xffff805a3e58 &lt;getenv+116&gt;
    0x0000ffff805a3eb8 &lt;+212&gt;:   ldrb    w0, [x19, x24]
    0x0000ffff805a3ebc &lt;+216&gt;:   cmp     w0, #0x3d
    0x0000ffff805a3ec0 &lt;+220&gt;:   b.ne    0xffff805a3e88 &lt;getenv+164&gt;  // b.any
    0x0000ffff805a3ec4 &lt;+224&gt;:   add     x24, x24, #0x1
    0x0000ffff805a3ec8 &lt;+228&gt;:   add     x19, x19, x24
    0x0000ffff805a3ecc &lt;+232&gt;:   b       0xffff805a3e58 &lt;getenv+116&gt;
    0x0000ffff805a3ed0 &lt;+236&gt;:   mov     x19, #0x0                       // #0
    0x0000ffff805a3ed4 &lt;+240&gt;:   b       0xffff805a3e58 &lt;getenv+116&gt;
    0x0000ffff805a3ed8 &lt;+244&gt;:   mov     x19, x20
    0x0000ffff805a3edc &lt;+248&gt;:   b       0xffff805a3e58 &lt;getenv+116&gt;
 End of assembler dump.</span></pre></div>
<p>Huh, so it’s crashing when loading a byte while scanning for the environment
                variable of interest.</p>
<p>We can dump the current state of all the registers:</p>
<div translate="no"><pre><span>(gdb) info reg
...
x19            0x220               544
x20            0x248b5000          613109760
...
sp             0xffffddd93c80      0xffffddd93c80
pc             0xffff805a3e90      0xffff805a3e90</span></pre></div>
<p>So <code>getenv</code> was crashing trying to load from an invalid memory location
                (<code>0x220</code> – a clearly invalid memory value). But how?</p>
</div>
<div data-section-id="what-was-happening" id="what-was-happening">

<p>At first, we were stumped. The crash was happening deep inside <code>libc</code>.
                We suspected something to do with environment variable corruption, given
                the call to <code>getenv</code>, but there wasn’t enough information to go on.</p>
<p>We started inspecting the environment block using <code>gdb</code>.</p>
<p>As a refresher, <code>environ</code> is defined as a <code>char **</code> by the POSIX
                standard <a href="https://www.man7.org/linux/man-pages/man7/environ.7.html">[8]</a>, and is effectively an list of pointers to environment
                strings, with the end of the list marked as a <code>NULL</code> pointer.</p>
<div translate="no"><pre><span>(gdb) x/s ((char**) environ)[0]
0xffffddd95e6a: "GITHUB_STATE=/github/file_commands/save_state_0e5b7bd6-..."
...
(gdb) x/s ((char**) environ)[66]
0xffff6401f0b0: "SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt"
(gdb) x/s ((char**) environ)[67]
0xffff6401f8d0: "SSL_CERT_DIR=/etc/ssl/certs"
(gdb) x/s ((char**) environ)[68]
0x0:    &lt;error: Cannot access memory at address 0x0&gt;
&lt;etc&gt;</span></pre></div>
<p>But it didn’t make sense—we were seeing a load from a space of memory that
                should not be possible, and the environment here seems to be completely valid
                and consistent. And exactly why were we calling <code>getenv</code> here?</p>
<p>And then Yury dropped in with a comment and link to an old blog post:</p>
<div translate="no"><pre><span>&lt;yury&gt; Some file IO related operation seem to error out,
       and Python attempts to construct an exception from
       errno with PyErr_SetFromErrnoWithFilenameObjects

&lt;yury&gt; which probably checks on gettext (translation hook?)
       which goes into getenv

&lt;yury&gt; this could be why -- getenv isn't threadsafe
       https://rachelbythebay.com/w/2017/01/30/env/</span></pre></div>
</div>
<div data-section-id="the-real-culprit-setenv-and-getenv" id="the-real-culprit-setenv-and-getenv">
<h2 id="the-real-culprit-setenv-and-getenv">The Real Culprit: setenv and getenv</h2>
<p><code>setenv</code> is not a safe function to call in a multithreaded environment.
                This is often a problem, and occasionally rediscovered as developers like us
                hit weird crashes in libc’s <code>getenv</code>
<a href="https://www.evanjones.ca/setenv-is-not-thread-safe.html">[9]</a>, <a href="https://rachelbythebay.com/w/2017/01/30/env/">[10]</a>,
                <a href="https://github.com/golang/go/issues/63567">[11]</a>, <a href="https://blogs.gnome.org/mcatanzaro/2018/02/28/on-setenv-and-explosions/">[12]</a>.</p>
<p>This seemed like a possible cause, but given the lack of symbols here,
                we couldn’t understand how the threads that were running could contribute
                to that crash.</p>
<p>Reading the disassembly, and cross-referencing it with the C code, we
                determined that the register <code>x20</code> corresponded with the variable <code>ep</code>,
                the pointer used to walk through the <code>environ</code> array. But <code>x20</code>
                was <code>0x248b5000</code>, and <code>environ</code> was <code>0x28655750</code>, almost
                60 megabytes later in memory.</p>
<p>Since <code>x20</code> is the pointer being used to read the old environment,
                we could look at the surrounding memory to see if anything sensible
                is still there, and could then compare that to the current <code>environ</code>.</p>
<div translate="no"><pre><span>(gdb) x/100g (char**)environ
0x28655750:     0x0000ffffddd95e6a      0x0000ffffddd95ebd
...
0x28655930:     0x0000ffffddd96f34      0x0000ffffddd96f6e
0x28655940:     0x0000ffffddd96fa5      0x0000ffffddd96fc3
0x28655950:     0x0000000024c1f710      0x0000000025213a70
0x28655960:     0x0000ffff6401f0b0      0x0000ffff6401f8d0
0x28655970:     0x0000000000000000      0x0000000000003401
(gdb) x/20g $x20-40
0x248b4fd8:     0x0000ffffddd96f6e      0x0000ffffddd96fa5
0x248b4fe8:     0x0000ffffddd96fc3      0x0000000024c1f710
0x248b4ff8:     0x0000000025213a70      0x0000000000000220
0x248b5008:     0x0000000000000020      0x0000ffff7f5192a8
0x248b5018:     0x0000000000000000      0x000000000a000150
0x248b5028:     0x0000000000000031      0x0000ffff7f5192b8
0x248b5038:     0x0000000000000000      0x000000000a0001c6
0x248b5048:     0x000000000094af78      0x0000000000000030
0x248b5058:     0x0000000000000041      0x0000000000000000
0x248b5068:     0x0000000000000000      0x0000000000000000</span></pre></div>
<p>Interesting! The pointer values in the two areas of memory are very similar!
                And where do they start to differ? The final entries at <code>0x0000ffff6401f0b0</code>
                and <code>0x0000ffff6401f8d0</code>: corresponding to <code>SSL_CERT_FILE=...</code>
                and  <code>SSL_CERT_DIR=...</code>!</p>
<p>This was a clear hint that the race condition idea was right, and another
                thread was moving <code>environ</code> as part of a call to <code>setenv</code>! Looking at
                <code>setenv</code>, it seemed that the space of memory holding the environment block
                is too small, and it might have been reallocated to fit the new variables
                <a href="https://elixir.bootlin.com/glibc/glibc-2.17.90/source/stdlib/setenv.c#L33">[13]</a>.</p>
<p>That still left us with the question of how to find what code is calling
                <code>setenv</code>. It seemed like it could be possible that OpenSSL and/or one of
                <code>reqwest</code>’s other TLS-related dependencies (<code>rust-native-tls</code>) was
                causing the crash, but how?</p>
</div>
<div data-section-id="the-connection-to-openssl-probe" id="the-connection-to-openssl-probe">

<p>A google search for those environment variables in concert with
                <code>rust-native-tls</code> pulled up an old issue: <a href="https://github.com/sfackler/rust-native-tls/issues/154">[14]</a>. And hidden in one of
                the comments was this:</p>
<div translate="no"><pre><span>Not sure about openssl. It looks like it currently
loads the system certs by using openssl-probe to set
the SSL_CERT_FILE and SSL_CERT_DIR environment variables,
and then relies on SslConnector::builder to call
ctx.set_default_verify_paths, which looks at those
environment variables. Given that the environment variables
are set globally once, it might be best to just try to clear
the store afterwards. This seemed to work for me locally:</span></pre></div>
<p>Interesting. So <code>openssl-probe</code> sets those variables. And sure enough,
                we’re using the <code>rust-native-tls</code>
<code>openssl</code> backend on Linux which calls
                into these functions!</p>
<p>Here’s the unsafe-free, completely-innocent-looking offending lines from the
                <code>openssl-probe</code> library <a href="https://github.com/alexcrichton/openssl-probe/blob/db67c9e5b333b1b4164467b17f5d99207fad004c/src/lib.rs#L65-L76">[15]</a>:</p>
<div translate="no"><pre><span><span>pub</span> <span>fn</span> <span>try_init_ssl_cert_env_vars</span><span>(</span><span>)</span> <span>-&gt;</span> <span>bool</span> <span>{</span>
    <span>let</span> <span>ProbeResult</span> <span>{</span> cert_file<span>,</span> cert_dir <span>}</span> <span>=</span> <span>probe</span><span>(</span><span>)</span><span>;</span>
    
    
    
    <span>if</span> <span>let</span> <span>Some</span><span>(</span>path<span>)</span> <span>=</span> <span>&amp;</span>cert_file <span>{</span>
        <span>env<span>::</span></span><span>set_var</span><span>(</span><span>ENV_CERT_FILE</span><span>,</span> path<span>)</span><span>;</span>
    <span>}</span>
    <span>if</span> <span>let</span> <span>Some</span><span>(</span>path<span>)</span> <span>=</span> <span>&amp;</span>cert_dir <span>{</span>
        <span>env<span>::</span></span><span>set_var</span><span>(</span><span>ENV_CERT_DIR</span><span>,</span> path<span>)</span><span>;</span>
    <span>}</span>

    cert_file<span>.</span><span>is_some</span><span>(</span><span>)</span> <span>||</span> cert_dir<span>.</span><span>is_some</span><span>(</span><span>)</span>
 <span>}</span></span></pre></div>
<p>And that’s how we ended up with a crash, caused by <code>unsafe</code>-free Rust
                code badly interacting with the use of <code>libc</code> elsewhere in the program.</p>
</div>
<div data-section-id="an-aside-what-even-is-risc" id="an-aside-what-even-is-risc">

<p>While we both had experience with reverse engineering, our aarch64 assembly
                skills were either rusty (Matt) or nonexistent (Sully), and so we spent
                some time confused about one of the main loops in the assembly. The code
                seemed to expect <code>x20</code> to be changing, and it was the clearest candidate
                to be the register representing <code>ep</code>, but it didn’t appear on the left
                hand side of any instruction.</p>
<p>Then we noticed a curious exclamation mark:</p>
<div translate="no"><pre><span>0x0000ffff805a3e88 &lt;+164&gt;:   ldr     x19, [x20, #8]!</span></pre></div>
<p>It turns out this is the “pre-index” address mode, which behaves like
                <code>x19 = *(x20 + 8); x20 = x20 + 8</code>
<a href="https://developer.arm.com/documentation/102374/0102/Loads-and-stores---addressing">[16]</a>.</p>
<p>This is a cute little operator, but we are old enough to remember being told
                that auto-increment address modes were a legacy of old-school CISC machines
                like the VAX, eschewed even by more modern CISC machines like x86, and certainly
                by the elegant and simple RISC designs. Everything old is new again, I suppose.</p>
</div>
<div data-section-id="so-why-only-arm64-linux" id="so-why-only-arm64-linux">

<p>Because this crash is caused by a memory-moving <code>realloc</code>, triggered by
                <code>setenv</code> which happens at the same time another thread is calling <code>getenv</code>,
                it requires a lot of pieces to fall into the right place. The number of
                environment variables needs to be just right to cause a realloc.
                An unrelated I/O failure picked up by <code>asyncio</code> needs to call <code>getenv</code> to
                retrieve the <code>LANGUAGE</code> environment variable at exactly the same time.</p>
<p>The value <code>0x220</code> looks suspiciously close to the size of the old environment
                in 64-bit words <code>(0x220 / 8 = 68)</code>, and this value was written over the
                terminating <code>NULL</code> of the environment block before it was moved, likely to
                indicate the size of the free block to the system malloc but convenienty
                providing an improper invalid pointer landmine for use-after-free victims
                to hit.</p>
<p>Given all these preconditions, we were pretty lucky that it was even mostly
                reproducible on a single platform.</p>
</div>
<div data-section-id="the-fix" id="the-fix">

<p>In the end, we decided that we’re going to migrate away from <code>reqwest</code>’s
                <code>rust-native-tls</code>/<code>openssl</code> backend to <code>rustls</code> on Linux. Our original
                thinking behind using the native TLS backend was that we’d get to avoid
                shipping two TLS engines as we continue to port Python code to Rust.
                With this issue popping up, we decided that shipping two engines would be OK
                in the short term.</p>
<p>Another option would have been to arrange to call <code>try_init_ssl_cert_env_vars</code>
                for the first time with Python’s Global Interpreter Lock (the dreaded GIL) held.
                Rust has an internal lock to prevent races between Rust code reading and writing
                the environment at the same time, but it doesn’t prevent code in other languages
                from using <code>libc</code> directly. Holding the GIL would prevent us from racing with
                our Python threads, at least.</p>
<p>The Rust project has already identified this as an issue, and has planned
                on making the environment-setter functions unsafe in the 2024 edition
                <a href="https://github.com/rust-lang/rust/issues/124866">[17]</a>. The glibc project has also
                (very) recently added more thread-safety to <code>getenv</code>, by avoiding the
                <code>realloc</code> and leaking the older environments <a href="https://github.com/bminor/glibc/commit/7a61e7f557a97ab597d6fca5e2d1f13f65685c61">[18]</a>.</p>
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
<!-- -->
</div>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[TabBoo – add random jumpscares to websites you're trying to avoid (613 pts)]]></title>
            <link>https://tabboo.xyz/</link>
            <guid>42795237</guid>
            <pubDate>Wed, 22 Jan 2025 17:27:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tabboo.xyz/">https://tabboo.xyz/</a>, See on <a href="https://news.ycombinator.com/item?id=42795237">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <div>
          <p><img src="https://tabboo.xyz/tabboo.svg" alt="TabBoo Logo"></p><p>
            <a href="https://chrome.google.com/webstore/detail/your-extension-id" target="_blank">
              <h2>Tab</h2>
            </a>
            <a href="https://chrome.google.com/webstore/detail/your-extension-id" target="_blank">
              <h2>
                Boo
                
              </h2>
            </a>
          </p>
        </div>
        <h2>
          Add <span>random jumpscares</span> to sites you're
          trying to avoid
        </h2>
        <p><a>What's a jumpscare?</a></p><p>
          You're stuck in an addictive, endless loop, loading the same sites
          over and over again. Install the extension and let
          <em>aversive conditioning</em> do the rest.
        </p>
        <p><a href="https://chromewebstore.google.com/detail/tabboo/jjdalbijcodgjpeepgllndclalllbopg" target="_blank">+ Add to Chrome</a>
      </p></div></div>]]></description>
        </item>
    </channel>
</rss>