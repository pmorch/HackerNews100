<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 28 Sep 2025 22:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Play snake in the URL address bar (145 pts)]]></title>
            <link>https://demian.ferrei.ro/snake/</link>
            <guid>45408021</guid>
            <pubDate>Sun, 28 Sep 2025 21:08:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://demian.ferrei.ro/snake/">https://demian.ferrei.ro/snake/</a>, See on <a href="https://news.ycombinator.com/item?id=45408021">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <p><span>Use the arrow keys or WASD to control the snake on the URL.</span>
    <span>Use the arrows to control the snake on the URL.</span>
    <a id="reveal-url" href="#">Click here</a> if you can't see the page URL<span id="url-escaping-note"> or if it looks messed up with <span id="replacement-char-description"></span></span>.&nbsp;
  </p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[China Is Run by Engineers. America Is Run by Lawyers (132 pts)]]></title>
            <link>https://freakonomics.com/podcast/china-is-run-by-engineers-america-is-run-by-lawyers/</link>
            <guid>45407490</guid>
            <pubDate>Sun, 28 Sep 2025 20:06:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://freakonomics.com/podcast/china-is-run-by-engineers-america-is-run-by-lawyers/">https://freakonomics.com/podcast/china-is-run-by-engineers-america-is-run-by-lawyers/</a>, See on <a href="https://news.ycombinator.com/item?id=45407490">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

			<article>

								<section id="transcript">
					<h2>Episode Transcript</h2>
										<div id="transcript_inner">
						<p>Hey there, it’s Stephen Dubner. Before we get started on today’s episode, I’d love your help on a future episode we’re producing —&nbsp;especially if you happen to be a physician. We’re looking into the doctor shortage in the U.S., so if you happen to be a doctor, we want to hear from you. I’d like to know how your workload has changed over time, maybe how your workplace has changed, or if you have anything else on the topic to say you think we might find interesting. Just send a voice memo to radio@freakonomics.com, subject line: doctor shortage. Thanks in advance. Also: we’ll be doing a live taping of <em>Freakonomics Radio</em> as part of Sirius XM Podcasts Month, on Wednesday, October 8th in New York City. There’s room for a few <em>Freakonomics Radio</em> fans to come along, so if you’d like to be one of them, send an email to radio@freakonomics.com, subject line: “live taping.” Thanks for that —&nbsp;and now, on to today’s episode.</p>
<p>&nbsp;*&nbsp; &nbsp; &nbsp; *&nbsp; &nbsp; &nbsp; *</p>
<p>If you are an American, how do you think about the relationship between the U.S. and China? You may see China as a political and economic bully, and a thief of American intellectual property. You may see China as a hardcore surveillance state — internally and externally; maybe a propaganda state too. But you probably don’t think about the relationship between China and the U.S. the way that <strong>Dan Wang</strong> thinks about it:</p>
<blockquote><p><a href="https://danwang.co/about/" target="_blank" rel="noopener"><strong><em>Dan WANG</em></strong></a><em>: I think that no two peoples are more alike. They have a hastiness around them. They have a sense of being willing to take shortcuts, especially on health and wealth. They both have a sense of the future in a way that I think is not so apparent anymore in Europe or Japan. They’re both striving towards something.</em></p></blockquote>
<p>But for all those similarities between the U.S. and China, Wang sees one huge difference: China is a country that is run by engineers, while the U.S. is a country run by lawyers. Engineers, he explains, are driven to build while lawyers are driven to argue, and obstruct. Who is Dan Wang, and how did he come to hold this view? He was born in China, in the early 1990s. When he was seven, he immigrated with his parents to Canada and, later, to the U.S., near Philadelphia. But he returned to China in his twenties —&nbsp;as an analyst for an economic research firm. He stayed for six years, and each year he wrote a long letter home, and published it on his website.</p>
<blockquote><p><em>WANG</em><em>: Yes, that’s right. Every year I tried to tell my friends what I was up to, and try to tell my parents what I was up to. And it kind of took a life of its own after I was stuck in China during the entirety of “Zero Covid,” and very few other people were able to observe the country and write about it as I was able to do.&nbsp;</em></p></blockquote>
<p>He has now turned those letters into a book, called <em>Breakneck: China’s Quest to Engineer the Future. </em>Wang sees much to admire about an engineering state:</p>
<blockquote><p><em>WANG</em><em>: They’ve just been solving seven problems a day before breakfast because they have so many problems to solve.&nbsp;</em></p></blockquote>
<p>But also, plenty of downside:</p>
<blockquote><p><em>WANG</em><em>: They are also fundamentally social engineers, and the physical engineers cannot restrain themselves from treating society as just another big optimization problem.&nbsp;</em></p></blockquote>
<p>Today on <em>Freakonomics Radio</em>, what happens when an engineering state goes up against a lawyerly society? What does the U.S. have to learn from China, and vice versa? And: what happens when an expat returns to explore the soul of his motherland?<strong>&nbsp;</strong></p>
<blockquote><p><em>WANG</em><em>: I was concerned at several points for my safety. </em></p></blockquote>
<p>All that is coming up, starting now.</p>
<p>&nbsp;*&nbsp; &nbsp; &nbsp; *&nbsp; &nbsp; &nbsp; *</p>
<p>Okay, let’s have a proper introduction.</p>
<blockquote><p><em>WANG: Hi, I’m Dan Wang. I am a research fellow at the Hoover Institution at Stanford University, and the author of </em><a href="https://www.amazon.com/Breakneck-Chinas-Quest-Engineer-Future/dp/1324106034" target="_blank" rel="noopener">Breakneck: China’s Quest to Engineer the Future</a><em>.&nbsp;</em></p>
<p><em>DUBNER: So Dan, what are you exactly? I ask because you’re not an academic researcher, quite. You’re not fully a journalist, quite. You’re not a business analyst, quite. So if you had to slap one big label on your forehead, what would it be?&nbsp;</em></p>
<p><em>WANG</em><em>: I am Dan Wang. I think that is all I can be. But maybe you can give me a label. I think a lot of what I have tried to do is to be an observer of China partly as an outsider just as I’m an observer of the United States partly as an outsider of being Canadian.&nbsp;</em></p></blockquote>
<p>These days, Wang spends most of his time in Ann Arbor, Michigan.</p>
<blockquote><p><em>WANG: My wife is a professor at the University of Michigan. is an anthropologist, really, of technology cultures, and so, she wrote a book about Shenzhen maker spaces called Prototype Nation. </em></p>
<p><em>DUBNER: And where did she grow up?&nbsp;</em></p>
<p><em>WANG: She grew up in Salzburg. So, she is Austrian and we just spent a bit of time in Austria. We were hiking through the Austrian Alps.&nbsp;</em></p></blockquote>
<p>Wang was born in the Chinese province of Yunnan.</p>
<blockquote><p><em>WANG</em><em>: I grew up in China’s periphery. I did not grow up in its imperial core of Beijing or these rich coastal cities like Shanghai or Shenzhen.&nbsp;</em></p></blockquote>
<p>One of Wang’s grandfathers barely survived famine, and he became an army officer. His other grandfather came from a family that had once been rich, from trading in everything from copper and silk to liquor and possibly opium.</p>
<p><em>WANG</em><em>: My family is made up of some people with more elite origins, some people with more rural origins, but what was important was that they all suffered through the great turn of the Communist Party’s rule with Mao Zedong. Some of them made it out better than others. My parents were both lucky to be urbanites in China growing up. They were part of China’s luckiest generation, to have been born in the 1960s. They were able to attend university. They were able to have careers, to build a modicum of wealth, and they were able to emigrate abroad as well.</em></p>
<blockquote><p><em>DUBNER: You write that for your parents when they were younger, and especially your grandparents’ generation, that poverty was the normal state of affairs, that there were shortages in just about everything. </em></p>
<p><em>WANG</em><em>: That’s right. </em></p>
<p><em>DUBNER: Imagine that they had been born — the same people that you know as your mother and father —&nbsp;had been born, let’s say, 30 years later, 1990. How would their lives have been different?&nbsp;</em></p>
<p><em>WANG</em><em>: Yeah, well, that is around my age. I just turned 33, and this is one of these things that I reflect upon in China, that the decade of birth really, really matters. And so my parents were lucky in part because the socialist-planned economy was going away when my mom was in college. When she started college at the age of 18, she was given ration tickets to be able to eat pork once a month. That was all the pork that she was allotted. But most of that system had melted away by the time she reached her senior year of college. Now, if you were born in China in 1990 then I could expect that my parents by virtue of being urbanites should have been allocated two or three apartments from the state, which would be worth quite a bit more. And they may have been able to liquidate one of these homes in order to send me abroad for college, and maybe my parents could have afforded my college education much more easily.</em></p></blockquote>
<p>From around 1980 until 2016, the Chinese government —&nbsp;concerned about overpopulation — enforced its one-child policy.</p>
<blockquote><p><em>WANG</em><em>: And my parents, I’m not sure whether they are really wanted to have a second child, but that option wasn’t available to them in part because when my mother gave birth to me, she was also forced to sign these documents in her workplace saying that she will not have a second child, and maybe she would have to consent to having a sterilization to make sure that she did not have a second child. </em></p>
<p><em>DUBNER: How old were you when you learned about that? </em></p>
<p><em>WANG</em><em>: I was maybe about seven or eight years old. This was shortly after we moved to Canada when I was growing up. My parents I think at least debated and discussed whether they should give me a sibling. We had a bit of a rocky start when I moved to Canada. My parents moved just after the dot-com bubble, and my dad was a software engineer. So they had a harder time finding their footing. And I was a handful, I admit. I was a rowdy child. I’m sorry, Mom. </em></p>
<p><em>DUBNER: Well, they got their revenge by placing you in some kind of military training program, yes?&nbsp;</em></p>
<p><em>WANG</em><em>: I was such a rowdy child that my parents decided that I was best served to be a Royal Canadian Army Cadet. </em></p>
<p><em>DUBNER: And that worked out well for you.</em></p>
<p><em>WANG</em><em>: I was never all that good at school. But the army really straightened me out, I was part of the army band, and I was really good at drill, I was cadet of the year and that was something I was really proud of.</em></p></blockquote>
<p>Wang studied philosophy at the University of Rochester in upstate New York, but he dropped out to work for the Canadian e-commerce startup Shopify. He then spent some time in Silicon Valley and in Germany. He did eventually get his college degree, and he did some freelance writing — <a href="https://www.vox.com/new-money/2016/11/4/13498504/shenzhen-smartphone-innovation-capital" target="_blank" rel="noopener">including an article for <em>Vox</em> about Chinese drone technology</a>. This led to a job with a firm called Gavekal Dragonomics, which provides investment research about the Chinese economy. He moved to Hong Kong in 2017.</p>
<blockquote><p><em>WANG</em><em>: We were trying to get beyond the headlines of the Wall Street Journal and Bloomberg to figure what’s really going on in China for a broadly financial audience of folks in hedge funds, pensions, asset allocators. We were journalists, we were diplomats, we were analysts, we were executives, all trying to figure out this big thing of what China is. I was there to really study a big program called Made in China 2025, which was Beijing’s grand ambition to dominate 10 different industries of the future, included electric vehicles, included new forms of material science, and at the time there was a lot of skepticism that China could innovate, that China could build cars better than Germans and Japanese. And I had been feeling that China was going to be able to build all the cars, going to build all the industrial robotics. What I found really important was to treat China seriously by reading a lot of the core texts of the party state. So I found myself reading most major speeches by Xi Jinping that was published in the party’s main theory magazine. It’s a magazine called Seeking Truth, “Qiushi” in Chinese. I found myself reading this beautiful magazine that was very well-produced every month and sent to party members and curious folks like me. So I understood that China has this formal system in which you have a Communist Party that has a lot of propaganda that is often trying to explain itself and what it is trying to do. I also understood that China was not strictly a formal system, that the formality of the official China contrasts with the complete casual informality of Chinese society. I found myself going to visit as many places in China as I could, first-tier cities like Beijing and Shanghai as well as to villages, as well to third- and fourth-tier cities across the countryside as well.</em></p>
<p><em>DUBNER: When you interact with these people, how open are they with you? </em></p>
<p><em>WANG</em><em>: I think that Chinese everywhere, including in the imperial center of Beijing, have a very nice appreciation of the informalities of Chinese society. The most blasphemous things that one could hear would be among urban residents in Beijing even today, who would tell you about all the ways that the central government is meddling with their lives and becoming very weird with politics. For the most part, Chinese people are wonderful and informal and they complain very openly and very bitterly about all of the problems that they face. I think for the most part people are not generally intimidated unless, you know, you’re speaking to a party member and it’s clear that I cannot be a party member because I’m a foreigner. The only person they’re really scared of is Xi Jinping. I think nobody would complain to that big guy. </em></p>
<p><em>DUBNER: When you returned to China as a Chinese-born Canadian-American young person, now coming back to do economic research to benefit American investors, I’m curious how you were perceived?&nbsp;</em></p>
<p><em>WANG</em><em>: Oh boy, that makes my life sound even more complicated than I expected. If you are of Chinese heritage, the Chinese government will view you essentially as a ward of the state for as long as you live. Doesn’t matter if you haven’t spent any time in China, doesn’t matter if your parents came to San Francisco 100 years ago, you will be viewed as a ward of the state. That is also one of these frightening things about China. I don’t want to be treated as a ward of the state forever. I am very proud to be a Canadian. I’m very happy to be a resident of the United States. And this is not how I would choose to be identified for the rest of my life.&nbsp;</em></p>
<p><em>DUBNER: Were you concerned for your safety there?</em></p>
<p><em>WANG</em><em>: I was concerned at several points for my safety. At one point in 2022, the Chinese government banned my website within China. I was thinking, well, all I have is this rinky-dink website. It’s just my name, danwong.co. Did Beijing really feel like I was on par with Wikipedia or the New York Times in order to have to ban me? I had to go see the Canadian consul general in Shanghai to ask whether they needed me to leave in a hurry. </em></p>
<p><em>DUBNER: And what were you told when you went there? </em></p>
<p><em>WANG</em><em>: They said that maybe this was just an algorithmic decision by the government. It’s not very clear. I didn’t have any censors’ doors I could knock on to ask, Hey, what’s going on, is there something I wrote? And so I had no idea. </em></p>
<p><em>DUBNER: Had you written things that you thought, had it caught the attention of the right people, it would have inflamed them? </em></p>
<p><em>WANG</em><em>: What I decided to do was that I was going to write about the country in the best way that I could, and if it inflamed anyone, I wasn’t going to worry too much about it. There’s a great sinologist named Perry Link who came up with this excellent metaphor for how to think about Chinese censorship, and <a href="https://www.amazon.com/Anaconda-Chandelier-Writings-China/dp/1589881982" target="_blank" rel="noopener">that metaphor was the anaconda and the chandelier</a>. So, imagine that you’re at a dinner table. There is a chandelier above you, and within this chandelier was a great anaconda that was just coiled inside, sleeping. All of these dinner guests are very well aware that there’s an anaconda hanging above them. And if they say the wrong thing, maybe the anaconda will wake up and come down and strangle them. A lot of the censorship in China consists of self-censorship. A lot of dinner guests don’t know if the anaconda will wake up, but they self-censor regardless. </em></p>
<p><em>DUBNER: In that analogy, does the anaconda sometimes turn out to be a fake anaconda?</em></p>
<p><em>WANG</em><em>: Yeah, it was a paper anaconda — as Mao Zedong might say. Sometimes you can say things and the anaconda will completely ignore you. I think fundamentally the issue here is uncertainty about when the anaconda might strike, and I think that produces a lot of the self-censorship. I decided I wasn’t going to self-censor. I wasn’t going to tread on eggshells here. I was going to write in the best way that I could whatever was going on in China as I observed it. If someone found my remarks inflammatory —&nbsp;well, that’s on them. </em></p>
<p><em>DUBNER: If I recall correctly, because of Covid and because of the lockdown, you ended up staying in China either longer, at least more consistently, than you would have otherwise. Is that the case? </em></p>
<p><em>WANG</em><em>: I think that is fair, yes.&nbsp;</em></p>
<p><em>DUBNER: So what do you think would have happened to you if Covid had never happened? </em></p>
<p><em>WANG</em><em>: I think I would have continued to study the path of U.S.-China relations, tried to study the trajectory of China’s technology improvements, and I would have probably not have been able to write quite a lot of this book. Because the Covid experience really was quite shocking to me, to have to stay in the country for three years, and I think it was shocking to absolutely everyone who didn’t expect the sort of measures that the Chinese government would enact. </em></p>
<p><em>DUBNER: Can you just talk about your experience, especially during <a href="https://www.cnn.com/2022/12/27/china/china-2022-zero-covid-intl-hnk-mic" target="_blank" rel="noopener">that intense pursuit of “Zero Covid</a>.”&nbsp;</em></p>
<p><em>WANG</em><em>: I was in China at the start of 2020 until the end of 2022, basically having not left for three years. My observation of “Zero Covid” in China was that it consisted mostly of these, let’s call it, three acts, to put it a little bit dramatically. The first act of “Zero Covid” consisted of a lot of anger at the Chinese government. Whis was really the winter, spring of 2020 when we had heard of a new respiratory virus that had broken out of a city named Wuhan. And a lot of folks, including me, including a lot of Chinese around me, were angry that this was the second big respiratory virus to break out of China in two decades. The first one was SARS in 2003. And it followed some of those early issues of SARS, in which the Chinese government tried to suppress some of these whistleblowers that were talking about medical conditions. The second act moved pretty quickly. By April and May of 2020, people saw that China actually contained the virus fairly well. And there was a bigger sense of appreciation, that these methods of “Zero Covid,” though very harsh, was able to stomp out a lot of chains of transmission. Now, people were still straining under some of these difficult aspects of “Zero Covid,” which included things like, if you tested positive, the government was going to make you go to a convention center or a stadium to quarantine with other folks. You had to go through these contact-tracing apps. A lot of things were shut down. You had to wear a mask outside in most places. But most people decided that these costs were worth bearing. Restaurants were starting to come back online, a lot of the economy was returning to life. There used to be this early commentary at the start of 2020, that Covid was going to be China’s Chernobyl moment, which meant a natural disaster that triggered the political downfall of the regime. And if anything, people thought that, maybe Covid is the Chernobyl movement for everyone else, because Donald Trump’s America in 2020 certainly didn’t seem like a really good place to be. And that was the year that my parents did a very un-Chinese thing and said, “Dan, don’t come back and visit us in Pennsylvania. It’s a mess over here, just stay in China, where life is better- ordered.” And then there was a third act of “Zero Covid,” which started with the Shanghai lockdown in the spring of 2022. It was probably the most ambitious lockdown ever attempted in the history of humanity. China essentially demanded that its population in its largest city of 25 million people essentially could not leave their apartment compounds over the course of 10 weeks in the spring of 2022 because the Omicron variant of the virus, which was highly transmissible, was spreading out of control in the city. Xi’an in the Northwest also was subject to a very long lockdown. And so people were kept inside. A lot of folks felt food-insecure. The city had no plan really to implement a lockdown while delivering a lot of food to everyone. People who needed treatment for their diabetes, treatment for cancer, were essentially told, you need to stay at home because we don’t want Covid spreading. A lot of people across China were feeling very dissatisfied with “zero Covid.” In a few places, protests erupted, and I remember going to the Shanghai protests in October of 2022. </em></p></blockquote>
<p>Some residents of Shanghai protested the Covid measures by screaming out of their windows, for hours.</p>
<p>The government deployed drones to tell residents to keep quiet.</p>
<p>The announcement says, “Please comply with Covid restrictions. Control your soul’s desire for freedom. Do not open the window or sing.” And then, the central government tried a different approach.</p>
<blockquote><p><em>WANG</em><em>: The great denouement of “zero Covid” was that the central government essentially threw up its hands and said, “We’re not going to pursue this anymore.” Essentially, they dropped all of these barriers —&nbsp;not quite overnight, but over the course of a week in which “Zero Covid” became total Covid. And rather than trying to help and prepare the population to deal with this virus that the government has spent three years frightening people about, it really just allowed the virus to run rampant in the coldest month of the year, when a lot of people died.</em></p></blockquote>
<p>According to <a href="https://jamanetwork.com/journals/jamanetworkopen/fullarticle/2808734" target="_blank" rel="noopener">research published by the </a><em>Journal of the American Medical Association, </em>there were nearly two million excess deaths in China among people 30 and over in the first two months after the “zero Covid” strategy was abandoned. Dan Wang reflected on this in his 2022 letter. “Over the last seven decades,” he wrote, “China has experienced lengthy periods of stability punctuated by government-triggered chaos. The Chinese state is usually levelheaded; but every so often it succumbs to a manic episode. It then comes to its senses and sets down a battered people, as the rest of the world looks on aghast.” And yet, despite this kind of failure, Dan Wang thinks the U.S. has a great deal to learn from China. That’s coming up, after the break; I’m Stephen Dubner, and this is <em>Freakonomics Radio</em>.</p>
<p>&nbsp;*&nbsp; &nbsp; &nbsp; *&nbsp; &nbsp; &nbsp; *</p>
<p>Last year, instead of writing <a href="https://danwang.co/2022-letter/" target="_blank" rel="noopener">his annual letter from China</a>, Dan Wang&nbsp;wrote a book called<em> Breakneck: China’s Quest to Engineer the Future</em>. By the time it was published, in August of this year, he was living back in the States.</p>
<blockquote><p><em>DUBNER: What was your goal in writing this book? I mean, on the one hand, it’s what you do and it’s just a good and interesting thing to do for yourself and your career and so on, but I’m curious whether there’s something more than that. </em></p>
<p><em>WANG</em><em>: A big reason I wrote my book is that I have a pretty strong sense that most Americans will never visit China. A lot of Americans are not necessarily very curious about China. They have no great interest in being there, and perhaps rationally so, because they fear about their lives and they don’t find it necessarily very attractive. I was really interested in showing them that Shanghai is a really wonderful, splendid city; that Beijing is full of solidness, splendor; and that Shenzhen feels quite a lot like Silicon Valley, in which it is made up of a lot of these boring office parks; that Chongqing is the most hydropunk city in the world. I just wanted to give people a bit of a texture so that there is an aspect of mutual curiosity. I also felt that we’re reasoning through these two great superpowers that are sometimes locking horns, that are probably going to be in some degree of conflict with each other over the next few decades. It didn’t really make sense to reason through all of their problems with these 19th century political-science terms like socialist or capitalist or autocratic or neoliberal. I think what we need to do is to have a playful new framework.</em></p></blockquote>
<p>That playful new framework is also the framework of <em>Breakneck. </em>“That’s the big idea behind this book,” he writes. “It’s time for a new lens to understand the two superpowers: China is an engineering state, building big at breakneck speed, in contrast to the United States’ lawyerly society, blocking everything it can, good and bad.”</p>
<blockquote><p><em>WANG</em><em>: China is a state defined very much by a leadership that views itself as not so much interested in soft, fuzzy stuff, of creative expression, but very much more interested in building highways, building mega-projects, building dams, building coal plants, building hyperscalers, building homes. That was the way for it to create political prestige over anything else. At various points in China’s recent past, the entirety of the senior leadership, all nine members of the Standing Committee of the Politburo, had degrees in engineering, and this was engineering of a very Soviet sort. We had top leaders that were hydraulic engineers and thermal engineers and mechanical engineers, and part of my central thesis is that China is ruled as an engineering state because China treats building a megaproject as the solution to any number of problems. </em></p>
<p><em>DUBNER: What would you say are the key downsides of an engineering state?&nbsp;</em></p>
<p><em>WANG</em><em>: The problem is that they are fundamentally also social engineers that treat society as just a giant math exercise as well, which is why I spend a lot of time thinking about the one-child policy as well as “Zero Covid” —&nbsp;which, the number is right there in the name. There’s no ambiguity about what this means. So China is made up of physical engineers, people who try to engineer the economy as well. They’re also social engineers. I think that for the most part, what the Chinese are interested in is being an engineer of the soul, which is a phrase from Joseph Stalin that Xi Jinping has recently repeated. They’re not just all social engineers, they’re also engineers of the soul. The main downsides are when the Chinese government decides that the population is just another problem to be optimized, as if the population could be controlled through a series of valves. This is where I document some of the ethno-religious minorities in Tibet as well as Xinjiang who are really suffering through the engineering of being Sino-fied because they are treated as their cultures do not matter, and must be harmonized into the dominant Han culture.</em></p>
<p><em>DUBNER: How much of that is related to the building of infrastructure projects and populations being displaced?&nbsp;</em></p>
<p><em>WANG</em><em>: I think there is a component of trying to move, let’s say, Tibetans who are living in highland Himalayas down to the lowlands where they are probably better monitored by living in these big apartment blocks rather than these mountains that the government finds it really difficult to hike into. I think there is a component of that. There is a component of building very big detention centers and detention camps for the weaker minority in Xinjiang and to try to Sinicize them as well.&nbsp;</em></p>
<p><em>DUBNER: This reminds me of, it was I think the first line of your 2022 letter from China, “Mountains offer the best hiding places from the state,” you wrote. Can you say a little bit more about that?&nbsp;</em></p>
<p><em>WANG: Yeah, I was born in China’s most mountainous province, and I am still very much attracted to mountains in part because of the works of political scientist and anthropologist James C. Scott of Yale University. His best-known work is <a href="https://yalebooks.yale.edu/book/9780300078152/seeing-like-a-state/" target="_blank" rel="noopener">Seeing Like a State</a>, in which Scott wrote about how the state really tries to organize the population in order to better control them. And one of Scott’s best works, maybe his very best work, is called <a href="https://yalebooks.yale.edu/book/9780300169171/the-art-of-not-being-governed/" target="_blank" rel="noopener">The Art of Not Being Governed</a>, in which he wrote about a zone he called Zomia. That is a region of highland Southeast Asia that stretches from the southwestern part of China, where I’m from, all the way down to Vietnam and Laos and Cambodia, where you have all of these peoples that are uninterested in being part of organized states. They retreated to these mountain areas in part to run away from the Burmese state or the Tibetan state, and most especially the Han Chinese state. They’re tired of taxation, they’re tired of conscription, they’re afraid of the diseases that spread in urban quarters, and so they decided to be in the mountains, which are much more difficult to find them.&nbsp;</em></p></blockquote>
<p>Okay, so if that’s what Wang means when he calls China an “engineering state,” what does it mean when he calls the U.S. a lawyerly society?</p>
<blockquote><p><em>WANG</em><em>: I think that the U.S. is a lawyerly society because at first approximation, a lot of folks who end up in the White House have gone to Yale Law School. </em></p></blockquote>
<p>As <em>Politico </em>has pointed out, <a href="https://www.politico.com/newsletters/west-wing-playbook/2023/02/22/the-yalies-take-the-wheel-00084037" target="_blank" rel="noopener">there were around 140 lawyers in the Biden White House</a>, and about 25 percent of them had Yale law degrees.</p>
<blockquote><p><em>WANG: If we take a look at the founding of America, a lot of the founding fathers were trained as lawyers. If we look at the Declaration of Independence, essentially it reads like a lawsuit as the start of a great legal argument. The lawyerly society has persisted in the modern past, and the Democratic Party is especially lawyerly. I think the issue with lawyers is that lawyers are really good at saying no. Lawyers block everything, good and bad. So on the one hand, we don’t have a functional infrastructure almost anywhere in the U.S., but we also don’t have stupid ideas like the one-child policy.&nbsp;</em></p>
<p><em>DUBNER: I’d like to know why you call the U.S. a lawyerly society versus a lawyerly state, especially considering that so many of our elected politicians are lawyers.&nbsp;</em></p>
<p><em>WANG: I call it a lawyerly society because this is something that we all participate in. One of the great things about lawyers is that they’re able to protect people with property. Unfortunately, what that has ended up in is that a lot of lawyers are protecting people who have already made it. They’re mostly already protecting the rich, and it is mostly the people with property, who are suing to block, let’s say, a new piece of housing from being developed around them, creating more mass transit systems, creating new highways. </em></p>
<p><em>DUBNER: When you talk about the U.S. not being good at infrastructure, you know, I think of the interstate highway system, which is I think by most regards, still considered pretty good. And that was obviously a government project. I think about the commercial airline system, which is a collaboration between private firms and a big state architecture as well. Do you say that we’re bad at infrastructure because in the last 50 years, we’ve had, A, decay of the older stuff, and, B, an inability to build especially big public transportation projects, is that the primary accusation here? </em></p>
<p><em>WANG</em><em>: Yes. I think it is both, that the U.S. is not maintained and it is also not building. Now, I acknowledge that the U.S. used to be an engineering state. The U.S. had this really big growth spurt between 1850s and 1950s. In the 19th century, the U.S. had been building these big systems of canals, it built the interstate railways, it built these big skyscrapers in Manhattan as well as Chicago. And then throughout the Second World War, the U.S. built a lot of other big projects as well, especially the highways, as you point out, but also the Manhattan Project as well the Apollo missions. I think the U.S. engineering state had made a lot of mistakes, it probably overbuilt. Throughout the 1950s and the 1960s, people started to revolt against these decisions made by urban planners, when folks like Robert Moses were ramming highways through dense urban neighborhoods. When the U.S. government agencies were spraying pesticides, especially D.D.T., absolutely everywhere. When fossil-fuel executives had gotten really close with the regulators as well as the automakers. And so people decided that a lot of big business, as well as a lot of big government, had to be restrained. We had a movement out of elite law schools, especially at Harvard Law as well as Yale Law, that decided that lawyers and law students had to be regulators as well as litigators. There were these movements of “sue the bastards,” and the bastards refer to the U.S. government as well as big businesses. And so a lot of the lawyers decided to restrain activity rather than build new activity.&nbsp;</em></p>
<p><em>DUBNER: When you think of the downsides of the lawyerly society, what are the top three or five that come to mind?&nbsp;</em></p>
<p><em>WANG</em><em>: The first is that the U.S. has really lost a lot of its ability to be physically dynamic. We’re speaking in New York City. New York City has had a very extensive housing shortage for a very long time. The rents here are far too high. And the U.S. generally has not built enough housing in many of its big cities. New York is really bad at building mass transit. If we take a look at the data that’s being maintained by N.Y.U.’s transit project, <a href="https://www.bloomberg.com/news/articles/2023-02-23/in-nyc-subway-a-case-study-in-runaway-transit-construction-costs" target="_blank" rel="noopener">New York spends about $2 billion building a mile of subway</a> and this is not just a little bit more pricey than places like Spain and Italy and France, which are also complicated to build. It’s something like eight or nine times more expensive than subway projects in Rome or Paris or Barcelona.&nbsp;</em></p>
<p><em>DUBNER: And in what ways are lawyers the cause?&nbsp;</em></p>
<p><em>WANG</em><em>: The lawyers are in part the cause because the state agencies are much more focused on procedure and process rather than actually getting the result done. I think a lot about the California high-speed rail project, in which nearly now 20 years after voters first approved the project in a referendum in California, basically none of us are able to ride a high-speed rail. The first segment will open probably later than 2030. Lawyers and the legal system have also made it really easy for any vested interest groups to file lawsuits alleging that there is some issue of environmental protection that the state has not sufficiently studied. I think that there is broad energy in the U.S. to correct some of these problems of the past. There is a strain of the left that is very interested in improving the power of the government, and to restrain some of the lawsuits that are excessively strangling core government functions. There is an element of the right that is interested in that as well. But I think the part of the American right that is thinking more about building is a little bit more animated about the rusting manufacturing base, the rusting defense industrial base, in which it has become quite clear that the U.S. is unable to make things like semiconductors, things like the top aviation jets, at high-enough quality levels. And even parts of the military industrial base have become quite non-functional. The U.S. has shipped off a lot of its munitions to Ukraine in its defense against Russia, <a href="https://www.newyorker.com/magazine/2025/07/21/is-the-us-ready-for-the-next-war" target="_blank" rel="noopener">and the U.S. hasn’t been able to replenish a lot of these stockpiles</a> <a href="https://www.rand.org/nsrd/projects/NDS-commission.html" target="_blank" rel="noopener">because it</a> <a href="https://features.csis.org/preparing-the-US-industrial-base-to-deter-conflict-with-China/" target="_blank" rel="noopener">can’t get the production facilities in order and figure out all of the supply chain issues</a>. According to the Government Accountability Office, every class of U.S. Naval ships is behind schedule by 18 months to three years. Even a lot of the core projects that the Department of Defense —&nbsp;a very powerful agency —&nbsp;cares about, it hasn’t been doing very well. So I think this is where the right and the left are both animated. </em></p>
<p><em>DUBNER: To what degree do you think that our lawyerly society has contributed to our political partisanship?&nbsp;</em></p>
<p><em>WANG</em><em>: When people feel that they can’t have affordable housing, when people see that prices of goods around them are going up, when people take a look at some of America’s apex manufacturers —&nbsp;<a href="https://www.nytimes.com/2025/08/23/technology/intel-computer-chips-tech-ai-trump.html" target="_blank" rel="noopener">companies like Intel</a> <a href="https://bhr.stern.nyu.edu/quick-take/boeings-decline-traced-to-decades-of-catering-to-shareholders-above-all-others/" target="_blank" rel="noopener">and Boeing</a> <a href="https://www.amazon.com/Sixty-Zero-Collapse-Motors-Industry/dp/0300158688" target="_blank" rel="noopener">and Detroit automakers</a> —&nbsp;which have, for the most part, been an unceasing tale of woe for their production over the last couple of years, I think there is a pretty broad sense that things in America are not working as they should, that it’s lacking some aspect of dynamism. When the economy is weak, when it’s not working for the many, when it is working mostly for the elites —&nbsp;which is also the people that lawyers are most set up to serve —&nbsp;that people get quite mad. And I think that is creating some sort of political dysfunction. </em></p>
<p><em>DUBNER: So what would you argue are the best lessons that the U.S. has to learn from China’s engineering state, or maybe the best components of being an engineering state that are worth trying to copy? </em></p>
<p><em>WANG</em><em>: I think the U.S. needs a little bit of the engineering spirit of Robert Moses once again today. New York City has just not built enough infrastructure. Part of what China has really decided to build is a lot of infrastructure, mass transit, but also parks, a lot of power capacity and also a lot of very tall bridges in the countryside. I think when people see that their cities have new subway lines, when the rivers are being connected by bridges, when their city is becoming more pleasant, they also have a broader sense of optimism about the future. This is in part a redistribution strategy in which, you know, you have these bridges built in pretty poor areas in order to try to make them better- connected. And so, that has produced not only a lot of economic gains, but it has also created some degree of political resilience for the party. Because when Chinese are pointing to their high-speed rail networks or drone shows with pride, I think their pride is very real. So we can call it propaganda of the deed, but I think this is what people feel really good about. I think they feel really good when they are able to access better manufacturing goods, as China has been able to deliver. One of the strange things about the early days of Covid in the U.S. was how manufacturers were unable to retool their production lines in order to produce basic goods like masks and cotton swabs. This is something that the Chinese had no shortage of.</em></p>
<p><em>DUBNER: One factor that’s often overlooked when people talk about how the U.S. and other countries have offshored manufacturing to China over the past 30 or whatever years is that we also offshored our pollution. Can you just talk about that from the Chinese side especially, and what kind of sentiment and perhaps accusations, complaints go into that?&nbsp;</em></p>
<p><em>WANG</em><em>: Yeah, the Chinese have sucked up a lot of these highly polluting industries, something like rare-earth processing. Rare earths is a bit of a misnomer. Most rare earths are not actually very rare. There’s about, I think, 20 elements on the periodic table that are classified as rare earths. But for the most part, they are pretty abundant. Anyone can dig them up and then process them into refined material. The challenge with rare earths is that processing is so energy-intensive and so polluting that only the Chinese have the stomach to do something like this. If you take a look at some of the cities and the towns and the villages around these rare earths processing facilities, <a href="https://www.theguardian.com/world/2025/jun/26/china-rare-earths-baotou-life-metallic-elements" target="_blank" rel="noopener">the cancer rates are off the charts</a>, and I think it is absolutely valid for Americans to think about whether they want to live near one of these highly polluting, belching toxic facilities. But the Chinese have been able to stomach it in part because former top leader Deng Xiaoping stated as a matter of national strategy that China has rare earths. We don’t have very much, he said this in the 1980s, we don’t have very much, but we have these rare earths and we are going to be able to process them.&nbsp;</em></p>
<p><em>DUBNER: I’ve heard you say that neither lawyers nor engineers are the best people, especially in concentration, to run a government. <a href="https://www.sinicapodcast.com/p/the-engineering-state-and-the-lawyerly" target="_blank" rel="noopener">And you’ve said that economists would be better</a>. Now, I will not argue with you on that, but I think some people would argue. So give me your best pitch for why economists are the kind of analysts, thinkers, maybe even doers who belong in government.</em></p>
<p><em>WANG</em><em>: Well now, Stephen, you’re really trying to get me canceled by having to praise economists.</em></p>
<p><em>DUBNER: Can I say —&nbsp;when I heard you explain this, you then said, “but economists are the most reviled of the social scientists” — and I was surprised to hear you say that. Economics has plainly taken its hits over time, as any field does, but when you look at how influential it’s been in policymaking, especially compared to the other social sciences, there’s no contest. But again, that’s my assessment; maybe I’m biased.&nbsp;</em></p>
<p><em>WANG</em><em>: I think that is still not a very good position to take in the academy, because people attribute every wrong in the world to the evils of economists. I have great admiration for economists because I think they synthesize the best from the lawyers as well as the engineers. I think that economists are indeed very empirical. They look at a lot of data and they also have a very keen sense of social science. They know that systems are dynamic. One of the things I will always be grateful to economists for is that economists were the greatest critics of the one-child policy in China, as well as briefly when it was kind of discussed in the U.S., after Ehrlich published The Population Bomb. Economists <a href="https://www.nationalaffairs.com/storage/app/uploads/public/58e/1a4/96a/58e1a496ac31b736950996.pdf" target="_blank" rel="noopener">could tell in a way that many engineers could not that population change is a dynamic variable</a>. We don’t reason through straight lines. When the population gets wealthier or better educated, the fertility rate might fall. And so I think the economists are good blends of both technocratic empirical expertise as well as having enough humanistic tendencies to really have the right formulas. </em></p></blockquote>
<p>Coming up after the break: what does Dan Wang think about Donald Trump’s approach to China?</p>
<blockquote><p><em>WANG</em><em>: I’m pretty skeptical that reshoring under Donald Trump is going to work very well.</em></p></blockquote>
<p>I’m Stephen Dubner, this is <em>Freakonomics Radio</em>. We’ll be right back.</p>
<p>&nbsp;*&nbsp; &nbsp; &nbsp; *&nbsp; &nbsp; &nbsp; *</p>
<p>Okay, back now to my conversation with Dan Wang, the author of <em>Breakneck: China’s Quest to Engineer the Future.</em></p>
<blockquote><p><em>DUBNER: I’m just curious who you most want to read the book? Because I can imagine that you have a variety of constituencies in mind.&nbsp;</em></p>
<p><em>WANG</em><em>: I think the modal audience member that I had in mind was a lawyer in Ohio, or a —&nbsp;</em></p>
<p><em>DUBNER: Would that be J.D. Vance?&nbsp;</em></p>
<p><em>WANG</em><em>: I would be down if J.D. Vance decided to pick up this book —&nbsp;<a href="https://www.nytimes.com/2024/07/17/us/jd-vance-yale-law-school.html" target="_blank" rel="noopener">also of Yale Law School.</a></em></p>
<p><em>DUBNER: I would imagine that J.D. Vance would find a lot to be interested —&nbsp;not just interested in your book, but would feel like confirmatory evidence of what he has been talking about, yes?&nbsp;</em></p>
<p><em>WANG</em><em>: Yes, although I think I’m not quite so critical of the Yale Law School as he is. Critical, though I am about the broader lawyerly culture. But I was trying to write for the smart person who was deeply curious about China coming from a perspective of someone who spoke the language and read the language and who was living there through this recent period of darkening relations between the U.S. and China. </em></p>
<p><em>DUBNER: Talk to me about the degree to which China wants to be a global superpower. The reason I ask you that question is, you know, if you read even a little bit of Chinese history, this notion of the Middle Kingdom, and their embrace of that idea, is really just compelling. There’s Heaven, there is the lowly rest of the civilizations on earth, and there’s China in the middle, and it does feel like an aspiration toward supremacy. But in the last century and a half or whatever, there hasn’t been such a big imperial appetite. So does China want to be that kind of superpower, as we tend to think, or do they just want to be, you know, a regional hegemon that gets left alone? </em></p>
<p><em>WANG</em><em>: I think that is a really important question to figure out, and this is something that the specialists are always up in a conniption about. I think the first thing to say is that, Yes, China really does view itself as the center of the world. One can translate it as the Middle Kingdom. Another way to translate it as the Central Kingdom. This is the center of the world. In the last days of the Qing Empire — this was the last empire of China before it became a republic — the Qing Empire also referred to itself as the Celestial Empire. There is a way in which the Chinese have viewed themselves to be the center of the world and everybody else is just another shade of barbarians. But what does this really mean? This is where the specialists debate. Does China want only regional hegemony? And what does regional hegemony really mean? Well, maybe it means something like demanding that the heads of state of Malaysia and Vietnam and the Philippines regularly come to the top leader in Beijing and kowtow for the emperor’s pleasure. If that is the case, is that a very big threat for American interests, if a lot of China’s near neighbors are paying fealty to China’s top leadership? I am a little bit skeptical of the case that China would want to be much more aggressive and try to, let’s say, seize Japan or seize Russia. I think that China is much more interested in declaring itself to be a great power with sufficient credibility for its own people by doing things like being a center of culture, being a center of order, producing many splendid goods that the rest of the world doesn’t have, which is how the Chinese have regarded themselves. The Chinese were able to make porcelain, were able to make silk, they were able to make tea, and the barbarians were not. That was really what defined Chinese, apart from others. And I think what that means perhaps in the modern context is that China has these fantastic cities full of drone shows in which electric vehicles, the best in the world, are speeding through. And a lot of what China is interested in is what the Qing emperor said to Lord Macartney, who was the head of the British embassy, to say, “we have no use of your splendid trinkets because we are self-sufficient in all the best goods in the world.”&nbsp;</em></p>
<p><em>DUBNER: So, a lot of Americans, especially the political class, have argued for years that China has advanced in large part by essentially stealing I.P., intellectual property, from the U.S. and others, and that they don’t innovate. My sense is that that may have been true 10 or 20 years ago, but very much no longer true. Can you tell me what’s what?&nbsp;</em></p>
<p><em>WANG</em><em>: China has stolen a lot of American I.P., and I think it is not the most relevant comparison for thinking about the U.S.-China competition. My starting point is to think that China is really good at climbing ladders, and the U.S. is really good at laying ladders. So what does that mean? The U.S. invents major industries — I’m thinking about something like solar production. Do you know who invented the first solar cell?&nbsp;</em></p>
<p><em>DUBNER: I guess you’re going to tell me it’s in the U.S.&nbsp;</em></p>
<p><em>WANG</em><em>: It is in New Jersey. <a href="https://www.nytimes.com/1954/04/26/archives/vast-power-of-the-sun-is-tapped-by-battery-using-sand-ingredient.html" target="_blank" rel="noopener">It was Bell Labs of New Jersey that invented the first solar cell in 1954.</a> And the U.S. didn’t really do enough with the solar industry. It was really a big science project for a while. The Germans took a lot of the solar industry from the U.S. and the Chinese have completely taken it away from the Germans. So if you take a look at the solar industry, everything from the polysilicon processing in the upstream end down to the actual production of the solar photovoltaic cells, <a href="https://www.nytimes.com/2024/03/25/business/germany-solar-panels-china-protectionism.html" target="_blank" rel="noopener">that is 90 percent a Chinese product</a>. One of the things that I always like to ask American policymakers is, which has a greater glory: is it to invent a product but not really to own the industry, or is it to actually own this industry? </em></p>
<p><em>DUBNER: The way you’ve been describing this so far, you sound like you subscribe at least somewhat to the zero-sum line of economic thinking, which is a win for China or Germany or the U.S. is inevitably at least a partial loss for the others. Is that the way you think, or not necessarily?&nbsp;</em></p>
<p><em>WANG</em><em>: I would say that there is a little bit more nuance than that, which is that technological advancement is a dynamic process. We can’t expect countries to be amazing at different technologies all out of their own. A lot of advancements in something like engines came out of really good machinery goods that were being produced in Germany, that the British textile industry laid the basis for. Part of the reason that I’ve been concerned about America’s loss of manufacturing prowess is that the U.S. lost a lot of production of televisions to Japan in the 1980s. At the time, policymakers were thinking, Well, is this a problem? Maybe we don’t really care that much about television production. But if you don’t master something like television production, then it becomes quite a lot more difficult to master other aspects of consumer electronics. The first city that really produced iPhones at scale was Shenzhen in southern China, which is right across from Hong Kong. After Shenzhen mastered the iPhone production, <a href="https://www.vox.com/new-money/2016/11/4/13498504/shenzhen-smartphone-innovation-capital" target="_blank" rel="noopener">workers in Shenzhen were pretty quickly able to turn their skills into building other major electronics products</a>.<a href="https://www.nytimes.com/2025/09/08/business/dji-chinese-drones-ban.html" target="_blank" rel="noopener"> It is no accident that Shenzhen also became the center of the worldwide drone industry</a>. The world’s biggest drone maker is D.J.I., it’s centered in Shenzhen, it also makes all sorts of other batteries. Let’s imagine that Apple, working with a contract manufacturer not in southern China, but in, let’s say, the industrial Midwest in the United States, call it Pennsylvania or Michigan or Wisconsin, could it have been possible that drones and batteries and all sorts of other electronics advancements were made in the U.S. Midwest rather than Shenzhen? I think that would have been quite likely.&nbsp;</em></p>
<p><em>DUBNER: What you’re describing now, is this what you write about as “process knowledge”? </em></p>
<p><em>WANG</em><em>: That’s exactly right. </em></p>
<p><em>DUBNER: That was a particularly interesting piece of your argument to me because it is much more subtle than the usual argument we hear about manufacturing jobs being off-shored. You talk about how Chinese workers, especially in technology fields, that they progress through different jobs to become sort of master craftsmen even in an industrial-assembly setting, and that really does seem to differ from the U.S. So how do you see, with the current emphasis from the Biden administration, but especially in Trump 2 administration, the emphasis on reshoring and rebuilding a variety of manufacturing now. How would you see that playing out? Because I would assume that that depth of process knowledge takes considerable time and considerable intention and education and so on. Do you think that’s something that can be captured or recaptured well here?&nbsp;</em></p>
<p><em>WANG</em><em>: I think it’s first really important to understand a little bit of what process knowledge really is. So Stephen, if we’re thinking about what exactly is technology, I would propose that there are three different segments of technology. The first aspect of technology is the hardware, it’s the equipment, it is all these things that we can physically observe and use. If we wanted to use a kitchen analogy, I would say that technology is something like the stove, the pots and the pans that we use to cook with. Second, technology is written instruction. So these are patents, these are blueprints, these are the recipes from which we can actually make something. And the third and I think the most important part is process knowledge, which we can also call tacit knowledge. It’s just the practical experience of doing things. So if we wanted to put someone who has never cooked a day in his life to make something quite simple and we give him the most well-equipped kitchen as well as the most exquisite recipes, are we sure that that person is able to do something as simple as fry an egg? That might be quite risky. That is really the fundamental Chinese advantage in technology. They’ve just been solving seven problems a day before breakfast because they have so many problems to solve. They have all of this experience that accrues, and then people take this process knowledge to invent whole new industries. I think it is really important for the U.S. to engage in some degree of reshoring, and I am critical of both the Biden approach as well as the Trump approach. I think the Biden administration was absolutely right to try to spend a lot more in the United States with big projects like the CHIPS Act as well the Bipartisan Infrastructure Act as well as the Inflation Reduction Act. But the problem with a lot of these programs was that the Biden administration moved really slowly. It was plodding, it was proceduralist, it was lawyerly, and a lot of this money wasn’t even allocated by the time that voters chucked Joe Biden out of the White House and brought back in Donald Trump. Because the Biden administration moved so slowly, President Donald Trump is going to have a lot of opportunities to name these big bridges and roads and highways after himself because the Biden administration was so lawyerly. And even though Donald Trump is not a lawyer by any means, I think he is still a product of the lawyerly society, because lawsuits have been completely central to his business career. He has sued absolutely everyone. He has sued business partners, he has sued political opponents, he has sued his former lawyers as well. And there is, I think, something still very lawyerly about Donald Trump in which he is flinging accusations left and right, he’s trying to intimidate people, trying to establish guilt in the court of public opinion.</em></p>
<p><em>DUBNER: And a mentor of his was Roy Cohn —&nbsp;who, you could argue, essentially invented the modern concept of lawfare.</em></p>
<p><em>WANG</em><em>: Right, right. Yes, exactly, and this sort of bare-knuckled lawfare is completely natural to Donald Trump. I’m also pretty skeptical that reshoring under Donald Trump is going to work very well, in part because Trump is weakening most aspects of American strengths in science and technology. Manufacturing employment has fallen by about 40,000 workers since Liberation Day in April. That’s quite a lot of skill loss as well. I think it is not an intuitive idea that we will become a greater scientific superpower by cutting off funding to our science funding agencies, namely the National Science Foundation as well as the National Institutes of Health. I think it doesn’t quite make sense to attack universities, because the universities have driven a lot of science advancements over the past few decades in the U.S. And finally, it doesn’t make sense to deport a lot of workers. To kick them out of the country is not going to rebuild much of the process knowledge base and also, to frighten away a lot of higher skilled researchers through intimidation at the border or anything else.</em></p>
<p><em>DUBNER: A lot of the Chinese expats I know — who are plainly a different group than those living there —&nbsp;they talk about China almost as a prison to be escaped. And I feel it’s unfair for someone like me to interpret that as the main mode of the way to think about China, for sure. But, you know, I think about the artist Ai Weiwei, I think he now lives in Portugal — he was actually imprisoned in China. So that’s obviously a heightened example. But I’m curious to know how Chinese expats of your generation think about the motherland, and I’m also just curious to how patriotic the median Chinese of that generation is.</em></p>
<p><em>WANG</em><em>: Among a lot of expats, there’s still a sense of considerable pride in China, even though there has been a lot of prison-like aspects of China as well. There is a very broad sense that China has been able to achieve something amazing among developing countries. <a href="https://www.cornellpress.cornell.edu/book/9781501764561/how-china-escaped-the-poverty-trap/" target="_blank" rel="noopener">This degree of economic growth has not yet been matched by India and Brazil and Indonesia</a>. China has been a much more decisive grower of its economy than these other countries. That in itself aspires quite a lot of pride. There is a sense of skepticism of a lot of the democratic impulses of the West. One sees a lot of the disorderliness in the streets of New York. One sees disorderliness on January 6th in 2021. There are a lot of people who do genuinely feel that China doesn’t have these sort of issues. There are also a lot of Chinese who lived in, let’s say, New York or California, who lived through life in the U.S., and have decided that it’s a much easier life to live in Shanghai. Let’s say you have a degree in the U.S. from a good school. You may well be able to earn roughly the same salary in China as you would in the U.S., but you can save a lot of money, you have a lot more convenience, the subway systems work a lot better, there’s much better public order in the streets. </em></p>
<p><em>DUBNER: What kind of person do you think you would be had you been born in China when you were, but of parents who decided not to immigrate and were 33 years old now —&nbsp;what would Dan Wang be doing in China now?</em></p>
<p><em>WANG</em><em>: I would certainly not be writing this book. Because part of the joy of having studied philosophy and then dropped out to go work in Silicon Valley and did everything that I did —&nbsp;and I await your excellent label about what exactly it is that I do — I certainly wouldn’t have been able to pursue the sort of intellectual projects that really drive me right now. I may well have ended up working in let’s say a state-owned enterprise, being bored most of the time, probably not working very hard and not earning quite a lot of money as well. I may be working for a tech company, where the default is for people to work 9-9-6, which means 9 a.m. to 9 p.m., 6 days a week. And that would be probably a little bit more interesting but also much more stressful as well.</em></p>
<p><em>DUBNER: Toward the end of the book, you reflect on your parents’ decision to immigrate long ago, when you were seven years old — first to Canada and then the U.S. — and you kind of ask whether it was worth it. I gather your mother and father may have different feelings from each other, but how do they feel about that decision? And I’m also curious whether you know how they actually feel, or if that’s a guarded conversation?</em></p>
<p><em>WANG</em><em>: I am thankful that my parents are relatively unguarded with me. We have always had very open communication. Right now they are very content, and I think content is the right word, with their suburban lifestyle that I find a little bit dreary, but they feel is quite good. Because when they compare themselves with their peers in China, with some of their college classmates who are some of their best friends, they’ve seen that a lot of these college classmates have much, much more money than they do. But it came at these pretty considerable costs, and pretty high levels of stress, because in China, you never really know when the government might take away your company or might smash your entire industry, which is something that has happened to quite a lot of folks in business in China because they crossed some sort of political line and then they saw that their industry no longer really exists. So though my parents’ lives in suburban Philadelphia are a little bit too quiet, quiet is something that has worked very well for them.</em></p>
<p><em>DUBNER: Do you have children?</em></p>
<p><em>WANG</em><em>: No, not yet.</em></p>
<p><em>DUBNER: If you have children, where do you think you would most like to live with them, and why?</em></p>
<p><em>WANG</em><em>: That’s a superb question. It is also something that we think quite a lot about. We just spent the last two months in Europe. We’d been thinking about whether Europe is quite the place that makes sense. For the most part, we decided it’s not. I think that there still are so many strange, stagnant issues in Europe.&nbsp;</em></p>
<p><em>DUBNER: The “mausoleum economy,” you call it.</em></p>
<p><em>WANG</em><em>: The mausoleum economy. Thank you for picking that up. That was, um — I’m still quite proud of that phrase.</em></p>
<p><em>DUBNER: It’s a great phrase. I read that sentence over and over and over again. And I suspect it’s deeply true although I’d never thought of it that way. This is you describing the dynamism of both the U.S. and China, and then you write “Europeans have a sense of optimism only about the past. Stuck in their mausoleum economy because they are too sniffy to embrace American or Chinese practices.” So, again, that resonates with me, and I’m pretty sure many people will also agree. But can you give me the best evidence that that is indeed true?</em></p>
<p><em>WANG</em><em>: I think there is something extremely dynamic about both the United States as well as China. And I set out in the opening stages of my book to say that no two peoples are more alike than Americans and Chinese. There is quite a big difference between Americans and Chinese, and let’s say Europeans and Japanese. In Europe and Japan, there is something very perfectionist, something very cozy about these places. And these places are, let’s say, much more beautiful than a lot of the hustle and bustle of the United States. But for the most part, I remain convinced — more than ever, after having spent a lick of time in the mausoleum economy — that it is still China and the U.S. that are going to be driving the future. Because either the government can’t stop it, because the societies are so dynamic, and in some cases, the government is producing it. I feel really, you know — I’m not sure if “optimistic” is quite the right word. But I believe that the U.S. can still change for the better, and I see this especially in matters of economics. </em></p></blockquote>
<p>It is of course impossible to predict the future. But if you look at the recent past, I’d say that the central framework of Dan Wang’s argument —&nbsp;a nation of engineers versus a nature of lawyers — holds up pretty well, and it explains a lot. I’d also argue that in the U.S., there is a fair amount of backlash against the lawyerly approach. I think the anti-lawyerly backlash also helps explain why President Trump is so popular in some quarters. Even though Trump plays the legal game very well, as Dan Wang pointed out in our conversation —&nbsp;including lawfare when it suits him —&nbsp;Trump often seems to say exactly what he is thinking, and do exactly what he wants, both of which are the opposite of lawyerly behavior. Anyway, this conversation with Dan Wang gave me a lot to think about, and I hope you feel the same way.</p>
<blockquote><p><em>DUBNER: It was so much fun to talk to you, Dan. And I did think of what to call you, if you want to know.&nbsp;</em></p>
<p><em>WANG</em><em>: Oh, yes, please. I’m dying to know, yes.&nbsp;</em></p>
<p><em>DUBNER: I think you’re a Chi-losopher.&nbsp;</em></p>
<p><em>WANG</em><em>: A Chi-losopher. What does that mean?&nbsp;</em></p>
<p><em>DUBNER: A philosopher whose understanding of China is deep in many dimensions.&nbsp;</em></p>
<p><em>WANG</em><em>: Thank you very much. That is very kind.&nbsp;</em></p>
<p><em>DUBNER: I’m not saying you have to use it.</em></p>
<p><em>WANG</em><em>: I’ll toy with it.&nbsp;</em></p>
<p><em>DUBNER: It’s your portmanteau to adjust.&nbsp;</em></p>
<p><em>WANG</em><em>: Very good.&nbsp;</em></p></blockquote>
<p>My thanks to Dan Wang for today’s conversation; again, his book is called <em>Breakneck. </em>Let us know what you thought of this conversation. Our email is radio@freakonomics.com. Until then, take care of yourself — and, if you can, someone else too.</p>
<p>&nbsp;*&nbsp; &nbsp; &nbsp; *&nbsp; &nbsp; &nbsp; *</p>
<p><em>Freakonomics Radio </em>is produced by Stitcher and Renbud Radio. This episode was produced by Zack Lapinski, and edited by Ellen Frankman. It was mixed by Jasmin Klinger. The Freakonomics Radio Network staff includes Alina Kulman, Augusta Chapman, Dalvin Aboagye, Eleanor Osborne, Elsa Hernandez, Gabriel Roth, Greg Rippin, Jeremy Johnston, Morgan Levey, Sarah Lilley, and Theo Jacobs. Our theme song is “Mr. Fortune,” by the Hitchhikers; and our composer is Luis Guerra.</p>

					</div>
					<span id="transcript_button" onclick="wkd_expand_transcript(this)">Read full Transcript</span>
					
				</section>
				
								<section>
					<h2>Sources</h2>
					<ul>
<li><strong><a href="https://danwang.co/about/" target="_blank" rel="noopener">Dan Wang</a>, <span>research fellow at the Hoover Institution at Stanford University</span></strong>, author of&nbsp;<em>Breakneck: China’s Quest to Engineer the Future.</em></li>
</ul>
				</section>
				
								<section>
					<h2>Resources</h2>
					<ul>
<li><em><a href="https://amzn.to/4mtxGTX" target="_blank" rel="noopener">Breakneck: China’s Quest to Engineer the Future</a>,&nbsp;</em>by Dan Wang (2025).</li>
<li><em><a href="https://amzn.to/4nHlobM" target="_blank" rel="noopener">The Anaconda in the Chandelier: Writings on China</a>,&nbsp;</em>by Perry Link (2025).</li>
<li>“<a href="https://www.newyorker.com/magazine/2025/07/21/is-the-us-ready-for-the-next-war" target="_blank" rel="noopener">Is the U.S. Ready for the Next War?</a>” by Dexter Filkins <em>(The New Yorker,</em> 2025).</li>
<li>“<a href="https://www.vox.com/new-money/2016/11/4/13498504/shenzhen-smartphone-innovation-capital" target="_blank" rel="noopener">How smartphones made Shenzhen China’s innovation capital</a>,” by Dan Wang (2016).</li>
<li><em><a href="https://www.cornellpress.cornell.edu/book/9781501764561/how-china-escaped-the-poverty-trap/" target="_blank" rel="noopener">How China Escaped the Poverty Trap</a>,&nbsp;</em>by Yuen Yuen Ang (2016).</li>
<li><em><a href="https://yalebooks.yale.edu/book/9780300169171/the-art-of-not-being-governed/" target="_blank" rel="noopener">The Art of Not Being Governed</a>,&nbsp;</em>by Jame Scott (2009).</li>
</ul>
				</section>
				
								
				
								<div>
					<h2>Episode Video</h2>
					<p>
						<iframe width="560" height="315" src="https://www.youtube.com/embed/CJZp41mJuCQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
					</p>
				</div>
				
			</article>

			

		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[UK Petition: Do not introduce Digital ID cards (156 pts)]]></title>
            <link>https://petition.parliament.uk/petitions/730194</link>
            <guid>45406442</guid>
            <pubDate>Sun, 28 Sep 2025 18:01:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://petition.parliament.uk/petitions/730194">https://petition.parliament.uk/petitions/730194</a>, See on <a href="https://news.ycombinator.com/item?id=45406442">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">
      
      

  



<p>We demand that the UK Government immediately commits to not introducing a digital ID cards. There are reports that this is being looked at.</p>
  <details>
    <summary><span>More details</span></summary>
    <div><p>We think this would be a step towards mass surveillance and digital control, and that no one should be forced to register with a state-controlled ID system. We oppose the creation of any national ID system. 
</p><p> 
ID cards were scrapped in 2010, in our view for good reason.</p></div>
  </details>

  <a href="https://petition.parliament.uk/petitions/730194/signatures/new">Sign this petition</a>



<div>
    <section id="debate-threshold" aria-labelledby="debate-threshold-heading">
      <h2 id="debate-threshold-heading">Parliament will consider this for a debate</h2>
      <p>Parliament considers all petitions that get more than 100,000 signatures for a debate</p>
      <p>Waiting for 6 days for a debate date</p>
</section>

    <section id="response-threshold" aria-labelledby="response-threshold-heading">
      <h2 id="response-threshold-heading">Government will respond</h2>
      <p>Government responds to all petitions that get more than 10,000&nbsp;signatures</p>
      <p>Waiting for 25 days for a government response</p>

</section>

</div>


<h2>Share this petition</h2>






    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bayesian Data Analysis, Third edition [pdf] (158 pts)]]></title>
            <link>https://sites.stat.columbia.edu/gelman/book/BDA3.pdf</link>
            <guid>45406109</guid>
            <pubDate>Sun, 28 Sep 2025 17:23:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sites.stat.columbia.edu/gelman/book/BDA3.pdf">https://sites.stat.columbia.edu/gelman/book/BDA3.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=45406109">Hacker News</a></p>
Couldn't get https://sites.stat.columbia.edu/gelman/book/BDA3.pdf: Error: unable to verify the first certificate]]></description>
        </item>
        <item>
            <title><![CDATA[The Weird Concept of Branchless Programming (101 pts)]]></title>
            <link>https://sanixdk.xyz/blogs/the-weird-concept-of-branchless-programming</link>
            <guid>45405750</guid>
            <pubDate>Sun, 28 Sep 2025 16:40:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sanixdk.xyz/blogs/the-weird-concept-of-branchless-programming">https://sanixdk.xyz/blogs/the-weird-concept-of-branchless-programming</a>, See on <a href="https://news.ycombinator.com/item?id=45405750">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <br>
<center>
<p><a href="https://sanixdk.xyz/"><code>home</code></a>  <a href="https://sanixdk.xyz/blogs/"><code>blogs</code></a> <!-- lazy guy, will code this later, • [`projects`](/projects/) --> <a href="https://sanixdk.xyz/about"><code>about</code></a></p></center>
<hr><p><img src="https://cdn.jsdelivr.net/gh/sanix-darker/sanixdk.xyz@master/content/assets/the-weird-concept-of-branchless-programming/head.png"></p><p><code>2025-07-08 01:37</code> • 19+ min read • #c #branchless</p><hr><h2>DISCLAIMERS</h2><ul><li>If you came for readable code, sorry, branchless programming is basically code golf with caffeine.</li><li>Code examples are going to be ran in C code.</li><li>Drastic measures (e.g. <code>-O3 -ffast-math -march=native -fomit-this-entire-function</code>) were taken.</li></ul><h2>0×00 FUNKY INTRODUCTION</h2><p>Modern CPUs are predictive creatures. They guess what you're about to do, like a nosy algorithm trying to sell you sneakers after you Googled "foot pain." Branch predictors make CPUs fast by speculating on branches... until they guess wrong and everything grinds to a halt for 15,20 cycles.</p><p>Branchless programming is how we get around this: we rewrite our code to <strong>not branch at all</strong>. Instead of jumping to conclusions, we manipulate bits like 1980s assembly gremlins.</p><h3>WHAT IS A BRANCH</h3><p>What is a branch first of all?In a program, you may observe parts like this:</p><pre><code>if (condition), then
    ...
elif (condition), then
    ...
else
    ...
fi
</code></pre><p>This block of instructions is a collection of three branches. Each <code>if</code>, <code>elif</code>, and <code>else</code> represents a possible execution path the CPU can take depending on the evaluation of the conditions. At runtime, only one of these paths is taken, and the others are skipped. This choice ,  this deviation in the control flow ,  is what we call a branch.</p><p>In terms of machine code, a branch is often implemented as a jump (<code>jmp</code>, <code>je</code>, <code>jne</code>, etc.). These are instructions that tell the CPU: “if this condition holds, skip to label X; otherwise, keep going.” That jump disrupts the nice linear stream of instruction execution, forcing the CPU to guess where you’re going next.</p><p>Here’s a simple ASCII representation of how this decision tree looks:</p><pre><code>          [Condition A]
              |
        +-----+------+
       Yes          No
       |             |
[Block A]     [Condition B]
                  |
            +-----+------+
           Yes          No
           |             |
      [Block B]      [Block C]
</code></pre><p>From a CPU perspective, each conditional check and potential jump is a “fork in the road.” If your code has a predictable pattern (e.g., always taking the same branch), the CPU can guess well and maintain performance. But if it's unpredictable, say, random data or user input, then the CPU may guess wrong, flush its pipeline, and pay a heavy penalty.</p><p>This is why branches can be so dangerous in tight loops or performance-critical code: even one mispredicted branch can cost dozens of cycles, ruining your cache-fueled dreams.</p><h3>WHY IS BRANCHLESS PROGRAMMING IMPORTANT?</h3><p>Branches, when predictable, are cheap. But when unpredictable, they're evil. Imagine a tight loop that checks a condition based on data from user input, or real-world sensors, or shuffled arrays. The branch predictor stumbles, and every misstep means flushing the pipeline ,  a costly affair on modern superscalar out-of-order CPUs.</p><p>Branchless code avoids that entirely. By rewriting conditional logic into arithmetic and bit operations, or using CPU instructions like <code>cmov</code>, we let the CPU chew through code without pausing to guess. It’s smoother, faster, and often <em>more deterministic</em>, which is crucial in performance-critical or side-channel-resistant scenarios (looking at you, cryptography).</p><p>We're going to take you on a wild ride through three increasingly complex examples:</p><ol><li><code>abs(x)</code> ,  a gentle warm-up with unary fun</li><li><code>clamp(x, min, max)</code> ,  a common pattern with two conditions</li><li><code>partition()</code> ,  a full algorithm with data-dependent control flow</li></ol><p>We'll compare these in <strong>C</strong> (our performance-hungry workhorse), we'll show you how these concepts look in both worlds, how they perform.</p><h2>0×01 ABS: THE LOW-HANGING BRANCH</h2><p>Absolute value is your first ticket to understanding how to cut down branches without cutting performance.</p><p>We want to calculate the absolute value of a signed integer without using a conditional branch. This is foundational — a single-bit operation can turn a branch into math.</p><pre><code>int abs_branch(int x) {
    return x &lt; 0 ? -x : x;
}

// Compiles to a `cmp` and a `jge` or `jl`, depending on compiler and optimization level.

int abs_branchless(int x) {
    int mask = x &gt;&gt; 31;
    return (x + mask) ^ mask;
}
</code></pre><h3>BRANCHLESS EXPLANATION</h3><ul><li>Arithmetic right-shift of a signed 32-bit integer by 31 yields all 0s for non-negatives, all 1s (i.e., -1) for negatives.</li><li>Adding <code>mask</code> to <code>x</code> either increments or doesn't.</li><li>XORing with <code>mask</code> flips bits only if <code>mask</code> is -1.</li></ul><h3>BONUS VARIANT</h3><pre><code>int abs_alt(int x) {
    int mask = x &gt;&gt; 31;
    return (x ^ mask) - mask;
}
</code></pre><p>Produces identical results; different taste of the same bit soup.</p><h3>ASSEMBLY BREAKDOWN</h3><pre><code>mov eax, edi       ; move x into eax
sar eax, 31        ; sign-extend right shift to produce mask
mov ecx, eax       ; duplicate mask
add edi, ecx       ; edi = x + mask
xor eax, edi       ; eax = result = (x + mask) ^ mask
</code></pre><p>Fast. No jumps. Pure ALU (arithmetic logic unit).</p><h2>0×02 CLAMP: SQUASHING RANGES WITHOUT IFS</h2><p>The clamp is more complex. You want to bound a value between a <code>min</code> and <code>max</code>.We want to ensure a value stays within <code>[min, max]</code> without branches. This is key in physics simulations, rendering, and safety constraints.</p><pre><code>int clamp(int x, int min, int max) {
    if (x &lt; min) return min;
    if (x &gt; max) return max;
    return x;
}

int clamp_branchless(int x, int min, int max) {
    int r1 = x - ((x - min) &amp; ((x - min) &gt;&gt; 31));
    return r1 - ((r1 - max) &amp; ((r1 - max) &gt;&gt; 31));
}
</code></pre><h3>BRANCHLESS EXPLANATION</h3><ul><li><code>(x - min) &gt;&gt; 31</code> creates a mask that's all 1s if <code>x &lt; min</code>.</li><li>Mask is used to select <code>min</code> when necessary.</li><li>Second line applies the same trick to limit the upper bound.</li></ul><h3>DISASSEMBLED STRATEGY</h3><pre><code>sub eax, min
sar eax, 31       ; create mask_low
and eax, (x - min)
sub x, eax        ; x = max(x, min)

sub x, max
sar ..., 31       ; create mask_high
and ..., (x - max)
sub x, ...        ; x = min(x, max)
</code></pre><p>Every operation is ALU-based. No branching, just pure logic.This removes branches by computing masks and blending values accordingly. Elegant? No. Effective? Absolutely.</p><h2>0×03 PARTITION: QUICKLY AND DIRTY</h2><p>This is where branchless logic makes the biggest splash, in algorithms that iterate over data and make conditional swaps.Partition an array around a pivot such that all elements &lt; pivot come before elements &gt;= pivot, without any conditional branching in the inner loop.</p><pre><code>void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low;
    for (int j = low; j &lt; high; j++) {
        if (arr[j] &lt; pivot) {
            swap(&amp;arr[i], &amp;arr[j]);
            i++;
        }
    }
    swap(&amp;arr[i], &amp;arr[high]);
    return i;
}

int partition_branchless(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low;
    for (int j = low; j &lt; high; j++) {
        swap(&amp;arr[i], &amp;arr[j]);
        i += arr[i] &lt; pivot;
    }
    swap(&amp;arr[i], &amp;arr[high]);
    return i;
}
</code></pre><h3>OPTIONAL BITMASK VARIANT</h3><pre><code>i += ((arr[i] - pivot) &gt;&gt; 31) &amp; 1;
</code></pre><p>Relies on arithmetic right shift and masking to conditionally increment.</p><h3>ASSEMBLY-LEVEL INSIGHT</h3><pre><code>mov eax, [arr+i*4]
cmp eax, pivot
setl bl
add i, ebx
</code></pre><p>Or:</p><pre><code>cmp eax, pivot
adc i, 0
</code></pre><p>Clever use of <code>adc</code> (add with carry) after compare to branchlessly increment.</p><h2>BENCHMARKS BABY</h2><pre><code>| Operation      | Branchy | Branchless | Speedup |
| -------------- | ------- | ---------- | ------- |
| `abs(x)`       | \~5ms   | \~5ms      | 1.00x   |
| `clamp(x,m,M)` | \~6ms   | \~6ms      | 1.00x   |
| `partition()`  | \~6ms   | \~5ms      | 1.20x   |
</code></pre><h3>SUMMARY</h3><ul><li><code>abs()</code> and <code>clamp()</code> show negligible gains; branch prediction handles them well.</li><li><code>partition()</code> shows improvement due to high branch unpredictability.</li></ul><h2>APPENDIX: FULL SOURCE CODE FOR C BENCHMARKS</h2><p>See appendix below for full C benchmark code, compilation flags, and timing logic.</p><details><summary>Click to expand the whole weird C code.</summary>
<blockquote><p>Warning: long code ahead. Skip if you value your retina and you have a life.</p></blockquote><pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;

// ABS branchy and branchless
int abs_branch(int x) {
    return x &lt; 0 ? -x : x;
}

int abs_branchless(int x) {
    int mask = x &gt;&gt; 31;
    return (x + mask) ^ mask;
}

// CLAMP branchy and branchless
int clamp(int x, int min, int max) {
    if (x &lt; min) return min;
    if (x &gt; max) return max;
    return x;
}

int clamp_branchless(int x, int min, int max) {
    int r1 = x - ((x - min) &amp; ((x - min) &gt;&gt; 31));
    return r1 - ((r1 - max) &amp; ((r1 - max) &gt;&gt; 31));
}

// PARTITION branchy and branchless
void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low;
    for (int j = low; j &lt; high; j++) {
        if (arr[j] &lt; pivot) {
            swap(&amp;arr[i], &amp;arr[j]);
            i++;
        }
    }
    swap(&amp;arr[i], &amp;arr[high]);
    return i;
}

int partition_branchless(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low;
    for (int j = low; j &lt; high; j++) {
        swap(&amp;arr[i], &amp;arr[j]);
        i += arr[i] &lt; pivot;
    }
    swap(&amp;arr[i], &amp;arr[high]);
    return i;
}

// Benchmarking helpers
void benchmark_abs(int* data, int count) {
    clock_t start = clock();
    volatile long long sum = 0;
    for (int i = 0; i &lt; count; ++i) sum += abs_branch(data[i]);
    printf("ABS (branch):     %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);

    start = clock(); sum = 0;
    for (int i = 0; i &lt; count; ++i) sum += abs_branchless(data[i]);
    printf("ABS (branchless): %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);
}

void benchmark_clamp(int* data, int count) {
    clock_t start = clock();
    volatile long long sum = 0;
    for (int i = 0; i &lt; count; ++i) sum += clamp(data[i], -50, 50);
    printf("CLAMP (branch):     %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);

    start = clock(); sum = 0;
    for (int i = 0; i &lt; count; ++i) sum += clamp_branchless(data[i], -50, 50);
    printf("CLAMP (branchless): %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);
}

void benchmark_partition(int* data, int count) {
    int* copy = malloc(sizeof(int) * count);
    memcpy(copy, data, sizeof(int) * count);

    clock_t start = clock();
    partition(data, 0, count - 1);
    printf("PARTITION (branch):     %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);

    memcpy(data, copy, sizeof(int) * count);
    start = clock();
    partition_branchless(data, 0, count - 1);
    printf("PARTITION (branchless): %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);

    free(copy);
}

int main() {
    const int N = 10000000;
    int* data = malloc(sizeof(int) * N);

    // Populate with mixed signed integers
    for (int i = 0; i &lt; N; ++i)
        data[i] = rand() - (RAND_MAX / 2);

    puts("== Benchmarking ABS ==");
    benchmark_abs(data, N);

    puts("\n== Benchmarking CLAMP ==");
    benchmark_clamp(data, N);

    puts("\n== Benchmarking PARTITION ==");
    benchmark_partition(data, 1000000); // smaller size due to O(n log n) behavior

    free(data);
    return 0;
}
</code></pre><p>(If the scroll wheel starts smoking, you’ve found the end.)</p></details>
<h2>FINAL THOUGHTS: SHOULD YOU BRANCHLESS?</h2><h3>WHEN YOU SHOULD</h3><ul><li>Hot loops with unpredictable conditions</li><li>Cryptographic or timing-sensitive code</li><li>SIMD/vectorization where branching kills performance</li></ul><h3>WHEN YOU SHOULDN’T</h3><ul><li>Code clarity matters more than nanoseconds</li><li>Predictable branches dominate (e.g., error handling)</li></ul><p>Branchless programming is a scalpel, not a sledgehammer. Used wisely, it can make your code faster, safer, and cooler. Misused, it turns your logic into incomprehensible bit spaghetti.</p><blockquote><p><em>"Premature optimization is the root of all evil — except when it's branchless, then it's performance art."</em></p></blockquote><hr><p><a href="https://sanixdk.xyz/blogs/">&lt;&lt; blogs</a></p>


<hr>
<center>
<p><a href="https://github.com/sanix-darker" title="Where i sleep in term of projects."><code>github</code></a>  <a href="https://t.me/sanixdarker" title="You can Conctact me here anytime."><code>telegram</code></a>  <a href="mailto:s4nixdk@gmail.com?subject=Hello%20there" title="You can email me anytime."><code>email</code></a></p></center>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why I'm not rushing to take sides in the RubyGems fiasco (140 pts)]]></title>
            <link>https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/</link>
            <guid>45405221</guid>
            <pubDate>Sun, 28 Sep 2025 15:48:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/">https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/</a>, See on <a href="https://news.ycombinator.com/item?id=45405221">Hacker News</a></p>
<div id="readability-page-1" class="page"><article data-pagefind-body="">
    <time pubdate="" datetime="2025-09-28" data-pagefind-meta="date:2025-09-28" data-pagefind-sort="date:2025-09-28">
      Sunday, Sep 28, 2025
    </time>
    <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/">
      
    </a>

    <p>We are in the midst of a <a href="https://www.theregister.com/2025/09/25/open_source_to_closed_doors/">Ruby drama for the ages</a>. I'm sure a bunch of people figured we were all too old for this shit, but apparently we are not.</p>
<p>This debate has been eating at me ever since the news first broke, but I've tried to keep the peace by staying out of it. Unlike most discourse about what's going on, my discomfort stems less from the issue at hand—what Ruby Central did, how they did it, and how <a href="https://rubycentral.org/news/strengthening-the-stewardship-of-rubygems-and-bundler/">poorly it was communicated</a>—and more to do with how one-sided the public discussion has been. Beneath the surface of this story are the consequences of a decade-old conflict that was never fully resolved. Then and now, one side—<a href="https://arko.net/">Andre Arko</a> and many people associated with him—has availed itself of public channels to voice their perspective, while the other—which includes a surprisingly wide swath of well-known Ruby and Rails contributors—has chosen to stay silent.</p>
<p>The losers in this dynamic are the vast majority normal everyday Ruby developers, most of whom are operating on very little information and who understandably feel confused and concerned. People whose livelihood depends on the health of the Ruby ecosystem deserve more information than they're getting, especially now that its operational stability has come under threat. The future of that ecosystem is once again uncertain, but—just like last time—the outcome is being shaped by a history that's been kept from the public, widening the rift between its key decision-makers and the communities they serve.</p>
<p>I don't have the answers to what's going on in 2025. A few details have been shared with me—details that would contradict fact-checks and timelines others have pieced together and published—but I can't pretend to have a clear picture of what actually happened, why no one is setting the record straight, or when we'll have clarity on what the future holds. All I can do is offer a little bit of context to explain why I'm dubious of the dominant narrative that has taken shape online. Namely, <strong>I don't believe this is a cut-and-dry case of altruistic open-source maintainers being persecuted by oppressive corporate interests.</strong></p>
<p>After you read this, perhaps your perspective will shift as well.</p>

<h2 id="the-relevant-proper-nouns-to-know">
    <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/#the-relevant-proper-nouns-to-know">The relevant proper nouns to know</a>
</h2>
<p>Before anything else can make sense, it's important to understand how weird the governance of the Ruby ecosystem is. There are three moving parts involved that are ostensibly managed by three different groups, but whose members have such broadly overlapping systems access that it has now led to disputes over who owns what:</p>
<ul>
<li><strong>Ruby itself</strong>, created by Matz and maintained by a large group of (mostly Japanese) committers, who host <a href="https://www.ruby-lang.org/">ruby-lang.org</a>, control the <a href="https://github.com/ruby">@ruby GitHub organization</a>, and are supported by the <a href="https://www.ruby.or.jp/en/">Ruby Association</a></li>
<li><strong>RubyGems</strong>, specifically the <code>gem</code> and <code>bundler</code> CLI tools distributed with the Ruby language, which is hosted <a href="https://github.com/rubygems">under @rubygems on GitHub</a></li>
<li><strong>RubyGems.org</strong>, the <a href="https://rubygems.org/">website, API, and host</a> from which gem dependencies are installed and which has been run by <a href="https://rubycentral.org/">Ruby Central</a> for ages</li>
</ul>
<p>If Ruby were invented today, a single party would probably control all three of these things, but it took nearly fifteen years for today's status quo to take shape. Ruby was invented by someone in Japan in the 1990s. RubyGems was created at <a href="https://www.linuxjournal.com/article/8967">a conference in Texas</a> by a few Americans in the early 2000s. RubyGems.org only became the de facto canonical host for gems <a href="https://web.archive.org/web/20120220191344/http://update.gemcutter.org/2009/10/26/transition.html">six years later</a>. My impression is that at no point was communication and coordination particularly fluent between the various parties.</p>
<p>Adding to this, <a href="https://bundler.io/">Bundler</a>—a meta tool for resolving the correct versions of all of a project's gem dependencies and which quickly became vital to nearly all Ruby application development—was created independently of the above players by Yehuda Katz and Carl Lerche. Andre Arko later became the lead maintainer of Bundler, and in 2015 he founded a 501(c)(6) nonprofit called Ruby Together. In 2019, <a href="https://github.com/rubygems/rubygems/releases/tag/v3.1.0">Bundler was folded into RubyGems</a>. In 2022, <a href="https://rubycentral.org/news/a-new-chapter-for-rubygems-how-ruby-central-is-building-a-sustainable-future/">Ruby Together was absorbed by Ruby Central</a>.</p>
<p>Those last two events—the merging of Bundler and the unwinding of Ruby Together—came about after years of bitter conflict and simmering discord that I hope to shed some light on below. My direct involvement with any of these events was extremely minimal, but I had contemporaneous discussions with dozens of the principals involved. I never donated to Ruby Together and have never materially contributed to Bundler or RubyGems. That said, simply being made aware of several incidents as they were playing out in private was enough to leave behind a scar that has never fully healed. I can only imagine how others are feeling right now. Based on how badly things are playing out this time, it seems they were deeply impacted, too.</p>

<h2 id="the-things-people-told-me">
    <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/#the-things-people-told-me">The things people told me</a>
</h2>
<p>The earliest recollection I have of someone telling me about Andre Arko was in the summer of 2015, after getting dinner with a friend who happened to be a Ruby Together board member. The friend explained that Andre believed programmers working on open source tools deserve to earn an income that's commensurate with what salaried engineers earn at the companies who benefit from those tools. As such, Andre's goal with Ruby Together was characterized as an effort to fund development activities—initially his own, but eventually others—by paying themselves a market hourly rate. I remember being extremely sympathetic to this perspective, having also wasted countless hours of my life maintaining open source for free only for others to benefit from it. I also recall a figure like either $200 or $250 per hour being mentioned as the rate he was effectively paying himself. Whatever the rate actually was, I distinctly remember thinking, "holy shit, that's a lot higher than individual donors would probably assume."</p>
<p>The first time I remember meeting Andre in person was at <a href="https://www.rubyevents.org/events/ruby-on-ales-2016">Ruby on Ales 2016</a>. I remember trying to make a good impression, because growing my network in the community was the primary reason I spoke at conferences. I was presenting with <a href="https://justin.searls.co/posts/the-12-macbook-was-announced-10-years-ago/">my beloved 12-inch MacBook</a>, which meant I was traveling with the first iteration of <a href="https://www.apple.com/shop/product/MW5M3AM/A/usb-c-digital-av-multiport-adapter">this cursed dongle</a>. Andre needed an adapter, so I ran up to lend him mine. As he was giving it back, I recall him making a half-joking, flippant remark about either his dongle or his computer, saying that "Ruby Together will just buy me another one." It really rubbed me the wrong way. Over the years to follow, more than one person told me stories of Andre paying for shared meals on behalf of Ruby Together without an apparent legitimate justification. They told those stories, I assume, because the attitude he exhibited made them uncomfortable. If I had donated money to Ruby Together and heard the same stories, I would have been upset.</p>
<p>For how little has been said about this publicly, a lot of different people told me a lot of concerning stories about Ruby Together over the years, often providing evidence to back it up. I'll do my best to stick to the highlights in this post. Hopefully they will explain why I have not joined the rush to defend the maintainers whose access was recently removed. What Ruby Central did was undoubtedly handled very poorly, but I don't think their bungling of its execution and communication alone is enough to answer the question of what <em>should</em> happen to the future custody and direction of Bundler, RubyGems, and RubyGems.org.</p>

<h3 id="2015">
    <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/#2015">2015</a>
</h3>
<p>When Ruby Together first launched in 2015, the <a href="https://web.archive.org/web/20150425040538/http://RubyTogether.org/">website suggested donations went to pay "our team"</a>, which initially <a href="https://github.com/rubytogether/rubytogether.org/blob/9a03c4c/app/views/home/team.html.erb">linked to a list of the board members</a> without any explanation of how the money was being allocated. This resulted in a nonzero number of donors believing they were funding the work of people like Steve Klabnik, Aaron Patterson, and Sarah Mei, when in fact only Andre was being paid at the time. Shortly after the <a href="https://news.ycombinator.com/item?id=9222549">wording was raised as misleading</a>, the team page <a href="https://github.com/rubytogether/rubytogether.org/blob/0136e9f/app/views/home/team.html.erb">was updated</a> accordingly.</p>
<p>In May of 2015, Andre suggested making support for older versions of Bundler <a href="https://github.com/heroku/heroku-buildpack-ruby/pull/385/commits/6b3f3c71f4a98309e29748132be8e84b41d890de">contingent on Heroku paying Ruby Together</a>, which was interpreted as leveraging his control over Bundler as a pay-to-play scheme. Because <a href="https://www.heroku.com/">Heroku</a> serves other people's Ruby apps—many of which aren't updated for very long stretches—the security of their service depends on clear and predictable support windows for Ruby's core technologies, it seems reasonable they would interpret this sudden revocation of support as a pressure tactic, aimed to solicit corporate sponsorship for Ruby Together. (Years later, Andre <a href="https://github.com/rubygems/rubygems/issues/1811#issuecomment-270788204">responded to a feature request from a Heroku engineer</a>, which was interpreted at the time as indicating the feature would be withheld from Bundler because Heroku had failed to pay Ruby Together.)</p>

<h3 id="2016">
    <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/#2016">2016</a>
</h3>
<p>The minutes of a December 2016 Ruby Together board meeting were leaked. The document acknowledged who was paying for the RubyGems.org service at the time: "Fastly is comping us something like $35k worth of CDN service per month. And that's on top of Ruby Central paying for $5k of servers and Ruby Together paying for about $15k of dev work every month." The use of "us" in that sentence suggests that Ruby Together was responsible for hosting RubyGems.org, which Ruby Central later went on <a href="https://blog.rubygems.org/2017/03/15/rubygems-funding.html">to publicly dispute</a>. Additionally, one presumes the number of hours and rate paid for development work was determined by Ruby Together itself, rather than being a hard operational cost. Later in the document was a discussion of potential strategies to increase revenue after "new memberships [had] flatlined." Several ideas were discussed, culminating in a proposal to rate-limit access to RubyGems.org as the apparent best option:</p>
<blockquote>
<p>Rate limiting RubyGems.org seems like the option that scales most linearly with our costs. Companies that cost us money need to pay more (or stop costing us money), and companies that don't cost us money can continue to have a free ride. To be clear, this would not mean cutting off anyone's access to RubyGems.org. I'm imagining that it would work something like GitHub's model: anonymous access has a low limit, registered accounts have a higher limit, and even higher limits are available at each Ruby Together membership level. There are a lot of implementation details that would need to be worked out, but in general I feel like this is probably the most effective option to make companies feel like they are paying money for something they use and that covers our costs well.</p></blockquote>
<p>The leaked minutes were widely circulated in private at the time, due largely to outrage over the document's presupposition that Ruby Together was paying to host RubyGems.org (citing "our costs" as scaling with usage), as opposed to paying for developer effort (the costs of which do not scale with usage). The leak left myself and others worried that Andre might leverage his systems access to effectively hold the Ruby ecosystem hostage for the financial benefit of Ruby Together and—since it was compensating his own development efforts—Andre himself.</p>

<h3 id="2017">
    <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/#2017">2017</a>
</h3>
<p>In January 2017, Andre <a href="https://github.com/rubygems/bundler/pull/5308/commits/072f9ab80bb1e2d4992962e59b42d479ac37a4c0">added a "post-install message" imploring users to fund Ruby Together</a>, which would be displayed every time anyone installed Bundler. Unlike the aforementioned board meeting, this happened in the open and triggered an immediate backlash before eventually being rolled back. In one comment, Andre defended the action and <a href="https://github.com/rubygems/bundler/issues/5311#issuecomment-271477520">pointed to Shopify's failure to pay Ruby Together</a>, publicly conflating Ruby Together's sponsorship of development effort with "~$40k/mo worth of servers." But, as Ruby Together's own board minutes from the month prior directly stated, money sent to Ruby Together wasn't going to pay server expenses—server costs were covered by <a href="https://www.fastly.com/">Fastly</a> and Ruby Central.</p>
<p>In February 2017, following protracted discussion of the post-install message and the threat of rate-limiting access to gem installs, I agreed to put my name on a letter alongside 18 others (including one of Bundler's creators). The letter requested Ruby Together stop misleading the community in this way. My understanding is that some private one-on-one communication followed, that none of it was particularly productive, and that no formal communication occurred between the two groups afterward.</p>
<p>In March 2017, Ruby Central went on the record, attempting to clear up confusion and reassure users that <a href="https://blog.rubygems.org/2017/03/15/rubygems-funding.html">they alone were in control of RubyGems.org</a>, stating that Ruby Together donations were immaterial to its continued operation:</p>
<blockquote>
<p>Unfortunately, this past year has also given rise to some misunderstandings about this relationship in some quarters: chiefly, that by donating to Ruby Together, companies were paying for the operations of RubyGems. And in turn, that if enough companies didn't donate to Ruby Together, RubyGems would subsequently be in a perilous situation. This isn't so.</p>
<p>No one in the Ruby community should worry about the availability or security of RubyGems being connected in any way to the fundraising of Ruby Together. Funds raised by Ruby Together go primarily towards paying developers to add features and fix bugs. Ruby Central, on the other hand, is wholly responsible for the operations and baseline stability of the system. While these two efforts go hand-in-hand, it's vitally important to understand that they are two different things. Ruby Together's requests for donations do not mean that there is any reason for concern about RubyGems' continued existence or operation.</p></blockquote>
<p>Later, in August 2017, Andre <a href="https://github.com/GoogleCloudPlatform/google-cloud-gemserver/issues/36">accused Google Cloud Platform</a> of wholesale copying <a href="https://github.com/rubygems/gemstash">gemstash</a>'s codebase, going so far as to threaten legal action in his opening message. He juxtaposed the accusation with the complaint that Google had, "repeatedly declined to support Ruby Together." The incident appeared to fit a pattern of behavior to pair high-conflict messaging with an admonition of the target's failure to fund the organization that paid him. Ultimately, Andre's claim turned out to be factually baseless—Google <a href="https://github.com/GoogleCloudPlatform/google-cloud-gemserver/issues/36#issuecomment-324503159">hadn't copied gemstash's code, after all</a>.</p>

<h3 id="20182024">
    <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/#20182024">2018–2024</a>
</h3>
<p>Things quieted down and I didn't hear much about any of this stuff anymore. Eventually, Bundler became part of RubyGems and many folks from Ruby Together migrated to analogous roles at Ruby Central.</p>

<h3 id="2025">
    <a href="https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/#2025">2025</a>
</h3>
<p>In August 2025, and seemingly out of nowhere, someone pointed me to the project <a href="https://github.com/spinel-coop/rv-ruby">spinel-coop/rv-ruby</a>, an apparent fork of <a href="https://github.com/homebrew/homebrew-portable-ruby">homebrew/homebrew-portable-ruby</a>. I say "apparent", because rather than using <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo">GitHub's fork button</a>—which would have maintained clear attribution of who created the upstream project—it looks like it was instead cloned and re-pushed by Andre. Specifically, I was sent <a href="https://github.com/spinel-coop/rv-ruby/commit/2234bdb7db4e41bfe883a01f06d7d0aff3188997">this commit replacing references to Homebrew</a> from late July. As evidence of Homebrew's authorship was being erased and obscured, no additional acknowledgement was added to credit Homebrew for having created and maintained Portable Ruby since 2016.</p>
<p>It immediately reminded me of Andre's <a href="https://github.com/GoogleCloudPlatform/google-cloud-gemserver/issues/36">baseless accusation against Google</a>. "Not only did you not credit the Gemstash project in any way," Andre wrote, "from an ethical standpoint, this is also super gross." His blatant copying of Portable Ruby (a project significant enough that the lead maintainer <a href="https://rubykaigi.org/2019/presentations/MikeMcQuaid.html">gave a talk about how they did it</a>) struck me as brazenly hypocritical, given Andre's previous litigious and mistaken accusation against Google.</p>
<p>In fairness to Andre, the rv-ruby repo continues to retain a <a href="https://github.com/spinel-coop/rv-ruby/blob/main/LICENSE.txt">copy of</a> Homebrew's <a href="https://github.com/homebrew/homebrew-portable-ruby/blob/HEAD/LICENSE.txt">LICENSE.txt</a> which names "Homebrew contributors" as the copyright holder. Andre also later <a href="https://github.com/spinel-coop/rv-ruby/commit/76e96c9d9f74ea89eed9d34ff11491bb6c365d54">added an explicit acknowledgement to the README</a>, but that attribution came more than a month later, and (I'm told) only after he was directly asked to credit the original project.</p>
<p><a href="https://andre.arko.net/2025/09/25/bundler-belongs-to-the-ruby-community/">Andre wrote this week</a> that, "Ruby Together did not ever, at any point, demand any form of governance or control over the existing open source projects. Maintainers did their thing in the RubyGems and Bundler GitHub orgs, while Ruby Together staff and board members did their thing in the rubytogether GitHub org." However, while he was leading Ruby Together, he moved to <a href="https://github.com/rubygems/rubygems/pull/1518">restrict committer access to RubyGems in rubygems/rubygems</a>, unilaterally <a href="https://github.com/bundler/bundler/commit/524add155d6b90c679db21b03f0bd9f877f21ab0">erased the original authorship from Bundler's gemspec in bundler/bundler</a>, and oversaw a number of <a href="https://github.com/bundler/bundler-site/commit/03d331ac8a0a05a5b4225319fb3783a8d1eb1c9b#diff-efb5113d13615a3e1c5706cd6f316ee73f5db628f8c5c06b450a51e537cf9ec6">contributors being removed from bundler/bundler-site</a> in a redesign of Bundler's website.</p>
<p>As a result of this broader historical context and in spite of the serious claims and grave implications being thrown around this month, I'm trying my best <strong>not to rush to judgment about who's at fault in the current conflict and would urge others to do the same</strong>. The future of the Ruby ecosystem may depend on it.</p>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The AI coding trap (386 pts)]]></title>
            <link>https://chrisloy.dev/post/2025/09/28/the-ai-coding-trap</link>
            <guid>45405177</guid>
            <pubDate>Sun, 28 Sep 2025 15:43:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chrisloy.dev/post/2025/09/28/the-ai-coding-trap">https://chrisloy.dev/post/2025/09/28/the-ai-coding-trap</a>, See on <a href="https://news.ycombinator.com/item?id=45405177">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><p>If you ever watch someone “coding”, you might see them spending far more time staring
into space than typing on their keyboard. No, they (probably) aren’t slacking off.
Software development is fundamentally a practice of problem-solving, and so, as with
solving a tricky crossword, most of the work is done in your head.</p>
<p>In the software development lifecycle, coding is the letters filled into the crossword,
only a small amount of effort compared to all the head scratching and scribbled notes.
The real work
usually happens alongside coding, as the developer learns the domain, narrows down
requirements, maps out relevant abstractions, considers side effects, tests features
incrementally, and finally squashes bugs that survived this rigorous process. It looks
something like this:</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-1.svg" alt="Thinking, then coding." title="Thinking, then coding."></p>
<p>But with AI-driven coding, things play out very differently.</p>
<h2>“Code first, ask questions later”</h2>
<p>AI coding agents such as <a href="https://claude.com/product/claude-code">Claude Code</a> are
making it astonishingly fast to write code in isolation. But most software lives within
complex systems, and since LLMs can't yet hold the full context
of an application in memory at once, human review, testing, and integration needs will
remain. And that is a lot harder when the code has been written without the human thinking
about it. As a result, for complex software, much of the time will be spent on post hoc
understanding of what code the AI has written.</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-2.svg" alt="Coding, then trying to understand." title="Coding, then trying to understand."></p>
<p>This is the root of the difference between marketing copy that boasts of the paradigm
shifting speed of <strong>writing code</strong> with AI (often framed as
“<a href="https://docs.coderabbit.ai/overview/introduction">10X</a>
<a href="https://zencoder.ai/product/coding-agent">faster</a>”), and the marginal productivity gains
in <strong>delivering working software</strong> seen in the wild (usually
<a href="https://www.microsoft.com/en/customers/story/22158-allpay-github-copilot">closer to 10%</a>).</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-3.svg" alt="alt_text" title="image_tooltip"></p>
<p>An even more dispiriting upshot of this is that, as developers, we spend an ever greater
proportion of our time merely fixing up the output of these wondrous
<a href="https://chrisloy.dev/post/2024/12/24/llms-are-scrappy-innovators">babbling machines</a>. While the LLMs get to
blast through all the fun, easy work at lightning speed, we are then left with all the
thankless tasks: testing to ensure existing functionality isn’t broken, clearing out
duplicated code, writing documentation, handling deployment and infrastructure, etc.
Very little time is actually dedicated to the thing that developers actually love doing: coding.</p>
<p>Fortunately, help is at hand. While LLMs are shaking up how software development is
performed, this issue in itself is not actually new. In fact, it is merely a stark example
of an age-old problem, which I call:</p>
<h2>The tech lead’s dilemma</h2>
<p>As engineers progress in their careers, they will eventually
step into the role of <strong>tech lead</strong>. They might be <strong>managing</strong> a team,
or they could be a <strong>principal engineer</strong>, driving technical delivery without the
people management. In either case, they are responsible for the team’s technical
delivery. They are also usually the most experienced developer in the team: either in their career,
in the specialised domain of the team, or in both.</p>
<p>Software delivery is a team effort, but one in which experience can have a highly imbalancing
effect on individual contribution
<a href="https://chrisloy.dev/post/2023/11/10/software-engineering-mechanics">velocity</a>. As such, when the tech lead’s
primary job is to maximise delivery, they will often face an internal conflict between two
ways to deliver software:</p>
<ul>
<li><strong>Fair delegation</strong> across the team, maximising learning and ownership opportunities for
junior team members, but allowing delivery to be bottlenecked by the speed of the least productive
team members.</li>
<li><strong>Mollycoddling</strong> the team, by delegating only the easy or non-critical work to juniors,
and keeping the hardest work for themselves, as the person on the team most capable of
delivering at speed.</li>
</ul>
<p>Unfortunately, while we shall see that mollycoddling is extremely harmful to long-term team
health, it is also often a very effective way to accelerate delivery. The higher bandwidth of
the tech lead is often most efficiently deployed by eating up all the hardest work:</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-4.svg" alt="Senior engineers have higher bandwidth." title="Senior engineers have higher bandwidth."></p>
<p>As such, I have seen this pattern repeated time and again over the course of my career. And,
of course, it comes at a cost. Siloing of experience in the tech lead makes the team brittle,
it makes support harder, and it places ever greater pressure on the tech lead as a single point
of failure. What follows next is predictable: burnout, departure, and ensuing crisis as the
team struggles to survive without the one person who really knows how everything works.</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-5.svg" alt="Mollycoddling leads to short term gains but eventual failure." title="Mollycoddling leads to short term gains but eventual failure."></p>
<p>As is usually the case, the solution lies in a third way that avoids these two extremes
and balances delivery with team growth. We might frame it as something like:</p>
<blockquote>
<p><em>Implement team practices that allow engineers to deliver working code within a framework
that minimises rework, maximises effective collaboration, and promotes personal growth and
learning.</em></p>
</blockquote>
<p>When I was CTO of Datasine, we enshrined this attitude in a simple tech team motto:</p>
<blockquote>
<p><em><strong>Learn. Deliver. Have fun.</strong></em></p>
</blockquote>
<p>Good tech leads expose their engineers to work at the limit of their capabilities,
using processes and practices that minimise delivery risk while also enabling each team
member to grow their skills, knowledge, and domain expertise. This is, in fact, the essence
of good technical leadership.</p>
<p>There are many ways to accomplish it, from strict codified frameworks such as the
<a href="http://www.extremeprogramming.org/rules.html">Extreme Programming rules</a>, through
to looser sets of principles which we might broadly refer to as “best practices”:</p>
<ul>
<li>Code reviews</li>
<li>Incremental delivery</li>
<li><a href="https://chrisloy.dev/post/2025/01/24/modular-software-design">Modular design</a></li>
<li>Test-driven development</li>
<li>Pair programming</li>
<li>Quality documentation</li>
<li>Continuous integration</li>
</ul>
<p>So, for experienced engineers today, an urgent question is: how can we translate these practices
into a world of AI-driven coding?</p>
<h2>LLMs are lightning fast junior engineers</h2>
<p>In 2025, many engineers are finding themselves for the first time in a position familiar
to every tech lead: overseeing a brilliant but unpredictable junior engineer. Harnessing
and controlling such talent, in a way that benefits effective team collaboration, is one
of the primary challenges of engineering leadership. But AI coding agents need different
management to junior engineers, because the nature of their productivity and growth is
fundamentally different.</p>
<p>As software engineers gain experience, we tend to improve our productivity in multiple
ways at the same time: writing more robust code, using better abstractions, spending less
time writing and fixing bugs, understanding more complex architectures, covering edge
cases more effectively, spotting repeated patterns earlier, etc. Engineering is a rich
and complex discipline with many avenues for specialisation, but for simplicity we might
group these dimensions into two broad themes:</p>
<ul>
<li><strong>Quality</strong>: ability to deliver more complex, more performant, more maintainable code</li>
<li><strong>Velocity</strong>: ability to develop working, bug-free code in a shorter space of time</li>
</ul>
<p>Over time, good engineers will improve in both axes.</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-6.svg" alt="Engineers and LLMs improve in both velocity and quality." title="Engineers and LLMs improve in both velocity and quality."></p>
<p>Early LLMs were fast to write code, but time spent fixing bugs and removing hallucinations
meant they were slow to complete bug-free code. Over time, smarter LLMs and better use of
context engineering and tools have meant that modern AI coding agents are much better at
“one shot” writing of code. The current generation of commercially available agents can be
incredibly fast at producing working code for problems that would challenge some mid-level
engineers, though they cannot yet match the expertise of senior engineers:</p>
<p>So we can think of the current generation of AI coding agents as junior engineers, albeit
with two fundamental differences:</p>
<ol>
<li>LLMs deliver code much, much faster than junior engineers, constrained neither by thinking
nor writing time;</li>
<li>LLMs have no true capacity to learn, and instead only improve through more effective
<a href="https://chrisloy.dev/post/2025/08/03/context-engineering">context engineering</a> or
the arrival of new foundation models.</li>
</ol>
<p>As with junior engineering talent, there are broadly two ways that you can deploy them, depending on
whether your focus is long-term or short-term:</p>
<ul>
<li><strong>AI-driven engineering</strong>: employing best practices, foregrounding human
understanding of the code, moving slowly to make development sustainable.</li>
<li><strong>Vibe coding</strong>: throwing caution to the wind and implementing at speed, sacrificing
understanding for delivery velocity, hitting an eventual wall of unsalvageable, messy code.</li>
</ul>
<p>As might be expected, the long-term trajectories of choosing between these two approaches
follow much the same pattern as choosing between parallel delegation and mollycoddling of a
junior team:</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-7.svg" alt="Vibe coding has the exact same failure state as mollycoddling." title="Vibe coding has the exact same failure state as mollycoddling."></p>
<p>This is why the <a href="https://chrisloy.dev/post/2025/09/07/vibe-coding-art">vibe coding</a> approach
is great for tiny projects or throwaway prototypes: applications of sufficient simplicity
can be delivered without the need for any human thinking at all. By limiting the complexity
of our projects and leaning into the capabilities of the tools, we can deliver end-to-end
working software in no time at all.</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-8.svg" alt="Vibe coding is great as long as you don't need to think." title="Vibe coding is great as long as you don't need to think."></p>
<p>But you <em>will</em> hit a wall of complexity that AI is incapable of scaling alone.</p>
<p>Building prototypes is now easier than ever. But if we want to effectively use LLMs to
accelerate delivery of real, complex, secure, working software, and to realise more than
marginal efficiency gains, we need to write a new playbook of engineering practices tailored
to maximise collaboration between engineering teams that include both humans and LLMs.</p>
<h2>How to avoid the AI coding trap</h2>
<p>AI coding agents are dazzlingly productive, but lack in-depth knowledge of your business,
codebase, or roadmap. Left unchecked, they will happily churn
out thousands of lines of code with no heed paid to design, consistency, or maintainability.
The job of the engineer, then, is to act as a tech lead to these hotshots: to provide the structure,
standards, and processes that convert raw speed into sustainable delivery.</p>
<p>We need a new playbook for how to deliver working software efficiently, and we can look to the
past to learn how to do that. By treating LLMs as <strong>lightning-fast junior engineers</strong>, we
can lean on best practices from the software development lifecycle to build systems that scale.</p>
<p><img src="https://chrisloy.dev/images/2025/ai-coding-9.svg" alt="AI can be used at every stage of the software development lifecycle." title="AI can be used at every stage of the software development lifecycle."></p>
<p>Just as tech leads don't just write code but set practices for the team, engineers
now need to set practices for AI agents. That means bringing AI into every stage of
the lifecycle:</p>
<blockquote>
<p><strong>Specification</strong>: exploring, analysing, and refining feature specifications to cover edge cases and narrow focus.</p>
</blockquote>
<blockquote>
<p><strong>Documentation</strong>: generating and reviewing documentation up front to provide reusable guardrails and lasting evidence.</p>
</blockquote>
<blockquote>
<p><strong>Modular Design</strong>: scaffolding modular architectures to control context scope and maximise comprehension.</p>
</blockquote>
<blockquote>
<p><strong>Test-Driven Development</strong>: generating extensive test cases prior to implementation to guide implementation and prevent regression.</p>
</blockquote>
<blockquote>
<p><strong>Coding Standards</strong>: applying house styles and best practice when generating code, through context engineering.</p>
</blockquote>
<blockquote>
<p><strong>Monitoring &amp; Introspection</strong>: analysing logs and extracting insights faster than any human ever could.</p>
</blockquote>
<p>By understanding that delivering software is so much more than just writing code, we can
avoid the AI coding trap and instead hugely amplify our ability to deliver working, scalable software.</p></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scm2wasm: A Scheme to WASM compiler in 600 lines of C, making use of WASM GC (110 pts)]]></title>
            <link>https://git.lain.faith/iitalics/scm2wasm</link>
            <guid>45405175</guid>
            <pubDate>Sun, 28 Sep 2025 15:43:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://git.lain.faith/iitalics/scm2wasm">https://git.lain.faith/iitalics/scm2wasm</a>, See on <a href="https://news.ycombinator.com/item?id=45405175">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			
				
<p dir="auto">really bad minimal scheme compiler</p>
<h2 id="user-content-building" dir="auto">building</h2>
<pre><code>$ make
</code></pre><h2 id="user-content-running" dir="auto">running</h2>
<pre><code>$ ./scm2wasm &lt; input.scm &gt; output.wasm
$ wasm-tools validate output.wasm
$ wasm-tools print output.wasm -o output.wat
$ wasmtime -Wgc --invoke start output.wasm
...
30
</code></pre>
			
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[She Sent Her iPhone to Apple. Repair Techs Uploaded Her Nudes to Facebook (2021) (103 pts)]]></title>
            <link>https://www.vice.com/en/article/she-sent-her-iphone-to-apple-repair-techs-uploaded-her-nudes-to-facebook/</link>
            <guid>45404907</guid>
            <pubDate>Sun, 28 Sep 2025 15:09:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.vice.com/en/article/she-sent-her-iphone-to-apple-repair-techs-uploaded-her-nudes-to-facebook/">https://www.vice.com/en/article/she-sent-her-iphone-to-apple-repair-techs-uploaded-her-nudes-to-facebook/</a>, See on <a href="https://news.ycombinator.com/item?id=45404907">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Apple paid a multimillion dollar settlement to an Oregon woman after repair techs the company had contracted published nude photos of her from her phone on her Facebook. As first reported by <i><a href="https://www.telegraph.co.uk/business/2021/06/06/apple-pays-millions-woman-explicit-photos-posted-online/" target="_blank" rel="noopener"><span>The Telegraph</span></a></i>, the unidentified woman sent her iPhone to Apple for repairs in 2016. According to court documents reviewed by Motherboard, two repair techs then posted “10 photos of her in various stages of undress and a sex video” to her personal Facebook page. The case highlights the personal nature of our devices and the need for Apple to relinquish its repair monopoly and let us repair our own stuff.</p>


<p>According to court records, the woman found out this happened when one of her friends reached out to say her nudes had been uploaded to Facebook. She pulled them down and threatened to sue Apple for invasion of privacy and emotional distress. In this case, the people who uploaded the photos and video worked for a company called Pegatron, which is a company Apple works with to do repairs.&nbsp;</p>


<div>
			<h2>
			Videos by VICE		</h2>
			
</div>


<p>For years, Apple has been arguing to legislators that it needs to tightly control who is able to do repairs on iPhones and other Apple products. One of the core arguments it makes is that allowing “unauthorized” repair companies to fix iPhones will lead to privacy violations and will cause security problems. This case shows how, even when Apple tightly controls its repair infrastructure, it cannot prevent disastrous cases like this from happening. In a world where repair is a free and open marketplace, consumers can choose to take their phone to someone who they trust, or can decide to repair their phone themselves. In the current world we live in, you often have to take your phone to Apple; your phone then goes to a giant repair facility somewhere. The phone is essentially entering a black hole.&nbsp;</p>


<p>The only reason we know about this case is because of a dispute between Apple, Pegatron, and the AGLIC American Insurance Company. Apple and other large corporations pay for something called indemnity insurance. The basic idea is that when the big company screws up and has to pay a judgement in a case like this, the insurance reimburses them. In the lawsuit, Apple is named as a “customer” of Pegatron, but is not a party to the lawsuit. Apple fought (and succeeded) at filing details of the case under seal. Many of the documents remain sealed by the court.</p>



<p>Apple paid the multimillion dollar settlement, Pegatron reimbursed them, and then the insurance company refused to pay out the indemnity claim. The exact amount of the settlement isn’t known, but court records obtained by Motherboard discuss two transactions in dispute—one for $4.25 million and another for $1.7 million.</p>


<p>This isn’t the first time an Apple employee or contractor has sorted through a customer’s photo gallery and shared their nudes. It happens all the time. In 2019 an Apple genius <a href="https://www.washingtonpost.com/technology/2019/11/12/an-apple-store-employee-helped-customerby-texting-himself-private-photo-her-phone/" target="_blank" rel="noopener"><span>texted himself</span></a> a personal photograph of a customer who’d come in looking for help with her phone. In 2016, Apple fired a group of employees in Australia after uncovering evidence the group had set up a website to <a href="https://9to5mac.com/2016/10/12/apple-australia-photo-sharing-ring-nsfw/" target="_blank" rel="noopener"><span>share customer’s</span></a> photographs.</p>



<p>Our devices are extremely personal. They hold an incredible amount of information about us, from personal emails, to explicit photographs, private communications, and financial information.&nbsp;</p>


<p>Companies like Apple intentionally manufacture devices to be repairable only by authorized companies. They often require special tools to diagnose and fix problems, which aren’t shared with the public or third-party repair shops. Apple and other companies have taken <a href="https://www.vice.com/en/topic/right-to-repair" target="_blank" rel="noopener"><span>extraordinary steps</span></a> to make sure people can’t repair their own devices, and even claim it’s unsafe for us to do so.</p>



<p>“Apple has been opposing Right to Repair bills by claiming that their service network is the only safe repair option for consumers,” Kyle Wiens, CEO of iFixit, told Motherboard. “But the only person that is totally guaranteed to be trustworthy to fix your iPhone is you. Any time you hand your data to another entity, you risk something like this. By withholding access to service tools and forcing customers to use their third party contractor, Apple is willfully compromising the security of their customers.”</p>

<p>Laws enshrining the right-to-repair would fix these issues and pave the way for people to fix their own stuff. States <a href="https://www.vice.com/en/article/jgqk38/the-right-to-repair-movement-is-poised-to-explode-in-2021" target="_blank" rel="noopener"><span>across the country</span></a> are considering legislation that would give people the power to fix their own stuff.&nbsp;</p>



<p>Apple did not immediately respond to Motherboard’s request for comment.</p><!-- AI CONTENT END 1 -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Toolbrew – Free little tools without signups or ads (140 pts)]]></title>
            <link>https://toolbrew.co/</link>
            <guid>45404667</guid>
            <pubDate>Sun, 28 Sep 2025 14:40:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://toolbrew.co/">https://toolbrew.co/</a>, See on <a href="https://news.ycombinator.com/item?id=45404667">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The Demon-Haunted World (137 pts)]]></title>
            <link>https://en.wikipedia.org/wiki/The_Demon-Haunted_World</link>
            <guid>45404373</guid>
            <pubDate>Sun, 28 Sep 2025 14:00:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://en.wikipedia.org/wiki/The_Demon-Haunted_World">https://en.wikipedia.org/wiki/The_Demon-Haunted_World</a>, See on <a href="https://news.ycombinator.com/item?id=45404373">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
							

						<p>From Wikipedia, the free encyclopedia</p>
					</div><div lang="en" dir="ltr" id="mw-content-text">

<table><caption>The Demon-Haunted World: Science as a Candle in the Dark <span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Demon-Haunted+World%3A+Science+as+a+Candle+in+the+Dark&amp;rft.author=%5B%5BCarl+Sagan%5D%5D&amp;rft.date=1995%2F1997&amp;rft.pub=%5B%5BRandom+House%5D%5D&amp;rft.place=United+States&amp;rft.pages=457&amp;rft_id=info:oclcnum/32855551"></span></caption><tbody><tr><td colspan="2"><span typeof="mw:File/Frameless"><a href="https://en.wikipedia.org/wiki/File:The_Demon-Haunted_World,_first_edition_cover.jpg"><img src="https://upload.wikimedia.org/wikipedia/en/thumb/4/4e/The_Demon-Haunted_World%2C_first_edition_cover.jpg/250px-The_Demon-Haunted_World%2C_first_edition_cover.jpg" decoding="async" width="250" height="375" srcset="https://upload.wikimedia.org/wikipedia/en/4/4e/The_Demon-Haunted_World%2C_first_edition_cover.jpg 1.5x" data-file-width="257" data-file-height="386"></a></span><p>Cover of the first edition</p></td></tr><tr><th scope="row">Author</th><td><a href="https://en.wikipedia.org/wiki/Carl_Sagan" title="Carl Sagan">Carl Sagan</a></td></tr><tr><th scope="row">Language</th><td>English</td></tr><tr><th scope="row">Subjects</th><td><a href="https://en.wikipedia.org/wiki/Scientific_skepticism" title="Scientific skepticism">Scientific skepticism</a><br><a href="https://en.wikipedia.org/wiki/Science" title="Science">Science</a><br><a href="https://en.wikipedia.org/wiki/Philosophy" title="Philosophy">Philosophy</a></td></tr><tr><th scope="row">Publisher</th><td><a href="https://en.wikipedia.org/wiki/Random_House" title="Random House">Random House</a></td></tr><tr><th scope="row"><p>Publication date</p></th><td>1995/1997</td></tr><tr><th scope="row">Publication place</th><td>United States</td></tr><tr><th scope="row">Media&nbsp;type</th><td>Print (<a href="https://en.wikipedia.org/wiki/Hardcover" title="Hardcover">hardcover</a> and <a href="https://en.wikipedia.org/wiki/Paperback" title="Paperback">paperback</a>)</td></tr><tr><th scope="row">Pages</th><td>457</td></tr><tr><th scope="row"><a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a></th><td><a href="https://en.wikipedia.org/wiki/Special:BookSources/0-345-40946-9" title="Special:BookSources/0-345-40946-9"><bdi>0-345-40946-9</bdi></a></td></tr><tr><th scope="row"><a href="https://en.wikipedia.org/wiki/OCLC_(identifier)" title="OCLC (identifier)"><abbr title="Online Computer Library Center number">OCLC</abbr></a></th><td><a rel="nofollow" href="https://www.worldcat.org/oclc/32855551">32855551</a></td></tr><tr><th scope="row"><div><p><a href="https://en.wikipedia.org/wiki/Dewey_Decimal_Classification" title="Dewey Decimal Classification">Dewey Decimal</a></p></div></th><td>001.9 20</td></tr><tr><th scope="row"><a href="https://en.wikipedia.org/wiki/LCC_(identifier)" title="LCC (identifier)"><abbr title="Library of Congress Classification">LC&nbsp;Class</abbr></a></th><td>Q175 .S215 1995</td></tr><tr><th scope="row">Preceded&nbsp;by</th><td><i><a href="https://en.wikipedia.org/wiki/Pale_Blue_Dot_(book)" title="Pale Blue Dot (book)">Pale Blue Dot</a>&nbsp;</i></td></tr><tr><th scope="row">Followed&nbsp;by</th><td><i><a href="https://en.wikipedia.org/wiki/Billions_and_Billions" title="Billions and Billions">Billions and Billions</a>&nbsp;</i></td></tr></tbody></table>
<p><i><b>The Demon-Haunted World: Science as a Candle in the Dark</b></i> is a 1995 book by the astronomer and science communicator <a href="https://en.wikipedia.org/wiki/Carl_Sagan" title="Carl Sagan">Carl Sagan</a>. (Four of the 25 chapters were written with <a href="https://en.wikipedia.org/wiki/Ann_Druyan" title="Ann Druyan">Ann Druyan</a>.<sup id="cite_ref-1"><a href="#cite_note-1"><span>[</span>1<span>]</span></a></sup><sup><span title="Page / location: x">: x </span></sup>) In it, Sagan aims to explain the <a href="https://en.wikipedia.org/wiki/Scientific_method" title="Scientific method">scientific method</a> to <a href="https://en.wikipedia.org/wiki/Layman" title="Layman">laypeople</a> and to encourage people to learn <a href="https://en.wikipedia.org/wiki/Critical_thinking" title="Critical thinking">critical</a> and <a href="https://en.wikipedia.org/wiki/Scientific_skepticism" title="Scientific skepticism">skeptical</a> thinking. He explains methods to help distinguish between ideas that are considered valid <a href="https://en.wikipedia.org/wiki/Science" title="Science">science</a> and those that can be considered <a href="https://en.wikipedia.org/wiki/Pseudoscience" title="Pseudoscience">pseudoscience</a>. Sagan states that when new ideas are offered for consideration, they should be tested by means of skeptical thinking and should stand up to rigorous questioning.
</p>
<meta property="mw:PageProp/toc">

<p>Sagan explains that <a href="https://en.wikipedia.org/wiki/Science" title="Science">science</a> is not just a body of knowledge, but is a way of thinking. Sagan shows how <a href="https://en.wikipedia.org/wiki/Scientific_thinking" title="Scientific thinking">scientific thinking</a> is both imaginative and disciplined, bringing humans to an understanding of how the <a href="https://en.wikipedia.org/wiki/Universe" title="Universe">universe</a> is, rather than how they wish to perceive it. He says that science works much better than any other system because it has a "built-in error-correcting machine".<sup id="cite_ref-2"><a href="#cite_note-2"><span>[</span>2<span>]</span></a></sup><sup><span title="Page / location: 27">: 27 </span></sup> <a href="https://en.wikipedia.org/wiki/Superstition" title="Superstition">Superstition</a> and <a href="https://en.wikipedia.org/wiki/Pseudoscience" title="Pseudoscience">pseudoscience</a> get in the way of the ability of many laypersons to appreciate the beauty and benefits of science. Skeptical thinking allows people to <a href="https://en.wikipedia.org/wiki/Construct_(philosophy_of_science)" title="Construct (philosophy of science)">construct</a>, <a href="https://en.wikipedia.org/wiki/Understanding" title="Understanding">understand</a>, <a href="https://en.wikipedia.org/wiki/Reason" title="Reason">reason</a>, and recognize <a href="https://en.wikipedia.org/wiki/Validity_(logic)" title="Validity (logic)">valid</a> and invalid <a href="https://en.wikipedia.org/wiki/Logical_argument" title="Logical argument">arguments</a>. Wherever possible, there must be <a href="https://en.wikipedia.org/wiki/Verification_and_validation" title="Verification and validation">independent validation</a> of the concepts whose <a href="https://en.wikipedia.org/wiki/Truth" title="Truth">truth</a> should be proved. He states that reason and <a href="https://en.wikipedia.org/wiki/Logic" title="Logic">logic</a> would succeed once the truth was known. <a href="https://en.wikipedia.org/wiki/Logical_consequence" title="Logical consequence">Conclusions</a> emerge from <a href="https://en.wikipedia.org/wiki/Premise" title="Premise">premises</a>, and the acceptability of the <a href="https://en.wikipedia.org/wiki/Premise" title="Premise">premises</a> should not be discounted or accepted because of <a href="https://en.wikipedia.org/wiki/Bias" title="Bias">bias</a>.
</p>
<div><h3 id="Dragon_in_my_garage"><span id="Dragon_in_the_garage"></span>Dragon in my garage</h3><p><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=The_Demon-Haunted_World&amp;action=edit&amp;section=2" title="Edit section: Dragon in my garage"><span>edit</span></a><span>]</span></span></p></div>

<p>As an example of skeptical thinking, Sagan offers a story concerning a fire-breathing <a href="https://en.wikipedia.org/wiki/Dragon" title="Dragon">dragon</a> who lives in his garage. When he persuades a rational, open-minded visitor to meet the dragon, the visitor remarks that they are unable to see the creature. Sagan replies that he "neglected to mention that she's an invisible dragon". The visitor suggests spreading flour on the floor so that the creature's footprints might be seen, which Sagan says is a good idea, "but this dragon floats in the air". When the visitor considers using an <a href="https://en.wikipedia.org/wiki/Infrared_camera" title="Infrared camera">infrared camera</a> to view the creature's invisible <a href="https://en.wikipedia.org/wiki/Fire" title="Fire">fire</a>, Sagan explains that her fire is heatless. He continues to counter every proposed physical test with a reason why the test will not work.
</p><p>Sagan concludes by asking: "Now what's the difference between an invisible, incorporeal, floating dragon who spits heatless fire and no dragon at all? If there's no way to disprove my contention, no conceivable experiment that would count against it, what does it mean to say that my dragon exists? Your inability to invalidate my hypothesis is not at all the same thing as proving it true."
</p><p>Continuing with concepts relevant to the 'dragon in my garage' story, Sagan writes about a patient of <a href="https://en.wikipedia.org/wiki/John_E._Mack" title="John E. Mack">John Mack</a> who claimed to have scars on her body which were from encounters with <a href="https://en.wikipedia.org/wiki/Extraterrestrial_life" title="Extraterrestrial life">aliens</a>. Sagan writes that if the patient is asked what her scars look like, she is unable to show them because, unfortunately, they are located in the private areas of her body.
</p>
<div><h3 id="Baloney_detection_kit">Baloney detection kit</h3><p><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=The_Demon-Haunted_World&amp;action=edit&amp;section=3" title="Edit section: Baloney detection kit"><span>edit</span></a><span>]</span></span></p></div>
<p>Sagan presents a set of tools for skeptical thinking that he calls the "baloney detection kit".<sup id="cite_ref-Palmer_3-0"><a href="#cite_note-Palmer-3"><span>[</span>3<span>]</span></a></sup><sup id="cite_ref-4"><a href="#cite_note-4"><span>[</span>4<span>]</span></a></sup><sup><span title="Page / location: 210">: 210 </span></sup><sup id="cite_ref-5"><a href="#cite_note-5"><span>[</span>5<span>]</span></a></sup> Skeptical thinking consists both of constructing a reasoned <a href="https://en.wikipedia.org/wiki/Argument" title="Argument">argument</a> and recognizing a <a href="https://en.wikipedia.org/wiki/Fallacy" title="Fallacy">fallacious</a> or <a href="https://en.wikipedia.org/wiki/Fraudulent" title="Fraudulent">fraudulent</a> one. In order to identify a fallacious argument, Sagan suggests employing such tools as independent confirmation of facts, debate, development of different <a href="https://en.wikipedia.org/wiki/Hypotheses" title="Hypotheses">hypotheses</a>, quantification, the use of <a href="https://en.wikipedia.org/wiki/Occam%27s_razor" title="Occam's razor">Occam's razor</a>, and the possibility of <a href="https://en.wikipedia.org/wiki/Falsifiability" title="Falsifiability">falsification</a>. Sagan's "baloney detection kit" also provides tools for detecting "the most common fallacies of logic and rhetoric", such as <a href="https://en.wikipedia.org/wiki/Argument_from_authority" title="Argument from authority">argument from authority</a> and <a href="https://en.wikipedia.org/wiki/Hasty_generalization" title="Hasty generalization">statistics of small numbers</a>. Through these tools, Sagan argues the benefits of a critical mind and the self-correcting nature of science can take place.
</p><p>Sagan provides nine tools as the first part of this kit.
</p>
<ol><li>There must be independent confirmation of the facts given when possible.</li>
<li>Encourage <a href="https://en.wikipedia.org/wiki/Debate" title="Debate">debate</a> on the <a href="https://en.wikipedia.org/wiki/Evidence" title="Evidence">evidence</a> from all points of view.</li>
<li>Realize that an argument from authority is not always reliable. Sagan supports this by telling us that "authorities" have made mistakes in the past and they will again in the future.</li>
<li>Consider more than one <a href="https://en.wikipedia.org/wiki/Hypothesis" title="Hypothesis">hypothesis</a>. Sagan adds to this by telling us that we must think of the argument from all angles and think all the ways it can be explained or disproved. The <a href="https://en.wikipedia.org/wiki/Hypothesis" title="Hypothesis">hypothesis</a> that then still hasn't been disproved has a much higher chance of being correct.</li>
<li>Try to avoid clinging obdurately to your own hypothesis and so become <a href="https://en.wikipedia.org/wiki/Bias" title="Bias">biased</a>. Sagan tells us to compare our own hypothesis with others to see if we can find reasons to reject our own hypothesis.</li>
<li>Quantify. Sagan tells us that if whatever we are trying to explain has numerical value or <a href="https://en.wikipedia.org/wiki/Numerical_data" title="Numerical data">quantitative</a> data related to it, then we'll be much more able to compete against other hypotheses.</li>
<li>If there is a chain of argument, every link in that chain must be correct.</li>
<li>The use of <a href="https://en.wikipedia.org/wiki/Occam%27s_razor" title="Occam's razor">Occam's razor</a>, which says to choose the hypothesis that is simpler and requires the fewest assumptions.</li>
<li>Ask if a given hypothesis can be falsified. Sagan tells us that if a hypothesis cannot be tested or falsified then it is not worth considering.</li></ol>
<p>Sagan suggests that with the use of this "baloney detection kit" it is easier to critically think and find the truth.
</p>

<p>There is a second part to the kit. This consists of twenty <a href="https://en.wikipedia.org/wiki/Logical_fallacies" title="Logical fallacies">logical fallacies</a> that one must not commit when offering up a new claim.
</p>
<ol><li><i><a href="https://en.wikipedia.org/wiki/Ad_hominem" title="Ad hominem">Ad hominem</a></i>. An arguer attacks the opposing arguer and not the actual argument.</li>
<li><a href="https://en.wikipedia.org/wiki/Argument_from_authority" title="Argument from authority">Argument from authority</a>. Someone expects another to immediately believe that a person of authority or higher knowledge is correct.</li>
<li><a href="https://en.wikipedia.org/wiki/Argument_from_adverse_consequences" title="Argument from adverse consequences">Argument from adverse consequences</a>. Someone says that something must be done a certain way or else there will be adverse consequences.</li>
<li><a href="https://en.wikipedia.org/wiki/Appeal_to_ignorance" title="Appeal to ignorance">Appeal to ignorance</a>. One argues a claim in that whatever has not been proved false must be true, and vice versa.</li>
<li><a href="https://en.wikipedia.org/wiki/Special_pleading" title="Special pleading">Special pleading</a>. An arguer responds to a deeply complex or rhetorical question or statement by, usually, saying "oh you don't understand how so and so works."</li>
<li><a href="https://en.wikipedia.org/wiki/Begging_the_question" title="Begging the question">Begging the question</a>. An arguer assumes the answer and makes a claim such as, this happened because of that, or, this needs to happen in order for that to happen.</li>
<li><a href="https://en.wikipedia.org/wiki/Observational_selection" title="Observational selection">Observational selection</a>. Someone talks about how great something is by explaining all of the positive aspects of it while purposely not mentioning any of the negative aspects.</li>
<li><a href="https://en.wikipedia.org/wiki/Law_of_large_numbers" title="Law of large numbers">Statistics of small numbers</a>. Someone argues something by giving the statistics in small numbers, which isn't very reliable.</li>
<li>Misunderstanding of the nature of statistics. Someone misinterprets statistics given to them.</li>
<li>Fallacy of inconsistency. An arguer is very inconsistent in their claims.</li>
<li><i><a href="https://en.wikipedia.org/wiki/Non_sequitur_(fallacy)" title="Non sequitur (fallacy)">Non sequitur</a></i>. This is Latin for "it doesn't follow". A claim is made that doesn't make much sense, such as "Our nation will prevail because God is great."</li>
<li><i><a href="https://en.wikipedia.org/wiki/Post_hoc_ergo_propter_hoc" title="Post hoc ergo propter hoc">Post hoc ergo propter hoc</a></i>. Latin for "it happened after, so it was caused by". An arguer claims that something happened because of a past event when really it probably didn't.</li>
<li>Meaningless question. Someone asks a question that has no real meaning or doesn't add to the argument at all.</li>
<li>The <a href="https://en.wikipedia.org/wiki/Excluded_middle" title="Excluded middle">excluded middle</a>. An arguer only considers or mentions the two opposite extremes of the conversation and excludes the aspects in between the two extremes.</li>
<li>Short-term vs. long-term. A subset of the excluded middle, but so important it was pulled out for special attention.</li>
<li><a href="https://en.wikipedia.org/wiki/Slippery_slope" title="Slippery slope">Slippery slope</a>, related to excluded middle (e.g., If we allow abortion in the first weeks of pregnancy, it will be impossible to prevent the killing of a full-term infant. Or, conversely: If the state prohibits…).</li>
<li><a href="https://en.wikipedia.org/wiki/Confusion_of_correlation_and_causation" title="Confusion of correlation and causation">Confusion of correlation and causation</a>. The latter causes the former.</li>
<li><a href="https://en.wikipedia.org/wiki/Straw_man" title="Straw man">Straw man</a>. Caricaturing a position to make it easier to attack. This is also a short-term/long-term fallacy.</li>
<li><a href="https://en.wikipedia.org/wiki/Suppressed_evidence" title="Suppressed evidence">Suppressed evidence</a>, or half-truth.</li>
<li><a href="https://en.wikipedia.org/wiki/Weasel_word" title="Weasel word">Weasel word</a>. Talleyrand said: "An important art of politicians is to find new names for institutions which under old names have become odious to the public."&nbsp;</li></ol>
<p>Sagan provides a skeptical analysis of several examples of what he refers to as <a href="https://en.wikipedia.org/wiki/Superstition" title="Superstition">superstition</a>, <a href="https://en.wikipedia.org/wiki/Fraud" title="Fraud">fraud</a>, and <a href="https://en.wikipedia.org/wiki/Pseudoscience" title="Pseudoscience">pseudoscience</a> such as <a href="https://en.wikipedia.org/wiki/Witch" title="Witch">witches</a>, <a href="https://en.wikipedia.org/wiki/Unidentified_flying_object" title="Unidentified flying object">UFOs</a>, <a href="https://en.wikipedia.org/wiki/Extrasensory_perception" title="Extrasensory perception">ESP</a>, and <a href="https://en.wikipedia.org/wiki/Faith_healing" title="Faith healing">faith healing</a>. He is critical of <a href="https://en.wikipedia.org/wiki/Organized_religion" title="Organized religion">organized religion</a>.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (July 2017)">citation needed</span></a></i>]</sup>
</p><p>In a 2020 interview for <i><a href="https://en.wikipedia.org/wiki/Skeptical_Inquirer" title="Skeptical Inquirer">Skeptical Inquirer</a></i>, when Sagan's wife <a href="https://en.wikipedia.org/wiki/Ann_Druyan" title="Ann Druyan">Ann Druyan</a> was asked about the origin of the phrase "baloney detection kit", she said that
</p>
<blockquote><p>It didn't really come from Carl. It actually came from a friend of mine named Arthur Felberbaum who died about forty years ago. He and Carl and I once sat down for dinner together. His politics were very left wing, so Carl and Arthur and I were trying to find common ground so that we could have a really good dinner together. And at one point, Arthur said, "Carl, it's just that I dream that every one of us would have a baloney detection kit in our head." And that's where that idea came from.<sup id="cite_ref-Palmer_3-1"><a href="#cite_note-Palmer-3"><span>[</span>3<span>]</span></a></sup></p></blockquote>

<p>Sagan indicates that science can be misused. Thus, he is highly critical of <a href="https://en.wikipedia.org/wiki/Edward_Teller" title="Edward Teller">Edward Teller</a>, the "father of the <a href="https://en.wikipedia.org/wiki/Hydrogen_bomb" title="Hydrogen bomb">hydrogen bomb</a>", and Teller's influence on politics, and contrasts his stance to that of <a href="https://en.wikipedia.org/wiki/Linus_Pauling" title="Linus Pauling">Linus Pauling</a> and other scientists who took moral positions.<sup>[<i><a href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (July 2017)">citation needed</span></a></i>]</sup>
</p><p>Sagan also discusses the misuse of science in representation. He relates to the depiction of the <a href="https://en.wikipedia.org/wiki/Mad_scientist" title="Mad scientist">mad scientist</a> character in children's TV shows and is critical of this occurrence. Sagan suggests an addition of scientific television programs, many of which would take a look at believed <a href="https://en.wikipedia.org/wiki/Hoaxes" title="Hoaxes">hoaxes</a> of the past and encourage viewers to engage in <a href="https://en.wikipedia.org/wiki/Critical_thinking" title="Critical thinking">critical thinking</a> to better represent science on popular <a href="https://en.wikipedia.org/wiki/Television" title="Television">television</a>.
</p>
<div><h4 id="Misuse_of_psychiatric_authority">Misuse of psychiatric authority</h4><p><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=The_Demon-Haunted_World&amp;action=edit&amp;section=6" title="Edit section: Misuse of psychiatric authority"><span>edit</span></a><span>]</span></span></p></div>
<p>Sagan indicates that <a href="https://en.wikipedia.org/wiki/Therapists" title="Therapists">therapists</a> can contribute to the growth of <a href="https://en.wikipedia.org/wiki/Pseudoscience" title="Pseudoscience">pseudoscience</a> or the infusion of "false stories". He is critical of <a href="https://en.wikipedia.org/wiki/John_E._Mack" title="John E. Mack">John Mack</a> and his support of  abduction cases, which were represented in his patients.
</p><p>Sagan writes about the story of <a href="https://en.wikipedia.org/wiki/Thurston_County_ritual_abuse_case" title="Thurston County ritual abuse case">Paul Ingram</a>. Ingram's daughter reported that her father had sexually abused her. He was told that "sex offenders often <a href="https://en.wikipedia.org/wiki/Repressed_memory" title="Repressed memory">repressed</a> memories of their crimes."<sup id="cite_ref-Sagan,_Carl_1997_6-0"><a href="#cite_note-Sagan,_Carl_1997-6"><span>[</span>6<span>]</span></a></sup> Ingram was eventually able to have a foggy visualization of the claimed events, and he suggested that perhaps "a <a href="https://en.wikipedia.org/wiki/Demon" title="Demon">demon</a> might be responsible."<sup id="cite_ref-Sagan,_Carl_1997_6-1"><a href="#cite_note-Sagan,_Carl_1997-6"><span>[</span>6<span>]</span></a></sup> Sagan describes how once Ingram started remembering events, so did several other individuals and family members. A "memory recovery" technique was performed on Ingram, and he confessed to the crimes. A medical examination was done on his daughter, where none of the scars she described were actually found. Sagan writes that Ingram later tried to plead innocence once "away from his daughters, his police colleagues, and his <a href="https://en.wikipedia.org/wiki/Pastor" title="Pastor">pastor</a>."<sup id="cite_ref-Sagan,_Carl_1997_6-2"><a href="#cite_note-Sagan,_Carl_1997-6"><span>[</span>6<span>]</span></a></sup>
</p>

<p><a href="https://en.wikipedia.org/wiki/Hoax" title="Hoax">Hoaxes</a> have played a valuable role in the history of science by revealing the flaws in our thinking and helping us advance our critical thinking skills. One of Sagan's examples is the "Carlos hoax" by <a href="https://en.wikipedia.org/wiki/James_Randi" title="James Randi">James Randi</a> that revealed flaws in reporting by news media. Carlos was described as an ancient spirit that supposedly possessed José Alvarez and provided Alvarez with advanced knowledge about the universe. Many news outlets assumed this was true and reported it as such, which spread misinformation.
</p><p>Sagan also cites <a href="https://en.wikipedia.org/wiki/Crop_circles" title="Crop circles">crop circles</a> as hoaxes.
</p>
<div><h2 id="Reception_and_legacy">Reception and legacy</h2><p><span><span>[</span><a href="https://en.wikipedia.org/w/index.php?title=The_Demon-Haunted_World&amp;action=edit&amp;section=8" title="Edit section: Reception and legacy"><span>edit</span></a><span>]</span></span></p></div>
<p>The book was a <i><a href="https://en.wikipedia.org/wiki/New_York_Times" title="New York Times">New York Times</a></i> bestseller.<sup id="cite_ref-7"><a href="#cite_note-7"><span>[</span>7<span>]</span></a></sup>  The contemporary <a href="https://en.wikipedia.org/wiki/Skeptical_movement" title="Skeptical movement">skeptical movement</a> considers it an important book.<sup id="cite_ref-8"><a href="#cite_note-8"><span>[</span>8<span>]</span></a></sup><sup id="cite_ref-9"><a href="#cite_note-9"><span>[</span>9<span>]</span></a></sup><sup id="cite_ref-10"><a href="#cite_note-10"><span>[</span>10<span>]</span></a></sup><sup id="cite_ref-11"><a href="#cite_note-11"><span>[</span>11<span>]</span></a></sup> <i>The Demon-Haunted World</i> has been criticized (in <a href="https://en.wikipedia.org/wiki/Smithsonian_magazine" title="Smithsonian magazine"><i>Smithsonian</i> magazine</a> and <i><a href="https://en.wikipedia.org/wiki/The_New_York_Times" title="The New York Times">The New York Times</a></i>) for not incorporating certain information relevant to the items he discusses in his book. The <i>Smithsonian</i> article by Paul Trachtman argues that Sagan relates issues of government choices and declining scientific thinking skills to pseudoscience topics like <a href="https://en.wikipedia.org/wiki/Astrology" title="Astrology">astrology</a> and <a href="https://en.wikipedia.org/wiki/Faith_healing" title="Faith healing">faith healing</a> but ignores other issues that may be causing governmental bodies and other individuals to turn away from science. One such issue is consequences of pouring governmental money into cancer research. Trachtman writes, "it is not because of such beliefs that Congress now approaches the NIH budget with an ax. In fact, billions of dollars spent on years of research in the war on cancer have spawned growing professional bureaucracies and diminishing medical benefits." Trachtman argues that Sagan does not include problems like growing <a href="https://en.wikipedia.org/wiki/Bureaucracies" title="Bureaucracies">bureaucracies</a> and diminishing medical benefits as reasons for a lack of scientific attention.<sup id="cite_ref-smithsonianmag.com_12-0"><a href="#cite_note-smithsonianmag.com-12"><span>[</span>12<span>]</span></a></sup> In his review for <i>The</i> <i>New York Times,</i> James Gorman also argues for an unaddressed issue in Sagan's book, saying Sagan fails to emphasize the idea that scientists should take a more active role in teaching science to the public, while he does mention the failures of the education system to do so.<sup id="cite_ref-13"><a href="#cite_note-13"><span>[</span>13<span>]</span></a></sup>
</p><p>The review in the <i>Smithsonian</i> magazine and a review by academic biologist <a href="https://en.wikipedia.org/wiki/Richard_Lewontin" title="Richard Lewontin">Richard Lewontin</a> in the <a href="https://en.wikipedia.org/wiki/The_New_York_Review_of_Books" title="The New York Review of Books"><i>New York Review of Books</i></a> provide a range of opinions on Sagan's attitude towards religious ideas. Per the <i>New York Review</i> article, "when it comes to the Supreme Extraterrestrial he is rather circumspect."<sup id="cite_ref-nybooks.com_14-0"><a href="#cite_note-nybooks.com-14"><span>[</span>14<span>]</span></a></sup> The <i>Smithsonian</i> article suggests Sagan was very clear about his religious beliefs in the book, for he "splits his universe in two, into science and irrationality." The <i>Smithsonian</i> goes on to say that Sagan's defined religious views fall within the area of an untestable claim, a type of claim he argues against in <i>The Demon-Haunted World</i>.<sup id="cite_ref-smithsonianmag.com_12-1"><a href="#cite_note-smithsonianmag.com-12"><span>[</span>12<span>]</span></a></sup>
</p><p>Lewontin's review also claims that Sagan includes something in <i>The Demon-Haunted World</i> which he also is arguing against in that same text. The article mentions how Sagan discusses a natural predisposition people have towards science; but, the article says, "He does not tell us how he used the <a href="https://en.wikipedia.org/wiki/Scientific_method" title="Scientific method">scientific method</a> to discover the "embedded" human proclivity for science."<sup id="cite_ref-nybooks.com_14-1"><a href="#cite_note-nybooks.com-14"><span>[</span>14<span>]</span></a></sup> Sagan heavily discusses the importance of using the scientific method in his book, and this article claims he strays away from his own message by not including a description of his use of the scientific method on this topic.
</p><p>A review by Lee Dembart in the <i><a href="https://en.wikipedia.org/wiki/Los_Angeles_Times" title="Los Angeles Times">Los Angeles Times</a></i> was positive. It described Sagan's book as "a manifesto for clear thought", with the main issue being the length of eight chapters.<sup id="cite_ref-15"><a href="#cite_note-15"><span>[</span>15<span>]</span></a></sup> Gorman's review in <i>The New York Times</i> also criticised the length of the book.<sup id="cite_ref-16"><a href="#cite_note-16"><span>[</span>16<span>]</span></a></sup>
</p><p>The book has received a number of retrospective reviews. An article in <i><a href="https://en.wikipedia.org/wiki/The_Guardian" title="The Guardian">The Guardian</a></i>, 2012, described the book as somewhat dated, though still insightful.<sup id="cite_ref-17"><a href="#cite_note-17"><span>[</span>17<span>]</span></a></sup> Another article from <i><a href="https://en.wikipedia.org/wiki/The_Verge" title="The Verge">The Verge</a></i> in 2017 noted that a quote from the book regarding Sagan's pessimistic prediction for a future America had gone viral on Twitter, which the article described as "chillingly prescient". The article praised the book, stating that Sagan "practiced the scientific skepticism and thinking that he preached, and that's what helped him accurately analyze the trends of his time and forecast their eventual outcomes in ours.".<sup id="cite_ref-18"><a href="#cite_note-18"><span>[</span>18<span>]</span></a></sup>
</p>


<ul><li><a href="https://en.wikipedia.org/wiki/Extraordinary_Popular_Delusions_and_the_Madness_of_Crowds" title="Extraordinary Popular Delusions and the Madness of Crowds"><i>Extraordinary Popular Delusions and the Madness of Crowds</i></a>&nbsp;– 1841 book by Charles Mackay</li>
<li><a href="https://en.wikipedia.org/wiki/Junk_science" title="Junk science">Junk science</a>&nbsp;– Scientific data considered to be spurious or fraudulent</li>
<li><a href="https://en.wikipedia.org/wiki/Pathological_science" title="Pathological science">Pathological science</a>&nbsp;– Area of research which persists despite being widely discredited</li>
<li><a href="https://en.wikipedia.org/wiki/Rationalism" title="Rationalism">Rationalism</a>&nbsp;– Epistemological view centered on reason</li></ul>


<div><ol>
<li id="cite_note-1"><span><b><a href="#cite_ref-1">^</a></b></span> <span><cite id="CITEREFSagan,_Carl1997">Sagan, Carl (1997). <i>The Demon-Haunted World: Science As a Candle in the Dark</i> (Reprint&nbsp;ed.). <a href="https://en.wikipedia.org/wiki/Ballantine_Books" title="Ballantine Books">Ballantine Books</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0345409461" title="Special:BookSources/978-0345409461"><bdi>978-0345409461</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Demon-Haunted+World%3A+Science+As+a+Candle+in+the+Dark&amp;rft.edition=Reprint&amp;rft.pub=Ballantine+Books&amp;rft.date=1997&amp;rft.isbn=978-0345409461&amp;rft.au=Sagan%2C+Carl&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-2"><span><b><a href="#cite_ref-2">^</a></b></span> <span><cite id="CITEREFSagan,_Carl1997">Sagan, Carl (1997). <i>The Demon-Haunted World: Science As a Candle in the Dark</i> (Reprint&nbsp;ed.). <a href="https://en.wikipedia.org/wiki/Ballantine_Books" title="Ballantine Books">Ballantine Books</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0345409461" title="Special:BookSources/978-0345409461"><bdi>978-0345409461</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Demon-Haunted+World%3A+Science+As+a+Candle+in+the+Dark&amp;rft.edition=Reprint&amp;rft.pub=Ballantine+Books&amp;rft.date=1997&amp;rft.isbn=978-0345409461&amp;rft.au=Sagan%2C+Carl&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-Palmer-3"><span>^ <a href="#cite_ref-Palmer_3-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Palmer_3-1"><sup><i><b>b</b></i></sup></a></span> <span><cite id="CITEREFPalmer2020">Palmer, Rob (March 31, 2020). <a rel="nofollow" href="https://skepticalinquirer.org/exclusive/exploring-possible-worlds-with-ann-druyan/">"Exploring 'Possible Worlds' With Ann Druyan"</a>. <i>Skepticalinquirer.org</i>. CFI. <a rel="nofollow" href="https://web.archive.org/web/20200401031822/https://skepticalinquirer.org/exclusive/exploring-possible-worlds-with-ann-druyan/">Archived</a> from the original on April 1, 2020<span>. Retrieved <span>April 17,</span> 2020</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Skepticalinquirer.org&amp;rft.atitle=Exploring+%27Possible+Worlds%27+With+Ann+Druyan&amp;rft.date=2020-03-31&amp;rft.aulast=Palmer&amp;rft.aufirst=Rob&amp;rft_id=https%3A%2F%2Fskepticalinquirer.org%2Fexclusive%2Fexploring-possible-worlds-with-ann-druyan%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-4"><span><b><a href="#cite_ref-4">^</a></b></span> <span><cite id="CITEREFSagan,_Carl1997">Sagan, Carl (March 1997). <i>The Demon-Haunted World: Science As a Candle in the Dark</i> (Paperback&nbsp;ed.). <a href="https://en.wikipedia.org/wiki/Ballantine_Books" title="Ballantine Books">Ballantine Books</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-345-40946-1" title="Special:BookSources/978-0-345-40946-1"><bdi>978-0-345-40946-1</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Demon-Haunted+World%3A+Science+As+a+Candle+in+the+Dark&amp;rft.edition=Paperback&amp;rft.pub=Ballantine+Books&amp;rft.date=1997-03&amp;rft.isbn=978-0-345-40946-1&amp;rft.au=Sagan%2C+Carl&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-5"><span><b><a href="#cite_ref-5">^</a></b></span> <span><cite id="CITEREFSagan,_Carl1995">Sagan, Carl (1995). <i>The Demon-Haunted World: Science As a Candle in the Dark</i> (Hardback&nbsp;ed.). <a href="https://en.wikipedia.org/wiki/Random_House" title="Random House">Random House</a>. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0-394-53512-8" title="Special:BookSources/978-0-394-53512-8"><bdi>978-0-394-53512-8</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+Demon-Haunted+World%3A+Science+As+a+Candle+in+the+Dark&amp;rft.edition=Hardback&amp;rft.pub=Random+House&amp;rft.date=1995&amp;rft.isbn=978-0-394-53512-8&amp;rft.au=Sagan%2C+Carl&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-Sagan,_Carl_1997-6"><span>^ <a href="#cite_ref-Sagan,_Carl_1997_6-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Sagan,_Carl_1997_6-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Sagan,_Carl_1997_6-2"><sup><i><b>c</b></i></sup></a></span> <span>Carl Sagan,(1997). The Demon-Haunted World: Science As a Candle in the Dark (Reprint ed.). Ballantine Books. <a href="https://en.wikipedia.org/wiki/ISBN_(identifier)" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.wikipedia.org/wiki/Special:BookSources/978-0345409461" title="Special:BookSources/978-0345409461"><bdi>978-0345409461</bdi></a>.</span>
</li>
<li id="cite_note-7"><span><b><a href="#cite_ref-7">^</a></b></span> <span><cite><a rel="nofollow" href="https://www.nytimes.com/1996/06/16/books/best-sellers-june-16-1996.html">"Best Sellers"</a>. <i>The New York Times</i>. June 16, 1996<span>. Retrieved <span>February 17,</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+New+York+Times&amp;rft.atitle=Best+Sellers&amp;rft.date=1996-06-16&amp;rft_id=https%3A%2F%2Fwww.nytimes.com%2F1996%2F06%2F16%2Fbooks%2Fbest-sellers-june-16-1996.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-8"><span><b><a href="#cite_ref-8">^</a></b></span> <span><cite id="CITEREFBernstein,_Evan2015">Bernstein, Evan (November 9, 2015). <a rel="nofollow" href="http://www.theskepticsguide.org/happy-carl-sagan-day">"Happy Carl Sagan Day!"</a>. <i><a href="https://en.wikipedia.org/wiki/The_Skeptics%27_Guide_to_the_Universe" title="The Skeptics' Guide to the Universe">The Skeptics' Guide to the Universe</a></i><span>. Retrieved <span>February 17,</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+Skeptics%27+Guide+to+the+Universe&amp;rft.atitle=Happy+Carl+Sagan+Day%21&amp;rft.date=2015-11-09&amp;rft.au=Bernstein%2C+Evan&amp;rft_id=http%3A%2F%2Fwww.theskepticsguide.org%2Fhappy-carl-sagan-day&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-9"><span><b><a href="#cite_ref-9">^</a></b></span> <span><cite id="CITEREFNovella,_Steven2009"><a href="https://en.wikipedia.org/wiki/Steven_Novella" title="Steven Novella">Novella, Steven</a> (November 9, 2009). <a rel="nofollow" href="http://theness.com/neurologicablog/index.php/carl-sagan-day/">"NeuroLogica Blog&nbsp;» Carl Sagan Day"</a>. <i><a href="https://en.wikipedia.org/wiki/New_England_Skeptical_Society" title="New England Skeptical Society">New England Skeptical Society</a></i><span>. Retrieved <span>February 17,</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=New+England+Skeptical+Society&amp;rft.atitle=NeuroLogica+Blog+%C2%BB+Carl+Sagan+Day&amp;rft.date=2009-11-09&amp;rft.au=Novella%2C+Steven&amp;rft_id=http%3A%2F%2Ftheness.com%2Fneurologicablog%2Findex.php%2Fcarl-sagan-day%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-10"><span><b><a href="#cite_ref-10">^</a></b></span> <span><cite id="CITEREFMeadon2009">Meadon, Michael (October 8, 2009). <a rel="nofollow" href="http://ionian-enchantment.blogspot.com/2009/10/books-iv.html">"Books IV"</a>. <i>ionian-enchantment.blogspot.com</i><span>. Retrieved <span>February 17,</span> 2017</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=ionian-enchantment.blogspot.com&amp;rft.atitle=Books+IV&amp;rft.date=2009-10-08&amp;rft.aulast=Meadon&amp;rft.aufirst=Michael&amp;rft_id=http%3A%2F%2Fionian-enchantment.blogspot.com%2F2009%2F10%2Fbooks-iv.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-11"><span><b><a href="#cite_ref-11">^</a></b></span> <span><cite id="CITEREFSwiss,_Jamy_Ian2013"><a href="https://en.wikipedia.org/wiki/Jamy_Ian_Swiss" title="Jamy Ian Swiss">Swiss, Jamy Ian</a> (May 9, 2013). <a rel="nofollow" href="https://www.youtube.com/watch?v=OPJ7jLAl1OM">"I, Skeptic"</a>. <a href="https://en.wikipedia.org/wiki/Northeast_Conference_on_Science_and_Skepticism" title="Northeast Conference on Science and Skepticism">Northeast Conference on Science and Skepticism</a><span>. Retrieved <span>February 17,</span> 2017</span> – via YouTube.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=I%2C+Skeptic&amp;rft.pub=Northeast+Conference+on+Science+and+Skepticism&amp;rft.date=2013-05-09&amp;rft.au=Swiss%2C+Jamy+Ian&amp;rft_id=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DOPJ7jLAl1OM&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-smithsonianmag.com-12"><span>^ <a href="#cite_ref-smithsonianmag.com_12-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-smithsonianmag.com_12-1"><sup><i><b>b</b></i></sup></a></span> <span><cite id="CITEREFTrachtman,_Paul1997">Trachtman, Paul (May 1997). <a rel="nofollow" href="https://wayback.archive-it.org/all/20090927103716/http://www.smithsonianmag.com/science-nature/book_may97___b.html">"Review of 'The Demon-Haunted World', 'Einstein, History, and Other Passions', 'The End of Science'<span></span>"</a>. <i>Smithsonian</i>. Archived from <a rel="nofollow" href="http://www.smithsonianmag.com/science-nature/book_may97___b.html">the original</a> on September 27, 2009.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Smithsonian&amp;rft.atitle=Review+of+%27The+Demon-Haunted+World%27%2C+%27Einstein%2C+History%2C+and+Other+Passions%27%2C+%27The+End+of+Science%27&amp;rft.date=1997-05&amp;rft.au=Trachtman%2C+Paul&amp;rft_id=http%3A%2F%2Fwww.smithsonianmag.com%2Fscience-nature%2Fbook_may97___b.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-13"><span><b><a href="#cite_ref-13">^</a></b></span> <span><cite id="CITEREFGorman1996">Gorman, James (April 7, 1996). <a rel="nofollow" href="https://archive.nytimes.com/www.nytimes.com/books/97/04/13/nnp/19395.html">"Invasion of the Body Snatchers: Review of <i>The Demon-Haunted World Science as a Candle in the Dark</i> by Carl Sagan"</a>. <i>The New York Times</i><span>. Retrieved <span>August 29,</span> 2024</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+New+York+Times&amp;rft.atitle=Invasion+of+the+Body+Snatchers%3A+Review+of+The+Demon-Haunted+World+Science+as+a+Candle+in+the+Dark+by+Carl+Sagan&amp;rft.date=1996-04-07&amp;rft.aulast=Gorman&amp;rft.aufirst=James&amp;rft_id=https%3A%2F%2Farchive.nytimes.com%2Fwww.nytimes.com%2Fbooks%2F97%2F04%2F13%2Fnnp%2F19395.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-nybooks.com-14"><span>^ <a href="#cite_ref-nybooks.com_14-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-nybooks.com_14-1"><sup><i><b>b</b></i></sup></a></span> <span><a href="https://en.wikipedia.org/wiki/Lewontin,_Richard_C." title="Lewontin, Richard C.">Lewontin, Richard C.</a> "Billions and Billions of Demons." <i>The New York Review of Books</i>, January 9, 1997, <a rel="nofollow" href="http://www.nybooks.com/articles/1997/01/09/billions-and-billions-of-demons/?lp_txn_id=997302">www.nybooks.com/articles/1997/01/09/billions-and-billions-of-demons/?lp_txn_id=997302</a>.</span>
</li>
<li id="cite_note-15"><span><b><a href="#cite_ref-15">^</a></b></span> <span>Dembart, Lee "Book Review / Non Fiction &nbsp;: For This Scientist, the Truth Is Out There: The Demon-Haunted World: Science as a Candle in the Dark by Carl Sagan; Random House $25, 452 Pages." <i>Los Angeles Times</i>, 18 Apr. 1996, <a rel="nofollow" href="http://www.latimes.com/archives/la-xpm-1996-04-18-ls-60022-story.html">www.latimes.com/archives/la-xpm-1996-04-18-ls-60022-story.html</a>.</span>
</li>
<li id="cite_note-16"><span><b><a href="#cite_ref-16">^</a></b></span> <span><cite id="CITEREFGorman1996">Gorman, James (April 7, 1996). <a rel="nofollow" href="https://archive.nytimes.com/www.nytimes.com/books/97/04/13/nnp/19395.html">"Invasion of the Body Snatchers: Review of <i>The Demon-Haunted World Science as a Candle in the Dark</i> by Carl Sagan"</a>. <i>The New York Times</i><span>. Retrieved <span>August 29,</span> 2024</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+New+York+Times&amp;rft.atitle=Invasion+of+the+Body+Snatchers%3A+Review+of+The+Demon-Haunted+World+Science+as+a+Candle+in+the+Dark+by+Carl+Sagan&amp;rft.date=1996-04-07&amp;rft.aulast=Gorman&amp;rft.aufirst=James&amp;rft_id=https%3A%2F%2Farchive.nytimes.com%2Fwww.nytimes.com%2Fbooks%2F97%2F04%2F13%2Fnnp%2F19395.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-17"><span><b><a href="#cite_ref-17">^</a></b></span> <span><cite id="CITEREFRadford2012">Radford, Tim (July 20, 2012). <a rel="nofollow" href="https://www.theguardian.com/science/2012/jul/20/demon-haunted-world-carl-sagan-review">"The Demon-Haunted World by Carl Sagan – review"</a>. <i>The Guardian</i>. <a href="https://en.wikipedia.org/wiki/ISSN_(identifier)" title="ISSN (identifier)">ISSN</a>&nbsp;<a rel="nofollow" href="https://search.worldcat.org/issn/0261-3077">0261-3077</a><span>. Retrieved <span>August 29,</span> 2024</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+Guardian&amp;rft.atitle=The+Demon-Haunted+World+by+Carl+Sagan+%E2%80%93+review&amp;rft.date=2012-07-20&amp;rft.issn=0261-3077&amp;rft.aulast=Radford&amp;rft.aufirst=Tim&amp;rft_id=https%3A%2F%2Fwww.theguardian.com%2Fscience%2F2012%2Fjul%2F20%2Fdemon-haunted-world-carl-sagan-review&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
<li id="cite_note-18"><span><b><a href="#cite_ref-18">^</a></b></span> <span><cite id="CITEREFSavov2017">Savov, Vlad (January 24, 2017). <a rel="nofollow" href="https://www.theverge.com/2017/1/24/14368306/carl-sagan-science-prediction-trump-2017">"The world needs Carl Sagan now more than ever"</a>. <i>The Verge</i><span>. Retrieved <span>August 29,</span> 2024</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=The+Verge&amp;rft.atitle=The+world+needs+Carl+Sagan+now+more+than+ever&amp;rft.date=2017-01-24&amp;rft.aulast=Savov&amp;rft.aufirst=Vlad&amp;rft_id=https%3A%2F%2Fwww.theverge.com%2F2017%2F1%2F24%2F14368306%2Fcarl-sagan-science-prediction-trump-2017&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></span>
</li>
</ol></div>

<ul><li><cite id="CITEREFAyala,_F._J._Ayala1996">Ayala, F. J. Ayala (July 26, 1996). <a rel="nofollow" href="https://www.science.org/doi/abs/10.1126/science.273.5274.442">"<i>The Demon-Haunted World</i>, reviewed"</a>. <i>Science</i>. Vol.&nbsp;273, no.&nbsp;5274. pp.&nbsp;<span>442–</span>444. <a href="https://en.wikipedia.org/wiki/Bibcode_(identifier)" title="Bibcode (identifier)">Bibcode</a>:<a rel="nofollow" href="https://ui.adsabs.harvard.edu/abs/1996Sci...273..442S">1996Sci...273..442S</a>. <a href="https://en.wikipedia.org/wiki/Doi_(identifier)" title="Doi (identifier)">doi</a>:<a rel="nofollow" href="https://doi.org/10.1126%2Fscience.273.5274.442">10.1126/science.273.5274.442</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Science&amp;rft.atitle=The+Demon-Haunted+World%2C+reviewed&amp;rft.volume=273&amp;rft.issue=5274&amp;rft.pages=442-444&amp;rft.date=1996-07-26&amp;rft_id=info%3Adoi%2F10.1126%2Fscience.273.5274.442&amp;rft_id=info%3Abibcode%2F1996Sci...273..442S&amp;rft.au=Ayala%2C+F.+J.+Ayala&amp;rft_id=https%3A%2F%2Fwww.science.org%2Fdoi%2Fabs%2F10.1126%2Fscience.273.5274.442&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></li>
<li><cite id="CITEREFDembart,_Lee1996">Dembart, Lee (April 18, 1996). <a rel="nofollow" href="https://www.latimes.com/archives/la-xpm-1996-04-18-ls-60022-story.html">"Book Review / Non Fiction&nbsp;: For This Scientist, the Truth Is Out There&nbsp;: <i>The Demon-Haunted World: Science as a Candle in the Dark</i> by Carl Sagan"</a>. <i>Los Angeles Times</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Los+Angeles+Times&amp;rft.atitle=Book+Review+%2F+Non+Fiction+%3A+For+This+Scientist%2C+the+Truth+Is+Out+There+%3A+The+Demon-Haunted+World%3A+Science+as+a+Candle+in+the+Dark+by+Carl+Sagan&amp;rft.date=1996-04-18&amp;rft.au=Dembart%2C+Lee&amp;rft_id=https%3A%2F%2Fwww.latimes.com%2Farchives%2Fla-xpm-1996-04-18-ls-60022-story.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></li>
<li><cite id="CITEREFGorman,_James1996">Gorman, James (April 7, 1996). <a rel="nofollow" href="https://www.nytimes.com/1996/04/07/books/invasion-of-the-body-snatchers.html">"Invasion of the Body Snatchers"</a>. <i>The New York Times</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=The+New+York+Times&amp;rft.atitle=Invasion+of+the+Body+Snatchers&amp;rft.date=1996-04-07&amp;rft.au=Gorman%2C+James&amp;rft_id=https%3A%2F%2Fwww.nytimes.com%2F1996%2F04%2F07%2Fbooks%2Finvasion-of-the-body-snatchers.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></li>
<li><cite id="CITEREFSchult,_Jeff1996">Schult, Jeff (April 1996). <a rel="nofollow" href="http://tftb.com/sagan.html">"<i>The Case for Science</i> (Carl Sagan: <i>The Demon-Haunted World – Science as a Candle in the Dark</i>)"</a>. <i>American Reporter</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=American+Reporter&amp;rft.atitle=The+Case+for+Science+%28Carl+Sagan%3A+The+Demon-Haunted+World+%E2%80%93+Science+as+a+Candle+in+the+Dark%29&amp;rft.date=1996-04&amp;rft.au=Schult%2C+Jeff&amp;rft_id=http%3A%2F%2Ftftb.com%2Fsagan.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AThe+Demon-Haunted+World"></span></li></ul>


<!-- 
NewPP limit report
Parsed by mw‐api‐int.eqiad.main‐5cb4649957‐2bkk6
Cached time: 20250921075037
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.634 seconds
Real time usage: 0.857 seconds
Preprocessor visited node count: 4036/1000000
Revision size: 23885/2097152 bytes
Post‐expand include size: 79071/2097152 bytes
Template argument size: 4727/2097152 bytes
Highest expansion depth: 16/100
Expensive parser function count: 7/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 84836/5000000 bytes
Lua time usage: 0.417/10.000 seconds
Lua memory usage: 26723046/52428800 bytes
Number of Wikibase entities loaded: 1/500
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  776.241      1 -total
 18.14%  140.784      1 Template:Infobox_book
 17.55%  136.220      4 Template:Annotated_link
 15.54%  120.618      1 Template:Infobox
 13.29%  103.142      1 Template:Reflist
 12.18%   94.584      3 Template:Navbox
 12.06%   93.642      1 Template:Carl_Sagan
  9.22%   71.575      1 Template:Short_description
  7.35%   57.082      1 Template:ISBNT
  6.03%   46.777      2 Template:Citation_needed
-->

<!-- Saved in parser cache with key enwiki:pcache:515662:|#|:idhash:canonical and timestamp 20250921075037 and revision id 1304072514. Rendering was triggered because: api-parse
 -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[When I say "alphabetical order", I mean "alphabetical order" (287 pts)]]></title>
            <link>https://sebastiano.tronto.net/blog/2025-09-28-alphabetic-order/</link>
            <guid>45404022</guid>
            <pubDate>Sun, 28 Sep 2025 13:00:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sebastiano.tronto.net/blog/2025-09-28-alphabetic-order/">https://sebastiano.tronto.net/blog/2025-09-28-alphabetic-order/</a>, See on <a href="https://news.ycombinator.com/item?id=45404022">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p>Last month I have been on a multi-day hike with my dad. Each of us took
many pictures, and when we came back we put them all in a shared folder.
We both have Android phones, and the naming scheme used for our pictures
was the same: <code>IMG_YYYYMMDD_HHmmss</code> followed maybe by some other numbers
and then a <code>.jpg</code>. Here <code>YYYY</code> stands for the year, <code>MM</code> for month and
so on, so that sorting the pictures in alphabetical order is the same as
sorting them by date.</p>
<p>Or so I thought. Strangely, when I looked at the files from my dad’s
Windows PC, they were not sorted correctly: all the pictures took
with my phone came first, followed by all the pictures took by him.
I thought this was surely some weird Microsoft bug - after using
Windows 11 at work for a while, I would not be surprised if you
told me their file explorer can’t figure out how to sort strings.</p>
<p>But then I looked at the same files in a shared Google Drive folder,
and again they were in the wrong order:</p>
<p><img src="https://sebastiano.tronto.net/blog/2025-09-28-alphabetic-order/drive.png" alt="Screenshot from Google Drive"></p>
<p>As you can see, the picture taken at 5:54 (with my dad’s phone) comes
before the one taken at 9:20 (also with my dad’s phone), but after the
one taken at 12:11 (with my phone).</p>
<p>Weird. Well, maybe Microsoft <em>and</em> Google got this wrong. But
that seems unlikely.</p>
<p>Indeed, KDE’s Dolphin file manager does the same thing:</p>
<p><img src="https://sebastiano.tronto.net/blog/2025-09-28-alphabetic-order/dolphin.png" alt="Screenshot from Dolphin"></p>
<p>I’ll spare you the screenshots, but Gnome and both the file managers
that I have on my phone also get the alphabetical order wrong.</p>
<p>At this point I thought that maybe one of the two phones is using some
weird alternative unicode character instead of the underscore <code>_</code>. Really,
I could not see any other explanation. But nope, this is not it, because
the good old <code>ls</code> sorts my files correctly:</p>
<pre><code>$ ls -l

total 218572
-rw-r--r-- 1 seba seba 1866185 Aug 28 18:51 IMG_20250820_055436307.jpg
-rw-r--r-- 1 seba seba 4749899 Aug 28 18:50 IMG_20250820_092016029_HDR.jpg
-rw-r--r-- 1 seba seba 6201609 Aug 28 18:52 IMG_20250820_092440966_HDR.jpg
-rw-r--r-- 1 seba seba 7694802 Aug 28 18:51 IMG_20250820_092832138_HDR.jpg
-rw-r--r-- 1 seba seba 1536520 Aug 20 09:57 IMG_20250820_095716_607.jpg
-rw-r--r-- 1 seba seba 1054553 Aug 20 10:38 IMG_20250820_103857_991.jpg
-rw-r--r-- 1 seba seba  965353 Aug 20 10:39 IMG_20250820_103903_811.jpg
(and so on)
</code></pre>
<p>This was consistent among the couple of Linux distros I use, as well
as my OpenBSD server. On the one hand this is good: not <em>every</em> single
piece of software fucks up something as basic as string sorting. On the
other hand, this makes it harder to debug what the fuck is going on with
all the other file managers.</p>
<p>It took me more than a month to figure this one out. Tell me, which
file do you think comes first in alphabetical order, <code>file-9.txt</code> or
<code>file-10.txt</code>?</p>
<p>Of course, the user who named those files probably wants <code>file-9.txt</code> to
come before <code>file-10.txt</code>. But <code>1</code> is smaller than <code>9</code>, so <code>file-10.txt</code>
should be first in alphabetical order. Everyone understands that, and
soon people learn to put enough leading zeros if they want their files
to stay sorted the way they like.</p>
<p>Well, apparently all these operating systems have decided that no,
users are too dumb and they cannot possibly understand what alphabetical
order means.  So when you ask them to sort your files alphabetically,
they don’t. Instead, they decide that if some piece of the file name is
a number, the real numerical value must be used.</p>
<p>I don’t know when this became the norm, to be honest I have not used a
normal graphical file manager in a long time.</p>
<p><em>I know you asked for the files to be sorted in alphabetical order,
but you don’t want <code>file-10.txt</code> to come before <code>file-9.txt</code>, do
you? No, I know you don’t. I am not even going to ask you, your
mushy human brain is too small to comprehend the intricacies of
such a question. I’ll spare you the thinking.</em></p>
<p>So it turns out that my dad’s phone wrote the milliseconds in the file
name right after the seconds, while mine added an extra underscore to
separate them from the seconds.  Which in my mind it should not have
mattered, because alphabetically they should still have been sorted
correctly to the second. But with this “modern” interpretation of the
alphabetical order, the files without the extra separator in the name had
a much higher number, so they come last.</p>
<p>Now that I know what the issue is, I can solve it by renaming the files
with a consistent scheme. I have also found a setting to fix Dolphin’s
behavior, but it was very much buried into its many configuration
options. And I would rather not have to change this setting in every
application I use, assuming they even allow it.</p>
<p>I miss the time when computers did what you told them to, instead of
trying to read your mind.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Privacy Badger is a free browser extension made by EFF to stop spying (493 pts)]]></title>
            <link>https://privacybadger.org/</link>
            <guid>45404021</guid>
            <pubDate>Sun, 28 Sep 2025 12:59:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://privacybadger.org/">https://privacybadger.org/</a>, See on <a href="https://news.ycombinator.com/item?id=45404021">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="faq-body">
    
      <h3 id="What-is-Privacy-Badger">
        <a href="#What-is-Privacy-Badger">What is Privacy Badger?</a>
      </h3>
      <p>Privacy Badger is a browser extension that stops advertisers and other third-party trackers from secretly tracking where you go and what pages you look at on the web.  If an advertiser seems to be tracking you across multiple websites without your permission, Privacy Badger automatically blocks that advertiser from loading any more content in your browser.  To the advertiser, it’s like you suddenly disappeared.</p>

    
      <h3 id="How-is-Privacy-Badger-different-from-Disconnect,-Adblock-Plus,-Ghostery,-and-other-blocking-extensions">
        <a href="#How-is-Privacy-Badger-different-from-Disconnect%2c-Adblock-Plus%2c-Ghostery%2c-and-other-blocking-extensions">How is Privacy Badger different from other blocking extensions?</a>
      </h3>
      <p>Privacy Badger was born out of our desire to be able to recommend a single extension that would:</p>
<ul>
<li>Automatically analyze and block any tracker or ad that violated the principle of user consent</li>
<li>Function well without any settings, knowledge, or configuration by the user</li>
<li>Use algorithmic methods to decide what is and isn’t tracking</li>
<li>Be produced by an organization that is unambiguously working for its users rather than for profit</li>
</ul>
<p>As a result, Privacy Badger differs from traditional ad-blocking extensions in two key ways. First, while most other blocking extensions prioritize blocking ads, Privacy Badger doesn’t block ads unless they happen to be tracking you; in fact, one of our goals is to incentivize advertisers to adopt better privacy practices.</p>
<p>Second, most other blockers rely on a human-curated list of domains or URLs to block. Privacy Badger is an algorithmic tracker blocker – we define what “tracking” looks like, and then Privacy Badger blocks or restricts domains that it observes tracking in the wild. What is and isn’t considered a tracker is entirely based on how a specific domain acts, not on human judgment.</p>
<p>Privacy Badger sends the <a href="https://globalprivacycontrol.org/">Global Privacy Control</a> signal to opt you out of data sharing and selling, and the <a href="https://www.eff.org/issues/do-not-track">Do Not Track</a> signal to tell companies not to track you. If trackers ignore these signals, Privacy Badger will learn to block them.</p>
<p>Beyond this, Privacy Badger comes with other advantages like cookie blocking, <a href="#How-does-Privacy-Badger-handle-social-media-widgets">click-to-activate placeholders</a> for potentially useful tracker widgets (video players, comments widgets, etc.), and outgoing link click tracking removal on <a href="https://www.eff.org/deeplinks/2018/05/privacy-badger-rolls-out-new-ways-fight-facebook-tracking">Facebook</a> and <a href="https://www.eff.org/deeplinks/2018/10/privacy-badger-now-fights-more-sneaky-google-tracking">Google</a>.</p>
<p>By using Privacy Badger, you support the <a href="https://www.eff.org/">Electronic Frontier Foundation</a> and help fight for a better Web for everybody.</p>

    
      <h3 id="Who-makes-Privacy-Badger">
        <a href="#Who-makes-Privacy-Badger">Who makes Privacy Badger?</a>
      </h3>
      <p>Privacy Badger was created by the <a href="https://www.eff.org/">Electronic Frontier Foundation</a>, a nonprofit organization that protects your privacy and free expression online. We make free tools like Privacy Badger, publish educational guides, testify before lawmakers about technology, and fight for the public interest in court—all thanks to support from EFF’s members. If you want a better internet and a strong democracy, <a href="https://supporters.eff.org/donate/support-privacy-badger">join the fight</a> against creepy online surveillance.</p>

    
      <h3 id="How-does-Privacy-Badger-work">
        <a href="#How-does-Privacy-Badger-work">How does Privacy Badger work?</a>
      </h3>
      <p>When you view a webpage, that page will often be made up of content from many different sources. For example, a news webpage might load the actual article from the news company, ads from an ad company, and the comments section from a different company that’s been contracted out to provide that service.</p>
<p>Privacy Badger keeps track of all of this. If the same source seems to be tracking across different websites, then Privacy Badger springs into action, telling the browser not to load any more content from that source. And when your browser stops loading content from a source, that source can no longer track you. Voila!</p>
<p>At a more technical level, Privacy Badger keeps track of the “third party” domains that embed images, scripts and advertising in the pages you visit. Privacy Badger looks for tracking techniques like uniquely identifying cookies, local storage “supercookies,” and canvas fingerprinting. If it observes the same third-party host tracking on three separate sites, Privacy Badger will automatically disallow content from that third-party tracker.</p>
<p>By default, Privacy Badger receives <a href="https://www.eff.org/deeplinks/2023/10/privacy-badger-learns-block-ever-more-trackers">periodic learning updates</a> from <a href="https://github.com/EFForg/badger-sett">Badger Sett</a>, our Badger training project. This “remote learning” automatically discovers trackers present on thousands of the most popular sites on the Web.</p>

    
      <h3 id="What-is-a-third-party-tracker">
        <a href="#What-is-a-third-party-tracker">What is a third party tracker?</a>
      </h3>
      <p>When you visit a webpage parts of the page may come from domains and servers other than the one you asked to visit. This is an essential feature of <a href="https://en.wikipedia.org/wiki/Hypertext">hypertext</a>. On the modern Web, embedded images and code often use cookies and other methods to track your browsing habits — often to display advertisements. The domains that do this are called “third party trackers”, and you can read more about how they work <a href="https://www.eff.org/wp/behind-the-one-way-mirror">here</a>.</p>

    
      <h3 id="What-do-the-red,-yellow-and-green-sliders-in-the-Privacy-Badger-menu-mean">
        <a href="#What-do-the-red%2c-yellow-and-green-sliders-in-the-Privacy-Badger-menu-mean">What do the red, yellow and green sliders in the Privacy Badger menu mean?</a>
      </h3>
      <p>Red means that content from this third party domain has been completely disallowed.</p>
<p>Yellow means that the third party domain appears to be trying to track you, but it is on Privacy Badger’s cookie-blocking “yellowlist” of third party domains that, when analyzed, seemed to be necessary for Web functionality. In that case, Privacy Badger will load content from the domain but will try to screen out third party cookies and referrers from it.</p>
<p>Green means “no action”; Privacy Badger will leave the domain alone.</p>

    
      <h3 id="Why-does-Privacy-Badger-block-ads">
        <a href="#Why-does-Privacy-Badger-block-ads">Why does Privacy Badger block ads?</a>
      </h3>
      <p>Actually, nothing in the Privacy Badger code is specifically written to block ads. Rather, it focuses on disallowing any visible or invisible “third party” scripts or images that appear to be tracking you even though you specifically denied consent by sending <a href="https://www.eff.org/issues/do-not-track">Do Not Track</a> and <a href="https://globalprivacycontrol.org/">Global Privacy Control</a> signals. It just so happens that most (but not all) of these third party trackers are advertisements. When you see an ad, the ad sees you, and can track you. Privacy Badger is here to stop that.</p>

    
      <h3 id="Why-doesn't-Privacy-Badger-block-all-ads">
        <a href="#Why-doesn%27t-Privacy-Badger-block-all-ads">Why doesn't Privacy Badger block all ads?</a>
      </h3>
      <p>Because Privacy Badger is primarily a privacy tool, not an ad blocker. Our aim is not to block ads, but to prevent non-consensual invasions of people’s privacy because we believe they are inherently objectionable. We also want to create incentives for advertising companies to do the right thing. Of course, if you really dislike ads, you can also install a traditional ad blocker.</p>

    
      <h3 id="What-is-Global-Privacy-Control">
        <a href="#What-is-Global-Privacy-Control">What is Global Privacy Control (GPC)?</a>
      </h3>
      <p><a href="https://globalprivacycontrol.org/">Global Privacy Control (GPC)</a> is a new specification that allows users to tell companies they’d like to opt out of having their data shared or sold. By default, Privacy Badger sends the GPC signal to every company you interact with alongside the Do Not Track (DNT) signal.</p>
<p>What’s the difference? Do Not Track is meant to tell companies that you don’t want to be tracked in any way (learn more about what we mean by “tracking” <a href="https://www.eff.org/pages/understanding-effs-do-not-track-policy-universal-opt-out-tracking">here</a>). Privacy Badger gives third-party companies a chance to comply with DNT by adopting <a href="https://www.eff.org/dnt-policy/">our DNT policy</a>, and blocks those that look like they’re tracking you anyway.</p>
<p>When DNT was developed, many websites simply ignored users’ requests not to be tracked. That’s why Privacy Badger has to act as an enforcer: trackers that don’t want to comply with your wishes get blocked. Today, users in many jurisdictions have the legal right to opt out of some kinds of tracking. That’s where GPC comes in.</p>
<p>GPC is meant to be a legally-binding request to all companies in places with applicable privacy laws. For example, <a href="https://theccpa.org/">the California Consumer Privacy Act</a> gives California residents the right to opt out of having their data sold. By sending the GPC signal, Privacy Badger is telling companies that you would like to exercise your rights.</p>
<p>The CCPA and other laws are <a href="https://advocacy.consumerreports.org/press_release/consumer-reports-study-finds-significant-obstacles-to-exercising-california-privacy-rights/">not perfect</a>, which is why Privacy Badger uses both approaches. It asks websites to respect your privacy, and it blocks known trackers from loading at all.</p>

    
      <h3 id="What-about-tracking-by-the-sites-I-actively-visit,-like-NYTimes.com-or-Facebook.com">
        <a href="#What-about-tracking-by-the-sites-I-actively-visit%2c-like-NYTimes.com-or-Facebook.com">What about tracking by the sites I actively visit, like NYTimes.com or Facebook.com?</a>
      </h3>
      <p>At present, Privacy Badger primarily protects you against tracking by third party sites. As far as privacy protections for “first party” sites (sites that you visit directly), Privacy Badger removes outgoing link click tracking on <a href="https://www.eff.org/deeplinks/2018/05/privacy-badger-rolls-out-new-ways-fight-facebook-tracking">Facebook</a> and <a href="https://www.eff.org/deeplinks/2018/10/privacy-badger-now-fights-more-sneaky-google-tracking">Google</a>. We plan on adding more first party privacy protections in the future.</p>
<p>We are doing things in this order because the most scandalous, intrusive and objectionable form of online tracking is that conducted by companies you’ve <a href="https://lumapartners.com/content/lumascapes/display-ad-tech-lumascape/">often never heard of</a> and have no relationship with. First and foremost, Privacy Badger is there to enforce Do Not Track against these domains by providing the technical means to restrict access to their tracking scripts and images. The right policy for whether nytimes.com, facebook.com or google.com can track you <em>when you visit that site</em> – and the technical task of preventing it – is more complicated because often tracking is interwoven with the features the site offers.</p>

    
      <h3 id="Does-Privacy-Badger-contain-a-list-of-blocked-sites">
        <a href="#Does-Privacy-Badger-contain-a-list-of-blocked-sites">Does Privacy Badger contain a list of blocked sites?</a>
      </h3>
      <p>Unlike other blocking tools, we have not made decisions about which sites to block, but rather about which behavior is objectionable. Domains will only be blocked if Privacy Badger observes the domain collecting unique identifiers after it was sent Do Not Track and Global Privacy Control signals.</p>
<p>Privacy Badger <em>does</em> contain a “<a href="https://github.com/EFForg/privacybadger/blob/master/src/data/pbconfig.json">yellowlist</a>” of some sites that are known to provide essential third party resources; those sites show up as yellow and have their cookies blocked rather than being blocked entirely. This is a compromise with practicality, and in the long term we hope to phase out the yellowlist as these third parties begin to <a href="https://www.eff.org/dnt-policy">explicitly commit to respecting Do Not Track</a>. The criteria for including a domain on the yellowlist can be <a href="https://github.com/EFForg/privacybadger/blob/master/doc/yellowlist-criteria.md">found here</a>.</p>

    
      <h3 id="How-was-the-cookie-blocking-yellowlist-created">
        <a href="#How-was-the-cookie-blocking-yellowlist-created">How was the cookie blocking yellowlist created?</a>
      </h3>
      <p>The initial list of domains that should be cookie blocked rather than blocked entirely was derived from a <a href="https://jonathanmayer.org/papers_data/bau13.pdf">research project</a> on classifying third party domains as trackers and non-trackers. We will make occasional adjustments to it as necessary. If you find domains that are under- or over-blocked, please <a href="https://github.com/EFForg/privacybadger/issues">file a bug</a> on GitHub.</p>

    
      <h3 id="Does-Privacy-Badger-prevent-fingerprinting">
        <a href="#Does-Privacy-Badger-prevent-fingerprinting">Does Privacy Badger prevent fingerprinting?</a>
      </h3>
      <p>Browser fingerprinting is an extremely subtle and problematic method of tracking, which we documented with the <a href="https://coveryourtracks.eff.org/">Cover Your Tracks project</a>. Privacy Badger can detect <a href="https://www.propublica.org/article/meet-the-online-tracking-device-that-is-virtually-impossible-to-block">canvas-based fingerprinting</a>, and will block third party domains that use it. Detection of other forms of fingerprinting and protections against first-party fingerprinting are ongoing projects. Of course, once a domain is blocked by Privacy Badger, it will no longer be able to fingerprint you.</p>

    
      <h3 id="Does-Privacy-Badger-consider-every-cookie-to-be-a-tracking-cookie">
        <a href="#Does-Privacy-Badger-consider-every-cookie-to-be-a-tracking-cookie">Does Privacy Badger consider every cookie to be a tracking cookie?</a>
      </h3>
      <p>No. Privacy Badger analyzes the cookies from each site; unique cookies that contain tracking IDs are disallowed, while “low entropy” cookies that perform other functions are allowed. For instance a cookie like LANG=fr that encodes the user’s language preference, or a cookie that preserves a very small amount of information about ads the user has been shown, would be allowed provided that individual or small groups of users’ reading habits could not be collected with them.</p>

    
      <h3 id="Will-you-be-supporting-any-other-browsers-besides-Chrome-Firefox-Opera">
        <a href="#Will-you-be-supporting-any-other-browsers-besides-Chrome-Firefox-Opera">Will you be supporting any other browsers besides Chrome, Firefox, Edge and Opera?</a>
      </h3>
      <p>We are working towards <a href="https://github.com/EFForg/privacybadger/issues/549#issuecomment-1209648999">Safari on macOS</a> support. <a href="https://github.com/EFForg/privacybadger/issues/549#issuecomment-744583479">Safari on iOS</a> seems to lack certain extension capabilities required by Privacy Badger to function properly.</p>
<p>Chrome on Android does not support extensions. To use Privacy Badger on Android, install <a href="https://play.google.com/store/apps/details?id=org.mozilla.firefox">Firefox for Android</a>.</p>
<p>Privacy Badger does not work with <a href="https://support.microsoft.com/en-us/help/4533505/what-is-microsoft-edge-legacy">Microsoft Edge Legacy</a>. Please switch to the new <a href="https://www.microsoft.com/en-us/edge">Microsoft Edge</a> browser.</p>

    
      <h3 id="Can-I-download-Privacy-Badger-directly-from-eff.org">
        <a href="#Can-I-download-Privacy-Badger-directly-from-eff.org">Can I download Privacy Badger directly from eff.org?</a>
      </h3>
      <p>If you use Google Chrome, you have to install extensions from Chrome Web Store. To install Privacy Badger in Chrome, visit <a href="https://chromewebstore.google.com/detail/privacy-badger/pkehgijcmpdhfbdbbnkijodmdjhbjlgp">Privacy Badger’s Chrome Web Store listing</a> and click the “Add to Chrome” button there.</p>
<p>Otherwise, you can use the following links to get the latest version of Privacy Badger directly from eff.org:</p>
<ul>
<li>Firefox: <a href="https://www.eff.org/files/privacy-badger-latest.xpi">https://www.eff.org/files/privacy-badger-latest.xpi</a></li>
<li>Chromium: <a href="https://www.eff.org/files/privacy_badger-chrome.crx">https://www.eff.org/files/privacy_badger-chrome.crx</a></li>
</ul>

    
      <h3 id="-I-am-an-online-advertising-tracking-company.--How-do-I-stop-Privacy-Badger-from-blocking-me">
        <a href="#-I-am-an-online-advertising-tracking-company.--How-do-I-stop-Privacy-Badger-from-blocking-me">I run a domain that uses cookies or other tracking. How do I stop Privacy Badger from blocking me?</a>
      </h3>
      <p>One way is to stop tracking users who have turned on Global Privacy Control or Do Not Track signals (i.e., stop collecting cookies, supercookies or fingerprints from them). Privacy Badger will stop learning to block that domain. The next version of Privacy Badger to ship with an updated pre-trained list will no longer include that domain in the list. Most Privacy Badger users will then update to that list.</p>
<p>You can also unblock yourself by promising to meaningfully respect the Do Not Track signal. To do so, post a <em>verbatim</em> copy of <a href="https://www.eff.org/dnt-policy">EFF’s Do Not Track policy</a> to the URL <a href="https://example.com/.well-known/dnt-policy.txt">https://example.com/.well-known/dnt-policy.txt</a>, where “example.com” is replaced by your domain. Posting EFF’s DNT policy on a domain is a promise of compliance with EFF’s DNT Policy by that domain.</p>
<p>If your domain is compliant with EFF’s DNT policy and declares this compliance, most Privacy Badgers will see this declaration the next time they encounter your domain. Also, the next version of Privacy Badger to ship with an updated pre-trained list will probably include your declaration of compliance in the list.</p>
<p>Note that the domain must support HTTPS, to protect against tampering by network attackers. The path contains “.well-known” per <a href="https://tools.ietf.org/html/rfc5785">RFC 5785</a>. Also note that you must post a copy of the policy at each compliant subdomain you control. For example, if you wish to declare compliance by both sub1.example.com and sub2.example.com, you must post EFF’s DNT policy on each domain.</p>

    
      <h3 id="Where-can-I-find-general-information-about-Privacy-Badger-that-I-can-use-for-a-piece-I'm-writing">
        <a href="#Where-can-I-find-general-information-about-Privacy-Badger-that-I-can-use-for-a-piece-I%27m-writing">Where can I find general information about Privacy Badger that I can use for a piece I'm writing?</a>
      </h3>
      <p>Glad you asked! Check out this <a href="https://privacybadger.org/files/pb_journalist_1_pager.pdf">downloadable press kit</a> that we’ve put together.</p>

    
      <h3 id="admin-deployment-and-configuration">
        <a href="#admin-deployment-and-configuration">As an administrator, how do I configure Privacy Badger on my managed devices?</a>
      </h3>
      <p>Please see our <a href="https://github.com/EFForg/privacybadger/blob/master/doc/admin-deployment.md">enterprise deployment and configuration</a> document.</p>

    
      <h3 id="What-is-the-Privacy-Badger-license--Where-is-the-Privacy-Badger-source-code">
        <a href="#What-is-the-Privacy-Badger-license--Where-is-the-Privacy-Badger-source-code">What is the Privacy Badger license? Where is the Privacy Badger source code?</a>
      </h3>
      <p>Privacy Badger’s <a href="https://github.com/EFForg/privacybadger">source code</a> is licensed under <a href="https://spdx.org/licenses/GPL-3.0-or-later.html">GPLv3+</a>. This website’s <a href="https://github.com/EFForg/privacybadger-website">source code</a> is licensed under <a href="https://spdx.org/licenses/AGPL-3.0-or-later.html">AGPLv3+</a>.</p>

    
      <h3 id="How-can-I-support-Privacy-Badger">
        <a href="#How-can-I-support-Privacy-Badger">How can I support Privacy Badger?</a>
      </h3>
      <p>Thanks for asking! Individual donations make up about half of EFF’s support, which gives us the freedom to work on user-focused projects. If you want to support the development of Privacy Badger and other projects like it, you can <a href="https://supporters.eff.org/donate/support-privacy-badger">throw us a few dollars here</a>. Thank you.</p>
<p>If you want to help directly with the project, we appreciate that as well. Please see <a href="https://github.com/EFForg/privacybadger/blob/master/CONTRIBUTING.md">Privacy Badger’s CONTRIBUTING document</a> for ways to get started.</p>

    
      <h3 id="How-does-Privacy-Badger-handle-social-media-widgets">
        <a href="#How-does-Privacy-Badger-handle-social-media-widgets">How does Privacy Badger handle social media widgets?</a>
      </h3>
      <p>Social media widgets (such as the Facebook Like button) often track your reading habits. Even if you don’t click them, the social media companies often see exactly which pages you’re seeing the widget on. When blocking social buttons and other potentially useful (video, audio, comments) widgets, <a href="https://www.eff.org/deeplinks/2024/01/privacy-badger-puts-you-control-widgets">Privacy Badger can replace them</a> with click-to-activate placeholders. You will not be tracked by these replacements unless you explicitly choose to click them.</p>

    
      <h3 id="How-do-I-uninstall-remove-Privacy-Badger">
        <a href="#How-do-I-uninstall-remove-Privacy-Badger">How do I uninstall/remove Privacy Badger?</a>
      </h3>
      <p>Firefox: See the <a href="https://support.mozilla.org/en-US/kb/disable-or-remove-add-ons#w_disabling-and-removing-extensions">Disable or remove Add-ons</a> Mozilla help page.</p>
<p>Chrome: See the <a href="https://support.google.com/chrome_webstore/answer/2664769?hl=en">Install and manage extensions</a> Chrome Web Store help page.</p>
<p>Edge: See the <a href="https://support.microsoft.com/en-us/help/4027935/microsoft-edge-add-or-remove-browser-extensions">Add or remove browser add-ons, extensions, and toolbars</a> Microsoft help page.</p>

    
      <h3 id="Is-Privacy-Badger-compatible-with-other-extensions,-including-other-adblockers">
        <a href="#Is-Privacy-Badger-compatible-with-other-extensions%2c-including-other-adblockers">Is Privacy Badger compatible with other extensions, including adblockers?</a>
      </h3>
      <p>Privacy Badger should be compatible with other extensions.</p>
<p>While there is likely to be overlap between the various manually-edited advertising/tracker lists and Privacy Badger, unlike adblockers, Privacy Badger automatically learns to block trackers based on their behavior. This means that Privacy Badger may learn to block trackers your adblocker doesn’t know about.</p>

    
      <h3 id="Is-Privacy-Badger-compatible-with-Firefox's-built-in-content-blocking">
        <a href="#Is-Privacy-Badger-compatible-with-Firefox%27s-built-in-content-blocking">Is Privacy Badger compatible with Firefox's built-in privacy protections?</a>
      </h3>
      <p>It’s fine to use Firefox’s built-in content blocking (<a href="https://blog.mozilla.org/en/products/firefox/firefox-now-available-with-enhanced-tracking-protection-by-default/">Enhanced Tracking Protection</a> or ETP) and Privacy Badger together. While there is overlap between Firefox’s tracker lists and Privacy Badger, Privacy Badger automatically learns to block trackers based on their behavior. This means that Privacy Badger’s automatically-generated and regularly updated blocklist contains trackers not found in Firefox’s human-generated lists. Additionally, <a href="https://support.mozilla.org/en-US/kb/enhanced-tracking-protection-firefox-desktop#w_what-enhanced-tracking-protection-blocks">Firefox does not fully block “tracking content”</a> in regular (non-“private”) windows by default.</p>
<p>What about Firefox’s <a href="https://blog.mozilla.org/en/products/firefox/firefox-rolls-out-total-cookie-protection-by-default-to-all-users-worldwide/">Total Cookie Protection</a> (dynamic First Party Isolation or dFPI)? Total Cookie Protection works by keeping third-party cookies isolated to the site they were set on. However, if unblocked, trackers can still use techniques like <a href="https://arxiv.org/abs/2208.12370">first-party cookie syncing</a> and <a href="https://securehomes.esat.kuleuven.be/~gacar/persistent/">browser fingerprinting</a>. They can track your IP address, or they can use some combination of these techniques. Trackers <a href="https://freedom-to-tinker.com/2020/07/14/can-the-exfiltration-of-personal-data-by-web-trackers-be-stopped/">harvest sensitive information</a>, and <a href="https://en.wikipedia.org/wiki/Malvertising">serve as vectors for malware</a>. Not to mention, unblocked trackers slow down websites and waste your bandwidth.</p>
<p>Keep in mind that Privacy Badger is <a href="#How-is-Privacy-Badger-different-from-Disconnect%2c-Adblock-Plus%2c-Ghostery%2c-and-other-blocking-extensions">not just a tracker blocker</a>.</p>

    
      <h3 id="Why-does-my-browser-connect-to-fastly.com-IP-addresses-on-startup-after-installing-Privacy-Badger">
        <a href="#Why-does-my-browser-connect-to-fastly.com-IP-addresses-on-startup-after-installing-Privacy-Badger">Why does my browser connect to fastly.com IP addresses on startup after installing Privacy Badger?</a>
      </h3>
      <p>EFF uses Fastly to host EFF’s Web resources: Fastly is EFF’s CDN. Privacy Badger pings the CDN for the following resources to ensure that the information in them is fresh even if there hasn’t been a new Privacy Badger release in a while:</p>
<ul>
<li><a href="https://www.eff.org/files/pbconfig.json">https://www.eff.org/files/pbconfig.json</a></li>
</ul>
<p>EFF does not set cookies or retain IP addresses for these queries.</p>

    
      <h3 id="Is-Privacy-Badger-spying-on-me">
        <a href="#Is-Privacy-Badger-spying-on-me">Why does Privacy Badger need access to my data for all websites?</a>
      </h3>
      <p>When you install Privacy Badger, your browser warns that Privacy Badger can “access your data for all websites” (in Firefox), or “read and change all your data on the websites you visit” (in Chrome). You are right to be alarmed. You should only install extensions made by organizations you trust.</p>
<p>Privacy Badger requires these permissions to do its job of automatically detecting and blocking trackers on all websites you visit. We are not ironically (or unironically) spying on you. For more information, see our <a href="https://github.com/EFForg/privacybadger/blob/master/doc/permissions.md">Privacy Badger extension permissions explainer</a>.</p>
<p>Note that the extension permissions warnings only cover what the extension has access to, not what the extension actually does with what it has access to (such as whether the extension secretly uploads your browsing data to its servers). Privacy Badger will never share data about your browsing unless you choose to share it (by filing a broken site report). For more information, see EFF’s <a href="https://www.eff.org/code/privacy/policy">Privacy Policy for Software</a>.</p>

    
      <h3 id="Is-Privacy-Badger-breaking-YouTube">
        <a href="#Is-Privacy-Badger-breaking-YouTube">Why aren't videos loading on YouTube? Why isn't Privacy Badger blocking ads on YouTube?</a>
      </h3>
      <p>Is YouTube not working? Try <a href="#I-found-a-bug%21-What-do-I-do-now">disabling Privacy Badger</a> on YouTube. If that resolves the issue, see if re-enabling Privacy Badger breaks YouTube again. If YouTube goes back to not working, please <a href="#I-found-a-bug%21-What-do-I-do-now">tell us</a> so we can look into what’s going on.</p>
<p>Are you surprised that ads aren’t being blocked on YouTube? Privacy Badger is primarily a privacy tool, <a href="#Why-doesn%27t-Privacy-Badger-block-all-ads">not an ad blocker</a>. When you <a href="#What-about-tracking-by-the-sites-I-actively-visit%2c-like-NYTimes.com-or-Facebook.com">visit YouTube directly</a>, Privacy Badger does not block ads on YouTube because YouTube does not use <a href="#What-is-a-third-party-tracker">“third party” trackers</a>. If you really dislike ads, you can also install a traditional ad blocker.</p>

    
      <h3 id="I-found-a-bug!-What-do-I-do-now">
        <a href="#I-found-a-bug%21-What-do-I-do-now">I need help! I found a bug! What do I do now?</a>
      </h3>
      <p>If a website isn’t working like it should, you can disable Privacy Badger just for that site, leaving Privacy Badger enabled and protecting you everywhere else. To do so, navigate to the site with the problem, click on Privacy Badger’s icon in your browser toolbar, and click the “<strong>Disable for this site</strong>” button in Privacy Badger’s popup. You can also let us know about broken sites using the “<strong>Report broken site</strong>” button.</p>
<p>To get help or to report bugs, please email <a href="mailto:extension-devs@eff.org">extension-devs@eff.org</a>. If you have a GitHub account, you can use our <a href="https://github.com/EFForg/privacybadger/issues">GitHub issue tracker</a>.</p>
<p>You can also find us on <a href="https://mastodon.social/@privacybadger">Mastodon</a> and <a href="https://bsky.app/profile/privacybadger.org">Bluesky</a>.</p>

    
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Failing to Understand the Exponential, Again (112 pts)]]></title>
            <link>https://www.julian.ac/blog/2025/09/27/failing-to-understand-the-exponential-again/</link>
            <guid>45403803</guid>
            <pubDate>Sun, 28 Sep 2025 12:19:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.julian.ac/blog/2025/09/27/failing-to-understand-the-exponential-again/">https://www.julian.ac/blog/2025/09/27/failing-to-understand-the-exponential-again/</a>, See on <a href="https://news.ycombinator.com/item?id=45403803">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article_text">
    <p>The current discourse around AI progress and a <a href="https://www.wsj.com/tech/ai/ai-bubble-building-spree-55ee6128">supposed</a> “<a href="https://www.reuters.com/commentary/breakingviews/ai-investment-bubble-inflated-by-trio-dilemmas-2025-09-25/">bubble</a>” reminds me a lot of the early weeks of the Covid-19 pandemic. Long after the timing and scale of the coming global pandemic was obvious from extrapolating the exponential trends, politicians, journalists and most public commentators kept treating it as a remote possibility or a localized phenomenon.</p>
<p>Something similarly bizarre is happening with AI capabilities and further progress. People notice that while AI can now write programs, design websites, etc, it still often makes mistakes or goes in a wrong direction, and then they somehow jump to the conclusion that AI will never be able to do these tasks at human levels, or will <a href="https://www.foreignaffairs.com/united-states/cost-delusion-artificial-general-intelligence">only have a minor impact</a>. When just a few years ago, having AI do these things was complete science fiction! Or they see two consecutive model releases and don’t notice much difference in their conversations, and they conclude that AI is plateauing and scaling is over.</p>
<h3>METR</h3>
<p>Accurately evaluating AI progress is hard, and commonly requires a combination of both AI expertise and subject matter understanding. Fortunately, there are entire organizations like <a href="https://metr.org/">METR</a> whose sole purpose is to study AI capabilities! We can turn to their recent study <a href="https://metr.org/blog/2025-03-19-measuring-ai-ability-to-complete-long-tasks/">"Measuring AI Ability to Complete Long Tasks"</a>, which measures the length of software engineering tasks models can autonomously perform:</p>
<p><img src="https://www.julian.ac/images/2025-09-27-failing-to-understand-the-exponential-metr-task-length.webp" alt="METR task length"></p>
<p>We can observe a clear exponential trend, with Sonnet 3.7 achieving the best performance by completing tasks up to an hour in length at 50% success rate.</p>
<p>However, at this point <a href="https://www.anthropic.com/news/claude-3-7-sonnet">Sonnet 3.7 is 7 months old</a>, coincidentally the same as the doubling rate claimed by METR in their study. Can we use this to verify if METR's findings hold up?</p>
<p>Yes! In fact, METR themselves keep an <a href="https://metr.org/blog/2025-03-19-measuring-ai-ability-to-complete-long-tasks/">up-to-date plot on their study website</a>:</p>
<p><img src="https://www.julian.ac/images/2025-09-27-failing-to-understand-the-exponential-metr-task-length-v2.webp" alt="METR task length"></p>
<p>We can see the addition of recent models such as Grok 4, Opus 4.1, and GPT-5 at the top right of the graph. Not only did the prediction hold up, these recent models are actually slightly above trend, now performing tasks of more than 2 hours!</p>
<h3>GDPval</h3>
<p>A reasonable objection might be that we can't generalize from performance on software engineering tasks to the wider economy - after all, these are the tasks engineers at AI labs are bound to be most familiar with, creating some overfitting to the test set, so to speak.</p>
<p>Fortunately, we can turn to a different study, the recent <a href="https://openai.com/index/gdpval/">GDPval</a> by OpenAI - measuring model performance in 44 (!) occupations across 9 industries:</p>
<p><img src="https://www.julian.ac/images/2025-09-27-failing-to-understand-the-exponential-gdpval-category.webp" alt="GDPval categories"></p>
<p>The <a href="https://huggingface.co/datasets/openai/gdpval">evaluation tasks</a> are sourced from experienced industry professionals (avg. 14 years' experience), 30 tasks per occupation for a total of 1320 tasks. Grading is performed by blinded comparison of human and model-generated solutions, allowing for both clear preferences and ties.</p>
<p>Again we can observe a similar trend, with the latest GPT-5 already astonishingly close to human performance:</p>
<p><img src="https://www.julian.ac/images/2025-09-27-failing-to-understand-the-exponential-gdpval-progress.webp"></p><p>You might object that this plot looks like it might be levelling off, but this is probably mostly an artefact of GPT-5 being very consumer-focused. Fortunately for us, OpenAI also included other models in the evaluation<sup id="fr-benchmark-hack-1"><a href="#fn-benchmark-hack">[1]</a></sup>, and we can see that Claude Opus 4.1 (released earlier than GPT-5) performs significantly better - ahead of the trend from the previous graph, and already almost matching industry expert (!) performance:</p>
<p><img src="https://www.julian.ac/images/2025-09-27-failing-to-understand-the-exponential-gdpval-models.webp"></p><p>I want to especially commend OpenAI here for releasing an eval that shows a model from another lab outperforming their own model - this is a good sign of integrity and caring about beneficial AI outcomes!</p>
<h3>Outlook</h3>
<p>Given consistent trends of exponential performance improvements over many years and across many industries, it would be extremely surprising if these improvements suddenly stopped. Instead, even a relatively conservative extrapolation of these trends suggests that 2026 will be a pivotal year for the widespread integration of AI into the economy:</p>
<ul>
<li>Models will be able to autonomously work for full days (8 working hours) by mid-2026.</li>
<li>At least one model will match the performance of human experts across many industries before the end of 2026.</li>
<li>By the end of 2027, models will frequently outperform experts on many tasks.</li>
</ul>
<p>It may sound overly simplistic, but making predictions by extrapolating straight lines on graphs is likely to give you a better model of the future than most "experts" - even <a href="http://www.incompleteideas.net/IncIdeas/BitterLesson.html">better than most actual domain experts</a>!</p>
<p>For a more concrete picture of what this future would look like I recommend <a href="https://epoch.ai/blog/what-will-ai-look-like-in-2030">Epoch AI's 2030 report</a> and in particular the in-depth <a href="https://ai-2027.com/">AI 2027</a> project.</p>
<hr>
<ol><li id="fn-benchmark-hack">
<p>The underperformance of both Grok 4 and Gemini 2.5 Pro is also notable, especially given state-of-the-art claims on many benchmarks when released. Beware of <a href="https://en.wikipedia.org/wiki/Goodhart%27s_law">Goodhart's law</a>! <a href="#fr-benchmark-hack-1">↩</a></p>
</li>

  </ol></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[EPA tells some scientists to stop publishing studies (193 pts)]]></title>
            <link>https://www.washingtonpost.com/climate-environment/2025/09/20/epa-scientists-research-publications/</link>
            <guid>45403656</guid>
            <pubDate>Sun, 28 Sep 2025 11:50:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.washingtonpost.com/climate-environment/2025/09/20/epa-scientists-research-publications/">https://www.washingtonpost.com/climate-environment/2025/09/20/epa-scientists-research-publications/</a>, See on <a href="https://news.ycombinator.com/item?id=45403656">Hacker News</a></p>
Couldn't get https://www.washingtonpost.com/climate-environment/2025/09/20/epa-scientists-research-publications/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Why I gave the world wide web away for free (230 pts)]]></title>
            <link>https://www.theguardian.com/technology/2025/sep/28/why-i-gave-the-world-wide-web-away-for-free</link>
            <guid>45403501</guid>
            <pubDate>Sun, 28 Sep 2025 11:17:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/2025/sep/28/why-i-gave-the-world-wide-web-away-for-free">https://www.theguardian.com/technology/2025/sep/28/why-i-gave-the-world-wide-web-away-for-free</a>, See on <a href="https://news.ycombinator.com/item?id=45403501">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p><span>I</span> was 34 years old when I first had the idea for the world wide web. I took every opportunity to talk about it: pitching it in meetings, sketching it out on a whiteboard for anyone who was interested, even drawing the web in the snow with a ski pole for my friend on what was meant to be a peaceful day out.</p><p>I relentlessly petitioned bosses at the European Organization for Nuclear Research (Cern), where I worked at the time, who initially found the idea <em>“</em>a little eccentric<em>” </em>but eventually gave in and let me work on it.<em> </em>I was seized by the idea of combining two pre-existing computer technologies: the internet and hypertext, which takes an ordinary document and brings it to life by adding “links”.</p><p>I believed that giving users such a simple way to navigate the internet would unlock creativity and collaboration on a global scale. If you could put anything on it, then after a while, it would have everything on it.</p><p>But for the web to have everything on it, everyone had to be able to use it, and want to do so. This was already asking a lot. I couldn’t also ask that they pay for each search or upload they made. In order to succeed, therefore, it would have to be free. That’s why, in 1993, I convinced my Cern managers to donate the intellectual property of the world wide web, putting it into the public domain. We gave the web away to everyone.</p><p>Today, I look at my invention and I am forced to ask: is the web still free today? No, not all of it. We see a handful of large platforms harvesting users’ private data to share with commercial brokers or even repressive&nbsp;governments. We see ubiquitous algorithms that are addictive by design and damaging to our teenagers’ mental health. Trading personal data for use certainly&nbsp;does not fit with my vision for a free web.</p><p>On many platforms, we are no longer the customers, but instead have become the product. Our data, even if anonymised, is sold on to actors we never intended it to reach, who can then target us with content and&nbsp;advertising. This includes deliberately harmful content that leads to real-world violence, spreads misinformation, wreaks havoc on our psychological wellbeing and seeks to undermine social cohesion.</p><p>We have the technical capability to give that power back to the individual. <a href="https://solidproject.org/" data-link-name="in body link">Solid</a> is an open-source interoperable standard that I and my team developed at MIT more than a decade ago. Apps running on Solid don’t implicitly own your data – they have to request it from you and you choose whether to agree, or not. Rather than being in countless separate places on the internet in the hands of whomever it had been resold to, your data is in one place, controlled by you.</p><p>Sharing your information in a smart way can also liberate it. Why is your smartwatch writing your biological data to one silo in one format? Why is your credit card writing your financial data to a second silo in a different format? Why are your YouTube comments, Reddit posts, Facebook updates and tweets all stored in different places? Why is the default expectation that you aren’t supposed to be able to look at any of this stuff? You generate all this data – your actions, your choices, your body, your preferences, your decisions. You should own it. You should be empowered&nbsp;by it.</p><p>Somewhere between my original vision for web 1.0 and the rise of social media as part of web 2.0, we took the wrong path. We’re now at a new crossroads, one where we must decide if AI will be used for the betterment or to the detriment of society. How can we learn from the mistakes of the past? First of all, we must ensure policymakers do not end up playing the same decade-long game of catchup they have done over social media. The time to decide the governance model for AI was yesterday, so we must act with urgency.</p><p>In 2017, I wrote a thought experiment about an AI that works for <em>you</em>. I called it <a href="https://www.w3.org/DesignIssues/Works.html" data-link-name="in body link">Charlie</a>. Charlie works for you like your doctor or your lawyer, bound by law, regulation and codes of conduct. Why can’t the same frameworks be adopted for AI? We have learned from social media that power rests with the monopolies who control and harvest personal data. We can’t let the same thing happen with AI.</p><p>So how do we move forward? Part of the frustration with democracy in the 21st century is that governments have been too slow to meet the demands of digital citizens. The AI industry landscape is fiercely competitive, and development and governance are dictated by companies. The lesson from social media is that this will not create value for the individual.</p><p>I coded the world wide web on a single computer in a small room. But that small room didn’t belong to me, it was at Cern. Cern was created in the aftermath of the second world war by the UN and European governments who identified a historic, scientific turning point that required international collaboration. It is hard to imagine a big tech company agreeing to share the world wide web for no commercial reward like Cern allowed me to. That’s why we need a Cern-like not-for-profit body driving forward international AI research.</p><p>I gave the world wide web away for free because I thought that it would only work if it worked for everyone. Today, I believe that to be truer than ever. Regulation and global governance are technically feasible, but reliant on political willpower. If we are able to muster it, we have the chance to restore the web as a tool for collaboration, creativity and compassion across cultural borders. We can re-empower individuals, and take the web back. It’s not too late.</p><p><span data-dcr-style="bullet"></span> Tim Berners-Lee is the author of <a href="https://thisisforeveryone.timbl.com/" data-link-name="in body link">This Is for Everyone</a> <em>(Macmillan</em><em>).</em></p><h2 id="further-reading"><strong>Further reading</strong></h2><p><a href="https://guardianbookshop.com/innovators-9781471138805/?utm_source=editoriallink&amp;amp;utm_medium=merch&amp;amp;utm_campaign=article" data-link-name="in body link">The Innovators</a> by Walter Isaacson (Simon &amp; Schuster, £10.99)</p><p><a href="https://guardianbookshop.com/the-web-we-weave-9781541604124/?utm_source=editoriallink&amp;amp;utm_medium=merch&amp;amp;utm_campaign=article" data-link-name="in body link">The Web We Weave</a> by Jeff Jarvis (Basic, £25)</p><p><a href="https://guardianbookshop.com/the-history-of-the-internet-in-byte-sized-chunks-9781789295597/?utm_source=editoriallink&amp;amp;utm_medium=merch&amp;amp;utm_campaign=article" data-link-name="in body link">The History of the Internet in Byte-Sized Chunks</a> by Chris Stokel-Walker (Michael O’Mara, £12.99)</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Beyond OpenMP in C++ and Rust: Taskflow, Rayon, Fork Union (118 pts)]]></title>
            <link>https://ashvardanian.com/posts/beyond-openmp-in-cpp-rust/</link>
            <guid>45402820</guid>
            <pubDate>Sun, 28 Sep 2025 08:53:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ashvardanian.com/posts/beyond-openmp-in-cpp-rust/">https://ashvardanian.com/posts/beyond-openmp-in-cpp-rust/</a>, See on <a href="https://news.ycombinator.com/item?id=45402820">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><blockquote><p>TL;DR: Most C++ and Rust thread-pool libraries leave significant performance on the table - often running 10× slower than <a href="https://en.wikipedia.org/wiki/OpenMP">OpenMP</a> on classic fork-join workloads and <a href="https://github.com/ashvardanian/ParallelReductionsBenchmark">micro-benchmarks</a>.
So I’ve drafted a minimal ~300-line library called <a href="https://github.com/ashvardanian/fork_union">Fork Union</a> that lands within 20% of OpenMP.
It does not use advanced <a href="https://en.wikipedia.org/wiki/Non-uniform_memory_access">NUMA</a> tricks; it uses only the C++ and Rust standard libraries and has no other dependencies.</p><p>Update (Sep 2025): Since the <a href="https://github.com/ashvardanian/fork_union/releases/tag/v2.0.0">v2 release</a>, Fork Union supports NUMA and Huge Pages, as well as <code>tpause</code>, <code>wfet</code>, and other “pro” features.
Check the <a href="https://github.com/ashvardanian/fork_union?tab=readme-ov-file#pro-tips">README for details</a>.</p></blockquote><p><a href="https://github.com/ashvardanian/fork_union"><img alt="Fork Union for Rust and C++" loading="lazy" src="https://ashvardanian.com/beyond-openmp-in-cpp-rust/fork_union.jpg"></a></p><p><a href="https://en.wikipedia.org/wiki/OpenMP">OpenMP</a> has been the industry workhorse for coarse-grain parallelism in C and C++ for decades.
I lean on it heavily in projects like <a href="https://github.com/unum-cloud/usearch">USearch</a>, yet I avoid it in larger systems because:</p><ul><li><strong>Fine-grain parallelism</strong> with independent subsystems doesn’t map cleanly to OpenMP’s global runtime.</li><li><strong>Portability</strong> of the C++ STL and the Rust standard library is better than OpenMP.</li><li><strong>Meta-programming</strong> with OpenMP is a pain - mixing <code>#pragma omp</code> with templates quickly becomes unmaintainable.</li></ul><p>So I went looking for ready-made thread pools in C++&nbsp;and&nbsp;Rust — only to realize <strong>most of them implement asynchronous task queues, a much heavier abstraction than OpenMP’s fork-join model</strong>.
Those extra layers introduce what I call the four horsemen of low performance:</p><ol><li><a href="#locks-and-mutexes">Locks &amp; mutexes</a> with syscalls in the hot path.</li><li><a href="#memory-allocations">Heap allocations</a> in queues, tasks, futures, and promises.</li><li><a href="#atomics-and-cas">Compare-and-swap</a> (CAS) stalls in the pessimistic path.</li><li><a href="#alignment">False sharing</a> unaligned counters thrashing cache lines.</li></ol><p>With today’s dual-socket AWS machines pushing 192 physical cores, I needed something leaner than <a href="https://github.com/taskflow/taskflow/">Taskflow</a>, <a href="https://github.com/rayon-rs/rayon/">Rayon</a>, or <a href="https://github.com/tokio-rs/tokio/">Tokio</a>.
Enter <a href="https://github.com/ashvardanian/fork_union">Fork Union</a>.</p><h2 id="benchmarks">Benchmarks</h2><p>Hardware: AWS Graviton 4 metal (single NUMA node, 96× Arm&nbsp;v9 cores,&nbsp;1 thread/core).
Workload: <a href="https://github.com/ashvardanian/ParallelReductionsBenchmark">“ParallelReductionsBenchmark”</a> - summing single-precision floats in parallel.
In this case, just one cache line (<code>float[16]</code>) per core—small enough to stress synchronization cost of the thread pool rather than arithmetic throughput of the CPU.
In other words, we are benchmarking kernels similar to:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-0-1"><a href="#hl-0-1">1</a>
</span><span id="hl-0-2"><a href="#hl-0-2">2</a>
</span><span id="hl-0-3"><a href="#hl-0-3">3</a>
</span><span id="hl-0-4"><a href="#hl-0-4">4</a>
</span><span id="hl-0-5"><a href="#hl-0-5">5</a>
</span><span id="hl-0-6"><a href="#hl-0-6">6</a>
</span><span id="hl-0-7"><a href="#hl-0-7">7</a>
</span><span id="hl-0-8"><a href="#hl-0-8">8</a>
</span><span id="hl-0-9"><a href="#hl-0-9">9</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="cpp"><span><span><span>#include</span> <span>&lt;array&gt;</span><span>
</span></span></span><span><span><span></span>
</span></span><span><span><span>float</span> <span>parallel_sum</span><span>(</span><span>std</span><span>::</span><span>array</span><span>&lt;</span><span>float</span><span>,</span> <span>96</span> <span>*</span> <span>16</span><span>&gt;</span> <span>const</span> <span>&amp;</span><span>data</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>result</span> <span>=</span> <span>0.0f</span><span>;</span>
</span></span><span><span><span>#pragma omp parallel for reduction(+:result) </span><span>// Not how we profile OpenMP
</span></span></span><span><span><span></span>    <span>for</span> <span>(</span><span>std</span><span>::</span><span>size_t</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>data</span><span>.</span><span>size</span><span>();</span> <span>++</span><span>i</span><span>)</span>
</span></span><span><span>        <span>result</span> <span>+=</span> <span>data</span><span>[</span><span>i</span><span>];</span>
</span></span><span><span>    <span>return</span> <span>result</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></td></tr></tbody></table></div><p><a href="https://github.com/google/benchmark">Google Benchmark</a> numbers for the C++ version of Fork Union, compared to OpenMP, <a href="https://github.com/taskflow/taskflow/">Taskflow</a>, and allocating 96× <code>std::thread</code> objects on-demand, are as follows:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-1-1"><a href="#hl-1-1">1</a>
</span><span id="hl-1-2"><a href="#hl-1-2">2</a>
</span><span id="hl-1-3"><a href="#hl-1-3">3</a>
</span><span id="hl-1-4"><a href="#hl-1-4">4</a>
</span><span id="hl-1-5"><a href="#hl-1-5">5</a>
</span><span id="hl-1-6"><a href="#hl-1-6">6</a>
</span><span id="hl-1-7"><a href="#hl-1-7">7</a>
</span><span id="hl-1-8"><a href="#hl-1-8">8</a>
</span><span id="hl-1-9"><a href="#hl-1-9">9</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="sh"><span><span><span>PARALLEL_REDUCTIONS_LENGTH</span><span>=</span><span>1536</span> build_release/reduce_bench
</span></span><span><span>
</span></span><span><span>-----------------------------------
</span></span><span><span>Benchmark           UserCounters...
</span></span><span><span>-----------------------------------
</span></span><span><span>std::threads        bytes/s<span>=</span>3.00106 MB/s
</span></span><span><span>tf::taskflow        bytes/s<span>=</span>76.2837 MB/s
</span></span><span><span>av::fork_union      bytes/s<span>=</span>467.714 MB/s
</span></span><span><span>openmp              bytes/s<span>=</span>585.492 MB/s
</span></span></code></pre></td></tr></tbody></table></div><blockquote><p>I’ve cleaned up the output, focusing only on the relevant rows and the reduction throughput.</p></blockquote><p><a href="https://github.com/bheisler/criterion.rs">Criterion.rs</a> numbers for the Rust version of Fork Union, compared to <a href="https://github.com/rayon-rs/rayon/">Rayon</a>, <a href="https://github.com/tokio-rs/tokio/">Tokio</a>, and Smol’s <a href="https://github.com/smol-rs/async-executor">Async Executors</a>, are as follows:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-2-1"><a href="#hl-2-1">1</a>
</span><span id="hl-2-2"><a href="#hl-2-2">2</a>
</span><span id="hl-2-3"><a href="#hl-2-3">3</a>
</span><span id="hl-2-4"><a href="#hl-2-4">4</a>
</span><span id="hl-2-5"><a href="#hl-2-5">5</a>
</span><span id="hl-2-6"><a href="#hl-2-6">6</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="sh"><span><span>$ <span>PARALLEL_REDUCTIONS_LENGTH</span><span>=</span><span>1536</span> cargo +nightly bench -- --output-format bencher
</span></span><span><span>
</span></span><span><span><span>test</span> fork_union ... bench:  5,150 ns/iter <span>(</span>+/- 402<span>)</span>
</span></span><span><span><span>test</span> rayon ... bench:      47,251 ns/iter <span>(</span>+/- 3,985<span>)</span>
</span></span><span><span><span>test</span> smol ... bench:       54,931 ns/iter <span>(</span>+/- 10<span>)</span>
</span></span><span><span><span>test</span> tokio ... bench:     240,707 ns/iter <span>(</span>+/- 921<span>)</span>
</span></span></code></pre></td></tr></tbody></table></div><p>The timing methods used in those two executables are different, but the relative observations should hold.</p><ul><li>Spawning new threads is obviously too expensive.</li><li>Most reusable thread pools are still 10x slower to sync than OpenMP.</li><li>OpenMP isn’t easy to compete with and still outperforms Fork Union by 20%.</li></ul><p>This clearly shows, how important it is to chose the right tool for the job.
Don’t pick an asynchronous task pool for a fork-join blocking workload!</p><h2 id="four-horsemen-of-performance">Four Horsemen of Performance</h2><blockquote><p>This article won’t be a deep dive into those topics.
Each deserves its own article and a proper benchmark, with some good ones already available and linked.</p></blockquote><h3 id="locks-and-mutexes">Locks and Mutexes</h3><p>Unlike the <a href="https://en.cppreference.com/w/cpp/atomic/atomic"><code>std::atomic</code></a>, the <a href="https://en.cppreference.com/w/cpp/thread/mutex"><code>std::mutex</code></a> update may result in a system call, and it can be expensive to acquire and release.
Its implementations generally have 2 executable paths:</p><ul><li>the fast path, where the mutex is not contended, where it first tries to grab the mutex via a compare-and-swap operation, and if it succeeds, it returns immediately.</li><li>the slow path, where the mutex is contended, and it has to go through the kernel to block the thread until the mutex is available.</li></ul><p>On Linux, the latter translates to a <a href="https://en.wikipedia.org/wiki/Futex">“futex” syscall</a> and an expensive <a href="https://lwn.net/Articles/940944/#:~:text=shared%20between%20at%20least%20two,system%20call">context switch</a>.
In Rust, the same applies to <a href="https://doc.rust-lang.org/std/sync/atomic/"><code>std::async::atomic</code></a> and <a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>std::sync::Mutex</code></a>.
Prefer the former when possible.</p><h3 id="memory-allocations">Memory Allocations</h3><p>Most thread-pools use classes like <a href="https://en.cppreference.com/w/cpp/thread/future"><code>std::future</code></a>, <a href="https://en.cppreference.com/w/cpp/thread/packaged_task"><code>std::packaged_task</code></a>, <a href="https://en.cppreference.com/w/cpp/utility/functional/function"><code>std::function</code></a>, <a href="https://en.cppreference.com/w/cpp/container/queue"><code>std::queue</code></a>, <a href="https://en.cppreference.com/w/cpp/thread/condition_variable"><code>std::conditional_variable</code></a>.</p><blockquote><p>In Rust land, there will often be a <a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"><code>std::Box</code></a>, <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>std::Arc</code></a>, <a href="https://doc.rust-lang.org/std/collections/struct.VecDeque.html"><code>std::collections::VecDeque</code></a>, <a href="https://doc.rust-lang.org/std/sync/mpsc/index.html"><code>std::sync::mpsc</code></a> or even <a href="https://doc.rust-lang.org/std/sync/mpmc/index.html"><code>std::sync::mpmc</code></a>.</p></blockquote><p>Most of those, I believe, aren’t unusable in Big-Data applications, where you always operate in memory-constrained environments:</p><ul><li>Raising a <a href="https://en.cppreference.com/w/cpp/memory/new/bad_alloc"><code>std::bad_alloc</code></a> exception when there is no memory left and just hoping that someone up the call stack will catch it is not a great design idea for Systems Engineering.</li><li>The threat of having to synchronize ~200 physical CPU cores across 2-8 sockets and potentially dozens of NUMA nodes around a shared global memory allocator practically means you can’t have predictable performance.</li></ul><p>As we focus on a simpler <del>concurrency</del> parallelism model, we can avoid the complexity of allocating shared states, wrapping callbacks into some heap-allocated “tasks”, and a lot of other boilerplates.</p><p>Less work = more performance.</p><h3 id="atomics-and-cas">Atomics and CAS</h3><p>Once you get to the lowest-level primitives on concurrency, you end up with the <code>std::atomic</code> and a small set of hardware-supported atomic instructions.
Hardware implements it differently:</p><ul><li>x86 is built around the “Total Store Order” (TSO) <a href="https://en.wikipedia.org/wiki/Memory_ordering">memory consistency model</a> and provides <code>LOCK</code> variants of the <code>ADD</code> and <code>CMPXCHG</code>. These variants act as full-blown “fences” — no loads or stores can be reordered across them. This makes atomic operations on x86 straightforward but heavyweight.</li><li>Arm, on the other hand, has a “weak” memory model and provides a set of atomic instructions that are not fenced and match the C++ concurrency model. It offers <code>acquire</code>, <code>release</code>, and <code>acq_rel</code> variants of each atomic instruction — such as <code>LDADD</code>, <code>STADD</code>, and <code>CAS</code> — which allow precise control over visibility and order, especially with the introduction of <a href="https://learn.arm.com/learning-paths/servers-and-cloud-computing/lse/intro/">“Large System Extension” (LSE)</a> instructions in Armv8.1-A.</li></ul><p>A locked atomic on x86 requires the cache line in the Exclusive state in the requester’s L1 cache.
This would incur a coherence transaction (Read-for-Ownership) if another core had the line.
Both Intel and AMD handle this similarly.</p><p>It makes <a href="https://arangodb.com/2021/02/cpp-memory-model-migrating-from-x86-to-arm">Arm and Power much more suitable for lock-free programming</a> and concurrent data structures, but some observations hold for both platforms.
Most importantly, “Compare and Swap” (CAS) is costly and should be avoided at all costs.</p><p>On x86, for example, the <code>LOCK ADD</code> <a href="https://travisdowns.github.io/blog/2020/07/06/concurrency-costs">can easily take 50 CPU cycles</a>.
It is 50x slower than a regular <code>ADD</code> instruction but still easily 5-10x faster than a <code>LOCK CMPXCHG</code> instruction.
Once the contention rises, the gap naturally widens, further amplified by the increased “failure” rate of the CAS operation when the value being compared has already changed.
That’s why, for the “dynamic” mode, we resort to using an additional atomic variable rather than more typical CAS-based implementations.</p><h3 id="alignment">Alignment</h3><p>Assuming a thread pool is a heavy object anyway, nobody will care if it’s a bit larger than expected.
That allows us to over-align the internal counters to <a href="https://en.cppreference.com/w/cpp/thread/hardware_destructive_interference_size"><code>std::hardware_destructive_interference_size</code></a> or <a href="https://en.cppreference.com/w/cpp/types/max_align_t"><code>std::max_align_t</code></a> to avoid false sharing.
In that case, even on x86, where the entire cache will be exclusively owned by a single thread, in eager mode, we end up effectively “pipelining” the execution, where one thread may be incrementing the “in-flight” counter while the other is decrementing the “remaining” counter.
Others are executing the loop body in between.</p><h2 id="comparing-apis">Comparing APIs</h2><h3 id="fork-union">Fork Union</h3><p>Fork Union has a straightforward goal, so its API is equally clear.
There are only 4 core interfaces:</p><ul><li><code>for_each_thread</code> - to dispatch a callback per thread, similar to <code>#pragma omp parallel</code>.</li><li><code>for_each_static</code> - for individual evenly-sized tasks, similar to <code>#pragma omp for schedule(static)</code>.</li><li><code>for_each_slice</code> - for slices of evenly-sized tasks, similar to nested <code>#pragma omp for schedule(static)</code>.</li><li><code>for_each_dynamic</code> - for individual unevenly-sized tasks, similar to <code>#pragma omp for schedule(dynamic, 1)</code>.</li></ul><p>They all receive a C++ lambda or a Rust closure and a range of tasks to execute.
The construction of the thread pool itself is a bit trickier than typically in standard libraries, as “exceptions” and “panics” are not allowed.
So, the constructor can’t perform any real work.
In C++, the <code>try_spawn</code> method can be called to allocate all the threads:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-3-1"><a href="#hl-3-1"> 1</a>
</span><span id="hl-3-2"><a href="#hl-3-2"> 2</a>
</span><span id="hl-3-3"><a href="#hl-3-3"> 3</a>
</span><span id="hl-3-4"><a href="#hl-3-4"> 4</a>
</span><span id="hl-3-5"><a href="#hl-3-5"> 5</a>
</span><span id="hl-3-6"><a href="#hl-3-6"> 6</a>
</span><span id="hl-3-7"><a href="#hl-3-7"> 7</a>
</span><span id="hl-3-8"><a href="#hl-3-8"> 8</a>
</span><span id="hl-3-9"><a href="#hl-3-9"> 9</a>
</span><span id="hl-3-10"><a href="#hl-3-10">10</a>
</span><span id="hl-3-11"><a href="#hl-3-11">11</a>
</span><span id="hl-3-12"><a href="#hl-3-12">12</a>
</span><span id="hl-3-13"><a href="#hl-3-13">13</a>
</span><span id="hl-3-14"><a href="#hl-3-14">14</a>
</span><span id="hl-3-15"><a href="#hl-3-15">15</a>
</span><span id="hl-3-16"><a href="#hl-3-16">16</a>
</span><span id="hl-3-17"><a href="#hl-3-17">17</a>
</span><span id="hl-3-18"><a href="#hl-3-18">18</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="cpp"><span><span><span>#include</span> <span>&lt;fork_union.hpp&gt;</span><span>   </span><span>// `fork_union_t`
</span></span></span><span><span><span></span><span>#include</span> <span>&lt;cstdio&gt;</span><span>           </span><span>// `stderr`
</span></span></span><span><span><span></span><span>#include</span> <span>&lt;cstdlib&gt;</span><span>          </span><span>// `EXIT_SUCCESS`
</span></span></span><span><span><span></span>
</span></span><span><span><span>namespace</span> <span>fun</span> <span>=</span> <span>ashvardanian</span><span>::</span><span>fork_union</span><span>;</span>
</span></span><span><span>
</span></span><span><span><span>int</span> <span>main</span><span>()</span> <span>{</span>
</span></span><span><span>    <span>fun</span><span>::</span><span>fork_union_t</span> <span>pool</span><span>;</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>!</span><span>pool</span><span>.</span><span>try_spawn</span><span>(</span><span>std</span><span>::</span><span>thread</span><span>::</span><span>hardware_concurrency</span><span>()))</span> <span>{</span>
</span></span><span><span>        <span>std</span><span>::</span><span>fprintf</span><span>(</span><span>stderr</span><span>,</span> <span>"Failed to fork the threads</span><span>\n</span><span>"</span><span>);</span>
</span></span><span><span>        <span>return</span> <span>EXIT_FAILURE</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>pool</span><span>.</span><span>for_each_thread</span><span>([</span><span>&amp;</span><span>](</span><span>std</span><span>::</span><span>size_t</span> <span>thread_index</span><span>)</span> <span>noexcept</span> <span>{</span>
</span></span><span><span>        <span>std</span><span>::</span><span>printf</span><span>(</span><span>"Hello from thread # %zu (of %zu)</span><span>\n</span><span>"</span><span>,</span> <span>thread_index</span> <span>+</span> <span>1</span><span>,</span> <span>pool</span><span>.</span><span>count_threads</span><span>());</span>
</span></span><span><span>    <span>});</span>
</span></span><span><span>    <span>return</span> <span>EXIT_SUCCESS</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></td></tr></tbody></table></div><blockquote><p>As you may have noticed, the lambdas are forced to be <code>noexcept</code> and can’t return anything.
This is a design choice that vastly simplifies the implementation.</p></blockquote><p>In Rust, similarly, the <code>try_spawn</code> method can be used:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-4-1"><a href="#hl-4-1"> 1</a>
</span><span id="hl-4-2"><a href="#hl-4-2"> 2</a>
</span><span id="hl-4-3"><a href="#hl-4-3"> 3</a>
</span><span id="hl-4-4"><a href="#hl-4-4"> 4</a>
</span><span id="hl-4-5"><a href="#hl-4-5"> 5</a>
</span><span id="hl-4-6"><a href="#hl-4-6"> 6</a>
</span><span id="hl-4-7"><a href="#hl-4-7"> 7</a>
</span><span id="hl-4-8"><a href="#hl-4-8"> 8</a>
</span><span id="hl-4-9"><a href="#hl-4-9"> 9</a>
</span><span id="hl-4-10"><a href="#hl-4-10">10</a>
</span><span id="hl-4-11"><a href="#hl-4-11">11</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>#![feature(allocator_api)]</span><span>
</span></span></span><span><span><span></span><span>use</span><span> </span><span>std</span>::<span>error</span>::<span>Error</span><span>;</span><span>
</span></span></span><span><span><span></span><span>use</span><span> </span><span>fork_union</span>::<span>ForkUnion</span><span>;</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>fn</span> <span>main</span><span>()</span><span> </span>-&gt; <span>Result</span><span>&lt;</span><span>(),</span><span> </span><span>Box</span><span>&lt;</span><span>dyn</span><span> </span><span>Error</span><span>&gt;&gt;</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>pool</span><span> </span><span>=</span><span> </span><span>ForkUnion</span>::<span>try_spawn</span><span>(</span><span>4</span><span>)</span><span>?</span><span>;</span><span>
</span></span></span><span><span><span>    </span><span>pool</span><span>.</span><span>for_each_thread</span><span>(</span><span>|</span><span>thread_index</span><span>|</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>println!</span><span>(</span><span>"Hello from thread # </span><span>{}</span><span> (of </span><span>{}</span><span>)"</span><span>,</span><span> </span><span>thread_index</span><span> </span><span>+</span><span> </span><span>1</span><span>,</span><span> </span><span>pool</span><span>.</span><span>count_threads</span><span>());</span><span>
</span></span></span><span><span><span>    </span><span>});</span><span>
</span></span></span><span><span><span>    </span><span>Ok</span><span>(())</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p>Assuming Rust has no function overloading, there are a few alternatives:</p><ul><li><code>try_spawn</code> - to spawn a thread pool with the main allocator.</li><li><code>try_spawn_in</code> - to spawn a thread pool with a custom allocator.</li><li><code>try_named_spawn</code> - to spawn a thread pool with the main allocator and a name.</li><li><code>try_named_spawn_in</code> - to spawn a thread pool with a custom allocator and a name.</li></ul><h3 id="rayon">Rayon</h3><p>Rayon is the go-to Rust library for data parallelism.
It suffers from the same core design issues as every other thread pool I’ve looked at on GitHub, but it’s fair to say that at the high level, it provides outstanding coverage for various parallel iterators!
As such, there is <a href="https://github.com/ashvardanian/fork_union/issues/2">an open call to explore similar “Map-Reduce” and “Map-Fork-Reduce” patterns in Fork Union</a> to see if they can be implemented efficiently.</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-5-1"><a href="#hl-5-1">1</a>
</span><span id="hl-5-2"><a href="#hl-5-2">2</a>
</span><span id="hl-5-3"><a href="#hl-5-3">3</a>
</span><span id="hl-5-4"><a href="#hl-5-4">4</a>
</span><span id="hl-5-5"><a href="#hl-5-5">5</a>
</span><span id="hl-5-6"><a href="#hl-5-6">6</a>
</span><span id="hl-5-7"><a href="#hl-5-7">7</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>use</span><span> </span><span>rayon</span>::<span>prelude</span>::<span>*</span><span>;</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span></span><span>fn</span> <span>sum_of_squares</span><span>(</span><span>input</span>: <span>&amp;</span><span>[</span><span>i32</span><span>])</span><span> </span>-&gt; <span>i32</span> <span>{</span><span>
</span></span></span><span><span><span>    </span><span>input</span><span>.</span><span>par_iter</span><span>()</span><span> </span><span>// &lt;-- just change that!
</span></span></span><span><span><span></span><span>         </span><span>.</span><span>map</span><span>(</span><span>|&amp;</span><span>i</span><span>|</span><span> </span><span>i</span><span> </span><span>*</span><span> </span><span>i</span><span>)</span><span>
</span></span></span><span><span><span>         </span><span>.</span><span>sum</span><span>()</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><p>The default <code>.par_iter()</code> API of Rayon, <a href="https://github.com/rayon-rs/rayon/blob/ae07384e3e0b238cea89f0c14891f351c65a5cee/README.md?plain=1#L26-L33">at the start of the README.md</a>, is not how I’ve used it in “Parallel Reductions Benchmark”.
To ensure that we are benchmarking the actual synchronization cost of the thread pool, I’ve gone directly to the underlying <code>rayon::ThreadPool</code> API:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-6-1"><a href="#hl-6-1"> 1</a>
</span><span id="hl-6-2"><a href="#hl-6-2"> 2</a>
</span><span id="hl-6-3"><a href="#hl-6-3"> 3</a>
</span><span id="hl-6-4"><a href="#hl-6-4"> 4</a>
</span><span id="hl-6-5"><a href="#hl-6-5"> 5</a>
</span><span id="hl-6-6"><a href="#hl-6-6"> 6</a>
</span><span id="hl-6-7"><a href="#hl-6-7"> 7</a>
</span><span id="hl-6-8"><a href="#hl-6-8"> 8</a>
</span><span id="hl-6-9"><a href="#hl-6-9"> 9</a>
</span><span id="hl-6-10"><a href="#hl-6-10">10</a>
</span><span id="hl-6-11"><a href="#hl-6-11">11</a>
</span><span id="hl-6-12"><a href="#hl-6-12">12</a>
</span><span id="hl-6-13"><a href="#hl-6-13">13</a>
</span><span id="hl-6-14"><a href="#hl-6-14">14</a>
</span><span id="hl-6-15"><a href="#hl-6-15">15</a>
</span><span id="hl-6-16"><a href="#hl-6-16">16</a>
</span><span id="hl-6-17"><a href="#hl-6-17">17</a>
</span><span id="hl-6-18"><a href="#hl-6-18">18</a>
</span><span id="hl-6-19"><a href="#hl-6-19">19</a>
</span><span id="hl-6-20"><a href="#hl-6-20">20</a>
</span><span id="hl-6-21"><a href="#hl-6-21">21</a>
</span><span id="hl-6-22"><a href="#hl-6-22">22</a>
</span><span id="hl-6-23"><a href="#hl-6-23">23</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="rust"><span><span><span>pub</span><span> </span><span>fn</span> <span>sum_rayon</span><span>(</span><span>pool</span>: <span>&amp;</span><span>rayon</span>::<span>ThreadPool</span><span>,</span><span> </span><span>data</span>: <span>&amp;</span><span>[</span><span>f32</span><span>],</span><span> </span><span>partial_sums</span>: <span>&amp;</span><span>mut</span><span> </span><span>[</span><span>f64</span><span>])</span><span> </span>-&gt; <span>f64</span> <span>{</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>cores</span><span> </span><span>=</span><span> </span><span>pool</span><span>.</span><span>current_num_threads</span><span>();</span><span>
</span></span></span><span><span><span>    </span><span>let</span><span> </span><span>chunk_size</span><span> </span><span>=</span><span> </span><span>scalars_per_core</span><span>(</span><span>data</span><span>.</span><span>len</span><span>(),</span><span> </span><span>cores</span><span>);</span><span>       </span><span>// Defined elsewhere
</span></span></span><span><span><span></span><span>    </span><span>let</span><span> </span><span>partial_sums_ptr</span><span> </span><span>=</span><span> </span><span>partial_sums</span><span>.</span><span>as_mut_ptr</span><span>()</span><span> </span><span>as</span><span> </span><span>usize</span><span>;</span><span>  </span><span>// Pointers aren't safe to pass around
</span></span></span><span><span><span></span><span>
</span></span></span><span><span><span>    </span><span>pool</span><span>.</span><span>broadcast</span><span>(</span><span>|</span><span>context</span>: <span>rayon</span>::<span>BroadcastContext</span><span>&lt;</span><span>'_</span><span>&gt;|</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>thread_index</span><span> </span><span>=</span><span> </span><span>context</span><span>.</span><span>index</span><span>();</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>start</span><span> </span><span>=</span><span> </span><span>thread_index</span><span> </span><span>*</span><span> </span><span>chunk_size</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>if</span><span> </span><span>start</span><span> </span><span>&gt;=</span><span> </span><span>data</span><span>.</span><span>len</span><span>()</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>return</span><span>;</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>stop</span><span> </span><span>=</span><span> </span><span>std</span>::<span>cmp</span>::<span>min</span><span>(</span><span>start</span><span> </span><span>+</span><span> </span><span>chunk_size</span><span>,</span><span> </span><span>data</span><span>.</span><span>len</span><span>());</span><span>
</span></span></span><span><span><span>        </span><span>let</span><span> </span><span>partial_sum</span><span> </span><span>=</span><span> </span><span>sum_unrolled</span><span>(</span><span>&amp;</span><span>data</span><span>[</span><span>start</span><span>..</span><span>stop</span><span>]);</span><span>
</span></span></span><span><span><span>        </span><span>unsafe</span><span> </span><span>{</span><span>
</span></span></span><span><span><span>            </span><span>ptr</span>::<span>write</span><span>(</span><span> </span><span>// Cast back to a pointer:
</span></span></span><span><span><span></span><span>                </span><span>(</span><span>partial_sums_ptr</span><span> </span><span>as</span><span> </span><span>*</span><span>mut</span><span> </span><span>f64</span><span>).</span><span>add</span><span>(</span><span>thread_index</span><span>),</span><span>
</span></span></span><span><span><span>                </span><span>partial_sum</span><span>,</span><span>
</span></span></span><span><span><span>            </span><span>);</span><span>
</span></span></span><span><span><span>        </span><span>}</span><span>
</span></span></span><span><span><span>    </span><span>});</span><span>
</span></span></span><span><span><span>
</span></span></span><span><span><span>    </span><span>partial_sums</span><span>.</span><span>iter</span><span>().</span><span>copied</span><span>().</span><span>sum</span><span>()</span><span>
</span></span></span><span><span><span></span><span>}</span><span>
</span></span></span></code></pre></td></tr></tbody></table></div><h3 id="taskflow">Taskflow</h3><p>Taskflow is one of the most popular C++ libraries for parallelism.
It has many features, including async execution graphs on CPUs and GPUs.
<a href="https://github.com/taskflow/taskflow/blob/b3c1e5fd8e2d67eaead944a8d869f87e6b58bbbe/README.md?plain=1#L84-L106">The most common example</a> looks like this:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-7-1"><a href="#hl-7-1"> 1</a>
</span><span id="hl-7-2"><a href="#hl-7-2"> 2</a>
</span><span id="hl-7-3"><a href="#hl-7-3"> 3</a>
</span><span id="hl-7-4"><a href="#hl-7-4"> 4</a>
</span><span id="hl-7-5"><a href="#hl-7-5"> 5</a>
</span><span id="hl-7-6"><a href="#hl-7-6"> 6</a>
</span><span id="hl-7-7"><a href="#hl-7-7"> 7</a>
</span><span id="hl-7-8"><a href="#hl-7-8"> 8</a>
</span><span id="hl-7-9"><a href="#hl-7-9"> 9</a>
</span><span id="hl-7-10"><a href="#hl-7-10">10</a>
</span><span id="hl-7-11"><a href="#hl-7-11">11</a>
</span><span id="hl-7-12"><a href="#hl-7-12">12</a>
</span><span id="hl-7-13"><a href="#hl-7-13">13</a>
</span><span id="hl-7-14"><a href="#hl-7-14">14</a>
</span><span id="hl-7-15"><a href="#hl-7-15">15</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="cpp"><span><span><span>#include</span> <span>&lt;taskflow/taskflow.hpp&gt;</span><span>
</span></span></span><span><span><span></span><span>int</span> <span>main</span><span>()</span> <span>{</span>
</span></span><span><span>    <span>tf</span><span>::</span><span>Executor</span> <span>executor</span><span>;</span>
</span></span><span><span>    <span>tf</span><span>::</span><span>Taskflow</span> <span>taskflow</span><span>;</span>
</span></span><span><span>    <span>auto</span> <span>[</span><span>A</span><span>,</span> <span>B</span><span>,</span> <span>C</span><span>,</span> <span>D</span><span>]</span> <span>=</span> <span>taskflow</span><span>.</span><span>emplace</span><span>(</span> <span>// create four tasks
</span></span></span><span><span><span></span>        <span>[]</span> <span>()</span> <span>{</span> <span>std</span><span>::</span><span>cout</span> <span>&lt;&lt;</span> <span>"TaskA</span><span>\n</span><span>"</span><span>;</span> <span>},</span>
</span></span><span><span>        <span>[]</span> <span>()</span> <span>{</span> <span>std</span><span>::</span><span>cout</span> <span>&lt;&lt;</span> <span>"TaskB</span><span>\n</span><span>"</span><span>;</span> <span>},</span>
</span></span><span><span>        <span>[]</span> <span>()</span> <span>{</span> <span>std</span><span>::</span><span>cout</span> <span>&lt;&lt;</span> <span>"TaskC</span><span>\n</span><span>"</span><span>;</span> <span>},</span>
</span></span><span><span>        <span>[]</span> <span>()</span> <span>{</span> <span>std</span><span>::</span><span>cout</span> <span>&lt;&lt;</span> <span>"TaskD</span><span>\n</span><span>"</span><span>;</span> <span>}</span> 
</span></span><span><span>    <span>);</span>                                  
</span></span><span><span>    <span>A</span><span>.</span><span>precede</span><span>(</span><span>B</span><span>,</span> <span>C</span><span>);</span> <span>// A runs before B and C
</span></span></span><span><span><span></span>    <span>D</span><span>.</span><span>succeed</span><span>(</span><span>B</span><span>,</span> <span>C</span><span>);</span> <span>// D runs after  B and C
</span></span></span><span><span><span></span>    <span>executor</span><span>.</span><span>run</span><span>(</span><span>taskflow</span><span>).</span><span>wait</span><span>();</span> 
</span></span><span><span>    <span>return</span> <span>0</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></td></tr></tbody></table></div><p>Despite being just an example, it clearly shows how different Taskflow’s core objectives are from OpenMP and Fork Union.
It is still probably mainly used for simple static parallelism, similar to our case without complex dependencies and the <code>taskflow</code> can be reused.
Here is how “Parallel Reductions Benchmark” wraps Taskflow:</p><div><table><tbody><tr><td><pre tabindex="0"><code><span id="hl-8-1"><a href="#hl-8-1"> 1</a>
</span><span id="hl-8-2"><a href="#hl-8-2"> 2</a>
</span><span id="hl-8-3"><a href="#hl-8-3"> 3</a>
</span><span id="hl-8-4"><a href="#hl-8-4"> 4</a>
</span><span id="hl-8-5"><a href="#hl-8-5"> 5</a>
</span><span id="hl-8-6"><a href="#hl-8-6"> 6</a>
</span><span id="hl-8-7"><a href="#hl-8-7"> 7</a>
</span><span id="hl-8-8"><a href="#hl-8-8"> 8</a>
</span><span id="hl-8-9"><a href="#hl-8-9"> 9</a>
</span><span id="hl-8-10"><a href="#hl-8-10">10</a>
</span><span id="hl-8-11"><a href="#hl-8-11">11</a>
</span><span id="hl-8-12"><a href="#hl-8-12">12</a>
</span><span id="hl-8-13"><a href="#hl-8-13">13</a>
</span><span id="hl-8-14"><a href="#hl-8-14">14</a>
</span><span id="hl-8-15"><a href="#hl-8-15">15</a>
</span><span id="hl-8-16"><a href="#hl-8-16">16</a>
</span><span id="hl-8-17"><a href="#hl-8-17">17</a>
</span><span id="hl-8-18"><a href="#hl-8-18">18</a>
</span><span id="hl-8-19"><a href="#hl-8-19">19</a>
</span><span id="hl-8-20"><a href="#hl-8-20">20</a>
</span><span id="hl-8-21"><a href="#hl-8-21">21</a>
</span><span id="hl-8-22"><a href="#hl-8-22">22</a>
</span><span id="hl-8-23"><a href="#hl-8-23">23</a>
</span><span id="hl-8-24"><a href="#hl-8-24">24</a>
</span><span id="hl-8-25"><a href="#hl-8-25">25</a>
</span><span id="hl-8-26"><a href="#hl-8-26">26</a>
</span><span id="hl-8-27"><a href="#hl-8-27">27</a>
</span><span id="hl-8-28"><a href="#hl-8-28">28</a>
</span><span id="hl-8-29"><a href="#hl-8-29">29</a>
</span><span id="hl-8-30"><a href="#hl-8-30">30</a>
</span><span id="hl-8-31"><a href="#hl-8-31">31</a>
</span><span id="hl-8-32"><a href="#hl-8-32">32</a>
</span><span id="hl-8-33"><a href="#hl-8-33">33</a>
</span><span id="hl-8-34"><a href="#hl-8-34">34</a>
</span><span id="hl-8-35"><a href="#hl-8-35">35</a>
</span><span id="hl-8-36"><a href="#hl-8-36">36</a>
</span></code></pre></td><td><pre tabindex="0"><code data-lang="cpp"><span><span><span>template</span> <span>&lt;</span><span>typename</span> <span>serial_at</span> <span>=</span> <span>stl_accumulate_gt</span><span>&lt;</span><span>float</span><span>&gt;&gt;</span>
</span></span><span><span><span>class</span> <span>taskflow_gt</span> <span>{</span>
</span></span><span><span>    <span>float</span> <span>const</span> <span>*</span><span>const</span> <span>begin_</span> <span>=</span> <span>nullptr</span><span>;</span>
</span></span><span><span>    <span>float</span> <span>const</span> <span>*</span><span>const</span> <span>end_</span> <span>=</span> <span>nullptr</span><span>;</span>
</span></span><span><span>    <span>std</span><span>::</span><span>size_t</span> <span>const</span> <span>cores_</span> <span>=</span> <span>0</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>tf</span><span>::</span><span>Executor</span> <span>executor_</span><span>;</span>
</span></span><span><span>    <span>tf</span><span>::</span><span>Taskflow</span> <span>taskflow_</span><span>;</span>
</span></span><span><span>
</span></span><span><span>    <span>struct</span> <span>alignas</span><span>(</span><span>128</span><span>)</span> <span>thread_result_t</span> <span>{</span>
</span></span><span><span>        <span>double</span> <span>partial_sum</span> <span>=</span> <span>0.0</span><span>;</span>
</span></span><span><span>    <span>};</span>
</span></span><span><span>    <span>std</span><span>::</span><span>vector</span><span>&lt;</span><span>thread_result_t</span><span>&gt;</span> <span>sums_</span><span>;</span>
</span></span><span><span>
</span></span><span><span>  <span>public</span><span>:</span>
</span></span><span><span>    <span>taskflow_gt</span><span>()</span> <span>=</span> <span>default</span><span>;</span>
</span></span><span><span>    <span>taskflow_gt</span><span>(</span><span>float</span> <span>const</span> <span>*</span><span>b</span><span>,</span> <span>float</span> <span>const</span> <span>*</span><span>e</span><span>)</span>
</span></span><span><span>        <span>:</span> <span>begin_</span> <span>{</span><span>b</span><span>},</span> <span>end_</span> <span>{</span><span>e</span><span>},</span> <span>cores_</span> <span>{</span><span>total_cores</span><span>()},</span> <span>executor_</span> <span>{</span><span>static_cast</span><span>&lt;</span><span>unsigned</span><span>&gt;</span><span>(</span><span>cores_</span><span>)},</span> <span>sums_</span> <span>{</span><span>cores_</span><span>}</span> <span>{</span>
</span></span><span><span>
</span></span><span><span>        <span>auto</span> <span>const</span> <span>input_size</span> <span>=</span> <span>static_cast</span><span>&lt;</span><span>std</span><span>::</span><span>size_t</span><span>&gt;</span><span>(</span><span>end_</span> <span>-</span> <span>begin_</span><span>);</span>
</span></span><span><span>        <span>auto</span> <span>const</span> <span>chunk_size</span> <span>=</span> <span>scalars_per_core</span><span>(</span><span>input_size</span><span>,</span> <span>cores_</span><span>);</span>
</span></span><span><span>        <span>for</span> <span>(</span><span>std</span><span>::</span><span>size_t</span> <span>thread_index</span> <span>=</span> <span>0</span><span>;</span> <span>thread_index</span> <span>&lt;</span> <span>cores_</span><span>;</span> <span>++</span><span>thread_index</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>taskflow_</span><span>.</span><span>emplace</span><span>([</span><span>this</span><span>,</span> <span>input_size</span><span>,</span> <span>chunk_size</span><span>,</span> <span>thread_index</span><span>]</span> <span>{</span>
</span></span><span><span>                <span>std</span><span>::</span><span>size_t</span> <span>const</span> <span>start</span> <span>=</span> <span>std</span><span>::</span><span>min</span><span>(</span><span>thread_index</span> <span>*</span> <span>chunk_size</span><span>,</span> <span>input_size</span><span>);</span>
</span></span><span><span>                <span>std</span><span>::</span><span>size_t</span> <span>const</span> <span>stop</span> <span>=</span> <span>std</span><span>::</span><span>min</span><span>(</span><span>start</span> <span>+</span> <span>chunk_size</span><span>,</span> <span>input_size</span><span>);</span>
</span></span><span><span>                <span>sums_</span><span>[</span><span>thread_index</span><span>].</span><span>partial_sum</span> <span>=</span> <span>serial_at</span> <span>{</span><span>begin_</span> <span>+</span> <span>start</span><span>,</span> <span>begin_</span> <span>+</span> <span>stop</span><span>}();</span>
</span></span><span><span>            <span>});</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>
</span></span><span><span>    <span>double</span> <span>operator</span><span>()()</span> <span>{</span>
</span></span><span><span>        <span>executor_</span><span>.</span><span>run</span><span>(</span><span>taskflow_</span><span>).</span><span>wait</span><span>();</span>
</span></span><span><span>        <span>return</span> <span>std</span><span>::</span><span>accumulate</span><span>(</span><span>sums_</span><span>.</span><span>begin</span><span>(),</span> <span>sums_</span><span>.</span><span>end</span><span>(),</span> <span>0.0</span><span>,</span>
</span></span><span><span>                               <span>[](</span><span>double</span> <span>acc</span><span>,</span> <span>thread_result_t</span> <span>const</span> <span>&amp;</span><span>x</span><span>)</span> <span>noexcept</span> <span>{</span> <span>return</span> <span>acc</span> <span>+</span> <span>x</span><span>.</span><span>partial_sum</span><span>;</span> <span>});</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span><span>};</span>
</span></span></code></pre></td></tr></tbody></table></div><p>Only the <code>operator()</code> method is timed, leaving the construction costs out of the equation.</p><h2 id="conclusions--observations">Conclusions &amp; Observations</h2><p>Fork Union shows that a lean, 300-line fork-join pool can sit within ~20% of OpenMP, while more functional pools trail by an order of magnitude.
That margin will shift as more workloads, CPUs, and compilers are tested, so treat today’s numbers as directional, not gospel.
There may still be subtle memory-ordering bugs lurking in Fork Union, but the core observations should hold: <strong>dodge mutexes, dynamic queues, likely-pessimistic CAS paths, and false sharing — regardless of language or framework</strong>.</p><p>Rust is still new territory for me.
The biggest surprise is the <a href="https://github.com/rust-lang/rust/issues/32838">missing allocator support in <code>std::collections</code></a> on the stable toolchain.
Nightly’s <code>Vec::try_reserve_in</code> helps, but until stable lands, ergonomic custom allocation remains tricky.
The machinery exists in C++, yet most projects ignore it — so the culture needs to catch up.</p><hr><p>PS: Spot dubious memory-ordering?
<a href="https://github.com/ashvardanian/fork_union/issues">Open an issue</a>.
Want to close the remaining 20% gap?
Happy forking 🤗</p><blockquote><div lang="en" dir="ltr"><p>Fork Union, arguably the most unusual parallel-processing library on GitHub, just crossed its first 100 stars — my 12th project to reach that milestone 🥳</p><p>Repository: <a href="https://t.co/Gyg43GW6d7">https://t.co/Gyg43GW6d7</a></p><p>Unlike typical thread-pools, it avoids not only mutexes but even Compare-and-Swap… <a href="https://t.co/H2H7fgaXl4">pic.twitter.com/H2H7fgaXl4</a></p></div>— Ash Vardanian (@ashvardanian) <a href="https://twitter.com/ashvardanian/status/1964634808635539904?ref_src=twsrc%5Etfw">September 7, 2025</a></blockquote></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Dismissed as a joke, UK's first rice crop ripe for picking after hot summer (105 pts)]]></title>
            <link>https://www.bbc.co.uk/news/articles/c1wgeq702dyo</link>
            <guid>45402496</guid>
            <pubDate>Sun, 28 Sep 2025 07:44:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.co.uk/news/articles/c1wgeq702dyo">https://www.bbc.co.uk/news/articles/c1wgeq702dyo</a>, See on <a href="https://news.ycombinator.com/item?id=45402496">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main id="main-content" data-testid="main-content"><article id="urn-bbc-ares--article-c1wgeq702dyo"><header data-component="headline-block"><h2 id="main-heading" type="headline" tabindex="-1"><span role="text">Dismissed as a joke, UK's first rice crop ripe for picking after hot summer</span></h2></header><div data-component="image-block"><figure><p><span><picture><source srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 976w" type="image/webp"><img alt="A woman wearing jeans and a grey t-shirts leans over a green rice plant growing in a paddy field. Next to her are a handful of other rice plants." src="https://ichef.bbci.co.uk/ace/standard/1920/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg" srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/91a0/live/11a64bd0-9252-11f0-9cf6-cbf3e73ce2b9.jpg 976w" width="1920" height="1080"></picture></span><span role="text"><span>Image source, </span>Gwyndaf Hughes/BBC</span></p><figcaption><span>Image caption, </span><p>Nadine Mitschunas is the UK's first rice grower</p></figcaption></figure></div><div data-testid="single-byline" data-component="sub-byline-block"><p><span>By</span><span>Gwyndaf Hughes</span></p><p><span>Climate and science videographer</span></p></div><div data-component="text-block"><p><b>In an ordinary field in a quiet part of east England, a unique experiment is taking root.</b></p><p>"When I tell people what I'm doing here, they think I'm joking," says Nadine Mitschunas, the UK's first and only rice-grower.</p><p>The crops in four small paddy fields are doing well, helped by basking in our hottest summer on record.</p><p>"We could never have contemplated this would grow here," says farmer Sarah Taylor, whose land the rice is planted  on. "Not in a million years," her husband Craig adds.</p><p>This young crop is part of an ambitious trial to see what foods Britain could grow in the future. </p></div><div data-component="text-block"><p>The trial is trying to answer big questions about how we can produce enough food and protect farmer's livelihoods in a world being altered by climate change.</p><p>The BBC got a sneak peek at the rice plants before harvest.</p><p>Rice plants look a lot like thick grass. But running up the stalks there are small beads - these are the rice grains. They were still brown when we visited, but will be picked when they turn white.</p><p>Nadine, an award-winning ecologist, is incredibly proud.</p></div><div data-component="image-block"><figure><p><span><picture><source srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg.webp 976w" type="image/webp"><img alt="Two green rice plants grow in muddy brown water, with the raised bank of the paddy field behind them. " loading="lazy" src="https://ichef.bbci.co.uk/ace/standard/1920/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg" srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/be11/live/d42d5680-9252-11f0-9cf6-cbf3e73ce2b9.jpg 976w" width="1920" height="1080"></picture></span><span role="text"><span>Image source, </span>Gwyndaf Hughes/BBC</span></p><figcaption><span>Image caption, </span><p>The UK's first rice paddy field - where nine varieties of the crop have been grown this year</p></figcaption></figure></div><div data-component="text-block"><p>"I'm actually amazed because they are big, happy, bushy plants," she says, warning me not to fall over when we step into the calf-deep water.</p><p>She points out her favourites. "This is Estrella from Colombia, the best one so far," she says. "But I'm least impressed with this," she says, gesturing to a Japanese rice that has not flowered.</p><p>This experiment is the brainchild of the UK Centre for Ecology and Hydrology (UKCEH), in partnership with Craig and Sarah Taylor.</p><p>Dozens of plants were planted in four mini paddy fields dug out and flooded on the Taylors' farm a few miles north of Ely in Cambridgeshire.</p><p>We often think of rice as a tropical plant, but it does grow in colder climates.</p><p>Nine varieties are growing, including from Brazil, Colombia, Italy and the Philippines. They include the stars of the rice world - risotto, basmati and sushi.</p><p>The plants did well in the hot, sunny summer, which the Met Office says was the hottest in the UK since records began in 1884.</p><p>"Nobody has tried this before, but with climate change, we have crops that, 10 years ago, we wouldn't have thought would be viable. In 10 years time, rice could be a completely perfect crop for us," Nadine says.</p><p>This is the very edge of where rice can grow at the moment and it would be a risky crop for farmers to plant commercially, says Prof Richard Pywell who is leading the project for UKCEH.</p><p>But Britain's climate is changing quickly. If annual average temperatures warm by between 2 and 4C compared to pre-industrial levels - a scenario that many scientists say is likely - <a href="https://rmets.onlinelibrary.wiley.com/doi/10.1002/cli2.70007">rice could be grown widely in the UK, according to research.<span>, <!-- -->external</span></a></p></div><div data-component="image-block"><figure><p><span><picture><source srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg.webp 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg.webp 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg.webp 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg.webp 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg.webp 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg.webp 976w" type="image/webp"><img alt="An aerial image of a rectangular field with a boundary made of a ditch of water and a green hedge. Inside the field are 62 small squares of different shades of brown and green, with different crops inside including the four paddy fields." loading="lazy" src="https://ichef.bbci.co.uk/ace/standard/1920/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg" srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/9ee2/live/acba4460-9251-11f0-b391-6936825093bd.jpg 976w" width="1920" height="1080"></picture></span><span role="text"><span>Image source, </span>Gwyndaf Hughes/BBC</span></p><figcaption><span>Image caption, </span><p>The rice is part of a bigger trial looking at the future of agriculture in the UK</p></figcaption></figure></div><div data-component="text-block"><p>But this project is about more than growing British rice for our dinner plates. It could also help the UK tackle climate change.</p><p>The land in the Fens is some of the most productive in the UK. A third of the vegetables grown in Britain come from here, with a value of around £1.2bn per year. But this has a significant cost for the environment and climate.</p><p>The farms are on rich peat soil that used to be underwater but is now slowly drying out. That is releasing carbon dioxide into the atmosphere, contributing to climate change. Nationally, peat soils account for 3% of our greenhouse gas emissions.</p><p>That is also degrading the quality of the soil, a change seen in real time by farmers like Craig and Sarah. They feel deeply connected to the land and its history.</p><p>"All my ancestors were Fenmen. I love this place, we've been here for 500 plus years," says Craig. </p><p>The rice field is surrounded by potato, onion and beet crops, which are still the thriving staples here.</p><p>Digging a healthy clump of potatoes from the rich, black soil, Craig says, "potatoes are an amazing crop. You can't knock that, but we know things need to change."</p><p>"We don't want people thinking we're the 'crazy rice farmers' - this is about rethinking the whole system and making it work for everyone," he says.</p><p>Unpredictable weather patterns in recent years have hit farmers nationally, affecting harvests and crop yields in some cases.</p><p>"We see that the future isn't stable. We want to be able to write our own destiny and not have it decided for us," says Sarah.</p><p>"Our legacy for our children and hopefully their children is really important to us and I want them to know that we at least try to make a difference," she says.</p></div><div data-component="image-block"><figure><p><span><picture><source srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg.webp 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg.webp 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg.webp 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg.webp 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg.webp 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg.webp 976w" type="image/webp"><img alt="A man wearing a black t-shirt and blue gilet stands next to a woman wearing a white t-shirt and red gilet. They are leaning over a metal fence in a green field, with their arms resting on the fence. " loading="lazy" src="https://ichef.bbci.co.uk/ace/standard/1920/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg" srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/c99d/live/6c2da670-9252-11f0-84c8-99de564f0440.jpg 976w" width="1920" height="1080"></picture></span><span role="text"><span>Image source, </span>Gwyndaf Hughes/BBC</span></p><figcaption><span>Image caption, </span><p>Craig and Sarah Taylor's families have farmed in Cambridgeshire for generations</p></figcaption></figure></div><div data-component="text-block"><p>As well as rice, the team are trialling other crops including lettuce and hybrid willow that grow in waterlogged conditions.</p><p>By flooding the peat soils in parts of Cambridgeshire, greenhouse gases could stay locked in the wet soil, cutting off that source of greenhouse gas emissions.</p><p>Even though growing rice produces methane, which is a potent greenhouse gas, initial results from the trials so far suggest the rice crop is not producing more emissions than it helps lock away.</p><p>The government is interested in what happens here too, and officials from the Department for Environment Food and Rural Affairs have visited the site. </p><p>It could be a radical breakthrough in one of the thorniest questions in the UK - how to protect farming and food supplies, while also addressing the huge impacts they have on the environment and climate. </p><p>The UK food system, including imports, is equivalent to 38% of UK greenhouse gas emissions, while agriculture accounts for 11.7%.</p><p>Growing rice on peat soils won't fix that overnight, but it could provide a model.</p><p>"We're at a critical juncture in climate change and we need to make decisions. We need to understand what sort of crops we could be potentially growing in the future," explains Richard from UKCEH.</p></div><div data-component="image-block"><figure><p><span><picture><source srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 976w" type="image/webp"><img alt="Green rice grains grow from a plant among other blurred green plants." loading="lazy" src="https://ichef.bbci.co.uk/ace/standard/1920/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg" srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/d0e3/live/25cc1d00-9253-11f0-9cf6-cbf3e73ce2b9.jpg 976w" width="1920" height="1080"></picture></span><span role="text"><span>Image source, </span>Gwyndaf Hughes/BBC</span></p><figcaption><span>Image caption, </span><p>Rice varieties including risotto and basmati are growing in the trial in Cambridgeshire</p></figcaption></figure></div><div data-component="text-block"><p>"It's possible that for certain areas, peatland re-wetting and growing rice may be a viable option. In other areas, we may continue to grow our conventional crops, but under different conditions," he says.</p><p>Growing rice domestically sounds simple, but this is a complicated project with big ambitions.</p><p>It will still be some time before we can test taste a UK rice crop - but it's a very real possibility that in the next decade, UK-grown rice could be coming to our dinner plates.</p></div><div data-component="image-block"><figure><p><span><picture><source srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg.webp 976w" type="image/webp"><img alt="Green rice grains grow from a plant among other blurred green plants." loading="lazy" src="https://ichef.bbci.co.uk/ace/standard/1920/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg" srcset="https://ichef.bbci.co.uk/ace/standard/240/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg 240w, https://ichef.bbci.co.uk/ace/standard/320/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg 320w, https://ichef.bbci.co.uk/ace/standard/480/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg 480w, https://ichef.bbci.co.uk/ace/standard/624/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg 624w, https://ichef.bbci.co.uk/ace/standard/800/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg 800w, https://ichef.bbci.co.uk/ace/standard/976/cpsprodpb/6a2e/live/5134c8c0-9253-11f0-9cf6-cbf3e73ce2b9.jpg 976w" width="1920" height="1080"></picture></span><span role="text"><span>Image source, </span>Gwyndaf Hughes/BBC</span></p><figcaption><span>Image caption, </span><p>The rice will be harvested in October</p></figcaption></figure></div></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Solar panels + cold = A potential problem (159 pts)]]></title>
            <link>https://www.linspyre.com/ecoholics/temps.html</link>
            <guid>45401051</guid>
            <pubDate>Sun, 28 Sep 2025 01:48:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.linspyre.com/ecoholics/temps.html">https://www.linspyre.com/ecoholics/temps.html</a>, See on <a href="https://news.ycombinator.com/item?id=45401051">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        
        <figcaption>Photo Credit: Kevin L @ EcoFlow DELTA Facebook Group</figcaption>
    <h2>Do Not Do This...Unless You Want Magic Black Smoke</h2>
    <p>You purchased a new Delta Pro and looked up the
    <a href="https://www.linspyre.com/ecoholics/specs.html" target="_blank">specifications</a> - Delta Pro can take up to 1600w/150v/15a of solar input. Then you buy four EcoFlow 400w Rigid solar panels
    to plug them in series.</p>
    <p>You check the math</p>
    <p>37.1v VoC × 4 panels = 148.4v</p>
    <p>... just under the 150v Delta Pro solar input limit. The new solar array is right at the watt limit, just under the volt limit, and a little under the amp limit.
    You think you are good to go, right?</p><p><span>Wrong!!!</span></p>
    <p>This will likely create black magic smoke from your solar generator on the first cold and sunny day.
    This is because solar panel voltages increase as temperatures drop. We see many complaints from newbee EcoFlow customers
    who are all excited with their new toy, they proceed destroy their MPPT controller, then complain bitterly on social media about
    EcoFlow's customer support and voided warranty policy. Plugging in four 400w solar panels in series is similar to filling your gasoline powered
    car with diesel and wondering why the car manufacturer isn't replacing your new car.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bonding twelve 56K modems together to set dial-up broadband records (112 pts)]]></title>
            <link>https://www.tomshardware.com/networking/enthusiasts-bond-twelve-56k-dial-up-modems-together-to-set-dial-up-broadband-records-a-dozen-screeching-boxes-achieve-record-668-kbps-download-speeds</link>
            <guid>45400828</guid>
            <pubDate>Sun, 28 Sep 2025 00:59:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomshardware.com/networking/enthusiasts-bond-twelve-56k-dial-up-modems-together-to-set-dial-up-broadband-records-a-dozen-screeching-boxes-achieve-record-668-kbps-download-speeds">https://www.tomshardware.com/networking/enthusiasts-bond-twelve-56k-dial-up-modems-together-to-set-dial-up-broadband-records-a-dozen-screeching-boxes-achieve-record-668-kbps-download-speeds</a>, See on <a href="https://news.ycombinator.com/item?id=45400828">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">
<section>


<div id="article-body">
<p id="ad8b068f-18a1-4e4c-9734-78dd200b7943">The latest episode published by tech channel <a data-analytics-id="inline-link" href="https://www.youtube.com/watch?v=LZ259Jx8MQY" data-url="https://www.youtube.com/watch?v=LZ259Jx8MQY" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">The Serial Port</a> began with an interesting question: Is it possible to stream YouTube via dial-up internet? As the headline suggests, the answer is a resounding yes, with our intrepid heroes managing to establish a connection offering download speeds of 668.8 kbps. The feat was eventually achieved using an era-appropriate Windows XP PC, a Cisco VoIP unit, a couple of serial port packing PCI cards, and a dozen 56K modems bonded using Multilink PPP (MPPP) technology. This is probably a world record.</p><figure data-bordeaux-image-check="" id="8633c508-a059-4e2a-aa3c-b9a06a82b171"><div><p> <picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-320-80.jpg.webp 320w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge.jpg" alt="Broadband using 56K dial-up modems" srcset="https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge-320-80.jpg 320w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-new-v2-image="true" data-original-mos="https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/tbBDF6FdgrsgxL44yJh4Ge.jpg">
</picture></p></div><figcaption itemprop="caption description"><span>success! </span><span itemprop="copyrightHolder">(Image credit: &nbsp;<a href="https://www.youtube.com/watch?v=LZ259Jx8MQY" data-url="https://www.youtube.com/watch?v=LZ259Jx8MQY" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">The Serial Port</a>)</span></figcaption></figure><h2 id="when-broadband-wasn-t-so-broad-3">When broadband wasn’t so broad</h2><p id="ce08e175-c9a0-4bf7-8793-4bf7cbc2a9fb">The latest regulations from the FCC define <a data-analytics-id="inline-link" href="https://www.tomshardware.com/news/broadband-internet-prices-speed-us-comparison" data-before-rewrite-localise="https://www.tomshardware.com/news/broadband-internet-prices-speed-us-comparison">broadband </a>as 100 Mbps or higher, but in 2000, a far slower connection of 200 Kbps or higher was considered adequate to earn the designation. Back then, connectivity was slow, but by the turn of the millennium, websites and communications were simpler and had lower bandwidth. For example, downloading multimedia files like MP3s back then could tie up your phone line for 10 to 20 minutes. Thus, applications like the infamous Napster and emerging streaming video and online multimedia experiences begged for broadband.</p><p id="ce08e175-c9a0-4bf7-8793-4bf7cbc2a9fb-1">Multilink PPP technology was one possible solution to faster internet connectivity before ISDN and ADSL connectivity became widespread. As the name suggests, MPPP tech combines the bandwidth of multiple <a data-analytics-id="inline-link" href="https://www.tomshardware.com/news/apples-modems-are-three-years-behind-qualcomm-report" data-before-rewrite-localise="https://www.tomshardware.com/news/apples-modems-are-three-years-behind-qualcomm-report">modems </a>to create a single logical data pipe.</p><p>Commercial solutions like “the Diamond Multimedia Shotgun, a PCI card with two onboard modems that could be bonded together using multilink PPP,” leveraged this tech, point out the YouTubers. However, it didn’t gain traction due to the multiple lines and ISP shenanigans required.</p><p>Now, with an ISP that supports digital modems and the equipment (including a Cisco VoIP gateway) to make it happen, The Serial Port had an opportunity to see how far Multilink PPP can go. Encouragingly, the official MPPP standard doesn’t highlight any practical limits…</p><h2 id="cover-your-ears-preparing-for-screeching-modem-broadband-3">Cover your ears - Preparing for screeching modem broadband</h2><p id="ea6e6f0b-2ed5-436d-8d2b-0a80a6d4164b">Refocusing on the overarching YouTube streaming goal, our intrepid TechTubers calculated how much bandwidth would need to be squeezed out of their bonded modem array to make streaming tolerable. In brief, ~four 56K modems should be sufficient for minimum-quality desktop streaming (240p, ~200 kbps) in 2025.</p><p>The first client PC chosen was a 2001-vintage <a data-analytics-id="inline-link" href="https://www.tomshardware.com/tag/ibm" data-auto-tag-linker="true" data-before-rewrite-localise="https://www.tomshardware.com/tag/ibm">IBM</a> desktop with Windows ME, released just ahead of the widespread availability of broadband. This setup worked with two 56K modems bonded together—a promising start.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-A78rnrL7MDW7YovDDCio4S"><section><p>Get Tom's Hardware's best news and in-depth reviews, straight to your inbox.</p></section></div><p>With the proof that MPPP worked on this contemporaneous PC system, the TechTubers sought to pack more serial ports into the IBM. A card featuring an extra eight serial ports was found. However, driver clashes prevented further scaling…</p><p>Still optimistic about their project, the team moved up to “slightly newer hardware.” Specifically, an IBM Think Center from 2004 was chosen as a compromise, as we did not want to go too modern. <a data-analytics-id="inline-link" href="https://www.tomshardware.com/software/windows/40-years-of-windows-how-windows-xp-changed-everything" data-before-rewrite-localise="https://www.tomshardware.com/software/windows/40-years-of-windows-how-windows-xp-changed-everything">Windows XP</a> was pre-installed on this system, and it was hoped that it could do better with MPPP.</p><p>Using the newer XP PC, two identical serial expansion cards were installed. However, they didn’t work together, as they overlapped COM port addresses in the Device Manager. So the TechTubers switched to a different brand of serial expansion card for the second card. They ended up with 13 ports in total (including the one on the motherboard).</p><figure data-bordeaux-image-check="" id="939a627f-4eed-4420-ad22-7897c56e7624"><div><p> <picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-320-80.jpg.webp 320w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe.jpg" alt="Broadband using 56K dial-up modems" srcset="https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe-320-80.jpg 320w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-new-v2-image="true" data-original-mos="https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe.jpg">
</picture><a href="https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe.jpg" target="_blank" data-url="https://cdn.mos.cms.futurecdn.net/5QyoWmdTNq6ojA22QLyQGe.jpg" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"></a></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: &nbsp;<a href="https://www.youtube.com/watch?v=LZ259Jx8MQY" data-url="https://www.youtube.com/watch?v=LZ259Jx8MQY" target="_blank" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none">The Serial Port</a>)</span></figcaption></figure><h2 id="the-dusty-dozen-3">The dusty dozen</h2><p id="9ff16b99-222f-4eb5-af05-efb0eae1cf4c">Unlike with Windows ME, where each modem was dialed in turn, it was observed that XP dialed them all simultaneously! Moreover, the team successfully scaled up from two modems to 12 after several rounds of fiddling with modem DIP switches, phone line connectors, and XP’s serial port controls. As more modems were added to the system, the TechTubers laughed joyously at the sound of multiple modems dialing and negotiating.</p><p>The dozen modems connected to the Windows XP machine achieved a combined connection speed of 668.8 kbps, offering blistering download speeds. Testing confirmed that this system was able to load and stream <a data-analytics-id="inline-link" href="https://www.tomshardware.com/news/youtube-responds-to-delayed-loading-in-rival-browser-complaints" data-before-rewrite-localise="https://www.tomshardware.com/news/youtube-responds-to-delayed-loading-in-rival-browser-complaints">YouTube</a> videos, and no buffering was observed after a slight delay (likely due to the old PC's processing power).</p><p>Did The Serial Port achieve a world record? The TechTubers couldn’t find any accounts of people using more than four modems in MPPP at the same time. The video ends with a tease that they haven’t yet found a limit to MPPP…</p><p><em>Follow </em><a data-analytics-id="inline-link" href="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" target="_blank" data-url="https://news.google.com/publications/CAAqLAgKIiZDQklTRmdnTWFoSUtFSFJ2YlhOb1lYSmtkMkZ5WlM1amIyMG9BQVAB" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><em>Tom's Hardware on Google News</em></a><em>, or </em><a data-analytics-id="inline-link" href="https://google.com/preferences/source?q=" target="_blank" data-url="https://google.com/preferences/source?q=" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><em>add us as a preferred source</em></a><em>, to get our up-to-date news, analysis, and reviews in your feeds. Make sure to click the Follow button!</em></p>
</div>



<!-- Drop in a standard article here maybe? -->



<div id="slice-container-authorBio-A78rnrL7MDW7YovDDCio4S"><p>Mark Tyson is a news editor at Tom's Hardware. He enjoys covering the full breadth of PC tech; from business and semiconductor design to products approaching the edge of reason.</p></div>
</section>




</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Learn to play Go (341 pts)]]></title>
            <link>https://online-go.com/learn-to-play-go</link>
            <guid>45400376</guid>
            <pubDate>Sat, 27 Sep 2025 23:50:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://online-go.com/learn-to-play-go">https://online-go.com/learn-to-play-go</a>, See on <a href="https://news.ycombinator.com/item?id=45400376">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="loading-svg-container" role="status" aria-live="polite"><p><span>Loading...</span></p></div></div>]]></description>
        </item>
    </channel>
</rss>