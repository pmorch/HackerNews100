<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 23 Oct 2025 23:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[FocusTube: A Chrome extension that hides YouTube Shorts (151 pts)]]></title>
            <link>https://github.com/CaptainYouz/FocusTube</link>
            <guid>45687227</guid>
            <pubDate>Thu, 23 Oct 2025 21:11:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/CaptainYouz/FocusTube">https://github.com/CaptainYouz/FocusTube</a>, See on <a href="https://news.ycombinator.com/item?id=45687227">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <nav aria-label="Global">
              <ul>
                  <li>
      

      <div>
        <div>
            <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_platform_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>
          GitHub Copilot

        </p><p>

        Write better code with AI
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_spark&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_spark_link_platform_navbar&quot;}" href="https://github.com/features/spark">
      
      <div>
        <p>
          GitHub Spark

            <span>
              New
            </span>
        </p><p>

        Build and deploy intelligent apps
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_models&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_models_link_platform_navbar&quot;}" href="https://github.com/features/models">
      
      <div>
        <p>
          GitHub Models

            <span>
              New
            </span>
        </p><p>

        Manage and compare prompts
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_platform_navbar&quot;}" href="https://github.com/security/advanced-security">
      
      <div>
        <p>
          GitHub Advanced Security

        </p><p>

        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_platform_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>
          Actions

        </p><p>

        Automate any workflow
      </p></div>

    
</a></li>

                  </ul>
                </div>
            <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_platform_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>
          Codespaces

        </p><p>

        Instant dev environments
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_platform_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>
          Issues

        </p><p>

        Plan and track work
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_platform_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>
          Code Review

        </p><p>

        Manage code changes
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_platform_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>
          Discussions

        </p><p>

        Collaborate outside of code
      </p></div>

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_platform_navbar&quot;}" href="https://github.com/features/code-search">
      
      <div>
        <p>
          Code Search

        </p><p>

        Find more, search less
      </p></div>

    
</a></li>

                  </ul>
                </div>
            
        </div>

          <p>
            <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;view_all_features&quot;,&quot;context&quot;:&quot;platform&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;view_all_features_link_platform_navbar&quot;}" href="https://github.com/features">
              View all features
              
</a>          </p>
      </div>
</li>


                  <li>
      

      
</li>


                  <li>
      

      <div>

                      <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                      <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://github.com/resources/events">
      Events &amp; Webinars

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://github.com/partners">
      Partners

    
</a></li>

                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                  </ul>
                </div>
</li>


                  <li>
      

      <div>
                <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>
          GitHub Sponsors

        </p><p>

        Fund open source developers
      </p></div>

    
</a></li>

                  </ul>
                </div>
                <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>
          The ReadME Project

        </p><p>

        GitHub community articles
      </p></div>

    
</a></li>

                  </ul>
                </div>
                
            </div>
</li>


                  <li>
      

      <div>

                  <ul>
                      <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>
          Enterprise platform

        </p><p>

        AI-powered developer platform
      </p></div>

    
</a></li>

                  </ul>
                </div>
</li>


                  <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;platform&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;platform_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

              </ul>
            </nav>

        <div>
                


<qbsearch-input data-scope="repo:CaptainYouz/FocusTube" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="mv-2FMdiKmyPCLWFJEyr2dIRQig-9k5E1rjYMGY9r1nNAgTKc7LL5ulrTz2n22c1PyaG3w2qbFxF_KeEAHyV_w" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="CaptainYouz/FocusTube" data-current-org="" data-current-owner="CaptainYouz" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=CaptainYouz%2FFocusTube" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/CaptainYouz/FocusTube&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="8d5bdf23909ab29fc09197eabd2be1b764b4f69eb688d925b4f751d06b5d37f9" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a></p><p>
    <react-partial-anchor>
      <tool-tip id="tooltip-981b4cfc-c51b-4da0-b606-4e7fff454346" for="icon-button-059478fb-d97b-4fed-906b-754d5f88051d" popover="manual" data-direction="s" data-type="label" data-view-component="true">Appearance settings</tool-tip>

      <template data-target="react-partial-anchor.template">
        <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.f595f41454298e934d3c.module.css">
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/appearance-settings.6c63a6de228d6520804d.module.css">

<react-partial partial-name="appearance-settings" data-ssr="false" data-attempted-ssr="false" data-react-profiling="false">
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>


      </template>
    </react-partial-anchor>
  </p>

          </div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Date bug in Rust-based coreutils affects Ubuntu 25.10 automatic updates (103 pts)]]></title>
            <link>https://lwn.net/Articles/1043103/</link>
            <guid>45686919</guid>
            <pubDate>Thu, 23 Oct 2025 20:49:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/Articles/1043103/">https://lwn.net/Articles/1043103/</a>, See on <a href="https://news.ycombinator.com/item?id=45686919">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>The Ubuntu Project has <a href="https://lists.ubuntu.com/archives/ubuntu-security-announce/2025-October/009890.html">announced</a>
that a bug in the Rust-based <a href="https://uutils.github.io/">uutils</a> version of the
<tt>date</tt> command shipped with Ubuntu&nbsp;25.10 broke automatic
updates:</p>

<blockquote>
<p>Some Ubuntu 25.10 systems have been unable to automatically check
for available software updates. Affected machines include cloud
deployments, container images, Ubuntu Desktop and Ubuntu Server
installs.</p>
</blockquote>

<p>The announcement includes remediation instructions for those
affected by the bug. Systems with the <tt>rust-coreutils</tt> package
version 0.2.2-0ubuntu2 or earlier have the bug, it is fixed in
0.2.2-0ubuntu2.1 or later. It does not impact manual updates using the
<tt>apt</tt> command or other utilities.</p>

<p>Ubuntu embarked on a project to "oxidize" the distribution by
switching to uutils and <a href="https://github.com/trifectatechfoundation/sudo-rs?tab=readme-ov-file#sudo-rs">sudo-rs</a>
for the 25.10 release, and to see if the Rust-based utilities would be
suitable for the long-term-release slated for next April. LWN <a href="https://lwn.net/Articles/1014002/">covered</a> that project in
March.</p>

<br clear="all"><hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What happened to Apple's legendary attention to detail? (535 pts)]]></title>
            <link>https://blog.johnozbay.com/what-happened-to-apples-attention-to-detail.html</link>
            <guid>45685551</guid>
            <pubDate>Thu, 23 Oct 2025 19:05:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.johnozbay.com/what-happened-to-apples-attention-to-detail.html">https://blog.johnozbay.com/what-happened-to-apples-attention-to-detail.html</a>, See on <a href="https://news.ycombinator.com/item?id=45685551">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>In my mind, "Apple" as a brand used to be synonymous with "attention to detail" but sadly, over the course of the last 8 - 10 years, their choices have become anything but detail oriented.&nbsp;</p><p>This year, things have gotten so bad that I'm starting to think they've stopped caring about user experience, accessibility, and detailed QA tests altogether.&nbsp;</p><p>I'd rather write less and show you more. So let's go through a couple of examples that made me feel heartbroken and eventually made me stop using some Apple products.</p><p>If you are privacy conscious like me, and don't give the Reminders app permission to access your location, it will ask you for location permissions <em>every single damn time</em> you launch it. Need to remember something while you're in the flow? Forget about it, this popup will steal your keyboard's focus. Need to check an item off your list? nope. not today, give permissions.&nbsp;</p><p>For a company that over-uses the word "privacy" in all their presentations, why are these my only two options? "Open System Settings" and "Not Now"?</p><p>I thought perhaps if I update Mac OS X this would go away, but I was wrong. Not only that popup's here to stay, this time I was interrupted with the most ironic notification:</p><p>Would you like to take a break from notifications? Click this ironic notification popup.&nbsp;</p><p>The talented folks in Cupertino can't seem to decide where to put the search bar in their apps. So if you're trying to search for something, you first have to search for the search bar itself.</p><p>For some reason, Mac OS X doesn't have a standard and consistent design for tabs.&nbsp;</p><div><figure><img src="https://blog.johnozbay.com/media/posts/6/1_0JaHtonzuAP8_EwjLrx-FA.jpeg" alt="" width="2000" height="148" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/1_0JaHtonzuAP8_EwjLrx-FA-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/1_0JaHtonzuAP8_EwjLrx-FA-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/1_0JaHtonzuAP8_EwjLrx-FA-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/1_0JaHtonzuAP8_EwjLrx-FA-xl.jpeg 1200w"></figure><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/1_JKNuB7_Fnxbe7gjIYC1bqQ.jpeg" alt="" width="2000" height="127" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/1_JKNuB7_Fnxbe7gjIYC1bqQ-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/1_JKNuB7_Fnxbe7gjIYC1bqQ-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/1_JKNuB7_Fnxbe7gjIYC1bqQ-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/1_JKNuB7_Fnxbe7gjIYC1bqQ-xl.jpeg 1200w"></figure><p>Apps like <strong>Calendar</strong>, <strong>Activity Monitor</strong> and <strong>TV</strong> show tabs in the header or title bar, each with a different tab design.</p><figure><img src="https://blog.johnozbay.com/media/posts/6/1_9z4K8l9t8Wwy6qo_654NZw.jpeg" alt="" width="2000" height="257" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/1_9z4K8l9t8Wwy6qo_654NZw-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/1_9z4K8l9t8Wwy6qo_654NZw-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/1_9z4K8l9t8Wwy6qo_654NZw-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/1_9z4K8l9t8Wwy6qo_654NZw-xl.jpeg 1200w"></figure><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/1_PKq42hL0DdtIdw919W48PQ-5.jpeg" alt="" width="2000" height="225" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/1_PKq42hL0DdtIdw919W48PQ-5-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/1_PKq42hL0DdtIdw919W48PQ-5-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/1_PKq42hL0DdtIdw919W48PQ-5-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/1_PKq42hL0DdtIdw919W48PQ-5-xl.jpeg 1200w"></figure><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/1_grXrBWjU-0OqSuEgzyvELw.jpeg" alt="" width="2000" height="211" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/1_grXrBWjU-0OqSuEgzyvELw-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/1_grXrBWjU-0OqSuEgzyvELw-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/1_grXrBWjU-0OqSuEgzyvELw-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/1_grXrBWjU-0OqSuEgzyvELw-xl.jpeg 1200w"></figure><hr><p>By now you must be rightfully thinking "but John these are all old screenshots, updates to Mac OS X and iOS must have addressed these issues... right?", dear reader allow me to introduce you to the UI/UX hell that is Mac OS 26 and iOS 26 that not only did not fix these issues, but introduced much worse design choices.</p><p>Don't believe me?&nbsp;</p><p>Take a look at the <strong>Search Bar </strong><span><em>(if one can still call it that)</em></span><strong> </strong>in<strong> Finder</strong></p><p>I dare say, wouldn't it be rather logical to expect that an app called 'Finder'—whose entire existence hinges upon the concept of <strong><em>finding things</em></strong>—might offer a search bar that doesn't require a bloody archaeology degree to unearth? Apparently not.</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/finder-2.jpeg" alt="" width="2064" height="750" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/finder-2-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/finder-2-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/finder-2-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/finder-2-xl.jpeg 1200w"></figure><p>But first, let's talk about iOS 26, because it's a proper dumpster fire.</p><hr><h3>Files app</h3><p>Here's the iOS 26 Files app in dark mode, and light mode side by side. Notice anything missing? Like the folder name or the barely visible down arrow? It's almost as if they haven't tested iOS 26 in dark mode at all.</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/files.jpg" alt="" width="1476" height="568" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/files-xs.jpg 300w, https://blog.johnozbay.com/media/posts/6/responsive/files-sm.jpg 480w, https://blog.johnozbay.com/media/posts/6/responsive/files-md.jpg 749w, https://blog.johnozbay.com/media/posts/6/responsive/files-xl.jpg 1200w"></figure><hr><h3>Share sheet</h3><p>Immediately after updating to iOS 26, I took screen captures of all the broken things, and wanted to share them&nbsp;with a bunch of friends to warn them not to update. I pressed share, and this is what the app icons in the share sheet looked like :&nbsp;&nbsp;</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/IMG_8639.jpg" alt="" width="1102" height="722" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/IMG_8639-xs.jpg 300w, https://blog.johnozbay.com/media/posts/6/responsive/IMG_8639-sm.jpg 480w, https://blog.johnozbay.com/media/posts/6/responsive/IMG_8639-md.jpg 749w, https://blog.johnozbay.com/media/posts/6/responsive/IMG_8639-xl.jpg 1200w"></figure><p>Already off to a great start, I thought perhaps enabling / disabling the "reduced transparency" accessibility mode would solve things — just in case if liquid glass itself is the issue.&nbsp;</p><hr><h3>Settings</h3><p>So I fired up Settings to disable transparency, and none of the icons showed up there at first.</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/settings.jpeg" alt="" width="369" height="800" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/settings-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/settings-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/settings-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/settings-xl.jpeg 1200w"></figure><p>Feeling frustrated beyond measure, I enabled "reduced transparency" mode, which fixed the icons but broke other things even further. See the black bar at the bottom behind the search bubble?&nbsp;</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/settings2.gif" alt="" width="400" height="194"></figure><p>Not a huge deal when you have a massive search bar at the bottom of the screen, but it's still fugly. I thought I'd add this to my running list in the reminders app as well. So then I fired up reminders ...</p><hr><h3>Reminders</h3><p>Immediately upon starting the app I noticed a very large black bar at the bottom of the screen that just wouldn't go away no matter what I did.</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/reminders.gif" alt="" width="400" height="97"></figure><p>Alright perhaps reduced transparency broke some things... Let's turn it off, put the phone down, and switch to the iPad. That's gotta be better right?&nbsp;</p><hr><h3>Folders</h3><p>So I grabbed my iPad, and hovered my mouse over a bunch of folders. You know, it's literally the first thing you do. Immediately noticed that the <strong>liquid</strong> <span>gl</span><strong>ass</strong> effect wouldn't go away after a while, and I was left with shiny <strong>liquid</strong> <span>gl</span><strong>ass</strong> folders.&nbsp;</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/liquid-ass.gif" alt="" width="1236" height="582"></figure><p>I thought to myself: "perhaps I'm holding it wrong, let me fire up a browser and see if others have similar problems".&nbsp;</p><hr><h3>Browsers</h3><p>Turns out with iOS 26, Apple broke all 3rd party browsers in thousand different ways. Why? Because WebKit has a ton of issues in iOS 26, and Apple has been forcing all third party browsers to use WebKit — <a href="https://blog.crypt.ee/apples-billion-dollar-stonewall-our-view-from-the-eu-dma-workshop-hearing/">I have a hundred problems with this, and I frequently talk about them in Brussels, but I'll save my energy for the next EU DMA hearing</a>, and instead focus on other stuff in this blog post.&nbsp;</p><p>Let's start with a simple task shall we? Let's fire up Google using my favorite browser Vivaldi, and type literally anything into the search bar:</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/IMG_8654.gif" alt="" width="960" height="693"></figure><p>The autofill bar jumps with every keystroke. And if you're thinking "John but that's just Vivaldi" — it's not. (<em>BTW the talented folks at Vivaldi fixed this and many other WebKit related bugs right away and it's my absolute favorite browser, you should give it a try</em>) There's a broader issue with how Apple's webkit wants to deal with viewports in iOS 26. Let's take a look at other browsers, say for example, Apple's own steaming hot mess of a browser, Safari.</p><figure><video loading="lazy" width="480" height="960" controls="controls" data-mce-fragment="1"><source src="https://files.johnozbay.com/blog/ios26/safari-liquid-ass.mp4" type="video/mp4"></video></figure><p>Let's count all the issues in this single 20 second long video shall we?&nbsp;</p><p><span><strong>0:00 — 0:01<br></strong></span><span>Why are all the bottom bar buttons flashing like they're sending out an SOS? </span><span>(I'm guessing they're supposed to behave like the address bar but for whatever reason they don't?)</span></p><p><span><strong>0:00 — 0:01<br></strong></span><span>Buttons are white, address bar is black!</span></p><p><strong>0:02 — 0:04<br></strong>See buttons strangely flashing in the bottom? They're screaming for help.</p><p><strong>0:02 — 0:04<br></strong>Content scrolls behind the clock, so the top part of the browser is a complete mess</p><p><strong>0:02 — 0:04<br></strong>Content scrolls behind the buttons and the address bar, so the bottom part of the browser is a complete mess</p><p><strong>0:00 — 0:07<br></strong>The darker backdrop of Google's consent popup is cut off above the address bar.<br>This is because the viewport is royally fucked up in iOS 26, causing all sorts of other issues.</p><p><strong>0:10 — 0:12<br></strong>I don't know about you, but I switch tabs more often than I add pages to favorites or bookmarks. Yet, somehow switching tabs is now a two-tap action that requires a nauseating flash, with all the buttons changing colors.</p><div><p>So many nauseating flashy elements for no real reason.</p><hr><h3><strong>In app browsers are an even bigger mess</strong></h3><p>Remember how I mentioned the viewport is fucked up? It expands below the bottom UI on scroll, and makes fixed elements below inaccessible.</p><figure><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/iab-issues.jpg" alt="https://x.com/mrahmadawais/status/1969622632489500687" width="479" height="480" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/iab-issues-xs.jpg 300w, https://blog.johnozbay.com/media/posts/6/responsive/iab-issues-sm.jpg 480w, https://blog.johnozbay.com/media/posts/6/responsive/iab-issues-md.jpg 749w, https://blog.johnozbay.com/media/posts/6/responsive/iab-issues-xl.jpg 1200w"></figure><figcaption>https://x.com/mrahmadawais/status/1969622632489500687</figcaption></figure><hr><h3>Alignment doesn't matter</h3><p>By now you must be thinking, "John, stop it—you're not that good at aligning things yourself either." Yep, but I'm also not a $3 trillion company trying to sell essentially the same $1000 phone year after year, this time with a horrible design update. So yeah, I suck at consistently aligning things myself, but I also don't need to align things as well as they do.</p><p>Now let's take a look at Safari and any other Apple app's UI side by side to better understand and confirm that Apple's design teams don't actually talk to each other. Chances are there are either multiple design guideline documents, or Apple stopped caring about design consistency across their apps altogether.</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/safari-vs-apple-music.jpg" alt="" width="1880" height="2044" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/safari-vs-apple-music-xs.jpg 300w, https://blog.johnozbay.com/media/posts/6/responsive/safari-vs-apple-music-sm.jpg 480w, https://blog.johnozbay.com/media/posts/6/responsive/safari-vs-apple-music-md.jpg 749w, https://blog.johnozbay.com/media/posts/6/responsive/safari-vs-apple-music-xl.jpg 1200w"></figure><hr><h3>iMessages</h3><p>First off <a href="https://signal.org/">Signal</a> is awesome, it's cross platform, it's free, and you should use it with all your friends! I personally don't use iMessages, but some people do for whatever reason. Many of my friends in the U.S. seem to have some sort of unhealthy obsession with the color of their chat bubbles. Is it green or is it blue?</p><p>"Texts are green and imessages are blue, Apple loves to manipulate you!"</p><p>Executives at Apple LOVE this game of social pressure.</p><p>Can't afford a shitty $1000 iPhone? Too bad, your messages will be green, and your friends will shame you into social isolation until you buy yourself an iPhone because green bubbles are carcinogenic.</p><p>I can't believe I'm about to write this, but I think the liquid glass design team got one thing right. I think that liquid glass will end these holy messenger wars. Why? Because iMessage is absolutely trash now. iOS 26 gently nudges you to choose a background image for your text messages, which makes it nearly impossible to read the text or see photos sent to you in the messages. Where even is the input field!?!?</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/imessages-mess-2.jpeg" alt="" width="368" height="800" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/imessages-mess-2-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/imessages-mess-2-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/imessages-mess-2-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/imessages-mess-2-xl.jpeg 1200w"></figure><p><em><a href="https://www.nngroup.com/articles/liquid-glass/">This screenshot btw is from the incredible blog post by the Nielsen Norman Group and suffice to say they were much kinder than me in their blog post about Liquid Glass.</a></em></p><hr><h3>App Library</h3><p>Don't get me wrong, I do like trillion dollar tech companies to be transparent, but this right here is certainly not what I meant when I said : "Apple needs to be more transparent". I would love to —at the very least— be able to see the icons of the apps. Sometimes they show up, sometimes they don't. Even the pigeons outside my window are more reliable than the app icons in the library.</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/no-icons-3.jpg" alt="" width="370" height="800" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/no-icons-3-xs.jpg 300w, https://blog.johnozbay.com/media/posts/6/responsive/no-icons-3-sm.jpg 480w, https://blog.johnozbay.com/media/posts/6/responsive/no-icons-3-md.jpg 749w, https://blog.johnozbay.com/media/posts/6/responsive/no-icons-3-xl.jpg 1200w"></figure><h3>Why this blog post?</h3><p>Over the course of the past 2 years, I've spent countless hours chatting with friends trying to explain why I started to passionately dislike Apple's attitude, especially as someone who used to look up to the company. <a href="https://brucelawson.co.uk/2025/are-developers-falling-out-of-love-with-apple/">My good friend Bruce Lawson wrote an incredible blog post talking about this phenomenon, about how developers are falling out of love with Apple</a>. I believe with the introduction of iOS 26 many designers are starting to fall out of love with Apple too. So I decided to gather some of my thoughts in this compact blog post, because why not. &nbsp;</p><p>Apple's design language now accurately reflects their anti-competitive shittiness. Liquid glass is like a black widow's red hourglass. Nature's way of screaming 'stay the fuck away,' but for Apple products.</p><p>Liquid glass and iOS 26 are so badly broken that I can't even possibly list all the issues I have with it. So this blog post is by no means meant to be an inclusive list, and there are at least 100 other problems.</p><p>Off the top of my head:</p><ul><li><span>notifications are practically unreadable if you have a lighter background,</span>&nbsp;</li><li>forget about using the control center, it's essentially a disco-ball.</li><li>battery life is significantly worse for users passionately holding onto their iPhone 12 mini and 13 mini thanks to these design changes — not to mention how the new liquid glass UI doesn't scale down well for the smaller screens of mini iphones.</li><li>goodbye accessibility</li><li>a ton of apps like email have text-on-top-of text</li></ul><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/email-mess.jpeg" alt="" width="1205" height="874" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/email-mess-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/email-mess-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/email-mess-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/email-mess-xl.jpeg 1200w"></figure><p><em>(image from <a href="https://www.nngroup.com/articles/liquid-glass/">Raluca's post on Nielsen Norman Group's blog</a>)</em></p><hr><h3>Closing Notes</h3><p>Look, I've got nothing but respect for the perfectly lovely humans who work at Apple. Several are classmates from university, or people I had the pleasure of working with before at different companies. But I rather suspect what's happened here is that some project manager got a bit <em>too</em> enthusiastic about hitting their quarterly targets, cobbled together some shiny mockups, and somehow managed to convince Tim and the board that this was, in fact, a brilliant idea. And apparently at no point during this process did anyone think to raise their hand and gently suggest that perhaps—just perhaps—there exists such a thing as "too much glass."</p><figure><img loading="lazy" src="https://blog.johnozbay.com/media/posts/6/tim.jpeg" alt="" width="1184" height="1571" sizes="(max-width: 1200px) 100vw, 1200px" srcset="https://blog.johnozbay.com/media/posts/6/responsive/tim-xs.jpeg 300w, https://blog.johnozbay.com/media/posts/6/responsive/tim-sm.jpeg 480w, https://blog.johnozbay.com/media/posts/6/responsive/tim-md.jpeg 749w, https://blog.johnozbay.com/media/posts/6/responsive/tim-xl.jpeg 1200w"></figure></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Armed police swarm student after AI mistakes bag of Doritos for a weapon (386 pts)]]></title>
            <link>https://www.dexerto.com/entertainment/armed-police-swarm-student-after-ai-mistakes-bag-of-doritos-for-a-weapon-3273512/</link>
            <guid>45684934</guid>
            <pubDate>Thu, 23 Oct 2025 18:09:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.dexerto.com/entertainment/armed-police-swarm-student-after-ai-mistakes-bag-of-doritos-for-a-weapon-3273512/">https://www.dexerto.com/entertainment/armed-police-swarm-student-after-ai-mistakes-bag-of-doritos-for-a-weapon-3273512/</a>, See on <a href="https://news.ycombinator.com/item?id=45684934">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="article-1">
<p>Concerns over <a href="https://www.dexerto.com/tag/ai/">AI</a> surveillance in schools are intensifying after armed officers swarmed a 16-year-old student outside Kenwood High School in Baltimore when an AI gun detection system falsely flagged a Doritos bag as a firearm.</p>



<p>Taki Allen was hanging out with friends after football practice on October 20 when multiple police cars suddenly pulled up.</p>



<p>“It was like eight cop cars that came pulling up for us,” Allen told <a target="_blank" rel="noreferrer noopener nofollow" href="https://www.wbaltv.com/article/student-handcuffed-ai-system-mistook-bag-chips-weapon/69114601">WBAL-TV 11 News</a>. “They started walking toward me with guns, talking about ‘Get on the ground,’ and I was like, ‘What?’”</p>



<p>“They made me get on my knees, put my hands behind my back, and cuff me. Then they searched me and found nothing,” he said.</p>



<p>Allen was handcuffed at gunpoint. Police later showed him the AI-captured image that triggered the alert. The crumpled Doritos bag in his pocket had been mistaken for a gun.</p>



<p>“It was mainly like, am I gonna die? Are they going to kill me? “They showed me the picture, said that looks like a gun, I said, ‘no, it’s chips.’”</p>


<div><figure><span id="ImageEnlarge-https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/taki-allen-student-chips-AI-1024x576.jpg"><img alt="Taki Allen student" loading="lazy" width="1024" height="576" decoding="async" data-nimg="1" sizes="auto, (max-width: 1024px) 100vw, 1024px" srcset="https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/taki-allen-student-chips-AI-1024x576.jpg?width=385&amp;quality=75&amp;format=auto 385w, https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/taki-allen-student-chips-AI-1024x576.jpg?width=768&amp;quality=75&amp;format=auto 768w, https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/taki-allen-student-chips-AI-1024x576.jpg?width=1200&amp;quality=75&amp;format=auto 1200w" src="https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/taki-allen-student-chips-AI-1024x576.jpg?width=1200&amp;quality=75&amp;format=auto"></span><span>Fox/screenshot</span></figure><p><span>Taki Allen doesn’t want to return to school after the incident.</span></p></div>


<h2 id="h-student-afraid-to-return-to-school-after-ai-sends-police-after-him">Student afraid to return to school after AI sends police after him</h2>



<p>The AI system behind the incident is part of <a target="_blank" rel="noreferrer noopener nofollow" href="https://www.omnilert.com/solution-brochures/omnilert-gun-detection-system">Omnilert’s gun detection technology</a>, introduced in Baltimore County Public Schools last year. It scans existing surveillance footage and alerts police in real time when it detects what it believes to be a weapon.</p>



<p>Omnilert later admitted the incident was a “false positive” but claimed the system “functioned as intended,” saying its purpose is to “prioritize safety and awareness through rapid human verification.”</p>



<p>Baltimore County Public Schools echoed the company’s statement in a letter to parents, offering counseling services to students impacted by the incident.</p><div id="article-note"><h2>Related</h2></div>


<div><figure><span id="ImageEnlarge-https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/omnilert-alert-lockdown.jpg"><img alt="omnilert school lockdown" loading="lazy" width="498" height="497" decoding="async" data-nimg="1" sizes="auto, (max-width: 498px) 100vw, 498px" srcset="https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/omnilert-alert-lockdown.jpg?width=385&amp;quality=75&amp;format=auto 385w, https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/omnilert-alert-lockdown.jpg?width=768&amp;quality=75&amp;format=auto 768w, https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/omnilert-alert-lockdown.jpg?width=1200&amp;quality=75&amp;format=auto 1200w" src="https://www.dexerto.com/cdn-image/wp-content/uploads/2025/10/23/omnilert-alert-lockdown.jpg?width=1200&amp;quality=75&amp;format=auto"></span><span>Omnilert</span></figure><p><span>Omnilert says it “delivers instant gun detection” and “near-zero false positives.”</span></p></div>


<p>“We understand how upsetting this was for the individual that was searched as well as the other students who witnessed the incident,” the principal wrote. “Our counselors will provide direct support to the students who were involved.”</p>



<p>Allen says no one from the school has reached out to him personally.</p>



<p>“They didn’t apologize. They just told me it was protocol,” he <a target="_blank" rel="noreferrer noopener nofollow" href="https://foxbaltimore.com/news/local/teen-detained-after-ai-system-mistakes-chips-for-weapon-outside-kenwood-high-school">said</a>. “I was expecting at least somebody to talk to me about it.”</p>



<p>The teen now says he no longer feels safe going to school.</p>



<p>“If I eat another bag of chips or drink something, I feel like they’re going to come again,” Allen said.</p>



<p>The case has sparked fresh debate over the reliability of AI surveillance tools and their real-world consequences, especially in schools.</p>



<p>This incident comes as more institutions implement AI technology. Earlier this month, Major General William ‘Hank’ Taylor, one of the top officers in the US Army, <a href="https://www.dexerto.com/entertainment/us-army-general-admits-using-ai-for-military-decisions-and-is-really-close-with-chatgpt-3270391/">admitted to using ChatGPT</a> to make key military decisions.</p>



<p>Meanwhile, the UK introduced strict age verification measures for mature content, requiring users to pass a facial scan to prove they’re over 18. This has left some adults unable to access content, such as Britain’s most tattooed man, who said the age check system <a href="https://www.dexerto.com/entertainment/britains-most-tattooed-man-says-uks-age-check-system-told-him-to-remove-his-face-3232920/">told him to “remove his face”</a> because it interpreted his tattoos as a mask.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenMaxIO: Forked UI for MinIO Object Storage (165 pts)]]></title>
            <link>https://github.com/OpenMaxIO/openmaxio-object-browser</link>
            <guid>45684736</guid>
            <pubDate>Thu, 23 Oct 2025 17:52:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/OpenMaxIO/openmaxio-object-browser">https://github.com/OpenMaxIO/openmaxio-object-browser</a>, See on <a href="https://news.ycombinator.com/item?id=45684736">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">To build you own OpenMaxIO UI:</h2><a id="user-content-to-build-you-own-openmaxio-ui" aria-label="Permalink: To build you own OpenMaxIO UI:" href="#to-build-you-own-openmaxio-ui"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/OpenMaxIO/openmaxio-object-browser 
cd openmaxio-object-browser/web-app
git checkout v1.7.6
yarn install 
yarn build 
cd ../
make console 
./console server "><pre>git clone https://github.com/OpenMaxIO/openmaxio-object-browser 
<span>cd</span> openmaxio-object-browser/web-app
git checkout v1.7.6
yarn install 
yarn build 
<span>cd</span> ../
make console 
./console server </pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">To connect OpenMaxIO UI to an existing Minio server run this command (replace 1.2.3.4:9000 to your address)</h2><a id="user-content-to-connect-openmaxio-ui-to-an-existing-minio-server-run-this-command-replace-12349000-to-your-address" aria-label="Permalink: To connect OpenMaxIO UI to an existing Minio server run this command (replace 1.2.3.4:9000 to your address)" href="#to-connect-openmaxio-ui-to-an-existing-minio-server-run-this-command-replace-12349000-to-your-address"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="CONSOLE_MINIO_SERVER=http://1.2.3.4:9000 ./console server "><pre>CONSOLE_MINIO_SERVER=http://1.2.3.4:9000 ./console server </pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">OpenMaxIO Console</h2><a id="user-content-openmaxio-console" aria-label="Permalink: OpenMaxIO Console" href="#openmaxio-console"></a></p>
<p dir="auto">This is a fork of MinIO Console.
This is a communitty driven project and is not affiliated with MinIO, Inc.</p>
<p dir="auto">OpenMaxIO is a community-maintained fork of MinIO, created in response to the removal of key features from the MinIO open-source distribution. Our goal is simple:
to preserve a fully open, fully functional, and production-grade object storage server that stays true to the original spirit of minimalism, performance, and freedom.</p>
<p dir="auto">MinIO once stood for minimal, high-performance, open-source object storage. But recent changes have shifted core capabilities behind a commercial license. We believe the open-source ecosystem deserves better.</p>
<p dir="auto">OpenMaxIO brings back what was removed and keeps it open for good.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">We welcome contributions to OpenMaxIO Console. These are still early days, so please be patient as we work to restore and enhance the features you love.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/minio/console/workflows/Go/badge.svg"><img src="https://github.com/minio/console/workflows/Go/badge.svg" alt="build"></a> <a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/9b1271abf9e0bb716f002da8728533a0d0cbf76ec58e1ca70f67d82a31635b6e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4147504c25323056332d626c7565"><img src="https://camo.githubusercontent.com/9b1271abf9e0bb716f002da8728533a0d0cbf76ec58e1ca70f67d82a31635b6e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4147504c25323056332d626c7565" alt="license" data-canonical-src="https://img.shields.io/badge/license-AGPL%20V3-blue"></a></p>
<p dir="auto">A graphical user interface for <a href="https://github.com/minio/minio">MinIO</a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Object Browser</th>
<th>Dashboard</th>
<th>Creating a bucket</th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/OpenMaxIO/openmaxio-object-browser/blob/openMaxIO-main/images/pic3.png"><img src="https://github.com/OpenMaxIO/openmaxio-object-browser/raw/openMaxIO-main/images/pic3.png" alt="Object Browser"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/OpenMaxIO/openmaxio-object-browser/blob/openMaxIO-main/images/pic1.png"><img src="https://github.com/OpenMaxIO/openmaxio-object-browser/raw/openMaxIO-main/images/pic1.png" alt="Dashboard"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/OpenMaxIO/openmaxio-object-browser/blob/openMaxIO-main/images/pic2.png"><img src="https://github.com/OpenMaxIO/openmaxio-object-browser/raw/openMaxIO-main/images/pic2.png" alt="Dashboard"></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>

<p dir="auto"><strong>Table of Contents</strong></p>
<ul dir="auto">
<li><a href="#minio-console">MinIO Console</a>
<ul dir="auto">
<li><a href="#install">Install</a>
<ul dir="auto">
<li><a href="#build-from-source">Build from source</a></li>
</ul>
</li>
<li><a href="#setup">Setup</a>
<ul dir="auto">
<li><a href="#1-create-a-user-console-using-mc">1. Create a user <code>console</code> using <code>mc</code></a></li>
<li><a href="#2-create-a-policy-for-console-with-admin-access-to-all-resources-for-testing">2. Create a policy for <code>console</code> with admin access to all resources (for testing)</a></li>
<li><a href="#3-set-the-policy-for-the-new-console-user">3. Set the policy for the new <code>console</code> user</a></li>
</ul>
</li>
<li><a href="#start-console-service">Start Console service:</a></li>
<li><a href="#start-console-service-with-tls">Start Console service with TLS:</a></li>
<li><a href="#connect-console-to-a-minio-using-tls-and-a-self-signed-certificate">Connect Console to a Minio using TLS and a self-signed certificate</a></li>
</ul>
</li>
<li><a href="#contribute-to-console-project">Contribute to console Project</a></li>
</ul>

<p dir="auto">MinIO Console is a library that provides a management and browser UI overlay for the MinIO Server.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Setup</h2><a id="user-content-setup" aria-label="Permalink: Setup" href="#setup"></a></p>
<p dir="auto">All <code>console</code> needs is a MinIO user with admin privileges and URL pointing to your MinIO deployment.</p>
<blockquote>
<p dir="auto">Note: We don't recommend using MinIO's Operator Credentials</p>
</blockquote>
<p dir="auto"><h3 tabindex="-1" dir="auto">1. Create a user <code>console</code> using <code>mc</code></h3><a id="user-content-1-create-a-user-console-using-mc" aria-label="Permalink: 1. Create a user console using mc" href="#1-create-a-user-console-using-mc"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="mc admin user add myminio/
Enter Access Key: console
Enter Secret Key: xxxxxxxx"><pre>mc admin user add myminio/
Enter Access Key: console
Enter Secret Key: xxxxxxxx</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">2. Create a policy for <code>console</code> with admin access to all resources (for testing)</h3><a id="user-content-2-create-a-policy-for-console-with-admin-access-to-all-resources-for-testing" aria-label="Permalink: 2. Create a policy for console with admin access to all resources (for testing)" href="#2-create-a-policy-for-console-with-admin-access-to-all-resources-for-testing"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="cat > admin.json << EOF
{
	&quot;Version&quot;: &quot;2012-10-17&quot;,
	&quot;Statement&quot;: [{
			&quot;Action&quot;: [
				&quot;admin:*&quot;
			],
			&quot;Effect&quot;: &quot;Allow&quot;,
			&quot;Sid&quot;: &quot;&quot;
		},
		{
			&quot;Action&quot;: [
                &quot;s3:*&quot;
			],
			&quot;Effect&quot;: &quot;Allow&quot;,
			&quot;Resource&quot;: [
				&quot;arn:aws:s3:::*&quot;
			],
			&quot;Sid&quot;: &quot;&quot;
		}
	]
}
EOF"><pre>cat <span>&gt;</span> admin.json <span><span>&lt;&lt;</span> <span>EOF</span></span>
<span>{</span>
<span>	"Version": "2012-10-17",</span>
<span>	"Statement": [{</span>
<span>			"Action": [</span>
<span>				"admin:*"</span>
<span>			],</span>
<span>			"Effect": "Allow",</span>
<span>			"Sid": ""</span>
<span>		},</span>
<span>		{</span>
<span>			"Action": [</span>
<span>                "s3:*"</span>
<span>			],</span>
<span>			"Effect": "Allow",</span>
<span>			"Resource": [</span>
<span>				"arn:aws:s3:::*"</span>
<span>			],</span>
<span>			"Sid": ""</span>
<span>		}</span>
<span>	]</span>
<span>}</span>
<span><span>EOF</span></span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="mc admin policy create myminio/ consoleAdmin admin.json"><pre>mc admin policy create myminio/ consoleAdmin admin.json</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">3. Set the policy for the new <code>console</code> user</h3><a id="user-content-3-set-the-policy-for-the-new-console-user" aria-label="Permalink: 3. Set the policy for the new console user" href="#3-set-the-policy-for-the-new-console-user"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="mc admin policy attach myminio consoleAdmin --user=console"><pre>mc admin policy attach myminio consoleAdmin --user=console</pre></div>
<blockquote>
<p dir="auto">NOTE: Additionally, you can create policies to limit the privileges for other <code>console</code> users, for example, if you
want the user to only have access to dashboard, buckets, notifications and watch page, the policy should look like
this:</p>
</blockquote>
<div dir="auto" data-snippet-clipboard-copy-content="{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Action&quot;: [
        &quot;admin:ServerInfo&quot;
      ],
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Sid&quot;: &quot;&quot;
    },
    {
      &quot;Action&quot;: [
        &quot;s3:ListenBucketNotification&quot;,
        &quot;s3:PutBucketNotification&quot;,
        &quot;s3:GetBucketNotification&quot;,
        &quot;s3:ListMultipartUploadParts&quot;,
        &quot;s3:ListBucketMultipartUploads&quot;,
        &quot;s3:ListBucket&quot;,
        &quot;s3:HeadBucket&quot;,
        &quot;s3:GetObject&quot;,
        &quot;s3:GetBucketLocation&quot;,
        &quot;s3:AbortMultipartUpload&quot;,
        &quot;s3:CreateBucket&quot;,
        &quot;s3:PutObject&quot;,
        &quot;s3:DeleteObject&quot;,
        &quot;s3:DeleteBucket&quot;,
        &quot;s3:PutBucketPolicy&quot;,
        &quot;s3:DeleteBucketPolicy&quot;,
        &quot;s3:GetBucketPolicy&quot;
      ],
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Resource&quot;: [
        &quot;arn:aws:s3:::*&quot;
      ],
      &quot;Sid&quot;: &quot;&quot;
    }
  ]
}"><pre>{
  <span>"Version"</span>: <span><span>"</span>2012-10-17<span>"</span></span>,
  <span>"Statement"</span>: [
    {
      <span>"Action"</span>: [
        <span><span>"</span>admin:ServerInfo<span>"</span></span>
      ],
      <span>"Effect"</span>: <span><span>"</span>Allow<span>"</span></span>,
      <span>"Sid"</span>: <span><span>"</span><span>"</span></span>
    },
    {
      <span>"Action"</span>: [
        <span><span>"</span>s3:ListenBucketNotification<span>"</span></span>,
        <span><span>"</span>s3:PutBucketNotification<span>"</span></span>,
        <span><span>"</span>s3:GetBucketNotification<span>"</span></span>,
        <span><span>"</span>s3:ListMultipartUploadParts<span>"</span></span>,
        <span><span>"</span>s3:ListBucketMultipartUploads<span>"</span></span>,
        <span><span>"</span>s3:ListBucket<span>"</span></span>,
        <span><span>"</span>s3:HeadBucket<span>"</span></span>,
        <span><span>"</span>s3:GetObject<span>"</span></span>,
        <span><span>"</span>s3:GetBucketLocation<span>"</span></span>,
        <span><span>"</span>s3:AbortMultipartUpload<span>"</span></span>,
        <span><span>"</span>s3:CreateBucket<span>"</span></span>,
        <span><span>"</span>s3:PutObject<span>"</span></span>,
        <span><span>"</span>s3:DeleteObject<span>"</span></span>,
        <span><span>"</span>s3:DeleteBucket<span>"</span></span>,
        <span><span>"</span>s3:PutBucketPolicy<span>"</span></span>,
        <span><span>"</span>s3:DeleteBucketPolicy<span>"</span></span>,
        <span><span>"</span>s3:GetBucketPolicy<span>"</span></span>
      ],
      <span>"Effect"</span>: <span><span>"</span>Allow<span>"</span></span>,
      <span>"Resource"</span>: [
        <span><span>"</span>arn:aws:s3:::*<span>"</span></span>
      ],
      <span>"Sid"</span>: <span><span>"</span><span>"</span></span>
    }
  ]
}</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Start Console service:</h2><a id="user-content-start-console-service" aria-label="Permalink: Start Console service:" href="#start-console-service"></a></p>
<p dir="auto">Before running console service, following environment settings must be supplied</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Salt to encrypt JWT payload
export CONSOLE_PBKDF_PASSPHRASE=SECRET

# Required to encrypt JWT payload
export CONSOLE_PBKDF_SALT=SECRET

# MinIO Endpoint
export CONSOLE_MINIO_SERVER=http://localhost:9000"><pre><span><span>#</span> Salt to encrypt JWT payload</span>
<span>export</span> CONSOLE_PBKDF_PASSPHRASE=SECRET

<span><span>#</span> Required to encrypt JWT payload</span>
<span>export</span> CONSOLE_PBKDF_SALT=SECRET

<span><span>#</span> MinIO Endpoint</span>
<span>export</span> CONSOLE_MINIO_SERVER=http://localhost:9000</pre></div>
<p dir="auto">Now start the console service.</p>
<div data-snippet-clipboard-copy-content="./console server
2021-01-19 02:36:08.893735 I | 2021/01/19 02:36:08 server.go:129: Serving console at http://localhost:9090"><pre><code>./console server
2021-01-19 02:36:08.893735 I | 2021/01/19 02:36:08 server.go:129: Serving console at http://localhost:9090
</code></pre></div>
<p dir="auto">By default <code>console</code> runs on port <code>9090</code> this can be changed with <code>--port</code> of your choice.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Start Console service with TLS:</h2><a id="user-content-start-console-service-with-tls" aria-label="Permalink: Start Console service with TLS:" href="#start-console-service-with-tls"></a></p>
<p dir="auto">Copy your <code>public.crt</code> and <code>private.key</code> to <code>~/.console/certs</code>, then:</p>
<div dir="auto" data-snippet-clipboard-copy-content="./console server
2021-01-19 02:36:08.893735 I | 2021/01/19 02:36:08 server.go:129: Serving console at http://[::]:9090
2021-01-19 02:36:08.893735 I | 2021/01/19 02:36:08 server.go:129: Serving console at https://[::]:9443"><pre>./console server
2021-01-19 02:36:08.893735 I <span>|</span> 2021/01/19 02:36:08 server.go:129: Serving console at http://[::]:9090
2021-01-19 02:36:08.893735 I <span>|</span> 2021/01/19 02:36:08 server.go:129: Serving console at https://[::]:9443</pre></div>
<p dir="auto">For advanced users, <code>console</code> has support for multiple certificates to service clients through multiple domains.</p>
<p dir="auto">Following tree structure is expected for supporting multiple domains:</p>
<div dir="auto" data-snippet-clipboard-copy-content=" certs/
  │
  ├─ public.crt
  ├─ private.key
  │
  ├─ example.com/
  │   │
  │   ├─ public.crt
  │   └─ private.key
  └─ foobar.org/
     │
     ├─ public.crt
     └─ private.key
  ...
"><pre> certs/
  │
  ├─ public.crt
  ├─ private.key
  │
  ├─ example.com/
  │   │
  │   ├─ public.crt
  │   └─ private.key
  └─ foobar.org/
     │
     ├─ public.crt
     └─ private.key
  ...
</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Connect Console to a Minio using TLS and a self-signed certificate</h2><a id="user-content-connect-console-to-a-minio-using-tls-and-a-self-signed-certificate" aria-label="Permalink: Connect Console to a Minio using TLS and a self-signed certificate" href="#connect-console-to-a-minio-using-tls-and-a-self-signed-certificate"></a></p>
<p dir="auto">Copy the MinIO <code>ca.crt</code> under <code>~/.console/certs/CAs</code>, then:</p>
<div dir="auto" data-snippet-clipboard-copy-content="export CONSOLE_MINIO_SERVER=https://localhost:9000
./console server"><pre><span>export</span> CONSOLE_MINIO_SERVER=https://localhost:9000
./console server</pre></div>
<p dir="auto">You can verify that the apis work by doing the request on <code>localhost:9090/api/v1/...</code></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Debug logging</h2><a id="user-content-debug-logging" aria-label="Permalink: Debug logging" href="#debug-logging"></a></p>
<p dir="auto">In some cases it may be convenient to log all HTTP requests. This can be enabled by setting
the <code>CONSOLE_DEBUG_LOGLEVEL</code> environment variable to one of the following values:</p>
<ul dir="auto">
<li><code>0</code> (default) uses no logging.</li>
<li><code>1</code> log single line per request for server-side errors (status-code 5xx).</li>
<li><code>2</code> log single line per request for client-side and server-side errors (status-code 4xx/5xx).</li>
<li><code>3</code> log single line per request for all requests (status-code 4xx/5xx).</li>
<li><code>4</code> log details per request for server-side errors (status-code 5xx).</li>
<li><code>5</code> log details per request for client-side and server-side errors (status-code 4xx/5xx).</li>
<li><code>6</code> log details per request for all requests (status-code 4xx/5xx).</li>
</ul>
<p dir="auto">A single line logging has the following information:</p>
<ul dir="auto">
<li>Remote endpoint (IP + port) of the request. Note that reverse proxies may hide the actual remote endpoint of the client's browser.</li>
<li>HTTP method and URL</li>
<li>Status code of the response (websocket connections are hijacked, so no response is shown)</li>
<li>Duration of the request</li>
</ul>
<p dir="auto">The detailed logging also includes all request and response headers (if any).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contribute to console Project</h2><a id="user-content-contribute-to-console-project" aria-label="Permalink: Contribute to console Project" href="#contribute-to-console-project"></a></p>
<p dir="auto">Please follow console <a href="https://github.com/minio/console/blob/master/CONTRIBUTING.md">Contributor's Guide</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I built a tech news aggregator that works the way my brain does (128 pts)]]></title>
            <link>https://deadstack.net/recent</link>
            <guid>45684689</guid>
            <pubDate>Thu, 23 Oct 2025 17:48:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://deadstack.net/recent">https://deadstack.net/recent</a>, See on <a href="https://news.ycombinator.com/item?id=45684689">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><br>
			
		<h3><i>Recent Stories Summary</i></h3>
		<hr>
				
		<h3><i>Recent Stories in Detail</i></h3>
		<hr>
		<p>Reverse chrono from now to midnight Wednesday, October 22, 2025, Timezone: America/Chicago</p>
	
		<br>
		<h2><a href="https://www.engadget.com/ai/microsoft-makes-edges-copilot-mode-a-bit-smarter-160031147.html?src=rss">Microsoft makes Edge's Copilot Mode a bit smarter / <i><small>Engadget</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 3:21 pm</a> / <a href="https://deadstack.net/cluster/microsoft-enhances-copilot-mode-with-smarter-edge">permalink</a></small></p><p><i>Microsoft is rolling out a suite of upgrades for its Copilot product embedded in the Edge browser. New features—including group chat, memory search connectors, and deeper integration with collaboration tools—signal an aggressive push to make its AI assistant more intuitive and indispensable for workplace productivity.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/microsoft-enhances-copilot-mode-with-smarter-edge">permalink id 15360</a></span> / 5 stories, 1 hr</small>  <span><a href="https://deadstack.net/tag/cloud">#cloud</a></span> <span><a href="https://deadstack.net/tag/microsoft">#microsoft</a></span> <span><a href="https://deadstack.net/tag/browsers">#browsers</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/chatgpt">#chatgpt</a></span> <span><a href="https://deadstack.net/tag/assistant">#assistant</a></span> <span><a href="https://deadstack.net/tag/productivity">#productivity</a></span> <span><a href="https://deadstack.net/tag/microsoft-365">#microsoft-365</a></span> </p><br><h2><a href="https://www.engadget.com/ai/amazon-calls-on-ai-once-again-with-its-new-help-me-decide-shopping-tool-164516673.html?src=rss">Amazon calls on AI once again with its new ‘Help Me Decide’ shopping tool / <i><small>Engadget</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 2:20 pm</a> / <a href="https://deadstack.net/cluster/amazon-launches-ai-help-me-decide-shopping">permalink</a></small></p><p><i>Amazon has rolled out an AI‐powered feature designed to deliver personalized product recommendations, complete with persuasive rationales to help shoppers decide what to buy. The new tool marks another step forward in Amazon’s strategic investment in artificial intelligence for commerce.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/amazon-launches-ai-help-me-decide-shopping">permalink id 15357</a></span> / 5 stories, 2 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/ecommerce">#ecommerce</a></span> <span><a href="https://deadstack.net/tag/ml">#ml</a></span> <span><a href="https://deadstack.net/tag/digitaltransformation">#digitaltransformation</a></span> <span><a href="https://deadstack.net/tag/amazon">#amazon</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/assistant">#assistant</a></span> <span><a href="https://deadstack.net/tag/algorithm">#algorithm</a></span> </p><br><h2><a href="https://startupnews.fyi/2025/10/23/tp-link-launches-budget-archer-ge400-wi-fi-7-gaming-router-dual-band-router-hits-more-affordable-price-point-includes-2-5-gbe-ports-and-rgb-lighting/">TP-Link launches budget Archer GE400 Wi-Fi 7 gaming router — Dual-band router hits more affordable price point, includes 2.5 GbE ports and RGB lighting / <i><small>Startup News FYI</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 2:20 pm</a> / <a href="https://deadstack.net/cluster/tp-link-unveils-budget-archer-ge400-wi-fi-7">permalink</a></small></p><p><i>TP-Link has introduced its entry-level Archer GE400 Wi‑Fi 7 gaming router, designed to deliver fast dual-band wireless performance at an accessible price. This launch offers gamers a cost‐effective solution to upgrade their network connectivity.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/tp-link-unveils-budget-archer-ge400-wi-fi-7">permalink id 15356</a></span> / 3 stories, 2 hrs</small>  <span><a href="https://deadstack.net/tag/hardware">#hardware</a></span> <span><a href="https://deadstack.net/tag/gaming">#gaming</a></span> <span><a href="https://deadstack.net/tag/networking">#networking</a></span> <span><a href="https://deadstack.net/tag/amazon">#amazon</a></span> <span><a href="https://deadstack.net/tag/broadband">#broadband</a></span> <span><a href="https://deadstack.net/tag/wireless">#wireless</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/gadgets">#gadgets</a></span> </p><br><h2><a href="https://winbuzzer.com/2025/10/23/openai-acquires-mac-ai-interface-sky-to-bolster-chatgpt-on-desktop-xcxwbn/">OpenAI Acquires Mac AI Interface ‘Sky’ to Bolster ChatGPT on Desktop / <i><small>WinBuzzer</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 2:20 pm</a> / <a href="https://deadstack.net/cluster/openai-acquires-mac-sky-app-to-enhance">permalink</a></small></p><p><i>OpenAI has acquired the team behind the Mac-native automation app Sky, integrating its technology into ChatGPT and strengthening its desktop presence. The move signals OpenAI’s determination to bridge native user interactions with cutting‐edge AI capabilities.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/openai-acquires-mac-sky-app-to-enhance">permalink id 15355</a></span> / 6 stories, 2 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/software">#software</a></span> <span><a href="https://deadstack.net/tag/openai">#openai</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/chatgpt">#chatgpt</a></span> <span><a href="https://deadstack.net/tag/apps">#apps</a></span> <span><a href="https://deadstack.net/tag/ux">#ux</a></span> <span><a href="https://deadstack.net/tag/acquisitions">#acquisitions</a></span> <span><a href="https://deadstack.net/tag/macos">#macos</a></span> <span><a href="https://deadstack.net/tag/macbook">#macbook</a></span> </p><br><h2><a href="https://appleinsider.com/articles/25/10/23/apples-a20-chips-could-launch-a-new-era-of-thinner-cooler-iphones?utm_source=rss">Apple's A20 chips could launch a new era of thinner, cooler iPhones / <i><small>Apple Insider</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 1:20 pm</a> / <a href="https://deadstack.net/cluster/apple-s-a20-chips-set-stage-for-thinner-cooler">permalink</a></small></p><p><i>Rumors suggest Apple is on the cusp of a breakthrough with its new A20 and A20 Pro chips, built on a 2nm process. Expected to power the upcoming iPhone 18 series, these processors promise enhanced power efficiency and performance—potentially ushering in a new era of sleeker and cooler designs that may leave competitors scrambling to catch up.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/apple-s-a20-chips-set-stage-for-thinner-cooler">permalink id 15354</a></span> / 3 stories, 3 hrs</small>  <span><a href="https://deadstack.net/tag/apple">#apple</a></span> <span><a href="https://deadstack.net/tag/chips">#chips</a></span> <span><a href="https://deadstack.net/tag/tsmc">#tsmc</a></span> <span><a href="https://deadstack.net/tag/iphone">#iphone</a></span> <span><a href="https://deadstack.net/tag/cpus">#cpus</a></span> <span><a href="https://deadstack.net/tag/semiconductor">#semiconductor</a></span> <span><a href="https://deadstack.net/tag/performance">#performance</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/smartphone">#smartphone</a></span> </p><br><h2><a href="https://www.bgr.com/2005138/claude-memory-feature-pro-max-users/">Claude Memory Is Now Available To Pro And Max Subscribers / <i><small>BGR</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 1:20 pm</a> / <a href="https://deadstack.net/cluster/anthropic-releases-claude-memory-upgrade-for">permalink</a></small></p><p><i>Anthropic has enhanced its Claude chatbot by introducing a memory upgrade that lets the AI compartmentalize past conversations. Now available to Pro, Max and additional subscribers, this update promises more coherent and context-aware interactions, making long conversations less forgetful and inadvertently sharper than your average goldfish.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/anthropic-releases-claude-memory-upgrade-for">permalink id 15353</a></span> / 7 stories, 3 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/software">#software</a></span> <span><a href="https://deadstack.net/tag/ml">#ml</a></span> <span><a href="https://deadstack.net/tag/anthropic">#anthropic</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/genai">#genai</a></span> <span><a href="https://deadstack.net/tag/chatgpt">#chatgpt</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/assistant">#assistant</a></span> <span><a href="https://deadstack.net/tag/memory">#memory</a></span> </p><br><h2><a href="https://www.bleepingcomputer.com/news/microsoft/meet-the-new-clippy-microsoft-unveils-copilots-mico-avatar/">Meet the new Clippy: Microsoft unveils Copilot's "Mico" avatar / <i><small>Bleeping Computer</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 1:20 pm</a> / <a href="https://deadstack.net/cluster/microsoft-unveils-ai-powered-mico-avatar">permalink</a></small></p><p><i>Microsoft has refreshed its Copilot experience with a tongue-in-cheek nod to nostalgia. The new animated “Mico” avatar—reminiscent of Clippy—is now integrated into voice modes, group chats and even optional “real talk” features, giving users a quirky yet functional twist in interacting with their AI assistant.</i></p><p>Bluesky: <a href="https://bsky.app/profile/techcrunch.com/post/3m3uu2pistx2b" target="_blank">@techcrunch.com</a></p><hr><p><small><span><a href="https://deadstack.net/cluster/microsoft-unveils-ai-powered-mico-avatar">permalink id 15352</a></span> / 12 stories, 3 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/software">#software</a></span> <span><a href="https://deadstack.net/tag/voice">#voice</a></span> <span><a href="https://deadstack.net/tag/microsoft">#microsoft</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/assistant">#assistant</a></span> <span><a href="https://deadstack.net/tag/productivity">#productivity</a></span> <span><a href="https://deadstack.net/tag/animation">#animation</a></span> <span><a href="https://deadstack.net/tag/copilot">#copilot</a></span> </p><br><h2><a href="https://www.bgr.com/2005303/apple-tv-acquiring-warner-bros-content-report/">Apple TV Could Get A Major Boost By Acquiring Warner Bros. Content / <i><small>BGR</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 12:21 pm</a> / <a href="https://deadstack.net/cluster/apple-eyes-warner-bros-content-to-boost-its">permalink</a></small></p><p><i>Apple is reportedly exploring a blockbuster acquisition of Warner Bros. Discovery’s extensive content library to supercharge its Apple TV platform—a move that underscores its ambition to enrich its streaming content and compete more aggressively in the media space.</i></p><p>Bluesky: <a href="https://bsky.app/profile/gjabberbox.bsky.social/post/3m3uuqtpuyk2m" target="_blank">@gjabberbox.bsky.social</a></p><hr><p><small><span><a href="https://deadstack.net/cluster/apple-eyes-warner-bros-content-to-boost-its">permalink id 15351</a></span> / 8 stories, 4 hrs</small>  <span><a href="https://deadstack.net/tag/apple">#apple</a></span> <span><a href="https://deadstack.net/tag/streaming">#streaming</a></span> <span><a href="https://deadstack.net/tag/entertainment">#entertainment</a></span> <span><a href="https://deadstack.net/tag/business">#business</a></span> <span><a href="https://deadstack.net/tag/hbo-max">#hbo-max</a></span> <span><a href="https://deadstack.net/tag/acquisitions">#acquisitions</a></span> <span><a href="https://deadstack.net/tag/media">#media</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/content-moderation">#content-moderation</a></span> <span><a href="https://deadstack.net/tag/tv">#tv</a></span> </p><br><h2><a href="https://www.engadget.com/ai/openai-reportedly-asked-for-memorial-guest-list-in-teen-suicide-case-163309269.html?src=rss">OpenAI reportedly asked for memorial guest list in teen suicide case / <i><small>Engadget</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 12:21 pm</a> / <a href="https://deadstack.net/cluster/lawsuit-alleges-chatgpt-s-role-in-teen-suicide">permalink</a></small></p><p><i>A wrongful‐death lawsuit claims that ChatGPT’s inadequate self‐harm guardrails contributed to a teen’s suicide. Allegations include claims that OpenAI even requested a memorial guest list, sparking fresh scrutiny over AI ethics and product safety.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/lawsuit-alleges-chatgpt-s-role-in-teen-suicide">permalink id 15350</a></span> / 4 stories, 4 hrs</small>  <span><a href="https://deadstack.net/tag/techpolicy">#techpolicy</a></span> <span><a href="https://deadstack.net/tag/openai">#openai</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/chatgpt">#chatgpt</a></span> <span><a href="https://deadstack.net/tag/psychology">#psychology</a></span> <span><a href="https://deadstack.net/tag/mentalhealth">#mentalhealth</a></span> <span><a href="https://deadstack.net/tag/law">#law</a></span> <span><a href="https://deadstack.net/tag/litigation">#litigation</a></span> <span><a href="https://deadstack.net/tag/safety">#safety</a></span> <span><a href="https://deadstack.net/tag/digital-privacy">#digital-privacy</a></span> </p><br><h2><a href="https://techcrunch.com/2025/10/23/trump-pardons-binance-founder-changpeng-zhao/">Trump pardons Binance founder Changpeng Zhao / <i><small>TechCrunch</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 12:21 pm</a> / <a href="https://deadstack.net/cluster/trump-pardons-binance-chief-amid-crypto">permalink</a></small></p><p><i>In a controversial legal twist, former President Trump has pardoned Binance CEO Changpeng Zhao, who faced money laundering charges. The move has ignited debate about accountability and regulatory oversight in the cryptocurrency arena.</i></p><p>Bluesky: <a href="https://bsky.app/profile/wired.com/post/3m3uxroijmk2y" target="_blank">@wired.com</a>, <a href="https://bsky.app/profile/wired.com/post/3m3uxr7gnp22y" target="_blank">@wired.com</a></p><hr><p><small><span><a href="https://deadstack.net/cluster/trump-pardons-binance-chief-amid-crypto">permalink id 15349</a></span> / 12 stories, 4 hrs</small>  <span><a href="https://deadstack.net/tag/crypto">#crypto</a></span> <span><a href="https://deadstack.net/tag/politics">#politics</a></span> <span><a href="https://deadstack.net/tag/finance">#finance</a></span> <span><a href="https://deadstack.net/tag/trump">#trump</a></span> <span><a href="https://deadstack.net/tag/scam">#scam</a></span> <span><a href="https://deadstack.net/tag/law">#law</a></span> <span><a href="https://deadstack.net/tag/executive-order">#executive-order</a></span> <span><a href="https://deadstack.net/tag/regulation">#regulation</a></span> </p><br><h2><a href="https://appleinsider.com/articles/25/10/23/shades-of-epic-vs-apple-uk-app-store-users-win-2-billion-lawsuit?utm_source=rss">Shades of Epic vs. Apple: UK App Store users win $2 billion lawsuit / <i><small>Apple Insider</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 12:21 pm</a> / <a href="https://deadstack.net/cluster/uk-court-rules-apple-s-app-store-abuse-exposed">permalink</a></small></p><p><i>UK regulators have delivered a stinging rebuke to Apple over its App Store practices, ruling that the company abused its near absolute market power by enforcing a 30% commission. The verdict resulted in a $2 billion class‐action payout while regulators hint at tougher ecosystem reforms.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/uk-court-rules-apple-s-app-store-abuse-exposed">permalink id 15348</a></span> / 7 stories, 4 hrs</small>  <span><a href="https://deadstack.net/tag/techpolicy">#techpolicy</a></span> <span><a href="https://deadstack.net/tag/apple">#apple</a></span> <span><a href="https://deadstack.net/tag/antitrust">#antitrust</a></span> <span><a href="https://deadstack.net/tag/uk">#uk</a></span> <span><a href="https://deadstack.net/tag/judiciary">#judiciary</a></span> <span><a href="https://deadstack.net/tag/apps">#apps</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/litigation">#litigation</a></span> <span><a href="https://deadstack.net/tag/regulation">#regulation</a></span> </p><br><h2><a href="https://winbuzzer.com/2025/10/23/gemini-now-supercharges-google-earth-turning-maps-into-a-conversational-ai-xcxwbn/">Gemini Now Supercharges Google Earth, Turning Maps into a Conversational AI / <i><small>WinBuzzer</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 11:21 am</a> / <a href="https://deadstack.net/cluster/google-earth-integrates-gemini-ai-for-enhanced">permalink</a></small></p><p><i>Google has infused its Earth platform with cutting‐edge Gemini AI capabilities to transform static maps into an interactive, conversational experience. Users can now ask complex questions about climate, geography, and potential disasters, thereby gaining deeper insights into our planet’s dynamics.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/google-earth-integrates-gemini-ai-for-enhanced">permalink id 15346</a></span> / 8 stories, 5 hrs</small>  <span><a href="https://deadstack.net/tag/climate">#climate</a></span> <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/dataviz">#dataviz</a></span> <span><a href="https://deadstack.net/tag/google">#google</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/genai">#genai</a></span> <span><a href="https://deadstack.net/tag/alphabet">#alphabet</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/gemini">#gemini</a></span> </p><br><h2><a href="https://www.engadget.com/cameras/fujifilms-x-t30-iii-adds-a-film-simulation-dial-and-6k-video-072148245.html?src=rss">Fujifilm's X-T30 III adds a film simulation dial and 6K video / <i><small>Engadget</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 10:22 am</a> / <a href="https://deadstack.net/cluster/fujifilm-unveils-x-t30-iii-with-6k-video-and-film">permalink</a></small></p><p><i>In an effort to blend classic film aesthetics with modern technology, Fujifilm has updated its entry-level X-T30 lineup, now marketed as the X-T30 III. Boasting 6K video capabilities and a dedicated film simulation dial, the revamped camera is set to captivate both nostalgic photographers and tech enthusiasts craving tactile controls.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/fujifilm-unveils-x-t30-iii-with-6k-video-and-film">permalink id 15344</a></span> / 4 stories, 6 hrs</small>  <span><a href="https://deadstack.net/tag/mobiletech">#mobiletech</a></span> <span><a href="https://deadstack.net/tag/innovation">#innovation</a></span> <span><a href="https://deadstack.net/tag/entertainment">#entertainment</a></span> <span><a href="https://deadstack.net/tag/camera">#camera</a></span> <span><a href="https://deadstack.net/tag/photography">#photography</a></span> <span><a href="https://deadstack.net/tag/gadget">#gadget</a></span> <span><a href="https://deadstack.net/tag/media">#media</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/video-games">#video-games</a></span> </p><br><h2><a href="https://www.eu-startups.com/2025/10/paris-based-kotcha-raises-e3-5-million-to-make-elite-running-coaching-accessible-to-everyone/">Paris-based Kotcha raises €3.5 million to make elite running coaching accessible to everyone / <i><small>EU Startups</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 10:22 am</a> / <a href="https://deadstack.net/cluster/kotcha-raises-3-5m-to-expand-ai-running">permalink</a></small></p><p><i>Paris-based startup Kotcha has secured €3.5 million to accelerate its AI-powered running coaching app, aiming to bring elite coaching to every runner. The fresh funding promises to propel its growth and user base, ensuring that even the amateur jogger might soon enjoy digital guidance that feels as personal as a seasoned trainer’s pep talk.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/kotcha-raises-3-5m-to-expand-ai-running">permalink id 15345</a></span> / 3 stories, 6 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/startups">#startups</a></span> <span><a href="https://deadstack.net/tag/vc">#vc</a></span> <span><a href="https://deadstack.net/tag/ml">#ml</a></span> <span><a href="https://deadstack.net/tag/digitalhealth">#digitalhealth</a></span> <span><a href="https://deadstack.net/tag/mobile">#mobile</a></span> <span><a href="https://deadstack.net/tag/fitness">#fitness</a></span> <span><a href="https://deadstack.net/tag/apps">#apps</a></span> <span><a href="https://deadstack.net/tag/europe">#europe</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> </p><br><h2><a href="https://www.theverge.com/news/805280/microsoft-xbox-gaming-profit-targets-layoffs">Microsoft’s lofty goals for Xbox profit are behind the price hikes and studio shutdowns / <i><small>The Verge</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 10:22 am</a> / <a href="https://deadstack.net/cluster/microsoft-xbox-profit-mandate-spurs">permalink</a></small></p><p><i>Facing an ambitious 30% profit target, Microsoft’s Xbox division has been forced into aggressive restructuring—including studio shutdowns and price hikes—to boost margins. This high-pressure financial strategy is reshaping the console business as developers and gamers alike cope with an increasingly profit‐driven culture.</i></p><p>Bluesky: <a href="https://bsky.app/profile/tomwarren.co.uk/post/3m3uozyh6ts2w" target="_blank">@tomwarren.co.uk</a>, <a href="https://bsky.app/profile/gizmodo.com/post/3m3uwq4o4k525" target="_blank">@gizmodo.com</a></p><hr><p><small><span><a href="https://deadstack.net/cluster/microsoft-xbox-profit-mandate-spurs">permalink id 15342</a></span> / 9 stories, 6 hrs</small>  <span><a href="https://deadstack.net/tag/gaming">#gaming</a></span> <span><a href="https://deadstack.net/tag/microsoft">#microsoft</a></span> <span><a href="https://deadstack.net/tag/entertainment">#entertainment</a></span> <span><a href="https://deadstack.net/tag/business">#business</a></span> <span><a href="https://deadstack.net/tag/pricing">#pricing</a></span> <span><a href="https://deadstack.net/tag/xbox">#xbox</a></span> <span><a href="https://deadstack.net/tag/layoffs">#layoffs</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/microsoft-365">#microsoft-365</a></span> </p><br><h2><a href="https://dataconomy.com/2025/10/23/reddit-sues-perplexity-over-alleged-large-scale-data-scraping/">Reddit sues Perplexity over alleged large-scale data scraping / <i><small>Dataconomy</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 10:22 am</a> / <a href="https://deadstack.net/cluster/reddit-fights-back-against-ai-data-scraping">permalink</a></small></p><p><i>Reddit has taken legal action against Perplexity AI and allied data scrapers for allegedly harvesting user comments on a massive scale. By setting a trap on Google Search, the platform aims to protect its creative content from industrial–scale misappropriation, sending a clear message to digital data pirates.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/reddit-fights-back-against-ai-data-scraping">permalink id 15343</a></span> / 6 stories, 6 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/cybersecurity">#cybersecurity</a></span> <span><a href="https://deadstack.net/tag/dataprivacy">#dataprivacy</a></span> <span><a href="https://deadstack.net/tag/techpolicy">#techpolicy</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/reddit">#reddit</a></span> <span><a href="https://deadstack.net/tag/perplexity">#perplexity</a></span> <span><a href="https://deadstack.net/tag/litigation">#litigation</a></span> <span><a href="https://deadstack.net/tag/digital-privacy">#digital-privacy</a></span> <span><a href="https://deadstack.net/tag/copyright">#copyright</a></span> </p><br><h2><a href="https://www.siliconrepublic.com/start-ups/paygentic-ai-fintech-susan-o-neill-seed-raise-2m">Irish co-founded fintech Paygentic raises $2m in seed round / <i><small>Silicon Republic</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 8:21 am</a> / <a href="https://deadstack.net/cluster/irish-fintech-paygentic-secures-2m-in-pre-seed">permalink</a></small></p><p><i>Irish-founded fintech Paygentic has raised $2 million in a pre‐seed round, a move that underscores strong investor confidence in its AI-powered billing and payments platform. The fresh capital is expected to accelerate product development and broaden market reach in the competitive fintech space.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/irish-fintech-paygentic-secures-2m-in-pre-seed">permalink id 15340</a></span> / 3 stories, 8 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/startups">#startups</a></span> <span><a href="https://deadstack.net/tag/vc">#vc</a></span> <span><a href="https://deadstack.net/tag/fintech">#fintech</a></span> <span><a href="https://deadstack.net/tag/digitaltransformation">#digitaltransformation</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/business">#business</a></span> <span><a href="https://deadstack.net/tag/payments">#payments</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> </p><br><h2><a href="https://dataconomy.com/2025/10/23/the-willow-chip-marks-a-new-milestone-in-googles-quantum-race/">The Willow chip marks a new milestone in Google’s quantum race / <i><small>Dataconomy</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 6:21 am</a> / <a href="https://deadstack.net/cluster/google-achieves-practical-quantum-advantage-with">permalink</a></small></p><p><i>Google’s breakthrough in quantum computing marks a major milestone using its Willow processor and Quantum Echo algorithm to map molecular features 13,000 times faster than conventional supercomputers. This development may accelerate real‐world quantum applications and research, signaling a significant leap forward in computational science.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/google-achieves-practical-quantum-advantage-with">permalink id 15339</a></span> / 6 stories, 10 hrs</small>  <span><a href="https://deadstack.net/tag/hardware">#hardware</a></span> <span><a href="https://deadstack.net/tag/quantum">#quantum</a></span> <span><a href="https://deadstack.net/tag/chips">#chips</a></span> <span><a href="https://deadstack.net/tag/google">#google</a></span> <span><a href="https://deadstack.net/tag/science">#science</a></span> <span><a href="https://deadstack.net/tag/deeptech">#deeptech</a></span> <span><a href="https://deadstack.net/tag/supercomputers">#supercomputers</a></span> <span><a href="https://deadstack.net/tag/compsci">#compsci</a></span> <span><a href="https://deadstack.net/tag/algorithm">#algorithm</a></span> <span><a href="https://deadstack.net/tag/research">#research</a></span> </p><br><h2><a href="https://www.eu-startups.com/2025/10/london-based-rightcharge-raises-e1-8-million-to-simplify-ev-charging-payments-for-fleets-across-europe/">London-based Rightcharge raises €1.8 million to simplify EV charging payments for fleets across Europe / <i><small>EU Startups</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 5:20 am</a> / <a href="https://deadstack.net/cluster/rightcharge-secures-seed-funding-to-modernize-ev">permalink</a></small></p><p><i>London-based Rightcharge has raised new funding aimed at revolutionizing electric vehicle fleet charging payments across Europe. With capital infusing its innovative platform, the company hopes to streamline and simplify the EV payment process in a market that’s charging ahead—but perhaps a bit too fast for the skeptics.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/rightcharge-secures-seed-funding-to-modernize-ev">permalink id 15338</a></span> / 4 stories, 11 hrs</small>  <span><a href="https://deadstack.net/tag/startups">#startups</a></span> <span><a href="https://deadstack.net/tag/innovation">#innovation</a></span> <span><a href="https://deadstack.net/tag/fintech">#fintech</a></span> <span><a href="https://deadstack.net/tag/energy">#energy</a></span> <span><a href="https://deadstack.net/tag/finance">#finance</a></span> <span><a href="https://deadstack.net/tag/uk">#uk</a></span> <span><a href="https://deadstack.net/tag/payments">#payments</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/automotive">#automotive</a></span> <span><a href="https://deadstack.net/tag/ev">#ev</a></span> </p><br><div><h2><a href="https://news.google.com/rss/articles/CBMipgFBVV95cUxQLWJnMm5jWjV1YWhkZ01oZVg5RUtIeExSVExYTDQ0VTN3U2ZiekdRSVhpWE9aLW51Y3NUNjhYdXNQdW56YTFIV05LazBYeG9TYlNQSERyNkJndnBVclI3NXlrVnRoUG95UW5PbW9JUHJ5YlFzWS04MVNjbk1IbkZQSDRfTGhKdld4cEFaRnhzMkpNM3VqVkFLdWtKYXliR3VhVzc0S1dR?oc=5">Trump Administration in Talks to Take Stakes in Quantum Computing Firms - The Information / <i><small>The Information</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 3:20 am</a> / <a href="https://deadstack.net/cluster/us-government-eyes-equity-stake-in-quantum">permalink</a></small></p><p><i>The Trump Administration is reported to be exploring equity investments in quantum computing companies, a move that underscores a broader governmental interest in strategic tech sectors. This potential stake has already stirred market reactions, with firms like IonQ experiencing notable share surges amid the unfolding quantum race.</i></p><p>Bluesky: <a href="https://bsky.app/profile/arstechnica.com/post/3m3uopzswtf2d" target="_blank">@arstechnica.com</a></p><ul><li><a href="#6211">Admin denials and broader trends on equity stakes <i>(2)</i></a></li><li><a href="#6209">Govt equity stake talks amid quantum race <i>(8)</i></a></li><li><a href="#6210">Market reacts with stock surges to equity news <i>(3)</i></a></li></ul><br><h4><a id="6211">Admin denials and broader trends on equity stakes</a></h4><br><h4><a id="6209">Govt equity stake talks amid quantum race</a></h4><br><h4><a id="6210">Market reacts with stock surges to equity news</a></h4><hr><p><small><span><a href="https://deadstack.net/cluster/us-government-eyes-equity-stake-in-quantum">permalink id 15337</a></span> / 13 stories, 13 hrs</small>  <span><a href="https://deadstack.net/tag/innovation">#innovation</a></span> <span><a href="https://deadstack.net/tag/quantum">#quantum</a></span> <span><a href="https://deadstack.net/tag/defensetech">#defensetech</a></span> <span><a href="https://deadstack.net/tag/government">#government</a></span> <span><a href="https://deadstack.net/tag/stockmarket">#stockmarket</a></span> <span><a href="https://deadstack.net/tag/investment">#investment</a></span> <span><a href="https://deadstack.net/tag/privateequity">#privateequity</a></span> <span><a href="https://deadstack.net/tag/business">#business</a></span> <span><a href="https://deadstack.net/tag/trump">#trump</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> </p></div><br><div><h2><a href="https://startupnews.fyi/2025/10/23/openai-launches-chatgpt-atlas-ai-browser-llm-can-browse-the-internet-for-you-and-even-complete-tasks-initial-release-for-macos-with-windows-ios-and-android-to-follow-soon-after/">OpenAI launches ChatGPT Atlas AI browser, LLM can browse the internet for you and even complete tasks — initial release for macOS, with Windows, iOS, and Android to follow soon after / <i><small>Startup News FYI</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-23">Thursday, October 23, 2025, 1:20 am</a> / <a href="https://deadstack.net/cluster/openai-launches-chatgpt-atlas-ai-powered-browser">permalink</a></small></p><p><i>OpenAI has officially unveiled ChatGPT Atlas, an AI-powered browser designed to integrate natural language processing with real-time web browsing. Industry observers note its entry in the emerging “AI browser wars” against competitors like Perplexity’s Comet, even as security concerns such as prompt injection issues have been raised.</i></p><p>Bluesky: <a href="https://bsky.app/profile/jenlucpiquant.bsky.social/post/3m3ubv2yahs2f" target="_blank">@jenlucpiquant.bsky.social</a>, <a href="https://bsky.app/profile/arstechnica.com/post/3m3u7n2li4j2y" target="_blank">@arstechnica.com</a></p><ul><li><a href="#6208">Acquisitions expanding OpenAI's product ecosystem <i>(2)</i></a></li><li><a href="#6206">AI browser wars and competitive dynamics <i>(3)</i></a></li><li><a href="#6207">Launch news, updates and feature demonstrations <i>(5)</i></a></li><li><a href="#6205">Security risks and vulnerabilities in ChatGPT Atlas <i>(5)</i></a></li></ul><br><h4><a id="6208">Acquisitions expanding OpenAI's product ecosystem</a></h4><br><h4><a id="6206">AI browser wars and competitive dynamics</a></h4><br><h4><a id="6207">Launch news, updates and feature demonstrations</a></h4><br><h4><a id="6205">Security risks and vulnerabilities in ChatGPT Atlas</a></h4><hr><p><small><span><a href="https://deadstack.net/cluster/openai-launches-chatgpt-atlas-ai-powered-browser">permalink id 15336</a></span> / 15 stories, 15 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/cybersecurity">#cybersecurity</a></span> <span><a href="https://deadstack.net/tag/software">#software</a></span> <span><a href="https://deadstack.net/tag/browsers">#browsers</a></span> <span><a href="https://deadstack.net/tag/openai">#openai</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/genai">#genai</a></span> <span><a href="https://deadstack.net/tag/chatgpt">#chatgpt</a></span> <span><a href="https://deadstack.net/tag/internet">#internet</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> </p></div><br><h2><a href="https://startupnews.fyi/2025/10/23/tinder-users-must-start-logging-in-with-their-faces-starting-nationwide/">Tinder Users Must Start Logging In With Their Faces, Starting Nationwide / <i><small>Startup News FYI</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-22">Wednesday, October 22, 2025, 11:20 pm</a> / <a href="https://deadstack.net/cluster/tinder-introduces-mandatory-facial-verification">permalink</a></small></p><p><i>Tinder is rolling out a nationwide facial recognition feature to authenticate new users and reduce catfishing on its platform. The update seeks to bolster user safety by ensuring that profiles accurately represent real individuals, marking a proactive step in the dating app’s ongoing security efforts.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/tinder-introduces-mandatory-facial-verification">permalink id 15335</a></span> / 5 stories, 17 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/cybersecurity">#cybersecurity</a></span> <span><a href="https://deadstack.net/tag/dataprivacy">#dataprivacy</a></span> <span><a href="https://deadstack.net/tag/mobile">#mobile</a></span> <span><a href="https://deadstack.net/tag/apps">#apps</a></span> <span><a href="https://deadstack.net/tag/privacy">#privacy</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/safety">#safety</a></span> </p><br><h2><a href="https://gizmodo.com/corporate-terrorists-may-stand-in-the-way-of-elon-musks-trillionaire-status-he-claims-2000675753">‘Corporate Terrorists’ May Stand in the Way of Elon Musk’s Trillionaire Status, He Claims / <i><small>Gizmodo</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-22">Wednesday, October 22, 2025, 10:21 pm</a> / <a href="https://deadstack.net/cluster/elon-musk-s-tesla-faces-robot-army-control">permalink</a></small></p><p><i>Tesla CEO Elon Musk is in the spotlight as he navigates mounting concerns over his company’s ambitious plans to build and control a “robot army.” Amid talks of an unprecedented trillion-dollar bonus package and warnings from critics, Musk’s vision for robotics at Tesla is drawing both skepticism and wry humor over the perils of uncontrolled innovation.</i></p><p>Bluesky: <a href="https://bsky.app/profile/lorak.bsky.social/post/3m3tfxriki223" target="_blank">@lorak.bsky.social</a></p><hr><p><small><span><a href="https://deadstack.net/cluster/elon-musk-s-tesla-faces-robot-army-control">permalink id 15333</a></span> / 6 stories, 18 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/robotics">#robotics</a></span> <span><a href="https://deadstack.net/tag/automation">#automation</a></span> <span><a href="https://deadstack.net/tag/innovation">#innovation</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/tesla">#tesla</a></span> <span><a href="https://deadstack.net/tag/business">#business</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/elon-musk">#elon-musk</a></span> <span><a href="https://deadstack.net/tag/safety">#safety</a></span> </p><br><h2><a href="https://www.theverge.com/news/805098/amazon-robots-ai-warehouses">Amazon claims the headline isn’t robots taking jobs as it reveals new cost-cutting robots / <i><small>The Verge</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-22">Wednesday, October 22, 2025, 8:21 pm</a> / <a href="https://deadstack.net/cluster/amazon-ramps-up-automation-with-cutting-edge">permalink</a></small></p><p><i>Amazon is charging ahead with a robust automation strategy, deploying an arsenal of advanced robots, AI tools, and even smart glasses to revolutionize its logistics. The move is set to cut human labor reliance while saving billions—though one can only wonder if the robots might soon start demanding benefits of their own.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/amazon-ramps-up-automation-with-cutting-edge">permalink id 15331</a></span> / 7 stories, 20 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/robotics">#robotics</a></span> <span><a href="https://deadstack.net/tag/automation">#automation</a></span> <span><a href="https://deadstack.net/tag/amazon">#amazon</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/business">#business</a></span> <span><a href="https://deadstack.net/tag/supplychain">#supplychain</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> </p><br><h2><a href="https://startupnews.fyi/2025/10/23/apple-rumored-to-launch-3-new-iphone-designs-in-next-3-years/">Apple Rumored to Launch 3 New iPhone Designs in Next 3 Years / <i><small>Startup News FYI</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-22">Wednesday, October 22, 2025, 6:21 pm</a> / <a href="https://deadstack.net/cluster/apple-rumored-to-unveil-three-new-iphone-designs">permalink</a></small></p><p><i>Leaked details suggest Apple plans to diversify its product lineup with three distinct iPhone models over the next three years, including foldable, clamshell, and bezel-free designs. The rumors hint at a bold move to redefine future iPhone aesthetics.</i></p><p>Bluesky: <a href="https://bsky.app/profile/macrumors.bsky.social/post/3m3syrg5qif2i" target="_blank">@macrumors.bsky.social</a></p><hr><p><small><span><a href="https://deadstack.net/cluster/apple-rumored-to-unveil-three-new-iphone-designs">permalink id 15328</a></span> / 6 stories, 22 hrs</small>  <span><a href="https://deadstack.net/tag/hardware">#hardware</a></span> <span><a href="https://deadstack.net/tag/innovation">#innovation</a></span> <span><a href="https://deadstack.net/tag/apple">#apple</a></span> <span><a href="https://deadstack.net/tag/iphone">#iphone</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/smartphone">#smartphone</a></span> <span><a href="https://deadstack.net/tag/foldable">#foldable</a></span> </p><br><h2><a href="https://www.theverge.com/news/804962/amazon-reveals-smart-delivery-glasses-that-guide-drivers-and-scan-packages">Here are Amazon’s smart delivery glasses that guide drivers and scan packages / <i><small>The Verge</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-22">Wednesday, October 22, 2025, 6:21 pm</a> / <a href="https://deadstack.net/cluster/amazon-delivery-smart-glasses-roll-out-for-driver">permalink</a></small></p><p><i>Amazon has unveiled a suite of smart glasses designed for its delivery drivers, integrating AI to streamline package scanning and navigation. The new wearable tech underscores Amazon’s ambition to accelerate last‐mile delivery by reducing delays and boosting overall productivity.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/amazon-delivery-smart-glasses-roll-out-for-driver">permalink id 15327</a></span> / 10 stories, 22 hrs</small>  <span><a href="https://deadstack.net/tag/ai">#ai</a></span> <span><a href="https://deadstack.net/tag/automation">#automation</a></span> <span><a href="https://deadstack.net/tag/ecommerce">#ecommerce</a></span> <span><a href="https://deadstack.net/tag/wearables">#wearables</a></span> <span><a href="https://deadstack.net/tag/amazon">#amazon</a></span> <span><a href="https://deadstack.net/tag/aiethics">#aiethics</a></span> <span><a href="https://deadstack.net/tag/delivery">#delivery</a></span> </p><br><h2><a href="https://www.cnet.com/videos/samsung-galaxy-xr-event-everything-that-happened-in-10-minutes/#ftag=CADf328eec">Samsung Galaxy XR Event: Everything That Happened in 10 Minutes video / <i><small>CNet</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-22">Wednesday, October 22, 2025, 5:20 pm</a> / <a href="https://deadstack.net/cluster/samsung-galaxy-xr-event-unveils-android-xr">permalink</a></small></p><p><i>At a high-energy event, Samsung introduced its first Android XR headset, the Galaxy XR, which now hits the market at a premium price. Alongside the main device, accessory sales—such as sell-out controllers—hint at robust consumer demand and a committed push into immersive technology experiences.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/samsung-galaxy-xr-event-unveils-android-xr">permalink id 15326</a></span> / 6 stories, 23 hrs</small>  <span><a href="https://deadstack.net/tag/hardware">#hardware</a></span> <span><a href="https://deadstack.net/tag/mobiletech">#mobiletech</a></span> <span><a href="https://deadstack.net/tag/vr">#vr</a></span> <span><a href="https://deadstack.net/tag/mixedreality">#mixedreality</a></span> <span><a href="https://deadstack.net/tag/samsung">#samsung</a></span> <span><a href="https://deadstack.net/tag/android">#android</a></span> <span><a href="https://deadstack.net/tag/gadget">#gadget</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/smartphone">#smartphone</a></span> </p><br><h2><a href="https://www.ithinkdiff.com/m5-apple-vision-pro-no-trade-in/">Apple drops trade-in option for Vision Pro owners / <i><small>iThinkDifferent</small></i></a></h2> <p><small><a href="https://deadstack.net/date/2025-10-22">Wednesday, October 22, 2025, 5:20 pm</a> / <a href="https://deadstack.net/cluster/apple-drops-vision-pro-trade-in-option-for">permalink</a></small></p><p><i>Apple has confirmed that customers cannot trade in the first-generation Vision Pro for upgrades or other products. This decision forces early adopters to pay full price for subsequent purchases, underscoring Apple’s strategy to keep its upgrade cycle strictly full-priced despite customer expectations.</i></p><hr><p><small><span><a href="https://deadstack.net/cluster/apple-drops-vision-pro-trade-in-option-for">permalink id 15325</a></span> / 3 stories, 23 hrs</small>  <span><a href="https://deadstack.net/tag/hardware">#hardware</a></span> <span><a href="https://deadstack.net/tag/ar">#ar</a></span> <span><a href="https://deadstack.net/tag/mixedreality">#mixedreality</a></span> <span><a href="https://deadstack.net/tag/apple">#apple</a></span> <span><a href="https://deadstack.net/tag/pricing">#pricing</a></span> <span><a href="https://deadstack.net/tag/technology">#technology</a></span> <span><a href="https://deadstack.net/tag/gadgets">#gadgets</a></span> </p><br>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[New updates and more access to Google Earth AI (114 pts)]]></title>
            <link>https://blog.google/technology/research/new-updates-and-more-access-to-google-earth-ai/</link>
            <guid>45684155</guid>
            <pubDate>Thu, 23 Oct 2025 16:58:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.google/technology/research/new-updates-and-more-access-to-google-earth-ai/">https://blog.google/technology/research/new-updates-and-more-access-to-google-earth-ai/</a>, See on <a href="https://news.ycombinator.com/item?id=45684155">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-reading-time="true" data-component="uni-article-body">

            
              





<uni-article-speakable page-title="New updates and more access to Google Earth AI" listen-to-article="Listen to article" data-date-modified="2025-10-23T14:58:09.829872+00:00" data-tracking-ids="G-HGNBTNCHCQ,G-6NKTLKV14N" data-voice-list="en.ioh-pngnat:Cyan,en.usb-pngnat:Lime" data-script-src="https://www.gstatic.com/readaloud/player/web/api/js/api.js" data-highlight-mode="word-over-paragraph"></uni-article-speakable>

            

            
            
<!--article text-->

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;New updates and more access to Google Earth AI&quot;
         }"><p data-block-key="1ju9x">When disasters strike, Google products like Search and Maps help billions of people make critical decisions to stay safe. Our <a href="https://blog.google/technology/ai/expanding-flood-forecasting-coverage-helping-partners/">flood forecasting</a> information — now covering more than two billion people — provides life-saving forecasts before the most significant river floods. It's helped organizations like World Vision get drinking water and food to communities when they need it most. And during the devastating 2025 California wildfires, we provided crisis alerts with information from local authorities to 15 million people across Los Angeles while showing them where to find shelter in Google Maps. This is all made possible by our geospatial AI models, not only for <a href="https://research.google/blog/using-ai-to-expand-global-access-to-reliable-flood-forecasts/">floods</a> and <a href="https://blog.google/outreach-initiatives/sustainability/google-wildfire-boundary-maps-europe-africa/">wildfires</a>, but <a href="https://blog.google/technology/google-deepmind/weather-lab-ai-cyclone-prediction-tracking/">cyclones</a>, <a href="https://blog.google/products/maps/google-maps-apis-environment-sustainability/">air quality</a> and many more.</p><p data-block-key="7f7d5">We recently introduced <a href="https://blog.google/technology/ai/google-earth-ai/">Google Earth AI</a>, bringing together these geospatial models to help tackle the planet's most critical needs. Earth AI is built on decades modeling the world, combined with state of the art predictive models and Gemini’s advanced reasoning, letting enterprises, cities and nonprofits achieve deeper understanding in minutes — efforts that previously required complex analytics and years of research.</p><p data-block-key="6657b">Today, we’re advancing Earth AI’s <a href="https://research.google/blog/google-earth-ai-unlocking-geospatial-insights-with-foundation-models-and-cross-modal-reasoning/">innovations and capabilities</a>, and expanding access around the globe. Here’s how:</p><h2 data-block-key="49q74">Connecting the dots with Geospatial Reasoning</h2><p data-block-key="7efd5">To solve a complex problem, you need to see the whole picture, not just one piece of it. That’s the idea behind <a href="https://research.google/blog/geospatial-reasoning-unlocking-insights-with-generative-ai-and-multiple-foundation-models/">Geospatial Reasoning</a>, a framework powered by Gemini that now lets AI automatically connect different Earth AI models — like weather forecasts, population maps and satellite imagery — to answer complex questions.</p><p data-block-key="an3ok">Instead of just seeing where a storm might hit, our <a href="https://arxiv.org/abs/2510.18318">latest research demonstrates</a> that analysts can use Geospatial Reasoning to identify which communities are most vulnerable and what infrastructure is at risk, all at once. For example, Geospatial Reasoning empowers the nonprofit GiveDirectly to respond to disasters by combining flood and population density information, helping them identify who needs direct aid most.</p><p data-block-key="4vll1"><a href="https://docs.google.com/forms/d/e/1FAIpQLSfhp8WXrhxAwPlOQxaAJK6qFY3Ga74RONC62W3qhVI7pcVhZw/viewform">Sign up</a> for consideration to become a Trusted Tester for Geospatial Reasoning. Social impact organizations can learn about future support for nonprofits through <a href="http://google.org/">Google.org</a> and our non-commercial access programs.</p></div>
  

  
    
  
    




  <uni-youtube-player-article index="2" thumbnail-alt="Video showing how an analyst would use an agent powered by Geospatial Reasoning to forecast a storm and understand where vulnerable populations are." video-id="kpeI9dbkWho" video-type="video">
  </uni-youtube-player-article>











  


  

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;New updates and more access to Google Earth AI&quot;
         }"><h2 data-block-key="1ju9x">Getting deeper insights in Google Earth</h2><p data-block-key="57rpr"><a href="https://medium.com/google-earth/a-whole-new-way-to-work-onearth-introducing-google-earths-new-professional-plans-f80c20b944c9">Gemini capabilities in Google Earth</a> enable analysts to quickly understand information about the world just by asking questions. Now, we’re bringing new Earth AI models to Gemini capabilities in Google Earth, letting users instantly find objects and discover patterns from satellite imagery.</p><p data-block-key="4dsjm">For example, a water company can now spot where a river has dried up — which can help communities predict the risk of dust storms during a drought — and notify people in advance. Or, analysts can quickly identify where harmful algae is blooming in order to monitor drinking water supply, giving authorities time to issue warnings or shut down water utilities.</p><p data-block-key="ditpb">This experimental capability will be available in the U.S. in the coming weeks to Google Earth <a href="https://medium.com/google-earth/a-whole-new-way-to-work-onearth-introducing-google-earths-new-professional-plans-f80c20b944c9">Professional and Professional Advanced</a> users. And starting today, Google AI Pro and Ultra subscribers in the U.S. can access Gemini capabilities in Google Earth with higher limits.</p></div>
  

  
    














<uni-image-full-width alignment="full" alt-text="A user types “find algae blooms in rivers in the U.S.” within Google Earth and is shown locations of blooms." external-image="" or-mp4-video-title="" or-mp4-video-url="" section-header="New updates and more access to Google Earth AI" custom-class="image-full-width--constrained-width uni-component-spacing">
  
    <div slot="caption-slot">
      <p data-block-key="29b12">Finding algae blooms within Google Earth imagery.</p>
    </div>
  
  
    <p><img alt="A user types “find algae blooms in rivers in the U.S.” within Google Earth and is shown locations of blooms." src="https://storage.googleapis.com/gweb-uniblog-publish-prod/original_images/rsvlm_algae_1000w.gif">
    </p>
  
</uni-image-full-width>


  

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;New updates and more access to Google Earth AI&quot;
         }"><h2 data-block-key="1ju9x">Bringing Earth AI to Google Cloud</h2><p data-block-key="3l3nd">We’re making Earth AI Imagery, Population and Environment models directly available to Trusted Testers on Google Cloud. Businesses can now use their own data alongside our models and datasets, like <a href="https://mapsplatform.google.com/resources/blog/introducing-imagery-insights-in-bigquery-ai-powered-infrastructure-management/">Imagery Insights</a>, to tackle specific challenges from environmental monitoring to disaster response.</p><h2 data-block-key="3810n">Earth AI in Action</h2><p data-block-key="79vvs">We’ve begun piloting Earth AI with thousands of organizations, including:</p></div>
  

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;New updates and more access to Google Earth AI&quot;
         }"><ul><li data-block-key="xieuy"><b>The World Health Organization Regional Office for Africa (WHO AFRO)</b> <a href="https://www.youtube.com/watch?v=_4GVYutXE_I&amp;feature=youtu.be">is using</a> Earth AI’s Population and Environment models, along with their own datasets, to understand and predict which areas in the Democratic Republic of Congo are at risk for cholera outbreaks. This information enables experts to help manage water, sanitation and vaccinations.<br></li><li data-block-key="40emb"><b>Satellite imagery providers like Planet and Airbus</b> <a href="https://www.youtube.com/watch?v=FviGaVEByS4&amp;feature=youtu.be">are using</a> Earth AI models to analyze the billions of pixels they capture daily. Planet looks at historical satellite imagery to help customers map deforestation. Airbus uses Earth AI to help customers detect where vegetation is encroaching on power lines, so they can prevent outages.<br></li><li data-block-key="9eh8e"><b>Bellwether</b>, a moonshot at Alphabet's X, <a href="https://www.youtube.com/watch?v=8-macH8ozr4&amp;feature=youtu.be">is using</a> Earth AI to provide hurricane predictions insights for global insurance broker <b>McGill and Partners</b>. This enables McGill's clients to pay claims faster so homeowners can start rebuilding sooner.</li></ul></div>
  

  
    <div data-component="uni-article-paragraph" role="presentation" data-analytics-module="{
           &quot;module_name&quot;: &quot;Paragraph&quot;,
           &quot;section_header&quot;: &quot;New updates and more access to Google Earth AI&quot;
         }">
        <p data-block-key="5ysbw">These updates will make it easier to take action with Earth AI. We're working with partners to train Earth AI models to reason about the physical world as fluently as LLMs reason about the digital one so that we can support those building solutions for their communities, solving problems in public health, crisis response and beyond.</p>
      </div>
  

  
    







<uni-related-content-tout title="Learn more about Earth AI" cta="See more" summary="Check out our website." hideimage="False" eyebrow="" image-alt-text="" role="none" externalurl="https://ai.google/earth-ai" fullurl="" pagetype="" isarticlepage="">
  
</uni-related-content-tout>

  


            
            

            
              




            
          </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Claude Memory (313 pts)]]></title>
            <link>https://www.anthropic.com/news/memory</link>
            <guid>45684134</guid>
            <pubDate>Thu, 23 Oct 2025 16:56:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anthropic.com/news/memory">https://www.anthropic.com/news/memory</a>, See on <a href="https://news.ycombinator.com/item?id=45684134">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div><div><ul><li><div><p><span>Update</span></p><p>Expanding to Pro and Max plans</p><p>Oct 23, 2025</p></div></li></ul></div><div id="accordion-content-undefined" role="region" aria-labelledby="accordion-header-undefined"><p>Whether you’re iterating on a strategy proposal, debugging an issue, or managing multiple projects, Claude picks up right where you left off. Like Team and Enterprise users, you get project-scoped memory (each project has its own separate memory), full control to view and edit what Claude remembers, and incognito chat for conversations that don’t save to memory.</p><p>Before this rollout, we ran extensive safety testing across sensitive wellbeing-related topics and edge cases—including whether memory could reinforce harmful patterns in conversations, lead to over-accommodation, and enable attempts to bypass our safeguards. Through this testing, we identified areas where Claude's responses needed refinement and made targeted adjustments to how memory functions. These iterations helped us build and improve the memory feature in a way that allows Claude to provide helpful and safe responses to users.</p><p>To get started, enable memory in Settings.</p></div><p>Today, we’re introducing memory to the Claude app, where Claude remembers you and your team’s projects and preferences, eliminating the need to re-explain context and keeping complex work moving forward.</p><p>Memory is <em>fully optional</em>, with granular user controls that help you manage what Claude remembers. We’re also introducing Incognito chats that don’t appear in your conversation history or save to memory.</p><p>Memory is rolling out to Team and Enterprise plan users starting today. Enterprise admins can choose whether to disable memory for their organization at any time. Incognito chat is available to all Claude users.</p><p>With memory, Claude focuses on learning your professional context and work patterns to maximize productivity. It remembers your team’s processes, client needs, project details, and priorities. Sales teams keep client context across deals, product teams maintain specifications across sprints, and executives track initiatives without constantly rebuilding context.</p><p>If you use projects, <strong>Claude creates a separate memory for each project</strong>. This ensures that your product launch planning stays separate from client work, and confidential discussions remain separate from general operations. These project boundaries help you and your teams manage complex, concurrent initiatives without mixing unrelated details, serving as a safety guardrail that keeps sensitive conversations contained.</p><div><figure><img alt="Two side-by-side Claude chat interface screenshots showing project-specific conversations" loading="lazy" width="1920" height="1080" decoding="async" data-nimg="1" srcset="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fdf07c7b9ef0cc93ce36d477835c3ef3b76832bde-1920x1080.png&amp;w=1920&amp;q=75 1x, https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fdf07c7b9ef0cc93ce36d477835c3ef3b76832bde-1920x1080.png&amp;w=3840&amp;q=75 2x" src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fdf07c7b9ef0cc93ce36d477835c3ef3b76832bde-1920x1080.png&amp;w=3840&amp;q=75"></figure></div><p>Claude uses a memory summary to capture all its memories in one place for you to view and edit. In your settings, you can see exactly what Claude remembers from your conversations, and update the summary at any time by chatting with Claude. Based on what you tell Claude to focus on or to ignore, Claude will adjust the memories it references.</p><h2 id="incognito-chat">Incognito chat</h2><p>Sometimes you need Claude’s help without using or adding to memory. Incognito chat gives you a clean slate for conversations that you don’t want to preserve in memory. It is perfect for sensitive brainstorming, confidential strategy discussions, or when you simply want a fresh conversation without context from previous chats. Your regular memory and conversation history remain untouched. If you’re using memory on a Team or Enterprise plan, your standard data retention settings apply.</p><div><figure><img alt="A Claude chat interface in Incognito mode, indicated by a ghost icon and &quot;Incognito chat&quot; label in the dark header bar" loading="lazy" width="1920" height="1080" decoding="async" data-nimg="1" srcset="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F840fdac9eecf90cf4aa4377f9ad80ddafcab2d4e-1920x1080.png&amp;w=1920&amp;q=75 1x, https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F840fdac9eecf90cf4aa4377f9ad80ddafcab2d4e-1920x1080.png&amp;w=3840&amp;q=75 2x" src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F840fdac9eecf90cf4aa4377f9ad80ddafcab2d4e-1920x1080.png&amp;w=3840&amp;q=75"></figure></div><h2 id="starting-with-teams-at-work">Starting with teams at work</h2><p>Memory introduces new safety considerations and we've designed the feature to be useful in work settings, while avoiding sensitive conversations and topics. We're also taking a thoughtful phased approach to ensure these powerful capabilities are deployed responsibly, and will continue to evaluate and test how memory works across the different ways people use Claude before expanding availability.</p><h2 id="getting-started">Getting started</h2><p>To see memory in action, enable the feature in Settings, and let Claude generate memory with your past chats at initial set-up. Ask Claude questions like “what were we working on last week?” to see what Claude remembers across your existing chats and connected tools. If you would like to bring your memory details over from a different AI tool or export your memory from Claude for backup or migration, you can <a href="https://support.anthropic.com/en/articles/12123587-importing-and-exporting-your-memory-from-claude" target="_blank" rel="noopener noreferrer">follow these instructions</a>.</p><p>Great work builds over time. With memory, each conversation with Claude improves the next.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[MinIO declines to release Docker builds resolving CVE-2025-62506 (169 pts)]]></title>
            <link>https://github.com/minio/minio/issues/21647</link>
            <guid>45684035</guid>
            <pubDate>Thu, 23 Oct 2025 16:46:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/minio/minio/issues/21647">https://github.com/minio/minio/issues/21647</a>, See on <a href="https://news.ycombinator.com/item?id=45684035">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-testid="issue-body-viewer" data-team-hovercards-enabled="true" data-turbolinks="false" id="issue-body-viewer"><p dir="auto">Hello,</p>
<p dir="auto">I did not find a new image for the security release  <code>Security/CVE RELEASE.2025-10-15T17-29-55Z</code>, on quay.io nor DockerHub.</p>
<p dir="auto">Is it expected? If it isn’t, can you please push a new release for this installation method?</p>
<p dir="auto">Thank you.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Trump Pardons Convicted Binance Founder (625 pts)]]></title>
            <link>https://www.wsj.com/finance/currencies/trump-pardons-convicted-binance-founder-7509bd63</link>
            <guid>45683152</guid>
            <pubDate>Thu, 23 Oct 2025 15:41:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/finance/currencies/trump-pardons-convicted-binance-founder-7509bd63">https://www.wsj.com/finance/currencies/trump-pardons-convicted-binance-founder-7509bd63</a>, See on <a href="https://news.ycombinator.com/item?id=45683152">Hacker News</a></p>
Couldn't get https://www.wsj.com/finance/currencies/trump-pardons-convicted-binance-founder-7509bd63: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[US hits $38T in debt. Fastest accumulation of $1T outside pandemic (154 pts)]]></title>
            <link>https://apnews.com/article/trump-treasury-debt-ceiling-bessent-09575f13ca95c2f1beb38234b2cbe85b</link>
            <guid>45682671</guid>
            <pubDate>Thu, 23 Oct 2025 15:03:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://apnews.com/article/trump-treasury-debt-ceiling-bessent-09575f13ca95c2f1beb38234b2cbe85b">https://apnews.com/article/trump-treasury-debt-ceiling-bessent-09575f13ca95c2f1beb38234b2cbe85b</a>, See on <a href="https://news.ycombinator.com/item?id=45682671">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                                        <p>WASHINGTON (AP) — In the midst of a federal government shutdown, the U.S. government’s gross national debt surpassed $38 trillion Wednesday, a record number that highlights the accelerating accumulation of debt on America’s balance sheet. </p><p>It’s also the fastest accumulation of a trillion dollars in debt outside of the COVID-19 pandemic — the <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://apnews.com/article/treasury-debt-spending-trump-obbb-6f807c4aae78dcc96f29ff07a3c926f4" rel="nofollow">U.S. hit $37 trillion in gross</a></span> national debt in August this year. </p><p>The $38 trillion update is found in the <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://fiscaldata.treasury.gov/datasets/daily-treasury-statement/operating-cash-balance" target="_blank" rel="nofollow noopener">latest Treasury Department report</a></span>, which logs the nation’s daily finances.</p><p>Kent Smetters of the University of Pennsylvania’s Penn Wharton Budget Model, who served in President George W. Bush’s Treasury Department, told The Associated Press that a growing debt load over time leads ultimately to higher inflation, eroding Americans’ purchasing power. </p><p>The <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://www.gao.gov/americas-fiscal-future/how-could-federal-debt-affect-you" target="_blank" rel="nofollow noopener">Government Accountability Office</a></span> outlines some of the impacts of rising government debt on Americans — including higher borrowing costs for things like mortgages and cars, lower wages from businesses having less money available to invest, and more expensive goods and services.</p>
    
<p>“I think a lot of people want to know that their kids and grandkids are going to be in good, decent shape in the future — that they will be able to afford a house,” Smetters said. “That additional inflation compounds” and erodes consumers’ purchasing power, he said, making it less possible for future generations to achieve home ownership goals. </p>



<p>The Trump administration says its policies are helping to slow government spending and will shrink the nation’s massive deficit. A new analysis by Treasury Department officials states that from April to September, the cumulative deficit totaled $468 billion. In a post on X Wednesday, Treasury Secretary Scott Bessent said that’s the lowest reading since 2019.</p>
    
    
    
<p>“During his first eight months in office, President Trump has reduced the deficit by $350 billion compared to the same period in 2024 by cutting spending and boosting revenue,” White House spokesman Kush Desai said in a statement, adding that the administration would pursue robust economic growth, lower inflation, tariff revenue, lower borrowing costs and cuts to waste, fraud and abuse. </p>
    
<p>The Joint Economic Committee <span><a data-gtm-enhancement-style="LinkEnhancementA" href="https://www.jec.senate.gov/public/index.cfm/republicans/debt-dashboard#:~:text=July%202025%20%7C%20Released%20July%2008,reached%20in%20approximately%20194%20days." target="_blank" rel="nofollow noopener">estimates</a></span> that the total national debt has grown by $69,713.82 per second for the past year.</p><p>Michael Peterson, chair and CEO of the Peter G. Peterson Foundation, said in a statement that “reaching $38 trillion in debt during a government shutdown is the latest troubling sign that lawmakers are not meeting their basic fiscal duties.”</p><p>“Along with increasing debt, you get higher interest costs, which are now the fastest growing part of the budget,” Peterson added. “We spent $4 trillion on interest over the last decade, but will spend $14 trillion in the next ten years. Interest costs crowd out important public and private investments in our future, harming the economy for every American.”</p><p>The U.S. hit $34 trillion in debt in January 2024, $35 trillion in July 2024 and $36 trillion in November 2024.</p>
                                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US axes website for reporting human rights abuses by US-armed foreign forces (719 pts)]]></title>
            <link>https://www.bbc.com/news/articles/cqx30vnwd4do</link>
            <guid>45682169</guid>
            <pubDate>Thu, 23 Oct 2025 14:25:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/articles/cqx30vnwd4do">https://www.bbc.com/news/articles/cqx30vnwd4do</a>, See on <a href="https://news.ycombinator.com/item?id=45682169">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div data-testid="byline-new" data-component="byline-block"><p><span data-testid="byline-new-contributors"><div data-testid="byline-new-contributors-contributor-0"><p><span>Tom Bateman</span><span data-testid="byline-new-contributors-contributor-0-role-location">State Department correspondent</span></p></div></span></p></div><figure><div data-component="image-block"><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/8ed0/live/349d2e90-aff5-11f0-af36-791af27228b8.jpg.webp" loading="eager" alt="Getty Images A police officer seen firing tear gas into a crowd of protesters during anti government demonstrations in 2021"><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>Allegations of excessive use of force during anti-government protests in Colombia in 2021 were reported on the tip line</figcaption></p></figure><div data-component="text-block"><p>The US State Department has removed an online portal for reporting alleged human rights violations by foreign military units supplied with American weapons.</p><p>The Human Rights Reporting Gateway (HRG) acted as a formal "tip line" to the US government.</p><p>It was the only publicly accessible channel of its kind for organisations or individuals to inform it directly of potentially serious abuses by US-armed foreign forces.</p><p>Its deletion has been condemned by human rights campaigners and by a senior congressional aide who drafted the law requiring it. The State Department insisted it was still abiding by the law.</p></div><div data-component="text-block"><p>The portal was established in 2022 following pressure on successive administrations to abide by updated provisions of the Leahy Law, named after former US Senator Patrick Leahy. These require the government to "facilitate receipt" of information on alleged gross violations of human rights by military units supplied by Washington.</p><p>Among the cases submitted via the HRG was the alleged excessive use of force by security forces during anti-government protests in Colombia, while several cases were due to be submitted relating to US-armed units of the Israel Defense Forces (IDF) in the occupied West Bank, according to Amnesty International.</p></div><figure><div data-component="image-block"><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/ea3d/live/c049c4a0-af80-11f0-aa13-0b0479f6f42a.jpg.webp" loading="lazy" alt="BBC News A screenshot of the website for Human Rights Reporting Gateway. &quot;Who should you report&quot; the site reads."><span>BBC News</span></p></div><p data-component="caption-block"><figcaption>The State Department portal where violations could be reported - before it was taken down</figcaption></p></figure><div data-component="text-block"><p>Tim Rieser, former senior aide to Senator Leahy who wrote the 2011 amendment mandating information gathering, told the BBC the gateway's removal meant the State Department was "clearly ignoring the law".</p><p>He added it was a further sign that "the entire human rights architecture" within the department was being "rendered largely ineffective".</p><p>"The United States will find itself supporting foreign security forces that commit heinous crimes even though nothing is done about it," said Mr Rieser. "As a result there will be less incentive for foreign governments to bring people who commit such crimes to justice."</p><p>In response, the US State Department insisted it was continuing to receive reports regarding gross violations of human rights and was engaging with "credible organisations" on a full spectrum of human rights concerns.  It said: "The Department abides by its legal requirements".</p><p>Secretary of State Marco Rubio has overseen a sweeping reorganisation of the State Department involving widespread layoffs and eliminating some offices focused on human rights monitoring. The department this year released a slimmed-down annual human rights report which critics said omitted alleged crimes by US allies but included those by foreign leaders the Trump administration opposes.</p><p>The department has previously said its restructure made it leaner and more efficient and followed President Trump's "America First" foreign policy which sees some human rights promotion as ideologically driven.</p><p>Charles Blaha, former Director of the Office of Security and Human Rights at the State Department, said people in the field would now have "no established channel" for reporting gross violations of human rights by foreign security forces.</p><p>The government's ability to deter abuses was "severely weakened", said Mr Blaha who is now an adviser to the Washington-based think tank Democracy for the Arab World Now (DAWN).</p><p>The BBC learned during the summer that the HRG site was earmarked for deletion. Its removal was highlighted by DAWN in August but has not previously been acknowledged by the State Department. The BBC confirmed this week that officials phased out the reporting channel during the department's restructure.</p><p>Screengrabs of the portal taken by the BBC before its deletion show it asked for information on US-armed foreign military units involved in alleged abuses including extrajudicial killings, forced disappearances, torture and rape. It required extensive details to ensure credible reporting including unit names, identities of alleged perpetrators, specific locations and dates.</p></div><figure><div data-component="image-block"><p><img src="https://static.files.bbci.co.uk/bbcdotcom/web/20251021-134202-667692b2c6-web-2.32.2-1/grey-placeholder.png" aria-label="image unavailable"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/9052/live/178de7e0-af91-11f0-aa13-0b0479f6f42a.jpg.webp" loading="lazy" alt="A screenshot of the website, asking for details about the alleged crimes."></p></div></figure><div data-component="text-block"><p>Blaha had already voiced frustration that despite the HRG passing its pilot phase, the Biden administration had not done enough to publicise it, meaning the provision to "facilitate receipt" of information was still not being fully honoured before the Trump administration deleted the channel entirely.</p><p>The US is the world's biggest contributor of military aid to foreign countries, supplying funding, equipment, training and arms to more than 150 nations. Its vetting procedures to prevent arms going to units involved in breaches of international law have evolved over the years, with the 1997 legislation named after Senator Leahy being one its major pillars.</p><p>At the heart of the law is Congress sending a message to the administration that taxpayer funding cannot support human rights abuses abroad, says Amanda Klasing, who oversees government relations at Amnesty International USA.</p><p>"If I'm a member of Congress, my perspective is: 'I want to protect my constituents and their taxpayer funding from going to torturers or people that kill their own citizens for protesting," she told the BBC.</p><p>Klasing oversaw the compilation and submission of several reports to the Human Rights Reporting Gateway.</p><p>These included allegations that American arms were used by Colombian security forces during mass anti-government protests in 2021, in which at least 47 people were killed and many wounded according to the group. Amnesty says among the arms were US-supplied high-capacity launchers for stun and smoke grenades.</p><p>Klasing says she had also gathered evidence relating to the killing of 20 Palestinians during IDF raids in occupied East Jerusalem and the West Bank in October and November 2023. Amnesty was preparing to submit its report on these incidents to the HRG before its deletion.</p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I spent a year of my life making an ASN.1 compiler in D (234 pts)]]></title>
            <link>https://bradley.chatha.dev/blog/dlang-propaganda/asn1-compiler-in-d/</link>
            <guid>45681200</guid>
            <pubDate>Thu, 23 Oct 2025 12:47:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bradley.chatha.dev/blog/dlang-propaganda/asn1-compiler-in-d/">https://bradley.chatha.dev/blog/dlang-propaganda/asn1-compiler-in-d/</a>, See on <a href="https://news.ycombinator.com/item?id=45681200">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>  <section> <a href="https://bradley.chatha.dev/blog/dlang-propaganda">  </a> </section>  <p>
Published: 2025/10/23
| Updated: 2025/10/23 </p> <p>… and it’s still nowhere near complete.</p>
<p>In this post I’ll just rambling about ASN.1; parts of the compiler implementation, and some of the tool’s output rather than the tool itself as its still too WIP to really advertise on its own yet.</p>
<p>This post is unstructured, so you can just pick somewhere random and start reading from there with no/minimal context lost.</p>
<p>Note: the name of the tool is <a href="https://github.com/Juptune/juptune/tree/master/tools/dasn1">dasn1</a>.</p>
<h2 id="summary">Summary</h2>
<ul>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#very-briefly---what-is-asn1"><em>Very</em> briefly - what is ASN.1?</a></li>
<li><a href="#asn1s-notation-can-be-really-complex">ASN.1’s notation can be really complex</a>
<ul>
<li><a href="#x680-woes---historical-deprecations">x.680 woes - historical deprecations</a></li>
<li><a href="#x681">x.681</a></li>
<li><a href="#x682">x.682</a></li>
<li><a href="#x683">x.683</a></li>
</ul>
</li>
<li><a href="#asn1s-notation-is-also-pretty-cool">ASN.1’s notation is also pretty cool!</a>
<ul>
<li><a href="#asn1s-constraint-system">ASN.1’s constraint system</a></li>
<li><a href="#asn1s-versioning-system">ASN.1’s versioning system</a></li>
</ul>
</li>
<li><a href="#d-is-easy-to-generate-code-for">D is easy to generate code for</a>
<ul>
<li><a href="#static-imports--fully-qualified-names">Static imports &amp; fully qualified names</a></li>
<li><a href="#module-local-lookups">Module-local lookups</a></li>
<li><a href="#typeof">typeof()</a></li>
<li><a href="#d-allows-trailing-commas-in-almost-every-context">D allows trailing commas in almost every context</a></li>
<li><a href="#utilise-metaprogramming-so-your-compiler-can-stay-dumbpoorly-made">Utilise metaprogramming so your compiler can stay dumb/poorly made</a></li>
</ul>
</li>
<li><a href="#interesting-d-specific-parts-of-the-implementation">Interesting D-specific parts of the implementation</a>
<ul>
<li><a href="#mixin-templates-for-ast-nodes">Mixin templates for AST nodes</a></li>
<li><a href="#templates-can-provide-really-natural-apis-while-still-catching-errors-at-compile-time">Templates can provide really natural APIs while still catching errors at compile time</a></li>
<li><a href="#d-snark-the-forever-experimental-allocator-package">D Snark: The forever-experimental allocator package</a></li>
<li><a href="#alias-this---a-very-occasionally-useful-feature">alias this - a very occasionally useful feature</a></li>
<li><a href="#versionunittest">version(unittest)</a></li>
<li><a href="#templates--with--terse-ish-test-harnesses">Templates + with() = terse-ish test harnesses</a></li>
</ul>
</li>
<li><a href="#pain-points">Pain points</a>
<ul>
<li><a href="#value-sequence-syntax">Value sequence syntax</a></li>
<li><a href="#its-hard-to-find-important-info-in-the-specs">It’s hard to find important info in the specs</a></li>
<li><a href="#you-need-to-implement-constraints-3-separate-times">You need to implement constraints 3 separate times</a></li>
<li><a href="#the-dream-of-immutable-ir-nodes">The dream of immutable IR nodes</a></li>
<li><a href="#asn1-has-an-all-or-nothing-level-of-complexity">ASN.1 has an all-or-nothing level of complexity</a></li>
<li><a href="#any-defined-by">ANY DEFINED BY</a></li>
<li><a href="#i-cant-retain-all-the-information-i-need-to-know">I can’t retain all the information I need to know</a></li>
</ul>
</li>
<li><a href="#writing-a-compiler-is-tedious-work">Writing a compiler is tedious work</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="motivation">Motivation</h2>
<p>I’m currently writing <a href="https://github.com/Juptune/juptune">Juptune</a> - a toy async I/O framework that attempts to implement as much of its stack as possible in pure D.</p>
<p>I’m really interested in writing an implementation of TLS, which means I need to be able to handle x.509 certificates (i.e. TLS/SSL certs), which means I need to be able to handle their underlying data encoding: ASN.1’s DER encoding.</p>
<p>So basically I just wanted to do this <em>for fun</em> at the end of the day, nothing much deeper than that. I’ve never written or worked on a proper compiler project before that wasn’t toy-sized so I saw a ton of growth potential… the main thing that’s grown however is the mental scar ASN.1’s left on me.</p>
<p>I’ve succesfully generated code that can parse a couple of x.509 certificates I’ve thrown at it, and I’ve started work on an almost-D-native (excluding crypto primitives) implementation of TLS 1.3.</p>
<p>I’m constantly amazed about how much of modern life relies on these ancient, overly complicated specs from the 90s. ASN.1 is used <em>everywhere</em> in some form or another and yet I bet you’ve never even heard of it before, just have a look on <a href="https://en.wikipedia.org/wiki/ASN.1#Applications">wikipedia</a>.</p>
<h2 id="very-briefly---what-is-asn1"><em>Very</em> briefly - what is ASN.1?</h2>
<p>ASN.1 is the result of a bunch of graybeards from the late 80s+ trying to design an overengineered data specification language. In other words, it’s protobuf on steroids.</p>
<p>There’s two parts of ASN.1: There’s the ASN.1 notation (defined by x.680, x.681, x.682, and x.683), and then there’s the various encodings (BER, CER, DER, PER, XER, JER…). In this post I’ll mainly be focusing on the notation + DER.</p>
<p>Similarly to protobuf you use the notation to define a structured way to represent data, and then use tooling that can generate encoders/decoders for a specific encoding, in a specific programming language.</p>
<p>Here’s a choice snippet of the ASN.1 notation for RFC 5280 (which defines what’s commonly known as TLS certificates):</p>
<div><figure><pre data-language="txt"><code><div><p><span>-- Modules are strongly versioned - something I'll talk about later!</span></p></div><div><p><span>PKIX1Implicit88 {</span></p></div><div><p><span><span>    </span></span><span>iso(1) identified-organization(3) dod(6) internet(1)</span></p></div><div><p><span><span>    </span></span><span>security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19)</span></p></div><div><p><span>} DEFINITIONS IMPLICIT TAGS ::=</span></p></div><div><p><span>BEGIN</span></p></div><div><p><span>-- Aliases to "built-in" types.</span></p></div><div><p><span>KeyIdentifier ::= OCTET STRING</span></p></div><div><p><span>-- Compact bitflags</span></p></div><div><p><span>KeyUsage ::= BIT STRING {</span></p></div><div><p><span><span>     </span></span><span>digitalSignature        (0),</span></p></div><div><p><span><span>     </span></span><span>nonRepudiation          (1),  -- recent editions of X.509 have</span></p></div><div><p><span><span>                                </span></span><span>-- renamed this bit to contentCommitment</span></p></div><div><p><span><span>     </span></span><span>keyEncipherment         (2),</span></p></div><div><p><span><span>     </span></span><span>dataEncipherment        (3),</span></p></div><div><p><span><span>     </span></span><span>keyAgreement            (4),</span></p></div><div><p><span><span>     </span></span><span>keyCertSign             (5),</span></p></div><div><p><span><span>     </span></span><span>cRLSign                 (6),</span></p></div><div><p><span><span>     </span></span><span>encipherOnly            (7),</span></p></div><div><p><span><span>     </span></span><span>decipherOnly            (8) }</span></p></div><div><p><span>-- A struct/class equivalent</span></p></div><div><p><span>PolicyInformation ::= SEQUENCE {</span></p></div><div><p><span><span>     </span></span><span>policyIdentifier   CertPolicyId,</span></p></div><div><p><span><span>     </span></span><span>-- Types can be given constraints - something I'll also talk about later!</span></p></div><div><p><span><span>     </span></span><span>policyQualifiers   SEQUENCE (SIZE (1..MAX)) OF PolicyQualifierInfo OPTIONAL</span></p></div><div><p><span>}</span></p></div><div><p><span>-- A pretty clean way of defining unique identifiers</span></p></div><div><p><span>id-pkix  OBJECT IDENTIFIER  ::=</span></p></div><div><p><span><span>         </span></span><span>{ iso(1) identified-organization(3) dod(6) internet(1)</span></p></div><div><p><span><span>                    </span></span><span>security(5) mechanisms(5) pkix(7) }</span></p></div><div><p><span>id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }</span></p></div><div><p><span><span>        </span></span><span>-- arc for extended key purpose OIDS</span></p></div><div><p><span>id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }</span></p></div><div><p><span>id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }</span></p></div><div><p><span>id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 }</span></p></div><div><p><span>id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 }</span></p></div><div><p><span>id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 }</span></p></div><div><p><span>id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }</span></p></div><div><p><span>END</span></p></div></code></pre></figure></div>
<p>Encoding wise here’s a quick of some of the more well known ones:</p>
<ul>
<li>BER - Basic binary encoding rules. Uses a Tag-Length-Value (TLV) format that supports functionally infinite lengths of data.</li>
<li>CER - A limited subset of BER where each value can only have one possible encoding. It uses some odd design choices (such as <em>always</em> using the infinite-length forms of encoded data), so no one really uses it.</li>
<li>DER - A limited subset of BER where each value can only have one possible encoding, but with a more sane choice of decisions made compared to CER. This is used extensively for cryptographic purposes.</li>
<li>PER - A binary encoding that uses contraint information to encode data in the absolute minimum amount of bits possible. There’s also like 4 variations of this one btw.</li>
<li>OER - Similar to PER except it keeps the bytes of values separate, whereas PER can pack the bits of different values together tightly.</li>
<li>XER - An XML based encoding. The ASN.1 notation grammar actually has XML-specific parts to it just for this encoding (because of course it does).</li>
<li>JER - A JSON based encoding.</li>
</ul>
<p>Did I ever mention that ASN.1 is complicated? On the one hand the sheer amount of possible encodings is daunting, but on the other hand it shows a certain flexbility that ASN.1 provides - you could even invent your own domain-specific encoding if needed.</p>
<h2 id="asn1s-notation-can-be-really-complex">ASN.1’s notation can be really complex</h2>
<p>Loosely speaking you can define ASN.1’s notation as being the “base” notation defined in x.680, with the sometimes-optional addon specifications defined in x.681, x.682, x.683.</p>
<p>These specifications are also written in academicese so for mere uneducated mortals such as myself, simply trying to read and understand what the specifications are saying in the first place is already a large hurdle. I <em>think</em> I’ve started to get the hang of it though.</p>
<p>Fortunately for my use case of handling x.509 certificates, there’s no hard requirement for anything beyond x.680 and so x.680 is the only spec I’ve attempted to implement so far (outside of x.690 which describes how BER/CER/DER works - which is actually a <em>joy</em> to read compared to the x.68x specs).</p>
<p>x.680 isn’t the worst thing in the world to implement, it’s just the fact that there’s a <em>lot</em> more to it than you’d think from a quick glance at a code example, as well as some relatively annoying “transformation” (semantic) rules you have to acccount for.</p>
<p>Generally though I’d say the really difficult parts seem to come from its extensions.</p>
<h3 id="x680-woes---historical-deprecations">x.680 woes - historical deprecations</h3>
<p>One of the more annoying parts of implementing a parser for ASN.1’s notation is that x.680 has been revised several times over the years, which includes the deprecation + removal of certain features.</p>
<p>And so some other specifications you read through will either:</p>
<ol>
<li>Use older forms of syntax that are no longer recommended/supported.</li>
<li>Replace the older forms of syntax with newer variants which can be <em>much</em> more complicated to implement.</li>
</ol>
<p>Meaning that if you want to write a compiler for ASN.1 for a specific use case, but want it to also be an implementation of the more modern specs… then you’ll have to partially implement/hack around some of the older stuff that’s no longer defined in the up to date spec documentation.</p>
<p>An example would be the <code>ANY DEFINED BY</code> syntax, which I have a separate section on.</p>
<h3 id="x681">x.681</h3>
<p>This is essentially the academic equivalent of an Elder Scroll - you will go insane attempting to read let alone mentally parse this damn thing.</p>
<p>x.681 describes the Information Class Object system. I’d <em>love</em> to talk to you more about it more in depth but I haven’t put in enough effort to confidently state much about how it works.</p>
<p>One of the few parts I sort of understand and can talk about is that x.681 has a really cool feature where Information Classes can be given a custom initialisation syntax:</p>
<div><figure><pre data-language="txt"><code><div><p><span>-- Given this information class</span></p></div><div><p><span>PERSON ::= CLASS {</span></p></div><div><p><span><span>    </span></span><span>&amp;name UTF8String,</span></p></div><div><p><span><span>    </span></span><span>&amp;age INTEGER DEFAULT 0</span></p></div><div><p><span>}</span></p></div><div><p><span>WITH SYNTAX {</span></p></div><div><p><span><span>    </span></span><span>CALLED &amp;name [WHO IS &amp;age YEARS OLD]</span></p></div><div><p><span>}</span></p></div><div><p><span>-- Can be initialised as either one of these</span></p></div><div><p><span>bradley1 PERSON ::= { CALLED "Bradley" }</span></p></div><div><p><span>bradley2 PERSON ::= { CALLED "Bradley" WHO IS 26 YEARS OLD }</span></p></div></code></pre></figure></div>
<p>I’d absolutely love to attempt to implement x.681 for the challenge of this feature alone, however I only have so much energy (and sanity), so it’ll likely be a while until I even properly consider it.</p>
<h3 id="x682">x.682</h3>
<p>x.682 describes the Table Constraint feature. I’m going to be honest I don’t understand a single thing about this feature - I took one look at the specification and was like “absolutely not”.</p>
<h3 id="x683">x.683</h3>
<p>x.683 describes the ability to create templated (sorry, “parameterised”) types. Similar to the other ASN.1 extensions I haven’t looked much into this feature, but it appears to be a lot simpler to implement than the others.</p>
<p>In essence, one of the things you can do is this:</p>
<div><figure><pre data-language="txt"><code><div><p><span>MyTemplatedThingy{ValueT} ::= SEQUENCE {</span></p></div><div><p><span><span>    </span></span><span>value ValueT</span></p></div><div><p><span>}</span></p></div><div><p><span>MyStringThingy ::= MyTemplatedThingy{UTF8String}</span></p></div></code></pre></figure></div>
<p>It supports values as well as types within its template parameters (similarly to D!) so there’s a few cool things you can do with it I guess.</p>
<h2 id="asn1s-notation-is-also-pretty-cool">ASN.1’s notation is also pretty cool!</h2>
<p>Despite the many, <em>many</em>, <strong>many</strong> pains of this god forsaken technology, it’s actually really interesting and powerful at the same time.</p>
<h3 id="asn1s-constraint-system">ASN.1’s constraint system</h3>
<p>ASN.1’s notation contains a pretty neat feature where you can add special constraints onto types + fields. So rather than having a stray “ProtcolPacket.field1.field2.xyz MUST be between 0 and 2” that’s super easy to miss, you can instead describe this constraint within ASN.1 itself which (good) tooling will then take into account for you.</p>
<p>Here’s some examples of the simpler constraints available:</p>
<div><figure><pre data-language="txt"><code><div><p><span>UInt8 ::= INTEGER (0..255) -- Constrain to a specific range of values</span></p></div><div><p><span>LegacyFlag ::= INTEGER (0) -- Constrain to a single value</span></p></div><div><p><span>LegacyFlags ::= INTEGER (0 | 2 | 4 | 8) -- You can combine constraints via the UNION (shorthand '|') operator.</span></p></div><div><p><span>LegacyFlags2 ::= INTEGER (0 | 2 ^ 4..8) -- You can also use the INTERSECTION (shorthand '^') operator to specify alternatively valid constraints.</span></p></div><div><p><span>-- You can limit the size of some types</span></p></div><div><p><span>Password ::= UTF8String (SIZE (8..32)) -- Must be between 8 and 32 chars.</span></p></div><div><p><span>NumberList ::= SET SIZE (2..MAX) OF INTEGER -- Must have at least 2 elements, but is otherwise unbounded.</span></p></div></code></pre></figure></div>
<p>There’s a few more constraints available but… they’re mostly pretty complex ones that I don’t want to have to think about.</p>
<p>It’s really cool to see that ASN.1 has a feature like this though, considering the only other langauge I’ve personally encountered that has a similar feature is Ada.</p>
<h3 id="asn1s-versioning-system">ASN.1’s versioning system</h3>
<p>ASN.1 generally uses the <code>OBJECT IDENTIFIER</code> type in order to, well, identify specific things, e.g. extensions found within x.509 certificates.</p>
<p><code>OBJECT IDENTIFIER</code>s are also used to provide versions to modules, for example:</p>
<div><figure><pre data-language="txt"><code><div><p><span>PKIX1Implicit88 {</span></p></div><div><p><span><span>    </span></span><span>iso(1) identified-organization(3) dod(6) internet(1)</span></p></div><div><p><span><span>    </span></span><span>security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19)</span></p></div><div><p><span>} DEFINITIONS IMPLICIT TAGS ::= BEGIN -- .. -- END</span></p></div></code></pre></figure></div>
<p>Everything between the curly brackets is an OBJECT IDENTIFIER for this exact module - technically no other ASN.1 module in existance should ever use this specific OBJECT IDENTIFIER. The optional labels (e.g. <code>iso</code>) have no meaning beyond aiding human comprehension, it’s the values (e.g. <code>(0)</code>) that are actually used to create the identifier.</p>
<p>As a great example of this versioning system, it just so happens that this specific module has a more modern version that has this specific OBJECT IDENTIFIER instead:</p>
<div><figure><pre data-language="txt"><code><div><p><span>PKIX1Implicit-2009</span></p></div><div><p><span><span>    </span></span><span>{iso(1) identified-organization(3) dod(6) internet(1) security(5)</span></p></div><div><p><span><span>    </span></span><span>mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}</span></p></div><div><p><span>DEFINITIONS IMPLICIT TAGS ::= BEGIN -- .. -- END</span></p></div></code></pre></figure></div>
<p>This updated version doesn’t change how data is encoded to/from DER but instead it simply uses more modern syntax and features.</p>
<p>This is important because older specifications will be using <code>PKIX1Implicit88</code> whereas newer ones will likely be using <code>PKIX1Implicit-2009</code> instead, and so there needs to be a more clear-cut way to distinguish between these two versions of the <code>PKIX1Implicit</code> module other than going by its name - and this is where OBJECT IDENTIFIERS come in handy.</p>
<p>When importing modules within ASN.1 notation you can (and should) specify an OBJECT IDENTIFIER as well:</p>
<div><figure><pre data-language="txt"><code><div><p><span>-- There's 0 room for ambiguity or naming clashes when OBJECT IDENTIFIERs come into play</span></p></div><div><p><span>IMPORTS</span></p></div><div><p><span><span>    </span></span><span>id-pkix FROM PKIX1Implicit88 {</span></p></div><div><p><span><span>        </span></span><span>iso(1) identified-organization(3) dod(6) internet(1)</span></p></div><div><p><span><span>        </span></span><span>security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19)</span></p></div><div><p><span><span>    </span></span><span>},</span></p></div><div><p><span><span>    </span></span><span>SignatureAlgs FROM PKIX1Implicit-2009 {</span></p></div><div><p><span><span>        </span></span><span>iso(1) identified-organization(3) dod(6) internet(1) security(5)</span></p></div><div><p><span><span>        </span></span><span>mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>;</span></p></div></code></pre></figure></div>
<p>Maybe I’m just a nerd, but I find this to almost be a thing of beauty with how simple yet effective it is.</p>
<h2 id="d-is-easy-to-generate-code-for">D is easy to generate code for</h2>
<p>D has several quality of life features that makes it surprisingly easy to generate code for - features that would definitely make the compiler more annoying to work with when targeting other languages.</p>
<p>These features on their own aren’t exactly rare to see, but the specific combination is what makes everything work together so well.</p>
<h3 id="static-imports--fully-qualified-names">Static imports &amp; fully qualified names</h3>
<p><code>static import</code> in D means “import this module, but ONLY allow it to be used via its fully qualified name”:</p>
<div><figure><pre data-language="d"><code><div><p><span>static import</span><span> </span><mark><span>std.stdio</span></mark><span>;</span></p></div><div><p><span>// Good!</span></p></div><div><p><mark><span>std.stdio</span></mark><span>.writeln</span><span>(</span><span>"Hello, world!"</span><span>);</span></p></div><div><p><span>// Bad!</span></p></div><div><p><span>writeln</span><span>(</span><span>"Hello, world!"</span><span>);</span></p></div></code></pre></figure></div>
<p>You can even override the module name, as strange as that sounds!</p>
<div><figure><pre data-language="d"><code><div><p><span>static import</span><span> </span><mark><span>io</span><span> </span></mark><span>= </span><span>std.stdio</span><span>;</span></p></div><div><p><mark><span>io.</span></mark><span>writeln</span><span>(</span><span>"Hello, world!"</span><span>);</span></p></div></code></pre></figure></div>
<p>This feature is a godsend for preserving the original names of ASN.1 types. For example, Juptune provides an error type called <code>Result</code> which comes from the <code>juptune.core.util.result</code> module.</p>
<p>Without static imports I’d have to be careful of ASN.1 code that defines a <code>Result</code> type as it’d otherwise come into conflict with Juptune’s own <code>Result</code> type.</p>
<p>However, with static imports, I can basically just generate code that looks like this:</p>
<div><figure><pre data-language="d"><code><div><p><span>static import</span><span> </span><span>jres</span><span> = </span><span>juptune.core.util.result</span><span>;</span></p></div><div><p><span>// From ASN.1 definition: Result ::= SEQUENCE { -- yada yada -- }</span></p></div><div><p><span>struct</span><span> </span><span>Result</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><mark><span>jres.Result</span></mark><span> </span><span>set</span><span>(</span><span>/*...*/</span><span>) </span><span>@nogc</span><span> </span><span>nothrow</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>/*...*/</span></p></div><div><p><span>        </span><span>return</span><span> </span><mark><span>jres.Result</span></mark><span>.noError</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Completely removing the need of me having to worry about symbol name conflicts.</p>
<h3 id="module-local-lookups">Module-local lookups</h3>
<p>On a similar vein D allows you to specify that instead of looking up a symbol from any available symbol table (e.g. local vars; non-static imports, etc.) it should instead perform a lookup using the current module’s top-level symbols.</p>
<p>For example:</p>
<div><figure><pre data-language="d"><code><div><p><span>/* Given this ASN.1 notation:</span></p></div><div><p><span><span>    </span></span><span>Type1 ::= SEQUENCE { -- yada yada -- }</span></p></div><div><p><span><span>    </span></span><span>Type2 ::= SEQUENCE { type2 Type2 }</span></p></div><div><p><span>*/</span></p></div><div><p><span>// The following types are generated</span></p></div><div><p><span>struct</span><span> </span><span>Type1</span><span> { </span><span>/* yada yada */</span><span> }</span></p></div><div><p><span>struct</span><span> </span><span>Type2</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>private</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span><span>        </span></span><mark><span>.</span><span>Type1</span></mark><span> </span><span>_type1</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>The leading <code>.</code> in <code>.Type1</code> is what causes the module-local lookup.</p>
<p>Essentially, this feature compliments the static import feature to help make it much harder for ASN.1 types to accidentally refer to the wrong symbol when converted into D code.</p>
<h3 id="typeof">typeof()</h3>
<p>In short: this feature allowed me to be <em>really really</em> lazy with certain parts of the compiler :D</p>
<p>As the name suggests, <code>typeof()</code> allows you to retrieve the type of any particular symbol you pass into it - this is great when dealing with code generation since sometimes it can be <em>kind of annoying</em> to structure your code in a way where you can easily preserve the type name of some symbol you’re working with.</p>
<p>In other words “this let’s me write bad code and make it still work”.</p>
<p>First example is around how some getters and setters for SEQEUENCE fields are generated. Instead of doing the correct thing and preserving the type name for each field, I got lazy and just used <code>typeof(_field)</code>:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Heavily omitted example</span></p></div><div><p><span>struct</span><span> </span><span>Dss_Parms</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>private</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>asn1.Asn1Integer</span><span> </span><span>_p</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>jres.Result</span><span> </span><span>setP</span><span>(</span><mark><span>typeof(</span><span>_p</span><span>)</span></mark><span> </span><span>value</span><span>) </span><span>@nogc</span><span> </span><span>nothrow</span></p></div><div><p><span><span>    </span></span><span>{ </span><span>/* .. */</span><span> }</span></p></div><div><p><span>    </span><mark><span>typeof(</span><span>_p</span><span>)</span></mark><span> </span><span>getP</span><span>() </span><span>@nogc</span><span> </span><span>nothrow</span></p></div><div><p><span><span>    </span></span><span>{ </span><span>/* .. */</span><span> }</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>The second example is around error messages. Instead of needing to keep track of the current type’s name when generating error messages… I could just use <code>typeof(this)</code> to get the type instead:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Heavily omitted example</span></p></div><div><p><span>struct</span><span> </span><span>Dss_Parms</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>jres.Result</span><span> </span><span>fromDecoding</span><span>(</span><span>/* .. */</span><span>) </span><span>@nogc</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span>        </span><span>result</span><span> </span><span>=</span><span> </span><span>asn1.asn1DecodeComponentHeader</span><span>!</span><span>ruleset</span><span>(</span><span>memory</span><span>,</span><span> </span><span>componentHeader</span><span>);</span></p></div><div><p><span>        </span><span>if</span><span>(</span><span>result.isError</span><span>)</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>return</span><span> </span><span>result.wrapError</span><span>(</span></p></div><div><p><span>                </span><span>"when decoding header of field 'p' in type "</span></p></div><div><p><span>                </span><span>~__traits(</span><span>identifier</span><span>,</span><span> </span><span>typeof(this))</span></p></div><div><p><span>                </span><span>~</span><span>":"</span></p></div><div><p><span><span>            </span></span><span>);</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>What’s <em>even better</em> is that because the entire string is composed of compile-time constants, it doesn’t actually require an allocation + concat at runtime since the compiler will constant fold it for you. This allows <code>fromDecoding</code> to still be marked as <code>@nogc</code>!</p>
<h3 id="d-allows-trailing-commas-in-almost-every-context">D allows trailing commas in almost every context</h3>
<p>Generating a parameter list and don’t want to have to care about whether there’s an extra comma or not?</p>
<div><figure><pre data-language="d"><code><div><p><span>// Trailing commas are allowed!</span></p></div><div><p><span>void</span><span> </span><span>func</span><span>(</span><span>int</span><span> </span><span>param1</span><span>,</span><span> </span><span>int</span><span> </span><span>param</span><mark><span>2</span><span>,</span><span>)</span></mark></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>func</span><span>(</span><span>1</span><span>,</span><span> </span><mark><span>2</span><span>,</span><span>)</span></mark><span>;</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Enum options?</p>
<div><figure><pre data-language="d"><code><div><p><span>enum</span><span> </span><span>Choice</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>_FAILSAFE</span><span>,</span></p></div><div><p><span>    </span><span>specified</span><span>,</span></p></div><div><p><span>    </span><span>otherSource</span><span>,</span></p></div><div><p><span>    </span><span>stillCompile</span><mark><span>s</span><span>,</span></mark></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Array values?</p>
<div><figure><pre data-language="d"><code><div><p><span>static</span><span> </span><span>immutable</span><span> </span><span>ubyte</span><span>[] </span><span>mainValue__value</span><span> </span><span>=</span><span> [</span></p></div><div><p><span>    </span><span>14</span><span>,</span><span> </span><span>3</span><span>,</span><span> </span><span>2</span><span>,</span><span> </span><span>2</span><mark><span>6</span><span>,</span></mark></p></div><div><p><span>]</span></p></div></code></pre></figure></div>
<p>D’s got your back! (Except for specifying multiple modules in a single import statement, then for some reason you’re not allowed, but shh about that).</p>
<h3 id="utilise-metaprogramming-so-your-compiler-can-stay-dumbpoorly-made">Utilise metaprogramming so your compiler can stay dumb/poorly made</h3>
<p>For a while a lot of the types being generated (and some of the core decoding types) didn’t have a <code>toString</code> implementation. This’d normally mean that I couldn’t just use <code>.toString</code> willy-nilly but instead the compiler would need knowledge about which types had a <code>toString</code> or not.</p>
<p>However, as is the common theme now D allows us to be very lazy - instead of keeping track of this ourselves in dasn1, we can instead just generate code where it’s the D compiler’s concern instead of our’s:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Heavily omitted</span></p></div><div><p><span>struct</span><span> </span><span>Dss_Parms</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>void</span><span> </span><span>toString</span><span>(</span><span>SinkT</span><span>)(</span><span>scope</span><span> </span><span>SinkT</span><span> </span><span>sink</span><span>,</span><span> </span><span>int</span><span> </span><span>depth</span><span> </span><span>=</span><span> </span><span>0</span><span>,</span><span>)</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span>        </span><span>static if(__traits(</span><span>hasMember</span><span>,</span><span> </span><span>typeof(</span><span>_p</span><span>),</span><span> </span><span>"toString"</span><span>))</span></p></div><div><p><span>            </span><span>_p.toString</span><span>(</span><span>sink</span><span>,</span><span> </span><span>depth</span><span>+</span><span>1</span><span>);</span></p></div><div><p><span>        </span><span>else</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>putIndent</span><span>();</span></p></div><div><p><span>            </span><span>sink</span><span>(</span><span>"&lt;no toString impl&gt;</span><span>\n</span><span>"</span><span>);</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Job sorted (and future proofed!).</p>
<p>You could definitely utilise D’s metaprogramming for more complicated stuff, but it’s also good for silly little things like this.</p>
<h2 id="interesting-d-specific-parts-of-the-implementation">Interesting D-specific parts of the implementation</h2>
<p>Naturally I’ve tried to use whatever D features that I could in order to implement dasn1, so I thought I’d pick a few parts of the code that rely on D’s features quite heavily as a small showcase.</p>
<h3 id="mixin-templates-for-ast-nodes">Mixin templates for AST nodes</h3>
<p>Mixin templates are a fairly quirky feature of D - it allows you to define a normal template (essentially a compile-time collection of symbols) and then copy-paste them wherever you like, whether that’s inside a class, struct, the top-level module etc.</p>
<p>Since the ASN.1 grammar only had a handful of node “types”, I decided to use mixin templates to model each specific “type”:</p>
<div><figure><pre data-language="d"><code><div><p><span>// I've included the mixin template for the `List` type in its entirety, plus a few nodes that reference other mixin templates not shown.</span></p></div><div><p><span>// This is just to give a general idea on how it all works, without diving into many details.</span></p></div><div><p><span>private</span><span> </span><span>mixin template</span><span> </span><span>List</span><span>(</span><span>Asn1NodeType</span><span> </span><span>MyType</span><span>,</span><span> </span><span>ItemT</span><span>)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>import</span><span> </span><span>juptune.core.ds</span><span> : </span><span>Array</span><span>;</span></p></div><div><p><span>    </span><span>enum</span><span> </span><span>_MustBeDtored</span><span> </span><span>=</span><span> </span><span>true</span><span>; </span><span>// A compile-time flag that some other metaprogramming in the compiler uses to handle memory management!</span></p></div><div><p><span>    </span><span>private</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>Array</span><span>!</span><span>ItemT</span><span> </span><span>_items</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>@nogc</span><span> </span><span>nothrow</span><span>:</span></p></div><div><p><span>    </span><span>this</span><span>()</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>super</span><span>(</span><span>MyType</span><span>);</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>ref</span><span> </span><span>typeof(</span><span>_items</span><span>)</span><span> </span><span>items</span><span>() </span><span>=&gt;</span><span> </span><span>this</span><span>._items</span><span>;</span></p></div><div><p><span>    </span><span>override</span><span> </span><span>void</span><span> </span><span>dispose</span><span>()</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>this._items.__xdtor</span><span>();</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div><div><p><span>/++</span></p></div><div><p><span><span>    </span></span><span>DefinitiveObjIdComponentList ::=</span></p></div><div><p><span><span>        </span></span><span>DefinitiveObjIdComponent</span></p></div><div><p><span><span>        </span></span><span>| DefinitiveObjIdComponent DefinitiveObjIdComponentList</span></p></div><div><p><span><span> </span></span><span>++/</span></p></div><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1DefinitiveObjIdComponentListNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>List</span><span>!(</span><span>Asn1NodeType.DefinitiveObjIdComponentList</span><span>,</span><span> </span><span>Asn1DefinitiveObjIdComponentNode</span><span>);</span></p></div><div><p><span>}</span></p></div><div><p><span>/++</span></p></div><div><p><span><span>    </span></span><span>ModuleDefinition ::=</span></p></div><div><p><span><span>        </span></span><span>ModuleIdentifier</span></p></div><div><p><span><span>        </span></span><span>DEFINITIONS</span></p></div><div><p><span><span>        </span></span><span>TagDefault</span></p></div><div><p><span><span>        </span></span><span>ExtensionDefault</span></p></div><div><p><span><span>        </span></span><span>"::="</span></p></div><div><p><span><span>        </span></span><span>BEGIN</span></p></div><div><p><span><span>        </span></span><span>ModuleBody</span></p></div><div><p><span><span>        </span></span><span>END</span></p></div><div><p><span><span> </span></span><span>++/</span></p></div><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1ModuleDefinitionNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>Container</span><span>!(</span><span>Asn1NodeType.ModuleDefinition</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ModuleIdentifierNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1TagDefaultNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ExtensionDefaultNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ModuleBodyNode</span><span>,</span></p></div><div><p><span><span>    </span></span><span>);</span></p></div><div><p><span>}</span></p></div><div><p><span>/++</span></p></div><div><p><span><span>    </span></span><span>DefinitiveIdentifier ::=</span></p></div><div><p><span><span>        </span></span><span>"{" DefinitiveObjIdComponentList "}"</span></p></div><div><p><span><span>        </span></span><span>| empty</span></p></div><div><p><span><span> </span></span><span>++/</span></p></div><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1DefinitiveIdentifierNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>OneOf</span><span>!(</span><span>Asn1NodeType.DefinitiveIdentifier</span><span>,</span></p></div><div><p><span>        </span><span>Asn1DefinitiveObjIdComponentListNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1EmptyNode</span><span>,</span></p></div><div><p><span><span>    </span></span><span>);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>I probably could’ve gotten away with just using templated base classes instead, but there’s a few differences that actually make that kind of annoying. Namely it’d create some bloated symbol names which would make reading compiler errors even more painful than it already ended up being.</p>
<h3 id="templates-can-provide-really-natural-apis-while-still-catching-errors-at-compile-time">Templates can provide really natural APIs while still catching errors at compile time</h3>
<p>Let’s look at one of the AST nodes again:</p>
<div><figure><pre data-language="d"><code><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1ModuleDefinitionNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>Container</span><span>!(</span><span>Asn1NodeType.ModuleDefinition</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ModuleIdentifierNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1TagDefaultNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ExtensionDefaultNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ModuleBodyNode</span><span>,</span></p></div><div><p><span><span>    </span></span><span>);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>This is a node that contains several other nodes. <code>Container</code> itself supports an unbounded amount of node types it can store, since D supports variadic template parameters. You may be asking what the API for this even looks like, and I’ll be glad to show you a quick snippet:</p>
<div><figure><pre data-language="d"><code><div><p><span>Asn1ModuleDefinitionNode</span><span> </span><span>node</span><span> </span><span>=</span><span> </span><span>/* parse from somewhere */</span><span>;</span></p></div><div><p><span>// We don't have to work with named functions when we can just work with types!</span></p></div><div><p><span>auto</span><span> </span><span>tagDefault</span><span>   </span><span>=</span><span> </span><span>node.getNode</span><span>!</span><span>Asn1TagDefaultNode</span><span>;</span></p></div><div><p><span>auto</span><span> </span><span>modReference</span><span> </span><span>=</span><span> </span><span>node.getNode</span><span>!</span><span>Asn1ModuleIdentifierNode</span></p></div><div><p><span><span>                        </span></span><span>.</span><span>getNode</span><span>!</span><span>Asn1ModuleReferenceTokenNode</span><span>;</span></p></div><div><p><span>// Since each `Container` node knows what types are available, it can catch errors at compile time still.</span></p></div><div><p><span>node.getNode</span><span>!</span><span>Asn1EmptyNode</span><span>; </span><span>// Error: "Invalid node type: Asn1EmptyNode"</span></p></div></code></pre></figure></div>
<p>Let’s have a look at a <code>OneOf</code> node instead now:</p>
<div><figure><pre data-language="d"><code><div><p><span>/++</span></p></div><div><p><span><span>    </span></span><span>TagDefault ::=</span></p></div><div><p><span><span>        </span></span><span>EXPLICIT TAGS</span></p></div><div><p><span><span>        </span></span><span>| IMPLICIT TAGS</span></p></div><div><p><span><span>        </span></span><span>| AUTOMATIC TAGS</span></p></div><div><p><span><span>        </span></span><span>| empty</span></p></div><div><p><span><span> </span></span><span>++/</span></p></div><div><p><span>final</span><span> </span><span>class</span><span> </span><span>Asn1TagDefaultNode</span><span> : </span><span>Asn1BaseNode</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>mixin</span><span> </span><span>OneOf</span><span>!(</span><span>Asn1NodeType.TagDefault</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ExplicitTagsNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1ImplicitTagsNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1AutomaticTagsNode</span><span>,</span></p></div><div><p><span>        </span><span>Asn1EmptyNode</span><span>,</span></p></div><div><p><span><span>    </span></span><span>);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>This node has a similar template-based API for most of its operations:</p>
<div><figure><pre data-language="d"><code><div><p><span>// It generates a constructor for each possible type.</span></p></div><div><p><span>// Pretend the `cast(xyz)null`s are actually constructed objects.</span></p></div><div><p><span>auto</span><span> </span><span>node</span><span> </span><span>=</span><span> </span><span>new </span><span>Asn1TagDefaultNode</span><span>(</span><span>cast(</span><span>Asn1ExplicitTagsNode</span><span>)</span><span>null</span><span>); </span><span>// Node is for EXPLICIT TAGS</span></p></div><div><p><span>     </span><span>node</span><span> </span><span>=</span><span> </span><span>new </span><span>Asn1TagDefaultNode</span><span>(</span><span>cast(</span><span>Asn1ImplicitTagsNode</span><span>)</span><span>null</span><span>); </span><span>// Node is for IMPLICIT TAGS</span></p></div><div><p><span>// General getter/checker functions.</span></p></div><div><p><span>bool</span><span> </span><span>_</span><span>                 </span><span>=</span><span> </span><span>node.isNode</span><span>!</span><span>Asn1ImplicitTagsNode</span><span>;</span></p></div><div><p><span>Asn1ImplicitTagsNode</span><span> </span><span>_</span><span> </span><span>=</span><span> </span><span>node.asNode</span><span>!</span><span>Asn1ImplicitTagsNode</span><span>; </span><span>// Runtime error if the node isn't storing an `Asn1ImplicitTagsNode`</span></p></div><div><p><span>Asn1ImplicitTagsNode</span><span> </span><span>_</span><span> </span><span>=</span><span> </span><span>node.maybeNode</span><span>!</span><span>Asn1ImplicitTagsNode</span><span>; </span><span>// Null if the node isn't storing an `Asn1ImplicitTagsNode`</span></p></div></code></pre></figure></div>
<p>However the main feature of the <code>OneOf</code> node is its <code>match</code> function. This function requires the user to pass in a handler function for each possible node type that the <code>OneOf</code> can store, and this requirement is enforced at compile-time so that changes to the node type list will immediately require all appropriate <code>match</code> functions to be updated (i.e. no silent breakage).</p>
<p>This is surprisingly easy to implement with D due to its first-class metaprogramming features, I’ll try my best to be brief with how this all works:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Relatively well omitted</span></p></div><div><p><span>private</span><span> </span><span>mixin template</span><span> </span><span>OneOf</span><span>(</span></p></div><div><p><span>    </span><span>Asn1NodeType</span><span> </span><span>MyType</span><span>,</span></p></div><div><p><span>    </span><span>NodeTypes</span><span>...</span></p></div><div><p><span>)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>private</span><span> </span><span>int</span><span> </span><span>_oneOfIndex</span><span> </span><span>=</span><span> </span><span>-</span><span>1</span><span>;</span></p></div><div><p><span>    </span><span>private</span><span> </span><span>template</span><span> </span><span>oneOfHandlerFuncTuple</span><span>()</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>import</span><span> </span><span>std.meta</span><span> : </span><span>staticMap</span><span>;</span></p></div><div><p><span>        </span><span>alias</span><span> </span><span>ToFuncHandler</span><span>(</span><span>alias</span><span> </span><span>NodeT</span><span>) </span><span>=</span><span> </span><span>Result</span><span> </span><span>delegate</span><span>(</span><span>NodeT</span><span>) </span><span>@nogc</span><span> </span><span>nothrow</span><span>;</span></p></div><div><p><span>        </span><span>alias</span><span> </span><span>oneOfHandlerFuncTuple</span><span> </span><span>=</span><span> </span><span>staticMap</span><span>!(</span><span>ToFuncHandler</span><span>,</span><span> </span><span>NodeTypes</span><span>);</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>Result</span><span> </span><span>match</span><span>(</span><span>scope</span><span> </span><span>oneOfHandlerFuncTuple</span><span>!</span><span>() </span><span>handlers</span><span>)</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>switch</span><span>(</span><span>this</span><span>._oneOfIndex</span><span>)</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>static foreach</span><span>(</span><span>i</span><span>,</span><span> </span><span>NodeT</span><span>;</span><span> </span><span>NodeTypes</span><span>)</span></p></div><div><p><span><span>            </span></span><span>{</span></p></div><div><p><span>                </span><span>case</span><span> </span><span>i</span><span>:</span></p></div><div><p><span>                    </span><span>return</span><span> </span><span>handlers</span><span>[</span><span>i</span><span>](</span><span>this</span><span>.asNode</span><span>!</span><span>NodeT</span><span>);</span></p></div><div><p><span><span>            </span></span><span>}</span></p></div><div><p><span>            </span><span>default</span><span>:</span></p></div><div><p><span>                </span><span>assert(</span><span>false</span><span>,</span><span> </span><span>"bug: oneOfIndex isn't a valid value?"</span><span>)</span><span>;</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>In essence:</p>
<ul>
<li><code>NodeTypes...</code> is the template parameter containing a compile-time tuple of all possible types that this <code>OneOf</code> can store.</li>
<li><code>oneOfHandlerFuncTuple</code> is a template that generates a new compile-time tuple, where each <code>NodeTypes</code> is mapped into a function pointer type.</li>
<li><code>match</code> uses the result of <code>oneOfHandlerFuncTuple</code> as its main parameter. Since this is a compile-time tuple of types it automagically gets expanded into multiple parameters under the hood.</li>
<li><code>static foreach</code> within <code>match</code>’s body allows us to iterate over a compile-time collection (in this case, <code>NodeTypes</code>) and duplicate the foreach’s body for each item. In this case, so we can make a <code>case</code> statement per item in <code>NodeTypes</code>.</li>
</ul>
<p>So:</p>
<ul>
<li>If <code>NodeTypes...</code> is <code>(Node1, Node2)</code>.</li>
<li><code>oneOfHandlerFuncTuple</code> results in <code>(Result delegate(Node1), Result delegate(Node2))</code></li>
<li>And <code>match</code>’s parameters expand into <code>match(scope delegate(Node1) handler_0, scope delegate(Node2) handler_1)</code></li>
</ul>
<p><em>Which means</em> that we could use this example match function like so:</p>
<div><figure><pre data-language="d"><code><div><p><span>ExampleOneOf</span><span> </span><span>node</span><span>;</span></p></div><div><p><span>node.match</span><span>(</span></p></div><div><p><span><span>    </span></span><span>(</span><span>Node1</span><span> </span><span>child</span><span>){ </span><span>return</span><span> </span><span>Result.noError</span><span>; }</span><span>,</span></p></div><div><p><span><span>    </span></span><span>(</span><span>Node2</span><span> </span><span>child</span><span>){ </span><span>return</span><span> </span><span>Result.noError</span><span>; }</span><span>,</span></p></div><div><p><span>);</span></p></div></code></pre></figure></div>
<p>I know that’s a lot to take in especially since I have to be briefer than usual, but TL;DR D makes the hard stuff easy while still being relatively easy on the eyes. I would make a snarky comparison with C++ but literally no one expects C++ metaprogramming to be readable at this point.</p>
<h3 id="d-snark-the-forever-experimental-allocator-package">D Snark: The forever-experimental allocator package</h3>
<p>10 years ago (October 2015) D’s standard library was given an experimental package called <code>std.experimental.allocator</code>. It has a pretty neat but kind of janky way of composing a bunch of allocation building blocks together, in order to “easily” make custom allocators.</p>
<p>I use it for the ASN.1 stuff since it makes it easy to construct and dispose classes within <code>@nogc</code> code, and it looks kind of cool to boot:</p>
<div><figure><pre data-language="d"><code><div><p><span>import</span><span> </span><span>std.experimental.allocator.mallocator</span><span>                        : </span><span>Mallocator</span><span>;</span></p></div><div><p><span>import</span><span> </span><span>std.experimental.allocator.building_blocks.allocator_list</span><span>    : </span><span>AllocatorList</span><span>;</span></p></div><div><p><span>import</span><span> </span><span>std.experimental.allocator.building_blocks.region</span><span>            : </span><span>Region</span><span>;</span></p></div><div><p><span>import</span><span> </span><span>std.experimental.allocator.building_blocks.stats_collector</span><span>   : </span><span>StatsCollector</span><span>,</span><span> </span><span>Stats</span><span> = </span><span>Options</span><span>;</span></p></div><div><p><span>private</span><span> </span><span>alias</span><span> </span><span>NodeAllocator</span><span> </span><span>=</span><span> </span><span>StatsCollector</span><span>!(</span></p></div><div><p><span>    </span><span>AllocatorList</span><span>!(</span></p></div><div><p><span><span>        </span></span><span>(</span><span>n</span><span>) </span><span>=&gt;</span><span> </span><span>Region</span><span>!</span><span>Mallocator</span><span>(</span><span>1024</span><span> </span><span>*</span><span> </span><span>1024</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>Mallocator</span></p></div><div><p><span><span>    </span></span><span>)</span><span>,</span></p></div><div><p><span>    </span><span>Stats.bytesAllocated</span></p></div><div><p><span>);</span></p></div></code></pre></figure></div>
<p>The issue is this package is still experimental 10 years later and I wouldn’t be surprised if it gets removed sooner or later, especially with the Phobos v2 work that’ll hopefully exist in some form before I retire (I’m 26).</p>
<p>:D The sign of someone who loves this damn language is that they can’t help but provide some level of historical snark. I have no further comments, I just miss the days I had hope for D’s future xD</p>
<h3 id="alias-this---a-very-occasionally-useful-feature">alias this - a very occasionally useful feature</h3>
<p>Situation: I need to store IR nodes using a base class rather than a specific concrete implementation class, but I’d still like to limit the potential options without having to go down the SumType route.</p>
<p>Solution: This short but sweet struct (note: this is a different <code>OneOf</code> struct for IR purposes, not AST purposes).</p>
<div><figure><pre data-language="d"><code><div><p><span>private</span><span> </span><span>struct</span><span> </span><span>OneOf</span><span>(</span><span>BaseIrT</span><span> : </span><span>Asn1BaseIr</span><span>,</span><span> </span><span>IrTypes</span><span>...) </span><span>// @suppress(dscanner.suspicious.incomplete_operator_overloading)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>import</span><span> </span><span>std.meta</span><span> : </span><span>anySatisfy</span><span>;</span></p></div><div><p><span>    </span><span>BaseIrT</span><span> </span><span>ir</span><span>;</span></p></div><div><p><span>    </span><span>alias</span><span> </span><span>ir</span><span> </span><span>this</span><span>;</span></p></div><div><p><span>    </span><span>this</span><span>(</span><span>IrT</span><span> : </span><span>BaseIrT</span><span>)(</span><span>IrT</span><span> </span><span>ir</span><span>)</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>enum</span><span> </span><span>ErrorMsg</span><span> </span><span>=</span><span> </span><span>"Invalid IR node was passed in. Is not one of: "</span><span>~</span><span>IrTypes.stringof</span><span>;</span></p></div><div><p><span>        </span><span>static if(is(</span><span>IrT</span><span> </span><span>==</span><span> </span><span>BaseIrT</span><span>))</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>static foreach</span><span>(</span><span>TargetIrT</span><span>;</span><span> </span><span>IrTypes</span><span>)</span></p></div><div><p><span><span>            </span></span><span>{</span></p></div><div><p><span>                </span><span>if</span><span>(</span><span>auto</span><span> </span><span>casted</span><span> </span><span>=</span><span> </span><span>cast(</span><span>TargetIrT</span><span>)</span><span> </span><span>ir</span><span>)</span></p></div><div><p><span><span>                </span></span><span>{</span></p></div><div><p><span>                    </span><span>this</span><span>.ir</span><span> </span><span>=</span><span> </span><span>ir</span><span>;</span></p></div><div><p><span>                    </span><span>return</span><span>;</span></p></div><div><p><span><span>                </span></span><span>}</span></p></div><div><p><span><span>            </span></span><span>}</span></p></div><div><p><span>            </span><span>assert(</span><span>false</span><span>,</span><span> </span><span>ErrorMsg</span><span>)</span><span>;</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span>        </span><span>else</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>enum</span><span> </span><span>isInputT</span><span>(</span><span>T</span><span>) </span><span>=</span><span> </span><span>is(</span><span>T</span><span> </span><span>==</span><span> </span><span>IrT</span><span>)</span><span>;</span></p></div><div><p><span>            </span><span>static assert(</span><span>anySatisfy</span><span>!</span><span>(</span><span>isInputT</span><span>,</span><span> </span><span>IrTypes</span><span>)</span><span>,</span><span> </span><span>ErrorMsg</span><span>)</span><span>;</span></p></div><div><p><span>            </span><span>this</span><span>.ir</span><span> </span><span>=</span><span> </span><span>ir</span><span>;</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>We can initialise this struct like so:</p>
<div><figure><pre data-language="d"><code><div><p><span>alias</span><span> </span><span>ItemT</span><span> </span><span>=</span><span> </span><span>OneOf</span><span>!(</span><span>Asn1BaseIr</span><span>,</span><span> </span><span>Asn1ValueReferenceIr</span><span>,</span><span> </span><span>Asn1TypeReferenceIr</span><span>);</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>ItemT</span><span>(</span><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>null</span><span>); </span><span>// Fine (if we ignore it's null for this example)</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>ItemT</span><span>(</span><span>cast(</span><span>Asn1ImportsIr</span><span>)</span><span>null</span><span>); </span><span>// Not fine - compile-time error since we know the original type already</span></p></div><div><p><span>Asn1BaseIr</span><span> </span><span>ir</span><span> </span><span>=</span><span> </span><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>null</span><span>; </span><span>// Pretend its not null</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>ItemT</span><span>(</span><span>ir</span><span>); </span><span>// Fine - it looks like an Asn1BaseIr so we have to dynamically cast it at runtime to perform the type check, which passes.</span></p></div><div><p><span>Asn1BaseIr</span><span> </span><span>ir</span><span> </span><span>=</span><span> </span><span>cast(</span><span>Asn1ImportsIr</span><span>)</span><span>null</span><span>;</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>ItemT</span><span>(</span><span>ir</span><span>); </span><span>// Runtime error - dynamic casting failed.</span></p></div></code></pre></figure></div>
<p>Now the fun part comes from this weird <code>alias ir this;</code> line. Normally when working with a wrapper struct like this you’d have do something like:</p>
<div><figure><pre data-language="d"><code><div><p><span>ItemT</span><span> </span><span>item</span><span>;</span></p></div><div><p><span>if</span><span>(</span><span>Asn1ValueReferenceIr</span><span> </span><span>casted</span><span> </span><span>=</span><span> </span><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>item.getWrappedIrNode</span><span>())</span></p></div><div><p><span>{ </span><span>/* .. */</span><span> }</span></p></div></code></pre></figure></div>
<p>With <code>alias ir this;</code> anytime we try to perform an operation (e.g. casting; function calls, etc.) that the <code>OneOf</code> struct itself does not support, the compiler will instead try to use it on the <code>OneOf.ir</code> field instead:</p>
<div><figure><pre data-language="d"><code><div><p><span>alias</span><span> </span><span>ItemT</span><span> </span><span>=</span><span> </span><span>OneOf</span><span>!(</span><span>Asn1BaseIr</span><span>,</span><span> </span><span>Asn1ValueReferenceIr</span><span>,</span><span> </span><span>Asn1TypeReferenceIr</span><span>);</span></p></div><div><p><span>auto</span><span> </span><span>item</span><span> </span><span>=</span><span> </span><span>/* ... */</span><span>;</span></p></div><div><p><span>// Since `OneOf` doesn't overload the `opCast`, the following would normally fail.</span></p></div><div><p><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>item</span><span>; </span><span>// -&gt; item.opCast!Asn1ValueReferenceIr wouldn't work since its not overloaded by OneOf.</span></p></div><div><p><span>// The compiler sees the `alias ir this`, and so tries casting that instead.</span></p></div><div><p><span>cast(</span><span>Asn1ValueReferenceIr</span><span>)</span><span>item.ir</span><span>; </span><span>// This now works!</span></p></div></code></pre></figure></div>
<p>It’s a very weird, niche feature which might even get removed or at least deprecated in the future, but it allows for some mild syntax cleanup as shown above.</p>
<h3 id="versionunittest">version(unittest)</h3>
<p>Some of the IR types try to strictly limit the way that user code can query and interact with their data, mainly to help prevent potential memory corruption… at least that was my original, flawed reasoning.</p>
<p>This can be <em>awkward</em> when writing unittests, as sometimes you just need to query a very particular part of a type’s data without having to go through all of its hurdles.</p>
<p>And so by simply slapping <code>version(unittest)</code> onto a funciton definition, you now have an escape hatch that won’t make its way out into real code:</p>
<div><figure><pre data-language="d"><code><div><p><span>// Only compiles when unittests are also compiled.</span></p></div><div><p><span>version(unittest)</span><span> </span><span>IrT</span><span> </span><span>getByName</span><span>(</span><span>IrT</span><span> : </span><span>Asn1ValueIr</span><span>)(</span><span>const</span><span>(</span><span>char</span><span>)[] </span><span>name</span><span>)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>return</span><span> </span><span>cast(</span><span>IrT</span><span>)</span><span>this</span><span>._namedBits</span><span>[</span><span>name</span><span>];</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<h3 id="templates--with--terse-ish-test-harnesses">Templates + with() = terse-ish test harnesses</h3>
<p>There’s a few examples of this within the codebase. Sometimes unittests are for the most part identical except:</p>
<ul>
<li>They need to tweak a few types here and there.</li>
<li>They need an “initialiser” function that returns a different type from other unittests.</li>
<li>They need to change what the function-to-be-tested is (and thus what some of the types being used are).</li>
<li>Sometimes the test case type itself needs to have a few types changed.</li>
<li>Everything else is the same though between unittests - it’s mainly just types getting in the way.</li>
</ul>
<p>It’s one of those things where you kind of just have to use it and do it before you “get it”, so I apologise for the really poor explanation, but this is essentially something you can do with templates.</p>
<p>Here’s one of the templated “test harnesses” I used - this one in particular is for testing the AST -&gt; IR converter functions.</p>
<div><figure><pre data-language="d"><code><div><p><span>private</span><span> </span><span>template</span><span> </span><span>GenericTestHarness</span><span>(</span><span>NodeToIrT</span><span>,</span><span> </span><span>ActualIrT</span><span>,</span><span> </span><span>alias</span><span> </span><span>ParseFunc</span><span>,</span><span> </span><span>alias</span><span> </span><span>Converter</span><span> </span><span>=</span><span> </span><span>asn1AstToIr</span><span>)</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>static</span><span> </span><span>struct</span><span> </span><span>T</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>string</span><span> </span><span>input</span><span>;</span></p></div><div><p><span>        </span><span>Asn1SemanticError</span><span> </span><span>expectedError</span><span>;</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>    </span><span>void</span><span> </span><span>run</span><span>(</span><span>T</span><span>[</span><span>string</span><span>] </span><span>cases</span><span>)</span></p></div><div><p><span><span>    </span></span><span>{</span></p></div><div><p><span>        </span><span>import</span><span> </span><span>std.conv</span><span>   : </span><span>to</span><span>;</span></p></div><div><p><span>        </span><span>import</span><span> </span><span>std.traits</span><span> : </span><span>EnumMembers</span><span>;</span></p></div><div><p><span>        </span><span>foreach</span><span>(</span><span>name</span><span>,</span><span> </span><span>test</span><span>;</span><span> </span><span>cases</span><span>)</span></p></div><div><p><span><span>        </span></span><span>{</span></p></div><div><p><span>            </span><span>try</span></p></div><div><p><span><span>            </span></span><span>{</span></p></div><div><p><span>                </span><span>/* .. */</span></p></div><div><p><span>                </span><span>auto</span><span> </span><span>node</span><span> </span><span>=</span><span> </span><span>ParseFunc</span><span>(</span><span>parser</span><span>);</span></p></div><div><p><span>                </span><span>NodeToIrT</span><span> </span><span>irFromNode</span><span>;</span></p></div><div><p><span>                </span><span>auto</span><span> </span><span>result</span><span> </span><span>=</span><span> </span><span>Converter</span><span>(</span><span>node</span><span>,</span><span> </span><span>irFromNode</span><span>,</span><span> </span><span>context</span><span>,</span><span> </span><span>Asn1NullErrorHandler.instance</span><span>);</span></p></div><div><p><span>                </span><span>/* .. */</span></p></div><div><p><span><span>            </span></span><span>}</span></p></div><div><p><span>            </span><span>catch</span><span>(</span><span>Throwable</span><span> </span><span>err</span><span>) </span><span>// @suppress(dscanner.suspicious.catch_em_all)</span></p></div><div><p><span>                </span><span>assert(</span><span>false</span><span>,</span><span> </span><span>"</span><span>\n</span><span>["</span><span>~</span><span>name</span><span>~</span><span>"]:</span><span>\n</span><span>"</span><span>~</span><span>err.msg</span><span>)</span><span>;</span></p></div><div><p><span><span>        </span></span><span>}</span></p></div><div><p><span><span>    </span></span><span>}</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>It can be used like so:</p>
<div><figure><pre data-language="d"><code><div><p><span>@(</span><span>"Asn1Ir - one off edge cases"</span><span>)</span></p></div><div><p><span>unittest</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>alias</span><span> </span><span>Harness</span><span> </span><span>=</span><span> </span><span>GenericTestHarness</span><span>!(</span><span>Asn1ModuleIr</span><span>,</span><span> </span><span>Asn1ModuleIr</span><span>,</span><span> (</span><span>ref</span><span> </span><span>parser</span><span>){</span></p></div><div><p><span>        </span><span>Asn1ModuleDefinitionNode</span><span> </span><span>node</span><span>;</span></p></div><div><p><span>        </span><span>parser.ModuleDefinition</span><span>(</span><span>node</span><span>).</span><span>resultAssert</span><span>;</span></p></div><div><p><span>        </span><span>return</span><span> </span><span>node</span><span>;</span></p></div><div><p><span><span>    </span></span><span>});</span></p></div><div><p><span>    </span><span>Harness.run</span><span>([</span></p></div><div><p><span>        </span><span>"ensure that default values can lookup type-scoped references"</span><span>: </span><span>Harness.T</span><span>(</span><span>`</span></p></div><div><p><span><span>            </span></span><span>Unittest DEFINITIONS ::= BEGIN</span></p></div><div><p><span><span>                </span></span><span>I ::= INTEGER { v1(0) }</span></p></div><div><p><span><span>                </span></span><span>S ::= SEQUENCE {</span></p></div><div><p><span><span>                    </span></span><span>i I DEFAULT v1</span></p></div><div><p><span><span>                </span></span><span>}</span></p></div><div><p><span><span>            </span></span><span>END</span></p></div><div><p><span><span>        </span></span><span>`</span><span>,</span><span> </span><span>Asn1SemanticError.none</span><span>)</span><span>,</span></p></div><div><p><span><span>    </span></span><span>]);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>One main issue, especially for the larger tests, is that specifying <code>Harness.T</code> (and more minorly <code>Harness.run</code>) can start to make the code look chunky and a bit harder to read.</p>
<p>So by using the magical <code>with()</code> statement, instead of writing <code>Harness.run</code> and <code>Harness.T</code>, we can just write <code>run</code> and <code>T</code> and the compiler will know how to lookup these otherwise missing/undefined symbols:</p>
<div><figure><pre data-language="d"><code><div><p><span>@(</span><span>"Constraints - ensuring value references are handled"</span><span>)</span></p></div><div><p><span>unittest</span></p></div><div><p><span>{</span></p></div><div><p><span>    </span><span>alias</span><span> </span><span>Harness</span><span> </span><span>=</span><span> </span><span>GenericTestHarness</span><span>!(</span><span>Asn1ModuleIr</span><span>,</span><span> </span><span>Asn1ModuleIr</span><span>,</span><span> (</span><span>ref</span><span> </span><span>parser</span><span>){</span></p></div><div><p><span>        </span><span>Asn1ModuleDefinitionNode</span><span> </span><span>node</span><span>;</span></p></div><div><p><span>        </span><span>parser.ModuleDefinition</span><span>(</span><span>node</span><span>).</span><span>resultAssert</span><span>;</span></p></div><div><p><span>        </span><span>return</span><span> </span><span>node</span><span>;</span></p></div><div><p><span><span>    </span></span><span>});</span></p></div><div><p><span>    </span><span>with</span><span>(</span><span>Harness</span><span>) </span><span>run</span><span>([</span></p></div><div><p><span>        </span><span>"BIT STRING - SingleValue"</span><span>: </span><span>T</span><span>(</span><span>`</span></p></div><div><p><span><span>            </span></span><span>Unittest DEFINITIONS ::= BEGIN</span></p></div><div><p><span><span>                </span></span><span>v BIT STRING ::= '01'H</span></p></div><div><p><span><span>                </span></span><span>B ::= BIT STRING (v)</span></p></div><div><p><span><span>                </span></span><span>b B ::= '01'H</span></p></div><div><p><span><span>            </span></span><span>END</span></p></div><div><p><span><span>        </span></span><span>`</span><span>,</span><span> </span><span>Asn1SemanticError.none</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>"BIT STRING - Size - SingleValue"</span><span>: </span><span>T</span><span>(</span><span>`</span></p></div><div><p><span><span>            </span></span><span>Unittest DEFINITIONS ::= BEGIN</span></p></div><div><p><span><span>                </span></span><span>a INTEGER ::= 4</span></p></div><div><p><span><span>                </span></span><span>B ::= BIT STRING (SIZE (a))</span></p></div><div><p><span><span>                </span></span><span>b B ::= '0'H</span></p></div><div><p><span><span>            </span></span><span>END</span></p></div><div><p><span><span>        </span></span><span>`</span><span>,</span><span> </span><span>Asn1SemanticError.none</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>"BIT STRING - Size - ValueRange"</span><span>: </span><span>T</span><span>(</span><span>/* .. */</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>"BOOLEAN - SingleValue"</span><span>: </span><span>T</span><span>(</span><span>/* .. */</span><span>)</span><span>,</span></p></div><div><p><span>        </span><span>/* .. */</span></p></div><div><p><span><span>    </span></span><span>]);</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>Again this is one of those things that on paper sounds really stupid (and impossible to easily describe), but grows on you really fast when you give it a try.</p>
<h2 id="pain-points">Pain points</h2>
<p>While ASN.1’s basic syntax looks pretty easy from an initial glance, that illusion shatters once you start getting into it more deeply.</p>
<h3 id="value-sequence-syntax">Value sequence syntax</h3>
<p>ASN.1 has various separate value forms that start with a left bracket (<code>{</code>), a lot of these forms are ambiguous due to a variety of factors and can only be distinguished with semantic context.</p>
<p>Given that dans1 has a clean split between syntax and semantic analysis, “this does not spark joy” as the kids would say.</p>
<p>I’ll let this comment from the parser code explain itself:</p>
<div><figure><pre data-language="d"><code><div><p><span>// If a left parenthesis shows up directly after any identifier, then it's an OBJECT IDENTIFIER sequence,</span></p></div><div><p><span>// as no other sequence-looking value syntax allows for NameAndNumberForm.</span></p></div><div><p><span>//      { iso-yada(123) }</span></p></div><div><p><span>//      { iso-yada-123 asn1(123) }</span></p></div><div><p><span>//</span></p></div><div><p><span>// If no commas show up and there's only 1 value, then it's ambiguous, so will default to</span></p></div><div><p><span>// a ValueList.</span></p></div><div><p><span>//      { my-integer }</span></p></div><div><p><span>//</span></p></div><div><p><span>// (Values in the form of `a { yada }` are ambiguous between a named Sequence value and a</span></p></div><div><p><span>//  parameterised value)</span></p></div><div><p><span>//</span></p></div><div><p><span>// If no commas show up and there's 1 ambiguous value, then assume it's a NamedValueList.</span></p></div><div><p><span>//      { iso-yada-123 asn1 }</span></p></div><div><p><span>//</span></p></div><div><p><span>// If a comma is found; multiple non-named values exist, and any number</span></p></div><div><p><span>// of ambiguous values exist then it's a ValueList.</span></p></div><div><p><span>//      { my, value }</span></p></div><div><p><span>//      { my, ambiguous {} }</span></p></div><div><p><span>//</span></p></div><div><p><span>// If a comma is found, and only ambiguous values exists, assume it's a NamedValueList.</span></p></div><div><p><span>//      { ambiguous {} }</span></p></div><div><p><span>//      { ambiguous {}, twobiguous {} }</span></p></div><div><p><span>//</span></p></div><div><p><span>// If a comma is found, and any amount of non-ambiguous named values exist, it's a NamedValueList.</span></p></div><div><p><span>//      { ambiguous {}, except this }</span></p></div><div><p><span>//</span></p></div><div><p><span>// DefinedValue allows for a ParameterizedValue, which uses `{}` to define parameters,</span></p></div><div><p><span>// so we need to keep track of whether we're in a parameter list or not and ignore everything inside one.</span></p></div><div><p><span>//      { some { template, params }, here }</span></p></div><div><p><span>//</span></p></div><div><p><span>// This loop also keeps track of how many identifiers show up side-by-side, but it's</span></p></div><div><p><span>// currently (and probably never) needed as a way to sort out ambiguity.</span></p></div><div><p><span>//</span></p></div><div><p><span>// Semantic Analysis will perform the rest of the validation, e.g. sometimes what looks like a</span></p></div><div><p><span>// NamedValueList is also a valid OBJECT IDENTIFIER sequence, so type information will be used to</span></p></div><div><p><span>// clear up ambiguity.</span></p></div></code></pre></figure></div>
<p>:D Fun times.</p>
<h3 id="its-hard-to-find-important-info-in-the-specs">It’s hard to find important info in the specs</h3>
<p>Example: I can’t even remember the exact conditions, but I remember having to debug some generated decoder code since it was failing to decode a specific field. It turned out that this field was under certain “exact conditions” that meant its tag was supposed to be treated as <code>EXPLICIT</code> instead of the module-default <code>IMPLICIT</code>.</p>
<p>I still have <em>no</em> idea where in the spec this behaviour gets mentioned and so I basically had to wing a fix and hope it works going forward.</p>
<p>More generally this feeling and scenario has happened quite a few times - the information is scattered (sometimes across different specs) and is hard to keep track of.</p>
<p>Another example is around module versions. The spec makes absolutely zero mention (that I can see) on how to version modules for non ISO/ITU purposes, and I would greatly appreciate if anyone could help me find this information.</p>
<p>I’d be amazed if there’s a 100% spec compliant implementation out there, even commercially.</p>
<h3 id="you-need-to-implement-constraints-3-separate-times">You need to implement constraints 3 separate times</h3>
<ol>
<li>The first implementation is to type-check constraints, e.g. <code>UTF8String (SIZE ("yagababa"))</code> doesn’t make sense.</li>
<li>The second implementation is to confirm that ASN.1 notation values are correct, e.g. <code>myInt INTEGER (1) ::= 2</code> needs to trigger an error.</li>
<li>The third implementation is to generate runtime checks when you generate code from the ASN.1 notation.</li>
</ol>
<p>It’s tedious and not very fun, but there’s no real way around it.</p>
<p>For a newbie to compiler programming like me I also found it really hard to deal with useful error messages. I ended up running the checks twice: one time to see if there’s even an error at all, and the second time to build up the error string. This is mainly complicated by the existance of UNION and (especially) INTERSECTION constraints.</p>
<h3 id="the-dream-of-immutable-ir-nodes">The dream of immutable IR nodes</h3>
<p>I foolishly made the mistake of believing that once I converted the generic AST nodes into the more specific IR nodes that I wouldn’t have to make any major changes to the underlying data (beyond setting up things like symbol tables).</p>
<p>:D Unfortunately that wonderfully naive thought was quickly crushed as ASN.1 requires the semantic stage to perform certain transformations, certain transformations (e.g. <code>AUTOMATIC TAGS</code>) that ended up/are going to be really annoying due to the way I’ve structured the code.</p>
<p>But that’s future Brad’s problem.</p>
<h3 id="asn1-has-an-all-or-nothing-level-of-complexity">ASN.1 has an all-or-nothing level of complexity</h3>
<p>I am <strong>extremely</strong> thankful that x.509 is an old enough specification that the ASN.1 notation only uses the older syntax of x.680.</p>
<p>The alternative is that you’d <em>need</em> an implementation of the x.681, x.682, and x.683 specs to use any of the newer stuff - this is absolutely non-trivial to implement, and I imagine this is one of the many reasons ASN.1 hasn’t ever really taken off outside of historical and commercialised spaces.</p>
<h3 id="any-defined-by">ANY DEFINED BY</h3>
<p>There is one exception to the above however and that is <code>ANY DEFINED BY</code>.</p>
<p>It’d basically be used to define a type who’s contents could be <em>any other type</em> conditioned by some other field:</p>
<div><figure><pre data-language="txt"><code><div><p><span>Extension ::= SEQUENCE {</span></p></div><div><p><span><span>    </span></span><span>extension-type OBJECT IDENTIFIER,</span></p></div><div><p><span><span>    </span></span><span>extension-value ANY DEFINED BY extension-type</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>You then have to piece together what identifier matches which type. Dasn1 doesn’t actually implement <code>ANY DEFINED BY</code> as-is since even by the 2003 revision it was deprecated.</p>
<p>Instead, for better or for worse, dasn1 has a hacked together intrinsic called <code>Dasn1-Any</code>:</p>
<div><figure><pre data-language="txt"><code><div><p><span>-- Small snippet from https://github.com/Juptune/juptune/blob/master/data/asn1/rfc5280-explicit.asn1</span></p></div><div><p><span>-- (yeah the module version is super messed up, I'll fix it eventually)</span></p></div><div><p><span>IMPORTS</span></p></div><div><p><span><span>      </span></span><span>Dasn1-Any FROM Dasn1-Intrinsics { iso(0) custom(0) dasn1(1) intrinsics(0) }</span></p></div><div><p><span>;</span></p></div><div><p><span>AttributeTypeAndValue   ::= SEQUENCE {</span></p></div><div><p><span><span>        </span></span><span>type    AttributeType,</span></p></div><div><p><span><span>        </span></span><span>value   Dasn1-Any</span></p></div><div><p><span>}</span></p></div></code></pre></figure></div>
<p>This essentially gets lowered down into the decoding code for <code>OCTET STRING</code> but without any sort of tag validation enabled. Unfortunately until/unless I want to implement Information Object Classes, I’m then stuck with having to manually call into the decoding code when I want to turn <code>Dans1-Any</code> fields into their actual types.</p>
<h3 id="i-cant-retain-all-the-information-i-need-to-know">I can’t retain all the information I need to know</h3>
<p>This is more of a personal one.</p>
<p>Between the various different aspects of the ASN.1 compiler, the x.68x specs, the x.690 spec, and all of the other projects building off of this ASN.1 work (x.509 certificate handling, TLS 1.3) I started to feel like a stranger in my own codebase, even just a week after I had last touched it.</p>
<p>It’ll definitely be interesting making future improvements/changes as my at-hand knowledge is constantly dwindling.</p>
<h2 id="writing-a-compiler-is-tedious-work">Writing a compiler is tedious work</h2>
<p>From having to write 20,000 different node visitors for various reasons; to hand-rolling a syntax parser for a boring, drawn out grammar; to needing to write code that looks 95% the same as the last but that last 5% of difference ranges from drudge to mentally taxing, repeated 9000 times.</p>
<p>I think I can finally say I have some proper compiler experience under my belt ;(</p>
<p>But lord knows that each and every milestone has been so extremely rewarding (as long as I try not to think about the fact that almost no one will be using this code).</p>
<p>p.s. Don’t try to make a template-based parser combinator for the entire grammar of a language you don’t personally control unless you want to see symbol names that are 10Mb+ long and explode the binary size by over 100Mb. Don’t ask me how I know.</p>
<p>(I even hard crashed the D compiler I use once, since I guess the error message was literally too long. That endlessly scrolling console…)</p>
<h2 id="conclusion">Conclusion</h2>
<p>A <em>probably</em> wasted year of my life later and there’s still an insane amount of work left on everything relating to this project (and Juptune) in general, but I think it’s making me a better programmer. Maybe.</p>
<p>The dream is that one day I can put “made an ASN.1 compiler + x.509 certificate handler + TLS 1.3 implementation” on my CV and still get told “sorry, you’re a good match except you don’t have 6 months of production experience in Ansible, we can’t hire you” by a recruiter. God I love this industry.</p>
<p>Don’t do ASN.1 kids, you’ll never be the same.</p> <section> <a href="https://bradley.chatha.dev/blog/dlang-propaganda">  </a> </section>  </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Deta Surf – An open source and local-first AI notebook (114 pts)]]></title>
            <link>https://github.com/deta/surf</link>
            <guid>45680937</guid>
            <pubDate>Thu, 23 Oct 2025 12:11:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/deta/surf">https://github.com/deta/surf</a>, See on <a href="https://news.ycombinator.com/item?id=45680937">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text">

<p dir="auto"><h2 tabindex="-1" dir="auto">Deta Surf: Your AI Notebook</h2><a id="user-content-deta-surf-your-ai-notebook" aria-label="Permalink: Deta Surf: Your AI Notebook" href="#deta-surf-your-ai-notebook"></a></p>
<p dir="auto">Deta Surf is an AI notebook that brings all your files and the web directly into your stream of thought.</p>
<p dir="auto">It’s meant for simultaneous research and thinking that minimizes the grunt work: manually searching, opening windows &amp; tabs, scrolling, copying and pasting into a document editor.</p>
<p dir="auto">Surf is primarily built in Svelte, TypeScript and Rust, runs on MacOS, Windows &amp; Linux, stores data locally in open formats, and is open source.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/deta/surf/blob/main/docs/assets/split-note.webp"><img src="https://github.com/deta/surf/raw/main/docs/assets/split-note.webp" alt="split"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Motivation</h2><a id="user-content-motivation" aria-label="Permalink: Motivation" href="#motivation"></a></p>
<p dir="auto">Most applications are focused on a single task, or a single media type: notes, websites, or PDFs. Real thinking requires juggling media across sources to make connections and synthesize ideas. We want to help people think better, across all their media.</p>
<p dir="auto">Surf is built to be personal and open, in service of the user. This means local first data, open data formats, open source, and openness with respect to AI models. <a href="https://deta.surf/motivation" rel="nofollow">Read more</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Checkout the <a href="https://github.com/deta/surf/releases">GitHub releases</a> for the latest stable version of Surf for MacOS, Windows and Linux.</p>
<p dir="auto">You can also download Surf with some managed &amp; additional features (e.g.&nbsp;AI) from the <a href="https://deta.surf/" rel="nofollow">Deta website</a>. That version is subject to different terms.</p>
<p dir="auto">For building from source and local development, see <a href="https://github.com/deta/surf/blob/main/CONTRIBUTING.md">CONTRIBUTING.md</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">TL;DR - Things to try</h2><a id="user-content-tldr---things-to-try" aria-label="Permalink: TL;DR - Things to try" href="#tldr---things-to-try"></a></p>
<ul dir="auto">
<li><em>YouTube Notes</em>: visit a YouTube video and ask a question</li>
<li><em>PDF Notes</em>: open a PDF and ask a question</li>
<li><em>Create an applet</em>: use the "app generation" tool and ask for an app</li>
<li><em>Notes that search the web</em>: use the "web search" tool and ask a question with "search" in it</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Multi-Media Library &amp; Notebooks</h3><a id="user-content-multi-media-library--notebooks" aria-label="Permalink: Multi-Media Library &amp; Notebooks" href="#multi-media-library--notebooks"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/deta/surf/blob/main/docs/assets/readme/notebook-grid.png"><img src="https://github.com/deta/surf/raw/main/docs/assets/readme/notebook-grid.png" alt="notebooks"></a></p>
<p dir="auto">Store almost any media in a private library on your computer, in an open and transparent format.</p>
<ul dir="auto">
<li>Support for local files, sites &amp; links from the web (YouTube, Tweets &amp; more), or create media directly in Surf.</li>
<li>Organize this library into Notebooks.</li>
<li>Open and use much of your library offline.</li>
<li>Use your library to power Surf’s AI features.</li>
</ul>
<p dir="auto">Surf's library is built on a local storage engine called SFFS (Surf Flat File System), which stores data in open and transparent formats.</p>
<p dir="auto"><a href="https://github.com/deta/surf/blob/main/docs/LIBRARY.md">Details on the library</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Smart Notes</h3><a id="user-content-smart-notes" aria-label="Permalink: Smart Notes" href="#smart-notes"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/deta/surf/blob/main/docs/assets/readme/smart-notes.png"><img src="https://github.com/deta/surf/raw/main/docs/assets/readme/smart-notes.png" alt="smart-notes"></a></p>
<p dir="auto">Explore and think across your digital stuff without opening up a bunch of windows, clicking, scrolling and copying &amp; pasting into your document (or chatbot).</p>
<ul dir="auto">
<li><code>@-mention</code> and auto-generate from any tab, website or any resource in your <a href="https://github.com/deta/surf/blob/main/docs/LIBRARY.md">library</a>.</li>
<li>Trigger <a href="https://github.com/deta/surf/blob/main/docs/SMART_NOTES.md#web-search">web searches</a> to do research, and bring the results back in your notes.</li>
<li>Integrated <a href="https://github.com/deta/surf/blob/main/docs/SMART_NOTES.md#citations">citations</a> deeplinked to original sources, whether a section on a webpage, a timestamp in a video, or a page in a PDF.</li>
<li>Generate interactive applications without writing code using <a href="https://github.com/deta/surf/blob/main/docs/Surflets.md">Surflets</a>.</li>
<li>Paste in images, tables or data from other applications and have Surf understand and incorporate them.</li>
<li>Use rich formating, code blocks, to-do lists and more in your notes.</li>
</ul>
<p dir="auto"><a href="https://github.com/deta/surf/blob/main/docs/SMART_NOTES.md">Read more</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Tabs, Split View &amp; Sidebar</h3><a id="user-content-tabs-split-view--sidebar" aria-label="Permalink: Tabs, Split View &amp; Sidebar" href="#tabs-split-view--sidebar"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/deta/surf/blob/main/docs/assets/another-split.webp"><img src="https://github.com/deta/surf/raw/main/docs/assets/another-split.webp" alt="split"></a></p>
<p dir="auto">Surf is built around tabs, split view and a sidebar for easy navigation.</p>
<ul dir="auto">
<li>Open local notes, files or web pages in tabs.</li>
<li>Split view allows you to view and interact with multiple resources side by side.</li>
<li>The sidebar provides quick access to your Notebooks &amp; notes.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Surflets (App Generation)</h3><a id="user-content-surflets-app-generation" aria-label="Permalink: Surflets (App Generation)" href="#surflets-app-generation"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/deta/surf/blob/main/docs/assets/readme/surflets.png"><img src="https://github.com/deta/surf/raw/main/docs/assets/readme/surflets.png" alt="surflets"></a></p>
<p dir="auto">Surf can code interactive applets to help you visualize, understand or explore concepts or data that are aided with code.</p>
<p dir="auto"><a href="https://github.com/deta/surf/blob/main/docs/SURFLETS.md">Read more</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">AI</h3><a id="user-content-ai" aria-label="Permalink: AI" href="#ai"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/deta/surf/blob/main/docs/assets/readme/models.png"><img src="https://github.com/deta/surf/raw/main/docs/assets/readme/models.png" alt="models.png"></a></p>
<p dir="auto"><a href="https://github.com/deta/surf/blob/main/docs/SMART_NOTES.md">Surf’s notes</a> and <a href="https://github.com/deta/surf/blob/main/docs/SURFLETS.md">Surflets</a> are powered by large language models of your choice.</p>
<ul dir="auto">
<li>Bring your own key for popular models</li>
<li>Add a cloud model</li>
<li>Use Local Language Models</li>
</ul>
<p dir="auto"><a href="https://github.com/deta/surf/blob/main/docs/AI_MODELS.md">Read more</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Shortcuts</h3><a id="user-content-shortcuts" aria-label="Permalink: Shortcuts" href="#shortcuts"></a></p>
<p dir="auto">Find the most common shortcuts <a href="https://github.com/deta/surf/blob/main/docs/SHORTCUTS.md">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Security</h2><a id="user-content-security" aria-label="Permalink: Security" href="#security"></a></p>
<p dir="auto"><em>To report a security concern, please see</em> <a href="https://github.com/deta/surf/security/policy">https://github.com/deta/surf/security/policy</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">See <a href="https://github.com/deta/surf/blob/main/CONTRIBUTING.md">CONTRIBUTING.md</a> for details on contributing to the project and an overview of the codebase.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Code of Conduct</h2><a id="user-content-code-of-conduct" aria-label="Permalink: Code of Conduct" href="#code-of-conduct"></a></p>
<p dir="auto">See <a href="https://github.com/deta/surf/blob/main/CODE_OF_CONDUCT.md">CODE_OF_CONDUCT.md</a> for details on our code of conduct.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">The source code for this project is licensed under the Apache 2.0 license, with the following exceptions:</p>
<ol dir="auto">
<li>Our patch for the @ghostery/adblocker-electron package is licensed under the Mozilla Public License 2.0 (MPL-2.0), consistent with the upstream project's licensing.</li>
<li>Select files may contain their own specific license headers that override the default license.</li>
</ol>
<p dir="auto">Unless otherwise specified in the file or directory, all code defaults to the Apache 2.0 license.</p>
<p dir="auto">See <a href="https://github.com/deta/surf/blob/main/LICENSE">LICENSE</a> for more details about the Apache 2.0 license.</p>
<p dir="auto"><strong>Note:</strong> The Deta name and logos are trademarks of Deta GmbH and are <strong>not</strong> covered by the Apache 2.0 license.</p>
<p dir="auto">Deta GmbH is a commercial open source company. Surf is designed to operate as open source software without needing Deta's servers. Deta GmbH also offers a modified version of Surf (which integrates with Deta's servers) and is subject to separate terms and conditions. This version of Surf can be downloaded from the <a href="https://deta.surf/" rel="nofollow">Deta website</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgements</h2><a id="user-content-acknowledgements" aria-label="Permalink: Acknowledgements" href="#acknowledgements"></a></p>
<p dir="auto">This project makes use of the following open source packages (not a comprehensive list):</p>
<ul dir="auto">
<li><a href="https://www.electronjs.org/" rel="nofollow">Electron</a></li>
<li><a href="https://tiptap.dev/" rel="nofollow">Tiptap</a></li>
<li><a href="https://svelte.dev/" rel="nofollow">Svelte</a></li>
<li><a href="https://www.rust-lang.org/" rel="nofollow">Rust</a></li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Game Theory of How Algorithms Can Drive Up Prices (171 pts)]]></title>
            <link>https://www.quantamagazine.org/the-game-theory-of-how-algorithms-can-drive-up-prices-20251022/</link>
            <guid>45680695</guid>
            <pubDate>Thu, 23 Oct 2025 11:38:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.quantamagazine.org/the-game-theory-of-how-algorithms-can-drive-up-prices-20251022/">https://www.quantamagazine.org/the-game-theory-of-how-algorithms-can-drive-up-prices-20251022/</a>, See on <a href="https://news.ycombinator.com/item?id=45680695">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-role="selectable">
    <p>Imagine a town with two widget merchants. Customers prefer cheaper widgets, so the merchants must compete to set the lowest price. Unhappy with their meager profits, they meet one night in a smoke-filled tavern to discuss a secret plan: If they raise prices together instead of competing, they can both make more money. But that kind of intentional price-fixing, called collusion, has long been illegal. The widget merchants decide not to risk it, and everyone else gets to enjoy cheap widgets.</p>
<p>For well over a century, U.S. law has followed this basic template: Ban those backroom deals, and fair prices should be maintained. These days, it’s not so simple. Across broad swaths of the economy, sellers increasingly rely on computer programs called learning algorithms, which repeatedly adjust prices in response to new data about the state of the market. These are often much simpler than the “deep learning” algorithms that power modern artificial intelligence, but they can still be prone to unexpected behavior.</p>
<p>So how can regulators ensure that algorithms set fair prices? Their traditional approach won’t work, as it relies on finding explicit collusion. “The algorithms definitely are not having drinks with each other,” said <a href="https://highlights.cis.upenn.edu/aaron-roth/">Aaron Roth</a>, a computer scientist at the University of Pennsylvania.</p>
<p>Yet a <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3304991">widely cited 2019 paper</a> showed that algorithms could learn to collude tacitly, even when they weren’t programmed to do so. A team of researchers pitted two copies of a simple learning algorithm against each other in a simulated market, then let them explore different strategies for increasing their profits. Over time, each algorithm learned through trial and error to retaliate when the other cut prices — dropping its own price by some huge, disproportionate amount. The end result was high prices, backed up by mutual threat of a price war.</p>

<p>Implicit threats like this also underpin many cases of human collusion. So if you want to guarantee fair prices, why not just require sellers to use algorithms that are inherently incapable of expressing threats?</p>
<p>In <a href="https://arxiv.org/abs/2409.03956">a recent paper</a>, Roth and four other computer scientists showed why this may not be enough. They proved that even seemingly benign algorithms that optimize for their own profit can sometimes yield bad outcomes for buyers. “You can still get high prices in ways that kind of look reasonable from the outside,” said <a href="https://www.seas.upenn.edu/~ncollina/">Natalie Collina</a>, a graduate student working with Roth who co-authored the new study.</p>
<p>Researchers don’t all agree on the implications of the finding — a lot hinges on how you define “reasonable.” But it reveals how subtle the questions around algorithmic pricing can get, and how hard it may be to regulate.</p>
<p>“Without some notion of a threat or an agreement, it’s very hard for a regulator to come in and say, ‘These prices feel wrong,’” said <a href="https://sites.google.com/view/malleshpai/">Mallesh Pai</a>, an economist at Rice University. “That’s one reason why I think this paper is important.”</p>
<h2><strong>No Regrets</strong></h2>
<p>The recent paper studies algorithmic pricing through the lens of game theory, an interdisciplinary field at the border of economics and computer science that analyzes the mathematics of strategic competitions. It’s one way to explore the failures of pricing algorithms in a controlled setting.</p>
<p>“What we’re trying to do is create collusion in the lab,” said <a href="https://joeharrington5201922.github.io/">Joseph Harrington</a>, a University of Pennsylvania economist who wrote an <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3037818">influential review paper</a> on regulating algorithmic collusion and was not involved in the new research. “Once we do so, we want to figure out how to destroy collusion.”</p>

<p>To understand the key ideas, it helps to start with the simple game of rock-paper-scissors. A learning algorithm, in this context, can be any strategy that a player uses to choose a move in each round based on data from previous rounds. Players might try out different strategies over the course of the game. But if they’re playing well, they’ll ultimately converge to a state that game theorists call equilibrium. In equilibrium, each player’s strategy is the best possible response to the other’s strategy, so neither player has an incentive to change.</p>
<p>In rock-paper-scissors, the ideal strategy is simple: You should play a random move each round, choosing all three possibilities equally often. Learning algorithms shine if one player takes a different approach. In that case, choosing moves based on previous rounds can help the other player win more often than if they just played randomly.</p>
<p>Suppose, for instance, that after many rounds you realize that your opponent, a geologist, chose rock more than 50% of the time. If you’d played paper every round, you would have won more often. Game theorists refer to this painful realization as regret.</p>
<p>Researchers have devised simple learning algorithms that are always guaranteed to leave you with zero regret. Slightly more sophisticated learning algorithms called “no-swap-regret” algorithms also guarantee that whatever your opponent did, you couldn’t have done better by swapping all instances of any move with any other move (say, by playing paper every time you actually played scissors). In 2000, game theorists <a href="https://www.jstor.org/stable/2999445">proved</a> that if you pit two no-swap-regret algorithms against each other in any game, they’ll end up in a specific kind of equilibrium — one that would be the optimal equilibrium if they only played a single round. That’s an attractive property, because single-round games are much simpler than multi-round ones. In particular, threats don’t work because players can’t follow through.</p>

<p>In a <a href="https://dl.acm.org/doi/10.1145/3614407.3643706">2024 paper</a>, <a href="https://sites.northwestern.edu/hartline/">Jason Hartline</a>, a computer scientist at Northwestern University, and two graduate students translated the classic results from the 2000 paper to a model of a competitive market, where players can set new prices every round. In that context, the results implied that dueling no-swap-regret algorithms would always end up with competitive prices when they reached equilibrium. Collusion was impossible.</p>
<p>However, no-swap-regret algorithms aren’t the only pricing game strategies in the world of online marketplaces. So what happens when a no-swap-regret algorithm faces a different benign-looking opponent?</p>
<h2><strong>The Price Is Wrong</strong></h2>
<p>According to game theorists, the best strategy to play against a no-swap-regret algorithm is simple: Start with a specific probability for each possible move, and then choose one move at random every round, no matter what your opponent does. The ideal assignment of probabilities for this “nonresponsive” approach depends on the specific game you’re playing.</p>
<p>In the summer of 2024, Collina and her colleague <a href="https://www.seas.upenn.edu/~eshwar/">Eshwar Arunachaleswaran</a> set out to find those optimal probabilities for a two-player pricing game. They found that the best strategy assigned strikingly high probabilities to very high prices, along with lower probabilities for a wide range of lower prices. If you’re playing against a no-swap-regret algorithm, this strange strategy will maximize your profit. “To me, it was a complete surprise,” Arunachaleswaran said.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SpaceX disables 2,500 Starlink terminals allegedly used by Asian scam centers (224 pts)]]></title>
            <link>https://arstechnica.com/tech-policy/2025/10/starlink-blocks-2500-dishes-allegedly-used-by-myanmars-notorious-scam-centers/</link>
            <guid>45680547</guid>
            <pubDate>Thu, 23 Oct 2025 11:15:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/tech-policy/2025/10/starlink-blocks-2500-dishes-allegedly-used-by-myanmars-notorious-scam-centers/">https://arstechnica.com/tech-policy/2025/10/starlink-blocks-2500-dishes-allegedly-used-by-myanmars-notorious-scam-centers/</a>, See on <a href="https://news.ycombinator.com/item?id=45680547">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          
          
<p>The construction occurred despite a previous crackdown that resulted in the release of “around 7,000 people from a brutal call center-like system that runs on greed, human trafficking and violence,” the AFP wrote. “Freed workers from Asia, Africa and elsewhere showed AFP journalists the scars and bruises of beatings they said were inflicted by their bosses. They said they had been forced to work around the clock, trawling for victims for a plethora of phone and Internet scams.”</p>
<p>Another AFP <a href="https://www.france24.com/en/live-news/20251020-myanmar-junta-says-seized-30-starlink-receivers-in-scam-centre-raid">article</a> said “the border region fraud factories are typically run by Chinese criminal syndicates, analysts say, often overseen by Myanmar militias given tacit backing by the Myanmar junta in return for guaranteeing security.”</p>
<p>The Associated Press wrote that “Myanmar is notorious for hosting cyberscam operations responsible for bilking people all over the world. These usually involve gaining victims’ confidence online with romantic ploys and bogus investment pitches. The centers are infamous for recruiting workers from other countries under false pretenses, promising them legitimate jobs and then holding them captive and forcing them to carry out criminal activities.”</p>
<h2>Senator urged Musk to take action</h2>
<p>An <a href="https://www.unodc.org/roseap/uploads/documents/Publications/2024/TOC_Convergence_Report_2024.pdf">October 2024 report</a> by the United Nations Office on Drugs and Crime described the use of Starlink in fraud operations. About 80 “Starlink satellite dishes linked to cyber-enabled fraud operations” were seized between April and June 2024 in Myanmar and Thailand, the report said. Starlink is prohibited in both countries.</p>
<p>“Despite Starlink use being strictly monitored and, in some cases, restricted through geofencing, organized crime groups appear to have found ways around existing security protocols in order to access the remote high-speed Internet connectivity made possible by this portable technology,” the report said.</p>
<p>In July this year, US Sen. Maggie Hassan (D-NH) urged SpaceX CEO Elon Musk to prevent criminals from using Starlink for scam operations that target Americans.</p>
<p>“While SpaceX has stated that it investigates and deactivates Starlink devices in various contexts, it seemingly has not publicly acknowledged the use of Starlink for scams originating in Southeast Asia—or publicly discussed actions the company has taken in response,” Hassan wrote in a <a href="https://www.hassan.senate.gov/news/press-releases/senator-hassan-urges-elon-musk-to-block-starlink-access-for-transnational-scammers">letter to Musk</a>. “Scam networks in Myanmar, Thailand, Cambodia, and Laos, however, have apparently continued to use Starlink despite service rules permitting SpaceX to terminate access for fraudulent activity.”</p>
<p>Hassan is the top Democrat on the US Congress Joint Economic Committee, which is reportedly investigating the use of Starlink in the scam operations. Dreyer said last night that SpaceX is committed to “detecting and preventing misuse by bad actors.”</p>


          
                  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PyTorch Monarch (304 pts)]]></title>
            <link>https://pytorch.org/blog/introducing-pytorch-monarch/</link>
            <guid>45680237</guid>
            <pubDate>Thu, 23 Oct 2025 10:15:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pytorch.org/blog/introducing-pytorch-monarch/">https://pytorch.org/blog/introducing-pytorch-monarch/</a>, See on <a href="https://news.ycombinator.com/item?id=45680237">Hacker News</a></p>
<div id="readability-page-1" class="page"><div role="main">

            
<article id="post-5523">
  
  <div data-hide-featured-media="1"><p><span>We now live in a world where ML workflows (pre-training, post training, etc) are heterogeneous, must contend with hardware failures, are increasingly asynchronous and highly dynamic. Traditionally, PyTorch has relied on an HPC-style&nbsp; multi-controller model, where multiple copies of the same script are launched across different machines, each running its own instance of the application (often referred to as SPMD). ML workflows are becoming more complex: pre-training might combine advanced parallelism with asynchrony and partial failure; while RL models used in post-training require a high degree of dynamism with complex feedback loops.&nbsp; While the logic of these workflows may be relatively straightforward, they are notoriously difficult to implement well in a multi-controller system, where each node must decide how to act based on only a local view of the workflow’s state.</span></p>
<p><img fetchpriority="high" decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/1-2.png" alt="" width="1600" height="680" srcset="https://pytorch.org/wp-content/uploads/2025/10/1-2.png 1600w, https://pytorch.org/wp-content/uploads/2025/10/1-2-300x128.png 300w, https://pytorch.org/wp-content/uploads/2025/10/1-2-1024x435.png 1024w" sizes="(max-width: 1600px) 100vw, 1600px"></p>
<p><span>We believe that the long-term sustainable way to address this is through a </span><i><span>single controller</span></i><span> programming model, in which a single script orchestrates all distributed resources, making them feel almost local. This architectural shift simplifies distributed programming—your code looks and feels like a single-machine Python program, but can scale across thousands of GPUs. You can directly use Pythonic constructs—classes, functions, loops, tasks, futures—to express complex distributed algorithms.</span></p>
<p><span>We’re excited to introduce </span><b>Monarch</b><span>, a distributed programming framework that brings the simplicity of single-machine PyTorch to entire clusters.</span></p>
<p><span>Monarch lets you program distributed systems the way you’d program a single machine, hiding the complexity of distributed computing:</span></p>
<ol>
<li aria-level="1"><b>Program clusters like arrays.</b><span> Monarch organizes hosts, processes, and actors into scalable </span><i><span>meshes</span></i><span> that you can manipulate directly. You can operate on entire meshes (or slices of them) with simple APIs—Monarch handles the distribution and vectorization automatically, so you can think in terms of what you want to compute, not where the code runs.&nbsp;</span></li>
<li aria-level="1"><b>Progressive fault handling.</b><span> With Monarch, you write your code as if nothing fails. When something does fail, Monarch fails fast by default—stopping the whole program, just like an uncaught exception in a simple local script. Later, you can progressively add fine-grained fault handling exactly where you need it, catching and recovering from failures just like you’d catch exceptions.</span></li>
<li aria-level="1"><b>Separate control from data.</b><span> Monarch splits control plane (messaging) from data plane (RDMA transfers), enabling direct GPU-to-GPU memory transfers across your cluster. Monarch lets you send commands through one path, while moving data through another, optimized for what each does best.</span></li>
<li aria-level="1"><b>Distributed tensors that feel local.</b><span> Monarch integrates seamlessly with PyTorch to provide tensors that are sharded across clusters of GPUs. Monarch tensor operations look local but are executed across distributed large clusters, with Monarch handling the complexity of coordinating across thousands of GPUs.</span></li>
</ol>
<h3><span>Programming Model</span></h3>
<h4><span>Key APIs: Process and Actor Meshes</span></h4>
<p><span>Monarch organizes resources into multidimensional arrays, or </span><b>meshes</b><span>. A </span><b>process mesh</b><span> is an array of processes spread across many hosts; an </span><b>actor mesh</b><span> is an array of actors, each running inside a separate process. Like array programming in NumPy or PyTorch, meshes make it simple to dispatch operations efficiently across large systems.</span></p>
<p><span>At launch, Monarch supports process meshes over GPU clusters—typically one process per GPU—onto which you can spawn actors into actor meshes. For local development, the same meshes can also run on a local development server.&nbsp;</span></p>
<h4><span>Advanced APIs: Tensor Engine and RDMA Buffer</span></h4>
<p><span>Monarch’s </span><i><span>tensor engine</span></i><span> brings distributed tensors to process meshes. It lets you write PyTorch programs as if the entire cluster of GPUs were attached to the machine running the script. For bulk data movement, Monarch also provides an RDMA buffer API, enabling direct, high-throughput transfers between processes on supported NICs.</span></p>
<p><a href="https://meta-pytorch.org/monarch/generated/examples/getting_started.html"><span>Extensive details</span></a><span> and </span><a href="https://meta-pytorch.org/monarch/generated/examples/index.html"><span>more detailed examples</span></a><span> can be found on our </span><a href="https://meta-pytorch.org/monarch/index.html"><span>GitHub page.</span></a></p>
<h4><span>A Simple Example</span></h4>
<p><span>Monarch code imperatively describes how to create processes and actors using a simple Python API:</span></p>
<pre><span>from</span> monarch.actor <span>import</span> Actor, endpoint, this_host

procs = this_host().spawn_procs({<span>"gpus"</span>: <span>8</span>})

<span># define an actor that has one method</span>
<span>class</span> Example(Actor):
&nbsp;&nbsp;&nbsp;@endpoint
&nbsp;&nbsp;&nbsp;<span>def</span> say_hello(self, txt):
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span> <span>f"hello {txt}</span>"

<span># spawn the actors</span>
actors = procs.spawn("actors", Example)

# <span>have them say hello</span>
hello_future = actors.say_hello.call("world")

<span># print out the results</span>
<span>print</span>(hello_future.get())

</pre>
<p><span>In the above example, we define an Actor called “Example” that is deployed on 8 GPUs on the local host. The controller then invokes this example across the host and waits for their response. The actors can expose a variety of interfaces.&nbsp;</span></p>
<h4><span>Slicing Meshes</span></h4>
<p><span>We express broadcasted communication by organizing actors into a Mesh – a multidimensional container with named dimensions. For instance, a cluster might have dimensions {“hosts”: 32, “gpus”: 8}. Dimension names are normally things like “hosts”, indexing across the hosts in a cluster, or “gpus”, indexing across things in a machine.</span></p>
<pre><span>from</span> <span>monarch.actor</span> <span>import</span> <span>Actor,</span> <span>endpoint,</span> <span>this_host</span>

<span>procs</span> <span>=</span> <span>this_host().spawn_procs({</span><span>"gpus"</span><span>:</span> <span>8</span><span>})</span>

<span># define an actor that has two methods</span>
<span>class</span> <span>Example(Actor):</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>@endpoint</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>def</span> <span>say_hello(self,</span> <span>txt):</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span> <span><span>f"hello {txt}</span>"</span>

<span>&nbsp;&nbsp;&nbsp;</span><span>@endpoint</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>def</span> <span>say_bye(self,</span> <span>txt):</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span> <span><span>f"goodbye {txt}</span>"</span>

<span># spawn the actors</span>
<span>actors</span> <span>=</span> <span>procs.spawn(</span><span>"actors"</span><span>,</span> <span>Example)</span>

<span># have half of them say hello</span>
<span>hello_fut</span> <span>=</span> <span>actors.</span><span>slice</span><span>(gpus=</span><span>slice</span><span>(</span><span>0</span><span>,</span><span>4</span><span>)).say_hello.call(</span><span>"world"</span><span>)</span>

<span># the other half say good bye</span>
<span>bye_fut</span> <span>=</span> <span>actors.</span><span>slice</span><span>(gpus=</span><span>slice</span><span>(</span><span>4</span><span>,</span><span>8</span><span>)).say_bye.call(</span><span>"world"</span><span>)</span>

<span>print</span><span>(hello_fut.get())</span>
<span>print</span><span>(bye_fut.get())

</span></pre>
<h4><span>Fault Recovery</span></h4>
<p><span>Users can express distributed programs that can error through pythonic try, except blocks. Complex fault detection and fault recovery schemes can be built on top of these primitives. The following showcases handling a simple runtime Exception in a remote actor.</span></p>
<pre><span>from</span> <span>monarch.actor</span> <span>import</span> <span>Actor,</span> <span>endpoint,</span> <span>this_host</span>

<span>procs</span> <span>=</span> <span>this_host().spawn_procs({</span><span>"gpus"</span><span>:</span> <span>8</span><span>})</span>

<span>class</span> <span>Example(Actor):</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>@endpoint</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>def</span> <span>say_hello(self,</span> <span>txt):</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span> <span>f"hello {txt}"</span>

<span>&nbsp;&nbsp;&nbsp;</span><span>@endpoint</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>def</span> <span>say_bye(self,</span> <span>txt):</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>raise</span> <span>Exception(</span><span>"saying bye is hard"</span><span>)</span>

<span>actors</span> <span>=</span> <span>procs.spawn(</span><span>"actors"</span><span>,</span> <span>Example)</span>
<span>hello_fut</span> <span>=</span> <span>actors.</span><span>slice</span><span>(gpus=</span><span>slice</span><span>(</span><span>0</span><span>,</span><span>4</span><span>)).say_hello.call(</span><span>"world"</span><span>)</span>
<span>bye_fut</span> <span>=</span> <span>actors.</span><span>slice</span><span>(gpus=</span><span>slice</span><span>(</span><span>4</span><span>,</span><span>8</span><span>)).say_bye.call(</span><span>"world"</span><span>)</span>

<span>try</span><span>:</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(hello_fut.get())</span>
<span>except</span><span>:</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>"couldn't say hello"</span><span>)</span>

<span>try</span><span>:</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(bye_fut.get())</span>
<span>except</span> <span>Exception:</span>
<span>&nbsp;&nbsp;&nbsp;</span><span>print</span><span>(</span><span>"got an exception saying bye"</span><span>)

</span></pre>
<p><span>See “Case Study 2: Fault Tolerance in Large Scale Pre Training” for a more realistic use case.</span></p>
<h2><span>The Monarch Backend</span></h2>
<p><span>Monarch is split into a Python-based </span><i><span>frontend</span></i><span>, and a backend implemented in Rust. Python is the lingua franca of machine learning, and our Python frontend APIs allow users to seamlessly integrate with existing code and libraries (like PyTorch!), and to use Monarch with interactive computing tools like Jupyter notebooks. Our Rust-based backend facilitates our performance, scale, and robustness&nbsp; — we amply use Rust’s </span><i><span>fearless concurrency</span></i><span> in Monarch’s implementation.</span></p>
<h3><span>Hyperactor and hyperactor_mesh</span></h3>
<p><span>At the bottom of the stack is a Rust-based actor framework called </span><a href="https://github.com/meta-pytorch/monarch/tree/main/hyperactor"><i><span>hyperactor</span></i></a><span>. Hyperactor is a low-level distributed actor system, focused on performant message passing and robust supervision. </span><i><span>hyperactor_mesh</span></i><span> is built on top of hyperactor, and combines its various components into an efficient “vectorized” actor implementation. Hyperactor_mesh is oriented towards providing actor operations cheaply over large </span><i><span>meshes</span></i><span> of actors.</span></p>
<p><span>Monarch’s core Python APIs, in turn, are fairly thin wrappers around hyperactor_mesh.</span></p>
<h3><span>Scalable messaging</span></h3>
<p><span>Everything in Monarch relies on </span><i><span>scalable messaging</span></i><span>: the core APIs supporting </span><i><span>casting</span></i><span> messages to large meshes of actors. Hyperactor achieves this through two mechanisms: multicast trees and multipart messaging.</span></p>
<p><span>First, in order to support multicasting, Hyperactor sets up multicast trees to distribute messages. When a message is cast, it is first sent to some initial nodes, which then forward copies of the message to a set of its children, and so on, until the message has been fully distributed throughout the mesh. This lets us avoid single-host bottlenecks, effectively using the whole mesh as a distributed cluster for message forwarding. (Cite scalability numbers here.)</span></p>
<p><span>Second, we ensure that the control plane is never in the critical path of data delivery. For example, we use multipart messaging to avoid copying, to enable sharing data across high-fanout sends (such as those that occur in our multicast trees), and materialize into efficient, vectorized writes managed by the OS.</span></p>
<h2><span>Case Studies</span></h2>
<p><span>We believe that this general purpose API and its native integration with PyTorch will unlock the next generation of AI applications at scale and the more complex orchestration requirements that they present.&nbsp;</span></p>
<h3><span>Case Study 1: Reinforcement Learning</span></h3>
<p><span>Reinforcement learning has been critical to the current generation of frontier models. RL enables models to do deep research, perform tasks in an environment and solve challenging problems such as math and code. For a deeper dive, we recommend this </span><a href="https://pytorch.org/blog/a-primer-on-llm-post-training/?ajs_aid=57910bf1-d592-4619-a7d5-295ab7d39433"><span>post</span></a><span> for a deeper dive into the topics.&nbsp;</span></p>
<p><span>In order to train a reasoning model (see figure below), generator processes produce prompts from the reasoning model specializing in a specific domain (say, programming code generation). The generator uses these prompts (an incomplete coding problem statement) to derive a set of solutions or trajectories (executable code in this example) often interacting with the world through tools (compiler) and environments. Reward pipelines evaluate these solutions and come up with scores. These scores and rewards are used to train the same model whose weights are then transferred back to the systems that generated the prompt responses.</span></p>
<p><span>This constitutes a single training loop! As illustrated in the figure below, this is effectively a real-time pipeline of a number of heterogeneous computations </span><b><i>within a training loop</i></b><span> that may have to be orchestrated and scaled individually.</span></p>
<p><span><img decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/unnamed-2.png" alt="" width="1600" height="985" srcset="https://pytorch.org/wp-content/uploads/2025/10/unnamed-2.png 1600w, https://pytorch.org/wp-content/uploads/2025/10/unnamed-2-300x185.png 300w, https://pytorch.org/wp-content/uploads/2025/10/unnamed-2-1024x630.png 1024w" sizes="(max-width: 1600px) 100vw, 1600px"></span></p>
<p><span>When implementing the RL example above in Monarch, each component — generator, trainer, inference engine, reward pipeline — might be represented by a mesh: a mesh of generators, a mesh of trainers, a mesh of inference nodes, a mesh of reward pipelines. (The figure above shows a simplistic example with only two meshes: generator and trainer).</span></p>
<p><span>The training script then uses these meshes to orchestrate the overall flow of the job: telling the generator mesh to start working from a new batch of prompts, passing the data to the training mesh when they are done, and updating the inference mesh when a new model snapshot is ready. The orchestrator is written as an ordinary Python program, calling methods on meshes and passing data between them. Because Monarch supports remote memory transfers (RDMA) natively, the actual data is transferred directly between members of meshes (just like you might copy a tensor from one GPU to another), enabling efficient and scalable workflows.</span></p>
<h4><span>VERL</span></h4>
<p><span>Volcano Engine Reinforcement Learning (</span><a href="https://github.com/volcengine/verl"><span>VERL</span></a><span>) is a widely used Reinforcement Learning framework in the industry today.&nbsp;&nbsp;</span></p>
<p><span>We integrated Monarch with VERL as a proof-of-concept and post-trained the </span><a href="https://huggingface.co/open-r1/Qwen2.5-Math-7B-RoPE-300k"><span>Qwen-2.5-7B math model</span></a><span> using GRPO on a curated math dataset and evaluated it on the AIME 2024 benchmark. We trained for 500+ training steps on H200 GPUs using </span><a href="https://github.com/NVIDIA/Megatron-LM"><span>Megatron-LM</span></a><span> scaling progressively from 16, 64, 1024 to 2048 GPUs. The runs were stable and yielded good numerical parity with existing options, demonstrating that Monarch can orchestrate existing RL frameworks.&nbsp;</span></p>
<p><span>We are actively working on open-sourcing this integration to allow future users to evaluate Monarch as an option in their VERL jobs.</span></p>
<p><img decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/3-3.png" alt="" width="984" height="584" srcset="https://pytorch.org/wp-content/uploads/2025/10/3-3.png 984w, https://pytorch.org/wp-content/uploads/2025/10/3-3-300x178.png 300w" sizes="(max-width: 984px) 100vw, 984px"></p>
<h4><span>TorchForge</span></h4>
<p><span>TorchForge represents a different approach: a pytorch native RL framework designed from the ground up with Monarch primitives.</span></p>
<p><span>TorchForge’s goal is to let researchers express RL algorithms as naturally as pseudocode, while Monarch handles the distributed complexity underneath. The result is code that looks like this:</span></p>
<pre><span>async def </span>continuous_rollouts():
&nbsp;&nbsp;&nbsp;&nbsp;<span>while</span> True:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prompt, target = <span>await</span> dataloader.sample.route()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response = <span>await</span> policy.generate.route(prompt)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reward = <span>await</span>&nbsp;reward.evaluate_response.route(prompt, response.text, target)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span>await</span>&nbsp;replay_buffer.add.route(Episode(...))</pre>
<p><span>No distributed coordination code, no retry logic, just RL written in Python.&nbsp;</span></p>
<h4><span>Building on Monarch: Services and TorchStore</span></h4>
<p><span>This clean API is possible because torchforge builds two key abstractions on Monarch’s primitives:</span></p>
<p><span>“</span><b>Services</b><span>” wrap Monarch ActorMeshes with RL-specific patterns. They leverage Monarch’s fault tolerance, resource allocation, and mailbox system, while adding patterns like load-balanced routing (`.route()`), parallel broadcasts (`.fanout()`), and sticky sessions for stateful operations.</span></p>
<pre><span># A service is a managed group of ActorMeshes with routing primitives</span>
<span>policy</span> <span>=</span> <span>PolicyActor.options(</span>
<span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>procs=</span><span>8</span><span>,</span> <span>with_gpus=True,</span> <span>num_replicas=</span><span>16</span> <span># Creates 16 replicas, each with 8 GPUs</span>
<span>).as_service()</span>

<span># Services provide RL-friendly adverbs built on Monarch actors</span>
<span>response</span> <span>=</span> <span>await</span> <span>policy.generate.route(prompt)</span><span> &nbsp; &nbsp; </span><span># Load-balanced routing</span>
<span>await</span> <span>policy.update_weights.fanout(version)</span><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>#</span> <span>Parallel</span> <span>broadcast</span><span>&nbsp;

</span></pre>
<p><b>TorchStore</b><span> is a distributed key-value store for PyTorch tensors that handles weight synchronization between training and inference. Built on Monarch’s RDMA primitives and single-controller design, it provides simple DTensor APIs while efficiently resharding weights on the fly – critical for off-policy RL where training and inference use different layouts.</span></p>
<p><span>These abstractions demonstrate Monarch’s composability: torchforge uses Monarch’s primitives (actors, RDMA, fault tolerance) as building blocks to create RL-specific infrastructure. The resulting framework handles coordination complexity at the infrastructure layer, letting researchers focus on algorithms.</span></p>
<p><span>For detailed examples of Forge’s APIs, component integration, and design philosophy, see our <a href="https://pytorch.org/blog/introducing-torchforge/">torchforge</a> blog post.</span></p>
<h3><span>Case Study 2: Fault Tolerance in Large Scale Pre Training</span></h3>
<p><span>Hardware and software failures are common and frequent at scale. For example, in </span><a href="https://arxiv.org/pdf/2407.21783"><span>our Llama3 training runs</span></a><span> we experienced 419 interruptions across a 54 day training window for a 16k GPU training job. This averages to about one failure every 3 hours. If we project this out to 10s of thousands of GPUs, this represents a failure once every hour or more frequently. Restarting the entire job for each of these failures will reduce the effective training time.&nbsp;</span></p>
<p><span>A solution is to use methods to further leverage distributed training through methods to make the numerics of the model more tolerant of having the various groups run more asynchronously. For example, </span><a href="https://pytorch.org/blog/fault-tolerant-llama-training-with-2000-synthetic-failures-every-15-seconds-and-no-checkpoints-on-crusoe-l40s/"><span>TorchFT</span></a><span>, released from PyTorch, provides a way to withstand failures of GPUs and allow the training to continue. One strategy is to use Hybrid Sharded Data Parallelism that combines fault tolerant DDP with FSDP v2 and PP. On failure we use </span><a href="https://pytorch.org/blog/torchcomms/"><span>torchcomms</span></a><span> to gracefully handle errors and UI training on the next batch without downtime. This isolates failures to a single “replica group” and we can continue training with a subset of the original job.</span></p>
<p><span>Monarch </span><a href="https://github.com/meta-pytorch/torchft/tree/main/examples/monarch"><span>integrates</span></a><span> with </span><a href="https://github.com/meta-pytorch/torchft"><span>TorchFT</span></a><span>. Monarch centralizes the control plane into a single-controller model. Monarch uses its fault detection primitives to detect failures, and upon detection, can spin up new logical replica groups (Monarch Meshes) to join training once initialized. TorchFT’s Lighthouse server acts as a Monarch actor. Monarch provides configurable recovery strategies based on failure type. On faults, the controller first attempts fast, process‑level restarts within the existing allocation and only escalates to job reallocation when necessary, while TorchFT keeps healthy replicas stepping so progress continues during recovery.</span></p>
<p><span>We ran this code on a 30 node (240 H100s) Coreweave cluster, using the SLURM scheduler to train Qwen3-32B using torchtitan and TorchFT. We injected 100 injected failures every 3 minutes across multiple failure modes (segfaults, process kills, NCCL abort, host eviction, GIL deadlock). Monarch allows for configurable recovery strategies based on failure type — we observed this to be 60% faster by avoiding unnecessary job rescheduling (relative to full SLURM job restarts). We see 90s avg recovery for process failures and 2.5min avg recovery machine failures. For more details, see the </span><a href="https://github.com/meta-pytorch/torchft/tree/main/examples/monarch"><span>README</span></a><span>.</span></p>
<pre><img decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/4-1.png" alt="" width="990" height="590" srcset="https://pytorch.org/wp-content/uploads/2025/10/4-1.png 990w, https://pytorch.org/wp-content/uploads/2025/10/4-1-300x179.png 300w" sizes="(max-width: 990px) 100vw, 990px"></pre>
<h3><span>Case Study 3: Interactive Debugging with a Large GPU cluster&nbsp;</span></h3>
<p><span>The actor framework is not just limited to large scale orchestration of complex jobs. It enables the ability to seamlessly debug complex, multi-GPU computations interactively. This capability represents a fundamental shift from traditional batch-oriented debugging to real-time, exploratory problem-solving that matches the scale and complexity of contemporary AI systems.</span></p>
<p><span>Traditional debugging workflows break down when confronted with the realities of modern ML systems. A model that trains perfectly on a single GPU may exhibit subtle race conditions, deadlocks, memory fragmentation, or communication bottlenecks when scaled across dozens of accelerators.&nbsp;</span></p>
<p><span>Monarch provides an interactive developer experience. With a local jupyter notebook, a user can drive a cluster as a Monarch mesh.&nbsp;</span></p>
<ol>
<li aria-level="1"><span>Persistent distributed compute allows very fast iteration without submitting new jobs</span></li>
<li aria-level="1"><span>Workspace sync_workspace API quickly syncs local conda environment code to Mesh nodes.</span></li>
<li aria-level="1"><span>Monarch provides a mesh-native, </span><a href="https://meta-pytorch.org/monarch/generated/examples/debugging.html"><span>distributed debugger</span></a></li>
</ol>
<p><span>See a jupyter tutorial at </span><a href="https://docs.pytorch.org/tutorials/intermediate/monarch_distributed_tutorial.html"><span>pytorch.org</span></a></p>
<h3><span>Monarch + Lightning AI Notebook</span></h3>
<p><img decoding="async" src="https://pytorch.org/wp-content/uploads/2025/10/5-1.png" alt="" width="1600" height="990" srcset="https://pytorch.org/wp-content/uploads/2025/10/5-1.png 1600w, https://pytorch.org/wp-content/uploads/2025/10/5-1-300x186.png 300w, https://pytorch.org/wp-content/uploads/2025/10/5-1-1024x634.png 1024w" sizes="(max-width: 1600px) 100vw, 1600px"></p>
<p><span>See Monarch in action as we launch a 256-GPU training job from a single Studio notebook, powered by TorchTitan. Experience seamless scaling, persistent resources, and interactive debugging — all in one single Notebook. The figure above shows this schema.&nbsp; Also, see our </span><a href="https://pytorch.org/blog/integration-idea-monarch/"><span>Monarch-Lightning blog post</span></a><span>. In this example, the traditional SPMD TorchTitan workload is encapsulated as an Actor within Monarch, allowing users to pre-train large language models (such as Llama-3 and Llama-4) interactively from a Studio Notebook.</span></p>
<p><span>Monarch enables you to reserve and maintain compute resources directly from your local Studio Notebook in lightning. Even if your notebook session is interrupted or code disconnects, your cluster allocation remains active through Multi-Machine Training (MMT). This persistence of the process allocator allows you to iterate, experiment, and resume work seamlessly, reducing manual intervention and making the notebook a reliable control center for distributed training tasks.</span></p>
<p><span>Using Monarch’s Actor model, you can define and launch the Titan Trainer as an Actor on a process mesh, scaling your training jobs to hundreds of GPUs – all from within the Studio notebook. Monarch handles the orchestration, code and file sharing, and log collection, so you can reconfigure and relaunch jobs quickly. Logs and metrics are available directly in the notebook, as well as through external tools like Litlogger and WandB, making it easy to monitor and manage large-scale training.</span></p>
<p><span>Monarch brings interactive debugging to distributed training. You can set Python breakpoints in your Actor code, inspect running processes, and attach to specific actors for real-time troubleshooting – all from the notebook interface. After training, you can modify configurations or define new actors and relaunch jobs on the same resources without waiting for new allocations. This dynamic workflow accelerates experimentation and provides deep insight into your distributed training runs.&nbsp;</span></p>
<p><span>The code snippet in the </span><a href="https://pytorch.org/blog/integration-idea-monarch/"><span>Monarch-Lightning blog post</span></a><span>&nbsp; shows the sample Lightning studio notebook for Monarch to pre-train the Llama-3.1 – 8B model using TorchTitan on 256 GPUs.&nbsp;</span></p>
<h3><span>Try Monarch Today: Build, Scale, and Debug Distributed AI Workflows with Ease</span></h3>
<p><span>Monarch is available now on GitHub—ready for you to explore, build with, and contribute to. Dive into the </span><a href="https://github.com/meta-pytorch/monarch"><b>Monarch repo</b></a><span> to get started, explore the </span><a href="https://meta-pytorch.org/monarch/"><b>documentation</b></a><span> for deeper technical details, and try out our </span><a href="https://github.com/meta-pytorch/monarch/blob/main/examples/slurm_titan.ipynb"><b>interactive Jupyter notebook</b></a><span> to see Monarch in action. For an end-to-end example of launching large-scale training directly from your notebook, check out the</span> <a href="https://pytorch.org/blog/integration-idea-monarch/"><b>Lightning.ai integration</b></a><span>. Whether you’re orchestrating massive training runs, experimenting with reinforcement learning, or interactively debugging distributed systems, Monarch gives you the tools to do it all—simply and at scale.</span></p>
<h3><span>Acknowledgments</span></h3>
<p><span>Thank you to the whole Monarch team for making this work possible.&nbsp; Also, a special thanks to our </span><a href="https://github.com/meta-pytorch/monarch/graphs/contributors"><span>Top Contributors</span></a><span> on GitHub!</span></p>
<p><span>Ahmad Sharif, Allen Wang, Alireza Shamsoshoara, Amir Afzali, Amr Mahdi, Andrew Gallagher, Benji Pelletier, Carole-Jean Wu, Chris Gottbrath, Colin Taylor, Davide Italiano, Dennis van der Staay, Eliot Hedeman, Gayathri Aiyer, Gregory Chanan, </span><span>Hamid Shojanazeri, </span><span>James Perng, James Sun, Jana van Greunen, Jayasi Mehar, Joe Spisak, John William Humphreys, Jun Li, Kai Li, Keyan Pishdadian, Kiuk Chung, Lucas Pasqualin, Marius Eriksen, Marko Radmilac, Mathew Oldham, Matthew Zhang, Michael Suo, Matthias Reso, Osama Abuelsorour, Pablo Ruiz Fischer Bennetts, Peng Zhang, Rajesh Nishtala, Riley Dulin, Rithesh Baradi, Robert Rusch, Sam Lurye, Samuel Hsia, Shayne Fletcher, Tao Lin, Thomas Wang, Victoria Dudin, Vidhya Venkat, Vladimir Ivanov, Zachary DeVito</span></p>
</div><!--/inner-wrap-->
    
</article>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[C64 Blood Money (124 pts)]]></title>
            <link>https://lemmings.info/c64-blood-money/</link>
            <guid>45679638</guid>
            <pubDate>Thu, 23 Oct 2025 08:41:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lemmings.info/c64-blood-money/">https://lemmings.info/c64-blood-money/</a>, See on <a href="https://news.ycombinator.com/item?id=45679638">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
                
<p>While I still remember the details, I thought I’d go over my port of <strong>Blood Money</strong> to the <strong>C64</strong>. It had some really cool bits in it, and I had great fun doing it. Some parts make me cringe a little now, so it’d be interesting to revive it, and see if I can get it building again – or at the very least, go over the code again…</p>



<p>One thing that DID bug me, even back then, was the crappy starfield. It was just some characters stuck in the map, and it sucked.</p>


<div>
<figure><img decoding="async" width="650" height="359" src="https://lemmings.info/wp-content/uploads/2024/05/image.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image.png 650w, https://lemmings.info/wp-content/uploads/2024/05/image-300x166.png 300w" sizes="(max-width: 650px) 100vw, 650px"></figure></div>


<p>So what were the main components?</p>



<ol>
<li>Multi-Directional scrolling</li>



<li>Sprite Multiplexor</li>



<li>Scripting</li>



<li>Sprite compression</li>



<li>Turrets</li>



<li>Character sprites</li>



<li>Bullets / Weapons</li>



<li>Collision</li>



<li>Shop</li>



<li>Front End</li>
</ol>



<p>These are the major parts and we’ll take them one at a time. Before that, I want to briefly look over the code, and talk about the devkit – <strong>PDS</strong>. Programmers Development System. This was a lovely system, and one I’m sad I didn’t find while raiding the <strong>DMA </strong>Offices.</p>



<p>The <strong>PDS</strong> system consisted of a <strong>PC ISA</strong> card, and a <strong>C64</strong> cartridge. The ISA card was common for all systems, while the target cartridge was custom for each platform.</p>


<div>
<figure><img loading="lazy" decoding="async" width="1024" height="739" src="https://lemmings.info/wp-content/uploads/2024/05/image-1-1024x739.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-1-1024x739.png 1024w, https://lemmings.info/wp-content/uploads/2024/05/image-1-300x216.png 300w, https://lemmings.info/wp-content/uploads/2024/05/image-1-768x554.png 768w, https://lemmings.info/wp-content/uploads/2024/05/image-1-1536x1108.png 1536w, https://lemmings.info/wp-content/uploads/2024/05/image-1.png 1788w" sizes="auto, (max-width: 1024px) 100vw, 1024px"></figure></div>


<p>As I can’t find a <strong>C64 </strong>image, here’s the <strong>Sam Coupé</strong> (<strong>Z80</strong>) one to show what it might look like.<br>EDIT: So with the <strong>RMC Cave</strong> opening up a “<strong>Dev Den</strong>“, Jason who is running that part, had a <strong>C64</strong> one and it turns out there isn’t an interface, just a user port connector. This makes sense as the <strong>C64 </strong>already has everything it needs to read/write bytes in parallel.</p>



<p><img decoding="async" src="https://www.worldofsam.org/sites/default/files/2018-08/1930902_10155032479666879_3329198604205518881_n.jpg" alt="PDS development system | World of SAM"></p>


<div>
<figure><img loading="lazy" decoding="async" width="400" height="300" src="https://lemmings.info/wp-content/uploads/2024/05/image-2.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-2.png 400w, https://lemmings.info/wp-content/uploads/2024/05/image-2-300x225.png 300w" sizes="auto, (max-width: 400px) 100vw, 400px"></figure></div>


<p>This is the <strong>Z80 </strong>program, but the <strong>6502 </strong>one was the same. It consisted of a built in text editor/assembler/debugger. The text editor could hold 8 files up to a maximum of <strong>32k </strong>each, though you could include as many files as you like. It assembled before your finger left the key, and squired down in under a second. This was a massive speed boost from the 20 minutes I sometimes spent waiting on the <strong>C64</strong> to disk assemble using a fast parallel disk interface.</p>


<div>
<figure><img loading="lazy" decoding="async" width="896" height="973" src="https://lemmings.info/wp-content/uploads/2024/05/image-3.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-3.png 896w, https://lemmings.info/wp-content/uploads/2024/05/image-3-276x300.png 276w, https://lemmings.info/wp-content/uploads/2024/05/image-3-768x834.png 768w" sizes="auto, (max-width: 896px) 100vw, 896px"></figure></div>


<p>The other good thing about <strong>PDS</strong>, is it remembers the start date, and the last time you touched it – which is very cool and handy. So I started this on 7th of August 1989…. though, this probably isn’t right. This was the month the office opened, and I was still working on <strong>Ballistix </strong>at this point. However, I did create a <strong>C64 </strong>framework, and then probably based the game off that. The date below 2/10/89 looks better, and the end date looks about right 25/4/90. Games back then took about 6 months, so this also fits.</p>



<p>So in the main code of all my <strong>C64 </strong>games, I setup equates (constants), and zero page and normal variables. On the <strong>6502 </strong>there are <strong>256 </strong>bytes of fast zero page, <strong>2</strong> are taken with <strong>I/O </strong>control, and the rest are available for use. Zero page instructions typically take <strong>1</strong> cycle less to operate, so are highly desirable for critical code optimisations.</p>


<div>
<figure><img loading="lazy" decoding="async" width="758" height="965" src="https://lemmings.info/wp-content/uploads/2024/05/image-4.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-4.png 758w, https://lemmings.info/wp-content/uploads/2024/05/image-4-236x300.png 236w" sizes="auto, (max-width: 758px) 100vw, 758px"></figure></div>


<p>These are some of the constants. At the top you can see the big ticket items – memory map etc. There’s a couple of interesting items here – <strong>Charmasks</strong>/<strong>Shipmasks</strong>, and <strong>down_load</strong>. The collision in <strong>Blood Money</strong> wasn’t character based, it was bitmap based. I actually read the background tiles, and then masked whatever frame of the ship was active onto these characters. This was pretty slow, but allowed proper collision to the background – something that was vital in later levels. I’ll discuss this mode later of course…</p>



<p><strong>down_load</strong> – this was where the debugger/downloader code lived. Whenever the <strong>C64 </strong>hit a <strong>BRK </strong>instruction, I would detect this in the <strong>IRQ </strong>it generated, and jumped to the <strong>PDS </strong>debugger code.</p>


<div>
<figure><img loading="lazy" decoding="async" width="710" height="1009" src="https://lemmings.info/wp-content/uploads/2024/05/image-5.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-5.png 710w, https://lemmings.info/wp-content/uploads/2024/05/image-5-211x300.png 211w" sizes="auto, (max-width: 710px) 100vw, 710px"></figure></div>


<p>This is how I allocated Zero Page variables. Prior to having good macros, I’d have to work these out manually, but now I was able to simple set a name and how many bytes I wanted, and the label would be set. I still use this method for variable allocation when need be – it’s really useful.</p>


<div>
<figure><img loading="lazy" decoding="async" width="593" height="1024" src="https://lemmings.info/wp-content/uploads/2024/05/image-7.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-7.png 593w, https://lemmings.info/wp-content/uploads/2024/05/image-7-174x300.png 174w" sizes="auto, (max-width: 593px) 100vw, 593px"></figure></div>


<p>I use the same method for sprite variable allocation. Have to say… this is a lot of variables for each sprite – oh well….</p>


<div>
<figure><img loading="lazy" decoding="async" width="715" height="1024" src="https://lemmings.info/wp-content/uploads/2024/05/image-8-715x1024.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-8-715x1024.png 715w, https://lemmings.info/wp-content/uploads/2024/05/image-8-210x300.png 210w, https://lemmings.info/wp-content/uploads/2024/05/image-8.png 718w" sizes="auto, (max-width: 715px) 100vw, 715px"></figure></div>


<p>And this is where I defined general variables, and player structure. There’s <strong>2</strong> of everything as <strong>Blood Money</strong> is a simultaneous <strong>2</strong> player game. This really effected the multiplexor – but more on that later….</p>


<div>
<figure><img loading="lazy" decoding="async" width="781" height="656" src="https://lemmings.info/wp-content/uploads/2024/05/image-9.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-9.png 781w, https://lemmings.info/wp-content/uploads/2024/05/image-9-300x252.png 300w, https://lemmings.info/wp-content/uploads/2024/05/image-9-768x645.png 768w" sizes="auto, (max-width: 781px) 100vw, 781px"></figure></div>


<p>Lastly for today, is the start up code, we take over everything and nuke stack and zero page, flick out <strong>ROMs </strong>etc and setup <strong>IRQs</strong> – the usual…</p>


<div>
<figure><img loading="lazy" decoding="async" width="558" height="1024" src="https://lemmings.info/wp-content/uploads/2024/05/image-10-558x1024.png" alt="" srcset="https://lemmings.info/wp-content/uploads/2024/05/image-10-558x1024.png 558w, https://lemmings.info/wp-content/uploads/2024/05/image-10-164x300.png 164w, https://lemmings.info/wp-content/uploads/2024/05/image-10.png 561w" sizes="auto, (max-width: 558px) 100vw, 558px"></figure></div>


<p>The <strong>IRQs</strong> in <strong>Blood Money</strong> are complicated, and heavily tied to the multiplexor, so I’ll talk about that next time…..</p>



<p>Also just to say…. as this was just my second game, and only a couple of months after the office opened, I’m amazed at the level of commenting in the source! 😂</p>




                                                     
                     

                
                
	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>                          </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Radios, how do they work? (2024) (214 pts)]]></title>
            <link>https://lcamtuf.substack.com/p/radios-how-do-they-work</link>
            <guid>45678603</guid>
            <pubDate>Thu, 23 Oct 2025 05:56:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lcamtuf.substack.com/p/radios-how-do-they-work">https://lcamtuf.substack.com/p/radios-how-do-they-work</a>, See on <a href="https://news.ycombinator.com/item?id=45678603">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>Radio communications play a key role in modern electronics, but to a hobbyist, the underlying theory is hard to parse. We get the general idea, of course: we know about frequencies and can probably explain the difference between amplitude modulation and frequency modulation. Yet, most of us find it difficult to articulate what makes a good antenna, or how a receiver can tune in to a specific frequency and ignore everything else.</p><p>In today’s article, I’m hoping to provide an introduction to radio that’s free of ham jargon and advanced math. To do so, I’m leaning on the concepts discussed in three earlier articles on this blog:</p><ul><li><p><a href="https://lcamtuf.substack.com/p/primer-core-concepts-in-electronic" rel="">Core concepts in electronic circuits</a><span>,</span></p></li><li><p><a href="https://lcamtuf.substack.com/p/signal-reflections-in-electronic" rel="">Signal propagation delays and signal reflections</a><span>,</span></p></li><li><p><a href="https://lcamtuf.substack.com/p/not-so-fast-mr-fourier" rel="">Frequency domain analysis with DFT and DCT</a><span>.</span></p></li></ul><p>If you’re rusty on any of the above, I recommend jogging your memory first. </p><p>If you’re familiar with the basics of electronics, a simple way to learn about antennas is to imagine a charged capacitor that’s being pulled apart until its internal electric field spills into the surrounding space. This would be a feat of strength, but bear with me for a while:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!byPP!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!byPP!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 424w, https://substackcdn.com/image/fetch/$s_!byPP!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 848w, https://substackcdn.com/image/fetch/$s_!byPP!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 1272w, https://substackcdn.com/image/fetch/$s_!byPP!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!byPP!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png" width="1456" height="866" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:866,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:678599,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!byPP!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 424w, https://substackcdn.com/image/fetch/$s_!byPP!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 848w, https://substackcdn.com/image/fetch/$s_!byPP!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 1272w, https://substackcdn.com/image/fetch/$s_!byPP!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8dffa9f1-4fe0-437e-83ae-9410f24fa886_5181x3080.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption><em>Turning a capacitor into a terrible antenna.</em></figcaption></figure></div><p>Electric fields can be visualized by plotting the paths of hypothetical positively-charged particles placed in the vicinity. For our ex-capacitor, we’d be seeing arc-shaped lines that connect the plates — and strictly speaking, extend on both sides all the way to infinity.</p><p>An unchanging electric field isn’t very useful: if it’s just sitting there for all eternity, it doesn’t convey information nor perform meaningful work. If we push a charge against the direction of the field and then let it loose, the particle will fly away – but that’s just a matter of getting back the energy we expended on pushing it into position in the first place.</p><p>The situation changes if we start moving charges back and forth between the plates. This produces an interesting effect: a ripple-like pattern of alternating fields that are getting away from the ex-capacitor at the speed of light:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!VUKo!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!VUKo!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 424w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 848w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 1272w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!VUKo!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png" width="1456" height="952" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/db2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:952,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:621115,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!VUKo!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 424w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 848w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 1272w, https://substackcdn.com/image/fetch/$s_!VUKo!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdb2ce9eb-6a1b-417f-af6c-9c1e3562ea10_2254x1473.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Field pattern around a simple antenna.</em></figcaption></figure></div><p>The color corresponds to the direction of the field - i.e., the pull that a charged particle would experience if placed in the vicinity: green stands for a “downward” field where the upper half of the antenna is positive and the lower half is negative; yellow is the other way round.</p><p>In the case of a static electric field of a charged capacitor, we could always get substantially all the stored energy back just by connecting the plates and allowing the charges to equalize. But in our new scenario, if the field is changing rapidly, then on the account of relativity, we can no longer directly recover the energy from the ripples that are getting away at the speed of light. That energy can only be transferred to downstream charges that may begin to move back and forth as they “swim” through the gradients of the incoming field.</p><p>It should be fairly evident that the amount of radiated energy increases with the amount of charges shuttled back and forth between the plates — the intensity of each ripple — and with the number of transitions per second (i.e., with the signal’s frequency).</p><p>A perfectly uniform waveform is still not useful for communications, but we can encode information by slightly altering the wave’s characteristics over time — for example, tweaking its amplitude. And if we do it this way, then owing to a clever trick we’ll discuss a bit later, simultaneous transmissions on different frequencies can be told apart on the receiving end.</p><p>But first, it’s time for a reality check: if we go back to our dismantled capacitor and hook it up to a voltage-based signal source, the setup won’t actually do squat. When we pulled the plates apart, we greatly reduced the device’s capacitance, so we’re essentially looking at an open circuit; a pretty high voltage would be needed to shuffle a decent number of electrons back and forth. Without this motion — i.e., without a healthy current — the relativistic ripples pack very little punch.</p><p><span>The most elegant solution to this problem is known as a half-wavelength (“half-wave”) dipole antenna: two rods along a common axis, driven by a sinusoidal signal fed at the center, each rod exactly ¼ wavelength long. If you’re scratching your head, the conversion from frequency (</span><em>f, </em><span>in Hz) to wavelength (</span><em>λ</em><span>) is:</span></p><div data-component-name="Latex"><p><span>\(\lambda = \frac{c}{f}\)</span></p></div><p><span>The third value — </span><em>c</em><span> — is the speed of light per second in your preferred unit of length.</span></p><p><span>The half-wave dipole has an interesting property: if we take signal propagation delays into account, we can see that every peak of the driving signal reaches the ends of the respective</span><em> λ/4 </em><span>rod in a way that adds constructively to the reflection of the previous peak that’s coming back from the high-impedance end:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!j50T!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!j50T!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 424w, https://substackcdn.com/image/fetch/$s_!j50T!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 848w, https://substackcdn.com/image/fetch/$s_!j50T!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 1272w, https://substackcdn.com/image/fetch/$s_!j50T!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!j50T!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png" width="1456" height="812" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:812,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:200281,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!j50T!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 424w, https://substackcdn.com/image/fetch/$s_!j50T!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 848w, https://substackcdn.com/image/fetch/$s_!j50T!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 1272w, https://substackcdn.com/image/fetch/$s_!j50T!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0d804c41-d5c8-418e-8fa3-1efe1cc2a1f4_2696x1504.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Resonance of a half-dipole antenna.</em></figcaption></figure></div><p><span>Each reflection is basically just the previous quarter-wave “folded back” onto each rod. (If you’re iffy on signal reflections, I recommend reviewing </span><a href="https://lcamtuf.substack.com/p/signal-reflections-in-electronic" rel="">this article</a><span>.)</span></p><p><span>The following animation shows the pattern of superimposed signal and reflections within a single rod.</span><em> </em><span>The actual span of the rod is marked by vertical lines. The light blue line is the reflection, which is mirrored back onto the rod. The orange line corresponds to the summed voltage:</span></p><div id="vimeo-1068709463" data-attrs="{&quot;videoId&quot;:&quot;1068709463&quot;,&quot;videoKey&quot;:&quot;4df5dbad29&quot;,&quot;belowTheFold&quot;:true}" data-component-name="VimeoToDOM"><p><iframe src="https://player.vimeo.com/video/1068709463?autoplay=0&amp;h=4df5dbad29" frameborder="0" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" loading="lazy"></iframe></p></div><p>The following animation shows both elements of a dipole antenna in action, this time with some modest reflection losses baked in,:</p><div id="vimeo-1069055031" data-attrs="{&quot;videoId&quot;:&quot;1069055031&quot;,&quot;videoKey&quot;:&quot;45a6f3b212&quot;,&quot;belowTheFold&quot;:true}" data-component-name="VimeoToDOM"><p><iframe src="https://player.vimeo.com/video/1069055031?autoplay=0&amp;h=45a6f3b212" frameborder="0" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" loading="lazy"></iframe></p></div><p>Note the large (36 V) swing at the far ends of the antenna as a result of a far more modest (8 V) swing at the feed point. This makes the antenna efficient and easy to drive.</p><p>All dipoles made for odd multiples of half-wavelength (3/2 λ, 5/2 λ, …) exhibit this resonant behavior. Similar resonance is also present at even multiples (1 λ, 2 λ, …), but the standing wave ends up sitting in the wrong spot — constantly getting in the way of driving the antenna rather than aiding the task.</p><p><span>Other antenna lengths are not perfectly resonant, although they might be close enough. An antenna that’s way too short to resonate properly can be improved with an in-line inductor, which adds some current lag. You might have seen antennas with spring-like sections at the base; the practice called </span><em>electrical lengthening</em><span>. It doesn’t make a stubby antenna perform as well as a the real deal, but it helps keep the input impedance in check.</span></p><p>Now that we’re have a general grasp of half-wave dipoles, let’s have a look at the animation of actual electric field around a half-wave antenna:</p><div id="vimeo-926457795" data-attrs="{&quot;videoId&quot;:&quot;926457795&quot;,&quot;videoKey&quot;:&quot;02bd144b5c&quot;,&quot;belowTheFold&quot;:true}" data-component-name="VimeoToDOM"><p><iframe src="https://player.vimeo.com/video/926457795?autoplay=0&amp;h=02bd144b5c" frameborder="0" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" loading="lazy"></iframe></p></div><p>Note the two dead zones along the axis of the antenna; this is due to destructive interference of the electric fields in this axis. </p><p><span>Next, let’s consider what would happen if we placed an identical receiving antenna some distance away from the transmitter. Have a look at </span><em>receiver A</em><span> on the right:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!sNiG!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!sNiG!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 424w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 848w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!sNiG!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg" width="1456" height="822" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:822,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:480618,&quot;alt&quot;:&quot;Dipole antennas in an electromagnetic field&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="Dipole antennas in an electromagnetic field" title="Dipole antennas in an electromagnetic field" srcset="https://substackcdn.com/image/fetch/$s_!sNiG!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 424w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 848w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!sNiG!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe941fc1d-74d6-4765-bce5-0d95b7145975_1800x1016.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Some receiver antenna scenarios.</em></figcaption></figure></div><p>It’s easy to see that the red dipole is “swimming” through a coherent pattern alternating electric fields: the blue region is pulling electrons toward the upper plate, and yellow pushing them down. The antenna experiences back-and-forth currents between its poles at the transmitter’s working frequency. Further, if the antenna’s length is chosen right, there should be constructive interference of the induced currents too, eventually resulting in much higher signal amplitudes.</p><p><span>The illustration also offers an intuitive explanation of something I didn’t mention before: that dipoles longer than ½ wavelength are more directional. If you look at </span><em>receiver B </em><span>on the left, it’s clear that even a minor tilt of a long dipole results in the ends being exposed to opposing electric fields, yielding little or no net current flow.</span></p><p>Not all antennas are dipoles, but most operate in a similar way. Monopoles are just a minor riff on the theme, trading one half of the antenna for a connection to the ground. More complex shapes usually crop up as a way to maintain resonance at multiple frequencies or to fine-tune directionality. You might also bump into antenna arrays; these devices exploit patterns of constructive and destructive interference between digitally-controlled signals to flexibly focus on a particular spot.</p><p><span>Compared to antenna design, signal modulation is a piece of cake. There’s </span><em>amplitude modulation</em><span> (AM), which changes the carrier’s amplitude to encode information; there’s </span><em>frequency modulation</em><span> (FM), which shifts the carrier up and down; and there’s </span><em>phase modulation</em><span> (PM) — well, you get the drift. We also have </span><em>quadrature amplitude modulation</em><span> (QAM), which robustly conveys information via the </span><em>relative</em><span> amplitude of two signals with phases offset by 90°.</span></p><p>In any case, once the carrier signal is isolated, demodulation is typically pretty easy to figure out. For AM, the process can be as simple as rectifying the amplified sine wave with a diode, and then running it through a lowpass filter to obtain the audio-frequency envelope. Other modulations are a bit more involved — FM and PM benefit from phase-locked loops to detect shifts — but most of it isn’t rocket surgery.</p><p>Still, there are two finer points to bring up about modulation. First, the rate of change of the carrier signal must be much lower than its running frequency. If the modulation is too rapid, you end up obliterating the carrier wave and turning it into wideband noise. The only reason why resonant antennas and conventional radio tuning circuits work at all is that almost nothing changes cycle-to-cycle — so in the local view, you’re dealing with a nearly-perfect, constant-frequency sine.</p><p><span>The other point is that counterintuitively, </span><em>all</em><span> modulation is frequency modulation. Intuitively, AM might feel like a clever zero-bandwidth hack: after all, we’re just changing the amplitude of a fixed-frequency sine wave, so what’s stopping us from putting any number of AM transmissions a fraction of a hertz apart?</span></p><p><span>Well, no dice: recall from the </span><a href="https://lcamtuf.substack.com/p/not-so-fast-mr-fourier" rel="">discussion of the Fourier transform</a><span> that any deviation from a steady sine introduces momentary artifacts in the frequency domain. The scale of the artifacts is proportional to the rate of change; AM is not special and takes up frequency bandwidth too. To illustrate, here’s a capture of a local AM station; we see audio modulation artifacts spanning multiple kHz on both sides of the carrier frequency:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!8LIJ!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!8LIJ!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 424w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 848w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1682879,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!8LIJ!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 424w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 848w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 1272w, https://substackcdn.com/image/fetch/$s_!8LIJ!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F816eaccd-380a-4c31-8faf-b7f653817b7a_1800x1201.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>The talk of the town.</em></figcaption></figure></div><p>We’ll have a proof of this in a moment. But broadly speaking, all types of modulation boil down to taking a low-frequency signal band — such as audio — and transposing it in one way or another to a similarly-sized slice of the spectrum in the vicinity of some chosen center frequency. The difference is the construction method, not the result.</p><p><span>At this point, some readers might object: the Fourier transform surely isn’t the only way to think about the frequency spectrum; just because we see halos on an FFT plot, it doesn’t mean they’re </span><em>really </em><span>real. In an epistemological sense, this </span><a href="https://lcamtuf.substack.com/p/is-the-frequency-domain-a-real-place" rel="">might be right</a><span>. But as it happens, radio receivers work by doing something that walks and quacks </span><em>a lot</em><span> like Fourier…</span></p><p>The basic operation of almost every radio receiver boils down to mixing (multiplying) the amplified antenna signal with a sine wave of a chosen frequency. As foreshadowed just moments ago, this is eerily similar to how Fourier-adjacent transforms deconstruct complex signals into individual frequency components.</p><p>From the discussion of the discrete cosine transform (DCT) in the earlier article, you might remember that if a matching frequency is present in the input signal, the multiplication yields a waveform with a DC bias proportional to the magnitude of that frequency component. For all other input frequencies, the resulting waveforms average out to zero, if analyzed on a sufficiently long timescale.</p><p><span>In the aforementioned article, we informally noted that the resulting composite waveforms have shorter periods if the original frequencies are far apart, and longer periods if the frequencies are close. Now, a more precise mathematical model is in order. As it turns out, for scalar multiplication, the low-frequency cycle is always </span><em><span>|f</span><sub>1</sub><span> - f</span><sub>2</sub><span>|</span></em><span>, superimposed on top of a (less interesting) high-frequency component </span><em><span>f</span><sub>1</sub><span> + f</span><sub>2</sub></em><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!KO2-!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!KO2-!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 424w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 848w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 1272w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!KO2-!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png" width="1456" height="842" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:842,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:367747,&quot;alt&quot;:&quot;Radio mixer beat frequencies&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="Radio mixer beat frequencies" title="Radio mixer beat frequencies" srcset="https://substackcdn.com/image/fetch/$s_!KO2-!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 424w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 848w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 1272w, https://substackcdn.com/image/fetch/$s_!KO2-!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F958fad5e-bec6-4632-a293-24b87427fb1a_1800x1041.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Dropping some sick beats.</em></figcaption></figure></div><p><span>This behavior might seem puzzling, but it arises organically from the properties of sine waves. At its root is the semi-well-known </span><em>angle sum identity</em><span>, given by the following formula:</span></p><div data-component-name="Latex"><p><span>\(cos(\alpha + \beta) = cos(\alpha) \cdot cos(\beta) - sin(\alpha) \cdot sin(\beta)\)</span></p></div><p>If the formula looks alien to you, we can establish the equality using a pretty cute visual proof:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!WIwx!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!WIwx!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 424w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 848w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 1272w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!WIwx!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png" width="1456" height="1581" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1581,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1246038,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!WIwx!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 424w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 848w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 1272w, https://substackcdn.com/image/fetch/$s_!WIwx!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5cc91667-d303-4528-95c4-e23fc349e83d_2762x3000.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Cosine angle sum identity. By author.</em></figcaption></figure></div><p>It’s probably best to zoom in and just walk through the picture, but if you need additional hints, the following text narrative should help. Otherwise, just skip ahead to the paragraph starting with the “fast forward” pictogram (⏩).</p><p><span>Proof narrative: we start with two given angles, </span><em>α</em><span> and </span><em>β</em><span>. </span><strong>Panel 1 (top left): </strong><span>we construct a right-angle triangle (#1), which has an angle of </span><em>α </em><span>and a hypotenuse equal to 1. Next, we calculate the length of the adjacent of that triangle using basic trigonometry — </span><em>1 × cos(α).</em><span> </span><strong>Panel 2 (top right):</strong><span> we slide a second triangle underneath #1. The new triangle (#2) has an angle of </span><em>β</em><span> and a hypotenuse of the same length as the adjacent of triangle #1: </span><em>cos(α)</em><span>; this makes the adjacent of #2 equal to </span><em>cos(α) × cos(β)</em><span>.</span></p><p><strong>Panel 3 (middle left):</strong><span> we add triangle #3, placing it on top of the other triangles. The new triangle inherits a hypotenuse of 1 from triangle #1, and has a combined angle of </span><em>α+β </em><span>as a consequence of being partly inscribed inside #1 and #2</span><em>.</em><span> It follows that its adjacent is </span><em>1 × cos(α + β)</em><span>.</span></p><p><span>The bottom edge of the combined figure has a length equal to the known adjacent of #2: </span><em>cos(α) × cos(β)</em><span>. Alternatively, the length can be expressed as the adjacent of #3 – </span><em>cos(α + β) </em><span>– plus some unknown segment, </span><em>x</em><span>. </span></p><p><span>We solve for that mystery segment by looking a new helper triangle (#4). </span><strong>Panel 4 (middle right):</strong><span> we find the top angle of that triangle, which works out to </span><em>β</em><span>. </span><strong>Panel 5 (bottom):</strong><span> a quick analysis shows that </span><em>x</em><span> is equal to </span><em>sin(α) × sin(β)</em><span>. Putting it all together, we obtain the following angle sum identity:</span></p><div data-component-name="Latex"><p><span>\(cos(\alpha + \beta) = cos(\alpha) \cdot cos(\beta) - sin(\alpha) \cdot sin(\beta)\)</span></p></div><p><span>⏩ The identity for </span><em>cos(α + β)</em><span> can be trivially extended to </span><em>cos(α - β)</em><span>, because subtraction is the same as adding a negative number:</span></p><div data-component-name="Latex"><p><span>\(\begin{array}{c}
cos(\alpha - \beta)  = cos(\alpha + (-\beta)) \\
= cos(\alpha)\cdot \underbrace{cos(-\beta)}_{=\  cos(\beta)} - sin(\alpha) \cdot \underbrace{sin(-\beta)}_{= \ -sin(\beta)} \\
\\
\textrm{Formula after substitutions:} \\
cos(\alpha - \beta) 
= cos(\alpha) \cdot cos(\beta) + sin(\alpha) \cdot sin(\beta)
\end{array}\)</span></p></div><p><span>Now that we have these two formulas, let’s see what happens if we subtract </span><em>cos(α + β)</em><span> from </span><em>cos(α – β)</em><span>:</span></p><div data-component-name="Latex"><p><span>\(\begin{array}{c}
cos(\alpha - \beta) - cos(\alpha + \beta)\\
= \cancel{cos(\alpha) \cdot cos(\beta)} + sin(a) \cdot sin(\beta) \\
 - \cancel{cos(\alpha) \cdot cos(\beta)} + sin(\alpha) \cdot sin(\beta) \\
= 2 \cdot sin(\alpha) \cdot sin(\beta)
\end{array}\)</span></p></div><p><span>Next, divide both sides by two and flip the expression around; this nets us a formula that equates the product of (i.e., the mix of) two sine frequencies to the sum of two independent cosines running at </span><em><span>|f</span><sub>1</sub><span> - f</span><sub>2</sub><span>|</span></em><span> and </span><em><span>f</span><sub>1</sub><span> + f</span><sub>2</sub></em><span>:</span></p><div data-component-name="Latex"><p><span>\(sin(\alpha) \cdot sin(\beta) = \frac{cos(\alpha - \beta)  - cos(\alpha + \beta)}{2}\)</span></p></div><p>In other words, it describes the exact phenomenon we’ve been looking at.</p><p>We don’t even need to believe in trigonometry. A closely-related phenomenon has been known to musicians for ages: when you simultaneously play two very similar tones, you end up with an unexpected, slowly-pulsating “beat frequency”. Here’s a demonstration of a 5 Hz beat produced by combining 400 Hz and 405 Hz:</p><div id="vimeo-926723062" data-attrs="{&quot;videoId&quot;:&quot;926723062&quot;,&quot;videoKey&quot;:&quot;0983acaac7&quot;,&quot;belowTheFold&quot;:true}" data-component-name="VimeoToDOM"><p><iframe src="https://player.vimeo.com/video/926723062?autoplay=0&amp;h=0983acaac7" frameborder="0" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" loading="lazy"></iframe></p></div><p><span>The behavior is also a serendipitous way to formalize the earlier observation about AM modulation: this scheme essentially takes a signal running at a carrier frequency </span><em>a</em><span> and varies its amplitude by multiplying the carrier by some slower-running sine at a frequency </span><em>b</em><span>.</span><em> </em><span>From the formula we derived earlier on, the result of this multiplication necessarily indistinguishable from the superposition of two symmetrical sinusoidal transmissions offset from </span><em>a</em><span> by ± </span><em>b, </em><span>so AM signals take up bandwidth just the same as any other modulation scheme.</span></p><p><span>In any case, back to radio: it follows that if one wanted to receive transmissions centered around 10 MHz, a straightforward approach would be to mix the input RF signal with a 10 MHz sine. According to our formulas, this should put the 10.00 MHz signal at DC, downconvert 10.01 MHz to a 10 kHz beat (with an extra 20.01 MHz component), turn 10.02 MHz into 20 kHz (+ 20.02 MHz), and so forth. With the mixing done, the next step would be to apply a lowpass filter to the output, keeping only the low frequencies that are a part of the modulation scheme — and getting rid of everything else, including the unwanted </span><em><span>f</span><sub>1</sub><span> + f</span><sub>2</sub></em><span> components that popped up around 20 MHz.</span></p><p><span>The folly of this method is the modulo operator in the </span><em><span>|f</span><sub>1</sub><span> - f</span><sub>2</sub><span>|</span></em><span> formula, a consequence of </span><em>cos(x) </em><span>being the same as</span><em> cos(-x)</em><span>. This causes unwanted input transmissions directly below 10 MHz to produce beats that are indistinguishable from the desirable signals directly above 10 MHz; for example, a component at 9.99 MHz will produce an image in the same place as a 10.01 MHz signal, both ending up at 10 kHz.</span></p><p>To avoid this mirroring, superheterodyne receivers mix the RF input with a frequency lower than the signal of interest, shifting the transmission to some reasonably low, constant intermediate frequency (IF) — and then using bandpass filters to pluck out the relevant bits before downmixing the IF signal once again. A simple visualization of the benefits of using IF is shown below:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/$s_!v8AB!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/$s_!v8AB!,w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 424w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 848w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 1272w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/$s_!v8AB!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png" width="1456" height="1743" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1743,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:383954,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://lcamtuf.substack.com/i/142762684?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null,&quot;offset&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/$s_!v8AB!,w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 424w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 848w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 1272w, https://substackcdn.com/image/fetch/$s_!v8AB!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfc7191b-daae-411e-b662-d117ec070ace_1791x2144.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>Avoiding mirrored signals.</em></figcaption></figure></div><p><span>In this design — devised by Edwin Armstrong around 1919 and dubbed </span><em>superheterodyne </em><span>— the fundamental mirroring behavior is still present, but the point of symmetry can be controlled and placed far away. With this trick up our sleeve, accidental mirror images of unrelated transmissions become easier to manage — for example, by designing the antenna to have a narrow frequency response and not pick up more distant frequencies at all, or by putting a coarse filter in front of the mixer. The behavior of superheterodynes is sometimes taken into account for radio spectrum allocation purposes, too.</span></p><p><em><span>👉 For a thematic catalog of articles on electronics, </span><a href="https://lcamtuf.coredump.cx/offsite.shtml" rel="">click here</a><span>.</span></em></p><p><em>I write well-researched, original articles about geek culture, electronic circuit design, algorithms, and more. This day and age, it’s increasingly difficult to reach willing readers via social media and search. If you like the content, please subscribe!</em></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[VST3 audio plugin format is now MIT (615 pts)]]></title>
            <link>https://forums.steinberg.net/t/vst-3-8-0-sdk-released/1011988</link>
            <guid>45678549</guid>
            <pubDate>Thu, 23 Oct 2025 05:48:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://forums.steinberg.net/t/vst-3-8-0-sdk-released/1011988">https://forums.steinberg.net/t/vst-3-8-0-sdk-released/1011988</a>, See on <a href="https://news.ycombinator.com/item?id=45678549">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemscope="" itemtype="http://schema.org/DiscussionForumPosting" id="main-outlet" role="main">
      <meta itemprop="headline" content="VST 3.8.0 SDK Released">
      
      <meta itemprop="datePublished" content="2025-10-21T14:32:08Z">
        <meta itemprop="articleSection" content="VST 3 SDK">
      <meta itemprop="keywords" content="vst3sdk-announcement">
      


          <div id="post_1">
            <div>
              


              <p><span>
                  <time datetime="2025-10-21T14:32:08Z">
                    October 21, 2025,  2:32pm
                  </time>
                  <meta itemprop="dateModified" content="2025-10-21T14:32:08Z">
              <span itemprop="position">1</span>
              </span>
            </p></div>
            <div itemprop="text">
              <p>VST 3.8 SDK Released</p>
<p>Dear VST Developers,</p>
<p>Steinberg Media Technologies today releases the VST SDK 3.8</p>
<p>Here’s a brief overview of changes:</p>
<hr>
<h2><a name="p-2697477-version-380-20251020-1" href="#p-2697477-version-380-20251020-1"></a>Version 3.8.0 (2025/10/20)</h2>
<ul>
<li>
<p><a>New licensing model for VST 3</a>:</p>
<ul>
<li>VST 3 is now open source, released under the <a href="https://tlo.mit.edu/understand-ip/exploring-mit-open-source-license-comprehensive-guide">MIT license</a>.</li>
</ul>
</li>
<li>
<p>Interface changes:</p>
<ul>
<li>Support for <strong>MIDI 2.0</strong>: new interfaces <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages//Technical+Documentation/Change+History/3.8.0/IMidiLearn2.html">IMidiLearn2</a> and <a>IMidiMapping2</a>. These new interfaces replace the previous interfaces <em>IMidiLearn</em> and <em>IMidiMapping</em>.</li>
<li>Add missing ControllerNumbers enum for <strong>MIDI 1.0</strong> System messages.</li>
<li>Preview <a href="https://wayland.freedesktop.org/">Wayland</a> support on Linux (originally written and contributed to VST SDK by PreSonus Software Ltd. and integrated in <em>Studio One Pro 7.2</em> and higher on Linux):
<ul>
<li>new interfaces <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages//Technical+Documentation/Change+History/3.8.0/IWaylandHost.html">IWaylandHost, IWaylandFrame</a>.</li>
<li>new Platform UI Type: <em>kPlatformTypeWaylandSurfaceID</em>.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/What+is+the+VST+3+SDK/VSTGUI.html">VSTGUI</a> update <a href="https://github.com/steinbergmedia/vstgui/releases/tag/vstgui4_15_0">4.15.0</a></p>
<ul>
<li>new <strong>**Task Concurrency API**</strong>: It facilitates scheduling tasks for execution on background threads, either concurrently or sequentially. This API also enables the scheduling of tasks on the main thread from any other thread.</li>
<li>add support for custom view layouts (see <strong>**IViewLayouter**</strong> and <strong>**CViewContainer::setViewLayouter**</strong>).</li>
<li>add a grid view layouter that is similar to CSS Grid (see <strong>**GridLayouter**</strong>).</li>
<li>add Scripting for UIDescription (see <strong>**uidescription-scripting/uiscripting.md**</strong>)</li>
<li>add new text editor view (see <strong>**lib/ctexteditor.h**</strong>)</li>
<li>a scroll view can now have a top and a left edge view (see <strong>**CScrollView::setEdgeView**</strong>)</li>
<li>preliminary [Wayland](<a href="https://wayland.freedesktop.org/">https://wayland.freedesktop.org/</a>) support on Linux.</li>
</ul>
</li>
<li>
<p>Documentation</p>
<ul>
<li>Adapt document to <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/VST+3+Licensing/Index.html">new licensing model</a>.</li>
<li>Update <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/VST+3+Licensing/Usage+guidelines.html">Steinberg VST usage guidelines</a> document.</li>
</ul>
</li>
<li>
<p>cmake</p>
<ul>
<li>Fix <em>SMTG_AddSMTGLibrary.cmake</em> (macOS/Linux): Remove old symlink before creating a new one.</li>
<li>Fix <em>SMTG_PlatformToolset.cmake</em> for Visual Studio Compiler: __cplusplus was not assigned to correct version (<a href="https://github.com/steinbergmedia/vst3_cmake/pull/13">pull#13</a>).</li>
</ul>
</li>
<li>
<p><a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/What+is+the+VST+3+SDK/Plug-in+Examples.html">Examples</a>:</p>
<ul>
<li>Add support of new ControllerNumbers enums in <em>legacymidiccout</em> Plug-in.</li>
<li>Add support of the new interfaces <a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/Technical+Documentation/Change+History/3.8.0/IMidiLearn2.html">IMidiLearn2</a> and <a>IMidiMapping2</a> in <em>Note Expression Synth</em> Plug-in.</li>
<li>EditorHost <a href="https://wayland.freedesktop.org/">Wayland</a> support.</li>
</ul>
</li>
<li>
<p>Helper Classes:</p>
<ul>
<li>Fix: Validator ScanParametersTest::run() - Doesn’t Print Parameter Type Correctly (<a href="https://github.com/steinbergmedia/vst3sdk/issues/142">Issue#142</a>).</li>
<li>Fix: validator.exe and moduleinfotool.exe Debug Version Throws Abort When Checking for Symlink (<a href="https://github.com/steinbergmedia/vst3sdk/issues/145">Issue#145</a>).</li>
<li>Fix: Undefined Behavior (UB) in Validation Test Suite causes test case to fail (<a href="https://github.com/steinbergmedia/vst3sdk/issues/77">Issue#77</a>).</li>
</ul>
</li>
<li>
<p><a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/What+is+the+VST+3+SDK/Plug-in+Test+Host.html">VST3PluginTestHost</a> v3.10.10:</p>
<ul>
<li>Fix: potential crash at start on Windows platform (<a href="https://forums.steinberg.net/t/win10-64bit-vst3plugintesthost-quits-silenty-on-start/1007817/5">Forum</a>).</li>
</ul>
</li>
</ul>
<hr>
<p>The SDK can be downloaded here:</p>




<p>Online documentation available under:<br>
<a href="https://steinbergmedia.github.io/vst3_dev_portal/pages/index.html">VST - VST 3 Developer Portal (steinbergmedia.github.io)</a></p>
<p>Main VST page: <a href="https://vstdev.org/">vstdev.org</a></p>
<p>Your Steinberg Team</p>
            </div>

            

                

            
          </div>
          <div itemprop="comment" id="post_3" itemscope="" itemtype="http://schema.org/Comment">
              <p>Congratulations! Great to see both MIDI 2.0 <em>and</em> the new MIT license together!</p>
<p>Pete<br>
Microsoft</p>
            </div>
          <div itemprop="comment" id="post_4" itemscope="" itemtype="http://schema.org/Comment">
              <p>Great news!</p>
<p>FYI the SSL cert for <a href="https://vstdev.org/" rel="noopener nofollow ugc">https://vstdev.org/</a> doesn’t seem to be correct.</p>
            </div>
          <div id="post_5" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forums.steinberg.net/u/rhansen"><span itemprop="name">rhansen</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-22T11:45:10Z">
                    October 22, 2025, 11:45am
                  </time>
                  <meta itemprop="dateModified" content="2025-10-22T11:45:10Z">
              <span itemprop="position">5</span>
              </span>
            </p>
            <p>I assume it is correct. The domain <a href="http://vstdev.org/">vstdev.org</a> just forwards to <a href="http://vstdevorg.github.io/vstdev.org">VSTDev</a> (on <a href="http://github.io/">github.io</a>) where the website resides. Is your browser complaining about that?</p>

            


            
          </div>
          <div id="post_6" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            
            <p>Thank you for the release and thank you for changing the Licensing. That is a monumental change!</p>

            


            
          </div>
          <div id="post_7" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            
            <p>it’s working now. not sure what was wrong earlier. thanks!</p>

            


            
          </div>
          <div id="post_8" itemprop="comment" itemscope="" itemtype="http://schema.org/Comment">
            <p><span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <a itemprop="url" rel="nofollow" href="https://forums.steinberg.net/u/rewgs"><span itemprop="name">rewgs</span></a>
                
              </span>



              <span>
                  <time itemprop="datePublished" datetime="2025-10-23T06:12:58Z">
                    October 23, 2025,  6:12am
                  </time>
                  <meta itemprop="dateModified" content="2025-10-23T06:12:58Z">
              <span itemprop="position">8</span>
              </span>
            </p>
            <p>Wow, this is huge!! Not just the MIT license, not just MIDI 2.0, but <em>Wayland</em> support as well?! This Linux nerd is <em>very</em> happy. Thank you all!!</p>

            


            
          </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Programming with Less Than Nothing (411 pts)]]></title>
            <link>https://joshmoody.org/blog/programming-with-less-than-nothing/</link>
            <guid>45678511</guid>
            <pubDate>Thu, 23 Oct 2025 05:42:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://joshmoody.org/blog/programming-with-less-than-nothing/">https://joshmoody.org/blog/programming-with-less-than-nothing/</a>, See on <a href="https://news.ycombinator.com/item?id=45678511">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>  <small>
By Josh Moody —
Published: <time datetime="2025-10-19T07:00:00.000Z"> Oct 19, 2025 </time>  </small>  <p>Dana. The interviewer. Friendly, efficient. She leans forward.</p>
<p>“So,” she says, “walk me through FizzBuzz.”</p>
<p>You could do this in your sleep. “Is JavaScript okay?”</p>
<p>She nods.</p>
<p>You open your laptop and begin.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> S</span><span> =</span><span> (</span><span>x</span><span>) </span><span>=&gt;</span><span> (</span><span>y</span><span>) </span><span>=&gt;</span><span> (</span><span>z</span><span>) </span><span>=&gt;</span><span> x</span><span>(</span><span>z</span><span>)(</span><span>y</span><span>(</span><span>z</span><span>));</span></span>
<span><span>let</span><span> K</span><span> =</span><span> (</span><span>x</span><span>) </span><span>=&gt;</span><span> (</span><span>y</span><span>) </span><span>=&gt;</span><span> x</span><span>;</span></span></code></pre>
<p>“That should do it,” you say to yourself. “Just need to combine
these a few times.”</p>
<p>Dana raises an eyebrow. You continue.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> I</span><span> =</span><span> S</span><span>(</span><span>K</span><span>)(</span><span>K</span><span>); </span><span>// x =&gt; x</span></span>
<span><span>let</span><span> B</span><span> =</span><span> S</span><span>(</span><span>K</span><span>(</span><span>S</span><span>))(</span><span>K</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; x(y(z))</span></span>
<span><span>let</span><span> C</span><span> =</span><span> S</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>S</span><span>))(</span><span>K</span><span>(</span><span>K</span><span>)); </span><span>// x =&gt; y =&gt; z =&gt; x(z)(y)</span></span>
<span><span>let</span><span> W</span><span> =</span><span> S</span><span>(</span><span>S</span><span>)(</span><span>K</span><span>(</span><span>I</span><span>)); </span><span>// x =&gt; y =&gt; x(y)(y)</span></span>
<span><span>let</span><span> T</span><span> =</span><span> C</span><span>(</span><span>I</span><span>); </span><span>// x =&gt; y =&gt; y(x)</span></span></code></pre>
<p>Bluebird, cardinal, warbler, thrush. Avian friends you know
well.</p>
<p>Dana looks puzzled. “Are we still doing FizzBuzz?”</p>
<p>“Getting there.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> V</span><span> =</span><span> B</span><span>(</span><span>C</span><span>)(</span><span>T</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; z(x)(y)</span></span>
<span><span>let</span><span> R</span><span> =</span><span> B</span><span>(</span><span>B</span><span>)(</span><span>T</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; y(z)(x)</span></span>
<span><span>let</span><span> B1</span><span> =</span><span> B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; w =&gt; x(y)(z)(w)</span></span>
<span><span>let</span><span> E</span><span> =</span><span> B</span><span>(</span><span>B1</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; w =&gt; v =&gt; x(y)(z(w(v)))</span></span>
<span><span>let</span><span> C_STAR</span><span> =</span><span> B</span><span>(</span><span>C</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; w =&gt; x(y)(w)(z)</span></span>
<span><span>let</span><span> C_STAR_STAR</span><span> =</span><span> B</span><span>(</span><span>C_STAR</span><span>); </span><span>// x =&gt; y =&gt; z =&gt; w =&gt; v =&gt; x(y)(z)(v)(w)</span></span></code></pre>
<p>Dana breaks away from the screen. “Typically I see a <code>for</code> loop
by now. Are you sure we’re talking about the same problem?”</p>
<p>“Trust me.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> TRUE</span><span> =</span><span> K</span><span>;</span></span>
<span><span>let</span><span> FALSE</span><span> =</span><span> K</span><span>(</span><span>I</span><span>);</span></span>
<span><span>let</span><span> NOT</span><span> =</span><span> V</span><span>(</span><span>FALSE</span><span>)(</span><span>TRUE</span><span>);</span></span></code></pre>
<p>She stands. “Okay,” she says finally. “Let me stop you there.”</p>
<p>“Something wrong?”</p>
<p>“You’re not the first candidate to show up here and reinvent
programming from first principles using lambda calculus.”</p>
<p>You stare, blankly. “Lambda calculus?”</p>
<p>“Look,” she says. “We’ve all read
<a href="https://tomstu.art/programming-with-nothing">Programming with Nothing</a>.
We’ve all seen
<a href="https://www.youtube.com/watch?v=RcVA8Nj6HEo">What is PLUS times PLUS</a>.
You’re not breaking any new ground here.”</p>
<p>You shake your head vigorously. “I would never be caught <em>dead</em>
using Lambda calculus. It’s a bloated language.”</p>
<p>Dana’s turn to stare. You move on to numbers.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ZERO</span><span> =</span><span> I</span><span>;</span></span>
<span><span>let</span><span> IS_ZERO</span><span> =</span><span> T</span><span>(</span><span>TRUE</span><span>);</span></span>
<span><span>let</span><span> SUCC</span><span> =</span><span> V</span><span>(</span><span>FALSE</span><span>); </span><span>// successor</span></span>
<span><span>let</span><span> PRED</span><span> =</span><span> T</span><span>(</span><span>FALSE</span><span>); </span><span>// predecessor</span></span>
<span><span>let</span><span> DECREMENT</span><span> =</span><span> S</span><span>(</span><span>W</span><span>(</span><span>IS_ZERO</span><span>))(</span><span>PRED</span><span>); </span><span>// clamped predecessor</span></span>
<span></span>
<span><span>let</span><span> ONE</span><span> =</span><span> SUCC</span><span>(</span><span>ZERO</span><span>);</span></span>
<span><span>let</span><span> TWO</span><span> =</span><span> SUCC</span><span>(</span><span>ONE</span><span>);</span></span>
<span><span>let</span><span> THREE</span><span> =</span><span> SUCC</span><span>(</span><span>TWO</span><span>);</span></span>
<span><span>let</span><span> FOUR</span><span> =</span><span> SUCC</span><span>(</span><span>THREE</span><span>);</span></span>
<span><span>let</span><span> FIVE</span><span> =</span><span> SUCC</span><span>(</span><span>FOUR</span><span>);</span></span>
<span><span>let</span><span> SIX</span><span> =</span><span> SUCC</span><span>(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> SEVEN</span><span> =</span><span> SUCC</span><span>(</span><span>SIX</span><span>);</span></span>
<span><span>let</span><span> EIGHT</span><span> =</span><span> SUCC</span><span>(</span><span>SEVEN</span><span>);</span></span>
<span><span>let</span><span> NINE</span><span> =</span><span> SUCC</span><span>(</span><span>EIGHT</span><span>);</span></span>
<span><span>let</span><span> TEN</span><span> =</span><span> SUCC</span><span>(</span><span>NINE</span><span>);</span></span></code></pre>
<p>Dana leans forward. She seems interested now. “Church numerals?”</p>
<p>“Barendregt. Church is too mainstream.”</p>
<p>You start with a lambda calculus expression.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD</span><span> =</span><span> (</span><span>m</span><span>) </span><span>=&gt;</span><span> (</span><span>n</span><span>) </span><span>=&gt;</span><span> IS_ZERO</span><span>(</span><span>m</span><span>)(</span><span>n</span><span>)(</span><span>SUCC</span><span>(</span><span>ADD</span><span>(</span><span>PRED</span><span>(</span><span>m</span><span>))(</span><span>n</span><span>)));</span></span></code></pre>
<p>“Dirty,” you mutter. “But it’s a start.”</p>
<p>You scribble in your notepad briefly. Showing <em>all</em> your work
would be tedious, but you should at least walk her through the
interesting parts.</p>
<p>“First, we add combinators until <code>n</code> is by itself on the right.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD</span><span> =</span><span> (</span><span>m</span><span>) </span><span>=&gt;</span><span> (</span><span>n</span><span>) </span><span>=&gt;</span></span>
<span><span>  S</span><span>(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>)(</span><span>m</span><span>))(</span><span>SUCC</span><span>))(</span><span>ADD</span><span>(</span><span>PRED</span><span>(</span><span>m</span><span>)))(</span><span>n</span><span>);</span></span></code></pre>
<p>“Ah,” she says. “Now we can remove <code>n</code>.”</p>
<p>She’s warming up.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD</span><span> =</span><span> (</span><span>m</span><span>) </span><span>=&gt;</span><span> S</span><span>(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>)(</span><span>m</span><span>))(</span><span>SUCC</span><span>))(</span><span>ADD</span><span>(</span><span>PRED</span><span>(</span><span>m</span><span>)));</span></span></code></pre>
<p>You do it again for <code>m</code></p>
<pre tabindex="0" data-language="js"><code><span><span>// let ADD = (m) =&gt;</span></span>
<span><span>//   S(B(S)(C_STAR_STAR(B)(C)(B(B(B))(IS_ZERO))(SUCC)))(</span></span>
<span><span>//     B(ADD)(PRED),</span></span>
<span><span>//   )(m);</span></span>
<span></span>
<span><span>let</span><span> ADD</span><span> =</span><span> S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C_STAR_STAR</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>)(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>))(</span><span>SUCC</span><span>)))(</span></span>
<span><span>  B</span><span>(</span><span>ADD</span><span>)(</span><span>PRED</span><span>),</span></span>
<span><span>);</span></span></code></pre>
<p><a href="https://en.wikipedia.org/wiki/Tacit_programming">Point-free.</a>
Clean. But not clean enough.</p>
<p>“Now for that pesky self reference…”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD_MAKER</span><span> =</span><span> (</span><span>self</span><span>) </span><span>=&gt;</span></span>
<span><span>  S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C_STAR_STAR</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>)(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>))(</span><span>SUCC</span><span>)))(</span></span>
<span><span>    B</span><span>(</span><span>self</span><span>)(</span><span>PRED</span><span>),</span></span>
<span><span>  );</span></span>
<span></span>
<span><span>let</span><span> Y</span><span> =</span><span> W</span><span>(</span><span>C</span><span>)(</span><span>S</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>(</span><span>W</span><span>(</span><span>C</span><span>)))); </span><span>// x =&gt; (y =&gt; x(y(y)))(y =&gt; x(y(y)))</span></span></code></pre>
<p>“Is that the… Y combinator?” Dana asks.</p>
<p>“Can’t recurse without it.”</p>
<p>“It’s JavaScript. You can literally do recursion without it.”</p>
<p>“It won’t be JavaScript for much longer.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> ADD</span><span> =</span><span> Y</span><span>(</span><span>ADD_MAKER</span><span>);</span></span>
<span></span>
<span><span>console</span><span>.</span><span>log</span><span>(</span><span>ADD</span><span>(</span><span>ONE</span><span>)(</span><span>TWO</span><span>));</span></span></code></pre>
<p>You run the program for the first time.</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>Uncaught RangeError: Maximum call stack size exceeded</span></span></code></pre>
<p>Dana smirks. “Well, yeah. JavaScript is an eager language. Can’t
use the Y combinator.”</p>
<p>You saw this coming. You paste your code into
<a href="https://joshmoody24.github.io/skoobert/">Skoobert</a>.</p>
<p>“Skoobert?” Dana asks.</p>
<p>“JavaScript but lazy,” you explain. “And without the bloat.”</p>
<p>You run it again.</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>[Function]</span></span></code></pre>
<p>You sigh. Perfect code tarnished by human consumption.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> extractNumber</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>S</span><span>(</span><span>C</span><span>(</span><span>IS_ZERO</span><span>)(</span><span>0</span><span>)))(</span><span>B</span><span>(</span><span>B</span><span>((</span><span>x</span><span>) </span><span>=&gt;</span><span> x</span><span> +</span><span> 1</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>PRED</span><span>))),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>console</span><span>.</span><span>log</span><span>(</span><span>extractNumber</span><span>(</span><span>ADD</span><span>(</span><span>ONE</span><span>)(</span><span>TWO</span><span>)));</span></span></code></pre>
<pre tabindex="0" data-language="plaintext"><code><span><span>3</span></span></code></pre>
<p>Back on track. You type faster.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> SUBTRACT</span><span> =</span><span> C</span><span>(</span></span>
<span><span>  Y</span><span>(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C_STAR_STAR</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>)(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>IS_ZERO</span><span>))(</span><span>DECREMENT</span><span>))))(</span></span>
<span><span>      C</span><span>(</span><span>S</span><span>(</span><span>K</span><span>(</span><span>I</span><span>))(</span><span>B</span><span>))(</span><span>PRED</span><span>),</span></span>
<span><span>    ),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> MULTIPLY</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>C</span><span>)(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>(</span><span>IS_ZERO</span><span>)(</span><span>ZERO</span><span>))))(</span></span>
<span><span>      B</span><span>(</span><span>B</span><span>(</span><span>S</span><span>(</span><span>ADD</span><span>)))(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>C</span><span>))(</span><span>PRED</span><span>)),</span></span>
<span><span>    ),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> LESS_THAN_OR_EQUAL</span><span> =</span><span> B1</span><span>(</span><span>IS_ZERO</span><span>)(</span><span>SUBTRACT</span><span>);</span></span>
<span><span>let</span><span> GREATER_THAN_OR_EQUAL</span><span> =</span><span> C</span><span>(</span><span>LESS_THAN_OR_EQUAL</span><span>);</span></span>
<span><span>let</span><span> GREATER_THAN</span><span> =</span><span> B1</span><span>(</span><span>NOT</span><span>)(</span><span>LESS_THAN_OR_EQUAL</span><span>);</span></span>
<span><span>let</span><span> LESS_THAN</span><span> =</span><span> B1</span><span>(</span><span>NOT</span><span>)(</span><span>GREATER_THAN_OR_EQUAL</span><span>);</span></span>
<span></span>
<span><span>let</span><span> RECURSE_SUB</span><span> =</span><span> B</span><span>(</span><span>B</span><span>(</span><span>W</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>))(</span><span>SUBTRACT</span><span>));</span></span>
<span></span>
<span><span>let</span><span> MOD</span><span> =</span><span> Y</span><span>(</span><span>B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>W</span><span>(</span><span>C_STAR</span><span>(</span><span>LESS_THAN</span><span>)))))(</span><span>RECURSE_SUB</span><span>));</span></span>
<span></span>
<span><span>let</span><span> DIVIDE</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>B</span><span>(</span><span>S</span><span>(</span><span>C</span><span>(</span><span>IS_ZERO</span><span>)(</span><span>ZERO</span><span>))))(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>C</span><span>)(</span><span>LESS_THAN</span><span>))(</span><span>ZERO</span><span>))))(</span></span>
<span><span>      B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>SUCC</span><span>)))(</span><span>RECURSE_SUB</span><span>),</span></span>
<span><span>    ),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span></code></pre>
<p>Numbers are done. Lists:</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> CONS</span><span> =</span><span> V</span><span>;</span></span>
<span><span>let</span><span> FIRST</span><span> =</span><span> T</span><span>(</span><span>TRUE</span><span>);</span></span>
<span><span>let</span><span> REST</span><span> =</span><span> T</span><span>(</span><span>FALSE</span><span>);</span></span>
<span><span>let</span><span> EMPTY</span><span> =</span><span> K</span><span>(</span><span>TRUE</span><span>);</span></span>
<span><span>let</span><span> END</span><span> =</span><span> EMPTY</span><span>;</span></span>
<span><span>let</span><span> IS_EMPTY</span><span> =</span><span> T</span><span>(</span><span>K</span><span>(</span><span>K</span><span>(</span><span>FALSE</span><span>)));</span></span>
<span></span>
<span><span>let</span><span> NTH</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>B</span><span>(</span><span>C</span><span>(</span><span>IS_ZERO</span><span>))(</span><span>FIRST</span><span>))))(</span></span>
<span><span>    C</span><span>(</span><span>B</span><span>(</span><span>C</span><span>)(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>REST</span><span>))))(</span><span>PRED</span><span>),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> CONCAT</span><span> =</span><span> B</span><span>(</span><span>T</span><span>(</span><span>CONS</span><span>))(</span><span>FOLD</span><span>);</span></span>
<span></span>
<span><span>let</span><span> RANGE</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  C</span><span>(</span></span>
<span><span>    B</span><span>(</span><span>C</span><span>)(</span></span>
<span><span>      B</span><span>(</span><span>B</span><span>(</span><span>C</span><span>))(</span></span>
<span><span>        B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>LESS_THAN_OR_EQUAL</span><span>)))(</span></span>
<span><span>          B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>CONS</span><span>)))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>SUCC</span><span>)),</span></span>
<span><span>        ),</span></span>
<span><span>      ),</span></span>
<span><span>    ),</span></span>
<span><span>  )(</span><span>EMPTY</span><span>),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> FOLD</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>IS_EMPTY</span><span>))))(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>B</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>FIRST</span><span>))))))(</span><span>C</span><span>(</span><span>B</span><span>)(</span><span>REST</span><span>)),</span></span>
<span><span>  ),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> MAP</span><span> =</span><span> C</span><span>(</span><span>B</span><span>(</span><span>C</span><span>)(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>FOLD</span><span>))(</span><span>B</span><span>(</span><span>CONS</span><span>))))(</span><span>EMPTY</span><span>);</span></span></code></pre>
<p>More pretty-printing:</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> renderList</span><span> =</span><span> (</span><span>fmt</span><span>) </span><span>=&gt;</span><span> (</span><span>sep</span><span>) </span><span>=&gt;</span><span> (</span><span>xs</span><span>) </span><span>=&gt;</span></span>
<span><span>  IS_EMPTY</span><span>(</span><span>xs</span><span>)(</span><span>""</span><span>)(</span></span>
<span><span>    fmt</span><span>(</span><span>FIRST</span><span>(</span><span>xs</span><span>)) </span><span>+</span></span>
<span><span>      IS_EMPTY</span><span>(</span><span>REST</span><span>(</span><span>xs</span><span>))(</span><span>""</span><span>)(</span></span>
<span><span>        sep</span><span> +</span><span> renderList</span><span>(</span><span>fmt</span><span>)(</span><span>sep</span><span>)(</span><span>REST</span><span>(</span><span>xs</span><span>)),</span></span>
<span><span>      ),</span></span>
<span><span>  );</span></span>
<span></span>
<span><span>let</span><span> showLines</span><span> =</span><span> (</span><span>fmt</span><span>) </span><span>=&gt;</span><span> (</span><span>list</span><span>) </span><span>=&gt;</span><span> renderList</span><span>(</span><span>fmt</span><span>)(</span><span>"</span><span>\n</span><span>"</span><span>)(</span><span>list</span><span>);</span></span></code></pre>
<p>“I won’t bother making the formatters point-free, since they’re
just output,” you say, as if Dana cares.</p>
<p>Sanity check:</p>
<pre tabindex="0" data-language="js"><code><span><span>console</span><span>.</span><span>log</span><span>(</span></span>
<span><span>  showLines</span><span>(</span><span>extractNumber</span><span>)(</span><span>MAP</span><span>(</span><span>RANGE</span><span>(</span><span>ONE</span><span>)(</span><span>THREE</span><span>))(</span><span>SUCC</span><span>)),</span></span>
<span><span>);</span></span></code></pre>
<pre tabindex="0" data-language="plaintext"><code><span><span>2</span></span>
<span><span>3</span></span>
<span><span>4</span></span></code></pre>
<p>Dana has given up following along.</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> DECIMAL2</span><span> =</span><span> B</span><span>(</span><span>ADD</span><span>)(</span><span>MULTIPLY</span><span>(</span><span>TEN</span><span>)); </span><span>// base 10</span></span>
<span></span>
<span><span>let</span><span> CHAR_A</span><span> =</span><span> ONE</span><span>;</span></span>
<span><span>let</span><span> CHAR_B</span><span> =</span><span> TWO</span><span>;</span></span>
<span><span>let</span><span> CHAR_C</span><span> =</span><span> THREE</span><span>;</span></span>
<span><span>let</span><span> CHAR_D</span><span> =</span><span> FOUR</span><span>;</span></span>
<span><span>let</span><span> CHAR_E</span><span> =</span><span> FIVE</span><span>;</span></span>
<span><span>let</span><span> CHAR_F</span><span> =</span><span> SIX</span><span>;</span></span>
<span><span>let</span><span> CHAR_G</span><span> =</span><span> SEVEN</span><span>;</span></span>
<span><span>let</span><span> CHAR_H</span><span> =</span><span> EIGHT</span><span>;</span></span>
<span><span>let</span><span> CHAR_I</span><span> =</span><span> NINE</span><span>;</span></span>
<span><span>let</span><span> CHAR_J</span><span> =</span><span> TEN</span><span>;</span></span>
<span><span>let</span><span> CHAR_K</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>ONE</span><span>);</span></span>
<span><span>let</span><span> CHAR_L</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>TWO</span><span>);</span></span>
<span><span>let</span><span> CHAR_M</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>THREE</span><span>);</span></span>
<span><span>let</span><span> CHAR_N</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>FOUR</span><span>);</span></span>
<span><span>let</span><span> CHAR_O</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> CHAR_P</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>SIX</span><span>);</span></span>
<span><span>let</span><span> CHAR_Q</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>SEVEN</span><span>);</span></span>
<span><span>let</span><span> CHAR_R</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>EIGHT</span><span>);</span></span>
<span><span>let</span><span> CHAR_S</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>NINE</span><span>);</span></span>
<span><span>let</span><span> CHAR_T</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>ZERO</span><span>);</span></span>
<span><span>let</span><span> CHAR_U</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>ONE</span><span>);</span></span>
<span><span>let</span><span> CHAR_V</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>TWO</span><span>);</span></span>
<span><span>let</span><span> CHAR_W</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>THREE</span><span>);</span></span>
<span><span>let</span><span> CHAR_X</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>FOUR</span><span>);</span></span>
<span><span>let</span><span> CHAR_Y</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> CHAR_Z</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>SIX</span><span>);</span></span>
<span><span>let</span><span> CHAR_0</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>SEVEN</span><span>);</span></span>
<span><span>let</span><span> CHAR_1</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>EIGHT</span><span>);</span></span>
<span><span>let</span><span> CHAR_2</span><span> =</span><span> DECIMAL2</span><span>(</span><span>TWO</span><span>)(</span><span>NINE</span><span>);</span></span>
<span><span>let</span><span> CHAR_3</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>ZERO</span><span>);</span></span>
<span><span>let</span><span> CHAR_4</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>ONE</span><span>);</span></span>
<span><span>let</span><span> CHAR_5</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>TWO</span><span>);</span></span>
<span><span>let</span><span> CHAR_6</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>THREE</span><span>);</span></span>
<span><span>let</span><span> CHAR_7</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>FOUR</span><span>);</span></span>
<span><span>let</span><span> CHAR_8</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> CHAR_9</span><span> =</span><span> DECIMAL2</span><span>(</span><span>THREE</span><span>)(</span><span>SIX</span><span>);</span></span>
<span></span>
<span><span>let</span><span> ARRAY</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>C</span><span>(</span><span>IS_EMPTY</span><span>)))(</span><span>END</span><span>))))(</span></span>
<span><span>    C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>))(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>))(</span><span>CONS</span><span>)),</span></span>
<span><span>  ),</span></span>
<span><span>)(</span><span>I</span><span>);</span></span>
<span></span>
<span><span>let</span><span> FIZZ</span><span> =</span><span> ARRAY</span><span>(</span><span>CHAR_F</span><span>)(</span><span>CHAR_I</span><span>)(</span><span>CHAR_Z</span><span>)(</span><span>CHAR_Z</span><span>)(</span><span>END</span><span>);</span></span>
<span><span>let</span><span> BUZZ</span><span> =</span><span> ARRAY</span><span>(</span><span>CHAR_B</span><span>)(</span><span>CHAR_U</span><span>)(</span><span>CHAR_Z</span><span>)(</span><span>CHAR_Z</span><span>)(</span><span>END</span><span>);</span></span>
<span><span>let</span><span> FIZZBUZZ</span><span> =</span><span> CONCAT</span><span>(</span><span>FIZZ</span><span>)(</span><span>BUZZ</span><span>);</span></span></code></pre>
<p>Printing strings:</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> extractString</span><span> =</span><span> (</span><span>lst</span><span>) </span><span>=&gt;</span></span>
<span><span>  IS_EMPTY</span><span>(</span><span>lst</span><span>)(</span><span>""</span><span>)(</span></span>
<span><span>    NTH</span><span>(</span><span>letters</span><span>)(</span><span>PRED</span><span>(</span><span>FIRST</span><span>(</span><span>lst</span><span>))) </span><span>+</span><span> extractString</span><span>(</span><span>REST</span><span>(</span><span>lst</span><span>)),</span></span>
<span><span>  );</span></span>
<span></span>
<span><span>console</span><span>.</span><span>log</span><span>(</span><span>extractString</span><span>(</span><span>FIZZBUZZ</span><span>));</span></span></code></pre>
<pre tabindex="0" data-language="plaintext"><code><span><span>fizzbuzz</span></span></code></pre>
<p>Just a few more loose ends. Numbers to digits. Digits to
strings. Strings to output.</p>
<!-- prettier-ignore -->
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> array</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  (</span><span>h</span><span>) </span><span>=&gt;</span><span> (</span><span>acc</span><span>) </span><span>=&gt;</span><span> (</span><span>x</span><span>) </span><span>=&gt;</span></span>
<span><span>    x</span><span> ===</span><span> END</span><span> ?</span><span> acc</span><span>(</span><span>END</span><span>) </span><span>:</span><span> h</span><span>((</span><span>t</span><span>) </span><span>=&gt;</span><span> acc</span><span>(</span><span>CONS</span><span>(</span><span>x</span><span>)(</span><span>t</span><span>))),</span></span>
<span><span>)(</span><span>I</span><span>);</span></span>
<span></span>
<span><span>let</span><span> letters</span><span> =</span></span>
<span><span>  array</span><span>(</span><span>"a"</span><span>)(</span><span>"b"</span><span>)(</span><span>"c"</span><span>)(</span><span>"d"</span><span>)(</span><span>"e"</span><span>)(</span><span>"f"</span><span>)(</span><span>"g"</span><span>)(</span><span>"h"</span><span>)(</span><span>"i"</span><span>)(</span><span>"j"</span><span>)</span></span>
<span><span>  (</span><span>"k"</span><span>)(</span><span>"l"</span><span>)(</span><span>"m"</span><span>)(</span><span>"n"</span><span>)(</span><span>"o"</span><span>)(</span><span>"p"</span><span>)(</span><span>"q"</span><span>)(</span><span>"r"</span><span>)(</span><span>"s"</span><span>)(</span><span>"t"</span><span>)(</span><span>"u"</span><span>)</span></span>
<span><span>  (</span><span>"v"</span><span>)(</span><span>"w"</span><span>)(</span><span>"x"</span><span>)(</span><span>"y"</span><span>)(</span><span>"z"</span><span>)</span></span>
<span><span>  (</span><span>"0"</span><span>)(</span><span>"1"</span><span>)(</span><span>"2"</span><span>)(</span><span>"3"</span><span>)(</span><span>"4"</span><span>)(</span><span>"5"</span><span>)(</span><span>"6"</span><span>)(</span><span>"7"</span><span>)(</span><span>"8"</span><span>)(</span><span>"9"</span><span>)(</span><span>END</span><span>);</span></span>
<span></span>
<span><span>let</span><span> DIGITS_NUMERAL</span><span> =</span></span>
<span><span>  ARRAY</span><span>(</span><span>CHAR_0</span><span>)(</span><span>CHAR_1</span><span>)(</span><span>CHAR_2</span><span>)(</span><span>CHAR_3</span><span>)(</span><span>CHAR_4</span><span>)</span></span>
<span><span>  (</span><span>CHAR_5</span><span>)(</span><span>CHAR_6</span><span>)(</span><span>CHAR_7</span><span>)(</span><span>CHAR_8</span><span>)(</span><span>CHAR_9</span><span>)(</span><span>END</span><span>);</span></span>
<span></span>
<span><span>let</span><span> NUMBER_TO_DIGIT_LIST</span><span> =</span><span> Y</span><span>(</span></span>
<span><span>  C</span><span>(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>)(</span></span>
<span><span>      C</span><span>(</span><span>B</span><span>(</span><span>B</span><span>)(</span><span>B</span><span>(</span><span>S</span><span>(</span><span>B</span><span>(</span><span>S</span><span>)(</span><span>IS_ZERO</span><span>)))(</span><span>B</span><span>(</span><span>CONCAT</span><span>))))(</span><span>C</span><span>(</span><span>DIVIDE</span><span>)(</span><span>TEN</span><span>)),</span></span>
<span><span>    ),</span></span>
<span><span>  )(</span><span>C</span><span>(</span><span>B</span><span>(</span><span>CONS</span><span>)(</span><span>C</span><span>(</span><span>MOD</span><span>)(</span><span>TEN</span><span>)))(</span><span>EMPTY</span><span>)),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>let</span><span> NUMBER_TO_STRING</span><span> =</span><span> S</span><span>(</span></span>
<span><span>  C</span><span>(</span><span>B</span><span>(</span><span>FOLD</span><span>)(</span><span>NUMBER_TO_DIGIT_LIST</span><span>))(</span></span>
<span><span>    B</span><span>(</span><span>CONS</span><span>)(</span><span>NTH</span><span>(</span><span>DIGITS_NUMERAL</span><span>)),</span></span>
<span><span>  ),</span></span>
<span><span>)(</span><span>B</span><span>(</span><span>T</span><span>(</span><span>EMPTY</span><span>))(</span><span>K</span><span>(</span><span>I</span><span>)));</span></span></code></pre>
<p>You take a deep breath and look Dana in the eye.</p>
<p>“And now… the main event.”</p>
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> FIFTEEN</span><span> =</span><span> DECIMAL2</span><span>(</span><span>ONE</span><span>)(</span><span>FIVE</span><span>);</span></span>
<span><span>let</span><span> ONE_HUNDRED</span><span> =</span><span> MULTIPLY</span><span>(</span><span>TEN</span><span>)(</span><span>TEN</span><span>);</span></span>
<span></span>
<span><span>let</span><span> FIZZBUZZ_RESULT</span><span> =</span><span> MAP</span><span>(</span><span>RANGE</span><span>(</span><span>ONE</span><span>)(</span><span>ONE_HUNDRED</span><span>))(</span></span>
<span><span>  S</span><span>(</span></span>
<span><span>    B</span><span>(</span><span>S</span><span>(</span><span>C</span><span>(</span><span>R</span><span>(</span><span>FIZZBUZZ</span><span>))(</span><span>FIFTEEN</span><span>)))(</span></span>
<span><span>      B</span><span>(</span><span>S</span><span>(</span><span>C</span><span>(</span><span>R</span><span>(</span><span>FIZZ</span><span>))(</span><span>THREE</span><span>)))(</span></span>
<span><span>        B</span><span>(</span><span>C</span><span>(</span><span>C</span><span>(</span><span>R</span><span>(</span><span>BUZZ</span><span>))(</span><span>FIVE</span><span>)))(</span><span>NUMBER_TO_STRING</span><span>),</span></span>
<span><span>      ),</span></span>
<span><span>    ),</span></span>
<span><span>  )(</span><span>B</span><span>(</span><span>B</span><span>(</span><span>IS_ZERO</span><span>))(</span><span>MOD</span><span>)),</span></span>
<span><span>);</span></span>
<span></span>
<span><span>console</span><span>.</span><span>log</span><span>(</span><span>showLines</span><span>(</span><span>extractString</span><span>)(</span><span>FIZZBUZZ_RESULT</span><span>));</span></span></code></pre>
<p>“Are you satisfied?” she cries. But you aren’t. Not yet.</p>
<p>Variables are for wimps. You replace each with its definition.</p>


<!-- prettier-ignore -->
<pre tabindex="0" data-language="js"><code><span><span>let</span><span> FIZZBUZZ_RESULT</span><span> =</span><span> ((((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)((</span><span>K</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))))))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)((</span><span>K</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))((((((((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)((</span><span>K</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))((</span><span>K</span><span>)(</span><span>K</span><span>))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)((((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))((((</span><span>S</span><span>)(</span><span>S</span><span>))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(</span><span>S</span><span>))((((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))(</span><span>K</span><span>))))((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))))))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))))(((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>)))))))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>))))((((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((</span><span>K</span><span>)(</span><span>K</span><span>)))(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))((</span><span>K</span><span>)(((</span><span>S</span><span>)(</span><span>K</span><span>))(</span><span>K</span><span>))))(((((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)(((((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>))(((</span><span>S</span><span>)((</span><span>K</span><span>)(</span><span>S</span><span>)))(</span><span>K</span><span>)))(</span><span>S</span><span>)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))(((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))(((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))(((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))))((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K))))))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((((S)((K)(S)))(K))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K)))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(S))((K)(((S)(K))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))))((K)(K)))))))(((((S)((K)(S)))(K))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))((((((((((((((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)((K)(S)))(K))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)((K)((K)(((S)(K))(K)))))))))((K)(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))))))(((S)(K))(K)))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((S)(K))(K))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))(((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))(((S)(K))(K))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))((S)((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(((S)(K))(K))))))))))((K)(K)))))))(((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(K))))((K)(((S)(K))(K)))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((S)(S))((K)(((S)(K))(K))))(((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K))))((K)(((S)(K))(K))))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K)))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(S))((K)(((S)(K))(K))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(((S)((K)(S)))(K))))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((S)(((S)((K)(S)))(K)))((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))((((S)(S))((K)(((S)(K))(K))))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))))(((((S)((K)(S)))(K))((S)(((((S)((K)(S)))(K))(S))((((((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))))(((S)((K)(S)))(K)))(((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K))))(((((S)((K)(S)))(K))((((S)((K)(S)))(K))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((S)((((S)(S))((K)(((S)(K))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K)))))))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)((K)(((S)(K))(K))))(((S)((K)(S)))(K))))(((((S)(((((S)((K)(S)))(K))(((S)((K)(S)))(K)))(S)))((K)(K)))(((S)(K))(K)))((K)(((S)(K))(K))))))))))))));</span></span></code></pre>
<p>It’s time. You press enter.</p>
<p>Several seconds go by.</p>
<p>The tension is invigorating.</p>
<p>Suddenly, the terminal fills with output:</p>
<pre tabindex="0" data-language="plaintext"><code><span><span>1</span></span>
<span><span>2</span></span>
<span><span>fizz</span></span>
<span><span>4</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>7</span></span>
<span><span>8</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>11</span></span>
<span><span>fizz</span></span>
<span><span>13</span></span>
<span><span>14</span></span>
<span><span>fizzbuzz</span></span>
<span><span>16</span></span>
<span><span>17</span></span>
<span><span>fizz</span></span>
<span><span>19</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>22</span></span>
<span><span>23</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>26</span></span>
<span><span>fizz</span></span>
<span><span>28</span></span>
<span><span>29</span></span>
<span><span>fizzbuzz</span></span>
<span><span>31</span></span>
<span><span>32</span></span>
<span><span>fizz</span></span>
<span><span>34</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>37</span></span>
<span><span>38</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>41</span></span>
<span><span>fizz</span></span>
<span><span>43</span></span>
<span><span>44</span></span>
<span><span>fizzbuzz</span></span>
<span><span>46</span></span>
<span><span>47</span></span>
<span><span>fizz</span></span>
<span><span>49</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>52</span></span>
<span><span>53</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>56</span></span>
<span><span>fizz</span></span>
<span><span>58</span></span>
<span><span>59</span></span>
<span><span>fizzbuzz</span></span>
<span><span>61</span></span>
<span><span>62</span></span>
<span><span>fizz</span></span>
<span><span>64</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>67</span></span>
<span><span>68</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>71</span></span>
<span><span>fizz</span></span>
<span><span>73</span></span>
<span><span>74</span></span>
<span><span>fizzbuzz</span></span>
<span><span>76</span></span>
<span><span>77</span></span>
<span><span>fizz</span></span>
<span><span>79</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>82</span></span>
<span><span>83</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span>
<span><span>86</span></span>
<span><span>fizz</span></span>
<span><span>88</span></span>
<span><span>89</span></span>
<span><span>fizzbuzz</span></span>
<span><span>91</span></span>
<span><span>92</span></span>
<span><span>fizz</span></span>
<span><span>94</span></span>
<span><span>buzz</span></span>
<span><span>fizz</span></span>
<span><span>97</span></span>
<span><span>98</span></span>
<span><span>fizz</span></span>
<span><span>buzz</span></span></code></pre>
<p>You lean back, exhausted but triumphant.</p>
<p>Dana is dead.</p>
<hr>
<h2 id="what-the-heck-did-i-just-read">What the heck did I just read?</h2>
<p>The culmination of months of effort!</p>
<p><a href="https://en.wikipedia.org/wiki/Combinatory_logic">Combinatory logic</a>
is a model of computation that is extremely minimal. All you
start with are two functions: <code>S</code> and <code>K</code>.</p>
<ul>
<li><code>S</code> is a function that, given three functions <code>x</code>, <code>y</code>, and
<code>z</code>, returns <code>x(z)(y(z))</code>.</li>
<li><code>K</code> is a function that, given two functions <code>x</code> and <code>y</code>,
returns <code>x</code>.</li>
</ul>
<p>You can compute anything you want just by passing these two
functions into each other. For example, the identity function
<code>I = (x) =&gt; x</code> can be expressed as <code>S(K)(K)</code>.</p>
<p>And you can build up arbitrarily complex functions from there.
There is no limit.</p>
<p>Combinatory logic is basically
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a>
without variables. Despite this limitation, combinatory logic is
still Turing complete.</p>
<p>It is also extremely difficult to understand.</p>
<h2 id="further-reading">Further reading</h2>
<p>If you found this post interesting (whether or not you
understood it), the following resources would be good places
start exploring:</p>
<ul>
<li><a href="https://raymondsmullyan.com/books/to-mock-a-mockingbird-and-other-logic-puzzles/"><em>To Mock a Mockingbird</em>, by Raymond Smullyan</a></li>
<li><a href="https://tomstu.art/programming-with-nothing"><em>Programming with Nothing</em>, by Tom Stuart</a></li>
<li><a href="https://aphyr.com/tags/interviews">Kyle Kingsbury’s <em>Technical Interview</em> series</a></li>
</ul>
<p>In particular, I strongly recommend reading <em>To Mock a Mockbird</em>
if you want to understand combinatory logic. It’s the most fun,
accessible way to learn combinatory logic from scratch. It took
me about a month’s spare time to work through it. Time well
spent!</p>
<h3 id="skoobert">Skoobert</h3>
<p>After reading <em>To Mock a Mockingbird</em>, I wanted to program in
combinatory logic but found existing tools lacking. So I spent a
weekend building Skoobert, which is intended to be the ideal
programming language for experimenting with lambda calculus and
combinatory logic. Give it a try and let me know what you think!</p>
<ul>
<li><a href="https://github.com/joshmoody24/skoobert">Skoobert on GitHub</a></li>
<li><a href="https://joshmoody24.github.io/skoobert/">Skoobert playground</a></li>
<li><a href="https://joshmoody24.github.io/skoobert/?example=sk-fizzbuzz-annotated">FizzBuzz in Skoobert (with explanatory comments)</a></li>
</ul>  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sodium-ion batteries have started to appear in cars and home storage (158 pts)]]></title>
            <link>https://cleantechnica.com/2025/10/22/the-sodium-ion-battery-revolution-has-started/</link>
            <guid>45677243</guid>
            <pubDate>Thu, 23 Oct 2025 01:36:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cleantechnica.com/2025/10/22/the-sodium-ion-battery-revolution-has-started/">https://cleantechnica.com/2025/10/22/the-sodium-ion-battery-revolution-has-started/</a>, See on <a href="https://news.ycombinator.com/item?id=45677243">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	<hr>

<p><strong><em>Support CleanTechnica's work through <a href="https://cleantechnica.substack.com/subscribe" target="_blank">a Substack subscription</a> or <a href="https://cleantechnica.fundjournalism.org/contribute/" target="_blank">on Stripe</a>.</em></strong></p><hr>

<p><span>Sodium-ion batteries have been in the works for years, and now sodium-ion batteries have started to appear in cars and home storage. JAC, in a partnership with Volkswagen, has been shipping a vehicle called the Sehol or </span><a href="https://cnevpost.com/2023/02/23/hina-battery-puts-sodium-ion-batteries-in-sehol-e10x/"><span>E10X</span></a><span> with sodium-ion batteries since 2023. Recently, Bluetti introduced the </span><a href="https://www.bluettipower.com/products/sodium-ion-battery-pioneer-na"><span>Pioneer Na</span></a><span>(sodium) portable power station. This is just the beginning.</span></p>
<p><a href="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs.jpeg"><img decoding="async" src="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs.jpeg" alt="" width="2560" height="1280" srcset="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs.jpeg 2560w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-400x200.jpeg 400w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-800x400.jpeg 800w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-768x384.jpeg 768w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-1536x768.jpeg 1536w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-specs-2048x1024.jpeg 2048w" sizes="(max-width: 2560px) 100vw, 2560px"></a></p>
<p><a href="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles.png"><img decoding="async" src="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles.png" alt="" width="2417" height="1200" srcset="https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles.png 2417w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-400x199.png 400w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-800x397.png 800w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-768x381.png 768w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-1536x763.png 1536w, https://cleantechnica.com/wp-content/uploads/2025/10/Pioneer-Na-Bluetti-Sodium-Ion-Battery-power-cycles-2048x1017.png 2048w" sizes="(max-width: 2417px) 100vw, 2417px"></a></p>
<figure id="attachment_362338" aria-describedby="caption-attachment-362338"><a href="https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-scaled.jpg"><img loading="lazy" decoding="async" src="https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-scaled.jpg" alt="" width="2560" height="1698" srcset="https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-scaled.jpg 2560w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-400x265.jpg 400w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-800x531.jpg 800w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-768x509.jpg 768w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-1536x1019.jpg 1536w, https://cleantechnica.com/wp-content/uploads/2025/10/JAC-Sehol-E10X-2048x1358.jpg 2048w" sizes="auto, (max-width: 2560px) 100vw, 2560px"></a><figcaption id="caption-attachment-362338">Photo of <a href="https://en.wikipedia.org/wiki/Sehol_E10X#/media/File:2021_JAC_Sehol_E10X_%28front%29.jpg">JAC Sehol E10X</a> by “<a href="https://commons.wikimedia.org/wiki/User:User3204">User3204</a>” (<a href="https://creativecommons.org/licenses/by-sa/4.0" target="_blank" rel="noopener">CC BY-SA 4.0</a> license).</figcaption></figure>
<p><a href="https://www.zkhina.com/"><span>HiNa</span></a><span> supplied sodium-ion batteries for JAC Motors in 2023. Early batteries had lower gravimetric </span><a href="https://www.batterydesign.net/sehol-e10x-sodium-ion/"><span>energy density</span></a><span> (145 Wh/kg) and volumetric energy density (330 Wh/liter) than LFP, but sodium-ion batteries have already improved since then. They have outstanding temperature range, yielding 88% retention at -20°C. For reference</span><span>, </span><span>the discharge capacity of </span><a href="https://www.sciencedirect.com/science/article/abs/pii/S0925838819325137"><span>NMC</span></a><span> at 0°C, −10°C and −20°C is only 80%, 53%, and 23% of that at 25°C. The HiNa batteries had a cycle life of 4,500 cycles with 83% retention and a 2C charge rate, but even better sodium-ion batteries are on their way.</span></p>
<p><span>HiNa opened a 1 GWh sodium-ion battery </span><a href="https://cnevpost.com/2022/12/02/hina-gwh-sodium-ion-battery-production-line-first-product/"><span>factory</span></a><span> in December 2022. Since then, both BYD and CATL have opened huge sodium-ion battery factories. The investment is there and indicates a permanent presence for sodium.</span></p>
<p><span>Since then, CATL has thrown its hat into the ring with the </span><a href="http://www.apple.com/"><span>Naxtra</span></a><span> sodium-ion battery, with 175 Wh/kg and 10,000 lifetime cycles along with operation from -40°C to 70°C. CATL is planning a start-stop battery for trucks using the technology. It has the potential to replace lead-acid batteries. CATL has announced battery pricing at the cell level in volume at </span><a href="https://energynews.biz/catls-19-kwh-sodium-ion-claims-face-reality-check-in-1-82-billion-market/"><span>$19/kWh</span></a><span>.&nbsp;</span></p>
<p><span>BYD, a major competitor to CATL, has not stood still either. BYD opened a sodium-ion battery factory in 2024, and is producing a large sodium-ion battery energy storage system (BESS) called </span><a href="https://cnevpost.com/2024/04/11/byd-launches-energy-storage-mc-cube-t/"><span>MC Cube-T</span></a><span> with a capacity of 6.4 MWh. BYD’s sodium battery factory has a massive planned capacity of </span><a href="https://www.linkedin.com/pulse/byd-unveils-first-high-performance-sodium-ion-battery-grid-scale-gwnqc"><span>30 GWh</span></a><span> annually. These companies mean business. Sodium ion is here to stay.</span></p>
<p><span>These developments point the way to much more. The cost of sodium battery materials is much lower than for any lithium battery. There are no resource bottleneck materials like cobalt or lithium to contend with. In addition, aluminum can be used for electrodes, whereas lithium requires copper for one of the electrodes. Carbon or graphite and separator materials will be similar, but in all other respects, sodium has much lower material costs. Compared to LFP, sodium does not require phosphorous, a substance that is almost exclusively sourced from one state in north Africa, nor lithium, a relatively abundant but more expensive substance than sodium. LFP cannot compete on material costs or temperature range, and both BYD and CATL expect to phase it out first in energy storage.</span><span>&nbsp;&nbsp;</span></p>
<h3><b>Implications are Clear for the Future</b></h3>
<p><span>Availability of such a low-cost, wide-temperature-range battery makes a wide range of applications possible that were not available before. While batteries have enabled passenger car developments, they have been somewhat stymied in large mobile power applications like shipping and electric trucks. That day is gone now. At these costs, electric shipping is achievable and the debate over alternative fuels will fall off quickly as applications are realized. Batteries with similar characteristics, like LFP, already offer reasonable range and cargo-carrying capacity for long-distance </span><a href="https://cleantechnica.com/2025/10/14/island-ports-enable-long-distance-electric-shipping/"><span>shipping</span></a><span>. These developments push that over the top and set electric shipping at parity with legacy fossil fuel shipping and beyond when maintenance and all cost factors are considered. </span></p>
<p><span>In cars, sodium puts passenger vehicles well beyond parity into the “why are we doing this anymore?” category in comparison with ICE (internal combustion engines). Combustion makes no sense whatsoever when the alternative lasts for hundreds of thousands of miles and works with ambient temperatures from -40°C to 70°C. There are literally no more excuses any more. Not range, not charging speed, not cost. The first sodium-ion battery cars were already shipping in China years ago and have been shipped to South America. In both places, they seriously undercut the first cost of any equivalent internal combustion vehicle. Now, in a short time, they have improved to compete and beat lithium-ion batteries.</span></p>
<p><span>As of now, LFP does the bulk of truck applications in China, where over 90% of the world’s heavy electric trucks exist. Sodium-ion batteries are expected to displace LFP in energy storage and heavy truck applications. The implications are far wider than that, however. For other applications sensitive to energy storage cost, the cost drops dramatically. In particular, swap stations and fast charging stations with battery buffering drop, changing the picture dramatically. Implementation of those should increase with lower capital costs. Electric shipping will go from slow lane to fast lane as the advantages of sodium are realized. Already, CATL has announced a partnership with </span><a href="https://cleantechnica.com/2025/10/15/ports-as-power-plants-inside-the-maersk-catl-alliance-for-maritime-decarbonization/"><span>Maersk</span></a><span>, hinting at future developments in that area.</span></p>
<p><span>It is likely other applications, like replacements for lead-acid batteries with sodium, will appear, but many others are likely. Renewables will benefit greatly, with costs for storage so low that the complaints of variability and cost vanish. While existing lithium batteries have changed the world in so many ways, the presence of sodium-ion batteries can be expected to transform our world faster. The sheer quantity of batteries and electrification made possible by the presence of lower-cost, higher-capability batteries makes the changes in electrification to date pale by comparison. About the only field left to conquer in battery storage is high-density, high-power applications like aircraft, but more breakthroughs are on their way in the form of lithium-sulfur and solid-state batteries.&nbsp;</span></p>
<div>

<hr>

<p><em>Sign up for <a href="https://cleantechnica.substack.com/subscribe" target="_blank">CleanTechnica's Weekly Substack for Zach and Scott's in-depth analyses and high level summaries</a>, sign up for <a href="https://mailchi.mp/cleantechnica/daily-newsletter">our daily newsletter</a>, and <a href="https://news.google.com/publications/CAAqLQgKIidDQklTRndnTWFoTUtFV05zWldGdWRHVmphRzVwWTJFdVkyOXRLQUFQAQ">follow us on Google News</a>!</em></p><hr>

<center><bold>Advertisement</bold></center>

<center><!-- CT new after-post -->
<ins data-ad-client="ca-pub-1552008901061842" data-ad-slot="4461458457"></ins>
</center>&nbsp;

<hr>

<p><em>Have a tip for CleanTechnica? Want to advertise? Want to suggest a guest for our CleanTech Talk podcast? <a href="https://cleantechnica.com/contact/">Contact us here</a>.</em></p><hr>

<p><em>Sign up for our daily newsletter for <a target="_blank" href="https://mailchi.mp/cleantechnica/daily-newsletter">15 new cleantech stories a day</a>. Or sign up for <a target="_blank" href="https://mailchi.mp/cleantechnica/weekly-newsletter">our weekly one on top stories of the week</a> if daily is too frequent.</em></p><hr>

<iframe loading="lazy" width="840" height="472" src="https://www.youtube.com/embed/-MqvLMZLKhQ?si=zabvSZsxJRi-jDgk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<hr>

<p><em><span>CleanTechnica uses affiliate links. See our policy <a href="https://cleantechnica.com/cleantechnica-editorial-ethics/">here</a>.</span></em></p><p><b><em><a href="https://cleantechnica.com/cleantechnica-comment-policy/">CleanTechnica's Comment Policy</a></em></b></p>

<hr>

</div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Summary of the Amazon DynamoDB Service Disruption in US-East-1 Region (321 pts)]]></title>
            <link>https://aws.amazon.com/message/101925/</link>
            <guid>45677139</guid>
            <pubDate>Thu, 23 Oct 2025 01:19:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://aws.amazon.com/message/101925/">https://aws.amazon.com/message/101925/</a>, See on <a href="https://news.ycombinator.com/item?id=45677139">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-rg-n="Col" data-eb-item-id="ams#c1"> 
                  <p>We wanted to provide you with some additional information about the service disruption that occurred in the N. Virginia (us-east-1) Region on October 19 and 20, 2025. While the event started at 11:48 PM PDT on October 19 and ended at 2:20 PM PDT on October 20, there were three distinct periods of impact to customer applications. First, between 11:48 PM on October 19 and 2:40 AM on October 20, Amazon DynamoDB experienced increased API error rates in the N. Virginia (us-east-1) Region. Second, between 5:30 AM and 2:09 PM on October 20, Network Load Balancer (NLB) experienced increased connection errors for some load balancers in the N. Virginia (us-east-1) Region. This was caused by health check failures in the NLB fleet, which resulted in increased connection errors on some NLBs. Third, between 2:25 AM and 10:36 AM on October 20, new EC2 instance launches failed and, while instance launches began to succeed from 10:37 AM, some newly launched instances experienced connectivity issues which were resolved by 1:50 PM.</p> 
                  <p><b>DynamoDB</b></p> 
                  <p>Between 11:48 PM PDT on October 19 and 2:40 AM PDT on October 20, customers experienced increased Amazon DynamoDB API error rates in the N. Virginia (us-east-1) Region. During this period, customers and other AWS services with dependencies on DynamoDB were unable to establish new connections to the service. The incident was triggered by a latent defect within the service’s automated DNS management system that caused endpoint resolution failures for DynamoDB.</p> 
                  <p>Many of the largest AWS services rely extensively on DNS to provide seamless scale, fault isolation and recovery, low latency, and locality. Services like DynamoDB maintain hundreds of thousands of DNS records to operate a very large heterogeneous fleet of load balancers in each Region. Automation is crucial to ensuring that these DNS records are updated frequently to add additional capacity as it becomes available, to correctly handle hardware failures, and to efficiently distribute traffic to optimize customers’ experience. This automation has been designed for resilience, allowing the service to recover from a wide variety of operational issues. In addition to providing a public regional endpoint, this automation maintains additional DNS endpoints for several dynamic DynamoDB variants including a FIPS compliant endpoint, an IPv6 endpoint, and account-specific endpoints. The root cause of this issue was a latent race condition in the DynamoDB DNS management system that resulted in an incorrect empty DNS record for the service’s regional endpoint (<b>dynamodb.us-east-1.amazonaws.com</b>) that the automation failed to repair. To explain this event, we need to share some details about the DynamoDB DNS management architecture. The system is split across two independent components for availability reasons. The first component, the DNS Planner, monitors the health and capacity of the load balancers and periodically creates a new DNS plan for each of the service’s endpoints consisting of a set of load balancers and weights. We produce a single regional DNS plan, as this greatly simplifies capacity management and failure mitigation when capacity is shared across multiple endpoints, as is the case with the recently launched IPv6 endpoint and the public regional endpoint. A second component, the DNS Enactor, which is designed to have minimal dependencies to allow for system recovery in any scenario, enacts DNS plans by applying the required changes in the Amazon Route53 service. For resiliency, the DNS Enactor operates redundantly and fully independently in three different Availability Zones (AZs). Each of these independent instances of the DNS Enactor looks for new plans and attempts to update Route53 by replacing the current plan with a new plan using a Route53 transaction, assuring that each endpoint is updated with a consistent plan even when multiple DNS Enactors attempt to update it concurrently. The race condition involves an unlikely interaction between two of the DNS Enactors. The normal way things work a DNS Enactor picks up the latest plan and begins working through the service endpoints to apply this plan. This process typically completes rapidly and does an effective job of keeping DNS state freshly updated. Before it begins to apply a new plan, the DNS Enactor makes a one-time check that its plan is newer than the previously applied plan. As the DNS Enactor makes its way through the list of endpoints, it is possible to encounter delays as it attempts a transaction and is blocked by another DNS Enactor updating the same endpoint. In these cases, the DNS Enactor will retry each endpoint until the plan is successfully applied to all endpoints. Right before this event started, one DNS Enactor experienced unusually high delays needing to retry its update on several of the DNS endpoints. As it was slowly working through the endpoints, several other things were also happening. First, the DNS Planner continued to run and produced many newer generations of plans. Second, one of the other DNS Enactors then began applying one of the newer plans and rapidly progressed through all of the endpoints. The timing of these events triggered the latent race condition. When the second Enactor (applying the newest plan) completed its endpoint updates, it then invoked the plan clean-up process, which identifies plans that are significantly older than the one it just applied and deletes them. At the same time that this clean-up process was invoked, the first Enactor (which had been unusually delayed) applied its much older plan to the regional DDB endpoint, overwriting the newer plan. The check that was made at the start of the plan application process, which ensures that the plan is newer than the previously applied plan, was stale by this time due to the unusually high delays in Enactor processing. Therefore, this did not prevent the older plan from overwriting the newer plan. The second Enactor’s clean-up process then deleted this older plan because it was many generations older than the plan it had just applied. As this plan was deleted, all IP addresses for the regional endpoint were immediately removed. Additionally, because the active plan was deleted, the system was left in an inconsistent state that prevented subsequent plan updates from being applied by any DNS Enactors. This situation ultimately required manual operator intervention to correct.</p> 
                  <p>When this issue occurred at 11:48 PM PDT, all systems needing to connect to the DynamoDB service in the N. Virginia (us-east-1) Region via the public endpoint immediately began experiencing DNS failures and failed to connect to DynamoDB. This included customer traffic as well as traffic from internal AWS services that rely on DynamoDB. Customers with DynamoDB global tables were able to successfully connect to and issue requests against their replica tables in other Regions, but experienced prolonged replication lag to and from the replica tables in the N. Virginia (us-east-1) Region. Engineering teams for impacted AWS services were immediately engaged and began to investigate. By 12:38 AM on October 20, our engineers had identified DynamoDB’s DNS state as the source of the outage. By 1:15 AM, the temporary mitigations that were applied enabled some internal services to connect to DynamoDB and repaired key internal tooling that unblocked further recovery. By 2:25 AM, all DNS information was restored, and all global tables replicas were fully caught up by 2:32 AM. Customers were able to resolve the DynamoDB endpoint and establish successful connections as cached DNS records expired between 2:25 AM and 2:40 AM. This completed recovery from the primary service disruption event.</p> 
                  <p><b>Amazon EC2</b></p> 
                  <p>Between 11:48 PM PDT on October 19 and 1:50 PM PDT on October 20, customers experienced increased EC2 API error rates, latencies, and instance launch failures in the N. Virginia (us-east-1) Region. Existing EC2 instances that had been launched prior to the start of the event remained healthy and did not experience any impact for the duration of the event. After resolving the DynamoDB DNS issue at 2:25 AM PDT, customers continued to see increased errors for launches of new instances. Recovery started at 12:01 PM PDT with full EC2 recovery occurring at 1:50 PM PDT. During this period new instance launches failed with either a “request limit exceeded” or “insufficient capacity” error.</p> 
                  <p>To understand what happened, we need to share some information about a few subsystems that are used for the management of EC2 instance launches, as well as for configuring network connectivity for newly launched EC2 instances. The first subsystem is DropletWorkflow Manager (DWFM), which is responsible for the management of all the underlying physical servers that are used by EC2 for the hosting of EC2 instances – we call these servers “droplets”. The second subsystem is Network Manager, which is responsible for the management and propagation of network state to all EC2 instances and network appliances. Each DWFM manages a set of droplets within each Availability Zone and maintains a lease for each droplet currently under management. This lease allows DWFM to track the droplet state, ensuring that all actions from the EC2 API or within the EC2 instance itself, such as shutdown or reboot operations originating from the EC2 instance operating system, result in the correct state changes within the broader EC2 systems. As part of maintaining this lease, each DWFM host has to check in and complete a state check with each droplet that it manages every few minutes.</p> 
                  <p>Starting at 11:48 PM PDT on October 19, these DWFM state checks began to fail as the process depends on DynamoDB and was unable to complete. While this did not affect any running EC2 instance, it did result in the droplet needing to establish a new lease with a DWFM before further instance state changes could happen for the EC2 instances it is hosting. Between 11:48 PM on October 19 and 2:24 AM on October 20, leases between DWFM and droplets within the EC2 fleet slowly started to time out.</p> 
                  <p>At 2:25 AM PDT, with the recovery of the DynamoDB APIs, DWFM began to re-establish leases with droplets across the EC2 fleet. Since any droplet without an active lease is not considered a candidate for new EC2 launches, the EC2 APIs were returning “insufficient capacity errors” for new incoming EC2 launch requests. DWFM began the process of reestablishing leases with droplets across the EC2 fleet; however, due to the large number of droplets, efforts to establish new droplet leases took long enough that the work could not be completed before they timed out. Additional work was queued to reattempt establishing the droplet lease. At this point, DWFM had entered a state of congestive collapse and was unable to make forward progress in recovering droplet leases. Since this situation had no established operational recovery procedure, engineers took care in attempting to resolve the issue with DWFM without causing further issues. After attempting multiple mitigation steps, at 4:14 AM engineers throttled incoming work and began selective restarts of DWFM hosts to recover from this situation. Restarting the DWFM hosts cleared out the DWFM queues, reduced processing times, and allowed droplet leases to be established. By 5:28 AM, DWFM had established leases with all droplets within the N. Virginia (us-east-1) Region and new launches were once again starting to succeed, although many requests were still seeing “request limit exceeded” errors due to the request throttling that had been introduced to reduce overall request load.</p> 
                  <p>When a new EC2 instance is launched, a system called Network Manager propagates the network configuration that allows the instance to communicate with other instances within the same Virtual Private Cloud (VPC), other VPC network appliances, and the Internet. At 5:28 AM PDT, shortly after the recovery of DWFM, Network Manager began propagating updated network configurations to newly launched instances and instances that had been terminated during the event. Since these network propagation events had been delayed by the issue with DWFM, a significant backlog of network state propagations needed to be processed by Network Manager within the N. Virginia (us-east-1) Region. As a result, at 6:21 AM, Network Manager started to experience increased latencies in network propagation times as it worked to process the backlog of network state changes. While new EC2 instances could be launched successfully, they would not have the necessary network connectivity due to the delays in network state propagation. Engineers worked to reduce the load on Network Manager to address network configuration propagation times and took action to accelerate recovery. By 10:36 AM, network configuration propagation times had returned to normal levels, and new EC2 instance launches were once again operating normally.</p> 
                  <p>The final step towards EC2 recovery was to fully remove the request throttles that had been put in place to reduce the load on the various EC2 subsystems. As API calls and new EC2 instance launch requests stabilized, at 11:23 AM PDT our engineers began relaxing request throttles as they worked towards full recovery. At 1:50 PM, all EC2 APIs and new EC2 instance launches were operating normally.</p> 
                  <p><b>Network Load Balancer (NLB)</b></p> 
                  <p>The delays in network state propagations for newly launched EC2 instances also caused impact to the Network Load Balancer (NLB) service and AWS services that use NLB. Between 5:30 AM and 2:09 PM PDT on October 20 some customers experienced increased connection errors on their NLBs in the N. Virginia (us-east-1) Region. NLB is built on top of a highly scalable, multi-tenant architecture that provides load balancing endpoints and routes traffic to backend targets, which are typically EC2 instances. The architecture also makes use of a separate health check subsystem that regularly executes health checks against all nodes within the NLB architecture and will remove any nodes from service that are considered unhealthy.</p> 
                  <p>During the event the NLB health checking subsystem began to experience increased health check failures. This was caused by the health checking subsystem bringing new EC2 instances into service while the network state for those instances had not yet fully propagated. This meant that in some cases health checks would fail even though the underlying NLB node and backend targets were healthy. This resulted in health checks alternating between failing and healthy. This caused NLB nodes and backend targets to be removed from DNS, only to be returned to service when the next health check succeeded.</p> 
                  <p>Our monitoring systems detected this at 6:52 AM, and engineers began working to remediate the issue. The alternating health check results increased the load on the health check subsystem, causing it to degrade, resulting in delays in health checks and triggering automatic AZ DNS failover to occur. For multi-AZ load balancers, this resulted in capacity being taken out of service. In this case, an application experienced increased connection errors if the remaining healthy capacity was insufficient to carry the application load. At 9:36 AM, engineers disabled automatic health check failovers for NLB, allowing all available healthy NLB nodes and backend targets to be brought back into service. This resolved the increased connection errors to affected load balancers. Shortly after EC2 recovered, we re-enabled automatic DNS health check failover at 2:09 PM.</p> 
                  <p><b>Other AWS Services</b></p> 
                  <p>Between October 19 at 11:51 PM PDT and October 20 at 2:15 PM PDT, customers experienced API errors and latencies for Lambda functions in the N. Virginia (us-east-1) Region. Initially, DynamoDB endpoint issues prevented function creation and updates, caused processing delays for SQS/Kinesis event sources and invocation errors. By 2:24 AM, service operations recovered except for SQS queue processing, which remained impacted because an internal subsystem responsible for polling SQS queues failed and did not recover automatically. We restored this subsystem at 4:40 AM and processed all message backlogs by 6:00 AM. Starting at 7:04 AM, NLB health check failures triggered instance terminations leaving a subset of Lambda internal systems under-scaled. With EC2 launches still impaired, we throttled Lambda Event Source Mappings and asynchronous invocations to prioritize latency-sensitive synchronous invocations. By 11:27 AM, sufficient capacity was restored, and errors subsided. We then gradually reduced throttling and processed all backlogs by 2:15 PM, and normal service operations resumed.</p> 
                  <p>Between October 19 at 11:45 PM PDT and October 20 at 2:20 PM PDT, customers experienced container launch failures and cluster scaling delays across both Amazon Elastic Container Service (ECS), Elastic Kubernetes Service (EKS), and Fargate in the N. Virginia (us-east-1) Region. These services were recovered by 2:20 PM.</p> 
                  <p>Between October 19 at 11:56 PM PDT and October 20 at 1:20 PM PDT, Amazon Connect customers experienced elevated errors handling calls, chats, and cases in the N. Virginia (us-east-1) Region. Following the restoration of DynamoDB endpoints, most Connect features recovered except customers continued to experience elevated errors for chats until 5:00 AM. Starting at 7:04 AM, customers again experienced increased errors handling new calls, chats, tasks, emails, and cases, which was caused by impact to the NLBs used by Connect as well as increased error rates and latencies for Lambda function invocations. Inbound callers experienced busy tones, error messages, or failed connections. Both agent-initiated and API-initiated outbound calls failed. Answered calls experienced prompt playback failures, routing failures to agents, or dead-air audio. Additionally, agents experienced elevated errors handling contacts, and some agents were unable to sign in. Customers also faced elevated errors accessing APIs and Contact Search. Real-time, Historical dashboards, and Data Lake data updates were delayed, and all data will be backfilled by October 28. Service availability was restored at 1:20 PM as Lambda function invocation errors recovered.</p> 
                  <p>On October 19, between 11:51 PM and 9:59 AM PDT, customers experienced AWS Security Token Service (STS) API errors and latency in the N. Virginia (us-east-1) Region. STS recovered at 1:19 AM after the restoration of internal DynamoDB endpoints. Between 8:31 AM and 9:59 AM, STS API error rates and latency increased again as a result of NLB health check failures. By 9:59 AM, we recovered from the NLB health check failures, and the service began normal operations.</p> 
                  <p>Between October 19 at 11:51 PM PDT and October 20 at 1:25 AM PDT, AWS customers attempting to sign into the AWS Management Console using an IAM user experienced increased authentication failures due to underlying DynamoDB issues in the N. Virginia (us-east-1) Region. Customers with IAM Identity Center configured in N. Virginia (us-east-1) Region were also unable to sign in using Identity Center. Customers using their root credential, and customers using identity federation configured to use signin.aws.amazon.com experienced errors when trying to log into the AWS Management Console in regions outside of the N. Virginia (us-east-1) Region. As DynamoDB endpoints became accessible at 1:25 AM, the service began normal operations.</p> 
                  <p>Between October 19 at 11:47 PM PDT and October 20 at 2:21 AM PDT, customers experienced API errors when creating and modifying Redshift clusters or issuing queries against existing clusters in the N. Virginia (us-east-1) Region. Redshift query processing relies on DynamoDB endpoints to read and write data from clusters. As DynamoDB endpoints recovered, Redshift query operations resumed and by 2:21 AM, Redshift customers were successfully querying clusters as well as creating and modifying cluster configurations. However, some Redshift compute clusters remained impaired and unavailable for querying after the DynamoDB endpoints were restored to normal operations. As credentials expire for cluster nodes without being refreshed, Redshift automation triggers workflows to replace the underlying EC2 hosts with new instances. With EC2 launches impaired, these workflows were blocked, putting clusters in a “modifying” state that prevented query processing and making the cluster unavailable for workloads. At 6:45 AM, our engineers took action to stop the workflow backlog from growing and when Redshift clusters started to launch replacement instances at 2:46 PM, the backlog of workflows began draining. By 4:05 AM PDT October 21, AWS operators completed restoring availability for clusters impaired by replacement workflows. In addition to cluster availability impairment, between October 19 at 11:47 PM and October 20 at 1:20 AM, Amazon Redshift customers in all AWS Regions were unable to use IAM user credentials for executing queries due to a Redshift defect that used an IAM API in the N. Virginia (us-east-1) Region to resolve user groups. As a result, IAM’s impairment during this period caused Redshift to be unable to execute these queries. Redshift customers in AWS Regions who use “local” users to connect to their Redshift clusters were unaffected.</p> 
                  <p>Other AWS services that rely on DynamoDB, new EC2 instance launches, Lambda invocations, and Fargate task launches such as Managed Workflows for Apache Airflow, Outposts lifecycle operations, and AWS Support Center were also impacted in the N. Virginia (us-east-1) Region.</p> 
                  <p>We are making several changes as a result of this operational event. We have already disabled the DynamoDB DNS Planner and the DNS Enactor automation worldwide. In advance of re-enabling this automation, we will fix the race condition scenario and add additional protections to prevent the application of incorrect DNS plans. For NLB, we are adding a velocity control mechanism to limit the capacity a single NLB can remove when health check failures cause AZ failover. For EC2, we are building an additional test suite to augment our existing scale testing, which will exercise the DWFM recovery workflow to identify any future regressions. We will improve the throttling mechanism in our EC2 data propagation systems to rate limit incoming work based on the size of the waiting queue to protect the service during periods of high load. Finally, as we continue to work through the details of this event across all AWS services, we will look for additional ways to avoid impact from a similar event in the future, and how to further reduce time to recovery.</p> 
                  <p><b>In closing</b></p> 
                  <p>We apologize for the impact this event caused our customers. While we have a strong track record of operating our services with the highest levels of availability, we know how critical our services are to our customers, their applications and end users, and their businesses. We know this event impacted many customers in significant ways. We will do everything we can to learn from this event and use it to improve our availability even further.</p> 
                  <p><b><a href="https://aws.amazon.com/premiumsupport/technology/pes/">Return to Post-Event Summaries</a></b></p> 
                 </div></div>]]></description>
        </item>
    </channel>
</rss>