<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 12 May 2024 20:00:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Solar Storm Knocks Out Farmers' Tractor GPS Systems During Peak Planting Season (112 pts)]]></title>
            <link>https://www.404media.co/solar-storm-knocks-out-tractor-gps-systems-during-peak-planting-season/</link>
            <guid>40334391</guid>
            <pubDate>Sun, 12 May 2024 13:42:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.404media.co/solar-storm-knocks-out-tractor-gps-systems-during-peak-planting-season/">https://www.404media.co/solar-storm-knocks-out-tractor-gps-systems-during-peak-planting-season/</a>, See on <a href="https://news.ycombinator.com/item?id=40334391">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <article>
          <div>
              
<!--kg-card-begin: html-->
  <div>
    <h5>Subscribe</h5>
    <div>
      <p>Join the newsletter to get the latest updates.</p>
      <form data-members-form="subscribe">
        
        
        <div>
          
          <p>
            Great! Check your inbox and click the link.
          </p>
        </div>
        <div>
          
          <p>
            Please enter a valid email address.
          </p>
        </div>
      </form>
    </div>
  </div>

<!--kg-card-end: html-->
<div><p>🖥️</p><p><i><em>404 Media is a journalist-owned website that is written by real people for real people. Sign up to support independent journalism.</em></i></p></div><p>The solar storm that brought the aurora borealis to large parts of the United States this weekend also broke critical GPS and precision farming functionality in tractors and agricultural equipment during a critical point of the planting season, 404 Media has learned. These outages caused many farmers to fully stop their planting operations for the moment.</p><p>One chain of John Deere dealerships warned farmers that the accuracy of some of the systems used by tractors are “extremely compromised,” and that farmers who planted crops during periods of inaccuracy are going to face problems when they go to harvest, according to text messages obtained by 404 Media and an <a href="https://landmarkimp.com/news/news/blog/geomagnetic-storm-affecting-gps-signals--may-2024/?ref=404media.co"><u>update posted by the dealership</u></a>. The outages highlight how vulnerable modern tractors are to satellite disruptions, which experts have been warning about for years. </p><p>“All the tractors are sitting at the ends of the field right now shut down because of the solar storm,” Kevin Kenney, a farmer in Nebraska, told me. “No GPS. We’re right in the middle of corn planting. I’ll bet the commodity markets spike Monday.”&nbsp;</p><p>Specifically, some GPS systems were temporarily knocked offline. This caused intermittent connections and accuracy problems with “Real-Time Kinematic” (RTK) systems, which connect to John Deere “<a href="https://www.deere.com/en/technology-products/precision-ag-technology/guidance/starfire-7500-receiver/?ref=404media.co"><u>StarFire” receivers</u></a> that are in modern tractors and agricultural equipment. RTK systems use GPS plus a stream of <a href="https://www.fullinefarm.com/fckimages/pdf/differential.pdf?ref=404media.co"><u>constantly-updating “correction” data</u></a> from a fixed point on the ground to achieve centimeter-level positional accuracy for planting crops, tilling fields, spraying fertilizer and herbicide, etc.&nbsp;</p><p>According to updates from Landmark Implement, which owns John Deere dealerships in Kansas and Nebraska, the solar storm ruined the accuracy of RTK systems for many farmers using John Deere tractors. Similar systems in other brands of tractors have also been compromised, the dealer and farmers I spoke to said.</p><p>“Due to the way the RTK network works, the base stations were sending out corrections that have been affected by the geomagnetic storm and were causing drastic shifts in the field and even some heading changes that were drastic,” the dealership told farmers Saturday morning. “When you head back into these fields to side dress, spray, cultivate, harvest, etc. over the next several months, we expect that the rows won't be where the AutoPath lines think they are. This will only affect the fields that are planted during times of reduced accuracy. It is most likely going to be difficult—if not impossible—to make AutoPath work in these fields as the inaccuracy is most likely inconsistent.”</p><div><p>🚜</p><p><b><strong>Has your farm been affected by the solar storm? I would love to hear from you. Using a non-work device, you can message me securely on Signal at +1 202 505 1702. Otherwise, send me an email at jason@404media.co.</strong></b></p></div><p>These automated systems have become critical to modern farming (often called “<a href="https://www.scientificamerican.com/article/precision-farming/?ref=404media.co"><u>precision agriculture</u></a>”), with farmers using increasingly automated tractors to plant crops in perfectly straight lines with uniform spacing. Precision agriculture has greatly increased the yield of farms, and a <a href="https://www.ers.usda.gov/webdocs/publications/105894/eib-248.pdf?v=4429.1&amp;ref=404media.co"><u>2023 report by the US Department of Agriculture</u></a> noted that more than 50 percent of corn, cotton, rice, sorghum, soybeans, and winter wheat are planted and harvested with “automated guidance.” Many modern tractors essentially steer themselves, with the oversight of a farmer in the cab. If the planting or harvesting is even slightly off, the tractors or harvesters could damage crops or plant crooked or inconsistently, which can cause problems during the growing season and ultimately reduce yield.</p><p>Landmark Implement first warned farmers about the problems Friday in a text message blast obtained by 404 Media: “Please be advised that there is a significant solar flare and space weather activity currently affecting GPS and RTK networks. This severe geomagnetic storm is the worst since 2005 and is forecasted to continue throughout the weekend.” That message advised farmers to shut down their reliance on the networks entirely.</p><p>The National Oceanic and Atmospheric Administration (NOAA) said that what’s happening is the “most extreme geomagnetic storm since 2003,” and that “there have been preliminary reports of power grid irregularities, degradation to high-frequency communications, GPS, and possibly satellite navigation.” NOAA said the storm <a href="https://www.swpc.noaa.gov/news/historic-geomagnetic-storm-continues?ref=404media.co" rel="noreferrer">will continue into Monday</a>. Geomagnetic storms happen when there is a coronal mass ejection from the sun, which is an eruption of electromagnetic radiation that can impact GPS, the electric grid, and other communications. &nbsp;</p><p>Farmers and experts I spoke to told me that GPS outages in farming are a very big deal. Landmark Implement has not given any further updates to farmers, and John Deere did not respond to a request for comment. Farmers I spoke to seem to think that the situation is getting better, but solar storms are expected to continue hitting Earth over the next day or so.&nbsp;</p><p>“In the corn belt, May 15 is a critical date to get corn planted,” Willie Cade of Repair.org, who has been working to pass legislation that would make tractors more repairable, told me. “But you don’t want to go out there with your equipment right now. Oh my God, the corn belt can’t get its corn in the ground by May 15? It’s huge. I’m thinking it’s going to go away, but if it doesn’t, shit.”</p><p>Tom Schwarz, who owns an organic farm in Nebraska, told me he had to stop planting on Friday and Saturday because of the issue, and said that the outage, combined with a bad weather forecast in the next few days, is threatening the small time window that he has to plant corn.</p><p>“When you have your window, you have to go,” Schwarz said. “We’ve just had two beautiful days from a weather perspective of being able to plant and you know, we just have to sit here. We’re not getting anything done, and it’s driving everyone nuts.”&nbsp;</p><p>Schwarz says organic farms like his rely heavily on precision farming features, because rows of crops are planted very tightly together to prevent weeds from growing in the spaces between plants. “We used to have markers that would scratch a line in the ground that you could then use to kind of drive by eye,” he said. “Now, we plant so tight in terms of how much the tractor can go side to side and how much the equipment can go side to side that if we aren't absolutely perfect, it just doesn't work. You just physically can’t drive that straight [without guidance]. If you're sitting up there in a tractor seat, you can't steer fast enough or well enough to not kill the crop because we're so tight on clearances.” &nbsp;</p><p>The fact that this happened also highlights how vulnerable modern food supplies are to GPS outages. Modern society as a whole is obviously very reliant on GPS, but experts have warned that tractors that rely on internet connections and on satellites are a particularly concerning attack vector.&nbsp;</p><p>Last year, an outage with Inmarsat satellites caused tractors in Australia and New Zealand to “<a href="https://www.smh.com.au/national/farmers-crippled-by-satellite-failure-as-gps-guided-tractors-grind-to-a-halt-20230418-p5d1de.html?ref=404media.co"><u>grind to a halt</u></a>,” and the remote bricking of <a href="https://www.csoonline.com/article/572811/remote-bricking-of-ukrainian-tractors-raises-agriculture-security-concerns.html?ref=404media.co"><u>connected tractors in Ukraine</u></a> in 2022 showed a type of vulnerability many hadn’t considered before. Experts have warned about the <a href="https://www.bbc.com/news/science-environment-61336659?ref=404media.co"><u>possibility of a cyber attack</u></a> targeting tractors or the <a href="https://www.nature.com/articles/s42256-022-00440-4?ref=404media.co"><u>satellites they rely on</u></a> as a major threat to our food supply.&nbsp;</p><p>Farmers in online communities all over the internet have been discussing the GPS outages, with some saying that they’ve been running into “very weird issues.” One <a href="https://thefarmingforum.co.uk/index.php?threads%2Fsolar-storm.409445%2F=&amp;ref=404media.co#post-9299330"><u>farmer in Manitoba posted</u></a> “Yesterday was a shit show. Going to be some stripes in the fields. Today it’s back to normal.” I also messaged with two people who work on separate farms and posted in a <a href="https://www.reddit.com/r/farming/comments/1cp2m78/anyone_else_lose_gps_right_now/?ref=404media.co"><u>Reddit thread called</u></a> “Anyone else lose GPS right now?” I agreed not to use their names because they do not own the farms and were not authorized to speak to the press.</p><p>One of them, in southern Ontario, said that they use a positioning system called TopCon, which normally offers “sub-inch accuracy,” they said. “Yesterday I saw issues I’ve never seen before. The really puzzling part was when it was actually seeing enough satellites to function from time to time it was wandering off position by 3 or even 6 feet at times! And I know that the system thought it was on target because the coverage map on the monitor in the tractor was showing that I was exactly on the row, but physically I was off by a huge amount.”&nbsp;</p><p>The other farmer from Reddit told me that they were in the middle of planting wheat when problems arose. “We didn't shut down, we just carried on and however it went in is how it went in lol,” they said. “I probably take the most pride in my work of those on this farm so the boss said I had to lower my standards of quality for the sake of getting the crop in. It wasn't the common problem of the lines just not matching up, the GPS shading thought it was spot on to where it should be but a lot of the time it either left a gap or overlapped by as much as a few feet. It wasn't even uniform enough that I could recenter the tractor.” </p>
                    <div>
    <div>
      <p>About the author</p>
      <p>Jason is a cofounder of 404 Media. He was previously the editor-in-chief of Motherboard. He loves the Freedom of Information Act and surfing.</p>
      
    </div>
      <p><img data-src="/content/images/2023/08/404-jason-01-copy.jpeg" alt="Jason Koebler" src="https://www.404media.co/content/images/2023/08/404-jason-01-copy.jpeg">  
      </p>
  </div>
          </div>
        </article>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[23% of bachelor's degrees and 43% of master's degrees have a negative ROI (167 pts)]]></title>
            <link>https://reason.com/2024/05/10/nearly-half-of-all-masters-degrees-arent-worth-getting/</link>
            <guid>40333471</guid>
            <pubDate>Sun, 12 May 2024 11:08:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reason.com/2024/05/10/nearly-half-of-all-masters-degrees-arent-worth-getting/">https://reason.com/2024/05/10/nearly-half-of-all-masters-degrees-arent-worth-getting/</a>, See on <a href="https://news.ycombinator.com/item?id=40333471">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
																		<article>
	<header>
							<p>
				<a href="https://reason.com/category/education/college/">College</a>
			</p>
				
		
					<h2>According to new research, 23 percent of bachelor's degree programs and 43 percent of master's degree programs have a negative ROI.</h2>
				<p>
								
				
						<span>|</span>
			<time datetime="2024-05-10T15:23:31-04:00">5.10.2024 3:23 PM</time>
			
</p>
					
										<div>
						<div>
			<picture>
									<source type="image/webp" data-lazy-srcset="https://d2eehagpk5cl65.cloudfront.net/img/c2400x1350-w2400-q80/uploads/2024/05/dreamstime_xxl_32533865-2400x1350.jpg.webp 2400w,https://d2eehagpk5cl65.cloudfront.net/img/c1200x675-w1200-q80/uploads/2024/05/dreamstime_xxl_32533865-1200x675.jpg.webp 1200w,https://d2eehagpk5cl65.cloudfront.net/img/c800x450-w800-q80/uploads/2024/05/dreamstime_xxl_32533865-800x450.jpg.webp 800w,https://d2eehagpk5cl65.cloudfront.net/img/c600x338-w600-q80/uploads/2024/05/dreamstime_xxl_32533865-600x338.jpg.webp 600w,https://d2eehagpk5cl65.cloudfront.net/img/c331x186-w331-q80/uploads/2024/05/dreamstime_xxl_32533865-331x186.jpg.webp 331w,https://d2eehagpk5cl65.cloudfront.net/img/c1200x675-w1200-q80/uploads/2024/05/dreamstime_xxl_32533865-1200x675.jpg.webp 1200w,https://d2eehagpk5cl65.cloudfront.net/img/c1920x1080-w1920-q80/uploads/2024/05/dreamstime_xxl_32533865-1920x1080.jpg.webp 1920w" sizes="(min-width: 753px) 70vw, (min-width: 1190px) 768px, 100vw">
											<source type="image/jpeg" data-lazy-srcset="https://d2eehagpk5cl65.cloudfront.net/img/c2400x1350-w2400-q80/uploads/2024/05/dreamstime_xxl_32533865-2400x1350.jpg 2400w,https://d2eehagpk5cl65.cloudfront.net/img/c1200x675-w1200-q80/uploads/2024/05/dreamstime_xxl_32533865-1200x675.jpg 1200w,https://d2eehagpk5cl65.cloudfront.net/img/c800x450-w800-q80/uploads/2024/05/dreamstime_xxl_32533865-800x450.jpg 800w,https://d2eehagpk5cl65.cloudfront.net/img/c600x338-w600-q80/uploads/2024/05/dreamstime_xxl_32533865-600x338.jpg 600w,https://d2eehagpk5cl65.cloudfront.net/img/c331x186-w331-q80/uploads/2024/05/dreamstime_xxl_32533865-331x186.jpg 331w,https://d2eehagpk5cl65.cloudfront.net/img/c1200x675-w1200-q80/uploads/2024/05/dreamstime_xxl_32533865-1200x675.jpg 1200w,https://d2eehagpk5cl65.cloudfront.net/img/c1920x1080-w1920-q80/uploads/2024/05/dreamstime_xxl_32533865-1920x1080.jpg 1920w" sizes="(min-width: 753px) 70vw, (min-width: 1190px) 768px, 100vw">
													<img src="https://d2eehagpk5cl65.cloudfront.net/img/c800x450-w800-q80/uploads/2024/05/dreamstime_xxl_32533865-800x450.jpg" width="1200" height="675" title="Graduation caps are held in the air with the sky in the background" alt="Graduation caps are held in the air with the sky in the background | Photo 32533865 © Hxdbzxy | Dreamstime.com" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201200%20675'%3E%3C/svg%3E" data-lazy-src="https://d2eehagpk5cl65.cloudfront.net/img/c800x450-w800-q80/uploads/2024/05/dreamstime_xxl_32533865-800x450.jpg">
			</picture>
		</div>
							<p><span>
					 (Photo 32533865 © Hxdbzxy | Dreamstime.com)				</span>
					</p>
								</div>
							
	</header>
	<div>
							<p><span>Is college worth it? Well, it depends on what degree you're getting and where you're getting it, according to a new <a href="https://freopp.org/does-college-pay-off-a-comprehensive-return-on-investment-analysis-563b9cb6ddc5">paper</a> from the Foundation for Research on Equal Opportunity (FREOPP), an economic opportunity think tank.</span></p> <p><span>While more than three-quarters of all bachelor's degrees have a positive return on investment (ROI), according to the paper, master's and associate degrees are much riskier bets—with many costing students in the long run.</span></p> <p><span>The paper, by Senior Fellow Preston Cooper, examined data from over 50,000 degree and certificate programs at thousands of American colleges and universities. Cooper's analysis looked at how much students were earning immediately after graduation, as well as how much they were making 10 years later. The paper also took into account a student's chance of dropping out when calculating a degree program's ROI.</span></p> <p><span>In all, Cooper found that 31 percent of students are enrolled in a program with a negative ROI—meaning that "the earnings benefits of the degree are unlikely to fully compensate students for the cost and risk of pursuing post-secondary education."</span></p> <p><span>However, different kinds of degrees were more likely to have a negative ROI than others. For example, 77 percent of bachelor's degrees and doctoral and professional degrees have a positive ROI. In contrast, just 57 percent of master's and associate degree programs have a positive ROI.&nbsp;</span></p> <p><span>For bachelor's degrees, fine arts, education, and biology programs had the lowest median ROI, while engineering, computer science, and nursing degrees gave students the highest long-term rewards. </span></p> <p><span>However, <a href="https://freopp.wpengine.com/roi-undergraduate/">where college students were enrolled</a> also mattered when it came to ROI. </span><span>For example, an English degree from the University of Virginia has a $581,925 positive return on investment—climbing to over $600,000 when only including students who graduated on time. In contrast, students at Virginia Commonwealth University—another public university—who majored in English have a negative $30,000 ROI, with just a $3,624 benefit for those who end up graduating on time.</span></p> <p><span>"When choosing a college and program of study, students should evaluate several key variables that contribute to ROI. The most important is earnings after graduation," Cooper writes. "Besides starting salary, another critical factor is the institution's completion rate. While students' individual ability and motivation affects their likelihood of completion, research shows that college quality also has an impact on completion rates."</span></p> <p><span>Cooper also pointed out just how much federal dollars go toward funding low-value degree programs. He found that 29 percent of the federal funding that went to the programs he studied went to programs with a negative ROI.</span></p> <p><span>"That figure includes $37 billion in Pell Grants, $47 billion in loans to undergraduates, and $39 billion in loans to graduate students," Cooper writes. "Because ROI is negative for these programs, it's unlikely that most of those loan dollars will be repaid."&nbsp;</span></p> <p><span>This latest paper paints a detailed picture of the kinds of concerns prospective students and their families should take into account when deciding whether to enroll in college. While bachelor's degrees are still a good bet overall, students need to consider what they'll really get out of <em>both</em> the major they want to study and the school they've been accepted into.</span></p>						</div>
		
</article>
<nav>
	
		<p>
        <a href="https://reason.com/2024/05/10/marco-rubio-used-to-know-how-tariffs-work-what-happened/" data-ga-click="true" data-ga-action="Next Article Click" data-ga-label="Marco Rubio Used To Know How Tariffs Work. What Happened?"><span>NEXT:</span> Marco Rubio Used To Know How Tariffs Work. What Happened?</a>
    </p>
	
	<span><a rel="tag" href="https://reason.com/category/education/college/">College</a><a rel="tag" href="https://reason.com/category/education/college/college-debt/">College Debt</a><a rel="tag" href="https://reason.com/category/higher-education/">Higher Education</a><a rel="tag" href="https://reason.com/category/education/">Education</a><a rel="tag" href="https://reason.com/tag/government-spending/">Government Spending</a></span>			
					</nav>
				
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Automatically Detecting Under-Trained Tokens in Large Language Models (147 pts)]]></title>
            <link>https://arxiv.org/abs/2405.05417</link>
            <guid>40332651</guid>
            <pubDate>Sun, 12 May 2024 06:46:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2405.05417">https://arxiv.org/abs/2405.05417</a>, See on <a href="https://news.ycombinator.com/item?id=40332651">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
                
    <p><a href="https://arxiv.org/pdf/2405.05417">View PDF</a></p><blockquote>
            <span>Abstract:</span>The disconnect between tokenizer creation and model training in language models has been known to allow for certain inputs, such as the infamous SolidGoldMagikarp token, to induce unwanted behaviour. Although such `glitch tokens' that are present in the tokenizer vocabulary, but are nearly or fully absent in training, have been observed across a variety of different models, a consistent way of identifying them has been missing. We present a comprehensive analysis of Large Language Model (LLM) tokenizers, specifically targeting this issue of detecting untrained and under-trained tokens. Through a combination of tokenizer analysis, model weight-based indicators, and prompting techniques, we develop effective methods for automatically detecting these problematic tokens. Our findings demonstrate the prevalence of such tokens across various models and provide insights into improving the efficiency and safety of language models.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Sander Land [<a href="https://arxiv.org/show-email/216051e6/2405.05417">view email</a>]      <br>    <strong>[v1]</strong>
        Wed, 8 May 2024 20:37:56 UTC (5,003 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Show HN: Open-Source Video Editor Web App (451 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=40331968</link>
            <guid>40331968</guid>
            <pubDate>Sun, 12 May 2024 02:35:03 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=40331968">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td><table>
        <tbody><tr id="40331968">
      <td><span></span></td>      <td><center><a id="up_40331968" href="https://news.ycombinator.com/vote?id=40331968&amp;how=up&amp;goto=item%3Fid%3D40331968"></a></center></td><td><span><a href="https://news.ycombinator.com/item?id=40331968">Show HN: Open-Source Video Editor Web App</a></span></td></tr><tr><td colspan="2"></td><td><span>
          <span id="score_40331968">99 points</span> by <a href="https://news.ycombinator.com/user?id=zenkyu">zenkyu</a> <span title="2024-05-12T02:35:03"><a href="https://news.ycombinator.com/item?id=40331968">4 hours ago</a></span> <span id="unv_40331968"></span> | <a href="https://news.ycombinator.com/hide?id=40331968&amp;goto=item%3Fid%3D40331968">hide</a> | <a href="https://hn.algolia.com/?query=Show%20HN%3A%20Open-Source%20Video%20Editor%20Web%20App&amp;type=story&amp;dateRange=all&amp;sort=byDate&amp;storyText=false&amp;prefix&amp;page=0">past</a> | <a href="https://news.ycombinator.com/fave?id=40331968&amp;auth=60c7af9da3a83750a68a52b3c2aad9d154dd5483">favorite</a> | <a href="https://news.ycombinator.com/item?id=40331968">20&nbsp;comments</a>        </span>
              </td></tr>
    <tr></tr><tr><td colspan="2"></td><td><div><p>Hey everyone, for the past like six months I've been working on a portfolio project. I got tired of doing easy projects, so I decided to tackle something bigger and more challenging. That's when I came up with the idea of a video editor. This piece of work is intended to showcase my skills and land me a job, but I like to think when working on projects that my idea is so cool that people will like to use it, and I treat every project like a startup idea. Also I havent seen many open source video editors especially on web so that was one of the points why I decided to make that and not something else, but in the end its learning experience and im not expecting much if at all.</p><p>A bit about the video editor itself:</p><p>-website: <a href="https://omniclip.app/" rel="nofollow">https://omniclip.app/</a></p><p>-its free</p><p>-its open source (MIT Licensed)</p><p>-its using Webcodecs API for quick rendering</p><p>-works fully inside browser, client side, no private data is kept</p><p>-I made some readme with more details, im not expecting contributions but I added bit about it: <a href="https://github.com/aegir-assembly/omni-clip">https://github.com/aegir-assembly/omni-clip</a></p><p>Features:</p><p>-Trimming</p><p>-Splitting</p><p>-Supports - Text, Audio, Video (mp4) and Images</p><p>-Clip editing on preview - rotating, resizing, text styling and more</p><p>-Undo/Redo</p><p>-Render in different resolutions, up to 4k.</p><p>Things to know before using this editor:</p><p>-it is simple editor, but its my main project im working on and improving it.</p><p>-right now it only works with videos 25 fps and more but not less</p><p>-only 4 tracks -- its something I could improve quickly but forgot</p><p>-bug here and there (eg. filmstrip not rendering until timeline scroll moved)</p><p>-its not working on phones yet (drag and drop API problems)</p><p>I'd love to hear your thoughts and feedback on it.</p></div></td></tr>        <tr></tr><tr><td colspan="2"></td><td><form action="comment" method="post"></form></td></tr>  </tbody></table>
  </td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Emoji History: The Missing Years (123 pts)]]></title>
            <link>https://blog.gingerbeardman.com/2024/05/10/emoji-history-the-missing-years/</link>
            <guid>40331928</guid>
            <pubDate>Sun, 12 May 2024 02:17:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.gingerbeardman.com/2024/05/10/emoji-history-the-missing-years/">https://blog.gingerbeardman.com/2024/05/10/emoji-history-the-missing-years/</a>, See on <a href="https://news.ycombinator.com/item?id=40331928">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
          

          

          

          <p>During <a href="https://blog.gingerbeardman.com/2023/10/21/list-of-vintage-japanese-pixel-dot-art-software/">my research into vintage Japanese drawing software</a>, I came across some devices that had built in sketch or handwritten memo functions. I bought a couple of them to see if they did anything cool or interesting. These sorts of devices are pre-internet, so there’s no much about them online, and they can’t be emulated, so the only way to find out what they do is to get first hand experience by reading the manual or, better, using one yourself. It’s difficult to find these devices in working condition, as most of them have screen polarisers that have gone bad over time, but if you’re lucky you can find one.</p>

<hr>

<h2 id="1994">1994</h2>

<p>One such device I bought was the <em>Sharp <em>PI-4000</em></em>, from 1994. This is a pocket computer that rolled out of <em>Sharp</em>’s involvement in the development and manufacturing of <em>Apple</em>’s <em>Newton</em> <em>MessagePad</em>. In 1993 <em>Sharp</em> did their own licenced version of the <a href="https://apple.fandom.com/wiki/MessagePad_H1000">Apple <em>Newton</em> <em>MessagePad</em> H1000</a>, the <a href="https://apple.fandom.com/wiki/Sharp_Expert_Pad_PI-7000">Expert Pad <em>PI-7000</em></a>, but just like <em>Apple</em>’s device it wasn’t as successful as they’d hoped. But before that, in 1992, they’d made a device called the <em>PV-F1</em> which was the first touchscreen-only PDA. After the <em>Expert Pad</em> failure, <em>Sharp</em> took another attempt at the concept and came up with the <em>PI-3000</em> in 1993. This solved all the problems with the <em>PV-F1</em>, most notably size and cost. The device I have, the <em>PI-4000</em>, was released a year later and features higher memory capacity. The <em>PI-3000</em>/4000 devices could transfer data via infrared, connect to a modem to send faxes, and by the PI-5000 in 1995 could connect to cell phones to send emails. They all use a simplified—but still quite complicated—version of the multi-window operating system that had been developed for the <em>PV-F1</em>.</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-sharp-pi-3000.jpg" alt="" title="Sharp Zaurus <em>PI-3000</em> “Personal Information Tool” (1993)" loading="lazy"></p>

<p>So I was trying out the <em>PI-4000</em>, the memo function is pretty cool allowing you to draw in different dither shades and pen widths, and use stamps to add symbols to your memo. These are mostly map-related things like road and rail junctions, buildings, and train stations. Pretty cool. Then I tried typing some messages on the device and as I explored the myriad of keyboard input mechanisms I came across something rather familiar (sorry about the awful photo—it’s the best I could do, honest—the screen is very reflective and the pixels are so far from the backing they cast individual shadows!):</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-sharp-pi-4000-emoji-picker.jpg" alt="PNG" title="Look! It's an emoji picker on the <em>Sharp <em>PI-4000</em></em> (1994)" loading="lazy"></p>

<p>At this point, I couldn’t quite believe what I was seeing because I was under the impression that the first emoji were created by an anonymous designer at <a href="https://emojipedia.org/softbank/1997">SoftBank in 1997</a>, and the most famous emoji were created by Shigetaka Kurita at <a href="https://emojipedia.org/docomo/1999">NTT DoCoMo in 1999</a>. But the <em>Sharp <em>PI-4000</em></em> in my hands was released in 1994, and it was chock full of recognisable emoji. Then down the rabbit hole I fell. 🕳️🐇</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-sharp-pi-4000-emoji-table-16-16.png#pi4000" alt="PNG" title="Emoji present on the <em>Sharp <em>PI-4000</em></em> (1994)" loading="lazy"></p>

<hr>

<h2 id="1991">1991</h2>

<p>A little more reading, and a tip from my friend <a href="https://twitter.com/chame">@chamekan</a> on Twitter, unearthed the fact that the <em>NEC <em>PI-ET1</em></em> in 1991 also contained emoji. The device is literally the coolest thing you’ve ever seen. With system software written by video game developer Hudson Soft its character set features emoji that can be typed inline, and it also features a <a href="https://youtu.be/8_w8elG3w0Y?t=248">“montage function” that allows you to create faces for each of your contacts</a> — 15 years later we’d see something similar in <em>Mii</em> on <em>Nintendo Wii</em> in 2006. The emoji on this device are a lot less well designed, in my humble opinion, than those on the <em>Sharp</em> devices.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/8_w8elG3w0Y?start=503" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" loading="lazy"></iframe>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-nec-pi-et1-emoji-table-20-20.png#piet1" alt="PNG" title="Emoji present on the <em>NEC <em>PI-ET1</em></em> (1991)" loading="lazy"></p>

<hr>

<h2 id="a-word-about-word-processors">A word about word processors</h2>

<p>By now I was in contact with Keith at <a href="https://emojipedia.org/">Emojipedia</a>, who mentioned that he remembered a <em>Sharp</em> device with emoji, a word processor. I found one in the <em>Sharp</em> <em>WD-A521</em>, from November 1990, which <a href="http://kanji.zinbun.kyoto-u.ac.jp/~yasuoka/Emoji/SHARP-WD-A521p457-458.pdf">featured higher resolution versions of the emoji designs</a> found on my <em>Sharp <em>PI-4000</em></em>.</p>

<p>Perhaps there are other word processors from around that time that also contain emoji? I understand from my friend <a href="https://twitter.com/haeckel">Izumi Okano</a> that Japanese software developer Enzan-Hoshigumi, <a href="https://blog.gingerbeardman.com/2021/12/16/tomoya-ikeda-macintosh-artist/">most famous for their Macintosh software and clipart</a>, had created pictograms for one of the <em>Canoword</em> word processors around 1986. So at this point I’m thinking, why would the emoji on a word processor be ignored on the timeline of emoji history? Was there anything else being ignored?</p>

<p>Before cell phones became prevalent there were pagers, or beepers, in Japan these were known as Pocket Bell. Initially they would only beep and show a number, and <a href="https://twitter.com/s7ephenwithaph/status/1785939813432254950">people would use “beeper slang”</a> to form words by using numbers whose pronunciation was similar to words and syllables. Necessity is the mother of invention! Eventually pagers would be able to send and receive text. It was perhaps only natural that emoji find a home on these devices, with the most notable being the heart ❤️ emoji. But the date of this transition is 1995, which is earlier than the <em>SoftBank</em> emoji from 1997 but later than my <em>Sharp <em>PI-4000</em></em> device.</p>

<h2 id="a-note-about-beepers">A note about beepers</h2>

<p>As an aside, it’s interesting to understand how emoji were typed on pagers/beepers. They weren’t selected using a picker, which would have required cycling through a huge range of characters, but rather typed in numeric digits which narrows the cycling down to far less characters.</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-pocket-bell-pager.jpg" alt="JPG" title="Pager cheat sheet, photo by 山下メロ <a href=https://ima.goo.ne.jp/column/article/6981.html>https://ima.goo.ne.jp/column/article/6981.html</a>" loading="lazy"></p>

<blockquote>
  <p>The numeric code: <code>21 91 15 24 12 23 78</code><br>
…would map to: <code>カラオケイク？</code><br>
…which means: <code>KARAOKE?</code></p>
</blockquote>

<p>Wild. Typing text this way must have felt like programming machine code directly in hexadecimal!</p>

<hr>

<h2 id="what-makes-it-emoji">What makes it emoji?</h2>

<p>I was chatting to my friend <a href="https://lmnt.me/blog/">Louie Mantia</a>, who has designed many emoji in his career, discussing the earlier emoji I had found in my 1994 device. Louie asked me to confirm that I could type emoji inline with text, giving me the example <code>W😲W</code>, which was his criteria for the symbols to qualify as emoji. If I couldn’t do that, he suggested we could only consider the symbols as icons.</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-sharp-pi-4000-emoji-wow.jpg" alt="PNG" title="Passing the Emoji test on the <em>Sharp <em>PI-4000</em></em>" loading="lazy"></p>

<p>So if I can type them inline amongst text on my device from 1994 that was capable of connecting to other devices and sending messages, then surely they should be considered the first emoji? Why do we, currently, only count emoji as emoji if they’re on a mobile phone? I’m also wondering when these emoji might have been designed. Were they created in 1994 for the <em>PI-4000</em>, in 1993 for the <em>PI-3000</em>, or earlier for another device?</p>

<hr>

<h2 id="1988">1988</h2>

<p>So I kept looking. I was aware of another line of <em>Sharp</em> devices, electronic organisers, known as the <em>Bware</em> range in Japan and <em>Wizard</em> in the USA. These were pretty popular at the time, so much so that the USA device even <a href="https://en.wikipedia.org/wiki/The_Wizard_(Seinfeld)">got it’s own episode of Seinfeld</a> in 1998. I’d come back into contact with these devices just last year as they had the interesting capability of being able to <a href="https://forums.insertcredit.com/t/stay-sharp-with-sc-denshi-system-techo-games/2326">play video games</a> stored on solid-state application “IC” cards. You can play a version of <em>Tetris</em> by <em>BPS</em> that is quite different to the <em>Game Boy</em> version, and both were released in 1989. You can also play versions of <em>Sokoban</em> by <em>Thinking Rabbit</em>, and <em>Fortress</em> by <em>SSI/Victor</em>, amongst others.</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-sharp-pa-8500-1988.jpg" alt="JPG" title="Sharp <em>PA-8500</em> (1988)" loading="lazy"></p>

<p>Thanks to a collector, <a href="https://www.reddit.com/r/OldHandhelds/comments/sr51ze/may_i_present_you_the_whole_family_of_sharp/">Akuji</a>, I was able to confirm that the Japanese <em>PA-8500</em> device, released in 1988, contains emoji similar in design to those found on my <em>PI-4000</em> and on the <em>WD-A521</em>. When redrawing these it was obvious that all the <em>Sharp</em> emoji sets are based on the same master design. (I’d love to know more about the <em>Sharp</em> artwork if anybody knows anything.)</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-sharp-pa-8500-emoji-table-20-20.png#pa8500" alt="PNG" title="Emoji present on <em>Sharp <em>PA-8500</em></em> (1988)" loading="lazy"></p>

<hr>

<h2 id="how-old-is-an-emoji">How old is an emoji?</h2>

<p>At this point we’ve wiped almost a decade off the creation date of emoji, but can we go further? Is there a way to date a set of emoji?</p>

<p>If we think about the PA line of devices, the <em>PA-8500</em> was released in 1988, and it’s predecessor the (emoji-less) PA-7000 was released in 1987. So maybe the emoji set was created around this time? We can get closer by looking at a couple of characters present in the emoji that give us <a href="https://srad.jp/~yasuoka/journal/495877/">a clue to the date of creation</a>. That is indeed the case with the <em>Sharp <em>PI-4000</em></em> and <em>WD-A521</em>.</p>

<p>The characters <a href="https://ja.wikipedia.org/wiki/%E6%B8%A1%E8%BE%BA%E5%92%8C%E5%8D%9A#%E2%97%8B%E9%87%91%E3%83%BB%E2%97%8B%E3%83%93">○金 and ○ビ</a> (<em>maru-kin</em> meaning rich/successful/winner and <em>maru-bi</em> meaning poor/unsuccessful/loser) were invented by the author <a href="https://ja.wikipedia.org/wiki/%E6%B8%A1%E8%BE%BA%E5%92%8C%E5%8D%9A#%E2%97%8B%E9%87%91%E3%83%BB%E2%97%8B%E3%83%93">Kazuhiro Watanabe</a> in 1984 in his book <a href="https://www.amazon.co.jp/dp/4072734365">Kinkonkan</a> which was later <a href="https://www.nikkatsu.com/movie/26211.html">made into a movie</a>. These were quickly accepted into Japanese vocabulary, and they won 84年の日本流行語 (Japanese Buzzwords Award 1984). And they are right there in the <em>Sharp <em>PI-4000</em></em> emoji, represented as characters enclosed in circles. They were in common use throughout Japan’s bubble-era, 1986-1991. The words eventually fell out of fashion and are now considered obsolete. It’s interesting to note that they are not featured in either the <a href="https://emojipedia.org/softbank/1997">1997 <em>SoftBank</em></a> or <a href="https://emojipedia.org/docomo/1999">1999 <em>NTT DoCoMo</em></a> emoji sets.</p>

<hr>

<h2 id="1984">1984</h2>

<p>Once you accept that emoji existed in the 1980s, more things come to light. The Ishii Award 「石井賞創作タイプフェイスコンテスト」 was a <a href="https://news.mynavi.jp/article/font-history-19/">typeface design contest organised by the community of type designers in 1970</a>. By 1984 it was in its 8th year. Yutaka Satoh of Type-Labo proposed a typeface consisting of emoji. Because they weren’t on screen they were created by arranging dots in various shapes, but they are recognisably emoji.</p>

<blockquote>
  <p>Coincidentally, I used a hybrid of this sort of approach <a href="https://blog.gingerbeardman.com/2023/11/26/easter-egg-emoji-converting-pixels-into-particles/">when I added emoji to my game YOYOZO</a> in September 2023: I plot the emoji as points but define them on a pixel grid.</p>
</blockquote>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-type-labo-typeface-1984.jpg" alt="JPG" title="Yakumono typeface (partial/proposed), created by Yutaka Satoh (TYPE-LABO) in 1984" loading="lazy"></p>

<p>In Matt Alt’s book <a href="https://www.goodreads.com/book/show/30631850-the-secret-lives-of-emoji">“The Secret Lives of Emoji: How Emoticons Conquered the World”</a>, there is a brief mention of ASCII emoticons on the Japanese internet (JUNET) in 1984, and then it fast forwards to 1995 to begin talking about the Pager, missing a decade of emoji usage in the process.</p>

<p>In the <a href="https://www.type-labo.jp/Ohbun.html">Yakumono typeface, created by Yutaka Satoh</a> (TYPE-LABO), we can clearly see many of the key emoji that would persist throughout the years: smiley faces, food, drink, cigarettes, sweat, umbrella, paperclip, lips, envelope, and most interestingly the (not smiling) pile of poo. This typeface received an honourable mention at the awards. Some 40 years later, I think it’s safe to say it deserved more. 🏆</p>

<hr>

<h2 id="1979">1979</h2>

<p>We can see <a href="http://kanji.zinbun.kyoto-u.ac.jp/~yasuoka/JUGYO/2009-12-21.pdf">emoji in the character sets of Japanese home computers</a> such as the <em>Sharp MZ-80K</em>, which included a UFO, smiley faces, stick figures, car, snake, and more. I won’t include them here but you can click the above link to see some in a PDF. 💾</p>

<hr>

<h2 id="1965">1965</h2>

<p><a href="https://ja.wikipedia.org/wiki/BA-90">“Full Moon With Face”, also known as BA-90</a> which was listed in a book of typesetting symbols, published by Sha-ken in 1965. A <a href="https://emojipedia.org/full-moon-face">smiling moon is still present in the emoji set today</a>. 🌝</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-ba-90-full-moon-with-face.png#ba90" alt="" title="image courtesy of <a href=https://commons.m.wikimedia.org/wiki/File:BA-90.png>Wikimedia</a>" loading="lazy"></p>

<hr>

<h2 id="1959">1959</h2>

<p><a href="https://ja.wikipedia.org/wiki/CO-59">CO-59 is a character set created in 1959</a> for exchange of data between Japanese newspapers. In it is included a symbol of a baseball, which again is <a href="https://emojipedia.org/baseball">still present in emoji</a> ⚾️ and <a href="https://www.fileformat.info/info/unicode/char/26be/index.htm">at Unicode codepoint U+26BE</a> ⚾︎ today.</p>

<p><img src="https://cdn.gingerbeardman.com/images/posts/emoji-history-co-59-baseball.png#ba90" alt="" title="image courtesy of <a href=http://etlcdb.db.aist.go.jp/etlcdb/>ETL character database</a>" loading="lazy"></p>

<hr>

<h2 id="comparing-emoji">Comparing Emoji</h2>

<p>I was interested in how the emoji that I have redrawn compared to the 1997 <em>SoftBank</em> and 1999 DoCoMo sets, and an early Pocket Bell, so here’s a little table.</p>

<table>
  <thead>
    <tr>
      <th>&nbsp;</th>
      <th>Sharp<br>PA-8500</th>
      <th>NEC<br>PI-ET1</th>
      <th>Sharp<br>PI-4000</th>
      <th>Pocket Bell<br>R-FAHC</th>
      <th>SoftBank</th>
      <th>NTT<br>DoCoMo</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Year</td>
      <td>1988</td>
      <td>1991</td>
      <td>1994</td>
      <td>1995</td>
      <td>1997</td>
      <td>1999</td>
    </tr>
    <tr>
      <td>Quantity (approx)</td>
      <td>100</td>
      <td>130</td>
      <td>170</td>
      <td>7</td>
      <td>90</td>
      <td>176</td>
    </tr>
    <tr>
      <td>Resolution</td>
      <td>16×16</td>
      <td>16×16</td>
      <td>12×12</td>
      <td>5×7</td>
      <td>12×12</td>
      <td>12×12</td>
    </tr>
  </tbody>
</table>



<hr>

<h2 id="conclusion">Conclusion</h2>

<p>So what does this all mean? I’d say mostly that the history emoji isn’t as clean cut as you might have thought. You can decide for yourself on what you consider to be the first emoji. It depends on our own personal definition, so there is no right or wrong answer. 😎</p>

<p>Personally, I define the start date of emoji as the point in time when sets of these symbols first appeared for use whilst composing text. I don’t think the timeline should start at mobile phones, as this feels like a somewhat arbitrary decision that dismisses a lot of history. It’s like saying music only began to exist from the moment it could be recorded and listened to without the actual muscians being present. 🤔</p>

<p>As to whether the timeline of emoji history will be rewritten with this knowledge, it’s difficult to say. Much of this falls in the grey area of happening around the time the internet was taking hold, plus most things about the origin of emoji are in Japanese language, so there are unlikely to be sources Wikipedia would consider verifiable enough. The best we could do is quote the pages of the manuals for devices, and for the rest hope that there’s some record in Japanese literature that could be cited.</p>

<p>I won’t be running the Wikipedia editing gauntlet, but if you do please let me know how it goes! 🧨</p>

<hr>

<h2 id="terms-of-use">Terms of use</h2>

<blockquote>
  <p>I painstakingly recreated the emoji sets on this page, pixel by pixel, over many days of hard work. I even went so far as <a href="https://blog.gingerbeardman.com/2023/05/10/piskel-for-playdate/">adding a new tool to the pixel art app I use</a>, so as to make the task of redrawing hundreds of emoji a little less daunting. Feel free to utilize the emoji images, just remember to credit @gingerbeardman and include a link to this page. Appreciate it!</p>
</blockquote>

        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Virtualizing the 6502 on a 6502 with 6o6 (165 pts)]]></title>
            <link>http://oldvcr.blogspot.com/2024/04/virtualizing-6502-with-6o6-and.html</link>
            <guid>40331886</guid>
            <pubDate>Sun, 12 May 2024 02:00:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://oldvcr.blogspot.com/2024/04/virtualizing-6502-with-6o6-and.html">http://oldvcr.blogspot.com/2024/04/virtualizing-6502-with-6o6-and.html</a>, See on <a href="https://news.ycombinator.com/item?id=40331886">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-984144946233837570" itemprop="description articleBody"><p>
Okay, promises, promises. Here's the first of my bucket list projects I'm completing which I've intermittently worked on for literally two decades. Now that I've finally shaken out more bugs, tuned it up and cleaned it off, it's time to let people play with the source code.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEivDrcAdhwcwbu_tO6qS1D0mlHYugge1U_QwmL5fGvnv1YN-S33F5fevKDKMCrrKcv9U9HKsNU9zs_59MP_pfkkbaK-g9-du1JwGEwv-2PkalrqZdjMOwCwJD8EJrXMuK5AFxFz1YR-M8Jh5eJxuG1nkFE4HFF0Li7yehE8xFTPGCa6d4Lb_KDq472QEoA/s1556/kim10.png"><img alt="" data-original-height="1556" data-original-width="1498" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEivDrcAdhwcwbu_tO6qS1D0mlHYugge1U_QwmL5fGvnv1YN-S33F5fevKDKMCrrKcv9U9HKsNU9zs_59MP_pfkkbaK-g9-du1JwGEwv-2PkalrqZdjMOwCwJD8EJrXMuK5AFxFz1YR-M8Jh5eJxuG1nkFE4HFF0Li7yehE8xFTPGCa6d4Lb_KDq472QEoA/s320/kim10.png"></a></p><p>

This is the official 1.0 release of the Incredible KIMplement, an emulator of the one kilobyte, 1MHz MOS/Commodore KIM-1 6502-based single board computer. It provides access to the KIM's built-in TTY support (even through your computer's <em>real</em> serial port) and has expanded RAM with 16K of addressing space, all on an unexpanded stock Commodore 64.
</p><p>
It's almost burying the lede to announce that, though, because the real meat in this entry is how the Commodore 64 manages to emulate a very different 6502-based system. That piece is "6o6," for "6502-on-6502," and is a full virtualized software NMOS 6502 CPU that runs on a 6502 CPU — which I've open-sourced too. It has full control of guest code execution, including trapping undocumented and jam opcodes, and completely abstracts all memory access, making it possible to remap addresses, intercept illegal reads or writes, or even run entirely from virtual memory. On top of that, it's complete enough to not only pass a full functional test but also virtualize itself <em>virtualizing itself</em>:

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0UGEePq0AVrKcwQdt3usgMqR5QSWttJPoirmMwG22o83p6x9eVik4bT2NRFtRF9GRu5MiNZ1MnKSyNy-SGJn67ULwBoyoMijmv0dAZ3ricDuKw10Yuet3-_vvID90cIh-sqhkx2pz1en7VMXCO9U11lE6VdsP3c0c-gte1ScyjTBRYz1jb5Ax_2FrGpM/s570/test.gif"><img alt="" data-original-height="480" data-original-width="570" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0UGEePq0AVrKcwQdt3usgMqR5QSWttJPoirmMwG22o83p6x9eVik4bT2NRFtRF9GRu5MiNZ1MnKSyNy-SGJn67ULwBoyoMijmv0dAZ3ricDuKw10Yuet3-_vvID90cIh-sqhkx2pz1en7VMXCO9U11lE6VdsP3c0c-gte1ScyjTBRYz1jb5Ax_2FrGpM/s320/test.gif" width="320"></a></p>

<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjYI9ziuW-XUnTOShSG0fCb9vkcW_Ea5BHSww0IIISNWbWX0yprMd3bkgSYwDo0Wfx5nWkb6q77zFemoiMI7ZSNDuzBDUZ7mMM4G4gxY958coNrY33tdolPFzIUsKldb9-pSYMYnhvsfv6JE1IbV3A5YT2GR9tjQW1NT16rTV3AzGavYS07o3SAzcM_Pig/s557/a2.gif"><img alt="" data-original-height="380" data-original-width="557" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjYI9ziuW-XUnTOShSG0fCb9vkcW_Ea5BHSww0IIISNWbWX0yprMd3bkgSYwDo0Wfx5nWkb6q77zFemoiMI7ZSNDuzBDUZ7mMM4G4gxY958coNrY33tdolPFzIUsKldb9-pSYMYnhvsfv6JE1IbV3A5YT2GR9tjQW1NT16rTV3AzGavYS07o3SAzcM_Pig/s320/a2.gif" width="320"></a></p><p>

These GIF screencasts are real-time with no tricks. Here a Commodore 64 and Apple IIe are both running a guest "hello world" payload within 6o6 (stage 1), which is nearly instantaneous, then 6o6 running the payload as a payload within another instance of 6o6 (stage 2), which is a little slower, then 6o6 running 6o6 running 6o6 running the payload (stage 3), which is glacial. But all of it works!
</p><p>
<a name="more"></a>

I think all nerds at a certain age want to design "the ultimate operating system." I made a lot of attempts at this as a kid, mostly concentrating on windowing and menus, and none of them progressed much beyond the level of primitive tech demos. I have a few of these disks still around to smile at.
</p><p>
When I had my first taste of multiuser systems, it hadn't occurred to me before that people might (unwittingly or otherwise) try to run crap code. After all, I'd grown up in an era where computers generally ran <em>one</em> program that had control of the entire machine, so operating systems — to naïve little me, at least — were more of an exercise in interface design. The program was <em>expected</em> to take over everything, so if the program misbehaved, you simply reset the computer. But people expect multiuser systems not to reboot randomly when they're in the middle of something. An effective system would either have to deal with the fallout, or actively protect you and others, from code that might (unwittingly or otherwise) corrupt other address spaces, run deleterious instructions or hog all the resources.
</p><p>
Naturally, the trick is how a little 6502 with less than 4,000 transistors can guard against all that. Although memory management with the 6502 was improved with bank-switching hardware — the C64 could have never juggled its own 84K of addressing space without the I/O port on its 6510 — few historical NMOS 6502 systems could move around the special zero page or the processor stack in memory (as it happens, the Commodore 128 is <a href="https://c128lib.github.io/Reference/D500">one of those systems</a> but little software takes advantage of it), and none could remap addresses such that program code could be moved to and run from an arbitrary location without fixups. It also could not comprehensively prohibit programs from accessing certain memory locations, and if any of the number of undocumented jam or "KIL" opcodes were executed, then the processor would lock up completely. (These opcodes are <a href="https://www.pagetable.com/?p=39">unintended consequences</a> of how the original NMOS 6502 decodes instructions, and CMOS versions of the 6502 make them into no-ops or repurpose them for other operations.)
</p><p>
Some other issues could also be conceivably mitigated with hardware. A process determined to monopolize the system by setting the interrupt flag (to disable interrupts) can still be halted externally with a source of periodic non-maskable interrupts (NMIs), which is how some multitasking 6502 kernels implement preemptive task switching, assuming that source exists. For mitigating dangerous instructions, in-circuit emulators did exist — the Eastern House Software "Trap65" comes to mind, which turned bogus opcodes into trappable <tt>BRK</tt>s — but they were very expensive and at the time weren't generally sophisticated enough to directly manipulate live bus lines in a complex fashion. And, of course, you'd still need some sort of supervisor/hypervisor kernel to control all this.
</p><p>
So what if we just do it <em>all</em> in software? Even a simple-minded interpreter isn't completely nuts: the 6502 has few registers, so keeping track of the processor state is easy, with a manageable 56 instructions and only a handful of addressing modes. We can abstract memory access in any way we want, and we can throw controlled exceptions for bad instructions or protection faults instead of crashing or hanging.
</p><p>
The "virtualization" part comes in by 6o6 also using the host's ALU to do processor-internal operations on behalf of the guest. Again, this is facilitated by how simple the 6502's internal state is. If we're asked to add a value to the accumulator, we load the guest register and processor flags on the host 6502, run the same instruction the guest would have, record the result and processor flags and clean up. (This is how we avoid a guest with, say, the interrupt flag and decimal flag set from corrupting our own state.) Here's an example from the source code for the <tt>ADC #</tt> immediate (opcode $69) instruction.
</p><div><pre>-IMMPTR = hpadc69+1
opadc69 ARGIMM
        GETAP
hpadc69 adc #$00
        PUTAP
</pre></div>
<p>
This uses <tt>xa</tt> preprocessor macros to fetch an immediate argument from the instruction stream and store it as the operand to the immediate instruction at <tt>hpadc69</tt>, then loads the accumulator and processor state from the guest into the host CPU, runs the instruction, stores the accumulator and processor state and clears the I and D flags. (Do note this is self-modifying in case you wanted to put it in ROM.) Not only does this give us the answer without having to implement the logic ourselves, but we also get all the CPU flags precisely handled "for free," and stuff like decimal mode (i.e., BCD) arithmetic just works as a natural consequence. Similarly, if we're asked to shift it, or subtract, or increment or decrement the X or Y registers, we do the same thing.
</p><p>
Even if we're just loading or operating on a value from memory, or transferring registers, we still do this because we still have to set the negative and zero flags. As an example, here's an indirect indexed <tt>LDA (),Y</tt> (opcode $b1), where we take the result from memory and then load it as an immediate. Notice we don't bother loading the guest accumulator since we'll immediately clobber it.
</p><div><pre>-IMMPTR = ipldab1+1
opldab1 ARGINYF
        GETP
ipldab1 lda #$00
        PUTAP
</pre></div>
<p>
Regardless of how we get there, the approach yields a result exactly the same as a 6502 <em>because a 6502 computed it</em>, and we get the results faster than doing the math and flags manually.
</p><p>
That, in a nutshell, was my first version of 6o6 in 2002. As a test case to emulate the simplest 6502 system I could think of, I added code to support the LEDs and TTY, and that became <a href="http://ana-3.lcs.mit.edu/~jnc/cctalk/2002-December/0273.html">the first version of the Incredible KIMplement</a>.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiz5GbBXD7SyCuH39S6UOhQukntuXNP-qjmb-J6fkslIj95BgKiqThssUhOiERDyr5AsXwIakvtYm3a2-b6-VBGxPgymozK7LIHDthOJ_UKX0KOEnr7AZD1y0zRXeBUNWNhD21_8o2GH1pCV6uPHRgY0PMc24KLhRI4xRjyMaPKh-4eUDGRKoLJYtGxM6M/s2804/6o6d.png"><img alt="" data-original-height="1350" data-original-width="2804" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiz5GbBXD7SyCuH39S6UOhQukntuXNP-qjmb-J6fkslIj95BgKiqThssUhOiERDyr5AsXwIakvtYm3a2-b6-VBGxPgymozK7LIHDthOJ_UKX0KOEnr7AZD1y0zRXeBUNWNhD21_8o2GH1pCV6uPHRgY0PMc24KLhRI4xRjyMaPKh-4eUDGRKoLJYtGxM6M/s320/6o6d.png" width="320"></a></p><p>

In our little virtual world, the 6o6 VM is <em>not</em> the prime mover, just the engine. Since the original intent was to be part of a future operating system, I believed strongly that any 6o6-based environment should be highly modular, and this diagram reflects that. The <i>virtual machine</i> (in red) is almost completely hardware-agnostic other than assuming it runs on a real 6502. As such, in order to run an arbitrary <i>payload</i>, i.e., the guest, there are two other parts (in green) required to specify a complete system.
</p><p>
The first part is the <i>harness</i>, which is 6o6's interface to guest memory and the rest of the managed hardware. The harness has a standardized jump table that serves as its binary interface. It implements loads and stores for a given address, including instruction fetches, and maintains the hardware stack and stack pointer. The VM assumes nothing — not even the page size or that memory is even paged. (By the way, while the VM calls the harness to get and store the 8-bit stack pointer register using X, it also calls the harness for all pushes and pops because it deliberately doesn't touch the stack itself. That means the VM doesn't have an actual dependency on the location or size of the stack, so regardless of what you <em>say</em> is the stack pointer value, nothing says you couldn't implement a bigger stack internally.)
</p><p>
Converting a virtual to a physical address could be as simple as addition or bit shifts, but if you wanted to implement something more complex like a paged virtual memory scheme, you'd also do it here: instead of generating page faults for something else to handle, the harness itself would do the paging in and out as part of a load or store. The harness can also raise protection exceptions. Here's an example store from the included demonstrations (we'll talk about it a little later too):
</p><div><pre>        * = HARNESS

        jmp mpeek
        jmp spush
        jmp spull
        jmp stsx
        jmp stxs

        ; these drivers should not change dptr

        ; poke .a into location indicated by dptr
        ; okay to clobber x and y
mpoke   tax
        lda dptr
        sta hhold0
        lda dptr+1
        cmp #&gt;KERNEL
        bcs mpokehi
        ; $0000 and $0100 go to EMURAM and EMURAM+0x100
mpokelo adc #&gt;EMURAM
        bcc mpokec      ; carry still clear
        ; accesses to kernel and up go to the payload
        ; add offset keeping in mind carry is set
mpokehi adc #(PAYLOAD &gt;&gt; 8)-(KERNEL &gt;&gt; 8)-1
        bcc mpokehj
        ; fault if the result wraps
mpokefa lda #R_MFAULT
        jmp BAILOUT
mpokehj ; fault if the result hits I/O
#ifdef C64
        ; VIC
        cmp #$d0
#else
        ; Apple II
        cmp #$c0
#endif
        bcs mpokefa
        ; OK to store
mpokec  sta hhold1
        txa
        ldy #0
        sta (hhold0),y
        rts
</pre></div>
<p>
I included the jump table so you can see the functions the harness is expected to provide. <tt>dptr</tt> is the virtual address pointer provided by 6o6 for the harness to dereference and <tt>hhold0/1</tt> are zero page work areas the harness can use for this task. <tt>EMURAM</tt> indicates where the bottom of guest memory is in physical memory, <tt>PAYLOAD</tt> indicates where the payload is in physical memory, and <tt>KERNEL</tt> is the address of the kernel, which in this case may or may not be a physical address (more later). Here, accesses to virtual zero page and the stack go to the same place offset by <tt>EMURAM</tt> and accesses to the kernel address and up are offset by the computation at <tt>mpokehi</tt>. If the resulting physical address wrapped or hits I/O, then this routine will raise an exception, though it could just as easily ignore it. Otherwise, having computed the physical address, it performs the store and returns to the VM. You should note that the way this scheme is constructed, memory above the stack but below the starting address of the payload may be aliased; also, the full 64K addressing space is not available beyond a certain point. Neither is an intrinsic limitation of 6o6, just how this particular harness was written for pedagogic purposes.
</p><p>
Now, suppose you <em>do</em> have an MMU or some other hardware assist for managing memory. The beauty of it is, you just write it into the harness and make the harness the driver for your hardware; 6o6's memory model is so completely abstracted that it won't notice the difference. I'll have an example of that later on.
</p><p>
The second part is the <i>kernel</i>, which is what actually kicks off the VM. The kernel and its associated headers define for the VM where the harness is located and what zero page locations it can use for registers, which are shared with the kernel so that the kernel can initialze and manipulate them. The kernel next calls the VM to run an instruction from the payload (or a group of instructions; more in a moment). The VM executes some portion of the instruction stream and returns a status code to the kernel, which may include an exception from either the harness or 6o6 itself that the kernel needs to act on, after which the kernel can inspect or modify the guest processor state and do any needed emulation tasks. For example, it might notice the PC is at a service routine it handles natively, so it does that task, adjusts the registers with any return value, and (I provide a utility routine for this) pulls the return address off the stack at the end. All necessary work having been done, it goes back to call the VM again for the next payload instruction or instruction group, and so on and so forth, looping until termination.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgng8Ts5YGgajtflXxNU3yvgcvGOozahC3RcX57FebfkNKhURp25AvxSssULEqJQatmg5RHxoaUVT4F7A89435rroU7OO-ok3PTFiyZ9ucXY3cC6ZbiVf3Fo6o6w6697MIogqNZOgn1aQE1G1PFuZfFfPxMGIhZPTqTSB3Kc4toark42jNTi8NeWk4p3YI/s1410/uh.png"><img alt="" data-original-height="1224" data-original-width="1410" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgng8Ts5YGgajtflXxNU3yvgcvGOozahC3RcX57FebfkNKhURp25AvxSssULEqJQatmg5RHxoaUVT4F7A89435rroU7OO-ok3PTFiyZ9ucXY3cC6ZbiVf3Fo6o6w6697MIogqNZOgn1aQE1G1PFuZfFfPxMGIhZPTqTSB3Kc4toark42jNTi8NeWk4p3YI/s320/uh.png" width="320"></a></p><p>

Between calls to the VM the guest CPU is "frozen," making it possible to completely capture the guest state for later reconstitution, or context-switch to a new task or environment by just swapping in a new set of registers. The kernel also determines when externally triggered events occur because the VM doesn't fire virtual IRQs or NMIs (or, for that matter, resets); the kernel decides when such events should take place and accordingly loads the stack (there's a routine for this too) and sets the guest program counter (PC) and any other needed registers. Although the VM supports the </p><tt>BRK</tt><p> instruction, traditionally treated as a "software" interrupt, the VM will set up the stack for you but instead of setting the PC to the new location returns an exception. Your kernel can handle it in the conventional way by setting the PC to the IRQ vector, or perhaps to some other vector, or perhaps handle the situation natively, or even just ignore it.
</p><p>
The harness in KIMplement provides a virtual standard 6502 stack in the usual location and a KIM-4 expansion device with read/write memory between $0000 and $17ff, ROM from $1800 to $1fff, RAM from $2000 to $3fff, unmapped unwriteable space from $4000 to $fff7, and mirroring $1ff8-$1fff to $fff8-$ffff for vectors. The host C64 stores the low 16K at $4000 through $7fff and the rest is synthesized by the harness, so in most cases computing the effective physical address is just bit twiddling and adds. Meanwhile, the KIMplement kernel handles emulating the RRIOTs (picking up the writes from the harness), drawing the LEDs, servicing the TTY, inserting NMIs for stops and the Single-Step Switch, and also trapping portions of the KIM-1 ROM monitor. After a VM run the KIMplement kernel examines 6o6's PC to see if we want to intercept the current routine, which is how the TTY and certain other features are implemented.
</p><p>
There are two other performance enhancements in 6o6. The clever among you will have already recognized the 6o6-harness edge as a potentially massive bottleneck, since even the simplest instructions will involve at least one fetch and things like indirect addressing could require many. To eliminate the overhead of a subroutine call (at least 12 cycles) on every byte, as part of KIMplement 0.2 I allowed memory loads in 6o6 to be partially inlined with preprocessor macros. These optional macros provide inlineable load routines both for any arbitrary virtual address and an optimized alternative for zero page which are linked right into 6o6. Doing so yielded substantial speedup, but at the cost of bloating the VM, so I chose to keep <em>stores</em> as subroutine calls since they happen less frequently and are usually more complicated than fetches. In this very latest iteration, I also cleaned up an inefficiency in how the inline macro accesses the program counter, which improves instruction fetches further.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi3BOrVsgtlpRedNC-P656fHmuUr1t_sN3Z4XhchEzGX2gxt89YwasSxEM438WNaKsMlU8c8jTpGzI6eaV_8dVQA9zaP5yAzoeAzNrlkKgKLN0ct-Grmd5nIgx2l8UKFsJyFKi7Bb9oycDJB3XEwx2ONX_00Xh3uJJgSOV5h8wQhky1ILUHcx6v8yeAy7w/s2165/fusops.png"><img alt="" data-original-height="2165" data-original-width="1735" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi3BOrVsgtlpRedNC-P656fHmuUr1t_sN3Z4XhchEzGX2gxt89YwasSxEM438WNaKsMlU8c8jTpGzI6eaV_8dVQA9zaP5yAzoeAzNrlkKgKLN0ct-Grmd5nIgx2l8UKFsJyFKi7Bb9oycDJB3XEwx2ONX_00Xh3uJJgSOV5h8wQhky1ILUHcx6v8yeAy7w/s320/fusops.png"></a></p><p>

The other means is an optional and primitive form of instruction fusion I call "extra helpings," which I added to 6o6 for KIMplement 0.3. For instructions that don't touch memory, instruction fetches notwithstanding, there's no need to return to the kernel <em>right away</em> because there would likely be no operation the kernel needs to observe yet. This includes immediates, accumulator oriented instructions, most implied instructions (anything that wouldn't call into the harness or access the processor stack), and branches if they are not taken. For example, something like </p><tt>clc:adc #32:tax:inx:cpx #50</tt><p> is otherwise handled all within the processor, so there's no reason from the kernel's perspective that these sorts of instructions couldn't all be taken together as a group. However, if an instruction does any loads or stores, or the PC changes to anything but the next instruction, or there's an exception (duh), then the effect is potentially observable by the kernel and the VM stops trying to cram in more. This doesn't make the VM any faster — in fact, if we have the "extra helpings" gated on where the PC is in a page, as KIMplement does to handle exact ROM traps, it's slightly slower — but it also means that the kernel doesn't have to run uselessly after every instruction where nothing could have changed, so instead it makes <em>everything else</em> faster. The approach is profitable, as we'll show in a moment, but it does interfere with applications that need precise control of the program counter and so there are options to progressively or completely disable it.
</p><p>
That's a good segue to talk about 6o6's built-in validation and testing, because we can directly test any optimizations we make and see if that lowers execution time or instruction count. As part of cleaning up the code I pulled down Klaus Dormann's <a href="https://github.com/Klaus2m5/6502_65C02_functional_tests">functional test suite</a>, using the binary he provides so that there's nothing up my sleeve. This is a widely accepted stress test for 6502 systems for <a href="http://forum.6502.org/viewtopic.php?f=2&amp;t=2241">over a decade</a>. <a href="https://github.com/Klaus2m5/6502_65C02_functional_tests/tree/master/bin_files">The provided binary</a> assumes nothing about the hardware and signals an exit by entering an infinite loop. If the loop isn't at the point marked as successful completion, then we conclude a failure has occurred.
</p><p>
So that I can test changes easily and quickly, the test suite uses Ian Piumarta's venerable <a href="https://www.piumarta.com/software/lib6502/"><tt>lib6502</tt> CPU emulator</a> and runs directly from the shell. To detect the testsuite's "signal" loops I modified David Schmenk's patch as part of his PLASMA project <a href="https://github.com/dschmenk/PLASMA/commit/db424e9fc739c2b0ddeebf6370741cf40e0f8186">to implement single-stepping</a>, and ran Klaus' suite directly against <tt>lib6502</tt> to start with (after all, since 6o6 relies on the host CPU's ALU, it's only as accurate as the ALU that's present). Interestingly, <tt>lib6502</tt> <em>failed</em> due to an edge case in decimal mode which I also had to patch. I don't claim my patch is optimal or even correct, but it passes now.
</p><p>
Next we mix in 6o6. The binary Klaus provides is a full 64K, so there's no room in the basic 6502 address space for both 6o6 and the test suite at the same time. I solved this with <em>another</em> patch to <tt>lib6502</tt> to create a single bankswitched minimal system for $7000-$efff (32K), putting the first 32K of Klaus' binary in the first bank and the second half in the other. The test harness will bank in the proper segment depending on which address is being referenced. The first stage of testing exercises this harness with a payload that stores to each bank and ensures the values are correct. We test this three different ways, one with no extra helpings and no inline fetch macros, then one with inline fetch macros but still no extra helpings, and then both extra helpings and inline fetch macros. If that passes, we move onto the same configurations tested against Klaus' suite. I had to add a synthetic "X" bit to the status register and adjust the code for <tt>BRK</tt> slightly, but once done, it passed in all three forms.
</p><p>
The <tt>lib6502</tt> patch I added also reports the number of opcodes executed. (At some point I'll do cycle counts, but even just an instruction count is already useful information.) Against the test suite, the naked <tt>lib6502</tt> without 6o6 present executes the test suite in 30,646,178 instructions, while the three configurations of 6o6 from least to most optimized execute it in 2,188,322,914, 1,713,350,225 and 1,602,516,769 instructions respectively. Those are significant savings: at its fastest 6o6 is executing 36.5% fewer instructions than the least optimized version and an average of 52.3 instructions for every guest instruction. Considering those figures necessarily include the harness and the kernel as well as 6o6, I think that's a darn good number. Notice that while inline fetch macros make the biggest delta, the improvement with extra helpings is certainly no slouch, and the instructions per instruction should not be interpreted as a <em>speed</em> multiplier since different instructions have different cycle counts.
</p><p>
I've included four examples with 6o6, not counting KIMplement, its original application. Three of the four will run on either an unexpanded Commodore 64 or on an Apple IIe with 64K (tested using DOS 3.3), and I'll discuss the fourth after that. (If someone wants to submit an Atari 8-bit port, open a pull request.) You've already met one, so let's meet them all.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9GfGLvH3qJ00OYJi1Q_Cy2UfyXBe9s3P2u3FcU38a1ZnE8gdvJcaqa3K1_r4uk4E4CMDTclReOggw7HTXxsAYVLpnxKAEeOixhbFX9Z-1VmPs0unjXiGPv7WMabiP7btVbDTiAnuRCU5-79DKNCTcTx9yjyfNsXR3QIZs1SN-dwYPIg4h4y45yvo1UJw/s1630/Screenshot%202024-04-17%20at%208.42.18%E2%80%AFPM.png"><img alt="" data-original-height="1556" data-original-width="1630" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9GfGLvH3qJ00OYJi1Q_Cy2UfyXBe9s3P2u3FcU38a1ZnE8gdvJcaqa3K1_r4uk4E4CMDTclReOggw7HTXxsAYVLpnxKAEeOixhbFX9Z-1VmPs0unjXiGPv7WMabiP7btVbDTiAnuRCU5-79DKNCTcTx9yjyfNsXR3QIZs1SN-dwYPIg4h4y45yvo1UJw/s320/Screenshot%202024-04-17%20at%208.42.18%E2%80%AFPM.png" width="320"></a></p>

<p><a href="https://github.com/classilla/6o6/tree/main/examples/helloworld/">The first, and simplest</a>, is a "hello world." It runs a program which prints "hello world" first natively on the CPU, then through 6o6. </p><tt>xa</tt><p> handles the character set, so the </p><tt>Makefile</tt><p>s set the right options to make the string correct on either the Apple II or the C64. Here's the payload in nearly its entirety:
</p><div><pre>        * = KERNEL
        ; NOT payload!

        ldx #0
:       lda string,x
        beq :+
        jsr CHROUT
        inx
        bne :-
:       rts
        
        ; character set handled by xa
string  .asc "hello world", CR, $00
</pre></div>
<p>
This is a very normal-looking blob of code (on the Apple II we intentionally <em>don't</em> end with a <tt>jmp $03d0</tt>, though that wouldn't be necessary for ProDOS, of course — I'll explain why in a second). You'll notice this calls a character-out routine, which maps to either $ffd2 on the Commodore or $fded on the Apple; when the kernel sees the call, it just passes it through to the ROM routine. The kernel is also small, and looks like this:
</p><div><pre>        * = KERNEL

cold    lda #&gt;KERNEL
        sta pc
        lda #&lt;KERNEL
        sta pc+1
        lda #0
        sta preg
        lda #$ff
        sta sptr

lup     jsr VMU

        ; if we get a stack underflow, treat as clean termination status
        cmp #R_STACKUNDER
        bne chekok
dun     rts             ; propagates up

        ; otherwise we don't handle any return status other than OK
chekok  cmp #R_OK
        beq chekpc
        ; err out, wait for a rescue
bail    sta $d020
        inc $d020
        jmp bail

        ; check for a call to $ffd2 and redirect to Kernal call
chekpc  lda pc+1
        cmp #&gt;CHROUT
        bne lup
        lda pc
        cmp #&lt;CHROUT
        bne lup

kffd2   lda areg
        jsr CHROUT      ; propagates up
        jsr DORTS
        cmp #R_STACKUNDER
        beq dun
        jmp lup
</pre></div>
<p>
Our cold start sets the start address and zaps both the processor status register and stack pointer, and then starts calling the VM. As the PC ticks along, if the kernel discovers that it points to <tt>CHROUT</tt>, it grabs the guest accumulator, calls that routine on behalf of the payload, pulls the return address off the stack and returns to the loop.
</p><p>
You'll have noticed that both the kernel and the payload have the same starting address of <tt>KERNEL</tt> — and that's because this kernel can also <em>be its own payload</em>! That's how <a href="https://github.com/classilla/6o6/tree/main/examples/inception/">it virtualized itself virtualizing itself</a> in those animated GIFs back at the beginning, using the <em>exact same</em> harness and kernel as this example. In fact, I've symlinked them to make it clear they're exactly the same. Only the main program that kicks all that off is different because it has to shift things forward in memory. Here's how that looks (both the C64 and the Apple IIe use the same memory map):

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiHXhHZPyuqf6RFNsVzYgsRTkylONI-1a3cdga8idWZfcAnVFBazqOFR7AnrZlRSRdoAz0Jdpz7xlsnnXrohqqX5_tDTFFNX0H10QdTTdZrVipx0kXTYVoId14tOUGRs5ikRzHMoS2xT7pVGlT9WJ1bLTGLsFVs-2e1zUpfiCfMUbxg5DsYKeDyyg5mOEE/s5302/inception.png"><img alt="" data-original-height="3047" data-original-width="5302" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiHXhHZPyuqf6RFNsVzYgsRTkylONI-1a3cdga8idWZfcAnVFBazqOFR7AnrZlRSRdoAz0Jdpz7xlsnnXrohqqX5_tDTFFNX0H10QdTTdZrVipx0kXTYVoId14tOUGRs5ikRzHMoS2xT7pVGlT9WJ1bLTGLsFVs-2e1zUpfiCfMUbxg5DsYKeDyyg5mOEE/s320/inception.png" width="320"></a></p><p>

The bright red "caps" on the right of each bar is the ultimate payload. Each little band has its own zero page and stack, and the payload for the previous stage overlaps with the kernel for the next stage. Because 6o6 currently uses self-modifying code for expediency, the main program (which I've puckishly termed the "hypervisor") just copies everything up in memory, since each stage needs its own copy of the VM. As the harness I showed you earlier computes the physical address with an add, the same harness works at each level to propel the virtual address to the right place and everything is seen in the same location by each preceding stage.
</p><p>
Consequentially, it should also be noted that by stage 3 the majority of memory usage here is given over to three entire copies of the VM, which with the inlined fetch macros weighs in at over ten kilobytes a pop. While I could probably cut out a few more executed instructions by even more aggressively inlining everything, I think I'm currently at or near the point of diminishing returns with respect to memory usage. Twenty years occasionally refining your own code will do that.
</p><p>
Just like the movie, the deeper you get, the more levels you have to bubble up through. At stage 3, a call to <tt>CHROUT</tt> gets turned into a call to <tt>CHROUT</tt> at stage 2, which gets turned into a call to <tt>CHROUT</tt> at stage 1, which finally gets turned into a call to the native routine. Each is the same code and each handles the call the same way which percolates up to the lowest stage where the native call actually occurs.
</p><p>
Of course, when the payload completes, we'll need a "<a href="https://inception.fandom.com/wiki/Kick">kick</a>" to exit.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEic4Rrn5zjPQeejaGfnUWVw4IpJRMSAiGZ94HnZHvJUR_gh1kIQ0l9QFw4wTkslO2_S2E3x0TG1mJ8Imi_xqvaRaXWQLowL5o8c9HPGzLIg1x-Yk0gYEe6aP2JkSv34Sjm0nwL10OtaQXty3c3sODXht5-Gy2e7ekjoUycLjVGevdWJ6dV9bpGGwWNDxWI/s1200/kick.jpg"><img alt="" data-original-height="800" data-original-width="1200" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEic4Rrn5zjPQeejaGfnUWVw4IpJRMSAiGZ94HnZHvJUR_gh1kIQ0l9QFw4wTkslO2_S2E3x0TG1mJ8Imi_xqvaRaXWQLowL5o8c9HPGzLIg1x-Yk0gYEe6aP2JkSv34Sjm0nwL10OtaQXty3c3sODXht5-Gy2e7ekjoUycLjVGevdWJ6dV9bpGGwWNDxWI/s320/kick.jpg" width="320"></a></p><p>

The "kick" is the </p><tt>RTS</tt><p> instruction — a </p><tt>BRK</tt><p> could also serve, and may even be more appropriately explosive, but I wanted the payload to be "more or less normal" code. You may have noticed we check for stack underflow in the kernel, which is a condition the harness can throw an exception for if it wants. (In KIMplement we don't; the stack just wraps, as it would on a real KIM-1.) Since we just "start" into the payload/kernel, there is no return address on the stack, so when the terminal payload wherever it is hits the </p><tt>RTS</tt><p> we have nothing to pull from. This gets reported up to the kernel that's supervising it which then does an </p><tt>RTS</tt><p> itself. At the deeper stages this too gets propagated back up and up until it reaches the native kernel, which then returns to the "hypervisor."
</p><p>
After all three stages are run, the hypervisor cleans up so you can run it again — on the Apple II, <tt>CALL 2051</tt>; on the C64, just <tt>RUN</tt> it — and then terminates to BASIC. I note parenthetically that this program extends up into the resident DOS range on the Apple II above $9000, so you should reboot after you're done playing around. 
</p><p>
The third demo is <a href="https://github.com/classilla/6o6/tree/main/examples/tasks/">a tiny task-switching kernel</a> that jumps back and forth between two independent tasks. Each task has its own zero page and stack, along with a tiny address range for its code to live in. Each task is encapsulated and completely unaware of the other task or, indeed, of the VM actually running it.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiCsv4PcszjeaZKAwJkR7CVmjZenAqokEFZEuPEkTHg56hqYEXb2C8CPykaZ5YfLBOjyVENl5QhhNS83PDpCN3Vx83-zTTQXYF0rZZ8codAykjSaXWIqLv9EKc_C0x6W9m2Qk4LNFpcs3TxlSPrGbW0XmhN6NOHMiwRmWlC34gb1wg4k9fjqF94u4Cq2bY/s1344/Screenshot%202024-04-17%20at%208.44.48%E2%80%AFPM.png"><img alt="" data-original-height="1112" data-original-width="1344" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiCsv4PcszjeaZKAwJkR7CVmjZenAqokEFZEuPEkTHg56hqYEXb2C8CPykaZ5YfLBOjyVENl5QhhNS83PDpCN3Vx83-zTTQXYF0rZZ8codAykjSaXWIqLv9EKc_C0x6W9m2Qk4LNFpcs3TxlSPrGbW0XmhN6NOHMiwRmWlC34gb1wg4k9fjqF94u4Cq2bY/s320/Screenshot%202024-04-17%20at%208.44.48%E2%80%AFPM.png" width="320"></a></p><p>

The two tasks are one displaying the letters of the alphabet, and one displaying numbers (in reverse video to make them visually distinct). Each time you press a key, the task switches. Even though each task uses the same location in zero page to track its state, their zero pages are independent, so they pick up where they last left off. If you hold down a key, then as the keypresses go through, the kernel switches back and forth between the two of them. (In fact, on the C64 version, the "reverse video" will bleed because it's possible for the numbers task to print the RVS ON sequence but get immediately swapped out after for the other task. This doesn't happen on the Apple II version where inverse video is a separate set of printable screen codes.)
</p><p>
All that's necessary to context-switch is to keep track of the current task and have storage areas for the processor state of each one (i.e., A, X, Y, P, S and PC). The harness looks at the task "on CPU" and selects the proper physical addresses for the zero page, stack and executable code accordingly; the kernel stores and loads the other state when instructed to swap and marks the other task as "on processor." This demo runs until you stop it with RUN-STOP/RESTORE or Control-Break.
</p><p>
<a href="https://github.com/classilla/6o6/tree/main/examples/vmgr/">For the last demonstration</a>, which runs only on the Commodore 64 (though it could be adapted for 128K systems like the 128 or Apple IIe), we'll provide a full 64K addressing space that uses none of the system's own RAM — it's all external memory. Since the C64 has only 64K of RAM of its own, this will require some hardware.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBxalYd2uE5wZGhzrWF-w_3DVWx-cPPXS7K647Y3AH1HCZqKJMorOLtlUQH16FStMoIX0vf5kjC77iD2ihF_clYSenseCcUYfUhps4KLYHQhYh74__xQy1JBEGSERhrmuG6GD_SmpJepcEDliMXbIYVlHQ-0MvBnrDH4qVYQlTg-vmDna7P5LZwFCs39k/s4080/PXL_20240420_230456794.jpg"><img alt="" data-original-height="4080" data-original-width="3072" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgBxalYd2uE5wZGhzrWF-w_3DVWx-cPPXS7K647Y3AH1HCZqKJMorOLtlUQH16FStMoIX0vf5kjC77iD2ihF_clYSenseCcUYfUhps4KLYHQhYh74__xQy1JBEGSERhrmuG6GD_SmpJepcEDliMXbIYVlHQ-0MvBnrDH4qVYQlTg-vmDna7P5LZwFCs39k/s320/PXL_20240420_230456794.jpg"></a></p><p>

The geoRAM is a paged RAM device distinct from the Commodore-official RAM Expansion Unit (REU), which is DMA-oriented. REU memory is not accessible directly, only by operations that read from, overwrite or exchange it with main memory using the custom MOS 8726 REC. Commodore 64 GEOS is very memory-hungry and GEOS supports the REU to reduce dependence on the disk drive, but the proprietary REC chip was expensive and suffered from supply shortages, so Berkeley Softworks came up with a cheaper alternative of its own. (Ah, Shattuck Avenue, says this Berkeley Master's graduate.)
</p><p>
Similar to schemes like early LIM EMS, the geoRAM maps its memory into a "window" page — in this case a 256-byte page in the I/O range at $de00 — with its control registers at $dffe and $dfff to change which page is accessed. This is convenient since that block of I/O space doesn't take away any RAM. Pulling up the correct page is merely a matter of setting the registers to the one you want and the window page is instantaneously read-write, so you don't need to flush any caches to bank in another one. Though the geoRAM complicates this slightly by using 16K "banks" (64K would have been more convenient), overall the geoRAM was a very straightforward and inexpensive scheme that can be implemented with off-the-shelf components, and compatible modern clones now have capacities up to 4MB. VICE can easily emulate a geoRAM.
</p><p>
For this demo I wanted to emulate a simple terminal-based system with a full 64K. As it happens, for a period of time the <a href="https://rc2014.co.uk/">RC2014 Z80 kit computer</a> had <a href="http://ancientcomputing.blogspot.com/2017/05/a-6502-cpu-for-rc2014-part-1.html">a third-party 6502 processor module</a> available, for which a ROM was provided that <a href="https://ancientcomputing.blogspot.com/2017/06/a-6502-cpu-for-rc2014-software.html">has both a simple monitor and Lee Davison's EhBASIC</a> (<a href="http://www.6502.org/users/mycorner/index.html">rip</a>). Like before I wanted to use a pre-built ROM so that you can see there's "nothing up my sleeve," and fortunately there's a set <a href="https://github.com/ancientcomputing/rc2014/tree/master/rom/6502/monitor_ehbasic">on Github</a>. We'll use the 6551 version, though we could use any of them (mutatis mutandis) since we're going to trap the terminal routines anyway.
</p><p>
Here's the harness store routine. As I mentioned, the geoRAM deals in 16K instead of 64K banks. We're going to just occupy the first 64K of what's there but we'll still need to handle the bank computation for anything between 16K and 64K.
</p><div><pre>        ; poke .a into location indicated by dptr
        ; okay to clobber x and y
mpoke   ldx dptr+1
        cpx #&gt;ROMSTART
        bcc :+
        ; no writes to emulated ROM, cheaters
        rts
        ; page unchanged? if so, skip all this nonsense
:       cpx curpage
        beq :++
        ; map the high byte maps onto the geoRAM page registers
        stx curpage     ; cache it
        cpx #64
        bcs :+
        ; below $4000, direct mapping
        stx $dffe
        ldx #0
        stx $dfff
        ldx dptr
        sta $de00,x
        rts
        ; $4000 and up indirect mapping, convert to block and bank
:       tay
        txa
        and #63
        sta $dffe
        txa
        and #192
        clc             ; carry is still set
        rol
        rol
        rol
        sta $dfff
        tya
:       ldx dptr
        sta $de00,x
        rts
</pre></div>
<p>
<tt>ROMSTART</tt> is the location of ROM in guest memory, which for the preassembled ROM image is $c100. Writes to it are simply ignored. For writes below 16K, we have a fast path; for everything else, there's <s>MasterCard</s> a quick banking adjust with masks and shifts. This isn't a slow calculation but it isn't necessary if we're already on the same page (particularly true for instruction fetches), so we always cache the current page the geoRAM is on.
</p><p>
The reason I wanted something with both a monitor and BASIC is so that you can mess around with the emulated machine's memory and any errors just bail out to the monitor. The main program and the kernel are one and the same in this example, so once the main program has checked that there's a geoRAM present and it seems to be working (by using its own harness, also a good self-test), it will copy the ROM image into geoRAM and begin execution. The relevant instruction loop looks like this:
</p><div><pre>lup     jsr VMU

        ; check status
        cmp #R_BRK
        beq dobrk
        cmp #R_BADINS
        beq doill
        cmp #R_UDI
        beq doill
        cmp #R_MFAULT   ; nb - current version can't generate this
        beq doill
        ; other conditions ignored
</pre></div>
<p>
<tt>BRK</tt> instructions go back to the monitor, as they do with most monitors.
</p><div><pre>        ; brk handler
dobrk   ; stack already set up by VM
        lda PAYLOAD+ROMSIZE-2
        sta pc
        lda PAYLOAD+ROMSIZE-1
        sta pc+1
        jmp lup
</pre></div>
<p>
But so that we can use the same machinery in the monitor, we "forge" a <tt>BRK</tt> for other failures like an illegal instruction or the special user-defined instruction trap (also notionally an illegal instruction).
</p><div><pre>        ; illegal failure handler
        ; effectively turn the faulting instruction into a brk
doill   ; do what VM opbrk would do, but wind the pc back one instruction
        ; since the bad opcode was already fetched
        lda pc
        clc
        adc #1          ; not 2
        sta hold0
        lda pc+1
        adc #0
        sta hold1       
        ; put high byte on first so it comes off last
        jsr SPUSH
        lda hold0
        jsr SPUSH
        lda preg
        ora #%00110000
        jsr SPUSH
        lda preg
        ora #%00010000  ; set bit 4 for B-flag, leave IRQs alone
        sta preg
        jmp dobrk
</pre></div>
<p>
The other main part of the kernel/main program is handling a simple emulated terminal. Since the RC2014 assumes a PC-type terminal, we intercept its serial vectors (for the other UARTs these values may need to be changed), translate to and from PETSCII and maintain a little cursor, twiddling the guest registers and flags according to the results. At any time you can do a "three finger salute" and reset the emulated system with CTRL-SHIFT-Commodore, leaving memory intact.
</p><div><pre>        ; check for emulated ROM routines
        ; these come from disassembling the reset routine at $ff0f
        ; use the targets rather than ff03, ff06, ff09, ff0c so that
        ; the vectors can be redirected to user code if desired
        ;
        ; f931 = init (no-op)
        ; f941 = input_char (wait) ($ff03 vectored at $03d0)
        ; f94c = input_char (no wait, carry flag) ($ff06 vectored at $03d2)
        ; f959 = output_char ($ff09 vectored at $03d4)
        ; fa05 = print string at a, x ($ff0c)

        lda pc+1
        cmp #$f9
        beq lowchek
        cmp #$fa
        bne lup
        ; $fa05 is the only routine in $faxx we patch
        lda pc
        cmp #$05
        bne lup
        jmp epstrax
        ; check $f9xx routines
lowchek lda pc
        cmp #$31
        beq euinit
        cmp #$41
        beq euinput
        cmp #$4c
        beq euscan
        cmp #$59
        beq euout
        jmp lup
</pre></div>
<p>
Let's pop it into VICE.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrAd-ePNNHX_WMpKB42efKwVxXTXpMyPB1TYgAoMDCV6QTrN3aIG_yEpqNw_X467tJqyn1eFBy5Kgvt03hnQzV4xRCouzXmolulgWZNbk7r7TzUR8JRN-pEVz0Ad0zU6XRVtzpKuIDDY2c1chC9xg08NgC5jrDiXelZDjI7m8Lv15KH5c4Kq8oA5JMlJo/s1632/Screenshot%202024-04-17%20at%208.50.28%E2%80%AFPM.png"><img alt="" data-original-height="1556" data-original-width="1632" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhrAd-ePNNHX_WMpKB42efKwVxXTXpMyPB1TYgAoMDCV6QTrN3aIG_yEpqNw_X467tJqyn1eFBy5Kgvt03hnQzV4xRCouzXmolulgWZNbk7r7TzUR8JRN-pEVz0Ad0zU6XRVtzpKuIDDY2c1chC9xg08NgC5jrDiXelZDjI7m8Lv15KH5c4Kq8oA5JMlJo/s320/Screenshot%202024-04-17%20at%208.50.28%E2%80%AFPM.png" width="320"></a></p><p>

The screenshot here shows starting it up and entering EhBASIC (from the monitor, </p><tt>g c100</tt><p> for cold start or </p><tt>g c103</tt><p> for warm). This particular version has been minimally patched by the RC2014-6502 author to implement a </p><tt>SYS</tt><p> command to return to the monitor. On a cold start, EhBASIC will ask for the memory size, or if you give it none, count it up itself. The unaccelerated C64 using geoRAM takes about a minute to discover that it has 32768 bytes free (it's actually more but this ROM was built with a hard cap at $8000, so you can put things at $8000 through $c0ff) because it has to swap the window back and forth between the instructions it fetches and the RAM locations it reads, or you can just type 32768 to skip all that. EhBASIC annoyingly does not accept lower-case commands or keywords and you must type everything in UPPERCASE. We run a simple little BASIC program to show it works, then intentionally try to foul the machine by storing and executing a jam instruction. The monitor is duly and swiftly invoked with the PC correctly pointing to the offender.

</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhLSj8sACqwLvcU_BC-puSEMuLsNPS73TdQQGpggdXiuzEct1p1I33z5K3fEzog8UIWHl8R5rvWJiCK2iLkkKlmgtRB-7X6X19hyphenhyphento30i4lD8Jzm_A7k0AYB9yBQgnaZ0bVhEgwpPxFuFDep0EsZxFQwOmKywc20M5F4-A5iT4xQa5KSNssRFpxYR1YZoQ/s4080/PXL_20240420_234728625.jpg"><img alt="" data-original-height="3072" data-original-width="4080" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhLSj8sACqwLvcU_BC-puSEMuLsNPS73TdQQGpggdXiuzEct1p1I33z5K3fEzog8UIWHl8R5rvWJiCK2iLkkKlmgtRB-7X6X19hyphenhyphento30i4lD8Jzm_A7k0AYB9yBQgnaZ0bVhEgwpPxFuFDep0EsZxFQwOmKywc20M5F4-A5iT4xQa5KSNssRFpxYR1YZoQ/s320/PXL_20240420_234728625.jpg" width="320"></a></p><p>

And here it is on my real Commodore 128DCR with my real geoRAM cartridge installed. Notice that floating point math works just fine, too, and that the bad instruction is once again immediately intercepted in a controlled fashion. Other than the 256 byte window peeping through, none of what we're looking at here actually executes from the 6502's own address space. Even on this basic 512K geoRAM unit you could have eight entire 6502 system tasks, all separate and independent, with only a minimum of state for each one needing to be maintained on the actual processor.
</p><p>
What are some future improvements to 6o6? Naturally I'd like it to be able to run from ROM, though this would require some refactoring and would possibly make it slower, so this would only ever be an option. Also, although I consider making something like this emulate a 65816 on an NMOS 6502 to be thoroughly out of scope, it might be possible to have it emulate CMOS instructions on the NMOS system, just as this will (mostly) act like an NMOS CPU when run on a CMOS system. Note that since the ALU is used, an NMOS 6502 emulating a CMOS 65C02 will still have flags set the way the NMOS system would do it and vice versa, and the addressing is currently written the way an NMOS CPU would do it, like indirect jumps to $xxff pulling the vector from $xxff and $xx00. Additionally, despite the performance improvements I've implemented over the years, depending on how the inline memory macros are done there are peephole optimization opportunities that could potentially be accomplished with a "post-preprocessor" pass before actual assembly. That would make the tooling more complex, so I'd have to see how much benefit that realizes in the general case.
</p><p>
Other than using 6o6 to power a custom operating system, though, another obvious use is running downloaded code without messing up what you're currently doing. My next application might be as part of a Gopher client where you can dynamically run what you download, like a networked file system. That could have possibilities!
</p><p>
If you're designing your own ultimate 6502 system, of course, 6o6 is not (primarily) meant for you — you can just implement the hardware you want to implement the features you need, and because you're in control of the design you'd be able to do it faster. But if you're trying to do this on an NMOS CPU where you have fewer guardrails, or to do it with a minimum of added silicon, then here's another option that's designed to be flexible and adaptable.
</p><p>
Meanwhile, the updates for KIMplement 1.0 are just minor bug fixes and cleaning it up for public display. I've also included Tiny PILOT courtesy of <a href="http://www.vanportmedia.com/PAL-1/utilities/index.html">Dave Hassler</a>, which originally appeared in <i>MICRO</i> magazine written by Nicholas Vrtis in 1979 with patches by Bob Applegate (<a href="http://oldvcr.blogspot.com/2023/06/rip-bob-applegate.html">rip</a>) and Dave himself. It runs splendidly and is a nice small implementation of <a href="https://en.wikipedia.org/wiki/PILOT">an interesting language</a> that ought to have a second life in scripting. Dave also ported ELIZA to it from the 1980 Atari PILOT implementation by Carol Shaw and Harry Stewart, which serves as a historically noteworthy demonstration.
</p><p>
The Incredible KIMplement is available <a href="http://www.floodgap.com/retrobits/kim-1/emu.html">from its homepage</a>, along with sourcecode <a href="https://github.com/classilla/kimplement">on Github</a>. 6o6 is also available <a href="https://github.com/classilla/6o6">on Github</a> and all four of the examples shown here. Both the KIMplement and 6o6 are under the <a href="http://www.floodgap.com/software/ffsl/">Floodgap Free Software License</a>.
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show NH: "data-to-paper" - autonomous stepwise LLM-driven research (124 pts)]]></title>
            <link>https://github.com/Technion-Kishony-lab/data-to-paper</link>
            <guid>40331850</guid>
            <pubDate>Sun, 12 May 2024 01:52:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Technion-Kishony-lab/data-to-paper">https://github.com/Technion-Kishony-lab/data-to-paper</a>, See on <a href="https://news.ycombinator.com/item?id=40331850">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">data-to-paper: AI-driven research from data to human-verifiable research papers</h2><a id="user-content-data-to-paper-ai-driven-research-from-data-to-human-verifiable-research-papers" aria-label="Permalink: data-to-paper: AI-driven research from data to human-verifiable research papers" href="#data-to-paper-ai-driven-research-from-data-to-human-verifiable-research-papers"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Technion-Kishony-lab/data-to-paper/blob/main/data_to_paper_icon.gif?raw=true"><img src="https://github.com/Technion-Kishony-lab/data-to-paper/raw/main/data_to_paper_icon.gif?raw=true" width="400" data-animated-image=""></a></p>
<p dir="auto"><a href="https://arxiv.org/abs/2404.17605" rel="nofollow"><em>data-to-paper</em></a> is a framework for systematically navigating the power of AI to perform complete end-to-end
scientific research, starting from raw data and concluding with comprehensive, transparent, and human-verifiable
scientific papers (<a href="https://t.co/iz44TDZZHb" rel="nofollow">example</a>).</p>
<p dir="auto">Towards this goal, <em>data-to-paper</em> systematically guides interacting
LLM and rule-based agents through the conventional scientific path, from annotated data, through creating
research hypotheses, conducting literature search, writing and debugging data analysis code,
interpreting the results, and ultimately the step-by-step writing of a complete research paper.</p>
<p dir="auto">The <strong>data-to-paper</strong> framework is created as a research project to understand the
capacities and limitations of LLM-driven scientific research, and to develop ways of harnessing LLM to accelerate
research while maintaining, and even enhancing, key scientific values, such as transparency, traceability and verifiability,
and while allowing scinetist to oversee and direct the process
[see also: <a href="https://www.nature.com/articles/d41586-023-03266-1" rel="nofollow">living guidelines</a>].</p>
<details open="">
  <summary>
    
    <span aria-label="Video description data_to_paper.mp4">data_to_paper.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/65530510/326309132-73dca9b5-3117-490a-9578-345789889189.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU1Mjk5MDUsIm5iZiI6MTcxNTUyOTYwNSwicGF0aCI6Ii82NTUzMDUxMC8zMjYzMDkxMzItNzNkY2E5YjUtMzExNy00OTBhLTk1NzgtMzQ1Nzg5ODg5MTg5Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA1MTIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNTEyVDE2MDAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTkxODdmYjQ0NmY3NTNiMDFkOGVjZDc0NTE3MDRjN2ViM2VkNjZmZjczYTFhOGZiNzcxYTNiMmQ4ZWM2ZWY0YzMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.ImdhWSVmXLQfEJBLx2yNEpsjdE5j0tA8lbvF9vSGgsk" data-canonical-src="https://private-user-images.githubusercontent.com/65530510/326309132-73dca9b5-3117-490a-9578-345789889189.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU1Mjk5MDUsIm5iZiI6MTcxNTUyOTYwNSwicGF0aCI6Ii82NTUzMDUxMC8zMjYzMDkxMzItNzNkY2E5YjUtMzExNy00OTBhLTk1NzgtMzQ1Nzg5ODg5MTg5Lm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA1MTIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNTEyVDE2MDAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTkxODdmYjQ0NmY3NTNiMDFkOGVjZDc0NTE3MDRjN2ViM2VkNjZmZjczYTFhOGZiNzcxYTNiMmQ4ZWM2ZWY0YzMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.ImdhWSVmXLQfEJBLx2yNEpsjdE5j0tA8lbvF9vSGgsk" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h3 tabindex="-1" dir="auto">Reference</h3><a id="user-content-reference" aria-label="Permalink: Reference" href="#reference"></a></p>
<p dir="auto">The <strong>data-to-paper</strong> framework is described in the following pre-print:</p>
<ul dir="auto">
<li>Tal Ifargan, Lukas Hafner, Maor Kern, Ori Alcalay and Roy Kishony,
"Autonomous LLM-driven research from data to human-verifiable research papers",
<a href="https://arxiv.org/abs/2404.17605" rel="nofollow">arXiv:2404.17605</a></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Key features</h3><a id="user-content-key-features" aria-label="Permalink: Key features" href="#key-features"></a></p>
<ul dir="auto">
<li><strong>Field agnostic</strong>. We strive to make the framework as general as possible, so that it can be used across different
fields of research.</li>
<li><strong>Open-goal or fixed goal research.</strong> <em>data-to-paper</em> can be used to autonomously raise and test
a hypothesis, or to test a specific pre-defined user-defined hypothesis.</li>
<li><strong>Data-chained manuscripts</strong>. The process creates transparent and verifiable manuscripts, where results,
methodology and data are programmatically linked
(all numeric values can be click-traced back to the code lines that created them).</li>
<li><strong>Human-in-the-loop.</strong> A GUI app allows the user to oversee the process, and to intervene
at each research step.</li>
<li><strong>Replay</strong>. The entire process is recorded, including all LLM responses, Human feedback, and
literature search retrievals, allowing for transparent replay of the process.</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Installation</h3><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">See <a href="https://github.com/Technion-Kishony-lab/data-to-paper/blob/main/INSTALL.md">INSTALL.md</a> for installation instructions.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">How to run</h3><a id="user-content-how-to-run" aria-label="Permalink: How to run" href="#how-to-run"></a></p>
<ol dir="auto">
<li>Install data-to-paper (<a href="https://github.com/Technion-Kishony-lab/data-to-paper/blob/main/INSTALL.md">INSTALL</a>).</li>
<li>Run data-to-paper:
<code>python data_to_paper/data_to_paper/run/run.py</code></li>
<li>This will open a startup dialog that will allow you to specify your own project,
or to reproduce example projects (<code>data-to-paper/projects</code>)</li>
<li>Click "Start" to start the run, with human overseeing and feedback.</li>
<li>At the end of the process, a pdf of the manuscript will be created in the project folder.</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">GUI app demo</h3><a id="user-content-gui-app-demo" aria-label="Permalink: GUI app demo" href="#gui-app-demo"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description data-to-paper-demo.mp4">data-to-paper-demo.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/65530510/326834210-878865a7-45b4-496c-a62f-71d0003ce44b.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU1Mjk5MDUsIm5iZiI6MTcxNTUyOTYwNSwicGF0aCI6Ii82NTUzMDUxMC8zMjY4MzQyMTAtODc4ODY1YTctNDViNC00OTZjLWE2MmYtNzFkMDAwM2NlNDRiLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA1MTIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNTEyVDE2MDAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU4Yzc5MjE5NWJkNWFmMDZlNDg3MzU0NjNiYzAzNzc3ZmIxZTcyMTVmNGQzNmE1NWE2YjcxODIwNGIyMjJlYTYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.OhCGM4Lm_cB9s5OxNWykZfxBPtRkAU3fCIPfM4iRoaI" data-canonical-src="https://private-user-images.githubusercontent.com/65530510/326834210-878865a7-45b4-496c-a62f-71d0003ce44b.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTU1Mjk5MDUsIm5iZiI6MTcxNTUyOTYwNSwicGF0aCI6Ii82NTUzMDUxMC8zMjY4MzQyMTAtODc4ODY1YTctNDViNC00OTZjLWE2MmYtNzFkMDAwM2NlNDRiLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA1MTIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNTEyVDE2MDAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWU4Yzc5MjE5NWJkNWFmMDZlNDg3MzU0NjNiYzAzNzc3ZmIxZTcyMTVmNGQzNmE1NWE2YjcxODIwNGIyMjJlYTYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.OhCGM4Lm_cB9s5OxNWykZfxBPtRkAU3fCIPfM4iRoaI" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h3 tabindex="-1" dir="auto">Examples</h3><a id="user-content-examples" aria-label="Permalink: Examples" href="#examples"></a></p>
<p dir="auto">We ran <strong>data-to-paper</strong> on the following test cases:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Health Indicators (open goal).</strong> A clean unweighted subset of CDC’s Behavioral Risk Factor Surveillance System (BRFSS) 2015 annual dataset
(<a href="https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset" rel="nofollow">Kaggle</a>). Here is an <a href="https://github.com/rkishony/data-to-paper-supplementary/blob/main/Supplementary%20Data-chained%20Manuscripts/Supplementary%20Data-chained%20Manuscript%20A.pdf">example Paper</a> created by data-to paper.</p>
<p dir="auto">Branch: <code>examples/diabetes</code></p>
</li>
<li>
<p dir="auto"><strong>Social Network (open goal).</strong> A directed graph of Twitter interactions among the 117th Congress members
(<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10493874/" rel="nofollow">Fink et al</a>). Here is an <a href="https://github.com/rkishony/data-to-paper-supplementary/blob/main/Supplementary%20Data-chained%20Manuscripts/Supplementary%20Data-chained%20Manuscript%20B.pdf">example Paper</a> created by data-to paper.</p>
<p dir="auto">Branch: <code>examples/congress_social_network</code></p>
</li>
<li>
<p dir="auto"><strong>Treatment Policy (fixed-goal).</strong> A dataset on treatment and outcomes of non-vigorous infants admitted to the Neonatal Intensive Care Unit (NICU), before and after a change to treatment guidelines was implemented
(<a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0289945" rel="nofollow">Saint-Fleur et al</a>). Here is an <a href="https://github.com/rkishony/data-to-paper-supplementary/blob/main/Supplementary%20Data-chained%20Manuscripts/Supplementary%20Data-chained%20Manuscript%20C.pdf">example Paper</a> created by data-to paper.</p>
<p dir="auto">Branch: <code>examples/nicu</code></p>
</li>
<li>
<p dir="auto"><strong>Treatment Optimization (fixed-goal).</strong> A dataset of pediatric patients, which received mechanical ventilation after undergoing surgery, including an x-ray-based determination of the optimal tracheal tube intubation depth and a set of personalized patient attributes to be used in machine learning and formula-based models to predict this optimal depth
(<a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0257069" rel="nofollow">Shim et al</a>). Here is an <a href="https://github.com/rkishony/data-to-paper-supplementary/blob/main/Supplementary%20Data-chained%20Manuscripts/Supplementary%20Data-chained%20Manuscript%20D.pdf">example Paper</a> created by data-to paper.</p>
<p dir="auto">Branch: <code>examples/tube_levels</code></p>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Contributing</h3><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">We invite people to try out <strong>data-to-paper</strong> with their own data and are eager for feedback and suggestions.
It is currently designed for relatively simple research goals and simple datasets, where
we want to raise and test a statistical hypothesis.</p>
<p dir="auto">We also invite people to help develop and extend the <strong>data-to-paper</strong> framework in science or other fields.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Important notes</h3><a id="user-content-important-notes" aria-label="Permalink: Important notes" href="#important-notes"></a></p>
<p dir="auto"><strong>Disclaimer.</strong> By using this software, you agree to assume all risks associated with its use, including but not limited
to data loss, system failure, or any other issues that may arise, especially, but not limited to, the
consequences of running of LLM created code on your local machine. The developers of this project
do not accept any responsibility or liability for any losses, damages, or other consequences that may occur as
a result of using this software.</p>
<p dir="auto"><strong>Accountability.</strong> You are solely responsible for the entire content of
created manuscripts including their rigour, quality, ethics and any other aspect.
The process should be overseen and directed by a human-in-the-loop and created manuscripts should be carefully vetted
by a domain expert.
The process is NOT error-proof and human intervention is <em>necessary</em> to ensure accuracy and the quality of the results.</p>
<p dir="auto"><strong>Compliance.</strong> It is your responsibility to ensure that any actions or decisions made based on the output of this
software comply with all applicable laws, regulations, and ethical standards.
The developers and contributors of this project shall not be held responsible for any consequences arising from
using this software. Further, data-to-paper manuscripts are watermarked for transparency as AI-created.
Users should not remove this watermark.</p>
<p dir="auto"><strong>Token Usage.</strong> Please note that the use of most language models through external APIs, especially GPT4,
can be expensive due to its token usage. By utilizing this project, you acknowledge that you are
responsible for monitoring and managing your own token usage and the associated costs.
It is highly recommended to check your API usage regularly and set up any necessary limits or alerts to
prevent unexpected charges.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Related projects</h3><a id="user-content-related-projects" aria-label="Permalink: Related projects" href="#related-projects"></a></p>
<p dir="auto">Here are some other cool multi-agent relted projects:</p>
<ul dir="auto">
<li><a href="https://github.com/langchain-ai/langchain">LangChain</a></li>
<li><a href="https://microsoft.github.io/autogen/" rel="nofollow">AutoGen</a></li>
<li><a href="https://github.com/Significant-Gravitas/AutoGPT">AutoGPT</a></li>
<li><a href="https://github.com/geekan/MetaGPT">MetaGPT</a></li>
</ul>
<p dir="auto">And also this curated list of AI agents projects <a href="https://github.com/kyrolabs/awesome-agents">awesome-agents</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ancient Egyptian Stone-Drilling (1983) (123 pts)]]></title>
            <link>https://www.penn.museum/sites/expedition/ancient-egyptian-stone-drilling/</link>
            <guid>40331594</guid>
            <pubDate>Sun, 12 May 2024 00:48:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.penn.museum/sites/expedition/ancient-egyptian-stone-drilling/">https://www.penn.museum/sites/expedition/ancient-egyptian-stone-drilling/</a>, See on <a href="https://news.ycombinator.com/item?id=40331594">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="mainContent">
	<div itemscope="" itemtype="http://schema.org/ScholarlyArticle" id="maincontent" data-parent="">
			<article>
								
				<p itemprop="alternativeHeadline">An Experimental Perspective on a Scholarly Disagreement</p>				
				<div itemprop="articleBody">
						<p>More than most technical procedures in the ancient world, drilling of hard stone such as quartz and granite has evoked awe and puzzlement. Neither wall paintings, nor textual information, nor excavated material has provided complete answers as to how drilling was done. As a conse­quence, there has been scholarly contro­versy. One such disagreement occurred between two eminent Egyptologists, A. Lucas and Sir Flinders Petrie. Their argument revolved around a difficult and important question, namely, how did the ancient Egyptians of the 3rd millennium B.C. drill granite?</p>
<figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill01.jpg" alt="A granite core with concentric lines down the length." width="400"><figcaption> 1a. The granite core published by Petrie was made by the ancient Egyptians using a tubular drill. Note the similarity of the concentric lines (arrow) found on the core.</figcaption></figure>
<p>This unresolved question, raised by Petrie as early as 1883, is important not only to Egyptologists, but to scholars of ancient lapidary technology anywhere in the world where hard stone was drilled. Here, we report on our preliminary experi­ments directed toward a resolution of this controversy. The reader must bear in mind that our work is based solely upon the evidence of the object examined, and does not take into account ancient Egyptian textual or material evidence that might shed light upon this problem.</p>
<p>The disagreement between Lucas and Petrie can be most accurately summarized by alternately juxtaposing their own words written over a 35-year period.</p>
<p><strong>Lucas:</strong></p>
<p>“…as neither copper nor bronze is<b> </b>sufficiently hard to cut such stones as basalt, diorite, granite, quartzite and schist, a harder material than the metal is required to do the work which must have been used either in the form of [fixed] cutting points [teeth] or as a loose [abrasive] powder . . . in my opinion, it was a loose abrasive powder [of] finely ground quartz sand used wet … loose quartz sand which occurs in great abundance in Egypt and will abrade quartz … which was the hardest stone the ancient Egyptians worked.”</p>
<p><strong>Petrie:</strong></p>
<p>“The cutting of granite was done by jewelled tubular drills . . . with cutting points . of emery . .. set in the sides of the tube both inside and out . .. every mechanic who has examined the grooves on .. . a core of red granite from Gizeh agrees that nothing but a fixed point could have cut such grooves.”</p>
<p><strong>Lucas:</strong></p>
<p>“In my opinion to suppose the knowledge of cutting these gem stones to form teeth and of setting them in the metal in such a manner that they would bear the strain of hard use and to do this at the early period assigned to them, would present greater difficulty than those explained by the assumption of their employment . . It is highly probable that pieces of the abrasive would have been forced into the metal, where they might have remained for some time . . and produced the same effect as intentional and permanent ones.”</p>
<p><strong>Petrie:</strong></p>
<p>… It seems physically impossible that any particle of a loose powder could become so embedded in a soft metal by the mere accidents of rubbing that it could bear the immense strain needed to plough out a groove of any considerable depth in such a hard material as quartz. … Modern diamond drill cores are clumsy and smudged work when com­pared to the Egyptian cores.”<br>
</p><figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill02.jpg" alt="A section of core with concentric circles down the length." width="400"><figcaption> 1b. produced by a modern mason’s diamond tubular drill.</figcaption></figure>
<p>In essence, then, Lucas and Petrie, look­ing at the same regular concentric lines on drilled cores of granite (Fig. 1), disagreed as to whether they were made using a loose wet quartz sand abrasive (Lucas), or fixed points of emery (Petrie). (Note: Emery is a granular rock composed mainly of corun­dum—a crystalline compound of silicon and carbon—magnetite and spinel. Here, `emery’ and `corundum’ are used for the abrasive powders derived from these rocks.)</p>
<p>Lucas cited many references to show that quartz sand could drill granite. However, none of these references indicated that <em>concentric lines</em> were formed as a result of the drilling. Petrie speculated that diamond and corundum were used for drilling. He rejected diamond for its “rarity” and corundum for its “impossi­bility” in favor of emery. <em>Neither cited evidence for his conclusions.</em></p>
<p>The purpose of our paper is to present experimental evidence which partly resolves this disagreement. Our evidence resulted from the functional analysis of a drilled granite lid from an Old Kingdom sarcophagus ca. 2500 B.C., now in the Brooklyn Museum (Fig. 2). It probably belonged to Prince Akhet-Hotep of Dynasty IV. The sarcophagus weighs about four tons, the lid two tons. The lid has two holes on each end that were (probably) used to raise and lower it. The holes are 24 cm. long; their diameter on the outside is 5.3 cm. and tapers to 4.3 cm. on the inside.<br>
</p><figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill03.jpg" alt="A massive stone sarcophagus with geometric pattern carved into the base, and lid closed on top. Two drill holes can be seen on the end of the lid." width="900"><figcaption> 2. Old Kingdom sarcophagus now in the Brooklyn Museum. Note the drill holes at the end of the lid. The lid weighs two tons. The drill holes are 24cm. long. 5.3 cm. diameter on the outside, and taper to 4.3 cm. on the inside.</figcaption></figure>
<h3>Method of Investigation</h3>
<p>Some of the procedures that we have employed in this investigation have been previously reported. They have been used to analyze (1) beads from Shar-i-Sokhta, an Early Bronze Age site in eastern Iran; (2) ancient Near Eastern cylinder seals; (3) the drilled, inlaid teeth of the ancient Maya; (4) an Early Bronze Age Cycladic statuette, and (5) stone statuettes exhibited at the Cleveland Museum.</p>
<p>There are three separate steps in our method of investigation, all non-destructive to the object. They are (1) silicone impres­sions of the parts to be studied in order to capture the tool marks; (2) examination of the impressions (or epoxy models made from them) in the scanning electron micro­scope (SEM) and the fabrication of photo­micrographs, and (3) functional analysis attempting to duplicate the tool marks experimentally.</p>
<p>Ordinarily, when taking silicone impres­sions of a narrow drill hole on seals or beads, a toothpick has been used to tease the loose-flowing silicone into the hole. Because of the size of the drill holes in the lid, we had to resort to a modification.</p>
<p>In order to take an impression of the hole, a large dowel was used instead of a toothpick. Before the addition of the free-flowing silicone, a heavy-based silicone was placed around the end of the dowel and molded so that it was slightly narrower than the circumference of the hole. When this had set, free-flowing silicone was added and the dowel inserted into the hole. When the silicone had set, the dowel was removed first. This permitted the silicone impression to be removed more readily since it could be compressed slightly into the space occupied by the dowel. Because of the length of the drilling, the impression was made in two parts.<br>
</p><figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill04.jpg" alt="A silicone impression of the drill hole showing concentric lines down the length, held on a dowel." width="900"><figcaption> 3. Silicone impression of the drill hole. The concentric lines are visible (arrow). Similar lines have been found in (and reported on) the central bores of ancient Near Eastern cylinder seals and in early Bronze Age beads excavated in Iran.</figcaption></figure>
<figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill05.jpg" alt="Close up of model of drill hole showing lines growing closer togeter towards the top." width="900"><figcaption> 4. Photograph of a model of the bottom of the drill hole shows that lines are spaced closer together (arrow). This may be due to abrasive having become finer as drilling continued.</figcaption></figure>
<h3>Findings on The Impression</h3>
<p>The regular concentric lines are clearly visible macroscopically on the impression (Fig. 3). They are quite similar to those found and reported by Petrie. Several characteristics are obvious from a study of the silicone impressions:</p>
<ol>
<li>The drilling was done entirely from one end with a relatively slight taper. Over the 24 cm. length of the drill hole there was only 1 cm. or 4% narrowing, indi­cating very little wear and wobble of the drill. This shape suggested the use of a tubular drill and will be discussed later.</li>
<li>The concentric lines were aligned more closely near the bottom or narrow end (Fig. 4).</li>
<li>The concentric lines were not always perfectly parallel. Occasionally a line tracked at an angle across adjacent lines (Fig. 5). Some of the lines exhibited a slight amount of irregularity.</li>
<li>At the edge of the narrow end of one of the holes, there is a region devoid of lines, slightly rounded and having almost a polished appearance (Fig. 6).</li>
</ol>
<h3>Functional Analysis</h3>
<ol>
<li>A slab of red granite similar to that of the sarcophagus was drilled with a copper rod and/or a copper tube in conjunction with the following abra­sives: (their Mohs scale of hardness is placed alongside in parenthesis) a, beach sand (7); b, crushed quartz (7); c, garnet (7); d, emery (9); e, corundum (9); f, silicon carbide (9); g, diamond (10).<br>
Granite is composed primarily of quartz (7), feldspar (6) with some mica (2-3).</li>
<li>Drilling was also attempted with (a) chipped flint (7); (b) shaped sandstone (7); (c) shaped quartzite (7).</li>
<li>The abrasives listed were used in the following manner (a) dry, (b) wet, (c) in a grease-like vehicle or lubricant, (d) in<b> </b>olive oil, (e) experimentally glued (by us) to a copper rod, (f) on a contempo­rary bonded drill.</li>
<li> The size of the abrasives varied to include 60-90 grit and 240 grit.</li>
<li>Drilling was effected at a constant rota­tional speed of 1000 RPM and held intermittently at a relatively constant pressure.</li>
<li>Some drilling was done with a brace and bit in an oscillating (i.e. back and forth) manner and some with a bow drill.</li>
<figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill06.jpg" alt="Magnified model of drill hole showing varying width of seperation between lines." width="900"><figcaption> 5. Scanning micrograph use of the model shows that the concentric lines are not always regular and parallel. Some are disrupted (open arrow) while others converge (closed arrow) and diverge. Magnification x 16.</figcaption></figure>
<figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill07.jpg" alt="Magnified model of drill hole showing finer, smoothed lines and ridges." width="900"><figcaption> 6. Scanning micrograph taken twoards the bottom of the drill hole where the lien are finer and in some regions are incomplete or absent. This gives it a polished appearance (open arrow), which could have been caused by the pulverized granite or finely crushed abrasive acting as a polishing agent. Note the round on the lip at the leading edge (closed arrow). Magnification x 8.</figcaption></figure>
<h3>Findings Using Silicone Impressions and Scanning Electron Microscopy</h3>
<p>The clue that provided the basis for partly resolving the difference of opinion between Lucas and Petrie resulted from the experimental procedures described above. This happened when it became evident that it was possible to drill granite without creating concentric abrasion lines. There­fore, the presence or absence of concentric lines became an indicator of the type of abrasive. Consequently, an abrasive that could drill granite but did <em>not</em> produce cutting lines was ruled out as a possibility. This occurred when sand and crushed quartz were used with either a copper rod or copper tube. No lines occurred when these were added loose, either dry or wet (Fig. 7a). Thus, Lucas’ hypothesis that wet sand was the abrasive used is not sup­ported, since the surface was totally rough (an examination of the drills after drilling with sand or quartz failed to reveal any charging of these to the copper). His second hypothesis, that attachment occurred during drilling, therefore, is also not supported by experiment.</p>
<p>On the other hand, Petrie may have been correct in one respect and possibly wrong in another: emery could have been used since we found its use with a copper tube produced concentric cutting lines (Fig. 7b), but it did not require that it be used as fixed points to create the cutting lines. While we were able to glue emery to a copper rod and while lines were produced in granite, it did not advance fast enough in our experiment to produce concentric lines on side walls. There are many reasons for this, such as loss of the cutting edge of the fixed particles, wear of the glue, etc. Our gluing was done using a combination of hide glue and water glass (sodium silicate), both of which were within the technology of the ancient Egyptians. It is possible that there are methods of creating fixed points that we have not tried as yet, such as embedding abrasives in a melt of copper to produce the equivalent of a contemporary sintered drill. Further research is needed.</p>
<p>Emery did not produce concentric lines when it was used dry. It produced lines when used in a water slurry which helped to keep the abrasive at the drill site and on track so to speak. This would suggest that the ancient Egyptians were aware of the value of water as an aid to drilling, some­thing that contemporary lapidaries still employ.</p>
<p>Emery also produced lines when used in conjunction with a viscous lubricant and with olive oil. These too served to keep the abrasive particles at the site of drilling. It is not possible to say for certain which method was used. Using a viscous lubricant also had the advantage of being able to create a drill hole faster than when water was used with the abrasive. Further research is needed to distinguish between the use of different vehicles for the abrasives.<br>
</p><br>
In addition to emery, concentric cutting lines were also present after drilling with corundum and diamond. These occurred when the abrasives were used loose with water, olive oil or a viscous lubricant. Only diamond produced concentric lines when used loose and dry. Further research is&nbsp;needed to distinguish between drilling created by emery, corundum and diamond, and also between drilling with water or with a lubricant as an adjunct.
<p>Experimental drilling with chipped flint, fashioned sandstone and quartzite neither produced concentric lines nor a drill hole on granite, thereby precluding their use. It is tempting to believe that emery was the abrasive used because of the well known statement by Pliny that emery or Noxium was available from Noxos. This may have been the Egyptian source for the abrasive. Another known source of emery is Turkey although there is no proof that it was known in ancient times.</p>
<p>It is also tempting to speculate that diamond was the abrasive used due to its tremendous efficiency. One reason for this efficiency can be seen in the graph by Woodell (Fig. 8) which shows that while emery and corundum are 9 on the Mohs scale and diamond is 10, there is a signifi­cant increment between them. Petrie also speculated on the use of diamond as the abrasive and then rejected it because of its “rarity.”</p>
<p>At this stage in our research, we cannot say for sure which one of the abrasives that created concentric cutting lines in the granite, i.e. emery, corundum and diamond, was the one that was used or indeed if all were known or used.<br>
</p><figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill12.jpg" alt="A sketch of Mohs hardness scale on a graph with various substances ploted on the line." width="400"><figcaption> 8. The Mohs scale of hardness modified by Woodall helps explain the results found in drilling granite. Emery, corundum and diamond, whose hardness is 9, 9, and 10 respectively, all produced concentric lines when used wet, with olive oil or a modern lubricant. Sand and quartz, with a Mohs hardness of 7 and similar to granite, did not. Note that diamon is four times harder than emery and corundum.</figcaption></figure>
<p>These preliminary findings raise a num­ber of interesting questions such as:</p>
<ol>
<li>If the abrasive was not emery but maybe corundum or diamond, where would it have come from? They are thought not to be indigenous to Egypt. Could it have been by trade with the Far East?</li>
<li>Were these minerals and/or the use of water or a lubricant known to the lapidaries of the surrounding regions? When and where did they start? Insight into this question may be gained by a functional analysis of other hard stones such as quartz and hematite that were used so widely in Mesopotamia. As we have shown in previous work, concen­tric lines are commonly found in the bores of cylinder seals.</li>
<li>How does the use of an iron drill affect the formation of concentric lines and the speed of drilling?</li>
<li>Can the presence or absence of concen­tric lines be used to determine between genuine and forged artifacts?</li>
</ol>
<p>The answers to these questions will pro­vide considerable insight into the history of ancient lapidary technology.</p>
<p>In regard to the drills made of sandstone or quartzite, neither produced concentric lines. Indeed, the extent of cutting was negligible. Flint was equally ineffective. In our previous research using flint on softer stone, such as marble, the pattern produced was that of concentric <em>grooves</em> (Fig. 9) that are related to the shape of the flint drill and created during the knapping process. These were readily distinguishable from concentric <em>lines</em>.<br>
</p><figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill13.jpg" alt="Micrograph of hole drilled by flint into soft stone, showing wide grooves." width="900"><figcaption> 9. Scanning micrograph of a whole drilled in a soft stone using flint. Note that the shape and grooves caused by the cutting facets of the knapped flint contrast with the features of the holes drilled into granite. We were unable to drill granite with a flint lith. Magnification x 8.</figcaption></figure>
<p>Regarding other aspects of the tech­niques used to drill the sarcophagus lid, while the evidence is less firm, the follow­ing suggestions are offered:</p>
<ol>
<li>The drilling was done first from one end, then the slab was sawn. This can be seen because a rounded lip remains on one side (Fig. 6).</li>
<li>The drill may have been a tubular drill. It was very likely copper, since bronze tools were not in use until the Middle Kingdom <em>ca.</em> 2000 B.C. The idea that it was tubular is based on our observation and measurements that a tubular copper drill creates a more parallel drill hole since it cannot wear beyond the internal diameter of the drill.<br>
Another finding in our experimental drilling in favor of a tubular copper drill was the rounded, often polished end (Fig. 7). Where the drilling does not go completely through, this rounded, polished end is obvious. On the sarcophagus, there is the suggestion of these characteristics in one small sec­tion (Fig. 6).</li>
<li>The drilling was probably done while the lid was held in a vertical position. This would explain why the concentric lines are closer together towards the bottom (Fig. 4). Since the lid weighed two tons, it may not have been feasible to regularly and completely empty the worn abrasive and drilled granite debris from the bottom of the drill hole. Very likely, then, the abrasive would have been ground down and would have become finer and finer, producing closer and closer lines. The areas that appear polished may have been due to the finely pulverized granite debris which acted as a polishing agent.</li>
<li>The abrasive used was either emery, corundum or diamond in conjunction with a vehicle such as olive oil.</li>
</ol>
<figure><img src="https://www.penn.museum/sites/expedition/files/2022/02/drill14.jpg" alt="" width="400"><figcaption> Leonard Gorelick is Staff Orthodontist at the Long Island Jewish/Hillside Medical Center, School of Dental Medicine, Health Sciences Center, SUNY Stone Brook, New York.<br>
A. John Gwinnett is Professor of Oral Biology and Pathology at the SChool of Dental Medicine, Health Sciences Center, SUNY Stony Brook, New York.</figcaption></figure>
<h3>Conclusion</h3>
<p>A functional analysis of the drilling of a granite sarcophagus lid from the Old King­dom period has begun to suggest resolu­tions to an important scholarly controversy between Petrie and Lucas, and has pro­duced some preliminary insights into the hitherto speculative technology used. These are: 1) loose, dry abrasives (except diamond) did not produce concentric lines; 2) fixed abrasives or those in a watery slurry or a lubricant such as olive oil did produce concentric cutting lines; 3) corun­dum and diamond cannot be ruled out as not having been used to drill granite. These findings are significant in the history of ancient lapidary technology and will be useful in research on other stones. The dis­covery of the significance of the concentric lines, and also their significance as an indi­cator of the abrasive employed, will be useful for further research. Each type of stone will have to be dealt with separately.</p></ol>
					</div>
			</article>
		</div>
	<div>
					<h3>Cite This Article</h3><p>
           			Gorelick, Leonard and Gwinnett, A. John. "Ancient Egyptian Stone-Drilling." <em>Expedition Magazine</em> 25, no. 3 (March, 1983): -. Accessed May 12, 2024. https://www.penn.museum/sites/expedition/ancient-egyptian-stone-drilling/ </p>					<hr>
					<p>This digitized article is presented here as a historical reference and may not reflect the current views of the Penn Museum.</p>
					<p>Report problems and issues to <a href="mailto:digitalmedia@pennmuseum.org">digitalmedia@pennmuseum.org</a>.</p>
            						</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Citation Needed – Wikimedia Foundation's Experimental LLM/RAG Chrome Extension (136 pts)]]></title>
            <link>https://chromewebstore.google.com/detail/wikipedia-citation-needed/kecnjhdipdihkibljeicopdcoinghmhj</link>
            <guid>40330667</guid>
            <pubDate>Sat, 11 May 2024 21:12:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chromewebstore.google.com/detail/wikipedia-citation-needed/kecnjhdipdihkibljeicopdcoinghmhj">https://chromewebstore.google.com/detail/wikipedia-citation-needed/kecnjhdipdihkibljeicopdcoinghmhj</a>, See on <a href="https://news.ycombinator.com/item?id=40330667">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div jscontroller="zKiH5d" jsaction="rcuQ6b:npT2md;qako4e:wsIe3c;PEkjme:Jouqqb"><a href="https://chromewebstore.google.com/detail/kecnjhdipdihkibljeicopdcoinghmhj"><img src="https://lh3.googleusercontent.com/wan2Y6nx7eFdws4keB6DyoA49I0mL_yFxmY2mU-NCp3O3zbgexXYEpe8OJHmjulftRZIhDq5ggTZjFydtO8-nKhtbw=s60" srcset="https://lh3.googleusercontent.com/wan2Y6nx7eFdws4keB6DyoA49I0mL_yFxmY2mU-NCp3O3zbgexXYEpe8OJHmjulftRZIhDq5ggTZjFydtO8-nKhtbw=s120 2x" alt="Item logo image for Wikipedia Citation Needed" jscontroller="OhgRI" jsaction="error:LILo6;"></a></div><section jscontroller="zXfYdc" jsaction="click:SK74wb(ryHgWb)"><div><h2><p>Overview</p></h2></div><div jsname="bN97Pc" jscontroller="qv5bsb" jsaction="click:i7GaQb(rs1XOd);rcuQ6b:npT2md"><p>A chrome extension for finding citations in Wikipedia by using ChatGPT</p><p>Wondering about the reliability of what you read online? The Future Audiences team at the Wikimedia Foundation built an experimental new AI tool to check what Wikipedia has to say about what you’re reading, no matter where you are on the web, and we’d love your feedback.

How it works:

Check out this quick video that takes you through how to set up and use the extension: https://www.youtube.com/watch?v=XJ_EPfTbjBM

• While browsing the web, select a short passage of text as a statement to verify 
• With the help of the ChatGPT API, the Citation Needed extension searches Wikipedia for relevant articles and quotes from them
• You will get back: information about whether the claim is supported or not by Wikipedia, and article quality signals like date of last edit and number of references – all to help you get more context on the information you’re receiving (even from Wikipedia!)

We need your help! 
• This is an experimental feature that uses generative AI, which we know can sometimes make mistakes. 
• To help us understand and improve the quality of results, please report any issues you’re seeing via the feedback link in the extension. We also welcome general feedback and ideas for other ways Wikipedia could be useful in your day-to-day web browsing.

ABOUT US
This extension was developed by the Future Audiences team at the Wikimedia Foundation, the non-profit organization that supports Wikipedia and its sister projects.

***
Changes

v0.1.11
* Citation Needed now operates in the side panel instead of a pop up window, to be less disruptive to browsing; Verification results will no longer disappear upon page interaction. Please note that this will require accepting additional permissions from the previous v.0.0.21
* Added option to donate to Wikipedia after a number of verifications</p></div></section><c-wiz jsrenderer="db7dHd" jsshadow="" jsdata="deferred-i17" data-p="%.@.&quot;kecnjhdipdihkibljeicopdcoinghmhj&quot;]" data-node-index="1;0" jsmodel="hc6Ubd" c-wiz=""><div jsname="bN97Pc" jscontroller="UkbOSe" jsaction="rcuQ6b:JlVUp"><section jscontroller="ECBKud" jsname="ShBeI" jsaction="change:BbBN0b(uHcrq); keydown:AWuxGc,pu39sc(uHcrq); input:pu39sc(uHcrq); keyup:BbBN0b(uHcrq);UKfqQ:BbBN0b(RZG7Xe);Fn2EM:HZuyid;KbznFd:mRsukd"><img src="https://lh3.googleusercontent.com/a-/ALV-UjWhKsXsx33NLSft25YqAHhUU5DkD_qYq0syGeQa1OExGskuwA=s48-w48-h48" srcset="https://lh3.googleusercontent.com/a-/ALV-UjWhKsXsx33NLSft25YqAHhUU5DkD_qYq0syGeQa1OExGskuwA=s96-w96-h96 2x" alt="Review's profile picture"><div><h3 id="i18"><span>Casa Bright</span><span>May 12, 2024</span></h3></div><p jsname="f27TO">This is exactly what I want AI to do. Reduce the amount of time and effort used up on tasks that I am constantly repeating that are too complex or dynamic to easily automate otherwise.</p></section><section jscontroller="ECBKud" jsname="ShBeI" jsaction="change:BbBN0b(uHcrq); keydown:AWuxGc,pu39sc(uHcrq); input:pu39sc(uHcrq); keyup:BbBN0b(uHcrq);UKfqQ:BbBN0b(RZG7Xe);Fn2EM:HZuyid;KbznFd:mRsukd"><img src="https://lh3.googleusercontent.com/a-/ALV-UjWad1YwmzSVieDtrPawGd9kSeeByzpDwKKJpwQhMvALcBi5L6k=s48-w48-h48" srcset="https://lh3.googleusercontent.com/a-/ALV-UjWad1YwmzSVieDtrPawGd9kSeeByzpDwKKJpwQhMvALcBi5L6k=s96-w96-h96 2x" alt="Review's profile picture"><div><h3 id="i19"><span>Stacia Nordin</span><span>Apr 10, 2024</span></h3></div><p jsname="f27TO">I don't know if this was being funny, but 'improving' is spelled wrong in the photo gallery:

https://lh3.googleusercontent.com/MPTRMMBUtx9AtoKLCbZ8Uy8WAyo7Om7YOvqE7za4MXJVxwBtYM2fxsuuKB-IloGGgo2QfEN0MZs18M2D_6wg-rEj=s1600-w1600-h1000</p><p><span jscontroller="KfQkxf" jsaction="h7N06c:MKYwnd" jsname="cDaQFd">7 out of 24 found this helpful</span></p></section></div><c-data id="i17" jsdata=" PM4Exd;_;2 DTn4b;_;1"></c-data></c-wiz><section jscontroller="zXfYdc" jsaction="click:SK74wb(ryHgWb)"><p><h2>Details</h2></p><div jsname="bN97Pc"><ul><li><p>Version</p><p>0.1.11</p></li><li><p>Updated</p><p>May 11, 2024</p></li><li></li><li><p>Offered by</p><p>Wikimedia Foundation</p></li><li><p>Size</p><p>1.67MiB</p></li><li><p>Languages</p></li><li><p>Developer</p><div><p>Wikimedia Foundation<br>1 Montgomery St Suite 1600
San Francisco, CA 94104-5516
US</p><details><summary><svg width="20" height="20" viewBox="0 0 24 24" focusable="false"><path d="M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-.8 2L12 10.8 4.8 6h14.4zM4 18V7.87l8 5.33 8-5.33V18H4z"></path></svg> Email <svg width="20" height="20" viewBox="0 0 24 24" focusable="false"><path d="M5.41 7.59L4 9l8 8 8-8-1.41-1.41L12 14.17"></path></svg><svg width="20" height="20" viewBox="0 0 24 24" focusable="false"><path d="M18.59 16.41L20 15l-8-8-8 8 1.41 1.41L12 9.83"></path></svg></summary><p>wikimedia-chrome-extensions@wikimedia.org</p></details><details><summary><svg width="20" height="20" viewBox="0 0 24 24" focusable="false"><path d="M16.02 14.46l-2.62 2.62a16.141 16.141 0 0 1-6.5-6.5l2.62-2.62a.98.98 0 0 0 .27-.9L9.15 3.8c-.1-.46-.51-.8-.98-.8H4.02c-.56 0-1.03.47-1 1.03a17.92 17.92 0 0 0 2.43 8.01 18.08 18.08 0 0 0 6.5 6.5 17.92 17.92 0 0 0 8.01 2.43c.56.03 1.03-.44 1.03-1v-4.15c0-.48-.34-.89-.8-.98l-3.26-.65c-.33-.07-.67.04-.91.27z"></path></svg> Phone <svg width="20" height="20" viewBox="0 0 24 24" focusable="false"><path d="M5.41 7.59L4 9l8 8 8-8-1.41-1.41L12 14.17"></path></svg><svg width="20" height="20" viewBox="0 0 24 24" focusable="false"><path d="M18.59 16.41L20 15l-8-8-8 8 1.41 1.41L12 9.83"></path></svg></summary><p>+1 415-839-6885</p></details></div></li><li><p>Trader</p><p>This developer has identified itself as a trader per the definition from the European Union.</p></li><li><p>D-U-N-S<span></span></p><p>825913317</p></li></ul></div></section><section jscontroller="zXfYdc" jsaction="click:SK74wb(ryHgWb)"><p><h2>Privacy</h2></p><div jsname="bN97Pc"><div><p>Wikipedia Citation Needed has disclosed the following information regarding the collection and usage of your data. More detailed information can be found in the developer's <a href="https://wikimediafoundation.org/privacy-policy" target="_blank">privacy policy</a>.</p><h3>Wikipedia Citation Needed handles the following:</h3><div><p><span><svg width="24" height="24" viewBox="0 0 24 24" focusable="false"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14z"></path><path d="M7 12h2v5H7zm8-5h2v10h-2zm-4 7h2v3h-2zm0-4h2v2h-2z"></path></svg></span><span>User activity</span></p><p><span><svg width="24" height="24" viewBox="0 0 24 24" focusable="false"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM4 9h10.5v3.5H4V9zm0 5.5h10.5V18H4v-3.5zM20 18h-3.5V9H20v9z"></path></svg></span><span>Website content</span></p></div></div><div><h2>This developer declares that your data is</h2><ul><li>Not being sold to third parties, outside of the <a href="https://developer.chrome.com/docs/webstore/program-policies/limited-use/" target="_blank">approved use cases</a></li><li>Not being used or transferred for purposes that are unrelated to the item's core functionality</li><li>Not being used or transferred to determine creditworthiness or for lending purposes</li></ul></div></div></section></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Attempt to bring a cinematic experience in 256 bytes (WASM) (113 pts)]]></title>
            <link>https://github.com/ilmenit/sizecoding/blob/main/Encounter/Encounter.md</link>
            <guid>40330555</guid>
            <pubDate>Sat, 11 May 2024 20:48:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ilmenit/sizecoding/blob/main/Encounter/Encounter.md">https://github.com/ilmenit/sizecoding/blob/main/Encounter/Encounter.md</a>, See on <a href="https://news.ycombinator.com/item?id=40330555">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true" aria-labelledby="file-name-id-wide file-name-id-mobile"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Encounter - 256 bytes intro for WASM MicroW8 fantasy console</h2><a id="user-content-encounter---256-bytes-intro-for-wasm-microw8-fantasy-console" aria-label="Permalink: Encounter - 256 bytes intro for WASM MicroW8 fantasy console" href="#encounter---256-bytes-intro-for-wasm-microw8-fantasy-console"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">What is it?</h2><a id="user-content-what-is-it" aria-label="Permalink: What is it?" href="#what-is-it"></a></p>
<p dir="auto">Attempt to bring a cinematic experience in 256 bytes.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Watch</h2><a id="user-content-watch" aria-label="Permalink: Watch" href="#watch"></a></p>
<p dir="auto">You can watch it on YouTube (recommended to select 720p60 quality)</p>
<p dir="auto"><a href="https://www.youtube.com/watch?v=4QY9WqbS61g" rel="nofollow"><img src="https://camo.githubusercontent.com/9bc889feac1f761da8144266b214b7a084783d51a6931b916cc7ae76b9363f70/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f34515939577162533631672f6d617872657364656661756c742e6a7067" alt="Watch the video" data-canonical-src="https://img.youtube.com/vi/4QY9WqbS61g/maxresdefault.jpg"></a></p>
<p dir="auto">or click the following link if you have the FireFox browser (Chrome’s implementation of WebAssembly has much worse performance). Mobile Firefox should also work well on relatively new mobile phones. The 256 bytes are encoded in the URL:</p>
<p dir="auto"><a href="https://exoticorn.github.io/microw8/v0.2.2/#AgMvvqs+jH95brXMAYjUjZwn1apTrm62ncvO+qq+kAesx0vh5NB3sa3YEg8JasHVk0OOFeN09Qi/yWyEuuIHweJv5+qt4lQhS0q/exKHo4rtSsnqkY7oWUwXXgbWfGEwKrTto4wxOG4JXZck7ehBB9YHmyanOZxFZeCkpib2M/JXhCmCfPb3mF6tq++ZG2Mm73NopaaKwUFHm2KjpEjYFMEzCZsu98uZmvhD5GzCUXSw8G5Z1V8nfv9uiIQ1+5N+rcjpFezbIXG5/haUR7Lnre3xZVJcp+I6rXkboKqK6SoG5h92w/jndB3sdZyT4G9Lq872lkEkUIM7ciqdsyYJMg==" rel="nofollow">https://exoticorn.github.io/microw8/v0.2.2/#AgMvvqs+jH95brXMAYjUjZwn1apTrm62ncvO+qq+kAesx0vh5NB3sa3YEg8JasHVk0OOFeN09Qi/yWyEuuIHweJv5+qt4lQhS0q/exKHo4rtSsnqkY7oWUwXXgbWfGEwKrTto4wxOG4JXZck7ehBB9YHmyanOZxFZeCkpib2M/JXhCmCfPb3mF6tq++ZG2Mm73NopaaKwUFHm2KjpEjYFMEzCZsu98uZmvhD5GzCUXSw8G5Z1V8nfv9uiIQ1+5N+rcjpFezbIXG5/haUR7Lnre3xZVJcp+I6rXkboKqK6SoG5h92w/jndB3sdZyT4G9Lq872lkEkUIM7ciqdsyYJMg==</a></p>
<p dir="auto">I personally love seeing creative process of the others (“making of”) and If you are interested in the steps I went through to create this intro, check the following recording:</p>
<p dir="auto"><a href="https://youtu.be/X-g7d5NUV2s" rel="nofollow"><img src="https://camo.githubusercontent.com/805d6a6fd65543c60d261a3b37f6337f48af1ccc8f850133abee374b7c3f7949/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f582d673764354e555632732f6d7164656661756c742e6a7067" alt="Watch the video" data-canonical-src="https://img.youtube.com/vi/X-g7d5NUV2s/mqdefault.jpg"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why?</h2><a id="user-content-why" aria-label="Permalink: Why?" href="#why"></a></p>
<p dir="auto">I love intellectual challenges, art, computer science and in May 2024 there was another <a href="https://outlinedemoparty.nl/" rel="nofollow">Outline demoscene party</a> with size-coding competition. I did some 256 byte intros in the past (like drawing <strong><a href="https://www.pouet.net/prod.php?which=62917" rel="nofollow">Mona Lisa</a></strong> for 6502 8bit Atari, ported to a <a href="https://codegolf.stackexchange.com/questions/126738/lets-draw-mona-lisa" rel="nofollow">crazy number of platforms</a> or <strong><a href="https://www.pouet.net/prod.php?which=91578" rel="nofollow">Thrive</a></strong> for TIC-80 showing a <a href="https://youtu.be/qU5EGLvFXd8" rel="nofollow">growing tree through the seasons</a>), so I decided to join the competition once again.</p>
<p dir="auto">If you don’t know what a demoscene is, it’s a computer subculture with roots in Europe <a href="https://en.wikipedia.org/wiki/Demoscene" rel="nofollow">https://en.wikipedia.org/wiki/Demoscene</a> similar to <a href="https://hackaday.com/2022/06/06/outline-2022-everyone-should-go-to-a-demo-party/" rel="nofollow">Hacker Camps</a>.</p>
<p dir="auto">A large collection of demoscene productions you can find on <a href="https://demozoo.org/" rel="nofollow">https://demozoo.org</a> or <a href="https://www.pouet.net/" rel="nofollow">https://www.pouet.net</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How?</h2><a id="user-content-how" aria-label="Permalink: How?" href="#how"></a></p>
<p dir="auto">The intro is done for <a href="https://exoticorn.github.io/microw8" rel="nofollow">MicroW8</a> platform, which is a <a href="https://en.wikipedia.org/wiki/Fantasy_video_game_console" rel="nofollow">Fantasy Console</a> similar to <a href="https://www.lexaloffle.com/pico-8.php" rel="nofollow">PICO-8</a>, <a href="https://tic80.com/" rel="nofollow">TIC-80</a> or <a href="https://wasm4.org/" rel="nofollow">WASM-4</a>.</p>
<p dir="auto">MicroW8 has capabilities close to DOS-era machines (16 bit real-mode x86 with FPU and VGA):</p>
<ul dir="auto">
<li>Screen: 320x240, 256 colors, 60Hz, customizable palette.</li>
<li>Memory: 256KB</li>
</ul>
<p dir="auto">but with a MUCH faster CPU powered by WebAssembly (therefore more like running nowadays <a href="https://www.freedos.org/" rel="nofollow">FreeDOS</a> on a modern PC).</p>
<p dir="auto">Important note: the compiled “virtual cartridge” is compressed, therefore 256 bytes is not equal to 256 bytes of WASM code. The WASM code needs to be interconnected with the MicroW8 platform and the compression negates this overhead, leading to (according to sizecoding gurus) “code density” in 256 bytes similar to uncompressed x86/FPU code. The compression brings more benefits the bigger the code/data is, however in x86 you can also make tiny code decompressors, that you cannot do easily in WebAssembly due to executable code space separation, therefore for size-constrained programming DOS with x86 and <a href="http://www.sizecoding.org/wiki/DOS" rel="nofollow">all the tricks it offers</a> can still be the king.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Commented code</h2><a id="user-content-commented-code" aria-label="Permalink: Commented code" href="#commented-code"></a></p>
<p dir="auto">WebAssembly is a stack-based virtual machine, which makes it easy to represent as an Abstract Syntax Tree or… in infix syntax. That’s the idea behind <a href="https://github.com/exoticorn/curlywas">CurlyWAS language</a>, that compiles Rust-like syntax into a WASM code.</p>
<p dir="auto">CurlyWAS has ability to use keywords like “inline” (expression is evaluated every time, works similarly to C’s #define), or “lazy” (which uses the local.tee instruction which combines local.set and local.get and therefore saves on bytes).</p>
<p dir="auto">In WebAssembly the 32bit integers are encoded in <a href="https://en.wikipedia.org/wiki/LEB128" rel="nofollow">LEB128 format</a> and CurlyWAS has sugar syntax of adding _f to a constant to convert integer to 32bit float:</p>
<p dir="auto">(320_f) is equal to (320 as f32)</p>
<div data-snippet-clipboard-copy-content="include &quot;include/microw8-api.cwa&quot;

export fn upd() {

  let fx: f32;
  let prev_wave_height: f32;
  let inline t: f32 = time();

  let inline screen_width = 320_f;
  let inline screen_height = 240_f; // 256_f shorter but bit slower

  loop xloop {
  
    let fy: f32 = 0_f;      
    loop yloop {

      // define the vanishing point coordinates
      let inline vp_x: f32 = 160_f; // center of the screen
      let inline vp_y: f32 = 120.5; // horizon, +0.5 to avoid div by 0

      // define the distance
      let inline d: f32 = 160_f; 

      // calculate the distance from the center
      let inline cx: f32 = vp_x - fx; 
      let inline cy: f32 = vp_y - fy; 
    
      // calculate the angle mapping
      let inline nx: f32 = cx / 2_f / cy; 
      let inline ny: f32 =  d * 2_f / cy;
    
      // A variable to store the total height
      let wave_height = cos(fx*fy)*max(0_f,t-80_f); // matrix-like effect at the end
    
      // Calculate the height of the superposition of waves at a given position and time
      let i: f32=0_f;
    
      // select either water or sky
      let inline iterations: f32 = select(fy<120_f,4_f,16_f);
    
      loop wave_iterations {    
      
        let inline amplitude = i/40_f;
        let inline frequency = 2_f+cos(i);
        let inline phase = cos(i*i);
        // dx and dy are the components of the direction of the wave
        let inline dx = sin(i*i); // serves as PRNG
        let inline dy = cos(i*i*i); // serves as PRNG
        let inline time_shift = t/14_f*iterations;
    
        wave_height -= amplitude * (abs(sin(frequency * (ny * dy + nx * dx) + time_shift + phase)));        
    
        branch_if (i := i + 1_f) < iterations: wave_iterations; 
      }
      let inline dist = sqrt(cx*cx + cy*cy);    
      
      // how big are waves in time
      let inline wave_scale = min(2_f*t,40_f);        
      let inline perspective_height = wave_height * wave_scale * cy / d;   
    
      // minimalistic water reflection+refraction
      let inline h_color: f32 = 1_f-abs(perspective_height-prev_wave_height)/6_f;      
    
      // alien blob/ship
      let inline radius = min(2_f*t-70_f,50_f); 
      let inline blob_color = dist/radius;
      let inline color: f32 = select(dist<radius,blob_color,h_color);
      
      // add cinematic vignette effect (dist) with a bit of fresnel effect (cy)
      let inline p_color = max(0_f,color+(cy-dist)/512_f);
    
      // draw lines also for blob to imitate reflection
      line(fx, fy + perspective_height, fx, fy + prev_wave_height, (255_f*p_color) as i32);
      prev_wave_height = perspective_height;
    
      branch_if (fy := fy + 1_f) < screen_height: yloop;
    }   
    
    // set ocean palette with a bit of yellow tint
    let inline index = (fx as i32) % 128;
    let inline i = 4*index;
    i!0x13000 =  0x030200*(index/4);
    i!0x13200 =  0x020304*(index/2)+0x604000;
    
    branch_if (fx := fx + 1_f) < screen_width: xloop;   
  } 
}"><pre><code>include "include/microw8-api.cwa"

export fn upd() {

  let fx: f32;
  let prev_wave_height: f32;
  let inline t: f32 = time();

  let inline screen_width = 320_f;
  let inline screen_height = 240_f; // 256_f shorter but bit slower

  loop xloop {
  
    let fy: f32 = 0_f;      
    loop yloop {

      // define the vanishing point coordinates
      let inline vp_x: f32 = 160_f; // center of the screen
      let inline vp_y: f32 = 120.5; // horizon, +0.5 to avoid div by 0

      // define the distance
      let inline d: f32 = 160_f; 

      // calculate the distance from the center
      let inline cx: f32 = vp_x - fx; 
      let inline cy: f32 = vp_y - fy; 
    
      // calculate the angle mapping
      let inline nx: f32 = cx / 2_f / cy; 
      let inline ny: f32 =  d * 2_f / cy;
    
      // A variable to store the total height
      let wave_height = cos(fx*fy)*max(0_f,t-80_f); // matrix-like effect at the end
    
      // Calculate the height of the superposition of waves at a given position and time
      let i: f32=0_f;
    
      // select either water or sky
      let inline iterations: f32 = select(fy&lt;120_f,4_f,16_f);
    
      loop wave_iterations {    
      
        let inline amplitude = i/40_f;
        let inline frequency = 2_f+cos(i);
        let inline phase = cos(i*i);
        // dx and dy are the components of the direction of the wave
        let inline dx = sin(i*i); // serves as PRNG
        let inline dy = cos(i*i*i); // serves as PRNG
        let inline time_shift = t/14_f*iterations;
    
        wave_height -= amplitude * (abs(sin(frequency * (ny * dy + nx * dx) + time_shift + phase)));        
    
        branch_if (i := i + 1_f) &lt; iterations: wave_iterations; 
      }
      let inline dist = sqrt(cx*cx + cy*cy);    
      
      // how big are waves in time
      let inline wave_scale = min(2_f*t,40_f);        
      let inline perspective_height = wave_height * wave_scale * cy / d;   
    
      // minimalistic water reflection+refraction
      let inline h_color: f32 = 1_f-abs(perspective_height-prev_wave_height)/6_f;      
    
      // alien blob/ship
      let inline radius = min(2_f*t-70_f,50_f); 
      let inline blob_color = dist/radius;
      let inline color: f32 = select(dist&lt;radius,blob_color,h_color);
      
      // add cinematic vignette effect (dist) with a bit of fresnel effect (cy)
      let inline p_color = max(0_f,color+(cy-dist)/512_f);
    
      // draw lines also for blob to imitate reflection
      line(fx, fy + perspective_height, fx, fy + prev_wave_height, (255_f*p_color) as i32);
      prev_wave_height = perspective_height;
    
      branch_if (fy := fy + 1_f) &lt; screen_height: yloop;
    }   
    
    // set ocean palette with a bit of yellow tint
    let inline index = (fx as i32) % 128;
    let inline i = 4*index;
    i!0x13000 =  0x030200*(index/4);
    i!0x13200 =  0x020304*(index/2)+0x604000;
    
    branch_if (fx := fx + 1_f) &lt; screen_width: xloop;   
  } 
}
</code></pre></div>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>