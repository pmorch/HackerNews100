<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 10 May 2025 14:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[LTXVideo 13B AI video generation (105 pts)]]></title>
            <link>https://ltxv.video/</link>
            <guid>43944974</guid>
            <pubDate>Sat, 10 May 2025 11:59:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ltxv.video/">https://ltxv.video/</a>, See on <a href="https://news.ycombinator.com/item?id=43944974">Hacker News</a></p>
<div id="readability-page-1" class="page">
    <!-- Navigation -->
    <nav>
        
    </nav>

    <!-- Hero Section -->
    <div>
                
                <p>
                    A groundbreaking 13B-parameter AI model by Lightricks, revolutionizing video creation with unprecedented speed and quality.
                    <span>30x faster than comparable models, powered by advanced multiscale rendering technology.</span>
                </p>
                <!-- Video Player Section -->
                
            </div>

    <!-- Key Points Section -->
    <div id="key-points">
            <h2>LTXV Key Points</h2>
            <div>
                <div>
                    <h3>LTXV Model Overview</h3>
                    <ul>
                        <li>
                            <span>check_circle</span>
                            <span>13 billion parameters for high-quality video generation</span>
                        </li>
                        <li>
                            <span>check_circle</span>
                            <span>Developed by Lightricks, released May 2025</span>
                        </li>
                        <li>
                            <span>check_circle</span>
                            <span>Significant upgrade from 2B parameter predecessor</span>
                        </li>
                    </ul>
                </div>
                <div>
                    <h3>LTXV Core Capabilities</h3>
                    <ul>
                        <li>
                            <span>check_circle</span>
                            <span>Text-to-video generation</span>
                        </li>
                        <li>
                            <span>check_circle</span>
                            <span>Image-to-video transformation</span>
                        </li>
                        <li>
                            <span>check_circle</span>
                            <span>Real-time performance on consumer hardware</span>
                        </li>
                    </ul>
                </div>
                <div>
                    <h3>LTXV Technical Features</h3>
                    <ul>
                        <li>
                            <span>check_circle</span>
                            <span>Multiscale rendering technology</span>
                        </li>
                        <li>
                            <span>check_circle</span>
                            <span>Enhanced prompt adherence</span>
                        </li>
                        <li>
                            <span>check_circle</span>
                            <span>Advanced motion quality control</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    <!-- Model Background Section -->
    <div id="background">
            <h2>LTXV Model Background</h2>
            <div>
                <div>
                    <h3>LTXV Development Context</h3>
                    <p>
                        LTXV-13B represents a significant evolution from its predecessor, the LTX Video model, with a notable increase in parameters from 2 billion to 13 billion. Released in early May 2025, this model was developed by Lightricks in response to advancements by competitors like OpenAI and Meta.
                    </p>
                    <ul>
                        <li>Release Date: May 2025</li>
                        <li>Model Size: 28.6 GB</li>
                        <li>Storage: Git LFS</li>
                        <li>License: LTXV Open Weights</li>
                    </ul>
                </div>
                <div>
                    <h3>LTXV Technical Evolution</h3>
                    <p>
                        The model builds upon the DiT-based architecture, introducing groundbreaking features like multiscale rendering and improved motion quality. This evolution enables real-time video generation at high resolutions while maintaining exceptional quality.
                    </p>
                    <ul>
                        <li>Base Model: DiT-based</li>
                        <li>Parameters: 13 Billion</li>
                        <li>Resolution: 1216×704</li>
                        <li>FPS: 30 (Real-time)</li>
                    </ul>
                </div>
            </div>
        </div>

    <!-- Detailed Features Section -->
    <div id="detailed-features">
            <h2>LTXV Detailed Features</h2>
            <div>
                <div>
                    <h3>LTXV Core Technologies</h3>
                    <ul>
                        <li>
                            <span>auto_awesome</span>
                            <p><span>Multiscale Rendering</span>
                                <span>Advanced technology that drafts videos in lower detail first to capture coarse motion, then refines details for enhanced speed and quality.</span>
                            </p>
                        </li>
                        <li>
                            <span>speed</span>
                            <p><span>Kernel Optimization</span>
                                <span>Enables 30x faster generation compared to comparable models, even on consumer GPUs.</span>
                            </p>
                        </li>
                        <li>
                            <span>psychology</span>
                            <p><span>Improved Prompt Adherence</span>
                                <span>Enhanced accuracy in following text prompts for more precise video generation.</span>
                            </p>
                        </li>
                    </ul>
                </div>
                <div>
                    <h3>LTXV Supported Features</h3>
                    <ul>
                        <li>
                            <span>movie</span>
                            <p><span>Text-to-Video</span>
                                <span>Transform text descriptions into high-quality videos with precise motion control.</span>
                            </p>
                        </li>
                        <li>
                            <span>image</span>
                            <p><span>Image-to-Video</span>
                                <span>Convert static images into dynamic videos with controlled motion and effects.</span>
                            </p>
                        </li>
                        <li>
                            <span>animation</span>
                            <p><span>Keyframe Animation</span>
                                <span>Create smooth animations with precise control over motion and timing.</span>
                            </p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    <!-- Performance and Hardware Section -->
    <div id="performance-details">
            <h2>LTXV Performance &amp; Hardware</h2>
            <div>
                <div>
                    <h3>LTXV Hardware Requirements</h3>
                    <ul>
                        <li>
                            <span>memory</span>
                            <span>NVIDIA 4090/5090 GPU</span>
                        </li>
                        <li>
                            <span>storage</span>
                            <span>8GB+ VRAM (Full Version)</span>
                        </li>
                        <li>
                            <span>speed</span>
                            <span>Quantized Version Available</span>
                        </li>
                        <li>
                            <span>computer</span>
                            <span>Consumer Hardware Compatible</span>
                        </li>
                    </ul>
                </div>
                <div>
                    <h3>LTXV Performance Metrics</h3>
                    <ul>
                        <li>
                            <span>speed</span>
                            <span>30x Faster Generation</span>
                        </li>
                        <li>
                            <span>timer</span>
                            <span>Real-time Processing</span>
                        </li>
                        <li>
                            <span>high_quality</span>
                            <span>Studio-level Quality</span>
                        </li>
                        <li>
                            <span>low_latency</span>
                            <span>Low Latency Output</span>
                        </li>
                    </ul>
                </div>
                <div>
                    <h3>LTXV Optimization Features</h3>
                    <ul>
                        <li>
                            <span>auto_fix</span>
                            <span>Multiscale Rendering</span>
                        </li>
                        <li>
                            <span>tune</span>
                            <span>Kernel Optimization</span>
                        </li>
                        <li>
                            <span>memory_alt</span>
                            <span>Quantized Versions</span>
                        </li>
                        <li>
                            <span>efficiency</span>
                            <span>Memory Efficiency</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

    <!-- Community and Tools Section -->
    

    <!-- FAQ Section -->
    <div id="faq">
            <h2>LTXV Frequently Asked Questions</h2>
            <div>
                <div>
                    <div>
                        <h3>What is LTXV-13B?</h3>
                        <p>
                            LTXV-13B is an advanced AI video generation model developed by Lightricks, featuring 13 billion parameters. It represents a significant upgrade from its predecessor, offering high-quality video generation with unprecedented speed and efficiency.
                        </p>
                    </div>
                    <div>
                        <h3>What are the key features of LTXV-13B?</h3>
                        <p>
                            Key features include multiscale rendering technology, improved prompt adherence, real-time generation at 1216×704 resolution (30 FPS), and support for various video generation modes including text-to-video and image-to-video transformations.
                        </p>
                    </div>
                    <div>
                        <h3>What hardware is required to run LTXV-13B?</h3>
                        <p>
                            The model runs efficiently on consumer hardware like NVIDIA 4090 or 5090 GPUs. The full version requires 8GB+ VRAM, while a quantized version (ltxv-13b-fp8) is available for systems with less VRAM.
                        </p>
                    </div>
                    <div>
                        <h3>How fast is LTXV-13B compared to other models?</h3>
                        <p>
                            LTXV-13B generates videos 30 times faster than comparable models, thanks to its multiscale rendering technology and kernel optimization. It achieves real-time performance while maintaining high quality.
                        </p>
                    </div>
                    <div>
                        <h3>What video generation modes are supported?</h3>
                        <p>
                            The model supports text-to-video, image-to-video, keyframe-based animation, video extension, and video-to-video transformations. It can also combine these modes for complex video generation tasks.
                        </p>
                    </div>
                </div>
                <div>
                    <div>
                        <h3>Is LTXV-13B open source?</h3>
                        <p>
                            Yes, LTXV-13B is available under the LTXV Open Weights License. The model and its tools are open source, allowing for community development and customization.
                        </p>
                    </div>
                    <div>
                        <h3>What development tools are available?</h3>
                        <p>
                            The ecosystem includes LTX-Video-Trainer for fine-tuning, ComfyUI integration with example workflows, and support for creating custom LoRAs. All tools are available on GitHub.
                        </p>
                    </div>
                    <div>
                        <h3>How does multiscale rendering work?</h3>
                        <p>
                            Multiscale rendering first drafts videos in lower detail to capture coarse motion, then refines the details. This approach enhances both speed and quality of the generated videos.
                        </p>
                    </div>
                    <div>
                        <h3>What improvements were made in version 0.9.7?</h3>
                        <p>
                            Version 0.9.7 includes improved prompt adherence, enhanced motion quality, better fine details, and support for stochastic inference in the distilled model.
                        </p>
                    </div>
                    <div>
                        <h3>Where can I download and learn more about LTXV-13B?</h3>
                        <p>
                            The model is available on Hugging Face and GitHub. Comprehensive documentation, example workflows, and community resources are available through these platforms.
                        </p>
                    </div>
                </div>
            </div>
        </div>

    <!-- Get Started Section -->
    <div id="get-started">
                <h2>Start Creating with LTXV</h2>
                <p>
                    Join the future of video generation with LTXV 13B. Available on Hugging Face and GitHub.
                </p>
                
            </div>

    <!-- Footer -->
    

    <!-- Animation Scripts -->
    

    <!-- Add this script before the closing body tag -->
    

 </div>]]></description>
        </item>
        <item>
            <title><![CDATA[Slow software for a burning world (104 pts)]]></title>
            <link>https://bonfirenetworks.org/posts/slow_software_for_a_burning_world/</link>
            <guid>43943652</guid>
            <pubDate>Sat, 10 May 2025 06:38:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bonfirenetworks.org/posts/slow_software_for_a_burning_world/">https://bonfirenetworks.org/posts/slow_software_for_a_burning_world/</a>, See on <a href="https://news.ycombinator.com/item?id=43943652">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
    <h4 id="a-reflection-on-bonfire%E2%80%99s-journey-to-1.0-and-an-open-invitation-to-shape-what-comes-next."><em>A reflection on Bonfire’s journey to 1.0 and an open invitation to shape what comes next.</em> <a href="#a-reflection-on-bonfire%E2%80%99s-journey-to-1.0-and-an-open-invitation-to-shape-what-comes-next.">#</a></h4>
<p>As we approach the release of Bonfire 1.0, this isn’t your typical launch announcement. Instead, it’s a moment to reflect on <strong>how</strong> we’ve built Bonfire, a roadmap of values, methods, and intentions – and an invitation to define what comes next.</p>
<blockquote>
<p><em>You can <a href="https://indieweb.social/@bonfire">follow Bonfire on the fediverse</a> for updates on the release, including highlights of unique features we’ll share over the next few days.</em></p>
</blockquote>
<p>In a world of “move fast and break things,” we’ve chosen a different tempo — one rooted in care, deep listening, and collective stewardship. Slow software means building for long-term resilience and meaningful participation, rather than chasing novelty, speed, or scale.</p>
<h2 id="%F0%9F%8F%A6-profit-over-people%3A-at-what-cost%3F">🏦 <strong>Profit over people: at what cost?</strong> <a href="#%F0%9F%8F%A6-profit-over-people%3A-at-what-cost%3F">#</a></h2>
<p>The Silicon Valley model delivers quick but unaccountable decisions. Rules are one-sided, power is hoarded, and systems operate behind closed doors. The casualties are many:</p>
<ul>
<li><strong>Trust:</strong> Algorithms bred to addict or manipulate rather than to inform or empower.</li>
<li><strong>Consent</strong>: Secrecy quietly eroding autonomy. Invisible hands reshaping our lives without consent.</li>
<li><strong>Community:</strong> Platforms optimising for engagement, making division and hatred profitable.</li>
<li><strong>Attention:</strong> Human focus becomes data—extracted like oil to fuel the surveillance economy.</li>
<li><strong>Labour:</strong> Care work like content moderation rendered invisible, workers treated as expendable.</li>
<li><strong>Environment:</strong> Scale trumping sustainability at every turn.</li>
</ul>
<p>As power concentrates, democracy withers and authoritarianism thrives. Algorithms tuned for "engagement" amplify fear, outrage, and division—because that’s what keeps us clicking. In the end, <strong>the tools meant to connect us are weaponized to divide us</strong>.</p>
<p><em>We've witnessed the damage when tech scales without care. What could we build instead?</em></p>
<h2 id="%F0%9F%90%8C-caracol%3A-a-different-outlook">🐌 <strong>Caracol: a different outlook</strong> <a href="#%F0%9F%90%8C-caracol%3A-a-different-outlook">#</a></h2>
<p>Bonfire draws inspiration from the <em>caracol</em> (snail), a <a href="https://en.wikipedia.org/wiki/Zapatista_Army_of_National_Liberation">Zapatista</a> symbol of slow, collective movement. The caracol is a spiral, with no top or center—only a shared heart. It stands for governance from the edges, listening before action, autonomy over hierarchy, and the conviction that <em>how</em> we build matters more than <em>what</em> we build.</p>
<p>These aren't lofty ideals—they're the backbone of Bonfire's design: a system built for flexibility, diversity, and overlapping needs. <strong>You don’t just use Bonfire—you shape it.</strong> It’s not one tool; it’s a terrain. A toolkit. Imagine digital spaces growing organically, communities determining how they connect, and tools that can be picked up, transformed, or set aside as needed. The <em>caracol</em> reminds us: meaningful progress comes from how we move, who we move with, and what kind of world we forge together.</p>
<h2 id="%E2%9C%8A-governance%3A-foundations-of-bonfire">✊ <strong>Governance: foundations of Bonfire</strong> <a href="#%E2%9C%8A-governance%3A-foundations-of-bonfire">#</a></h2>
<p>The way we build is part of what we create. Inspired by <a href="https://en.wikipedia.org/wiki/Sociocracy">sociocracy</a>—a method of collaborative governance based on circles, consent, and distributed authority, and by <a href="https://en.wikipedia.org/wiki/Municipalism">Bookchin’s municipal confederations</a>, the Zapatistas, and <a href="https://en.wikipedia.org/wiki/Democratic_Autonomous_Administration_of_North_and_East_Syria">Rojava</a>, governance in Bonfire runs deep:</p>
<ul>
<li><strong>Everything is modular—down to the core:</strong> All features are provided by separate extensions, meaning the “core app” contains no code but just configuration. There also isn’t a single core; instead, there exists different “flavours” of Bonfire: sets of config and extensions adapted to various use cases or communities.</li>
<li><strong>Communities govern “flavours”:</strong> Bonfire's modularity serves a political purpose—inviting communities to discuss, configure, and collectively govern every aspect of their experience.</li>
<li><strong>Shining a light on the power of defaults:</strong> Whenever a choice about how something should work in Bonfire is unclear, we make it configurable. Code establishes an initial default, but flavours can override it, communities can set instance-wide settings, and individuals make final decisions in their own account or profiles.</li>
<li><strong>Custom roles:</strong> Moving beyond binary admin/user hierarchies, communities and individuals define and assign roles with precisely calibrated permissions—distributing power and responsibility to match their unique contexts.</li>
<li><strong>Circles and boundaries:</strong> Creating flexible "circles" (like "colleagues" or "book club") and "boundaries" (granular permission sets) to control exactly who can see, interact with, or collaborate on anything—putting people in charge of their online relationships.</li>
<li><strong>Tools that prioritise real people and relationships</strong> over speed and simplicity. We make no assumptions about the “average” user, social needs are complex and overlapping, there are no no one-size-fits-all solutions. We center needs often marginalized or overlooked—making them foundational so everyone benefits from greater flexibility and control.</li>
</ul>
<h3 id="%F0%9F%9B%A1%EF%B8%8F-guarding-the-commons">🛡️ <strong>Guarding the commons</strong> <a href="#%F0%9F%9B%A1%EF%B8%8F-guarding-the-commons">#</a></h3>
<p>Values alone aren’t enough—many well-intentioned projects eventually drift, burn out, or sell out. Bonfire is federated at every level—protocol, code, and governance—so its purpose and values can’t be quietly eroded or easily overturned. This technical and political design aims to resist capture, prevent <a href="https://en.wikipedia.org/wiki/Enshittification">enshittification</a>, and safeguard community autonomy for the long term.</p>
<p>Here's how Bonfire can <strong>resist capture:</strong></p>
<ul>
<li><strong>AGPL licensing:</strong> All code is AGPL, ensuring all modifications remain open and accessible, preventing capture by Big Tech or cloud services.</li>
<li><strong>Multi-layered modularity and forkability:</strong> Everything is an extension—identity, moderation, groups. People can fork just an extension or a flavour–which encourages forking by lowering the maintainance effort.</li>
<li><strong>Community-governed flavours:</strong> Communities decide what's included and how it evolves.</li>
<li><strong>Zero VC funding or ads:</strong> Bonfire will remain free of venture capital and advertisement. No dark patterns. No pivoting away from responsibility or ethics.</li>
</ul>
<p>We're also experimenting with:</p>
<ul>
<li><strong>Sociocratic circles:</strong> Self-organizing groups stewarding specific extensions or flavours, making decisions by consent. We're expanding this approach, creating pathways for communities to shape and protect their own digital spaces.</li>
<li>New models for <strong>participatory funding</strong> and resource allocation.</li>
</ul>
<p>The commons survive only when they can <strong>regrow anywhere</strong>. We design for resilience, adaptability, and collective stewardship.</p>
<h2 id="%F0%9F%8C%90-federation%3A-autonomy-through-connection">🌐 <strong>Federation: autonomy through connection</strong> <a href="#%F0%9F%8C%90-federation%3A-autonomy-through-connection">#</a></h2>
<p>Bonfire federates (i.e., interconnects with other independent platforms) with Mastodon and the wider <a href="https://en.wikipedia.org/wiki/Fediverse">fediverse</a>, but federation is more than a technical protocol — it embodies our commitment to autonomy <em>and</em> collaboration:</p>
<ul>
<li>Each community governs itself while connecting with others, maintaining distinct cultures, rules, and practices.</li>
<li>Federation isn't for scaling one model, but for interconnecting many. No central power dictates decisions—only connected, independent nodes working in concert.</li>
<li>Offboarding and freedom to migrate: Users should never be locked into platforms by their data or social connections.</li>
</ul>
<p><strong>We're building many interconnected worlds, not one massive platform.</strong></p>

<p>Bonfire is a <em><a href="https://en.wikipedia.org/wiki/Commons">commons</a></em>–a place to gather, co-create, and build networks that last–beyond products to be sold or services that use, abuse, or extract from you.</p>
<p>Bonfire’s values, goals, and processes are shaped by the people and communities who choose to participate. As a starting point, we uphold principles rooted in care, consent, and collective stewardship.</p>
<p>Whether you're a community organiser, activist, builder or simply curious, join us:</p>
<ul>
<li><strong>Join the conversation:</strong> Take part in our public discussion spaces. Share your experiences, needs, and questions.</li>
<li><strong>Help shape governance:</strong> Participate in forming circles to govern specific extensions or Bonfire flavours, and share responsibility, decide by consent, and ensure Bonfire evolves with real community needs.</li>
<li><strong>Propose features or co-design new extensions:</strong> Bring your ideas for how Bonfire can serve new purposes, or create new "flavours" and tools.</li>
<li><strong>Contribute feedback:</strong> Help us spot issues, propose adaptations, or challenge assumptions so Bonfire can serve more people, more justly.</li>
<li><strong>Help shape the culture:</strong> Share learnings from your own communities, organize workshops, or experiment with governance models.</li>
</ul>
<p>Built for the long haul. <em>By people, for people</em>.</p>
<h3 id="%F0%9F%8F%95%EF%B8%8F-campground%3A-a-living-laboratory">🏕️ <strong>Campground: a living laboratory</strong> <a href="#%F0%9F%8F%95%EF%B8%8F-campground%3A-a-living-laboratory">#</a></h3>
<p>Our test instance, <a href="https://campground.bonfire.cafe/">the campground</a>, is open as a local-only space for co-design and experimentation. Here, you can:</p>
<ul>
<li>Experience what digital spaces built on consent, care, and mutual aid feel like.</li>
<li>Collaborate to co-design and test features — making Bonfire safer, more resilient, accessible, and truly centered on people and communities.</li>
</ul>
<p>This isn’t a product launch—we’re not looking for <em>users</em> but for <em>active participants</em>: people and groups who want to shape, critique, and experiment together — whether that’s on the campground, through their own Bonfire instances, or by joining others to co-create new digital spaces.</p>
<h2 id="%E2%9C%A8-let%E2%80%99s-build-what-lasts%2C-together">✨ <strong>Let’s build what lasts, together</strong> <a href="#%E2%9C%A8-let%E2%80%99s-build-what-lasts%2C-together">#</a></h2>
<p>If these ideas resonate, we invite you to reflect, dialogue, reach out, and co-create. Bonfire lives as a conversation in motion, beyond its code. The world needs many interconnected spaces built on care, autonomy, and collective power — not yet another app chasing scale.</p>
<p>We hope these principles can ignite new approaches to digital community-building. The future is ours to build — intentionally, collectively, and with care. Join us in shaping what comes next.</p>
<hr>
<p><em>This post was written by the Bonfire maintainers' circle and shaped by feedback from the advisory circle. Join the conversation on <a href="https://matrix.to/#/#bonfire:matrix.org">Matrix</a>, comment on <a href="https://indieweb.social/@bonfire/114477426502965851">this post on the fediverse</a> or on <a href="https://campground.bonfire.cafe/">the campground</a>, or email us at <a href="mailto:team@bonfire.cafe">team@bonfire.cafe</a>.</em></p>
<p><em>Credit for the art goes to Tomás, a Zapatista artist in a community near San Cristobal.</em></p>

  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gmail to SQLite (181 pts)]]></title>
            <link>https://github.com/marcboeker/gmail-to-sqlite</link>
            <guid>43943236</guid>
            <pubDate>Sat, 10 May 2025 04:25:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/marcboeker/gmail-to-sqlite">https://github.com/marcboeker/gmail-to-sqlite</a>, See on <a href="https://news.ycombinator.com/item?id=43943236">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Gmail to SQLite</h2><a id="user-content-gmail-to-sqlite" aria-label="Permalink: Gmail to SQLite" href="#gmail-to-sqlite"></a></p>
<p dir="auto">This is a script to download emails from Gmail and store them in a SQLite database for further analysis. I find it extremely useful to have all my emails in a database to run queries on them. For example, I can find out how many emails I received per sender, which emails take the most space, and which emails from which sender I never read.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<ol dir="auto">
<li>Clone this repository: <code>git clone https://github.com/marcboeker/gmail-to-sqlite.git</code>.</li>
<li>Install the requirements: <code>pip install -r requirements.txt</code></li>
<li>Create a Google Cloud project <a href="https://console.cloud.google.com/projectcreate" rel="nofollow">here</a>.</li>
<li>Open <a href="https://console.cloud.google.com/apis/library/gmail.googleapis.com" rel="nofollow">Gmail in API &amp; Services</a> and activate the Gmail API.</li>
<li>Open the <a href="https://console.cloud.google.com/apis/credentials/consent" rel="nofollow">OAuth consent screen</a> and create a new consent screen. You only need to provide a name and contact data.</li>
<li>Next open <a href="https://console.cloud.google.com/apis/credentials/oauthclient" rel="nofollow">Create OAuth client ID</a> and create credentials for a <code>Desktop app</code>. Download the credentials file and save it under <code>credentials.json</code> in the root of this repository.</li>
</ol>
<p dir="auto">Here is a detailed guide on how to create the credentials: <a href="https://developers.google.com/gmail/api/quickstart/python#set_up_your_environment" rel="nofollow">https://developers.google.com/gmail/api/quickstart/python#set_up_your_environment</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Sync all emails</h3><a id="user-content-sync-all-emails" aria-label="Permalink: Sync all emails" href="#sync-all-emails"></a></p>
<ol dir="auto">
<li>Run the script: <code>python main.py sync --data-dir path/to/your/data</code> where <code>--&lt;data-dir&gt;</code> is the path where all data is stored. This creates a SQLite database in <code>&lt;data-dir&gt;/messages.db</code> and stores the user credentials under <code>&lt;data-dir&gt;/credentials.json</code>.</li>
<li>After the script has finished, you can query the database using, for example, the <code>sqlite3</code> command line tool: <code>sqlite3 &lt;data-dir&gt;/messages.db</code>.</li>
<li>You can run the script again to sync all new messages. Provide <code>--full-sync</code> to force a full sync. However, this will only update the read status, the labels, and the last indexed timestamp for existing messages.</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Sync a single message</h3><a id="user-content-sync-a-single-message" aria-label="Permalink: Sync a single message" href="#sync-a-single-message"></a></p>
<p dir="auto"><code>python main.py sync-message --data-dir path/to/your/data --message-id &lt;message-id&gt;</code></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Commandline parameters</h2><a id="user-content-commandline-parameters" aria-label="Permalink: Commandline parameters" href="#commandline-parameters"></a></p>
<div data-snippet-clipboard-copy-content="usage: main.py [-h] [--data-dir DATA_DIR] [--update] {sync, sync-message}

Main commands:
sync                    Sync emails from Gmail to the database.
sync-message            Sync a single message from Gmail to the database.

--data-dir DATA_DIR     Path to the directory where all data is stored.
--full-sync             Force a full sync.
--message-id MESSAGE_ID Sync only the message with the given message id."><pre><code>usage: main.py [-h] [--data-dir DATA_DIR] [--update] {sync, sync-message}

Main commands:
sync                    Sync emails from Gmail to the database.
sync-message            Sync a single message from Gmail to the database.

--data-dir DATA_DIR     Path to the directory where all data is stored.
--full-sync             Force a full sync.
--message-id MESSAGE_ID Sync only the message with the given message id.
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Schema</h2><a id="user-content-schema" aria-label="Permalink: Schema" href="#schema"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="CREATE TABLE IF NOT EXISTS &quot;messages&quot; (
    &quot;id&quot; INTEGER NOT NULL PRIMARY KEY, -- internal id
    &quot;message_id&quot; TEXT NOT NULL, -- Gmail message id
    &quot;thread_id&quot; TEXT NOT NULL, -- Gmail thread id
    &quot;sender&quot; JSON NOT NULL, -- Sender as JSON in the form {&quot;name&quot;: &quot;Foo Bar&quot;, &quot;email&quot;: &quot;foo@example.com&quot;}
    &quot;recipients&quot; JSON NOT NULL, -- JSON object: {
      -- &quot;to&quot;: [{&quot;email&quot;: &quot;foo@example.com&quot;, &quot;name&quot;: &quot;Foo Bar&quot;}, ...],
      -- &quot;cc&quot;: [{&quot;email&quot;: &quot;foo@example.com&quot;, &quot;name&quot;: &quot;Foo Bar&quot;}, ...],
      -- &quot;bcc&quot;: [{&quot;email&quot;: &quot;foo@example.com&quot;, &quot;name&quot;: &quot;Foo Bar&quot;}, ...]
    --}
    &quot;labels&quot; JSON NOT NULL, -- JSON array: [&quot;INBOX&quot;, &quot;UNREAD&quot;, ...]
    &quot;subject&quot; TEXT NOT NULL, -- Subject of the email
    &quot;body&quot; TEXT NOT NULL, -- Extracted body either als HTML or plain text
    &quot;size&quot; INTEGER NOT NULL, -- Size reported by Gmail
    &quot;timestamp&quot; DATETIME NOT NULL, -- When the email was sent/received
    &quot;is_read&quot; INTEGER NOT NULL, -- 0=Unread, 1=Read
    &quot;is_outgoing&quot; INTEGER NOT NULL, -- 0=Incoming, 1=Outgoing
    &quot;last_indexed&quot; DATETIME NOT NULL -- Timestamp when the email was last seen on the server
);"><pre><span>CREATE</span> <span>TABLE</span> <span>IF</span> NOT EXISTS <span><span>"</span>messages<span>"</span></span> (
    <span><span>"</span>id<span>"</span></span> <span>INTEGER</span> <span>NOT NULL</span> <span>PRIMARY KEY</span>, <span><span>--</span> internal id</span>
    <span><span>"</span>message_id<span>"</span></span> <span>TEXT</span> <span>NOT NULL</span>, <span><span>--</span> Gmail message id</span>
    <span><span>"</span>thread_id<span>"</span></span> <span>TEXT</span> <span>NOT NULL</span>, <span><span>--</span> Gmail thread id</span>
    <span><span>"</span>sender<span>"</span></span> JSON <span>NOT NULL</span>, <span><span>--</span> Sender as JSON in the form {"name": "Foo Bar", "email": "foo@example.com"}</span>
    <span><span>"</span>recipients<span>"</span></span> JSON <span>NOT NULL</span>, <span><span>--</span> JSON object: {</span>
      <span><span>--</span> "to": [{"email": "foo@example.com", "name": "Foo Bar"}, ...],</span>
      <span><span>--</span> "cc": [{"email": "foo@example.com", "name": "Foo Bar"}, ...],</span>
      <span><span>--</span> "bcc": [{"email": "foo@example.com", "name": "Foo Bar"}, ...]</span>
    <span><span>--</span>}</span>
    <span><span>"</span>labels<span>"</span></span> JSON <span>NOT NULL</span>, <span><span>--</span> JSON array: ["INBOX", "UNREAD", ...]</span>
    <span><span>"</span>subject<span>"</span></span> <span>TEXT</span> <span>NOT NULL</span>, <span><span>--</span> Subject of the email</span>
    <span><span>"</span>body<span>"</span></span> <span>TEXT</span> <span>NOT NULL</span>, <span><span>--</span> Extracted body either als HTML or plain text</span>
    <span><span>"</span>size<span>"</span></span> <span>INTEGER</span> <span>NOT NULL</span>, <span><span>--</span> Size reported by Gmail</span>
    <span><span>"</span>timestamp<span>"</span></span> DATETIME <span>NOT NULL</span>, <span><span>--</span> When the email was sent/received</span>
    <span><span>"</span>is_read<span>"</span></span> <span>INTEGER</span> <span>NOT NULL</span>, <span><span>--</span> 0=Unread, 1=Read</span>
    <span><span>"</span>is_outgoing<span>"</span></span> <span>INTEGER</span> <span>NOT NULL</span>, <span><span>--</span> 0=Incoming, 1=Outgoing</span>
    <span><span>"</span>last_indexed<span>"</span></span> DATETIME <span>NOT NULL</span> <span><span>--</span> Timestamp when the email was last seen on the server</span>
);</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example queries</h2><a id="user-content-example-queries" aria-label="Permalink: Example queries" href="#example-queries"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Get the number of emails per sender</h3><a id="user-content-get-the-number-of-emails-per-sender" aria-label="Permalink: Get the number of emails per sender" href="#get-the-number-of-emails-per-sender"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="SELECT sender->>'$.email', COUNT(*) AS count
FROM messages
GROUP BY sender->>'$.email'
ORDER BY count DESC"><pre><span>SELECT</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>, <span>COUNT</span>(<span>*</span>) <span>AS</span> count
<span>FROM</span> messages
<span>GROUP BY</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>
<span>ORDER BY</span> count <span>DESC</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Show the number of unread emails by sender</h3><a id="user-content-show-the-number-of-unread-emails-by-sender" aria-label="Permalink: Show the number of unread emails by sender" href="#show-the-number-of-unread-emails-by-sender"></a></p>
<p dir="auto">This is great to determine who is spamming you the most with uninteresting emails.</p>
<div dir="auto" data-snippet-clipboard-copy-content="SELECT sender->>'$.email', COUNT(*) AS count
FROM messages
WHERE is_read = 0
GROUP BY sender->>'$.email'
ORDER BY count DESC"><pre><span>SELECT</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>, <span>COUNT</span>(<span>*</span>) <span>AS</span> count
<span>FROM</span> messages
<span>WHERE</span> is_read <span>=</span> <span>0</span>
<span>GROUP BY</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>
<span>ORDER BY</span> count <span>DESC</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Get the number of emails for a specific period</h3><a id="user-content-get-the-number-of-emails-for-a-specific-period" aria-label="Permalink: Get the number of emails for a specific period" href="#get-the-number-of-emails-for-a-specific-period"></a></p>
<ul dir="auto">
<li>For years: <code>strftime('%Y', timestamp)</code></li>
<li>For months in a year: <code>strftime('%m', timestamp)</code></li>
<li>For days in a month: <code>strftime('%d', timestamp)</code></li>
<li>For weekdays: <code>strftime('%w', timestamp)</code></li>
<li>For hours in a day: <code>strftime('%H', timestamp)</code></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="SELECT strftime('%Y', timestamp) AS period, COUNT(*) AS count
FROM messages
GROUP BY period
ORDER BY count DESC"><pre><span>SELECT</span> strftime(<span><span>'</span>%Y<span>'</span></span>, <span>timestamp</span>) <span>AS</span> period, <span>COUNT</span>(<span>*</span>) <span>AS</span> count
<span>FROM</span> messages
<span>GROUP BY</span> period
<span>ORDER BY</span> count <span>DESC</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Find all newsletters and group them by sender</h3><a id="user-content-find-all-newsletters-and-group-them-by-sender" aria-label="Permalink: Find all newsletters and group them by sender" href="#find-all-newsletters-and-group-them-by-sender"></a></p>
<p dir="auto">This is an amateurish way to find all newsletters and group them by sender. It's not perfect, but it's a start. You could also use</p>
<div dir="auto" data-snippet-clipboard-copy-content="SELECT sender->>'$.email', COUNT(*) AS count
FROM messages
WHERE body LIKE '%newsletter%' OR body LIKE '%unsubscribe%'
GROUP BY sender->>'$.email'
ORDER BY count DESC"><pre><span>SELECT</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>, <span>COUNT</span>(<span>*</span>) <span>AS</span> count
<span>FROM</span> messages
<span>WHERE</span> body <span>LIKE</span> <span><span>'</span>%newsletter%<span>'</span></span> <span>OR</span> body <span>LIKE</span> <span><span>'</span>%unsubscribe%<span>'</span></span>
<span>GROUP BY</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>
<span>ORDER BY</span> count <span>DESC</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Show who has sent the largest emails in MB</h3><a id="user-content-show-who-has-sent-the-largest-emails-in-mb" aria-label="Permalink: Show who has sent the largest emails in MB" href="#show-who-has-sent-the-largest-emails-in-mb"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="SELECT sender->>'$.email', sum(size)/1024/1024 AS size
FROM messages
GROUP BY sender->>'$.email'
ORDER BY size DESC"><pre><span>SELECT</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>, <span>sum</span>(size)<span>/</span><span>1024</span><span>/</span><span>1024</span> <span>AS</span> size
<span>FROM</span> messages
<span>GROUP BY</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>
<span>ORDER BY</span> size <span>DESC</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Count the number of emails that I have sent to myself</h3><a id="user-content-count-the-number-of-emails-that-i-have-sent-to-myself" aria-label="Permalink: Count the number of emails that I have sent to myself" href="#count-the-number-of-emails-that-i-have-sent-to-myself"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="SELECT count(*)
FROM messages
WHERE EXISTS (
  SELECT 1
  FROM json_each(messages.recipients->'$.to')
  WHERE json_extract(value, '$.email') = 'foo@example.com'
)
AND sender->>'$.email' = 'foo@example.com'"><pre><span>SELECT</span> <span>count</span>(<span>*</span>)
<span>FROM</span> messages
<span>WHERE</span> EXISTS (
  <span>SELECT</span> <span>1</span>
  <span>FROM</span> json_each(<span>messages</span>.<span>recipients</span><span>-</span><span>&gt;</span><span><span>'</span>$.to<span>'</span></span>)
  <span>WHERE</span> json_extract(value, <span><span>'</span>$.email<span>'</span></span>) <span>=</span> <span><span>'</span>foo@example.com<span>'</span></span>
)
<span>AND</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span> <span>=</span> <span><span>'</span>foo@example.com<span>'</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">List the senders who have sent me the largest total volume of emails in megabytes</h3><a id="user-content-list-the-senders-who-have-sent-me-the-largest-total-volume-of-emails-in-megabytes" aria-label="Permalink: List the senders who have sent me the largest total volume of emails in megabytes" href="#list-the-senders-who-have-sent-me-the-largest-total-volume-of-emails-in-megabytes"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="SELECT sender->>'$.email', sum(size)/1024/1024 as total_size
FROM messages
WHERE is_outgoing=false
GROUP BY sender->>'$.email'
ORDER BY total_size DESC"><pre><span>SELECT</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>, <span>sum</span>(size)<span>/</span><span>1024</span><span>/</span><span>1024</span> <span>as</span> total_size
<span>FROM</span> messages
<span>WHERE</span> is_outgoing<span>=</span>false
<span>GROUP BY</span> sender<span>-</span><span>&gt;&gt;</span><span><span>'</span>$.email<span>'</span></span>
<span>ORDER BY</span> total_size <span>DESC</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Roadmap</h2><a id="user-content-roadmap" aria-label="Permalink: Roadmap" href="#roadmap"></a></p>
<ul>
<li> Detect deleted emails and mark them as deleted in the database.</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Vision Now Available in Llama.cpp (361 pts)]]></title>
            <link>https://github.com/ggml-org/llama.cpp/blob/master/docs/multimodal.md</link>
            <guid>43943047</guid>
            <pubDate>Sat, 10 May 2025 03:39:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ggml-org/llama.cpp/blob/master/docs/multimodal.md">https://github.com/ggml-org/llama.cpp/blob/master/docs/multimodal.md</a>, See on <a href="https://news.ycombinator.com/item?id=43943047">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_product_navbar&quot;}" href="https://github.com/security/advanced-security">
      
      <div>
        <p>GitHub Advanced Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code Review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_product_navbar&quot;}" href="https://github.com/features/code-search">
      
      <div>
        <p>Code Search</p><p>
        Find more, search less
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
                    <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      Events &amp; Webinars

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      <div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

                </ul>
              </div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

                </ul>
              </div>
              
          </div>
</li>


                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:ggml-org/llama.cpp" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="5m7Yth-E6u6NJf8qwceUaOwKZqcHMLV79S9DhuMYllZMiKDO_7enAFtrbg-AbcbjDV0fNyf1A48GFgzXfuDFOA" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="ggml-org/llama.cpp" data-current-org="ggml-org" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=ggml-org%2Fllama.cpp" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/ggml-org/llama.cpp/blob/master/docs/multimodal.md&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="374eaf3e33f390d25ae7641e36852a2039f525c225923c274bdb379025e54cbc" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a></p><p>
    <react-partial-anchor>
      <tool-tip id="tooltip-2bcafefd-f289-4bc5-86ff-b6a5c2deebb2" for="icon-button-4c788c6e-717e-4ab4-bd18-a770f6afea81" popover="manual" data-direction="s" data-type="label" data-view-component="true">Appearance settings</tool-tip>

      <template data-target="react-partial-anchor.template">
        <script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_promise-with-resolvers-polyfil-40d47c-d51541042e41.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/appearance-settings-17c0890ddb85.js"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.070a275174b943f11c11.module.css">
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/appearance-settings.22dfbc22ef0a2bf02523.module.css">

<react-partial partial-name="appearance-settings" data-ssr="false" data-attempted-ssr="false">
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>

      </template>
    </react-partial-anchor>
  </p>

          </div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A simple 16x16 dot animation from simple math rules (161 pts)]]></title>
            <link>https://tixy.land</link>
            <guid>43942881</guid>
            <pubDate>Sat, 10 May 2025 02:56:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tixy.land">https://tixy.land</a>, See on <a href="https://news.ycombinator.com/item?id=43942881">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="editor"> <p><label for="input">// tixy - creative code golfing</label> <label for="input">// click the dots for more info</label> <label for="input">// use 32 characters or less</label> </p> <label id="label" for="input">(t,i,x,y) =&gt;</label>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Brandon's Semiconductor Simulator (162 pts)]]></title>
            <link>https://brandonli.net/semisim/</link>
            <guid>43942279</guid>
            <pubDate>Sat, 10 May 2025 00:37:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://brandonli.net/semisim/">https://brandonli.net/semisim/</a>, See on <a href="https://news.ycombinator.com/item?id=43942279">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <h2>Brandon's Semiconductor Simulator</h2>
    <p>Draw your own circuits. Turn on voltage and see what happens. Some features of my program include:</p>
    <ul>
      <li>Interactive circuit drawing</li>
      <li>Visualization of electromagnetic fields</li>
      <li>Many materials (metals, semiconductors, dielectrics, and more)</li>
    </ul>

    

    <p>You need a good computer to run this simulation on your browser. There is also a <a href="https://github.com/StunningLlama/Physics/releases/tag/v1.2">downloadable version</a> that's much faster
      (but requires Java).</p>
    <p>Want to know more? You can read about it <a href="https://brandonli.net/semisim/info">here.</a></p>
    <p>(c) Brandon Li, 2025. Ported to Javascript with the help of Paul Falstad.</p>

    <h2>Simulation Examples</h2>

    <div>
      <h2>Simple Circuits</h2>
      
    </div>

    <div>
      <h2>Semiconductor Devices</h2>
      
    </div>

    <div>
      <h2>Digital Logic</h2>
      
    </div>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WebGL Water (2010) (181 pts)]]></title>
            <link>https://madebyevan.com/webgl-water/</link>
            <guid>43942149</guid>
            <pubDate>Sat, 10 May 2025 00:13:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://madebyevan.com/webgl-water/">https://madebyevan.com/webgl-water/</a>, See on <a href="https://news.ycombinator.com/item?id=43942149">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>Loading...</p><div id="help">
    
    <p>Made by <a href="https://madebyevan.com/">Evan Wallace</a></p>
    <p>This demo requires a decent graphics card and up-to-date drivers. If you can't run the demo, you can still <a href="https://youtube.com/watch?v=R0O_9bp3EKQ">see it on YouTube</a>.</p>
    <h2>Interactions:</h2>
    <ul>
      <li>Draw on the water to make ripples</li>
      <li>Drag the background to rotate the camera</li>
      <li>Press SPACEBAR to pause and unpause</li>
      <li>Drag the sphere to move it around</li>
      <li>Press the L key to set the light direction</li>
      <li>Press the G key to toggle gravity</li>
    </ul>
    <h2>Features:</h2>
    <ul>
      <li>Raytraced reflections and refractions</li>
      <li>Analytic ambient occlusion</li>
      <li>Heightfield water simulation *</li>
      <li>Soft shadows</li>
      <li>Caustics (see <a href="https://medium.com/@evanwallace/rendering-realtime-caustics-in-webgl-2a99a29a0b2c">this</a> for details) **</li>
    </ul>
    <p><small>* requires the OES_texture_float extension<br>** requires the OES_standard_derivatives extension</small></p>
    <p><small>Tile texture from <a href="https://www.flickr.com/photos/zooboing/3682834083/">zooboing</a> on Flickr</small></p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fleurs du Mal (137 pts)]]></title>
            <link>https://fleursdumal.org</link>
            <guid>43941598</guid>
            <pubDate>Fri, 09 May 2025 22:42:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fleursdumal.org">https://fleursdumal.org</a>, See on <a href="https://news.ycombinator.com/item?id=43941598">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="pagewidth">

<!-- Top -->



<br clear="all">

<!-- Content -->

<h2>FleursDuMal.org</h2>

<p>
<i>"I once read a lot of Baudelaire + my Angel kid has read every translation — apparently, if you don't know french (I do) you have to read all the translations to get a good idea."</i> — Allen Ginsberg, Letter to David Cope, 25 Jan 1977.
</p>
  
<p>
Fleursdumal.org is dedicated to the French poet Charles Baudelaire (1821 - 1867) and his poems <i>Les Fleurs du mal</i> (Flowers of Evil). The definitive online edition of this masterpiece of French literature, Fleursdumal.org contains every poem of each edition of <i>Les Fleurs du mal,</i> together with multiple English translations. 
</p>

<p>
<a href="https://supervert.com/necrophilia_variations/" target="_blank"><img src="https://fleursdumal.org/images/supervert.nv.button.gif" width="120" height="90" alt="Visit supervert.com to learn more about Necrophilia Variations" title="Visit supervert.com to learn more about Necrophilia Variations"></a><b>About.</b> Fleursdumal.org launched on 1 Feb 2004. The site is a labor of love created and maintained by <a href="https://supervert.com/" target="_blank" name="Supervert"><b>Supervert</b></a>. At supervert.com you can find information about Supervert's books, which include <a href="https://supervert.com/extraterrestrial_sex_fetish/" target="_blank" name="Supervert"><u>Extraterrestrial Sex Fetish</u></a>, <a href="https://supervert.com/necrophilia_variations/" target="_blank" name="Supervert"><u>Necrophilia Variations</u></a>, <a href="https://supervert.com/perversity_think_tank/" target="_blank"><u>Perversity Think Tank</u></a>, <a href="https://supervert.com/post_depravity/" target="_blank"><u>Post-Depravity</u></a>, <a href="https://supervert.com/apocalypse-burlesque/" target="_blank"><u>Apocalypse Burlesque</u></a>, and <a href="https://supervert.com/music-for-erotomaniacs/" target="_blank"><u>Music for Erotomaniacs</u></a>. 
</p>

<p>
<b>Note on translations.</b> Most of the translations that appear on fleursdumal.org have appeared previously in book form. These are not necessarily the best or the worst translations — though fleursdumal.org is partial to Edna St. Vincent Millay's renderings — but they are ones that the site felt comfortable reproducing in terms of rights. If you are a rights holder and object to your translations being included here, please contact fleursdumal.org to discuss the issue. 
</p>

<p>
<b>Translators.</b> Contact fleursdumal.org if you would like to submit a translation. Please note, however, that the site reserves the unconditional right to reject any submission without explanation. 
</p>

<p>
If you're new to Baudelaire or uninterested in the various editions of the <i>Flowers of Evil,</i> you should browse poems using the <a href="https://fleursdumal.org/1861-table-of-contents" name="1861 Table of Contents"><u>1861 Table of Contents</u></a>. This is the definitive edition of <i>Les Fleurs du mal</i> and contains most everything except the "condemned" poems which you can find in <a href="https://fleursdumal.org/1866-les-epaves-table-of-contents" name="Les Épaves"><u>Les Épaves</u></a> (scraps).  
</p>


<!-- Navigation -->

<div id="bottom">

<h3>Navigation</h3>



<ul>
	<li><a href="https://fleursdumal.org/1857-table-of-contents">1857 Fleurs du mal</a></li>
	<li><a href="https://fleursdumal.org/1861-table-of-contents">1861 Fleurs du mal</a></li>
	<li><a href="https://fleursdumal.org/1866-les-epaves-table-of-contents">1866 Les Épaves</a></li>
	<li><a href="https://fleursdumal.org/1868-table-of-contents">1868 Fleurs du mal</a></li>
	<li><a href="https://fleursdumal.org/alphabetical-listing">All Poems (Alphabetical)</a></li>
	<li><a href="https://fleursdumal.org/audio/">Audio</a></li>
	<li><a href="https://supervert.com/contact/" target="_blank">Contact</a></li>
</ul> 

</div>

<!-- Footer -->



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Era of U.S. dollar may be winding down (173 pts)]]></title>
            <link>https://news.harvard.edu/gazette/story/2025/05/era-of-u-s-dollar-may-be-winding-down/</link>
            <guid>43940865</guid>
            <pubDate>Fri, 09 May 2025 21:05:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.harvard.edu/gazette/story/2025/05/era-of-u-s-dollar-may-be-winding-down/">https://news.harvard.edu/gazette/story/2025/05/era-of-u-s-dollar-may-be-winding-down/</a>, See on <a href="https://news.ycombinator.com/item?id=43940865">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>It looks like the end of an era for the U.S. dollar.</p>



<p>In his new book “Our Dollar, Your Problem: An Insider’s View of Seven Turbulent Decades of Global Finance, and the Road Ahead,” <a href="https://rogoff.scholars.harvard.edu/">Kenneth Rogoff</a> looks back on the currency’s dominant run in global trade and central bank reserves for a host of other countries. Today, he argues, that lofty status is on the wane.</p>



<p>“My thesis is that the U.S. dollar is about to get knocked down a couple pegs,” said Rogoff, a professor of economics and the Maurits C. Boas Chair of International Economics. “It will still be first in global finance, because nothing is poised to fully replace it. The dollar just won’t be as unique as it once was.”</p>



<p>Written entirely before the 2024 election, the book weaves first-person reflections with a history of the U.S. economy and its currency topping a succession of challengers. As a teen chess pro in the late 1960s and early ’70s, Rogoff traveled to tournaments in the Eastern Bloc provided him with rare insight on America’s Communist rivals. As a visiting scholar at the Bank of Japan in 1991, he glimpsed a booming economy on the precipice of disaster. He went on to serve as chief economist at the International Monetary Fund in the early ’00s, the nascent days of Europe’s common currency.</p>



<p>“The book is not a memoir,” Rogoff said. “But I do link in anecdotes from my experiences with world leaders, policymakers, former students, and chess players.”</p>



<p>The Gazette met up with Rogoff in his office for a preview of the book’s personal tales and macroeconomic prophesy. The interview was edited for length and clarity.</p>



<figure><img loading="lazy" decoding="async" width="1920" height="1280" src="https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg" alt="Kenneth Rogoff." srcset="https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg 1920w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=150,100 150w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=300,200 300w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=768,512 768w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=1024,683 1024w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=1536,1024 1536w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=48,32 48w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=96,64 96w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=1488,992 1488w, https://news.harvard.edu/wp-content/uploads/2025/05/Rogoff-Author-Photo.-Credit-Martha-Stewart.jpg?resize=1680,1120 1680w" sizes="auto, (max-width: 1920px) 100vw, 1920px"><figcaption><p>Professor of Economics Kenneth Rogoff.</p><p>Photo by Martha Stewart</p></figcaption></figure>



<hr>



<p><strong>This release feels extraordinarily well-timed, given the recent sell-off of U.S. Treasuries and the dollar’s decline following President Trump’s April 2 tariff announcement. What events compelled you to revisit the dollar’s incredible rise and offer predictions for its future?</strong></p>



<p>It wasn’t a single event. Based on my research, I thought the dollar peaked in its global footprint in 2015 and was in gentle decline. But I also thought this trend might accelerate. I was particularly concerned with our fiscal deficit and rising interest rates. I recently <a href="https://www.nber.org/papers/w33079">published a paper</a> showing that if you look at the long history of interest rates, they tend to revert to trend.</p>



<p>I was also <a href="https://rogoff.scholars.harvard.edu/publications/beginning-end-central-bank-independence">very concerned</a> about the Federal Reserve losing independence. I actually wrote the <a href="https://rogoff.scholars.harvard.edu/publications/optimal-degree-commitment-intermediate-monetary-target">first paper</a> on the importance of central bank independence almost 45 years ago; it’s maybe my most famous paper. But in recent years, I started noticing rhetoric on both the left and the right about reining that in. Federal Reserve Chairman Jerome Powell wouldn’t get pushed aside out of the blue. It would take another crisis. During wartime, for example, central banks are commonly made subservient to the government.</p>



<p><strong>That covers some of the internal pressures on dollar dominance. What about external factors?</strong></p>



<p>We’ve been able to use economic sanctions in place of military intervention. It saves us lives; it saves us money. But dollar dominance also gives us access to financial data that no other country has. If you were to go to the CIA today, you would see somebody on a laptop instead of somebody like James Bond.</p>



<p>So there’s quite an appetite, particularly in Asia, to reduce the dollar’s grip. China couldn’t help but notice when the U.S. placed economic sanctions on Russia following its full-scale invasion of Ukraine. China, of course, has designs on Taiwan.</p>



<p><strong>For most of us in the U.S., our currency’s almighty position isn’t exactly top of mind. Can you illustrate how dollar dominance impacts daily life for everyday Americans?</strong></p>



<p>For one thing, we’re all paying lower interest rates. It’s not a huge amount. You don’t like paying 6 percent on your mortgage, but you’d dislike it even more if you were paying 7 percent. And for the national government, which owes $36 trillion, every additional 1 percent is $360 billion.</p>



<p>Another thing is that, in times of crisis like the pandemic or the global financial crisis of 2008, the U.S. has been able to borrow promiscuously. Interest rates do rise as our debt rises, but the effect is very gentle compared with the U.K. or France. If this privilege is lost, we will notice it.</p>



<figure><img loading="lazy" decoding="async" width="1272" height="1920" src="https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg" alt="Book cover: &quot;Our Dollar, Your Problem.&quot;" srcset="https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg 1272w, https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg?resize=99,150 99w, https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg?resize=199,300 199w, https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg?resize=768,1159 768w, https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg?resize=678,1024 678w, https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg?resize=1018,1536 1018w, https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg?resize=21,32 21w, https://news.harvard.edu/wp-content/uploads/2025/05/Book-cover-our-dollar-your-problem.jpg?resize=42,64 42w" sizes="auto, (max-width: 1272px) 100vw, 1272px"></figure>



<p><strong>Tell me about the book’s title.</strong></p>



<p>The U.S. dollar used to be as good as gold. If you were a foreign country holding the equivalent to what is today hundreds of billions of dollars, as many Asian central banks do now, you could just take them to the U.S., and we would give you gold. But then President Richard Nixon decided, in 1971, that we weren’t going to do that anymore.</p>



<p>Leaders from around the world were in a state of shock. As a global financial incident, it was just as dramatic as the introduction of President Trump’s tariffs earlier this year. Nixon sent Treasury Secretary John Connally to meet with these leaders in Rome. They asked, “What do we do? Now that you’re not on gold, you can just inflate this stuff, and we’re stuck with it.” And Connally replied, “Well, it’s our dollar, but it’s your problem.”</p>



<p><strong>What do Connally’s words call to mind for you today?</strong></p>



<p>Connally’s remark captures the arrogance of American leaders that foreign leaders so often feel. I feel our role in the world comes with responsibility, and we should recognize that.</p>



<p>The book’s title is also ironic. After we went off gold, we lost a kind of price anchor. Nixon started beating up on Federal Reserve Chairman Arthur Burns as brutally as Trump beats up on Powell today. It just wasn’t in public; he was doing it in the Oval Office. We only know about it now because of the Watergate tapes. Burns got pressured into printing a lot of money. The result was the worst inflation the U.S. had seen since in a long while. So although Connally was saying “It’s your problem,” the resulting inflation proved a disaster for the U.S., too.</p>



<p><strong>Other economies have emerged as challengers to U.S. power over the years. But you open the book with a surprising example, at least for those who came of age after the Cold War. You start with the post-World War II rise of the Soviet Union. Can you talk about that choice?</strong></p>



<p>By the ’80s, it was becoming clear that the Russian ruble would not outpace the dollar. But in the ’60s and ’70s, we had no idea. I write about the different professors I met as an undergraduate at Yale, as well as textbooks by leading economists such as Paul Samuelson. Samuelson was convinced the Soviet economy would catch up to the U.S. The greatest economic historian of that era was Angus Maddison. He didn’t think the Soviet Union would catch up, but he thought it would do pretty well. These economists were not Marxists!</p>



<p>Later on, we didn’t know Japan would falter. We didn’t know Europe would fizzle. We never imagined the heights the U.S. dollar ultimately reached. My book hits these themes again and again.</p>



<p><strong>How did your experiences as a globe-hopping teen chess master shape your views on the subject?</strong></p>



<p>My professors at Yale talked about how great the Soviet Union was doing. But I had lived on my own abroad, primarily in the former Yugoslavia. I had visited some of my chess-player friends in their homes. Chess was a very big deal in the Communist bloc, so these players had privileged lives and nicer dwellings than the typical resident. But these nice dwellings consisted of little cement blocks in these humorless buildings. They barely had modern plumbing by U.S. standards. It made me very skeptical about Samuelson’s claim.</p>



<p><strong>You write in this book that era of dollar dominance is in “late middle-age, but still in good health.” Is that still true in light of Trump’s second-term trade war?</strong></p>



<p>Well, the dollar is starting to experience more serious health issues under Trump. When you’re an academic, the goal is never to write a book that’s true tomorrow. After coming to Harvard in 1999, I went for a walk across campus with former Faculty of Arts and Sciences Dean <a href="https://news.harvard.edu/gazette/story/2008/04/jeremy-r-knowles/">Jeremy Knowles</a>. I’ll never forget what he told me. He said, “The perfect paper is one that everybody thinks is wrong, but in five or 10 years it’s proven right.”</p>



<p><strong>You’ve achieved that in the past.</strong></p>



<p>Carmen Reinhart and I were ridiculed in early 2009 when we presented <a href="https://rogoff.scholars.harvard.edu/publications/aftermath-financial-crises">a paper</a> showing that recoveries from financial crises tend to be much slower and weaker than conventional recoveries. Of course that is exactly what happened. I had a similar experience in 2020 when <a href="https://rogoff.scholars.harvard.edu/sites/g/files/omnuum5901/files/rogoff/files/nber_27697_peak_china_housing_1.pdf">my work suggested</a> a deep problem in Chinese real estate.</p>



<p>My new book also contains some out-of-consensus forecasts that I believe will ultimately prove correct — on interest rates, inflation, and the role of the dollar. I don’t argue that dollar dominance will fall sharply tomorrow. But Trump has been an accelerant. He has been a catalyst. Parts of the world were already moving away from the dollar. Now they’re moving much faster.</p>	<!-- wp:harvard-gazette/share -->
	
	<!-- /wp:harvard-gazette/share -->
	
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Business books are entertainment, not strategic tools (428 pts)]]></title>
            <link>https://theorthagonist.substack.com/p/why-reading-business-books-is-a-waste</link>
            <guid>43940747</guid>
            <pubDate>Fri, 09 May 2025 20:51:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://theorthagonist.substack.com/p/why-reading-business-books-is-a-waste">https://theorthagonist.substack.com/p/why-reading-business-books-is-a-waste</a>, See on <a href="https://news.ycombinator.com/item?id=43940747">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>Most popular business books are written for emotional appeal, not intellectual rigor.</p><p>They turn simplified stories into generic advice, convert rare successes into universal strategies, and replace complex market dynamics with motivational slogans.</p><p>These books succeed not because they are accurate, but because they are easy to read and make readers feel good.</p><p><strong>Main Idea:</strong><span> Create something entirely new. Avoid competition. Monopolies are better.</span></p><p><strong>What’s partly true:</strong><span> Yes, monopolies are more profitable. That’s well known.</span></p><p><strong>What’s misleading:</strong></p><ul><li><p>Thiel promotes the idea that great companies are born from singular insight. In reality, most companies pivot repeatedly and succeed through iteration.</p></li><li><p>He oversimplifies market dynamics, ignoring the role of strategic partnerships and collaborative ecosystems.</p></li><li><p>Skips the part that Peter Thiel was already in the top 1% of the population—Stanford-educated, ex-Credit Suisse, and founder of a small capital firm—before PayPal. He wasn’t a struggling outsider with nothing to lose. His advice is filtered through a lens of early privilege and structural advantage.</p></li></ul><p><strong>What’s missing:</strong></p><ul><li><p>No discussion of real startup mechanics like team dynamics, fundraising timelines, cost structures, or customer acquisition.</p></li></ul><p><strong>Counterexample:</strong></p><ul><li><p><strong>Airbnb</strong><span> didn’t invent a new concept—it executed better within an existing space.</span></p></li></ul><p><strong>Main Idea:</strong><span> Automate and outsource your work to live more freely.</span></p><p><strong>What’s partly true:</strong><span> Delegation and automation can increase efficiency.</span></p><p><strong>What’s misleading:</strong></p><ul><li><p>Ferriss generalizes from fringe cases. He presents digital arbitrage schemes and outsourcing as a universal path to freedom.</p></li><li><p>The idea of “mini-retirements” ignores the intensity required to build anything meaningful.</p></li></ul><p><strong>What’s missing:</strong></p><ul><li><p>No discussion of long-term brand building, legal issues in outsourcing, or strategic depth.</p></li></ul><p><strong>Counterexample:</strong></p><ul><li><p><strong>Stripe</strong><span> was built through deep technical focus and years of sustained effort—not four-hour shortcuts.</span></p></li></ul><p><strong>Main Idea:</strong><span> A strong sense of purpose drives business success.</span></p><p><strong>What’s partly true:</strong><span> A clear mission can help unify a team or attract certain customers.</span></p><p><strong>What’s misleading:</strong></p><ul><li><p>Sinek overstates the importance of purpose. In practice, customers buy based on utility and price, not ideology.</p></li><li><p>Many companies retroactively assign a mission after achieving traction.</p></li></ul><p><strong>What’s missing:</strong></p><ul><li><p>No analysis of market fit, product iteration, or pricing strategy.</p></li></ul><p><strong>Counterexample:</strong></p><ul><li><p><strong>Amazon</strong><span> scaled through operational excellence, not brand mission.</span></p></li></ul><p><strong>Main Idea:</strong><span> Build–Measure–Learn cycles help startups adapt and reduce waste.</span></p><p><strong>What’s partly true:</strong><span> Fast iteration and feedback loops are helpful.</span></p><p><strong>What’s misleading:</strong></p><ul><li><p>The MVP concept is often overused to justify low-quality products.</p></li><li><p>Metrics are treated as precise guides without accounting for interpretation or strategy.</p></li></ul><p><strong>What’s missing:</strong></p><ul><li><p>Lacks attention to capital planning, go-to-market execution, or founder psychology under uncertainty.</p></li></ul><p><strong>Counterexample:</strong></p><ul><li><p><strong>Apple</strong><span> avoided MVPs, choosing instead to launch highly polished products.</span></p></li></ul><p><strong>Main Idea:</strong><span> Successful companies share common leadership traits and disciplined cultures.</span></p><p><strong>What’s partly true:</strong><span> Strong leadership and discipline are helpful.</span></p><p><strong>What’s misleading:</strong></p><ul><li><p>The book suffers from selection bias. Many “great” companies later failed.</p></li><li><p>It presents correlation as causation.</p></li></ul><p><strong>What’s missing:</strong></p><ul><li><p>No real discussion of technology cycles, financial structuring, or economic context.</p></li></ul><p><strong>Counterexample:</strong></p><ul><li><p><strong>Fannie Mae</strong><span>, once praised in the book, played a major role in the 2008 financial collapse.</span></p></li></ul><p><strong>Main Idea:</strong><span> Startups are painful, and there are no easy answers.</span></p><p><strong>What’s partly true:</strong><span> Founding a company is often chaotic and stressful.</span></p><p><strong>What’s misleading:</strong></p><ul><li><p>The book turns specific experiences into generalized lessons without clear frameworks.</p></li><li><p>Key decisions (e.g., firing, fundraising) are discussed narratively rather than analytically.</p></li></ul><p><strong>What’s missing:</strong></p><ul><li><p>No structured treatment of capital efficiency, equity dilution, or risk-weighted decision-making.</p></li></ul><p><strong>Counterexample:</strong></p><ul><li><p><span>Many companies succeeded by avoiding avoidable chaos—</span><strong>Shopify</strong><span> scaled steadily with methodical planning.</span></p></li></ul><p><em>A total airport book.</em></p><p><strong>Main Idea:</strong><span> Caring less about unimportant things leads to a better life.</span></p><p><strong>What’s partly true:</strong><span> Obsessing over irrelevant issues wastes time and energy.</span></p><p><strong>What’s misleading:</strong></p><ul><li><p>The book wraps fatalism in edgy language and markets it as practical wisdom.</p></li><li><p>Manson’s branding depends on carefully curating an image of not caring, which is itself a contradiction.</p></li></ul><p><strong>What’s missing:</strong></p><ul><li><p>Offers no frameworks, strategies, or useful tools for people building complex systems or organizations.</p></li></ul><p><strong>Counterexample:</strong></p><ul><li><p>Every successful founder gave tremendous attention to detail. Caring deeply is essential.</p></li></ul><p>I read business books like these consistently for two years. I took notes, applied the advice, and expected meaningful change.</p><p>None came.</p><p>There were no improved outcomes, no smarter decisions, just temporary motivation and wasted time.</p><p>Glorified procrastination, at best.</p><p>Before I started my first company, I worked for over ten years as a quantitative analyst at a top-tier financial firm.</p><p>We built mathematical models to price risk in real-time.</p><p>When I entered the startup world, I mistakenly followed the MVP playbook. We launched too early, misread feedback, and ended up iterating around noise.</p><p>What saved the company wasn’t lean methodology. It was building something so good that users couldn’t ignore it.</p><p>I’ve hired engineers who were obsessed with quality and passed on candidates with vague “passion.”</p><p>I’ve killed deals when the numbers didn’t make sense, regardless of hype.</p><p>Nothing I’ve learned about building successful ventures came from mainstream business books.</p><p>It came from confronting consequences.</p><p><strong>1. Focus on reality, not narrative</strong></p><ul><li><p>Real markets don’t follow tidy story arcs. Most success stories are retrospective rationalizations of random walks.</p></li></ul><p><strong>2. Strategy is situational and dynamic</strong></p><ul><li><p>There is no universal playbook. The right strategy depends on timing, capital, and team capabilities.</p></li></ul><p><strong>3. Operational knowledge matters</strong></p><ul><li><p>Concepts like churn, CAC:LTV, regulatory constraints, and compensation structure determine outcomes. Most pop-business books ignore these.</p></li></ul><p><strong>4. Small, smart decisions compound</strong></p><ul><li><p>Breakthroughs are rare. Endurance and accumulation win.</p></li></ul><p><strong>5. Mastery beats motivation</strong></p><ul><li><p>Learn accounting, incentive design, and probability before chasing feel-good mantras.</p></li></ul><p>Not all books are empty. Some are rigorous, detailed, and worth your time—usually written by academics, not entrepreneurs. Examples:</p><ul><li><p><em><strong><a href="https://www.goodreads.com/book/show/407999.Competitive_Strategy" rel="">Competitive Strategy</a></strong></em><span> by Michael Porter — clear frameworks for industry structure and positioning.</span></p></li><li><p><em><strong><a href="https://www.goodreads.com/book/show/17628199-designing-organizations" rel="">Designing Organizations</a></strong></em><span> by Jay R. Galbraith — systems thinking for structuring scalable teams.</span></p></li><li><p><em><strong><a href="https://www.goodreads.com/book/show/24537795-financial-modeling" rel="">Financial Modeling</a></strong></em><span> by Simon Benninga — practical tools for forecasting and capital planning.</span></p></li><li><p><em><strong><a href="https://www.goodreads.com/book/show/151848.Probability_Theory" rel="">Probability Theory: The Logic of Science</a></strong></em><span> by E.T. Jaynes — essential reading for thinking under uncertainty.</span></p></li></ul><p>These aren’t easy reads.</p><p>They require real cognitive effort.</p><p>But they offer lasting value.</p><p>The most successful founders don’t memorize slogans.</p><p>They absorb complexity, adapt intelligently, and think in systems.</p><p>Most business books won’t help you do that.</p><p>Write your own playbook—with decisions, not quotes.</p><p>Be well,</p><p>Jack</p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What’s new in Swift 6.2 (167 pts)]]></title>
            <link>https://www.hackingwithswift.com/articles/277/whats-new-in-swift-6-2</link>
            <guid>43940539</guid>
            <pubDate>Fri, 09 May 2025 20:20:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.hackingwithswift.com/articles/277/whats-new-in-swift-6-2">https://www.hackingwithswift.com/articles/277/whats-new-in-swift-6-2</a>, See on <a href="https://news.ycombinator.com/item?id=43940539">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                            
                            <p>Raw identifiers, backtraces, task naming, and more.</p>
                        </div><div>
                            <p>Brace yourselves, folks: Swift 6.2 contains another gigantic collection of additions and improvements to the language, while also adding some important refinements to Swift concurrency that ought to make it much easier to adopt everywhere.</p>
<p>Many changes are small, such as the addition of raw identifiers, default values in string interpolation, or <code>enumerated()</code> conforming to <code>Collection</code>, but these are all likely to spread quickly across projects because they are just so darned <em>useful</em>.</p>
<p>It's also great to see Swift Testing going from strength to strength, with three major improvements coming in Swift 6.2, including exit tests and attachments.</p>
<p>In short, it feels like Swift 6.2 is delivering what many imagined Swift 6.0 would be – increasingly rounded support for concurrency, backed up by a number of pragmatic choices that help smooth out the language's learning curve.</p>
<p><strong>Note:</strong> At the time of writing, Swift 6.2 is available only as a test release from <a rel="nofollow noopener" target="_blank" href="https://www.swift.org/install/macos/">Swift.org</a>. The list below represents my best guess for what's coming up –&nbsp;don't be surprised if something slips to a later or release or something else arrives by surprise!</p>

<p><a href="https://www.hackingwithswift.com/sponsor">Sponsor Hacking with Swift and reach the world's largest Swift community!</a></p>
<h3>Control default actor isolation inference</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0466-control-default-actor-isolation.md">SE-0466</a> introduces the ability for code to opt into running on a single actor by default –&nbsp;to effectively go back to being a single-threaded program, where most code runs on the main actor until you say otherwise.</p>
<p><strong>Yes, this is exactly as good as you're thinking:</strong> with one single change many app developers can more or less avoid thinking about Swift concurrency until they are ready to do so, because unless they say otherwise all their types and functions will behave as if it were annotated with <code>@MainActor</code>.</p>
<p>To enable this new feature, add <code>-default-isolation MainActor</code> to your compiler flags, and code like this becomes valid:</p>
<pre><code>@MainActor
class DataController {
    func load() { }
    func save() { }
}

struct App {
    let controller = DataController()

    init() {
        controller.load()
    }
}</code></pre>
<p>As you can see, the <code>App</code> struct creates and uses a main actor-isolated type without itself being marked <code>@MainActor</code>, but that's okay because it's automatically applied for us –&nbsp;we could even remove the lone <code>@MainActor</code> annotation and it would still apply.</p>
<p>Before you start panicking that this is going to cause all sorts of concurrency problems, there are five important things you know.</p>
<p>First, this new configuration option is applied on a <em>per-module basis</em>, so if you bring in external modules they can still run on other actors. This ought to allow UI-focused modules to switch to running on the main actor by default, while letting background-focused modules operate with concurrency as before.</p>
<p>Second, you can still use things like networking in your apps just fine –&nbsp;code such as <code>URLSession.shared.data(from:)</code> will run on its own task rather than blocking your code.</p>
<p>Third, a single CPU core in a modern iPhone runs at over 4GHz, so a huge number of iOS apps can get all their work done serially without a second thought.</p>
<p>Fourth, a lot of developers were already using "make it all @MainActor" as their default approach to concurrency, changing only when needed.</p>
<p>Fifth and perhaps most importantly, this change along with others form part of a larger <a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/visions/approachable-concurrency.md">Improving the approachability of data-race safety</a> vision document published by the Swift team – it's not just one change in isolation, but instead part of a cohesive package of improvements to reduce the learning curve for concurrency.</p>
<p>So, although this change might seem antithetical to all the Swift concurrency work that has taken place from Swift 5.5 and on, ultimately it solves a significant problem that was only growing: Swift concurrency is not easy to learn, and many apps simply don't need it.</p>
<p>Of course, the real question is whether Apple will enable this feature by default for new app projects in Xcode. I sincerely hope so, because it would also allow Xcode to default to the Swift 6 language version without introducing errors and warnings that many developers just don't need to think about.</p>
<p><strong>Note:</strong> Another Swift Evolution proposal, <a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0478-default-isolation-typealias.md">SE-0478</a>, is currently being discussed, and if it is approved would allow us to declare the default actor isolation on a per-file basis using syntax like <code>private typealias DefaultIsolation = MainActor</code>. The feedback so far has been broadly negative, so it might be returned for revision.</p>
<h3>Raw identifiers</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0451-escaped-identifiers.md">SE-0451</a> dramatically expands the range of characters we can use to create identifiers – the names of variables, functions, enum cases and similar –&nbsp;so we can name them pretty much however we want when placed inside backticks.</p>
<p>So, this kind of code is legal in Swift 6.2 and later:</p>
<pre><code>func `function name with spaces`() {
    print("Hello, world!")
}

`function name with spaces`()</code></pre>
<p>If you're wondering why such naming might be useful, consider this:</p>
<pre><code>enum HTTPError: String {
    case `401` = "Unauthorized"
    case `404` = "Not Found"
    case `500` = "Internal Server Error"
    case `502` = "Bad Gateway"
}</code></pre>
<p>That makes each HTTP error code a case in our enum, which would previously need to be written as something else such as <code>case _401</code> or <code>case error401</code>.</p>
<p>If you're using numbers like this, you either need to qualify the type each time you use it, to avoid Swift getting confused, or you need to place the backticks carefully.</p>
<p>For example, in the code below we use <code>HTTPError</code> each time, to avoid Swift thinking <code>401</code> refers to a malformed floating-point literal:</p>
<pre><code>let error = HTTPError.401

switch error {
case HTTPError.401, HTTPError.404:
    print("Client error: \(error.rawValue)")
default:
    print("Server error: \(error.rawValue)")
}</code></pre>
<p>The alternative is to wrap the numbers themselves in the backticks –&nbsp;<em>not</em> including the dot beforehand – like this:</p>
<pre><code>switch error {
case .`401`, .`404`:
    print("Client error: \(error.rawValue)")
default:
    print("Server error: \(error.rawValue)")
}</code></pre>
<p>The biggest benefactor of this change is likely to be Swift Testing, where test names can now directly be written in a human-readable form rather than using camel case and adding an extra string description above.</p>
<p>So, rather than writing this:</p>
<pre><code>import Testing

@Test("Strip HTML tags from string")
func stripHTMLTagsFromString() {
    // test code
}</code></pre>
<p>We can instead write this:</p>
<pre><code>@Test
func `Strip HTML tags from string`() {
    // test code
}</code></pre>
<p>It's less duplication, which is always welcome.</p>
<p>One small detail that might catch you out is this: "A raw identifier may start with, contain, or end with operator characters, but it may not contain only operator characters." So, you can put operators such as <code>+</code> and <code>-</code> into your identifier names, but only if they aren't the only things in there.</p>
<h3>Default Value in String Interpolations</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0477-default-interpolation-values.md">SE-0477</a> makes a small but beautiful change to string interpolation with optionals, allowing us to provide an additional <code>default</code> value to use if the optional is nil.</p>
<p>In its simplest form this means we would write the following code:</p>
<pre><code>var name: String? = nil
print("Hello, \(name, default: "Anonymous")!")</code></pre>
<p>Instead of this:</p>
<pre><code>print("Hello, \(name ?? "Anonymous")!")</code></pre>
<p>At first glance this might not seem like a great improvement, but the kicker is that nil coalescing doesn't work with different types. So, this kind of code is allowed:</p>
<pre><code>var age: Int? = nil
print("Age: \(age ?? 0)")</code></pre>
<p>But this kind of code will not compile when uncommented:</p>
<pre><code>// print("Age: \(age ?? "Unknown")")</code></pre>
<p>That attempts to mix an optional integer with a string default value, which isn't allowed. Fortunately this <em>is</em> possible from Swift 6.2 onwards:</p>
<pre><code>print("Age: \(age, default: "Unknown")")</code></pre>
<h3>Add Collection conformances for enumerated()</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0459-enumerated-collection.md">SE-0459</a> makes the type returned by <code>enumerated()</code> conform to <code>Collection</code>.</p>
<p>The most immediate benefit of this is that it's now much easier to use <code>enumerated()</code> with a SwiftUI <code>List</code> or <code>ForEach</code> like this:</p>
<pre><code>import SwiftUI

struct ContentView: View {
    var names = ["Bernard", "Laverne", "Hoagie"]

    var body: some View {
        List(names.enumerated(), id: \.offset) { values in
            Text("User \(values.offset + 1): \(values.element)")
        }
    }
}</code></pre>
<p>The <a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0459-enumerated-collection.md">proposal</a> also mentions various performance benefits, including making <code>(1000..&lt;2000).enumerated().dropFirst(500)</code> a constant-time operation.</p>
<h3>Method and Initializer Key Paths</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0479-method-and-initializer-keypaths.md">SE-0479</a> extends Swift's key paths to support methods alongside the existing support for properties and subscripts, which, along with <a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0438-metatype-keypath.md">SE-0438</a> introduced in Swift 6.1, promises to round out what key paths can do.</p>
<p>Code to access properties has always worked just fine with key paths:</p>
<pre><code>let strings = ["Hello", "world"]
let capitalized = strings.map(\.capitalized)
print(capitalized)</code></pre>
<p>With this change we can now access methods too, but be sure to actually <em>invoke</em> the method like this:</p>
<pre><code>let uppercased = strings.map(\.uppercased())
print(uppercased)</code></pre>
<p>If you <em>don't</em> invoke the method then you get back an uninvoked function that you can call later on like this:</p>
<pre><code>let functions = strings.map(\.uppercased)
print(functions)

for function in functions {
    print(function())
}</code></pre>
<p>In that code, the <code>functions</code> constant contains an array of calls to <code>uppercased()</code> on each string we passed in – <code>functions[0]</code> would be a reference to <code>"HELLO".uppercased()</code>, which we could call directly using <code>functions[0]()</code>.</p>
<p>If two methods have the same name, you can add their argument labels to clarify which overload you mean, like this:</p>
<pre><code>let prefixUpTo = \Array&lt;String&gt;.prefix(upTo:)
let prefixThrough = \Array&lt;String&gt;.prefix(through:)</code></pre>
<p>However, you <em>can't</em> make key paths to methods that are marked either <code>async</code> or <code>throws</code>; it's just not supported.</p>
<h3>Opt-in Strict Memory Safety Checking</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0458-strict-memory-safety.md">SE-0458</a> introduces opt-in support for flagging unsafe Swift code as warnings unless specifically desired, which will make it significantly easier to audit unsafe code usage.</p>
<p><strong>Note:</strong> To be clear, <em>unsafe</em> code is not the same as <em>crashing</em> code – things like force unwraps or reading index -1 in an array will both crash your code but are considered safe because that's expected behavior. <em>Unsafe</em> code is code where you bypass Swift's guardrails to poke around in memory in such a way to cause undefined behavior, and usually if not always includes the word "unsafe" somewhere in the name, e.g. <code>UnsafeRawPointer</code> or <code>unsafelyUnwrapped</code>.</p>
<p>Strict memory safety checking introduces new <code>@safe</code> and <code>@unsafe</code> attributes that mark code as safe or unsafe to use respectively, with <code>@safe</code> being the default –&nbsp;it's only required when you need to override <code>@unsafe</code> in specific circumstances.</p>
<p>When strict memory safety is enabled, and code marked <code>@unsafe</code> must be called with a new <code>unsafe</code> keyword, like this:</p>
<pre><code>let name: String?
unsafe print(name.unsafelyUnwrapped)</code></pre>
<p>Failing to use <code>unsafe</code> will throw up a warning, so you can either adjust the code to use a safe variant or add the <code>unsafe</code> key to acknowledge that the code is unsafe.</p>
<p>This is very similar to the way both <code>try</code> and <code>await</code> work –&nbsp;the compiler knows that certain code will throw, that certain other code is asynchronous, or that certain other code is marked <code>@unsafe</code>, so really these keywords are acknowledgements for other people to see.</p>
<h3>Swift Backtrace API</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0419-backtrace-api.md">SE-0419</a> introduces a new <code>Backtrace</code> struct, which is capable of capturing data about the call stack of our app at any given moment –&nbsp;the exact sequence of function calls leading up to the current point.</p>
<p>By default backtraces are not symbolicated, which means they won't include the names of each function in the call stack, but you can use <code>symbolicated()</code> to get that extra data.</p>
<p>So, as an example we could write a small chain of functions where the last one prints a backtrace:</p>
<pre><code>import Runtime

func functionA() {
    functionB()
}

func functionB() {
    functionC()
}

func functionC() {
    if let frames = try? Backtrace.capture().symbolicated()?.frames {
        print(frames)
    } else {
        print("Failed to get backtrace.")
    }
}

functionA()</code></pre>
<p>That will print exactly which functions were on the call stack – <code>functionC()</code>, <code>functionB()</code>, and <code>functionA()</code> – along with the files and line numbers of each call, which is really helpful for debugging.</p>
<h3>weak let</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0481-weak-let.md">SE-0481</a> introduces the ability to use <code>weak let</code> when declaring properties of a type, complementing the existing support for <code>weak var</code>.</p>
<p><strong>Important:</strong> <code>weak let</code> means that a property cannot be changed after creation, but it can still be <em>destroyed</em>, so you need to use it carefully.</p>
<p>As an example, we could create two classes like this:</p>
<pre><code>final class User: Sendable {
    let id = UUID()
}

final class Session: Sendable {
    weak let user: User?

    init(user: User?) {
        self.user = user
    }
}</code></pre>
<p>We could then make and use them like so:</p>
<pre><code>var user: User? = User()
let session = Session(user: user)
print(session.user?.id ?? "No ID")</code></pre>
<p>Because the <code>user</code> property a <code>weak</code> reference to a class, we can destroy the original and have the property be destroyed too. So, this will print "No ID":</p>
<pre><code>user = nil
print(session.user?.id ?? "No ID")</code></pre>
<p>What we <em>can't</em> do is <em>reassign</em> the <code>user</code> property, which means both of these two would fail to compile if uncommented:</p>
<pre><code>// session.user? = User()
// session.user = nil</code></pre>
<p>Another big advantage of <code>weak let</code> can also be seen in the code above: we can mark both those classes as conforming to <code>Sendable</code>, which would not have been possible using <code>weak var</code>.</p>
<h3>Transactional Observation of Values</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0475-observed.md">SE-0475</a> creates a new <code>Observations</code> struct that is created with a closure, and provides an <code>AsyncSequence</code> that emits new values whenever any any <code>@Observable</code> data changes – it effectively gives us the same power to monitor changes that SwiftUI gets, just in a free-form way.</p>
<p>As an example, we could make a trivial <code>@Observable</code> class for a player with a score:</p>
<pre><code>@Observable
class Player {
    var score = 0
}

let player1 = Player()</code></pre>
<p>We can ask to be notified when that score changes using <code>Observations</code> like this:</p>
<pre><code>let playerScores = Observations { player1.score }</code></pre>
<p>In that code, <code>playerScores</code> is an instance of <code>Observations&lt;Int, Never&gt;</code>, meaning that it emits integers and will never throw errors.</p>
<p>We can then queue up a bunch of example changes, and watch for those happening with a <code>for await</code> loop:</p>
<pre><code>for i in 1...5 {
    Task {
        try? await Task.sleep(for: .seconds(i))
        player1.score += 1
    }
}

for await score in playerScores {
    print(score)
} </code></pre>
<p>That will print six values in total: the initial score, plus increments through 5.</p>
<p>There are a handful of important usage notes you should be aware of when using <code>Observations</code>:</p>
<ol>
<li>It will emit the initial value as well as all future values.</li>
<li>If multiple changes come in at the same time, they might be coalesced into a single value being emitted. For example, if our <code>Task</code> code incremented <code>score</code> twice, the values emitted would go up in 2s.</li>
<li>The <code>AsyncSequence</code> of values being emitted can potentially run forever, so you should put it on a separate task or otherwise handle it carefully.</li>
<li>If you want iteration to stop – to end the loop – you should make the value being observed optional, then set it to nil.</li>
</ol>
<h3>Global-actor isolated conformances</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0470-isolated-conformances.md">SE-0470</a> resolves a small but important concurrency problem by making it possible to restrict a protocol conformance to a specific global actor.</p>
<p>For example, we can now say "this <code>@MainActor</code>-restricted type conforms to <code>Equatable</code> only when it's being used on the main actor, like this:</p>
<pre><code>@MainActor
class User: @MainActor Equatable {
    var id: UUID
    var name: String

    init(name: String) {
        self.id = UUID()
        self.name = name
    }

    static func ==(lhs: User, rhs: User) -&gt; Bool {
        lhs.id == rhs.id
    }
}</code></pre>
<p>Notice the use of <code>@MainActor Equatable</code> –&nbsp;if we had tried to conform without using <code>@MainActor</code> on the protocol, Swift would be free to run the <code>==</code> method on any task, including in the background, which is explicitly disallowed thanks to the whole type being marked <code>@MainActor</code>. As a result, our code would not build.</p>
<h3>Starting tasks synchronously from caller context</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0472-task-start-synchronously-on-caller-context.md">SE-0472</a> introduces a new way to create tasks so they start immediately if possible, rather than the existing behavior that only allows tasks to be queued to run at the next opportunity.</p>
<p>You can see the difference with code like this:</p>
<pre><code>print("Starting")

Task {
    print("In Task")
}

Task.immediate {
    print("In Immediate Task")
}

print("Done")
try await Task.sleep(for: .seconds(0.1))</code></pre>
<p>That creates two unstructured tasks: a regular unstructured task followed by an immediate unstructured task. When it runs, it will print Starting, In Immediate Task, Done, and then finally In Task.</p>
<p>To really understand the distinction between immediate tasks and regular tasks, remember that all potential suspension points in Swift must be marked with <code>await</code>. Creating a regular, non-immediate task doesn't use <code>await</code> because it doesn't mark a suspension point, but it <em>doesn't</em> run immediately because it gets queued up to run at the next available opportunity.</p>
<p>The new ability to create <em>immediate</em> tasks unlocks important new functionality: the code in an immediate task starts executing immediately if it's already on the target executor, perhaps providing important data that a UI control is waiting for, but after that initial immediate response the task can then use <code>await</code> like a regular task and potentially trigger suspension as normal. So, everything in an immediate tasks runs straight away until the first suspension point is reached.</p>
<p>Both <code>Task</code> and <code>Task.immediate</code> are <em>unstructured</em> tasks, however task groups have also been upgraded to support immediate child tasks with <code>addImmediateTask()</code> and <code>addImmediateTaskUnlessCancelled()</code>.</p>
<h3>Run nonisolated async functions on the caller's actor by default</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0461-async-function-isolation.md">SE-0461</a> adjusts the way nonisolated async functions are called so that they run on the same actor as their caller. This sounds like a really abstract change, but it is important so I would recommend you spend the time to understand what's changing and why.</p>
<p>As an example, here's a simple struct that knows how to download and decode an array of <code>Double</code> values that represents various temperatures:</p>
<pre><code>struct Measurements {
    func fetchLatest() async throws -&gt; [Double] {
        let url = URL(string: "https://hws.dev/readings.json")!
        let (data, _) = try await URLSession.shared.data(from: url)
        return try JSONDecoder().decode([Double].self, from: data)
    }
}</code></pre>
<p>That isn't isolated to any particular actor, so it can run its code anywhere.</p>
<p>Next, we could use that with another struct called <code>WeatherStation</code>, which will download all the readings and return their mean average. This time, though we'll mark the struct as being isolated to the main actor:</p>
<pre><code>@MainActor
struct WeatherStation {
    let measurements = Measurements()

    func getAverageTemperature() async throws -&gt; Double {
        let readings = try await measurements.fetchLatest()
        let average = readings.reduce(0, +) / Double(readings.count)
        return average
    }
}

let station = WeatherStation()
try await print(station.getAverageTemperature())</code></pre>
<p>So, we have one struct that is nonisolated, and another that <em>is</em> isolated, and this demonstrates the change perfectly: before Swift 6.2 the call to <code>measurements.fetchLatest()</code> will not run on the main actor, but from Swift 6.2 and later it <em>will</em>.</p>
<p>The old behavior caused some confusion, not least because <code>measurements</code> is a main actor-isolated property in <code>WeatherStation</code>, and the call to <code>measurements.fetchLatest()</code> takes place in the main actor-isolated <code>getAverageTemperature()</code> method.</p>
<p>That old behavior wasn't an accident – <a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0338-clarify-execution-non-actor-async.md">SE-0338</a> from Swift 5.7 specifically states that async functions that aren't isolated to a particular actor "do not run on any actor's executor."</p>
<p>The new behavior introduced by SE-0461 means that nonisolated async functions will now run on the same actor as their caller unless you say otherwise. In the code above, that means the call to <code>measurements.fetchLatest()</code> will run on the main actor because <code>getAverageTemperature()</code> does.</p>
<p>If you want the old behavior to return –&nbsp;if you wanted <code>fetchLatest()</code> to switch away from the caller's actor automatically – you would need to mark it with the new <code>@concurrent</code> attribute, like this: <code>@concurrent func fetchLatest()…</code>.</p>
<h3>Isolated synchronous deinit</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0371-isolated-synchronous-deinit.md">SE-0371</a> introduces the ability to mark the deinitializers of actor-isolated classes as being isolated, which allows them to safely access data elsewhere in the class.</p>
<p>For example, this class is isolated to the main actor, and I've marked its <code>deinit</code> as being isolated so that it can safely call <code>cleanUp()</code>:</p>
<pre><code>@MainActor
class DataController {
    func cleanUp() {
        // free up memory
    }

    isolated deinit {
        cleanUp()
    }
}</code></pre>
<p>Without that <code>isolated</code> keyword in there, the deinitializer wouldn't be isolated to the main actor –&nbsp;that's just not how global actors work. <em>With</em> it there, your code will move to the actor's executor before running the code, so it's all safe.</p>
<p>This will be particularly useful for times when your deinitializer needs to access non-<code>Sendable</code> state belonging to a class. For example, we might have a <code>User</code> class like this one:</p>
<pre><code>class User {
    var isLoggedIn = false
}</code></pre>
<p>We can then wrap that in a <code>Session</code> class that runs on the main actor, which automatically marks the user being logged in or out as the session is created and destroyed:</p>
<pre><code>@MainActor
class Session {
    let user: User

    init(user: User) {
        self.user = user
        user.isLoggedIn = true
    }

    isolated deinit {
        user.isLoggedIn = false
    }
}</code></pre>
<p>Again, that <code>isolated</code> keyword is required to make the code work – without that the deinitializer would run without being isolated to the main actor, but it would try to access the <code>user</code> property that <em>is</em> isolated to the main actor, causing a compile error.</p>
<h3>Task Priority Escalation APIs</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0462-task-priority-escalation-apis.md">SE-0462</a> introduces the ability for tasks to detect when their priority has been escalated, and also for us to manually escalate task priority if needed.</p>
<p>To watch for priority escalation, use the <code>withTaskPriorityEscalationHandler()</code> function like this:</p>
<pre><code>let newsFetcher = Task(priority: .medium) {
    try await withTaskPriorityEscalationHandler {
        let url = URL(string: "https://hws.dev/messages.json")!
        let (data, _) = try await URLSession.shared.data(from: url)
        return data
    } onPriorityEscalated: { oldPriority, newPriority in
        print("Priority has been escalated to \(newPriority)")
    }
}</code></pre>
<p>As you can see, that gives us both the old and new task priorities, and it's up to us to respond to the change however we want. If you want to use that opportunity to escalate the priority of other tasks, you should use the new <code>escalatePriority(to:)</code> method like this:</p>
<pre><code>newsFetcher.escalatePriority(to: .high)</code></pre>
<p>Because there are several task priorities available to us, it's possible your <code>onPriorityEscalated</code> code will be triggered multiple times –&nbsp;your priority might start at low then move to medium, then move to high, for example. However, task priority can only ever be <em>raised</em>, never lowered.</p>
<p><strong>Note:</strong> Task priority escalation usually happens automatically, such as when a high-priority task finds itself waiting on the result of a low-priority task – Swift will automatically raise the priority of the low-priority task so it’s able to complete faster. Although this API gives us extra control, it's still best to let priority escalation happen automatically where possible.</p>
<h3>Task Naming</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0469-task-names.md">SE-0469</a> introduces a useful change to the way we create tasks and child tasks: we can now give them <em>names</em>, which is ideal for debugging when one particular task goes rogue.</p>
<p>The API here is simple: when using <code>Task.init()</code> and <code>Task.detached()</code> to create new tasks, or using <code>addTask()</code> and <code>addTaskUnlessCancelled()</code> to create child tasks in a task group, you can now pass an optional <code>name</code> parameter string to identify the task uniquely. These name strings can be hard-coded or use string interpolation; either one works.</p>
<p>In its simplest form, the new API looks like this:</p>
<pre><code>let task = Task(name: "MyTask") {
    print("Current task name: \(Task.name ?? "Unknown")")
}</code></pre>
<p>To show you a more real-world example, we might have a <code>NewsStory</code> struct that knows how to load some basic information about a news article:</p>
<pre><code>struct NewsStory: Decodable, Identifiable {
    let id: Int
    let title: String
    let strap: String
    let url: URL
}</code></pre>
<p>Now we could use a task group to fetch several news story sources and combine them into a single array, while also printing a log message if any child task hits a problem:</p>
<pre><code>let stories = await withTaskGroup { group in
    for i in 1...5 {
        // Give each child task a unique name
        // for easier identification.
        group.addTask(name: "Stories \(i)") {
            do {
                let url = URL(string: "https://hws.dev/news-\(i).json")!
                let (data, _) = try await URLSession.shared.data(from: url)
                return try JSONDecoder().decode([NewsStory].self, from: data)
            } catch {
                // This child failed – print a log
                // message with its name then return
                // an empty array.
                print("Loading \(Task.name ?? "Unknown") failed.")
                return []
            }
        }
    }

    var allStories = [NewsStory]()

    for await stories in group {
        allStories.append(contentsOf: stories)
    }

    return allStories.sorted { $0.id &gt; $1.id }
}

print(stories)</code></pre>
<h3>InlineArray, a fixed-size array</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0453-vector.md">SE-0453</a> introduces a new array type called <code>InlineArray</code> that stores an exact number of elements, combining the fixed-size nature of tuples with the natural subscripting of arrays, while adding in some welcome performance improvements at the same time.</p>
<p>Creating an <code>InlineArray</code> can be done with an explicit size or type, or you can let type inference figure out both by the usage. This is made possible by a separate Swift 6.2 improvement, <a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0452-integer-generic-parameters.md">SE-0452</a>, which adds integer generic parameters.</p>
<p>So, we can create an inline array of names by specifying both the size and element type:</p>
<pre><code>var names1: InlineArray&lt;4, String&gt; = ["Moon", "Mercury", "Mars", "Tuxedo Mask"]</code></pre>
<p>Or you can let Swift figure it out by passing in exactly four strings:</p>
<pre><code>var names2: InlineArray = ["Moon", "Mercury", "Mars", "Tuxedo Mask"]</code></pre>
<p>Either way, these arrays are fixed in size, so they don't have <code>append()</code> or remove(at:)` methods. However, you <em>can</em> still read and write values at a specific index, like this:</p>
<pre><code>names1[2] = "Jupiter"</code></pre>
<p><code>InlineArray</code> does <em>not</em> conform to either <code>Sequence</code> or <code>Collection</code>, so if you want to loop over their values you should use the <code>indices</code> property along with subscripting like this:</p>
<pre><code>for i in names1.indices {
    print("Hello, \(names1[i])!")
}</code></pre>
<p><strong>Note:</strong> Another Swift Evolution proposal, <a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0483-inline-array-sugar.md">SE-0483</a>, is currently being discussed, and if it is approved would add an <code>InlineArray</code> literal syntax in the style <code>var names: [5 x String] = .init(repeating: "Anonymous")</code> to mean "exactly five strings in this array." The feedback so far has been broadly negative, so it might be returned for revision.</p>
<h3>Regex lookbehind assertions</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0448-regex-lookbehind-assertions.md">SE-0448</a> expands Swift's regular expression support to include <em>lookbehind assertions</em>, which allow us to check if a specific pattern appears immediately before the current position in the string, <em>without</em> including it in the matched text.</p>
<p>For example, we might want to match all prices inside a string by looking for any numbers that come after a dollar sign, <em>without</em> matching the dollar sign itself:</p>
<pre><code>let string = "Buying a jacket costs $100, and buying shoes costs $59.99."
let regex = /(?&lt;=\$)\d+(?:\.\d{2})?/

for match in string.matches(of: regex) {
    print(match.output)
}</code></pre>
<p>Swift's regular expression system is remarkably powerful, and it's great to see it continue to evolve. Maybe <code>?R</code> recursion will come next…</p>
<h3>Swift Testing: Exit Tests</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/testing/0008-exit-tests.md">ST-0008</a> introduces a testing feature that has been in demand for as long as I can remember: the ability to test code that results in a critical failure that terminated the app.</p>
<p>For example, code like this is going to fail <em>hard</em> if we call it with a <code>sides</code> value of 0:</p>
<pre><code>struct Dice {
    func roll(sides: Int) -&gt; Int {
        precondition(sides &gt; 0)
        return Int.random(in: 1...sides)
    }
}</code></pre>
<p>Running <code>roll(sides: 0)</code> will literally crash the app, which in turn will cause tests to collapse around it. </p>
<p>From Swift 6.2 and later we can use <code>#expect(processExitsWith:)</code> to look for and catch such critical failures, allowing us to check they happened rather than causing our test run to fail.</p>
<p>Here's how it looks in code:</p>
<pre><code>@Test func invalidDiceRollsFail() async throws {
    let dice = Dice()

    await #expect(processExitsWith: .failure) {
        let _ = dice.roll(sides: 0)
    }
}</code></pre>
<p>Notice how it must be executed using <code>await</code> – behind the scenes this starts a dedicated process for that test, then suspends the test until that process completes and can be evaluated.</p>
<p>This improvement opens up a range of things that were hard if not impossible to test before, including a range of hacks designed to test things like <code>fatalError()</code> get called at specific times.</p>
<h3>Swift Testing: Attachments</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/testing/0009-attachments.md">ST-0009</a> adds the ability to add attachments to tests, so that if a test fails you can attach a debug log or generated data files directly to the failing test.</p>
<p>As an example, we could define a simple <code>Character</code> struct such as this one:</p>
<pre><code>import Foundation
import Testing

struct Character: Codable, Attachable {
    var id = UUID()
    var name: String
}</code></pre>
<p>That conforms to the new <code>Attachable</code> protocol, and because it also imports Foundation <em>and</em> conforms to <code>Codable</code>, Swift Testing can automatically encode instances of our struct to be attached to tests.</p>
<p>We can then use that in a trivial function in our production code:</p>
<pre><code>func makeCharacter() -&gt; Character {
    Character(name: "Ram")
}</code></pre>
<p>When it comes to writing a test, we'll make sure the default name matches the value we expect, but we'll also make whatever character we got back from <code>makeCharacter()</code> an attachment with the label "Character":</p>
<pre><code>@Test func defaultCharacterNameIsCorrect() {
    let result = makeCharacter()
    #expect(result.name == "Rem")

    Attachment.record(result, named: "Character")
}</code></pre>
<p>When that test runs, Xcode should in theory automatically surface those attachments for us as part of the test results, although we'll need to wait for an Xcode update in order for that to happen.</p>
<p>Out of the box, Swift Testing provides support for attaching <code>String</code>, <code>Data</code>, and anything that conforms to <code>Encodable</code>. It does <em>not</em> support (at least not in Swift 6.2) attaching images, which is an annoyance –&nbsp;it would be great to attach a SwiftUI image to a failing test, for example.</p>
<p><strong>Note:</strong> Unlike the XCTest equivalent, Swift Testing's attachments do not support lifetime controls in Swift 6.2. If this feature gets added in a future release, it would allow us to automatically delete attachments if a test succeeds, which helps keep tests lightweight.</p>
<h3>Swift Testing: Public API to evaluate ConditionTrait</h3>
<p><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/testing/0010-evaluate-condition.md">ST-0010</a> introduces a new <code>evaluate()</code> method to test condition traits, meaning that it's possible to write non-test functions that evaluate the same conditions as test functions.</p>
<p>It's still possible to use condition traits in the <code>@Test</code> macro, like this:</p>
<pre><code>import Testing

struct TestManager {
    static let inSmokeTestMode = true
}

@Test(.disabled(if: TestManager.inSmokeTestMode))
func runLongComplexTest() {
    // test code here
}</code></pre>
<p>In Swift 6.2 and later you can now evaluate those same conditions <em>outside</em> of tests by creating a condition trait then calling its <code>evaluate()</code> method:</p>
<pre><code>func checkForSmokeTest() async throws {
    let trait = ConditionTrait.disabled(if: TestManager.inSmokeTestMode)

    if try await trait.evaluate() {
        print("We're in smoke test mode")
    } else {
        print("Run all tests.")
    }
}</code></pre>
<h3>And there's more!</h3>
<p>If all the above wasn't enough for you, even more changes are likely also be arriving with Swift 6.2, including:</p>
<ul>
<li><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0446-non-escapable.md">SE-0446</a> introduces non-escapable types that cannot outlive the scope of the function where they are created, so they can't be returned or assigned elsewhere.</li>
<li><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0447-span-access-shared-contiguous-storage.md">SE-0447</a> builds upon the non-escapable types proposal to add a new <code>Span</code> struct designed to make it easier to safely access contiguous memory.</li>
<li><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0457-duration-attosecond-represenation.md">SE-0457</a> upgrades the <code>Duration</code> type to expose the total number of attoseconds (one quintillionth of a second) as an <code>Int128</code>.</li>
<li><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0463-sendable-completion-handlers.md">SE-0463</a> changes the rules for Objective-C imports so that completion handler parameters are considered <code>@Sendable</code> unless otherwise request.</li>
<li><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0473-clock-epochs.md">SE-0473</a> adds properties to <code>SuspendingClock</code> and <code>ContinuousClock</code> to provide the exact start point for those clocks – the time they consider to be zero.</li>
<li><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0474-yielding-accessors.md">SE-0474</a> adds yielding accessors to allow values to be read and written without requiring copies to be made.</li>
<li><a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0480-swiftpm-warning-control.md">SE-0480</a> builds on the diagnostic groups work done in Swift 6.1 so that we can set warning and error levels directly inside Swift packages.</li>
</ul>
<p>There's one more I want to mention briefly, and although it's hard to provide meaningful examples that are easy to understand, I still think this proposal deserves an extra mention because it's just so darned clever. It's <a rel="nofollow noopener" target="_blank" href="https://github.com/swiftlang/swift-evolution/blob/main/proposals/0476-abi-attr.md">SE-0476</a>, which introduces a new <code>@abi</code> attribute that makes it easier for ABI-stable library authors to make changes to their libraries without breaking things. This might be something small such as changing from <code>rethrows</code> to typed throws, or, in the words of the evolution proposal, "to rename an API whose name is felt to be catastrophically confusing."</p>
<p>This change is going to be hugely popular with library authors who made small mistakes they wanted to correct afterwards, <em>without</em> breaking code that relies on old behavior.</p>
<p>So, again Swift 6.2 is another gigantic collection of additions and improvements to the language –&nbsp;new features, yes, but also a range of refinements that will continue to help smooth over adoption of Swift concurrency. </p>
<p>As usual, not all features will apply to every project, but I think certainly at least one or two of these changes will grow to become standard practice, and it might not even be the ones you expect –&nbsp;keep an eye on <code>InlineArray</code>!</p>








<p><a href="https://www.hackingwithswift.com/sponsor">Sponsor Hacking with Swift and reach the world's largest Swift community!</a></p>




                        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why 536 was 'the worst year to be alive' (2018) (109 pts)]]></title>
            <link>https://www.science.org/content/article/why-536-was-worst-year-be-alive</link>
            <guid>43940033</guid>
            <pubDate>Fri, 09 May 2025 19:07:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/why-536-was-worst-year-be-alive">https://www.science.org/content/article/why-536-was-worst-year-be-alive</a>, See on <a href="https://news.ycombinator.com/item?id=43940033">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/why-536-was-worst-year-be-alive: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Odin, a Pragmatic C Alternative with a Go Flavour (115 pts)]]></title>
            <link>http://bitshifters.cc/2025/05/04/odin.html</link>
            <guid>43939520</guid>
            <pubDate>Fri, 09 May 2025 18:01:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://bitshifters.cc/2025/05/04/odin.html">http://bitshifters.cc/2025/05/04/odin.html</a>, See on <a href="https://news.ycombinator.com/item?id=43939520">Hacker News</a></p>
<div id="readability-page-1" class="page"><div aria-label="Content">
        <article itemscope="" itemtype="http://schema.org/BlogPosting">

  

  <div itemprop="articleBody">
    <p>Odin is a general-purpose systems programming language authored by Bill “gingerBill” Hall.
Designed as a modern alternative to C, Odin emphasizes simplicity, performance, and readability
without sacrificing control over low-level details.</p>

<p>The website says it’s “data-oriented”, and features such as SOA (structs-of-arrays) and implicit zero initialization tie into that. Despite this focus, the language surprisingly has dynamic
maps and arrays built into the language itself. While the memory is still manually managed,
it’s uncommon to see such built-ins.</p>

<p>This perhaps sets the tone of Odin: it tries to be ergonomic and easy to write by offering a lot out of the box. Odin also comes with “vendor”, containing bindings to a wide variety of popular libraries. This makes the language very easy to get into.</p>

<h2 id="design-philosophy">Design Philosophy</h2>

<p>Odin focuses on practical solutions to real-world programming challenges—in other words, it favours pragmatism over idealism (I’ll return to this when I later discuss Zig). Rather than introducing complex features, Odin focuses on code that is simple and clean to read and reason about. This is the polar opposite of Zig’s embracing of metaprogramming for as much as possible.</p>

<p>Odin also has a fairly old-fashioned view of types. The current trend is to make programming languages increasingly more complex so that they can describe more and more types in the language itself. Odin instead harkens back to older languages where built-in types flourished. Consequently, Odin does not just offer the aforementioned hashmaps and dynamic arrays, but also numerical types
such as complex numbers, vectors, matrices, and even quaternions. This makes up for its rejection of operator overloading by a wide margin. It’s not a coincidence that the flagship app to demonstrate Odin’s capabilities, EmberGen, is a math- and graphics-heavy tool.</p>

<h2 id="a-quick-look-at-the-syntax">A quick look at the syntax</h2>

<p>Odin has a fairly straightforward syntax for a beginner. The fact that there is no excessive nagging about mutability or constness makes things just work as expected.</p>

<p>The declaration is otherwise very inspired by Jai and fairly minimal. Odin’s concession to modern fashion shows up in its removal of the traditional <code>;</code>.</p>

<p>Odin produces code anyone used to C or other low level languages can read at a glance. Here is a short “move the dot around the screen” using Raylib:</p>

<pre><code>package test

import rl "vendor:raylib"

main :: proc() 
{
    rl.InitWindow(1280, 720, "Testing")
    pos : rl.Vector2 = { 640, 320 }
		
    for !rl.WindowShouldClose() {
        rl.BeginDrawing()
        rl.ClearBackground(rl.BLUE)
        rl.DrawRectangleV(pos, {32, 32}, rl.GREEN)
        
        if rl.IsKeyDown(.LEFT) {
            pos.x -= 400 * rl.GetFrameTime()
        }
        if rl.IsKeyDown(.RIGHT) {
            pos.x += 400 * rl.GetFrameTime()
        }
        if rl.IsKeyDown(.UP) {
            pos.y -= 400 * rl.GetFrameTime()
        }
        if rl.IsKeyDown(.DOWN) {
            pos.y += 400 * rl.GetFrameTime()
        }
        rl.EndDrawing()
    }
    rl.CloseWindow()
}
</code></pre>

<p>All in all, Odin’s syntax mostly feels familiar, even with changes to things like function declaration syntax. There are no deep quirks; the changes are superficial.</p>

<p>This conservative streak in Odin is echoed by others. Dale Weiler, at JangaFX, was an early adopter. He wrote on his blog:</p>

<p>All in all, Odin’s syntax mostly feel familiar, even with changes to things like function declaration syntax. There are no deep quirks, the changes are superficial.</p>

<blockquote>
  <p><em>“Odin is a systems programming language that is more conservative in its design than other newer programming languages such as Rust, Zig, and Carbon. The design ideology around Odin is to provide some greatly needed quality of life improvements over the lingua-franca of systems languages: C, while still staying as simple as C.”</em> <a href="https://graphitemaster.github.io/odin_review/">link</a></p>
</blockquote>

<p>It’s clear that Odin has pulled off the trick of feeling familiar even if the syntax is much different from C.</p>

<h2 id="error-handling">Error handling</h2>

<p>Odin’s most controversial choice is probably the error handling, which uses multiple returns in the fashion of Go. And while Odin offers better ergonomics with <code>or_else</code> and <code>or_return</code>, it can feel clunky compared to other solutions.</p>

<p>As far as first impressions go, this choice is probably not ideal. It seems like a common thing to criticize. On the other hand, this conceptual simplicity goes hand in hand with the straightforwardness that is the trademark of Odin’s design.</p>

<h2 id="the-joy-of-programming">The Joy of Programming</h2>

<p>Odin shares the “joy of programming” slogan with Jai, but the appreciation seems to be real. To quote one user:</p>

<blockquote>
  <p><em>“Odin has renewed my joy of programming. Built-in bounds checking, slices, distinct typing, no undefined behavior, consistent semantics between optimization modes, minimal implicit type conversions, context system, and the standard library tracking allocator combine together to eliminate the majority of memory bugs I found use for sanitizers in C/C++.”</em> <a href="https://news.ycombinator.com/item?id=32799499">link</a></p>
</blockquote>

<p>Another user writes:</p>

<blockquote>
  <p>*“[…] moving from C to Odin was quite a pleasant and rather easy experience. The languages are rather similar but Odin takes the painful bits away, letting you to focus on the problem instead of wondering why something is going weirdly wrong again.” <a href="https://akselmo.dev/posts/moving-from-c-to-odin/">link</a></p>
</blockquote>

<p>Just taking the language for a spin, it’s friendly and does what you think. It’s essentially an approachable language that just feels nice to use.</p>

<h2 id="comparisons">Comparisons</h2>

<h3 id="jai">Jai</h3>

<p>Odin and Jai share syntactic similarities, but their approaches differ. Where Jai emphasizes compile-time execution and metaprogramming, offering powerful abstractions, Odin instead focuses
on simplicity and lots of features out of the box.</p>

<p>While on a syntactic level Odin clearly took inspiration from Jai, the two languages have evolved very differently. Jonathan Blow stated in a video that Jai has grown more complex than he planned.</p>

<p>Odin, on the other hand, is clearly a language that feels simple to learn and use.</p>

<h3 id="zig">Zig</h3>

<p>Both Odin and Zig aim to modernize systems programming, but they clearly diverge in philosophy. Zig offers extensive compile-time metaprogramming (although not to the level of Jai), whereas Odin only retains the necessary functionality needed for conditional compilation.</p>

<p>Odin, like Jai, has runtime reflection. Zig’s reflection, on the other hand, is generally limited to compile time. In practice, this means Zig relies on a lot of metaprogramming to do things like serialization through type inspection, whereas in Odin it’s available at runtime, so the code is magnitudes easier to understand.</p>

<p>The biggest difference is its attitude toward the programmer’s experience. Odin tries to be simple and make it fun and pleasant to program in; it has a straightforward, no-fuss syntax.</p>

<p>Zig, on the other hand, cares little about the user experience and prefers verbose explicitness over convenient abstractions.</p>

<p>A developer compared the two:</p>

<blockquote>
  <p><em>“Zig is very verbose… Odin in comparison is very minimal in terms of typing while communicating basically the same info.”</em> <a href="https://forum.odin-lang.org/t/comparing-zig-with-odin/740/2">link</a></p>
</blockquote>

<h2 id="criticisms">Criticisms</h2>

<p>While Odin has been in use by projects for quite a while, the official documentation is still lacking in depth and examples. On top of this, it seems that the primary community platform is Discord, which may not be accessible to all.</p>

<p>There have been people criticizing the lack of more extensive metaprogramming. But with access to type information at runtime and a fairly wide array of built-ins, it is not clear whether this has any merit.</p>

<p>For example, both Zig and Jai offer support for struct-of-arrays through metaprogramming. In Odin, however, this feature is built into the language.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Odin presents a compelling option for developers seeking a modern, efficient, and readable systems programming language. That it is successful in graphics-intensive applications like EmberGen demonstrates its robustness and performance. While it has areas for growth—particularly in documentation and community accessibility—Odin’s pragmatic design and focus on developer experience make it a worthy alternative to C for contemporary systems programming needs.</p>

  </div>
</article>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Man 'Disappeared' by ICE Was on El Salvador Flight Manifest, Hacked Data Shows (220 pts)]]></title>
            <link>https://www.404media.co/man-disappeared-by-ice-was-on-el-salvador-flight-manifest-hacked-data-shows/</link>
            <guid>43939006</guid>
            <pubDate>Fri, 09 May 2025 17:06:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.404media.co/man-disappeared-by-ice-was-on-el-salvador-flight-manifest-hacked-data-shows/">https://www.404media.co/man-disappeared-by-ice-was-on-el-salvador-flight-manifest-hacked-data-shows/</a>, See on <a href="https://news.ycombinator.com/item?id=43939006">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  
<!--kg-card-begin: html-->

<!--kg-card-end: html-->
<p>Ricardo Prada Vásquez, a Venezuelan man whose family says <a href="https://www.nytimes.com/2025/04/22/us/venezuela-immigrant-disappear-deport-ice.html?ref=404media.co"><u>he was “disappeared”</u></a> and who wasn’t included on a <a href="https://www.cbsnews.com/news/venezuelans-deported-el-salvador-names/?ref=404media.co"><u>previously leaked government list of people</u></a> sent to a notorious mega prison in El Salvador, was included on a private airline’s flight manifest to the country, according to hacked airline data obtained and analyzed by 404 Media.&nbsp;</p><p>That means a private charter flight company might have more accurate information on where people are being deported than the government, experts say, and raises questions about the process being used to deport people.&nbsp;</p><p>While the government initially declined to say where Prada had been sent before <a href="https://x.com/DHSgov/status/1914776912150380560?ref=404media.co"><u>eventually admitting he was sent to El Salvador</u></a>, the man was on a manifest for a March 15 flight held by GlobalX, one of ICE’s primary charter companies. The news also raises questions about whether other people whose families are unaware of their whereabouts may be in El Salvador too.&nbsp;</p><div><p>💡</p><p><b><strong>Do you know the name of anyone else who has been deported but their whereabouts are unknown? I would love to hear from you. Using a non-work device, you can message me securely on Signal at joseph.404 or send me an email at joseph@404media.co.</strong></b></p></div><p>“There are so many levels at which this concerns me. One is they clearly did not take enough care in this to even make sure they had the right lists of who they were removing, and who they were not sending to a prison that is a black hole in El Salvador,” Michelle Brané, executive director of Together and Free, a group that has been working with families of deported people, including Prada’s, told 404 Media. “They weren't even keeping accurate records of who they were sending there. What that says about how much due process or how much accuracy there is in the rest of the assessments of whether these people should be on those planes at all follows very closely behind that.”</p>
</div><div>
  <div>
    <h2>This post is for paid members only</h2>
    <p>Become a paid member for unlimited ad-free access to articles, bonus podcast content, and more.</p>
    <p><a href="https://www.404media.co/membership/">Subscribe</a>
  </p></div>
  <div>
    <h2>Sign up for free access to this post</h2>
    <p>Free members get access to posts like this one along with an email round-up of our week's stories.</p>
    <p><a href="https://www.404media.co/signup/">Subscribe</a>
  </p></div>
  <p>Already have an account? <a href="https://www.404media.co/signin/" data-portal="signin">Sign in</a></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Launch HN: Nao Labs (YC X25) – Cursor for Data (146 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43938607</link>
            <guid>43938607</guid>
            <pubDate>Fri, 09 May 2025 16:28:28 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43938607">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><td colspan="2"></td><td><div><p>Hey HN, we’re Claire and Christophe from nao Labs (<a href="https://getnao.io/">https://getnao.io/</a>). We just launched nao, an AI code editor to work with data: a local editor, directly connected with your data warehouse, and powered by an AI copilot with built-in context of your data schema and data-specific tools.</p><p>See our demo here: <a href="https://www.youtube.com/watch?v=QmG6X-5ftZU" rel="nofollow">https://www.youtube.com/watch?v=QmG6X-5ftZU</a></p><p>Writing code with LLMs is the new normal in software engineering. But not when it comes to manipulating data. Tools like Cursor don’t interact natively with data warehouses — they autocomplete SQL blindly, not knowing your data schema. Most of us are still juggling multiple tools: writing code in Cursor, checking results in the warehouse console, troubleshooting with an observability tool, and verifying in BI tool no dashboard broke.</p><p>When you want to write code on data with LLMs, you don’t care much about the code, you care about the data output. You need a tool that helps you write code relevant for your data, lets you visualize its impact on the output, and quality check it for you.</p><p>Christophe and I have each spent 10 years in data — Christophe was a data engineer and has built data platforms for dozens of orgs, I was head of data and helped data teams building their analytics &amp; data products. We’ve seen how the business asks you to ship data fast, while you’re here wondering if this small line of code will mistakenly multiply the revenue on your CEO dashboard by x5. Which leaves you 2 choices: test extensively and ship slow. Not test and ship fast. That’s why we wanted to create nao: a tool really adapted to our data work, that would allow data teams to ship at business pace.</p><p>nao is a fork of VS Code, with built-in connectors for BigQuery, Snowflake, and Postgres. We built our own AI copilot and tab system, gave them a RAG of your data warehouse schemas and of your codebase. We added a set of agent tools to query data, compare data, understand data tools like dbt, assess the downstream impact of code in your whole data lineage.</p><p>The AI tab and the AI agent write straight away code matching your schema, may it be for SQL, python, yaml. It shows you code diffs and data diffs side by side, to visualize what your change did to the data output. And you can leave the data quality checks to the agent: detect missing or duplicated values, outliers, anticipate breaking changes downstream or compare dev and production data differences.</p><p>Data teams usually use nao for writing SQL pipelines, often with dbt. It helps them create data models, document them, test them, while making sure they’re not breaking data lineage and figures in the BI. In run mode, they also use it to run some analytics, and identify data quality bugs in production. For less technical profiles, it’s also a great help to strengthen their code best practices. For large teams, it ensures that the code &amp; metrics remain well factorized and consistent.</p><p>Software engineers use nao for the database exploration part: write SQL queries with nao tab, explore data schema with the agent, and write DDL.</p><p>Question we often get is: why not just use Cursor and MCPs? Cursor has to trigger many MCP calls to get full context of the data, while nao has it always available in one RAG. MCPs stay in a very enclosed part of Cursor: they don’t bring data context to the tab. And they don’t make the UI more adapted to data workflows. Besides, nao comes as pre-packaged for data teams: they don’t have to set up extensions, install and authenticate in MCPs, build CI/CD pipelines. Which means even non-technical data teams can have a great developer experience.</p><p>Our long-term goal is to become the best place to work with data. We want to fine-tune our own models for SQL, Python and YAML to give the most relevant code suggestions for data. We want to enlarge our comprehension of all data stack tools, to become the only agnostic editor for any of your data workflow.</p><p>You can try it here: <a href="https://sunshine.getnao.io/releases/">https://sunshine.getnao.io/releases/</a> - download nao, sign up for free and start using it. Just for HN Launch, you can create a temporary account with a simple username if you’d prefer not to use your email. For now, we only have Mac version but Linux and Windows are coming.</p><p>We’d love to hear your feedback — and get your thoughts on how we can improve even further the data dev experience!</p></div></td></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Past, present, and future of Sorbet type syntax (127 pts)]]></title>
            <link>https://blog.jez.io/history-of-sorbet-syntax/</link>
            <guid>43938400</guid>
            <pubDate>Fri, 09 May 2025 16:09:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.jez.io/history-of-sorbet-syntax/">https://blog.jez.io/history-of-sorbet-syntax/</a>, See on <a href="https://news.ycombinator.com/item?id=43938400">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Here’s the elephant in the room: Sorbet’s syntax is ugly.</p>
<p>When people start complaining about Sorbet’s syntax, I have to spend a lot of time deflecting or even defending it, which is annoying: I’m right there with you, the syntax is ugly! It’s verbose. It’s foreign. It doesn’t resemble any typed language, <strong>nor</strong> does it complement Ruby’s unique style.</p>
<p>My counter is that when it comes to language design, <strong>semantics</strong>—what the types mean—are easily 10 times more important than <strong>syntax</strong>. This is <a href="https://www.andrew.cmu.edu/course/15-312/phil.html">what I was taught</a>; it’s also <a href="https://stripe.com/blog/sorbet-stripes-type-checker-for-ruby">what I’ve seen</a>. <a href="https://gwern.net/doc/cs/algorithm/1985-naur.pdf">Programming is an act of theory building</a>, and when you sit down to write <em>code</em>, you’re trying to codify how you’re thinking about a problem as much as instructions for the machine. Types become a tool to help get the semantics from your head into the codebase. That’s a lossy process, and types fill a role kind of like “error correcting codes” for brain dumping.</p>
<p>So I try <em>very</em> hard to not get sucked into debates about syntax—in no small part because from where I stand, tons of the people complaining about the syntax <em>also</em> don’t like the semantics, they just don’t know how to say it. And not only do they not like Sorbet’s semantics, they don’t like <strong>statically typed</strong> semantics in the first place! Even if I changed their mind on Sorbet’s syntax, there’s basically no way I’ll change their mind on the idea of static types. So why bother? They’re not prospective Sorbet users no matter what I say.</p>
<p>But in thinking that way, I ignore the cohort of committed, enthusiastic Sorbet users who actually love the semantics but tolerate the syntax.</p>
<p>So that’s who this talk is for: I’m not here to convince you to start liking typing or to start using Sorbet! Instead, I want to lay everything out there, so that the people who are motivated by syntax more than me have a view of problem space and can channel their complaints into action.</p>
<p>We’re going to cover a lot of things:</p>
<ul>
<li>The historical context at Stripe that gave rise to Sorbet</li>
<li>The goals and constraints which sprung from that historical context</li>
<li>Various problems we discovered over time, forcing redesigns of the type syntax</li>
<li>Potential future changes to the syntax, ranging from “yeah we should probably have done that yesterday” to “that sounds like it’ll never happen… but wouldn’t it be cool?”</li>
</ul>
<h2 id="the-before-times">The before times</h2>
<p>Before we get too much further, I’ve forgotten to introduce myself: my name is Jake, and I’ve been working full time on Sorbet for almost 7 years.</p>
<figure>
<img src="https://blog.jez.io/assets/img/jez-type-safety.png" alt=":jez-type-safety:">

</figure>
<p>I started at Stripe a month before the Ruby type checker project kicked off, and I joined the team 1 year later. Most of what I have to say here is from direct experience, from chatting with people over lunch, or from combing old emails. That means some of the things that happened before 2017 are a little hazy, but I’m going to do my best.</p>
<p>In mid 2017 (when I joined, and when Sorbet was starting) there were about 750 people at Stripe, of whom about 300 were engineers.</p>
<p>Every 6 months (to this day), Stripe runs a survey of all engineers at the company, asking them about about their productivity. In the first survey of 2017, engineers were asked to pick priorities for the Developer Productivity team by choosing three things from this list:</p>
<ol type="1">
<li>Better technical documentation</li>
<li>Static type checking for Ruby</li>
<li>Unattended deploys</li>
<li>CI flakiness on feature branch builds</li>
<li>CI flakiness on master builds</li>
<li>Async programming primitives and libraries</li>
<li>Seamlessly start multiple services in development</li>
<li>GUI for running database migrations</li>
</ol>
<p>It’s in order by their responses: the top two were “better docs” and “static type checking.” Also, when looking at the free-form responses, the number of complaints mentioning themes of “code organization, interfaces, and modularity” had doubled from 6 months prior. Test speed, while substantially improved from the prior survey, was still a widespread call out.</p>
<p>One of those open-ended questions was: “What are the top 1-2 things we could do to make you more productive?” It got answers like these:</p>
<blockquote>
<p>mono-repoing all the things; better, more intuitive code/documentation (clearer interfaces, <strong>static typing</strong>, stronger assurances from linting)</p>
</blockquote>
<blockquote>
<p><strong>static types</strong> / less magic in [Stripe’s Ruby codebase]</p>
</blockquote>
<blockquote>
<p>builds being faster, tests on branches passing meaning you wont break master, <strong>static types</strong> in [Stripe’s Ruby codebase]</p>
</blockquote>
<p>I mention all this to drive home that we didn’t build Sorbet because we wanted to, we built it because people were asking for it!</p>
<p>Which is also the reason it’s hard for me to give advice to people adopting Sorbet. They’ll ask me, “How did you convince people?” and I’ll say, “we didn’t: <em>they</em> convinced <em>us</em>!” But I’m getting off track, because I’m not trying to convince people to use Sorbet today.</p>
<h2 id="appetite-for-typing-at-stripe">Appetite for typing at Stripe</h2>
<p>We can dig a little deeper and see where this appetite for typing came from. As early as 2013, Stripe had developed its own object-database mapper for defining database models:<span><label for="sn-0">⊕</label><span>Why didn’t Stripe use mongoid, the official MongoDB ODM? I have no clue. The first mongoid commit predates the first Odin commit by about 4 years, so it’s not like there was no alternative.</span></span></p>
<figure>
<img src="https://blog.jez.io/assets/img/odin-model-2013-03-18.png" alt="Documentation for Odin::Model, a precursor to Chalk::ODM, and later T::Struct">

</figure>
<p>For anyone who uses Sorbet, this should look remarkably familiar: it’s the exact same code you’d use to define a <a href="https://sorbet.org/docs/tstruct"><code>T::Struct</code></a> today. Like any good ODM (or ORM), it did type validation at runtime to ensure that database write operations don’t store bad data.</p>
<p>Stripe also had a library for defining interfaces, circa 2013:</p>
<p><img src="https://blog.jez.io/assets/img/chalk-interface-2013-10-15.png"></p>
<p>The idea was that an interface would expose a specific set of required methods. Then you’d box up a value of that interface, like</p>
<div id="cb1"><pre><code><span id="cb1-1">animal <span>=</span> <span>Animal</span><span>.from_instance</span>(<span>Dog</span><span>.new</span>)</span></code></pre></div>
<p>and the library would check that you implemented all the required methods. Also, it prevented calling methods <strong>not</strong> in the interface at runtime. So for example, <code>animal.bark</code> would raise a <code>NoMethodError</code>, because <code>bark</code> isn’t in the public interface of <code>Animal</code>. If you needed to call a <code>Dog</code>-specific method, you’d have to explicitly downcast to a dog:</p>
<div id="cb2"><pre><code><span id="cb2-1">animal<span>.bark</span> <span># 💥</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">dog <span>=</span> <span>Chalk</span><span>::</span><span>Interface</span><span>.dynamic_cast</span>(animal, <span>Dog</span>)</span>
<span id="cb2-4">dog<span>.bark</span>    <span># ✅</span></span></code></pre></div>
<p>If you called <code>dynamic_cast</code> on something that was not a <code>Dog</code>, you get back <code>nil</code>, like how <code>dynamic_cast</code> works in C++.</p>
<p>You should be seeing a pattern here: most of Stripe’s appetite for typing manifested as Ruby DSLs for runtime checking and declaring explicit interfaces. This came to an inflection point in November 2016—almost a year before Sorbet—when Stripe implemented what it called “interface constraints.”</p>
<p><span><label for="sn-1">⊕</label><span>For the Stripe employees playing “spot the anachronism,” this screenshot should have been of a <a href="https://github.com/dropbox/hackpad">Hackpad</a>, but that’s now long gone.</span></span></p>
<figure>
<img src="https://blog.jez.io/assets/img/interface-constraints-proposal-2016-11-08.png" alt="The proposal for declare_method, the earliest predecesor of sig, c.&nbsp;Nov 2016">

</figure>
<p>It was a library for wrapping methods with runtime type checking, mimicking a primitive form of “<a href="https://en.wikipedia.org/wiki/Design_by_contract">design by contract</a>.”<span><label for="sn-2">⊕</label><span>In a recurring theme, there were already libraries for “design by contract” in Ruby, like <a href="https://github.com/egonSchiele/contracts.ruby">contracts.ruby</a>, that Stripe chose not to use. I can’t find mention of them influencing Stripe’s “interface constraints proposal,” but in retrospect I think it was important for Stripe to have control over the evolution of Sorbet’s type syntax.</span></span></p>
<p>This library directly evolved into Sorbet’s <code>sig</code> syntax, and it worked the same way: the library allowed declaring a specification for a method, and then wrapped the following method with runtime type checks.</p>
<p>The proposal mentions maybe one day building static checking for these annotations, but that was mostly hypothetical: runtime checking was the point from the beginning. Ruby is a language all about the neat things you can do at runtime!</p>
<p>Later, this <code>declare_method</code> library gained support for declaring overridable and abstract methods, which let it replace the <code>Chalk::Interface</code> library (so that interfaces could talk about required signatures, not just required methods):</p>
<figure>
<img src="https://blog.jez.io/assets/img/standard_method-2017-10-12.png" alt="Email announcing declare_method → standard_method et al.">

</figure>
<p>Throw in the fact that the JavaScript codebase powering Stripe’s dashboard gained support for static typing in July 2016 (via <a href="https://flow.org/">Flow</a><span><label for="sn-3">⊕</label><span>While researching, I came across the <a href="https://engineering.fb.com/2014/11/18/web/flow-a-new-static-type-checker-for-javascript/">original Flow announcement</a> from 2014, which is interesting in understanding its original design goals.</span></span>), and the stage was set. Desire for Ruby static typing came to a flash point in the first half of 2017. A particular email (which has been lost to the sands of retention) from an influential engineer at Stripe called out the difficulty of making sense of Stripe’s Ruby codebase given its size and evolution, alongside specific, high-profile instances where a static type checker would have eliminated those problems.</p>
<h2 id="the-design-of-a-type-syntax">The design of a type syntax</h2>
<p>The team evaluated various approaches:</p>
<ul>
<li><p>Rewriting to a typed language wouldn’t work: Stripe had almost 2 million lines of Ruby code at the time, and as we’d say at Stripe, “<a href="https://stripe.com/jobs/culture#:~:text=classic%E2%80%9D%20Stripe%20slogans%3A-,We%20haven%E2%80%99t%20won%20yet,-Efficiency%20is%20leverage">we haven’t won yet</a>,” which is a way of saying the work never stops. There’s no time to pause all feature development and rewrite to another language, because that wouldn’t make our users’ lives better.</p></li>
<li><p>There mostly weren’t any existing type checkers for Ruby. There’s a project called <a href="https://github.com/tupl-tufts/rdl">RDL</a>, but it’s kind of a hybrid static+runtime checker. RDL’s “static” checking happens after eagerly loading all the code and using the Ruby VM to do most of the symbol lookup. At the time, eagerly loading all of Stripe’s code (not even asking RDL to check types) took a few minutes—by comparison, the first version of Sorbet ran in a few seconds.</p></li>
<li><p>There was also a project called <a href="https://github.com/typedruby/typedruby">TypedRuby</a>, largely a passion project of an engineer working at GitHub. After a few weeks of evaluation, it seemed that there were enough bugs in the project that fixing them would involve a near complete rewrite of the project anyways.</p></li>
</ul>
<p>So the team decided to write something from scratch, which meant being tasked with designing a type syntax. Let’s look at some approaches.</p>
<h2 id="the-typescript-approach-add-types-on-top-compile-them-away">The TypeScript approach: add types on top, compile them away</h2>
<p>The most obvious approach in retrospect is the approach that has worked spectacularly for TypeScript: build our own syntax, free of any constraints in the source language, and compile it away with a build step.</p>
<p>For Sorbet this would have meant a <strong>massive break with Ruby compatibility</strong>. In the JavaScript world, minifiers, tree shakers, transpilers, and compile-to-JS languages were everywhere. Most developers gave up the “save file, reload page” development paradigm ages before TypeScript became popular: CoffeeScript predated TypeScript by 4 years.</p>
<p>But even today, I’m not aware of a single Ruby codebase of significant size that has a source transform build step that blocks running the tests or reloading the service. Ruby engineers expect to run tests directly and to be able to reload a service immediately after saving a file. Introducing a mandatory build step that blocked running a test would have been a big point of friction.</p>
<p>Even if <em>Stripe</em> was okay self-imposing a build step, it would break virtually all Ruby dev tools. Linters, syntax highlighting, and code formatting would break. Observability tools would show backtraces in the wrong spots, because the Ruby VM doesn’t have source mapping. IDEs like RubyMine would fall back to being text editors.</p>
<p>Let’s say we built all those tools, too. We wanted to open source Sorbet one day: this was a top-line goal right in the project brief. If anyone were ever to adopt Sorbet, it would need to be gradual: to not require fundamentally reworking how the codebase builds, tests, and deploys code just to try it out. Adopting a build step is a huge “all or nothing” decision for a codebase.</p>

<p>If we can’t change the source syntax, maybe we make our own syntax for declaring types? Every source file could be paired with a kind of “header” type definition file that declares the types.</p>
<p>Basically all gradual languages end up supporting this anyways: TypeScript has <code>*.d.ts</code>, Python has <code>*.pyi</code>. Sorbet has <code>*.rbi</code> files, and Ruby eventually shipped <code>*.rbs</code>. You need these files to declare types for files completely outside your control: third-party gems, things defined in native extensions, etc.</p>
<p>The problem is that they’re only half of a solution: even if you use RBS files to annotate methods, you’ll still need <strong>explicit type casts</strong> inside method bodies. RBS files alone don’t have a way to say, “trust me, right here I know that this variable is an <code>Integer</code>.”</p>
<p>I will say: the nice thing about this approach is that you’re free to choose a syntax that’s as clean as you want: it’s a blank slate on type syntax design, with virtually zero constraints, even more blank than the transpiler approach. We’ll come back to this later.</p>

<p>If the types needs to be in the source, and we can’t change the syntax, maybe we’ll invent our own syntax in comments? Google’s Closure Compiler chose this strategy well before TypeScript appeared, and Ruby already had a history of comment-based type annotations via tools like YARD. Sorbet could have formalized a rigid type-based comment syntax, and used that for both method signatures and inline type casts.</p>
<p>But here we return to the issue of runtime checking: Stripe engineers were asking for <strong>static and runtime type checking</strong>, not static instead of runtime!</p>
<p>You get a lot for free if you decorate a method with runtime checking, most important being the guarantee that no one can <a href="https://www.hyrumslaw.com/">Hyrum’s Law</a> your method:</p>
<blockquote>
<p>With a sufficient number of users of an API,<br>
it does not matter what you promise in the contract:<br>
all observable behaviors of your system<br>
will be depended on by somebody.</p>
</blockquote>
<p>Consider code like this:</p>
<div id="cb3"><pre><code><span id="cb3-1"><span>def</span> get_mcc(charge, merchant)</span>
<span id="cb3-2">  <span>return</span> charge<span>.mcc</span> <span>if</span> charge</span>
<span id="cb3-3">  merchant<span>.default_mcc</span></span>
<span id="cb3-4"><span>end</span></span></code></pre></div>
<p>If <code>charge</code> is non-<code>nil</code>, we return early before checking whether <code>merchant</code> is <code>nil</code> or not. Now suppose we need to edit the method to implement a new “merchant override MCC” feature:</p>
<div id="cb4"><pre><code><span id="cb4-1"><a href="#cb4-1"></a><span>def</span> get_mcc(charge, merchant)</span>
<span id="cb4-2"><a href="#cb4-2"></a>  override <span>=</span> merchant<span>.override_mcc</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>  <span>return</span> override <span>if</span> override</span>
<span id="cb4-4"><a href="#cb4-4"></a></span>
<span id="cb4-5"><a href="#cb4-5"></a>  <span>return</span> charge<span>.mcc</span> <span>if</span> charge</span>
<span id="cb4-6"><a href="#cb4-6"></a>  merchant<span>.default_mcc</span></span>
<span id="cb4-7"><a href="#cb4-7"></a><span>end</span></span></code></pre></div>
<p>This new override is meant to take precedence over any “MCC” on a charge. Is this change safe? Callers were supposed to be passing in a non-<code>nil</code> merchant into this method, but maybe some weren’t? If we aren’t sure, now we have to be defensive, which is annoying and maybe causes other problems!</p>
<p>But this problem vanishes when making a changes in methods with runtime-checked signatures.</p>
<div id="cb5"><pre><code><span id="cb5-1"><a href="#cb5-1"></a>sig <span>{</span> params(<span>charge:</span> <span>Charge</span>, <span>merchant:</span> <span>Merchant</span>)<span>.returns</span>(<span>MCC</span>) <span>}</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span>def</span> get_mcc(charge, merchant)</span>
<span id="cb5-3"><a href="#cb5-3"></a>  override <span>=</span> merchant<span>.override_mcc</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>  <span>return</span> override <span>if</span> override</span>
<span id="cb5-5"><a href="#cb5-5"></a></span>
<span id="cb5-6"><a href="#cb5-6"></a>  <span>return</span> charge<span>.mcc</span> <span>if</span> charge</span>
<span id="cb5-7"><a href="#cb5-7"></a>  merchant<span>.default_mcc</span></span>
<span id="cb5-8"><a href="#cb5-8"></a><span>end</span></span></code></pre></div>
<p>If the signature says it’s non-<code>nil</code>, we can rely on that invariant throughout the method body, in all conditionals. Adding a new call to <code>merchant.override_mcc</code> cannot cause <em>net new</em> uncaught <code>NoMethodError</code> exceptions as long as the method already had a runtime-checked <code>sig</code>. In a growing codebase with changes from hundreds of people, runtime checking ensures code remains flexible without fear.</p>
<p>A comment-based approach to type syntax would have meant giving up on runtime-checked signatures. Again: runtime checking is a unique strength of Ruby’s dynamism!</p>
<h2 id="the-dsl-approach-declare_method-becomes-sig">The DSL approach: <code>declare_method</code> becomes <code>sig</code></h2>
<p>The approach that Sorbet picked was to repurpose Stripe’s <code>declare_method</code> DSL. As a benefit, it meant that the project immediately gained thousands of trustworthy annotations to use as a proving ground for the implementation.</p>
<p>Before we dive into specific considerations for the DSL approach, I want to take a second to marvel at the fact that this approach even works at all. It’s wild, isn’t it? Decorate a method with a single line—in a language that doesn’t have first-class decorators!—and the following method gets runtime checking. You can try to approximate this with higher-order functions in JavaScript, but it doesn’t look anywhere near as good.</p>
<p>At the same time that <code>declare_method</code> shortened to <code>sig</code>, type syntax shortened from things like <code>Opus::Types.any(NilClass, String)</code> to just <code>T.nilable(String)</code>.</p>
<p>The specific syntax that <code>sig</code> uses evolved a handful of times<span><label for="sn-4">⊕</label><span>Truly, while I was researching this topic, I found so many wacky old syntaxes, far too many for this post. If you want the details feel free to ask me.</span></span> and I want to talk about those changes, but not before considering one final approach.</p>
<h2 id="the-python-approach-first-party-type-hints">The Python approach: first-party type hints</h2>
<p>Support for typing in Python went differently. Way back in 2007, a proposal for “<a href="https://peps.python.org/pep-3107/">Function Annotations</a>” was accepted:</p>
<div id="cb6"><pre><code><span id="cb6-1"><span>def</span> foo(a: expression, b: expression <span>=</span> <span>5</span>):</span>
<span id="cb6-2">    ...</span></code></pre></div>
<p>The idea was that annotations would be completely devoid of meaning, so that various tools could ascribe their own. As in: you could stash arbitrary strings there and use them for documentation, or you could put class names there and use them as types, etc. Even at the time it was accepted, people were <a href="https://mail.python.org/pipermail/python-ideas/2007-January/000032.html">already discussing</a> interoperability of various project’s annotations, and eventually in 2015 a follow up proposal formalized <a href="https://peps.python.org/pep-0484/">Type Hints</a>, saying essentially, “You don’t have to use Function Annotations for types, but if you’re going to, you should follow these conventions for what the types mean.”</p>
<p>The annotations play to the strengths of Python as a dynamic, runtime-focused language. They’re not static-only annotations that get compiled away like TypeScript: they’re present at runtime via the <code>__annotations__</code> property, and annotations can evaluate arbitrary code! The Python VM does not use them for runtime checking, but <a href="https://docs.pydantic.dev/latest/concepts/validation_decorator/">multiple</a>, <a href="https://typeguard.readthedocs.io/en/latest/">third-party</a> <a href="https://beartype.readthedocs.io/en/latest/">libraries</a> provide decorators that do.</p>
<p>For Python, this approach has a lot going for it:</p>
<ul>
<li>It’s a first class syntax that feels at home with other parts of the language’s syntax.</li>
<li>Individual projects can choose whether they want runtime checks or not.</li>
<li>The annotations are always present at runtime for third-party tools to consume them directly.</li>
</ul>
<p>The obvious downside is that it requires a change to the VM. In the planning phase of Sorbet, it would have been a non-starter to ask the Ruby team to invent syntax for us.</p>
<p>… but if you squint, Sorbet’s DSL approach is almost the same as this type hint approach!</p>
<ul>
<li>Both treat annotations as completely optional.</li>
<li>Both treat annotations as runnable syntax, allowing the full flexibility of the language.</li>
<li>Both allow for optional static and optional runtime checking.</li>
<li>Both provide a reflection API to get the annotations at runtime.</li>
</ul>
<p>The biggest difference is just the syntax—both offer the <strong>semantics</strong> that we need! When Sorbet started with the DSL approach, a selling point was that it would be easy to migrate to a blessed, upstream type hint approach if that ever became an option.</p>
<p>The type hint approach has unfortunately stalled for Ruby. I have more thoughts on this, but for now let’s keep retracing the evolution of Sorbet’s DSL syntax.</p>
<h2 id="types-are-expressions">Types are expressions</h2>
<p>Both the DSL approach and the type hint approach share the feature that types are expressions. This leads to three big constraints on the design of a syntax.</p>
<h2 id="when-the-syntax-we-want-is-taken">When the syntax we want is taken</h2>
<p>When types are expressions, sometimes type syntax you want already has another meaning.</p>
<p>It would be really nice to use <code>|</code> for union types, <code>&amp;</code> for intersection types, and <code>[]</code> for generic types, directly on class or module names:</p>
<div id="cb7"><pre><code><span id="cb7-1"><span>Integer</span> <span>|</span> <span>String</span>         <span># Module#|</span></span>
<span id="cb7-2"><span>Runnable</span> <span>&amp;</span> <span>HasOwner</span>      <span># Module#&amp;</span></span>
<span id="cb7-3"><span>Box</span><span>[</span><span>Integer</span><span>]</span>             <span># Module#[]</span></span></code></pre></div>
<p>There are two problems:</p>
<ul>
<li><p>It would involve monkey patching <code>Module</code>, which would be controversial, and thus need to be opt-in: this syntax could not be the sole accepted syntax.</p></li>
<li><p>Some singleton classes may already define these methods. <code>Array</code> and <code>Set</code> are examples from the standard library:</p>
<div id="cb8"><pre><code><span id="cb8-1"><span>Array</span><span>[</span><span>1</span>, <span>2</span>, <span>3</span><span>]</span>           <span># Array.[]</span></span>
<span id="cb8-2"><span># =&gt; [1, 2, 3]</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span>Set</span><span>[</span><span>1</span>, <span>2</span>, <span>3</span><span>]</span>             <span># Set.[]</span></span>
<span id="cb8-5"><span># =&gt; #&lt;Set: {1, 2, 3}&gt;</span></span></code></pre></div>
<p>So <code>Array[Integer]</code> would not make a generic type, but rather a length 1 array: <code>[Integer]</code>.<span><label for="sn-5">⊕</label><span>While we’re in the realm of the wacky, we could have “block-scoped” monkey patches where we replace the meaning of certain methods when evaluating the <code>sig</code> block to make this work, but the earlier point stands: some people won’t want that.</span></span></p></li>
</ul>
<p>Something similar comes up for tuples: the <code>|</code> and <code>&amp;</code> methods already mean something for Arrays:</p>
<div id="cb9"><pre><code><span id="cb9-1"><span>[</span><span>1</span>, <span>3</span>, <span>5</span><span>]</span> <span>|</span> <span>[</span><span>2</span>, <span>4</span>, <span>6</span><span>]</span>    <span># Array#|</span></span>
<span id="cb9-2"><span># =&gt; [1, 3, 5, 2, 4, 6]</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span>[</span><span>1</span>, <span>2</span>, <span>3</span><span>]</span> <span>&amp;</span> <span>[</span><span>2</span>, <span>3</span>, <span>4</span><span>]</span>    <span># Array#&amp;</span></span>
<span id="cb9-5"><span># =&gt; [2, 3]</span></span></code></pre></div>
<p>In this case, it might be easier to abandon using raw <code>Array</code> literals for tuples, and instead use a syntax like <code>T[Integer, String]</code> to define a tuple, freeing up <code>|</code> and <code>&amp;</code>.</p>
<p>While building Sorbet, our goal was to have one way to do things, for consistency. Maybe it’s time to relax that? If Ruby is okay having three names for filtering a list, maybe Sorbet can be okay having more than one way to specify union types. We could let individual codebases decide which syntax they want to use.</p>
<h2 id="forward-references">Forward references</h2>
<p>When types are expressions, you have to worry about forward references in type syntax. The evolution of the DSL syntax looked like this:</p>
<div id="cb10"><pre><code><span id="cb10-1">declare_method(<span>{</span><span>x:</span> <span>Integer</span><span>}</span>, <span>returns:</span> <span>String</span>)</span>
<span id="cb10-2"></span>
<span id="cb10-3">standard_method(<span>{</span><span>x:</span> <span>Integer</span><span>}</span>, <span>returns:</span> <span>String</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">sig<span>.params</span>(<span>x:</span> <span>Integer</span>)<span>.returns</span>(<span>String</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7">sig <span>{</span> params(<span>x:</span> <span>Integer</span>)<span>.returns</span>(<span>String</span>) <span>}</span></span></code></pre></div>
<p>The most recent change switched to specifying types inside a block, which was done so that adding a <code>sig</code> wouldn’t cause load-order problems. For example:</p>
<div id="cb11"><pre><code><span id="cb11-1"><a href="#cb11-1"></a><span>class</span> <span>A</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>  sig<span>.params</span>(<span>x:</span> <span>MyData</span>)<span>.void</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>  <span>def</span> <span>self</span><span>.example</span>(my_data)</span>
<span id="cb11-4"><a href="#cb11-4"></a>    <span>puts</span>(my_data<span>.foo</span>)</span>
<span id="cb11-5"><a href="#cb11-5"></a>  <span>end</span></span>
<span id="cb11-6"><a href="#cb11-6"></a></span>
<span id="cb11-7"><a href="#cb11-7"></a>  <span>MyData</span> <span>=</span> <span>Struct</span><span>.new</span>(<span>:foo</span>)</span>
<span id="cb11-8"><a href="#cb11-8"></a><span>end</span></span>
<span id="cb11-9"><a href="#cb11-9"></a></span>
<span id="cb11-10"><a href="#cb11-10"></a><span>A</span><span>.example</span>(<span>MyData</span><span>.new</span>(<span>42</span>))</span></code></pre></div>
<p>There’s no problem loading this file, until you add a <code>sig</code> (pictured using the old, eager syntax). Even though the <code>MyData#foo</code> method is called on line 4, above its definition on line 7, that doesn’t matter because <code>example</code> isn’t called until line 10.</p>
<p>But adding the <code>sig</code> breaks that: there’s now a forward reference to <code>MyData</code> which the sig evaluates eagerly, causing an exception at load time. This kept causing problems as people added more <code>sig</code>’s. The problem was worse because of autoloading: in development everything might have looked fine, because you only evaluated things in a certain order, but then in CI or production things loading in a different order would bite you.</p>
<p>Hiding all the types inside a block switches signatures from evaluating eagerly to lazily: the runtime implementation defers forcing the block until the first call of the method. These days, you basically only get a load-order issue if the code already had a load order issue.</p>
<p>It’s interesting to point out that Python type hints went through a very similar growing pain, and in newer versions of Python you can write:</p>
<div id="cb12"><pre><code><span id="cb12-1"><span>from</span> __future__ <span>import</span> annotations</span></code></pre></div>
<p>to convert type hints from being evaluated eagerly to lazily. The <a href="https://peps.python.org/pep-0649/">proposal introducing it</a> is very well written and has a great summary of the history and problems.</p>
<h2 id="sometimes-you-really-want-custom-syntax">Sometimes you really want custom syntax</h2>
<p>When types are expressions, you’re limited by what’s valid Ruby syntax. There’s a lot of alternative syntaxes that would be really nice for type syntax:</p>
<ul>
<li><code>Integer?</code> instead of <code>T.nilable(Integer)</code></li>
<li><code>(Integer) -&gt; String</code> instead of <code>T.proc.params(arg0: Integer).returns(String)</code></li>
<li><code>|</code> and <code>&amp;</code> without monkey patches</li>
</ul>
<p>The other approaches (transpiler, RBS files, documentation comments) don’t have this limitation: with those approaches you’re free to pick any syntax you want.</p>
<p>There’s a lot that can still be done while operating under the “types as expressions” constraint, but there’s no denying that if you give that up, you can get some really terse type syntaxes.</p>
<h2 id="where-we-go-from-here">Where we go from here</h2>
<p>What’s next for Sorbet’s type syntax? We’ve learned a bunch of constraints in the design space:</p>
<ul>
<li>It can’t break compatibility with Ruby, or no one will use it.</li>
<li>We need a syntax that works for runtime checking too, because Ruby is a runtime-focused language at its core.</li>
<li>There’s only so far you can go with “types as expressions,” but we could probably go a little further with optional monkey patches.</li>
<li>Adding a signature can’t cause code to load out of its usual order.</li>
</ul>
<p>So this leads to a few next steps:</p>
<ul>
<li>Probably we should build opt-in support for syntax that requires monkey patches?</li>
<li>We can think about some backwards-incompatible changes, like to how tuple types are declared.</li>
<li>We can think about making some super-verbose things (like generic methods) less verbose.</li>
</ul>
<p>But I want to suggest one more option, which is a bit more radical: what if the Ruby VM parsed RBS comments and associated them with method definitions?</p>
<div id="cb13"><pre><code><span id="cb13-1"><span>class</span> <span>A</span></span>
<span id="cb13-2">  <span>#: (Integer) -&gt; String</span></span>
<span id="cb13-3">  <span>def</span> <span>self</span><span>.foo</span>(x)</span>
<span id="cb13-4">  <span>end</span></span>
<span id="cb13-5"><span>end</span></span></code></pre></div>
<p>Soutaro introduced this comment-based syntax for RBS <a href="https://youtu.be/26sbpaGbU-0?t=1143">at RubyKaigi in 2024</a>. It’s a syntax that both Steep and TypeProf understand, and that Sorbet is gaining support for. Right now it’s just in comments… but what if the Ruby VM actually parsed these comments and exposed them at runtime?</p>
<div id="cb14"><pre><code><span id="cb14-1"><span>A</span><span>.method</span>(<span>:foo</span>)<span>.rbs_annotation</span></span>
<span id="cb14-2"><span>A</span><span>.rbs_annotation</span>(<span>:foo</span>)</span></code></pre></div>
<p>If RBS comments were exposed by the Ruby VM like this, it wouldn’t force people to choose between Ruby’s elegant RBS syntax and Sorbet’s powerful runtime type checking.</p>
<p>It also solves some of the problems with “types as expressions,” because types wouldn’t be expressions anymore: the Ruby VM would choose how to parse these annotations, meaning that we still get terse syntax, able to use <code>|</code> and <code>[]</code> free of other constraints. It would also fix the forward reference problem because the VM wouldn’t be evaluating these comments, just parsing them for other tools to consume. Those tools might attempt to resolve constant names, but that’s up to each tool to figure out when and how to do that.</p>
<p>Having RBS annotations available at runtime would be useful for more than just Sorbet:</p>
<ul>
<li>IRB could use these annotations to show completion results, without having to parse RBS comments separately and associate them with the methods.</li>
<li>Gems could get creative with how they use it. For example, you could imagine a JSON Schema library where the schemas are defined by collecting all the type hints in a <code>Struct</code> or <code>Data</code> class.</li>
<li>Linters could piggy back off the Ruby VM’s parser and be able to pass along the parsed RBS annotations to custom linter rules, so that lint rules don’t have to parse the annotations themselves.</li>
</ul>
<p>Given that it starts from a comment-based syntax, you could still make it be optional, something that doesn’t affect you at all unless you want it to.</p>
<p>This solution isn’t a silver bullet: it wouldn’t do anything for <code>T.let</code> assertions where you want to make an assertion for a specific value at runtime, but it’s a great start!</p>
<p>In the end, all I’m trying to say is: we don’t have to think of Sorbet’s syntax as “done.” Even if Ruby never adds support for type hints, we can keep improving Sorbet. But also it’s an exciting time for type annotations in Ruby itself, and I remain optimistic for the future of the wider Ruby typing ecosystem.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Entire BART system is down due to computer systems failure (194 pts)]]></title>
            <link>https://www.bart.gov/</link>
            <guid>43937242</guid>
            <pubDate>Fri, 09 May 2025 14:33:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bart.gov/">https://www.bart.gov/</a>, See on <a href="https://news.ycombinator.com/item?id=43937242">Hacker News</a></p>
<div id="readability-page-1" class="page"><div region="navigation">
        
                                <li>
          <a href="https://www.bart.gov/schedules" title="Schedules" tabindex="1">
            <span>Schedules</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/schedules" title="Schedules">
            <span>Schedules</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/schedules/eta" title="Real Time Departures">
            <span>Real Time Departures</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/schedules/pdfs" title="Line Schedule Timetables">
            <span>Line Schedule Timetables</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/transit/transfers" title="Caltrain Transfer Timetables">
            <span>Caltrain Transfer Timetables</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/planner" title="Trip Planner">
            <span>Trip Planner</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/schedules/advisories" title="Alerts and Advisories">
            <span>Alerts and Advisories</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/schedules/early-bird-express" title="Early Bird Express">
            <span>Early Bird Express</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/transit/capitol-corridor-transfers" title="Capitol Corridor Transfer Timetables">
            <span>Capitol Corridor Transfer Timetables</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/schedules/weather" title="Weather Guide">
            <span>Weather Guide</span>
                      </a>

                            </li>
              </ul>
  
                                  



<div>
  <p><img alt="Plan Your Trip" src="https://www.bart.gov/themes/custom/bart/assets/images/icon-menu/icon-menu-location.svg">
  </p>
  
</div>
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/stations" title="Stations" tabindex="1">
            <span>Stations</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/stations" title="Stations">
            <span>Stations</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/system-map" title="System Map">
            <span>System Map</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/stations/elevators" title="Elevator Status">
            <span>Elevator Status</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/stations/escalators" title="Escalator Status">
            <span>Escalator Status</span>
                      </a>

                            </li>
              </ul>
  
                                  



<div>
  <p><img alt="Station Details" src="https://www.bart.gov/themes/custom/bart/assets/images/icon-menu/icon-menu-arrows.svg">
  </p>
  
</div>
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/guide" title="Using BART" tabindex="1">
            <span>Using BART</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/guide" title="Using BART">
            <span>Using BART</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/apps" title="BART Apps">
            <span>BART Apps</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/parking" title="Parking">
            <span>Parking</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/guide/parking" title="Parking Overview">
            <span>Parking Overview</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/parking/citations" title="Parking Citations">
            <span>Parking Citations</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/parking/carpool" title="Carpool to BART">
            <span>Carpool to BART</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/parking/electric-vehicle" title="Electric Vehicle (EV)">
            <span>Electric Vehicle (EV)</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/parking/pricing" title="Parking Pricing">
            <span>Parking Pricing</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/parking/faq" title="Parking FAQ">
            <span>Parking FAQ</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/parking/payment" title="Pay By App">
            <span>Pay By App</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/airport/sfo" title="Airport Connections">
            <span>Airport Connections</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/guide/airport/sfo" title="San Francisco International Airport (SFO)">
            <span>San Francisco International Airport (SFO)</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/airport/oak" title="Oakland International Airport (OAK)">
            <span>Oakland International Airport (OAK)</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/transit" title="Transit Connections">
            <span>Transit Connections</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/bikes" title="Bikes on BART">
            <span>Bikes on BART</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/guide/bikes" title="Bikes on BART">
            <span>Bikes on BART</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/bikes/bikeFAQ" title="Bike FAQ">
            <span>Bike FAQ</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/bikes/bikeRules" title="Bike Rules">
            <span>Bike Rules</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/advisory/bicycle" title="Bike Task Force">
            <span>Bike Task Force</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/holidays" title="Holiday Schedule">
            <span>Holiday Schedule</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/social-resources" title="Social Resources">
            <span>Social Resources</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/epamd" title=" Electric Personal Assistive Mobility Devices Program (EPAMD)">
            <span> Electric Personal Assistive Mobility Devices Program (EPAMD)</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/accessibility" title="Accessibility">
            <span>Accessibility</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/guide/accessibility" title="Accessibility Overview">
            <span>Accessibility Overview</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/stations/elevators" title="Elevator Status">
            <span>Elevator Status</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/accessibility/paratransit" title="Paratransit">
            <span>Paratransit</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/accessibility/RTC" title="Regional Transit Connection (RTC) Card">
            <span>Regional Transit Connection (RTC) Card</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/advisory/accessibility" title="BART Accessibility Task Force">
            <span>BART Accessibility Task Force</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/accessibility/contacts" title="Accessibility Contacts">
            <span>Accessibility Contacts</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/faq" title="FAQs">
            <span>FAQs</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/lostandfound" title="Lost &amp; Found">
            <span>Lost &amp; Found</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/safety" title="Safety &amp; Security">
            <span>Safety &amp; Security</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/guide/safety" title="Security on BART">
            <span>Security on BART</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/safety/gbv" title="Addressing Gender Based Violence">
            <span>Addressing Gender Based Violence</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/safety/safety" title="Injury Prevention">
            <span>Injury Prevention</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/safety/power" title="Public Safety Power Shutoffs (PSPS)">
            <span>Public Safety Power Shutoffs (PSPS)</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/safety/earthquake" title="Earthquake Safety">
            <span>Earthquake Safety</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/titlevi" title="Title VI">
            <span>Title VI</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/pets" title="Service Animals/Pets">
            <span>Service Animals/Pets</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/wireless" title="Wireless Connections">
            <span>Wireless Connections</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/brochures" title="Brochures">
            <span>Brochures</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/restrooms" title="Restrooms at BART">
            <span>Restrooms at BART</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/safe-and-clean" title="Safe &amp; Clean Plan">
            <span>Safe &amp; Clean Plan</span>
                      </a>

                            </li>
              </ul>
  
                                  



<div>
  <p><img alt="Bikes are Welcome" src="https://www.bart.gov/themes/custom/bart/assets/images/icon-menu/icon-menu-bike.svg">
  </p>
  <div>
    <h2>Bikes are Welcome</h2>
    <p>Just follow a few simple rules when taking your bike on BART</p>
    <p><a href="https://www.bart.gov/bikes" tabindex="0">Read More</a>
  </p></div>
</div>
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/tickets" title="Fares" tabindex="1">
            <span>Fares</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/tickets" title="Fares and Pay by Phone">
            <span>Fares and Pay by Phone</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/tickets/clippercustomerservice" title="Clipper Customer Service">
            <span>Clipper Customer Service</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/tickets/sales" title="Purchasing and Group Sales">
            <span>Purchasing and Group Sales</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/tickets/discounts" title="Discounts">
            <span>Discounts</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/tickets/benefits" title="Tax Benefits">
            <span>Tax Benefits</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/tickets/calculator" title="Fare Calculator">
            <span>Fare Calculator</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/tickets/sales/refunds" title="Refunds">
            <span>Refunds</span>
                      </a>

                            </li>
              </ul>
  
                                  



<div>
  <p><img alt="How Much is Your Fare?" src="https://www.bart.gov/themes/custom/bart/assets/images/icon-menu/icon-menu-fares.svg">
  </p>
  
</div>
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/news/articles" title="News" tabindex="1">
            <span>News</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/news/articles" title="News">
            <span>News</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/news/specials" title="Fun Stuff">
            <span>Fun Stuff</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/news/fun" title="Fun Stuff">
            <span>Fun Stuff</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/news/specials/machines" title="The Machines of BART">
            <span>The Machines of BART</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/podcasts" title="Podcasts">
            <span>Podcasts</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/news/media-resources" title="Media Resources">
            <span>Media Resources</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/news/alerts" title="News Alerts">
            <span>News Alerts</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/news/alerts" title="Email and Text Subscriptions">
            <span>Email and Text Subscriptions</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/schedules/eta" title="Real Time Departure">
            <span>Real Time Departure</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/schedules/advisories" title="Active Service Alert">
            <span>Active Service Alert</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/guide/apps" title="BART Apps">
            <span>BART Apps</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/news/rss" title="RSS Feeds">
            <span>RSS Feeds</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://bartable.bart.gov/" title="BARTable">
            <span>BARTable</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.youtube.com/BARTable" title="BART TV">
            <span>BART TV</span>
                      </a>

                            </li>
              </ul>
  
                                  



<div>
  <p><img alt="News Alerts" src="https://www.bart.gov/themes/custom/bart/assets/images/icon-menu/icon-menu-news.svg">
  </p>
  <div>
    <h2>News Alerts</h2>
    <p>Stay up-to-date with News Alerts sent by email or text</p>
    <p><a href="https://www.bart.gov/signup" tabindex="0">Sign Up</a>
  </p></div>
</div>
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about" title="About" tabindex="1">
            <span>About</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about" title="About">
            <span>About</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod" title="Board of Directors">
            <span>Board of Directors</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/bod" title="Board of Directors">
            <span>Board of Directors</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/meetings" title="Agenda &amp; Minutes">
            <span>Agenda &amp; Minutes</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/advisory" title="Advisory Committees">
            <span>Advisory Committees</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/multimedia" title="Meeting Video">
            <span>Meeting Video</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://cloud.info.bart.gov/signup" title="Meeting Notices Via Email">
            <span>Meeting Notices Via Email</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sites/default/files/docs/2020%20advmtg%20for%20bart.gov_.pdf" title="2020 Board Meeting Schedule (PDF)">
            <span>2020 Board Meeting Schedule (PDF)</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sites/default/files/docs/Board_Meeting_Rules_Notice_57.pdf" title="Public Participation at Meetings (PDF)">
            <span>Public Participation at Meetings (PDF)</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/policies" title="Board Adopted Policies">
            <span>Board Adopted Policies</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/elections" title="Director Elections">
            <span>Director Elections</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/legislative-advocacy" title="Legislative Advocacy">
            <span>Legislative Advocacy</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/gm" title="General Manager">
            <span>General Manager</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/financials" title="Financials">
            <span>Financials</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/financials/archive" title="Budget Archive">
            <span>Budget Archive</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/financials/crisis" title="Financial Crisis">
            <span>Financial Crisis</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/financials/grants" title="BART Grants">
            <span>BART Grants</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/reports" title="Reports">
            <span>Reports</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/inspector-general" title="Inspector General">
            <span>Inspector General</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/inspector-general" title="Inspector General">
            <span>Inspector General</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/history/facts" title="Facts &amp; History">
            <span>Facts &amp; History</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/history/facts" title="Facts &amp; History">
            <span>Facts &amp; History</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/history/history_film" title="Historical Films">
            <span>Historical Films</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sites/default/files/docs/BARTtimeline_0820%2520FINAL.pdf" title="Historical Timeline (PDF)">
            <span>Historical Timeline (PDF)</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/history/facts" title="System Facts">
            <span>System Facts</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/history/cars" title="Car Types">
            <span>Car Types</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects" title="Projects &amp; Plans">
            <span>Projects &amp; Plans</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/projects" title="Projects &amp; Plans">
            <span>Projects &amp; Plans</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/rebuilding" title="System Rebuilding">
            <span>System Rebuilding</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects/cars" title="New BART Train Cars">
            <span>New BART Train Cars</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects/traincontrol" title="Train Control Modernization">
            <span>Train Control Modernization</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects/hmc" title="Hayward Maintenance Complex">
            <span>Hayward Maintenance Complex</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/planning" title="Planning">
            <span>Planning</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/planning/station" title="Station Modernization">
            <span>Station Modernization</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/tod" title="Transit-Oriented Development (TOD)">
            <span>Transit-Oriented Development (TOD)</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects/eqs" title="Earthquake Safety">
            <span>Earthquake Safety</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/project/silicon-valley-extension" title="Silicon Valley Extension">
            <span>Silicon Valley Extension</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects/corecapacity" title="Transbay Capacity Relief">
            <span>Transbay Capacity Relief</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects/fare-gate" title="New Fare Gates">
            <span>New Fare Gates</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects/legacy" title="Legacy Fleet Decommissioning">
            <span>Legacy Fleet Decommissioning</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/projects/wsx" title="Future Irvington Station">
            <span>Future Irvington Station</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/planning/region" title="Role In The Region">
            <span>Role In The Region</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police" title="BART Police">
            <span>BART Police</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/police" title="BART Police">
            <span>BART Police</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/people" title="People of BART PD">
            <span>People of BART PD</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/news" title="Latest News">
            <span>Latest News</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/zones" title="Know Your Zone">
            <span>Know Your Zone</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/bartwatch" title="BART Watch App">
            <span>BART Watch App</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/employment" title="Employment">
            <span>Employment</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/howto" title="How To">
            <span>How To</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/reports" title="Policy &amp; Reports">
            <span>Policy &amp; Reports</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/proofofpayment" title="Proof of Payment">
            <span>Proof of Payment</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/contact" title="Contact BART Police">
            <span>Contact BART Police</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/police/reform" title="Reforms to Date">
            <span>Reforms to Date</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/policeauditor" title="Office of the Independent Police Auditor">
            <span>Office of the Independent Police Auditor</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/policeauditor" title="Office Of The Independent Police Auditor">
            <span>Office Of The Independent Police Auditor</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/policeauditor/recommendations" title="OIPA Recommendations">
            <span>OIPA Recommendations</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/policeauditor/reports" title="Monthly &amp; Annual Reports">
            <span>Monthly &amp; Annual Reports</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/policeauditor/community" title="Community Outreach">
            <span>Community Outreach</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/policeauditor/resources" title="Resources">
            <span>Resources</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/policeauditor/faq" title="FAQ's">
            <span>FAQ's</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/bod/advisory/crb" title="Police Civilian Review Board">
            <span>Police Civilian Review Board</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business" title="Doing Business">
            <span>Doing Business</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/business" title="Doing Business">
            <span>Doing Business</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/procurement" title="Procurement">
            <span>Procurement</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/ocr" title="Office of Civil Rights">
            <span>Office of Civil Rights</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/insurance" title="Insurance">
            <span>Insurance</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/permits" title="Permits">
            <span>Permits</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/advertising" title="Advertising Opportunities">
            <span>Advertising Opportunities</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/tod" title="Transit-Oriented Development">
            <span>Transit-Oriented Development</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/specifications" title="Standard Specifications">
            <span>Standard Specifications</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/business/accounts-payable" title="Accounts Payable">
            <span>Accounts Payable</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/jobs" title="Careers">
            <span>Careers</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/jobs" title="Careers Overview">
            <span>Careers Overview</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/jobs/descriptions" title="Job Descriptions">
            <span>Job Descriptions</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sites/default/files/docs/Salary%2520Schedule%25201.1.2020%2520%2528FINAL%2529.pdf" title="Salary Schedule">
            <span>Salary Schedule</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/jobs/faq" title="Careers FAQs">
            <span>Careers FAQs</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/jobs/cba" title="Collective Bargaining Agreements">
            <span>Collective Bargaining Agreements</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/about/jobs/training" title="Workforce Development">
            <span>Workforce Development</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/sustainability" title="Sustainability">
            <span>Sustainability</span>
            <span></span>          </a>

                                            <div>
                              <ul>
        
                                <li>
          <a href="https://www.bart.gov/about/projects/cars/sustainability" title="Sustainability">
            <span>Sustainability</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sustainability/policies" title="Policy &amp; Reports">
            <span>Policy &amp; Reports</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sustainability/energy" title="Energy at BART">
            <span>Energy at BART</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sustainability/electricvehicle" title="Electric Vehicle Charging at BART">
            <span>Electric Vehicle Charging at BART</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sustainability/water" title="Water at BART">
            <span>Water at BART</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.bart.gov/sustainability/projects" title="Rider Feedback">
            <span>Rider Feedback</span>
                      </a>

                            </li>
              </ul>
  
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/about/developers" title="Developer Program">
            <span>Developer Program</span>
                      </a>

                            </li>
          
                                <li>
          <a href="https://www.railgoods.com/" title="BART Merch">
            <span>BART Merch</span>
                      </a>

                            </li>
              </ul>
  
                                  



<div>
  <p><img alt="BART Career Opportunities" src="https://www.bart.gov/themes/custom/bart/assets/images/icon-menu/icon-menu-about.svg">
  </p>
  <div>
    <h2>BART Career Opportunities</h2>
    <p>Explore the latest jobs listings on our Career page</p>
    <p><a href="https://www.bart.gov/about/jobs" tabindex="0">View the Listings</a>
  </p></div>
</div>
                              </div>
                  </li>
          
                                <li>
          <a href="https://www.bart.gov/contact" title="Contact" tabindex="1">
            <span>Contact</span>
                      </a>

                            </li>
              </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ALICE detects the conversion of lead into gold at the LHC (582 pts)]]></title>
            <link>https://www.home.cern/news/news/physics/alice-detects-conversion-lead-gold-lhc</link>
            <guid>43937214</guid>
            <pubDate>Fri, 09 May 2025 14:31:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.home.cern/news/news/physics/alice-detects-conversion-lead-gold-lhc">https://www.home.cern/news/news/physics/alice-detects-conversion-lead-gold-lhc</a>, See on <a href="https://news.ycombinator.com/item?id=43937214">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>
        Near-miss collisions between high-energy lead nuclei at the LHC generate intense electromagnetic fields that can knock out protons and transform lead into fleeting quantities of gold nuclei
      </p><div>
        <p>In a paper published in <a href="https://link.aps.org/doi/10.1103/PhysRevC.111.054906">Physical Review Journals</a>, the <a href="https://www.home.cern/science/experiments/alice">ALICE collaboration</a> reports measurements that quantify the transmutation of lead into gold in CERN’s <a href="https://home.cern/science/accelerators/large-hadron-collider">Large Hadron Collider </a>(LHC).</p>

<p>Transforming the base metal lead into the precious metal gold was a dream of medieval alchemists. This long-standing quest, known as <em>chrysopoeia</em>, may have been motivated by the observation that dull grey, relatively abundant lead is of a similar density to gold, which has long been coveted for its beautiful colour and rarity. It was only much later that it became clear that lead and gold are distinct chemical elements and that chemical methods are powerless to transmute one into the other.</p>

<p>With the dawn of nuclear physics in the 20th century, it was discovered that heavy elements could transform into others, either naturally, by radioactive decay, or in the laboratory, under a bombardment of neutrons or protons. Though gold has been artificially produced in this way before, the ALICE collaboration has now measured the transmutation of lead into gold by a new mechanism involving near-miss collisions between lead nuclei at the LHC.</p>

<p>Extremely high-energy collisions between lead nuclei at the LHC can create quark–gluon plasma, a hot and dense state of matter that is thought to have filled the universe around a millionth of a second after the Big Bang, giving rise to the matter we now know. However, in the far more frequent interactions where the nuclei just miss each other without “touching”, the intense electromagnetic fields surrounding them can induce photon–photon and photon–nucleus interactions that open <a href="http://cerncourier.com/a/the-other-99/">further</a> avenues of exploration.</p>

<p>The electromagnetic field emanating from a lead nucleus is particularly strong because the nucleus contains 82 protons, each carrying one elementary charge. Moreover, the very high speed at which lead nuclei travel in the LHC (corresponding to 99.999993% of the speed of light) causes the electromagnetic field lines to be squashed into a thin pancake, transverse to the direction of motion, producing a short-lived pulse of photons. Often, this triggers a process called electromagnetic dissociation, whereby a photon interacting with a nucleus can excite oscillations of its internal structure, resulting in the ejection of small numbers of neutrons and protons. To create gold (a nucleus containing 79 protons), three protons must be removed from a lead nucleus in the LHC beams.</p>

<p>“It is impressive to see that our detectors can handle head-on collisions producing thousands of particles, while also being sensitive to collisions where only a few particles are produced at a time, enabling the study of electromagnetic ‘nuclear transmutation’ processes,” says Marco Van Leeuwen, ALICE spokesperson.</p>

<p>The ALICE team used the detector’s zero degree calorimeters (ZDC) to count the number of photon–nucleus interactions that resulted in the emission of zero, one, two and three protons accompanied by at least one neutron, which are associated with the production of lead, thallium, mercury and gold, respectively. While less frequent than the creation of thallium or mercury, the results show that the LHC currently produces gold at a maximum rate of about 89&nbsp;000 nuclei per second from lead–lead collisions at the ALICE collision point. Gold nuclei emerge from the collision with very high energy and hit the LHC beam pipe or collimators at various points downstream, where they immediately fragment into single protons, neutrons and other particles. The gold exists for just a tiny fraction of a second.</p>

<p>The ALICE analysis shows that, during Run 2 of the LHC (2015–2018), about 86 billion<strong> </strong>gold nuclei were created at the four major experiments. In terms of mass, this corresponds to just 29 picograms (2.9 ×10<sup>-11 </sup>g). Since the luminosity in the LHC is continually increasing thanks to regular upgrades to the machines, Run 3 has produced almost double the amount of gold that Run 2 did, but the total still&nbsp;amounts to trillions of times less than would be required to make a piece of jewellery. While the dream of medieval alchemists has technically come true, their hopes of riches have once again been dashed.</p>

<p>“Thanks to the unique capabilities of the ALICE ZDCs, the present analysis is the first to systematically detect and analyse the signature of gold production at the LHC experimentally,” says Uliana Dmitrieva of the ALICE collaboration.</p>

<p>“The results also test and improve theoretical models of electromagnetic dissociation which, beyond their intrinsic physics interest, are used to understand and predict beam losses that are a major limit on the performance of the LHC and future colliders,” adds John Jowett, also of the ALICE collaboration.</p>

<p><strong>Additional image:&nbsp;</strong></p>

<p><img alt="Illustration of an ultra-peripheral collision where the two lead (208Pb) ion beams at the LHC pass by close to each other without colliding. In the electromagnetic dissociation process, a photon interacting with a nucleus can excite oscillations of its internal structure and result in the ejection of small numbers of neutrons (two) and protons (three), leaving the gold (203Au) nucleus behind (Image: CERN)" data-entity-type="file" data-entity-uuid="5cfad6c8-0f15-4bed-8710-97688636ce1b" height="100%" src="https://www.home.cern/sites/default/files/inline-images/%5Bcurrent-user%3Aname%5D/UPC2025%20Alchemy%20infography%20var%2001%20%2800005%29%20draft.png" width="100%" loading="lazy">Illustration of an ultra-peripheral collision where the two lead (<sup>208</sup>Pb) ion beams at the LHC pass by close to each other without colliding. In the electromagnetic dissociation process, a photon interacting with a nucleus can excite oscillations of its internal structure and result in the ejection of small numbers of neutrons (two) and protons (three), leaving the gold (<sup>203</sup>Au) nucleus behind (Image: CERN)</p>



      </div></div>]]></description>
        </item>
    </channel>
</rss>