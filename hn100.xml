<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Wed, 22 May 2024 16:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Sal Khan is pioneering innovation in education again (104 pts)]]></title>
            <link>https://www.gatesnotes.com/Brave-New-Words</link>
            <guid>40440854</guid>
            <pubDate>Wed, 22 May 2024 13:39:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gatesnotes.com/Brave-New-Words">https://www.gatesnotes.com/Brave-New-Words</a>, See on <a href="https://news.ycombinator.com/item?id=40440854">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-module-name="Brave-New-Words" data-module-type="article">







<p>Ahead of the curve</p>
<p>Sal Khan is pioneering innovation in education…again</p>
<p><em>Brave New Words</em> paints an inspiring picture of AI in the classroom.</p>
<p><span> | </span></p><p>May 21, 2024 <span></span></p>
    <p><img src="https://www.gatesnotes.com/media/GNIN/gray_4x6.png" data-src="https://assets.gatesnotes.com/8a5ac0b3-6095-00af-c50a-89056fbe4642/744fed15-4a2f-4711-8af5-fd42e1026bc4/20240514-SummerBooks-BraveNewWords-TGN_Assets-001-article-hero_1200x564.jpg" data-src-tablet="https://assets.gatesnotes.com/8a5ac0b3-6095-00af-c50a-89056fbe4642/744fed15-4a2f-4711-8af5-fd42e1026bc4/20240514-SummerBooks-BraveNewWords-TGN_Assets-001-article-hero_1200x564.jpg" data-src-mobile="https://assets.gatesnotes.com/8a5ac0b3-6095-00af-c50a-89056fbe4642/744fed15-4a2f-4711-8af5-fd42e1026bc4/20240514-SummerBooks-BraveNewWords-TGN_Assets-001-article-hero_1200x564.jpg"></p>



</div><div data-module-name="Brave-New-Words" data-module-type="article" id="TGN_site_Article_body">











<p>When GPT-4o launched last week, people across the internet (and the world) were blown away. Talking to AI has always felt a bit surreal—but OpenAI’s latest model feels like talking to a real person. You can actually speak to it, and have it talk back to you, without lags. It’s as lifelike as any AI we’ve seen so far, and the use cases are limitless. One of the first that came to my mind was how big a game-changer it will be in the classroom. Imagine every student having a personal tutor powered by this technology.</p>
<p>I recently read a terrific book on this topic called <em>Brave New Words</em>. It’s written by my friend (and <a href="https://www.gatesnotes.com/Unconfuse-Me-podcast-with-guest-Sal-Khan" data-new-window="true" target="_blank" rel="noopener noreferrer">podcast guest</a>) Sal Khan, a longtime pioneer of innovation in education. Back in 2006, Sal founded Khan Academy to share the tutoring content he’d created for younger family members with a wider audience. Since then, his online educational platform has helped teach over 150 million people worldwide—including me and my kids.</p>
<p>Well before this recent AI boom, I considered him a visionary. When I learned he was writing this book, I couldn’t wait to read it. Like I expected, <em>Brave New Words</em> is a masterclass.</p>
<p>Chapter by chapter, Sal takes readers through his predictions—some have already come true since the book was written—for AI’s many applications in education. His main argument: AI will radically improve both student outcomes and teacher experiences, and help usher in a future where everyone has access to a world-class education.</p>
<p>You might be skeptical, especially if you—like me—have been following the EdTech movement for a while. For decades, exciting technologies and innovations have made headlines, accompanied by similarly bold promises to revolutionize learning and teaching as we know it—only to make a marginal impact in the classroom.</p>
<p>But drawing on his experience creating <a href="https://www.khanmigo.ai/" data-new-window="true" target="_blank" rel="noopener noreferrer">Khanmigo</a>, an AI-powered tutor, Sal makes a compelling case that AI-powered technologies will be different. That’s because we finally have a way to give every student the kind of personalized learning, support, and guidance that’s historically been out of reach for most kids in most classrooms. As Sal puts it, “Getting every student a dedicated on-call human tutor is cost prohibitive.” AI tutors, on the other hand, aren’t.</p>
<p>Picture this: You're a seventh-grade student who struggles to keep up in math. But now, you have an AI tutor like the one Sal describes by your side. As you work through a challenging set of fraction problems, it won’t just give you the answer—it breaks each problem down into digestible steps. When you get stuck, it gives you easy-to-understand explanations and a gentle nudge in the right direction. When you finally get the answer, it generates targeted practice questions that help build your understanding and confidence.</p>
<p>And with the help of an AI tutor, the past comes to life in remarkable ways. While learning about Abraham Lincoln’s leadership during the Civil War, you can have a “conversation” with the 16<sup>th</sup> president himself. (As Sal demonstrates in the book, conversations with one of my favorite literary figures, Jay Gatsby, are also an option.)</p>
<p>When the time comes to write your essay, don’t worry about the dreaded blank page. Instead, your AI tutor asks you thought-starters to help brainstorm. You get feedback on your outline in seconds, with tips to improve the logic or areas where you need more research. As you draft, the tutor evaluates your writing in real-time—almost impossible without this technology—and shows where you might clarify your ideas, provide more evidence, or address a counterargument. Before you submit, it gives detailed suggestions to refine your language and sharpen your points.</p>
<p>Is this cheating?</p>
<p>It’s a complicated question, and there’s no one-size-fits-all answer. Sal notes that bouncing ideas off friends, asking family members to critique work, and using spellcheckers and tools like Grammarly—which can rephrase entire sentences—aren’t considered cheating today by most measures. Similarly, when used right, AI doesn’t work for students but <em>with </em>them to move something forward that they might otherwise get stuck on. That’s why, according to Sal, a lot of educators who first banned AI from class are now encouraging students to use it.</p>
<p>After all, mastery of AI won’t just be nice to have in a few years—for many professions, it’ll be necessary. Employees who can use AI effectively will be far more valuable than those who can’t. By incorporating this technology into education, we're both improving students’ experiences and outcomes <em>and</em> preparing them for the jobs of the future—which will become more enjoyable and fulfilling with AI in the mix.</p>
<p>That includes teaching. With every transformative innovation, there are fears of machines taking jobs. But when it comes to education, I agree with Sal: AI tools and tutors never can and never should replace teachers. What AI can do, though, is support and empower them.</p>
<p>Until now, most EdTech solutions, as great as they may be, haven’t meaningfully made teachers’ lives easier. But with AI, they can have a superhuman teaching assistant to handle routine tasks like lesson planning and grading—which take up almost half of a typical teacher's day. In seconds, an AI assistant can grade spelling tests or create a lesson plan connecting the Industrial Revolution to current events. It can even monitor each student's progress and give teachers instant feedback, allowing for a new era of personalized learning.</p>
<p>With AI assistants handling the mundane stuff, teachers can focus on what they do best: inspiring students, building relationships, and making sure everyone feels seen and supported—especially kids who need a little extra help.</p>
<p>Of course, there are challenges involved in bringing AI into schools at scale, and Sal is candid about them. We need systems that protect student privacy and mitigate biases. And there’s still a lot to do so that every kid has access to the devices and connectivity they need to use AI in the first place. No technology is a silver bullet for education. But I believe AI can be a game-changer and great equalizer in the classroom, the workforce, and beyond.</p>
<p>I recently visited First Avenue School in Newark, New Jersey, where Khanmigo is currently being piloted. We’re still in the early days, but it was amazing to see firsthand how AI can be used in the classroom—and to speak with students and teachers who are already reaping the benefits. It felt like catching a glimpse of the future. No one understands where education is headed better than Sal Khan, and I can't recommend <em>Brave New Words</em> enough.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA['Right to roam' movement fights to give the commons back to the public (198 pts)]]></title>
            <link>https://news.mongabay.com/2024/05/right-to-roam-movement-fights-to-give-the-commons-back-to-the-commoners/</link>
            <guid>40440283</guid>
            <pubDate>Wed, 22 May 2024 12:48:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://news.mongabay.com/2024/05/right-to-roam-movement-fights-to-give-the-commons-back-to-the-commoners/">https://news.mongabay.com/2024/05/right-to-roam-movement-fights-to-give-the-commons-back-to-the-commoners/</a>, See on <a href="https://news.ycombinator.com/item?id=40440283">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main">

<article id="post-282255">
<div><ul><li><em>The “right to roam” movement in England seeks to reclaim common rights to access, use and enjoy both private and public land, since citizens only have access to 8% of their nation’s land currently.</em></li><li><em>Campaigner and activist Jon Moses joins the Mongabay podcast to discuss the history of land ownership change in England with co-host Rachel Donald, and why reestablishing a common “freedom to roam” — a right observed in places like the Czech Republic and Norway — is necessary to reestablishing human connection with nature and repairing damaged landscapes.</em></li><li><em>At least 2,500 landscapes are cut off from public access in England, requiring one to trespass to reach them.</em></li><li><em>“There needs to be a kind of rethinking really of [what] people’s place is in the landscape and how that intersects with a kind of [new] relationship between people and nature as well,” Moses says on this episode.</em></li></ul></div> <p>Like most nations, England doesn’t have legally recognized rights for citizens to cross non-public lands. This means that the nearly 56 million people who live there are only legally allowed to access 8% of the country. One particularly picturesque example of this problem was recently noted by the BBC, which discussed a large piece of public land that’s actually inaccessible due to being <a href="https://www.bbc.com/news/science-environment-68278444" data-wpel-link="external" target="_blank" rel="external">surrounded</a> by private land, forcing people to trespass in order to reach it.</p>
<p><a href="https://www.righttoroam.org.uk/" data-wpel-link="external" target="_blank" rel="external">Right to Roam</a> campaigner Jon Moses speaks with Rachel Donald on the latest Mongabay Newscast about a growing movement in England that stages creative events like group walks on private land to point out the benefits of public access for repairing degraded landscapes and improving the lives of everyday citizens, which are outlined in a new book, <a href="https://www.bloomsbury.com/uk/wild-service-9781526673312/" data-wpel-link="external" target="_blank" rel="external"><em>Wild Service: Why Nature Needs You</em></a><em>, </em>that he’s co-edited with Nick Hayes.</p>
<p>Listen here:</p>

<p>Freedom-to-roam laws aren’t widely recognized outside of Scandinavia and Europe, but Moses says these rights are fundamental to repairing the damage caused by centuries of private land ownership.</p>
<p>“I think that there needs to be a kind of rethinking really of [what] people’s place is in the landscape and how that intersects with a kind of new … vision of farming and a new relationship between people and nature as well.”</p>
<p>Among the reasons Moses says is given for the increase in private land ownership over the past few centuries is industrial agriculture, which he says isn’t benefiting the farmers all that much either. Moses says the reasons for decreases in the rights of “commoners,” as they’re referred to, to access and use common land in England were in part to suppress wage growth and quash locals’ autonomy.</p>
<p>“They’re really kind of explicit about this in the documentation, that we need to break common rights in order to create a kind of more dependent class of agricultural laborers that are reliant on a wage,” Moses says.</p>
<p>Subscribe to or follow the Mongabay Newscast wherever you listen to podcasts, from&nbsp;<a href="https://podcasts.apple.com/us/podcast/mongabay-newscast/id1155856616" data-wpel-link="external" target="_blank" rel="external">Apple</a>&nbsp;to&nbsp;<a href="https://open.spotify.com/show/66SkV6VkkoeiLFMT2cgh04" data-wpel-link="external" target="_blank" rel="external">Spotify</a>, and you can also listen to all episodes&nbsp;<a href="https://www.mongabay.com/podcast/" data-wpel-link="external" target="_blank" rel="external">here</a>&nbsp;on the Mongabay website, or download our free app for&nbsp;<a href="https://apps.apple.com/us/app/id1524511006" data-wpel-link="external" target="_blank" rel="external">Apple</a>&nbsp;and&nbsp;<a href="https://play.google.com/store/apps/details?id=com.mongabay.android.mongabay&amp;hl=en_US" data-wpel-link="external" target="_blank" rel="external">Android</a>&nbsp;devices to gain instant access to our latest episodes and all of our previous ones.</p>
<p><strong><em>Banner image:</em></strong><em>&nbsp;Thousands gather for a protest against the attempt to ban wild camping on Dartmoor. Campaigners gathered to raise ‘Old Crockern’ – a mythical spirit of the moor – on Stall Moor, owned by the landowner leading the ban. Image courtesy of Jon Moses.</em></p>
<p><strong><em>Rachel Donald&nbsp;</em></strong><em>is a climate corruption reporter and the creator of&nbsp;</em><a href="https://www.planetcritical.com/" data-wpel-link="external" target="_blank" rel="external"><em>Planet: Critical</em></a><em>, the podcast and newsletter for a world in crisis. Her latest thoughts can be found at </em><em>𝕏</em><em> via </em><a href="https://twitter.com/crisisreports" data-wpel-link="external" target="_blank" rel="external"><em>@CrisisReports</em></a><em> and at Bluesky via&nbsp;</em><a href="https://bsky.app/profile/racheldonald.bsky.social" data-wpel-link="external" target="_blank" rel="external"><em>@racheldonald.bsky.social</em></a><em>.</em></p>
<p><strong><em>Mike DiGirolamo</em></strong><em>&nbsp;is a host &amp; associate producer for Mongabay based in Sydney. He co-hosts and edits the Mongabay Newscast. Find him on&nbsp;</em><a href="http://www.linkedin.com/in/mike-digirolamo-135b0ab5" data-wpel-link="external" target="_blank" rel="external"><em>LinkedIn</em></a><em>,&nbsp;</em><a href="https://bsky.app/profile/mikedigirolamo.bsky.social" data-wpel-link="external" target="_blank" rel="external"><em>Bluesky</em></a><em>&nbsp;and&nbsp;</em><a href="https://www.instagram.com/midigirolamo/" data-wpel-link="external" target="_blank" rel="external"><em>Instagram</em></a><em>.</em></p>
<p><strong><em>Related Reading:</em></strong></p>
<blockquote data-secret="uiNsGIpdWy"><p><a href="https://news.mongabay.com/2020/10/public-lands-and-parks-are-our-common-heritage-an-interview-with-bruce-babbitt/" data-wpel-link="internal">Public lands and parks are our common heritage: Bruce Babbitt</a></p></blockquote>

<div id="single-article-footer">
<div id="single-article-meta">
<p><a href="https://mongabay.org/donate/?utm_source=mongabay.com&amp;utm_medium=bottom-of-news-post&amp;utm_campaign=support-our-journalism-2023" data-wpel-link="external" target="_blank" rel="external"><img src="https://imgs.mongabay.com/wp-content/uploads/sites/20/2022/01/15035219/support-our-journalism.jpg" width="480" height="258"></a> <span>
Article published by </span>
<span><a href="" data-wpel-link="internal"></a></span>
</p></div>
<div id="single-article-tags">
<p><a href="https://news.mongabay.com/list/activism/" rel="tag" data-wpel-link="internal">Activism</a>, <a href="https://news.mongabay.com/list/environment/" rel="tag" data-wpel-link="internal">Environment</a>, <a href="https://news.mongabay.com/list/environmental-activism/" rel="tag" data-wpel-link="internal">Environmental Activism</a>, <a href="https://news.mongabay.com/list/environmental-justice/" rel="tag" data-wpel-link="internal">environmental justice</a>, <a href="https://news.mongabay.com/list/environmental-philosophy/" rel="tag" data-wpel-link="internal">Environmental Philosophy</a>, <a href="https://news.mongabay.com/list/environmental-policy/" rel="tag" data-wpel-link="internal">Environmental Policy</a>, <a href="https://news.mongabay.com/list/featured/" rel="tag" data-wpel-link="internal">Featured</a>, <a href="https://news.mongabay.com/list/human-rights/" rel="tag" data-wpel-link="internal">Human Rights</a>, <a href="https://news.mongabay.com/list/interviews/" rel="tag" data-wpel-link="internal">Interviews</a>, <a href="https://news.mongabay.com/list/land-rights/" rel="tag" data-wpel-link="internal">Land Rights</a>, <a href="https://news.mongabay.com/list/land-use-change/" rel="tag" data-wpel-link="internal">Land Use Change</a>, <a href="https://news.mongabay.com/list/landscape-restoration/" rel="tag" data-wpel-link="internal">Landscape Restoration</a>, <a href="https://news.mongabay.com/list/nature-and-health/" rel="tag" data-wpel-link="internal">Nature And Health</a>, <a href="https://news.mongabay.com/list/podcast/" rel="tag" data-wpel-link="internal">Podcast</a>, <a href="https://news.mongabay.com/list/public-health/" rel="tag" data-wpel-link="internal">Public Health</a>, <a href="https://news.mongabay.com/list/public-lands/" rel="tag" data-wpel-link="internal">public lands</a></p><p>
<a href="https://news.mongabay.com/list/england/" rel="tag" data-wpel-link="internal">England</a>, <a href="https://news.mongabay.com/list/scotland/" rel="tag" data-wpel-link="internal">Scotland</a>, <a href="https://news.mongabay.com/list/united-kingdom/" rel="tag" data-wpel-link="internal">United Kingdom</a></p></div>
<a href="https://news.mongabay.com/2024/05/right-to-roam-movement-fights-to-give-the-commons-back-to-the-commoners/amp/?print" data-wpel-link="internal"><svg style="width:45px;height:35px;" fill="#669a00"><use xlink:href="#print"></use></svg>Print</a>
</div>


</article>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How and why to make a /now page on your site (197 pts)]]></title>
            <link>https://sive.rs/now2</link>
            <guid>40438960</guid>
            <pubDate>Wed, 22 May 2024 09:12:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://sive.rs/now2">https://sive.rs/now2</a>, See on <a href="https://news.ycombinator.com/item?id=40438960">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<article>
<header>


<small>2024-05-18</small>
</header>

<h2>
	Background
</h2>
<p>
	I used to wonder what my friend <a href="https://en.wikipedia.org/wiki/Benny_Lewis">Benny Lewis</a> was doing.
	He has <a href="https://www.fluentin3months.com/">a website</a> and social media accounts, but neither gave <strong>an overview of what he’s doing now</strong>.
</p><p>
	Then I realized some people might wonder the same about me.
	So in 2015, I made <a href="https://sive.rs/now">a /now page</a> on my website, saying <strong>what I’d tell a friend I hadn’t seen in a year</strong>.
</p><p>
	It has a nice side-effect of being a public declaration of priorities.
	It’s a good link to give people when <a href="https://sive.rs/n">saying no</a> to invitations and distractions.
</p><p>
	Word spread, and soon <strong><a href="https://nownownow.com/">hundreds of people</a> had a /now page on their personal website</strong>.
	So I made a site to showcase them all: <strong><a href="https://nownownow.com/">nownownow.com</a></strong> — (a static site generated by <a href="https://sive.rs/pg2">PostgreSQL functions</a>.)
	It currently has over <a href="https://nownownow.com/">2300 people</a> worldwide.
	This week I added browse by location and search.
</p>
<h2>
	Got a personal website? Add a /now page
</h2>
<p>
	The three main ingredients are:
</p>
<ol><li>
	a page, usually at URL /now, linked from your main menu, usually alongside /about
</li><li>
	an overview of what’s going on with you — what you’d tell a friend you hadn’t seen in a year
</li><li>
	the date it was last updated
</li></ol>
<h2>
	WordPress instructions:
</h2>
<p>
	In the left menu, under “<strong>Pages</strong>”, click “<strong>Add New Page</strong>”.
	Then, where it says “Add title”, replace that with just three letters: <strong>now</strong>.
	That will ensure the URL is /now, and after it’s posted, you can change the title to “What I’m doing now” or whatever.
</p>
<img src="https://sive.rs/images/now-wordpress-1.png" alt="screenshot to make /now page on wordpress">
<br>
<img src="https://sive.rs/images/now-wordpress-2.png" alt="screenshot to make /now page on wordpress">
<h2>
	Wix instructions:
</h2>
<p>
	On the left, under “<strong>Site Menu</strong>”, click “<strong>+ Add Page</strong>”.
	Call it <strong>Now</strong>, next to your “About” page.
	Click the (…) to its right, then to “<strong>SEO basics</strong>”, to edit “<strong>URL slug</strong>” and make sure it’s just the three letters: now
</p>
<img src="https://sive.rs/images/now-wix-1.png" alt="screenshot to make /now page on wix">
<br>
<img src="https://sive.rs/images/now-wix-2.png" alt="screenshot to make /now page on wix">
<br>
<img src="https://sive.rs/images/now-wix-3.png" alt="screenshot to make /now page on wix">

<h2>
	No website yet? Use <a href="https://bearblog.dev/">Bear</a>
</h2>
<p>
	If you don’t have a personal website yet, I highly recommend <a href="https://bearblog.dev/">Bear</a> at <a href="https://bearblog.dev/">BearBlog.dev</a>.
	It’s so simple, clean, and free.
	The owner and creator, <a href="https://herman.bearblog.dev/">Herman in South Africa</a>, runs it himself with great love.
	And no investors so no <a href="https://en.wikipedia.org/wiki/Enshittification">enshittification</a>.
	He plans to keep it alive <a href="https://herman.bearblog.dev/building-software-to-last-forever/">forever</a>.
</p><p>
	I believe in it so much that I told Herman I would be its godfather.
	If he ever can’t (or doesn’t want to) run it anymore, I will help run it, or fund a foundation to keep it alive.
</p><p>
	To create a /now page on Bear, click “<strong>Pages</strong>”, then “<strong>New page</strong>”.
	Then, after it says “<strong>title:</strong>”, type just three letters: <strong>now</strong>.
	That will ensure the URL is /now, and after it’s posted, you can change the title to “What I’m doing now” or whatever.
</p>
<img src="https://sive.rs/images/now-bear-1.png" alt="screenshot to make /now page on bearblog.dev">
<br>
<img src="https://sive.rs/images/now-bear-2.png" alt="screenshot to make /now page on bearblog.dev">
<h2>
	Got a /now page? I’ll add you to <a href="https://nownownow.com/">nownownow.com</a>
</h2>
<p>
	Once it’s live, just <a href="https://sive.rs/contact">email me your URL</a>, and I add it (by hand) to <a href="https://nownownow.com/">nownownow.com</a>.
	(This is also a good time to say hello, if you haven’t yet. I read and reply to every email.)
</p>
<a href="http://nownownow.com/"><img alt="" src="https://sive.rs/images/nowclock.jpg"></a>


</article>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Psion 5mx Emulator (134 pts)]]></title>
            <link>https://wuffs.org/WindEmu/index.html</link>
            <guid>40438434</guid>
            <pubDate>Wed, 22 May 2024 07:56:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wuffs.org/WindEmu/index.html">https://wuffs.org/WindEmu/index.html</a>, See on <a href="https://news.ycombinator.com/item?id=40438434">Hacker News</a></p>
<div id="readability-page-1" class="page"><hr><figure id="spinner"><center><strong>emscripten</strong></center></figure><p>Downloading...</p><div id="canvasContainer"><canvas id="canvas" oncontextmenu="event.preventDefault()" tabindex="-1"></canvas><p><img src="https://wuffs.org/WindEmu/cover.svg"></p></div><hr><hr><hr></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Alacritty – A fast, cross-platform, OpenGL terminal emulator (139 pts)]]></title>
            <link>https://github.com/alacritty/alacritty</link>
            <guid>40437535</guid>
            <pubDate>Wed, 22 May 2024 05:09:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/alacritty/alacritty">https://github.com/alacritty/alacritty</a>, See on <a href="https://news.ycombinator.com/item?id=40437535">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto">
    <a target="_blank" rel="noopener noreferrer nofollow" href="https://raw.githubusercontent.com/alacritty/alacritty/master/extra/logo/compat/alacritty-term%2Bscanlines.png"><img width="200" alt="Alacritty Logo" src="https://raw.githubusercontent.com/alacritty/alacritty/master/extra/logo/compat/alacritty-term%2Bscanlines.png"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Alacritty - A fast, cross-platform, OpenGL terminal emulator</h2><a id="user-content-alacritty---a-fast-cross-platform-opengl-terminal-emulator" aria-label="Permalink: Alacritty - A fast, cross-platform, OpenGL terminal emulator" href="#alacritty---a-fast-cross-platform-opengl-terminal-emulator"></a></p>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/alacritty/alacritty/blob/master/extra/promo/alacritty-readme.png"><img alt="Alacritty - A fast, cross-platform, OpenGL terminal emulator" src="https://github.com/alacritty/alacritty/raw/master/extra/promo/alacritty-readme.png"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">About</h2><a id="user-content-about" aria-label="Permalink: About" href="#about"></a></p>
<p dir="auto">Alacritty is a modern terminal emulator that comes with sensible defaults, but
allows for extensive <a href="#configuration">configuration</a>. By integrating with other
applications, rather than reimplementing their functionality, it manages to
provide a flexible set of <a href="https://github.com/alacritty/alacritty/blob/master/docs/features.md">features</a> with high performance.
The supported platforms currently consist of BSD, Linux, macOS and Windows.</p>
<p dir="auto">The software is considered to be at a <strong>beta</strong> level of readiness; there are
a few missing features and bugs to be fixed, but it is already used by many as
a daily driver.</p>
<p dir="auto">Precompiled binaries are available from the <a href="https://github.com/alacritty/alacritty/releases">GitHub releases page</a>.</p>
<p dir="auto">Join <a href="https://web.libera.chat/gamja/?channels=#alacritty" rel="nofollow"><code>#alacritty</code></a> on libera.chat if you have questions or looking for a quick help.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto">You can find an overview over the features available in Alacritty <a href="https://github.com/alacritty/alacritty/blob/master/docs/features.md">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Further information</h2><a id="user-content-further-information" aria-label="Permalink: Further information" href="#further-information"></a></p>
<ul dir="auto">
<li><a href="https://jwilm.io/blog/announcing-alacritty/" rel="nofollow">Announcing Alacritty, a GPU-Accelerated Terminal Emulator</a> January 6, 2017</li>
<li><a href="https://www.youtube.com/watch?v=qHOdYO3WUTk" rel="nofollow">A talk about Alacritty at the Rust Meetup January 2017</a> January 19, 2017</li>
<li><a href="https://jwilm.io/blog/alacritty-lands-scrollback/" rel="nofollow">Alacritty Lands Scrollback, Publishes Benchmarks</a> September 17, 2018</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Alacritty can be installed by using various package managers on Linux, BSD,
macOS and Windows.</p>
<p dir="auto">Prebuilt binaries for macOS and Windows can also be downloaded from the
<a href="https://github.com/alacritty/alacritty/releases">GitHub releases page</a>.</p>
<p dir="auto">For everyone else, the detailed instructions to install Alacritty can be found
<a href="https://github.com/alacritty/alacritty/blob/master/INSTALL.md">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Requirements</h3><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>At least OpenGL ES 2.0</li>
<li>[Windows] ConPTY support (Windows 10 version 1809 or higher)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Configuration</h2><a id="user-content-configuration" aria-label="Permalink: Configuration" href="#configuration"></a></p>
<p dir="auto">You can find the documentation for Alacritty's configuration in <code>man 5 alacritty</code>, or by looking at <a href="https://alacritty.org/config-alacritty.html" rel="nofollow">the website</a> if you do not have the manpages
installed.</p>
<p dir="auto">Alacritty doesn't create the config file for you, but it looks for one in the
following locations:</p>
<ol dir="auto">
<li><code>$XDG_CONFIG_HOME/alacritty/alacritty.toml</code></li>
<li><code>$XDG_CONFIG_HOME/alacritty.toml</code></li>
<li><code>$HOME/.config/alacritty/alacritty.toml</code></li>
<li><code>$HOME/.alacritty.toml</code></li>
</ol>
<p dir="auto">On Windows, the config file will be looked for in:</p>
<ul dir="auto">
<li><code>%APPDATA%\alacritty\alacritty.toml</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">A guideline about contributing to Alacritty can be found in the
<a href="https://github.com/alacritty/alacritty/blob/master/CONTRIBUTING.md"><code>CONTRIBUTING.md</code></a> file.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">FAQ</h2><a id="user-content-faq" aria-label="Permalink: FAQ" href="#faq"></a></p>
<p dir="auto"><strong><em>Is it really the fastest terminal emulator?</em></strong></p>
<p dir="auto">Benchmarking terminal emulators is complicated. Alacritty uses
<a href="https://github.com/alacritty/vtebench">vtebench</a> to quantify terminal emulator
throughput and manages to consistently score better than the competition using
it. If you have found an example where this is not the case, please report a
bug.</p>
<p dir="auto">Other aspects like latency or framerate and frame consistency are more difficult
to quantify. Some terminal emulators also intentionally slow down to save
resources, which might be preferred by some users.</p>
<p dir="auto">If you have doubts about Alacritty's performance or usability, the best way to
quantify terminal emulators is always to test them with <strong>your</strong> specific
usecases.</p>
<p dir="auto"><strong><em>Why isn't feature X implemented?</em></strong></p>
<p dir="auto">Alacritty has many great features, but not every feature from every other
terminal. This could be for a number of reasons, but sometimes it's just not a
good fit for Alacritty. This means you won't find things like tabs or splits
(which are best left to a window manager or <a href="https://github.com/tmux/tmux">terminal multiplexer</a>) nor
niceties like a GUI config editor.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Alacritty is released under the <a href="https://github.com/alacritty/alacritty/blob/master/LICENSE-APACHE">Apache License, Version 2.0</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA["No way to prevent this" say users of only language where this regularly happens (188 pts)]]></title>
            <link>https://xeiaso.net/shitposts/no-way-to-prevent-this/CVE-2024-4323/</link>
            <guid>40437379</guid>
            <pubDate>Wed, 22 May 2024 04:36:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xeiaso.net/shitposts/no-way-to-prevent-this/CVE-2024-4323/">https://xeiaso.net/shitposts/no-way-to-prevent-this/CVE-2024-4323/</a>, See on <a href="https://news.ycombinator.com/item?id=40437379">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article>
    
    <p>
        Published on <time datetime="2024-05-21">05/21/2024</time>, 232 words, 1 minutes to read
    </p>

    

    
        
    

    

    

    
        <figure><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/hero/sad-business-man.avif"><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/hero/sad-business-man.webp"><img alt="An image of A forlorn business man resting his head on a brown wall next to a window." loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/hero/sad-business-man.jpg"></picture></figure>
        <small>A forlorn business man resting his head on a brown wall next to a window. - Photo by Andrea Piacquadio, source: Pexels</small>
    

    <p>In the hours following the release of <a href="https://www.tenable.com/security/research/tra-2024-17">CVE-2024-4323</a> for the project <a href="https://fluentbit.io/">Fluent Bit</a>, site reliability workers
and systems administrators scrambled to desperately rebuild and patch all their systems to fix a vulnerability in HTTP parsing code that allows for heap corruption and arbitrary code execution by making a HTTP GET request with a megabyte of the letter 'A' in its body. This is due to the affected components being
written in C, the only programming language where these vulnerabilities regularly happen. "This was a terrible tragedy, but sometimes
these things just happen and there's nothing anyone can do to stop them," said programmer Prince Marcel O'Keefe, echoing statements
expressed by hundreds of thousands of programmers who use the only language where 90% of the world's memory safety vulnerabilities have
occurred in the last 50 years, and whose projects are 20 times more likely to have security vulnerabilities. "It's a shame, but what can
we do? There really isn't anything we can do to prevent memory safety vulnerabilities from happening if the programmer doesn't want to
write their code in a robust manner." At press time, users of the only programming language in the world where these vulnerabilities
regularly happen once or twice per quarter for the last eight years were referring to themselves and their situation as "helpless."</p>


    <hr>

    

    

    <p>Facts and circumstances may have changed since publication. Please contact me before jumping to conclusions if something seems wrong or unclear.</p>

    <p>Tags: </p>
</article>
        </div><div>
            <p>Copyright 2012-2024 Xe Iaso (Christine Dodrill). Any and all opinions listed here are my own and
                not representative of any of my employers, past, future, and/or present.</p>
            
            <p>Served by xesite v4 (/nix/store/lq13hrw9dczjbk4miixwz5w14s3737cc-xesite_v4-20240510/bin/xesite) with site version 
                        <a href="https://github.com/Xe/site/commit/7e2e630284d18bb633bec873b9eedd0cd6dc08c1">7e2e6302</a>
                    , source code available <a href="https://github.com/Xe/site">here</a>.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Scandal at America's top science fair (260 pts)]]></title>
            <link>https://www.karlstack.com/p/exclusive-scandal-at-americas-top</link>
            <guid>40436651</guid>
            <pubDate>Wed, 22 May 2024 02:09:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.karlstack.com/p/exclusive-scandal-at-americas-top">https://www.karlstack.com/p/exclusive-scandal-at-americas-top</a>, See on <a href="https://news.ycombinator.com/item?id=40436651">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>The Regeneron International Science and Engineering Fair (ISEF) is the world’s largest and most prestigious science fair. ISEF 2024 took place last week (May 11-17) at the Los Angeles Convention Center. </p><ul><li><p><a href="https://www.societyforscience.org/isef/" rel="">https://www.societyforscience.org/isef/</a></p></li></ul><p><span>Krish Pai won first place in the environmental engineering division, which came with a prize of $55,000 and the </span><em>Regeneron Young Scientist Award</em><span>.</span></p><p>Pai cheated.</p><div id="youtube2-JIRb2SGqC-U" data-attrs="{&quot;videoId&quot;:&quot;JIRb2SGqC-U&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/JIRb2SGqC-U?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p><strong><a href="https://c212.net/c/link/?t=0&amp;l=en&amp;o=4170139-1&amp;h=1979417570&amp;u=https%3A%2F%2Fprojectboard.world%2Fisef%2Fproject%2Fenev081-efficiently-discovering-plastic-degrading-microbes&amp;a=Krish+Pai" rel="">Krish Pai</a></strong><span>, 17, of Del Mar, California, received the second Regeneron Young Scientist Award of $50,000 for his machine-learning research to identify microbial genetic sequences that can be modified to biodegrade plastic. His new software, called Microby, scans databases of microorganisms and determines which ones can be changed genetically to biodegrade plastics. In tests, he identified two microorganisms that can be genetically modified to degrade plastic at a cost he believes would be ten times less than traditional recycling.</span></p><div data-attrs="{&quot;url&quot;:&quot;https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><p>Thank you for reading Karlstack. This post is public so feel free to share it.</p><p data-attrs="{&quot;url&quot;:&quot;https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a href="https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div><p>Pai is an intern at the University of Southern California. </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png" width="782" height="297" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:297,&quot;width&quot;:782,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:&quot;&quot;,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff285f9de-1d16-4b06-ae24-14125ffa29dd_782x297.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I had reservations about writing on a 17-year-old, so I consulted with a few more senior journalists to discuss the ethical considerations.</p><blockquote><p>Of course it's worth covering, major media outlets, like CNN cover science fairs all the time. 17 is old enough to get charged as an adult in every jurisdiction. Egregious conduct by 17 year olds is not excusable. Important to bust this for several reasons, one of which is that he's clearly on the fast track to a high level gig in neuroscience. Can we investigate this? If you won't, we will.</p><p>— Anonymous journalist </p><p>It's completely fine to publish on this. It's a big award, a prestigious organization—but you might angle it against the org, which allowed this to pass its process.</p><p>— Anonymous journalist </p><p>Think of all the other kids who got fucked over.</p><p>— Anonymous journalist </p></blockquote><p>Plus, he is already outed extensively on Reddit, Twitter, and via a Google Doc currently circulating that thousands of people have seen. This anonymous Google Docs dossier is the source of my article and is signed by, ‘‘ISEF 2024 and future competitors, ISEF &amp; Society for Science alums, Concerned researchers.’’</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png" width="700" height="275" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:242,&quot;width&quot;:616,&quot;resizeWidth&quot;:700,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F73e32a5a-63f1-46e9-8507-f33e9dcdc601_616x242.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png" width="546" height="240.05172413793105" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:204,&quot;width&quot;:464,&quot;resizeWidth&quot;:546,&quot;bytes&quot;:30699,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbbfae896-7bc9-4d34-b003-9f4559c65ab2_464x204.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png" width="538" height="195.22362869198312" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/df6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:172,&quot;width&quot;:474,&quot;resizeWidth&quot;:538,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdf6d6c9e-bda2-4bd0-a03a-21c3a0fd9f7c_474x172.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png" width="547" height="414.14004376367615" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:346,&quot;width&quot;:457,&quot;resizeWidth&quot;:547,&quot;bytes&quot;:36545,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8184a11d-6baa-41c1-b25e-68b49b72dffe_457x346.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png" width="628" height="126.8313725490196" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:103,&quot;width&quot;:510,&quot;resizeWidth&quot;:628,&quot;bytes&quot;:12996,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1ef054b-46ea-40e3-ba5b-54765b641b41_510x103.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png" width="591" height="136" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:136,&quot;width&quot;:591,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:14570,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc63055fc-628e-4989-a6d4-af2ee8e2db6c_591x136.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png" width="609" height="321" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e129c275-9c99-437e-babf-b62c41258663_609x321.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:321,&quot;width&quot;:609,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:42320,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe129c275-9c99-437e-babf-b62c41258663_609x321.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png" width="589" height="240.35959595959596" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:202,&quot;width&quot;:495,&quot;resizeWidth&quot;:589,&quot;bytes&quot;:21711,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd0efe3f5-3a48-49b7-a698-27f1cca19ac6_495x202.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png" width="595" height="428" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:428,&quot;width&quot;:595,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:44748,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F243a07f9-f654-4cff-8dd9-a2d5d61f51af_595x428.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png" width="595" height="143.3582089552239" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:113,&quot;width&quot;:469,&quot;resizeWidth&quot;:595,&quot;bytes&quot;:12244,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F00b82b68-97bf-4e7f-abbb-ce23759185c7_469x113.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>You can download the dossier here:</p><p>As per the dossier: </p><blockquote><p>The ISEF winner student uses the following image as a key claim of the 100% plastic degraded in their presentation and more:</p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png" width="592" height="340.5857740585774" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:275,&quot;width&quot;:478,&quot;resizeWidth&quot;:592,&quot;bytes&quot;:129688,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F27889895-cd78-4fd6-a9f3-f0b74a8a0f5d_478x275.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><span>However, the image boxed in red above is a </span><strong>falsified image</strong><span> taken from online, and has had mirroring performed in the hopes that no one would notice.</span></p><p><span>The original image can be found here: </span><a href="https://www.mci.edu/en/news-filter-en/228-researchnews/4728-microorganisms-can-degrade-plastics" rel="">https://www.mci.edu/en/news-filter-en/228-researchnews/4728-microorganisms-can-degrade-plastics</a><span> and is from a European University Ulysseus lab testing </span><em><span>Ideonella sakaiensis</span><strong>,</strong></em><span> a completely different organism than the one the Regeneron ISEF finalist used.</span></p><p><span>The ISEF finalist </span><strong>very clearly labels</strong><span> the figure as: ‘‘Plastic degraded by discovered microbes’’, which is clearly false - a clear cut case of fraud.</span><strong> The ISEF Finalist is taking other people’s data for completely different research projects, and claiming it as their own.</strong></p></blockquote><p><strong><a href="https://www.mci.edu/en/news-filter-en/228-researchnews/4728-microorganisms-can-degrade-plastics" rel="">Original image from European University Ulysseus lab:</a></strong></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png" width="637" height="391.53664302600475" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:260,&quot;width&quot;:423,&quot;resizeWidth&quot;:637,&quot;bytes&quot;:136230,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ea8a10d-61ef-4fd4-a018-a775fa009b58_423x260.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p>The ISEF finalist flipped the image to generate the below image shown on their poster, presentation, etc:</p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png" width="656" height="314.9380530973451" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:217,&quot;width&quot;:452,&quot;resizeWidth&quot;:656,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffd9735c5-2e52-4805-abbe-56da743e8d3b_452x217.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p>If you compare the shapes of the plastics as seen above, you will quickly notice the Regeneron ISEF Finalist’s figure is a mirror image of the past published image! This is blatant data fabrication and research fraud.&nbsp;</p><p>The image was not only altered by mirroring it, but was combined with another image by the finalist. This goes to show this is not an accident — the Regeneron ISEF finalist intentionally manipulated the image to play it off as their own creation and result. They also placed an image of themself right next to this result, making it seem like it was their own data.</p></blockquote><p>In the spotting-academic-fraud business, we call this a slam dunk.</p><p>But there’s more.</p><blockquote><p>The researcher also steals the wavelength vs reflectivity plot as shown (top right), making it seem like it came from their data:</p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png" width="551" height="397.5893271461717" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/cc86839a-dac3-4540-954a-a4101c2603f5_431x311.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:311,&quot;width&quot;:431,&quot;resizeWidth&quot;:551,&quot;bytes&quot;:71570,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fcc86839a-dac3-4540-954a-a4101c2603f5_431x311.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption><em>From the ISEF finalist’s ProjectBoard, the figure in question is in the top right.</em></figcaption></figure></div><blockquote><p>This figure is right next to a picture of themself to make it seem like it was their own collection and creation.</p><p><strong>Original source by Zhu et al., 2019:</strong></p><p><a href="https://www.researchgate.net/publication/332378632_Plastic_Solid_Waste_identification_system_based_on_Near_Infrared_Spectroscopy_in_combination_with_support_vector_machine" rel="">(PDF) Plastic Solid Waste identification system based on Near Infrared Spectroscopy in combination with support vector machine</a></p></blockquote><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png" width="648" height="531" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:413,&quot;width&quot;:504,&quot;resizeWidth&quot;:648,&quot;bytes&quot;:79262,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F920d68a4-24da-411f-8aa2-7c1a1f7ecf20_504x413.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>And much more. </p><p>The dossier thoroughly documents numerous additional instances of theft of figures, exaggerated claims of novelty, misappropriation of a previous researcher's device, plagiarism, citation fraud, similarities to past winning ISEF projects, and potential scientific inaccuracies. It’s a brutal takedown. I find this evidence highly compelling; however, I am not including it all in my article to save space. </p><p>I strongly encourage you to read the dossier yourself:</p><p>Here's another example of a stolen image. This appeared in Pai’s slide and research paper; he claimed to have built a near infrared spectrometer: </p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png" width="483" height="549.2468827930174" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a4384119-2591-4419-ad61-81c7accd21c5_401x456.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:456,&quot;width&quot;:401,&quot;resizeWidth&quot;:483,&quot;bytes&quot;:149249,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa4384119-2591-4419-ad61-81c7accd21c5_401x456.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>This image was taken from a Rasberry Pi article </span><a href="https://www.raspberrypi.com/news/award-winning-plastic-scanner/" rel="">from 2021</a><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png" width="536" height="459.6269430051814" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9efae948-747c-4be7-977f-8baab3bc4241_386x331.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:331,&quot;width&quot;:386,&quot;resizeWidth&quot;:536,&quot;bytes&quot;:115962,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9efae948-747c-4be7-977f-8baab3bc4241_386x331.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><blockquote><p><span>[Pai] </span><strong>does not give any credit </strong><span>to the original creator of the device, or its images and acts like they “built a custom sensor” and “developed [the] tool.” </span><strong>This is very clearly an attempt to conceal the original creator …&nbsp;it is clear that the finalist did not actually build the device, and faked this part completely.</strong></p></blockquote><p>These actions, while serious, should not define Pai’s entire life. Everyone makes mistakes — Lord knows I did plenty of stupid, immoral things when I was 17 — and there is always the opportunity for growth and redemption. I sincerely hope that Pai repents and strives to become a more ethical person. In my view, he should still have the opportunity to attend a good university and build a long, accomplished career.</p><p>However, his award should be revoked. The current situation is unfair to the other participants. The fraud is clear. The $55,000 prize should be given to the runner-up.</p><p>This case highlights a significant oversight failure by the world's most prestigious science fair. The responsibility now lies with The International Science and Engineering Fair to take action and issue a statement.</p><p>I anticipate that the mainstream media will cover this story later this week.</p><p>Expect to see this story on CNN soon.</p><p data-attrs="{&quot;url&quot;:&quot;https://www.karlstack.com/p/exclusive-scandal-at-americas-top/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.karlstack.com/p/exclusive-scandal-at-americas-top/comments" rel=""><span>Leave a comment</span></a></p><p data-attrs="{&quot;url&quot;:&quot;https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.karlstack.com/p/exclusive-scandal-at-americas-top?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tillywork: Open-Source Work Management (102 pts)]]></title>
            <link>https://github.com/tillywork/tillywork</link>
            <guid>40436560</guid>
            <pubDate>Wed, 22 May 2024 01:54:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/tillywork/tillywork">https://github.com/tillywork/tillywork</a>, See on <a href="https://news.ycombinator.com/item?id=40436560">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">tillywork</h2><a id="user-content-tillywork" aria-label="Permalink: tillywork" href="#tillywork"></a></p>
<p dir="auto"><a href="https://tilly.work/" rel="nofollow"><img src="https://camo.githubusercontent.com/0263e2a3b1f7707cce4bd29b16d2598a10e6c7f75ce82a33571b1c80018519d6/68747470733a2f2f63646e2e74696c6c792e776f726b2f6769746875622e706e67" alt="tillywork logo" data-canonical-src="https://cdn.tilly.work/github.png"></a></p>
<p dir="auto">Welcome to <strong>tillywork</strong>—an open-source work management platform tailored for dynamic teams.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Modules</h2><a id="user-content-modules" aria-label="Permalink: Modules" href="#modules"></a></p>
<p dir="auto">tillywork addresses a variety of team requirements through three dedicated modules:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">1. Project Management</h3><a id="user-content-1-project-management" aria-label="Permalink: 1. Project Management" href="#1-project-management"></a></p>
<p dir="auto">Manage timelines, allocate resources, and monitor deliverables for your projects.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">2. Sales CRM (Coming next)</h3><a id="user-content-2-sales-crm-coming-next" aria-label="Permalink: 2. Sales CRM (Coming next)" href="#2-sales-crm-coming-next"></a></p>
<p dir="auto">Customer relationship management, sales tracking, and performance analysis.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">3. Agile Projects (Coming soon)</h3><a id="user-content-3-agile-projects-coming-soon" aria-label="Permalink: 3. Agile Projects (Coming soon)" href="#3-agile-projects-coming-soon"></a></p>
<p dir="auto">Product roadmaps, sprint planning, and issue tracking.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li><strong>Open Source</strong>: Customize and extend tillywork as per your specific needs.</li>
<li><strong>Comprehensive Toolset</strong>: Possesses a range of tools covering project oversight, sales management, and issue resolution.</li>
<li><strong>Intuitive User Interface</strong>: Features a straightforward, user-friendly interface (Material 3 anyone?)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contact</h2><a id="user-content-contact" aria-label="Permalink: Contact" href="#contact"></a></p>
<p dir="auto">For further details and support, please visit <a href="https://tilly.work/" rel="nofollow">our website</a> or join <a href="https://discord.gg/Ttn4WeNJbb" rel="nofollow">our Discord</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting started" href="#getting-started"></a></p>
<ul dir="auto">
<li>Clone the repository <code>git clone https://github.com/tillywork/tillywork.git</code></li>
<li>Install Postgres on your device</li>
<li>Install dependancies <code>npm install</code></li>
<li>Copy .env.example and rename to .env <code>cp .env.example .env</code> and update the values</li>
<li>Run the app <code>npm run dev</code></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">We invite contributions to tillywork! If you have ideas for bug fixes, enhancements, or documentation improvements, please fork the repository and create a pull request.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">tillywork is available under the <a href="https://github.com/tillywork/tillywork/blob/main/LICENSE">MIT License</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Road to Common Lisp (2018) (186 pts)]]></title>
            <link>https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/</link>
            <guid>40435771</guid>
            <pubDate>Tue, 21 May 2024 23:59:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/">https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/</a>, See on <a href="https://news.ycombinator.com/item?id=40435771">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-blog-entry"><article><p>Posted on August 27th, 2018.</p><p>I've gotten a bunch of emails asking for advice on how to learn Common Lisp in
the present day.  I decided to write down all the advice I've been giving
through email and social media posts in the hopes that someone might find it
useful.</p>

<p>One disclaimer up front: this is <em>a</em> road to Common Lisp, not <em>the</em> road to
Common Lisp.  It's what I followed (without some of the dead ends) and has
a <em>lot</em> of my personal opinions baked in, but it is by no means the only way to
learn the language.</p>

<p>This post has been translated into
<a href="https://gist.github.com/y2q-actionman/49d7587912b2786eb68643afde6ca192">Japanese</a>.
I can't vouch for the accuracy of any translations.</p>

<ol><li><a href="#s1-context">Context</a><ol><li><a href="#s2-history">History</a></li><li><a href="#s3-consequences">Consequences</a><ol><li><a href="#s4-escaping-the-hamster-wheel-of-backwards-incompatibility">Escaping the Hamster Wheel of Backwards Incompatibility</a></li><li><a href="#s5-practicality-begets-purity">Practicality Begets Purity</a></li><li><a href="#s6-extensibility">Extensibility</a></li><li><a href="#s7-power">Power</a></li><li><a href="#s8-ugliness">Ugliness</a></li></ol></li></ol></li><li><a href="#s9-a-road-to-learning-common-lisp">A Road to Learning Common Lisp</a><ol><li><a href="#s10-get-a-lisp">Get a Lisp</a></li><li><a href="#s11-pick-an-editor">Pick an Editor</a></li><li><a href="#s12-hello-lisp">Hello, Lisp</a></li><li><a href="#s13-a-gentle-introduction">A Gentle Introduction</a></li><li><a href="#s14-getting-practical">Getting Practical</a></li><li><a href="#s15-make-something">Make Something</a></li><li><a href="#s16-lisp-as-a-system">Lisp as a System</a></li><li><a href="#s17-learning-paradigms">Learning Paradigms</a></li><li><a href="#s18-switch-things-up">Switch Things Up</a></li><li><a href="#s19-recipes-for-success">Recipes for Success</a></li><li><a href="#s20-final-patterns">Final Patterns</a></li></ol></li><li><a href="#s21-where-to-go-from-here">Where to Go From Here</a><ol><li><a href="#s22-macros">Macros</a></li><li><a href="#s23-object-oriented-programming-with-clos">Object-Oriented Programming with CLOS</a></li><li><a href="#s24-low-level-programming">Low-Level Programming</a></li><li><a href="#s25-web-development">Web Development</a></li><li><a href="#s26-game-development">Game Development</a></li><li><a href="#s27-window-management">Window Management</a></li><li><a href="#s28-unit-testing">Unit Testing</a></li><li><a href="#s29-more-implementations">More Implementations</a></li></ol></li><li><a href="#s30-modern-common-lisp">Modern Common Lisp</a><ol><li><a href="#s31-structure">Structure</a><ol><li><a href="#s32-packages">Packages</a></li><li><a href="#s33-systems">Systems</a></li><li><a href="#s34-projects">Projects</a></li><li><a href="#s35-recap">Recap</a></li></ol></li><li><a href="#s36-common-libraries">Common Libraries</a><ol><li><a href="#s37-alexandria">Alexandria</a></li><li><a href="#s38-bordeaux-threads">Bordeaux Threads</a></li><li><a href="#s39-cffi">CFFI</a></li><li><a href="#s40-cl-ppcre">CL-PPCRE</a></li><li><a href="#s41-drakma">Drakma</a></li><li><a href="#s42-iterate">Iterate</a></li><li><a href="#s43-local-time">local-time</a></li><li><a href="#s44-lparallel">lparallel</a></li><li><a href="#s45-named-readtables">Named Readtables</a></li><li><a href="#s46-roswell">Roswell</a></li><li><a href="#s47-series">SERIES</a></li><li><a href="#s48-st-json">st-json</a></li><li><a href="#s49-usocket">usocket</a></li></ol></li></ol></li><li><a href="#s50-good-luck">Good Luck!</a></li></ol>

<h2 id="s1-context"><a href="#s1-context">Context</a></h2>

<p>I think it's important to have a sense of where Common Lisp came from and what
kind of a language it is before you start learning it.  There are some things
that will seem very strange if you're coming straight from modern languages,
but will make more sense if you've got a bit of background context.</p>

<h3 id="s2-history"><a href="#s2-history">History</a></h3>

<p>Common Lisp has a long, deep history.  I'm not going to try to cover it all here
— if you're interested you should check out some of the following (in roughly
increasing order of detail):</p>

<ul>
<li>Wikipedia's <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)#History">History of Lisp</a> and <a href="https://en.wikipedia.org/wiki/Common_Lisp#History">History of Common Lisp</a>.</li>
<li>The <a href="http://www.gigamonkeys.com/book/introduction-why-lisp.html#where-it-began">Where it Began section in Practical Common Lisp</a>.</li>
<li>The <a href="https://www.cs.cmu.edu/Groups//AI/lang/lisp/faq/lisp_2.faq">History: Where did Lisp come from?</a> section of the comp.lang.lisp FAQ.</li>
<li><a href="http://www.nhplace.com/kent/Papers/cl-untold-story.html">Common Lisp: the Untold Story</a> by Kent Pitman.</li>
<li><a href="https://www.dreamsongs.com/Files/HOPL2-Uncut.pdf">The Evolution of Lisp</a> by Guy Steele and Richard Gabriel.</li>
</ul>

<p>I realize you probably won't want to read all of the links above immediately, so
here's a whirlwind tour of sixty years of Lisp.</p>

<p>Lisp began in the late 1950's.  It was invented by John McCarthy at MIT.</p>

<p>Over the next twenty or so years various versions and dialects of Lisp grew and
flourished.  Some of the more notable dialects were Maclisp, BBN Lisp/Interlisp,
Franz Lisp, Spice Lisp, and Lisp Machine Lisp.  There were others too.  The
point is that there were a <em>lot</em> of different implementations, all growing,
changing, and trying out different things.</p>

<p>(Scheme also originated in this time frame, but took a very different route and
diverged from the path we're looking at.  I won't cover Scheme in this post.)</p>

<p>In the early 1980s people decided that having a whole slew of
mutually-incompatible dialects of Lisp might be not be ideal.  An effort was
made to take these different languages that had grown organically and produce
one common language that would satisfy the needs of everyone (or at least
a reasonable subset of "everyone").  In 1984 the first edition of Guy Steele's
<a href="https://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html">Common Lisp: the Language</a> was published.</p>

<p>If you do some math you'll see that at the time the book was published Lisp had
around twenty-five years of real-world use, experimentation, experience, and
history to draw upon.  Even so, the book alone didn't quite satisfy everyone and
in 1986 a committee (X3J13) was formed to produce an ANSI specification for
Common Lisp.</p>

<p>While the committee worked on the standardization process, in 1990 the second
edition of Common Lisp: the Language was published.  This was more
comprehensive and contained some of the things the committee was working on
(see the comp.lang.lisp FAQ linked above for more on this).  At this point the
Lisp family of languages had over thirty years of experience and history to
draw upon.  For comparison: Python (a "modern" language many people think of as
also being "kind of old") <a href="https://en.wikipedia.org/wiki/History_of_Python#Early_history">was released</a> for the first time the
following year.</p>

<p>In 1992 the X3J13 committee published the first draft of the new Common Lisp
ANSI standard for public review (see Pitman's paper).  The draft was approved in
1994 and the approved specification was finally published in 1995.  At this
point Lisp was over thirty-five years old.  The first version of Ruby <a href="https://en.wikipedia.org/wiki/Ruby_(programming_language)#First_publication">was
released</a> in December of that year.</p>

<p>That's the end of the history lesson.  There has not been another revision of
the ANSI specification of Common Lisp.  The version published in 1995 is the one
that is still used today — if you see something calling itself "an
implementation of Common Lisp" today, that is the specification it's referring
to.</p>

<h3 id="s3-consequences"><a href="#s3-consequences">Consequences</a></h3>

<p>I wanted to give you a quick overview of the history of Common Lisp because I
want you to know what you're getting yourself into.  I want you to realize that
Common Lisp is a stable, large, practical, extensible, ugly language.
Understanding these characteristics will make a lot of things make more sense
as you learn the language, and I want to talk a little bit more about each of
them before I start offering recommendations.</p>

<h4 id="s4-escaping-the-hamster-wheel-of-backwards-incompatibility"><a href="#s4-escaping-the-hamster-wheel-of-backwards-incompatibility">Escaping the Hamster Wheel of Backwards Incompatibility</a></h4>

<p>If you're coming from other languages, you're probably used to things breaking
when you "upgrade" your language implementation and/or libraries.  If you want
to run Ruby code you wrote ten years ago on the latest version of Ruby, it's
probably going to take some effort to update it.  My current day job is in Scala,
and if a library's last activity is more than 2 or 3 years old on Github I just
assume it won't work without a significant amount of screwing around on my part.
The Hamster Wheel of Backwards Incompatibility we deal with every day is a fact
of life in most modern languages, though some are certainly better than others.</p>

<p>If you learn Common Lisp, this is usually not the case.  In the next section of
this post I'll be recommending a book written in 1990.  You can run its code,
unchanged, in a Common Lisp implementation released last month.  After years of
jogging on the Hamster Wheel of Backwards Incompatibility I cannot tell you how
much of a <em>relief</em> it is to be able to write code and reasonably expect it to
still work in twenty years.</p>

<p>Of course, this is only the case for the language itself — if you depend on any
libraries there's always the chance they might break when you update them.  But
I've found the stability of the core language is contagious, and overall the
Common Lisp community seems fairly good about maintaining backwards
compatibility.</p>

<p>I'll be honest though: there are exceptions.  As you learn the language and
start using libraries you'll start noticing some library authors who don't
bother to document and preserve stable APIs for their libraries, and if
staying off the Hamster Wheel is important to you you'll learn to avoid relying
on code written by those people as much as possible.</p>

<h4 id="s5-practicality-begets-purity"><a href="#s5-practicality-begets-purity">Practicality Begets Purity</a></h4>

<p>Another thing to understand about Common Lisp is that it's a large, practical
language.  The second edition of Common Lisp: the Language (usually abbreviated
as "CLtL2" by Common Lisp programmers) is 971 pages long, not including the
preface, references, or index.  You can get a surprising amount done by writing
pure Common Lisp without much extra support.</p>

<p>When programming applications in Common Lisp people will often depend on
a small(ish) number of stable libraries, and library writers often try to
minimize dependencies by utilizing as much of the core language as possible.
I try to stick to fewer than ten or so dependencies for my applications and no
more than two or three for my libraries (preferably zero, if possible), but I'm
probably a bit more conservative than most folks.  I <em>really</em> don't like the
Hamster Wheel.</p>

<p>It's also worth noting that since Common Lisp has been around and stable for so
long, it has <em>libraries</em> older and more stable than many programming languages.
For example: Bordeaux Threads (the de-facto threading library for Common Lisp)
was first proposed in 2004 and released soon after (2006 at the latest but
possibly earlier, it's hard to tell because so many links are dead now), which
makes it about fourteen years old.  So yes, threading is handled by a library,
but I'm not worried about it breaking my code in the next decade or two.</p>

<p>My advice is this: as you learn Common Lisp and look for libraries, try to
suppress the voice in the back of your head that says "This project was last
updated six years ago?  That's probably abandoned and broken."  The stability of
Common Lisp means that sometimes libraries can just be <em>done</em>, not <em>abandoned</em>,
so don't dismiss them out of hand.</p>

<h4 id="s6-extensibility"><a href="#s6-extensibility">Extensibility</a></h4>

<p>Part of Common Lisp's practicality comes from its extensibility.  No one has
been clamoring for a new version of the specification that adds features
because Common Lisp's extensibility allows users to add new features to the
language as plain old libraries, without having to alter the core language.
Macros are what might come to mind when you hear "Lisp extensibility", and of
course that's part of it.  Macros allow users to write libraries that would
need to be core language features in other languages.</p>

<p>Common Lisp doesn't include string interpolation.  You want it?  No problem, you
don't have to wait for <a href="https://docs.scala-lang.org/overviews/core/string-interpolation.html">Scala
2.10</a> or
<a href="https://www.python.org/dev/peps/pep-0498/">Python 3.6</a>, just <a href="https://edicl.github.io/cl-interpol/">use
a library</a>.</p>

<p>Want to try some nondeterministic programming without any boilerplate?  <a href="https://nikodemus.github.io/screamer/">Grab
a library</a>.</p>

<p>Pattern matching syntax can make for some really beautiful, readable code.
Common Lisp doesn't include it, but of course <a href="https://github.com/guicho271828/trivia/wiki/What-is-pattern-matching%3F-Benefits%3F">there's a library</a>.</p>

<p>Enjoying algebraic data types in Haskell or Scala?  Here's your
<a href="https://github.com/tarballs-are-good/cl-algebraic-data-type">library</a>.</p>

<p>All of these libraries rely on macros to make using them feel seamless.  Of
course you could <em>do</em> all of that without macros, but you've have to add a layer
of boilerplate to manage evaluation.  This:</p>

<pre><code>(match foo
  '(list x y z) (lambda (x y z) (+ x y z))
  '(vector x y) (lambda (x y) (- x y)))
</code></pre>

<p>just doesn't flow off the fingers like:</p>

<pre><code>(match foo
  ((list x y z) (+ x y z))
  ((vector x y) (- x y)))
</code></pre>

<p>No one's up in arms trying to get a new revision of the Common Lisp standard to
add pattern matching because you can write it as a library and get 90% or more
of what you've get if it were built in.  The language gives you enough power to
extend it in a way that feels like the extension was there from the beginning.</p>

<p>Having things that are core features in other languages be provided by libraries
might seem at odds with the previous section about minimizing dependencies, and
to some extent that's true.  But I think there's a happy medium where you can
write stable libraries in the core language and then depend on a small number of
those libraries in your applications to add exactly the features you need for
any particular problem.</p>

<h4 id="s7-power"><a href="#s7-power">Power</a></h4>

<p>Macros are one of the things that make Lisp so extensible, because they let you
transform arbitrary code into other arbitrary code.  This is true for macros in
languages like C too, but Common Lisp macros are different because they're <em>part
of the language</em>.</p>

<p>In C you have a layer of macros on top, written in a preprocessor macro
language.  The macro layer and the language layer are separate from each other,
with the macro layer providing one one extra level of abstractive power (which,
don't get me wrong, is certainly useful).</p>

<p>In Common Lisp, you write macros <em>in Common Lisp itself</em>.  You can then use
those macros to write functions, and use those functions to write more macros.
Instead of two stratified layers it's a <em>feedback loop</em> of abstractive power.</p>

<p>But macros aren't the only thing about Common Lisp that make it so practical and
extensible.  Something people often don't realize is that while Common Lisp is
an extremely high-level language thanks to macros, it also has plenty of
low-level facilities as part of the language.  It's never going to be as
low-level as something like C, Rust, or Forth, but you might be surprised at
some of the things that the ANSI spec includes.</p>

<p>Want to see the assembly code a particular function compiles down to?
<a href="http://clhs.lisp.se/Body/f_disass.htm"><code>DISASSEMBLE</code></a> it!</p>

<p>Want to stack-allocate something to avoid some garbage collection?  X3J13
<a href="http://clhs.lisp.se/Body/d_dynami.htm">thought of that</a>.</p>

<p>Need arrays of unboxed floats to ship to a graphics card?  <a href="http://clhs.lisp.se/Body/15_ab.htm">The standard allows
for that</a>.</p>

<p>Think <code>GOTO</code> should be considered helpful, not harmful?  Well, okay, we're all
adults here.  <a href="http://clhs.lisp.se/Body/s_tagbod.htm">Good luck</a>, try not to shoot your foot off.</p>

<p>Need to do unsigned 8-bit arithmetic in your Game Boy emulator, but would prefer
it to compile down to just a machine instruction or two?  <a href="https://pdfs.semanticscholar.org/7089/0eff0e93aba49174a9346731f4bf9225706d.pdf">It's
possible</a>.</p>

<p>Not all Common Lisp implementations actually perform all these optimizations,
but the designers of Common Lisp had the foresight to include the language
features needed to support them.  You can write vanilla Common Lisp as defined
by the standard and trust that it will run everywhere, and implementations that
<em>do</em> support these kinds of things will take advantage of the optimization
opportunities.</p>

<p>This combination of supporting extremely high-level programming with macros and
a reasonable amount of low-level optimization mean that even though the
specification is over twenty years old, it's still a good solid base to build on
today.  The thirty years of experience and history the designers were drawing
from allowed them to create a very practical language that has survived for
decades.</p>

<h4 id="s8-ugliness"><a href="#s8-ugliness">Ugliness</a></h4>

<p>It's also important to realize that while Common Lisp might be very practical,
the need to accommodate existing users and dialects means that there are plenty
of ugly parts.  If you buy a paper copy of the second edition of Common Lisp:
the Language and look up "kludges" in the index you'll find this:</p>

<p><a href="https://stevelosh.com/static/images/blog/2018/07/lisp-kludge.jpeg"><img src="https://stevelosh.com/static/images/blog/2018/07/lisp-kludge.jpeg" alt="Photo of a page of CLtL2's Index, listing &quot;kludges&quot; as pages 1 to 971"></a></p>

<p>Common Lisp is not a beautiful crystal of programming language design.  It's
a scruffy workshop with a big pegboard wall of tools, a thin layer of sawdust on
the floor, a filing cabinet in the office with a couple of drawers that open
perpendicular to the rest, and there's a weird looking saw with <code>RPLACD</code> written
on the side sitting off in a corner where no one's touched it for twenty years.</p>

<p>This historical baggage is a price paid to ensure Common Lisp had a future.  It
made it practical for people using the old dialects to actually adopt Common
Lisp with a reasonable amount of effort.  If the designers had tried to make it
perfect and beautiful this could have made it too different to port
implementations and code to and might have resulted in the language being
ignored, instead of being adopted and embraced.</p>

<h2 id="s9-a-road-to-learning-common-lisp"><a href="#s9-a-road-to-learning-common-lisp">A Road to Learning Common Lisp</a></h2>

<p>If all of this hasn't scared you away from the language, let's talk about how
you can learn it in 2018.</p>

<p>If you search around on the internet for Common Lisp tutorials and guides,
you're not going to find as much as you might expect.  This is because a lot of
Common Lisp reference material was created before or during the infancy of the
internet.  There are a <em>lot</em> of books about Common Lisp out there.  Some are
better than others.  I'll recommend the ones I think are the best, but don't
hesitate to browse around and find others.</p>

<h3 id="s10-get-a-lisp"><a href="#s10-get-a-lisp">Get a Lisp</a></h3>

<p>To get started with Common Lisp you'll need to install a Common Lisp
implementation.  Common Lisp is an ANSI specification, so there are multiple
implementations of it, which gives you choices.  There are a bunch of options,
but I'll make it simple for you:</p>

<ul>
<li>If you're using MacOS and want a single GUI app you can download from the App
  Store, choose <a href="https://ccl.clozure.com/">ClozureCL</a> (often abbreviated "CCL").</li>
<li>Otherwise, choose <a href="http://www.sbcl.org/">SBCL</a>.</li>
</ul>

<p>That's Clozure with a Z.  Clojure is something entirely different that just
happens to have a confusingly similar name.</p>

<p>You might also hear of something called CLISP, which sounds like it might be
what you want.  It's not.  CLISP is just another implementation, but it hasn't
had a release in eight years (even though development is still ongoing in its
source repos!) and it's not as commonly used as CCL or SBCL, so it'll be harder
to find help if you have questions about the installation, etc.</p>

<p>You might also hear about something called Roswell.  Don't use Roswell, you don't
need it (yet (or at all)).</p>

<p>Just install SBCL or CCL for now, you can explore the other options once you've
got your bearings a bit better.</p>

<h3 id="s11-pick-an-editor"><a href="#s11-pick-an-editor">Pick an Editor</a></h3>

<p>You might hear people tell you that you <em>must</em> learn Emacs before learning
Common Lisp.  They're wrong.  You can get started learning the language just
fine in whatever text editor you're comfortable in.</p>

<p>If you don't have a preference, CCL itself comes bundled with a text editor on
MacOS.  That one will work just fine to start.</p>

<p>Emacs, Vim, Sublime Text, Atom, whatever, for now it doesn't matter.  As long as
it can balance parentheses, highlight comments and strings, and autoindent Lisp
code that's all you need to start.  Worry about shaving the editor yak once
you're more comfortable in the language.</p>

<h3 id="s12-hello-lisp"><a href="#s12-hello-lisp">Hello, Lisp</a></h3>

<p>To check that you've got everything set up properly, make a <code>hello.lisp</code> file
with the following contents:</p>

<pre><code><span><span>(<span><i><span>defun</span></i> hello <span>(<span></span>)</span>
  <span>(<span>write-line <span>"What is your name?"</span></span>)</span>
  <span>(<span><i><span>let</span></i> <span>(<span><span>(<span>name <span>(<span>read-line</span>)</span></span>)</span></span>)</span>
    <span>(<span>format t <span>"Hello, ~A.~%"</span> name</span>)</span></span>)</span></span>)</span></span></code></pre>

<p>Don't worry about what this means yet, it's just a check that everything's
working properly.</p>

<p>Open an SBCL or CCL REPL (<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">Read/Eval/Print
Loop</a>) and
load the file by entering <code>(load "hello.lisp")</code>, then call the function and make
sure it works.  It should look something like this if you picked SBCL:</p>

<pre><code>$ sbcl
* (load "hello.lisp")

T
* (hello)
What is your name?
Steve
Hello, Steve.
NIL
*
</code></pre>

<p>Or if you chose CCL but still want to use the command line, rather than the
MacOS app (the command line program might be annoyingly named <code>ccl64</code> if you're
on a 64-bit system):</p>

<pre><code>$ ccl64
Clozure Common Lisp Version ...

? (load "hello.lisp")
#P"/home/sjl/Desktop/hello.lisp"
? (hello)
What is your name?
Steve
Hello, Steve.
NIL
?
</code></pre>

<p>If your arrow keys and backspace don't work in the REPL, use <a href="https://github.com/hanslub42/rlwrap"><code>rlwrap</code></a>
to fix that.  <code>rlwrap sbcl</code> will give you a non-miserable REPL.  <code>rlwrap</code> is
a handy tool to have in your toolbox anyway.</p>

<h3 id="s13-a-gentle-introduction"><a href="#s13-a-gentle-introduction">A Gentle Introduction</a></h3>

<p>The best book I've found for getting started in Common Lisp is <a href="https://www.cs.cmu.edu/~dst/LispBook/">Common Lisp:
A Gentle Introduction to Symbolic Computation</a>.  This book really
does strive to be gentle.  Even if you've programmed before I'd still recommend
starting here because it eases you into the language.</p>

<p>The 1990 edition is available free from the site, and there's a 2013 reprint
which fixes some minor errors in the 1990 version.  If you can afford it I'd
recommend buying the 2013 edition, but the 1990 version will also do fine.</p>

<p>Go through the book and <em>do all the exercises</em>.  This will take a while, and
is mainly meant to get you started overcoming some of the main obstacles to
being comfortable in Common Lisp, such as:</p>

<ul>
<li>How am I ever going to remember all these weird function names?</li>
<li>Why do people use strings so rarely?</li>
<li>When do I need the god damn quotation mark?</li>
</ul>

<p>If you find the book is moving too slow, just skim forward a bit.  Skimming is
a very useful skill to practice as a programmer.  I think it's better for
authors to err on the side of explaining too much when writing books and
documentation — expert readers should be comfortable skimming if you explain too
<em>much</em>, but new users will be stuck wallowing in confusion if you're too terse.
Creating hours of newbie misery and confusion to save a few flicks of an
expert's scroll wheel is a poor tradeoff to make.</p>

<p>You should also join the <code>#clschool</code> channel on the Freenode IRC network so you
can ask questions if you get stuck.  For the most part people there are friendly
and helpful, though I'll warn you in advance that there's at least one person
who can sometimes be abrasive.  There's also a <code>#clnoobs</code> channel, but that was
mostly abandoned during the latest wave of Freenode spam because no one had ops
to help combat the spam.</p>

<p>If IRC isn't your thing there's also a <a href="https://discord.gg/tffeu2x">Discord
server</a> that some of us hang out in.  Join the
<code>#common-lisp</code> channel there and we'll be happy to help you.</p>

<h3 id="s14-getting-practical"><a href="#s14-getting-practical">Getting Practical</a></h3>

<p>Once you've finished that book the next one you should attack is <a href="http://www.gigamonkeys.com/book/">Practical
Common Lisp</a>.  You can get a paper copy if you want, but the full book
is available on the site for free.</p>

<p>You can skip the editor/programming environment part because the environment it
recommends (Lisp in a Box) is abandoned and no longer works.  Just keep using
the programming environment you're comfortable with for now.</p>

<p>Unfortunately the book doesn't include exercises.  If you <em>really</em> want to get
the most out of it you can type in all the code as you're reading it and poke at
it, but if you've already done the exercises in the previous book it's probably
safe to just sit down and read the book carefully.  Don't read more than
a chapter or two a day.  It will take a while for your brain to digest all the
information.</p>

<p>Make sure you understand everything as you go through the book.  Don't be afraid
to ask questions on IRC or Discord (or email me if you want, I don't mind) if
something's not clear.</p>

<p>You should also begin to get comfortable looking up things in <a href="http://www.lispworks.com/documentation/lw70/CLHS/Front/Contents.htm">the Common Lisp
language specification</a> itself.  It's the ultimate manual for Common Lisp.
It can be pretty dense at points, but can answer many questions you might have
if you read it slowly and carefully.  You can either use the index page to find
what you're looking for or just search on Google for "clhs whatever" (CLHS
stands for "Common Lisp HyperSpec", which is the hyperlinked, HTML version of
the spec).  If you already use the Dash app for MacOS, it has the Common Lisp
spec available.</p>

<p>(Some people will tell you to learn the language by just reading the spec.  That's
ridiculous — it's like trying to learn French by reading a dictionary.  It's
a useful tool to have, but not the only one you'll need.)</p>

<h3 id="s15-make-something"><a href="#s15-make-something">Make Something</a></h3>

<p>Once you've got those two books under your belt and some practice using the
spec, it's time to make something without someone holding your hand.  It doesn't
have to be anything big or special, the goal is to just write some Lisp without
having the answer on the next page.</p>

<p>If you need some ideas:</p>

<ul>
<li>Do some <a href="https://projecteuler.net/">Project Euler</a> problems.</li>
<li>Do some <a href="https://adventofcode.com/">Advent of Code</a> exercises.</li>
<li>Make a <a href="https://twitter.com/git_commands">stupid Twitter bot</a>.</li>
<li>Make a personal calendar program that records your appointments, checks the
  weather forecast the day of, etc.</li>
<li>Use <a href="https://github.com/vydd/sketch">Sketch</a> to implement the stuff in some <a href="https://www.youtube.com/user/codingmath/videos">Coding Math videos</a>.</li>
</ul>

<p>It doesn't really matter what you make, just make <em>something</em> on your own.</p>

<h3 id="s16-lisp-as-a-system"><a href="#s16-lisp-as-a-system">Lisp as a System</a></h3>

<p>At this point it's time to take your Common Lisp skills up a notch.  Up until
now I've told you to just use any text editor because it's more important to
get you some experience with the language, but now it's time to dive into the
deep end.</p>

<p>In most languages the development process looks something like this:</p>

<ol>
<li>Edit some code in the project with an editor.</li>
<li>Compile the project (some languages skip this step).</li>
<li>Run the project (or the tests).</li>
<li>Observe the output (in the console, a browser, etc).</li>
<li>Go to 1.</li>
</ol>

<p>This is not how most Common Lisp users interact with the language.  In Common
Lisp, the development cycle looks more like this:</p>

<ol>
<li>Start a Lisp process.</li>
<li>Load the project.</li>
<li>Edit some code with your editor.</li>
<li>Tell the running process to compile <em>only the code you edited</em>.</li>
<li>Interact with the changed code in the process via the REPL, an HTTP request, etc.</li>
<li>Observe the output (in the console, a browser, etc).</li>
<li>Go to 3.</li>
</ol>

<p>When you embrace the Lisp way of working you'll rarely recompile and reload an
entire project.  Usually you'll write a function (or a macro, or parameter, or
whatever), compile <em>just that function</em>, maybe poke at it in the REPL a bit, and
then move on to the next function.  This has some advantages over the
traditional compile-everything-then-run approach.</p>

<p>First: compiling a small chunk of code is fast.  I just timed compiling a few of
the larger functions in one of my projects and they took around 50-80
microseconds.  You don't have to wait for the compiler, so your
concentration/thought process never has time to wander.</p>

<p>Another advantage is that when you get back the results of your compilation (and
running), any errors or warnings you receive are almost certainly related to the
few lines of code you just compiled.  If you compile a ten-line function, run
it, and get a division by zero error you can immediately focus in on the ten
lines you just compiled and think about what changed.</p>

<p>Because the Lisp process is always running, as soon as you compile a function
it's ready to be used in the REPL.  You can throw some arbitrary data at it and
inspect the results to see how it behaves in isolation before you build more
things on top of it.  This cycle of making a function, compiling it, poking at
it to make sure it's working as expected, and moving on happens <em>constantly</em>.</p>

<p>In contrast, when working in languages like Scala or Python I almost never find
myself writing one single function and compiling or running the project
immediately.  Spinning up the compiler or running the unit tests takes at
<em>least</em> a second or two (or sometimes <em>minutes</em> in Scala, unfortunately) so to
avoid having a constant stream of gaps in my thought I end up writing a bunch of
functions at once, and then I run the project or tests once I know they have
a chance of working.</p>

<p>But then when I get back an error I have much more surface area to check,
because I've added a lot of new code!  So now I have to track down a problem
that might be in something I wrote four minutes ago, whereas in Lisp I would
only have to ever look at the code I wrote in the last few seconds.</p>

<p>I've started using IntelliJ with Scala to help make this a bit less painful.  It
does help with the compile times because it recompiles things on the fly, but it
doesn't solve the rest of the problem.  I can write a Scala function in IntelliJ
and it will be compiled immediately, but I can't <em>interact</em> with it immediately
like I can in Common Lisp.</p>

<p>When you work in this style with Common Lisp I think you'll really grow to love
it.  Writing in other languages will begin to feel like shipping your code off
to the DMV and getting it back a week later with a page full of red ink
somewhere in the hundred forms you filled out.  Writing in Common Lisp feels
like interacting with a living, breathing organism, or like <a href="https://www.reddit.com/r/lisp/comments/4oo1cp/common_lisp_for_clojure_programmer/d4eec68/">teaching things to
an eager assistant</a>.</p>

<p>This philosophy of Lisp being not just a programming <em>language</em> but a living,
breathing programming <a href="https://www.dreamsongs.com/Files/Incommensurability.pdf"><em>system</em></a> goes beyond just the short
feedback loop and interactive REPL, too. </p>

<p>As an example: imagine you're making a video game and have a bug somewhere in
your damage calculation that will occasionally cause a division by zero.  Now
let's say you're working on the code for a particular quest.  You'll start the
game, load a save file at the beginning of the quest, and start going through
the steps.  All of a sudden, in the middle of killing the final monster for the
quest, you hit the damage bug!  In traditional languages, one of two things
might happen:</p>

<ol>
<li>The game crashes, and you get a stack trace and maybe a core dump.</li>
<li>You've wrapped a <code>try</code> block around the main game loop that logs a stack
   trace and ignores errors and allows the game to continue.</li>
</ol>

<p>Case 1 is pretty bad.  You've got to try to track down the bug from a snapshot
of what things looked like at the time (the stack trace and core dump).  And
even if you manage to fix it, now you've got to redo all that playing to get
back to testing your quest code that you were originally working on.</p>

<p>Case 2 is bad, in a different way.  If you just ignore errors all the time, the
game might now be in a weird state.  You also might lose some critical context
that's necessary to debug the problem, unless you're also saving a core dump
(but I don't know of many people who save a core dump on every exception).</p>

<p>In Common Lisp you can certainly choose to panic on or ignore errors, but
there's a better way to work.  When an error is signaled in Common Lisp, it
doesn't unwind the stack.  The Lisp process will pause execution at that point
and open a window in your editor showing you the stack trace.  Your warrior's
sword is hovering over the monster, waiting for you.  At this point you can
communicate with the running process at the REPL to see what's going on.  You
can examine variables in the stack, or even run any arbitrary code you want.</p>

<p>Once you figure out the problem ("Oh, I see, the <code>calculate-armor-percentage</code>
function returns <code>0</code> if a shielding spell ran out during the same frame") you
can fix the code, recompile the problematic function, and <em>restart the execution
of that function (or any other one!) in the call stack</em>!  Your warrior's sword
lands, and you move back to what you were doing before.</p>

<p>You don't have to track down the bug from just a stack trace, like a detective
trying to piece together what happened by the <a href="https://www.usenix.org/system/files/1311_05-08_mickens.pdf">blood stains</a> on
the wall.  You can examine the crime <em>as it's happening</em> and intervene to save
the victim.  It's like if you could run your code in a debugger with
a breakpoint at every single line that only activates if something goes wrong!</p>

<p>Maybe you don't make video games, sure, but this process can be useful in all
kinds of contexts.  Maybe you're writing a web app that talks to an API
somewhere, and are debugging a request that fails between two calls to the API,
e.g.  between "create widget <code>foo</code>" and "add <code>foo</code> to widget list <code>bar</code>".
Instead of just aborting the request, logging a stack trace, and now leaving
things in a possibly weird state (<code>foo</code> having been created without being in the
expected <code>bar</code> list), you can fix the problem and allow the request to finish
properly.</p>

<p>Of course this won't always work.  If you've got a big function that does some
side effects and then crashes, restarting execution of the function would make
the side effects happen again.  But if you divide up your functions well (<a href="https://groups.google.com/forum/message/raw?msg=comp.lang.lisp/9SKZ5YJUmBg/Fj05OZQomzIJ">one
function to a function!</a>) this case is pretty rare.  And even when it
does happen, it just means you're back in the same situation you're in <em>by
default</em> with other languages!</p>

<p>Support for this style of interactive development doesn't just come from some
fancy editor plugins — it's baked into the bones of the language.  For example:
the standard specifies a method named
<a href="http://clhs.lisp.se/Body/f_upda_1.htm"><code>update-instance-for-redefined-class</code></a>
that lets you customize what happens to objects when their class is redefined!
This isn't something you'll use all the time, but something like Sketch (a
Common Lisp equivalent of Java's Processing library) <a href="https://github.com/vydd/sketch/blob/19fe20502d26fc75752e710dfe5106ed13345c5a/src/sketch.lisp#L118-L121">uses it</a> to
automatically update the running sketch when you redefine its class.
Dynamically updating running code in a safe, consistent way doesn't require any
dark magic in Common Lisp because it's the expected, usual way to work.</p>

<p>So how do you actually <em>get</em> this wonderful interactive experience?  The bad
news is that you're going to need to shave the editor yak.  You really only have
two choices here:</p>

<ul>
<li>Emacs with <a href="https://common-lisp.net/project/slime/">SLIME</a> or <a href="https://github.com/joaotavora/sly">Sly</a>.</li>
<li>Vim (or Neovim) with <a href="https://github.com/l04m33/vlime">Vlime</a> or <a href="https://github.com/kovisoft/slimv">Slimv</a>.</li>
</ul>

<p>I wish this weren't the case, but those are really only the realistic options
today (aside from the editing environments for the (expensive) commercial
Lisps).</p>

<p>If you're like me and already have Vim burned too deeply into your fingers to
ever get it out, I'd recommend Vim with Vlime.  It will give you 80% of the
experience you'll get with Emacs.</p>

<p>Otherwise go with Emacs.  You might want to look into
<a href="https://portacle.github.io/">Portacle</a>, which bundles Emacs and SLIME and
a bunch of other things together, or you might want to have a go at setting up
Emacs and SLIME or Sly yourself.  I can't really give you much advice on the
Emacs side of things because I haven't had much experience with it, so you'll
need to do a bit of research here.</p>

<p>Whatever you choose, spend some time setting up your editor and environment of
choice.  This will be a lot of fiddly metawork, but will pay off handsomely as
you continue working in Lisp.</p>

<p>On a side note: if anyone is interested in making a Common Lisp <a href="https://langserver.org/">LSP</a>
language server, I think it would be a hugely useful contribution to the
community.  Having an LSP server would mean you could get a much nicer
programming experience in many editors out of the box, which would help new
people quite a lot.</p>

<p>I think you could piggyback on top of Swank to do a lot of the language-side
stuff, and it would mostly be a matter of implementing the LSP interface.  If
this sounds interesting to you, please let me know — I'd be willing to help.
I've done some work at my day job making a Scala LSP language server that uses
IntelliJ as a backend, so I have at least some idea of how that sausage gets
made.  I just don't have the time or motivation to do an entire LSP server for
Common Lisp all by myself.</p>

<h3 id="s17-learning-paradigms"><a href="#s17-learning-paradigms">Learning Paradigms</a></h3>

<p>At this point you should have a pretty good handle on the basics of Common Lisp,
and have set up one of the more powerful development environments.  Your next
goals should be to learn how to write idiomatic Common Lisp and to get some
practice using your fancy new environment.</p>

<p>I think the perfect book for both of these is <a href="https://github.com/norvig/paip-lisp">Paradigms of Artificial
Intelligence Programming</a>, often abbreviated as PAIP.  The book was
recently made available for free as a PDF, or you can buy a used paper copy if
you prefer.</p>

<p>This book was written in 1992 so it's not about the hyped up AI fields you've
been hearing about in the news like machine learning — instead it's a tour of
<a href="https://en.wikipedia.org/wiki/Symbolic_artificial_intelligence">Good Old-Fashioned AI</a>.  Even if you're not particularly interested in
this kind of AI, the book is a great example of how to write Common Lisp code.</p>

<p>One thing I really love about this book is that almost all the functions in it
have docstrings.  If you look at most other programming books they omit the
documentation strings, presumably for space reasons and because they feel the
surrounding text is documentation enough.  But writing helpful docstrings is an
art in and of itself, and I think books that omit them train readers that "good
code omits docstrings", which is a bad habit to get into.</p>

<p>The book contains <em>plenty</em> of exercises, conveniently categorized by how
difficult or involved they are:</p>

<ul>
<li><code>S</code> for "seconds".</li>
<li><code>M</code> for "minutes".</li>
<li><code>H</code> for "hours".</li>
<li><code>D</code> for "days".</li>
</ul>

<p>This is a very good idea which more books should steal.  Do all of the <code>S</code> and
<code>M</code> exercises, and try your hand at at least a few of the <code>H</code> ones.  If a <code>D</code>
sounds particularly interesting don't be afraid to spend some time on it
— really digging into a problem is exactly what you need at this point in your
Lisp journey.</p>

<h3 id="s18-switch-things-up"><a href="#s18-switch-things-up">Switch Things Up</a></h3>

<p>Now that you're comfortable in Common Lisp and your programming environment,
it's time to push yourself out of your comfort zone again.  At the beginning I
had you choose either SBCL or CCL.  Now I want you to install whichever one you
didn't originally choose and make sure all the code you've written so far runs
in it.</p>

<p>This may seem a bit like running in place, but making sure your code runs in
more than one implementation will keep you honest.  It will force you to write
portable code that doesn't rely on anything implementation-specific that might
change in the next decade or two.  And you might even discover that you like
this other implementation better than the original — maybe CCL's super-fast
compile times make you smile, or SBCL's strong type inference catches more of
your bugs.</p>

<p>Go through all the code you've written so far and make sure it all runs in the
new implementation.  You might also want to take this opportunity to refactor or
rewrite some of it — you've learned a lot since you first started, so your
earliest Common Lisp code will probably look pretty rough to you now.</p>

<h3 id="s19-recipes-for-success"><a href="#s19-recipes-for-success">Recipes for Success</a></h3>

<p>The final technical book I'll recommend to every aspiring Lisp programmer is
<a href="http://weitz.de/cl-recipes/">Common Lisp Recipes</a>, sometimes abbreviated as CLR.  Unlike most of
the other books I've recommended so far this one is relatively recent: it was
published in 2015.  It's not free, but I think it's well worth the money it
costs.</p>

<p>The book is written by the author of several very heavily used Common Lisp
libraries.  It's a bit of a grab bag of topics (which is why I think you need
a decent amount of Lisp under your belt before you tackle it) but it's a very
well-written grab bag that will teach you a lot of things you won't find in
other books.</p>

<h3 id="s20-final-patterns"><a href="#s20-final-patterns">Final Patterns</a></h3>

<p>If you've gotten this far you're pretty invested in Common Lisp, and I want to
recommend one not-strictly-technical book that I think you'll really enjoy:
Patterns of Software by Richard Gabriel.  It's available as a PDF on <a href="https://www.dreamsongs.com/Books.html">the
author's site</a>, and you can still find used print copies online if you
prefer.</p>

<p>This is <em>not</em> the "Gang of Four"/"Design Patterns" book that you might have
already read or heard about, but is a set of essays on a variety of
loosely-related topics.  It's the best book I've read so far this year.  I don't
want to spoil anything in it for you, so I'll just say that I think you'll find
it well worth your time.</p>

<h2 id="s21-where-to-go-from-here"><a href="#s21-where-to-go-from-here">Where to Go From Here</a></h2>

<p>If you made it through all the books and activities in the previous section:
congratulations, you're off to a great start!  Now that you've got a decent
handle on the core language you can explore in many different directions,
depending on your interests.</p>

<h3 id="s22-macros"><a href="#s22-macros">Macros</a></h3>

<p>If you want to learn the secrets of macros, you'll probably want to read and
work through <a href="http://www.paulgraham.com/onlisp.html">On Lisp</a> and <a href="https://letoverlambda.com/">Let Over Lambda</a> (in that order).</p>

<p>I'll say that you should take both books (<em>especially</em> the latter) with a large
grain of salt.  A lot of Common Lisp users don't agree with all of the arguments
and style in these books, but I think they can still provide plenty of value if
you read them with a critical mind.</p>

<h3 id="s23-object-oriented-programming-with-clos"><a href="#s23-object-oriented-programming-with-clos">Object-Oriented Programming with CLOS</a></h3>

<p>Common Lisp has some very sophisticated support for Object-Oriented Programming
through CLOS.  If you're like me and have bad memories of OOP from working in
a Java cube farm, I'd urge you to give CLOS a fair chance to change your mind.</p>

<p>Start with <a href="https://www.amazon.com/Object-Oriented-Programming-COMMON-LISP-Programmers/dp/0201175894">Object-Oriented Programming in COMMON LISP: A Programmer's Guide to
CLOS</a>.  It's a wonderfully-written, short and to-the-point book that will
give you a good overview of how CLOS is intended to be used.</p>

<p>If you really want to bend your mind, try <a href="https://www.amazon.com/Art-Metaobject-Protocol-Gregor-Kiczales/dp/0262610744">The Art of the Metaobject
Protocol</a> (usually abbreviated as AMOP).  This book will probably take you
a couple of tries to get through.  Read it until you hit a mental wall, go work
on other things for a couple of months, and come back and try again.  Repeat
that process as many times as necessary.</p>

<h3 id="s24-low-level-programming"><a href="#s24-low-level-programming">Low-Level Programming</a></h3>

<p>Low-level programming can mean a lot of different things, so I'll just mention
one possibility here.</p>

<p>If you're interested in writing emulators for old computers, I wrote <a href="http://stevelosh.com/blog/2016/12/chip8-cpu/">a series
of posts</a> on making a <a href="https://en.wikipedia.org/wiki/CHIP-8">CHIP-8</a> emulator in Common Lisp.
<a href="https://github.com/kingcons/cl-6502">cl-6502</a> is an emulator for the processor used in the NES (and lots of other
things) and has a really nice <a href="http://redlinernotes.com/docs/cl-6502.pdf">literate programming</a> version
that's wonderful to read through.</p>

<h3 id="s25-web-development"><a href="#s25-web-development">Web Development</a></h3>

<p>Unfortunately I don't have too many suggestions for web development in Common
Lisp.  I've made a conscious effort to avoid web development in the past five or
so years, because it seems like the Hamster Wheel of Backwards Incompatibility
has become more of a Hamster Centrifuge in that field.</p>

<p>There is a <code>#lispweb</code> channel on Freenode and a <code>#webdev</code> channel in the Lisp
Discord, so if you have questions you could start by asking there.  Those
channels are a bit less populated than the other Lisp channels, so don't expect
an answer immediately.</p>

<h3 id="s26-game-development"><a href="#s26-game-development">Game Development</a></h3>

<p>Common Lisp has a small but enthusiastic community of people who like making
games.  There's a <code>#lispgames</code> channel on Freenode and a <code>#gamedev</code> channel on
the Lisp Discord that you should join if you're interested.</p>

<p><a href="http://landoflisp.com/">Land of Lisp</a> is a fun book to go through.  The coding
style in the book has some... "eccentricities", which is why I don't recommend
it as a first book on Lisp (e.g. using <code>ash</code> instead of <code>truncate</code> or <code>floor</code>
for integer division), but if you know the language and just want to get started
making some simple games I think you'll enjoy working through it.</p>

<p>If you want an excuse to make a game in Lisp in a week, the Lisp Game Jam is
something you can join.  It's usually held once or twice each year, so you'll
have to search around (or ask in <code>#lispgames</code>) to find out when the next one is.</p>

<p>Lisp doesn't have any engine as full-featured as Unity, but several people are
currently working on making 3D game engines.  Ask around to see what people are
using these days.  Unfortunately a 3D game engine will generally need to
interface with the OS to render images and produce audio, and so can't be
written in pure Common Lisp.  This means that some running on the Hamster Wheel
of Backwards Incompatibility will be necessary to keep up with OS changes (e.g.
<a href="https://www.macrumors.com/2018/06/05/apple-deprecates-opengl-opencl-gaming/">Apple deprecating OpenGL</a>).</p>

<p>If you're interested in old-school ASCII/tile-based games, I've personally done
some work with using <a href="https://github.com/HiTECNOLOGYs/cl-charms">ncurses</a> and <a href="http://foo.wyrd.name/en:bearlibterminal">bearlibterminal</a> in Common Lisp.
There's something really fun about making a game people can play over telnet!
Feel free to get in touch with me if you're interested in that kind of stuff and
want to know more.</p>

<h3 id="s27-window-management"><a href="#s27-window-management">Window Management</a></h3>

<p>If you're running Linux and like tinkering with your desktop environment,
<a href="https://stumpwm.github.io/">StumpWM</a> is an X window manager written in Common Lisp.  I've just recently
switched back to Linux so I've only been using it for about two months, but it's
really pleasant to be able to customize my working environment with Common Lisp.</p>

<p>StumpWM has a small but friendly community — if you're looking for a non-trivial
open source Common Lisp project to contribute to, StumpWM would be a great
choice.</p>

<h3 id="s28-unit-testing"><a href="#s28-unit-testing">Unit Testing</a></h3>

<p>If you're coming from a modern language, especially one with a lot of
test-driven development advocates, you might be surprised at the lack of an
emphasis on unit testing in Common Lisp.  I think one reason for this is that in
some languages a unit test is the simplest way to actually <em>run</em> a function,
but Lisp's interactive style of development gives you an even easier
alternative: just <em>run the function</em> in the REPL!</p>

<p>Despite the lack of heavy unit testing in the community, there are almost as
many unit testing <em>frameworks</em> as there are Common Lisp programmers!  This is
probably because making a unit testing framework is so easy with a few macros.
I love <a href="https://github.com/lmj/1am">1am</a>, but there are <em>plenty</em> more to choose from.</p>

<p>Whichever one you choose, please make sure to be a good citizen and create
a separate ASDF system for your unit tests, so people can use your library
without having to load Yet Another Testing Framework.</p>

<h3 id="s29-more-implementations"><a href="#s29-more-implementations">More Implementations</a></h3>

<p>I had you use SBCL and CCL because those are the most popular free Common Lisp
implementations today, but they aren't the only actively-developed ones out
there.  There's plenty of others you might want to explore:</p>

<ul>
<li><a href="https://common-lisp.net/project/armedbear/">ABCL</a> runs on the JVM.</li>
<li><a href="https://common-lisp.net/project/ecl/main.html">ECL</a> can be embedded in a C program, and can translate Common Lisp code to C code.</li>
<li><a href="https://github.com/clasp-developers/clasp">CLASP</a> is still under development, but is an implementation designed to be easy to interoperate with C++.</li>
<li><a href="http://www.lispworks.com/">Lispworks</a> and <a href="https://franz.com/products/allegro-common-lisp/">Allegro CL</a> are commercial implementations with a lot of extra features and support, but are not free.</li>
</ul>

<p>(I omitted CLISP because I'm mad at them for choosing a name that confuses the
heck out of new people.  Hey, I warned you this post would contain Opinions™.)</p>

<p>I tend to use SBCL for my own projects, but I make sure the units tests for all
my libraries run in SBCL, CCL, ABCL, and ECL.  This keeps me honest and gives me
a reasonable degree of confidence that I'm writing portable code.</p>

<h2 id="s30-modern-common-lisp"><a href="#s30-modern-common-lisp">Modern Common Lisp</a></h2>

<p>Common Lisp is old and stable, but that doesn't mean it's stagnant.  The
language gives you plenty of power to build on, and before I wrap this up I want
go over a couple of recent developments in the Common Lisp world that the older
books you've been learning from don't talk about.  I also want to clarify some
things that often trip up new people.</p>

<h3 id="s31-structure"><a href="#s31-structure">Structure</a></h3>

<p>Common Lisp's terminology for various parts of projects is often confusing to
new people because it's old and uses a lot of words that we use now (like
“package”) to mean subtly different things than people mean today. Things get
easier once you internalize what Common Lisp means by the terms.</p>

<p>(Side note: I posted a quick-and-dirty version of this section as a <a href="https://lobste.rs/s/fwhuz5/my_lisp_journey_1_getting_started_with#c_ebhvzq">comment</a>
on Lobste.rs while I was waiting for a plane — this section of the post is an
expanded version of that comment.)</p>

<h4 id="s32-packages"><a href="#s32-packages">Packages</a></h4>

<p>We often see questions in IRC and Discord that look something like: "How do I
export a class from a package"?  Questions worded like this are a sign of a
very common misunderstanding about what packages in Common Lisp <em>actually are</em>.</p>

<p><strong>A package in Common Lisp is a container for symbols</strong>.  That's it.  They're
a way to group related names (symbols) together so you don't have to do the
miserable prefixing of every name with <code>mylibrary-...</code> like you need to do in
Emacs Lisp or C to avoid name clashes.</p>

<p>You don't export a class from a package, you export a <em>symbol</em>.  You don't
import a function, you import the <em>symbol</em> it's attached to.  This sounds
pedantic, but is important to keep clear in your head as you start using the
package system.  If you're not clear on what exactly a symbol <em>is</em>, I wrote
a <a href="http://stevelosh.com/blog/2016/06/symbolic-computation/">separate post</a> just about symbols which you might find helpful.</p>

<p>Another major tripping point for new people is the relationship between packages
and files.  Or, rather: the completely <em>lack</em> of any relationship in Common
Lisp.</p>

<p>In many languages like Python, Java, or Clojure, a file's package and its
location on the hard drive are tied together.  For example: when you say <code>import
foo.bar.baz</code> in Python, Python will look for a <code>baz.py</code> file inside the
<code>foo/bar/</code> directory (it's a little more complicated than this, but that doesn't
matter for this example).</p>

<p>In Common Lisp, this is not the case.  <strong>Files and packages are completely
unrelated in Common Lisp.</strong>  You can have many files that all work in the same
package, or one file that switches between many packages, or even create or
modify packages at runtime.</p>

<p>This gives you the flexibility to work however you want.  For example: in my
procedural art library <a href="https://github.com/sjl/flax">Flax</a> most of the packages are each used in one
specific file, much like you would do in modern languages.  But the
<code>flax.drawing</code> package contains not only a drawing protocol but also several
implementations of that protocol (PNG, SVG, etc), and so I split the code into
<a href="https://github.com/sjl/flax/tree/master/src/drawing">a series of separate files</a>, each one dealing with how to draw
a single format (plus one for the protocol itself).</p>

<p>I could have created separate packages for each implementation and set up the
imports/exports between them, but I didn't feel like the extra boilerplate was
worth it.  Common Lisp is flexible enough to let you make such choices.</p>

<p>So if files and packages aren't related, the next question is: how does Common
Lisp know where to <em>find</em> anything on disk when it comes time to load the code?</p>

<h4 id="s33-systems"><a href="#s33-systems">Systems</a></h4>

<p>A system in Common Lisp is a collection of serveral things:</p>

<ul>
<li>Some code.</li>
<li>A description of how to load that code.</li>
<li>A list of other systems this system depends on, which need to be loaded prior
  to loading this one.</li>
<li>Some metadata like author, license, version, homepage, etc.</li>
</ul>

<p>The Common Lisp language itself has no knowledge of systems.  If you look at
<a href="https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node120.html">section 11.9</a> of CLtL2 you'll see that it was imagined that
each author would write their own custom file to load their code.  But since
Common Lisp gives you the power to abstract almost anything, people eventually
abstracted the process of loading Common Lisp code.</p>

<p><a href="https://common-lisp.net/project/asdf/">ASDF</a> is a Common Lisp library bundled with most modern implementations
which handles defining and loading systems.  The name ASDF stands for "Another
System Definition Facility", so as you might guess there have been several
other such libraries.  ASDF is the one everyone uses today.</p>

<p>ASDF standardizes the process of defining a system into something like this:</p>

<ul>
<li>The system definition(s) for a project called <code>foo</code> would be in a file named <code>foo.asd</code>.</li>
<li>Each system is defined with a <code>(defsystem ...)</code> form inside this file.</li>
</ul>

<p>We'll talk more about what a "project" is shortly.  Note the extension of the
file is <code>asd</code>, not <code>asdf</code>, which is a little confusing, but was probably chosen
to work in environments with three-letter-extension limits.</p>

<p>The <a href="https://common-lisp.net/project/asdf/#documentation">ASDF manual</a> is the definitive resource for the syntax and semantics of
<code>defsystem</code>, but can be a little heavy to read if you're just getting started.
Another way to get started is to read some <code>.asd</code> files of some small-to-medium
sized open source projects and see how they handle things.</p>

<p>Systems and packages are orthogonal in Common Lisp.  Some systems (like small
libraries) will define exactly one package.  Some systems will define multiple
packages.  Rarely a system might not define any new packages, but will use or
add to an existing one.</p>

<p>For example:</p>

<ul>
<li>My directed graph library <a href="https://github.com/sjl/cl-digraph">cl-digraph</a> contains a system called <code>cl-digraph</code>.</li>
<li>That system has a description of how to load the code, which lives in the
  <a href="https://github.com/sjl/cl-digraph/blob/master/cl-digraph.asd"><code>cl-digraph.asd</code></a> file.</li>
<li>One of the files specified for loading is <a href="https://github.com/sjl/cl-digraph/blob/master/package.lisp"><code>package.lisp</code></a>,
  which creates a package called <code>digraph</code>.</li>
</ul>

<p>Even though ASDF standardizes some aspects of system definition, it still gives
you plenty of flexibility.  As you read projects by different authors you'll
encounter different ways of organizing systems — this can be a little
overwhelming at first, but it means you can organize a system in the way that
works <em>best for that system</em>, which is really nice once you've got some
experience under your belt.</p>

<p>One example of this is how people define packages for their systems.  There are
a couple of common ways to do this you'll see in the wild:</p>

<ul>
<li>A single <code>package.lisp</code> file which contains all the definitions for all the
  packages in the project, and gets loaded before all other files.  This is the
  strategy I usually prefer.</li>
<li>Each file defines its package at the top of the file, much like you would in
  Clojure or other modern languages.  Care is taken in the system definition to
  load the files in the correct order so that each package is defined before it
  is ever used.</li>
</ul>

<p>To review: a system is a collection of code and a description of how to load it,
a list of its dependencies, and some metadata.  Now let's move up one level
higher to the final layer of structure you need to know about.</p>

<h4 id="s34-projects"><a href="#s34-projects">Projects</a></h4>

<p>A project in Common Lisp is not an official term defined anywhere that I know
of, but is a word that's generally used to mean something like a library,
a framework, an application, etc.</p>

<p>A project will usually define at least one system, because systems are where
you describe how to load the code, and if a project didn't define a system how
would you know how to load its code?  My string-wrapping library <a href="https://github.com/sjl/bobbin">Bobbin</a> is
a project that defines <em>two</em> systems:</p>

<ul>
<li><p>The <code>bobbin</code> system contains the actual data structure and API.  It has no
  dependencies.</p></li>
<li><p>The <code>bobbin/test</code> system contains the unit tests.  It depends on the <code>bobbin</code>
  system (because that's the code it's going to test) and the <code>1am</code> system (a
  unit test framework).  I made this a separate system because it allows users
  to load the main code without also having to load the unit testing framework
  if they're not going to be running the tests.</p></li>
</ul>

<p>Both of these systems are defined in the <a href="https://github.com/sjl/bobbin/blob/master/bobbin.asd"><code>bobbin.asd</code> file</a>.  ASDF
<a href="https://common-lisp.net/project/asdf/asdf.html#index-find_002dsystem">treats systems with a forward slash in their name specially</a> and
knows to look for them in the <code>asd</code> file named with the text before the slash.</p>

<p>We saw how Common Lisp has no concept of a system — that concept comes from
ASDF.  Similarly, ASDF has no concept of the internet or of reaching out to
somewhere to download things.  ASDF assumes you have somehow acquired the
systems you want to load and stored them on your hard drive, perhaps by sending
a check to an address and receiving a copy of the code on floppy disk, as many
of my old Lisp books offer in their final pages.</p>

<p><a href="https://www.quicklisp.org/beta/">Quicklisp</a> is another library that works on top of ASDF to provide the
"download projects from the internet automatically if necessary" functionality
that people expect in the modern world.  So when you say <code>(ql:quickload
:bobbin)</code> you’re asking Quicklisp to download Bobbin (and any dependencies) if
necessary, and then hand it off to ASDF to actually load the code of the
<code>bobbin</code> system.</p>

<p>Unlike ASDF, Quicklisp is relatively new in the Common Lisp world (it's only
about eight years old) and so is not bundled with any modern Lisp
implementations that I know of, which is why you need to install it separately.</p>

<h4 id="s35-recap"><a href="#s35-recap">Recap</a></h4>

<p>Here's a quick recap of the different layers of project structure you'll
encounter in Common Lisp.  Jot these down on a post it note you can refer to as
you're learning.</p>

<ul>
<li><strong>Files</strong> are files on your hard drive.</li>
<li><strong>Packages</strong> are containers of symbols. They are orthogonal to files.</li>
<li><strong>Systems</strong> are collections of code, instructions on how to load that code,
  dependency lists, and metadata. They are orthogonal to packages.</li>
<li><strong>Projects</strong> are high-level collections of... "stuff" such as code,
  documentation, maybe some image assets, etc.  They are (mostly) orthogonal to
  systems (are you seeing a trend here?).</li>
<li>Common Lisp itself knows about files and packages.</li>
<li>ASDF adds systems.</li>
<li>Quicklisp adds the internet.</li>
</ul>

<h3 id="s36-common-libraries"><a href="#s36-common-libraries">Common Libraries</a></h3>

<p>Common Lisp doesn't have as <em>large</em> of a community as some newer languages, but
it still has a lot of libraries because it's had a community for a longer time.
The stability of the core language means that many libraries written in portable
Common Lisp ten or fifteen years ago can still run just fine today.</p>

<p>In this final section I'll give you a quick overview of some of the more popular
libraries you might run into as you learn the language.  You don't have to use
all of them, but it's helpful to have some idea of what's available.</p>

<h4 id="s37-alexandria"><a href="#s37-alexandria">Alexandria</a></h4>

<p><a href="https://common-lisp.net/project/alexandria/">Alexandria</a> is one of the most popular Common Lisp libraries (the
name is a pun on the <a href="https://en.wikipedia.org/wiki/Library_of_Alexandria">Library of Alexandria</a>), and it's
a collection of all kinds of useful little utility functions like
<code>read-file-into-byte-vector</code> and <code>map-permutations</code>.</p>

<p>There are a <em>lot</em> of utility libraries for Common Lisp around — one rite of
passage is building up your own personal utility library over time — but
Alexandria is the most popular one.  Most projects with any dependencies at all
will eventually end up with Alexandria in the dependency graph somewhere.</p>

<h4 id="s38-bordeaux-threads"><a href="#s38-bordeaux-threads">Bordeaux Threads</a></h4>

<p><a href="https://common-lisp.net/project/bordeaux-threads/">Bordeaux Threads</a> was mentioned earlier.  Threads aren't part of the Common
Lisp standard, but most implementations provide their own custom interface for
working with them.  Bordeaux Threads wraps all these implementation-specific
interfaces and provides an API so you can write threaded code that will work
portably.</p>

<p>If you're looking for something like Java's <code>new Thread(() -&gt; foo()).start()</code>,
this is what you want.</p>

<h4 id="s39-cffi"><a href="#s39-cffi">CFFI</a></h4>

<p><a href="https://common-lisp.net/project/cffi/">CFFI</a> is a foreign-function interface library that lets you load
C libraries (e.g. <code>foo.dylib</code> or <code>foo.so</code>) and call the functions in them.  It
works by wrapping implementation-specific interfaces, because this isn't part of
the Common Lisp standard.</p>

<p>Unfortunately it has the same name as Python's FFI library, so if you're
searching for documentation make sure you're looking at the right version.</p>

<h4 id="s40-cl-ppcre"><a href="#s40-cl-ppcre">CL-PPCRE</a></h4>

<p><a href="https://edicl.github.io/cl-ppcre/">CL-PPCRE</a> is an implementation of Perl-compatible regular expressions.
If you're looking to use regular expressions in Common Lisp, this is what you
want.</p>

<h4 id="s41-drakma"><a href="#s41-drakma">Drakma</a></h4>

<p><a href="https://edicl.github.io/drakma/">Drakma</a> is an HTTP client.  If you need to make an HTTP request, this is what
you want.  There are other HTTP clients around, but Drakma is commonly used and
is fine for almost anything you might need.</p>

<h4 id="s42-iterate"><a href="#s42-iterate">Iterate</a></h4>

<p><a href="https://common-lisp.net/project/iterate/">Iterate</a> is a replacement for the <code>loop</code> macro.  It works similarly,
but has a more Lispy syntax and a well-defined API for extending it with new
iteration constructs.  I really like it myself, but beware: if you get used
to <code>iterate</code> going back to vanilla <code>loop</code> will feel painful.</p>

<h4 id="s43-local-time"><a href="#s43-local-time">local-time</a></h4>

<p><a href="https://common-lisp.net/project/local-time/">local-time</a> is a library for working with time and dates in Common Lisp.  The
standard has some basic support for times built in, but if you want to do much
calculation with times (including timezones) this is probably what you want.  If
you're looking for something like <a href="http://www.joda.org/joda-time/">Joda Time</a> in Common Lisp, this is
as close as you're going to get.</p>

<h4 id="s44-lparallel"><a href="#s44-lparallel">lparallel</a></h4>

<p><a href="https://lparallel.org/">lparallel</a> is a library that builds on top of Bordeaux Threads to make common
parallel processing operations much easier.  Think of it as <a href="https://www.gnu.org/software/parallel/">GNU Parallel</a> for
Lisp, with a few extra features (e.g. channels and tasks).</p>

<p>For example: if you've got a big vector you're mapping over with
<code>(map 'vector #'work some-vector)</code> you can split it into chunks and
run in multiple threads by changing it to
<code>(lparallel:pmap 'vector #'work some-vector)</code>.</p>

<h4 id="s45-named-readtables"><a href="#s45-named-readtables">Named Readtables</a></h4>

<p><a href="https://github.com/melisgl/named-readtables">Named readtables</a> is a library that adds namespaces for
readtables.</p>

<p>One painful part of the standard is that reader macros are added and removed to
the global readtable on the fly, so if you load multiple systems that define the
same reader macros things can get messy.  Named readtables adds some much-needed
hygiene to that process.  If you're working with reader macros at all you
absolutely want to use this.</p>

<h4 id="s46-roswell"><a href="#s46-roswell">Roswell</a></h4>

<p><a href="https://github.com/roswell/roswell">Roswell</a> is a couple of things rolled into one.  It's a C program that
handles installing and running multiple different Common Lisp implementations
(kind of like <a href="https://github.com/creationix/nvm">NVM</a> or
<a href="https://rvm.io/">rvm</a>), and it also provides a unified way to write small shell
scripts in Common Lisp and compile them into binaries.</p>

<p>I used Roswell for a little over a year, but I eventually stopped and now
I don't think it's worth the trouble, for a couple of reasons.</p>

<p>First: if you write portable code you generally don't need to worry running
a particular version of an implementation, because Common Lisp is so stable.
I usually just install the latest version of each implementation I use with
a package manager or by building from source.</p>

<p>Second: after using it for a while I found that Roswell was always very brittle
to upgrade, and whenever things broke it would spew an almost JVM-sized stack
trace without a decent error message.</p>

<p>For me, the negatives outweighed the positives.  I'd recommend simply using the
latest version of the implementations you care about and writing portable code.
For the compiling-into-binaries functionality I'd recommend using your
implementation's built-in support for this, or using UIOP's wrapper around that,
or using a separate library like <a href="https://shinmera.github.io/deploy/">Deploy</a>.</p>

<p>Of course your mileage might vary.  If you find yourself <em>really</em> needing to run
specific versions of specific Common Lisp implementations in rapid succession,
you should look into Roswell.</p>

<h4 id="s47-series"><a href="#s47-series">SERIES</a></h4>

<p><a href="https://www.cliki.net/Series">SERIES</a> was almost included in Common Lisp (it's in <a href="https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node347.html">Appendix A of
CLtL2</a>), but didn't quite make it.  It's a library for writing
functional code that looks like the traditional <code>map</code> and <code>filter</code> and <code>reduce</code>
operations but which compiles down to efficient loops.</p>

<p>If you're looking for Clojure's transducers in Common Lisp, this is what you
want.</p>

<h4 id="s48-st-json"><a href="#s48-st-json">st-json</a></h4>

<p>JSON support in Common Lisp is a god damn mess.  There are <a href="https://sites.google.com/site/sabraonthehill/home/json-libraries">an absurd number of
JSON libraries</a> and I don't really <em>like</em> any of them.</p>

<p>For me, the most important quality I need in a JSON library is an unambiguous,
one-to-one mapping of types.  For example: some libraries will deserialize JSON
arrays as Lisp lists, and JSON <code>true</code>/<code>false</code> as <code>t</code>/<code>nil</code>.  But this means <code>[]</code> and
<code>false</code> both deserialize to <code>nil</code>, so you can't reliably round trip anything!</p>

<p>I've settled on using <a href="https://marijnhaverbeke.nl/st-json/">st-json</a> and wrapping it up to be a little more
ergonomic with some glue code.  It's not the fastest solution out there, but
it works for my needs.  There are plenty of other options out there, so if you
have different needs than me you should look into them.</p>

<h4 id="s49-usocket"><a href="#s49-usocket">usocket</a></h4>

<p><a href="https://common-lisp.net/project/usocket/">usocket</a> is a library for networking sockets.  Sockets and networking aren't
part of the Common Lisp standard, but most implementations provide a custom
interface for working with them.  usocket wraps the implementation-specific
interfaces and provides an API so you can write networking code portably.</p>

<p>If you want to make Lisp listen on a port and read streams of bytes from
clients, or want to connect to a port and send raw bytes to it, this is what you
want.</p>

<h2 id="s50-good-luck"><a href="#s50-good-luck">Good Luck!</a></h2>

<p>I hope this whirlwind tour was useful.  Common Lisp is an old, deep language.
It's not something you can learn in a month, but if you're willing to spend the
time it will reward careful study.</p>

<p>Feel free to email me or pop into IRC or Discord if you have questions.</p>

<p>Good luck!</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Sam Altman Is Showing Us Who He Really Is (325 pts)]]></title>
            <link>https://slate.com/technology/2024/05/scarlett-johansson-ai-voice-sam-altman-openai.html</link>
            <guid>40434800</guid>
            <pubDate>Tue, 21 May 2024 22:25:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://slate.com/technology/2024/05/scarlett-johansson-ai-voice-sam-altman-openai.html">https://slate.com/technology/2024/05/scarlett-johansson-ai-voice-sam-altman-openai.html</a>, See on <a href="https://news.ycombinator.com/item?id=40434800">Hacker News</a></p>
<div id="readability-page-1" class="page"><article data-uri="slate.com/_components/article/instances/clwguixmj009k9skq6h6zx1ol@published" data-has-roadblock="false" data-rubric="the-industry" itemscope="" itemtype="http://schema.org/Article">
  

  

<header>

  <a href="https://slate.com/technology/the-industry">      The Industry</a>

  

<h2 itemprop="alternativeHeadline">We should believe him.</h2>


    </header>
<div>
      <figure data-uri="slate.com/_components/image/instances/clwguixmj009d9skq1z3bk7uf@published" data-editable="imageInfo"><p><img loading="lazy" src="https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0" alt="Sam Altman and Scarlett Johansson facing off with an OpenAI logo between them" width="1560" height="1040" srcset="https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=320 320w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=480 480w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=600 600w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=840 840w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=960 960w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1280 1280w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1440 1440w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1600 1600w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1920 1920w,
https://compote.slate.com/images/0c86f783-b55b-41d2-9e50-4022fae4f0a9.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=2200 2200w">
        
      </p>
<figcaption>
<span>Photo illustration by Slate. Photos by Mike Coppola/Getty Images for Time and Andreas Rentz/Getty Images.</span>
</figcaption>
</figure>

  </div>
  

  <section>
      


      

    <div itemprop="mainEntityOfPage">
          <p data-word-count="52" data-uri="slate.com/_components/slate-paragraph/instances/clwguixmj009e9skqd74r89vp@published">OpenAI, the research firm whose 2022 launch of ChatGPT single-handedly pushed “artificial intelligence” into the mainstream, isn’t often inclined to back down from the knotty disputes—over copyright, safety concerns, appropriate regulations—that its innovative tech has raised. Yet this month, it antagonized someone much more powerful, and is already retreating just a touch.</p>

  <p data-word-count="46" data-uri="slate.com/_components/slate-paragraph/instances/clwguog0k001v3b6zjqs3c7hy@published">On Monday evening, <a href="https://www.npr.org/2024/05/20/1252495087/openai-pulls-ai-voice-that-was-compared-to-scarlett-johansson-in-the-movie-her">Scarlett Johansson issued a statement to NPR’s Bobby Allyn</a> about OpenAI’s <a href="https://openai.com/index/hello-gpt-4o/">GPT-4o announcement</a>, which the company showcased in a live demonstration just last week. Specifically, the multimodal computer interaction model centered around a voice assistant named Sky, whose timbre really, <em>really</em> resembled ScarJo’s.</p>

  <p data-word-count="95" data-uri="slate.com/_components/slate-paragraph/instances/clwguog27001w3b6zx9o5tbmu@published">“Last September, I received an offer from Sam Altman, who wanted to hire me to voice the current ChatGPT 4.0 system,” <a href="https://www.hollywoodreporter.com/business/business-news/openai-pulls-chatgpt-voice-sounds-like-scarlett-johansson-1235904085/">Johansson wrote</a>. “After much consideration and for personal reasons, I declined the offer. Nine months later, my friends, family and the general public all noted how much the newest system named ‘Sky’ sounded like me. When I heard the released demo, I was shocked, angered and in disbelief that Mr. Altman would pursue a voice that sounded so eerily similar to mine that my closest friends and news outlets could not tell the difference.”</p>

  

  

  


  <p data-word-count="57" data-uri="slate.com/_components/slate-paragraph/instances/clwguog3q001x3b6za1ae57o0@published">Johansson likewise mentioned that she was “forced” to hire lawyers who wrote letters to Altman and his company, after which “OpenAI reluctantly agreed” to switch out the voice. Indeed, earlier that morning, OpenAI tweeted that it was “<a href="https://x.com/OpenAI/status/1792443575839678909">working to pause the use of Sky</a>” after hearing “questions about how we chose the voices in ChatGPT, especially Sky.”</p>

  


  


  


  <p data-word-count="42" data-uri="slate.com/_components/slate-paragraph/instances/clwguog71001z3b6z5r93ihe0@published">“We believe that AI voices should not deliberately mimic a celebrity’s distinctive voice—Sky’s voice is not an imitation of Scarlett Johansson but belongs to a different professional actress using her own natural speaking voice,” the company insisted in an <a href="https://openai.com/index/how-the-voices-for-chatgpt-were-chosen/">accompanying blog post</a>.</p>

  <p data-word-count="54" data-uri="slate.com/_components/slate-paragraph/instances/clwguog8s00203b6zbk8mp3xx@published">Altman also spoke to Johansson’s explicit objection after NPR’s reporting, telling the public broadcaster: “We cast the voice actor behind Sky’s voice before any outreach to Ms. Johansson. Out of respect for Ms. Johansson, we have paused using Sky’s voice in our products. We are sorry to Ms. Johansson that we didn’t communicate better.”</p>

  


  <p data-word-count="81" data-uri="slate.com/_components/slate-paragraph/instances/clwguoga800213b6z1k986xv7@published">It was a strange apology and dubious explanation, not least because Altman <em>himself</em> invited comparisons of Sky’s voice to Johansson’s during the GTP-4o rollout. As was noted amply last week, he tweeted the word “<a href="https://x.com/sama/status/1790075827666796666?lang=en">her</a>,” in obvious reference to what <a href="https://sfstandard.com/2023/09/12/sam-altman-dreamforce-2023/">he’s previously called his favorite movie</a>: <em>Her, </em>the 2013 <a href="https://slate.com/culture/2014/01/her-movie-by-spike-jonze-with-joaquin-phoenix-and-scarlett-johansson-lacks-a-real-woman.html">Oscar-winning drama</a> in which Johansson voices a Siri-like voice assistant with whom the film’s protagonist falls in love. (Altman, in a subsequent personal blog post: “<a href="https://blog.samaltman.com/gpt-4o">It feels like AI from the movies</a>.”)</p>

  <p data-word-count="77" data-uri="slate.com/_components/slate-paragraph/instances/clwguogbs00223b6zva6a045h@published">What’s more, as Johansson mentioned in her statement: “Two days before the ChatGPT 4.0 demo was released, Mr. Altman contacted my agent, asking me to reconsider. Before we could connect, the system was out there.” And, as the Washington Post’s Nitasha Tiku <a href="https://x.com/nitashatiku/status/1792730629735624849">tweeted</a>, she noticed during a live demo in September—the very same month that OpenAI reportedly offered ScarJo its hire-for-training offer—that the Sky voice even then sounded like Johansson, and that executives denied this was “intentional.”</p>

  


  

  


  <p data-word-count="80" data-uri="slate.com/_components/slate-paragraph/instances/clwguoger00243b6zrdjm9xd0@published">Naturally, this hullabaloo has invited quite a bit of attention: The world’s most influential A.I. company is squaring off against a <a href="https://www.theguardian.com/film/2021/oct/01/scarlett-johansson-settles-black-widow-lawsuit-disney">brand-name and litigation-happy celebrity</a>, over a rather bizarre interpretation of one of her most acclaimed movies, in a reference that was employed in large part to launch one of OpenAI’s most esteemed upgrades to date—and one that has already fueled a <a href="https://techcrunch.com/2024/05/20/chatgpts-mobile-app-revenue-saw-biggest-spike-yet-following-gpt-4o-launch/">surge in its mobile-app revenue</a> (as well as controversy over the <a href="https://www.technologyreview.com/2024/05/17/1092649/gpt-4o-chinese-token-polluted/">spam used to train</a> its Chinese-language capabilities).</p>

  


  <p data-word-count="48" data-uri="slate.com/_components/slate-paragraph/instances/clwguoggn00253b6zarqbiktp@published">The timing is a bit eyebrow-raising as well, considering that Johansson and her fellow actors only reached a post-strike union deal months ago—one fueled in large part over concerns <a href="https://slate.com/technology/2023/06/screen-actors-guild-artificial-intelligence-strike-digital-doubles.html">regarding A.I.’s impacts on the movie industry</a>. It makes sense that SAG-AFTRA publicly <a href="https://www.nbcnews.com/tech/sag-aftra-applauds-scarlett-johansson-rebuking-openai-voice-sounded-rcna153256">praised Johansson’s stance</a> here against OpenAI.</p>

  


  


  <p data-word-count="119" data-uri="slate.com/_components/slate-paragraph/instances/clwguogi200263b6z6syf43hn@published">It’s also unusual to see Altman and his executives assume a preemptively defensive crouch on this, especially since they’ve offered little in the way of apology or transparency when it comes to the heaping amounts of data used to train and power apps like ChatGPT and DALL-E 3—other than admitting it would be “<a href="https://www.theguardian.com/technology/2024/jan/08/ai-tools-chatgpt-copyrighted-material-openai">impossible</a>” to train these models without sucking up vast amounts of copyright work, whether books or artworks or articles, sans permission or disclosure. The company is already fending off <a href="https://www.courthousenews.com/authors-guild-to-add-microsoft-in-its-lawsuit-against-openai/">lawsuits</a> from <a href="https://www.latimes.com/business/story/2024-02-16/column-sarah-silvermans-openai-copyright-lawsuit-ai">authors</a> and <a href="https://www.reuters.com/legal/us-newspapers-sue-openai-copyright-infringement-over-ai-training-2024-04-30/">news publishers</a> over this very practice—and ironically, as 404 Media reported this month, it also <a href="https://www.404media.co/openai-files-copyright-claim-against-chatgpt-subreddit/">sent a “copyright complaint” to the moderators</a> of the OpenAI subreddit over their use of … OpenAI’s logo.</p>

  


  <p data-word-count="71" data-uri="slate.com/_components/slate-paragraph/instances/clwguogjl00273b6zhuom9wde@published">Yet OpenAI’s reportedly aggressive actions in courting ScarJo’s voice and then pressing ahead without her consent have invited a <a href="https://x.com/BobbyAllyn/status/1792679435701014908/quotes">new level of public opprobrium</a> against the otherwise popular app-maker. The resulting damage control may arise from the fact that this incident, plus other developments from inside OpenAI’s offices over the past few months, may be exposing something else about the notoriously closed-lid firm: what kind of person Sam Altman <em>really</em> is.</p>

  


  


  <p data-word-count="120" data-uri="slate.com/_components/slate-paragraph/instances/clwguogl200283b6zw1skff4s@published">The last time OpenAI drama made national news occurred when the majority of the company’s board gave a no-confidence vote in Altman and <a href="https://slate.com/technology/2023/11/sam-altman-fired-openai-mira-murati.html">suddenly fired</a> him in November. They claimed that “he was not consistently candid in his communications with the board, hindering its ability to exercise its responsibilities.” The vague statement and rapid action led to public speculation that coalesced into an <a href="https://slate.com/technology/2023/11/openai-sam-altman-ai-microsoft-eacc-effective-altruism.html">all-out war between</a> two staunch sides: one consisting of Altman and his unfailingly loyal lieutenants, the other consisting of underlings and overseers worried over how quickly Altman wanted to develop and deploy new products, with little consideration to their potential for misuse, as well as his “psychologically abusive” treatment of employees (as <a href="https://www.washingtonpost.com/technology/2023/12/08/open-ai-sam-altman-complaints/">the Post’s Tiku had reported</a>).</p>

  


  <p data-word-count="65" data-uri="slate.com/_components/slate-paragraph/instances/clwguogmi00293b6zh6o5z4zn@published">The aftereffects of that dust-up lingered for months after Altman was restored and the OpenAI <a href="https://slate.com/technology/2023/11/openai-sam-altman-ai-microsoft-eacc-effective-altruism.html">board was (mostly) purged</a> of his opponents. Ilya Sutskever, a main character in the November saga who’d <a href="https://www.nytimes.com/2023/11/21/technology/openai-altman-board-fight.html">reportedly questioned</a> Altman’s honesty but stayed on at OpenAI, apparently “<a href="https://www.nytimes.com/2024/05/14/technology/ilya-sutskever-leaving-openai.html">never returned to work</a>” in the months following the fight, according to the New York Times. Last week, the company announced his departure.</p>

  <p data-word-count="77" data-uri="slate.com/_components/slate-paragraph/instances/clwguognz002a3b6zlv3jjmdh@published">Just hours after that news, the <a href="https://x.com/janleike/status/1791498174659715494">head of Sutskever’s team announced <em>his</em> resignation</a>, tweeting that he’d “been disagreeing with OpenAI leadership about the company’s core priorities for quite some time, until we finally reached a breaking point.” <a href="https://www.vox.com/future-perfect/2024/5/17/24158403/openai-resignations-ai-safety-ilya-sutskever-jan-leike-artificial-intelligence">Reporters at Vox</a> revealed that “at least five more of the company’s most safety-conscious employees have either quit or been pushed out” since November, with one of those quitters telling the website that he’d “gradually lost trust in OpenAI leadership.”</p>

  


  


  


  <p data-word-count="58" data-uri="slate.com/_components/slate-paragraph/instances/clwguogpd002b3b6zk71zd0w0@published">There are likely still others who <em>can’t</em> talk, as Vox found out, because of an “<a href="https://www.vox.com/future-perfect/2024/5/17/24158478/openai-departures-sam-altman-employees-chatgpt-release">extremely restrictive off-boarding agreement</a>” that OpenAI employees are forced to sign if they want to retain any vested equity with the company—and that “forbids them, for the rest of their lives, from criticizing their former employer” or “even acknowledging that the NDA exists.”</p>

  


  <p data-word-count="73" data-uri="slate.com/_components/slate-paragraph/instances/clwguogqp002c3b6z5i00d3hq@published">These revelations made waves in the tech world even prior to the ScarJo incident; Altman claimed on X that he was <a href="https://x.com/sama/status/1791936857594581428">unaware of the equity provision</a>, that it was being rewritten, and that “if any former employee who signed one of those old agreements is worried about it, they can contact me and we’ll fix that too.” But in light of Altman’s reputation within Silicon Valley, this comes across as a bit fishy.</p>

  


  
  <p data-word-count="71" data-uri="slate.com/_components/slate-paragraph/instances/clwguogss002d3b6zcpacjspp@published">Past <a href="https://www.technologyreview.com/2020/02/17/844721/ai-openai-moonshot-elon-musk-sam-altman-greg-brockman-messy-secretive-reality/">reporting from the MIT Technology Review</a> has indicated that OpenAI “is obsessed with maintaining secrecy, protecting its image, and retaining the loyalty of its employees.” This appeared to play out in April, when the Information reported that two OpenAI staffers, one of them an ally of Sutskever’s, were fired for “<a href="https://www.theinformation.com/articles/openai-researchers-including-ally-of-sutskever-fired-for-alleged-leaking">allegedly leaking information</a>.” As Bloomberg has noted, Altman is quietly thought of among his industry as “<a href="https://www.bloomberg.com/news/articles/2023-11-18/the-perpetual-rise-of-sam-altman-takes-an-unexpected-turn">ambitious, cunning, even Machiavellian</a>.”</p>

  <p data-word-count="81" data-uri="slate.com/_components/slate-paragraph/instances/clwguogu9002e3b6zrl9zztr7@published">Other details from OpenAI’s ongoing copyright battles appear to bolster this. As part of its suit with the Authors Guild, documents were released showing how OpenAI deleted two massive datasets, consisting of “<a href="https://www.businessinsider.com/openai-destroyed-ai-training-datasets-lawsuit-authors-books-copyright-2024-5">more than 100,000 published books</a>,” that had been used to train an early iteration of its GPT model. Furthermore, the employees tasked with scrubbing that data were no longer with OpenAI, which had refused to disclose anything about its training-data history to the Authors Guild prior to this lawsuit.</p>

  


  

  <p data-word-count="116" data-uri="slate.com/_components/slate-paragraph/instances/clwguogvm002f3b6ze0r847oi@published">On Monday, the lead counsel for <a href="https://slate.com/podcasts/what-next-tbd/2024/01/media-to-ai-no-payin-no-trainin">the New York Times’ own suit against OpenAI</a> sent a letter to the presiding judge, <a href="https://storage.courtlistener.com/recap/gov.uscourts.nysd.612697/gov.uscourts.nysd.612697.117.0.pdf">accusing the company</a> of delaying a similar discovery process by “taking weeks to respond, dragging out negotiations over a protective order, and refusing to quickly produce basic information.” Oh yeah, and the Securities and Exchange Commission is <a href="https://www.wsj.com/tech/sec-investigating-whether-openai-investors-were-misled-9d90b411">investigating Altman’s comms in a probe</a> over whether he and other senior OpenAI leaders misled the company’s investors. Yet Altman clearly hopes all this will wash away: OpenAI’s first post in the aftermath of the ScarJo squabble was a “<a href="https://openai.com/index/openai-safety-update/">safety update</a>” for the AI Seoul Summit, which mentions that “we prioritize protecting our customers, intellectual property, and data.”</p>

  


  


  


  <p data-word-count="95" data-uri="slate.com/_components/slate-paragraph/instances/clwguogx1002g3b6z41faspnx@published">For all Altman talks about the importance of “<a href="https://www.nytimes.com/2023/11/29/technology/openai-sam-altman-plans.html">transparency</a>,” for all the generosity he’s <a href="https://openai.com/index/sam-altman-returns-as-ceo-openai-has-a-new-initial-board/">professed</a> toward OpenAI’s dissenters, and for all the <a href="https://slate.com/technology/2023/05/sam-altman-openai-hearing-senate-chatgpt-frivolous-lawsuit.html">governmental glad-handing</a> he’s done to paint himself as a <a href="https://static1.squarespace.com/static/66465fcd83d1881b974fe099/t/664b8a3ad1b9b048865322c5/1716226618595/AI+Senate+Shadow+Report.pdf">responsible steward</a> of A.I., it seems pretty clear he’s unafraid of playing a completely different game under wraps. If the underlying record of how he appears to treat his own employees, run his company, and keep his secrets clashes so much with his public statements, why should anyone—least of all Scarlett Johansson herself—trust that he actually went about Sky’s voice-training process in good <span>faith?</span></p>

  

  

</div>

      <ul>
<li>
            <a href="https://slate.com/tag/artificial-intelligence">
              Artificial Intelligence
            </a>
          </li><li>
            <a href="https://slate.com/tag/celebrities">
              Celebrities
            </a>
          </li>      </ul>

  </section>

      

</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Clever code is probably the worst code you could write (155 pts)]]></title>
            <link>https://read.engineerscodex.com/p/clever-code-is-probably-the-worst</link>
            <guid>40434766</guid>
            <pubDate>Tue, 21 May 2024 22:21:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://read.engineerscodex.com/p/clever-code-is-probably-the-worst">https://read.engineerscodex.com/p/clever-code-is-probably-the-worst</a>, See on <a href="https://news.ycombinator.com/item?id=40434766">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><em><span>Engineer’s Codex is a free publication about real-world software engineering. I write about real-world </span><a href="https://engineercodex.substack.com/p/how-instagram-scaled-to-14-million" rel="">technical case studies</a><span>, </span><a href="https://engineercodex.substack.com/p/how-one-line-of-code-caused-a-60" rel="">outages</a><span>, and </span><a href="https://engineercodex.substack.com/p/how-to-burnout-a-software-engineer" rel="">interesting stories</a><span> from the industry.</span></em></p><p>When I was an undergrad, Leetcode broke my brain. I would see top solutions of esoteric one-liners and wrongly think “how do I ever get this good?”</p><p>This is commonly called “code golfing”. It’s a fun hobby, but very far from “good code.”</p><p>Everybody (including those on Leetcode) knows this isn’t good code. In the industry, it’s the worst code one could write.</p><p><span>However, on the other end of the spectrum, I realized eventually that the </span><strong>clearest code was actually the hardest to write.</strong></p><p>It made sense retrospectively. Reviewing the code of a senior staff software engineer was much easier to follow and review compared to the code of an entry-level L3 engineer.</p><p>The “power” of clear code, for better or for worse, was made fully clear to me after a certain incident at work.</p><p>I once wrote a data enrichment module in C++, a language that is generally harder to read compared to other languages simply due to its verbosity.</p><p>I started with just two files (.h/.cpp) and all the implementation code went into just these two files.</p><p>The result was this giant, disgusting piece of spaghetti on the inside, but a perfectly working program on the outside.</p><p><span>This would </span><em>never</em><span> get past code review.</span></p><p><span>I split the implementation into 30+ diffs. At the time I was working at a company that used </span><a href="https://newsletter.pragmaticengineer.com/p/stacked-diffs" rel="">stacked diffs</a><span>. (This also happened to be my personal record for length of chained diffs, so I was pretty proud of the following outcome 🙂).</span></p><p>Each diff was a neat, containerized piece of code, with convenient placeholders for dependencies that would arrive in a later diff. It had code neatly split out into helper functions and helper files when necessary.</p><p>Each diff had reasonable unit test coverage - the basics and some obvious edge cases were covered, but I didn’t go wastefully overboard with it.</p><p><span>Each diff also took me quite a few iterations of “code cleaning,” refactoring, and more. </span><strong>It took a lot more effort than I expected to achieve “clear code,” especially for such a large program.</strong></p><p><span>The result? </span><em>A beautiful landing of the data enrichment module, with easy to read, clear code.</em></p><p><span>While I was proud of it, there was suddenly a </span><strong>problem</strong><span> when I talked to my manager about it.</span></p><blockquote><p>“While I understand how complex this was, when it comes to performance reviews, this code looks trivial. It looks too easy, too simple.</p><p>I would recommend writing an implementation doc of this module just so we can demonstrate that this was actually quite complex.”</p></blockquote><p><span>I was shocked - this wasn’t some startup. This was one of the biggest companies in the world, </span><em>known for their engineering culture</em><span>.</span></p><p><span>I now understood why Big Tech seemingly had so many docs — half of the docs I wrote didn’t </span><em>need</em><span> to be written, except they did… because I wanted to get raises and be promoted.</span></p><p><span>While promotion culture in Big Tech is a story for another article (subscribe to see it in your inbox soon 🙂), the main point here is that </span><strong>great code is very clear and readable.</strong></p><p><span>There’s a </span><a href="https://github.com/dwmkerr/hacker-laws#kernighans-law" rel="">popular saying</a><span> that </span><strong>debugging code is twice as hard as writing it</strong><span>. It’s the reason why when ChatGPT outputs some hogwash, it’s easier just to re-prompt it or write it from scratch yourself instead of trying to figure out the errors in its buggy code.</span></p><blockquote><p>Clever code is harder to read and looks esoteric.</p><p>Clear code is harder to write and looks easy.</p></blockquote><ul><li><p><span>The only way I got better at writing clear, readable code was just </span><strong>writing a lot of code while strictly following a clear style guide.</strong></p><ul><li><p>Also, having more experienced devs review my code with a magnifying glass. </p><ul><li><p>It was agony to get tons of comments and “nits” about seemingly pointless style in the beginning, but it paid off in the end.</p></li></ul></li></ul></li><li><p><span>Coding style is </span><strong>more important</strong><span> than I expected in the beginning. My start to software engineering started from being on the product-minded end of the spectrum and moved towards the “technical-minded” side of the spectrum.&nbsp;</span></p><ul><li><p>I had started coding solely to start a business, so I initially only cared about code as a tool, resulting in crappy, unmaintainable code.</p></li><li><p>It’s only through more experience with writing code and working within teams that the importance of clear, readable code became more obvious.</p></li><li><p>It’s not just me. This is an obvious revelation to anybody who has been writing code in the industry for more than a year. </p></li></ul></li><li><p><strong><a href="http://number-none.com/blow/john_carmack_on_inlined_code.html" rel="">John Carmack once wrote a long email about coding style in 2007, which is an interesting read.</a></strong></p></li><li><p><a href="https://engineercodex.substack.com/p/how-google-writes-clean-maintainable" rel="">Google probably has the most public style guide</a><span>. Vercel also recently released their </span><a href="https://github.com/vercel/style-guide?utm_source=tldrwebdev" rel="">style guide</a><span>, and pretty much every company uses some sort of linter and prettifier.</span></p></li></ul><p><span>My friend Jordan Cutler, who writes the popular </span></p><p><span> , is holding a course: </span><strong><a href="https://maven.com/jordan-cutler/mid-level-to-senior?promoCode=CODEX" rel="">Mid-level to Senior for high-growth engineers</a><span>.</span></strong></p><p>I’m a huge advocate for Jordan - he’s an extremely kind, driven, and encouraging friend.</p><p><strong><a href="https://maven.com/jordan-cutler/mid-level-to-senior?promoCode=CODEX" rel="">If you’re interested in growing as a software engineer, I would highly recommend his course.</a></strong></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Stanford Startup and the MIT Startup (2013) (157 pts)]]></title>
            <link>http://fpgacomputing.blogspot.com/2013/11/the-stanford-startup-and-mit-startup.html</link>
            <guid>40434290</guid>
            <pubDate>Tue, 21 May 2024 21:35:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://fpgacomputing.blogspot.com/2013/11/the-stanford-startup-and-mit-startup.html">http://fpgacomputing.blogspot.com/2013/11/the-stanford-startup-and-mit-startup.html</a>, See on <a href="https://news.ycombinator.com/item?id=40434290">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-3285336502974184807" itemprop="description articleBody">
<p><b>Message from a Jedi to a Young Padawan</b><br>
When I graduated and was considering pursuing startups, an alum from my fraternity gave me some advice. He was a successful entrepreneur and sent me a message about pursuing technology-oriented startups.&nbsp;He presented a maxim about an MIT company and a Stanford company building products for the same market. The Stanford company gets a product out quickly, they make money, iterate and then raise money. They use network effects to lock-in customers or viral growth tactics to get super-linear returns on marketing investment. The MIT company seeks to develop an unassailable technical advantage, optimizing their product or process in terms of kilojoules, units per second, and dollars. They either find a market-fit or sell their technology to the Stanford company.</p><p>

The dichotomy is between a focus on technology development and a focus on market development.</p><p>

Let me present an instance of this: two startups are selling environmentally-friendly ammonia (a real and big problem).</p><p>

<b>The Pitch</b><br>
The MIT company: "Our unique chemical process allows us to produce ammonia with no environmental impact for 10 percent less cost than competitors. We can modify our catalytic nanoparticle process for the production of perchlorates and sulfates, and dominate the industrial chemical supply industry."</p><p>

The Stanford company: "We sell premium household cleaning supplies and fertilizer that are produced&nbsp;sustainably&nbsp;and good for the environment. We sell in stores and offer a monthly subscription model; receiving a package will remind you to clean up your house and water your flowers."</p><p>

<b>Sales and Marketing</b><br>
The MIT startup has no sales to customers, but possibly a DARPA grant to develop their technology. The team has 9 PhDs and just hired an MBA to start finding customers.&nbsp;They believe their technical advantage using solar-powered nano-crystalline catalysts will enable them to lower the cost of production of commodity chemicals and therefore dominate the market.&nbsp;Their customers will be the major fertilizer, pharmaceutical and consumer product companies.&nbsp;Google for the company name and you will find a landing page. They are still "in stealth mode" while they finish up some R&amp;D and production optimizations for their nano-particle production. Team MIT needs funding to develop a manufacturing facility (and to survive as a company). Their vision for sales and distribution involves hundreds of payments for tens of millions of dollars each year for shipment sizes that look like something out of The Wire or Breaking Bad.</p><p>

The Stanford startup has developed no new technology but has already validated its customer model selling sustainable branded cleaners and fertilizers at a local Whole Foods and Home Depot. Costs for sustainably produced chemicals are higher, but the founders maxed out their credit card buying a wholesale shipment and were able to sell a premium retail product at a small profit. They setup stands at farmers' markets to sign people up for monthly packages of cleaning supplies and plant food. After testing their market hypothesis, they decided to focus on cleaning products and limit marketing for the fertilizer product because that strategy generated more recurring revenue for less cost. Attrition rate for the cleaning product shipments is lower than growth and there are customers posting on the internet about how much they "appreciate the hand-signed note thanking them for supporting their mission to spread sustainable production." They have thousands of monthly customers, they know their cost per customer acquisition and they know their average revenue per customer. Team Stanford think they could get millions of customers to pay them $9 a month for their product; which includes rags in addition to ammonia and bleach. They are still tracking a growing market niche for sustainable home food growing systems including plant food and seeds. They think viral marketing strategies will help them reduce their customer acquisition costs so they want funding to expand logistics and distribution in other regions and try some other growth strategies like advertisements, and letting people choose scents in-stores before placing an order.</p><p>

<b>Investor Response</b><br>
The outcome for either of these companies is non-obvious. The MIT company claims to have the successor to the Haber-Bosch process, a chemical process technology that won its inventors Nobel prizes and was the foundation for what was once the world's largest chemical supplier. However, they want to enter an established commodity market and need to prove that they can scale sales from zero. Investors will need to vet the technology before they can fund the company. Investors look for "order of magnitude better" when vetting technology companies to determine if the technology is defensible. Very few investors will have an understanding of the chemical supply market and fewer still will understand the founders' PhD work optimizing production of ammonia using nano-particle colloids. They will also need a lot of funding before they can serve this market.</p><p>

On the other hand, the Stanford startup has traction in a market and will likely have a much easier time raising funding. Investors will understand their consumer market and they won't require technical vetting. It is unclear if their market position is defensible. &nbsp;Someone else can replicate what they do especially since there are no network effects where the total value of the product increases with more users thus creating market lock-in. However, they don't need much funding to grow their sales and they are looking to scale from a solid profitable foundation, which decreases the perceived risk to investors.</p><p>

The MIT startup could potentially be a $100B company in the chemical supply market.&nbsp;However, the Stanford startup can be reasonably valued at $10M today based on traction and will get term sheets from many investors. The MIT startup is much more speculative today and needs to find a wealthy individual to bankroll their first factory or take strategic investment from large potential customers.</p><p>

<b>Conclusions</b><br>
There are many companies that fit both of these patterns and end up successful. The successful technology startups eventually develop a market approach. A lot of founders pivot from developing hi-tech to do entirely different market-focused ventures. Some founders have taken both approaches in separate companies and been successful at both. Conventional wisdom suggests the best startups develop technology and a market simultaneously. Many startups can operate with just a telephone and a spreadsheet on day one and then use technology to automate their operations. Technology is not a prerequisite for business success, but marketing is.
</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Wikimedia Enterprise – APIs for LLMs, AI Training, and More (196 pts)]]></title>
            <link>https://enterprise.wikimedia.com/</link>
            <guid>40433511</guid>
            <pubDate>Tue, 21 May 2024 20:32:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://enterprise.wikimedia.com/">https://enterprise.wikimedia.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40433511">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div><p><img decoding="async" alt="" src="https://enterprise.wikimedia.com/wp-content/themes/wikimedia-enterprise-theme/assets/images/hero-squirrel-right.jpg" data-object-fit="cover" data-object-position="60% 72%"></p><div>
<h2>Enterprise-grade APIs for Search Engines, LLMs, Deep Learning &amp; more</h2>



<p>Enrich user experience by improving answers to user questions and augmenting search results no matter your platform size.</p>
</div></div>



<div>
<h6><mark><strong>Real-time access to Knowledge</strong></mark></h6>



<p>Retrieve or Stream data from Wikimedia projects in any language, access metadata packaged exclusively for Wikimedia Enterprise. Detect vandalism and important updates at the article level.</p>



<h6><mark><strong>Built for Search &amp; Knowledge Graphs</strong></mark></h6>



<p>Unleash the potential within your own organization. Use Wikimedia Enterprise to populate and refine knowledge graphs, LLMs, voice assistants, training models, AI and so much more.</p>
</div>



<section>
<div>
<p><strong><mark><strong>API Solutions</strong></mark></strong></p>



<h2>Data Delivery You Can Trust</h2>



<div>
<div>
<h6><strong>Frequent</strong></h6>



<p>Access the most current and accurate information, and ensure that your content is up-to-date and relevant. Daily and hourly snapshots and available real-time service make out-of-date exports a thing of the past.</p>
</div>



<div>
<h6><strong>Reliable</strong></h6>



<p>Written agreements, no additional content restrictions, SLAs, 24/7 support, and contractual guarantees against surprise breaking changes make working with Wikimedia Enterprise safe and reliable at scale.</p>
</div>



<div>
<h6><strong>Usable</strong></h6>



<p>Wikimedia Enterprise APIs are well-documented and supported by a dedicated team of engineers, making it easier for your team to get started and implement.</p>
</div>
</div>
</div>







<div>
<h2>Reliable &amp; Consistent Wikimedia Content</h2>



<div>
<div>
<h6><strong>Content with Integrity</strong></h6>



<p>Reduce risk by improving the accuracy and reliability of content served to your users. Wikimedia Enterprise has multiple tools and processes designed to help detect the introduction of inaccurate or biased information in project content.</p>
</div>



<div>
<h6><strong>Machine Readable</strong></h6>



<p>Parse and extract specific information from well-structured, well-documented services. Access multiple machine-readable data formats with globally consistent identifiers and API responses, whether you’re requesting a single article, an entire project’s snapshot, or the real-time stream.</p>
</div>
</div>
</div>








</section>



<section>
<div>
<p><strong><mark><strong>What Data is included in the APIs?</strong></mark></strong></p>



<h2>Wikimedia Enterprise API Project Data</h2>
</div>



<div>
<div>
<figure><img fetchpriority="high" decoding="async" width="400" height="373" src="https://enterprise.wikimedia.com/uploads/2022/06/wikimedia-network-projects-grey.png" alt="" srcset="https://enterprise.wikimedia.com/uploads/2022/06/wikimedia-network-projects-grey.png 400w, https://enterprise.wikimedia.com/uploads/2022/06/wikimedia-network-projects-grey-300x280.png 300w" sizes="(max-width: 400px) 100vw, 400px"></figure>
</div>



<div>
<p>Wikipedia alone has grown into the world’s largest reference website. Wikimedia Enterprise APIs make it easy to access the knowledge contained across Wikipedia, in over 330 language editions, along with other Wikimedia Projects.</p>



<p><a href="https://enterprise.wikimedia.com/projects/" data-type="page" data-id="81">Explore Included Project Data</a> <a href="https://enterprise.wikimedia.com/projects/">→</a></p>
</div>
</div>



<div>
<div>
<figure><img decoding="async" src="https://enterprise.wikimedia.com/wp-content/themes/wikimedia-enterprise-theme/assets/images/icons/bubbleChart.svg" alt=""></figure>




</div>



<div>
<figure><img decoding="async" src="https://enterprise.wikimedia.com/wp-content/themes/wikimedia-enterprise-theme/assets/images/icons/pages.svg" alt=""></figure>



<div>
<p><strong>100M+</strong></p>



<p>unique project pages</p>
</div>
</div>



<div>
<figure><img decoding="async" src="https://enterprise.wikimedia.com/wp-content/themes/wikimedia-enterprise-theme/assets/images/icons/fullTime.svg" alt=""></figure>




</div>
</div>




</section>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[What's New in Kotlin 2.0.0 (109 pts)]]></title>
            <link>https://kotlinlang.org/docs/whatsnew20.html</link>
            <guid>40433164</guid>
            <pubDate>Tue, 21 May 2024 20:03:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kotlinlang.org/docs/whatsnew20.html">https://kotlinlang.org/docs/whatsnew20.html</a>, See on <a href="https://news.ycombinator.com/item?id=40433164">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main><div><article data-shortcut-switcher="inactive">  <p id="85a76721"><em id="356d7167"><a href="https://kotlinlang.org/docs/releases.html#release-details" id="71c14722">Released: May 21, 2024</a></em></p><p id="10974cf2">The Kotlin 2.0.0 release is out and the <a href="#kotlin-k2-compiler" id="54e7654">new Kotlin K2 compiler</a> is Stable! Additionally, here are some other highlights:</p><ul id="55f446fd"><li id="f66b3991"><p><a href="#new-compose-compiler-gradle-plugin" id="52d0c70a">New Compose compiler Gradle plugin</a></p></li><li id="cd724e67"><p><a href="#generation-of-lambda-functions-using-invokedynamic" id="28d17196">Generation of lambda functions using invokedynamic</a></p></li><li id="d9be6a29"><p><a href="#the-kotlinx-metadata-jvm-library-is-stable" id="2759653a">The kotlinx-metadata-jvm library is now Stable</a></p></li><li id="97da1d3e"><p><a href="#monitoring-gc-performance-with-signposts-on-apple-platforms" id="71885a0b">Monitoring GC performance in Kotlin/Native with signposts on Apple platforms</a></p></li><li id="97410bca"><p><a href="#resolving-conflicts-with-objective-c-methods" id="5b3b4143">Resolving conflicts in Kotlin/Native with Objective-C methods</a></p></li><li id="9872f52b"><p><a href="#support-for-named-export" id="2ff68685">Support for named export in Kotlin/Wasm</a></p></li><li id="d60865dc"><p><a href="#support-for-unsigned-primitive-types-in-functions-with-jsexport" id="e6d36940">Support for unsigned primitive types in functions with @JsExport in Kotlin/Wasm</a></p></li><li id="607ebbb8"><p><a href="#optimized-production-builds-by-default-using-binaryen" id="9a835beb">Optimize production builds by default using Binaryen</a></p></li><li id="c5cc6ab8"><p><a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects" id="8476c03e">New Gradle DSL for compiler options in multiplatform projects</a></p></li><li id="84fcc0a3"><p><a href="#stable-replacement-of-the-enum-class-values-generic-function" id="a0060295">Stable replacement of the enum class values generic function</a></p></li><li id="e733d046"><p><a href="#stable-autocloseable-interface" id="462bd411">Stable AutoCloseable interface</a></p></li></ul><section><h2 id="ide-support" data-toc="ide-support">IDE support</h2><p id="4c564129">The Kotlin plugins that support Kotlin 2.0.0 are bundled in the latest IntelliJ IDEA and Android Studio. You don't need to update the Kotlin plugin in your IDE. All you need to do is to <a href="https://kotlinlang.org/docs/configure-build-for-eap.html" id="d2d86245">change the Kotlin version</a> to Kotlin 2.0.0 in your build scripts.</p><ul id="e368ee6"><li id="c9cbbc65"><p>For details about IntelliJ IDEA's support for the Kotlin K2 compiler, see <a href="#support-in-ides" id="67395b87">Support in IDEs</a>.</p></li><li id="ca896956"><p>For more details about IntelliJ IDEA's support for Kotlin, see <a href="https://kotlinlang.org/docs/releases.html#ide-support" id="e2eeea93">Kotlin releases</a>.</p></li></ul></section><section><h2 id="kotlin-k2-compiler" data-toc="kotlin-k2-compiler">Kotlin K2 compiler</h2><p id="85695713">The road to the K2 compiler has been a long one, but now the JetBrains team is ready to announce its stabilization. In Kotlin 2.0.0, the new Kotlin K2 compiler is used by default and it is <a href="https://kotlinlang.org/docs/components-stability.html" id="ae3136bd">Stable</a> for all target platforms: JVM, Native, Wasm, and JS. The new compiler brings major performance improvements, speeds up new language feature development, unifies all platforms that Kotlin supports, and provides a better architecture for multiplatform projects.</p><p id="32101335">The JetBrains team has ensured the quality of the new compiler by successfully compiling 10 million lines of code from selected user and internal projects. 18,000 developers and 80,000 projects were involved in the stabilization process, trying the new K2 compiler in their projects and reporting any problems they found.</p><p id="500f6a45">To help make the migration process to the new compiler as smooth as possible, we've created a <a href="https://kotlinlang.org/docs/k2-compiler-migration-guide.html" id="93ff75b5">K2 compiler migration guide</a>. This guide explains the many benefits of the compiler, highlights any changes you might encounter, and describes how to roll back to the previous version if necessary.</p><p id="21326294">We explored the performance of the K2 compiler in different projects in a <a href="https://blog.jetbrains.com/kotlin/2024/04/k2-compiler-performance-benchmarks-and-how-to-measure-them-on-your-projects/" id="b083e210" data-external="true" rel="noopener noreferrer">blog post</a>. Check it out if you'd like to see real data on how the K2 compiler performs and find instructions on how to collect performance benchmarks from your own projects.</p><section><h3 id="current-k2-compiler-limitations" data-toc="current-k2-compiler-limitations">Current K2 compiler limitations</h3><p id="a0b66197">Enabling K2 in your Gradle project comes with certain limitations that can affect projects using Gradle versions below 8.3 in the following cases:</p><ul id="915bd07c"><li id="543eb3e2"><p>Compilation of source code from <code>buildSrc</code>.</p></li><li id="dfbdf0aa"><p>Compilation of Gradle plugins in included builds.</p></li><li id="ad45d240"><p>Compilation of other Gradle plugins if they are used in projects with Gradle versions below 8.3.</p></li><li id="ecb4210c"><p>Building Gradle plugin dependencies.</p></li></ul><p id="f3577a3e">If you encounter any of the problems mentioned above, you can take the following steps to address them:</p><ul id="d3319e48"><li id="b63d91d8"><p id="7a0e62cd">Set the language version for <code>buildSrc</code>, any Gradle plugins, and their dependencies:</p><p>kotlin {
    compilerOptions {
        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)
        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)
    }
}</p></li><li id="8598a640"><p id="81c6f687">Update the Gradle version in your project to 8.3 or later.</p></li></ul></section><section><h3 id="smart-cast-improvements" data-toc="smart-cast-improvements">Smart cast improvements</h3><p id="621e94f3">The Kotlin compiler can automatically cast an object to a type in specific cases, saving you the trouble of having to explicitly cast it yourself. This is called <a href="https://kotlinlang.org/docs/typecasts.html#smart-casts" id="1940f5fb">smart casting</a>. The Kotlin K2 compiler now performs smart casts in even more scenarios than before.</p><p id="dd827a46">In Kotlin 2.0.0, we've made improvements related to smart casts in the following areas:</p><ul id="2685b2b0"><li id="bf6034d5"><p><a href="#local-variables-and-further-scopes" id="156efce2">Local variables and further scopes</a></p></li><li id="7ec58c3c"><p><a href="#type-checks-with-logical-or-operator" id="52ae4a3c">Type checks with logical <code>or</code> operator</a></p></li><li id="dc5c6f6"><p><a href="#inline-functions" id="eabfdb1b">Inline functions</a></p></li><li id="b3e7739d"><p><a href="#properties-with-function-types" id="8ef009bd">Properties with function types</a></p></li><li id="a28e37d1"><p><a href="#exception-handling" id="9dd3709f">Exception handling</a></p></li><li id="18cdff7f"><p><a href="#increment-and-decrement-operators" id="8b9bf823">Increment and decrement operators</a></p></li></ul><section><h4 id="local-variables-and-further-scopes" data-toc="local-variables-and-further-scopes">Local variables and further scopes</h4><p id="db000763">Previously, if a variable was evaluated as not <code>null</code> within an <code>if</code> condition, the variable would be smart-cast. Information about this variable would then be shared further within the scope of the <code>if</code> block.</p><p id="2ba6826">However, if you declared the variable <b id="1e6d11f0">outside</b> the <code>if</code> condition, no information about the variable would be available within the <code>if</code> condition, so it couldn't be smart-cast. This behavior was also seen with <code>when</code> expressions and <code>while</code> loops.</p><p id="2b3e3249">From Kotlin 2.0.0, if you declare a variable before using it in your <code>if</code>, <code>when</code>, or <code>while</code> condition, then any information collected by the compiler about the variable will be accessible in the corresponding block for smart-casting.</p><p id="485691f2">This can be useful when you want to do things like extract boolean conditions into variables. Then, you can give the variable a meaningful name, which will improve your code readability and make it possible to reuse the variable later in your code. For example:</p><p>class Cat {
    fun purr() {
        println("Purr purr")
    }
}

fun petAnimal(animal: Any) {
    val isCat = animal is Cat
    if (isCat) {
        // In Kotlin 2.0.0, the compiler can access
        // information about isCat, so it knows that
        // animal was smart-cast to the type Cat.
        // Therefore, the purr() function can be called.
        // In Kotlin 1.9.20, the compiler doesn't know
        // about the smart cast, so calling the purr()
        // function triggers an error.
        animal.purr()
    }
}

fun main() {
    val kitty = Cat()
    petAnimal(kitty)
    // Purr purr
}</p></section><section><h4 id="type-checks-with-logical-or-operator" data-toc="type-checks-with-logical-or-operator">Type checks with logical or operator</h4><p id="f31d757c">In Kotlin 2.0.0, if you combine type checks for objects with an <code>or</code> operator (<code>||</code>), a smart cast is made to their closest common supertype. Before this change, a smart cast was always made to the <code>Any</code> type.</p><p id="acd46cd5">In this case, you still had to manually check the object type afterward before you could access any of its properties or call its functions. For example:</p><p>interface Status {
    fun signal() {}
}

interface Ok : Status
interface Postponed : Status
interface Declined : Status

fun signalCheck(signalStatus: Any) {
    if (signalStatus is Postponed || signalStatus is Declined) {
        // signalStatus is smart-cast to a common supertype Status
        signalStatus.signal()
        // Prior to Kotlin 2.0.0, signalStatus is smart cast 
        // to type Any, so calling the signal() function triggered an
        // Unresolved reference error. The signal() function can only 
        // be called successfully after another type check:

        // check(signalStatus is Status)
        // signalStatus.signal()
    }
}</p></section><section><h4 id="inline-functions" data-toc="inline-functions">Inline functions</h4><p id="b1647798">In Kotlin 2.0.0, the K2 compiler treats inline functions differently, allowing it to determine in combination with other compiler analyses whether it's safe to smart-cast.</p><p id="264439ab">Specifically, inline functions are now treated as having an implicit <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.contracts/-contract-builder/calls-in-place.html" id="71fe2ea8" data-external="true" rel="noopener noreferrer"><code>callsInPlace</code></a> contract. This means that any lambda functions passed to an inline function are called in place. Since lambda functions are called in place, the compiler knows that a lambda function can't leak references to any variables contained within its function body.</p><p id="2e43b349">The compiler uses this knowledge along with other compiler analyses to decide whether it's safe to smart-cast any of the captured variables. For example:</p><p>interface Processor {
    fun process()
}

inline fun inlineAction(f: () -&gt; Unit) = f()

fun nextProcessor(): Processor? = null

fun runProcessor(): Processor? {
    var processor: Processor? = null
    inlineAction {
        // In Kotlin 2.0.0, the compiler knows that processor 
        // is a local variable, and inlineAction() is an inline function, so 
        // references to processor can't be leaked. Therefore, it's safe 
        // to smart-cast processor.

        // If processor isn't null, processor is smart-cast
        if (processor != null) {
            // The compiler knows that processor isn't null, so no safe call 
            // is needed
            processor.process()

            // In Kotlin 1.9.20, you have to perform a safe call:
            // processor?.process()
        }

        processor = nextProcessor()
    }

    return processor
}</p></section><section><h4 id="properties-with-function-types" data-toc="properties-with-function-types">Properties with function types</h4><p id="65f3b948">In previous versions of Kotlin, there was a bug that meant that class properties with a function type weren't smart-cast. We fixed this behavior in Kotlin 2.0.0 and the K2 compiler. For example:</p><p>class Holder(val provider: (() -&gt; Unit)?) {
    fun process() {
        // In Kotlin 2.0.0, if provider isn't null, then
        // provider is smart-cast
        if (provider != null) {
            // The compiler knows that provider isn't null
            provider()

            // In 1.9.20, the compiler doesn't know that provider isn't 
            // null, so it triggers an error:
            // Reference has a nullable type '(() -&gt; Unit)?', use explicit '?.invoke()' to make a function-like call instead
        }
    }
}</p><p id="3c3677da">This change also applies if you overload your <code>invoke</code> operator. For example:</p><p>interface Provider {
    operator fun invoke()
}

interface Processor : () -&gt; String

class Holder(val provider: Provider?, val processor: Processor?) {
    fun process() {
        if (provider != null) {
            provider()
            // In 1.9.20, the compiler triggers an error: 
            // Reference has a nullable type 'Provider?' use explicit '?.invoke()' to make a function-like call instead
        }
    }
}</p></section><section><h4 id="exception-handling" data-toc="exception-handling">Exception handling</h4><p id="bf0bb467">In Kotlin 2.0.0, we've made improvements to exception handling so that smart cast information can be passed on to <code>catch</code> and <code>finally</code> blocks. This change makes your code safer as the compiler keeps track of whether your object has a nullable type. For example:</p><p>//sampleStart
fun testString() {
    var stringInput: String? = null
    // stringInput is smart-cast to String type
    stringInput = ""
    try {
        // The compiler knows that stringInput isn't null
        println(stringInput.length)
        // 0

        // The compiler rejects previous smart cast information for 
        // stringInput. Now stringInput has the String? type.
        stringInput = null

        // Trigger an exception
        if (2 &gt; 1) throw Exception()
        stringInput = ""
    } catch (exception: Exception) {
        // In Kotlin 2.0.0, the compiler knows stringInput 
        // can be null, so stringInput stays nullable.
        println(stringInput?.length)
        // null

        // In Kotlin 1.9.20, the compiler says that a safe call isn't
        // needed, but this is incorrect.
    }
}

//sampleEnd
fun main() {
    testString()
}</p></section><section><h4 id="increment-and-decrement-operators" data-toc="increment-and-decrement-operators">Increment and decrement operators</h4><p id="1cb0fe69">Prior to Kotlin 2.0.0, the compiler didn't understand that the type of an object can change after using an increment or decrement operator. As the compiler couldn't accurately track the object type, your code could lead to unresolved reference errors. In Kotlin 2.0.0, this has been fixed:</p><p>interface Rho {
    operator fun inc(): Sigma = TODO()
}

interface Sigma : Rho {
    fun sigma() = Unit
}

interface Tau {
    fun tau() = Unit
}

fun main(input: Rho) {
    var unknownObject: Rho = input

    // Check if unknownObject inherits from the Tau interface
    if (unknownObject is Tau) {

        // Uses the overloaded inc() operator from interface Rho,
        // which smart casts the type of unknownObject to Sigma.
        ++unknownObject

        // In Kotlin 2.0.0, the compiler knows unknownObject has type
        // Sigma, so the sigma() function can be called successfully.
        unknownObject.sigma()

        // In Kotlin 1.9.20, the compiler thinks unknownObject has type
        // Tau, so calling the sigma() function is not allowed.

        // In Kotlin 2.0.0, the compiler knows unknownObject has type
        // Sigma, so calling the tau() function is not allowed.
        unknownObject.tau()
        // Unresolved reference 'tau'

        // In Kotlin 1.9.20, the compiler mistakenly thinks that 
        // unknownObject has type Tau, the tau() function can be 
        // called successfully.
    }
}</p></section></section><section><h3 id="kotlin-multiplatform-improvements" data-toc="kotlin-multiplatform-improvements">Kotlin Multiplatform improvements</h3><p id="e764049f">In Kotlin 2.0.0, we've made improvements in the K2 compiler related to Kotlin Multiplatform in the following areas:</p><ul id="4f5d3529"><li id="e97b3401"><p><a href="#separation-of-common-and-platform-sources-during-compilation" id="e4be5abd">Separation of common and platform sources during compilation</a></p></li><li id="b1046b35"><p><a href="#different-visibility-levels-of-expected-and-actual-declarations" id="ce7dd394">Different visibility levels of expected and actual declarations</a></p></li></ul><section><h4 id="separation-of-common-and-platform-sources-during-compilation" data-toc="separation-of-common-and-platform-sources-during-compilation">Separation of common and platform sources during compilation</h4><p id="64b26fbc">Previously, the design of the Kotlin compiler prevented it from keeping common and platform source sets separate at compile time. As a consequence, common code could access platform code, which resulted in different behavior between platforms. In addition, some compiler settings and dependencies from common code used to leak into platform code.</p><p id="1807140e">In Kotlin 2.0.0, our implementation of the new Kotlin K2 compiler included a redesign of the compilation scheme to ensure strict separation between common and platform source sets. This change is most noticeable when you use <a href="https://kotlinlang.org/docs/multiplatform-expect-actual.html#expected-and-actual-functions" id="34497d86">expected and actual functions</a>. Previously, it was possible for a function call in your common code to resolve to a function in platform code. For example:</p><div><table id="3d5f09c3"><thead><tr id="67db2751"><th id="a237014e"><p>Common code</p></th><th id="3685536c"><p>Platform code</p></th></tr></thead><tbody><tr id="9ba2fa54"><td id="f4f32947"><p>fun foo(x: Any) = println("common foo")

fun exampleFunction() {
    foo(42)
}</p></td><td id="8cb26bb2"><p>// JVM
fun foo(x: Int) = println("platform foo")

// JavaScript
// There is no foo() function overload
// on the JavaScript platform</p></td></tr></tbody></table></div><p id="e0c7d4c6">In this example, the common code has different behavior depending on which platform it is run on:</p><ul id="74a4c01e"><li id="3c0be3c4"><p>On the JVM platform, calling the <code>foo()</code> function in the common code results in the <code>foo()</code> function from the platform code being called as <code>platform foo</code>.</p></li><li id="5fc4f6a6"><p>On the JavaScript platform, calling the <code>foo()</code> function in the common code results in the <code>foo()</code> function from the common code being called as <code>common foo</code>, as there is no such function available in the platform code.</p></li></ul><p id="c044f727">In Kotlin 2.0.0, common code doesn't have access to platform code, so both platforms successfully resolve the <code>foo()</code> function to the <code>foo()</code> function in the common code: <code>common foo</code>.</p><p id="4cec3955">In addition to the improved consistency of behavior across platforms, we also worked hard to fix cases where there was conflicting behavior between IntelliJ IDEA or Android Studio and the compiler. For instance, when you used <a href="https://kotlinlang.org/docs/multiplatform-expect-actual.html#expected-and-actual-classes" id="3f5e1383">expected and actual classes</a>, the following would happen:</p><div><table id="6f46a8b9"><thead><tr id="9f871944"><th id="50b99f33"><p>Common code</p></th><th id="25b02aff"><p>Platform code</p></th></tr></thead><tbody><tr id="6e9b2d4c"><td id="c729e5f0"><p>expect class Identity {
    fun confirmIdentity(): String
}

fun common() {
    // Before 2.0.0,
    // it triggers an IDE-only error
    Identity().confirmIdentity()
    // RESOLUTION_TO_CLASSIFIER : Expected class
    // Identity has no default constructor.
}</p></td><td id="c6879eef"><p>actual class Identity {
    actual fun confirmIdentity() = "expect class fun: jvm"
}</p></td></tr></tbody></table></div><p id="b8a37408">In this example, the expected class <code>Identity</code> has no default constructor, so it can't be called successfully in common code. Previously, an error was only reported by the IDE, but the code still compiled successfully on the JVM. However, now the compiler correctly reports an error:</p><p>Expected class 'expect class Identity : Any' does not have default constructor</p><section><h5 id="when-resolution-behavior-doesn-t-change" data-toc="when-resolution-behavior-doesn-t-change">When resolution behavior doesn't change</h5><p id="338385f9">We're still in the process of migrating to the new compilation scheme, so the resolution behavior is still the same when you call functions that aren't within the same source set. You'll notice this difference mainly when you use overloads from a multiplatform library in your common code.</p><p id="a8077f55">Suppose you have a library, which has two <code>whichFun()</code> functions with different signatures:</p><p>// Example library

// MODULE: common
fun whichFun(x: Any) = println("common function")

// MODULE: JVM
fun whichFun(x: Int) = println("platform function")</p><p id="9df4e5d7">If you call the <code>whichFun()</code> function in your common code, the function that has the most relevant argument type in the library is resolved:</p><p>// A project that uses the example library for the JVM target

// MODULE: common
fun main() {
    whichFun(2)
    // platform function
}</p><p id="f13977a0">In comparison, if you declare the overloads for <code>whichFun()</code> within the same source set, the function from the common code will be resolved because your code doesn't have access to the platform-specific version:</p><p>// Example library isn't used

// MODULE: common
fun whichFun(x: Any) = println("common function")

fun main() {
    whichFun(2)
    // common function
}

// MODULE: JVM
fun whichFun(x: Int) = println("platform function")</p><p id="73f05da3">Similar to multiplatform libraries, since the <code>commonTest</code> module is in a separate source set, it also still has access to platform-specific code. Therefore, the resolution of calls to functions in the <code>commonTest</code> module exhibits the same behavior as in the old compilation scheme.</p><p id="744b2764">In the future, these remaining cases will be more consistent with the new compilation scheme.</p></section></section><section><h4 id="different-visibility-levels-of-expected-and-actual-declarations" data-toc="different-visibility-levels-of-expected-and-actual-declarations">Different visibility levels of expected and actual declarations</h4><p id="8816fc8f">Before Kotlin 2.0.0, if you used <a href="https://kotlinlang.org/docs/multiplatform-expect-actual.html" id="88bc569b">expected and actual declarations</a> in your Kotlin Multiplatform project, they had to have the same <a href="https://kotlinlang.org/docs/visibility-modifiers.html" id="783119a3">visibility level</a>. Kotlin 2.0.0 now also supports different visibility levels but <b id="82d06c7d">only</b> if the actual declaration is <em id="f95d6160">more</em> permissive than the expected declaration. For example:</p><p>expect internal class Attribute // Visibility is internal
actual class Attribute          // Visibility is public by default,
                                // which is more permissive</p><p id="62d3b5c">Similarly, if you are using a <a href="https://kotlinlang.org/docs/type-aliases.html" id="7630f202">type alias</a> in your actual declaration, the visibility of the <b id="47773503">underlying type</b> should be the same or more permissive than the expected declaration. For example:</p><p>expect internal class Attribute                 // Visibility is internal
internal actual typealias Attribute = Expanded

class Expanded                                  // Visibility is public by default,
                                                // which is more permissive</p></section></section><section><h3 id="compiler-plugins-support" data-toc="compiler-plugins-support">Compiler plugins support</h3><p id="b3b43c0b">Currently, the Kotlin K2 compiler supports the following Kotlin compiler plugins:</p><ul id="a2e0a46a"><li id="6e3116eb"><p><a href="https://kotlinlang.org/docs/all-open-plugin.html" id="3e02f19"><code>all-open</code></a></p></li><li id="b341cacb"><p><a href="https://github.com/Kotlin/kotlinx-atomicfu" id="e87b3646" data-external="true" rel="noopener noreferrer">AtomicFU</a></p></li><li id="924d59aa"><p><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/jvm-abi-gen" id="151bad54" data-external="true" rel="noopener noreferrer"><code>jvm-abi-gen</code></a></p></li><li id="53e7ca71"><p><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" id="bc286255" data-external="true" rel="noopener noreferrer"><code>js-plain-objects</code></a></p></li><li id="ce8ff7cd"><p><a href="https://kotlinlang.org/docs/whatsnew1920.html#preview-kapt-compiler-plugin-with-k2" id="dab41eae">kapt</a></p></li><li id="8ee4655e"><p><a href="https://kotlinlang.org/docs/lombok.html" id="53184144">Lombok</a></p></li><li id="9ceafedf"><p><a href="https://kotlinlang.org/docs/no-arg-plugin.html" id="48aa2514"><code>no-arg</code></a></p></li><li id="e94f472d"><p><a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" id="6dbe4797" data-external="true" rel="noopener noreferrer">Parcelize</a></p></li><li id="d193c4c6"><p><a href="https://kotlinlang.org/docs/sam-with-receiver-plugin.html" id="5abf181">SAM with receiver</a></p></li><li id="663860f8"><p><a href="https://kotlinlang.org/docs/serialization.html" id="588539a8">serialization</a></p></li><li id="a5d85767"><p><a href="https://kotlinlang.org/docs/power-assert.html" id="f8c883b3">Power-assert</a></p></li></ul><p id="4332acf">In addition, the Kotlin K2 compiler supports:</p><ul id="6ef1dc0"><li id="be7009cd"><p>The <a href="https://developer.android.com/jetpack/compose" id="f50ea97d" data-external="true" rel="noopener noreferrer">Jetpack Compose</a> compiler plugin 2.0.0, which was <a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" id="257de160" data-external="true" rel="noopener noreferrer">moved into the Kotlin repository</a>.</p></li><li id="e9044cc4"><p>The <a href="https://kotlinlang.org/docs/ksp-overview.html" id="3e013f4">Kotlin Symbol Processing (KSP) plugin</a> since <a href="https://android-developers.googleblog.com/2023/12/ksp2-preview-kotlin-k2-standalone.html" id="684d6cca" data-external="true" rel="noopener noreferrer">KSP2</a>.</p></li></ul></section><section><h3 id="experimental-kotlin-power-assert-compiler-plugin" data-toc="experimental-kotlin-power-assert-compiler-plugin">Experimental Kotlin Power-assert compiler plugin</h3><p id="c38571be">Kotlin 2.0.0 introduces an experimental Power-assert compiler plugin. This plugin improves the experience of writing tests by including contextual information in failure messages, making debugging easier and more efficient.</p><p id="d3e759b6">Developers often need to use complex assertion libraries to write effective tests. The Power-assert plugin simplifies this process by automatically generating failure messages that include intermediate values of the assertion expression. This helps developers quickly understand why a test failed.</p><p id="d922b0c5">When an assertion fails in a test, the improved error message shows the values of all variables and sub-expressions within the assertion, making it clear which part of the condition caused the failure. This is particularly useful for complex assertions where multiple conditions are checked.</p><p id="2684d178">To enable the plugin in your project, configure it in your <code>build.gradle(.kts)</code> file:</p><div id="ec3eca24" data-group="build-script" data-anchors="[99715ede,3cacaa2b,e1861c64,7160e9f,ec3eca24]"><div data-gtm="tab" id="99715ede" data-sync-tabs="kotlin" data-title="Kotlin"><p>plugins {
    kotlin("multiplatform") version "2.0.0"
    kotlin("plugin.power-assert") version "2.0.0"
}

powerAssert {
    functions = listOf("kotlin.assert", "kotlin.test.assertTrue")
}</p></div><div data-gtm="tab" id="e1861c64" data-sync-tabs="groovy" data-title="Groovy"><p>plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.power-assert' version '2.0.0'
}

powerAssert {
    functions = ["kotlin.assert", "kotlin.test.assertTrue"]
}</p></div></div><p id="966ee6d8">Learn more about the <a href="https://kotlinlang.org/docs/power-assert.html" id="34cebe4e">Kotlin Power-assert plugin in the documentation</a>.</p></section><section><h3 id="how-to-enable-the-kotlin-k2-compiler" data-toc="how-to-enable-the-kotlin-k2-compiler">How to enable the Kotlin K2 compiler</h3><p id="a4dc2bff">Starting with Kotlin 2.0.0, the Kotlin K2 compiler is enabled by default. No additional actions are required.</p></section><section><h3 id="try-the-kotlin-k2-compiler-in-kotlin-playground" data-toc="try-the-kotlin-k2-compiler-in-kotlin-playground">Try the Kotlin K2 compiler in Kotlin Playground</h3><p id="fdd883f6">Kotlin Playground supports the 2.0.0 release. <a href="https://pl.kotl.in/czuoQprce" id="5c7618ca" data-external="true" rel="noopener noreferrer">Check it out!</a></p></section><section><h3 id="support-in-ides" data-toc="support-in-ides">Support in IDEs</h3><p id="317a212">By default, IntelliJ IDEA and Android Studio still use the previous compiler for code analysis, code completion, highlighting, and other IDE-related features. To get the full Kotlin 2.0 experience in your IDE, enable the K2 Kotlin mode.</p><p id="b8ef7f4a">In your IDE, go to <b id="2a886a13">Settings</b> | <b id="827d8c9b">Languages &amp; Frameworks</b> | <b id="632e49fc">Kotlin</b> and select the <b id="6b28d944">Enable the K2-based Kotlin plugin</b> option. The IDE will analyze your code with its K2 Kotlin mode.</p><p id="cc4f36b3">After enabling K2 mode, you may notice differences in IDE analysis due to changes in compiler behavior. Learn how the new K2 compiler differs from the previous one in our <a href="https://kotlinlang.org/docs/k2-compiler-migration-guide.html" id="35e2047">migration guide</a>.</p><ul id="76342f6b"><li id="4ee7ee8a"><p>Learn more about the K2 Kotlin mode in <a href="https://blog.jetbrains.com/idea/2024/03/k2-kotlin-mode-alpha-in-intellij-idea/" id="d0ce0a1b" data-external="true" rel="noopener noreferrer">our blog</a>.</p></li><li id="a05ecf8d"><p>We are actively collecting feedback about K2 Kotlin mode. Please share your thoughts in our <a href="https://kotlinlang.slack.com/archives/C0B8H786P" id="c1dea6af" data-external="true" rel="noopener noreferrer">public Slack channel</a>.</p></li></ul></section><section><h3 id="leave-your-feedback-on-the-new-k2-compiler" data-toc="leave-your-feedback-on-the-new-k2-compiler">Leave your feedback on the new K2 compiler</h3><p id="b95ab27f">We would appreciate any feedback you may have!</p><ul id="7772d9a1"><li id="da177cf5"><p>Report any problems you face with the new K2 compiler in <a href="https://kotl.in/issue" id="c4ab874" data-external="true" rel="noopener noreferrer">our issue tracker</a>.</p></li><li id="3cc2a086"><p><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" id="fea9d1d8" data-external="true" rel="noopener noreferrer">Enable the "Send usage statistics" option</a> to allow JetBrains to collect anonymous data about K2 usage.</p></li></ul></section></section><section><h2 id="kotlin-jvm" data-toc="kotlin-jvm">Kotlin/JVM</h2><p id="ce417707">This version brings the following changes:</p><ul id="7dbd1cf"><li id="28a3b427"><p><a href="#generation-of-lambda-functions-using-invokedynamic" id="69d0ff45">Generation of lambda functions using invokedynamic</a></p></li><li id="285fbf35"><p><a href="#the-kotlinx-metadata-jvm-library-is-stable" id="de1cfed">The kotlinx-metadata-jvm library is now Stable</a></p></li></ul><section><h3 id="generation-of-lambda-functions-using-invokedynamic" data-toc="generation-of-lambda-functions-using-invokedynamic">Generation of lambda functions using invokedynamic</h3><p id="ad18652">Kotlin 2.0.0 introduces a new default method for generating lambda functions using <code>invokedynamic</code>. This change reduces the binary sizes of applications compared to the traditional anonymous class generation.</p><p id="2a1ae463">Since the first version, Kotlin has generated lambdas as anonymous classes. However, starting from <a href="https://kotlinlang.org/docs/whatsnew15.html#lambdas-via-invokedynamic" id="1db7a245">Kotlin 1.5.0</a>, the option for <code>invokedynamic</code> generation has been available by using the <code>-Xlambdas=indy</code> compiler option. In Kotlin 2.0.0, <code>invokedynamic</code> has become the default method for lambda generation. This method produces lighter binaries and aligns Kotlin with JVM optimizations, ensuring applications benefit from ongoing and future improvements in JVM performance.</p><p id="38ed5c0d">Currently, it has three limitations compared to ordinary lambda compilation:</p><ul id="b6046c16"><li id="d1fffca"><p>A lambda compiled into <code>invokedynamic</code> is not serializable.</p></li><li id="a7d68ee"><p>Experimental <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.jvm/reflect.html" id="8553c912" data-external="true" rel="noopener noreferrer"><code>reflect()</code></a> API does not support lambdas generated by <code>invokedynamic</code>.</p></li><li id="7ad3d8fa"><p>Calling <code>.toString()</code> on such a lambda produces a less readable string representation:</p></li></ul><p>fun main() {
    println({})

    // With Kotlin 1.9.24 and reflection, returns
    // () -&gt; kotlin.Unit
    
    // With Kotlin 2.0.0, returns
    // FileKt$$Lambda$13/0x00007f88a0004608@506e1b77
}</p><p id="398e1d1b">To retain the legacy behavior of generating lambda functions, you can either:</p><ul id="b369f7dd"><li id="88bd7c8c"><p>Annotate specific lambdas with <code>@JvmSerializableLambda</code>.</p></li><li id="bef9308f"><p>Use the compiler option <code>-Xlambdas=class</code> to generate all lambdas in a module using the legacy method.</p></li></ul></section><section><h3 id="the-kotlinx-metadata-jvm-library-is-stable" data-toc="the-kotlinx-metadata-jvm-library-is-stable">The kotlinx-metadata-jvm library is Stable</h3><p id="73a8751f">In Kotlin 2.0.0, the <code>kotlinx-metadata-jvm</code> library became <a href="https://kotlinlang.org/docs/components-stability.html#stability-levels-explained" id="9204b0ed">Stable</a>. Now that the library has changed to the <code>kotlin</code> package and coordinates, you can find it as <code>kotlin-metadata-jvm</code> (without the "x").</p><p id="1ea357f8">Previously, the <code>kotlinx-metadata-jvm</code> library had its own publishing scheme and version. Now, we will build and publish the <code>kotlin-metadata-jvm</code> updates as part of the Kotlin release cycle, with the same backward compatibility guarantees as the Kotlin standard library.</p><p id="3915f726">The <code>kotlin-metadata-jvm</code> library provides an API to read and modify metadata of binary files generated by the Kotlin/JVM compiler.</p></section></section><section><h2 id="kotlin-native" data-toc="kotlin-native">Kotlin/Native</h2><p id="ee5c048d">This version brings the following changes:</p><ul id="1862bbdc"><li id="f70454a7"><p><a href="#monitoring-gc-performance-with-signposts-on-apple-platforms" id="a3eb8733">Monitoring GC performance with signposts</a></p></li><li id="ef4d490f"><p><a href="#resolving-conflicts-with-objective-c-methods" id="32563fa">Resolving conflicts with Objective-C methods</a></p></li><li id="223557af"><p><a href="#changed-log-level-for-compiler-arguments" id="5d8f4721">Changed log level for compiler arguments in Kotlin/Native</a></p></li><li id="429c06c1"><p><a href="#explicitly-added-standard-library-and-platform-dependencies-to-kotlin-native" id="a6543195">Explicitly added standard library and platform dependencies to Kotlin/Native</a></p></li><li id="5a1d10d8"><p><a href="#tasks-error-in-gradle-configuration-cache" id="a1737af5">Tasks error in Gradle configuration cache</a></p></li></ul><section><h3 id="monitoring-gc-performance-with-signposts-on-apple-platforms" data-toc="monitoring-gc-performance-with-signposts-on-apple-platforms">Monitoring GC performance with signposts on Apple platforms</h3><p id="136a1e3">Previously, it was only possible to monitor the performance of Kotlin/Native's garbage collector (GC) by looking into logs. However, these logs were not integrated with Xcode Instruments, a popular toolkit for investigating issues with iOS apps' performance.</p><p id="89de7447">Since Kotlin 2.0.0, GC reports pauses with signposts that are available in Instruments. Signposts allow for custom logging within your app, so now, when debugging iOS app performance, you can check if a GC pause corresponds to the application freeze.</p><p id="7968c55">Learn more about GC performance analysis in the <a href="https://kotlinlang.org/docs/native-memory-manager.html#monitor-gc-performance" id="d78756c3">documentation</a>.</p></section><section><h3 id="resolving-conflicts-with-objective-c-methods" data-toc="resolving-conflicts-with-objective-c-methods">Resolving conflicts with Objective-C methods</h3><p id="e2748dd2">Objective-C methods can have different names, but the same number and types of parameters. For example, <a href="https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423560-locationmanager?language=objc" id="3540e5e7" data-external="true" rel="noopener noreferrer"><code>locationManager:didEnterRegion:</code></a> and <a href="https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423630-locationmanager?language=objc" id="3e18f171" data-external="true" rel="noopener noreferrer"><code>locationManager:didExitRegion:</code></a>. In Kotlin, these methods have the same signature, so an attempt to use them triggers a conflicting overloads error.</p><p id="2fb74afa">Previously, you had to manually suppress conflicting overloads to avoid this compilation error. To improve Kotlin interoperability with Objective-C, the Kotlin 2.0.0 introduces the new <code>@ObjCSignatureOverride</code> annotation.</p><p id="a9f49c41">The annotation instructs the Kotlin compiler to ignore conflicting overloads, in case several functions with the same argument types but different argument names are inherited from the Objective-C class.</p><p id="3119440e">Applying this annotation is also safer than general error suppression. This annotation can only be used in the case of overriding Objective-C methods, which are supported and tested, while general suppression may hide important errors and lead to silently broken code.</p></section><section><h3 id="changed-log-level-for-compiler-arguments" data-toc="changed-log-level-for-compiler-arguments">Changed log level for compiler arguments</h3><p id="ee032668">In this release, the log level for compiler arguments in Kotlin/Native Gradle tasks, such as <code>compile</code>, <code>link</code>, and <code>cinterop</code>, has changed from <code>info</code> to <code>debug</code>.</p><p id="d61d717c">With <code>debug</code> as its default value, the log level is consistent with other Gradle compilation tasks and provides detailed debugging information, including all compiler arguments.</p></section><section><h3 id="explicitly-added-standard-library-and-platform-dependencies-to-kotlin-native" data-toc="explicitly-added-standard-library-and-platform-dependencies-to-kotlin-native">Explicitly added standard library and platform dependencies to Kotlin/Native</h3><p id="6f14a0e3">The Kotlin/Native compiler used to resolve standard library and platform dependencies implicitly, which caused inconsistencies in the way the Kotlin Gradle plugin worked across Kotlin targets.</p><p id="5402674b">Now, each Kotlin/Native Gradle compilation explicitly includes standard library and platform dependencies in its compile-time library path via the <code>compileDependencyFiles</code> <a href="https://kotlinlang.org/docs/multiplatform-dsl-reference.html#compilation-parameters" id="e7f6a1c2">compilation parameter</a>.</p></section><section><h3 id="tasks-error-in-gradle-configuration-cache" data-toc="tasks-error-in-gradle-configuration-cache">Tasks error in Gradle configuration cache</h3><p id="50372c85">Since Kotlin 2.0.0, you may encounter a configuration cache error with messages indicating: <code>invocation of Task.project at execution time is unsupported</code>.</p><p id="57e2aeea">This error appears in tasks such as <code>NativeDistributionCommonizerTask</code> and <code>KotlinNativeCompile</code>.</p><p id="628529fc">However, this is a false-positive error. The underlying issue is the presence of tasks that are not compatible with the Gradle configuration cache, like the <code>publish*</code> task.</p><p id="75fb268d">This discrepancy may not be immediately apparent, as the error message suggests a different root cause.</p><p id="717658fb">As the precise cause isn't explicitly stated in the error report, <a href="https://github.com/gradle/gradle/issues/21290" id="dfb14970" data-external="true" rel="noopener noreferrer">the Gradle team is already addressing the issue to fix reports</a>.</p></section></section><section><h2 id="kotlin-wasm" data-toc="kotlin-wasm">Kotlin/Wasm</h2><p id="a5116a15">Kotlin 2.0.0 improves performance and interoperability with JavaScript:</p><ul id="1906bb7b"><li id="df129af5"><p><a href="#optimized-production-builds-by-default-using-binaryen" id="a2410716">Optimized production builds by default using Binaryen</a></p></li><li id="64a4ba2d"><p><a href="#support-for-named-export" id="8988fe08">Support for named export</a></p></li><li id="bf205412"><p><a href="#support-for-unsigned-primitive-types-in-functions-with-jsexport" id="e55acefb">Support for unsigned primitive types in functions with <code>@JsExport</code></a></p></li><li id="45723b31"><p><a href="#generation-of-typescript-declaration-files-in-kotlin-wasm" id="cd34da5">Generation of TypeScript declaration files in Kotlin/Wasm</a></p></li><li id="f941970c"><p><a href="#support-for-catching-javascript-exceptions" id="590b95cf">Support for catching JavaScript exceptions</a></p></li><li id="5aa22441"><p><a href="#new-exception-handling-proposal-is-now-supported-under-the-option" id="f63486f9">New exception handling proposal is now supported under the option</a></p></li><li id="caeb72ff"><p><a href="#withwasm-function-is-split-into-js-and-wasi-variants" id="3882882a"><code>withWasm()</code> function is split into JS and WASI variants</a></p></li></ul><section><h3 id="optimized-production-builds-by-default-using-binaryen" data-toc="optimized-production-builds-by-default-using-binaryen">Optimized production builds by default using Binaryen</h3><p id="1dbb5582">The Kotlin/Wasm toolchain now applies the <a href="https://github.com/WebAssembly/binaryen" id="2d130273" data-external="true" rel="noopener noreferrer">Binaryen</a> tool during production compilation to all projects, as opposed to the previous manual setup approach. By our estimations, it should improve runtime performance and the binaries size for your project.</p></section><section><h3 id="support-for-named-export" data-toc="support-for-named-export">Support for named export</h3><p id="7d5bd455">Previously, all exported declarations from Kotlin/Wasm were imported into JavaScript using default export:</p><p>//JavaScript:
import Module from "./index.mjs"

Module.add()</p><p id="12ba5a0c">Now, you can import each Kotlin declaration marked with <code>@JsExport</code> by name:</p><p>// Kotlin:
@JsExport
fun add(a: Int, b: Int) = a + b</p><p>//JavaScript:
import { add } from "./index.mjs"</p><p id="abe640f">Named exports make it easier to share code between Kotlin and JavaScript modules. They improve readability and help you manage dependencies between modules.</p></section><section><h3 id="support-for-unsigned-primitive-types-in-functions-with-jsexport" data-toc="support-for-unsigned-primitive-types-in-functions-with-jsexport">Support for unsigned primitive types in functions with @JsExport</h3><p id="69658380">Starting from Kotlin 2.0.0, you can use <a href="https://kotlinlang.org/docs/unsigned-integer-types.html" id="764ad2be">unsigned primitive types</a> inside external declarations and functions with the <code>@JsExport</code> annotation that makes Kotlin/Wasm functions available in JavaScript code.</p><p id="1e153499">This helps to mitigate the previous limitation that prevented <a href="https://kotlinlang.org/docs/unsigned-integer-types.html" id="9fb1c3dc">the unsigned primitives</a> from being used directly inside exported and external declarations. Now you can export functions with unsigned primitives as a return or parameter type and consume external declarations that return or consume unsigned primitives.</p><p id="6676752e">For more information on Kotlin/Wasm interoperability with JavaScript, see the <a href="https://kotlinlang.org/docs/wasm-js-interop.html#use-javascript-code-in-kotlin" id="3ba1b1a3">documentation</a>.</p></section><section><h3 id="generation-of-typescript-declaration-files-in-kotlin-wasm" data-toc="generation-of-typescript-declaration-files-in-kotlin-wasm">Generation of TypeScript declaration files in Kotlin/Wasm</h3><p id="c601cf4d">In Kotlin 2.0.0, the Kotlin/Wasm compiler is now capable of generating TypeScript definitions from any <code>@JsExport</code> declarations in your Kotlin code. These definitions can be used by IDEs and JavaScript tools to provide code autocompletion, help with type checks, and make it easier to include Kotlin code in JavaScript.</p><p id="2a87a520">The Kotlin/Wasm compiler collects any <a href="https://kotlinlang.org/docs/wasm-js-interop.html#functions-with-the-jsexport-annotation" id="961585b8">top-level functions</a> marked with <code>@JsExport</code> and automatically generates TypeScript definitions in a <code>.d.ts</code> file.</p><p id="be9e8d12">To generate TypeScript definitions, in your <code>build.gradle(.kts)</code> file in the <code>wasmJs {}</code> block, add the <code>generateTypeScriptDefinitions()</code> function:</p><p>kotlin {
    wasmJs {
        binaries.executable()
        browser {
        }
        generateTypeScriptDefinitions()
    }
}</p></section><section><h3 id="support-for-catching-javascript-exceptions" data-toc="support-for-catching-javascript-exceptions">Support for catching JavaScript exceptions</h3><p id="18a211e0">Previously, Kotlin/Wasm code could not catch JavaScript exceptions, making it difficult to handle errors originating from the JavaScript side of the program.</p><p id="8f90ff26">In Kotlin 2.0.0, we have implemented support for catching JavaScript exceptions within Kotlin/Wasm. This implementation allows you to use <code>try-catch</code> blocks, with specific types like <code>Throwable</code> or <code>JsException</code>, to handle these errors properly.</p><p id="af275673">Additionally, <code>finally</code> blocks, which help execute code regardless of exceptions, also work correctly. While we are introducing support for catching JavaScript exceptions, no additional information is provided when a JavaScript exception occurs, like a call stack. However, <a href="https://youtrack.jetbrains.com/issue/KT-68185/WasmJs-Attach-js-exception-object-to-JsException" id="ee3956db" data-external="true" rel="noopener noreferrer">we are working on these implementations</a>.</p></section><section><h3 id="new-exception-handling-proposal-is-now-supported-under-the-option" data-toc="new-exception-handling-proposal-is-now-supported-under-the-option">New exception handling proposal is now supported under the option</h3><p id="7ccc29c6">In this release, we introduce support for the new version of WebAssembly's <a href="https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md" id="46e2ac7d" data-external="true" rel="noopener noreferrer">exception handling proposal</a> within Kotlin/Wasm.</p><p id="3d8ba272">This update ensures the new proposal aligns with Kotlin requirements, enabling the use of Kotlin/Wasm on virtual machines that only support the latest version of the proposal.</p><p id="9a9e4e02">Activate the new exception handling proposal by using the <code>-Xwasm-use-new-exception-proposal</code> compiler option. It is turned off by default.</p></section><section><h3 id="withwasm-function-is-split-into-js-and-wasi-variants" data-toc="withwasm-function-is-split-into-js-and-wasi-variants">withWasm() function is split into JS and WASI variants</h3><p id="c09c60bb">The <code>withWasm()</code> function, which used to provide Wasm targets for hierarchy templates, is deprecated in favor of specialized <code>withWasmJs()</code> and <code>withWasmWasi()</code> functions.</p><p id="3dc877be">Now you can separate the WASI and JS targets between different groups in the tree definition.</p></section></section><section><h2 id="kotlin-js" data-toc="kotlin-js">Kotlin/JS</h2><p id="ac37ad55">Among other changes, this version brings modern JS compilation to Kotlin, supporting more features from the ES2015 standard:</p><ul id="5f075c69"><li id="77786134"><p><a href="#new-compilation-target" id="c8a7aa99">New compilation target</a></p></li><li id="1fbc399a"><p><a href="#suspend-functions-as-es2015-generators" id="d82894a2">Suspend functions as ES2015 generators</a></p></li><li id="d8347dc8"><p><a href="#passing-arguments-to-the-main-function" id="4d80887c">Passing arguments to the main function</a></p></li><li id="f386aeee"><p><a href="#per-file-compilation-for-kotlin-js-projects" id="3c272798">Per-file compilation for Kotlin/JS projects</a></p></li><li id="6bdec8d6"><p><a href="#improved-collection-interoperability" id="5f168ea2">Improved collection interoperability</a></p></li><li id="817eab64"><p><a href="#support-for-createinstance" id="d5bb2a87">Support for createInstance()</a></p></li><li id="e71b4226"><p><a href="#support-for-type-safe-plain-javascript-objects" id="8ba05a6d">Support for type-safe plain JavaScript objects</a></p></li><li id="2ce97488"><p><a href="#support-for-npm-package-manager" id="55ee8a81">Support for npm package manager</a></p></li><li id="5e7a8062"><p><a href="#changes-to-compilation-tasks" id="b7ec59ce">Changes to compilation tasks</a></p></li><li id="7bb2e9fc"><p><a href="#discontinuing-legacy-kotlin-js-jar-artifacts" id="1a8d4d71">Discontinuing legacy Kotlin/JS JAR artifacts</a></p></li></ul><section><h3 id="new-compilation-target" data-toc="new-compilation-target">New compilation target</h3><p id="865ef7c4">In Kotlin 2.0.0, we're adding a new compilation target to Kotlin/JS, <code>es2015</code>. This is a new way for you to enable all the ES2015 features supported in Kotlin at once.</p><p id="53ba8d43">You can set it up in your <code>build.gradle(.kts)</code> file like this:</p><p>kotlin {
    js {
        compilerOptions {
            target.set("es2015")
        }
    }
}</p><p id="d020b3fa">The new target automatically turns on <a href="https://kotlinlang.org/docs/whatsnew19.html#experimental-support-for-es2015-classes-and-modules" id="8748b2dc">ES classes and modules</a> and the newly supported <a href="#suspend-functions-as-es2015-generators" id="cdcd6fea">ES generators</a>.</p></section><section><h3 id="suspend-functions-as-es2015-generators" data-toc="suspend-functions-as-es2015-generators">Suspend functions as ES2015 generators</h3><p id="3fd715c5">This release introduces <a href="https://kotlinlang.org/docs/components-stability.html#stability-levels-explained" id="b172a872">Experimental</a> support for ES2015 generators for compiling <a href="https://kotlinlang.org/docs/composing-suspending-functions.html" id="617d3092">suspend functions</a>.</p><p id="83a2a425">Using generators instead of state machines should improve the final bundle size of your project. For example, the JetBrains team managed to decrease the bundle size of its Space project by 20% by using the ES2015 generators.</p><p id="6b71f28f"><a href="https://262.ecma-international.org/6.0/" id="f929865" data-external="true" rel="noopener noreferrer">Learn more about ES2015 (ECMAScript 2015, ES6) in the official documentation</a>.</p></section><section><h3 id="passing-arguments-to-the-main-function" data-toc="passing-arguments-to-the-main-function">Passing arguments to the main function</h3><p id="eca1d12">Starting with Kotlin 2.0.0, you can specify a source of your <code>args</code> for the <code>main()</code> function. This feature makes it easier to work with the command line and pass the arguments.</p><p id="dc887527">To do this, define the <code>js {}</code> block with the new <code>passAsArgumentToMainFunction()</code> function, which returns an array of strings:</p><p>kotlin {
    js {
        binary.executable()
        passAsArgumentToMainFunction("Deno.args")
    }
}</p><p id="7c31de33">The function is executed at runtime. It takes the JavaScript expression and uses it as the <code>args: Array&lt;String&gt;</code> argument instead of the <code>main()</code> function call.</p><p id="db2a867d">Also, if you use the Node.js runtime, you can take advantage of a special alias. It allows you to pass <code>process.argv</code> to the <code>args</code> parameter once instead of adding it manually every time:</p><p>kotlin {
    js {
        binary.executable()
        nodejs {
            passProcessArgvToMainFunction()
        }
    }
}</p></section><section><h3 id="per-file-compilation-for-kotlin-js-projects" data-toc="per-file-compilation-for-kotlin-js-projects">Per-file compilation for Kotlin/JS projects</h3><p id="bd7d05f0">Kotlin 2.0.0 introduces a new granularity option for the Kotlin/JS project output. You can now set up a per-file compilation that generates one JavaScript file per each Kotlin file. It helps to significantly optimize the size of the final bundle and improve the loading time of the program.</p><p id="58a150ed">Previously, there were only two output options. The Kotlin/JS compiler could generate a single <code>.js</code> file for the whole project. However, this file might be too large and inconvenient to use. Whenever you wanted to use a function from your project, you had to include the entire JavaScript file as a dependency. Alternatively, you could configure a compilation of a separate <code>.js</code> file for each project module. This is still the default option.</p><p id="d7393dfd">Since module files could also be too large, with Kotlin 2.0.0, we add a more granular output that generates one (or two, if the file contains exported declarations) JavaScript file per each Kotlin file. To enable the per-file compilation mode:</p><ol id="7f2670d4" type="1"><li id="2cda09eb"><p id="7c9cd4d7">Add the <a href="https://kotlinlang.org/docs/whatsnew19.html#experimental-support-for-es2015-classes-and-modules" id="eca0fef0"><code>useEsModules()</code></a> function to your build file to support ECMAScript modules:</p><p>// build.gradle.kts
kotlin {
    js(IR) {
        useEsModules() // Enables ES2015 modules
        browser()
    }
}</p><p id="f494e327">You can also use the new <code>es2015</code> <a href="#new-compilation-target" id="4299b6c5">compilation target</a> for that.</p></li><li id="52032c20"><p id="ee330df3">Apply the <code>-Xir-per-file</code> compiler option or update your <code>gradle.properties</code> file with:</p><p># gradle.properties
kotlin.js.ir.output.granularity=per-file // `per-module` is the default</p></li></ol></section><section><h3 id="improved-collection-interoperability" data-toc="improved-collection-interoperability">Improved collection interoperability</h3><p id="d1e86380">Starting with Kotlin 2.0.0, it's possible to export declarations with a Kotlin collection type inside the signature to JavaScript (and TypeScript). This applies to <code>Set</code>, <code>Map</code>, and <code>List</code> collection types and their mutable counterparts.</p><p id="b83b22df">To use Kotlin collections in JavaScript, first mark the necessary declarations with <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" id="4c25757f" data-external="true" rel="noopener noreferrer"><code>@JsExport</code></a> annotation:</p><p>// Kotlin
@JsExport
data class User(
    val name: String,
    val friends: List&lt;User&gt; = emptyList()
)

@JsExport
val me = User(
    name = "Me",
    friends = listOf(User(name = "Kodee"))
)</p><p id="5d109472">You can then consume them from JavaScript as regular JavaScript arrays:</p><p>// JavaScript
import { User, me, KtList } from "my-module"

const allMyFriendNames = me.friends
    .asJsReadonlyArrayView()
    .map(x =&gt; x.name) // [‘Kodee']</p></section><section><h3 id="support-for-createinstance" data-toc="support-for-createinstance">Support for createInstance()</h3><p id="419d66af">Since Kotlin 2.0.0, you can use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/create-instance.html" id="d0376d63" data-external="true" rel="noopener noreferrer"><code>createInstance()</code></a> function from the Kotlin/JS target. Previously, it was only available on the JVM.</p><p id="c8559e31">This function from the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" id="2d789323" data-external="true" rel="noopener noreferrer">KClass</a> interface creates a new instance of the specified class, which is useful for getting the runtime reference to a Kotlin class.</p></section><section><h3 id="support-for-type-safe-plain-javascript-objects" data-toc="support-for-type-safe-plain-javascript-objects">Support for type-safe plain JavaScript objects</h3><p id="36b420cd">To make it easier to work with JavaScript APIs, in Kotlin 2.0.0, we provide a new plugin: <a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" id="9446d03d" data-external="true" rel="noopener noreferrer"><code>js-plain-objects</code></a>, which you can use to create type-safe plain JavaScript objects. The plugin checks your code for any <a href="https://kotlinlang.org/docs/wasm-js-interop.html#external-interfaces" id="e55539bf">external interfaces</a> that have a <code>@JsPlainObject</code> annotation and adds:</p><ul id="eb4bdc1b"><li id="ff8c721e"><p>An inline <code>invoke</code> operator function inside the companion object that you can use as a constructor.</p></li><li id="7b5581fb"><p>A <code>.copy()</code> function that you can use to create a copy of your object while adjusting some of its properties.</p></li></ul><p id="d741497d">For example:</p><p>import kotlinx.js.JsPlainObject

@JsPlainObject
external interface User {
    var name: String
    val age: Int
    val email: String?
}

fun main() {
    // Creates a JavaScript object
    val user = User(name = "Name", age = 10)
    // Copies the object and adds an email
    val copy = user.copy(age = 11, email = "some@user.com")

    println(JSON.stringify(user))
    // { "name": "Name", "age": 10 }
    println(JSON.stringify(copy))
    // { "name": "Name", "age": 11, "email": "some@user.com" }
}</p><p id="2c0fbfe3">Any JavaScript objects created with this approach are safer because instead of only seeing errors at runtime, you can see them at compile time or even highlighted by your IDE.</p><p id="f5c9c631">Consider this example, which uses a <code>fetch()</code> function to interact with a JavaScript API using external interfaces to describe the shape of the JavaScript objects:</p><p>import kotlinx.js.JsPlainObject

@JsPlainObject
external interface FetchOptions {
    val body: String?
    val method: String
}

// A wrapper for Window.fetch
suspend fun fetch(url: String, options: FetchOptions? = null) = TODO("Add your custom behavior here")

// A compile-time error is triggered as "metod" is not recognized
// as method
fetch("https://google.com", options = FetchOptions(metod = "POST"))
// A compile-time error is triggered as method is required
fetch("https://google.com", options = FetchOptions(body = "SOME STRING")) </p><p id="1871db7d">In comparison, if you use the <code>js()</code> function instead to create your JavaScript objects, errors are only found at runtime or aren't triggered at all:</p><p>suspend fun fetch(url: String, options: FetchOptions? = null) = TODO("Add your custom behavior here")

// No error is triggered. As "metod" is not recognized, the wrong method 
// (GET) is used.
fetch("https://google.com", options = js("{ metod: 'POST' }"))

// By default, the GET method is used. A runtime error is triggered as 
// body shouldn't be present.
fetch("https://google.com", options = js("{ body: 'SOME STRING' }"))
// TypeError: Window.fetch: HEAD or GET Request cannot have a body</p><p id="f671a206">To use the <code>js-plain-objects</code> plugin, add the following to your <code>build.gradle(.kts)</code> file:</p><div id="5d351962" data-group="build-script" data-anchors="[6192b499,aa9fe1aa,d9449fcf,52d4abbb,5d351962]"><div data-gtm="tab" id="6192b499" data-sync-tabs="kotlin" data-title="Kotlin"><p>plugins {
    kotlin("plugin.js-plain-objects") version "2.0.0"
}</p></div><div data-gtm="tab" id="d9449fcf" data-sync-tabs="groovy" data-title="Groovy"><p>plugins {
    id "org.jetbrains.kotlin.plugin.js-plain-objects" version "2.0.0"
}</p></div></div></section><section><h3 id="support-for-npm-package-manager" data-toc="support-for-npm-package-manager">Support for npm package manager</h3><p id="8ec4d741">Previously, it was only possible for the Kotlin Multiplatform Gradle plugin to use <a href="https://yarnpkg.com/lang/en/" id="3362725c" data-external="true" rel="noopener noreferrer">Yarn</a> as a package manager to download and install npm dependencies. From Kotlin 2.0.0, you can use <a href="https://www.npmjs.com/" id="aa74b54d" data-external="true" rel="noopener noreferrer">npm</a> as your package manager instead. Using npm as a package manager means that you have one less tool to manage during your setup.</p><p id="c16bff63">For backward compatibility, Yarn is still the default package manager. To use npm as your package manager, set the following property in your <code>gradle.properties</code> file:</p><p>kotlin.js.yarn = false</p></section><section><h3 id="changes-to-compilation-tasks" data-toc="changes-to-compilation-tasks">Changes to compilation tasks</h3><p id="e838e8f3">Previously, the <code>webpack</code> and <code>distributeResources</code> compilation tasks both targeted the same directories. Moreover, the <code>distribution</code> task declared the <code>dist</code> as its output directory as well. This resulted in overlapping outputs and produced a compilation warning.</p><p id="4696a5a3">So, starting with Kotlin 2.0.0, we implement the following changes:</p><ul id="9107d81c"><li id="c935913b"><p>The <code>webpack</code> task now targets a separate folder.</p></li><li id="7d5a2915"><p>The <code>distributeResources</code> task is removed completely.</p></li><li id="1d4ce009"><p>The <code>distribution</code> task now has the <code>Copy</code> type and targets the <code>dist</code> folder.</p></li></ul></section><section><h3 id="discontinuing-legacy-kotlin-js-jar-artifacts" data-toc="discontinuing-legacy-kotlin-js-jar-artifacts">Discontinuing legacy Kotlin/JS JAR artifacts</h3><p id="b8df6aaf">Starting with Kotlin 2.0.0, the Kotlin distribution no longer contains legacy Kotlin/JS artifacts with the <code>.jar</code> extension. Legacy artifacts were used in the unsupported old Kotlin/JS compiler and unnecessary for the IR compiler that uses the <code>klib</code> format.</p></section></section><section><h2 id="gradle-improvements" data-toc="gradle-improvements">Gradle improvements</h2><p id="394b29eb">Kotlin 2.0.0 is fully compatible with Gradle 6.8.3 through 8.5. You can also use Gradle versions up to the latest Gradle release, but if you do, keep in mind that you might encounter deprecation warnings or some new Gradle features might not work.</p><p id="efb7ba3">This version brings the following changes:</p><ul id="50e1c2d5"><li id="39efe097"><p><a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects" id="1f466836">New Gradle DSL for compiler options in multiplatform projects</a></p></li><li id="fa985dec"><p><a href="#new-compose-compiler-gradle-plugin" id="3c397812">New Compose compiler Gradle plugin</a></p></li><li id="d3f35191"><p><a href="#bumped-minimum-supported-agp-version" id="4dbd12d5">Bumping minimum supported versions</a></p></li><li id="12134cf7"><p><a href="#new-attribute-to-distinguish-jvm-and-android-published-libraries" id="8c09aed7">New attribute to distinguish JVM and Android published libraries</a></p></li><li id="d6ce8c47"><p><a href="#improved-gradle-dependency-handling-for-cinteropprocess-in-kotlin-native" id="ddc807">Improved Gradle dependency handling for CInteropProcess in Kotlin/Native</a></p></li><li id="53eb0daa"><p><a href="#visibility-changes-in-gradle" id="eea56313">Visibility changes in Gradle</a></p></li><li id="b488cfe0"><p><a href="#new-directory-for-kotlin-data-in-gradle-projects" id="a4caadcb">New directory for Kotlin data in Gradle projects</a></p></li><li id="d87384b9"><p><a href="#kotlin-native-compiler-downloaded-when-needed" id="1b678299">Kotlin/Native compiler downloaded when needed</a></p></li><li id="8c96b31"><p><a href="#deprecated-old-ways-of-defining-compiler-options" id="dbf30b3a">Deprecating old ways of defining compiler options</a></p></li><li id="25fbde39"><p><a href="#bumped-minimum-supported-agp-version" id="c2f0bf23">Bumped minimum AGP supported version</a></p></li><li id="8189c073"><p><a href="#new-gradle-property-to-try-latest-language-version" id="4229431">New Gradle property to try latest language version</a></p></li><li id="89771a72"><p><a href="#new-json-output-format-for-build-reports" id="68e1fc98">New JSON output format for build reports</a></p></li><li id="b1375035"><p><a href="#kapt-configurations-inherit-annotation-processors-from-super-configurations" id="f5c74b32">kapt configurations inherit annotation processors from super configurations</a></p></li><li id="466013f8"><p><a href="#kotlin-gradle-plugin-no-longer-uses-deprecated-gradle-conventions" id="97d8df91">Kotlin Gradle plugin no longer uses deprecated Gradle conventions</a></p></li></ul><section><h3 id="new-gradle-dsl-for-compiler-options-in-multiplatform-projects" data-toc="new-gradle-dsl-for-compiler-options-in-multiplatform-projects">New Gradle DSL for compiler options in multiplatform projects</h3><p id="c71a0da8">Prior to Kotlin 2.0.0, configuring compiler options in a multiplatform project with Gradle was only possible at a low level, such as per task, compilation, or source set. To make it easier to configure compiler options more generally in your projects, Kotlin 2.0.0 comes with a new Gradle DSL.</p><p id="85dc9db8">With this new DSL, you can configure compiler options at the extension level for all the targets and shared source sets like <code>commonMain</code> and at a target level for a specific target:</p><p>kotlin {
    compilerOptions {
        // Extension-level common compiler options that are used as defaults
        // for all targets and shared source sets
        allWarningsAsErrors.set(true)
    }
    jvm {
        compilerOptions {
            // Target-level JVM compiler options that are used as defaults
            // for all compilations in this target
            noJdk.set(true)
        }
    }
}</p><p id="79e86c40">The overall project configuration now has three layers. The highest is the extension level, then the target level and the lowest is the compilation unit (which is usually a compilation task):</p><figure id="a04d123d"><img alt="Kotlin compiler options levels" title="Kotlin compiler options levels" src="https://kotlinlang.org/docs/images/compiler-options-levels.svg" width="700" height="440"></figure><p id="142c8005">The settings at a higher level are used as a convention (default) for a lower level:</p><ul id="65389707"><li id="89c829a2"><p>The values of extension compiler options are the default for target compiler options, including shared source sets, like <code>commonMain</code>, <code>nativeMain</code>, and <code>commonTest</code>.</p></li><li id="e93cf864"><p>The values of target compiler options are used as the default for compilation unit (task) compiler options, for example, <code>compileKotlinJvm</code> and <code>compileTestKotlinJvm</code> tasks.</p></li></ul><p id="2d439998">In turn, configurations made at a lower level override related settings at a higher level:</p><ul id="d8aab37f"><li id="c1f0770"><p>Task-level compiler options override related configurations at the target or the extension level.</p></li><li id="7ef64281"><p>Target-level compiler options override related configurations at the extension level.</p></li></ul><p id="6afd21db">When configuring your project, keep in mind that some old ways of setting up compiler options have been <a href="#deprecated-old-ways-of-defining-compiler-options" id="1a383a7f">deprecated</a>.</p><p id="cdc8f6be">We encourage you to try the new DSL out in your multiplatform projects and leave feedback in <a href="https://kotl.in/issue" id="5bd7b533" data-external="true" rel="noopener noreferrer">YouTrack</a>, as we plan to make this DSL the recommended approach for configuring compiler options.</p></section><section><h3 id="new-compose-compiler-gradle-plugin" data-toc="new-compose-compiler-gradle-plugin">New Compose compiler Gradle plugin</h3><p id="efacce85">The Jetpack Compose compiler, which translates composables into Kotlin code, has now been merged into the Kotlin repository. This will help transition Compose projects to Kotlin 2.0.0, as the Compose compiler will always ship simultaneously with Kotlin. This also bumps the Compose compiler version to 2.0.0.</p><p id="a4886a3e">To use the new Compose compiler in your projects, apply the <code>org.jetbrains.kotlin.plugin.compose</code> Gradle plugin in your <code>build.gradle(.kts)</code> file and set its version equal to Kotlin 2.0.0.</p><p id="353fc541">To learn more about this change and see the migration instructions, see the <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compiler.html" id="a8543d66" data-external="true" rel="noopener noreferrer">Compose compiler</a> documentation.</p></section><section><h3 id="new-attribute-to-distinguish-jvm-and-android-published-libraries" data-toc="new-attribute-to-distinguish-jvm-and-android-published-libraries">New attribute to distinguish JVM and Android-published libraries</h3><p id="a5e12691">Starting with Kotlin 2.0.0, the <a href="https://docs.gradle.org/current/userguide/variant_attributes.html#sub:jvm_default_attributes" id="9a4051ef" data-external="true" rel="noopener noreferrer"><code>org.gradle.jvm.environment</code></a> Gradle attribute is published by default with all Kotlin variants.</p><p id="1467f133">The attribute helps distinguish JVM and Android variants of Kotlin Multiplatform libraries. It indicates that a certain library variant is better suited for a certain JVM environment. The target environment could be "android", "standard-jvm", or "no-jvm".</p><p id="59e85f3e">Publishing this attribute should make consuming Kotlin Multiplatform libraries with JVM and Android targets more robust from non-multiplatform clients as well, such as Java-only projects.</p><p id="b2f572a6">If necessary, you can disable attribute publication. To do that, add the following Gradle option to your <code>gradle.properties</code> file:</p><p>kotlin.publishJvmEnvironmentAttribute=false</p></section><section><h3 id="improved-gradle-dependency-handling-for-cinteropprocess-in-kotlin-native" data-toc="improved-gradle-dependency-handling-for-cinteropprocess-in-kotlin-native">Improved Gradle dependency handling for CInteropProcess in Kotlin/Native</h3><p id="5cd4fcf2">In this release, we enhanced the handling of the <code>defFile</code> property to ensure better Gradle task dependency management in Kotlin/Native projects.</p><p id="eb6759f6">Before this update, Gradle builds could fail if the <code>defFile</code> property was designated as an output of another task that hadn't been executed yet. The workaround for this issue was to add a dependency on this task:</p><p>kotlin {
    macosArm64("native") {
        compilations.getByName("main") {
            cinterops {
                val cinterop by creating {
                    defFileProperty.set(createDefFileTask.flatMap { it.defFile.asFile })
                    project.tasks.named(interopProcessingTaskName).configure {
                        dependsOn(createDefFileTask)
                    }
                }
            }
        }
    }
}</p><p id="91b57d56">To fix this, there is a new <code>RegularFileProperty</code> property called <code>definitionFile</code>. Now, Gradle lazily verifies the presence of the <code>definitionFile</code> property after the connected task has run later in the build process. This new approach eliminates the need for additional dependencies.</p><p id="53768cd5">The <code>CInteropProcess</code> task and the <code>CInteropSettings</code> class use the <code>definitionFile</code> property instead of <code>defFile</code> and <code>defFileProperty</code>:</p><div id="59212ee6" data-group="build-script" data-anchors="[kotlin,4a9b6720,groovy,2ee7ea5f,59212ee6]"><div data-gtm="tab" id="kotlin" data-sync-tabs="kotlin" data-title="Kotlin"><p>kotlin {
    macosArm64("native") {
        compilations.getByName("main") {
            cinterops {
                val cinterop by creating {
                    definitionFile.set(project.file("def-file.def"))
                }
            }
        }
    }
}</p></div><div data-gtm="tab" id="groovy" data-sync-tabs="groovy" data-title="Groovy"><p>kotlin {
    macosArm64("native") {
        compilations.main {
            cinterops {
                cinterop {
                    definitionFile.set(project.file("def-file.def"))
                }
            }
        }
    }
}</p></div></div></section><section><h3 id="visibility-changes-in-gradle" data-toc="visibility-changes-in-gradle">Visibility changes in Gradle</h3><p id="7e30668e">In Kotlin 2.0.0, we've modified the Kotlin Gradle Plugin for better control and safety in your build scripts. Previously, certain Kotlin DSL functions and properties intended for a specific DSL context would inadvertently leak into other DSL contexts. This leakage could lead to the use of incorrect compiler options, settings being applied multiple times, and other misconfigurations:</p><p>kotlin {
    // Target DSL couldn't access methods and properties defined in the
    // kotlin{} extension DSL
    jvm {
        // Compilation DSL couldn't access methods and properties defined
        // in the kotlin{} extension DSL and Kotlin jvm{} target DSL
        compilations.configureEach {
            // Compilation task DSLs couldn't access methods and
            // properties defined in the kotlin{} extension, Kotlin jvm{}
            // target or Kotlin compilation DSL
            compileTaskProvider.configure {
                // For example:
                explicitApi()
                // ERROR as it is defined in the kotlin{} extension DSL
                mavenPublication {}
                // ERROR as it is defined in the Kotlin jvm{} target DSL
                defaultSourceSet {}
                // ERROR as it is defined in the Kotlin compilation DSL
            }
        }
    }
}</p><p id="c084e04">To fix this issue, we've added the <code>@KotlinGradlePluginDsl</code> annotation, preventing the exposure of the Kotlin Gradle plugin DSL functions and properties to levels where they are not intended to be available. The following levels are separated from each other:</p><ul id="125c0801"><li id="bd766888"><p>Kotlin extension</p></li><li id="2590e079"><p>Kotlin target</p></li><li id="7964f235"><p>Kotlin compilation</p></li><li id="db79b8cd"><p>Kotlin compilation task</p></li></ul><p id="ed064b5f">For the most popular cases, we've added compiler warnings with suggestions on how to fix them if your build script is configured incorrectly. For example:</p><p>kotlin {
    jvm {
        sourceSets.getByName("jvmMain").dependencies {
            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.3")
        }
    }
}</p><p id="b59dac18">In this case, the warning message for <code>sourceSets</code> is:</p><p>[DEPRECATION] 'sourceSets: NamedDomainObjectContainer&lt;KotlinSourceSet&gt;' is deprecated.Accessing 'sourceSets' container on the Kotlin target level DSL is deprecated. Consider configuring 'sourceSets' on the Kotlin extension level.</p><p id="ba051bcf">We would appreciate your feedback on this change! Share your comments directly to Kotlin developers in our <a href="https://kotlinlang.slack.com/archives/C19FD9681" id="6d6cefb9" data-external="true" rel="noopener noreferrer">#gradle Slack channel</a>. <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" id="d55be5b1" data-external="true" rel="noopener noreferrer">Get a Slack invite</a>.</p></section><section><h3 id="new-directory-for-kotlin-data-in-gradle-projects" data-toc="new-directory-for-kotlin-data-in-gradle-projects">New directory for Kotlin data in Gradle projects</h3><p id="90b55fa8">In Kotlin 1.8.20, the Kotlin Gradle plugin switched to storing its data in the Gradle project cache directory: <code>&lt;project-root-directory&gt;/.gradle/kotlin</code>. However, the <code>.gradle</code> directory is reserved for Gradle only, and as a result it's not future-proof.</p><p id="9e7960bf">To solve this, as of Kotlin 2.0.0, we will store Kotlin data in your <code>&lt;project-root-directory&gt;/.kotlin</code> by default. We will continue to store some data in the <code>.gradle/kotlin</code> directory for backward compatibility.</p><p id="5b008ad6">The new Gradle properties you can configure are:</p><div><table id="b184e0bd"><thead><tr id="84fe1014"><th id="520f5b6f"><p>Gradle property</p></th><th id="6d4a18ee"><p>Description</p></th></tr></thead><tbody><tr id="f358cbb2"><td id="ffe38522"><p><code>kotlin.project.persistent.dir</code></p></td><td id="4618840a"><p>Configures the location where your project-level data is stored. Default: <code>&lt;project-root-directory&gt;/.kotlin</code></p></td></tr><tr id="580c64e7"><td id="95d3dcf0"><p><code>kotlin.project.persistent.dir.gradle.disableWrite</code></p></td><td id="92108fa"><p>A boolean value that controls whether writing Kotlin data to the <code>.gradle</code> directory is disabled. Default: <code>false</code></p></td></tr></tbody></table></div><p id="47e66253">Add these properties to the <code>gradle.properties</code> file in your projects for them to take effect.</p></section><section><h3 id="kotlin-native-compiler-downloaded-when-needed" data-toc="kotlin-native-compiler-downloaded-when-needed">Kotlin/Native compiler downloaded when needed</h3><p id="110ea7e">Before Kotlin 2.0.0, if you had a <a href="https://kotlinlang.org/docs/native-target-support.html" id="dd8fe12d">Kotlin/Native target</a> configured in the Gradle build script of your multiplatform project, Gradle would always download the Kotlin/Native compiler in the <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:configuration" id="fed9594d" data-external="true" rel="noopener noreferrer">configuration phase</a>.</p><p id="4fd51e38">This happened even if there was no task to compile code for a Kotlin/Native target that was due to run in the <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:execution" id="775e9f1d" data-external="true" rel="noopener noreferrer">execution phase</a>. Downloading the Kotlin/Native compiler in this way was particularly inefficient for users who only wanted to check the JVM or JavaScript code in their projects. For example, to perform tests or checks with their Kotlin project as part of a CI process.</p><p id="a97b07e5">In Kotlin 2.0.0, we changed this behavior in the Kotlin Gradle plugin so that the Kotlin/Native compiler is downloaded in the <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:execution" id="2b57e42d" data-external="true" rel="noopener noreferrer">execution phase</a> and <b id="68e35ee0">only</b> when a compilation is requested for a Kotlin/Native target.</p><p id="5ab9098">In turn, the Kotlin/Native compiler's dependencies are now downloaded not as a part of the compiler, but in the execution phase as well.</p><p id="a099b4">If you encounter any issues with the new behavior, you can temporarily switch back to the previous behavior by adding the following Gradle property to your <code>gradle.properties</code> file:</p><p>kotlin.native.toolchain.enabled=false</p><p id="ec02c553">Starting with the version 1.9.20-Beta, the Kotlin/Native distribution is published to <a href="https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-native-prebuilt/" id="6e6feacb" data-external="true" rel="noopener noreferrer">Maven Central</a> along with CDN.</p><p id="c30cb058">This allowed us to change how Kotlin looks for and downloads the necessary artifacts. Instead of the CDN, it now uses by default Maven repositories that you specified in the <code>repositories {}</code> block of your project.</p><p id="f00732da">You can temporarily switch this behavior back by setting the following Gradle property in your <code>gradle.properties</code> file:</p><p>kotlin.native.distribution.downloadFromMaven=false.</p><p id="18cf9627">Please report any problems to our issue tracker <a href="https://kotl.in/issue" id="ba84e201" data-external="true" rel="noopener noreferrer">YouTrack</a>. Both of these Gradle properties that change the default behavior are temporary and will be removed in future releases.</p></section><section><h3 id="deprecated-old-ways-of-defining-compiler-options" data-toc="deprecated-old-ways-of-defining-compiler-options">Deprecated old ways of defining compiler options</h3><p id="dccecadc">In this release, we continue to refine how you can set up compiler options. It should resolve ambiguity between different ways and make the project configuration more straightforward.</p><p id="2ca99a56">Since Kotlin 2.0.0, the following DSLs for specifying compiler options are deprecated:</p><ul id="6af26dad"><li id="dcadb14b"><p id="5fe0c4b9">The <code>kotlinOptions</code> DSL from the <code>KotlinCompile</code> interface that implements all Kotlin compilation tasks. Use <code>KotlinCompilationTask&lt;CompilerOptions&gt;</code> instead.</p></li><li id="10df4209"><p id="9c9ff6ee">The <code>compilerOptions</code> property with the <code>HasCompilerOptions</code> type from the <code>KotlinCompiation</code> interface. This DSL was inconsistent with other DSLs and configured the same <code>KotlinCommonCompilerOptions</code> object as <code>compilerOptions</code> inside the <code>KotlinCompilation.compileTaskProvider</code> compilation task, which was confusing.</p><p id="3c7a1c95">Instead, we recommend using the <code>compilerOptions</code> property from the Kotlin compilation task:</p><p>kotlinCompilation.compileTaskProvider.configure {
    compilerOptions { ... }
}</p><p id="16325bd1">For example:</p><p>kotlin {
    js(IR) {
        compilations.all {
            compileTaskProvider.configure {
                compilerOptions.freeCompilerArgs.add("-Xerror-tolerance-policy=SYNTAX")
            }
        }
    }
}</p></li><li id="2eabf22f"><p id="27cb057">The <code>kotlinOptions</code> DSL from the <code>KotlinCompilation</code> interface.</p></li><li id="55054c5e"><p id="a55a5d13">The <code>kotlinOptions</code> DSL from the <code>KotlinNativeArtifactConfig</code> interface, the <code>KotlinNativeLink</code> class, and the <code>KotlinNativeLinkArtifactTask</code> class. Use the <code>toolOptions</code> DSL instead.</p></li><li id="cc7b3f7b"><p id="ff584d98">The <code>dceOptions</code> DSL from the <code>KotlinJsDce</code> interface. Use the <code>toolOptions</code> DSL instead.</p></li></ul><p id="8f2740c7">For more information on how to specify compiler options in the Kotlin Gradle plugin, see <a href="https://kotlinlang.org/docs/gradle-compiler-options.html#how-to-define-options" id="3cd8eea">How to define options</a>.</p></section><section><h3 id="bumped-minimum-supported-agp-version" data-toc="bumped-minimum-supported-agp-version">Bumped minimum supported AGP version</h3><p id="618f014b">Starting with Kotlin 2.0.0, the minimum supported Android Gradle plugin version is 7.1.3.</p></section><section><h3 id="new-gradle-property-to-try-latest-language-version" data-toc="new-gradle-property-to-try-latest-language-version">New Gradle property to try latest language version</h3><p id="e45cd681">Prior to Kotlin 2.0.0, we had the following Gradle property to try out the new K2 compiler: <code>kotlin.experimental.tryK2</code>. Now that the K2 compiler is enabled by default in Kotlin 2.0.0, we decided to evolve this property into a new form that you can use to try the latest language version in your projects: <code>kotlin.experimental.tryNext</code>. When you use this property in your <code>gradle.properties</code> file, the Kotlin Gradle plugin increments the language version to one above the default value for your Kotlin version. For example, in Kotlin 2.0.0, the default language version is 2.0, so the property configures language version 2.1.</p><p id="a6b2653">This new Gradle property produces similar metrics in <a href="https://kotlinlang.org/docs/gradle-compilation-and-caches.html#build-reports" id="426f931">build reports</a> as before with <code>kotlin.experimental.tryK2</code>. The language version configured is included in the output. For example:</p><p>##### 'kotlin.experimental.tryNext' results #####
:app:compileKotlin: 2.1 language version
:lib:compileKotlin: 2.1 language version
##### 100% (2/2) tasks have been compiled with Kotlin 2.1 #####</p><p id="8649eb3d">To learn more about how to enable build reports and their content, see <a href="https://kotlinlang.org/docs/gradle-compilation-and-caches.html#build-reports" id="d69c23c4">Build reports</a>.</p></section><section><h3 id="new-json-output-format-for-build-reports" data-toc="new-json-output-format-for-build-reports">New JSON output format for build reports</h3><p id="b546c3fd">In Kotlin 1.7.0, we introduced build reports to help track compiler performance. Over time, we've added more metrics to make these reports even more detailed and helpful when investigating performance issues. Previously, the only output format for a local file was the <code>*.txt</code> format. In Kotlin 2.0.0, we support the JSON output format to make it even easier to analyze using other tools.</p><p id="14e9a771">To configure JSON output format for your build reports, declare the following properties in your <code>gradle.properties</code> file:</p><p>kotlin.build.report.output=json

// The directory to store your build reports
kotlin.build.report.json.directory="my/directory/path"</p><p id="937bf54e">Alternatively, you can run the following command:</p><p>./gradlew assemble -Pkotlin.build.report.output=json -Pkotlin.build.report.json.directory="my/directory/path"</p><p id="cd4ac230">Once configured, Gradle generates your build reports in the directory that you specify with the name: <code>${project_name}-date-time-&lt;sequence_number&gt;.json</code>.</p><p id="daae4f4d">Here's an example snippet from a build report with JSON output format that contains build metrics and aggregated metrics:</p><p>"buildOperationRecord": [
    {
     "path": ":lib:compileKotlin",
      "classFqName": "org.jetbrains.kotlin.gradle.tasks.KotlinCompile_Decorated",
      "startTimeMs": 1714730820601,
      "totalTimeMs": 2724,
      "buildMetrics": {
        "buildTimes": {
          "buildTimesNs": {
            "CLEAR_OUTPUT": 713417,
            "SHRINK_AND_SAVE_CURRENT_CLASSPATH_SNAPSHOT_AFTER_COMPILATION": 19699333,
            "IR_TRANSLATION": 281000000,
            "NON_INCREMENTAL_LOAD_CURRENT_CLASSPATH_SNAPSHOT": 14088042,
            "CALCULATE_OUTPUT_SIZE": 1301500,
            "GRADLE_TASK": 2724000000,
            "COMPILER_INITIALIZATION": 263000000,
            "IR_GENERATION": 74000000,
…
          }
        }
…
 "aggregatedMetrics": {
    "buildTimes": {
      "buildTimesNs": {
        "CLEAR_OUTPUT": 782667,
        "SHRINK_AND_SAVE_CURRENT_CLASSPATH_SNAPSHOT_AFTER_COMPILATION": 22031833,
        "IR_TRANSLATION": 333000000,
        "NON_INCREMENTAL_LOAD_CURRENT_CLASSPATH_SNAPSHOT": 14890292,
        "CALCULATE_OUTPUT_SIZE": 2370750,
        "GRADLE_TASK": 3234000000,
        "COMPILER_INITIALIZATION": 292000000,
        "IR_GENERATION": 89000000,
…
      }
    }</p></section><section><h3 id="kapt-configurations-inherit-annotation-processors-from-super-configurations" data-toc="kapt-configurations-inherit-annotation-processors-from-super-configurations">kapt configurations inherit annotation processors from super configurations</h3><p id="813be6a0">Prior to Kotlin 2.0.0, if you wanted to define a common set of annotation processors in a separate Gradle configuration and extend this configuration in kapt-specific configurations for your subprojects, kapt would skip annotation processing because it couldn't find any annotation processors. In Kotlin 2.0.0, kapt can successfully detect that there are indirect dependencies on your annotation processors.</p><p id="d77f5fa0">As an example, for a subproject using <a href="https://dagger.dev/" id="fc0c1b71" data-external="true" rel="noopener noreferrer">Dagger</a>, in your <code>build.gradle(.kts)</code> file, use the following configuration:</p><p>val commonAnnotationProcessors by configurations.creating
configurations.named("kapt") { extendsFrom(commonAnnotationProcessors) }

dependencies {
    implementation("com.google.dagger:dagger:2.48.1")
    commonAnnotationProcessors("com.google.dagger:dagger-compiler:2.48.1")
}</p><p id="4adbe3ec">In this example, the <code>commonAnnotationProcessors</code> Gradle configuration is your "common" configuration for annotation processing that you want to be used for all your projects. You use the <a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html#org.gradle.api.artifacts.Configuration:extendsFrom" id="1a2035dd" data-external="true" rel="noopener noreferrer"><code>extendsFrom()</code></a> method to add "commonAnnotationProcessors" as a super configuration. kapt sees that the <code>commonAnnotationProcessors</code> Gradle configuration has a dependency on the Dagger annotation processor and successfully includes it in its configuration for annotation processing.</p><p id="e5570ad5">Thanks to Christoph Loy for the <a href="https://github.com/JetBrains/kotlin/pull/5198" id="f6597ee0" data-external="true" rel="noopener noreferrer">implementation</a>!</p></section><section><h3 id="kotlin-gradle-plugin-no-longer-uses-deprecated-gradle-conventions" data-toc="kotlin-gradle-plugin-no-longer-uses-deprecated-gradle-conventions">Kotlin Gradle plugin no longer uses deprecated Gradle conventions</h3><p id="5f5e0464">Prior to Kotlin 2.0.0, if you used Gradle 8.2 or higher, the Kotlin Gradle plugin incorrectly used Gradle conventions that had been deprecated in Gradle 8.2. This led to Gradle reporting build deprecations. In Kotlin 2.0.0, the Kotlin Gradle plugin has been updated to no longer trigger these deprecation warnings when you use Gradle 8.2 or higher.</p></section></section><section><h2 id="standard-library" data-toc="standard-library">Standard library</h2><p id="3afc2581">This release brings further stability to the Kotlin standard library and makes even more existing functions common for all platforms:</p><ul id="9e1615c0"><li id="4db4c9ea"><p><a href="#stable-replacement-of-the-enum-class-values-generic-function" id="61094f10">Stable replacement of the enum class values generic function</a></p></li><li id="a78dc9c6"><p><a href="#stable-autocloseable-interface" id="a9af4a2a">Stable AutoCloseable interface</a></p></li><li id="37d0e645"><p><a href="#common-protected-property-abstractmutablelist-modcount" id="3f6373bf">Common protected property AbstractMutableList.modCount</a></p></li><li id="a5d26a28"><p><a href="#common-protected-function-abstractmutablelist-removerange" id="6e00a33d">Common protected function AbstractMutableList.removeRange</a></p></li><li id="7cc3dfc"><p><a href="#common-string-tochararray-destination-function" id="83bd89ea">Common String.toCharArray(destination)</a></p></li></ul><section><h3 id="stable-replacement-of-the-enum-class-values-generic-function" data-toc="stable-replacement-of-the-enum-class-values-generic-function">Stable replacement of the enum class values generic function</h3><p id="316f6ec5">In Kotlin 2.0.0, the <code>enumEntries&lt;T&gt;()</code> function becomes <a href="https://kotlinlang.org/docs/components-stability.html#stability-levels-explained" id="8ca338ae">Stable</a>. The <code>enumEntries&lt;T&gt;()</code> function is a replacement for the generic <code>enumValues&lt;T&gt;()</code> function. The new function returns a list of all enum entries for the given enum type <code>T</code>. The <code>entries</code> property for enum classes was previously introduced and also stabilized to replace the synthetic <code>values()</code> function. For more information about the entries property, see <a href="https://kotlinlang.org/docs/whatsnew1820.html#a-modern-and-performant-replacement-of-the-enum-class-values-function" id="56a2e2f4">What's new in Kotlin 1.8.20</a>.</p><p id="f1a94127">For example:</p><p>enum class RGB { RED, GREEN, BLUE }

inline fun &lt;reified T : Enum&lt;T&gt;&gt; printAllValues() {
    print(enumEntries&lt;T&gt;().joinToString { it.name })
}

printAllValues&lt;RGB&gt;()
// RED, GREEN, BLUE</p></section><section><h3 id="stable-autocloseable-interface" data-toc="stable-autocloseable-interface">Stable AutoCloseable interface</h3><p id="3b90bc35">In Kotlin 2.0.0, the common <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-auto-closeable/" id="7b453c8d" data-external="true" rel="noopener noreferrer"><code>AutoCloseable</code></a> interface becomes <a href="https://kotlinlang.org/docs/components-stability.html#stability-levels-explained" id="f4548dfb">Stable</a>. It allows you to easily close resources and includes a couple of useful functions:</p><ul id="3e13d5e"><li id="6c6ca765"><p>The <code>use()</code> extension function, which executes a given block function on the selected resource and then closes it down correctly, whether an exception is thrown or not.</p></li><li id="866f0acd"><p>The <code>AutoCloseable()</code> constructor function, which creates instances of the <code>AutoCloseable</code> interface.</p></li></ul><p id="adb1dae3">In the example below, we define the <code>XMLWriter</code> interface and assume that there is a resource that implements it. For example, this resource could be a class that opens a file, writes XML content, and then closes it:</p><p>interface XMLWriter {
    fun document(encoding: String, version: String, content: XMLWriter.() -&gt; Unit)
    fun element(name: String, content: XMLWriter.() -&gt; Unit)
    fun attribute(name: String, value: String)
    fun text(value: String)

    fun flushAndClose()
}

fun writeBooksTo(writer: XMLWriter) {
    val autoCloseable = AutoCloseable { writer.flushAndClose() }
    autoCloseable.use {
        writer.document(encoding = "UTF-8", version = "1.0") {
            element("bookstore") {
                element("book") {
                    attribute("category", "fiction")
                    element("title") { text("Harry Potter and the Prisoner of Azkaban") }
                    element("author") { text("J. K. Rowling") }
                    element("year") { text("1999") }
                    element("price") { text("29.99") }
                }
                element("book") {
                    attribute("category", "programming")
                    element("title") { text("Kotlin in Action") }
                    element("author") { text("Dmitry Jemerov") }
                    element("author") { text("Svetlana Isakova") }
                    element("year") { text("2017") }
                    element("price") { text("25.19") }
                }
            }
        }
    }
}</p></section><section><h3 id="common-protected-property-abstractmutablelist-modcount" data-toc="common-protected-property-abstractmutablelist-modcount">Common protected property AbstractMutableList.modCount</h3><p id="c6630984">In this release, the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-mutable-list/mod-count.html" id="eeb00afc" data-external="true" rel="noopener noreferrer"><code>modCount</code></a> <code>protected</code>property of the <code>AbstractMutableList</code> interface becomes common. Previously, the <code>modCount</code> property was available on each platform but not for the common target. Now, you can create custom implementations of <code>AbstractMutableList</code> and access the property in common code.</p><p id="1e25372b">The property keeps track of the number of structural modifications made to the collection. This includes operations that change the collection size or alter the list in a way that may cause iterations in progress to return incorrect results.</p><p id="de0ef648">You can use the <code>modCount</code> property to register and detect concurrent modifications when implementing a custom list.</p></section><section><h3 id="common-protected-function-abstractmutablelist-removerange" data-toc="common-protected-function-abstractmutablelist-removerange">Common protected function AbstractMutableList.removeRange</h3><p id="dc3dd438">In this release, the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-mutable-list/remove-range.html" id="59df44af" data-external="true" rel="noopener noreferrer"><code>removeRange()</code></a> <code>protected</code>function of the <code>AbstractMutableList</code> interface becomes common. Previously, it was available on each platform but not for the common target. Now, you can create custom implementations of <code>AbstractMutableList</code> and override the function in common code.</p><p id="cceebb28">The function removes elements from this list following the specified range. By overriding this function, you can take advantage of the custom implementations and improve the performance of the list operation.</p></section><section><h3 id="common-string-tochararray-destination-function" data-toc="common-string-tochararray-destination-function">Common String.toCharArray(destination) function</h3><p id="56008ce1">This release introduces a common <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-char-array.html" id="528be31e" data-external="true" rel="noopener noreferrer"><code>String.toCharArray(destination)</code></a> function. Previously, it was only available on the JVM.</p><p id="fcf4e4f0">Let's compare it with the existing <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-char-array.html" id="ee8b0ebb" data-external="true" rel="noopener noreferrer"><code>String.toCharArray()</code></a> function. It creates a new <code>CharArray</code> that contains characters from the specified string. The new common <code>String.toCharArray(destination)</code> function, however, moves <code>String</code> characters into an existing destination <code>CharArray</code>. This is useful if you already have a buffer that you want to fill:</p><p>fun main() {
    val myString = "Kotlin is awesome!"
    val destinationArray = CharArray(myString.length)

    // Convert the string and store it in the destinationArray:
    myString.toCharArray(destinationArray)

    for (char in destinationArray) {
        print("$char ")
        // K o t l i n   i s   a w e s o m e ! 
    }
}</p></section></section><section><h2 id="install-kotlin-2-0-0" data-toc="install-kotlin-2-0-0">Install Kotlin 2.0.0</h2><p id="950ecf17">Starting from IntelliJ IDEA 2023.3 and Android Studio Iguana (2023.2.1) Canary 15, the Kotlin plugin is distributed as a bundled plugin included in your IDE. This means that you can't install the plugin from JetBrains Marketplace anymore.</p><p id="7573077a">To update to the new Kotlin version, <a href="https://kotlinlang.org/docs/configure-build-for-eap.html#adjust-the-kotlin-version" id="b529d102">change the Kotlin version</a> to 2.0.0 in your build scripts.</p></section><p> Last modified: 21 May 2024</p></article>  </div></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Storing knowledge in a single long plain text file (260 pts)]]></title>
            <link>https://breckyunits.com/scrollsets.html</link>
            <guid>40432834</guid>
            <pubDate>Tue, 21 May 2024 19:36:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://breckyunits.com/scrollsets.html">https://breckyunits.com/scrollsets.html</a>, See on <a href="https://news.ycombinator.com/item?id=40432834">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>All tabular knowledge can be stored in a single long plain text file.</p>
<p>The only syntax characters needed are spaces and newlines.</p>
<p>This has many advantages over existing binary storage formats.</p>
<p>Using the method below, a very long scroll could be made containing all tabular scientific knowledge in a computable form.</p>
<p><span>*</span></p>
<p>There are four concepts to understand:</p>
<ul><li>measures</li>
<li>concepts</li>
<li>measurements</li>
<li>comments</li></ul>
<div><h2>Measures</h2>
<p>First we create measures by writing parsers. The parser contains information about the measure.</p>
</div>
<p>The only required information for a measure is an id, such as <code>temperature</code>.</p>
<p>An example measure:</p>
<p><code>temperatureParser</code></p><div><h2>Concepts and Measurements</h2>
<p>Next we create concepts by writing measurements.</p>
</div>
<p>The only required measurement for a concept is an id. A line that starts with an id measurement is the start of a new concept.</p>
<p>A measurement is a single line of text with the measure id, a space, and then the measurement value.</p>
<p>Multiple sequential lines of measurements form a concept.</p>
<p>An example concept:</p>
<p><code>id Earth
temperature 14</code></p><div><h2>Comments</h2>
<p>Unlimited comments can be attached under any measurement using the indentation trick.</p>
</div>
<p>An example comment:</p>
<p><code>temperature 14
 &gt; The global mean surface air temperature for that period was 14°C (57°F), with an uncertainty of several tenths of a degree.
  - NASA
   https://earthobservatory.nasa.gov/world-of-change/global-temperatures</code></p><p><span>*</span></p>
<div><h2>The Complete Example</h2>
<p>Putting this all together, all tabular knowledge can be stored in a single plain text file using this pattern:</p>
<p><code>idParser
temperatureParser

id Earth
temperature 14
 &gt; The global mean surface air temperature for that period was 14°C (57°F), with an uncertainty of several tenths of a degree.
  - NASA
   https://earthobservatory.nasa.gov/world-of-change/global-temperatures</code></p><p><span>*</span></p>
</div>
<p>Once your knowledge is stored in this format, it is ready to be read—<em>and written</em>—by humans, traditional software, and artificial neural networks, to power understanding and decision making.</p>
<p>Edit history can be tracked by git.</p>
<p><span>*</span></p>
<p><h2>A Visualization</h2>
</p>
<figure><a href="https://breckyunits.com/scrollsets.png" target="_blank"><img src="https://breckyunits.com/scrollsets.png" width="402" height="456" loading="lazy"></a><figcaption><p>Blue dots are measure ids. The first blue dot is a measure definition (aka a parser). The red dot is a measurement value. The blue-red pair is a measurement, as well as a concept. The cyan dot is a comment. <a href="https://ohayo.computer/?filename=scrollsets.ohayo-source-code-vis.ohayo-source-code-vis.ohayo&amp;nodeBreakSymbol=%7E&amp;edgeSymbol=_&amp;data=data.inline%7E_hidden%7E_parser_text%7E_treeLanguage_ohayo%7E_treenotation.3d%7E__cameraPosition_5_0.1_1.5%7E_content%7E__doc.title%7E__show.median_lines%7E___doc.comment">View Source</a></p></figcaption></figure>
<p><span>*</span></p>
<div><h2>Prior Art</h2>
<p>Modern databases<a href="#note1" id="noteUsage1"><sup>[1]</sup></a> were designed before git<a href="#note2" id="noteUsage2"><sup>[2]</sup></a>, fast filesystems<a href="#note3" id="noteUsage3"><sup>[3]</sup></a>, and the Tree Notation stack<a href="#note4" id="noteUsage4"><sup>[4]</sup></a>, all requirements of this system.</p>
</div>
<p>GNU Recutils<a href="#note5" id="noteUsage5"><sup>[5]</sup></a> deserves credit as the closest precursor to our system. If Recutils were to adopt some designs from our system it would be capable of supporting larger databases.</p>
<p><span>*</span></p>
<div><h2>Initial Implementation and Experimental Evidence</h2>
<p><a href="https://scroll.pub/">ScrollSet</a>s is the name of the first implementation of the system above. It is open source and dedicated to the public domain.</p>
</div>
<p>ScrollSets are used to power the open source website <a href="https://pldb.io/">PLDB.io</a>. PLDB currently has over 300 measures, over 4,000 concepts and over 150,000 measurements, contributed by over 100 people, dozens of software crawlers, and a couple of artificial neural networks.</p>
<p>If printed on a single scroll, the PLDB ScrollSet would be over one kilometer long.</p>
<p><span>*</span></p>
<div><h2>Enhancements</h2>
<ul><li>For pragmatic reasons, it is best to split your data into 1 file per concept and combine concept files at runtime.</li>
<li>The utility and joy of this system improves as your parser language improves. The parser language powering ScrollSets is currently called Grammar, and is largely influenced by ANTLR<a href="#note6" id="noteUsage6"><sup>[6]</sup></a> and Racket<a href="#note7" id="noteUsage7"><sup>[7]</sup></a>.</li></ul>
</div>
<ul><li>It is <em>very</em> helpful to have a <code>sortIndex</code> attribute on your measures to automatically prioritize<a href="#note8" id="noteUsage8"><sup>[8]</sup></a> the measurements in your source and output files. The impact of this simple enhancement hints at interesting signs of dense information packing achieved by this method, which may have implications for the weights and training of artificial neural networks.</li>
<li>Computed measures are measurements not stored statically, but derived at runtime from other measurements. They are very useful and easy to add with a few lines of parser code.</li>
<li>You generally always want to add a type attribute to your measures, which gives you error checking, among other things.</li>
<li>Measures can be nested. This means it is best to be restrictive in what characters are allowed in measure ids to integrate with a broad set of software tools. For example, you can nest a <code>minParser</code> under <code>temperatureParser</code> to generate a <code>temperature_min</code> column name in a generated TSV.</li>
<li>It is useful to have measures whose values are foreign keys, such as a list of <code>ids</code>.</li></ul>
<p><span>*</span></p>
<div><h2>Conclusion</h2>
<p>Measurements loosely map to nucleotides; concepts to genes; parsers to ribosomes.</p>
</div>
<p>This system might also have broad use.</p>
<p><span>*</span></p>
<div><h2>Citations</h2>
<p id="note1"><a href="#noteUsage1">[1]</a> <a href="https://en.wikipedia.org/wiki/SQL">SQL</a>: Donald D. Chamberlin and Raymond F. Boyce</p>
<p id="note2"><a href="#noteUsage2">[2]</a> <a href="https://en.wikipedia.org/wiki/Git">Git</a>: Linus Torvalds, Junio Hamano, et al</p>
<p id="note3"><a href="#noteUsage3">[3]</a> <a href="https://en.wikipedia.org/wiki/Apple_M1">M1</a>: Apple</p>
<ul><li>The M1 laptop was the first consumer machine where the performance of this system wasn't <a href="https://breckyunits.com/building-a-treebase-with-6.5-million-files.html">abysmal</a>.</li></ul>
<p id="note4"><a href="#noteUsage4">[4]</a> <a href="https://github.com/breck7/research/blob/master/papers/paper3/countingComplexity.pdf">Tree Notation</a>: Breck Yunits et al</p>
<p id="note5"><a href="#noteUsage5">[5]</a> <a href="https://www.gnu.org/software/recutils/">GNU Recutils</a>: Jose E. Marchesi</p>
<ul><li>Recutils and our system have debatable syntactic differences, but our system solves a few clear problems described in the Recutils docs:</li><ul><li>"difficult to manage hierarchies". Hierarchies are painless in our system through nested parsers, parser inheritance, parser mixins, and nested measurements.</li>
<li>"tedious to manually encode...several lines". No encoding is needed in our system thanks to the indentation trick.</li>
<li>In Recutils comments are "completely ignored by processing tools and can only be seen by looking at the recfile itself". Our system supports first class comments which are bound to measurements using the indentation trick.</li>
<li>"It is difficult to manually maintain the integrity of data stored in the data base." In our system advances parsers provides unlimited capabilities for maintaining data integrity.</li></ul></ul>
<p id="note6"><a href="#noteUsage6">[6]</a> <a href="https://www.antlr.org/">ANTLR</a>: Terence Parr et al</p>
<p id="note7"><a href="#noteUsage7">[7]</a> <a href="https://racket-lang.org/">Racket</a>: Matthias Felleisen, Matthew Flatt, Robert Bruce Findler, Shriram Krishnamurthi, et al.</p>
<p id="note8"><a href="#noteUsage8">[8]</a> <a href="https://archive.jlongster.com/">Prettier</a>: James Long et al</p>
</div>
<p><span>*</span></p>
<div><h2>Thanks</h2>
<p>Thank you to everyone who helped me evolve this idea into its simplest form, including but not limited to, A, Alex, Andy, Ben, Brian, C, Culi, Dan, G, Greg, Jack, Jeff, John, L, Liam, Hari, Hassam, Jose, Matthieu, Ned, Nick, Nikolai, Pavel, Steph, Tom, Zach, Zohaib.</p>
<p><span>⁂</span></p>
</div>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Gordon Bell has died (1154 pts)]]></title>
            <link>https://arstechnica.com/gadgets/2024/05/gordon-bell-an-architect-of-our-digital-age-dies-at-age-89/</link>
            <guid>40432688</guid>
            <pubDate>Tue, 21 May 2024 19:23:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/gadgets/2024/05/gordon-bell-an-architect-of-our-digital-age-dies-at-age-89/">https://arstechnica.com/gadgets/2024/05/gordon-bell-an-architect-of-our-digital-age-dies-at-age-89/</a>, See on <a href="https://news.ycombinator.com/item?id=40432688">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      the great memory register in the sky    —
</h4>
            
            <h2 itemprop="description">Bell architected DEC's VAX minicomputers, championed computer history, mentored at Microsoft.</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/05/GettyImages-136021414-800x517.jpg" alt="A photo of Gordon Bell speaking at the annual PC Forum in Palm Springs, California, March 1989.">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2024/05/GettyImages-136021414-scaled.jpg" data-height="1655" data-width="2560">Enlarge</a> <span>/</span> A photo of Gordon Bell speaking at the annual PC Forum in Palm Springs, California, March 1989.</p></figcaption>  </figure>

  




<!-- cache hit 136:single/related:379d27030a7eb2687e4b5c3989754ba7 --><!-- empty -->
<p>Computer pioneer <a href="https://gordonbell.azurewebsites.net/">Gordon Bell</a>, who as an early employee of <a href="https://arstechnica.com/gadgets/2023/10/long-gone-dec-is-still-powering-the-world-of-computing/">Digital Equipment Corporation</a> (DEC) played a key role in the development of several influential minicomputer systems and also co-founded the first major computer museum, passed away on Friday, according to Bell Labs veteran John Mashey. Mashey announced Bell's passing in a <a href="https://x.com/JohnMashey/status/1792782878608445595">social media post</a> on Tuesday morning.</p>

<p>"I am very sad to report [the] death May 17 at age 89 of Gordon Bell, famous computer pioneer, a founder of Computer Museum in Boston, and a force behind the @ComputerHistory here in Silicon Valley, and good friend since the 1980s," wrote Mashey in his announcement. "He succumbed to aspiration pneumonia in Coronado, CA."</p>
<p>Bell was a pivotal figure in the history of computing and a notable champion of tech history, having founded Boston's <a href="https://en.wikipedia.org/wiki/The_Computer_Museum,_Boston">Computer Museum</a> in 1979, which later became the heart of the <a href="https://en.wikipedia.org/wiki/Computer_History_Museum">Computer History Museum</a> in Mountain View, with his wife <a href="https://en.wikipedia.org/wiki/Gwen_Bell">Gwen Bell</a>. He was also the namesake of the ACM's prestigious <a href="https://awards.acm.org/bell">Gordon Bell Prize</a>, created to spur innovations in parallel processing.</p>
<p>Born in 1934 in Kirksville, Missouri, Gordon Bell earned degrees in electrical engineering from MIT before being recruited in 1960 by DEC founders Ken Olsen and Harlan Anderson. As the second computer engineer hired at DEC, Bell <a href="https://web.archive.org/web/20050402125352/http://americanhistory.si.edu/collections/comphist/bell.htm#PDP-11">worked on</a> various components for the <a href="https://en.wikipedia.org/wiki/PDP-1">PDP-1</a> system, including floating-point subroutines, tape controllers, and a drum controller.</p>
<p>Bell also invented the first <a href="https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter">UART</a> (Universal Asynchronous Receiver-Transmitter) for serial communication during his time at DEC. He went on to architect several influential DEC systems, including the <a href="https://en.wikipedia.org/wiki/PDP-4">PDP-4</a> and <a href="https://en.wikipedia.org/wiki/PDP-6">PDP-6</a>. In the 1970s, he played a key role in overseeing the aforementioned <a href="https://en.wikipedia.org/wiki/VAX">VAX minicomputer</a> line as the engineering manager, with <a href="https://www.computer.org/profiles/william-strecker">Bill Strecker</a> serving as the primary architect for the VAX architecture.</p>                                            
                                                        
<p>After retiring from DEC in 1983, Bell remained active as an entrepreneur, policy adviser, and researcher. He co-founded <a href="https://en.wikipedia.org/wiki/Encore_Computer">Encore Computer</a> and helped establish the NSF's <a href="https://new.nsf.gov/cise">Computing and Information Science and Engineering Directorate</a>.</p>
<p>In 1995, Bell joined Microsoft Research where he studied telepresence technologies and served as the subject of the <a href="https://www.microsoft.com/en-us/research/project/mylifebits/">MyLifeBits</a> life-logging project. The initiative aimed to realize <a href="https://en.wikipedia.org/wiki/Vannevar_Bush">Vannevar Bush's</a> vision of a system that could store all the documents, photos, and audio a person experienced in their lifetime.</p>
<p>Bell was elected to the National Academy of Engineering, National Academy of Sciences, and American Academy of Arts and Sciences. He received the National Medal of Technology from President George H.W. Bush in 1991 and the IEEE's John von Neumann medal in 1992.</p>
<h2>“He was immeasurably helpful”</h2>
<p>As news of Bell's passing spread on social media Tuesday, industry veterans began sharing their memories and condolences. Former Microsoft CTO Ray Ozzie <a href="https://x.com/rozzie/status/1792891027822346284">wrote</a>, "I can't adequately describe how much I loved Gordon and respected what he did for the industry. As a kid I first ran into him at Digital (I was then at DG) when he and Dave were working on VAX. So brilliant, so calm, so very upbeat and optimistic about what the future might hold."</p>

<p>Ozzie also recalled Bell's role as a helpful mentor. "The number of times Gordon and I met while at Microsoft—acting as a sounding board, helping me through challenges I was facing—is uncountable," he wrote.</p>
<p>Former Windows VP Steven Sinofsky also paid tribute to Bell on X, writing, "He was immeasurably helpful at Microsoft where he was a founding advisor and later full time leader in Microsoft Research. He advised and supported countless researchers, projects, and product teams. He was always supportive and insightful beyond words. He never hesitated to provide insights and a few sparks at so many of the offsites that were so important to the evolution of Microsoft."</p>
<p>"His memory is a blessing to so many," wrote Sinofsky in his tweet memorializing Bell. "His impact on all of us in technology will be felt for generations. May he rest in peace."</p>

                                                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[iTerm2 and AI Hype Overload (166 pts)]]></title>
            <link>https://xeiaso.net/notes/2024/ai-hype/</link>
            <guid>40432446</guid>
            <pubDate>Tue, 21 May 2024 19:01:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xeiaso.net/notes/2024/ai-hype/">https://xeiaso.net/notes/2024/ai-hype/</a>, See on <a href="https://news.ycombinator.com/item?id=40432446">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article>
    
    <p>
        Published on <time datetime="2024-05-21">05/21/2024</time>, 1001 words, 4 minutes to read
    </p>

    

    
        
    

    

    

    
        <figure><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/hero/iterm-hacker-waifu.avif"><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/hero/iterm-hacker-waifu.webp"><img alt="An image of A green-haired green-eyes anime woman in a dark hacker nest with a laptop and a cup of coffee" loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/hero/iterm-hacker-waifu.jpg"></picture></figure>
        <small>A green-haired green-eyes anime woman in a dark hacker nest with a laptop and a cup of coffee - Kohaku XL</small>
    

    <p><a href="https://iterm2.com/">iTerm2</a> is the most popular terminal emulator for macOS machines. I've used it for years and it has gotten out of my way. It's great software. Recently <a href="https://iterm2.com/downloads/stable/iTerm2-3_5_0.changelog">an update</a> was released that among other things includes new AI integration:</p>
<blockquote>
<p>AI</p>
<ul>
<li>Add AI-powered natural language command
generation. Enter a prompt in the composer and
select Edit &gt; Engage Artificial Intelligence.
You will need to provide an OpenAI API key since
GPT costs money to use.</li>
<li>A new AI feature in the Toolbelt, "Codecierge",
lets you set a goal and then walks you
step-by-step to completing it by watching the
terminal contents. It requires you to supply an
OpenAI API key.</li>
</ul>
</blockquote>
<p>Here's what the first feature looks like:</p>
<video id="e210aedb9d31afb5fabe8a770568c816c04cd124f6bcaad844c104b5105478fa" controls=""><source src="https://cdn.xeiaso.net/file/christine-static/video/2024/oneoff-iterm2-ai/index.m3u8" type="application/vnd.apple.mpegurl"><source src="https://cdn.xeiaso.net/file/christine-static/blog/HLSBROKE.mp4" type="video/mp4"></video>
<p>It's a text box that you can enter in a description of a command in, then it generates the command for you. It's a lot like the former <a href="https://githubnext.com/projects/copilot-cli/">GitHub Copilot for CLI</a>, but built into your terminal, just a command-y away.</p>
<p>When you use this, you have your choice of the following models:</p>
<ul>
<li><code>gpt-3.5-turbo</code></li>
<li><code>gpt-4-turbo</code></li>
<li><code>gpt-4</code></li>
<li><code>gpt-4o</code></li>
</ul>
<p>I wasn't able to get <code>gpt-4o</code> to work, but <code>gpt-3.5-turbo</code> worked fine. I'm not totally wowed by the feature, but it is a thing that exists and I'll probably use it once or twice (mainly when I'm dealing with ffmpeg commands because good god those are hard to remember). I don't think it's a killer feature, but it's a nice-to-have, I guess.</p>
<p>One of the main bits of feedback I've seen from people online is that iTerm2 having AI involved at all is enough to get them to want to switch away to another terminal emulator. They've cited the reason as exhaustion due to overexposure to AI hype.</p>
<p>AI is the current meme among investors and the tech space. <a href="https://blogs.windows.com/windowsexperience/2024/01/04/introducing-a-new-copilot-key-to-kick-off-the-year-of-ai-powered-windows-pcs/">Microsoft is putting an AI button on your keyboard</a>, <a href="https://arstechnica.com/tech-policy/2024/05/slack-defends-default-opt-in-for-ai-training-on-chats-amid-user-outrage/">Slack is training AI on your messages</a>, and <a href="https://x.com/yashar/status/1792682664845254683">OpenAI is in hot water with Scarlet Johansson</a>. It's everywhere, and it's exhausting. Part of my job requires me to keep up with the latest advances with AI and I'm unable to. Everything happens so much.</p>
<p>With a lot of these AI tools comes the problem that the AI system itself is very opaque. You put in inputs, you get an output, but nobody is able to explain how or why something came out that way. There's an entire cottage industry of people finding the right combinations of words to get the AI to do something they want. It's like scrying into the unknown, but somehow with trillions of dollars on the line.</p>
<p>This "type the command for me" feature has caused a lot of buzz online, to the point where people I know are just flat out ripping out iTerm2 in favor of programs that <em>don't</em> have AI integrations in them. Hell, even the mention that a tool is <em>going</em> to get an AI integration has people preemptively ripping it out of their systems <em>because</em> of that opacity. A terminal emulator is probably also a fairly bad place to implement this because it's probably one of the most privileged programs on a developer's machine. It deals with all the secrets in the world, and the <em>threat</em> that it could be used to upload them all to a third party is great enough that people are willing to switch away from it <strong>sight unseen</strong>.</p>
<div><p><img alt="Aoi is wut" loading="lazy" src="https://cdn.xeiaso.net/sticker/aoi/wut/128"></p><div><p>&lt;<a href="https://xeiaso.net/characters#aoi"><b>Aoi</b></a>&gt; </p><p>I don't get it. It's a very optional feature that you have to:</p><ol>
<li>Go out of your way to enable</li>
<li>Supply your own API key (and pay for it yourself)</li>
<li>Enable something that is not enabled by default</li>
</ol><p>Why are people reacting so strongly to this?</p></div></div>
<div><p><img alt="Cadey is aha" loading="lazy" src="https://cdn.xeiaso.net/sticker/cadey/aha/128"></p><div><p>&lt;<a href="https://xeiaso.net/characters#cadey"><b>Cadey</b></a>&gt; </p><p><del>A lot of it boils down to having this "shoved down their throats". It's the
fact that it's being added to a tool without the user having the <em>agency</em> to
decide if they want it to be added or not. There's something that can probably
be said here about programs like this likely needing to be open-source so that
these things can be caught and stopped sooner, but that's an entirely
different conversation.</del></p><p>EDIT: an earlier version of this post assumed that iTerm2 was closed source. It is not. I apologize for the error. Here is an amended version of the paragraph:</p><p>A lot of it boils down to having this "shoved down their throats". It's the
fact that it's being added to a tool without the user having the <em>agency</em> to
decide if they want it to be added or not. That being said, <a href="https://github.com/gnachman/iTerm2/commit/7bcc4e0bedb22c4fd90ae7934fbbce3268a71e11">here is the commit that added the AI feature in question</a>. It's apparently been in development at some level for two years or so. I guess it predates most of the AI hype that's been going on lately.</p></div></div>
<p>I get why people wouldn't want this in their lives, I really do. I think that one of the greatest errors that was made with putting this in iTerm2 was making a big show of it, and by not letting you use local models (such as with <a href="https://ollama.com/">Ollama</a>) instead of having OpenAI be the only option.</p>
<p>It would be really cool if this was distributed as an optional addon with their <a href="https://iterm2.com/python-api/">Python API</a> as an example of how you can extend iTerm2 in arbitrary ways. This would get a lot of the same advantages, but without the whole angry mob thing.</p>

    <hr>

    

    

    <p>Facts and circumstances may have changed since publication. Please contact me before jumping to conclusions if something seems wrong or unclear.</p>

    <p>Tags: </p>
</article>
        </div><div>
            <p>Copyright 2012-2024 Xe Iaso (Christine Dodrill). Any and all opinions listed here are my own and
                not representative of any of my employers, past, future, and/or present.</p>
            
            <p>Served by xesite v4 (/nix/store/lq13hrw9dczjbk4miixwz5w14s3737cc-xesite_v4-20240510/bin/xesite) with site version 
                        <a href="https://github.com/Xe/site/commit/7e2e630284d18bb633bec873b9eedd0cd6dc08c1">7e2e6302</a>
                    , source code available <a href="https://github.com/Xe/site">here</a>.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Openpanel – An open-source alternative to Mixpanel (196 pts)]]></title>
            <link>https://github.com/Openpanel-dev/openpanel</link>
            <guid>40432213</guid>
            <pubDate>Tue, 21 May 2024 18:43:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Openpanel-dev/openpanel">https://github.com/Openpanel-dev/openpanel</a>, See on <a href="https://news.ycombinator.com/item?id=40432213">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Openpanel-dev/openpanel/blob/main/apps/public/public/ogimage.png"><img src="https://github.com/Openpanel-dev/openpanel/raw/main/apps/public/public/ogimage.png" alt="hero"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto"><b>Openpanel</b></h2><a id="user-content-openpanel" aria-label="Permalink: Openpanel" href="#openpanel"></a></p>

  
<p dir="auto">Openpanel is a simple analytics tool for logging events on web, apps and backend. We have tried to combine Mixpanel and Plausible in the same product.</p>
<ul dir="auto">
<li>Visualize your data
<ul dir="auto">
<li><strong>Charts</strong>
<ul dir="auto">
<li>Funnels</li>
<li>Line</li>
<li>Bar</li>
<li>Pie</li>
<li>Histogram</li>
<li>Maps</li>
</ul>
</li>
<li><strong>Breakdown</strong> on all properties</li>
<li><strong>Advanced filters</strong> on all properties</li>
<li>Create <strong>beautiful dashboards</strong> with your charts</li>
<li><strong>Access all your events</strong></li>
<li>Access all your visitors and there history</li>
</ul>
</li>
<li>Own Your Own Data</li>
<li>GDPR Compliant</li>
<li>Cloud or Self-Hosting</li>
<li>Real-Time Events</li>
<li>No cookies!</li>
<li>Privacy friendly</li>
<li>Cost-Effective</li>
<li>Predictable pricing</li>
<li>First Class React Native Support</li>
<li>Powerful Export API</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Disclaimer</h2><a id="user-content-disclaimer" aria-label="Permalink: Disclaimer" href="#disclaimer"></a></p>
<blockquote>
<p dir="auto">Hey folks 👋🏻 Just a friendly heads-up: we're still in the early stages of this project. We have migrated from pages to app dir and made some major changes during the development of Openpanel, so everything is not perfect.</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Stack</h2><a id="user-content-stack" aria-label="Permalink: Stack" href="#stack"></a></p>
<ul dir="auto">
<li><strong>Nextjs</strong> - the dashboard</li>
<li><strong>Fastify</strong> - event api</li>
<li><strong>Postgres</strong> - storing basic information</li>
<li><strong>Clickhouse</strong> - storing events</li>
<li><strong>Redis</strong> - cache layer, pub/sub and queue</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">More</h3><a id="user-content-more" aria-label="Permalink: More" href="#more"></a></p>
<ul dir="auto">
<li>Tailwind</li>
<li>Shadcn</li>
<li>tRPC - will probably migrate this to server actions</li>
<li>Clerk - for authentication</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Self hosting</h2><a id="user-content-self-hosting" aria-label="Permalink: Self hosting" href="#self-hosting"></a></p>
<p dir="auto">I'll fill out this section when we're out of beta (might be sooner than that).</p>
<p dir="auto">But it will probably be a CapRover recipe and Docker Compose scheme.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The curious case of the missing period (449 pts)]]></title>
            <link>https://tjaart.substack.com/p/the-curious-case-of-the-missing-period</link>
            <guid>40432102</guid>
            <pubDate>Tue, 21 May 2024 18:35:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tjaart.substack.com/p/the-curious-case-of-the-missing-period">https://tjaart.substack.com/p/the-curious-case-of-the-missing-period</a>, See on <a href="https://news.ycombinator.com/item?id=40432102">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p>They explained that one of the emails they sent to a customer was missing a period (.) in the email body. What was more confusing is it only happened to this specific customer, when the same email was sent to a different customer the period was not missing.</p><p>Recently during my 1 on 1 with my manager we talked about a current project that one of our other teams are working on. This sparked a memory from one of the previous projects I worked on long ago.&nbsp;</p><p>About 7 years ago I worked on a project where we built a solution for a client that allowed the client to consolidate all their document templates into a single system, think of it as a version control system for the documents they were sending to their customers.&nbsp;</p><p>At the time the client used Microsoft Word templates with placeholders in the document. Every time an employee of our client needed to send out a document via email or needed to print a document that needed to be sent out by the postal services to the customer the employee would have to replace all the placeholders within the document (first name, last name etc).&nbsp;</p><p>I remember at one time multiple templates floating around where some versions of the templates were out of date. Some of these templates used outdated terms and conditions where other templates used an outdated company logo or the incorrect font and so on, it had become unmanageable and they asked us to come up with a solution.</p><p>We ended up with a solution that allowed the client to have a central place to keep track of all the templates that would eventually be used to generate PDF documents, text messages and the body of emails.&nbsp;</p><p>An example of a template they could set up was a welcome letter to a new customer. For each type of communication they could configure a template for each delivery method, one for email, one for text message and one for the printed version that could get mailed out by the postal service. They could end up with a welcome letter that could be sent out by email, text message or by mail. The contents of each template (for the welcome letter) could be different based on the delivery mechanism (email, text message or mail). On the email variant they might use HTML tables and other primitive styling patterns whereas on the mailed version they could add infographics, for the text message template they might have only added a short welcome message.</p><p>After a few months of the system being out in the wild (or it could have been more than a year) I got a call from one of the managers that used the software we built.&nbsp;</p><p>They explained that one of the emails they sent to a customer was missing a period in the email body. What was more confusing is it only happened to this specific customer, when the same email was sent to a different customer the period was not missing.</p><p>Here is an example of the welcome email they might have received where the period was visible:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png" width="780" height="760" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:760,&quot;width&quot;:780,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F86976c27-5ebc-4019-97ac-2d8b04d73611_780x760.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Here is the same email being sent to a different recipient but the period being missing:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png" width="780" height="760" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:760,&quot;width&quot;:780,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F270689ef-6cca-46bf-9b7d-dfddead84ba7_780x760.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>If you missed it, here is the missing period:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png" width="398" height="760" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:760,&quot;width&quot;:398,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F035b1c94-bc40-41ac-a423-7edfd39f0785_398x760.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>While I was on the call with the manager I verified that the source code of the template in fact did contain the period the manager said was missing in the email body. I wrote down the name of the template (as each template has a name and version) so that I could test it myself after the call ended. I told the manager I would have to investigate further and it might take a while.&nbsp;</p><p>Once the manager hung up I copied the source code of the template being used in production onto my local version of the software and I generated the email body as a preview. In the preview of the email body I could still see the period. This specific template could be used as a printed version (to be mailed out) or an email body; the printed version generated from this template also correctly displayed the period.</p><p>I was already scratching my head at this point as I could clearly see the period in the source code and on the preview in the software we built but the manager insisted the period was missing from the email body this specific customer received.</p><p>I decided to trigger the code that would send the email. Our local environment was set up to send emails to your localhost on a certain port, then with a fake SMTP server like SMTP4dev you could receive the email and then view the email with a locally installed email client, Outlook in my case.</p><p>When I viewed the local email in Outlook I could still see the period correctly showing up in the email body.</p><p>Each time a template was used to generate an email, PDF or text message the code would replace the placeholders with actual content. An example of the placeholders that would be replaced was the customer’s first name, last name etc. This meant each email sent out was unique in terms of the content the email body contained.</p><p>I was able to locate the email that was sent to the customer. I could see the values used for the various placeholders in the email. I ended up sending a second email on my local environment but this time with the exact same values for the placeholders that were used for this specific customer.</p><p>When I viewed the local email in Outlook I confirmed that the period was in fact missing.</p><p>This means the period being missing was very specific to the content of the email that this specific customer received.</p><p>I tried various things, I tried to determine if the period character in the template was perhaps encoded when we copied it to the template or if the period was perhaps not a period but a different character being displayed as a period, basically grasping at straws.&nbsp;</p><p>While trying the above I sent the email to my localhost after each change I made to the template (this was like working on a website before all the current developer tools were available and hitting refresh and trying again). I noticed that when the period character was moved within the template from its current position, let’s say from position 5 on line 4 to position 6 in line 4 that the period would suddenly be visible when viewing the email on my local Outlook. At last, I had a lead!</p><p>Now I knew how to reproduce the issue, but I still did not know the reason for why it was happening. I could move the period with blank spaces as a potential solution and call it a day but I wanted to get to the bottom of why this was happening in the first place.</p><p>I started to debug the code and step through the code that was generating the email and saving it to the local database. There was an additional step that happened, once the email was inserted into the database (scheduled to be sent) we had a CRON job that periodically picked up emails that needed to be sent and then sent out the email.&nbsp;</p><p>I verified that the code that persisted the email to the database did not alter the template in any way other than replacing the placeholders with the customer’s information. I focused my investigation to the code being invoked by the CRON job (the scheduler that sends out the emails).</p><p>I stepped through the code the CRON job was invoking. Some of this code we borrowed from a previous project that was done by one of our other teams a while back. A portion of this code implemented a SMTP client. I avoided this code for a while but I had no other choice to step into it.&nbsp;</p><p>After stepping through the code multiple times and reading the comments in the code I noticed that one of the functions in the code would ensure each line in the email body is not longer than a certain amount of characters. If the line exceeds this limit it would create a new line and move the remainder of the email content to the new line and continue, rinse and repeat.</p><p>This was implementing the following part of the SMTP spec:</p><blockquote><p>The maximum total length of a text line including the &lt;CRLF&gt; is 1000</p><p>octets (not counting the leading dot duplicated for transparency).</p><p>This number may be increased by the use of SMTP Service Extensions.</p></blockquote><p>While stepping through the code I evaluated the variable containing the email body and I noticed that the line that contained the missing period started with the period character. This means the previous line hit the limit of the line length rule and a new line was created and the period character was moved to the next line. Here is an example:</p><p>Original email body:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png" width="1408" height="376" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:376,&quot;width&quot;:1408,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F93c2d719-d708-4721-8c8c-2b5401fa813c_1408x376.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Email body after the custom SMTP client formatted the body (excluding other formatting)</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png" width="1408" height="376" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:376,&quot;width&quot;:1408,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F89cdf0ee-1467-4240-a8d0-3a98e235b263_1408x376.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Note that line 5 starts with a period.</p><p>After some digging trying to learn about the SMTP client implementation I ended up on a page on the internet that contained the spec for Simple Mail Transfer Protocol (SMTP)</p><p>As I read through the spec I noticed the following:</p><blockquote><p>Since the mail data is sent on the transmission channel, the end of</p><p>mail data must be indicated so that the command and reply dialog can</p><p>be resumed.&nbsp; SMTP indicates the end of the mail data by sending a</p><p>line containing only a "." (period or full stop)</p></blockquote><p><span>This was linked to a different section in the spec called: </span><em>4.5.2. Transparency</em><span>. </span></p><p>I navigated to this section and when I read the following I almost jumped out of my chair:</p><p>SMTP client</p><blockquote><p><span>Before sending a line of mail text, the SMTP </span><strong>client</strong><span> checks the</span></p><p>first character of the line.&nbsp; If it is a period, one additional</p><p>period is inserted at the beginning of the line.</p></blockquote><p>SMTP Server</p><blockquote><p><span>When a line of mail text is received by the SMTP </span><strong>server</strong><span>, it checks</span></p><p>the line.&nbsp; If the line is composed of a single period, it is</p><p>treated as the end of mail indicator.&nbsp; If the first character is a</p><p>period and there are other characters on the line, the first</p><p>character is deleted.</p></blockquote><p>If you missed it, the following was of importance:</p><p><span>The SMTP </span><strong>client</strong><span> spec:</span></p><blockquote><p>Before sending a line of mail text, the SMTP client checks the</p><p><strong>first</strong><span> character of the line.&nbsp; </span><strong>If it is a period</strong><span>, one additional</span></p><p>period is inserted at the beginning of the line.</p></blockquote><p>The SMTP server spec:</p><blockquote><p>If the first character is a</p><p><span>period and there are other characters on the line, </span><strong>the first</strong></p><p><strong>character is deleted</strong><span>.</span></p></blockquote><p>The SMTP server spec clearly explained what was happening in our use case (the disappearance of a period).&nbsp;</p><p>I updated the code to handle the addition of a second period if a line started with a period and the line had other characters. Then when the SMTP server removes the period upon receiving the email there still remains a period (this is implemented in whatever SMTP server is receiving the email and is outside of our control).</p><p>I resent the original email to my localhost using the same recipient details that was experiencing this issue, this time the period was no longer gone, it had re-appeared, almost like magic.</p><p>We shipped the fix and let the manager know the issue is resolved.</p><p>Seeing that the SMTP client code was borrowed from a previous project we thought it good to let our other teams know about this bug in case they needed to patch it as well. They thanked us and we called it a day.</p><p>This is usually where a story like this ends, but not this one. If this story ended here I would have probably not remembered this bug.</p><p>A few months later.</p><p>My manager walks out of his office and starts with something along the lines of “Hey team, you remember that bug we had with the missing period a while ago?”.&nbsp; </p><p>If you have ever seen a dog or a wild animal move their ears while they are listening to a sound in the distance, I’m pretty sure this was how my ears were moving when I heard the words “that bug we had with the missing period”.</p><p>It seems one of our other teams haven't gotten around to patching this bug in their code. Unfortunately the system they maintained had sent out a bunch of very important emails to customers informing them about their new monthly premium they needed to pay. As luck would have it a handful of these email bodies had the period just in the right spot (or wrong spot, depending on your view).&nbsp;</p><p>In some of the emails the customers received, the new monthly premium was missing its decimal separator, in this case it was missing a period. </p><p>This meant some customers received emails informing them their new premium was now $2700 instead of $27.00.&nbsp;</p><p>Here is an example of the email that correctly contained the period:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png" width="780" height="1014" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1014,&quot;width&quot;:780,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:85337,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F810d78f3-d327-41c5-84fa-aa2e805f60b6_780x1014.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Here is an example of the email some unlucky customers received that was missing the period:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png" width="780" height="1014" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1014,&quot;width&quot;:780,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:85894,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8e50e89-9d43-42a6-b4d4-205ea37ac836_780x1014.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Luckily this bug was very dependent on the length of each line in the email body. The template contained some placeholders like a customer’s first name and surname. </p><p>This meant only a certain amount of customers had the exact amount of characters in their first name and surname to cause the period to show up as the first character of a new line causing the period to disappear.</p><p>The code got patched immediately as the team knew exactly what the problem was, they thanked us again and we went back to work.</p></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amber: Programming language compiled to Bash (277 pts)]]></title>
            <link>https://amber-lang.com/</link>
            <guid>40431835</guid>
            <pubDate>Tue, 21 May 2024 18:15:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://amber-lang.com/">https://amber-lang.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40431835">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><nav><p><img alt="Amber Logo" loading="lazy" decoding="async" data-nimg="fill" src="https://amber-lang.com/amber-logo.svg"></p><p>amber</p></nav><div><p>The Programming Language compiled to Bash.</p><p>Write your scripts in a modern type-safe and runtime-safe programming language that handles many bugs and mistakes during compilation process.</p></div><div><div><h2>Write</h2></div><div><h2>Compile</h2></div><div><h2>Execute</h2></div></div><div><div><p><img alt="types" loading="lazy" width="32" height="32" decoding="async" data-nimg="1" src="https://amber-lang.com/icons/syntax.svg"></p><p>Modern Syntax</p><p>You will find many of the language features familiar, allowing you to get up and running much faster than if you were learning Bash from scratch.</p></div><div><p><img alt="types" loading="lazy" width="32" height="32" decoding="async" data-nimg="1" src="https://amber-lang.com/icons/runtime.svg"></p><p>Runtime Safety</p><p>It’s one of the key components missing from regular shell scripts. It can help you catch many bugs at compile time.</p></div><div><p><img alt="types" loading="lazy" width="32" height="32" decoding="async" data-nimg="1" src="https://amber-lang.com/icons/types.svg"></p><p>Type Safety</p><p>Amber ensures that you handle everything that could fail. Each Bash command and function that could fail must be handled in some way.</p></div></div><div><p><h2>A portable solution for Unix<br>based operating systems</h2></p><p><img alt="Platforms" loading="lazy" decoding="async" data-nimg="fill" sizes="100vw" srcset="https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=640&amp;q=75 640w, https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=750&amp;q=75 750w, https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=828&amp;q=75 828w, https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=1080&amp;q=75 1080w, https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=1200&amp;q=75 1200w, https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=1920&amp;q=75 1920w, https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=2048&amp;q=75 2048w, https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=3840&amp;q=75 3840w" src="https://amber-lang.com/_next/image?url=%2Fcomputers.png&amp;w=3840&amp;q=75"></p><p><h2>macOS &nbsp; &amp; &nbsp; Linux</h2></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft Phi-3 Cookbook (134 pts)]]></title>
            <link>https://github.com/microsoft/Phi-3CookBook</link>
            <guid>40431680</guid>
            <pubDate>Tue, 21 May 2024 18:02:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/microsoft/Phi-3CookBook">https://github.com/microsoft/Phi-3CookBook</a>, See on <a href="https://news.ycombinator.com/item?id=40431680">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Welcome to Microsoft Phi-3 Cookbook</h2><a id="user-content-welcome-to-microsoft-phi-3-cookbook" aria-label="Permalink: Welcome to Microsoft Phi-3 Cookbook" href="#welcome-to-microsoft-phi-3-cookbook"></a></p>
<p dir="auto">This is a manual on how to use the Microsoft Phi-3 family.</p>
<p dir="auto">Phi-3, a family of open AI models developed by Microsoft. Phi-3 models are the most capable and cost-effective small language models (SLMs) available, outperforming models of the same size and next size up across a variety of language, reasoning, coding, and math benchmarks.</p>
<p dir="auto">Phi-3-mini, a 3.8B language model is available on <a href="https://aka.ms/phi3-azure-ai" rel="nofollow">Microsoft Azure AI Studio</a>, <a href="https://huggingface.co/collections/microsoft/phi-3-6626e15e9585a200d2d761e3" rel="nofollow">Hugging Face</a>, and <a href="https://ollama.com/library/phi3" rel="nofollow">Ollama</a>. Phi-3 models significantly outperform language models of the same and larger sizes on key benchmarks (see benchmark numbers below, higher is better). Phi-3-mini does better than models twice its size, and Phi-3-small and Phi-3-medium outperform much larger models, including GPT-3.5T.</p>
<p dir="auto">All reported numbers are produced with the same pipeline to ensure that the numbers are comparable. As a result, these numbers may differ from other published numbers due to slight differences in the evaluation methodology. More details on benchmarks are provided in our technical paper.</p>
<p dir="auto">Phi-3-small with only 7B parameters beats GPT-3.5T across a variety of language, reasoning, coding and math benchmarks.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/microsoft/Phi-3CookBook/blob/main/imgs/00/phi3small.png"><img src="https://github.com/microsoft/Phi-3CookBook/raw/main/imgs/00/phi3small.png" alt="phimodelsmall"></a></p>
<p dir="auto">Phi-3-medium with 14B parameters continues the trend and outperforms Gemini 1.0 Pro.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/microsoft/Phi-3CookBook/blob/main/imgs/00/phi3medium.png"><img src="https://github.com/microsoft/Phi-3CookBook/raw/main/imgs/00/phi3medium.png" alt="phimodelmedium"></a></p>
<p dir="auto">Phi-3-vision with just 4.2B parameters continues that trend and outperforms larger models such as Claude-3 Haiku and Gemini 1.0 Pro V across general visual reasoning tasks, OCR, table and chart understanding tasks.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/microsoft/Phi-3CookBook/blob/main/imgs/00/phi3vision.png"><img src="https://github.com/microsoft/Phi-3CookBook/raw/main/imgs/00/phi3vision.png" alt="phimodelvision"></a></p>
<p dir="auto">Note: Phi-3 models do not perform as well on factual knowledge benchmarks (such as TriviaQA) as the smaller model size results in less capacity to retain facts.</p>
<p dir="auto">We are introducing Phi Silica which is built from the Phi series of models and is designed specifically for the NPUs in Copilot+ PCs. Windows is the first platform to have a state-of-the-art small language model (SLM) custom built for the NPU and shipping inbox. Phi Silica API along with OCR, Studio Effects, Live Captions, Recall User Activity APIs will be available in Windows Copilot Library in June. More APIs like Vector Embedding, RAG API, Text Summarization will be coming later.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Azure AI Studio</h2><a id="user-content-azure-ai-studio" aria-label="Permalink: Azure AI Studio" href="#azure-ai-studio"></a></p>
<p dir="auto">You can learn how to use Microsoft Phi-3 and how to build E2E solutions in your different hardware devices. To experience Phi-3 for yourself, start with playing with the model and customizing Phi-3 for your scenarios using the <a href="https://aka.ms/phi3-azure-ai" rel="nofollow">Azure AI Studio, Azure AI Model Catalog</a></p>
<p dir="auto"><strong>Playground</strong>
Each model has a dedicated playground to test the model <a href="https://aka.ms/try-phi3" rel="nofollow">Azure AI Playground</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Hugging Face</h2><a id="user-content-hugging-face" aria-label="Permalink: Hugging Face" href="#hugging-face"></a></p>
<p dir="auto">You can also find the model on the <a href="https://huggingface.co/microsoft" rel="nofollow">Hugging Face</a></p>
<p dir="auto"><strong>Playground</strong>
<a href="https://huggingface.co/chat/models/microsoft/Phi-3-mini-4k-instruct" rel="nofollow">Hugging Chat playground</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contents</h2><a id="user-content-contents" aria-label="Permalink: Contents" href="#contents"></a></p>
<p dir="auto">This cookbook includes:</p>
<p dir="auto"><h2 tabindex="-1" dir="auto"><strong>Microsoft Phi-3 Cookbook</strong></h2><a id="user-content-microsoft-phi-3-cookbook" aria-label="Permalink: Microsoft Phi-3 Cookbook" href="#microsoft-phi-3-cookbook"></a></p>
<ul dir="auto">
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main">Introduction</a>
<ul dir="auto">
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/01.Introduce/Phi3Family.md">Welcome to the Phi-3 Family</a>(✅)</li>
</ul>
</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main">Quick Start</a>
<ul dir="auto">
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/02.QuickStart/Huggingface_QuickStart.md">Using Phi-3 in Hugging face</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/02.QuickStart/AzureAIStudio_QuickStart.md">Using Phi-3 in Azure AI Studio</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/02.QuickStart/Ollama_QuickStart.md">Using Phi-3 in Ollama</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/02.QuickStart/LMStudio_QuickStart.md">Using Phi-3 in LM Studio</a>(✅)</li>
</ul>
</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/03.Inference/overview.md">Inference Phi-3</a>
<ul dir="auto">
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/03.Inference/iOS_Inference.md">Inference Phi-3 in iOS</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/03.Inference/Jetson_Inference.md">Inference Phi-3 in Jetson</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/03.Inference/AIPC_Inference.md">Inference Phi-3 in AIPC</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/03.Inference/Local_Server_Inference.md">Inference Phi-3 in Local Server</a>(✅)</li>
</ul>
</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main">Fine-tuning Phi-3</a>
<ul dir="auto">
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/04.Fine-tuning/LetPhi3gotoIndustriy.md">Let Phi-3 become an industry expert</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/04.Fine-tuning/Introduce_AzureML.md">Introduce Azure Machine Learning Service</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/04.Fine-tuning/FineTuning_Lora.md">Fine-tuning Phi-3 with Lora</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/04.Fine-tuning/FineTuning_MicrosotOlive.md">Fine-tuning Phi-3 with Azure AI Studio</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/04.Fine-tuning/FineTuning_Lora.md">Fine-tuning with Microsoft Olive</a>(✅)</li>
</ul>
</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main">Evaluation Phi-3</a>
<ul dir="auto">
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/05.Evaluation/ResponsibleAI.md">Introduce Responsible AI</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/05.Evaluation/Promptflow.md">Introduce Promptflow</a>(✅)</li>
<li><a href="https://github.com/microsoft/Phi-3CookBook/blob/main/md/05.Evaluation/AzureAIStudio.md">Using Azure AI Studio to evaluation</a>(✅)</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">This project welcomes contributions and suggestions.  Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit <a href="https://cla.opensource.microsoft.com/" rel="nofollow">https://cla.opensource.microsoft.com</a>.</p>
<p dir="auto">When you submit a pull request, a CLA bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.</p>
<p dir="auto">This project has adopted the <a href="https://opensource.microsoft.com/codeofconduct/" rel="nofollow">Microsoft Open Source Code of Conduct</a>.
For more information see the <a href="https://opensource.microsoft.com/codeofconduct/faq/" rel="nofollow">Code of Conduct FAQ</a> or
contact <a href="mailto:opencode@microsoft.com">opencode@microsoft.com</a> with any additional questions or comments.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Trademarks</h2><a id="user-content-trademarks" aria-label="Permalink: Trademarks" href="#trademarks"></a></p>
<p dir="auto">This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft
trademarks or logos is subject to and must follow
<a href="https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general" rel="nofollow">Microsoft's Trademark &amp; Brand Guidelines</a>.
Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
Any use of third-party trademarks or logos are subject to those third-party's policies.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Firefox bug gets fixed after 25 years (307 pts)]]></title>
            <link>https://bugzilla.mozilla.org/show_bug.cgi?id=33654</link>
            <guid>40431444</guid>
            <pubDate>Tue, 21 May 2024 17:41:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=33654">https://bugzilla.mozilla.org/show_bug.cgi?id=33654</a>, See on <a href="https://news.ycombinator.com/item?id=40431444">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="wrapper">

 


<main id="bugzilla-body" tabindex="-1">



<div id="main-inner">










<div id="summary-container">



  
    <p><span id="field-value-status_summary">
      <span data-status="closed">Closed</span>
      <span id="field-value-bug_id">
        <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=33654">Bug 33654</a>
      </span>
      <span>
        <span>Opened <span title="2000-03-28 16:33 PST" data-time="954290026">25 years ago</span></span>
          <span>Closed <span title="2024-05-21 05:56 PDT" data-time="1716296177">7 hours ago</span></span>
      </span>
        </span>
    </p>

  
</div>
































<div id="module-attachments"><table role="table" id="attachments">
    <tbody><tr data-attachment-id="13337">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=13337"> example of using arial font
            </a>
        </p></div>
        <div>
            <p><a href="#c13"><span title="2000-08-23 03:15 PDT" data-time="967025732">24 years ago</span></a>
          
        </p></div>
        <p>468 bytes,
          text/html        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=13337&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="15144">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=15144"> Patch to use the correct font.
            </a>
        </p></div>
        <div>
            <p><a href="#c19"><span title="2000-09-20 15:22 PDT" data-time="969488571">24 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=4446"> <span>kinmoz</span></a>
</p></div></span>
        </p></div>
        <p>3.85 KB,
          patch        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=15144&amp;action=edit">Details</a>
          | <a href="https://bugzilla.mozilla.org/attachment.cgi?id=15144&amp;action=diff">Diff</a>  |
  <a href="https://bugzilla.mozilla.org/page.cgi?id=splinter.html&amp;ignore=&amp;bug=33654&amp;attachment=15144">Splinter Review</a>
    </td></tr>
    <tr data-attachment-id="15156">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=15156"> Updated version of patch. r=sfraser@netscape.com
            </a>
        </p></div>
        <div>
            <p><a href="#c21"><span title="2000-09-20 16:46 PDT" data-time="969493565">24 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=4446"> <span>kinmoz</span></a>
</p></div></span>
        </p></div>
        <p>3.90 KB,
          patch        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=15156&amp;action=edit">Details</a>
          | <a href="https://bugzilla.mozilla.org/attachment.cgi?id=15156&amp;action=diff">Diff</a>  |
  <a href="https://bugzilla.mozilla.org/page.cgi?id=splinter.html&amp;ignore=&amp;bug=33654&amp;attachment=15156">Splinter Review</a>
    </td></tr>
    <tr data-attachment-id="15816">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=15816"> Another testcase which doesn't specify font
            </a>
        </p></div>
        <div>
            <p><a href="#c31"><span title="2000-09-29 04:16 PDT" data-time="970226162">24 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=17519"> <span>Koike Kazuhiko</span></a>
</p></div></span>
        </p></div>
        <p>897 bytes,
          text/html        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=15816&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="82028">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=82028"> Interactive testcase
            </a>
        </p></div>
        <div>
            <p><a href="#c63"><span title="2002-05-02 08:03 PDT" data-time="1020351791">22 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46087"> <span>Pedro Lopes</span></a>
</p></div></span>
        </p></div>
        <p>704 bytes,
          text/html        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=82028&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="99581">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=99581"> http://www.cs.utah.edu/~newbold/mozilla.html
            </a>
        </p></div>
        <div>
            <p><a href="#c68"><span title="2002-09-17 15:55 PDT" data-time="1032303305">22 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=67515"> <span>Mac</span></a>
</p></div></span>
        </p></div>
        <p>634 bytes,
          text/html        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=99581&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="143957">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=143957" data-overlay="lightbox">
              <img src="https://bugzilla.mozilla.org/extensions/BugModal/web/image.png" width="16" height="16"> Rendering of &lt;textarea rows=1&gt; vs &lt;input type=text &gt; (ie vs moz)
            </a>
        </p></div>
        <div>
            <p><a href="#c85"><span title="2004-03-15 06:11 PST" data-time="1079359903">21 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=13028"> <span>Janick Bernet</span></a>
</p></div></span>
        </p></div>
        <p>1.93 KB,
          image/png        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=143957&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="145480">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=145480" data-overlay="lightbox">
              <img src="https://bugzilla.mozilla.org/extensions/BugModal/web/image.png" width="16" height="16"> Behaiuor in IE with cols=80 and 80 1s. The 1s go right up to the edge.
            </a>
        </p></div>
        <div>
            <p><a href="#c95"><span title="2004-04-05 08:19 PDT" data-time="1081178347">20 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=113540"> <span>rmjb</span></a>
</p></div></span>
        </p></div>
        <p>9.76 KB,
          image/png        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=145480&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="145481">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=145481" data-overlay="lightbox">
              <img src="https://bugzilla.mozilla.org/extensions/BugModal/web/image.png" width="16" height="16"> Behaviuor in Fx with cols=80 and 80 1s. There's space for 2 more 1s and the scroll bar only takes up 1 char.
            </a>
        </p></div>
        <div>
            <p><a href="#c96"><span title="2004-04-05 08:21 PDT" data-time="1081178460">20 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=113540"> <span>rmjb</span></a>
</p></div></span>
        </p></div>
        <p>10.17 KB,
          image/png        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=145481&amp;action=edit">Details</a>
    </td></tr>
    
    
    
    
    
    
    <tr data-attachment-id="176470">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=176470" data-overlay="lightbox">
              <img src="https://bugzilla.mozilla.org/extensions/BugModal/web/image.png" width="16" height="16"> screen shot for patch
            </a>
        </p></div>
        <div>
            <p><a href="#c110"><span title="2005-03-06 08:10 PST" data-time="1110125414">20 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46342"> <span>Hideo Saito</span></a>
</p></div></span>
        </p></div>
        <p>61.24 KB,
          image/jpeg        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=176470&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="177495">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=177495" data-overlay="lightbox">
              <img src="https://bugzilla.mozilla.org/extensions/BugModal/web/image.png" width="16" height="16"> screen shot of appearance and disappearance of the scrollbars
            </a>
        </p></div>
        <div>
            <p><a href="#c116"><span title="2005-03-15 08:26 PST" data-time="1110903990">20 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46342"> <span>Hideo Saito</span></a>
</p></div></span>
        </p></div>
        <p>55.40 KB,
          image/jpeg        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=177495&amp;action=edit">Details</a>
    </td></tr>
    
    <tr data-attachment-id="178045">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=178045"> testcase for overflow property
            </a>
        </p></div>
        <div>
            <p><a href="#c121"><span title="2005-03-20 09:00 PST" data-time="1111338014">19 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46342"> <span>Hideo Saito</span></a>
</p></div></span>
        </p></div>
        <p>2.14 KB,
          text/html        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=178045&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="178047">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=178047" data-overlay="lightbox">
              <img src="https://bugzilla.mozilla.org/extensions/BugModal/web/image.png" width="16" height="16"> screen shot of the result applied the patch
            </a>
        </p></div>
        <div>
            <p><a href="#c122"><span title="2005-03-20 09:07 PST" data-time="1111338458">19 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46342"> <span>Hideo Saito</span></a>
</p></div></span>
        </p></div>
        <p>52.34 KB,
          image/jpeg        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=178047&amp;action=edit">Details</a>
    </td></tr>
    <tr data-attachment-id="206150">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=206150"> testcase for patch
            </a>
        </p></div>
        <div>
            <p><a href="#c133"><span title="2005-12-16 17:17 PST" data-time="1134782253">19 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46342"> <span>Hideo Saito</span></a>
</p></div></span>
        </p></div>
        <p>843 bytes,
          text/html        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=206150&amp;action=edit">Details</a>
    </td></tr>
    
    
    
    
    
    <tr data-attachment-id="439497">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=439497"> testcase for patch on wrap="off"
            </a>
        </p></div>
        <div>
            <p><a href="#c162"><span title="2010-04-16 03:24 PDT" data-time="1271413441">14 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46342"> <span>Hideo Saito</span></a>
</p></div></span>
        </p></div>
        <p>941 bytes,
          text/html        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=439497&amp;action=edit">Details</a>
    </td></tr>
    
    
    
    
    <tr data-attachment-id="442925">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=442925"> patch
            </a>
        </p></div>
        <div>
            <p><a href="#c170"><span title="2010-05-01 09:15 PDT" data-time="1272730502">14 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46342"> <span>Hideo Saito</span></a>
</p></div></span>
        </p></div>
        <p>20.16 KB,
          patch        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=442925&amp;action=edit">Details</a>
          | <a href="https://bugzilla.mozilla.org/attachment.cgi?id=442925&amp;action=diff">Diff</a>  |
  <a href="https://bugzilla.mozilla.org/page.cgi?id=splinter.html&amp;ignore=&amp;bug=33654&amp;attachment=442925">Splinter Review</a>
    </td></tr>
    
    <tr data-attachment-id="445636">
      <td>
        <div>
          <p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=445636"> patch which does not remove space
            </a>
        </p></div>
        <div>
            <p><a href="#c174"><span title="2010-05-16 18:28 PDT" data-time="1274059709">14 years ago</span></a>
          <span><div><p><a href="https://bugzilla.mozilla.org/user_profile?user_id=46342"> <span>Hideo Saito</span></a>
</p></div></span>
        </p></div>
        <p>25.64 KB,
          patch        </p>
      </td>
      <td></td>
      <td>
        <a href="https://bugzilla.mozilla.org/attachment.cgi?id=445636&amp;action=edit">Details</a>
          | <a href="https://bugzilla.mozilla.org/attachment.cgi?id=445636&amp;action=diff">Diff</a>  |
  <a href="https://bugzilla.mozilla.org/page.cgi?id=splinter.html&amp;ignore=&amp;bug=33654&amp;attachment=445636">Splinter Review</a>
    </td></tr>
</tbody></table>


  </div>







<meta name="firefox-versions" content="{&quot;FIREFOX_AURORA&quot;:&quot;&quot;,&quot;FIREFOX_DEVEDITION&quot;:&quot;127.0b4&quot;,&quot;FIREFOX_ESR&quot;:&quot;115.11.0esr&quot;,&quot;FIREFOX_ESR_NEXT&quot;:&quot;&quot;,&quot;FIREFOX_NIGHTLY&quot;:&quot;128.0a1&quot;,&quot;LAST_MERGE_DATE&quot;:&quot;2024-05-13&quot;,&quot;LAST_RELEASE_DATE&quot;:&quot;2024-05-14&quot;,&quot;LAST_SOFTFREEZE_DATE&quot;:&quot;2024-05-09&quot;,&quot;LAST_STRINGFREEZE_DATE&quot;:&quot;2024-05-10&quot;,&quot;LATEST_FIREFOX_DEVEL_VERSION&quot;:&quot;127.0b4&quot;,&quot;LATEST_FIREFOX_OLDER_VERSION&quot;:&quot;3.6.28&quot;,&quot;LATEST_FIREFOX_RELEASED_DEVEL_VERSION&quot;:&quot;127.0b4&quot;,&quot;LATEST_FIREFOX_VERSION&quot;:&quot;126.0&quot;,&quot;NEXT_MERGE_DATE&quot;:&quot;2024-06-10&quot;,&quot;NEXT_RELEASE_DATE&quot;:&quot;2024-06-11&quot;,&quot;NEXT_SOFTFREEZE_DATE&quot;:&quot;2024-06-06&quot;,&quot;NEXT_STRINGFREEZE_DATE&quot;:&quot;2024-06-07&quot;}">



<div id="c3"><p>Assignee: beppe → kin</p><p>Target Milestone: --- → M16</p></div><div id="a504340_3849"><p>Status: UNCONFIRMED → NEW</p><p>Ever confirmed: true</p></div><div id="c5"><p>Target Milestone: M16 → M17</p></div><div id="c6"><p>Target Milestone: M17 → M18</p></div><div id="c9"><p>Whiteboard: nsbeta3+ → [nsbeta3+]</p></div><div id="c10"><p>Priority: P3 → P4</p><p>Whiteboard: [nsbeta3+] → [nsbeta3+][p:4]</p></div><div id="c12"><p>Assignee: kin → rods</p><p>Status: ASSIGNED → NEW</p><p>Priority: P4 → P3</p><p>Whiteboard: <span>[nsbeta3+][p:4]</span></p><p>Target Milestone: M18 → ---</p></div><div id="c15"><p>Status: NEW → ASSIGNED</p><p>Target Milestone: --- → M18</p></div><div id="c18"><p>Whiteboard: [nsbeta3+] → [nsbeta3+][p:3]</p></div><div id="c20"><p>Whiteboard: [nsbeta3+][p:3] → [nsbeta3+][p:3][Fix in hand]</p></div><div id="c22"><p>Assignee: kin → mjudge</p><p>Status: ASSIGNED → NEW</p></div><div id="c24"><p>Status: ASSIGNED → RESOLVED</p><p>Closed: <span title="2000-09-25 12:02 PDT" data-time="969908550">24 years ago</span></p><p>Resolution: --- → FIXED</p></div><div id="c25"><p>QA Contact: ckritzer → bsharma</p></div><div id="c26"><p>Status: RESOLVED → REOPENED</p><p>Resolution: FIXED → ---</p></div><div id="c27"><p>Assignee: mjudge → kin</p><p>Status: REOPENED → NEW</p></div><div id="c28"><p>Keywords: <a href="https://bugzilla.mozilla.org/buglist.cgi?keywords=rtm&amp;resolution=---">rtm</a></p><p>Whiteboard: [nsbeta3+][p:3][Fix in hand] → [nsbeta3-][p:3][Fix in hand]</p></div><div id="c32"><p>Whiteboard: [nsbeta3-][p:3][Fix in hand] → [nsbeta3-][p:3]</p></div><div id="c33"><p>Whiteboard: [nsbeta3-][p:3] → [nsbeta3-][p:3][rtm+ NEED INFO]</p></div><div id="a16154217_3849"><p>Target Milestone: M18 → M19</p></div><div id="c35"><p>Whiteboard: [nsbeta3-][p:3][rtm+ NEED INFO] → [nsbeta3-][p:3][rtm NEED INFO]</p></div><div id="c36"><p>Target Milestone: M19 → Future</p></div><div id="c37"><p>Whiteboard: [nsbeta3-][p:3][rtm NEED INFO] → [nsbeta3-][p:3][rtm-]</p></div><div id="c38"><p>Target Milestone: Future → mozilla0.9</p></div><div id="c39"><p>Whiteboard: [nsbeta3-][p:3][rtm-] → [nsbeta3-][p:3][rtm-] relnote-devel</p></div><div id="c42"><p>QA Contact: bsharma → vladimire</p></div><div id="c43"><p>Status: ASSIGNED → RESOLVED</p><p>Closed: <span title="2000-09-25 12:02 PDT" data-time="969908550">24 years ago</span> → <span title="2001-03-26 14:59 PST" data-time="985647565">24 years ago</span></p><p>Resolution: --- → FIXED</p></div><div id="c44"><p>Status: RESOLVED → REOPENED</p><p>Resolution: FIXED → ---</p></div><div id="c45"><p>Target Milestone: mozilla0.9 → mozilla0.9.1</p></div><div id="a34372915_4446"><p>Target Milestone: mozilla0.9.1 → mozilla0.9.2</p></div><div id="c46"><p>Whiteboard: [nsbeta3-][p:3][rtm-] relnote-devel → [html][behavior]relnote-devel</p></div><div id="a37146444_3849"><p>Target Milestone: mozilla0.9.2 → mozilla0.9.3</p></div><div id="a39332849_4446"><p>Status: REOPENED → ASSIGNED</p></div><div id="c49"><p>Target Milestone: mozilla0.9.3 → mozilla1.0</p></div><div id="c55"><p>Target Milestone: mozilla1.0 → mozilla1.0.1</p></div><div id="a57946671_4446"><p>Target Milestone: mozilla1.0.1 → mozilla1.0</p></div><div id="c58"><p>Target Milestone: mozilla1.0 → mozilla1.1</p></div><div id="a70144007_4446"><p>Target Milestone: mozilla1.1alpha → Future</p></div><div id="c76"><p>QA Contact: vladimire → dsirnapalli</p></div><div id="c81"><p>Assignee: kinmoz → form</p><p>Status: ASSIGNED → NEW</p></div><div id="a170182454_13028"><p><a href="https://bugzilla.mozilla.org/attachment.cgi?id=143957&amp;action=edit" title="Rendering of <textarea rows=1> vs <input type=text > (ie vs moz)">Attachment #143957</a> -
        Attachment description: Rendering of textarea rows=1 → Rendering of &lt;textarea rows=1&gt; vs &lt;input type=text &gt; (ie vs moz)</p></div><div id="a265389017_34283"><p>Assignee: layout.form-controls → nobody</p><p>Status: ASSIGNED → NEW</p><p>QA Contact: dsirnapalli → layout.form-controls</p></div><div id="a265389044_34283"><p>Assignee: nobody → hsaito54</p></div><div id="a294723389_5038"><p>Flags: <span>wanted1.9.2?</span></p><p>Flags: wanted1.9.2-</p><p>Flags: blocking1.9.2-</p></div><div id="c185"><p>oh boy ,,,..it exists in 2019 as well</p></div><div id="c187" data-comment-id="14475970" data-ismarkdown="true"><p>Hmm, so this seems to be due to the scrollbar size? So <code>scrollbar-width: none</code>, on the <code>&lt;textarea&gt;</code> seems to fix this, fwiw.</p>
<p>This should still be fixed of course.</p>
</div><div id="c188"><p>Yes, and <code>overflow-x: hidden</code> also removes the "phantom scrollbar". It's just a case of the 2-year-old P3 bug vs the 20-year-old P3 bug.</p></div><div id="c189"><p>This bug reminds me of 1999. Good times</p></div><div id="a689084534_495955"><p>Assignee: hsaito54 → nobody</p></div><div id="c190" data-comment-id="16115187" data-ismarkdown="true"><p>The severity field for this bug is relatively low, S3. However, the bug has 27 duplicates, 103 votes and 91 CCs.<br>
:emilio, could you consider increasing the bug severity?</p>
<p>For more information, please visit <a href="https://wiki.mozilla.org/Release_Management/autonag#severity_underestimated.py" rel="nofollow">auto_nag documentation</a>.</p>
</div><div id="a711722237_546716"><p>Flags: <span>needinfo?(emilio)</span></p><p>Summary: TEXTAREA incorrectly applying ROWS= and COLS= → TEXTAREA incorrectly applying ROWS= and COLS= (horizontal / vertical scrollbar extra space, with overlay scrollbars disabled)</p></div><div id="c193"><p>I concur. Thanks for fixing it Luke!</p><div><p>Status: NEW → RESOLVED</p><p>Closed: <span title="2001-03-26 14:59 PST" data-time="985647565">24 years ago</span> → <span title="2024-05-21 05:56 PDT" data-time="1716296177">7 hours ago</span></p><p>Flags: <span>needinfo?(dholbert)</span></p><p>Resolution: --- → DUPLICATE</p></div></div>







<dialog id="att-overlay" aria-labelledby="att-overlay-title" data-attachment-count="34">
  
</dialog>

</div> 
</main> 
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Linux 6.10 Honors One Last ReiserFS Request Made by Hans Reiser (101 pts)]]></title>
            <link>https://www.phoronix.com/news/ReiserFS-README-Linux-6.10</link>
            <guid>40431412</guid>
            <pubDate>Tue, 21 May 2024 17:38:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.phoronix.com/news/ReiserFS-README-Linux-6.10">https://www.phoronix.com/news/ReiserFS-README-Linux-6.10</a>, See on <a href="https://news.ycombinator.com/item?id=40431412">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img alt="LINUX STORAGE" src="https://www.phoronix.com/assets/categories/linuxstorage.webp" width="100" height="100"></p><p>
While <a href="https://www.phoronix.com/news/ReiserFS-Obsolete">ReiserFS is obsolete</a> and will <a href="https://www.phoronix.com/news/ReiserFS-Drop-From-Defconfigs">eventually be dropped from the upstream Linux kernel</a> in Linux 6.10 is one last ReiserFS change that was requested by former lead developer Hans Reiser.
</p><p>
ReiserFS lead developer and convicted murderer Hans Reiser a few months back wrote letters to be made public <a href="https://www.phoronix.com/news/Hans-Reiser-2024">apologizing for his social mistakes and other commentary</a>. In his written communications he also made a last request for ReiserFS in the Linux kernel:
</p><blockquote>"Assuming that the decision is to remove [ReiserFS] V3 from the kernel, I have just one request: that for one last release the README be edited to add Mikhail Gilula, Konstantin Shvachko, and Anatoly Pinchuk to the credits, and to delete anything in there I might have said about why they were not credited. It is time to let go."</blockquote>
<p>Hans credits his improved social and communication skills learned in prison among other details shared in the public letters.
</p><p><img src="https://www.phoronix.net/image.php?id=2024&amp;image=reiserfs_last_request" alt="ReiserFS README patch"></p>
<p>Per the indirect request by Hans Reiser, SUSE's Jan Kara has now altered the ReiserFS README file with the changes going in today to the Linux 6.10 kernel. The negative language was removed and instead acknowledging their contributions.
</p><p><img src="https://www.phoronix.net/image.php?id=2024&amp;image=reiserfs_readme" alt="ReiserFS README patch"></p>
<p>The change landed today as part of the <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=bb6b206216f599cd5d4362394c6704a36e14f1ff">linux-fs merge</a> to Linux 6.10.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I want flexible queries, not RAG (187 pts)]]></title>
            <link>https://win-vector.com/2024/05/21/i-want-flexible-queries-not-rag/</link>
            <guid>40431210</guid>
            <pubDate>Tue, 21 May 2024 17:19:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://win-vector.com/2024/05/21/i-want-flexible-queries-not-rag/">https://win-vector.com/2024/05/21/i-want-flexible-queries-not-rag/</a>, See on <a href="https://news.ycombinator.com/item?id=40431210">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-15480">
	
		<p>
By  on <a href="https://win-vector.com/2024/05/21/i-want-flexible-queries-not-rag/" title="10:16 am" rel="bookmark"><time datetime="2024-05-21T10:16:51-07:00">May 21, 2024</time></a>	• 
	</p>
	<section>
<p>There is a lot of excitement around retrieval augmented generation or “RAG.” Roughly the idea is: some of the deficiencies in current generative AI or large language models (LLMs) can be papered over by augmenting their hallucinations with links, references, and extracts from definitive source documents. I.e.: knocking the LLM back into the lane.</p>

<p>LLMs <strong>do</strong> have a lot of value. However, in my opinion, much of it is in the flexible natural language query interface and <strong>not</strong> in the celebrated generative stage. I’ve come to the feeling that I want the non-brittle flexible natural language query interface, but do not want the spammy LLM output.</p>
<p>Here is an example.</p>
<p>My mother remembers growing up with a Sicilian dish that was primarily rice baked in an egg mixture. Roughly a “rice frittata.” With ChatGPT (purely generative, not RAG- thanks for the correction!) I get the following specious answer.</p>
<p><img fetchpriority="high" decoding="async" src="https://i0.wp.com/win-vector.com/wp-content/uploads/2024/05/Screenshot-2024-05-21-at-9.36.31%E2%80%AFAM-1-1.png?resize=656%2C329&amp;ssl=1" alt="Screenshot 2024 05 21 at 9 36 31 AM 1" title="Screenshot-2024-05-21-at-9.36.31 AM-1.png" width="656" height="329" data-recalc-dims="1"></p>
<p>Yes, Sicily is “not a million miles away” from Naples.</p>
<p>My wife spent some time with search engines looking for the recipe. Most of her time was dealing with the brittleness of the query interface (depending on word matching and source popularity), spam, and locked down sources. However, in the end she delivered the following great result.</p>
<p>She found this.</p>
<p><img decoding="async" src="https://i0.wp.com/win-vector.com/wp-content/uploads/2024/05/IMG_1529.jpeg?resize=480%2C640&amp;ssl=1" alt="IMG 1529" title="IMG_1529.jpeg" width="480" height="640" data-recalc-dims="1"></p>
<p>The following bookmarks are the recipes she found personally interesting (not all matching the search).</p>
<p><img decoding="async" src="https://i0.wp.com/win-vector.com/wp-content/uploads/2024/05/IMG_1530.jpeg?resize=640%2C480&amp;ssl=1" alt="IMG 1530" title="IMG_1530.jpeg" width="640" height="480" data-recalc-dims="1"></p>
<p>And here are the two candidate recipes (one matching the search, one she just wanted):</p>
<p><img loading="lazy" decoding="async" src="https://i0.wp.com/win-vector.com/wp-content/uploads/2024/05/IMG_1531.jpeg?resize=480%2C640&amp;ssl=1" alt="IMG 1531" title="IMG_1531.jpeg" width="480" height="640" data-recalc-dims="1"></p>
<p>I then prepared one of the recipes for my mother, and she said it matched her memory! I fail to see how an LLM summarizing the material would be an improvement. I wanted the retrieval of a good recipe, not an amalgam of “things that plausibly look like recipes.”</p>
<p>To me, LLM query management and retrieval is <em>much</em> more valuable than response generation. It reminds me of the aphorism (from an early low point in combinatorial chemistry): “you don’t find the needle in the haystack by harvesting more hay.”</p>
		<p>Categories: <a href="https://win-vector.com/category/opinion/" rel="category tag">Opinion</a>		</p>
<p>Tagged as: <a href="https://win-vector.com/tag/man-yells-at-cloud/" rel="tag">"man yells at cloud"</a> <a href="https://win-vector.com/tag/generative-ai/" rel="tag">generative AI</a></p>	<div>
		<p><img alt="" src="https://secure.gravatar.com/avatar/a4b2fbd7b2c8df820b3ee6832ce2152b?s=100&amp;d=identicon&amp;r=g" srcset="https://secure.gravatar.com/avatar/a4b2fbd7b2c8df820b3ee6832ce2152b?s=200&amp;d=identicon&amp;r=g 2x" height="100" width="100" loading="lazy" decoding="async"></p><h3>John Mount</h3>
			</div>
	</section>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to Turn Off AI Overview in Google and Set "Web" as Default (166 pts)]]></title>
            <link>https://tenbluelinks.org/</link>
            <guid>40431145</guid>
            <pubDate>Tue, 21 May 2024 17:13:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tenbluelinks.org/">https://tenbluelinks.org/</a>, See on <a href="https://news.ycombinator.com/item?id=40431145">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      <p>On May 15th Google released a new "Web" filter that removes "AI Overview" and other clutter, leaving only traditional web results. Here is how you can set "Google Web" as your default search engine.</p>

      <p>Choose your browser:</p>
      <ul>
        <li><a href="#chrome-android">Chrome Android</a></li>
        <li><a href="#chrome-ios">Chrome iOS</a></li>
        <li><a href="#chrome-windows">Chrome Windows/MacOS</a></li>
        <li><a href="#firefox-windows">Firefox&nbsp;Windows/MacOS</a></li>
      </ul>

      <h2 id="chrome-android">Chrome on Android</h2>
      <ol>
        <li>Visit <a href="https://tenbluelinks.org/">TenBlueLinks.org</a> (this page).</li>
        <li>Open a new tab and search for anything in Google. Don't skip this step.</li>
        <li>Tap on three dots menu in the top right corner.</li>
        <li>Choose "Settings", then "Search engine".</li>
        <li>Select "Google Web" in the "Recently visited" section.</li>
        <li>Done!</li>
      </ol>
      <p>Chrome will show "tenbluelinks.org" as the source where it got the instructions, but all your search queries will be sent directly to Google, not my website. The source code is open, technical details are available <a href="#how-it-works">below</a>.</p>

      <h2 id="chrome-ios">Chrome on iOS</h2>
      <ol>
        <li>Visit <a href="https://tenbluelinks.org/">TenBlueLinks.org</a> (this page).</li>
        <li>Open a new tab and search for anything in Google. Don't skip this step.</li>
        <li>Tap on three dots menu in the bottom right corner.</li>
        <li>Choose "Settings", then "Search engine".</li>
        <li>Select "Google Web" in the "Recently visited" section.</li>
        <li>Done!</li>
      </ol>
      <p>Chrome will show "tenbluelinks.org" as the source where it got the instructions, but all your search queries will be sent directly to Google, not my website. The source code is open, technical details are available <a href="#how-it-works">below</a>.</p>

      

      <h2 id="chrome-windows">Chrome on Windows/MacOS</h2>
      <ol>
        <li>Open "Settings -&gt; Search engine -&gt; Manage search engines" or copy-paste this in your address bar: <code>chrome://settings/searchEngines</code> </li>
        <li>Next to the "Site search" section click on "Add" button.</li>
        <li>Fill the details in the dialog window:<p>
          <b>Search engine:</b> <code>Google Web</code> <br>
          <b>Shortcut:</b> <code>@web</code> <br>
          <b>URL:</b> <code>{google:baseURL}search?q=%s&amp;udm=14</code> </p><p>
          The last line is very important.</p></li>
        <li>You will see your new search engine "Google Web" in the list. Click on the menu icon next to it and then on "Make default".</li>
        <li>Done!</li>
      </ol>

      

      <h2 id="firefox-windows">Firefox on Windows/MacOS</h2>
      <ol>
        <li>Visit <a href="https://tenbluelinks.org/">TenBlueLinks.org</a> (this page) in Firefox.</li>
        <li>Click on the three dots menu in the address bar and choose "Add a search engine".</li>
        <li>Open the hamburger menu in the top right corner, choose "Preferences -&gt; Search".</li>
        <li>In the "Default Search Engine" section choose "Google Web" from the drop-down menu.</li>
        <li>Done!</li>
      </ol>
      <p>Firefox might show "tenbluelinks.org" as the source where it got the instructions, but all your search queries will be sent directly to Google, not my website. The source code is open, technical details are available <a href="#how-it-works">below</a>.</p>


      <h2 id="how-it-works">How it works</h2>
      <p>For mobile browsers that don't allow to edit the list of custom search engines we use <a href="https://developer.mozilla.org/en-US/docs/Web/OpenSearch">OpenSearch</a>.
      It's a simple XML file that is instructing your browser to add URL parameter <code>udm=14</code> to all Google Searches. The file is referenced in the &lt;head&gt; section of this page.
      You can see the source of this page and download the <a href="https://tenbluelinks.org/opensearch.xml">OpenSearch file</a> to check for yourself.</p>
      <p>This website and it's <a href="https://x.com/ugnich">author</a> <strong>will NOT</strong> be able to see your search history or any other information you type in Google.</p>

      <p>Google is a registered trademark of Google, duh.</p>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Pls Fix – Hire big tech employees to appeal account suspensions (388 pts)]]></title>
            <link>https://plsfix.co/</link>
            <guid>40431126</guid>
            <pubDate>Tue, 21 May 2024 17:12:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://plsfix.co/">https://plsfix.co/</a>, See on <a href="https://news.ycombinator.com/item?id=40431126">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
    </channel>
</rss>