<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 25 Oct 2024 18:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Disposable vapes to be banned in England and Wales (131 pts)]]></title>
            <link>https://www.bbc.com/news/articles/cd7n3zyp114o</link>
            <guid>41946401</guid>
            <pubDate>Fri, 25 Oct 2024 15:48:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.com/news/articles/cd7n3zyp114o">https://www.bbc.com/news/articles/cd7n3zyp114o</a>, See on <a href="https://news.ycombinator.com/item?id=41946401">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/f011/live/78234a20-9212-11ef-b047-4d31578ee4d2.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/f011/live/78234a20-9212-11ef-b047-4d31578ee4d2.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/f011/live/78234a20-9212-11ef-b047-4d31578ee4d2.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/f011/live/78234a20-9212-11ef-b047-4d31578ee4d2.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/f011/live/78234a20-9212-11ef-b047-4d31578ee4d2.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/f011/live/78234a20-9212-11ef-b047-4d31578ee4d2.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/f011/live/78234a20-9212-11ef-b047-4d31578ee4d2.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/f011/live/78234a20-9212-11ef-b047-4d31578ee4d2.jpg.webp" loading="eager" alt="EPA-EFE/REX/Shutterstock A young woman wearing a tracksuit top, Prada sunglasses and Airpods uses a blue-coloured disposable vape on a London street"><span>EPA-EFE/REX/Shutterstock</span></p></div><p data-component="caption-block"><figcaption>The government plans to introduce legislation to ban the sale of disposable vapes from 1 June 2025<!-- --></figcaption></p></figure><div data-component="text-block"><p>The sale of single-use disposable vapes will be banned in England and Wales from June next year, the government has confirmed. <!-- --></p><p>Ministers in England said the move, first announced in January by the previous government but not enacted before the general election, is intended to protect children's health and prevent environmental damage.<!-- --></p><p>The government said it had worked closely with the devolved nations and they would "align coming into force dates" on bans, with Wales <!-- --><a target="_self" href="https://www.bbc.co.uk/news/articles/c7043578863o">already confirming it will follow suit<!-- --></a>.<!-- --></p><p>Vaping industry leaders have warned the move could fuel a rise in illegal sales of the products. <!-- --></p></div><div data-component="text-block"><p>Single-use vapes had been due to be banned in Scotland from April of next year - but the Scottish government has said the ban <!-- --><a target="_self" href="https://www.bbc.co.uk/news/articles/cp8x1gyg0lro">will now be delayed until 1 June<!-- --></a> to align with England and Wales.<!-- --></p><p>The Department for Environment, Food, and Rural Affairs (Defra) said vape usage in England had grown by more than 400% between 2012 and 2023, with 9% of the British public now buying and using the products.<!-- --></p><p>The number of people who vape <!-- --><a target="_self" href="https://www.bbc.co.uk/news/articles/c20jeey047xo">without ever having smoked has also increased<!-- --></a> considerably over recent years, driven mostly by young adults.<!-- --></p><p>It is illegal to sell any vape to anyone under 18, but disposable vapes - often sold in smaller, more colourful packaging than refillable ones - are a "key driver behind the alarming rise in youth vaping", the previous government said <!-- --><a target="_self" href="https://www.bbc.co.uk/news/uk-68123202">when it first set out its plan<!-- --></a>.<!-- --></p><p>Public health minister Andrew Gwynne said banning disposables would "reduce the appeal of vapes to children and keep them out of the hands of vulnerable young people".<!-- --></p><p>Vaping is substantially less harmful than smoking, but it has not been around for long enough for its long-term risks to be known, according to the NHS.<!-- --></p></div><figure><div data-component="image-block"><p><img src="https://www.bbc.com/bbcx/grey-placeholder.png"><img sizes="(min-width: 1280px) 50vw, (min-width: 1008px) 66vw, 96vw" srcset="https://ichef.bbci.co.uk/news/240/cpsprodpb/3ecb/live/b7460a60-91ba-11ef-9a7d-071f318c341c.jpg.webp 240w,https://ichef.bbci.co.uk/news/320/cpsprodpb/3ecb/live/b7460a60-91ba-11ef-9a7d-071f318c341c.jpg.webp 320w,https://ichef.bbci.co.uk/news/480/cpsprodpb/3ecb/live/b7460a60-91ba-11ef-9a7d-071f318c341c.jpg.webp 480w,https://ichef.bbci.co.uk/news/640/cpsprodpb/3ecb/live/b7460a60-91ba-11ef-9a7d-071f318c341c.jpg.webp 640w,https://ichef.bbci.co.uk/news/800/cpsprodpb/3ecb/live/b7460a60-91ba-11ef-9a7d-071f318c341c.jpg.webp 800w,https://ichef.bbci.co.uk/news/1024/cpsprodpb/3ecb/live/b7460a60-91ba-11ef-9a7d-071f318c341c.jpg.webp 1024w,https://ichef.bbci.co.uk/news/1536/cpsprodpb/3ecb/live/b7460a60-91ba-11ef-9a7d-071f318c341c.jpg.webp 1536w" src="https://ichef.bbci.co.uk/news/480/cpsprodpb/3ecb/live/b7460a60-91ba-11ef-9a7d-071f318c341c.jpg.webp" loading="lazy" alt="Getty Images A stock image shows an assortment of disposable vapes strewn on a pink surface"><span>Getty Images</span></p></div><p data-component="caption-block"><figcaption>The previous government said disposable vapes were a "key driver" behind a rise in youth vaping<!-- --></figcaption></p></figure><div data-component="text-block"><p>The ban will not apply to rechargeable or refillable devices. <!-- --></p><p>Single-use vapes are difficult to recycle and typically end up in landfill, where their batteries can leak harmful waste like battery acid, lithium, and mercury into the environment, the government said. <!-- --></p><p>Batteries thrown into household waste also cause <!-- --><a target="_self" href="https://www.bbc.co.uk/news/science-environment-63809620">hundreds of fires<!-- --></a> in bin lorries and waste-processing centres every year. <!-- --></p><p>Defra estimates almost five million single-use vapes were either littered or thrown into general waste each week last year, a nearly four-fold increase on the year before.<!-- --></p><p>In 2022, vapes were discarded containing a total of more than 40 tonnes of lithium, enough to power 5,000 electric vehicles, it said.<!-- --></p><p>Defra minister Mary Creagh, whose role focuses on reducing waste in the economy, said disposable vapes were "extremely wasteful and blight our towns and cities".<!-- --></p></div><div data-component="text-block"><p>Paediatric respiratory consultant Dr Claire Hogg told BBC Radio 5 Live that disposables had "lead to an absolute epidemic of nicotine addiction and a group of children... who are having disrupted sleep, disrupted concentration and really struggling with problems with addiction".<!-- --></p><p>She said her son had previously vaped and thought the ban was "brilliant news" as he had been "addicted to nicotine through false marketing" since he was around 14-years-old.<!-- --></p></div><div data-component="text-block"><p>Disposable vapes - often priced at about £5 - are usually cheaper upfront than many refillable vape kits - often priced at about £8-12 - and can be bought from non-specialist retailers.<!-- --></p><p>But the long-term costs associated with refillable kits are lower than for disposables.<!-- --></p><p>Ireland and Belgium have recently outlined plans to ban the products, while countries including New Zealand, Australia, South Korea, India and Brazil already have restrictions in place.<!-- --></p></div><p data-component="subheadline-block"><h2>'Black market'<!-- --></h2></p><div data-component="text-block"><p>John Dunne, director general of the UK Vaping Industry Association, told BBC Radio 4's Today programme that a ban would "fuel" illegal sales.<!-- --></p><p>"We have a black market in vaping products already that the authorities can't really keep up [with], so now this is going to be dropped right on their lap as well," he said.<!-- --></p><p>Mr Dunne said the association had called on the government to alternatively introduce a licensing scheme for retailers and distributors of the products, "which will include things like mandatory age verification processes".<!-- --></p><p>The government plans to introduce legislation to ban the sale of single-use vapes from 1 June 2025, allowing retailers time to sell their remaining stock. It will cover all single-use vapes, regardless of where they are imported from.<!-- --></p><p>Online shops and major retailing platforms will be expected to use "online takedown procedures" to stop illicit suppliers when the ban comes into force, the department for health and social care said.<!-- --></p><p>The devolved governments have previously announced an intention to bring in similar bans, and the UK government said it was working with them to align the dates on which the bans come into force. <!-- --></p><p>Welsh Deputy First Minister Huw Irranca-Davies said introducing the bans on the same date across the nations would enable "high levels of compliance and consistent approach to enforcement across the UK".<!-- --></p><p>The measure is separate from government plans to end smoking by banning the sale of cigarettes to anyone born after January 2009. <!-- --></p><p>Health Secretary Wes Streeting said on Monday a bill to enact that ban would be introduced to parliament before Christmas. <!-- --></p></div><!--$!--><!--/$--></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Smartphone buyers meh on AI, care much more about battery life (256 pts)]]></title>
            <link>https://www.cnet.com/tech/mobile/with-apple-intelligence-on-the-horizon-a-quarter-of-smartphone-owners-are-unimpressed-by-ai/</link>
            <guid>41946188</guid>
            <pubDate>Fri, 25 Oct 2024 15:26:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnet.com/tech/mobile/with-apple-intelligence-on-the-horizon-a-quarter-of-smartphone-owners-are-unimpressed-by-ai/">https://www.cnet.com/tech/mobile/with-apple-intelligence-on-the-horizon-a-quarter-of-smartphone-owners-are-unimpressed-by-ai/</a>, See on <a href="https://news.ycombinator.com/item?id=41946188">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>Key takeaways:<br></h2><ul><li>A quarter of smartphone owners (25%) don't find AI features helpful, 45% are reluctant to pay a monthly subscription fee for AI capabilities and 34% have privacy concerns.</li><li>A little over half (52%) of smartphone owners have no interest in purchasing a foldable phone.</li><li>The biggest motivation for US adult smartphone owners to upgrade their devices is longer battery life (61%), followed by more storage (46%) and better camera features (38%). Just 18% say their main motivator is AI integrations.</li></ul><p>As smartphone makers including Apple, Google and Samsung place a growing emphasis on AI features in their latest devices, a CNET survey found a quarter of smartphone owners don't find those capabilities particularly useful, and just 18% say AI integrations are their main motivator for upgrading their phone.&nbsp;</p><div><div><svg><use xlink:href="#play"></use></svg> <figure><div><picture> <img src="https://www.cnet.com/a/img/resize/8064e8a5614e1aebc4a7ea0af4180156fcdc4f36/hub/2024/09/05/153a53a9-5c5a-44fa-87ee-bd7781666d2a/240905-site-iphone-16-tears-fans-apart-1.jpg?auto=webp&amp;width=768" alt="" height="306" width="768"> </picture></div> <!----></figure></div> <p><strong>Watch this:</strong> The iPhone 16 Comes With AI Drama
      </p> <p><time><svg><use xlink:href="#play"></use></svg> <span>07:37</span></time></p></div><p>In fact, the biggest drivers for buying a new device, according to respondents, is longer battery life (61%), more storage (46%) and better camera features (38%).&nbsp;</p><p>This comes as Apple gears up for the public launch of its&nbsp;<a href="https://www.cnet.com/tech/mobile/what-is-apple-intelligence-everything-to-know-about-iphone-16-ai-features/" target="_self" rel="follow">Apple Intelligence</a> suite of AI features <a href="https://www.cnet.com/tech/services-and-software/apple-releases-final-ios-18-1-public-beta-with-apple-intelligence-how-to-download-it/" target="_self" rel="follow">next week</a>, which includes capabilities like a&nbsp;<a href="https://www.cnet.com/tech/services-and-software/wwdc-kicks-off-what-apple-calls-a-new-era-for-siri/" rel="follow" target="_self">smarter Siri</a>,&nbsp;<a href="https://www.cnet.com/tech/mobile/apple-intelligence-arrives-but-only-in-developer-beta-for-now/" rel="follow" target="_self">AI-powered writing tools</a>&nbsp;and&nbsp;<a href="https://www.cnet.com/tech/mobile/apple-intelligence-brings-ai-to-the-iphone-with-chatgpt-integration-and-more/" rel="follow" target="_self">ChatGPT integration</a>. Apple Intelligence will be available on <a href="https://www.cnet.com/tech/mobile/apple-iphone-15-pro-and-15-pro-max-review-love-at-first-zoom/" target="_self" rel="follow">iPhone 15 Pro models</a> and the <a href="https://www.cnet.com/tech/mobile/apple-iphone-16-and-16-plus-review-little-improvements-add-up/" target="_self" rel="follow">iPhone 16</a> lineup.</p><p>Google also leaned heavily into AI features when it unveiled the <a href="https://www.cnet.com/tech/mobile/google-pixel-9-review-chock-full-of-ai-but-thats-not-what-makes-it-great/" target="_self" rel="follow">Pixel 9</a> series in August, spending much of its keynote <a href="https://www.cnet.com/tech/mobile/at-googles-pixel-9-event-gemini-steals-the-spotlight/" target="_self" rel="follow">discussing new Gemini functions</a>&nbsp;like <a href="https://www.cnet.com/tech/services-and-software/at-google-io-gemini-really-wants-to-talk-with-you/" target="_self" rel="follow">Live</a>, which lets you have a natural-sounding, back-and-forth conversation with the virtual assistant. And at its July <a href="https://www.cnet.com/tech/mobile/samsungs-jam-packed-galaxy-unpacked-galaxy-ring-z-fold-6-and-all-the-new-products-announced/" target="_self" rel="follow">Unpacked</a> event, Samsung similarly touted <a href="https://www.cnet.com/tech/mobile/my-favorite-samsung-galaxy-ai-features/" target="_self" rel="follow">Galaxy AI</a>, which can simplify tasks like translating messages and editing photos.</p><p>While these new features rely on generative AI to produce text or images or to enhance digital assistants, AI itself has been embedded in smartphones for years. For instance, your phone's camera uses AI to process images and blur backgrounds in Portrait mode, and Siri and Google Assistant have always been AI-based (albeit using less advanced versions of the tech). But because this new wave of AI introduces ways to more explicitly accomplish tasks on your phone, rather than blending into existing features, it may take some time for people to warm up to.</p><h2>AI could soon cost you -- and not everyone is sold</h2><p>As tech giants continue to roll out these AI functions, consumers may soon have to pay the price if they want to keep using them. Samsung's website says its Galaxy AI features "will be provided for free until the end of 2025 on supported Samsung Galaxy devices." To utilize Gemini's full power across Google's apps, you'll need to subscribe to <a href="https://www.cnet.com/tech/services-and-software/google-gemini-advanced-review-dont-cancel-your-chatgpt-plus-subscription/" target="_self" rel="follow">Gemini Advanced</a>. And it's likely Apple could also someday&nbsp;<a href="https://www.cnet.com/tech/mobile/apple-intelligence-may-eventually-cost-you/" rel="follow" target="_self">charge for some of its AI-powered iPhone features</a>.</p><p>Many <a href="https://www.cnet.com/tech/mobile/subscription-fatigue-ai-phone-features-will-soon-cost-us-why-im-not-sold/" target="_self" rel="follow">consumers aren't sold</a>. Nearly half of smartphone owners say they're not willing to pay extra money to access AI on their phones. That's not much of a surprise, given how much subscription fatigue is already weighing people down. Another&nbsp;<a href="https://www.cnet.com/personal-finance/subscription-creep-costs-us-consumers-more-than-1000-a-year-cnet-survey-finds/" rel="follow" target="_self">CNET study</a>&nbsp;from April found that US adults spend an average of $91 on subscription services every month. Two-thirds of respondents said at least one of their subscriptions got more expensive within the last year. Adding yet another monthly fee, therefore, may not be so enticing.&nbsp;</p><p>Still, there are those who are eager to tap into AI on their phones, with Gen Zers and Millennials being the most enthused: 20% of respondents from each generation say they're excited about AI capabilities and find them helpful. Additionally, 15% of Gen Zers and 16% of Millennials use AI on their phones for tasks like photo editing, image creation and summarizing or writing text. Also, 20% of Gen Zers and 19% of Millennials regularly use an AI tool like ChatGPT or Google Gemini on their smartphones.&nbsp;</p><p>Privacy remains a key concern when it comes to AI, with one-third (34%) of smartphone owners flagging their unease in that department. Tech giants have placed a growing emphasis on privacy considerations during their AI-focused keynotes. At its&nbsp;<a href="https://www.cnet.com/news-live/apple-wwdc-6-10-2024-live-blog/" rel="follow" target="_self">Worldwide Developers Conference</a>&nbsp;in June, for instance, Apple noted many of its <a href="https://www.cnet.com/tech/mobile/apple-intelligence-brings-ai-to-the-iphone-with-chatgpt-integration-and-more/" target="_self" rel="follow">AI models run on-device</a>, which is generally considered more private, since information doesn't have to travel over the internet. When a task calls for more computational power, relevant data will be sent to <a href="https://www.cnet.com/tech/services-and-software/apple-says-its-ai-sets-a-new-standard-for-privacy-invites-security-experts-to-test-it/" target="_self" rel="follow">Apple Silicon servers</a>, and that data <a href="https://www.apple.com/gn/newsroom/2024/06/apple-extends-its-privacy-leadership-with-new-updates-across-its-platforms/" target="_blank" rel="noopener nofollow">won't be stored</a> or made accessible to Apple, the company says.&nbsp;</p><h2>The biggest reasons to upgrade a phone</h2><p>With AI being among the last reasons consumers want to upgrade their smartphones, other considerations like longer battery life, more storage and better camera features still dominate. Other motivators include phone display and screen size (32%); keeping the same ecosystem, like iOS or Android (24%); and phone color (10%).&nbsp;</p><p>With the high cost of devices (many flagship phones will cost you anywhere between $800 and $1,200), consumers may not want to <a href="https://www.cnet.com/tech/mobile/getting-a-new-iphone-every-2-years-is-making-less-sense-than-ever/" target="_self" rel="follow">upgrade their devices as frequently</a>. According to our survey, 44% claim they only get a new device when their current phone breaks or needs replacing. Further, 30% hang onto their devices for three years or longer, while 18% upgrade every two years and just 8% get a new phone every year.&nbsp;</p><p>Luckily for consumers, Apple didn't implement a price hike with the <a href="https://www.cnet.com/deals/best-iphone-16-deals/" target="_self" rel="follow">iPhone 16</a>. Still, iPhone users hold onto their devices for longer than other smartphone owners; one-third will will wait three years or more for an upgrade.</p><h2>Foldable phone hype just isn't there yet</h2><p>Companies like Google and Samsung have continued to roll out foldable phones, with the latest being the <a href="https://www.cnet.com/tech/mobile/googles-pixel-9-pro-fold-might-be-a-sequel-that-actually-delivers/" target="_self" rel="follow">Pixel 9 Pro Fold</a> and the&nbsp;<a href="https://www.cnet.com/tech/mobile/galaxy-z-flip-6-review-the-aha-moment-that-sold-me-until-i-saw-the-price/" target="_self" rel="follow">Galaxy Z Flip</a> and <a href="https://www.cnet.com/tech/mobile/samsung-galaxy-z-fold-6-review-steps-forward-and-backward/" target="_self" rel="follow">Fold 6</a>, respectively. But consumers still feel lukewarm about the concept of a foldable handheld device. Just over half (52%) of smartphone owners say they're not interested in buying a foldable phone, while 13% say they'd be interested sometime in the next two years.</p><p>That gives Apple, which has yet to enter the foldable phone space, the opportunity to tap into that interest. Experts have long speculated that a <a href="https://www.cnet.com/tech/mobile/iphone-flip-apples-foldable-phone-could-arrive-before-folding-macbook-or-ipad/" target="_self" rel="follow">foldable iPhone</a> could be what it takes to spur wider adoption of foldable smartphones. But it may be several years before that happens, if it ever does.</p><h2>Methodology&nbsp;</h2><p>All figures, unless otherwise stated, are from YouGov Plc. Total sample size was 2,484 adults, including 2,387 smartphone owners. Fieldwork was undertaken Aug. 28-30, 2024. The survey was carried out online. The figures have been weighted and are representative of all US adults (aged 18-plus).</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Plastic chemical phthalate causes DNA breakage, chromosome defects, study finds (137 pts)]]></title>
            <link>https://medicalxpress.com/news/2024-10-plastic-chemical-phthalate-dna-breakage.html</link>
            <guid>41945372</guid>
            <pubDate>Fri, 25 Oct 2024 13:59:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medicalxpress.com/news/2024-10-plastic-chemical-phthalate-dna-breakage.html">https://medicalxpress.com/news/2024-10-plastic-chemical-phthalate-dna-breakage.html</a>, See on <a href="https://news.ycombinator.com/item?id=41945372">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
									    
<div data-thumb="https://scx1.b-cdn.net/csz/news/tmb/2024/plastic-chemical-cause.jpg" data-src="https://scx2.b-cdn.net/gfx/news/hires/2024/plastic-chemical-cause.jpg" data-sub-html="BBP exposure causes chromosome organization defects in the female germline. Carnoy's fixed and DAPI-stained images of gonads at the pachytene stage following exposure to DMSO or BBP. Images represent examples of gonads with normal germline configuration (first panel) or various chromosome organization defects in the germline including laggers (second panel), aggregates (third panel), and gaps (fourth panel). Yellow arrowheads indicate the respective defect in each panel. N = 27–31 gonads. Three biological repeats. Scale bar, 5 μm. Credit: Henderson et al, 2024, <i>PLOS Genetics</i>, CC-BY 4.0 (creativecommons.org/licenses/by/4.0/)">
        <figure>
            <img src="https://scx1.b-cdn.net/csz/news/800a/2024/plastic-chemical-cause.jpg" alt="Plastic chemical causes causes DNA breakage and chromosome defects in sex cells" title="BBP exposure causes chromosome organization defects in the female germline. Carnoy's fixed and DAPI-stained images of gonads at the pachytene stage following exposure to DMSO or BBP. Images represent examples of gonads with normal germline configuration (first panel) or various chromosome organization defects in the germline including laggers (second panel), aggregates (third panel), and gaps (fourth panel). Yellow arrowheads indicate the respective defect in each panel. N = 27–31 gonads. Three biological repeats. Scale bar, 5 μm. Credit: Henderson et al, 2024, PLOS Genetics, CC-BY 4.0 (creativecommons.org/licenses/by/4.0/)" width="800" height="341">
             <figcaption>
                BBP exposure causes chromosome organization defects in the female germline. Carnoy's fixed and DAPI-stained images of gonads at the pachytene stage following exposure to DMSO or BBP. Images represent examples of gonads with normal germline configuration (first panel) or various chromosome organization defects in the germline including laggers (second panel), aggregates (third panel), and gaps (fourth panel). Yellow arrowheads indicate the respective defect in each panel. N = 27–31 gonads. Three biological repeats. Scale bar, 5 μm. Credit: Henderson et al, 2024, <i>PLOS Genetics</i>, CC-BY 4.0 (creativecommons.org/licenses/by/4.0/)
            </figcaption>        </figure>
    </div><p>A new study conducted on roundworms finds that a common plastic ingredient causes breaks in DNA strands, resulting in egg cells with the wrong number of chromosomes. Monica Colaiácovo of Harvard Medical School led the study, which was published October 24 in the journal <i>PLOS Genetics</i>.</p>

                                        
                                                                                  
                                         

                                                                                    <p>Benzyl butyl phthalate (BBP) is a chemical that makes plastic more flexible and durable, and is found in many consumer products, including food packaging, personal care products and children's toys. Previous studies have shown that BBP interferes with the body's hormones and affects <a href="https://medicalxpress.com/tags/human+reproduction/" rel="tag">human reproduction</a> and development, but the details of how it impacts reproduction have been unclear.</p>
<p>In the new study, researchers tested a range of doses of BBP on the nematode Caenorhabditis elegans and looked for abnormal changes in egg cells. They saw that at levels similar to those detected in humans, BBP interferes with how newly copied chromosomes are distributed into the sex cells. Specifically, BBP causes oxidative stress and breaks in the DNA strands, which lead to <a href="https://medicalxpress.com/tags/cell+death/" rel="tag">cell death</a> and egg cells with the wrong number of chromosomes.</p>
<p>Based on these findings, the researchers propose that BBP exposure alters <a href="https://medicalxpress.com/tags/gene+expression/" rel="tag">gene expression</a> in ways that cause significant damage to the DNA, ultimately leading to lower quality egg cells with abnormal chromosomes. The study also showed that C. elegans metabolizes BBP in the same way as mammals, and is impacted at similar BBP levels that occur in humans, suggesting that C. elegans is an effective model for studying the impacts on people. Overall, the study underscores the toxic nature of this very common plastic ingredient and the damage it causes to animal reproduction.</p>
<p>The authors summarize, "Here, examining the female germline in the nematode C. elegans, this study found that a level of exposure within the range detected in human serum and urine, alters gene expression linking increased germline <a href="https://medicalxpress.com/tags/oxidative+stress/" rel="tag">oxidative stress</a> with compromised genomic integrity and errors in meiotic chromosome segregation."</p>

                                                                                
                                        											<div>
												                                                    <p><strong>More information:</strong>
                                                    Henderson AL, Karthikraj R, Berdan EL, Sui SH, Kannan K, Colaiácovo MP (2024) Exposure to benzyl butyl phthalate (BBP) leads to increased double-strand break formation and germline dysfunction in Caenorhabditis elegans, <i>PLoS Genetics</i> (2024). <a data-doi="1" href="https://dx.doi.org/10.1371/journal.pgen.1011434" target="_blank">DOI: 10.1371/journal.pgen.1011434</a>
																								
																								</p>
																							</div>
                                        											
																					
                                                                                                                        
                                        <!-- print only -->
                                        <div>
                                            <p><strong>Citation</strong>:
                                                 Plastic chemical phthalate causes DNA breakage and chromosome defects in sex cells, new study finds (2024, October 24)
                                                 retrieved 25 October 2024
                                                 from https://medicalxpress.com/news/2024-10-plastic-chemical-phthalate-dna-breakage.html
                                            </p>
                                            <p>
                                            This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no
                                            part may be reproduced without the written permission. The content is provided for information purposes only.
                                            </p>
                                        </div>
                                        
									</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Category Theory Illustrated: Logic(2021) (136 pts)]]></title>
            <link>https://abuseofnotation.github.io/category-theory-illustrated/05_logic/</link>
            <guid>41945308</guid>
            <pubDate>Fri, 25 Oct 2024 13:54:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/">https://abuseofnotation.github.io/category-theory-illustrated/05_logic/</a>, See on <a href="https://news.ycombinator.com/item?id=41945308">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <!--<h1>Logic</h1> -->

        

        

<p>Now let’s talk about one more <em>seemingly</em> unrelated topic just so we can “surprise” ourselves when we realize it’s category theory. By the way, in this chapter there will be another surprise in addition to that, so don’t fall asleep.</p>

<p>Also, I will not merely transport you to a different branch of mathematics, but to an entirely different discipline - <em>logic</em>.</p>

<h2 id="what-is-logic">What is logic</h2>

<p>Logic is the science of the <em>possible</em>. As such, it is at the root of all other sciences, all of which are sciences of the <em>actual</em>, i.e. that which really exists. For example, if science explains how our universe works then logic is the part of the description which is also applicable to any other universe that is <em>possible to exist</em>. A scientific theory aims to be consistent with both itself and observations, while a logical theory only needs to be consistent with itself.</p>

<p>Logic studies the <em>rules</em> by which knowing one thing leads you to conclude (or <em>prove</em>) that some other thing is also true, regardless of the things’ domain (e.g. scientific discipline) and by only referring to their form.</p>

<p>On top of that, it (logic) tries to organize those rules in <em>logical systems</em> (or <em>formal systems</em> as they are also called).</p>

<h2 id="logic-and-mathematics">Logic and mathematics</h2>

<p>Seeing this description, we might think that the subject of logic is quite similar to the subject of set theory and category theory, as we described it in the first chapter - instead of the word “formal” we used another similar word, namely “abstract”, and instead of “logical system” we said “theory”. This observation would be quite correct - today most people agree that every mathematical theory is actually logic plus some additional definitions added to it. For example, part of the reason why <em>set theory</em> is so popular as a theory for the foundations of mathematics is that it can be defined by adding just one single primitive to the standard axioms of logic which we will see shortly - the binary relation that indicates <em>set membership</em>. Category theory is close to logic too, but in a quite different way.</p>

<h2 id="primary-propositions">Primary propositions</h2>

<p>A consequence of logic being the science of the possible is that in order to do anything at all in it, we should have an initial set of propositions that we accept as true or false. These are also called “premises”, “primary propositions” or “atomic propositions” as Wittgenstein dubbed them.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/balls.svg" alt="Balls"></p>

<p>In the context of logic itself, these propositions are abstracted away (i.e. we are not concerned about them directly) and so they can be represented with the colorful balls that you are familiar with.</p>

<h2 id="composing-propositions">Composing propositions</h2>

<p>At the heart of logic, as in category theory, is the concept of <em>composition</em> - if we have two or more propositions that are somehow related to one another, we can combine them into one using a logical operators, like “and”, “or” “follows” etc. The results would be new propositions, which we might call <em>composite propositions</em> to emphasize the fact that they are not primary.</p>

<p>This composition resembles the way in which two monoid objects are combined into one using the monoid operation. Actually, some logical operations do form monoids, like for example the operation <em>and</em>, with the proposition $true$ serving as the identity element.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_monoid.svg" alt="Logical operations that form monoids"></p>

<p>However, unlike monoids/groups, logics study combinations not just with one but with <em>many</em> logical operations and <em>the ways in which they relate to one another</em>, for example, in logic we might be interested in the law of distributivity of <em>and</em> and $or$ operations and what it entails.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_distributivity.svg" alt="The distributivity operation of &quot;and&quot; and &quot;or&quot;"></p>

<p>Important to note that $∧$ is the symbol for <em>and</em> and $∨$ is the symbol for $or$ (although the law above is actually valid even if <em>and</em> and $or$ are flipped).</p>

<h2 id="the-equivalence-of-primary-and-composite-propositions">The equivalence of primary and composite propositions</h2>

<p>When looking at the last diagram, it is important to emphasize that,  propositions that are composed of several premises (symbolized by gray balls, containing some other balls) are not in any way different from “primary” propositions (single-color balls) and that they compose in the same way (although in the leftmost proposition the green ball is wrapped in a gray ball to make the diagram prettier).</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/balls_propositions.svg" alt="Balls as propositions"></p>

<h2 id="modus-ponens">Modus ponens</h2>

<p>As an example of a proposition that contains multiple levels of nesting (and also as a great introduction of the subject of logic in its own right), consider one of the oldest (it was already known by Stoics at 3rd century B.C.) and most famous propositions ever, namely the <em>modus ponens</em>.</p>

<p>Modus ponens is a proposition that is composed of two other propositions (which here we denote $A$ and $B$) and it states that if proposition $A$ is true and also if proposition $(A → B)$ is true (that is if $A$ implies $B$), then $B$ is true as well. For example, if we know that “Socrates is a human” and that “humans are mortal” (or “being human implies being mortal”), we also know that “Socrates is mortal.”</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/modus_ponens.svg" alt="Modus ponens"></p>

<p>Let’s dive into this proposition. We can see that it is composed of two other propositions in a $follows$ relation, where the proposition that follows ($B$) is primary, but the proposition from which $B$ follows is not primary (let’s call that one $C$ - so the whole proposition becomes $C → B$.)</p>

<p>Going one more level down, we notice that the $C$ propositions is itself composed of two propositions in an <em>and</em>, relationship - $A$ and let’s call the other one $D$ (so $A ∧ D$), where $D$ is itself composed of two propositions, this time in a $follows$ relationship - $A → B$. But all of this is better visualized in the diagram.</p>

<h2 id="tautologies">Tautologies</h2>

<p>We often cannot tell whether a given composite proposition is true or false without knowing the values of the propositions that it is made of. However, with propositions such as <em>modus ponens</em> we can: modus ponens is <em>always true</em>, regardless of whether the propositions that form it are true or false. If we want to be fancy, we can also say that it is <em>true in all models of the logical system</em>, a model being a set of real-world premises are taken to be signified by our propositions.</p>

<p>For example, our previous example will not stop being true if we <em>substitute</em> “Socrates” with any other name, nor if we substitute “mortal” for any other quality that humans possess.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/modus_ponens_variations.svg" alt="Variation of modus ponens"></p>

<p>Propositions that are always true are called <em>tautologies</em>. And their more-famous counterparts that are always false are called <em>contradictions</em>. You can turn each tautology into contradiction or the other way around by adding a “not”.</p>

<p>The simplest tautology is the so called law of identity, the statement that each proposition implies itself (e.g. “All bachelors are unmarried”). It may remind you of something.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/tautology_identity.svg" alt="Identity tautology"></p>

<p>Here are some more complex (less boring) tautologies (the symbol $¬$ means “not”/negation.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/tautology_list.svg" alt="Tautologies"></p>

<p>We will learn how to determine which propositions are a tautologies shortly, but first let’s see why is this important at all i.e. what are tautologies good for.</p>

<h2 id="axiom-schemasrules-of-inference">Axiom schemas/Rules of inference</h2>

<p>Tautologies are useful because they are the basis of <em>axiom schemas</em>/<em>rules of inference</em>. And <em>axiom schemas</em> or <em>rules of inference</em> serve as starting point from which we can generate other true logical statements by means of substitution.</p>

<p>Realizing that the colors of the balls in modus ponens are superficial, we may want to represent the general structure of modus ponens that all of its variations share.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/modus_ponens_schema.svg" alt="Modus ponens"></p>

<p>This structure (the one that looks like a coloring book in our example) is called <em>axiom schema</em>. And the propositions that are produced by it are <em>axioms</em>.</p>

<p>Note that the propositions that we plug into the schema don’t have to be primary. For example, having the proposition $a$ (that is symbolized below by the orange ball) and the proposition stating that $a$ implies $a \lor b$ (which is one of the tautologies that we saw above), we can plug those propositions into the <em>modus ponens</em> and prove that $a \lor b$ is true.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/modus_ponens_composite.svg" alt="Using modus ponens for rule of inference"></p>

<p><em>Axiom schemas</em> and <em>rules of inference</em> are almost the same thing except that rules of inference allow us to actually distill the conclusion from the premises. For example in the case above, we can use modus ponens as a rule of inference to proves that $a \lor b$ is true.</p>

<p>All axiom schemas can be easily applied as rules of inference and the other way around.</p>

<h2 id="logical-systems">Logical systems</h2>

<p>Knowing that we can use axiom schemas/rules of inference to generate new propositions, we might ask whether it is possible to create a small collection of such schemas/rules that is curated in such a way that it enables us to generate <em>all</em> other propositions. You would be happy (although a little annoyed, I imagine) to learn that there exist not only one, but many such collections. And yes, collections of this sort are what we call <em>logical systems</em>.</p>

<p>Here is one such collection which consists of the following five axiom schemes <em>in addition to the inference rule modus ponens</em> (These are axiom schemes, even though we use colors).</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/min_hilbert.svg" alt="A minimal collection of Hilbert axioms"></p>

<p>Proving that this and other similar logical systems are complete (can really generate all other propositions) is due to Gödel and is known as “Gödel’s completeness theorem” (Gödel is so important that I specifically searched for the “ö” letter so I can spell his hame right.)</p>

<h2 id="conclusion">Conclusion</h2>

<p>We now have an idea about how do some of the main logical constructs (axioms, rules of inference) work. But in order to prove that they are true, and to understand <em>what they are</em>, we need to do so through a specific <em>interpretation</em> of those constructs.</p>

<p>We will look into two interpretations - one very old and the other, relatively recent. This would be a slight detour from our usual subject matter of points and arrows, but I assure you that it would be worth it. So let’s start.</p>

<h2 id="classical-logic-the-truth-functional-interpretation">Classical logic. The truth-functional interpretation</h2>

<blockquote>
  <p>Beyond the world that we inhabit and perceive every day, there exist the <em>world of forms</em> where reside all ideas and concepts that manifest themselves in the objects that we perceive e.g. beyond all the people that have ever lived, there lies the prototypical person, and we are people only insofar as we resemble that person, beyond all the things in the world that are strong, lies the ultimate concepts of strength, from which all of them borrow etc. And although, as mere mortals, we live in the world of appearances and cannot perceive the world of forms, we can, through philosophy, “recollect” with it and know some of its features.</p>
</blockquote>

<p>The above is a summary of a worldview that is due to the Greek philosopher Plato and is sometimes called Plato’s <em>theory of forms</em>. Originally, the discipline of logic represents an effort to think and structure our thoughts in a way that they apply to this world of forms i.e. in a “formal” way. Today, this original paradigm of logic is known as “classical logic”. Although it all started with Plato, most of it is due to the 20th century mathematician David Hilbert.</p>

<p>The existence of the world of forms implies that, even if there are many things that we, people, don’t know and would not ever know, at least <em>somewhere out there</em> there exists an answer to every question. In logic, this translates to <em>the principle of bivalence</em> that states that <em>each proposition is either true or false</em>. And, due to this principle, propositions in classical logic can be aptly represented in set theory by the boolean set, which contains those two values.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/boolean_set.svg" alt="The set of boolean values"></p>

<p>According to the classical interpretation, you can think of <em>primary propositions</em> as just a bunch of boolean values. <em>Logical operators</em> are functions that take a one or several boolean values and return another boolean value (and <em>composite propositions</em> are, just the results of the application of these functions).</p>

<p>Let’s review all logical operators in this semantic context.</p>

<h2 id="the-negation-operation">The <em>negation</em> operation</h2>

<p>Let’s begin with the negation operation. Negation is a unary operation, which means that it is a function that takes just <em>one</em> argument and (like all other logical operators) returns one value, where both the arguments and the return type are boolean values.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/negation.svg" alt="negation"></p>

<p>The same function can also be expressed in a slightly less-fancy way by this table.</p>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>¬p</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <td>False</td>
      <td>True</td>
    </tr>
  </tbody>
</table>

<p>Tables like this one are called <em>truth tables</em> and they are ubiquitous in classical logic. They can be used not only for defining operators but for proving results as well.</p>

<h2 id="interlude-proving-results-by-truth-tables">Interlude: Proving results by truth tables</h2>

<p>Having defined the negation operator, we are in position to prove the first of the axioms of the logical system we saw, namely the <em>double negation elimination</em>. In natural language, this axiom is equivalent to the observation that saying “I am <em>not unable</em> to do X” is the same as saying  “I am <em>able</em> to do it”.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/double_negation_formula.svg" alt="Double negation elimination formula"></p>

<p>(despite its triviality, the double negation axiom is probably the most controversial result in logic, we will see why later.)</p>

<p>If we view logical operators as functions from and to the set of boolean values, than proving axioms involves composing several of those functions into one function and observing its output. More specifically, the proof of the formula above involves just composing the negation function with itself and verifying that it leaves us in the same place from which we started.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/double_negation_proof.svg" alt="Double negation elimination"></p>

<p>If we want to be formal about it, we might say that applying negation two times is equivalent to applying the <em>identity</em> function.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/boolean_identity.svg" alt="The identity function for boolean values"></p>

<p>If we are tired of diagrams, we can represent the composition diagram above as table as well.</p>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>¬p</th>
      <th>¬¬p</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
  </tbody>
</table>

<p>Each proposition in classical logic can be proved with such diagrams/tables.</p>

<h2 id="the-and-and-or-operations">The <em>and</em> and <em>or</em> operations</h2>

<p>OK, <em>you</em> know what <em>and</em> means and <em>I</em> know what it means, but what about those annoying people that want everything to be formally specified (nudge, nudge). Well we already know how we can satisfy them - we just have to construct the boolean function that represents <em>and</em>.</p>

<p>Because <em>and</em> is a <em>binary</em> operator, instead of a single value the function would accept a <em>pair</em> of boolean values.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/and.svg" alt="And"></p>

<p>Here is the equivalent truth-table (in which $∧$ is the symbol for <em>and</em>.)</p>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>q</th>
      <th>p ∧ q</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
  </tbody>
</table>

<p>We can do the same for $or$, here is the table.</p>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>q</th>
      <th>p ∨ q</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>True</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>False</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
  </tbody>
</table>

<p><strong>Task:</strong> Draw the diagram for <em>or</em>.</p>

<p>Using those tables, we can also prove some axiom schemas we can use later:</p>

<ul>
  <li>For <em>and</em> $p ∧ q → p$ and $p ∧ q → q$ “If I am tired and hungry, this means that I am hungry”.</li>
  <li>For <em>or</em>:  $p → p ∨ q$ and $q → p ∨ q$ “If I have a pen this means that I am either have a pen or a ruler”.</li>
</ul>

<h2 id="the-implies-operation">The <em>implies</em> operation</h2>

<p>Let’s now look into something less trivial: the <em>implies</em> operation, (also known as <em>material condition</em>). This operation binds two propositions in a way that the truth of the first one implies the truth of the second one (or that the first proposition is a <em>necessary condition</em> for the second.) You can read $p → q$ as “if $p$ is true, then $q$ must also be true.</p>

<p>Implies is also a binary function - it is represented by a function from an ordered pair of boolean values, to a boolean value.</p>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>q</th>
      <th>p → q</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <td>False</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
  </tbody>
</table>

<p>Now there are some aspects of this which are non-obvious so let’s go through every case.</p>

<ol>
  <li>If $p$ is true and $q$ is also true, then $p$ does imply $q$ - obviously.</li>
  <li>If $p$ is true but $q$ is false then $q$ does not follow from $p$ - cause $q$ would have been true if it did.</li>
  <li>If $p$ is false but $q$ is true, then $p$ still does imply $q$. What the hell? Consider that by saying that $p$ implies $q$ we don’t say that the two are 100% interdependent e.g. the claim that “drinking alcohol causes headache” does not mean that drinking is the only source of headaches.</li>
  <li>And finally if $p$ is false but $q$ is false too, then $p$ still does imply $q$ (just some other day).</li>
</ol>

<p>It might help you to remember that in classical logic $p → q$ ($p$ implies $q$) is true when $\neg p ∨ q$ (either $p$ is false or $q$ is true.)</p>

<h2 id="the-if-and-only-if-operation">The <em>if and only if</em> operation</h2>

<p>Now, let’s review the operation that indicates that two propositions are equivalent (or, when one proposition is <em>a necessary and sufficient condition</em> for the other (which implies that the reverse is also true.)) This operation yields true when the propositions have the same value.</p>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>q</th>
      <th>p ↔ q</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
  </tbody>
</table>

<p>But what’s more interesting about this operation is that it can be constructed using the <em>implies</em> operation - it is equivalent to each of the propositions implying the other one (so $p \leftrightarrow q$ is the same as $p \to q \land q \to p$) - something which we can easily prove by comparing some truth tables.</p>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>q</th>
      <th>p → q</th>
      <th>q → p</th>
      <th>p → q ∧ q → p</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
    <tr>
      <td>True</td>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <td>False</td>
      <td>True</td>
      <td>True</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <td>False</td>
      <td>False</td>
      <td>True</td>
      <td>True</td>
      <td>True</td>
    </tr>
  </tbody>
</table>

<p>Because of this, the equivalence operation is called “if and only if”, or “iff” for short.</p>

<h2 id="proving-results-by-axiomsrules-of-inference">Proving results by axioms/rules of inference</h2>

<p>Let’s examine the above formula, stating that $p → q$ is the same as $¬p ∨ q$.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/hilbert_formula.svg" alt="Hilbert formula"></p>

<p>We can easily prove this by using truth tables.</p>

<table>
  <thead>
    <tr>
      <th>p</th>
      <th>q</th>
      <th>p → q</th>
      <th>¬p</th>
      <th>q</th>
      <th>¬p ∨ q</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>True</td>
      <td>True</td>
      <td><strong>True</strong></td>
      <td>False</td>
      <td>True</td>
      <td><strong>True</strong></td>
    </tr>
    <tr>
      <td>True</td>
      <td>False</td>
      <td><strong>False</strong></td>
      <td>False</td>
      <td>False</td>
      <td><strong>False</strong></td>
    </tr>
    <tr>
      <td>False</td>
      <td>True</td>
      <td><strong>True</strong></td>
      <td>True</td>
      <td>True</td>
      <td><strong>True</strong></td>
    </tr>
    <tr>
      <td>False</td>
      <td>False</td>
      <td><strong>True</strong></td>
      <td>True</td>
      <td>False</td>
      <td><strong>True</strong></td>
    </tr>
  </tbody>
</table>

<p>But it would be much more intuitive if we do it using axioms and rules of inference. To do so, we start with the formula we have ($p → q$) plus the axiom schemas, and arrive at the formula we want to prove ($¬p ∨ q$).</p>

<p>Here is one way to do it. The formulas that are used at each step are specified at the right-hand side, the rule of inference is modus ponens.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/hilbert_proof.svg" alt="Hilbert proof"></p>

<p>Note that to really prove that the two formulas are equivalent we have to also do it the other way around (start with ($¬p ∨ q$) and ($p → q$)).</p>

<h2 id="intuitionistic-logic-the-bhk-interpretation">Intuitionistic logic. The BHK interpretation</h2>

<blockquote>
  <p>[…] logic is life in the human brain; it may accompany life outside the brain but it can never guide it by virtue of its own power. — L.E.J. Brouwer</p>
</blockquote>

<p>I don’t know about you, but I feel that the classical truth-functional interpretation of logic (althought it works and is correct in its own right) doesn’t fit well the categorical framework that we are using here: It is too “low-level”, it relies on manipulating the values of the propositions. According to it, the operations <em>and</em> and <em>or</em> are just 2 of the 16 possible binary logical operations and they are not really connected to each other (but we know that they actually are.)</p>

<p>For these and other reasons, in the 20th century a whole new school of logic was founded, called <em>intuitionistic logic</em>. If we view classical logic as based on <em>set theory</em>, then intuitionistic logic would be based on <em>category theory</em> and its related theories. If <em>classical logic</em> is based on Plato’s theory of forms, then intuitionism began with a philosophical idea originating from Kant and Schopenhauer: the idea that the world as we experience it is largely predetermined of out perceptions of it. Thus without absolute standards for truth, a proof of a proposition becomes something that you <em>construct</em>, rather than something you discover.</p>

<p>Classical and intuitionistic logic diverge from one another right from the start: because according to intuitionistic logic we are <em>constructing</em> proofs rather than <em>discovering</em> them as some universal truth, we are <em>off with the principle of bivalence</em>. That is, in intuitionistic logic we have no basis to claim that each statements is necessarily <em>true or false</em>. For example, there might be a statements that might not be provable not because they are false, but simply because they fall outside of the domain of a given logical system (the twin-prime conjecture is often given as an example for this.)</p>

<p>Anyway, intuitionistic logic is not bivalent, i.e. we cannot have all propositions reduced to true and false.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/true_false.svg" alt="The True/False dichotomy"></p>

<p>One thing that we still do have there are propositions that are “true” in the sense that a proof for them is given - the primary propositions. So with some caveats (which we will see later) the bivalence between true and false proposition might be thought out as similar to the bivalence between the existence or absense of a proof for a given proposition - there either is a proof of it or there isn’t.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/proved_unproved.svg" alt="The proved/unproved dichotomy"></p>

<p>This bivalence is at the heart of what is called the Brouwer–Heyting–Kolmogorov (BHK) interpretation of logic, something that we will look into next.</p>

<p>The original formulation of the BHK interpretation is not based on any particular mathematical theory. Here, we will first illustrate it using the language of set theory (just so we can abandon it a little later).</p>

<h2 id="the-and-and-or-operations-1">The <em>and</em> and <em>or</em> operations</h2>

<p>As the existence of a proof of a proposition is taken to mean that the proposition is true, the definitions of <em>and</em> is rather simple - the proof of $A ∧ B$ is just <em>a pair</em> containing a proof of $A$, and a proof of $B$ i.e. <em>a set-theoretic product</em> of the two (see chapter 2). The principle for determining whether the proposition is true or false is similar to that of primary propositions - if the pair of proofs of $A$ and  $B$ exist (i.e. if both proofs exist) then the proof of $A \land B$ can be constructed (and so $A \land B$ is “true”).</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/bhk_and.svg" alt="And in the BHK interpretation"></p>

<p><strong>Question:</strong> what would be the <strong>or</strong> operation in this case?</p>

<h2 id="the-implies-operation-1">The <em>implies</em> operation</h2>

<p>Now for the punchline: in the BHK interpretation, the <em>implies</em> operation is just a <em>function</em> between proofs. Saying that $A$ implies $B$ ($A \to B$) would just mean that there exist a function which can convert a proof of $A$ to a proof of $B$.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/bhk_implies.svg" alt="Implies in the BHK interpretation"></p>

<p>And, (it gets even more interesting) the <em>modus ponens</em> rule of inference is nothing more than the process of <em>functional application</em>. i.e. if we have a proof of $A$ and a function $A \to B$ we can call this function to obtain a proof of $B$.</p>

<p>(In order to define this formally, we also need to define functions in terms of sets i.e. we need to have a set representing $A \to B$ for each $A$ and $B$. We will come back to this later.)</p>

<h2 id="the-if-and-only-if-operation-1">The <em>if and only if</em> operation</h2>

<p>In the section on classical logic, we proved that two propositions $A$ and $B$ are equivalent if $A$ implies $B$ and $B$ implies $A$. But if the <em>implies</em> operation is just a function, then proposition are equivalent precisely when there are two functions, converting each of them to the other i.e. when the sets containing the propositions are <em>isomorphic</em>.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/bhk_iff.svg" alt="Implies in the BHK interpretation"></p>

<p>(Perhaps we should note that <em>not all set-theoretic functions are proofs</em>, only a designated set of them (which we call <em>canonical</em> functions) i.e. in set theory you can construct functions and isomorphisms between any pair of singleton sets, but that won’t mean that all proofs are equivalent.)</p>

<h2 id="the-negation-operation-1">The <em>negation</em> operation</h2>

<p>So according to BHK interpretation saying that $A$ is true, means that that we possess a proof of $A$ - simple enough. But it’s a bit harder to express the fact that $A$ is false: it is not enough to say that we <em>don’t have a proof</em> of $A$ (the fact that don’t have it, doesn’t mean it doesn’t exist). Instead, we must show that claiming that $A$ is true leads to a <em>contradiction</em>.</p>

<p>To express this, intuitionistic logic defines the constant $⊥$ which plays the role of <em>False</em> (also known as the “bottom value”). $⊥$ is defined as the proof of a formula that does not have any proofs. And the equivalent of false propositions are the ones that imply that the bottom value is provable (which is a contradiction). So $¬A$ is $A \to ⊥$.</p>

<p>In set theory, the $⊥$ constant is expressed by the empty set.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/bhk_false.svg" alt="False in the BHK interpretation"></p>

<p>And the observation that propositions that are connected to the bottom value are false is expressed by the fact that if a proposition is true, i.e. there exists a proof of it, then there can be no function from it to the empty set.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/bhk_false_function.svg" alt="False in the BHK interpretation"></p>

<p>The only way for there to be such function is if the set of proofs of the proposition is empty as well.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/bhk_false_function_2.svg" alt="False in the BHK interpretation"></p>

<p><strong>Task:</strong> Look up the definition of function and verify that there cannot exist a function from any set <em>to the empty set</em></p>

<p><strong>Task</strong> Look up the definition of function and verify that there does exist a function <em>from the empty set</em> to itself (in fact there exist a function from the empty set to any other set.</p>

<h2 id="the-law-of-excluded-middle">The law of excluded middle</h2>

<p>Although intuitionistic logic differs a lot from classical logic when it comes to its <em>semantics</em>, i.e. in the way the whole system is built (which we described above), it actually doesn’t differ so much in terms of <em>syntax</em>, i.e. if we try to deduce the axiom schemas/rules of inference that correspond to the definitions of the structures outlined above, we would see that they are virtually the same as the ones that define classical logic. There is, however, one exception concerning the <em>double negation elimination axiom</em> that we saw earlier, a version of which is known as <em>the law of excluded middle</em>.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/excluded_middle_formula.svg" alt="The formula of the principle of the excluded middle"></p>

<p>This law is valid in classical logic and is true when we look at its truth tables, but there is no justification for it terms of the BHK interpretation. Why? in intuitionistic logic saying that something is false amounts to <em>constructing a proof</em> that it is false (that it implies the bottom value) and there is no method/function/alghorithm that can either prove that a given proposition is either true and false.</p>

<p>The question of whether you can use the law of excluded middle spawned a heated debate between the classical logic proponent David Hilbert and the intuitionistic logic proponent L.E.J. Brouwer, known as <em>the Brouwer–Hilbert controversy</em>.</p>

<h2 id="logics-as-categories">Logics as categories</h2>

<p>Leaving the differences between intuitionistic and classical logics aside, the BHK interpretation is interesting because it provides that higher-level view of logic, that we need in order to construct a interpretation of it based on category theory.</p>

<p>Such higher-level interpretations of logic are sometimes called <em>algebraic</em> interpretations, <em>algebraic</em> being an umbrella term describing all structures that can be represented using category theory, like groups and orders.</p>

<h2 id="the-curry-howard-isomorphism">The Curry-Howard isomorphism</h2>

<p>Programmers might find the definition of the BHK interpretation interesting for other reason - it is very similar to a definition of a programming language: propositions are <em>types</em>, the <em>implies</em> operations are <em>functions</em>, <em>and</em> operations are composite types (objects), and <em>or</em> operations are <em>sum types</em> (which are currently not supported in most programming languages, but that’s a separate topic). Finally a proof of a given proposition is represented by a value of the corresponding type. 
<img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_curry.svg" alt="Logic as a programming language"></p>

<p>This similarity is known as the <em>Curry-Howard isomorphism</em>.</p>

<p><strong>Task:</strong> The Curry-Howard isomorphism is also the basis of special types of programming languages called “proof assistants” which help you verify logical proofs. Install a proof assistant and try to see how it works (I recommend the Coq Tutorial by Mike Nahas).</p>

<h2 id="cartesian-closed-categories">Cartesian closed categories</h2>

<p>Knowing about the Curry-Howard isomorphism and knowing also that programming languages can be described by category theory may lead us to think that <em>category theory is part of this isomorphism as well</em>. And we would be quite correct — this is why it is sometimes known as the Curry-Howard-<em>Lambek</em> isomorphism (Joachim Lambek being the person who formulated the categorical side). So let’s examine this isomorphism. As all other isomorphisms, it comes in two parts:</p>

<p>The first part is finding a way to convert a <em>logical system</em> into a category - this would not be hard for us, as sets form a category and the flavor of the BHK interpretation that we saw is based on sets.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/category_curry_logic.svg" alt="Logic as a category"></p>

<p><strong>Task:</strong> See whether you can prove that logic propositions and the “implies” relation form a category. What is missing?</p>

<p>The second part involves converting a category into a logical system - this is much harder. To do it, we have to enumerate the criteria that a given category has to adhere to, in order for it to be “logical”. These criteria have to guarantee that the category has objects that correspond to all valid logical propositions and no objects that correspond to invalid ones.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_curry_category.svg" alt="Logic as a category"></p>

<p>Categories that adhere to these criteria are called <em>cartesian closed categories</em>. To describe them here directly, but instead we would start with a similar but simpler structures that we already examined - orders.</p>

<h2 id="logics-as-orders">Logics as orders</h2>

<p>So, we already saw that a logical system along with a set of primary propositions forms a category.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_category.svg" alt="Logic as a preorder"></p>

<p>If we assume that there is only one way to go from proposition $A$, to proposition $B$ (or there are many ways, but we are not interested in the difference between them), then logic is not only a category, but a <em>preorder</em> in which the relationship “bigger than” is taken to mean “implies”, so ($A \to B$ is $A &gt; B$).</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_preorder.svg" alt="Logic as a preorder"></p>

<p>Furthermore, if we count propositions that follow from each other (or sets of propositions that are proven by the same proof) as equivalent, then logic is a proper <em>partial order</em>.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_order.svg" alt="Logic as an order"></p>

<p>And so it can be represented by a Hasse diagram, in which $A \to B$ only if $A$ is below $B$ in the diagram.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_hasse.svg" alt="Logic as an order"></p>

<p>This is something quite characteristic of category theory — examining a concept in a more limited version of a category (in this case orders), in order to make things simpler for ourselves.</p>

<p>Now let’s examine the question that we asked before - exactly which <del>categories</del> orders represent logic and what laws does an order have to obey so it is isomorphic to a logical system? We will attempt to answer this question as we examine the elements of logic again, this time in the context of orders.</p>

<h2 id="the-and-and-or-operations-2">The and and or operations</h2>

<p>By now you probably realized that the <em>and</em> and <em>or</em> operations are the bread and butter of logic (although it’s not clear which is which). As we saw, in the BHK interpretation those are represented by set <em>products</em> and <em>sums</em>. The equivalent constructs in the realm of order theory are <em>meets</em> and <em>joins</em> (in category-theoretic terms <em>products</em> and <em>coproducts</em>.)</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/lattice_meet_join.svg" alt="Order meet and joing"></p>

<p>Logic allows you to combine any two propositions in and <em>and</em> or <em>or</em> relationship, so, in order for an order to be “logical” (to be a correct representation for a logical system,) <em>it has to have $meet$ and $join$ operations for all elements</em>. Incidentally we already know how such orders are called - they are called <em>lattices</em>.</p>

<p>And there is one important law of the  <em>and</em> and <em>or</em> operations, that is not always present in all lattices. It concerns the connection between the two, i.e. way that they distribute, over one another.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_distributivity.svg" alt="The distributivity operation of &quot;and&quot; and &quot;or&quot;"></p>

<p>Lattices that obey this law are called <em>distributive lattices</em>.</p>

<p>Wait, where have we heard about distributive lattices before? In the previous chapter we said that they are isomorphic to <em>inclusion orders</em> i.e. orders of sets, that contain a given collection of elements, and that contain <em>all combinations</em> of a given set of elements. The fact that they popped up again is not coincidental — “logical” orders are isomorphic to inclusion orders. To understand why, you only need to think about the BHK interpretation — the elements which participate in the inclusion are our prime propositions. And the inclusions are all combinations of these elements, in an <em>or</em> relationship (for simplicity’s sake, we are ignoring the <em>and</em> operation.)</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/logic_poset_inclusion.svg" alt="A color mixing poset, ordered by inclusion"></p>

<p>The <em>or</em> and <em>and</em> operations (or, more generally, the <em>coproduct</em> and the <em>product</em>) are, of course, categorically dual, which would explain why the symbols that represent them $\lor$ and $\land$ are the one and the same symbol, but flipped vertically.</p>

<p>And even the symbol itself looks like a representation of the way the arrows converge. This is probably not the case, as this symbol is used way before Hasse diagrams were a thing — for all we know the $\lor$ symbol is probably symbolizes the “u” in “uel” (the latin word for “or”) and the <em>and</em> symbol is just a flipped “u”) — but I still find the similarity fascinating.</p>

<h2 id="the-negation-operation-2">The <em>negation</em> operation</h2>

<p>In order for a distributive lattice to represent a logical system, it has to also have objects that correspond to the values <em>True</em> and <em>False</em> (which are written $\top$ and $\bot$). But, to mandate that these objects exist, we must first find a way to specify what they are in order/category-theoretic terms.</p>

<p>A well-known result in logic, called <em>the principle of explosion</em>, states that if we have a proof of <em>False</em> (which we write as $\bot$) i.e. if we have a statement “<em>False</em> is true” if we use the terminology of classical logic, then any and every other statement can be proven. And we also know that no true statement implies <em>False</em> (in fact in intuitionistic logic this is the definition of a true statement). Based on these criteria we know that the <em>False</em> object would look like this when compared to other objects:</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/lattice_false.svg" alt="False, represented as a Hasse diagram"></p>

<p>Circling back to the BHK interpretation, we see that the empty set fits both of these conditions.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/lattice_false_bhk.svg" alt="False, represented as a Hasse diagram"></p>

<p>Conversely, the proof of <em>True</em> which we write as $\top$, expressing the statement that “<em>True</em> is true”, is trivial and doesn’t say anything, so <em>nothing follows from it</em>, but at the same time it follows from every other statement.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/lattice_true.svg" alt="True, represented as a Hasse diagram"></p>

<p>So <em>True</em> and <em>False</em> are just the <em>greatest</em> and <em>least</em> objects of our order (in category-theoretic terms <em>terminal</em> and <em>initial</em> object.)</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/lattice_true_false.svg" alt="The whole logical system, represented as a Hasse diagram"></p>

<p>This is another example of the categorical concept of duality - $\top$ and $\bot$ are dual to each other, which makes a lot of sense if you think about it, and also helps us remember their symbols (althought if you are like me, you’ll spent a year before you stop wondering which one is which, every time I see them).</p>

<p>So in order to represent logic, our distributive lattice has to also be <em>bounded</em> i.e. it has to have greatest and least elements (which play the roles of <em>True</em> and <em>False</em>).</p>

<h2 id="the-implies-operation-2">The <em>implies</em> operation</h2>

<p>As we said, every lattice has representations of propositions implying one another (i.e. it has arrows), but to really represents a logical system it also has to have <em>function objects</em> i.e. there needs to be a rule that identifies a unique object $A → B$ for each pair of objects $A$ and $B$, such that all axioms of logic are followed.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/implies.svg" alt="Implies operation"></p>

<p>We will describe this object in the same way we described all other operations — by defining a structure consisting of a of objects and arrows in which $A → B$ plays a part. And this structure is actually a categorical reincarnation our favorite rule of inference, the <em>modus ponens</em>.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/implies_modus_ponens.svg" alt="Implies operation"></p>

<p>Modus ponens is the essence of the <em>implies</em> operation, and, because we already know how the operations that it contains (<em>and</em> and <em>implies</em>) are represented in our lattice, we can directly use it as a definition by saying that the object $A → B$ is the one for which modus ponens rule holds.</p>

<blockquote>
  <p>The function object $A → B$ is an object which is related to objects $A$ and $B$ in such a way that such that $A ∧ (A → B) → B$.</p>
</blockquote>

<p>This definition is not complete, however, because (as usual) $A → B$ is <em>not the only object</em> that fits in this formula. For example, the set $A → B ∧ C$ is also one such object, as is $A → B ∧ C ∧ D$ (not going to draw all the arrows here, because it will get too (and I mean too) messy).</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/implies_modus_ponens_impostors.svg" alt="Implies operation with universal property"></p>

<p>So how do we set apart the real formula from all those “imposter” formulas? If you remember the definitions of the <em>categorical product</em> (or of its equivalent for orders, the <em>meet</em> operation) you would already know where this is going: we recognize that $A \to B$ is the upper <em>limit</em> of $A → B ∧ C$ and $A → B ∧ C ∧ D$ and all other imposter formulas that can be in the place of $X$ in $A ∧ X → B$. The relationship can be described in a variety of ways:</p>

<ul>
  <li>We can say that $A \to B$ is the most <em>trivial</em> result for which the formula $A ∧ X → B$ is satisfied and that all other results are <em>stronger</em>.</li>
  <li>We can say that all other results imply $A \to B$ but not the other way around.</li>
  <li>We can say that all other formulas lie <em>below</em> $A → B$ in the Hasse diagram.</li>
</ul>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/implies_universal_property.svg" alt="Implies operation with universal property"></p>

<p>So, after choosing the best way to express the relationship (they are all equivalent) we are ready to present our final definition:</p>

<blockquote>
  <p>The function object $A → B$ is the topmost object which is related to objects $A$ and $B$ in such a way that $A ∧ (A → B) → B$.</p>
</blockquote>

<p>The existence of this function object (called <em>exponential object</em> in category-theoretic terms) is the final condition for an order/lattice to be a representation of logic.</p>

<p>Note, by the way, that this definition of function object is valid specifically for intuinistic logic. For classical logic, the definition of  is simpler — there $A → B$ is just $\lnot A ∨ B$, because of the law of excluded middle.</p>

<h2 id="the-if-and-only-if-operation-2">The <em>if and only if</em> operation</h2>

<p>When we examined the <em>if and only if</em> operation can be defined in terms <em>implies</em>, that is $A \leftrightarrow B$ is equivalent to $A \to B \land B \to A$.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/isomorphism.svg" alt="Implies identity"></p>

<p>We have something similar for categorical logic as well — We say that when two propositions are connected to each other, then, particularily when we speak of orders, they are isomorphic.</p>

<h2 id="a-taste-of-categorical-logic">A taste of categorical logic</h2>

<p>In the previous section we saw some definitions, here we will convince ourselves that they really capture the concept of logic correctly, by proving some results using categorical logic.</p>

<h2 id="true-and-false">True and False</h2>

<p>The join (or least upper bound) of the <em>topmost</em> object $\top$ (which plays the role of the value <em>True</em>) and any other object that you can think of, is… $\top$ itself (or something isomorphic to it, which, as we said, is the same thing). This follows trivially from the fact that the join of two objects must be bigger or equal than both of these objects, and that there is no other object that is bigger or equal to the $\top$ is $\top$ itself. This is simply because $\top$ (as any other object) is equal to itself and because there is by definition no object that is bigger than it.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/join_true.svg" alt="Implies identity"></p>

<p>This corresponds to the logical statement that $A \lor \top$ is equal to $\top$ i.e. it is true. Hence, the above observation is a proof of that statement, (an alternative to truth tables).</p>

<p><strong>Task</strong>: Think of the duel situation, with False. What does it imply, logically?</p>

<h2 id="and-and-or">And and Or</h2>
<p>Above, we saw that the join between any random object and the top object is the top object itself. But, does this situation only occur when the second object is $\top$? Wouldn’t the same thing happen if $\top$ it is replaced by any other object that is higher than the first one?</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/join_bigger_true.svg" alt="Implies identity"></p>

<p>The answer is “Yes”: when we are looking for the join of two object, we are looking for the <em>least</em> upper bound i.e. the <em>lowest</em> object that is above both of them. So, any time we have two objects and one is higher than the other, their join would be (isomorphic to) the higher object.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/join_bigger.svg" alt="Implies identity"></p>

<p>In other words, if $A \to B$, then $A \land B \leftrightarrow B$</p>

<h2 id="implies">Implies</h2>

<p>For our first example with implies, let’s take the formula $A → B$, and examine the case when $A$ and $B$ are the same object. We said that, $A → B$ ($A → A$ in our case) is the topmost object $X$ for which the criteria given by the formula $A ∧ X → B$ is satisfied. But in this case, the formula is satisfied for any $X$, (because it evaluates to $A ∧ X → A$, which is always true), i.e. the topmost object that satisfies it is… the topmost object there is i.e. (an object isomorphic to) $True$.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/implies_identity.svg" alt="Implies identity"></p>

<p>Does this make sense? Of course it does: in fact, we just proved one of the most famous laws in logic (called the law of identity, as per Aristotel), namely that $A → A$ is always true, or that everything follows from itself.</p>

<p>And what happens if $A$ implies $B$ in any model, i.e. if $A \models B$ (semantic consequence)? In this case, $A$ would be below $B$ in our Hasse diagram (e.g. $A$ is the blue ball and $B$ is the orange one). Then the situation is somewhat similar to the previous case: $A ∧ X → B$ will be true, no matter what $X$ is (simply because $A$ already implies $B$, by itself). And so $A → B$ will again correspond to the $True$ object.</p>

<p><img src="https://abuseofnotation.github.io/category-theory-illustrated/05_logic/implies_b_follows.svg" alt="Implies when A follows from B"></p>

<p>This is again a well-known result in logic (if I am not mistaken, it will be a deduction theorem of some sort): if $A \models B$), then the statement $(A → B)$ will always be true.</p>

<!--
If and only if
---

Now for the a more complicated task: what would happen if $A$ is above $B$ i.e. if $B \models A$? What would the topmost object that fits the formula $(A ∧ X) → B$ then? Well, in this case there are many objects $A \land X$ that are also above $B$ and so they *don't* imply $B$. The highest such object that is below $B$ (so it can still imply $B$) would be... $B$ itself (as it literary sets the upper bound).

![Implies when B follows from A](../05_logic/implies_a_follows.svg)

Translated to logical language, this says that if we have $B \models A$, then the proof of $A → B$ coincides with the proof of $B$.
-->

<!--
Classical VS intuitionistic logic
===

So, we already formulated the definition of intuitionistic logic in terms of order/lattice --- it is represented by a lattice that is bounded (i.e. has greatest and least objects ($True$ and $False$)) and that has function objects (the law of distributivity which we mentioned earlier is always true for lattices that have function object).

More interestingly, a lattice can follow the laws of *classical logic*, as well. it has to be *bounded* and *distributive* and in addition to that it has to be *complemented* which is to say that each proposition $A$, there exist an a unique proposition $\neg A$ (such that $A ∨ \neg A = 1$ and $A ∧ \neg A = 0$). These lattices are called *boolean algebras*.

Constructive proofs
---

Intuitionistic logic is also called *constructive* logic, or constructive mathematics. And the proofs in intuitionistic logic are constructive.


Proving a negative
---

If classical logic is based on the belief that everything is either true or false, intuitionistic logic gives precedence to the famous common-sense principle that *you cannot prove a negative*.

which means that while you can given a true statement and follow the arrows to reach other true statements, false statements would remain unreachable.

Given a logical system, consisting of axioms and rules of inference, I define positive statements as statements of the type "X follows from the axioms" and negative statements as statements of type  "X does not follow from the axioms".

Given those definitions, a positive statement is proven by just applying the rules of inference to the axioms until you reach the statement you want to prove, while there is no general way to prove a negative statement.

![Path from truth](../05_logic/paths_truth.svg)


 https://www.algebraicjulia.org/blog/post/2021/09/cset-graphs-4/

https://personal.math.ubc.ca/~cytryn/teaching/scienceOneF10W11/handouts/OS.proof.4methods.html

https://en.wikibooks.org/wiki/Mathematical_Proof/Methods_of_Proof#Direct_proof
-->



        
        
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Smarter Than 'Ctrl+F': Linking Directly to Web Page Content (195 pts)]]></title>
            <link>https://alfy.blog/2024/10/19/linking-directly-to-web-page-content.html</link>
            <guid>41943098</guid>
            <pubDate>Fri, 25 Oct 2024 07:41:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://alfy.blog/2024/10/19/linking-directly-to-web-page-content.html">https://alfy.blog/2024/10/19/linking-directly-to-web-page-content.html</a>, See on <a href="https://news.ycombinator.com/item?id=41943098">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>Historically, we could link to a certain part of the page only if that part had an ID. All we needed to do was to link to the URL and add the <em>document fragment</em> (ID). If we wanted to link to a certain part of the page, we needed to anchor that part to link to it. This was until we were blessed with the <strong><a href="https://wicg.github.io/scroll-to-text-fragment/">Text fragments</a></strong>!</p>

<h3 id="what-are-text-fragments">What are Text fragments?</h3>

<p>Text fragments are a powerful feature of the modern web platform that allows for precise linking to specific text within a web page without the need to add an anchor! This feature is complemented by the <code>::target-text</code> CSS pseudo-element, which provides a way to style the highlighted text.</p>

<p>Text fragments work by appending a special syntax to the end of a URL; just like we used to append the ID after the hash symbol (<code>#</code>). The browser interprets this part of the URL, searches for the specified text on the page, and then scrolls to and highlights that text if it supports text fragments. If the user attempts to navigate the document by pressing tab, the focus will move on to the next focusable element after the text fragment.</p>
<h3 id="how-can-we-use-it">How can we use it?</h3>

<p>Here’s the basic syntax for a text fragment URL:</p>

<pre><code>
https://example.com/page.html#:~:text=[prefix-,]textStart[,textEnd][,-suffix]

</code></pre>

<p>Following the hash symbol, we add this special syntax <code>:~:</code> also known as <em>fragment directive</em> then <code>text=</code> followed by:</p>

<ol>
  <li><code>prefix-</code>: A text string preceded by a hyphen specifying what text should immediately precede the linked text. This helps the browser to link to the correct text in case of multiple matches. This part is not highlighted.</li>
  <li><code>textStart</code>: The beginning of the text you’re highlighting.</li>
  <li><code>textEnd</code>: The ending of the text you’re highlighting.</li>
  <li><code>-suffix</code>: A hyphen followed by a text string that behaves similarly to the prefix but comes after the text. Aslo helpful when multiple matches exist and doesn’t get highlighted with the linked text.</li>
</ol>

<p>For example, the following link:</p>

<pre><code>
https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#:~:text=without%20relying%20on%20the%20presence%20of%20IDs

</code></pre>

<p>This text fragment we are using is “without relying on the presence of IDs” but it’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">encoded</a>. If you follow <a href="https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#:~:text=without%20relying%20on%20the%20presence%20of%20IDs">this link</a>, it should look like the following:</p>

<p><img src="https://alfy.blog/images/2024/02/screenshot-01.png" alt="Screenshot from Google Chrome showing how highlighted text fragment look in Google Chrome"></p>

<p>We can also highlight a range of text by setting the <code>startText</code> and the <code>endText</code>. Consider the following example from the same URL:</p>

<pre><code>
https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#:~:text=using%20particular,don't%20control

</code></pre>

<p>The text fragment we are using is “using particular” followed by a comma then “don’t control”. If you follow <a href="https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#:~:text=using%20particular,don't%20control">this link</a>, it should look like the following:</p>

<p><img src="https://alfy.blog/images/2024/02/screenshot-02.png" alt="Screenshot from Google Chrome showing highlighted text fragment with start text and end text"></p>

<p>We can also highlight multiple texts by using ampersands. Consider the following:</p>

<pre><code>
https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#:~:text=using%20particular&amp;text=it%20allows

</code></pre>

<p>If you follow <a href="https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments#:~:text=using%20particular&amp;text=it%20allows">this link</a>, it should look like the following:</p>

<p><img src="https://alfy.blog/images/2024/02/screenshot-03.png" alt="Screenshot from Google Chrome showing different highlighted text fragment"></p>

<p>One of the interesting behaviors about text fragments, is if you’re linking to hidden content that’s discoverable through <em>find-in-page</em> feature (e.g. children of element with hidden attribute set to <code>until-found</code> or content of a closed details element), the hidden content will become visible. Let’s look at this behavior by linking to <a href="https://www.scottohara.me/blog/2022/09/12/details-summary.html">this article</a> from Scott O’Hara’s blog. The blog contains the details element that is closed by default.</p>

<p><img src="https://alfy.blog/images/2024/02/screenshot-04.png" alt="Screenshot from Scott O'Hara's blog showing a details section"></p>

<p>If we <a href="https://www.scottohara.me/blog/2022/09/12/details-summary.html#:~:text=Oh%20hi%20there.%20Forget%20your%20summary,%20didja">linked to the text fragment</a> inside the details element, it will open automatically:</p>

<pre><code>
https://www.scottohara.me/blog/2022/09/12/details-summary.html#:~:text=Oh%20hi%20there.%20Forget%20your%20summary,%20didja

</code></pre>

<p><img src="https://alfy.blog/images/2024/02/screenshot-05.png" alt="Screenshot from Scott O'Hara's blog showing a details section and it opens because it matches the text fragment inside the details section"></p>

<p><strong>Note</strong> that this behavior is <strong>only available in Google Chrome</strong> as it’s the only browser to support discoverable content.</p>

<h3 id="styling-highlighted-fragments">Styling highlighted fragments</h3>

<p>If the browser supports text fragments, we can change the style of the highlighted text by using the <code>::target-text</code> pseudo-element</p>

<pre><code>::target-text {
    background-color: yellow;
}
</code></pre>

<p>Note that we are only allowed to change the following properties:</p>

<ul>
  <li>color</li>
  <li>background-color</li>
  <li>text-decoration and its associated properties (including text-underline-position and text-underline-offset)</li>
  <li>text-shadow</li>
  <li>stroke-color, fill-color, and stroke-width</li>
  <li>custom properties</li>
</ul>

<h3 id="browser-support-and-fallback-behaviour">Browser support and fallback behaviour</h3>

<p>Text fragments are currently <a href="https://caniuse.com/mdn-html_elements_a_text_fragments">supported in all the browsers</a>. The pseudo-element <code>::target-text</code> is not yet supported is Safari but it’s now available in the Technology Preview version. If this feature is not supported in the browser, it will degrade gracefully and the page will load without highlighting or scrolling to the text.</p>

<p>The default style for the highlight is different based on the browser. The color of the highlight is different across the different browsers. The highlighted area is bigger in Safari spanning the whole line-height. In Firefox and Chrome, only the text is highlighted and the spaces between the lines are empty.</p>

<p><img src="https://alfy.blog/images/2024/02/comparison.png" alt="Demonstration of the differences in text highlight between the different browsers"></p>

<p>We can detect if the feature is supported or not using <code>document.fragmentDirective</code>. It will return an empty FragmentDirective object, if supported or will return undefined if it’s not.</p>

<h3 id="closing-thoughts">Closing thoughts</h3>

<p>My first encounter with text fragments was through links generated by Google Search results. Initially, I assumed it was a Chrome-specific feature and not part of a broader web standard. However, I soon realized that this functionality was actually built upon the open web, available to any browser that chooses to implement it.</p>

<p>I’d love to see this feature used more broadly, particularly by responsible generative AI systems. Imagine AI that can provide direct, context-sensitive links to the exact content you’re interested in, using text fragments for precise references. This would not only increase transparency but also improve the user experience when navigating AI-generated content.</p>

<p>Looking ahead, it would be fantastic if text fragments were more accessible to all users, not just those with technical knowledge. What if browsers offered built-in features that allowed non-technical users to highlight text and generate links to specific paragraphs with ease? This could be through a native browser feature or even a simple browser extension—either way, it would make deep linking a breeze for everyone.</p>

<p>Finally, I’d like to express my sincere thanks to <a href="https://hannaholukoye.com/">Hannah Olukoye</a> and <a href="https://meiert.com/">Jens Oliver Meiert</a> for the time they’ve taken to share their invaluable feedback and corrections.</p>

<h3 id="update-20th-oct-2024">Update, 20th Oct, 2024</h3>

<p>It turns out that the ability to generate a link to a specific piece of text is already built into Chromium-based browsers, as <a href="https://x.com/HosamSultan_">Hostam Sultan</a> <a href="https://x.com/HosamSultan_/status/1847768998349328553">clarified on X</a> (formerly Twitter). If you’re using Chrome, simply highlight some text, right-click, and you’ll find the “Copy link to highlight” option in the context menu.</p>

<h3 id="additional-resources">Additional resources</h3>

<ul>
  <li>URL Fragment Text Directives - <a href="https://wicg.github.io/scroll-to-text-fragment/">W3C Draft Community Group Report</a></li>
  <li>Text Fragments: <a href="https://developer.mozilla.org/en-US/docs/Web/URI/Fragment/Text_fragments">MDN</a></li>
  <li>Style Highlights: <a href="https://drafts.csswg.org/css-pseudo/#highlight-styling">CSSWG Draft</a></li>
  <li>Support for Text Fragments: <a href="https://caniuse.com/mdn-html_elements_a_text_fragments">CanIUse</a></li>
</ul>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The brain's waste clearing lymphatic system shown in people for first time (247 pts)]]></title>
            <link>https://www.nih.gov/news-events/nih-research-matters/brain-waste-clearance-system-shown-people-first-time</link>
            <guid>41942096</guid>
            <pubDate>Fri, 25 Oct 2024 03:56:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nih.gov/news-events/nih-research-matters/brain-waste-clearance-system-shown-people-first-time">https://www.nih.gov/news-events/nih-research-matters/brain-waste-clearance-system-shown-people-first-time</a>, See on <a href="https://news.ycombinator.com/item?id=41942096">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-content">
                <h2>You are here</h2>          
                <div about="/news-events/nih-research-matters/brain-waste-clearance-system-shown-people-first-time" typeof="sioc:Item foaf:Document" role="main">

  
  <p><span property="dc:date" datatype="xsd:dateTime" content="2024-10-22T00:00:00-04:00">October 22, 2024</span></p><div><div><h3>At a Glance</h3>

<ul>
	<li>A study in five volunteers undergoing surgery confirmed the existence of channels that may help drain waste from the brain.</li>
	<li>The&nbsp;results highlight the importance of ongoing research to boost the functioning of this waste-clearance system, called the glymphatic system.</li>
</ul></div><p>Though less well-known than the body’s blood vessels, the lymphatic system is also vital to health. The network of lymphatic vessels threaded throughout the body removes dead cells and other waste from the bloodstream. It also helps transport the immune cells that fight infections.</p>

<p>It was once thought that the lymphatic system didn’t reach into the brain. But over the last dozen years, researchers have found a system of vessels containing cerebrospinal fluid in brain tissue in mice. These vessels appear to connect to the lymphatic system and to help clear toxins from the brain.</p>

<p>Studies suggest that age-related or physical damage to this brain waste-clearing system, called the glymphatic system, may contribute to the development of Alzheimer’s disease and other cognitive disorders.</p>

<p>Researchers have observed the real-time workings of the glymphatic system in mice. Studies using human brain samples taken after death found hints of such vessels. But to date, the existence of a functioning glymphatic system hadn’t been confirmed in living people.</p>

<p>In a new study, funded in part by NIH, researchers led by Dr. Juan Piantino from Oregon Health &amp; Science University recruited five volunteers who needed surgery to remove a brain tumor. During this surgery, the volunteers received an injection of a dye called gadolinium into their cerebrospinal fluid. They then underwent MRI scans to track the passage of dye into the brain. Results from the study were published on October 7, 2024, in the <em>Proceedings of the National Academy of Sciences</em>.</p>

<p>One volunteer underwent MRI using a technology called T2/FLAIR at 12 and 24 hours after surgery, and the other 4 underwent T2/FLAIR imaging at 24 and 48 hours after surgery.</p>

<p>The scans showed cerebrospinal fluid flowing into the brain through distinct channels—along the perivascular spaces, the fluid-filled spaces that run alongside blood vessels in the brain. These findings match earlier imaging results seen in mice. Dye could also be seen moving from these spaces into the functional tissue of the brain.&nbsp;</p>

<p>“This shows that cerebrospinal fluid doesn’t just get into the brain randomly, as if you put a sponge in a bucket of water,” Piantino says. “It goes through these channels.”</p>

<p>Other studies have suggested that the glymphatic system may be most active during sleep. These new results support the importance of efforts to boost or repair the glymphatic system, such as improving sleep quality for people at risk for Alzheimer’s disease and other dementias.</p>

<p>—by Sharon Reynolds</p></div><h2>Related Links</h2><ul><li><a href="https://www.nih.gov/news-events/nih-research-matters/study-shows-how-aura-may-lead-migraine-headache" target="_top">Study Shows How Aura May Lead to Migraine Headache</a></li><li><a href="https://www.nih.gov/news-events/nih-research-matters/gaps-allow-substances-move-out-brain" target="_top">Gaps Allow Substances to Move in and Out of the Brain</a></li><li><a href="https://www.nih.gov/news-events/nih-research-matters/immune-cells-control-waste-clearance-brain" target="_top">Immune Cells Control Waste Clearance in the Brain</a></li><li><a href="https://www.nih.gov/news-events/nih-research-matters/boosting-brains-waste-removal-system-could-improve-alzheimers-outcomes" target="_top">Boosting Brain’s Waste Removal System Could Improve Alzheimer’s Outcomes</a></li><li><a href="https://www.nih.gov/news-events/nih-research-matters/impaired-brain-drainage-aging-alzheimers" target="_top">Impaired Brain Drainage in Aging and Alzheimer’s</a></li><li><a href="https://www.nih.gov/news-events/nih-research-matters/brain-cleaning-system-uses-lymphatic-vessels" target="_top">Brain Cleaning System Uses Lymphatic Vessels</a></li><li><a href="https://www.nih.gov/news-events/nih-research-matters/lymphatic-vessels-discovered-central-nervous-system" target="_top">Lymphatic Vessels Discovered in Central Nervous System</a></li><li><a href="https://www.nih.gov/news-events/nih-research-matters/how-sleep-clears-brain" target="_top">How Sleep Clears the Brain</a></li><li><a href="https://www.nih.gov/news-events/nih-research-matters/new-brain-cleaning-system-discovered" target="_top">New Brain Cleaning System Discovered</a></li><li><a href="https://www.ninds.nih.gov/health-information/public-education/brain-basics" target="_top">Brain Basics</a></li></ul><p><strong>References:&nbsp;</strong><a href="https://pubmed.ncbi.nlm.nih.gov/39374384/">The perivascular space is a conduit for cerebrospinal fluid flow in humans: A proof-of-principle report.</a> Yamamoto EA, Bagley JH, Geltzeiler M, Sanusi OR, Dogan A, Liu JJ, Piantino J. Proc Natl Acad Sci U S A. 2024 Oct 15;121(42):e2407246121. doi: 10.1073/pnas.2407246121. Epub 2024 Oct 7. PMID: 39374384.</p><p><strong>Funding:&nbsp;</strong>NIH’s National Heart, Lung, and Blood Institute (NHLBI); Medical Research Foundation of Oregon; North American Skull Base Society.</p>  
  
</div>
                
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cerebras Inference now 3x faster: Llama3.1-70B breaks 2,100 tokens/s (139 pts)]]></title>
            <link>https://cerebras.ai/blog/cerebras-inference-3x-faster</link>
            <guid>41941883</guid>
            <pubDate>Fri, 25 Oct 2024 03:04:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cerebras.ai/blog/cerebras-inference-3x-faster">https://cerebras.ai/blog/cerebras-inference-3x-faster</a>, See on <a href="https://news.ycombinator.com/item?id=41941883">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Today we’re announcing the biggest update to Cerebras Inference since launch. Cerebras Inference now runs Llama 3.1-70B at an astounding 2,100 tokens per second – a 3x performance boost over the prior release. For context, this performance is:</p>
<ul>
<li>
<ul>
<li>16x faster than the fastest GPU solution</li>
<li>8x faster than GPUs running Llama3.1-3B, a model 23x smaller</li>
<li>Equivalent to a new GPU generation’s performance upgrade (H100/A100) in a single software release</li>
</ul>
</li>
</ul>
<p>Fast inference is the key to unlocking the next generation of AI apps. From voice, video, to advanced reasoning, fast inference makes it possible to build responsive, intelligent applications that were previously out of reach. From Tavus revolutionizing video generation to GSK accelerating drug discovery workflows, leading companies are already using Cerebras Inference to push the boundaries of what’s possible. Try Cerebras Inference using chat or API at inference.cerebras.ai.</p>
<h3>Benchmarks</h3>
<p>Cerebras Inference has been rigorously tested by Artificial Analysis, a third-party benchmarking organization. We reproduce their performance charts below.</p>
</div><p>In output speed per user, Cerebras Inference is in a league of its own – 16x faster than the most optimized GPU solution, 68x faster than hyperscale clouds, and 4-8x faster than other AI accelerators.</p><p>Time to first token is critical for real time applications. Cerebras is tied second place in first token latency, showing the advantage of a wafer-scale integrated solution vs. complex networked solutions.</p><p>Total response time – measuring a full turn of input and output – is a good proxy for multi-step agentic workflows. Here Cerebras Inference completes a full request in just 0.4 of a second vs. 1.1 to 4.2 seconds on GPU based solutions. For agents, this means getting up to 10x more work done in the same time. For reasoning models, this enables 10x more reasoning steps without increasing response time.</p><div><p>Cerebras Inference running Llama3.1 70B is now so fast that it outruns GPU based inference running Llama3.1 3B. The Wafer Scale Engine runs an AI model 23x larger at 8x speed for a combined 184x performance advantage.</p>
<h3>Optimized kernels, stack, and ML</h3>
<p>The first release of Cerebras Inference in August set new speed records and made Llama3.1-70B an instantaneous experience. While it was incredibly fast, it was the first implementation of inference on the Wafer Scale Engine and utilized only a fraction of its peak bandwidth, compute, and IO capacity. Today’s release is the culmination of numerous software, hardware, and ML improvements we made to our stack to greatly improve the utilization and real-world performance of Cerebras Inference.</p>
<p>We’ve re-written or optimized the most critical kernels such as MatMul, reduce/broadcast, element wise ops, and activations. Wafer IO has been streamlined to run asynchronously from compute. This release also implements speculative decoding, a widely used technique that uses a small model and large model in tandem to generate answers faster. As a result of this feature, you may observe a greater variance in output speed – 20% higher or lower than the 2,100 tokens/sec average is normal.</p>
<p>Model precision is unchanged – all models continue to use 16-bit original weights. Model output accuracy is likewise unchanged as verified by Artificial Analysis.</p>
<h3>What fast inference enables</h3>
<p>The impact of Cerebras Inference’s unprecedented speed is already transforming how organizations develop and deploy AI apps. In pharmaceutical research, Kim Branson, SVP of AI and ML at GSK, says: “With Cerebras’ inference speed, GSK is developing innovative AI applications, such as intelligent research agents, that will fundamentally improve the productivity of our researchers and drug discovery process.”</p>
<p>The dramatic speed improvement is game-changing for real-time AI applications, as demonstrated by LiveKit, which powers ChatGPT’s voice mode. As CEO Russ d’Sa explains: “When building voice AI, inference is the slowest stage in your pipeline. With Cerebras Inference, it’s now the fastest. A full pass through a pipeline consisting of cloud-based speech-to-text, 70B-parameter inference using Cerebras Inference, and text-to-speech, runs faster than just inference alone on other providers. This is a game changer for developers building voice AI that can respond with human-level speed and accuracy.”</p>
<p>Fast inference is the key enabler for next gen AI applications that leverage more test-time compute for greater model capability. As demonstrated by models like GPT-o1, the ability to perform extensive chain-of-thought reasoning directly translates to breakthrough performance in reasoning, coding, and research tasks. Using Cerebras Inference, models think deeply before responding without the typical minutes-long latency penalties. This makes Cerebras Inference the ideal platform for developers looking to build systems that deliver both greater runtime intelligence and responsive user experiences.</p>
<h3>Conclusion</h3>
<p>Today’s 3x performance improvement shows what’s possible when realizing the full potential of the Wafer Scale Engine for inference. At 2,100 tokens per second for Llama3.1-70B, we’ve delivered the equivalent of more than a hardware generation’s worth of performance in a single software release. Our team continues to optimize both software and hardware capabilities, and we will be expanding our model selection, context lengths, and API features in the coming weeks.</p>
<p><a href="http://chat.cerebras.ai/">Try chat</a><br>
<a href="https://www.businesswire.com/news/home/20241024856476/en/Cerebras-Triples-its-Industry-Leading-Inference-Performance-Setting-New-All-Time-Record">Press release</a></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenFeature – a vendor-agnostic, community-driven API for feature flagging (170 pts)]]></title>
            <link>https://github.com/open-feature</link>
            <guid>41941493</guid>
            <pubDate>Fri, 25 Oct 2024 01:26:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/open-feature">https://github.com/open-feature</a>, See on <a href="https://news.ycombinator.com/item?id=41941493">Hacker News</a></p>
<div id="readability-page-1" class="page"><article itemprop="text"><p dir="auto">
  <themed-picture data-catalyst-inline="true"><picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/open-feature/community/0e23508c163a6a1ac8c0ced3e4bd78faafe627c7/assets/logo/horizontal/white/openfeature-horizontal-white.svg">
    <img alt="OpenFeature Logo" src="https://raw.githubusercontent.com/open-feature/community/0e23508c163a6a1ac8c0ced3e4bd78faafe627c7/assets/logo/horizontal/black/openfeature-horizontal-black.svg">
  </picture></themed-picture>
</p>
<p dir="auto"><h2 dir="auto">Welcome to the OpenFeature project 👋</h2><a id="user-content-welcome-to-the-openfeature-project-" aria-label="Permalink: Welcome to the OpenFeature project 👋" href="#welcome-to-the-openfeature-project-"></a></p>
<p dir="auto">
  <a href="https://openfeature.dev/" rel="nofollow">OpenFeature</a> is an open specification that provides a vendor-agnostic, community-driven API for feature flagging that works with your favorite feature flag management tool or in-house solution.
</p>
<p dir="auto">
  <a href="https://openfeature.dev/docs/reference/intro" rel="nofollow">Learn More 📚</a>
  ·
  <a href="https://openfeature.dev/docs/tutorials/five-minutes-to-feature-flags" rel="nofollow">Get Started 🔭</a>
  ·
  <a href="https://openfeature.dev/community/CONTRIBUTOR_LADDER" rel="nofollow">Contribute 😍</a>
  ·
  <a href="https://openfeature.dev/ecosystem" rel="nofollow">Discover the Ecosystem 🧭</a>
</p>
<hr>
<p dir="auto"><h2 dir="auto">👋 Getting involved</h2><a id="user-content--getting-involved" aria-label="Permalink: 👋 Getting involved" href="#-getting-involved"></a></p>
<p dir="auto">There is a lot to do! If you're interested in getting involved, please join our <a href="https://github.com/open-feature/community?tab=readme-ov-file#discussions">Slack channel</a>, the <a href="https://github.com/open-feature/community?tab=readme-ov-file#mailing-list">mailing lists</a>, and <a href="https://github.com/open-feature/community?tab=readme-ov-file#community-meetings">attend the community meetings</a>.  We're a friendly, collaborative group and look forward to working together!</p>
<p dir="auto">Learn how to get involved in the <a href="https://openfeature.dev/community/CONTRIBUTOR_LADDER" rel="nofollow">OpenFeature Contributor Ladder</a>.</p>
<p dir="auto"><h2 dir="auto">🦺 Help keep our community safe, inviting, and inclusive</h2><a id="user-content--help-keep-our-community-safe-inviting-and-inclusive" aria-label="Permalink: 🦺 Help keep our community safe, inviting, and inclusive" href="#-help-keep-our-community-safe-inviting-and-inclusive"></a></p>
<p dir="auto">OpenFeature follows the <a href="https://github.com/cncf/foundation/blob/main/code-of-conduct.md">CNCF Community Code of Conduct</a>. Please abide by this Code of Conduct when interacting with all repositories under the OpenFeature umbrella and when interacting with people.</p>
<p dir="auto"><h2 dir="auto">👾 Reporting Security Incidents</h2><a id="user-content--reporting-security-incidents" aria-label="Permalink: 👾 Reporting Security Incidents" href="#-reporting-security-incidents"></a></p>
<p dir="auto">Please be mindful that Security-related issues should be reported through our <a href="https://github.com/open-feature/.github/blob/main/SECURITY.md">Security Policy</a> as Security-related issues and vulnerabilities can be exploited and we request confidentiality whenever possible.</p>
<hr>
<p dir="auto">OpenFeature is a <a href="https://cncf.io/" rel="nofollow">CNCF</a> <a href="https://www.cncf.io/projects/" rel="nofollow">incubating</a> project.</p>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[U.S. Consumer Watchdog Cautions Businesses on Surveillance of Workers (110 pts)]]></title>
            <link>https://www.wsj.com/articles/u-s-consumer-watchdog-cautions-businesses-on-surveillance-of-workers-8262bee3</link>
            <guid>41941052</guid>
            <pubDate>Fri, 25 Oct 2024 00:05:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/articles/u-s-consumer-watchdog-cautions-businesses-on-surveillance-of-workers-8262bee3">https://www.wsj.com/articles/u-s-consumer-watchdog-cautions-businesses-on-surveillance-of-workers-8262bee3</a>, See on <a href="https://news.ycombinator.com/item?id=41941052">Hacker News</a></p>
Couldn't get https://www.wsj.com/articles/u-s-consumer-watchdog-cautions-businesses-on-surveillance-of-workers-8262bee3: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Bitwarden SDK relicensed from proprietary to GPLv3 (854 pts)]]></title>
            <link>https://github.com/bitwarden/sdk-internal/commit/db648d7ea85878e9cce03283694d01d878481f6b</link>
            <guid>41940580</guid>
            <pubDate>Thu, 24 Oct 2024 22:41:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/bitwarden/sdk-internal/commit/db648d7ea85878e9cce03283694d01d878481f6b">https://github.com/bitwarden/sdk-internal/commit/db648d7ea85878e9cce03283694d01d878481f6b</a>, See on <a href="https://news.ycombinator.com/item?id=41940580">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                      
      <tr data-position="0">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542HL1" data-line-number="..."></td>
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542HR1" data-line-number="..."></td>
    <td>@@ -1,6 +1,6 @@</td>
  </tr>

    <tr data-hunk="0a508202cce614a2270fb0ff3dc75590945b0744e6fda3863c4d40eb47c27de9">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L1" data-line-number="1"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R1" data-line-number="1"></td>

  <td>
    <span data-code-marker=" ">[<span>workspace</span>]</span></td>
</tr>




    <tr data-hunk="0a508202cce614a2270fb0ff3dc75590945b0744e6fda3863c4d40eb47c27de9">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L2" data-line-number="2"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R2" data-line-number="2"></td>

  <td>
    <span data-code-marker=" "><span>resolver</span> = <span><span>"</span>2<span>"</span></span></span></td>
</tr>




    <tr data-hunk="0a508202cce614a2270fb0ff3dc75590945b0744e6fda3863c4d40eb47c27de9">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L3" data-line-number="3"></td>

    <td></td>

  <td>
    <span data-code-marker="-"><span>members</span> = [<span><span>"</span>crates/*<span>"</span></span>]</span></td>
</tr>




    <tr data-hunk="0a508202cce614a2270fb0ff3dc75590945b0744e6fda3863c4d40eb47c27de9">
    <td></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R3" data-line-number="3"></td>

  <td>
    <span data-code-marker="+"><span>members</span> = [<span><span>"</span>crates/*<span>"</span></span><span>, </span><span><span>"</span><span>bitwarden_license/*</span><span>"</span></span>]</span></td>
</tr>




    <tr data-hunk="0a508202cce614a2270fb0ff3dc75590945b0744e6fda3863c4d40eb47c27de9">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L4" data-line-number="4"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R4" data-line-number="4"></td>

  <td>
    <span data-code-marker=" "><br></span></td>
</tr>




    <tr data-hunk="0a508202cce614a2270fb0ff3dc75590945b0744e6fda3863c4d40eb47c27de9">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L5" data-line-number="5"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R5" data-line-number="5"></td>

  <td>
    <span data-code-marker=" "><span><span>#</span> Global settings for all crates should be defined here</span></span></td>
</tr>




    <tr data-hunk="0a508202cce614a2270fb0ff3dc75590945b0744e6fda3863c4d40eb47c27de9">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L6" data-line-number="6"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R6" data-line-number="6"></td>

  <td>
    <span data-code-marker=" ">[<span>workspace</span>.<span>package</span>]</span></td>
</tr>




      <tr data-position="8">
    <td colspan="2">
        <a href="#diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542" id="expand-link-8-diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542" aria-label="Expand All" data-url="/bitwarden/sdk-internal/blob_excerpt/c11128a804138f782b5abc159b658e3a4faf12fa?diff=unified&amp;in_wiki_context=&amp;last_left=6&amp;last_right=6&amp;left=27&amp;left_hunk_size=7&amp;mode=100644&amp;path=Cargo.toml&amp;right=27&amp;right_hunk_size=7" data-left-range="7-15" data-right-range="7-15">
          
        </a>
        <tool-tip id="tooltip-eb6421d3-fc5b-410b-915a-7bc615cd006b" for="expand-link-8-diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542" popover="manual" data-direction="ne" data-type="label" data-view-component="true">Expand All</tool-tip>
    </td>
    <td>@@ -27,7 +27,7 @@ bitwarden-exporters = { path = "crates/bitwarden-exporters", version = "=1.0.0"</td>
  </tr>

    <tr data-hunk="fafe8741ccaaaa753175796f49ab296209a8490ec98ed35921c258fb412436bb">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L27" data-line-number="27"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R27" data-line-number="27"></td>

  <td>
    <span data-code-marker=" "><span>bitwarden-fido</span> = { <span>path</span> = <span><span>"</span>crates/bitwarden-fido<span>"</span></span>, <span>version</span> = <span><span>"</span>=1.0.0<span>"</span></span> }</span></td>
</tr>




    <tr data-hunk="fafe8741ccaaaa753175796f49ab296209a8490ec98ed35921c258fb412436bb">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L28" data-line-number="28"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R28" data-line-number="28"></td>

  <td>
    <span data-code-marker=" "><span>bitwarden-generators</span> = { <span>path</span> = <span><span>"</span>crates/bitwarden-generators<span>"</span></span>, <span>version</span> = <span><span>"</span>=1.0.0<span>"</span></span> }</span></td>
</tr>




    <tr data-hunk="fafe8741ccaaaa753175796f49ab296209a8490ec98ed35921c258fb412436bb">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L29" data-line-number="29"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R29" data-line-number="29"></td>

  <td>
    <span data-code-marker=" "><span>bitwarden-send</span> = { <span>path</span> = <span><span>"</span>crates/bitwarden-send<span>"</span></span>, <span>version</span> = <span><span>"</span>=1.0.0<span>"</span></span> }</span></td>
</tr>




    <tr data-hunk="fafe8741ccaaaa753175796f49ab296209a8490ec98ed35921c258fb412436bb">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L30" data-line-number="30"></td>

    <td></td>

  <td>
    <span data-code-marker="-"><span>bitwarden-sm</span> = { <span>path</span> = <span><span>"</span><span>crates</span>/bitwarden-sm<span>"</span></span>, <span>version</span> = <span><span>"</span>=1.0.0<span>"</span></span> }</span></td>
</tr>




    <tr data-hunk="fafe8741ccaaaa753175796f49ab296209a8490ec98ed35921c258fb412436bb">
    <td></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R30" data-line-number="30"></td>

  <td>
    <span data-code-marker="+"><span>bitwarden-sm</span> = { <span>path</span> = <span><span>"</span><span>bitwarden_license</span>/bitwarden-sm<span>"</span></span>, <span>version</span> = <span><span>"</span>=1.0.0<span>"</span></span> }</span></td>
</tr>




    <tr data-hunk="fafe8741ccaaaa753175796f49ab296209a8490ec98ed35921c258fb412436bb">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L31" data-line-number="31"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R31" data-line-number="31"></td>

  <td>
    <span data-code-marker=" "><span>bitwarden-vault</span> = { <span>path</span> = <span><span>"</span>crates/bitwarden-vault<span>"</span></span>, <span>version</span> = <span><span>"</span>=1.0.0<span>"</span></span> }</span></td>
</tr>




    <tr data-hunk="fafe8741ccaaaa753175796f49ab296209a8490ec98ed35921c258fb412436bb">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L32" data-line-number="32"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R32" data-line-number="32"></td>

  <td>
    <span data-code-marker=" "><br></span></td>
</tr>




    <tr data-hunk="fafe8741ccaaaa753175796f49ab296209a8490ec98ed35921c258fb412436bb">
    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542L33" data-line-number="33"></td>

    <td id="diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542R33" data-line-number="33"></td>

  <td>
    <span data-code-marker=" "><span><span>#</span> External crates that are expected to maintain a consistent version across all crates</span></span></td>
</tr>




  <tr data-position="">
    <td colspan="2">
          <a href="#diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542" id="expand-down-link--diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542" aria-label="Expand Down" data-url="/bitwarden/sdk-internal/blob_excerpt/c11128a804138f782b5abc159b658e3a4faf12fa?diff=unified&amp;direction=down&amp;in_wiki_context=&amp;last_left=33&amp;last_right=33&amp;left=90&amp;left_hunk_size=&amp;mode=100644&amp;path=Cargo.toml&amp;right=90&amp;right_hunk_size=" data-left-range="34-89" data-right-range="34-89">
            
          </a>
          <tool-tip id="tooltip-2604fbf7-a6c0-4f9d-8ac6-fbd948d0e347" for="expand-down-link--diff-2e9d962a08321605940b5a657135052fbcef87b5e360662bb527c96d9a615542" popover="manual" data-direction="ne" data-type="label" data-view-component="true">Expand Down</tool-tip>
    </td>
    <td></td>
  </tr>


                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ST Book, the Notebook Atari ST (105 pts)]]></title>
            <link>https://www.goto10retro.com/p/st-book-the-notebook-atari-st</link>
            <guid>41940266</guid>
            <pubDate>Thu, 24 Oct 2024 21:57:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.goto10retro.com/p/st-book-the-notebook-atari-st">https://www.goto10retro.com/p/st-book-the-notebook-atari-st</a>, See on <a href="https://news.ycombinator.com/item?id=41940266">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><p><span>The first portable Atari ST computer was the Stacy, which I have previously written about (see: </span><a href="https://www.goto10retro.com/p/atari-stacy-vs-macintosh-portable" rel="">Atari STacy vs. Macintosh Portable</a><span>), but do you know about the ST Book, the notebook Atari ST?</span></p><p><span>Announced in October 1991, about the same time as the </span><a href="https://en.wikipedia.org/wiki/PowerBook_100" rel="">PowerBook 100</a><span> (the first Macintosh Notebook), the amazing ST Book is relatively unknown, probably because only about 1000 or so were made. I’m not even sure if it was ever actually sold in the US.</span></p><blockquote><p>The ST Book originally started its R&amp;D life as a pen-based computer and something called the STylus or ST Pad. That would have been something to see!</p></blockquote><p>To my mind, this is the rarest of the Atari ST computers and I daresay it will be practically impossible to find one today, and if you did I can’t even imagine what it would sell for.</p><p>Essentially the ST Book was an Atari STE squeezed into a tiny form factor.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg" width="1456" height="1456" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1456,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2d0d18bd-5a3c-4d6d-95e6-8f8acc4fce4c_1944x1944.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>The 10.4” LCD display was monochrome, non-backlit and the same 640x400 resolution that the ST always had for its high-resolution, monochrome output. It used a high-contrast, passive-matrix screen like many early low-cost portables</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-150359588" href="https://www.goto10retro.com/p/st-book-the-notebook-atari-st#footnote-1-150359588" target="_self" rel="">1</a></span><span>, which meant you had to use it in a lighted area. The CPU was still a 68000 running at 8Mhz (the PowerBook 100 had a 68000 running at 16Mhz) and came with 1MB of RAM (a 4MB version was also available). Most ports were largely the same, although the MIDI ports were mini-sized.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic" width="1456" height="158" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:158,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:260308,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/heic&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7844b877-95aa-4afc-8d07-1f6a86f6918d_4032x438.heic 1456w" sizes="100vw"></picture></div></a><figcaption>Ports, left-to-right: AC adapter, mini MIDI, DMA, serial, parallel.</figcaption></figure></div><p><span>The ST Book had TOS 2.06 in ROM, like the Mega STE. Its case color was the dark gray color of the </span><a href="https://www.goto10retro.com/p/i-picked-up-an-atari-portfolio" rel="">Atari Portfolio</a><span>, which would also be used for the </span><a href="https://www.goto10retro.com/p/atari-falcon030" rel="">Atari Falcon030</a><span>.</span></p><p>The keyboard looks really nice. It is certainly more compact than a regular ST keyboard, with no separate number pad (although you there was a keypad lock key to allow you to use some of the keys as a number pad). I really like the white color and it even has a dedicated “Atari” key on the bottom left, although I’m not sure what that would have been used for.</p><p>Although basically an STE, the ST Book did offer some interesting innovations:</p><ul><li><p><span>Light weight. The ST Book weighed only 4.2 pounds, which was remarkably light for a notebook back then. The PowerBook 100 was nearly a pound heavier at 5.1 pounds. The </span><a href="https://www.goto10retro.com/p/atari-stacy-vs-macintosh-portable" rel="">STacy</a><span> (and Mac Portable) weighed about 15 pounds!</span></p></li><li><p>No built-in floppy drive. Like the PowerBook 100, the ST Book eschewed the floppy drive to save weight. It did have a built-in 40MB IDE hard drive, the first ST to use IDE (which would also later show up in the Falcon030). To transfer files to it, you could use included software to connect it to another ST via parallel or serial cables and copy the files over. An external floppy drive that connected to the DMA port was also supposed to be available (The ST Book did not have a standard floppy port, which would have allowed existing floppy drives to be used with it, probably because the physical port would have been too large for the ST Book). The PowerBook 100 originally came with an external floppy drive.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic" width="1456" height="1381" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1381,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1289107,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/heic&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb89fbc6d-3b69-40db-9dd7-106d8ea8f8b1_3024x2868.heic 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div></li><li><p>Vector Pad. At this point, track pads had not been invented. The STacy had a built-in trackball, which was common on portable computers. In fact, that’s what the PowerMac 100 used. The ST Book went with something more unique: a vector pad, which is probably more similar to that little “nub” stick you may have seen on some IBM ThinkBooks. You could slightly push the vector pad, a pressure-sensitive disc, in directions to move the mouse around. The more pressure you applied, the faster the mouse moved. This pad was placed in the top right, above the keyboard, which I think would have been incredibly awkward to work with.</p></li><li><p>Long battery life. The ST Book had a total power consumption of just 1.25 watts (the STacy was 6 watts). The hard drive is powered down when not in use, something that is common today, but was not back then. Special RAM was used that did not need to always be powered. The LCD screen had a “video saver” capability to update from its own RAM rather than main RAM and it could be blanked out to save power. The ST Book also had a save and resume feature, similar to the sleep option that all laptops have today. All of this meant the ST Book could get about 5 to 10 hours using its optional rechargeable NiCad battery. Amazingly, the ST Book could also run for a couple hours on seven AA batteries!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic" width="1456" height="876" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:876,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1518952,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/heic&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F24b334d5-d98c-4498-a664-a50d6e2096b2_4032x2427.heic 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div></li></ul><div data-attrs="{&quot;url&quot;:&quot;https://www.goto10retro.com/p/st-book-the-notebook-atari-st?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="CaptionedButtonToDOM"><p>Please consider sharing this post to your retro computing friends!</p><p data-attrs="{&quot;url&quot;:&quot;https://www.goto10retro.com/p/st-book-the-notebook-atari-st?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;}" data-component-name="ButtonCreateButton"><a href="https://www.goto10retro.com/p/st-book-the-notebook-atari-st?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div><p>For all its innovations, the ST Book had some odd omissions.</p><p>Strangely, the ST Book did not have a great way to use an external mouse. To do so, you had to first connect an external Mega STE (or Mega ST) keyboard and then use the mouse connected to that. As far as I know those keyboards were never actually sold separately, so unless you already had a Mega STE or Mega ST you would have been stuck with using the vector pad.</p><p><span>There was also no way to connect an external monitor and thus no way to get color support. Apparently this was removed to save power. Although the ST Book did have an expansion connector, it did not have a standard cartridge port. Apparently it was technically possible to connect a cartridge to the expansion connector, but it seems unlikely that anyone ever did that. This meant that the popular </span><a href="https://www.goto10retro.com/p/gadgets-by-small-mac-emulation-on" rel="">Spectre Macintosh emulator</a><span> would not work with the ST Book.</span></p><p>Compatibility, apart from games, should have been about the same as the Mega STE.</p><p><span>From what I can tell the ST Book was originally priced at about $2000 (about $4600 in 2024). The PowerBook 100 originally sold for $2500 (about $5700 in 2024), but it came with the external floppy, NiCad battery pack and charger, all of which were optional with the ST Book</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-2-150359588" href="https://www.goto10retro.com/p/st-book-the-notebook-atari-st#footnote-2-150359588" target="_self" rel="">2</a></span><span>.</span></p><p><span>The </span><a href="https://www.atarimania.com/atari-magazine-issue-st-format-issue-34_1427.html" rel="">May 1992 issue of ST Format</a><span> had a great article about a pre-production ST Book that they were able to test. Overall, they really liked it, but did have complains about the vector pad, which they felt was difficult to use accurately.</span></p><figure data-drag-handle="" data-component-name="ImageGallery"><div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0035038f-9f0a-4df5-b221-6dc2cbb47eb1_1100x1501.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0035038f-9f0a-4df5-b221-6dc2cbb47eb1_1100x1501.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0035038f-9f0a-4df5-b221-6dc2cbb47eb1_1100x1501.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0035038f-9f0a-4df5-b221-6dc2cbb47eb1_1100x1501.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0035038f-9f0a-4df5-b221-6dc2cbb47eb1_1100x1501.jpeg 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F856eb7ac-28dc-4c28-8d55-d46fb8d3cf07_1100x1511.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F856eb7ac-28dc-4c28-8d55-d46fb8d3cf07_1100x1511.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F856eb7ac-28dc-4c28-8d55-d46fb8d3cf07_1100x1511.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F856eb7ac-28dc-4c28-8d55-d46fb8d3cf07_1100x1511.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F856eb7ac-28dc-4c28-8d55-d46fb8d3cf07_1100x1511.jpeg 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2781a50-bccb-494c-9e1b-db99c973aa2a_1100x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2781a50-bccb-494c-9e1b-db99c973aa2a_1100x1500.jpeg 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2781a50-bccb-494c-9e1b-db99c973aa2a_1100x1500.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2781a50-bccb-494c-9e1b-db99c973aa2a_1100x1500.jpeg 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa2781a50-bccb-494c-9e1b-db99c973aa2a_1100x1500.jpeg 474w" width="474"></picture></div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02d19b59-fe6f-4900-9deb-a209573e410e_1100x1511.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02d19b59-fe6f-4900-9deb-a209573e410e_1100x1511.jpeg 720w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02d19b59-fe6f-4900-9deb-a209573e410e_1100x1511.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02d19b59-fe6f-4900-9deb-a209573e410e_1100x1511.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F02d19b59-fe6f-4900-9deb-a209573e410e_1100x1511.jpeg 720w" width="720"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7de3399-bbe7-4a1a-87f9-9456ced62d0a_1100x1496.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7de3399-bbe7-4a1a-87f9-9456ced62d0a_1100x1496.jpeg 720w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7de3399-bbe7-4a1a-87f9-9456ced62d0a_1100x1496.jpeg" sizes="100vw" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7de3399-bbe7-4a1a-87f9-9456ced62d0a_1100x1496.jpeg 424w, https://substackcdn.com/image/fetch/w_720,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7de3399-bbe7-4a1a-87f9-9456ced62d0a_1100x1496.jpeg 720w" width="720"></picture></div><figcaption>ST Format May 1992 story on the ST Book</figcaption></div></figure><p>The January 1992 issue of Atari Explorer had an interview with the creator of the ST Book, Tracy Hall.</p><p>Although I’ve summarized from both of them, I still recommend reading both of these articles.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png" width="1090" height="818" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:818,&quot;width&quot;:1090,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1237905,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3fce3bf8-c4d4-47f3-bfb2-99b0426474cf_1090x818.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Photo from Atari Explorer</figcaption></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png" width="1456" height="1230" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1230,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2651311,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F69443b0a-e9af-4d60-89bc-9010eff2524d_1544x1304.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Photo from Atari Explorer</figcaption></figure></div><p>Because so few ST Books were made, it’s hard to really call it a flop. Rather, it was more like an interesting R&amp;D project from Atari that barely saw the light of day. Considering its price was rather close to the PowerBook 100, it’s hard to believe this would have sold well even if Atari had given it a full rollout.</p><p>If any readers have used (or actually own) an ST Book, please share your thoughts about it in the comments.</p><p data-attrs="{&quot;url&quot;:&quot;https://www.goto10retro.com/p/st-book-the-notebook-atari-st/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.goto10retro.com/p/st-book-the-notebook-atari-st/comments" rel=""><span>Leave a comment</span></a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why Safety Profiles Failed (223 pts)]]></title>
            <link>https://www.circle-lang.org/draft-profiles.html</link>
            <guid>41939967</guid>
            <pubDate>Thu, 24 Oct 2024 21:26:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.circle-lang.org/draft-profiles.html">https://www.circle-lang.org/draft-profiles.html</a>, See on <a href="https://news.ycombinator.com/item?id=41939967">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div id="TOC" role="doc-toc">
<h2 id="toctitle">Contents</h2>
<ul>
<li><a href="#abstract" id="toc-abstract"><span>1</span> Abstract<span></span></a></li>
<li><a href="#c-is-under-specified" id="toc-c-is-under-specified"><span>2</span> C++ is
under-specified<span></span></a>
<ul>
<li><a href="#inferring-aliasing" id="toc-inferring-aliasing"><span>2.1</span> Inferring
aliasing<span></span></a></li>
<li><a href="#inferring-lifetimes" id="toc-inferring-lifetimes"><span>2.2</span> Inferring
lifetimes<span></span></a></li>
<li><a href="#inferring-safeness" id="toc-inferring-safeness"><span>2.3</span> Inferring
safeness<span></span></a></li>
</ul></li>
<li><a href="#lifetime-safety-is-static-typing" id="toc-lifetime-safety-is-static-typing"><span>3</span> Lifetime safety is static
typing<span></span></a></li>
<li><a href="#lifetime-parameters-dont-cause-soundness-bugs" id="toc-lifetime-parameters-dont-cause-soundness-bugs"><span>4</span> Lifetime parameters don’t cause
soundness bugs<span></span></a></li>
<li><a href="#c-is-too-irregular-for-profiles" id="toc-c-is-too-irregular-for-profiles"><span>5</span> C++ is too irregular for
Profiles<span></span></a>
<ul>
<li><a href="#c-cannot-enforce-exclusivity" id="toc-c-cannot-enforce-exclusivity"><span>5.1</span> C++ cannot enforce
exclusivity<span></span></a></li>
</ul></li>
<li><a href="#carcinization" id="toc-carcinization"><span>6</span> Carcinization<span></span></a></li>
<li><a href="#c-in-the-future" id="toc-c-in-the-future"><span>7</span> C++ in the
future<span></span></a></li>
<li><a href="#bibliography" id="toc-bibliography"><span>8</span> References<span></span></a></li>
</ul>
</div>
<h2 data-number="1" id="abstract"> Abstract<a href="#abstract"></a></h2>
<blockquote>
<p><em>As for dangling pointers and for ownership, <strong>this model
detects all possible errors</strong>. This means that we can guarantee
that a program is free of uses of invalidated pointers.</em></p>
<p>– A brief introduction to C++’s model for type- and resource-
safety<span data-cites="type-and-resource-safety-2015">[<a href="https://www.stroustrup.com/resource-model.pdf" role="doc-biblioref">type-and-resource-safety-2015</a>]</span></p>
</blockquote>
<p>Safety Profiles were introduced in 2015 with the promise to detect
all lifetime safety defects in existing C++ code. It was a bold claim.
But after a decade of effort, Profiles failed to produce a
specification, reliable implementation or any tangible benefit for C++
safety. The cause of this failure involves a number of mistaken premises
at the core of its design:</p>
<ol type="1">
<li>“Zero annotation is required by default, because existing C++ source
code already contains sufficient information”<span data-cites="P3465R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3465r0.pdf" role="doc-biblioref">P3465R0</a>]</span></li>
<li>“We should not require a <code>safe</code>
function annotation”<span data-cites="P3446R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3446r0.pdf" role="doc-biblioref">P3446R0</a>]</span></li>
<li>“Do not add a feature that requires viral annotation”<span data-cites="P3466R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3466r0.pdf" role="doc-biblioref">P3466R0</a>]</span></li>
<li>“Do not add a feature that requires heavy annotation”<span data-cites="P3466R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3466r0.pdf" role="doc-biblioref">P3466R0</a>]</span></li>
</ol>
<p>The parameters of the problem make success impossible. This paper
examines the contradictions in these premises, explains why the design
didn’t improve safety in the past and why it won’t improve safety in the
future.</p>
<p>Note that this document is specifically about the <em>lifetime
safety</em> claims in <span data-cites="P1179R1">[<a href="https://wg21.link/p1179r1" role="doc-biblioref">P1179R1</a>]</span> and <span data-cites="P3465R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3465r0.pdf" role="doc-biblioref">P3465R0</a>]</span>. The wider set of analyses in
<span data-cites="P3081R0">[<a href="https://isocpp.org/files/papers/P3081R0.pdf" role="doc-biblioref">P3081R0</a>]</span> that deal with rejecting
specific operations like <code><span>reinterpret_cast</span></code>,
union access, variadic arguments, etc., are not considered here.</p>
<h2 data-number="2" id="c-is-under-specified"> C++ is under-specified<a href="#c-is-under-specified"></a></h2>
<blockquote>
<p><em>Zero annotation is required by default, because existing C++
source code already contains sufficient information.</em></p>
<p>– Pursue <span data-cites="P1179R1">[<a href="https://wg21.link/p1179r1" role="doc-biblioref">P1179R1</a>]</span> as a Lifetime Safety TS<span data-cites="P3465R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3465r0.pdf" role="doc-biblioref">P3465R0</a>]</span></p>
</blockquote>
<p>C++ source code <em>does not</em> have sufficient information for
achieving memory safety. A C++ function declaration lacks three things
that are critical for lifetime safety:</p>
<ol type="1">
<li><a href="#inferring-aliasing">Aliasing information</a>.</li>
<li><a href="#inferring-lifetimes">Lifetime information</a>.</li>
<li><a href="#inferring-safeness">Safeness information</a>.</li>
</ol>
<p>Functions involving parameter types with pointer or reference
semantics have <em>implicit</em> aliasing, lifetime and safeness
requirements. Safety Profiles cannot recover these properties from C++
code, because there are no language facilities to describe them. These
requirements are only specified in documentation, if they are specified
at all.</p>
<h2 data-number="2.1" id="inferring-aliasing"> Inferring aliasing<a href="#inferring-aliasing"></a></h2>
<p>A C++ compiler can infer nothing about aliasing from a function
declaration. A function parameter with a mutable reference <em>might
always</em> alias other parameters, it <em>might never</em> alias other
parameters, or <em>it might not care</em> about aliasing other
parameters.</p>
<div id="cb1"><pre><code><span id="cb1-1"><span>// i and j must always alias. They must refer to the same container.</span></span>
<span id="cb1-2"><span>void</span> f1<span>(</span>std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;::</span>iterator i, std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;::</span>iterator j<span>)</span> <span>{</span></span>
<span id="cb1-3">  <span>// If i and j point into different vectors, you have real problems.</span></span>
<span id="cb1-4">  std<span>::</span>sort<span>(</span>i, j<span>)</span>;</span>
<span id="cb1-5"><span>}</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span>// vec must not alias x.</span></span>
<span id="cb1-8"><span>void</span> f2<span>(</span>std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;&amp;</span> vec, <span>int</span><span>&amp;</span> x<span>)</span> <span>{</span></span>
<span id="cb1-9">  <span>// Resizing vec may invalidate x if x is a member of vec.</span></span>
<span id="cb1-10">  vec<span>.</span>push_back<span>(</span><span>5</span><span>)</span>;</span>
<span id="cb1-11"></span>
<span id="cb1-12">  <span>// Potential use-after-free.</span></span>
<span id="cb1-13">  x <span>=</span> <span>6</span>;</span>
<span id="cb1-14"><span>}</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span>// vec may or may not alias x. It doesn't matter.</span></span>
<span id="cb1-17"><span>void</span> f3<span>(</span>std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;&amp;</span> vec, <span>const</span> <span>int</span><span>&amp;</span> x<span>)</span> <span>{</span></span>
<span id="cb1-18">  vec<span>.</span>push_back<span>(</span>x<span>)</span>;</span>
<span id="cb1-19"><span>}</span></span></code></pre></div>
<p><code>f1</code> and
<code>f2</code> have aliasing requirements. In
<code>f1</code>, both iterators must point into
the same container. In <code>f2</code>,
<code>x</code> must not come from the container
<code>vec</code>. These requirements are only
visible as documentation. The compiler cannot infer a function’s
aliasing requirements from its declaration or even from its definition.
If the safety profile enforces <em>no mutable aliasing</em>, then the
definitions of <code>f1</code> and
<code>f3</code> will fail to compile, breaking
your program.</p>
<div id="cb2"><pre><code><span id="cb2-1"><span>int</span> main<span>()</span> <span>{</span></span>
<span id="cb2-2">  std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;</span> vec1, vec2;</span>
<span id="cb2-3"></span>
<span id="cb2-4">  <span>// *Incorrectly* permits call.</span></span>
<span id="cb2-5">  <span>// UB, because the iterators point into different containers.</span></span>
<span id="cb2-6">  f1<span>(</span>vec1<span>.</span>begin<span>()</span>, vec2<span>.</span>end<span>())</span>;</span>
<span id="cb2-7"></span>
<span id="cb2-8">  <span>// *Incorrectly* rejects call.</span></span>
<span id="cb2-9">  <span>// This is the correct usage, but mutable aliasing prevents compilation.</span></span>
<span id="cb2-10">  f1<span>(</span>vec1<span>.</span>begin<span>()</span>, vec1<span>.</span>end<span>())</span>;</span>
<span id="cb2-11"></span>
<span id="cb2-12">  <span>// *Correctly* rejects call.</span></span>
<span id="cb2-13">  f2<span>(</span>vec1, vec1<span>[</span><span>2</span><span>])</span>;</span>
<span id="cb2-14"></span>
<span id="cb2-15">  <span>// *Incorrectly* rejects call.</span></span>
<span id="cb2-16">  f3<span>(</span>vec1, vec1<span>[</span><span>2</span><span>])</span>;</span>
<span id="cb2-17"><span>}</span></span></code></pre></div>
<p>Profiles chose the wrong convention for several uses. It permits the
incorrect call to <code>f1</code> to compile, but
rejects a correct usage of <code>f1</code> on the
grounds of mutable aliasing. An unsound call to
<code>f2</code> is correctly rejected, but a
sound call to <code>f3</code> is also rejected.
Rejecting or permitting code (rightly or wrongly) is a matter of
coincidence, not intelligence.</p>
<p>Without language-level aliasing information, compile-time memory
safety is not possible. This requirement is the motivation for Rust’s
borrow type. A mutable borrow cannot alias other borrows. That’s
enforced by the borrow checker. Raw pointers have no aliasing
requirements, but are unsafe to dereference. In general, things that can
be checked by the compiler are checked, and things that can’t be checked
are unsafe to use.</p>
<p><a href="https://godbolt.org/z/WWera863E">(Compiler Explorer)</a></p>
<div id="cb3"><pre><code><span id="cb3-1"><span>#include </span><span>&lt;vector&gt;</span></span>
<span id="cb3-2"><span>#include </span><span>&lt;iostream&gt;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span>void</span> func<span>(</span>std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;&amp;</span> vec, <span>int</span><span>&amp;</span> x<span>)</span> <span>{</span></span>
<span id="cb3-5">  vec<span>.</span>push_back<span>(</span><span>1</span><span>)</span>;</span>
<span id="cb3-6">  x <span>=</span> <span>2</span>;  <span>// A write-after-free when x is a member of vec!</span></span>
<span id="cb3-7"><span>}</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span>int</span> main<span>()</span> <span>{</span></span>
<span id="cb3-10">  std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;</span> vec;</span>
<span id="cb3-11">  vec<span>.</span>push_back<span>(</span><span>1</span><span>)</span>;</span>
<span id="cb3-12">  func<span>(</span>vec, vec<span>[</span><span>0</span><span>])</span>;</span>
<span id="cb3-13"></span>
<span id="cb3-14">  std<span>::</span>cout<span>&lt;&lt;</span> vec<span>[</span><span>0</span><span>]&lt;&lt;</span> <span>"</span><span>\n</span><span>"</span>;</span>
<span id="cb3-15">  std<span>::</span>cout<span>&lt;&lt;</span> vec<span>[</span><span>1</span><span>]&lt;&lt;</span> <span>"</span><span>\n</span><span>"</span>;</span>
<span id="cb3-16"><span>}</span></span></code></pre></div>

<p>The Safety Profiles partial reference implementation can’t prevent
aliasing-related undefined behavior because C++ doesn’t provide aliasing
information.</p>
<h2 data-number="2.2" id="inferring-lifetimes"> Inferring lifetimes<a href="#inferring-lifetimes"></a></h2>
<p>A C++ compiler can infer nothing about lifetimes from a function
declaration. A reference return type may be constrained by the lifetimes
of any number of reference parameters, by none of the reference
parameters, or by some other lifetime.</p>
<div id="cb5"><pre><code><span id="cb5-1"><span>// The returned reference is only constrained by the lifetime of the map</span></span>
<span id="cb5-2"><span>// parameter.</span></span>
<span id="cb5-3"><span>// It is not constrained by the lifetime of the key parameter.</span></span>
<span id="cb5-4"><span>const</span> <span>int</span><span>&amp;</span> f4<span>(</span>std<span>::</span>map<span>&lt;</span><span>int</span>, <span>int</span><span>&gt;&amp;</span> map, <span>const</span> <span>int</span><span>&amp;</span> key<span>)</span> <span>{</span></span>
<span id="cb5-5">  <span>return</span> map<span>[</span>key<span>]</span>;</span>
<span id="cb5-6"><span>}</span></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span>// The returned reference is constrained by the lifetime of both x and y</span></span>
<span id="cb5-9"><span>// parameters.</span></span>
<span id="cb5-10"><span>const</span> <span>int</span><span>&amp;</span> f5<span>(</span><span>const</span> <span>int</span><span>&amp;</span> x, <span>const</span> <span>int</span><span>&amp;</span> y<span>)</span> <span>{</span></span>
<span id="cb5-11">  <span>return</span> std<span>::</span>min<span>(</span>x, y<span>)</span>;</span>
<span id="cb5-12"><span>}</span></span>
<span id="cb5-13"></span>
<span id="cb5-14"><span>// The returned reference is not constrained by the lifetime of any</span></span>
<span id="cb5-15"><span>// reference parameter.</span></span>
<span id="cb5-16"><span>const</span> <span>int</span><span>&amp;</span> f6<span>(</span><span>const</span> <span>int</span><span>&amp;</span> key<span>)</span> <span>{</span></span>
<span id="cb5-17">  <span>static</span> std<span>::</span>map<span>&lt;</span><span>int</span>, <span>int</span><span>&gt;</span> map;</span>
<span id="cb5-18">  <span>return</span> map<span>[</span>key<span>]</span>;</span>
<span id="cb5-19"><span>}</span></span></code></pre></div>
<p>These three functions have different lifetime requirements, which are
indicated by comments. This information is available to developers but
not to the compiler. What’s the strategy to uphold these lifetime
requirements? Read the documentation, read the code, and <em>don’t make
mistakes</em>.</p>
<div id="cb6"><pre><code><span id="cb6-1"><span>int</span> main<span>()</span> <span>{</span></span>
<span id="cb6-2">  std<span>::</span>map<span>&lt;</span><span>int</span>, <span>int</span><span>&gt;</span> map;</span>
<span id="cb6-3"></span>
<span id="cb6-4">  <span>// r4 is constrained by lifetimes of map and 40.</span></span>
<span id="cb6-5">  <span>int</span><span>&amp;</span> r4 <span>=</span> f4<span>(</span>map, <span>40</span><span>)</span>;</span>
<span id="cb6-6"></span>
<span id="cb6-7">  <span>// *Incorrectly* rejects usage of r4. r4 is constrained to the lifetime</span></span>
<span id="cb6-8">  <span>// of the temporary 40, which expired at the end of the above statement.</span></span>
<span id="cb6-9">  <span>int</span> x <span>=</span> r4;</span>
<span id="cb6-10"></span>
<span id="cb6-11">  <span>// r5 is constrained by lifetimes of 50 and 51.</span></span>
<span id="cb6-12">  <span>const</span> <span>int</span><span>&amp;</span> r5 <span>=</span> f5<span>(</span><span>50</span>, <span>51</span><span>)</span>;</span>
<span id="cb6-13"></span>
<span id="cb6-14">  <span>// *Correctly* rejects usage of r5. The reference refers to one of the</span></span>
<span id="cb6-15">  <span>// two expired temporaries. This use would be a use-after-free.</span></span>
<span id="cb6-16">  <span>int</span> y <span>=</span> r5;</span>
<span id="cb6-17"></span>
<span id="cb6-18">  <span>// r6 is constrained by the lifetime of 60.</span></span>
<span id="cb6-19">  <span>const</span> <span>int</span><span>&amp;</span> r6 <span>=</span> f6<span>(</span><span>60</span><span>)</span>;</span>
<span id="cb6-20"></span>
<span id="cb6-21">  <span>// *Incorrectly* rejects usage of r6.</span></span>
<span id="cb6-22">  <span>// The return reference r6 should not be constrained by the lifetime of 60.</span></span>
<span id="cb6-23">  <span>int</span> z <span>=</span> r6;</span>
<span id="cb6-24"><span>}</span></span></code></pre></div>
<p>Profiles take a similarly conservative approach to lifetimes as they
do with aliasing. The lifetime of a returned reference is constrained by
the lifetimes of <em>all of its arguments</em>. This is fortuitous for a
function like
<code>std<span>::</span>min</code>,
which returns a reference to either of its function parameters. It’s bad
for a function like <code>std<span>::</span>map<span>&lt;</span>T<span>&gt;::</span><span>operator</span><span>[]</span></code>,
which takes a key argument by reference but returns a reference that’s
only constrained by the lifetime of
<code><span>this</span></code>.</p>
<p>Since the compiler has no information about function parameter
lifetimes, it can’t accurately flag out-of-contract function calls.
<code>f4</code> and
<code>f6</code> take references to temporary
objects but return references that should not be constrained to that
temporary. In both cases, the safety profile rejects a subsequent use of
the reference as a use-after-free, because it applies a too-conservative
convention.</p>
<p>The need for explicit lifetime information in function types is the
motivation for Rust’s lifetime arguments. A returned reference must be
annotated with a lifetime parameter that is constrained by a function
parameter on the same function, or it must be static. The alternative is
to be deluged with an impossible quantity of use-after-free false
positives.</p>
<p><a href="https://godbolt.org/z/4c84ofavY">(Compiler Explorer)</a></p>
<div id="cb7"><pre><code><span id="cb7-1"><span>#include </span><span>&lt;map&gt;</span></span>
<span id="cb7-2"><span>#include </span><span>&lt;utility&gt;</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span>const</span> <span>int</span><span>&amp;</span> f4<span>(</span>std<span>::</span>map<span>&lt;</span><span>int</span>, <span>int</span><span>&gt;&amp;</span> map, <span>const</span> <span>int</span><span>&amp;</span> key<span>)</span> <span>{</span></span>
<span id="cb7-5">  <span>return</span> map<span>[</span>key<span>]</span>;</span>
<span id="cb7-6"><span>}</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span>int</span> main<span>()</span> <span>{</span></span>
<span id="cb7-9">  std<span>::</span>map<span>&lt;</span><span>int</span>, <span>int</span><span>&gt;</span> map;</span>
<span id="cb7-10">  <span>const</span> <span>int</span><span>&amp;</span> ref <span>=</span> f4<span>(</span>map, <span>200</span><span>)</span>;</span>
<span id="cb7-11">  <span>int</span> x <span>=</span> ref;</span>
<span id="cb7-12"><span>}</span></span></code></pre></div>
<div id="cb8"><pre><code><span id="cb8-1">&lt;source&gt;:11:11: warning: dereferencing a dangling pointer [-Wlifetime]</span>
<span id="cb8-2">  int x = ref;</span>
<span id="cb8-3">          ^~~</span>
<span id="cb8-4">&lt;source&gt;:10:32: note: temporary was destroyed at the end of the full expression</span>
<span id="cb8-5">  const int&amp; ref = f4(map, 200);</span>
<span id="cb8-6">                               ^</span></code></pre></div>
<p>The Safety Profiles reference implementation can’t accurately deal
with lifetimes because C++ doesn’t provide lifetime information. The
tool doesn’t test for correctness, it only tests if your code conforms
to a pre-chosen convention.</p>
<h2 data-number="2.3" id="inferring-safeness"> Inferring safeness<a href="#inferring-safeness"></a></h2>
<blockquote>
<p><em>We should not require a <code>safe</code>
function annotation that has the semantics that a
<code>safe</code> function can only call other
<code>safe</code> functions.</em></p>
<p>– (Re)affirm design principles for future C++ evolution<span data-cites="P3446R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3446r0.pdf" role="doc-biblioref">P3446R0</a>]</span></p>
</blockquote>
<p>Recall what “safe” actually means:</p>
<ul>
<li>A <em>safe function</em> has defined behavior for all valid
inputs.</li>
<li>An <em>unsafe function</em> has soundness preconditions. Calling an
unsafe function with out-of-contract inputs may result in undefined
behavior.</li>
</ul>
<p>A C++ compiler can infer nothing about safeness from a function
declaration. It can’t by tell by looking what constitutes an
out-of-contract call and what doesn’t. A <em>safe-specifier</em>
indicates the presence of soundness preconditions. An
<em>unsafe-block</em> permits the user to escape the safe context, prove
the preconditions, and call the unsafe function.</p>
<div id="cb9"><pre><code><span id="cb9-1"><span>template</span><span>&lt;</span><span>typename</span> T<span>&gt;</span></span>
<span id="cb9-2"><span>class</span> vector <span>{</span></span>
<span id="cb9-3"><span>public</span><span>:</span></span>
<span id="cb9-4">  <span>size_t</span> size<span>()</span> <span>const</span> <span>noexcept</span> safe <span>{</span></span>
<span id="cb9-5">    <span>return</span> _len;</span>
<span id="cb9-6">  <span>}</span></span>
<span id="cb9-7"></span>
<span id="cb9-8">  T<span>&amp;</span> <span>operator</span><span>[](</span><span>size_t</span> index<span>)</span> <span>noexcept</span> safe <span>{</span></span>
<span id="cb9-9">    <span>// Can call size() because it's a safe function.</span></span>
<span id="cb9-10">    <span>if</span><span>(</span>index <span>&gt;=</span> size<span>())</span></span>
<span id="cb9-11">      panic<span>(</span><span>"Out-of-bounds vector::operator[]"</span><span>)</span>;</span>
<span id="cb9-12"></span>
<span id="cb9-13">    unsafe <span>{</span></span>
<span id="cb9-14">      <span>// Pointer operations only allowed in unsafe context.</span></span>
<span id="cb9-15">      <span>// Safety proof:</span></span>
<span id="cb9-16">      <span>// The allocation has size() valid elements and index &lt; size().</span></span>
<span id="cb9-17">      <span>return</span> _data<span>[</span>index<span>]</span>;</span>
<span id="cb9-18">    <span>}</span></span>
<span id="cb9-19">  <span>}</span></span>
<span id="cb9-20"></span>
<span id="cb9-21"><span>private</span><span>:</span></span>
<span id="cb9-22">  T<span>*</span> _data;</span>
<span id="cb9-23">  <span>size_t</span> _len, _cap;</span>
<span id="cb9-24"><span>}</span>;</span></code></pre></div>
<p>Let’s take a really simple case: <code>vector<span>::</span><span>operator</span><span>[]</span></code>.
Profiles have to reject pointer arithmetic, because there’s no static
analysis protection against indexing past the end of the allocation. How
is the compiler told to permit the raw pointer subscript in the
<em>return-statement</em> in <code>vector<span>::</span><span>operator</span><span>[]</span></code>?
In Rust and Safe C++, enter an <em>unsafe-block</em>.</p>
<p>This design distinguishes safe functions, which have no soundness
preconditions and can be called from other safe functions, and unsafe
functions, which require an <em>unsafe-block</em> escape to use, just
like pointer operations.</p>
<p>Separation of safe and unsafe functions is common in memory-safe
languages. Rust and C#<span data-cites="csharp">[<a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/unsafe" role="doc-biblioref">csharp</a>]</span> include an
<code>unsafe</code> function specifier and an
<em>unsafe-block</em> construct. This is a human- and tooling-readable
tag for auditing potential origins of soundness defects. Aliasing and
lifetimes are transitive properties that must be recoverable from a
function declaration in order to be upheld. Safeness (the lack of
soundness preconditions) is another transitive property that must be
marked in a function declaration. The way to do that is with a
<em>safe-specifier</em>.</p>
<div id="cb10"><pre><code><span id="cb10-1"><span>template</span><span>&lt;</span> <span>class</span> RandomIt <span>&gt;</span></span>
<span id="cb10-2"><span>void</span> sort<span>(</span> RandomIt first, RandomIt last <span>)</span>;</span></code></pre></div>
<p>Let’s consider another example: the
<code>std<span>::</span>sort</code>
API that takes two random-access iterators. This is an <em>unsafe</em>
function because it exhibits undefined behavior if called with the wrong
arguments. But there’s nothing in the type system to indicate that it
has soundness preconditions, so the compiler doesn’t know to reject
calls in safe contexts.</p>
<p>What are <code>sort</code>’s
preconditions?</p>
<ul>
<li>The <code>first</code> and
<code>last</code> iterators must point at
elements from the same container.</li>
<li><code>first</code> must not indicate an
element that appears after
<code>last</code>.</li>
<li><code>first</code> and
<code>last</code> may not be dangling
iterators.</li>
</ul>
<p>In the absence of a enforced safeness information, it’s up to the
user to follow the documentation and satisfy the requirements. Guidance
for calling unsafe functions is essentially “don’t write bugs.”</p>
<div id="cb11"><pre><code><span id="cb11-1"><span>void</span> func<span>(</span>std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;</span> vec1, std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;</span> vec2<span>)</span> <span>{</span></span>
<span id="cb11-2">  <span>// #1 - *Incorrectly* rejects correct call for mutable aliasing</span></span>
<span id="cb11-3">  sort<span>(</span>vec1<span>.</span>begin<span>()</span>, vec1<span>.</span>end<span>())</span>;</span>
<span id="cb11-4"></span>
<span id="cb11-5">  <span>// #2 - *Incorrectly* permits out-of-contract call.</span></span>
<span id="cb11-6">  sort<span>(</span>vec1<span>.</span>begin<span>()</span>, vec2<span>.</span>end<span>())</span>;</span>
<span id="cb11-7"><span>}</span></span></code></pre></div>
<p>In the Profiles model, the correct call to
<code>sort</code> #1 is rejected due to mutable
aliasing. That’s bad, but permitting the out-of-contract call #2 is
worse, because it’s a soundness bug. There’s no realistic static
analysis technology to verify that a call to
<code>sort</code> meets its preconditions. Even
the safety profile with the most conservative aliasing setting lets this
call through.</p>
<p>This is where <code>safe</code> and
<code>unsafe</code> specifiers play an important
role. From the caller’s perspective,
<code>sort</code> is unsafe because it has
preconditions that must be upheld without the compiler’s help. From the
callee’s perspective, <code>sort</code> is unsafe
because it’s written with <em>unsafe operations</em>. Pointer
differencing computes a pivot for the sort, and pointer differencing is
undefined when its operands point to different allocations.</p>
<div id="cb12"><pre><code><span id="cb12-1"><span>// No safe-specifier means unsafe.</span></span>
<span id="cb12-2"><span>void</span> sort<span>(</span>vector<span>&lt;</span><span>int</span><span>&gt;::</span>iterator begin, vector<span>&lt;</span><span>int</span><span>&gt;::</span>iterator end<span>)</span>;</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span>// A safe-specifier means it can only call safe functions.</span></span>
<span id="cb12-5"><span>void</span> func<span>(</span>vector<span>&lt;</span><span>int</span><span>&gt;</span> vec1, vector<span>&lt;</span><span>int</span><span>&gt;</span> vec2<span>)</span> safe <span>{</span></span>
<span id="cb12-6">  <span>// Ill-formed: sort is an unsafe function.</span></span>
<span id="cb12-7">  <span>// Averts potential undefined behavior.</span></span>
<span id="cb12-8">  sort<span>(</span>vec1<span>.</span>begin<span>()</span>, vec2<span>.</span>end<span>())</span>;</span>
<span id="cb12-9"></span>
<span id="cb12-10">  unsafe <span>{</span></span>
<span id="cb12-11">    <span>// Well-formed: call unsafe function from unsafe context.</span></span>
<span id="cb12-12">    <span>// Safety proof:</span></span>
<span id="cb12-13">    <span>// sort requires both iterators point into the same container.</span></span>
<span id="cb12-14">    <span>// Here, they both point into vec1.</span></span>
<span id="cb12-15">    sort<span>(</span>vec1<span>.</span>begin<span>()</span>, vec1<span>.</span>end<span>())</span>;</span>
<span id="cb12-16">  <span>}</span></span>
<span id="cb12-17"><span>}</span></span></code></pre></div>
<p>The only way to enforce memory safety is to separate safe and unsafe
functions with a <em>safe-specifier</em>. In this example,
<code>func</code> is <em>safe</em> because it’s
defined for all valid inputs. It cannot call
<code>sort</code>, because that has soundness
preconditions: the two iterators must point into the same container. A
call to <code>sort</code> in a safe context
leaves the program ill-formed, because the compiler cannot guarantee
that the preconditions are satisfied. But by entering an
<em>unsafe-block</em>, the user can prove the preconditions and make the
unsafe call <em>without the compiler’s soundness guarantees</em>.</p>
<p><span data-cites="P3081R0">[<a href="https://isocpp.org/files/papers/P3081R0.pdf" role="doc-biblioref">P3081R0</a>]</span> does float a <code><span>[[</span><span>suppress</span><span>(</span><span>profile</span><span>)]]</span></code>
attribute to turn off certain Profiles checkes. It looks like the
equivalent of an <em>unsafe-block</em>. It may permit pointer operations
in a definition, but it doesn’t address the other side of the call:
without a <em>safe-specifier</em>, how does the Profiles design deal
with functions like <code>sort</code> that are
<em>inherently unsafe</em>? They must be separated from provably safe
functions. User intervention, wrapped up in <em>unsafe-blocks</em>, is
needed to satisfy their preconditions. Without this bump of impedance
the language cannot guarantee safety, as the property that a safe
functions contains no undefined behavior is not transitively upheld.</p>
<p><a href="https://godbolt.org/z/c7Ko3bnG8">(Compiler Explorer)</a></p>
<div id="cb13"><pre><code><span id="cb13-1"><span>#include </span><span>&lt;memory&gt;</span></span>
<span id="cb13-2"><span>#include </span><span>&lt;vector&gt;</span></span>
<span id="cb13-3"><span>#include </span><span>&lt;algorithm&gt;</span></span>
<span id="cb13-4"></span>
<span id="cb13-5"><span>int</span> main<span>()</span> <span>{</span></span>
<span id="cb13-6">  std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;</span> v1, v2;</span>
<span id="cb13-7">  v1<span>.</span>push_back<span>(</span><span>1</span><span>)</span>;</span>
<span id="cb13-8">  v2<span>.</span>push_back<span>(</span><span>2</span><span>)</span>;</span>
<span id="cb13-9">  </span>
<span id="cb13-10">  <span>// UB!</span></span>
<span id="cb13-11">  std<span>::</span>sort<span>(</span>v1<span>.</span>end<span>()</span>, v2<span>.</span>end<span>())</span>;</span>
<span id="cb13-12"><span>}</span></span></code></pre></div>
<div id="cb14"><pre><code><span id="cb14-1">Program returned: 139</span>
<span id="cb14-2">double free or corruption (out)</span>
<span id="cb14-3">Program terminated with signal: SIGSEGV</span></code></pre></div>
<p>The Safety Profiles reference implementation can’t deal with unsafe
functions, because C++ doesn’t know which functions are unsafe. This
out-of-contract call produces a heap double-free and then segfaults.</p>
<h2 data-number="3" id="lifetime-safety-is-static-typing"> Lifetime safety is static
typing<a href="#lifetime-safety-is-static-typing"></a></h2>
<blockquote>
<p><em>Do not add a feature that requires viral annotation.</em></p>
<p>– (Re)affirm design principles for future C++ evolution<span data-cites="P3446R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3446r0.pdf" role="doc-biblioref">P3446R0</a>]</span></p>
</blockquote>
<p>Rust’s safety model incorporates lifetime arguments on every
reference (or struct with reference semantics) that occurs in a function
type. The authors of Profiles disparagingly call these “viral
annotations.” Don’t be scared. C++ has always been full of viral
annotations: <strong>types are viral annotations</strong>.</p>
<p>Types establish type safety properties that are enforced by both the
caller and callee. These properties are <em>transitive</em>
(i.e.&nbsp;<em>viral</em>) because they’re enforced through any number of
function calls, creating a <em>network of reasoning</em> from the point
where an object is created to all of its uses.</p>
<p>Languages that treat types as viral annotations are
<em>statically-typed languages</em>. Languages that don’t are
<em>dynamically-typed languages</em>. These have well-known trade-offs.
Statically-typed languages exhibit higher performance and provide more
information to developers; programs in a statically-typed language may
be easier to reason about. Dynamically-typed languages are much simpler
and can be more productive.</p>
<p>Lifetime parameters, which provide crucial information to the
compiler to enable rigorous safety analysis, defines another axis of
<em>typing</em>. Rust has <em>static lifetimes</em>, which is a
high-performance, high-information approach to memory safety. Users can
reason about lifetimes and aliasing because those concepts are built
into the language. The compiler has sufficient information to rigorously
enforce lifetime safety with <em>borrow checking</em>.</p>
<p>Most other memory-safe languages use <em>dynamic lifetimes</em>, of
which <em>garbage collection</em> is an implementation. Instead of
enforcing lifetimes and exclusivity at compile time, the garbage
collector manages objects on the heap and extends their scope as long as
there are live references to them. This has the same basic trade-off as
<em>dynamic typing</em>: simplicity at the cost of performance.</p>
<table>
<tbody><tr><th>
</th>
<th>
Static lifetimes
</th>
<th>
Dynamic lifetimes
</th>
</tr><tr>
<th>
Static types
</th>
<td>
Rust
</td>
<td>
Java, Go
</td>
</tr>
<tr>
<th>
Dynamic types
</th>
<td>
-
</td>
<td>
Javascript, Python
</td>
</tr>
</tbody></table>
<p>The static types/static lifetimes quadrant is a new area of language
design, at least for languages widely used in production. The principles
may be unfamiliar. Lifetime annotations feel different than type
annotations because they establish relationships <em>between</em>
parameters and return types rather than on individual parameters and
objects. Instead of answering the question “What are the properties of
this entity?” they answer “How does this entity relate to other
entities?”.</p>
<p>Profiles fail because they reject, as a design principle, the
specific language improvements that provide necessary lifetime
information for compile-time safety.</p>
<h2 data-number="4" id="lifetime-parameters-dont-cause-soundness-bugs"> Lifetime parameters don’t cause
soundness bugs<a href="#lifetime-parameters-dont-cause-soundness-bugs"></a></h2>
<blockquote>
<p><em>Annotations are distracting, add verbosity, and some can be wrong
(introducing the kind of errors they are assumed to help
eliminate).</em></p>
<p>– Profile invalidation - eliminating dangling pointers<span data-cites="P3446R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3446r0.pdf" role="doc-biblioref">P3446R0</a>]</span></p>
</blockquote>
<p>This is not right. In a memory-safe language you can’t introduce
undefined behavior with mere coding mistakes. That’s the whole point of
memory safety. If you put the wrong lifetime annotation on a parameter,
your program becomes ill-formed, not undefined. A mistaken use of
lifetime parameters can be an ergonomics bug, or it can mask undefined
behavior when wrapping an unsafe function in a safe interface, but it
can’t cause undefined behavior.</p>
<p><a href="https://godbolt.org/z/MYW6x693P">(Compiler Explorer)</a></p>
<div id="cb1"><pre><code><span id="cb1-1"><span>fn</span> f1<span>&lt;</span><span>'a</span><span>,</span> <span>'b</span><span>&gt;</span>(x<span>:&amp;</span><span>'a</span> <span>i32</span><span>,</span> y<span>:&amp;</span><span>'b</span> <span>i32</span>) <span>-&gt;</span> <span>&amp;</span><span>'b</span> <span>i32</span> <span>{</span></span>
<span id="cb1-2">  <span>return</span> x<span>;</span></span>
<span id="cb1-3"><span>}</span></span></code></pre></div>
<div id="cb15"><pre><code><span id="cb15-1">error: lifetime may not live long enough</span>
<span id="cb15-2"> --&gt; lifetime1.rs:5:10</span>
<span id="cb15-3">  |</span>
<span id="cb15-4">4 | fn f1&lt;'a, 'b&gt;(x:&amp;'a i32, y:&amp;'b i32) -&gt; &amp;'b i32 {</span>
<span id="cb15-5">  |       --  -- lifetime `'b` defined here</span>
<span id="cb15-6">  |       |</span>
<span id="cb15-7">  |       lifetime `'a` defined here</span>
<span id="cb15-8">5 |   return x;</span>
<span id="cb15-9">  |          ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`</span>
<span id="cb15-10">  |</span>
<span id="cb15-11">  = help: consider adding the following bound: `'a: 'b`</span></code></pre></div>
<p>Lifetime constraints are a contract between the caller and callee. If
either side violates the contract, the program is ill-formed. In the
code above, the lifetime constraints are violated by the callee. The
lifetime of the <code>x</code> parameter does not
outlive the lifetime of the returned reference. We used the wrong
annotation, but instead of leading to undefined behavior, the compiler
produces a detailed message that explains how the lifetime contract was
not met.</p>
<p><a href="https://godbolt.org/z/3YWvT7ce4">(Compiler Explorer)</a></p>
<div id="cb2"><pre><code><span id="cb2-1"><span>fn</span> f2<span>&lt;</span><span>'a</span><span>,</span> <span>'b</span><span>&gt;</span>(x<span>:&amp;</span><span>'a</span> <span>i32</span><span>,</span> y<span>:&amp;</span><span>'b</span> <span>i32</span>) <span>-&gt;</span> <span>&amp;</span><span>'b</span> <span>i32</span> <span>{</span></span>
<span id="cb2-2">  <span>// Well-formed. The lifetime on y outlives the lifetime on</span></span>
<span id="cb2-3">  <span>// the return reference.</span></span>
<span id="cb2-4">  <span>return</span> y<span>;</span></span>
<span id="cb2-5"><span>}</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span>fn</span> f3() <span>{</span></span>
<span id="cb2-8">  <span>let</span> x <span>=</span> <span>1</span><span>;</span></span>
<span id="cb2-9">  <span>let</span> r<span>:&amp;</span><span>i32</span><span>;</span></span>
<span id="cb2-10">  <span>{</span></span>
<span id="cb2-11">    <span>let</span> y <span>=</span> <span>2</span><span>;</span></span>
<span id="cb2-12">    r <span>=</span> f2(<span>&amp;</span>x<span>,</span> <span>&amp;</span>y)<span>;</span></span>
<span id="cb2-13">  <span>}</span></span>
<span id="cb2-14"></span>
<span id="cb2-15">  <span>// Ill-formed: r depends on y, which is out of scope.</span></span>
<span id="cb2-16">  <span>let</span> z <span>=</span> <span>*</span>r<span>;</span></span>
<span id="cb2-17"><span>}</span></span></code></pre></div>
<div id="cb16"><pre><code><span id="cb16-1">error[E0597]: `y` does not live long enough</span>
<span id="cb16-2">  --&gt; lifetime2.rs:15:16</span>
<span id="cb16-3">   |</span>
<span id="cb16-4">14 |     let y = 2;</span>
<span id="cb16-5">   |         - binding `y` declared here</span>
<span id="cb16-6">15 |     r = f2(&amp;x, &amp;y);</span>
<span id="cb16-7">   |                ^^ borrowed value does not live long enough</span>
<span id="cb16-8">16 |   }</span>
<span id="cb16-9">   |   - `y` dropped here while still borrowed</span>
<span id="cb16-10">...</span>
<span id="cb16-11">19 |   let z = *r;</span>
<span id="cb16-12">   |           -- borrow later used here</span></code></pre></div>
<p>Let’s fix the implementation of the callee and test a broken version
of the caller. The returned reference depends on
<code>y</code>, but it’s used after
<code>y</code> goes out of scope. The compiler
rejects the program and tells us “<code>y</code>
does not live long enough.”</p>
<p>The use of lifetime annotations on parameters is the same as the use
of type annotations on parameters: it turns an intractable whole-program
analysis problem into an easy-to-enforce local-analysis problem.
Lifetime annotations, which exist to <em>guarantee</em> safety, do not
<em>jeopardize</em> safety.</p>
<h2 data-number="5" id="c-is-too-irregular-for-profiles"> C++ is too irregular for
Profiles<a href="#c-is-too-irregular-for-profiles"></a></h2>
<blockquote>
<p><em>Do not add a feature that requires heavy annotation. “Heavy”
means something like “more than 1 annotation per 1,000 lines of
code.”</em></p>
<p>– (Re)affirm design principles for future C++ evolution<span data-cites="P3446R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3446r0.pdf" role="doc-biblioref">P3446R0</a>]</span></p>
</blockquote>
<blockquote>
<p><em>We have an implemented approach that requires near-zero
annotation of existing source code.</em></p>
<p>– Pursue <span data-cites="P1179R1">[<a href="https://wg21.link/p1179r1" role="doc-biblioref">P1179R1</a>]</span> as a Lifetime TS<span data-cites="P3465R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3465r0.pdf" role="doc-biblioref">P3465R0</a>]</span></p>
</blockquote>
<p>Central to Safety Profiles is the claim that annotations are
exceptional rather than the norm. For this to be true, the great bulk of
C++ would need to be written according to some preferred convention.
<span data-cites="P1179R1">[<a href="https://wg21.link/p1179r1" role="doc-biblioref">P1179R1</a>]</span> chooses “no mutable aliasing”
and constrains reference return types to all reference parameters. Let’s
consider a number of Standard Library functions and compare their
aliasing and exclusivity requirements to those conventions. Functions
that don’t adhere to these conventions must be annotated, and those
annotations must be virally propagated up the stack to all callers, as
aliasing and lifetime requirements are transitive. Only functions that
have no soundness preconditions can be considered safe.</p>
<p>Let’s start in <code><span>&lt;</span>algorithm<span>&gt;</span></code>
and work through alphabetically, indicating how functions deviate from
the Safety Profile’s aliasing and lifetime conventions:</p>
<div id="cb17"><pre><code><span id="cb17-1"><span>// Unsafe!</span></span>
<span id="cb17-2"><span>// Precondition: `first` and `last` must alias.</span></span>
<span id="cb17-3"><span>template</span><span>&lt;</span> <span>class</span> InputIt, <span>class</span> UnaryPred <span>&gt;</span></span>
<span id="cb17-4"><span>bool</span> all_of<span>(</span> InputIt first, InputIt last, UnaryPred p <span>)</span>;</span>
<span id="cb17-5"></span>
<span id="cb17-6"><span>template</span><span>&lt;</span> <span>class</span> InputIt, <span>class</span> UnaryPred <span>&gt;</span></span>
<span id="cb17-7"><span>bool</span> any_of<span>(</span> InputIt first, InputIt last, UnaryPred p <span>)</span>;</span>
<span id="cb17-8"></span>
<span id="cb17-9"><span>template</span><span>&lt;</span> <span>class</span> InputIt, <span>class</span> UnaryPred <span>&gt;</span></span>
<span id="cb17-10"><span>bool</span> none_of<span>(</span> InputIt first, InputIt last, UnaryPred p <span>)</span>;</span>
<span id="cb17-11"></span>
<span id="cb17-12"><span>// Unsafe!</span></span>
<span id="cb17-13"><span>// Precondition 1: `first` and `last` must alias.</span></span>
<span id="cb17-14"><span>// Lifetime: The return type is not constrained by the lifetime of `value`</span></span>
<span id="cb17-15"><span>template</span><span>&lt;</span> <span>class</span> InputIt, <span>class</span> T <span>&gt;</span></span>
<span id="cb17-16">InputIt find<span>(</span> InputIt first, InputIt last, <span>const</span> T<span>&amp;</span> value <span>)</span>;</span>
<span id="cb17-17"></span>
<span id="cb17-18"><span>template</span><span>&lt;</span> <span>class</span> InputIt, <span>class</span> UnaryPred <span>&gt;</span></span>
<span id="cb17-19">InputIt find_if<span>(</span> InputIt first, InputIt last, UnaryPred p <span>)</span>;</span>
<span id="cb17-20"></span>
<span id="cb17-21"><span>template</span><span>&lt;</span> <span>class</span> InputIt, <span>class</span> UnaryPred <span>&gt;</span></span>
<span id="cb17-22">InputIt find_if_not<span>(</span> InputIt first, InputIt last, UnaryPred q <span>)</span>;</span>
<span id="cb17-23"></span>
<span id="cb17-24"><span>// Unsafe!</span></span>
<span id="cb17-25"><span>// Precondition 1: `first` and `last` must alias.</span></span>
<span id="cb17-26"><span>// Precondition 2: `s_first` and `s_last` must alias.</span></span>
<span id="cb17-27"><span>// Lifetime: The return type is not constrained by the lifetime of `s_first`</span></span>
<span id="cb17-28"><span>//   or `s_last`.</span></span>
<span id="cb17-29"><span>template</span><span>&lt;</span> <span>class</span> InputIt, <span>class</span> ForwardIt <span>&gt;</span></span>
<span id="cb17-30">InputIt find_first_of<span>(</span> InputIt first, InputIt last,</span>
<span id="cb17-31">  ForwardIt s_first, ForwardIt s_last <span>)</span>;</span>
<span id="cb17-32"></span>
<span id="cb17-33"><span>// Unsafe!</span></span>
<span id="cb17-34"><span>// Precondition 1: `first` and `last` must alias.</span></span>
<span id="cb17-35"><span>template</span><span>&lt;</span> <span>class</span> ForwardIt <span>&gt;</span></span>
<span id="cb17-36">ForwardIt adjacent_find<span>(</span> ForwardIt first, ForwardIt last <span>)</span>;</span>
<span id="cb17-37"></span>
<span id="cb17-38"><span>// Unsafe!</span></span>
<span id="cb17-39"><span>// Precondition 1: `first1` and `last2` must alias.</span></span>
<span id="cb17-40"><span>// Lifetime: The returned Input1 is constrained only by `first1` and `last1`</span></span>
<span id="cb17-41"><span>// Lifetime: The returned Input2 is constrained only by `first2`.</span></span>
<span id="cb17-42"><span>template</span><span>&lt;</span> <span>class</span> InputIt1, <span>class</span> InputIt2 <span>&gt;</span></span>
<span id="cb17-43">std<span>::</span>pair<span>&lt;</span>InputIt1, InputIt2<span>&gt;</span> mismatch<span>(</span> InputIt1 first1, InputIt1 last1,</span>
<span id="cb17-44">  InputIt2 first2 <span>)</span>;</span>
<span id="cb17-45"></span>
<span id="cb17-46"><span>// Unsafe!</span></span>
<span id="cb17-47"><span>// Precondition 1: `first` and `last` must alias.</span></span>
<span id="cb17-48"><span>// Precondition 2: `s_first` and `s_last` must alias.</span></span>
<span id="cb17-49"><span>// Lifetime: The returned ForwardIt1 is constrained only by `first` and `last`</span></span>
<span id="cb17-50"><span>template</span><span>&lt;</span> <span>class</span> ForwardIt1, <span>class</span> ForwardIt2 <span>&gt;</span></span>
<span id="cb17-51">ForwardIt1 search<span>(</span> ForwardIt1 first, ForwardIt1 last, ForwardIt2 s_first, </span>
<span id="cb17-52">  ForwardIt2 s_last <span>)</span>;</span></code></pre></div>
<p>The functions in <code><span>&lt;</span>algorithms<span>&gt;</span></code>
mostly involve iterators which are inherently unsafe. Additionally, the
lifetime convention chosen by Profiles is frequently wrong: the lifetime
of a returned reference rarely is constrained by the lifetimes of all
its parameters. You’d need annotations in all of these cases.</p>
<p>Consider these conventions against the API for a container. Let’s
look at <code><span>&lt;</span>map<span>&gt;</span></code>:</p>
<div id="cb18"><pre><code><span id="cb18-1"><span>// Aliasing: the `key` parameter may alias `*this`.</span></span>
<span id="cb18-2"><span>// Lifetimes: the returned T&amp; is only constrained by `*this` and not by `key`.</span></span>
<span id="cb18-3">T<span>&amp;</span> map<span>&lt;</span>Key, T<span>&gt;::</span>at<span>(</span> <span>const</span> Key<span>&amp;</span> key <span>)</span>;</span>
<span id="cb18-4">T<span>&amp;</span> map<span>&lt;</span>Key, T<span>&gt;::</span><span>operator</span><span>[](</span> <span>const</span> Key<span>&amp;</span> key <span>)</span>;</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span>// Aliasing: the `key` parameter may alias `*this`.</span></span>
<span id="cb18-7"><span>// Lifetimes: the returned iterator is only constrained by `*this` and not by</span></span>
<span id="cb18-8"><span>//   `value`.</span></span>
<span id="cb18-9">iterator map<span>&lt;</span>Key, T<span>&gt;::</span>find<span>(</span> <span>const</span> Key<span>&amp;</span> key <span>)</span>;</span>
<span id="cb18-10">iterator map<span>&lt;</span>Key, T<span>&gt;::</span>lower_bound<span>(</span> <span>const</span> Key<span>&amp;</span> key <span>)</span>;</span>
<span id="cb18-11">iterator map<span>&lt;</span>Key, T<span>&gt;::</span>upper_bound<span>(</span> <span>const</span> Key<span>&amp;</span> key <span>)</span>;</span>
<span id="cb18-12"></span>
<span id="cb18-13"><span>// Aliasing: the `value` parameter may alias `*this`.</span></span>
<span id="cb18-14"><span>// Lifetimes: the returned iterator is only constrained by `*this` and not by</span></span>
<span id="cb18-15"><span>//   `value`.</span></span>
<span id="cb18-16">std<span>::</span>pair<span>&lt;</span>iterator, <span>bool</span><span>&gt;</span> map<span>&lt;</span>Key, T<span>&gt;::</span>insert<span>(</span> <span>const</span> value_type<span>&amp;</span> value <span>)</span>;</span>
<span id="cb18-17"></span>
<span id="cb18-18"><span>// Unsafe!</span></span>
<span id="cb18-19"><span>// Precondition 1: `pos` must point into `*this`</span></span>
<span id="cb18-20"><span>// Aliasing: the `value` parameter may alias `*this` or `pos`</span></span>
<span id="cb18-21"><span>// Lifetimes: The returned iterator is only constrained by `*this` and not by</span></span>
<span id="cb18-22"><span>//   `value`.</span></span>
<span id="cb18-23">iterator map<span>&lt;</span>Key, T<span>&gt;::</span>insert<span>(</span> iterator pos, <span>const</span> value_type<span>&amp;</span> value <span>)</span>;</span>
<span id="cb18-24"></span>
<span id="cb18-25"><span>// Aliasing: The `k` and `obj` parameters may alias `*this`.</span></span>
<span id="cb18-26"><span>// Lifetimes: The returned iterator is only constrained by `*this` and not by </span></span>
<span id="cb18-27"><span>//   `k` or `value`.</span></span>
<span id="cb18-28"><span>template</span><span>&lt;</span> <span>class</span> M <span>&gt;</span></span>
<span id="cb18-29">std<span>::</span>pair<span>&lt;</span>iterator, <span>bool</span><span>&gt;</span> map<span>&lt;</span>Key, T<span>&gt;::</span>insert_or_assign<span>(</span> <span>const</span> Key<span>&amp;</span> k, M<span>&amp;&amp;</span> obj <span>)</span></span>
<span id="cb18-30"></span>
<span id="cb18-31"><span>// Unsafe!</span></span>
<span id="cb18-32"><span>// Precondition 1: `hint` must point into `*this`</span></span>
<span id="cb18-33"><span>// Aliasing: The `k` and `obj` parameters may alias `*this` and `hint`.</span></span>
<span id="cb18-34"><span>// Lifetimes: The returned iterator is only constrained by `*this` and not by</span></span>
<span id="cb18-35"><span>//   `k` or `value`.</span></span>
<span id="cb18-36"><span>template</span><span>&lt;</span> <span>class</span> M <span>&gt;</span></span>
<span id="cb18-37">iterator insert_or_assign<span>(</span> const_iterator hint, <span>const</span> Key<span>&amp;</span> k, M<span>&amp;&amp;</span> obj <span>)</span>;</span></code></pre></div>
<p>This is only a few of the <code>map</code>
APIs which would either be unsafe or require annotations in the Profiles
model. The conservative aliasing rules gets most member functions wrong:
a reference returned from a member function is typically constrained
only by the <code><span>*</span><span>this</span></code>/<code>self</code>
parameter. That’s what Rust’s lifetime elision rules do. Regardless of
the convention chosen, expect annotations every time the function does
something different. With C++ code, it does something different <em>very
often</em>.</p>
<div id="cb19"><pre><code><span id="cb19-1"><span>#include </span><span>&lt;map&gt;</span></span>
<span id="cb19-2"></span>
<span id="cb19-3"><span>int</span> main<span>()</span> <span>{</span></span>
<span id="cb19-4">  std<span>::</span>map<span>&lt;</span><span>int</span>, <span>int</span><span>&gt;</span> m;</span>
<span id="cb19-5">  m<span>[</span><span>1</span><span>]</span> <span>=</span> <span>2</span>;</span>
<span id="cb19-6">  </span>
<span id="cb19-7">  <span>// Temporary 1 expires. Profiles considers `value` a dangling reference.</span></span>
<span id="cb19-8">  <span>int</span><span>&amp;</span> value <span>=</span> m<span>[</span><span>1</span><span>]</span>;</span>
<span id="cb19-9"></span>
<span id="cb19-10">  <span>// Profiles should flag this apparent use-after-free.</span></span>
<span id="cb19-11">  value <span>=</span> <span>2</span>;</span>
<span id="cb19-12"><span>}</span></span></code></pre></div>
<p>Profile’s inability to deal accurately with lifetimes means that an
implementation would reject much valid code. In this example the
subscript to <code>map<span>::</span><span>operator</span><span>[]</span></code>
is a temporary. It goes out of scope at the end of the statement. Under
the Profile’s conservative lifetime convention, the returned reference
(stored in <code>value</code>) would be
considered a dangling reference and the subsequent use would make the
program ill-formed.</p>
<p>I do not believe that C++ code, with its countless unstated soundness
preconditions and inconsistent aliasing and lifetime requirements, can
be made memory safe with fewer than “1 annotation per 1,000 lines of
code.” In fact, legacy C++ code will have <em>many more</em> annotations
than equivalent Rust code. Rust often chooses object relocation to pass
parameters by value rather than pass them by reference. This reduces the
number of lifetime constraints that the system deals with. Additionally,
it has simpler, <em>safe versions</em> of facilities which are unsafe in
C++: the Rust iterator, for example, keeps both the data pointer and
length in the same struct to completely alleviate the aliasing concerns
that prevent safety analysis in C++.</p>
<h2 data-number="5.1" id="c-cannot-enforce-exclusivity"> C++ cannot enforce
exclusivity<a href="#c-cannot-enforce-exclusivity"></a></h2>
<p>The density of annotations required to vet existing code is not the
biggest problem facing Profiles. C++ overload resolution has created a
knot that cannot be untangled. Its standard conversion rules are one
reason why C++ is considered <em>inherently unsafe</em>.</p>
<p>For many accessor-style C++ APIs, there are two overloads:</p>
<ol type="1">
<li>A candidate that binds a <em>const</em> object and a returns a
<em>const</em> reference (or pointer or iterator).</li>
<li>A candidate that binds a <em>mutable</em> object and returns a
<em>mutable</em> reference (or pointer or iterator).</li>
</ol>
<p>If the mutable candidate <em>can</em> be chosen, <em>it is</em>
chosen, no matter what the result object is used for.</p>
<div id="cb20"><pre><code><span id="cb20-1"><span>void</span> f1<span>(</span><span>const</span> <span>int</span><span>&amp;</span> x, <span>const</span> <span>int</span><span>&amp;</span> y<span>)</span>;</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span>void</span> f2<span>(</span>std<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;</span> vec<span>)</span> <span>{</span></span>
<span id="cb20-4">  <span>// The mutable overload of operator[] is called here.</span></span>
<span id="cb20-5">  f1<span>(</span>vec<span>[</span><span>0</span><span>]</span>, vec<span>[</span><span>1</span><span>])</span>;</span>
<span id="cb20-6"><span>}</span></span></code></pre></div>
<p>This code will not pass an exclusivity test.
<code>vec</code> is a mutable object, so <code>vec<span>[</span><span>0</span><span>]</span></code>
calls the mutable version of <code><span>operator</span><span>[]</span></code>
and produces a mutable reference result object. <em>While that mutable
loan is in scope</em> (it remains in scope until
<code>f1</code> returns), <code>vec<span>[</span><span>1</span><span>]</span></code>
calls the mutable version of <code><span>operator</span><span>[]</span></code>
to produce its mutable reference result object. But you’re not allowed
more than one mutable reference to the same place. <em>This is an
exclusivity error!</em></p>
<p>Rust avoids this problem in two ways:</p>
<ul>
<li>In general there is no function overloading. As a convention, if
there are mutable and const versions of a function, the mutable one is
named with a <code>_mut</code> suffix.</li>
<li>There is syntax sugar which maps subscript operations to either
<code>index</code> or
<code>index_mut</code>. The latter is chosen in a
<em>mutable context</em>, which is the left-hand side of an
assignment.</li>
</ul>
<p>We can’t ditch function overloading and remain C++. But we can change
how overload resolution evaluates candidates. The standard conversion is
responsible for binding references to expressions. C++ chooses the wrong
(for safety purposes) subscript candidate because the standard
conversion is able to bind mutable references to lvalue expressions.</p>
<p><a href="https://godbolt.org/z/K3b8hP1W5">(Compiler Explorer)</a></p>
<div id="cb21"><pre><code><span id="cb21-1"><span>void</span> f3<span>(</span><span>const</span> <span>int</span><span>^</span> x, <span>const</span> <span>int</span><span>^</span> y<span>)</span> safe;</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span>int</span> main<span>()</span> safe <span>{</span></span>
<span id="cb21-4">  std2<span>::</span>vector<span>&lt;</span><span>int</span><span>&gt;</span> vec <span>{</span> <span>}</span>;</span>
<span id="cb21-5"></span>
<span id="cb21-6">  <span>// Okay.</span></span>
<span id="cb21-7">  f3<span>(</span>vec<span>[</span><span>0</span><span>]</span>, vec<span>[</span><span>1</span><span>])</span>;</span>
<span id="cb21-8"></span>
<span id="cb21-9">  <span>// Ill-formed: mutable borrow of vec between its mutable borrow and its use.</span></span>
<span id="cb21-10">  f3<span>(</span>mut vec<span>[</span><span>0</span><span>]</span>, mut vec<span>[</span><span>1</span><span>])</span>;</span>
<span id="cb21-11"><span>}</span></span></code></pre></div>
<div id="cb22"><pre><code><span id="cb22-1">safety: during safety checking of int main() safe</span>
<span id="cb22-2">  borrow checking: example.cpp:13:22</span>
<span id="cb22-3">    f3(mut vec[0], mut vec[1]); </span>
<span id="cb22-4">                       ^</span>
<span id="cb22-5">  mutable borrow of vec between its mutable borrow and its use</span>
<span id="cb22-6">  loan created at example.cpp:13:10</span>
<span id="cb22-7">    f3(mut vec[0], mut vec[1]); </span>
<span id="cb22-8">           ^</span></code></pre></div>
<p>Safe C++ changes the standard conversion to work around this language
defect. In this extension, <em>standard conversions do not bind mutable
references</em>. <code>vec<span>[</span><span>0</span><span>]</span></code>
chooses the <em>const</em> candidate, which permits aliasing, and <code>mut vec<span>[</span><span>0</span><span>]</span></code>
chooses the <em>mutable</em> candidate, which does not. By opting in to
mutation, you get aliasing by default.</p>
<p><a href="https://godbolt.org/z/9G9oj68Yx">(Compiler Explorer)</a></p>
<div id="cb23"><pre><code><span id="cb23-1"><span>#</span><span>feature on safety</span></span>
<span id="cb23-2"></span>
<span id="cb23-3"><span>int</span> main<span>()</span> safe <span>{</span></span>
<span id="cb23-4">  <span>int</span> x <span>=</span> <span>1</span>;</span>
<span id="cb23-5">  <span>int</span><span>^</span> ref <span>=</span> x;  <span>// Ill-formed! Can't bind mutable reference to lvalue.</span></span>
<span id="cb23-6"><span>}</span></span></code></pre></div>
<div id="cb24"><pre><code><span id="cb24-1">error: example.cpp:5:14</span>
<span id="cb24-2">  int^ ref = x; </span>
<span id="cb24-3">             ^</span>
<span id="cb24-4">cannot implicitly bind borrow int^ to lvalue int</span></code></pre></div>
<p>The <code>mut</code> keyword<span data-cites="mutation">[<a href="https://safecpp.org/draft.html#explicit-mutation" role="doc-biblioref">mutation</a>]</span> puts the subexpression into
<em>the mutable context</em> and restores the restricted functionality.
In the mutable context, the compiler will bind mutable references to
expression:</p>
<p><a href="https://godbolt.org/z/xYcW3hYrf">(Compiler Explorer)</a></p>
<div id="cb25"><pre><code><span id="cb25-1"><span>#</span><span>feature on safety</span></span>
<span id="cb25-2"></span>
<span id="cb25-3"><span>int</span> main<span>()</span> safe <span>{</span></span>
<span id="cb25-4">  <span>int</span> x <span>=</span> <span>1</span>;</span>
<span id="cb25-5">  <span>int</span><span>^</span> ref <span>=</span> mut x;  <span>// Ok. Can bind mutable references in mutable context.</span></span>
<span id="cb25-6"><span>}</span></span></code></pre></div>
<p>Now, the const overload of a function is chosen unless the user
escapes with the <code>mut</code> keyword. This
addresses a language defect head-on.</p>
<p>What option does Profiles have? In its full generality, the mutable
binding default makes for an exceptionally thorny analysis problem. Does
Profiles replace calls to mutable candidates with calls to
similarly-named const candidates? That’s a presumption. Does it
retroactively classify mutable loans as shared loans depending on usage?
I’m not a soundness maverick. This is getting close to touching a live
wire.</p>
<p>Legacy C++ errs on the side of mutability, making it too
unconstrained to test for soundness. Old code is what it is.</p>
<h2 data-number="6" id="carcinization"> Carcinization<a href="#carcinization"></a></h2>
<blockquote>
<p><em>The development of new product lines for use in service of
critical infrastructure or NCFs (national critical functions) in a
memory-unsafe language (e.g., C or C++) … is dangerous and significantly
elevates risk to national security, national economic security, and
national public health and safety.</em></p>
<p>– CISA, Product Security Bad Practices<span data-cites="cisa">[<a href="https://www.cisa.gov/resources-tools/resources/product-security-bad-practices" role="doc-biblioref">cisa</a>]</span></p>
</blockquote>
<p><span data-cites="P3466R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3466r0.pdf" role="doc-biblioref">P3466R0</a>]</span> insists that “we want to make
sure C++ evolution … hews to C++’s core principles.” But these are
<em>bad principles</em>. They make C++ extra vulnerable to memory safety
defects that are prevented in memory-safe languages. The US Government
implicates C++’s core principles as a danger to national security and
public health.</p>
<table>
<tbody><tr><th>
</th>
<th>
Static lifetimes
</th>
<th>
Dynamic lifetimes
</th>
</tr><tr>
<th>
Static types
</th>
<td>
Rust
</td>
<td>
Java, Go
</td>
</tr>
<tr>
<th>
Dynamic types
</th>
<td>
-
</td>
<td>
Javascript, Python
</td>
</tr>
</tbody></table>
<p>Reconsider this table. We want to evolve C++ to live in the static
types/static lifetimes quadrant. Since Rust is the only species in that
design family (at least among production languages), a new entry is
necessarily going to resemble Rust (at least in its memory safety
treatment) more than it does other languages. An earnest effort to
pursue <span data-cites="P1179R1">[<a href="https://wg21.link/p1179r1" role="doc-biblioref">P1179R1</a>]</span> as a Lifetime TS<span data-cites="P3465R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3465r0.pdf" role="doc-biblioref">P3465R0</a>]</span> will compromise on C++’s
outdated and unworkable core principles and adopt mechanisms more like
Rust’s. In the compiler business this is called <em>carcinization</em>:
a tendency of non-crab organisms to evolve crab-like features.</p>
<ul>
<li>Standard C++ doesn’t have aliasing information. We need <strong>a
new reference type</strong> that upholds the “mutation XOR aliasing”
rule as a program-wide invariant.</li>
<li>Standard C++ doesn’t have lifetime information. We need
<strong>lifetime parameters</strong> to indicate constraint
relationships between function parameters and return references.</li>
<li>Safety is a transitive property. It has to be upheld with a
<em><strong>safe-specifier</strong></em> on functions to establish the
absence of soundness preconditions and an
<em><strong>unsafe-block</strong></em> to call unsafe operations.</li>
<li>Lifetime constraints are a transitive property. They must be upheld
by both caller and callee as <strong>viral annotations</strong>.</li>
<li>Lifetime constraints on functions do not follow any particular
convention. Constraints that deviate from a default (such as the
lifetime elision rules) require annotation, even <strong>heavy
annotations</strong> that may exceed 1 per 1,000 lines of code.</li>
<li>The standard conversion rules make exclusivity enforcement
impossible. We have to change the language default, establishing
<strong>no implicit mutation</strong> in order to support aliasing in
functions that take const references.</li>
</ul>
<h2 data-number="7" id="c-in-the-future"> C++ in the future<a href="#c-in-the-future"></a></h2>
<blockquote>
<p><em>I think it is worth pursuing this compatible path first before,
or at least at the same time as, trying to graft another foreign
language’s semantics onto C++ which turns C++ into “something else”
and/or build an off-ramp from C++.</em></p>
<p>– Pursue <span data-cites="P1179R1">[<a href="https://wg21.link/p1179r1" role="doc-biblioref">P1179R1</a>]</span> as a Lifetime TS<span data-cites="P3465R0">[<a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3465r0.pdf" role="doc-biblioref">P3465R0</a>]</span></p>
</blockquote>
<p>Who does this provincialism serve? The latest Android security study
“prioritizes transitioning to memory-safe languages.”<span data-cites="android-security">[<a href="https://security.googleblog.com/2024/09/eliminating-memory-safety-vulnerabilities-Android.html?m=1" role="doc-biblioref">android-security</a>]</span> The off-ramp from C++
is an increasingly viable and attractive strategy for projects looking
to reduce CVE exposure. The off-ramp is happening and its benefits are
measurable. As the Android study observes, “once we turn off the tap of
new vulnerabilities, they decrease exponentially, making all of our code
safer.”</p>
<p>All focus should be on turning off the tap of new vulnerabilities.
Incorporating Rust’s safety model into C++ helps in two ways:</p>
<ol type="1">
<li>It provides an off-ramp from unsafe C++ to Safe C++ within a single
toolchain. Projects can follow best practices for Safe Coding<span data-cites="safe-coding">[<a href="https://storage.googleapis.com/gweb-research2023-media/pubtools/7665.pdf" role="doc-biblioref">safe-coding</a>]</span> without retraining the
whole engineering staff in a new programming language.</li>
<li>It can hasten the migration to Rust by improving C++/Rust interop.
By extending C++ with representations of all Rust constructs that can
appear in function declarations (such as Rust enums, borrows and
lifetimes, ZSTs, traits, etc) the number of common vocabulary types is
greatly increased. This allows interop tooling to map between C++ and
Rust declarations at a more expressive level than the current C-level
API.</li>
</ol>
<p>C++ can be made memory safe, but not by dismissing everything that
works, which is what the authors of Safety Profiles do. The language
must evolve to be more explicit in how it expresses aliasing, lifetime
and safeness properties. C++ can meet the security needs of its users,
both in a principal role, and, for those projects determined to take the
off-ramp, in an important supporting role.</p>
<h2 data-number="8" id="bibliography"> References<a href="#bibliography"></a></h2>
<div id="refs" data-entry-spacing="1" role="doc-bibliography">




<div id="ref-P1179R1" role="doc-biblioentry"><p>
[P1179R1] Herb Sutter. 2019-11-22. Lifetime safety: Preventing common
dangling. </p><a href="https://wg21.link/p1179r1"><p>https://wg21.link/p1179r1</p></a>
</div>
<div id="ref-P3081R0" role="doc-biblioentry"><p>
[P3081R0] Core safety Profiles" Specification, adoptability, and impact.
</p><a href="https://isocpp.org/files/papers/P3081R0.pdf"><p>https://isocpp.org/files/papers/P3081R0.pdf</p></a>
</div>




<div id="ref-type-and-resource-safety-2015" role="doc-biblioentry"><p>
[type-and-resource-safety-2015] A brief introduction to C++"s model for
type- and resource- safety. </p><a href="https://www.stroustrup.com/resource-model.pdf"><p>https://www.stroustrup.com/resource-model.pdf</p></a>
</div>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Boeing 787s must be reset every 51 days or 'misleading data' is shown to pilots (191 pts)]]></title>
            <link>https://www.theregister.com/2020/04/02/boeing_787_power_cycle_51_days_stale_data/</link>
            <guid>41939318</guid>
            <pubDate>Thu, 24 Oct 2024 20:19:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2020/04/02/boeing_787_power_cycle_51_days_stale_data/">https://www.theregister.com/2020/04/02/boeing_787_power_cycle_51_days_stale_data/</a>, See on <a href="https://news.ycombinator.com/item?id=41939318">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>The US Federal Aviation Administration has ordered Boeing 787 operators to switch their aircraft off and on every 51 days to prevent what it called "several potentially catastrophic failure scenarios" – including the crashing of onboard network switches.</p>
<p>The <a target="_blank" href="https://ad.easa.europa.eu/ad/US-2020-06-14">airworthiness directive</a>, due to be enforced from later this month, orders airlines to power-cycle their B787s before the aircraft reaches the specified days of continuous power-on operation.</p>
<p>The power cycling is needed to prevent stale data from populating the aircraft's systems, a problem that has occurred on different 787 systems in the past.</p>

    

<p>According to the directive itself, if the aircraft is powered on for more than 51 days this can lead to "display of misleading data" to the pilots, with that data including airspeed, attitude, altitude and engine operating indications. On top of all that, the stall warning horn and overspeed horn also stop working.</p>

        


        

<p>This alarming-sounding situation comes about because, for reasons the directive did not go into, the 787's common core system (CCS) stops filtering out stale data from key flight control displays. That stale data-monitoring function going down in turn "could lead to undetected or unannunciated loss of common data network (CDN) message age validation, combined with a CDN switch failure".</p>
<div>
<h2 title="Have you turned it off and on again? That's the way to stop the plane becoming a brick">Boeing 787 software bug can shut down planes' generators IN FLIGHT</h2>
<p><a href="https://www.theregister.com/2015/05/01/787_software_bug_can_shut_down_planes_generators/"><span>READ MORE</span></a></p></div>
<p>Solving the problem is simple: power the aircraft down completely before reaching 51 days. It is usual for commercial airliners to spend weeks or more continuously powered on as crews change at airports, or ground power is plugged in overnight while cleaners and maintainers do their thing.</p>
<p>The CDN is a Boeing avionics term for the 787's internal Ethernet-based network. It is built to a slightly more stringent aviation-specific standard than common-or-garden Ethernet, that standard being called ARINC 664. More about ARINC 664 can be read <a target="_blank" rel="nofollow" href="https://www.aim-online.com/products-overview/tutorials/afdx-arinc664p7-tutorial/">here</a>.</p>
<p>Airline pilots were sanguine about the implications of the failures when <i>El Reg</i> asked a handful about the directive. One told us: "Loss of airspeed data combined with engine instrument malfunctions isn't unheard of," adding that there wasn't really enough information in the doc to decide whether or not the described failure would be truly catastrophic. Besides, he said, the backup speed and attitude instruments are – for obvious reasons – completely separate from the main displays.</p>

        

<p>Another mused that loss of engine indications would make it harder to adopt the fallback drill of setting a known pitch and engine power <i>(see sidenote)</i> setting that guarantees safe straight-and-level flight while the pilots consult checklists and manuals to find a fix.</p>

<p>A third commented, tongue firmly in cheek: "Anything like that with the aircraft is unhealthy!"</p>
<p>A previous software bug forced airlines to <a target="_blank" href="https://www.theregister.com/2015/05/01/787_software_bug_can_shut_down_planes_generators/">power down</a> their 787s every 248 days for fear electrical generators could shut down in flight.</p>
<p>Airbus suffers from similar issues with its A350, with a relatively recent but since-patched bug <a target="_blank" href="https://www.theregister.com/2019/07/25/a350_power_cycle_software_bug_149_hours/">forcing power cycles every 149 hours</a>.</p>
<p>Persistent or unfiltered stale data is a known 787 problem. In 2014 a Japan Airlines 787 caught fire because of the (entirely separate, and since fixed) <a target="_blank" href="https://www.theregister.com/2013/01/17/faa_grounds_boeing_787_batteries/">lithium-ion battery problem</a>. Investigators realised the black boxes <a target="_blank" rel="nofollow" href="https://www.flightglobal.com/ntsb-details-issues-with-787-flight-and-data-recorder/115282.article">had been recording false information</a>, hampering their task, because they were falsely accepting stale old data as up-to-the-second real inputs.</p>

        

<p>More seriously, another 787 stale data problem in years gone by saw superseded backup flight plans persisting in standby navigation computers, and activating occasionally.</p>
<p>Activation caused the autopilot to wrongly decide it was halfway through flying a previous journey – and manoeuvre to regain the "correct" flight path. Another symptom was for the flight management system to simply go blank and freeze, triggered by selection of a standard arrival path (STAR) with exactly 14 waypoints – such as the BIMPA 4U approach to Poland's rather busy Warsaw Airport. The Polish air safety regulator <a target="_blank" href="https://regmedia.co.uk/2020/04/02/akt.pdf">published this mildly alarming finding in 2016</a> [2-page PDF, in Polish].</p>
<p>This was fixed through a software update, <a target="_blank" rel="nofollow" href="https://www.federalregister.gov/documents/2019/02/15/2019-02160/airworthiness-directives-the-boeing-company-airplanes">as the US Federal Aviation Administration reiterated last year</a>. In addition, Warsaw's BIMPA 4U approach has since been superseded.</p>
<p><i>The Register</i> asked Boeing to comment. ®</p>
<p>
  <i><b>Editor's note:</b> An earlier version of this article mentioned the Boeing 787 CCS uses a Wind River VxWorks real-time OS product at its heart. While this is true, Wind River has been in touch to remind us "the CCS is made up of 80 to 100 applications," as well as VxWorks, and said the bug described in this article is not the fault of its operating system.</i>
</p>
<p>
  <i>"The functions of VxWorks have nothing to do with the data issue you are highlighting in the 787," a spokesperson added. We are happy to clarify our coverage.</i>
</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Quit Social Media (2016) (189 pts)]]></title>
            <link>https://calnewport.com/quit-social-media/</link>
            <guid>41939189</guid>
            <pubDate>Thu, 24 Oct 2024 20:04:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://calnewport.com/quit-social-media/">https://calnewport.com/quit-social-media/</a>, See on <a href="https://news.ycombinator.com/item?id=41939189">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-5108" itemtype="https://schema.org/CreativeWork" itemscope="">
	<div itemprop="text">
			<div data-src="https://www.youtube.com/embed/3E7hkPZ-HTk" data-id="3E7hkPZ-HTk" data-query="" onclick="perfmattersLazyLoadYouTube(this);"><p><img src="https://i.ytimg.com/vi/3E7hkPZ-HTk/hqdefault.jpg" alt="YouTube video" width="480" height="360" data-pin-nopin="true" nopin="nopin" data-old-src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='480'%20height='360'%20viewBox='0%200%20480%20360'%3E%3C/svg%3E" data-src="https://i.ytimg.com/vi/3E7hkPZ-HTk/hqdefault.jpg"></p></div>
<p><strong>Anti-Social Grumblings</strong></p>
<p>I recently gave a deliberatively provocative TEDx talk titled <a href="https://www.youtube.com/watch?v=3E7hkPZ-HTk">“quit social media”</a> (see the video above). The theme of the event was “visions of the future.” I said my vision of the future was one in which many fewer people use social media.</p>
<p>Earlier this week, Andrew Sullivan published <a href="https://nymag.com/selectall/2016/09/andrew-sullivan-technology-almost-killed-me.html">a long essay in <em>New York Magazine</em></a>&nbsp;that comes at this conclusion from a new angle.</p>
<p>Sullivan, as you might remember, founded the sharp and frenetic political blog, <em>The Daily Dish</em> (ultimately shortened to:&nbsp;<a href="https://dish.andrewsullivan.com/"><em>The Dish</em></a>).&nbsp;The blog was a success but its demands were brutal.</p>
<blockquote><p>For a decade and a half, I’d been a web obsessive, publishing blog posts multiple times a day, seven days a week…My brain had never been so occupied so insistently by so many different subjects and in so public a way for so long.</p></blockquote>
<p>In recent years, his health began to fail. “Did you really survive HIV to die of the web?”, his doctor asked. &nbsp;Finally, in the winter of 2015, he quit, explaining:&nbsp;“I decided, after 15 years, to live in reality.”</p>
<p>This might sound like an occupational hazard of a niche new media job, but a core argument of Sullivan’s essay is that these same demands have gone mainstream:</p>

<blockquote><p>And as the years went by, I realized I was no longer alone. Facebook soon gave everyone the equivalent of their own blog and their own audience. More and more people got a smartphone — connecting them instantly to a deluge of febrile content, forcing them to cull and absorb and assimilate the online torrent as relentlessly as I had once. Twitter emerged as a form of instant blogging of microthoughts. Users were as addicted to the feedback as I had long been — and even more prolific.</p></blockquote>
<p>As he summarizes: “the once-unimaginable pace of the professional blogger was now the default for everyone.”</p>
<p>As I noted in my talk, one of the most common rationales for social media use is that it’s <em>harmless</em> — why miss out on the interesting connection or funny ephemera it might occasionally bring your way?</p>
<p>Sullivan’s essay is a 6000 word refutation&nbsp;of this belief. Social media is not harmless.&nbsp;It can make your life near unlivable.</p>
<p>Sullivan attempts to end with a note of optimism, saying “we are only beginning to get our minds around the costs,” before adding a more resigned coda: “if we are even prepared to accept that there are costs.”</p>
<p>I agree that we’re not yet ready to fully face this reality, and cheeky TED talks by curmudgeonly young professors&nbsp;like me probably won’t move the needle. But when heavyweights like Sullivan join the conversation, I can begin to feel a&nbsp;cautious optimism grow.</p>
		</div>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Brush – A new compatible Gaussian splatting engine (165 pts)]]></title>
            <link>https://github.com/ArthurBrussee/brush</link>
            <guid>41938831</guid>
            <pubDate>Thu, 24 Oct 2024 19:24:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ArthurBrussee/brush">https://github.com/ArthurBrussee/brush</a>, See on <a href="https://news.ycombinator.com/item?id=41938831">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Brush - universal splats</h2><a id="user-content-brush---universal-splats" aria-label="Permalink: Brush - universal splats" href="#brush---universal-splats"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description teaser_compressed.mp4">teaser_compressed.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/7014262/379799498-b7f55b9c-8632-49f9-b34b-d5de52a7a8b0.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjk4MzA5MDMsIm5iZiI6MTcyOTgzMDYwMywicGF0aCI6Ii83MDE0MjYyLzM3OTc5OTQ5OC1iN2Y1NWI5Yy04NjMyLTQ5ZjktYjM0Yi1kNWRlNTJhN2E4YjAubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTAyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEwMjVUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YTNhNmNlZjkzMjkxMzg2YmIyMjNiM2Y5YzZiNWViNGNmNjkwODk4OTY1ZjU4NzYyM2NiZDc3YjkwNWZlY2FkMSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.RT1nmwBsIcbZlSnnLeTkth8fXVH7XcPBKU4vvRULqxI" data-canonical-src="https://private-user-images.githubusercontent.com/7014262/379799498-b7f55b9c-8632-49f9-b34b-d5de52a7a8b0.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjk4MzA5MDMsIm5iZiI6MTcyOTgzMDYwMywicGF0aCI6Ii83MDE0MjYyLzM3OTc5OTQ5OC1iN2Y1NWI5Yy04NjMyLTQ5ZjktYjM0Yi1kNWRlNTJhN2E4YjAubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTAyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEwMjVUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YTNhNmNlZjkzMjkxMzg2YmIyMjNiM2Y5YzZiNWViNGNmNjkwODk4OTY1ZjU4NzYyM2NiZDc3YjkwNWZlY2FkMSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.RT1nmwBsIcbZlSnnLeTkth8fXVH7XcPBKU4vvRULqxI" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto">Brush is a 3D reconstruction engine, using <a href="https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/" rel="nofollow">Gaussian splatting</a>. It aims to be highly portable, flexible and fast. 3D reconstruction shouldn't require special hardware. Brush can render and train on a wide range of systems: <strong>macOS/windows/linux</strong>, <strong>AMD/Nvidia</strong> cards, <strong>Android</strong>, and in a <strong>browser</strong>. To achieve this, brush is built using WebGPU compatible tech, that can run practically anywhere! It uses the <a href="https://github.com/tracel-ai/burn">Burn</a> framework, which has a portable <a href="https://github.com/gfx-rs/wgpu"><code>wgpu</code></a> backend. This project is currently still a proof of concept, and doesn't yet implement any of the extensions to gaussian splatting that have been developed, nor is the performance optimal yet.</p>
<p dir="auto"><a href="https://arthurbrussee.github.io/brush-demo" rel="nofollow"><strong>Try the (experimental) web demo</strong> <img src="https://camo.githubusercontent.com/d789da5bd9ba5cf1ca29eae6c7e20de946dcedcf344a3676c43add82fab516e5/68747470733a2f2f63646e2d69636f6e732d706e672e666c617469636f6e2e636f6d2f3235362f3838382f3838383834362e706e67" alt="chrome logo" width="24" data-canonical-src="https://cdn-icons-png.flaticon.com/256/888/888846.png">
</a></p>
<p dir="auto"><em>NOTE: This only works on desktop Chrome 129+ currently (Oct 2024). Firefox and Safari are hopefully supported <a href="https://caniuse.com/webgpu" rel="nofollow">soon</a>, but currently even firefox nightly and safari technical preview do not work</em></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<p dir="auto">The demo can load pretrained ply splats, and can load datasets to train on. Currently only two formats are supported. A .zip file containing:</p>
<ul dir="auto">
<li>A transform_train.json and images, like the synthetic nerf scene dataset.</li>
<li>An <code>images</code> &amp; <code>sparse</code> folder with <a href="https://github.com/colmap/colmap"><code>COLMAP</code></a> data</li>
</ul>
<p dir="auto">While training you can interact with the splats and see their training dynamics live, and compare the current rendering to training / eval views as the training progresses.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Web</h2><a id="user-content-web" aria-label="Permalink: Web" href="#web"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description combined_compressed.mp4">combined_compressed.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/7014262/379765142-4c70f892-cfd2-419f-8098-b0e20dba23c7.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjk4MzA5MDMsIm5iZiI6MTcyOTgzMDYwMywicGF0aCI6Ii83MDE0MjYyLzM3OTc2NTE0Mi00YzcwZjg5Mi1jZmQyLTQxOWYtODA5OC1iMGUyMGRiYTIzYzcubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTAyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEwMjVUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NDhlZjdiODEwNGZkNzM0MGI0MWVkYWFjM2EwNjdhYzEzZWNmMjA3MTc0NjkwMTE2OTliZWNjMDg4NTYwYjdmMSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.d9KEEPkUE9vCdWJ5y03Uth0A1dObZvQhvost_HAvl30" data-canonical-src="https://private-user-images.githubusercontent.com/7014262/379765142-4c70f892-cfd2-419f-8098-b0e20dba23c7.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjk4MzA5MDMsIm5iZiI6MTcyOTgzMDYwMywicGF0aCI6Ii83MDE0MjYyLzM3OTc2NTE0Mi00YzcwZjg5Mi1jZmQyLTQxOWYtODA5OC1iMGUyMGRiYTIzYzcubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTAyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEwMjVUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NDhlZjdiODEwNGZkNzM0MGI0MWVkYWFjM2EwNjdhYzEzZWNmMjA3MTc0NjkwMTE2OTliZWNjMDg4NTYwYjdmMSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.d9KEEPkUE9vCdWJ5y03Uth0A1dObZvQhvost_HAvl30" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Rerun</h2><a id="user-content-rerun" aria-label="Permalink: Rerun" href="#rerun"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description rerun_dash_compressed.mp4">rerun_dash_compressed.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/7014262/379449916-f679fec0-935d-4dd2-87e1-c301db9cdc2c.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjk4MzA5MDMsIm5iZiI6MTcyOTgzMDYwMywicGF0aCI6Ii83MDE0MjYyLzM3OTQ0OTkxNi1mNjc5ZmVjMC05MzVkLTRkZDItODdlMS1jMzAxZGI5Y2RjMmMubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTAyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEwMjVUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NzZlOTllN2I1YzJhMjkzMjQ1MjE4NzFjZThhYThjOTc4YjI2MzQxMTIxNGU3ZWI4NThkNTE2ZjkwNmE0ZWFiMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.RtaaxhaOK02bPQIW_4D4_Yz6zb0ifB_uE3GvmNNnrdU" data-canonical-src="https://private-user-images.githubusercontent.com/7014262/379449916-f679fec0-935d-4dd2-87e1-c301db9cdc2c.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjk4MzA5MDMsIm5iZiI6MTcyOTgzMDYwMywicGF0aCI6Ii83MDE0MjYyLzM3OTQ0OTkxNi1mNjc5ZmVjMC05MzVkLTRkZDItODdlMS1jMzAxZGI5Y2RjMmMubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTAyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEwMjVUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NzZlOTllN2I1YzJhMjkzMjQ1MjE4NzFjZThhYThjOTc4YjI2MzQxMTIxNGU3ZWI4NThkNTE2ZjkwNmE0ZWFiMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.RtaaxhaOK02bPQIW_4D4_Yz6zb0ifB_uE3GvmNNnrdU" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto">While training, additional data can be visualized with the excellent <a href="https://rerun.io/" rel="nofollow">rerun</a>. To install rerun on your machine, please follow their <a href="https://rerun.io/docs/getting-started/installing-viewer" rel="nofollow">instructions</a>. Open the ./brush_blueprint.rbl in the viewer for best results.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mobile</h2><a id="user-content-mobile" aria-label="Permalink: Mobile" href="#mobile"></a></p>
<details open="">
  <summary>
    
    <span aria-label="Video description brush_android_compressed.mp4">brush_android_compressed.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/7014262/379451093-d6751cb3-ff58-45a4-8321-77d3b0a7b051.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjk4MzA5MDMsIm5iZiI6MTcyOTgzMDYwMywicGF0aCI6Ii83MDE0MjYyLzM3OTQ1MTA5My1kNjc1MWNiMy1mZjU4LTQ1YTQtODMyMS03N2QzYjBhN2IwNTEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTAyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEwMjVUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZjQxMDZlMDc2OTAxNmY5Y2NjNTIwZDU0ZDk1MzA0NjIwNmZjY2E2YjYwY2ExZmM1ZGE2ZjI5NDQ0ZDk2Nzg4MSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.WngStxrtUTvVoBQ-fscAA1F3Fs-h7kimVBqRpUlepqc" data-canonical-src="https://private-user-images.githubusercontent.com/7014262/379451093-d6751cb3-ff58-45a4-8321-77d3b0a7b051.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjk4MzA5MDMsIm5iZiI6MTcyOTgzMDYwMywicGF0aCI6Ii83MDE0MjYyLzM3OTQ1MTA5My1kNjc1MWNiMy1mZjU4LTQ1YTQtODMyMS03N2QzYjBhN2IwNTEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MTAyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDEwMjVUMDQzMDAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZjQxMDZlMDc2OTAxNmY5Y2NjNTIwZDU0ZDk1MzA0NjIwNmZjY2E2YjYwY2ExZmM1ZGE2ZjI5NDQ0ZDk2Nzg4MSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.WngStxrtUTvVoBQ-fscAA1F3Fs-h7kimVBqRpUlepqc" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto">Live training on a pixel 7</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why</h2><a id="user-content-why" aria-label="Permalink: Why" href="#why"></a></p>
<p dir="auto">Machine learning for real time rendering has a lot of potential, but at the same time, most popular ML tools don't align well with r. Rendering requires low latency, usually involve dynamic shapes, and it's not pleasant to attempt to ship apps with large PyTorch/Jax/CUDA deps calling out to python in a rendering loop. The usual fix is to write a seperate training and inference application. Brush on the other hand, written in rust using <code>wgpu</code> and <code>burn</code>, can produce simple dependency free binaries, and can run on nearly all devices.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting started" href="#getting-started"></a></p>
<p dir="auto">Install rust 1.81+ and run <code>cargo run</code> or <code>cargo run --release</code>. You can run tests with <code>cargo test --all</code>. Brush uses the wonderful <a href="https://github.com/ArthurBrussee/brush/blob/main/rerun.io">rerun</a> for additional visualizations while training.
It currently requires rerun 0.19 however, which isn't released yet.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Windows/macOS/Linux</h3><a id="user-content-windowsmacoslinux" aria-label="Permalink: Windows/macOS/Linux" href="#windowsmacoslinux"></a></p>
<p dir="auto">Simply <code>cargo run</code> or <code>cargo run --release</code> from the workspace root.</p>
<p dir="auto">Note: Linux has not yet been tested but <em>should</em> work. Windows works well, but does currently only works on Vulkan.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Web</h3><a id="user-content-web-1" aria-label="Permalink: Web" href="#web-1"></a></p>
<p dir="auto">This project uses <a href="https://github.com/trunk-rs/trunk"><code>trunk</code></a> to build for the web. Install trunk, and then run <code>trunk serve</code> or <code>trunk serve --release</code> to run a development server.</p>
<p dir="auto">WebGPU is still a new standard, and as such, only the latest versions of Chrome work currently. Firefox nightly should work but unfortunately crashes currently.</p>
<p dir="auto">The public web demo is registered for the <a href="https://chromestatus.com/feature/5126409856221184" rel="nofollow">subgroups origin trial</a>. To run the web demo for yourself, please enable the "Unsafe WebGPU support" flag in Chrome.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Android</h3><a id="user-content-android" aria-label="Permalink: Android" href="#android"></a></p>
<p dir="auto">To build on Android, see the more detailed README instructions at crates/brush-android.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">iOS</h3><a id="user-content-ios" aria-label="Permalink: iOS" href="#ios"></a></p>
<p dir="auto">Brush <em>should</em> work on iOs but there is currently no project setup to do so.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Technical details</h2><a id="user-content-technical-details" aria-label="Permalink: Technical details" href="#technical-details"></a></p>
<p dir="auto">Brush is split into various crates. A quick overview of the different responsibilities are:</p>
<ul dir="auto">
<li><code>brush-render</code> is the main crate that pulls together the kernels into rendering functions.</li>
<li><code>brush-train</code> has code to actually train Gaussians, and handle larger scale optimizations like splitting/cloning gaussians etc.</li>
<li><code>brush-viewer</code> handles the UI and integrating the training loop.</li>
<li><code>brush-android</code> is the binary target for running on android, while <code>brush-desktop</code> is for running both on web, and mac/Windows/Linux.</li>
<li><code>brush-wgsl</code> handles some kernel inspection for generating CPU-side structs and interacing with <a href="https://github.com/bevyengine/naga_oil">naga-oil</a> to handle shader imports.</li>
<li><code>brush-dataset</code> handles importing different datasets like COLMAP or synthetic nerf data.</li>
<li><code>brush-prefix-sum</code> and <code>brush-sort</code> are only compute kernels and should be largely independent of Brush (other than <code>brush-wgsl</code>).</li>
<li><code>rrfd</code> is a small extension of <a href="https://github.com/PolyMeilex/rfd"><code>rfd</code></a></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Kernels</h3><a id="user-content-kernels" aria-label="Permalink: Kernels" href="#kernels"></a></p>
<p dir="auto">The kernels are written in a "sparse" style, that is, only work for visible gaussians is done, though the final calculated gradients are dense. Brush uses a GPU radix sort based on <a href="https://www.amd.com/en/products/graphics/technologies/fidelityfx.html" rel="nofollow">FidelityFX</a> (see <code>crates/brush-sort</code>). The sorting is done in two parts - first splats are sorted only by depth, then sorted by their tile ID, which saves some sorting time compared to sorting both depth and tile ids at the same time.</p>
<p dir="auto">Compatibility with WebGPU does bring some challenges, even with (the excellent) <a href="https://github.com/gfx-rs/wgpu">wgpu</a>.</p>
<ul dir="auto">
<li>WebGPU lacks native atomic floating point additions, and a software CAS loop has to be used.</li>
<li>GPU readbacks have to be async on WebGPU. A rendering pass can't do this unless the whole rendering becomes async, which has its own perils, and isn't great for an UI. The reference tile renderer requires reading back the number of "intersections" (each visible tile of a gaussian is one intersection), but this is not feasible. This is worked around by assuming a worst case. To reduce the number of tiles the rasterizer culls away unused tiles by intersecting the gaussian ellipses with the screenspace tiles.</li>
</ul>
<p dir="auto">The WGSL kernels use <a href="https://github.com/bevyengine/naga_oil">naga_oil</a> to manage imports. brush-wgsl additionally does some reflection to generate rust code to send uniform data to a kernel. In the future, it might be possible to port the kernels to Burns new <a href="https://github.com/tracel-ai/cubecl"><code>CubeCL</code></a> language, which is much more ergonomic and would allow generating CUDA / rocM kernels. It might also be possible to integrate with George Kopanos' <a href="https://github.com/google/slang-gaussian-rasterization">Slang kernels</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Benchmarks</h3><a id="user-content-benchmarks" aria-label="Permalink: Benchmarks" href="#benchmarks"></a></p>
<p dir="auto">Rendering performance is expected to be very competitive with gSplat, while training performance is still a bit slower. You can run some benchmarks using <code>cargo bench</code>. The performance of the splatting forward and backwards kernel are faster than the <em>legacy</em> gSplat kernels as they use some new techniques for better performance, but they haven't been compared yet to the more recent gSplat kernels. End-to-end training performance is also still slower, due to other overheads.</p>
<p dir="auto">For additional profiling, you can use <a href="https://github.com/wolfpld/tracy">tracy</a> and run with <code>cargo run --release --feature=tracy</code>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Quality</h3><a id="user-content-quality" aria-label="Permalink: Quality" href="#quality"></a></p>
<p dir="auto">Quality is similair, but for now still somewhat lagging behind the original GS implementation. This is likely due to some suboptimal splitting/cloning heuristics.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Scene</th>
<th>Brush</th>
<th>GS paper</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bicycle@7K</td>
<td>23.2</td>
<td>23.604</td>
</tr>
<tr>
<td>Garden@7k</td>
<td>25.8</td>
<td>26.245</td>
</tr>
<tr>
<td>Stump@7k</td>
<td>24.9</td>
<td>25.709</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgements</h2><a id="user-content-acknowledgements" aria-label="Permalink: Acknowledgements" href="#acknowledgements"></a></p>
<p dir="auto"><a href="https://github.com/nerfstudio-project/gsplat"><strong>gSplat</strong></a>, for their reference version of the kernels</p>
<p dir="auto"><strong>Peter Hedman &amp; George Kopanas</strong>, for the many discussions &amp; pointers.</p>
<p dir="auto"><strong>The Burn team</strong>, for help &amp; improvements to Burn along the way</p>
<p dir="auto"><strong>Raph Levien</strong>, for the <a href="https://github.com/googlefonts/compute-shader-101/pull/31" data-hovercard-type="pull_request" data-hovercard-url="/googlefonts/compute-shader-101/pull/31/hovercard">original version</a> of the GPU radix sort.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Disclaimer</h2><a id="user-content-disclaimer" aria-label="Permalink: Disclaimer" href="#disclaimer"></a></p>
<p dir="auto">This is <em>not</em> an official Google product. This repository is a forked public version of <a href="https://github.com/google-research/google-research/tree/master/brush_splat">the google-research repository</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Israel launched a dozen attacks on UN troops in Lebanon, says leaked report (196 pts)]]></title>
            <link>https://www.ft.com/content/151eb482-6415-48a8-bf3f-baed00018c4e</link>
            <guid>41938822</guid>
            <pubDate>Thu, 24 Oct 2024 19:23:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ft.com/content/151eb482-6415-48a8-bf3f-baed00018c4e">https://www.ft.com/content/151eb482-6415-48a8-bf3f-baed00018c4e</a>, See on <a href="https://news.ycombinator.com/item?id=41938822">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><a data-trackable="a11y-skip-to-help" href="https://www.ft.com/accessibility">Accessibility help</a><a data-trackable="a11y-skip-to-navigation" href="#site-navigation">Skip to navigation</a><a data-trackable="a11y-skip-to-content" href="#site-content">Skip to content</a><a data-trackable="a11y-skip-to-footer" href="#site-footer">Skip to footer</a></p><div id="barrier-page"><div id="heroOffer-Hero offer-596bb8f3-5b5a-405d-8131-9d2f83fa19ba" data-component="heroOffer" data-component-unique-name="Hero offer"><div data-o-grid-colspan="12 L6"><p><span></span><span></span><span></span><span>Subscribe to unlock this article</span><span></span></p></div><div data-o-grid-colspan="12 L6"><p><h2><span>Limited time offer</span></h2><h2><strong><span>Save 50% on Standard Digital</span></strong></h2></p><p><span>was </span><span>CHF660</span><span> </span><span>now </span><span>CHF329</span><span> for your first year, equivalent to </span><span>CHF27.42</span><span> per month.
Make up your own mind. Build robust opinions with the FT’s trusted journalism.
Take this offer before 24 October.</span></p></div></div><div id="recommendedOffers-Recommended offers-970a735c-9068-41df-9018-9dfe0b917fe9" data-component="recommendedOffers" data-component-unique-name="Recommended offers"><p><h2 data-o-grid-colspan="12">Explore more offers.</h2></p><div data-o-grid-colspan="12"><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_trial.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>CHF1</span><span> for 4 weeks</span></p><p><span>Then </span><span>CHF85</span><span> per month. Complete digital access to quality FT journalism. Cancel anytime during your trial.</span></p></div><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_weekend_premium.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>CHF85</span><span> per month</span></p><p><span>Get Premium &amp; FT Weekend Print edition for the price of Premium. Complete digital access to quality analysis and expert insights, complemented with our award-winning Weekend Print edition.</span></p></div><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_print.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>CHF345</span><span> for your first year</span></p><p><span>FT newspaper delivered Monday-Saturday, plus FT Digital Edition delivered to your device Monday-Saturday.</span></p></div></div></div><div data-component="subscriptionOptions" data-component-unique-name="Subscription options"><h2>Explore our full range of subscriptions.</h2><div><div><p>Discover all the plans currently available in your country</p></div><div><p>Digital access for organisations. Includes exclusive features and content.</p></div></div></div><div data-component="whyFT" data-component-unique-name="Why FT"><div><h2>Why the FT?</h2><p>See why over a million readers pay to read the Financial Times.</p></div><p><a href="https://subs.ft.com/whytheft?ft-content-uuid=151eb482-6415-48a8-bf3f-baed00018c4e">Find out why</a></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lingo: A Go micro language framework for building Domain Specific Languages (126 pts)]]></title>
            <link>https://about.gitlab.com/blog/2022/05/26/a-go-micro-language-framework-for-building-dsls/</link>
            <guid>41938819</guid>
            <pubDate>Thu, 24 Oct 2024 19:23:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://about.gitlab.com/blog/2022/05/26/a-go-micro-language-framework-for-building-dsls/">https://about.gitlab.com/blog/2022/05/26/a-go-micro-language-framework-for-building-dsls/</a>, See on <a href="https://news.ycombinator.com/item?id=41938819">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-v-b794d8fe="" data-v-7488832a="" data-v-74bd29c6=""><p>Domain Specific Languages (DSL) are small, focused languages with a narrow
domain of applicability. DSLs are tailored towards their target domain so that
domain experts can formalize ideas based on their knowledge and background.</p>
<p>This makes DSLs powerful tools that can be used for the purpose of increasing
programmer efficiency by being more expressive in their target
domain, compared to general purpose languages, and by providing concepts to
reduce the cognitive load on their users.</p>
<p>Consider the problem of summing up the balances of different bank accounts in a
CSV file. A sample CSV file is provided in the example below where the first
column contains the name of the account holder and the second column contains
the account balance.</p>
<pre><code>name, balance
Lisa, 100.30
Bert, 241.41
Maria, 151.13
</code></pre>
<p>You could solve the problem of summing up balances by using a general-purpose
language such as <a href="https://www.ruby-lang.org/en/">Ruby</a> as in the code snippet
below. Apart from the fact that the code below is not very robust, it contains
a lot of boilerplate that is irrelevant to the problem at hand, i.e., summing
up the account balances.</p>
<pre><code>#!/usr/bin/env ruby

exit(1) if ARGV.empty? || !File.exist?(ARGV[0])

sum = 0
File.foreach(ARGV[0]).each_with_index do |line, idx|
  next if idx == 0
  sum += Float(line.split(',')[1])
end

puts sum.round(2)
</code></pre>
<p>Below is an example <a href="https://en.wikipedia.org/wiki/AWK">AWK script</a> that solves
the same problem. AWK is a DSL that was specifically designed to address
problems related to text-processing.</p>
<pre><code>#!/usr/bin/awk -f

BEGIN{FS=","}{sum+=$2}END{print sum}
</code></pre>
<p>The Ruby program has a size of 208 characters, whereas the AWK program has a size of 56. The AWK program is roughly 4x smaller than its Ruby
counterpart. In addition, the AWK implementation is more robust by being less
prone to glitches that may appear in the CSV file (e.g., empty newlines,
wrongly formatted data-fields). The significant difference in terms of size
illustrates that DSLs, by being more focused on solving specific problems, can
make their users more productive by sparing them the burden to write
boilerplate code and narrowing the focus of the language on the problem at
hand.</p>
<p>Some popular DSLs most software developers use on a regular basis include
<a href="https://en.wikipedia.org/wiki/Regular_expression">Regular Expressions</a> for
pattern matching, AWK for text
transformation or <a href="https://en.wikipedia.org/wiki/SQL">Standard Query Language</a>
for interacting with databases.</p>
<h2 id="challenges-when-designing-domain-specific-languages" tabindex="-1">Challenges when designing Domain Specific Languages <a href="#challenges-when-designing-domain-specific-languages"><svg width="24" height="24" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z" fill="#333333"></path><path d="M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z" fill="#333333"></path><path d="M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z" fill="#333333"></path></svg></a></h2>
<p>Prototyping, designing and evolving DSLs is a
challenging process. In our experience this is an exploratory cycle where you
constantly prototype ideas, incorporate them into the language, try them out in
reality, collect feedback and improve the DSL based on the feedback.</p>
<p>When designing a DSL, there are many components that have to be implemented and
evolved. At a very high level there are two main components: the language
lexer/parser and the language processor. The lexer/parser
is the component that accepts input as per the language definition which is
usually specified specified by means of a language grammar. The parsing/lexing
phase produces a syntax tree which is then passed onto the language processor.
A language processor evaluates the syntax tree. In the example we saw earlier,
we ran both the Ruby and AWK interpreters providing our scripts and the CSV
file as input; both interpreters evaluated the scripts and this evaluation
yielded the sum of all the account balances as a result.</p>
<p>Tools such as parser generators can significantly reduce the effort of
lexer/parser development by means of code generation. Sophisticated DSL
frameworks such as <a href="https://www.jetbrains.com/mps/">JetBrains MPS</a> or
<a href="https://www.eclipse.org/Xtext/">Xtext</a> also provide features that help
implement custom language support in IDEs. However, if present at all, the
support for building the language processors is usually limited to generating
placeholders functions or boilerplate code for the language components that
have to be filled-in by the DSL developer. Moreover, such large and powerful DSL
frameworks usually have a fairly steep learning curve so that they are probably
a better fit for more sophisticated DSLs as opposed to small, easily
embeddable, focused languages, which we refer to as <em>micro languages</em>.</p>
<p>In some situations, it may be worth considering working around these problems
by just relying on standard data exchange formats such as <code>.toml</code>, <code>.yaml</code> or
<code>.json</code> as a means of configuration. Similar to the parser generators, using
such a format may relieve some of the burden when it comes to parser
development effort. However, this approach does not help when it comes to the
implementation of the actual language processor. In addition, most standard data
exchange formats are inherently limited to representing data in terms of simple
concepts (such as lists, dictionaries, strings and numbers). This limitation
can lead to bloated configuration files quickly as shown in the following
example.</p>
<p>Imagine the development of a calculator that operates on integers using
multiplication <code>*</code>, addition <code>+</code>. When using a data-description language like
YAML in the example below, you can see that even a small simple term like <code>1 + 2 * 3 + 5</code>
can be hard to reason about, and by adding more terms the configuration
file would get bloated quickly.</p>
<pre><code>term:
  add: 
    - 1
    - times:
      - 2
      - 3
    - 5
</code></pre>
<p>This blog post is focused on the design of micro languages. The core idea is to
provide a simple, extensible language core that can be easily extended with
custom-types and custom functions; the language can evolve without having
to touch the parser or the language processor. Instead, the DSL designer can
just focus on the concepts that ought to be integrated into the DSL by
implementing interfaces and "hooking" them into the core language
implementation.</p>
<h2 id="lingo-a-micro-language-framework-for-go" tabindex="-1">Lingo: A micro language framework for Go <a href="#lingo-a-micro-language-framework-for-go"><svg width="24" height="24" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z" fill="#333333"></path><path d="M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z" fill="#333333"></path><path d="M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z" fill="#333333"></path></svg></a></h2>
<p>At GitLab, Go is one of our main programming languages and some of the tools we
develop required their own, small, embeddable DSLs so that users could properly
configure and interact with them.</p>
<p>Initially, we tried to integrate already existing, embeddable and expandable
language implementations. Our only condition was that they had to be
embeddable natively into a Go application. We explored several great free and
open-source (FOSS) projects such as <a href="https://github.com/Shopify/go-lua">go-lua</a>
which is Lua VM implemented in Go, <a href="https://github.com/traefik/yaegi">go-yeagi</a>
which provides a Go interpreter with which Go can be used as a scripting
language or <a href="https://github.com/glycerine/zygomys">go-zygomys</a> which is a LISP
interpreter written in Go. However, these packages are essentially modules to
integrate general-purpose languages on top of which a DSL could be built. These modules ended up being fairly complex. In contrast, we wanted to have basic support to design, implement, embed and evolve DSLs natively into a Go
application that is flexible, small, simple/easy to grasp, evolve and
adapt.</p>
<p>We were looking for a micro language framework with the properties listed below:</p>
<ol>
<li>Stability: Changes applied to the DSL should neither require any changes to the core lexer/parser implementation nor to the language processor implementation.</li>
<li>Flexibility/Composability: New DSL concepts (data-types, functions) can be integrated via a simple plug-in mechanism.</li>
<li>Simplicity: the language framework should have just
enough features to provide a foundation that is powerful enough to implement
and evolve a custom DSL. In addition, the whole implementation of the micro
language framework should be in pure Go so that it is easily embeddable in Go
applications.</li>
</ol>
<p>Since none of the available FOSS tools we looked at was able to
fulfill all of those requirements, we developed our own micro language framework
in Go called Lingo which stands for "<strong>L</strong>ISP-based Domain Specific Languages
(DSLs) <strong>in Go</strong>". Lingo is completely FOSS and available in the <a href="https://gitlab.com/gitlab-org/vulnerability-research/foss/lingo">Lingo Git repository</a>
under the free and open source space of the <a href="https://about.gitlab.com/handbook/engineering/development/sec/secure/vulnerability-research/">Vulnerability Research Team</a>.</p>
<p><a href="https://gitlab.com/gitlab-org/vulnerability-research/foss/lingo">Lingo</a>
provides a foundation for building DSLs based on Symbolic Expressions (S-expressions), i.e.,
expressions provided in the form of nested lists <code>(f ...)</code> where <code>f</code> can be
considered as the placeholder that represents the function symbol. Using this format,
the mathematical term we saw earlier could be written as S-expression <code>(+ 1 (* 2 3) 5)</code>.</p>
<p>S-expressions are versatile and easy to process due to their uniformity. In
addition, they can be used to represent both code and data in a consistent
manner.</p>
<p>With regards to the Stability, Flexibility and Composability properties,
<a href="https://gitlab.com/gitlab-org/vulnerability-research/foss/lingo">Lingo</a>
provides a simple plug-in mechanism to add new functions as well as types
without having to touch the core parser or language processor. From the
perspective of the S-expression parser, the actual function symbol is
essentially irrelevant with regards to the S-expression parsing. The language processor is just evaluating S-expressions and dispatching the execution to the interface implementations. These implementations are provided by the plug-ins based on the function symbol.</p>
<p>With regards to Simplicity, the Lingo code base is roughly 3K lines of pure Go code including the lexer/parser, an
engine for code transformation, and the interpreter/evaluator. The small size
should make it possible to understand the entirety of the implementation.</p>
<p>Readers that are interested in the technical details of
Lingo itself can have a look at the
<a href="https://gitlab.com/gitlab-org/vulnerability-research/foss/lingo/-/blob/main/README.md">README.md</a>
where the implementation details and the used theoretical foundations are explained.
This blog post focuses on how
Lingo can be used to build a DSL from scratch.</p>
<h2 id="using-lingo-to-design-a-data-generation-engine" tabindex="-1">Using Lingo to design a data generation engine <a href="#using-lingo-to-design-a-data-generation-engine"><svg width="24" height="24" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z" fill="#333333"></path><path d="M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z" fill="#333333"></path><path d="M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z" fill="#333333"></path></svg></a></h2>
<p>In this example we are designing a data-generation engine in Go using
Lingo as a foundation. Our data generation engine may be used to generate structured input
data for fuzzing or other application contexts. This example illustrates how
you can use Lingo to create a language and the corresponding language
processor. Going back to the example from the beginning, let us assume we would
like to generate CSV files in the format we saw at the beginning covering
account balances.</p>
<pre><code>name, balance
Lisa, 100.30
Bert, 241.41
Maria, 151.13
</code></pre>
<p>Our language includes the following functions:</p>
<ol>
<li><code>(oneof s0, s1, ..., sN)</code>: randomly returns one of the parameter strings <code>sX</code> (0 &lt;= X &lt;= N).</li>
<li><code>(join e0, e1, ..., eN)</code>: joins all argument expressions and concatenates their string representation <code>eX</code> (0 &lt;= X &lt;= N).</li>
<li><code>(genfloat min max)</code>: generates a random float number X (0 &lt;= X &lt;= N) and returns it.</li>
<li><code>(times num exp)</code>: repeats the pattern generated by exp num times.</li>
</ol>
<p>For this example we are using
Lingo to build the language and the language processor to automatically generate CSV
output which we are going to feed back into the Ruby and AWK programs we saw in
the introduction in order to perform a stress test on them.</p>
<p>We refer to our new language/tool as <em>Random Text Generator</em> (RTG) <code>.rtg</code>.
Below is a sample script <code>script.rtg</code> we'd like our program to digest in order
to randomly generate CSV files. As you can see in the example below, we are
joining sub-strings starting with the CSV header <code>name, balance</code>
after which we randomly generate 10 lines of names and balance amounts. In
between, we also randomly generate some empty lines.</p>
<pre><code>(join 
  (join "name" "," "balance" "\n")
  (times 10 
    '(join 
      (oneof 
        "Jim" 
        "Max" 
        "Simone" 
        "Carl" 
        "Paul" 
        "Karl" 
        "Ines" 
        "Jane" 
        "Geralt" 
        "Dandelion" 
        "Triss" 
        "Yennefer" 
        "Ciri") 
      "," 
      (genfloat 0 10000) 
      "\n" 
      (oneof "" "\n"))))
</code></pre>
<p>Our engine takes the script above written in RTG and generates random CSV
content. Below is an example CSV file generated from this script.</p>
<pre><code>name,balance
Carl,25.648205
Ines,11758.551

Ciri,13300.558
...
</code></pre>
<p>For the remainder of this section, we explore how we can implement a
data generation engine based on Lingo. The implementation of RTG requires
the two main ingredients: (1) a float data type and a result object to integrate a float
representation and (2) implementations for the <code>times</code>, <code>oneof</code>, <code>genfloat</code> and
<code>join</code> functions.</p>
<h3 id="introducing-a-float-data-type-and-result-objects" tabindex="-1">Introducing a float data type and result objects <a href="#introducing-a-float-data-type-and-result-objects"><svg width="24" height="24" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z" fill="#333333"></path><path d="M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z" fill="#333333"></path><path d="M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z" fill="#333333"></path></svg></a></h3>
<p>Lingo differentiates between data types and result objects. Data types indicate how data is
meant to be used and result objects are used to pass intermediate results
between functions where every result has a unique type. In the code snippet
below, we introduce a new <code>float</code> data type. The comments in the code snippet below
provide more details.</p>
<pre><code>// introduce float type
var TypeFloatId, TypeFloat = types.NewTypeWithProperties("float", types.Primitive)
// introduce token float type for parser
var TokFloat = parser.HookToken(parser.TokLabel(TypeFloat.Name))

// recognize (true) as boolean
type FloatMatcher struct{}

// this function is used by the parser to "recognize" floats as such
func (i FloatMatcher) Match(s string) parser.TokLabel {
  if !strings.Contains(s, ".") {
    return parser.TokUnknown
  }

  if _, err := strconv.ParseFloat(s, 32); err == nil {
	return TokFloat.Label
  }

  return parser.TokUnknown
}
func (i FloatMatcher) Id() string {
  return string(TokFloat.Label)
}

func init() {
  // hook matcher into the parser
  parser.HookMatcher(FloatMatcher{})
}
</code></pre>
<p>In addition, we also require a result object which we can use to pass around
float values. This is an interface implementation where most of the functions names
are self-explanatory. The important bit is the <code>Type</code> function
that returns our custom <code>float</code> type we introduced in the last snippet.</p>
<pre><code>type FloatResult struct{ Val float32 }
// deep copy
func (r FloatResult) DeepCopy() eval.Result { return NewFloatResult(r.Val) }
// returns the string representation of this result type
func (r FloatResult) String() string {
  return strconv.FormatFloat(float64(r.Val), 'f', -1, 32)
}
// returns the data type for this result type
func (r FloatResult) Type() types.Type   { return custtypes.TypeFloat }
// call-back that is cleaned up when the environment is cleaned up
func (r FloatResult) Tidy()              {}

func (r FloatResult) Value() interface{} { return r.Val }
func (r *FloatResult) SetValue(value interface{}) error {
  boolVal, ok := value.(float32)
  if !ok {
    return fmt.Errorf("invalid type for Bool")
  }
  r.Val = boolVal
  return nil
}
func NewFloatResult(value float32) *FloatResult {
  return &amp;FloatResult{
    value,
  }
}
</code></pre>
<h3 id="implementing-the-dsl-functions" tabindex="-1">Implementing the DSL functions <a href="#implementing-the-dsl-functions"><svg width="24" height="24" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z" fill="#333333"></path><path d="M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z" fill="#333333"></path><path d="M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z" fill="#333333"></path></svg></a></h3>
<p>Similar to the data type and return object, implementation of a DSL function is
as simple as implementing an interface. In the example below we implement the
<code>genfloat</code> function as an example. The most important parts are the <code>Symbol()</code>,
<code>Validate()</code> and <code>Evaluate()</code> functions. The <code>Symbol()</code> function returns the
function symbol which is <code>genfloat</code> in this particular case.</p>
<p>Both, the <code>Validate()</code> and <code>Evaluate()</code> functions take the environment <code>env</code>
and the parameter Stack <code>stack</code> as the parameter. The environment is used to store
intermediate results which is useful when declaring/defining variables. The <code>stack</code> includes the input parameters of the function. For
<code>(genfloat 0 10000)</code>, the stack would consist out of two <code>IntResult</code> parameters
<code>0</code> and <code>10000</code> where <code>IntResult</code> is a standard result object already provided by the
core implementation of Lingo. <code>Validate()</code> makes sure that the parameter can be
digested by the function at hand, whereas <code>Evaluate()</code> actually invokes the
function. In this particular case, we are generating a float value within the
specified range and return the corresponding <code>FloatResult</code>.</p>
<pre><code>type FunctionGenfloat struct{}

// returns a description of this function
func (f *FunctionGenfloat) Desc() (string, string) {
  return fmt.Sprintf("%s%s %s%s",
    string(parser.TokLeftPar),
    f.Symbol(),
	"min max",
	string(parser.TokRightPar)),
	"generate float in rang [min max]"
}

// this is the symbol f of the function (f ...)
func (f *FunctionGenfloat) Symbol() parser.TokLabel {
  return parser.TokLabel("genfloat")
}

// validates the parameters of this function which are passed in
func (f *FunctionGenfloat) Validate(env *eval.Environment, stack *eval.StackFrame) error {
  if stack.Size() != 2 {
    return eval.WrongNumberOfArgs(f.Symbol(), stack.Size(), 2)
  }

  for idx, item := range stack.Items() {
    if item.Type() != types.TypeInt {
	  return eval.WrongTypeOfArg(f.Symbol(), idx+1, item)
	}
  }
  return nil
}

// evaluates the function and returns the result
func (f *FunctionGenfloat) Evaluate(env *eval.Environment, stack *eval.StackFrame) (eval.Result, error) {
  var result float32
  rand.Seed(time.Now().UnixNano())
  for !stack.Empty() {
    max := stack.Pop().(*eval.IntResult)
    min := stack.Pop().(*eval.IntResult)

	minval := float32(min.Val)
	maxval := float32(max.Val)

	result = minval + (rand.Float32() * (maxval - minval))
  }

  return custresults.NewFloatResult(result), nil
}

func NewFunctionGenfloat() (eval.Function, error) {
  fun := &amp;FunctionGenfloat{}
  parser.HookToken(fun.Symbol())
  return fun, nil
}
</code></pre>
<h3 id="putting-it-all-together" tabindex="-1">Putting it all together <a href="#putting-it-all-together"><svg width="24" height="24" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z" fill="#333333"></path><path d="M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z" fill="#333333"></path><path d="M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z" fill="#333333"></path></svg></a></h3>
<p>After implementing all the functions, we only have to register/integrate them
(<code>eval.HookFunction(...)</code>) so that Lingo properly resolves them when processing
the program. In the example below, we are registering all of the custom functions
we implemented, i.e., <code>times</code>, <code>oneof</code>, <code>join</code>, <code>genfloat</code>. The <code>main()</code>
function in the example below includes the code required to evaluate our script
<code>script.rtg</code>.</p>
<pre><code>// register function
func register(fn eval.Function, err error) {
  if err != nil {
    log.Fatalf("failed to create %s function %s:", fn.Symbol(), err.Error())
  }
  err = eval.HookFunction(fn)
  if err != nil {
    log.Fatalf("failed to hook bool function %s:", err.Error())
  }
}

func main() {
  // register custom functions
  register(functions.NewFunctionTimes())
  register(functions.NewFunctionOneof())
  register(functions.NewFunctionJoin())
  register(functions.NewFunctionGenfloat())
  register(functions.NewFunctionFloat())
  if len(os.Args) &lt;= 1 {
    fmt.Println("No script provided")
    os.Exit(1)
  }
  // evaluate script
  result, err := eval.RunScriptPath(os.Args[1])
  if err != nil {
    fmt.Println(err.Error())
    os.Exit(1)
  }

  // print output
  fmt.Printf(strings.ReplaceAll(result.String(), "\\n", "\n"))

  os.Exit(0)
}
</code></pre>
<p>The source code for RTG is available
<a href="https://gitlab.com/julianthome/lingo-example">here</a>. You can find information
about how to build and run the tool in the
<a href="https://gitlab.com/julianthome/lingo-example/-/blob/main/README.md">README.md</a>.</p>
<p>With approx. 300 lines of Go code, we have successfully designed a language and
implemented a language processor. We can now use RTG to test the robustness of
the Ruby (<code>computebalance.rb</code>) and AWK scripts (<code>computebalance.awk</code>) we used
at the beginning to sum up account balances.</p>
<pre><code>timeout 10 watch -e './rtg script.rtg &gt; out.csv &amp;&amp; ./computebalance.awk out.csv'
timeout 10 watch -e './rtg script.rtg &gt; out.csv &amp;&amp; ./computebalance.rb out.csv'
</code></pre>
<p>The experiment above shows that the files generated by means of RTG can be
properly digested by the AWK script which is much more robust since it can cope
with the all generated CSV files. In contrast, executing of the Ruby script
results in errors because it cannot properly cope with newlines as they appear
in the CSV file.</p>
<p :="">Cover image by <a href="https://unsplash.com/@kristianstrand">Charles Deluvio</a> on <a href="https://unsplash.com/photos/p8gzCnZf39k">Unsplash</a></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Quantized Llama models with increased speed and a reduced memory footprint (469 pts)]]></title>
            <link>https://ai.meta.com/blog/meta-llama-quantized-lightweight-models/?_fb_noscript=1</link>
            <guid>41938473</guid>
            <pubDate>Thu, 24 Oct 2024 18:52:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ai.meta.com/blog/meta-llama-quantized-lightweight-models/?_fb_noscript=1">https://ai.meta.com/blog/meta-llama-quantized-lightweight-models/?_fb_noscript=1</a>, See on <a href="https://news.ycombinator.com/item?id=41938473">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p>At <a href="https://ai.meta.com/blog/llama-3-2-connect-2024-vision-edge-mobile-devices/" target="_blank" data-lnfb-mode="ie"><u>Connect 2024</u></a> last month, we open sourced Llama 3.2 1B and 3B—our smallest models yet—to address the demand for on-device and edge deployments. Since their release, we’ve seen not just how the community has adopted our lightweight models, but also how grassroots developers are quantizing them to save capacity and memory footprint, often at a tradeoff to performance and accuracy.</p><p>As we’ve <a href="https://ai.meta.com/blog/llama-3-2-connect-2024-vision-edge-mobile-devices/" target="_blank" data-lnfb-mode="ie"><u>shared before</u></a>, we want to make it easier for more developers to build with Llama, without needing significant compute resources and expertise. Today, we’re sharing quantized versions of Llama 3.2 1B and 3B models. These models offer a reduced memory footprint, faster on-device inference, accuracy, and portability—all while maintaining quality and safety for developers to deploy on resource-constrained devices. Given the limited runtime memory available on mobile devices, we prioritized short-context applications up to 8K for these new quantized models. Our results show we can achieve superior accuracy by training with quantization as opposed to post-processing. The models we are sharing today have 2-4x speedup and an average reduction of 56% in model size compared to the original format, based on testing with Android OnePlus 12 models. We also reduce memory usage by an average of 41%. Starting today, the community can deploy our <a href="https://www.llama.com/" target="_blank" data-lnfb-mode="ie"><u>quantized models</u></a> onto more mobile CPUs, giving them the opportunity to build unique experiences that are fast and provide more privacy since interactions stay entirely on device.</p><p>We developed these state-of-the-art models using Quantization-Aware Training with LoRA adaptors (QLoRA) to optimize performance in low-precision environments. We also used SpinQuant, a technique that enables us to determine the best possible combination for compression while retaining the most possible quality. As a result of the close collaborative work with our industry-leading partners, QLoRA and SpinQuant Llama models are available on Qualcomm and MediaTek SoCs with Arm CPUs. The performance of the quantized models has been optimized for mobile CPUs using Kleidi AI kernels, and we’re currently collaborating with our partners to utilize NPUs for even greater performance for Llama 1B/3B.</p><br></div><p>Our quantization setup</p><div><p>We designed the current quantization scheme with <a href="https://github.com/pytorch/executorch" target="_blank" data-lnfb-mode="ie"><u>PyTorch’s ExecuTorch inference framework</u></a> and <a href="https://www.arm.com/products/development-tools/embedded-and-software/kleidi-libraries" target="_blank" data-lnfb-mode="ie"><u>Arm CPU backend</u></a> in mind, taking into account metrics including model quality, prefill/decoding speed, and memory footprint. Our quantization scheme involves three parts:</p><ul><li>We quantize all linear layers in all transformer blocks to a 4-bit groupwise scheme (with a group size of 32) for weights and 8-bit per-token dynamic quantization for activations.</li><li>The classification layer is quantized to 8-bit per-channel for weight and 8-bit per-token dynamic quantization for activation.</li><li>We employ an 8-bit per-channel quantization for embedding.</li></ul><br></div><p>Quantization-Aware Training and LoRA</p><div><p>We employ Quantization-Aware Training (QAT) to simulate the effects of quantization during the training of Llama 3.2 models, enabling us to optimize their performance in low-precision environments. To initialize QAT, we utilize BF16 Llama 3.2 model checkpoints obtained after supervised fine-tuning (SFT) and perform an additional full round of SFT training with QAT. We then freeze the backbone of the QAT model and perform another round of SFT with low-rank adaptation (LoRA) adaptors applied to all layers within the transformer block. Meanwhile, the LoRA adaptors' weights and activations are maintained in BF16. Because our approach is similar to QLoRA in principle (i.e., quantization followed by LoRA adapters), we refer to it as QLoRA in this post.</p><p>Finally, we fine-tune the resulting model (both backbone and LoRA adaptors) using direct preference optimization (DPO). The resulting model is a highly efficient model that achieves competitive accuracy to the BF16 model, while maintaining a comparable speed and memory footprint to other quantization methods (see below figure).</p><p>We used <a href="https://github.com/pytorch/ao" target="_blank" data-lnfb-mode="ie"><u>torchao APIs</u></a> to do QAT. Developers can further use QAT as a foundational model and use LoRA to fine-tune Llama for their bespoke use cases, saving time and computational cost.</p><br></div><p>SpinQuant</p><div><p>Although QAT gives the best results, some people might want to quantize their fine-tuned 1B and 3B models or quantize the models for different targets with different quantization settings. For this reason we are also releasing the models and method of <a href="https://arxiv.org/abs/2405.16406" target="_blank" data-lnfb-mode="ie"><u>SpinQuant</u></a>, which is a state-of-the-art technique for post-training quantization.</p><p>While the method is less accurate than QAT + LoRA, a key advantage of SpinQuant is its portability and ability to operate without requiring access to training datasets, which are often private. It’s an attractive solution for applications where data availability or computational resources are limited. Developers can use this method to take their own fine-tuned Llama models and quantize them for different hardware targets and use cases, using the <a href="https://github.com/facebookresearch/SpinQuant" target="_blank" data-lnfb-mode="ie"><u>open source repository</u></a> that is fully compatible with <a href="https://github.com/pytorch/executorch" target="_blank" data-lnfb-mode="ie"><u>ExecuTorch</u></a> and <a href="https://github.com/meta-llama/llama-stack" target="_blank" data-lnfb-mode="ie"><u>Llama Stack</u></a>.</p><p>In our experiments, we utilize WikiText, a small calibration dataset, to learn rotation matrices in SpinQuant. These matrices enable the smoothing of outliers and facilitate more effective quantization. After this, best practices in quantization such as range setting and generative post-training quantization are applied. The SpinQuant matrices are optimized for the quantization scheme similar to QAT + LoRA.</p><br></div><p>Results</p><p>In the table below, we show comprehensive evaluation of the models quantized with vanilla post-training quantization (PTQ), SpinQuant, which produces the state-of-the-art PTQ quality, as well as QLoRA, which gives the best quality of all.</p></div><div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.2365-6/463869105_1326616764996070_7210673116645317812_n.png?_nc_cat=108&amp;ccb=1-7&amp;_nc_sid=e280be&amp;_nc_ohc=wGOZrBGxyFsQ7kNvgHPND3p&amp;_nc_zt=14&amp;_nc_ht=scontent.fzrh3-1.fna&amp;_nc_gid=A74w6DQK95ECdVsAVfQKXnP&amp;oh=00_AYB0luXoDpLjhHrmyFz6JtwB63gvIs5W_4f4tnmrMGj8lQ&amp;oe=6734F2EF" alt="" id="u_0_5_PC"></p><div><p>Percentage difference in relation to the average value for BF16.</p></div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.2365-6/463977359_1182562752841690_4137380685967841470_n.png?_nc_cat=102&amp;ccb=1-7&amp;_nc_sid=e280be&amp;_nc_ohc=vbjUvQqeTkoQ7kNvgGG8krR&amp;_nc_zt=14&amp;_nc_ht=scontent.fzrh3-1.fna&amp;_nc_gid=A74w6DQK95ECdVsAVfQKXnP&amp;oh=00_AYBa9DdglkoYt4jKS97avd525-WhGpbd_5ug56KNpbGYwg&amp;oe=6734E7D4" alt="" id="u_0_6_J8"></p><div><p>Percentage difference in relation to the average value for BF16.</p></div><div><p>In the table below, we compare the performance metrics of different quantization methods (SpinQuant and QAT + LoRA) with the BF16 baseline. The evaluation was done using the <a href="https://github.com/pytorch/executorch" target="_blank" data-lnfb-mode="ie"><u>ExecuTorch</u></a> framework as the inference engine, with the ARM CPU as a backend. The quantized models were optimized primarily for Arm CPU architecture by leveraging Kleidi AI library.</p></div><p><img src="https://scontent.fzrh3-1.fna.fbcdn.net/v/t39.2365-6/464307751_477718101949854_4588809159017166700_n.png?_nc_cat=104&amp;ccb=1-7&amp;_nc_sid=e280be&amp;_nc_ohc=viOQ-r8IQlgQ7kNvgHuFj8m&amp;_nc_zt=14&amp;_nc_ht=scontent.fzrh3-1.fna&amp;_nc_gid=A74w6DQK95ECdVsAVfQKXnP&amp;oh=00_AYAbPnZBRvVF30mRWeG6YtpHYuvW9R_HwPUsTfE7Rsasyw&amp;oe=67351977" alt="" id="u_0_7_FE"></p><div><p>The performance measurement is done using an adb binary-based approach and is measured on an Android OnePlus 12 device. Time-to-first-token (TTFT) is measured with prompt length=64.</p></div></div><div><div><p>Decode latency improved by 2.5x and prefill latency improved by 4.2x on average, while model size decreased by 56% and memory usage reduced by 41% on average. The benchmarks can be reproducible today via ExecuTorch <a href="https://github.com/pytorch/executorch/blob/main/examples/models/llama/README.md" target="_blank" data-lnfb-mode="ie"><u>Llama instructions</u></a>. The table above shows results using an Android OnePlus 12 device—however, we’ve also verified similar relative performance on Samsung S24+ for 1B and 3B and Samsung S22 for 1B. For iOS devices, we’ve verified these models run with comparable accuracy but haven’t evaluated performance.</p><p>Besides CPU, we’re currently collaborating with partners to utilize NPUs for these quantized models for even greater performance. Our partners have already integrated foundational components in the ExecuTorch open source ecosystem to leverage NPUs, and work is underway to specifically enable quantization on NPU for Llama 1B/3B.</p><br></div><p>Looking to the future</p><div><p>We’ve been inspired and encouraged by the excitement and progress the community has achieved with Llama in just a short span of time. This year, <a href="https://ai.meta.com/blog/llama-usage-doubled-may-through-july-2024/" target="_blank" data-lnfb-mode="ie"><u>Llama has achieved 10x growth</u></a> and become the standard for responsible innovation. Llama also continues to lead on openness, modifiability, and cost efficiency and is competitive with closed models—even leading in some areas. As always, we can’t wait to see what the community builds using Llama and the powerful experiences they’ll enable on mobile devices.</p><p><i>We’re making Llama 3.2 models available for download on </i><a href="https://llama.com/" target="_blank" data-lnfb-mode="ie"><i><u>llama.com</u></i></a> and <a href="https://huggingface.co/collections/meta-llama/llama-32-66f448ffc8c32f949b04c8cf" target="_blank" data-lnfb-mode="ie"><i><u>Hugging Face</u></i></a>.</p><p><i>We’d like to acknowledge the close collaboration of our partners: Arm, Hugging Face, MediaTek, Ollama, and Qualcomm.</i></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[BYD EV teardown in Japan reveals secrets to its affordability (140 pts)]]></title>
            <link>https://insideevs.com/news/738606/byd-ev-teardown-impresses-japan/</link>
            <guid>41938220</guid>
            <pubDate>Thu, 24 Oct 2024 18:31:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://insideevs.com/news/738606/byd-ev-teardown-impresses-japan/">https://insideevs.com/news/738606/byd-ev-teardown-impresses-japan/</a>, See on <a href="https://news.ycombinator.com/item?id=41938220">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post_box"> <div> <p><span data-time="1729765193"></span><span>Oct 24, 2024</span><span> at</span> 10:19am ET</p>  </div> <div> <ul> <li><strong>The integration of multiple components into a single drive unit that BYD calls E-Axle was the most impressive part.</strong></li> <li><strong>Between the E-Axle and the economies of scale that BYD can achieve, it can sell its EVs at very affordable prices that non-Chinese automakers simply can't match.</strong></li> </ul> <hr> <p>Japan used to be a world leader in electric and electrified vehicles in the early 2000s, but its lead has since subsided, and it lags behind most developed nations in this regard. China is the undisputed global EV leader these days, and the Central Japan Economic and Trade Bureau organized a seminar that involved the teardown of multiple EVs to see how others are already so advanced.</p> <p>According to <a href="https://cn.nikkei.com/industry/icar/56879-2024-10-09-09-00-23.html" target="_blank" rel="noopener noreferrer"><em>Nikkei</em></a>, the <a href="https://insideevs.com/news/628160/byd-atto3-range-test-wltp/" data-inline-widget="internal-links" data-type-id="0" data-params="%7B%22article_edition_id%22%3A%22628160%22%2C%22section%22%3A%221%22%2C%22alias%22%3A%22byd-atto3-range-test-wltp%22%7D">BYD Atto 3</a>&nbsp;(pictured) impressed attendees with how affordable it is given its size and specifications. In China, where it’s called the Yuan Plus, it starts at 139,800 yuan, or just under $20,000, and for that, you get a 201 horsepower EV with a 50-kilowatt-hour battery that gives it a claimed CLTC range of 267 miles (430 km).</p> <p> <h3> Gallery: BYD ATTO 3 </h3> </p>  <p>The larger optional 60.5-kWh battery ups the range to 317 miles (510 km) for an additional 10,000 yuan or $1,400. This larger pack is also offered on the European version of the Atto 3, which <a href="https://insideevs.com/news/718036/byd-major-ev-markup-prices/" data-inline-widget="internal-links" data-type-id="0" data-params="%7B%22article_edition_id%22%3A%22718036%22%2C%22section%22%3A%221%22%2C%22alias%22%3A%22byd-major-ev-markup-prices%22%7D">costs nearly twice as much as it does in China</a>. The higher price is the result of both markup and import tariffs, which are set to rise starting next month.</p> <p>The Atto 3 teardown in Japan revealed one of the ways <a href="https://insideevs.com/byd/" data-inline-widget="internal-links" data-type-id="2" data-params="%7B%22alias%22%3A%22byd%22%7D">BYD</a> manages to keep costs down and pass the savings down to the person who buys the car. It’s all about producing as many of the components as possible in-house and integrating them. The source article highlights the so-called “E-Axle” used by BYD, which is comprised of eight different components.</p> <p>It includes not only the motor, inverter, transmission and controller but also the onboard AC charger, the DC-to-DC converter and the battery monitoring system (BMS). This approach, combined with the economies of scale (the larger the number of cars you build, the cheaper you can build them) goes a long way toward explaining how these highly competent Chinese EVs can be sold at such low prices.</p> <p>The BYD Atto 3 was chosen for this project not only because of its international success but also because it <a href="https://insideevs.com/news/711623/2023-japan-ev-of-the-year-chinese-byd/" data-inline-widget="internal-links" data-type-id="0" data-params="%7B%22article_edition_id%22%3A%22711623%22%2C%22section%22%3A%221%22%2C%22alias%22%3A%222023-japan-ev-of-the-year-chinese-byd%22%7D">ranked very highly in the&nbsp;2023 Japan EV of the Year awards</a> and another BYD model won.</p> <section contenteditable="false" draggable="true" data-widget="related-content" data-widget-size="content" data-params="%7B%22type_id%22%3A0%2C%22title_id%22%3A%22%22%2C%22items%22%3A%5B%7B%22article_edition_id%22%3A%22737520%22%2C%22title%22%3A%22BYD%20Sealion%207%20Debuts%20In%20Europe%20As%20A%20Serious%20Tesla%20Model%20Y%20Competitor%22%2C%22alias%22%3A%22byd-sealion-7-debut-europe%22%2C%22section%22%3A%221%22%2C%22is_video%22%3A%220%22%2C%22images%22%3A%7B%22s5%22%3A%22https%3A%2F%2Fcdn.motor1.com%2Fimages%2Fmgl%2FxqKGPP%2Fs5%2Fbyd-sealion-7.jpg%22%7D%7D%2C%7B%22article_edition_id%22%3A%22736187%22%2C%22title%22%3A%22Tesla%20Scored%20A%20Win%20Against%20BYD%22%2C%22alias%22%3A%22tesla-byd-q3-ev-cm%22%2C%22section%22%3A%221%22%2C%22is_video%22%3A%220%22%2C%22images%22%3A%7B%22s5%22%3A%22https%3A%2F%2Fcdn.motor1.com%2Fimages%2Fmgl%2Fpb39qY%2Fs5%2Ftesla-cm-byd.jpg%22%7D%7D%2C%7B%22article_edition_id%22%3A%22734623%22%2C%22title%22%3A%22%2410%2C000%20BYD%20Seagull%20EV%20Outsold%20All%20Other%20Cars%20In%20China%20Last%20Month%22%2C%22alias%22%3A%22byd-seagull-best-selling-china%22%2C%22section%22%3A%221%22%2C%22is_video%22%3A%220%22%2C%22images%22%3A%7B%22s5%22%3A%22https%3A%2F%2Fcdn.motor1.com%2Fimages%2Fmgl%2Fpb3YkY%2Fs5%2Fbyd-seagull-no.1.jpg%22%7D%7D%2C%7B%22article_edition_id%22%3A%22732578%22%2C%22title%22%3A%22China's%20BYD%20Was%20The%20Third-Best-Selling%20Brand%20In%20The%20World%20This%20July%22%2C%22alias%22%3A%22byd-sales-july-2024-third-place%22%2C%22section%22%3A%221%22%2C%22is_video%22%3A%220%22%2C%22images%22%3A%7B%22s5%22%3A%22https%3A%2F%2Fcdn.motor1.com%2Fimages%2Fmgl%2F7ZPq1A%2Fs5%2Fbyd-dolphin-europa.jpg%22%7D%7D%5D%7D"> <p>More On BYD</p>  </section> <p>Kenichi Ito, director of industrial machinery company Sanyo Trading and one of the seminar organizers, noted that "Chinese manufacturers attach great importance to low-cost production” and "their views on quality are different from those of Japanese manufacturers." This was a subtle way of saying they are not built to the same standard, but the market doesn’t seem to mind, and BYD sold 300,000 Atto 3s in the vehicle’s first year of production starting in February 2022—it's been <a href="https://insideevs.com/news/680362/byd-atto-3-outsold-tesla-model-y-sweden-last-month/" data-inline-widget="internal-links" data-type-id="0" data-params="%7B%22article_edition_id%22%3A%22680362%22%2C%22section%22%3A%221%22%2C%22alias%22%3A%22byd-atto-3-outsold-tesla-model-y-sweden-last-month%22%7D">doing quite well in some European markets too</a>.</p> <p>Tesla has a similar approach of combining multiple components to reduce costs. The best example is the Model Y’s structure, which consists of just two major pieces instead of 70 separate elements like in the smaller <a href="https://insideevs.com/reviews/719484/tesla-model3-long-range-review/" data-inline-widget="internal-links" data-type-id="0" data-params="%7B%22article_edition_id%22%3A%22719484%22%2C%22section%22%3A%222%22%2C%22alias%22%3A%22tesla-model3-long-range-review%22%7D">Model 3</a>. Interestingly, even though this saves costs and cuts complexity, Tesla isn’t interested in pursuing gigacasting further and applying it to other models, even though it commissioned and acquired some of the world’s most impressive die-casting presses.</p> <p>This could be because <a href="https://insideevs.com/features/738536/tesla-q3-call-musk-regulations/" data-inline-widget="internal-links" data-type-id="0" data-params="%7B%22article_edition_id%22%3A%22738536%22%2C%22section%22%3A%223%22%2C%22alias%22%3A%22tesla-q3-call-musk-regulations%22%7D">Tesla’s interest has now shifted more toward self-driving</a> technology than advancing car-building techniques.</p>  </div> </div></div>]]></description>
        </item>
    </channel>
</rss>