<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 11 Apr 2025 18:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Leaked Meta data reveals massive campaign to remove pro-Palestine posts (112 pts)]]></title>
            <link>https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta</link>
            <guid>43655603</guid>
            <pubDate>Fri, 11 Apr 2025 16:24:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta">https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta</a>, See on <a href="https://news.ycombinator.com/item?id=43655603">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg" width="1200" height="800.2747252747253" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:20678795,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3a2532a4-5dc0-4f03-bab3-20f03f4d311b_7139x4759.jpeg 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Pro-Palestine protesters in front of Meta headquarters on November 3, 2023. Photo by Tayfun Coskun/Anadolu via Getty Images.</figcaption></figure></div><p>A sweeping crackdown on posts on Instagram and Facebook that are critical of Israel—or even vaguely supportive of Palestinians—was directly orchestrated by the government of Israel, according to internal Meta data obtained by Drop Site News. The data show that Meta has complied with 94% of takedown requests issued by Israel since October 7, 2023. Israel is the biggest originator of takedown requests globally by far, and Meta has followed suit—widening the net of posts it automatically removes, and creating what can be called the largest mass censorship operation in modern history.</p><p>Government requests for takedowns generally focus on posts made by citizens inside that government’s borders, Meta insiders said. What makes Israel’s campaign unique is its success in censoring speech in many countries outside of Israel. What’s more, Israel's censorship project will echo well into the future, insiders said, as the AI program Meta is currently training how to moderate content will base future decisions on the successful takedown of content critical of Israel’s genocide.</p><p>The data, compiled and provided to Drop Site News by whistleblowers, reveal the internal mechanics of Meta’s “Integrity Organization”—an organization within Meta dedicated to ensuring the safety and authenticity on its platforms. Takedown requests (TDRs) allow individuals, organizations, and government officials to request the removal of content that allegedly violates Meta’s policies. The documents indicate that the vast majority of Israel’s requests—95%—fall under Meta’s “terrorism” or “violence and incitement” categories. And Israel’s requests have overwhelmingly targeted users from Arab and Muslim-majority nations in a massive effort to silence criticism of Israel.</p><p>Multiple independent sources inside Meta confirmed the authenticity of the information provided by the whistleblowers. The data also show that Meta removed over 90,000 posts to comply with TDRs submitted by the Israeli government in an average of 30 seconds. Meta also significantly expanded automated takedowns since October 7, resulting in an estimated 38.8 million additional posts being “actioned upon” across Facebook and Instagram since late 2023. “Actioned upon” in Facebook terms means that a post was either removed, banned, or suppressed.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_5760,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;full&quot;,&quot;height&quot;:728,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2137517,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F038abf2e-627f-44bd-afdf-966cc2568323_12799x6399.jpeg 1456w" sizes="100vw"></picture></div></a><figcaption>Number of posts reported by the Israeli government over time, by country of post origin. Obtained by Drop Site News.</figcaption></figure></div><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_5760,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;full&quot;,&quot;height&quot;:728,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:4628638,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.dropsitenews.com/i/161041203?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:&quot;center&quot;}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fccd7f123-988b-41a5-9146-dc288cb48869_12793x6396.jpeg 1456w" sizes="100vw"></picture></div></a><figcaption>Number of posts actioned upon by Meta over time, by country of post origin. Obtained by Drop Site News.</figcaption></figure></div><p>All of the Israeli government’s TDRs post-October 7th contain the exact same complaint text, according to the leaked information, regardless of the substance of the underlying content being challenged. Sources said that not a single Israeli TDR describes the exact nature of the content being reported, even though the requests link to an average of 15 different pieces of content. Instead, the reports simply state, in addition to a description of the October 7th attacks, that:</p><blockquote><p><em>This is an urgent request regarding videos posted on Facebook which contain inciting content. The file attached to this request contains link [sic] to content which violated articles 24(a) and 24(b) of the Israeli Counter-Terrorism Act (2016), which prohibits incitement to terrorism praise for acts of terrorism and identification or support of terror organizations. Moreover, several of the links violate article 2(4) of the Privacy Protection Act (1982), which prohibits publishing images in circumstances that could humiliate the person depicted, as they contain images of the killed, injured, and kidnapped. Additionally, to our understanding, the content in the attached report violates Facebook’s community standards.</em></p></blockquote><p>Meta's content enforcement system processes user-submitted reports through different pathways, depending on who is reporting it. Regular users can report posts via the platform’s built-in reporting function, triggering a review. Reported posts are typically first labeled as violating or non-violating by machine-learning models, though sometimes human moderators review them as well. If the AI assigns a high confidence score indicating a violation, the post is removed automatically. If the confidence score is low, human moderators review the post before deciding whether to take action.</p><p>Governments and organizations, on the other hand, have privileged channels to trigger content review. Reports submitted through these channels receive higher priority and are almost always reviewed by human moderators rather than AI. Once reviewed by humans, the reviews are fed back into Meta’s AI system to help it better assess similar content in the future. While everyday users can also file TDRs, they are rarely acted upon. Government-submitted TDRs are far more likely to result in content removal.</p><p><span>Meta has overwhelmingly complied with Israel’s requests, making an exception for the government account by taking down posts without human reviews, according to the whistleblowers, while still feeding that data back into Meta’s AI. A Human Rights Watch (HRW) report </span><a href="https://www.hrw.org/report/2023/12/21/metas-broken-promises/systemic-censorship-palestine-content-instagram-and" rel="">investigating Meta’s moderation of pro-Palestine content</a><span> post-October 7th found that, of 1,050 posts HRW documented as taken-down or suppressed on Facebook or Instagram, 1,049 involved peaceful content in support of Palestine, while just one post was content in support of Israel.</span></p><p>A source within Meta’s Integrity Organization confirmed that internal reviews of their automated moderation found that pro-Palestinian content that did not violate Meta’s policies was frequently removed. In other cases, pro-Palestinian content that should have been simply removed was given a “strike,” which indicates a more serious offense. Should a single account receive too many strikes on content that it publishes, the entire account can be removed from Meta platforms.</p><p>When concerns about overenforcement against pro-Palestinian content were raised inside the Integrity Organization, the source said, leadership responded by saying that they preferred to overenforce against potentially violating content, rather than underenforce and risk leaving violating content live on Meta platforms.</p><p>Within Meta, several key leadership positions are filled by figures with personal connections to the Israeli government. The Integrity Organization is run by Guy Rosen, a former Israeli military official who served in the Israeli military’s signals intelligence unit, Unit 8200. Rosen was the founder of Onavo, a web analytics and VPN firm that then-Facebook acquired in October 2013. (Previous reporting has revealed that, prior to acquiring the company, Facebook used data Onavo collected from their VPN users to monitor the performance of competitors—part of the anti-competitive behavior alleged by the Federal Trade Commission under the Biden administration in its suit against Meta.)</p><p>Rosen’s Integrity Organization works synergistically with Meta’s Policy Organization, according to employees. The Policy Organization sets the rules, and the Integrity Organization enforces them—but the two feed one another, they said. “Policy changes are often driven by data from the integrity org,” explained one Meta employee. As of this year, Joel Kaplan replaced Nick Clegg as the head of the Policy Organization. Kaplan is a former Bush administration official who has worked with Israeli officials in the past on fighting “online incitement.”</p><p><span>Meta’s Director of Public Policy for Israel and the Jewish Diaspora, Jordana Cutler, has also intervened to investigate pro-Palestine content. Cutler is a former senior Israeli government official and advisor to Prime Minister Benjamin Netanyahu. Cutler </span><a href="https://theintercept.com/2024/10/21/instagram-israel-palestine-censorship-sjp/" rel="">has reportedly used her role</a><span> to flag pro-Palestine content. According to internal communications reviewed by Drop Site, as recently as March, Cutler actively instructed employees of the company to search for and review content mentioning Ghassan Kanafani, an Arab novelist considered to be a pioneer of Palestinian literature. Immediately prior to joining Meta as a senior policymaker, she spent nearly three years as Chief of Staff at the Israeli Embassy in Washington, D.C—and nearly five years serving as deputy to one of Netanyahu’s senior advisors, before becoming Netanyahu’s advisor on Diaspora Affairs.</span></p><p>According to internal information reviewed by Drop Site, Cutler has continued to demand the review of content related to Kanafani under Meta’s policy “Glorification, Support or Representation” of individuals or organizations “that proclaim a violent mission or are engaged in violence to have a presence on our platforms.” Kanafani, who was killed in a 1972 car bombing orchestrated by the Mossad, served as a spokesperson for the left-wing Palestinian nationalist group, the Popular Front for the Liberation of Palestine (PFLP). The PFLP was designated as a terrorist group over a quarter century after he was killed, which, according to Meta’s guidelines and Cutler’s efforts, serves as a basis to flag his content for removal, strikes, and possible suspension.</p><p>The leaked documents reveal that Israel’s takedown requests have overwhelmingly targeted users from Arab and Muslim-majority nations, with the top 12 countries affected being: Egypt (21.1%), Jordan (16.6%), Palestine (15.6%), Algeria (8.2%), Yemen (7.5%), Tunisia (3.3%), Morocco (2.9%), Saudi Arabia (2.7%), Lebanon (2.6%), Iraq (2.6%), Syria (2%), Turkey (1.5%). In total, users from over 60 countries have reported censorship of content related to Palestine, according to Human Rights Watch—with posts being removed, accounts suspended, and visibility reduced through shadow banning.</p><p>Notably, only 1.3% of Israel’s takedown requests target Israeli users, making Israel an outlier among governments that typically focus their censorship efforts on their own citizens. For example, 63% of Malaysia’s takedown requests target Malaysian content, and 95% of Brazil’s requests target Brazilian content. Israel, however, has turned its censorship efforts outward, focusing on silencing critics and narratives that challenge its policies, particularly in the context of the ongoing conflict in Gaza and the West Bank.</p><p>Despite Meta’s awareness of Israel’s aggressive censorship tactics for at least seven years, according to Meta whistleblowers, the company has failed to curb the abuse. Instead, one said, the company “actively provided the Israeli government with a legal entry-point for carrying out its mass censorship campaign.”</p><p data-attrs="{&quot;url&quot;:&quot;https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta/comments&quot;,&quot;text&quot;:&quot;Leave a comment&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://www.dropsitenews.com/p/leaked-data-israeli-censorship-meta/comments" rel=""><span>Leave a comment</span></a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[She Worked in a Harvard Lab to Reverse Aging, Until ICE Jailed Her (118 pts)]]></title>
            <link>https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html</link>
            <guid>43653998</guid>
            <pubDate>Fri, 11 Apr 2025 14:10:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html">https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html</a>, See on <a href="https://news.ycombinator.com/item?id=43653998">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/04/11/science/russian-scientist-ice-detained-harvard.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Fedora change aims for 99% package reproducibility (169 pts)]]></title>
            <link>https://lwn.net/Articles/1014979/</link>
            <guid>43653672</guid>
            <pubDate>Fri, 11 Apr 2025 13:40:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lwn.net/Articles/1014979/">https://lwn.net/Articles/1014979/</a>, See on <a href="https://news.ycombinator.com/item?id=43653672">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<b>Benefits for LWN subscribers</b>
<p>
The primary benefit from <a href="https://lwn.net/Promo/nst-nag5/subscribe">subscribing to LWN</a>
       is helping to keep us publishing, but, beyond that, subscribers get
       immediate access to all site content and access to a number of extra
       site features.  Please sign up today!
</p></blockquote>

<p>The effort to ensure that open-source software is <a href="https://reproducible-builds.org/">reproducible</a> has been
gathering steam over the years, and gaining traction with major Linux
distributions. Debian, for example, has been <a href="https://lwn.net/Articles/985739/">working toward reproducible
builds</a> for more than a decade; it can <a href="https://lists.reproducible-builds.org/pipermail/rb-general/2025-March/003675.html">now</a>
produce <a href="https://wiki.debian.org/ReproducibleInstalls/LiveImages#Status">official
live CDs</a> of the current stable release that are 
reproducible. Fedora started on the path much later, but it has
progressed far enough that the project is now considering a <a href="https://fedoraproject.org/wiki/Changes/Package_builds_are_expected_to_be_reproducible">change
proposal</a> for the Fedora&nbsp;43 development cycle, expected to be
released in October, with a goal of
making 99% of Fedora's package builds reproducible. So far, reaction
to the proposal seems favorable and focused primarily on how to
achieve the <span>goal—with</span> minimal pain for <span>packagers—rather</span> than whether to attempt it.</p>

<h4>Defining reproducible builds</h4>

<p>The Reproducible Builds project <a href="https://reproducible-builds.org/docs/definition/">defines</a> a
build as reproducible if "<q>given the same source code, build
environment and build instructions, any party can recreate bit-by-bit
identical copies of all specified artifacts</q>". In a <a href="https://discussion.fedoraproject.org/t/report-from-the-reproducible-builds-hackfest-during-flock-2023/87469">2023
hackfest report</a>, Zbigniew Jędrzejewski-Szmek said that Fedora has
not prioritized reproducible builds in the past because Fedora has
more control over its build process than Debian and other
distributions. Because Debian allows maintainers to
generate source packages on their local system and to upload
some locally built packages for distribution to users, he said that "<q>trust
in the contents of both source and binary packages is low</q>."
(Debian's build daemons build <em>most</em> binary packages from
source for distribution to users, <a href="https://www.debian.org/doc/manuals/developers-reference/pkgs.html#source-and-binary-uploads">but
there are exceptions</a>.)
Fedora, on the other hand, exercises much more control over packages.</p>

<blockquote>
In Fedora, all packages that are distributed to users are built in the
centralized, strongly controlled infrastructure. All source rpms are
built from "dist-git": a git repository which contains the build
"recipe" and a cryptographic hash of package sources, so it is
relatively easy to verify what changed between package versions, what
"inputs" went into a particular source package, and in what
environment the binary packages were built.
</blockquote>

<p>However, even though Fedora has a tighter control over its
packages, <span>Jędrzejewski-Szmek</span> said that
one of the benefits of reproducible builds was to help detect and
mitigate any kind of supply-chain attack on Fedora's builders and
allow others to perform independent verification that the package
sources match the binaries that are delivered by Fedora. It's
interesting to note that Fedora had embarked on this work before <a href="https://lwn.net/Articles/967866/">the XZ backdoor</a> drew even
more attention to supply-chain attacks.</p>

<p>He acknowledges that Debian is more advanced in its reproducible
builds processes, and notes that Fedora is setting a different 
<a href="https://docs.fedoraproject.org/en-US/reproducible-builds/">definition</a>
for reproducible builds. This definition excludes signatures and
some metadata and focuses solely on the payload of packaged files in a given
RPM:</p>

<blockquote>
A build is reproducible if given the same source code, build
environment and build instructions, and metadata from the build
artifacts, any party can recreate copies of the artifacts that are
identical except for the signatures and parts of metadata.
</blockquote>

<p>The reason Fedora is pursuing a different definition of
reproducible build is that it <em><a href="https://docs.fedoraproject.org/en-US/reproducible-builds/#_caveats">cannot</a></em>
achieve "<q>bit-by-bit</q>" reproducibility by the
original definition. This is because of differences in the package
format and the way that Fedora builds its packages. RPMs embed the
package signature in the RPM when they are built, but Debian uses
detached signatures. RPMs also include information, such as the build
time (<tt>BUILDTIME</tt>) and build host (<tt>BUILDHOST</tt>) in the RPM's
header, that can affect reproducibilty. There was a <a href="https://github.com/rpm-software-management/rpm/issues/2603">discussion</a>
about allowing these variables to be overridden. However, the
prevailing opinion was that the information provided by
<tt>BUILDHOST</tt> is useful, and
overriding its inclusion is not desirable. The contents, however,
should still be "<q>bit-by-bit</q>" identical, even though that phrase
does not turn up in Fedora's definition.</p>

<p>The openSUSE project, which also distributes software using the RPM
format, sets <tt>BUILDHOST</tt> to "<tt>reproducible</tt>", <a href="https://github.com/rpm-software-management/rpm/issues/2603#issuecomment-1713960828">according</a>
to Jan Zerebecki. The actual build host is printed in the build logs,
and interested users can search openSUSE's build logs to find the
host.</p>

<h4>Path to reproducibility</h4>

<p>For <tt>BUILDTIME</tt>, openSUSE sets the build time to the date of
the latest changelog entry. This is provided to builds by the <a href="https://reproducible-builds.org/docs/source-date-epoch/"><tt>SOURCE_DATE_EPOCH</tt></a>
environment variable. This is where Fedora's reproducible builds work
began, with a <a href="https://fedoraproject.org/wiki/Changes/ReproducibleBuildsClampMtimes">change</a>
that was made during the Fedora&nbsp;38 development cycle to "clamp"
the modification time (mtime) of packaged files to
<tt>SOURCE_DATE_EPOCH</tt>. This ensured that the mtimes were
independent of the time of an actual build. Packagers were given the
ability to <span>opt-out</span> of this if, for some
reason, their package would be broken by the new behavior. </p>

<!-- middle-ad -->

<p>During the Fedora&nbsp;41 development cycle, the project
implemented another <a href="https://fedoraproject.org/wiki/Changes/ReproduciblePackageBuilds">change
in the RPM build process</a> to remove common sources of
irreproducibility. That change made use of a Rust program, <a href="https://github.com/keszybz/add-determinism?tab=readme-ov-file#build-postprocessor-to-reset-metadata-fields-for-build-reproducibility"><tt>add-determinism</tt></a>,
that attempts to standardize metadata in binary or source files to
ensure consistency. It is similar to Debian's <a href="https://salsa.debian.org/reproducible-builds/strip-nondeterminism"><tt>strip-nondeterminism</tt></a>,
which is a Perl library that is part of the <a href="https://man7.org/linux/man-pages/man7/debhelper.7.html"><tt>debhelper</tt></a>
tool for building Debian packages. Using
<tt>strip-nondeterminism</tt>, the <tt>debhelper</tt> tool removes
non-deterministic information such as timestamps and filesystem
ordering from various file and archive formats. The Fedora project
chose to write its own tool because it was undesirable to pull Perl
into the build root for every package.</p>

<p>According to the new change proposal, the modifications to Fedora's build
infrastructure to date have allowed it to make 90% of package builds
reproducible. The goal now is to reach 99% of package builds. 
It appears that Fedora has gotten as much mileage out of
infrastructure changes, without requiring individual packagers to deal
with reproducibility problems, as it can. To get to 99% the project is going
to have to ask packagers to treat reproducibility problems in their
packages as bugs.</p>

<p>The change <span>owners—Jędrzejewski-Szmek</span>, Davide
Cavalca, and Jelle <span>van der Waa—would</span>
package the <a href="https://github.com/keszybz/fedora-repro-build"><tt>fedora-repro-build</tt></a>
utility to allow developers to make local rebuilds of packages built in <a href="https://fedoraproject.org/wiki/Koji">Koji</a> (Fedora's build
system) to test their reproducibility. It will also require standing up a public instance of <a href="https://github.com/kpcyrd/rebuilderd/?tab=readme-ov-file#rebuilderd1---">rebuilderd</a>, which is a system for providing independent verification that binary
packages can be reproduced from source code. It can scan a package
repository's metadata for new or updated packages and then queue them
for rebuilding, and it provides an API to query for the reproducibility
status of packages. Rebuilderd can also, optionally, use the <a href="https://diffoscope.org/">diffoscope</a> tool to generate a
report of differences. The <a href="https://reproducible.archlinux.org/">Arch Linux reproducible
status page</a> provides a good example of rebuilderd in use.</p>

<p>If accepted, the proposal would also require an update to Fedora's <a href="https://docs.fedoraproject.org/en-US/packaging-guidelines/">packaging
guidelines</a> that would say packages should (not, at least
currently, "must") build reproducibly and allow bugs to be filed
against packages when they are not reproducible.</p>

<p>Aside from the security benefits of reproducibility, the proposal
also makes the case that it will lead to packages of higher
quality. Irreproducible bits in packages are quite often "<q>caused by
an error or sloppiness in the code</q>". For example, dependence on
hardware architecture in architecture-independent (noarch) packages is
"<q>almost always unwanted and/or a bug</q>", and reproducibility tests
can uncover those bugs.</p>

<p>The proposal acknowledges that some packages will have problems
with reproducibility that cannot be fixed easily. For example, Haskell
packages are not currently reproducible when compiled by more than one
thread, though <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/12935">a fix is
being worked on</a>. Packages produced with Go have <a href="https://pagure.io/fedora-reproducible-builds/project/issue/15">debug
data that is not reproducible</a> because the GNU Debugger index file
(<tt>.gdb_index</tt>) can be of varying size even given the same
input. No fix is yet in the works for that. Another known problem is
that the Linux kernel uses an ephemeral key for module signatures. LWN <a href="https://lwn.net/Articles/1012946/">covered</a> a patch set from
Thomas Weißschuh that may solve that problem.</p>

<h4>Feedback</h4>

<p>In the discussion thread on Fedora's Discourse forum, Fedora's
infrastructure lead Kevin Fenzi <a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/8">asked</a>,
"<q>where will this [rebuilderd] instance live and who will maintain
it? 🙂</q>" He also noted it would be good to have documentation on
setting up a rebuilderd instance. "<q>Otherwise I like the
idea!</q>" Cavalca <a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/9">said</a>
that the reproducibility work was currently using an Amazon Web
Services (AWS) account sponsored by Meta, but "<q>we can look at
moving into Fedora infra if there's a preference for that</q>". Fenzi
<a href="https://discussion.fedoraproject.org/t/f43-change-proposal-package-builds-are-expected-to-be-reproducible-system-wide/147320/10">replied</a>
that it might be good to keep running the work outside Fedora
infrastructure to make it more independent. "<q>Although of course we could run one and
then others could run others and compare</q>".</p>

<p>Daniel P. Berrangé <a href="https://lwn.net/ml/all/Z9vPRyCDNOunM0yY%40redhat.com/">asked</a>
if rebuilderd could be integrated with Koji so that maintainers did
not have to learn another build tool. "<q>I'm pretty unenthusiastic
about dealing with yet another standalone web service providing
post-build testing.</q>" Jędrzejewski-Szmek <a href="https://lwn.net/ml/all/Z9vacXyfaLMAqpbu@kawka3.in.waw.pl/">said</a>
that using Koji to perform the build was an interesting idea, but "<q>we
also want our rebuilds to be as independent as possible</q>", so it
would still be desirable to do them in a system other than
Koji. Rebuilding a package the second time in the same build
environment means "<q>we are not testing much</q>".</p>

<p>Miroslav Suchý, a member of Fedora's infrastructure team, 
<a href="https://lwn.net/ml/all/1f4e42ae-8730-4c12-b9b3-b9ba98ab4979@redhat.com/">wondered</a>
if rebuilderd could submit builds to Fedora's <a href="https://copr.fedorainfracloud.org/">Copr</a> build system
instead of standing up yet another build system in Fedora. This led to
a discussion about Copr's capabilities and whether it would integrate
well with rebuilderd. Jędrzejewski-Szmek <a href="https://lwn.net/ml/all/Z9vUWrmpqwMi4RDm@kawka3.in.waw.pl/">noted</a>
that rebuilderd is a "<q>complete project that does things in its own
way</q>" and it may be complicated to try to teach it to talk to an
external service asynchronously.</p>

<p>Integrating rebuilderd tooling and reports into Fedora's existing
infrastructure has been a recurring theme in the discussion. Simon de
Vlieger <a href="https://lwn.net/ml/all/e47d555a-9bb1-42fd-81ad-6c08eaee5214@app.fastmail.com/#t">said</a>
he was not set on having builds performed in Koji, but wanted the
project "<q>to integrate well with Fedora's <span>pre-existing</span> tools and things so it has the
highest chance of people actually using it</q>" and performing as
people expect.</p>

<h4>Next</h4>

<p>The next step for the proposal is to file a <a href="https://docs.fedoraproject.org/en-US/fesco/#ticket-votes">ticket</a>
with the Fedora Engineering Steering Committee (FESCo), at least one
week after the proposal was <a href="https://lwn.net/ml/all/CAJqbrbcQ2g-rWNUQ4ee2g8bOR3z-_bgvGL+zNKBS48+C5GVFmw@mail.gmail.com/#t">announced</a>. In
this case, that would be no sooner than March&nbsp;26. If FESCo
approves, the owners can begin work on the proposal with an eye to
completion by October, when Fedora&nbsp;43 is planned for release.</p>

<p>Most of Fedora's users have probably not noticed the
reproducibility work in Fedora thus far and won't appreciate any
difference when they install Fedora&nbsp;43 (or 44, 45, and so
on). However, given the continual efforts of bad actors to find and
exploit supply-chain weaknesses in open-source projects, it is a
valuable effort nonetheless.</p><br clear="all"><hr>
            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pentagon to terminate $5.1B in IT contracts with Accenture, Deloitte (346 pts)]]></title>
            <link>https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/</link>
            <guid>43653004</guid>
            <pubDate>Fri, 11 Apr 2025 12:23:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/">https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/</a>, See on <a href="https://news.ycombinator.com/item?id=43653004">Hacker News</a></p>
Couldn't get https://www.reuters.com/world/us/pentagon-terminate-51-billion-it-contracts-with-accenture-deloitte-others-2025-04-11/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[But what if I want a faster horse? (951 pts)]]></title>
            <link>https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse</link>
            <guid>43652723</guid>
            <pubDate>Fri, 11 Apr 2025 11:39:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse">https://rakhim.exotext.com/but-what-if-i-really-want-a-faster-horse</a>, See on <a href="https://news.ycombinator.com/item?id=43652723">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <p>People in tech business circles love this quote by Henry Ford:</p>
<blockquote>
<p>If I had asked people what they wanted, they would have said faster horses.</p>
</blockquote>
<p>The idea is to think outside the box and create entirely new markets instead of just new products in existing ones. Like Apple creating the iPhone (sure, smartphones existed before—but cars also existed before the Ford Model T).</p>
<p>But sometimes, I really want a faster horse.</p>
<p>Netflix in 2012 was a super fast horse. It had a simple but massive catalog of movies and shows, solid recommendations, and basic library management. Compared to my limited local media library it was great. You could actively tune your tastes and rate things with a 5-star system.</p>
<p><img src="https://img.exotext.com/1/vzBUOzXXWZU_1BzCoyxsZ.jpg" alt="">
<img src="https://img.exotext.com/1/uJGx0a12ohaZNjAlWkdGO.jpg" alt="">
<img src="https://img.exotext.com/1/48DF8RvJ0y7NGhXiHV35C.jpg" alt=""></p>
<p>Netflix today is very different. It’s not a library—it’s an <em>experience</em>.
Instead of reliably showing me what I "have" and recommending what I might like, it shuffles content on each interaction, sometimes changing the cover images of shows in real time, like some black-market charlatan. It has no meaningful catalog, no real categories—just short-lived, auto-generated groups like “Binge-worthy” or “Festive spirit.”</p>
<p>Even the “New” section is meaningless. It opens with a “For You” row (huh?), then “Continue Watching”, followed by generic "Popular in <your country="">" rows. It feels like YouTube search: ask for something specific, get a few hits, and then a flood of unrelated "popular" and "recommended" content.</your></p>
<p>“My List” on Netflix randomly shuffles items and changes their covers every few hours. “Continue Watching” may or may not include what I actually watched recently. Sometimes, the engagement algorithms resurrect some random Slovakian cartoon I opened three years ago—one and immediately closed because it that had no English subtitles here in Finland, even though they do exist in other regions.</p>
<p>I just want a faster horse.</p>
<p>Spotify in 2015 was also a super fast horse. It was like my iTunes library, but with millions more tracks. Getting new music became faster, but it didn’t change the nature of my relationship with music.</p>
<p><img src="https://img.exotext.com/1/2fD6yw340md6C_hY0gy2L.png" alt=""></p>
<p><img src="https://img.exotext.com/1/k2gx8LUtCVBrliige2EgS.png" alt=""></p>
<p>Spotify today is... basically Netflix. An inconsistent stream of ever-changing content, weak library tools, and an endless barrage of podcasts.</p>
<p>Overall, consistency, user control, and actual UX innovation are in decline. Everything is converging on TikTok—which is basically TV with infinite channels. You don’t control anything except the channel switch. It's like <a href="https://en.wikipedia.org/wiki/Carcinisation">Carcinisation</a>, a form of convergent evolution where unrelated crustaceans all evolve into something vaguely crab-shaped.</p>
<p>The list goes on:</p>
<ul>
<li>YouTube. YouTube: Once a video catalog with social discovery. Now? TikTok.</li>
<li>LinkedIn. Once a network of resumes. Now? TikTok.</li>
<li>Substack. Yeah, a newsletter platform... now launching TikTok-style videos. <a href="https://techcrunch.com/2025/03/31/substack-is-rolling-out-a-tiktok-like-video-feed-in-its-app/">Seriously</a>.</li>
</ul>
<p><img src="https://img.exotext.com/1/rUsJccBXf09TTBnG2OD-r.jpg" alt=""></p>

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Strengths Are Your Weaknesses (209 pts)]]></title>
            <link>https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/</link>
            <guid>43652024</guid>
            <pubDate>Fri, 11 Apr 2025 09:27:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/">https://terriblesoftware.org/2025/03/31/your-strengths-are-your-weaknesses/</a>, See on <a href="https://news.ycombinator.com/item?id=43652024">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<blockquote>
<p><em>“People are package deals; you take the good with the confused. In most cases, strengths and weaknesses are two sides of the same coin.”</em> — Steve Jobs</p>
</blockquote>



<p>I’ve noticed something interesting about almost every engineer I’ve managed: their biggest strengths and their most frustrating weaknesses are often the exact same trait showing up in different contexts.</p>



<p>I learned this lesson personally when I was still a junior engineer. My ability to code quickly made me very productive — I’d often ship features in half the time estimated. My manager praised my speed constantly. </p>



<p>Well, until one day… During a particularly painful postmortem, we discovered that a production issue happened because of an edge case I had missed in my rush to complete the feature. My strength (coding speed) and my weakness (occasionally overlooking details) weren’t separate traits — they were the exact same characteristic showing up differently depending on the context.</p>



<p>This isn’t just true for me or a few people — it’s nearly universal. <strong>The qualities we celebrate in our team members are usually the same ones causing our biggest headaches</strong>. They’re not separate traits; they’re two sides of the same coin.</p>



<p>So what can we do about this? Three things have helped me:</p>



<ol>
<li><strong>Get real about this duality in your 1:1s.</strong> Most people see their strengths and weaknesses as separate things. They’re not. In 1:1s, I’ll say something like: “Your ability to dive deep into problems is why you find solutions nobody else can. It’s also why you sometimes miss deadlines. Same trait, different outcomes.” This simple reframing helps people stop beating themselves up over their “flaws.”</li>



<li><strong>Be crystal clear about context.</strong> Don’t make people guess when their natural tendencies help versus hurt. One of my engineers was incredibly collaborative—wouldn’t make a single decision without getting everyone’s input. I told him exactly when this worked and when it didn’t: “For architecture decisions? Get all the input you want. For day-to-day coding decisions? You have permission to just decide and move on.” This clear guidance helped him develop his own judgment about when to lean into his collaborative nature.</li>



<li><strong>Use tension as a feature, not a bug.</strong> Some managers try to build teams where everyone works the same way. <a href="https://terriblesoftware.org/2025/03/12/why-your-harmonious-team-is-actually-failing/">That’s a mistake</a>. I once paired our fastest coder with our most methodical, thorough reviewer. The first week was pure chaos—they drove each other nuts. By the third week, they were producing better code than either could alone; the fast coder started anticipating the thorough one’s concerns, and the methodical one learned which shortcuts were actually okay to take.</li>
</ol>



<p>The goal isn’t to create “balanced” engineers with no pronounced strengths or weaknesses. That’s just impossible. <strong>We want self-aware engineers who understand their natural tendencies and can adjust them based on what each situation demands</strong>.</p>



<p>I don’t think our job is to sand down people’s edges until everyone’s the same boring shape. We’re not trying to “fix” our engineers. Instead, we’re helping them see themselves clearly, warts and all, and teaching them when to crank up or dial back their natural tendencies. It’s more like coaching someone to use their power effectively than trying to rebuild them from scratch.</p>



<p>After all, we’re all package deals. The traits that make us brilliant will inevitably challenge us in other contexts. Understanding this doesn’t just make us better managers — it makes us more compassionate humans.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why I Program in Lisp (171 pts)]]></title>
            <link>http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html</link>
            <guid>43651576</guid>
            <pubDate>Fri, 11 Apr 2025 08:26:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html">http://funcall.blogspot.com/2025/04/why-i-program-in-lisp.html</a>, See on <a href="https://news.ycombinator.com/item?id=43651576">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-3404727118065375102" itemprop="description articleBody">
<p>Lisp is not the most popular language.  It never was.  Other
  general purpose languages are more popular and ultimately can do
  everything that Lisp can (if Church and Turing are correct).  They
  have more libraries and a larger user community than Lisp does.
  They are more likely to be installed on a machine than Lisp is.</p>

<p>Yet I prefer to program in Lisp.  I keep a Lisp REPL open at all
  times, and I write prototypes and exploratory code in Lisp.  Why do
  I do this?  Lisp is easier to remember, has fewer limitations and hoops you
  have to jump through, has lower “friction” between my
  thoughts and my program, is easily customizable, and, frankly, more
  fun.</p>

<p>Lisp's dreaded Cambridge Polish notation is uniform and
  universal.  I don't have to remember whether a form takes curly
  braces or square brackets or what the operator precedency is or some
  weird punctuated syntax that was invented for no good reason.  It is (operator
  operands ...) for everything.  Nothing to remember.  I basically stopped
  noticing the parenthesis 40 years ago.  I can indent how I
  please.</p> 

<p>I program mostly functionally, and Lisp has three features that
  help out tremendously here.  First, if you avoid side effects, it
  directly supports the substitution model.  You can tell Lisp
  that when it sees this simple form, it can just replace it with that
  more complex one.  Lisp isn't constantly pushing you into thinking
  imperatively.  Second, since the syntax is uniform and doesn't depend on
  the context, you can refactor and move code around at will.  Just
  move things in balanced parenthesis and you'll pretty much be
  ok.</p>

<p>Third, in most computer languages, you can abstract a specific value by
  replacing it with a variable that names a value.  But you can perform a further
  abstraction by replacing a variable that names a quantity with a
  function that computes a quantity.  In functional programming, you often downplay
  the distinction between a value and a function that produces that
  value.  After all, the difference is only one of time spent waiting for the
  answer.  In Lisp, you can change an expression that denotes an
  object into an abtraction that computes an object by simply wrapping
  a <code>lambda</code> around it.  It's less of a big deal these
  days, but properly working <code>lambda</code> expressions were only
  available in Lisp until recently.  Even so, <code>lambda</code>
  expressions are generally pretty clumsy in other languages.</p>

<p>Functional programming focuses on functions (go figure!).  These
  are the ideal black box abstraction:  values go in, answer comes
  out.  What happens inside?  Who knows!  Who cares! But you can plug
  little simple functions together and get bigger more complex
  functions.  There is no limit on doing this.  If you can frame your
  problem as "I have this, I want that", then you can code it as a
  functional program.  It is true that functional programming takes a
  bit of practice to get used to, but it allows you to build complex
  systems out of very simple parts.  Once you get the hang of it, you
  start seeing everything as a function.  (This isn't a limitation.
  Church's lambda calculus is a model of computation based on
  functional composition.)</p>

<p>Lisp lets me try out new ideas as quickly as I can come up
  with them.  New programs are indistinguishable from those built in to
  the language, so I can build upon them just as easily.  Lisp's
  debugger means I don't have to stop everything and restart the world
  from scratch every time something goes wrong.  Lisp's safe memory
  model means that bugs don't trash my workspace as I explore the
  problem.</p>

<p>The REPL in lisp evaluates <em>expressions</em>, which are the
  fundamental fragments of Lisp programs.  You can type in part of a
  Lisp program and see what it does immediately.  If it works, you can
  simply embed the expression in a larger program.  Your program takes
  shape in real time as you explore the problem.</p>

<p>Lisp's dynamic typing gives you virtually automatic ad hoc
  polymorphism.  If you write a program that calls +, it will work on
  any pair of objects that have a well-defined + operator.  Now this
  can be a problem if you are cavalier about your types, but if
  you exercise a little discipline (like not defining + on
  combinations of strings and numbers, for example), and if you avoid
  automatic type coercion, then you can write very generic code that
  works on a superset of your data types.  (Dynamic typing is a
  two-edged sword.  It allows for fast prototyping, but it can hide
  bugs that would be caught at compile time in a statically typed
  language.)</p>

<p>Other languages may share some of these features, but Lisp has them all
  together.  It is a language that was designed to be used as a tool
  for thinking about problems, and that is the fun part of
  programming.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The thing about Europe: it's the actual land of the free now (141 pts)]]></title>
            <link>https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now</link>
            <guid>43651489</guid>
            <pubDate>Fri, 11 Apr 2025 08:04:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now">https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now</a>, See on <a href="https://news.ycombinator.com/item?id=43651489">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><time datetime="2025-04-10T12:53:53.593Z"> <!-- -->Apr 10th 2025</time></p></div><section><p data-component="paragraph"><span data-caps="initial">T</span><small>he thing </small>about Europe, the sneerers say, is that it is over-regulated. Mounds of red tape and punitive taxes mean there are no trillion-dollar entrepreneurial ventures in France or Germany to match Amazon, Google or Tesla. But that is not all Europe is lacking. Also absent from the continent are the broligarchs who sit atop such behemoths, some of whom have a tighter grip on power than on reality. There are thus no European Rasputins pumping untold millions into political campaigns, getting pride of place at leaders’ inaugurations or their own new-minted government departments to run. There are few unicorns in Europe, alas, and too little innovation. That said, there are absolutely no tech executives boasting on social media of spending their weekends feeding bits of the state “into the wood chipper”.</p></section><p><h3 id="article-tags">Explore more</h3><nav aria-labelledby="article-tags"><a href="https://www.economist.com/topics/world" data-analytics="tags:world"><span>World</span></a><a href="https://www.economist.com/topics/charlemagne" data-analytics="tags:charlemagne"><span>Charlemagne</span></a><a href="https://www.economist.com/topics/europe" data-analytics="tags:europe"><span>Europe</span></a></nav></p><p>This article appeared in the Europe section of the print edition under the headline “The thing about Europe”</p><div data-test-id="chapterlist" data-tracking-id="content-well-chapter-list"><div><hr data-testid="rule-accent"><div><h3><a href="https://www.economist.com/europe" text="Europe" data-analytics="chapter_list_header:Europe">Europe</a></h3><p><span>April 12th 2025</span></p></div></div><ul><li><a href="https://www.economist.com/europe/2025/04/09/germanys-new-centrist-government-is-reassuring-but-bland" id="e5df72b7-5b2b-464e-93b4-77ddd0878a14" data-analytics="article:reports_headline:1" data-test-id="chapterlist-link-0"><span data-testid="right-london-5-false"><span>→</span></span><span>Germany’s new centrist government is reassuring but bland</span></a></li><li><a href="https://www.economist.com/europe/2025/04/09/the-eus-response-to-donald-trumps-tariffs-seems-to-work" id="3962b04a-a8db-42bf-868c-90261c728b3a" data-analytics="article:reports_headline:2" data-test-id="chapterlist-link-1"><span data-testid="right-london-5-false"><span>→</span></span><span>The EU’s response to Donald Trump’s tariffs seems to work</span></a></li><li><a href="https://www.economist.com/europe/2025/04/08/ukraine-thinks-it-can-hold-off-russia-as-long-as-it-needs-to" id="aca46504-49d9-4373-9c65-7630bd24d811" data-analytics="article:reports_headline:3" data-test-id="chapterlist-link-2"><span data-testid="right-london-5-false"><span>→</span></span><span>Ukraine thinks it can hold off Russia as long as it needs to</span></a></li><li><a href="https://www.economist.com/europe/2025/04/06/how-europe-hopes-to-turn-ukraine-into-a-steel-porcupine" id="65fd8bdb-3472-4072-93b9-fd540b68f13b" data-analytics="article:reports_headline:4" data-test-id="chapterlist-link-3"><span data-testid="right-london-5-false"><span>→</span></span><span>How Europe hopes to turn Ukraine into a “steel porcupine”</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/turkeys-government-is-trying-to-repress-its-way-out-of-a-crisis" id="7d8658c9-66aa-49d5-a850-c42b0c85f2d5" data-analytics="article:reports_headline:5" data-test-id="chapterlist-link-4"><span data-testid="right-london-5-false"><span>→</span></span><span>Turkey’s government is trying to repress its way out of a crisis</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/spanish-morgues-are-straining-to-identify-migrants" id="35e164dd-f80a-4370-bcc3-47e3961713f8" data-analytics="article:reports_headline:6" data-test-id="chapterlist-link-5"><span data-testid="right-london-5-false"><span>→</span></span><span>Spanish morgues are straining to identify migrants</span></a></li><li><a href="https://www.economist.com/europe/2025/04/10/the-thing-about-europe-its-the-actual-land-of-the-free-now" id="ad25ce23-9bae-4699-9124-6b5bf8776946" data-analytics="article:reports_headline:7" data-test-id="chapterlist-link-6"><span data-testid="right-economist-red-false"><span>→</span></span><span>The thing about Europe: it’s the actual land of the free now</span></a></li></ul></div><div orientation="vertical" data-test-id="vertical"><div orientation="vertical"><figure><img loading="lazy" width="1280" height="1709" decoding="async" data-nimg="1" sizes="300px" srcset="https://www.economist.com/cdn-cgi/image/width=16,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 16w, https://www.economist.com/cdn-cgi/image/width=32,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 32w, https://www.economist.com/cdn-cgi/image/width=48,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 48w, https://www.economist.com/cdn-cgi/image/width=64,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 64w, https://www.economist.com/cdn-cgi/image/width=96,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 96w, https://www.economist.com/cdn-cgi/image/width=128,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 128w, https://www.economist.com/cdn-cgi/image/width=256,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 256w, https://www.economist.com/cdn-cgi/image/width=360,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 360w, https://www.economist.com/cdn-cgi/image/width=384,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 384w, https://www.economist.com/cdn-cgi/image/width=480,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 480w, https://www.economist.com/cdn-cgi/image/width=600,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 600w, https://www.economist.com/cdn-cgi/image/width=834,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 834w, https://www.economist.com/cdn-cgi/image/width=960,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 960w, https://www.economist.com/cdn-cgi/image/width=1096,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1096w, https://www.economist.com/cdn-cgi/image/width=1280,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1280w, https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg 1424w" src="https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250412_DE_EU.jpg"></figure></div><div orientation="vertical"><h3 orientation="vertical">From the April 12th 2025 edition</h3><p orientation="vertical">Discover stories from this section and more in the list of contents</p><p><a href="https://www.economist.com/weeklyedition/2025-04-12" data-analytics="sidebar:weekly_edition"><span data-testid="right-economist-red-true"><span>⇒</span></span><span>Explore the edition</span></a></p></div></div><div><a href="https://s100.copyright.com/AppDispatchServlet?publisherName=economist&amp;publication=economist&amp;title=The%20thing%20about%20Europe%3A%20it%E2%80%99s%20the%20actual%20land%20of%20the%20free%20now&amp;publicationDate=2025-04-10&amp;contentID=%2Fcontent%2F2uekcbhb1cdfhkhgafg61bvhel9pm03o&amp;type=A&amp;orderBeanReset=TRUE" target="_blank" rel="noreferrer" data-analytics="end_of_article:reuse_this_content"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" data-testid="renew-outline"><path fill="var(--mb-colour-base-chicago-45)" d="M5.1 16.05a8.25 8.25 0 0 1-.825-1.95A7.696 7.696 0 0 1 4 12.05c0-2.233.775-4.133 2.325-5.7C7.875 4.783 9.767 4 12 4h.175l-1.6-1.6 1.4-1.4 4 4-4 4-1.4-1.4 1.6-1.6H12c-1.667 0-3.083.588-4.25 1.763C6.583 8.938 6 10.367 6 12.05c0 .433.05.858.15 1.275.1.417.25.825.45 1.225l-1.5 1.5ZM12.025 23l-4-4 4-4 1.4 1.4-1.6 1.6H12c1.667 0 3.083-.587 4.25-1.762C17.417 15.063 18 13.633 18 11.95c0-.433-.05-.858-.15-1.275-.1-.417-.25-.825-.45-1.225l1.5-1.5c.367.633.642 1.283.825 1.95.183.667.275 1.35.275 2.05 0 2.233-.775 4.133-2.325 5.7C16.125 19.217 14.233 20 12 20h-.175l1.6 1.6-1.4 1.4Z"></path></svg><span>Reuse this content</span></a></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Live Map of the London Underground (400 pts)]]></title>
            <link>https://www.londonunderground.live/</link>
            <guid>43651390</guid>
            <pubDate>Fri, 11 Apr 2025 07:41:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.londonunderground.live/">https://www.londonunderground.live/</a>, See on <a href="https://news.ycombinator.com/item?id=43651390">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
    
    <p>
      Right click to orbit<br>
      Zoom for buildings<br>
      Hover for details
    </p>
    <p id="live-icon">
      <svg viewBox="0 0 100 40" xmlns="http://www.w3.org/2000/svg">
        <circle cx="20" cy="20" r="10" fill="#ff0000"></circle>
        <text x="45" y="29" fill="#ff0000" font-size="30">LIVE</text>
      </svg>
    </p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Playing in the Creek (293 pts)]]></title>
            <link>https://www.lesswrong.com/posts/rLucLvwKoLdHSBTAn/playing-in-the-creek</link>
            <guid>43650656</guid>
            <pubDate>Fri, 11 Apr 2025 05:05:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lesswrong.com/posts/rLucLvwKoLdHSBTAn/playing-in-the-creek">https://www.lesswrong.com/posts/rLucLvwKoLdHSBTAn/playing-in-the-creek</a>, See on <a href="https://news.ycombinator.com/item?id=43650656">Hacker News</a></p>
Couldn't get https://www.lesswrong.com/posts/rLucLvwKoLdHSBTAn/playing-in-the-creek: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Default styles for h1 elements are changing (320 pts)]]></title>
            <link>https://developer.mozilla.org/en-US/blog/h1-element-styles/</link>
            <guid>43649853</guid>
            <pubDate>Fri, 11 Apr 2025 02:14:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://developer.mozilla.org/en-US/blog/h1-element-styles/">https://developer.mozilla.org/en-US/blog/h1-element-styles/</a>, See on <a href="https://news.ycombinator.com/item?id=43649853">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><main><article lang="en-US"><figure><img alt="Default styles for h1 elements are changing." src="https://developer.mozilla.org/en-US/blog/h1-element-styles/featured.png" height="420" width="800"></figure><p>Browsers are starting to roll out changes in default UA styles for nested section headings. Developers should check that their sites don't rely on UA styles for certain cases to avoid unexpected results and failing Lighthouse checks. In this post, we'll have a look at what the incoming changes are, how to identify if it's an issue on your pages, and some hints for conformant and better-structured websites.</p><section aria-labelledby="whats_changing"><h2 id="whats_changing"><a href="#whats_changing">What's changing</a></h2><div><p>The HTML spec used to define an outline algorithm that gave <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements"><code>&lt;h1&gt;</code></a> elements an implicit semantic heading level based on how many sectioning elements (<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/section"><code>&lt;section&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/aside"><code>&lt;aside&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/nav"><code>&lt;nav&gt;</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/article"><code>&lt;article&gt;</code></a>) it was nested inside.</p>
<p>The browser rendering was such that <code>section &gt; h1</code> would have the same font-size and margin as <code>&lt;h2&gt;</code>. The <code>section &gt; section &gt; h1</code> would be represented as <code>&lt;h3&gt;</code>, and so on. The default rendering was implemented in browsers in their UA styles, but not the heading level in the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Accessibility_tree">accessibility tree</a> (what screen readers use). Websites started to use sectioning elements, but didn't expect to see the automatic heading levels from the outline algorithm.</p>
<p>In general, this created confusion about where developers could use <code>&lt;h1&gt;</code> elements, tools handled the HTML differently, and the outline algorithm was considered problematic. The outline algorithm was <a href="https://github.com/whatwg/html/pull/7829" target="_blank">removed from the HTML spec in 2022</a>, but the UA stylesheet rules still remain. The rules in the default styles are what browser vendors are starting to remove now.</p>
<!--  prettier-ignore-start  -->
<div><pre><code>/* where x is :is(article, aside, nav, section) */
x h1 { margin-block: 0.83em; font-size: 1.50em; }
x x h1 { margin-block: 1.00em; font-size: 1.17em; }
x x x h1 { margin-block: 1.33em; font-size: 1.00em; }
x x x x h1 { margin-block: 1.67em; font-size: 0.83em; }
x x x x x h1 { margin-block: 2.33em; font-size: 0.67em; }
</code></pre></div>
<!--  prettier-ignore-end  -->
<p>For example:</p>
<div><pre><code>&lt;body&gt;
  &lt;h1&gt;Level 1&lt;/h1&gt;
  &lt;section&gt;
    &lt;h1&gt;Level 2&lt;/h1&gt;
    &lt;section&gt;
      &lt;h1&gt;Level 3&lt;/h1&gt;
      &lt;section&gt;
        &lt;h1&gt;Level 4&lt;/h1&gt;
      &lt;/section&gt;
    &lt;/section&gt;
  &lt;/section&gt;
&lt;/body&gt;
</code></pre></div></div></section><section aria-labelledby="what_to_expect_and_when"><h2 id="what_to_expect_and_when"><a href="#what_to_expect_and_when">What to expect and when</a></h2><div><p>Alongside the changes in browser styles, page auditing tools like Lighthouse now flag cases of <code>&lt;h1&gt;</code>s without defined <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"><code>font-size</code></a> as bad practice. Here's the gist of what to expect:</p>
<ul>
<li><code>&lt;h1&gt;</code> will no longer adapt its style based on surrounding sectioning elements like <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;nav&gt;</code>, and <code>&lt;aside&gt;</code>. UA stylesheet will apply the same style to <code>&lt;h1&gt;</code> with no implicit styles that demote <code>&lt;h1&gt;</code> to match <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, etc.</li>
<li>Lighthouse will flag a warning if <code>&lt;h1&gt;</code> is used without a specified font-size. The Lighthouse deprecation warning to look out for is <code>H1UserAgentFontSizeInSection</code>. Hints for dealing with this are described in the next section.</li>
</ul>
<p>In terms of when this is happening, changes are rolling out in the following browsers in this timeline:</p></div></section><section aria-labelledby="firefox"><h3 id="firefox"><a href="#firefox">Firefox</a></h3><div><ul>
<li>From March 31, 2025, Firefox is rolling out changes to 50% of <a href="https://www.mozilla.org/en-US/firefox/channel/desktop/#beta" target="_blank">Beta 138</a> users to remove UA styles for <code>h1</code> in <code>article</code>, <code>aside</code>, <code>nav</code>, or <code>section</code> on desktop. The plan is to roll out to 5% of users on the Firefox 138 stable release, ramp up to 50% of users, then ship on all platforms in Firefox 140. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1885509" target="_blank">bug 1885509</a>.</li>
<li>Since Firefox 136, developers will see a console warning for <code>h1</code>s in <code>article</code>/<code>aside</code>/<code>nav</code>/<code>section</code> without author-defined font-size or margins: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1937568" target="_blank">bug 1937568</a>.</li>
<li>To test in Firefox with the new behavior, set <code>layout.css.h1-in-section-ua-styles.enabled</code> to false in about:config.</li>
</ul></div></section><section aria-labelledby="chrome"><h3 id="chrome"><a href="#chrome">Chrome</a></h3><div><ul>
<li>Since version 136, Chrome shows deprecation warnings for <code>&lt;h1&gt;</code> inside the 4 elements, when the <code>&lt;h1&gt;</code> uses the default smaller font size. Marking something deprecated in Chromium <strong>will lower Lighthouse scores</strong> for "Best Practices": <a href="https://issues.chromium.org/issues/394111284" target="_blank">issue 394111284</a></li>
</ul></div></section><section aria-labelledby="safari"><h3 id="safari"><a href="#safari">Safari</a></h3><div><ul>
<li>There's no implementation bugs to track in Safari for these changes yet, but we <a href="https://github.com/whatwg/html/issues/7867#issuecomment-2124317504" target="_blank">can expect WebKit to follow</a> with equivalent updates.</li>
</ul></div></section><section aria-labelledby="fixing_the_lighthouse_warning"><h2 id="fixing_the_lighthouse_warning"><a href="#fixing_the_lighthouse_warning">Fixing the Lighthouse warning</a></h2><div><p>Lighthouse has recently <a href="https://github.com/GoogleChrome/lighthouse/issues/16404" target="_blank">inherited a check</a> based on Chromium's DevTools warnings for sites that don't specify a <code>font-size</code> for <code>&lt;h1&gt;</code> elements. The new rule is called <code>H1UserAgentFontSizeInSection</code> and shows up since March following the addition of deprecation warnings. If you see the <code>&lt;h1&gt;</code> warning, make sure you're applying an explicit <code>&lt;h1&gt;</code> font-size and margins. Here's some recommended styles to use:</p>
<div><pre><code>h1 {
  margin-block: 0.67em;
  font-size: 2em;
}
</code></pre></div>
<p>To avoid overwriting other style rules that target <code>&lt;h1&gt;</code> you can use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:where"><code>:where()</code></a>, which has zero <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Specificity">specificity</a>:</p>
<div><pre><code>:where(h1) {
  margin-block: 0.67em;
  font-size: 2em;
}
</code></pre></div>
<p>The MDN page for heading elements now contains <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements#specifying_a_uniform_font_size_for_h1">the usage notes listed above</a> so there is a visible place for developers to see this information.</p></div></section><section aria-labelledby="summary"><h2 id="summary"><a href="#summary">Summary</a></h2><div><p>Here's some things to keep in mind:</p>
<ul>
<li><strong>Do not</strong> rely on default browser styles for conveying a heading hierarchy. Explicitly define your document hierarchy using <code>&lt;h2&gt;</code> for second-level headings, <code>&lt;h3&gt;</code> for third-level, etc.</li>
<li>Always define your own <code>font-size</code> and <code>margin</code> for <code>&lt;h1&gt;</code> elements.</li>
<li>Consider updating your CSS resets to account for the change.</li>
<li>Audit your site <a href="https://pagespeed.web.dev/" target="_blank">using Lighthouse</a> and browser <a href="https://firefox-dev.tools/" target="_blank">DevTools</a> to check for deprecated usage.</li>
<li>Check the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/Heading_Elements#specifying_a_uniform_font_size_for_h1">usage notes</a> on the MDN documentation for HTML section headings.</li>
</ul></div></section><section aria-labelledby="see_also"><h2 id="see_also"><a href="#see_also">See also</a></h2></section><section><a href="https://developer.mozilla.org/en-US/blog/global-privacy-control/"><article><h2><strong>Previous<!-- --> Post</strong> <!-- -->Implications of Global Privacy Control</h2></article></a></section></article></main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why do AI company logos look like buttholes? (112 pts)]]></title>
            <link>https://velvetshark.com/ai-company-logos-that-look-like-buttholes</link>
            <guid>43649640</guid>
            <pubDate>Fri, 11 Apr 2025 01:39:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://velvetshark.com/ai-company-logos-that-look-like-buttholes">https://velvetshark.com/ai-company-logos-that-look-like-buttholes</a>, See on <a href="https://news.ycombinator.com/item?id=43649640">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img alt="AI company logos with suspicious circular designs" loading="lazy" width="1800" height="1000" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fwhy-do-AI-company-logos-look-like-buttholes.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fwhy-do-AI-company-logos-look-like-buttholes.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fwhy-do-AI-company-logos-look-like-buttholes.png&amp;w=3840&amp;q=75"></p>
<p>If you pay attention to AI company branding, you'll notice a pattern:</p>
<ol>
<li>Circular shape (often with a gradient)</li>
<li>Central opening or focal point</li>
<li>Radiating elements from the center</li>
<li>Soft, organic curves</li>
</ol>
<p>Sound familiar? It should, because it's also an apt description of... well, you know.</p>
<p>A butthole.</p>
<h2>The circular AI logo epidemic</h2>
<p>If you ever thought that AI company logos look like buttholes, you're not alone.</p>
<p>FastCompany noticed this trend in 2023 and published an article about it, but (I could only presume) their editors and lawyers didn't let them title the article the way the wanted it to title, so it got published with a more safe for work title: <a href="https://www.fastcompany.com/90869029/ai-boom-logo-trend-swirling-hexagon">The AI boom is creating a new logo trend: the swirling hexagon</a>. They also were careful not to mention anything anatomical.</p>
<p>I don't have editors or lawyers, so let's take a closer look at some examples:</p>
<h4>OpenAI's logo evolution</h4>
<p><img alt="OpenAI's logo evolution" loading="lazy" width="1510" height="438" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fopenai-logo-evolution.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fopenai-logo-evolution.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fopenai-logo-evolution.png&amp;w=3840&amp;q=75"></p>
<p>OpenAI's original logo was a simple, text-based mark. Then came the redesign: a perfect circle with a subtle gradient and central void.</p>
<p><a href="https://openai.com/brand/">OpenAI's official explanation</a> is a masterclass in corporate euphemism:</p>
<p><em>"The Blossom logo is more than just a visual symbol; it represents the core philosophy that guides our approach to design and innovation. At its heart, the logo captures the dynamic intersection between humanity and technology—two forces that shape our world and inspire our work. The design embodies the fluidity and warmth of human-centered thinking through the use of circles, while right angles introduce the precision and structure that technology demands."</em></p>
<p>Sure, Sam.</p>
<p>Translation: "We made a circular shape with some angles because it looked nice, then wrote flowery language to justify why our butthole-adjacent design is actually profound."</p>
<p>The <strong>fluidity and warmth of human-centered thinking through the use of circles</strong> is perhaps the most elegant way anyone has ever described making a logo that resembles an anus.</p>
<h4>The Big AI companies</h4>
<p><img alt="Big AI companies logos" loading="lazy" width="1800" height="1000" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fbig-ai-companies-logos.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fbig-ai-companies-logos.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fbig-ai-companies-logos.png&amp;w=3840&amp;q=75"></p>
<p>Looking at the logos of the Big AI companies, you can see that they almost all of them have a circular or snowflake-like shape and a central opening.</p>
<p>Only DeepSeek and DeepMind don't follow the trend. Interestingly, both are sea-related.</p>
<h4>Smoking gun: Anthropic's Claude</h4>
<p>Up until this point, the logos have been subtle. You might say that the logos are simply circular and there's not much more to it.</p>
<p>But Anthropic's Claude takes it to the next level.</p>
<p>Here's a side-by-side comparison with a drawing from Kurt Vonnegut's book "Breakfast of Champions". I added Claude's logo below for easy comparison.</p>
<p><img alt="Vonnegut vs Claude" loading="lazy" width="832" height="687" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2FVonnegut-vs-Claude.png&amp;w=1080&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2FVonnegut-vs-Claude.png&amp;w=1920&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2FVonnegut-vs-Claude.png&amp;w=1920&amp;q=75"></p>
<p>Both the drawing and the description in the book are unambiguous. This is not just "a circular shape with a gradient" anymore, is it?</p>
<h4>It's not just AI companies</h4>
<p>Even traditional companies aren't immune. Here are a few notable or funny examples. But the percentage of AI company logos that look like buttholes is still significanly higher than than any other industry.</p>
<p><img alt="Non-AI butthole logos" loading="lazy" width="1800" height="481" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fnon-ai-logos.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fnon-ai-logos.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fnon-ai-logos.png&amp;w=3840&amp;q=75"></p>
<p>I especially like the Electrolux one. It's simple, memorable, and once you see a butt and bikini, you can't unsee it.</p>
<h2>Why does this keep happening?</h2>
<p>There are several factors at play:</p>
<h4>Circular design psychology</h4>
<p>Circles represent wholeness, completion, and infinity—concepts that align with AI's promise. They're also friendly and non-threatening, qualities companies desperately want to project when selling potentially job-replacing technology.</p>
<h4>Unintentional biomimicry</h4>
<p><img alt="Face on Mars" loading="lazy" width="832" height="614" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fface-on-mars.jpg&amp;w=1080&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fface-on-mars.jpg&amp;w=1920&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fface-on-mars.jpg&amp;w=1920&amp;q=75"></p>
<p>The human brain finds familiar patterns in random shapes (<a href="https://en.wikipedia.org/wiki/Pareidolia">pareidolia</a>), like a face on Mars, taken by the Viking 1 orbiter and released by NASA in 1976.</p>
<p>But sometimes, designers inadvertently recreate biological forms without realizing the... anatomical implications.</p>
<h4>The copycat effect</h4>
<p>Once a few major players adopted the circular sphincter aesthetic, everyone followed suit. Now we have an industry where standing out means looking exactly like everyone else's butthole.</p>
<p>Basically, the same reason <a href="https://velvetshark.com/why-do-brands-change-their-logos-and-look-like-everyone-else">why so many brands change their logos and look like everyone else</a>.</p>
<p><img alt="Tech and fashion logos using sans serif fonts" loading="lazy" width="2483" height="1419" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fb51d96d2b8eae559c71d90_tech-fashion-logos-sans-serif.png&amp;w=3840&amp;q=75 1x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fb51d96d2b8eae559c71d90_tech-fashion-logos-sans-serif.png&amp;w=3840&amp;q=75"></p>
<h4>Design by committee</h4>
<p>Another factor is how these logos are created. Important corporate decisions involve many stakeholders. The result is often the safest, most inoffensive option, the average of everyone's opinions. In design meetings at AI companies, conversations probably sound like:</p>
<ul>
<li>Can we make it more futuristic?</li>
<li>It needs to feel advanced but approachable.</li>
<li>Let's add a subtle gradient to convey intelligence.</li>
</ul>
<p>No single person suggests making a logo that resembles an anus, but when everyone's feedback gets incorporated, that's what often emerges. Risk aversion in corporate environments naturally pushes designs toward familiar, "safe" territory, which apparently means anatomical openings.</p>
<h2>What this says about tech branding</h2>
<p>This phenomenon reveals something deeper about the tech industry: the fear of standing out too much. Despite claims of innovation and disruption, there's tremendous pressure to look legitimate by conforming to established visual language.</p>
<p>When OpenAI's sphincter-like logo became successful, it created a template that said, "This is what serious AI looks like." Now, any new AI company that doesn't resemble a colorful anatomical opening risks being seen as unserious or unprofessional.</p>
<h3>Tech design trends through history</h3>
<p>This isn't the first time tech design has gone through a conformity phase. Consider these previous waves:</p>
<ul>
<li><strong>1990s-2000s: 3D and Glossy</strong> - Remember when every logo needed a drop shadow and a glassy shine? Apple's aqua interface set the standard.</li>
<li><strong>2010-2013: Skeuomorphism</strong> - Digital designs mimicking physical objects, with stitched leather textures and realistic dials.</li>
<li><strong>2013-2018: Flat Design</strong> - Reaction to skeuomorphism brought minimal, clean interfaces with bright colors and no shadows.</li>
<li><strong>2018-2022: Neomorphism</strong> - Soft shadows and semi-flat design creating subtle, "touchable" interfaces.</li>
<li><strong>2022-Present: The Butthole Era</strong> - Circular gradients with central focal points dominating AI branding.</li>
</ul>
<p>Each era started with innovations that were quickly copied until the industry reached saturation point and moved on to the next trend.</p>
<p><img alt="Sans serif bags" loading="lazy" width="1600" height="667" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fbf32ea6160018ba6a9cb84_sans-serif-bags.jpg&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fbf32ea6160018ba6a9cb84_sans-serif-bags.jpg&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fwhy-do-brands-change-their-logos-and-look-like-everyone-else%2F5fbf32ea6160018ba6a9cb84_sans-serif-bags.jpg&amp;w=3840&amp;q=75"></p>
<p><em>Logos become increasingly interchangeable (one of the bags is real, but they all look the same)</em></p>
<h2>Historic logo disasters: You're not alone</h2>
<p>AI companies can take some comfort in knowing they're not the first to face unintended anatomical comparisons. Logo history is filled with disasters but to keep this consistent with the theme of the article, here's a couple of them.</p>
<p><img alt="Logo disasters" loading="lazy" width="1800" height="481" decoding="async" data-nimg="1" srcset="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fother-logo-disasters.png&amp;w=1920&amp;q=75 1x, https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fother-logo-disasters.png&amp;w=3840&amp;q=75 2x" src="https://velvetshark.com/_next/image?url=%2Fimages%2Fai-company-logos-that-look-like-buttholes%2Fother-logo-disasters.png&amp;w=3840&amp;q=75"></p>
<ul>
<li>Zune logo, when flipped, says something different. Maybe that's one of the reasons why iPod won?</li>
<li>Brazilian Institute of Oriental Studies is a stylized pagoda sillhouetted against the setting sun. Or so the designers wanted it to look. The final result was much more... anatomical. They since changed it to something less suggestive.</li>
</ul>
<p>Maybe companies should have a panel of "middle schoolers" on their payroll to review logos before launch. They'll find every possible inappropriate interpretation with ruthless efficiency.</p>
<h2>Breaking free from the butthole</h2>
<p>For companies brave enough to differentiate, here are some alternatives:</p>
<ol>
<li><strong>Embrace sharp angles</strong> - geometric shapes with defined edges create a distinct visual identity</li>
<li><strong>Use negative space creatively</strong> - think FedEx arrow, not biological openings</li>
<li><strong>Avoid radial symmetry</strong> - not everything needs to be perfectly circular</li>
<li><strong>Skip the gradient</strong> - flat design still works</li>
<li><strong>Test with diverse audiences</strong> - if five different people independently say "that looks like a butthole," it probably does (show it to teenagers if you want to uncover even the most subtle anatomical implications)</li>
</ol>
<h2>Conclusion</h2>
<p>Does this mean AI companies should change their branding? Not necessarily. The familiarity clearly works in building trust. But perhaps the next wave of AI innovation could be accompanied by some visual innovation too.</p>
<p>For companies looking to break the mold, consider these approaches that successful tech brands have used:</p>
<ul>
<li><strong>Embrace meaningful abstraction</strong> - Slack's hashtag-inspired logo communicates collaboration without circular clichés</li>
<li><strong>Leverage letterforms</strong> - Netflix's simple "N" has become instantly recognizable without anatomical confusion</li>
<li><strong>Tell a story</strong> - Stripe's distinctive parallel lines reflect payment flows moving seamlessly</li>
<li><strong>Use distinctive color combinations</strong> - Twitch's purple branding stands out in a sea of blue tech logos</li>
</ul>
<p>The challenge for the next generation of AI companies isn't just technological - it's finding visual language that communicates innovation without resorting to the same tired sphincter-inspired patterns.</p>
<p><strong>PS.</strong> <em>This post is meant to be humorous, but let's not pretend there isn't a serious point here about <a href="https://velvetshark.com/why-do-brands-change-their-logos-and-look-like-everyone-else">the depressing sameness in modern design</a>. No actual anuses were consulted during this research, though several designers were clearly thinking about them.</em></p><div><blockquote><h4><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right:0.4rem;flex-shrink:0"><path d="M5.026 15c6.038 0 9.341-5.003 9.341-9.334v-.425A6.673 6.673 0 0 0 16 3.542a6.573 6.573 0 0 1-1.884.517 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.084.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115c-.211 0-.417-.02-.616-.058a3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 0 13.58a9.29 9.29 0 0 0 5.031 1.468"></path></svg><span>If you like what you see, you'll find more stuff like this on<!-- --> <a href="https://twitter.com/velvet_shark" target="_blank" rel="noopener">my Twitter</a>.</span></h4></blockquote></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Crystal 1.16.0 (120 pts)]]></title>
            <link>https://crystal-lang.org/2025/04/09/1.16.0-released/</link>
            <guid>43649618</guid>
            <pubDate>Fri, 11 Apr 2025 01:36:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://crystal-lang.org/2025/04/09/1.16.0-released/">https://crystal-lang.org/2025/04/09/1.16.0-released/</a>, See on <a href="https://news.ycombinator.com/item?id=43649618">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">


<p>We are announcing a new Crystal release 1.16.0 with several new features and bug fixes.</p>

<p>Pre-built packages are available on <a href="https://github.com/crystal-lang/crystal/releases/tag/1.16.0">GitHub Releases</a>
and our official distribution channels.
See <a href="https://crystal-lang.org/install/">crystal-lang.org/install</a> for
installation instructions.</p>

<h2 id="stats">Stats</h2>

<p>This release includes <a href="https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.16.0">162 changes since 1.15.1</a>
by 19 contributors.  We thank all the contributors for all the effort put into
improving the language! ❤️</p>

<h2 id="changes">Changes</h2>

<p>Below we list the most remarkable changes in the language, compiler and stdlib.
For more details, visit the <a href="https://github.com/crystal-lang/crystal/releases/tag/1.16.0">full changelog</a>.</p>

<h3 id="breaking">Breaking</h3>

<p>The following changes break prior behavior of the compiler, but we expect them to not break much in existing code. If this is not the case, please let us know in the <a href="https://github.com/crystal-lang/crystal/issues">issue tracker</a> or <a href="https://forum.crystal-lang.org/">forum</a>.</p>

<h4 id="fixed-implementation-of-filematch">Fixed implementation of <code><span>File</span><span>.</span><span>match?</span></code></h4>

<p>The implementation of <a href="https://crystal-lang.org/api/1.16.0/File.html#match%3F(pattern%3AString%2Cpath%3APath|String)%3ABool-class-method"><code><span>File</span><span>.</span><span>match?</span></code></a> was insufficient and has been replaced by a new algorithm.
This change should not affect any behaviour that was previously working as documented.</p>

<p>The correction of implementation bugs leads to the following changes in observed behaviour:</p>

<ul>
  <li>Wildcard and globstar are able to match non-greedily. For example, <code><span>**</span><span>/a</span></code> now matches <code><span>a</span></code>.</li>
  <li>Globstar matches full path segments only, otherwise it’s just two wildcards (which is equivalent to a single one). For example, <code><span>a</span><span>**</span></code> no longer matches <code><span>ab</span><span>/</span><span>c</span></code> (but it matches <code><span>ab</span></code>).</li>
  <li>Subpatterns in branches are parsed with respect to their respective syntactical context. For example, <code><span>{[}]}</span></code> now matches <code><span>}</span></code>.
It parses as a branch with one subpattern that describes the character set <code><span>}</span></code>. Previously, this was a parse error.</li>
  <li>Escapes for special character are recognized. For example, <code><span>\\</span><span>t</span></code> now matches <code><span>\</span><span>t</span></code> while previously it matched <code><span>t</span></code>.</li>
  <li>The grammar for parsing character classes is more flexible. For example, <code><span>[</span><span>a</span><span>-</span><span>]</span></code>, now matches <code><span>a</span></code> and <code><span>-</span></code>. Previously, it was a pattern error (incomplete character range).</li>
</ul>

<p>Note: <a href="https://crystal-lang.org/api/1.16.0/Dir.html#glob(patterns:Enumerable,match:File::MatchOptions=File::MatchOptions.glob_default,follow_symlinks:Bool=false):Array(String)-class-method"><code><span>Dir</span><span>.</span><span>glob</span></code></a> is implemented differently and is not affected by that invalid behaviour. There were no changes to it.</p>

<p><em>Thanks, <a href="https://github.com/straight-shoota">@straight-shoota</a></em></p>

<h4 id="parameter-name-suffixes-are-deprecated">Parameter name suffixes are deprecated</h4>

<p>The suffixes <code><span>?</span></code> and <code><span>!</span></code> for parameter names of defs, macros and blocks are deprecated.  This aligns them with other variable names.  They produce a warning now (<a href="https://github.com/crystal-lang/crystal/issues/12197">#12197</a>).</p>

<p><em>Thanks, <a href="https://github.com/potomak">@potomak</a></em></p>

<h4 id="implicit-return-type-of-enumerablesum-and-product">Implicit return type of <code><span>Enumerable</span><span>#sum</span></code> and <code><span>#product</span></code></h4>

<p><a href="https://crystal-lang.org/api/1.16.0/Enumerable.html#sum-instance-method"><code><span>Enumerable</span><span>#sum</span></code></a> and <a href="https://crystal-lang.org/api/1.16.0/Enumerable.html#product-instance-method"><code><span>#product</span></code></a> no longer resolve an implicit return type when the element type is a union. This can’t work reliably.
Instead, you need to specify the sum/product type explicitly by the <code><span>initial</span></code> parameter with a value of the intended return type (<a href="https://github.com/crystal-lang/crystal/issues/15314">#15314</a>).
In effect, this moves a runtime error condition to a compile time error.</p>

<div><pre><code><span># Crystal 1.16.0</span>
<span>[</span><span>1</span><span>,</span> <span>10000000000_u64</span><span>].</span><span>sum</span> <span># Error: `Enumerable#sum` and `#product` do not support Union types.</span>
                         <span># Instead, use `Enumerable#sum(initial)` and `#product(initial)`,</span>
                         <span># respectively, with an initial value of the intended type of the call.</span>

<span># Crystal &lt; 1.16.0</span>
<span>[</span><span>1</span><span>,</span> <span>10000000000_u64</span><span>].</span><span>sum</span> <span># OverflowError: Arithmetic overflow</span>

<span># Passing an explicit initial value works, before and after:</span>
<span>[</span><span>1</span><span>,</span> <span>10000000000_u64</span><span>].</span><span>sum</span><span>(</span><span>0_u64</span><span>)</span> <span># =&gt; 10000000001_u64</span>
</code></pre></div>

<p><em>Thanks, <a href="https://github.com/rvprasad">@rvprasad</a></em></p>

<h4 id="resource-string-in-httprequest">Resource string in <code><span>HTTP</span><span>::</span><span>Request</span></code></h4>

<p><a href="https://crystal-lang.org/api/1.16.0/HTTP/Request.html#-instance-method"><code><span>HTTP</span><span>::</span><span>Request</span></code></a> was fixed to correctly parse HTTP resource strings that look like an absolute URL.
This may break code that relied on the previous, buggy behaviour (<a href="https://github.com/crystal-lang/crystal/issues/15499">#15499</a>).</p>

<div><pre><code><span># Crystal 1.16.0</span>
<span>HTTP</span><span>::</span><span>Request</span><span>.</span><span>new</span><span>(</span><span>"GET"</span><span>,</span> <span>"http://example.com/foo"</span><span>).</span><span>path</span> <span># =&gt; "http://example.com/foo"</span>

<span># Crystal &lt; 1.16.0</span>
<span>HTTP</span><span>::</span><span>Request</span><span>.</span><span>new</span><span>(</span><span>"GET"</span><span>,</span> <span>"http://example.com/foo"</span><span>).</span><span>path</span> <span># =&gt; "/foo"</span>
</code></pre></div>

<p><em>Thanks, <a href="https://github.com/straight-shoota">@straight-shoota</a></em></p>

<h4 id="environment-changes-for-subcommands">Environment changes for subcommands</h4>

<p>The compiler won’t set the environment variable <code><span>$CRYSTAL</span></code> when running a process for a subcommand.
This variable was only in introduced in <a href="https://github.com/crystal-lang/crystal/issues/14953">#14953</a> in 1.14.0.
We addded a more flexible alternative <code><span>$CRYSTAL_EXEC_PATH</span></code>, and the equivalent to <code><span>$CRYSTAL</span></code> is now <code><span>$CRYSTAL_EXEC_PATH</span><span>/</span><span>crystal</span></code>. The compiler also prepends its path to <code><span>$PATH</span></code> (<a href="https://github.com/crystal-lang/crystal/issues/15186">#15186</a>).</p>

<p><em>Thanks, <a href="https://github.com/straight-shoota">@straight-shoota</a></em></p>

<h3 id="execution-contexts">Execution Contexts</h3>

<p>Execution contexts from <a href="https://github.com/crystal-lang/rfcs/pull/2">RFC 0002</a> are available as a preview feature.
It has already proven to be quite robust, but there might be some rough edges.</p>

<p>You can test execution contexts with the compiler flags <code><span>-</span><span>Dpreview_mt</span> <span>-</span><span>Dexecution_context</span></code>.
The default context is single threaded (unlike standalone <code><span>-</span><span>Dpreview_mt</span></code>).
But you can then start additional contexts as you need (for example, a <a href="https://crystal-lang.org/api/master/Fiber/ExecutionContext/MultiThreaded.html"><code><span>Fiber</span><span>::</span><span>ExecutionContext</span><span>::</span><span>MultiThreaded</span></code></a> or <a href="https://crystal-lang.org/api/master/Fiber/ExecutionContext/Isolated.html"><code><span>Fiber</span><span>::</span><span>ExecutionContext</span><span>::</span><span>Isolated</span></code></a>).</p>

<div><pre><code><span>mt_context</span> <span>=</span> <span>Fiber</span><span>::</span><span>ExecutionContext</span><span>::</span><span>MultiThreaded</span><span>.</span><span>new</span><span>(</span><span>"worker-threads"</span><span>,</span> <span>4</span><span>)</span>

<span>10</span><span>.</span><span>times</span> <span>do</span>
  <span>mt_context</span><span>.</span><span>spawn</span> <span>do</span>
    <span>do_something</span>
  <span>end</span>
<span>end</span>

<span>gtk</span> <span>=</span> <span>Fiber</span><span>::</span><span>ExecutionContext</span><span>::</span><span>Isolated</span><span>.</span><span>new</span><span>(</span><span>"Gtk"</span><span>)</span> <span>do</span>
  <span>Gtk</span><span>.</span><span>main</span>
<span>end</span>
<span>gtk</span><span>.</span><span>wait</span>
</code></pre></div>

<p>Execution contexts are supported on most targets, including, Linux, macOS, Windows and the different BSDs, on X86 and ARM architectures.
This addition marks the peak of the <a href="https://crystal-lang.org/2024/02/09/84codes-manas-mt/">ongoing project to improve multi-threading support</a> with the help of <a href="https://www.84codes.com/">84codes</a>.</p>

<h3 id="language">Language</h3>

<ul>
  <li><a href="https://crystal-lang.org/api/1.16.0/Slice.html#literal(*args)-class-method"><code><span>Slice</span><span>.</span><span>literal</span></code></a> can infer the element type (<a href="https://github.com/crystal-lang/crystal/issues/15529">#15529</a>) and works in the interpreter (<a href="https://github.com/crystal-lang/crystal/issues/15531">#15531</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<ul>
  <li>Macro <a href="https://crystal-lang.org/api/1.16.0/Crystal/Macros.html#sizeof(type):NumberLiteral-instance-method"><code><span>sizeof</span></code></a> and <a href="https://crystal-lang.org/api/1.16.0/Crystal/Macros.html#alignof(type):NumberLiteral-instance-method"><code><span>alignof</span></code></a> provide information on stable types (<a href="https://github.com/crystal-lang/crystal/issues/15497">#15497</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<h3 id="standard-library">Standard library</h3>

<ul>
  <li>Several bug fixes and performance improvements to <code><span>Path</span></code> handling, especially for Windows paths.</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<ul>
  <li>New methods <a href="https://crystal-lang.org/api/1.16.0/Indexable.html#find(if_none=nil,offset:Int=0,&amp;:T-%3E)-instance-method"><code><span>Indexable</span><span>#find</span></code></a> and <a href="https://crystal-lang.org/api/1.16.0/Indexable.html#find%21%28offset%3AInt%3D0%2C%26%3AT-%3E%29-instance-method"><code><span>#find!</span></code></a> (<a href="https://github.com/crystal-lang/crystal/issues/15552">#15552</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/punteek">@punteek</a></em></p>

<ul>
  <li>New methods <a href="https://crystal-lang.org/api/1.16.0/Crystal/EventLoop/FileDescriptor.html#wait_readable%28file_descriptor%3ACrystal%3A%3ASystem%3A%3AFileDescriptor%29%3ANil-instance-method"><code><span>EventLoop</span><span>#wait_readable</span></code></a>, <a href="https://crystal-lang.org/api/1.16.0/Crystal/EventLoop/FileDescriptor.html#wait_writeable%28file_descriptor%3ACrystal%3A%3ASystem%3A%3AFileDescriptor%29%3ANil-instance-method"><code><span>#wait_writable</span></code></a> (<a href="https://github.com/crystal-lang/crystal/issues/15376">#15376</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/ysbaddaden">@ysbaddaden</a></em></p>

<h3 id="compiler">Compiler</h3>

<ul>
  <li>The compiler CLI understand the long option <code><span>--</span><span>output</span></code> everywhere, instead of just the short variant <code><span>-</span><span>o</span></code> (<a href="https://github.com/crystal-lang/crystal/issues/15519">#15519</a>). It also accepts a directory name as value, in which case the file name is derived from the source filename (<a href="https://github.com/crystal-lang/crystal/issues/15471">#15471</a>).</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a>, <a href="https://github.com/straight-shoota">@straight-shoota</a></em></p>

<ul>
  <li>The compiler respects the environment variable <code><span>$MACOSX_DEPLOYMENT_TARGET</span></code>, which gets
rid of annoying linker warnings when target versions are mismatched (<a href="https://github.com/crystal-lang/crystal/issues/15603">#15603</a>)</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<h3 id="compiler-tools">Compiler tools</h3>

<p>The doc generator can optionally include <code><span>private</span></code> and <code><span>protected</span></code> objects as well as objects in lib bindings (<code><span>lib</span></code>, <code><span>fun</span></code>, <code><span>union</span></code>, <code><span>cstruct</span></code>, <code><span>external</span></code>, and <code><span>type</span></code>), as proposed in <a href="https://github.com/crystal-lang/rfcs/blob/main/text/0011-extending-api-docs.md">RFC 0011</a>. The <code><span>:showdoc</span><span>:</span></code> directive enables that.</p>

<div><pre><code><span># :showdoc:</span>
<span>#</span>
<span># Documentation for LibFoo</span>
<span>lib</span> <span>Foo</span>
  <span># Documentation for function foo</span>
  <span>fun</span> <span>foo</span> <span>:</span> <span>Void</span>
<span>end</span>

<span># :showdoc:</span>
<span>#</span>
<span># Documentation for method bar</span>
<span>private</span> <span>def</span> <span>bar</span>
<span>end</span>
</code></pre></div>

<p><em>Thanks <a href="https://github.com/nobodywasishere">@nobodywasishere</a></em></p>

<h3 id="dependency-updates">Dependency Updates</h3>

<ul>
  <li>Support for LLVM 20 (<a href="https://github.com/crystal-lang/crystal/issues/15412">#15412</a>)</li>
</ul>

<p><em>Thanks, <a href="https://github.com/HertzDevil">@HertzDevil</a></em></p>

<h3 id="deprecations">Deprecations</h3>

<ul>
  <li><a href="https://crystal-lang.org/api/1.16.0/LLVM/ABI.html"><code><span>LLVM</span><span>::</span><span>ABI</span></code></a> (and <a href="https://crystal-lang.org/api/1.16.0/LLVM/TargetMachine.html#abi-instance-method"><code><span>LLVM</span><span>::</span><span>TargetMachine</span><span>#abi</span></code></a>) is deprecated without replacement (<a href="https://github.com/crystal-lang/crystal/issues/15227">#15227</a>).</li>
</ul>

<hr>

<div>
  <p>Thanks
</p>
<p>We have been able to do all of this thanks to the continued support of [84codes] and every other <a href="https://crystal-lang.org/sponsors">sponsor</a>.
 To maintain and increase the development pace, donations and sponsorships are
 essential.  <a href="https://opencollective.com/crystal-lang">OpenCollective</a> is
 available for that.</p>

<p>Reach out to <a href="mailto:crystal@manas.tech">crystal@manas.tech</a>
 if you’d like to become a direct sponsor or find other ways to support Crystal.
 We thank you in advance!</p>


  <p><a href="https://crystal-lang.org/sponsors#contribute">Contribute</a>
</p></div>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Fintech founder charged with fraud; AI app found to be humans in the Philippines (442 pts)]]></title>
            <link>https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/</link>
            <guid>43648950</guid>
            <pubDate>Thu, 10 Apr 2025 23:36:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/">https://techcrunch.com/2025/04/10/fintech-founder-charged-with-fraud-after-ai-shopping-app-found-to-be-powered-by-humans-in-the-philippines/</a>, See on <a href="https://news.ycombinator.com/item?id=43648950">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p id="speakable-summary">Albert Saniger, the founder and former CEO of Nate, an AI shopping app that promised a “universal” checkout experience, was charged with defrauding investors on Wednesday, <a href="https://www.justice.gov/usao-sdny/pr/tech-ceo-charged-artificial-intelligence-investment-fraud-scheme" target="_blank" rel="noreferrer noopener nofollow">according</a> to a press release from the U.S. Department of Justice.</p>

<p>Founded in 2018, Nate raised over $50 million from investors like Coatue and Forerunner Ventures, most recently <a href="https://www.businesswire.com/news/home/20210617005139/en/Universal-Shopping-App-nate-Raises-%2438M-to-Expand-Its-Online-Payment-Solutions" target="_blank" rel="noreferrer noopener nofollow">raising</a> a $38 million Series A in 2021 led by Renegade Partners.</p>







<p>Nate said its app’s users could buy from any e-commerce site with a single click, thanks to AI. In reality, however, Nate relied heavily on hundreds of human contractors in a call center in the Philippines to manually complete those purchases, the DOJ’s Southern District of New York alleges.</p>

<p>Saniger raised millions in venture funding by claiming that Nate was able to transact online “without human intervention,” except for edge cases where the AI failed to complete a transaction. But despite Nate acquiring some AI technology and hiring data scientists, its app’s actual automation rate was effectively 0%, the DOJ claims.</p>

<p>Nate’s heavy usage of human contractors was the subject of <a href="https://www.theinformation.com/articles/shaky-tech-and-cash-burning-giveaways-ai-shopping-startup-shows-excesses-of-funding-boom" target="_blank" rel="noreferrer noopener nofollow">an investigation</a> by The Information in 2022.</p>

<p>Saniger didn’t respond to a request for comment. He is currently <a href="https://buttercore.com/" target="_blank" rel="noreferrer noopener nofollow">listed</a> as a managing partner at New York VC Buttercore Partners, which didn’t respond to a request for comment either.</p>

<p>The DOJ’s <a href="https://www.justice.gov/usao-sdny/media/1396131/dl?inline" target="_blank" rel="noreferrer noopener nofollow">indictment</a> says that Nate ran out of money and was forced to sell its assets in January 2023, leaving its investors with “near total” losses. Albert Saniger’s LinkedIn profile indicates he was no longer CEO as of 2023.</p>


<p>Nate isn’t the only startup that has allegedly exaggerated its AI capabilities. For example, an “AI” drive-through software startup was also powered largely by humans in the Philippines, The Verge <a href="https://www.theverge.com/2023/12/8/23993427/artificial-intelligence-presto-automation-fast-food-drive-thru-philippines-workers" target="_blank" rel="noreferrer noopener nofollow">reported</a> in 2023.&nbsp;</p>

<p>More recently, Business Insider <a href="https://www.businessinsider.com/evenup-ai-errors-hallucinations-former-employees-2024-11" target="_blank" rel="noreferrer noopener nofollow">reported</a> that an AI legal tech unicorn, EvenUp, used humans to do much of its work.</p>
</div><div>
	
	
	
	

	
<div>
	<p>
		Charles Rollet is a senior reporter at TechCrunch. His investigative reporting has led to U.S. government sanctions against four tech companies, including China’s largest AI firm. Prior to joining TechCrunch, Charles covered the surveillance industry for IPVM. Charles is based in San Francisco, where he enjoys hiking with his dogs. You can contact Charles securely on Signal at charlesrollet.12 or +1-628-282-2811. 	</p>
</div>


	
	<p>
		<a data-ctatext="View Bio" data-destinationlink="https://techcrunch.com/author/charles-rollet/" data-event="button" href="https://techcrunch.com/author/charles-rollet/">View Bio <svg style="width: 1em;" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><path fill="var(--c-svg, currentColor)" d="M16.5 12 9 19.5l-1.05-1.05L14.4 12 7.95 5.55 9 4.5z"></path></svg></a>
	</p>
	
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Black Mirror's pessimism porn won't lead us to a better future (160 pts)]]></title>
            <link>https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism</link>
            <guid>43648890</guid>
            <pubDate>Thu, 10 Apr 2025 23:24:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism">https://www.theguardian.com/technology/2025/apr/10/black-mirror-tv-show-pessimism</a>, See on <a href="https://news.ycombinator.com/item?id=43648890">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>Black Mirror is more than science fiction – its stories about modernity have become akin to science folklore, shaping our collective view of technology and the future.</p><p>Each new innovation gets an allegory: smartphones as tools for a new age caste system, robot dogs as overzealous human hunters, drones as a murderous swarm, artificial intelligence as new age necromancy, virtual reality and brain chips as seizure-inducing nightmares, to name a few. Episodes most often channel our collective anxieties about the future – or foment new ones through masterly writing, directing, casting and acting. It is a must-watch, but must we take it so seriously?</p><p>Black Mirror fails to consistently explore the duality of technology and our reactions to it. It is a critical deficit. The show mimics the folly of Icarus and Daedalus – the original tech bros – and the hubris of Jurassic Park’s Dr Hammond. Missing are the lessons of the Prometheus myth, which shows fire as a boon for humanity, not doom, though its democratization angered benevolent gods. Absent is the plot twist of Pandora’s box that made it philosophically useful: the box also contained hope and opportunity that new knowledge brings. While Black Mirror explores how humans react to technology, it too often does so in service of a dystopian narrative, ignoring Isaac Asimov’s <a href="https://newsletter.pessimistsarchive.org/p/how-isaac-asimov-predicted-the-openai" data-link-name="in body link">observation</a>: that humans are prone to irrationally fear or resist technology.</p><p>Black Mirror is more pessimism porn than Plato’s parable, imparting to its audience a tacit lesson: fear the future more than the past. Fear too much technological change, not too little. It is an inherently populist narrative, one that appeals to nostalgia: intellectually, we understand the present is better than the past in large part due to scientific and technological change, yet emotionally and instinctually we can’t help but feel this time in history is different, that the future can only get worse.</p><h2 id="the-heavy-consequences-of-technological-fearmongering">The heavy consequences of technological fearmongering</h2><p>This kind of reductive dystopianism – a hallmark of post-1960s science fiction – clouds our thinking about the future because it “cannot imagine a better future, and it doesn’t ask anyone to bother to make one”, as New Yorker writer Jill Lepore <a href="https://www.newyorker.com/magazine/2017/06/05/a-golden-age-for-dystopian-fiction" data-link-name="in body link">noted</a> in 2017.</p><p>We run from the speculative risks of the future, towards the proven dangers of the past, a dynamic I call the <a href="https://x.com/LouisAnslow/status/1786627656655818781" data-link-name="in body link">Frankenstein fallacy</a>. This pessimistic archetype has bipartisan allure because “it requires so little by way of literary, political, or moral imagination”, <a href="https://www.newyorker.com/magazine/2017/06/05/a-golden-age-for-dystopian-fiction" data-link-name="in body link">according</a> to Lepore; consequently, it is politically useful but unconstructive – as populism tends to be.</p><p>Technological pessimism will not insure against a more dystopian tomorrow. Fear of genetically modified organisms – which kicked off around the <a href="https://medium.com/timeline/gmo-food-labeling-rifkin-d5f125ba19f7" data-link-name="in body link">release</a> of Jurassic Park – has seen countries run from GMO <a href="https://www.theguardian.com/science/2002/jun/01/gm.zimbabwenews" data-link-name="in body link">food aid</a> toward famine, from vitamin-enriched GMO “golden rice” towards malnutrition leading to <a href="https://www.theguardian.com/environment/2019/oct/26/gm-golden-rice-delay-cost-millions-of-lives-child-blindness" data-link-name="in body link">millions of avoidable deaths</a>. Countries such as the United States and <a href="https://www.dw.com/en/germany-shuts-down-its-last-nuclear-power-stations/a-65249019" data-link-name="in body link">Germany</a> ran from a future of nuclear energy, <a href="https://www.theguardian.com/environment/2024/mar/20/nuclear-plant-closure-carbon-emissions-new-york" data-link-name="in body link">towards coal</a> and oil. In the Philippines, a nuclear plant built in the 1970s sits unused – <a href="https://www.rappler.com/philippines/145299-national-consensus-reopen-bataan-nuclear-power-plant-doe/" data-link-name="in body link">never turned on</a> – while its population deals with sky-high energy prices. All three countries are now trying to <a href="https://www.reuters.com/world/europe/germanys-nuclear-lobby-says-up-six-reactors-could-restart-2025-03-05/" data-link-name="in body link">reverse course</a>, realizing that the certainty of stasis and stagnation is its own form of dystopia. In contrast, France ran from the past towards the future, overcoming public fears of nuclear disasters, now getting <a href="https://www.euronews.com/business/2024/05/16/economics-of-nuclear-power-the-france-germany-divide-explained" data-link-name="in body link">70%</a> of its electricity from nuclear power.</p><p>Countries such as India, Brazil, Mexico and Thailand have run from vapes – <a href="https://www.usnews.com/news/best-countries/articles/countries-that-ban-the-sale-of-vapes-e-cigarettes" data-link-name="in body link">outlawing</a> them, while permitting traditional tobacco cigarettes for 1.8 billion of their citizens. Better unsafe than sorry.</p><p>In the US, Robert F Kennedy Jr runs from vaccines towards natural herd immunity – although he might be having second <a href="https://www.npr.org/sections/shots-health-news/2025/04/07/nx-s1-5354900/hhs-rfk-endorses-mmr-measles-vaccine-stoking-supporters-fury" data-link-name="in body link">thoughts</a> now that the risks have become less abstract. Bipartisan efforts have sought to <a href="https://www.theverge.com/2023/8/4/23819578/kosa-kids-online-safety-act-privacy-danger" data-link-name="in body link">remove online anonymity</a> to protect children, forgetting that as adults they’ll lose the protection that anonymity brings in the context of free speech. Attacks on environmentally friendly lab-grown beef from Republicans have drawn support by Democrats such as <a href="https://x.com/SenFettermanPA/status/1786509165340357115" data-link-name="in body link">John Fetterman</a>.</p><p>In the UK, encryption is <a href="https://www.theverge.com/news/644367/apple-inc-v-the-uk-government" data-link-name="in body link">under siege</a>, a modern-day Promethean protection that angers the powerful, in the name of keeping society from runaway technology. Meanwhile, <a href="https://www.euronews.com/culture/2025/04/07/boris-johnson-criticises-plans-to-show-hit-netflix-show-adolescence-in-secondary-schools" data-link-name="in body link">Adolescence</a> is the latest dystopian Netflix show to shape public policy conversations about technology and the future.</p><p>Artificial intelligence has been touted as an <a href="https://futureoflife.org/open-letter/pause-giant-ai-experiments/" data-link-name="in body link">existential threat</a> to humanity while it accelerates <a href="https://www.washingtonpost.com/wellness/2025/04/07/ai-is-coming-skin-cancer-detection/" data-link-name="in body link">cancer treatments</a>, <a href="https://fortune.com/2024/03/27/1-in-3-americans-who-die-in-hospital-had-sepsis-and-thats-just-one-of-the-many-areas-where-ai-can-improve-early-diagnosis/" data-link-name="in body link">reduces</a> sepsis deaths and produces <a href="https://www.bbc.com/news/articles/clyz6e9edy3o" data-link-name="in body link">new antibiotics</a> to treat stubborn superbugs.</p><figure data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.NewsletterSignupBlockElement"><a data-ignore="global-link-styling" href="#EmailSignup-skip-link-12">skip past newsletter promotion</a><p id="EmailSignup-skip-link-12" tabindex="0" aria-label="after newsletter promotion" role="note">after newsletter promotion</p></figure><p>The folly of treating the miracles of science and technology as inevitable curses became unavoidable in the global coronavirus pandemic. The risk of inaction and stasis was too real to ignore, and the absence of technology became the threat. Tellingly, it was in this period – between 2020 and 2022 – that Black Mirror went on hiatus. Charlie Brooker <a href="https://www.cnet.com/culture/entertainment/black-mirror-creator-charlie-booker-not-working-on-black-mirror-because-life-is-black-mirror/" data-link-name="in body link">said</a> this was because people didn’t want to consume dystopian fiction when everything felt so bleak. In a moment when screens kept us connected, protected and employed, the reductiveness of dystopian science fiction felt silly. Biotechnology like GMOs and mRNA offered existential hope, rather than risk.</p><p>Suddenly, it became deeply uncool and unintellectual to fear technology – as 5G masts burned and Black Mirror-esque conspiracy theories of computer chips being injected through vaccines spread, dystopian fiction lost its allure, though its vestiges still lurked: Chipotle offered free burritos to the vaccinated, burritos it proudly markets as GMO-free. King Charles, who once <a href="https://www.theguardian.com/environment/2008/aug/13/prince.charles.gm.farming#:~:text=Prince%20Charles%20has%20warned%20that,environmentally%2C%20of%20all%20time%22." data-link-name="in body link">warned</a> that genetically modified organisms would cause the biggest environmental disaster of all time, would <a href="https://eu.usatoday.com/story/entertainment/celebrities/2020/11/23/vaccine-news-astrazeneca-oxford-earns-praise-prince-william/6389217002/" data-link-name="in body link">congratulate</a> Oxford researchers for their GMO-based Covid vaccine. Publications like Scientific American would deplore pandemic conspiracy theories, when less than a year earlier it would <a href="https://www.scientificamerican.com/blog/observations/we-have-no-reason-to-believe-5g-is-safe/" data-link-name="in body link">amplify</a> unfounded alarmism about 5G.</p><h2 id="new-parables">New parables</h2><p>A new progressivism, one that embraces construction over obstruction, of pragmatism over precaution, must find new allegories to think about technology and the future – stories that challenge a mindset the British prime minister, Keir Starmer, criticized for leading us to miss massive opportunities <a href="https://x.com/Keir_Starmer/status/1878811596182667578" data-link-name="in body link">“because of the fears of small risk”</a>.</p><p>We must move away from binary tales of catastrophe, not towards naive utopianism that ignores problems and risks that comes with change, but hopeful solutionism that reminds us we can solve and mitigate them – stories that don’t make us forget that brain chips can liberate paraplegics, robot dogs can <a href="https://foreignpolicy.com/2022/06/22/ukraine-bomb-quad-robotic-dog/" data-link-name="in body link">protect us</a> from landmines, AI can <a href="https://www.abc.net.au/news/2019-07-02/computer-invents-flu-vaccine-in-world-first/11271170" data-link-name="in body link">prevent </a>super bugs and VR can <a href="https://www.abc.net.au/news/2019-07-02/computer-invents-flu-vaccine-in-world-first/11271170" data-link-name="in body link">connect us</a> rather than cut us off from reality – even if their vibes are “a bit Black Mirror”.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[So, I Wrote a Book: The Story Behind “100 Go Mistakes and How to Avoid Them” (344 pts)]]></title>
            <link>https://www.thecoder.cafe/p/100-go-mistakes</link>
            <guid>43647880</guid>
            <pubDate>Thu, 10 Apr 2025 20:47:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thecoder.cafe/p/100-go-mistakes">https://www.thecoder.cafe/p/100-go-mistakes</a>, See on <a href="https://news.ycombinator.com/item?id=43647880">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><em>Hello! Today, I’m going to share the story of the process behind writing my book.</em></p><p><em><span>This post also marks the launch of </span><a href="https://www.thecoder.cafe/s/inner-brew" rel="">Inner Brew</a><span>, a new section where I will share more personal reflections and stories. If you’re not really into that and prefer only to receive the usual concept-focused posts you can turn off notifications (email or push) for this section </span><a href="https://www.thecoder.cafe/account" rel="">here</a><span> (Notifications → Disable “Inner Brew“).</span></em></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png" width="1456" height="728" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:728,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1189332,&quot;alt&quot;:&quot;So, I wrote a book: The Story Behind 100 Go Mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="So, I wrote a book: The Story Behind 100 Go Mistakes." title="So, I wrote a book: The Story Behind 100 Go Mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F04917f95-5ac4-4ea0-beed-d6a8d6c42b4b_1600x800.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p><span>My book, </span><em>100 Go Mistakes and How to Avoid Them</em><span>, was published in August 2022. But the story starts much earlier, back in 2018.</span></p><p><span>At this time, I was working in Switzerland, refactoring a C++ legacy codebase. Together with my colleague and friend </span><a href="https://www.linkedin.com/in/dchambon/" rel="">Damien Chambon</a><span>, we started evaluating Scala and </span><a href="https://akka.io/" rel="">Akka</a><span> (an actor model framework) for a potential rewrite. Why Scala and Akka, you may wonder? Well, back then I had mostly Java/JVM experience, and I was intrigued by the promises of the actor model.</span></p><p>But things were… definitely not simple. First off, it was a whole new language to learn. Second, Akka is a beast. It takes time to ramp up, and we even had to hire an external consultant to help with the implementation. After months of work, we finally had our first PoC. And yet, neither my colleague nor I were really convinced.</p><p>So, we started looking at another language to counterbalance Scala. Maybe this new one wasn’t the sexiest language ever invented, but it looks promising, efficient, and much easier to ramp up with: Go.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png" width="249" height="93.10434782608695" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:129,&quot;width&quot;:345,&quot;resizeWidth&quot;:249,&quot;bytes&quot;:7350,&quot;alt&quot;:&quot;Go logo.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Go logo." title="Go logo." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fd8a4ef-b1e0-4c68-a525-5d6b874dc670_345x129.png 1456w" sizes="100vw"></picture></div></a></figure></div><p><span>After just a couple of weeks in Go, we were able to cover the same scope as our Scala/Akka PoC. And for me, </span><strong>that was the beginning of a love story with the Go programming language</strong><span>.</span></p><p>A few months passed, and I moved to another company and another country: the UK. I was back working in a Java ecosystem since my Go experience was still too limited to land a proper job. Plus, given the international move, the company itself mattered more to me than the tech stack.</p><p>That experience turned out to be horrendous. It was full of politics, and I hated every aspect of my job. But in the evenings, I kept working on personal projects in Go. After just three months, I decided to stop the bleeding and move on to another company.</p><p>This time, I was determined to get a Go job. It was May 2019. I signed to a new company, and finally, I could develop in Go all day long.</p><p>After four months in this new company, I noticed that some of my colleagues were making the same mistakes I made when I was working in Switzerland.</p><p><span>So, I decided to write a blog post listing common mistakes in Go called </span><em><a href="https://itnext.io/the-top-10-most-common-mistakes-ive-seen-in-go-projects-4b79d4f6cd65" rel="">The Top 10 Most Common Mistakes I’ve Seen in Go Projects</a></em><span>.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png" width="598" height="168.43666666666667" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:338,&quot;width&quot;:1200,&quot;resizeWidth&quot;:598,&quot;bytes&quot;:65049,&quot;alt&quot;:&quot;Screenshot of the blog post titled “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” by Teiva Harsanyi, published on Medium.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of the blog post titled “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” by Teiva Harsanyi, published on Medium." title="Screenshot of the blog post titled “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” by Teiva Harsanyi, published on Medium." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25a5d38a-8a8d-45d6-8b98-bbd93bfa6afc_1200x338.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Let’s be honest: the title was way more ambitious than my actual experience. Reading it, you would expect someone with deep Go expertise, right? But the truth is, when I said “projects“, it meant:</p><ul><li><p>The PoC my colleague and I wrote in Go</p></li><li><p>The four months I had spent at my new company</p></li></ul><p>Nothing too crazy, really. I didn’t have big ambitions for the post, but I love writing, and I thought it might be interesting to share. So I published it on Medium.</p><p><span>Unexpectedly, the post became very popular: 4.7k claps, trending on </span><a href="https://www.reddit.com/r/golang" rel="">r/golang</a><span>, and even listed as one of the top articles of 2019 by </span><em><a href="https://golangweekly.com/" rel="">Golang Weekly</a></em><span>, the most well-known Go newsletter:</span></p><div><figure><a target="_blank" href="https://golangweekly.com/issues/293" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png" width="450" height="620.5078125" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1059,&quot;width&quot;:768,&quot;resizeWidth&quot;:450,&quot;bytes&quot;:199333,&quot;alt&quot;:&quot;Screenshot of Golang Weekly’s “Top Articles &amp; Tutorials of 2019,” featuring “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” as the first listed article.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://golangweekly.com/issues/293&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of Golang Weekly’s “Top Articles &amp; Tutorials of 2019,” featuring “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” as the first listed article." title="Screenshot of Golang Weekly’s “Top Articles &amp; Tutorials of 2019,” featuring “The Top 10 Most Common Mistakes I’ve Seen in Go Projects” as the first listed article." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8e22995f-c7a1-4b8c-bea4-7876ef583c1a_768x1059.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>At this point, I’m starting to believe that </span><strong>writing about mistakes seems to interest people</strong><span>. So my train of thought was: let’s keep collecting mistakes and see how it goes. Perhaps at some point, I could write a GitHub repo that would contain all my findings?</span></p><p>Fast forward to November 2020. It had been 16 months since I published my blog post, and by then, I had collected 100 mistakes in Go. During that time, I gathered mistakes from various sources, mainly:</p><ul><li><p>At work (to be honest, I was also a significant source of inspiration!)</p></li><li><p>In various studies and blog posts</p></li><li><p>In different open-source projects</p></li></ul><p>At this stage, I felt much more confident about my project. Sure, an open-source repository could be great, but I wondered: why not go for a book? Being someone who loves reading and writing, I had always dreamed of publishing my own.</p><p>I contacted only one publisher: Manning. Why Manning? Here’s what I wrote in my book:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png" width="964" height="139" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/bf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:139,&quot;width&quot;:964,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:106348,&quot;alt&quot;:&quot;Highlighted quote from the book explaining why the author contacted Manning as the sole publisher for 100 Go Mistakes, describing it as a top-level company known for high-quality books.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Highlighted quote from the book explaining why the author contacted Manning as the sole publisher for 100 Go Mistakes, describing it as a top-level company known for high-quality books." title="Highlighted quote from the book explaining why the author contacted Manning as the sole publisher for 100 Go Mistakes, describing it as a top-level company known for high-quality books." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbf74b74e-b15f-4e5b-a45c-5ccaff11b62d_964x139.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Do I see Manning as a high-quality publisher? Absolutely. Is that the only reason why I contacted only Manning? Maybe not.</p><p><span>Back then, to propose an idea to O’Reilly (not sure if it has changed since), you had to fill out a document containing hundreds and hundreds of pages! OK, maybe my memory is playing tricks on me, and it was just a dozen pages, but I remember thinking: “</span><em>This is too much effort.</em><span>“</span></p><p>Whereas with Manning? A simple email was enough:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png" width="1183" height="450" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:450,&quot;width&quot;:1183,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:91625,&quot;alt&quot;:&quot;Screenshot of the original email sent by the author to Manning, proposing the idea for 100 Go Mistakes and referencing the success of a prior blog post on Go mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of the original email sent by the author to Manning, proposing the idea for 100 Go Mistakes and referencing the success of a prior blog post on Go mistakes." title="Screenshot of the original email sent by the author to Manning, proposing the idea for 100 Go Mistakes and referencing the success of a prior blog post on Go mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe359edfb-d231-4ebb-afce-f5a6f99772b0_1183x450.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Something funny to highlight here. In this email, I was saying, “</span><em>I’m at 80%</em><span>” because for most of the mistakes, I already had some content written:</span></p><ul><li><p>The mistake itself</p></li><li><p>A surrounding example</p></li><li><p>And various solutions to fix the mistake</p></li></ul><p>So, in my head, the hardest part was already done.</p><p><strong>I haven’t been more wrong in my entire life.</strong></p><p>The next day, I got a reply from someone at Manning with the title of acquisition editor. If you’re not familiar with that role, an acquisition editor is someone who evaluates and signs new book projects for publication. Basically, a scout. Throughout my writing journey, he was my main contact at Manning, and as you will see, he helped me at a critical moment later in the process.</p><p>We had a first meeting to briefly discuss my idea, and Manning was on board to move to the next step: filling out a proposal. This proposal was a document with 21 questions to frame the project, including things like:</p><ul><li><p>Speaking about yourself</p></li><li><p>A summary of the book</p></li><li><p>Describing your target reader</p></li><li><p>A table of contents</p></li></ul><p><span>This document was then sent by Manning to external reviewers, all with Go experience, who wrote their own evaluations of the proposal. Funny enough, my mate </span><a href="https://x.com/val_deleplace" rel="">Valentin Deleplace</a><span>, who would become my colleague a few years later, was actually the first reviewer of the book.</span></p><p>As a potential author, I had access to all the reviews. And while it’s obviously essential for a publisher to judge the technical quality of a project, it was also super valuable for me. It helped me see whether the idea only sounded good in my own head or if it could actually be interesting to others, too.</p><p>I received a total of seven reviews, and all of them were positive. Some included constructive feedback on how to improve certain aspects (like the table of contents, for example), but the overall tone was fully supportive.</p><p><span>It was December 7, 2020, roughly two weeks after I sent my first email, and </span><strong>I received an offer from Manning</strong><span>:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png" width="1164" height="405" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:405,&quot;width&quot;:1164,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:289710,&quot;alt&quot;:&quot;Screenshot of the email from Manning offering the author a publishing contract for 100 Go Mistakes, outlining the review and editing process involved.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of the email from Manning offering the author a publishing contract for 100 Go Mistakes, outlining the review and editing process involved." title="Screenshot of the email from Manning offering the author a publishing contract for 100 Go Mistakes, outlining the review and editing process involved." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd5c4f7f8-39d2-4c7f-89c6-9c2639a32efd_1164x405.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Let’s talk about one of the aspects people ask about the most: my contract.</p><p><strong>In terms of royalties, I got paid 10% on all sales</strong><span>. On one hand, yes, that’s not a lot. Yet, you really have to understand how helpful a publisher can be for a first-time “author” with zero experience like I was back then, for two main reasons:</span></p><ul><li><p>First, and we will go over the process later, but the number of reviews from different people is insane. If I had written the book completely on my own, I can guarantee the quality would have been way lower.</p></li><li><p>Second, in terms of visibility, going with a publisher helps a lot, especially if, like me back then, you had around 400 followers on Twitter. Sure, content can still go viral without a big audience, but it’s a lot less likely.</p></li></ul><p>When I signed the contract, I also received an advance: $2,000 upfront, and $2,000 after delivering one-third of the book.</p><p>The contract also included deadlines:</p><ul><li><p>One-third of the book will be delivered by February 15, 2021</p></li><li><p>Two-thirds by April 15, 2021</p></li><li><p>A full draft of the complete manuscript by July 2021</p></li></ul><p>As the book was eventually published in August 2022, you can imagine I was slightly late. But when I spoke with people at Manning, they told me most technical books are late. We all know that in tech, we’re not great at planning. So why would it be any different when we start writing books? 🙂</p><p>Jokes aside, at that stage, I didn’t fully realize how much work was ahead of me, so July 2021 seemed doable.</p><p>At the very beginning, Manning asked me to think deeply about what they call the MQR: Minimum Qualified Reader. In a nutshell, what’s the minimum level of knowledge or experience someone needs to read your book?</p><p>That may sound like a basic question, but at that point, I hadn’t even considered it. Over the next few weeks, I refined my MQR to target someone who already knows the Go language. That meant about 15% of my content could go directly into the nearest trash can as it was just too basic.</p><p><span>Around the same time, </span><strong>I met the person who probably had the biggest impact on the book: my development editor (DE)</strong><span>.</span></p><p>A DE helps refine the structure, content, and flow of a manuscript to improve things like clarity, coherence, and how well ideas are conveyed. Note that a DE doesn’t need to be a technical person. Mine had some experience in computer science but absolutely none in Go, and that was perfectly fine. We don’t expect technical reviews from a DE but instead, a valuable contribution to the quality of the writing.</p><blockquote><p><strong>NOTE</strong><span>: </span><em><span>This was the person who taught me the key lessons I shared in </span><a href="https://www.thecoder.cafe/p/10-technical-writing-rules" rel="">10 Rules I Learned About Technical Writing</a></em><span>.</span></p></blockquote><p>I learned a ton from my DE. Like, really, a ton. Before that, I had been writing on various blogs for about a decade, but writing online is all about being direct because most people don’t have time. With a book, it’s different. People made a deliberate decision to buy your book. Now, it’s your job to bring them somewhere valuable. And if that takes time (meaning more words), so be it.</p><p><span>For example, here’s how I introduced one mistake in </span><em>The Top 10 Most Common Mistakes I’ve Seen in Go Projects</em><span> post:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png" width="599" height="406.56108597285066" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:600,&quot;width&quot;:884,&quot;resizeWidth&quot;:599,&quot;bytes&quot;:64935,&quot;alt&quot;:&quot;Screenshot of a short explanation introducing a common Go mistake involving goroutines and loop variables, with a simple code example that prints loop indices.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of a short explanation introducing a common Go mistake involving goroutines and loop variables, with a simple code example that prints loop indices." title="Screenshot of a short explanation introducing a common Go mistake involving goroutines and loop variables, with a simple code example that prints loop indices." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc6c1264e-f3e8-424f-b76b-c90c0a2824a3_884x600.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>28 words.</figcaption></figure></div><p>And here’s how I approached the same mistake in my book:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png" width="600" height="393.9130434782609" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b175975e-31be-4592-8d58-c41fdd47304f_1150x755.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:755,&quot;width&quot;:1150,&quot;resizeWidth&quot;:600,&quot;bytes&quot;:156513,&quot;alt&quot;:&quot;Excerpt from the book explaining a common Go mistake—using goroutines with loop variables—in a more elaborate way. Includes annotated code and a detailed description of why the output can be unpredictable.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Excerpt from the book explaining a common Go mistake—using goroutines with loop variables—in a more elaborate way. Includes annotated code and a detailed description of why the output can be unpredictable." title="Excerpt from the book explaining a common Go mistake—using goroutines with loop variables—in a more elaborate way. Includes annotated code and a detailed description of why the output can be unpredictable." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb175975e-31be-4592-8d58-c41fdd47304f_1150x755.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>120 words.</figcaption></figure></div><p>This isn’t about being verbose just to add pages to increase the book’s price. It’s about making sure the flow works well, that readers know where you’re going, and that they can follow you all the way. There’s a huge gap between writing a blog post and writing a book.</p><blockquote><p><strong>NOTE</strong><em>: In my newsletter, I try not to keep that gap too big. I feel like someone who deliberately shared their email is also making a clear statement: “I’m interested in your content”. I don’t take as much time as I do in the book, but I definitely take more than I did in my older blog posts.</em></p></blockquote><p>This is just one example, but my DE helped me massively. I absolutely loved every single bit of his feedback. To be honest, at the beginning of our collaboration, he had a lot of comments. Some things I picked up quickly, but others were much more difficult for me. Yet, over the next months, I will significantly improve my writing.</p><p>I wanted to talk a little bit about my mindset when I started writing the content of my book, chapter after chapter, mistake after mistake.</p><p><span>At this stage, my mindset was simple: </span><strong>I wanted to make the best Go book. Period.</strong></p><p><span>Let me clarify, though, just to make sure I don’t come across as someone full of ego, as there’s an important nuance here. I wasn’t thinking, “</span><em>My book is going to be the best.</em><span>” Instead, I was thinking, “</span><em>I will give everything I have to bring it to a level where it could be considered the best.</em><span>”</span></p><p>I already knew at that point that it would probably be my first and last book. So, if I was going to write one, I might as well give everything I had to make sure that what’s going to sit on my shelf for the rest of my life is something I will be proud of.</p><p><span>Also, having this mindset was a commitment to future readers: you bought my book, I don’t know if you’ll love it, </span><strong>but I promise it’s the best version I could have made</strong><span>.</span></p><p><span>1P stands for </span><em>first part</em><span>. Basically, the process that starts once one-third of the book is written and accepted by the DE (which happened for me after a lot of back and forth to be honest).</span></p><p>For each third of the book (1P, 2P, and then 3P), the process is similar: the manuscript is sent to external reviewers who can leave comments directly on your text but also fill out a detailed document with questions like:</p><ul><li><p>Is the writing interesting? Does it hold your attention?</p></li><li><p>Are the examples good and applicable in the real world? Are there enough of them?</p></li><li><p>What do you think of the overall concept of the book and the approach toward the</p><p>intended audience?</p></li></ul><p>This document is very thorough. These reviews are invaluable for an author. While you can be confident that the writing itself is fairly solid thanks to the work you were doing with your DE, from a technical standpoint, this is really the first time your content is being confronted by other technical people.</p><p><span>We got the results for 1P in April 2021. In total, I received 13 reviews, with </span><strong>an average star rating of 4.10 out of 5</strong><span>. Not a fantastic score, but at that point, it was OK. I wasn’t too disappointed.</span></p><p>Of course, some of the feedback you receive as an author can hurt:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png" width="1216" height="208" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:208,&quot;width&quot;:1216,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:39244,&quot;alt&quot;:&quot;Excerpt of reviewer feedback highlighting a concern that some statements in the manuscript lack sufficient background or justification to confidently earn a 5-star rating.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Excerpt of reviewer feedback highlighting a concern that some statements in the manuscript lack sufficient background or justification to confidently earn a 5-star rating." title="Excerpt of reviewer feedback highlighting a concern that some statements in the manuscript lack sufficient background or justification to confidently earn a 5-star rating." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48813f57-6567-48a6-8fea-16b59cbf999a_1216x208.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>But if it hurts, it probably means there’s some truth behind it. You have to accept it and improve your book.</p><p><span>During that period, Manning offered to connect me with another author, </span><a href="https://www.ardanlabs.com/instructors/bill-kennedy/" rel="">Bill Kennedy</a><span>, who also wrote a book with them called </span><em><a href="https://www.manning.com/books/go-in-action" rel="">Go in Action</a></em><span>. Beyond the fact that I have immense respect for him (he’s one of the people who contributes the most to the Go ecosystem), Bill taught me something crucial:</span></p><p>If you get one comment, you must address it, even if it doesn’t seem important to you. If one person raised it, imagine when thousands of people read your book.</p><p>That was golden advice. Thanks to Bill, I gave my best to address (almost) every single comment, from changing a single word to fully rewriting how a mistake was explained.</p><p>It’s time to talk about my first hiccup with Manning (there will be two).</p><p>I already explained how crucial my development editor (DE) was in the process. However, I was also supposed to be accompanied by another person: a technical development editor (TDE).</p><p>While external reviewers only come in at each third of the book, the TDE is supposed to work more closely with the author throughout the entire process, helping shape the content, the overall structure, how chapters are divided, and so on.</p><p>This isn’t a personal criticism, but my TDE simply wasn’t an MQR. This means he didn’t have the basic Go knowledge expected from someone reading the book. Of course, I wasn’t expecting the world’s top Go expert as a TDE, but I did expect someone who at least matched the Minimum Qualified Reader profile, a concept introduced by Manning themselves. That felt like the bare minimum.</p><p>I raised this issue with Manning after 1P, but unfortunately, they didn’t really listen and kept the same TDE on the project. I was a bit annoyed, to be honest, but I had to move on.</p><p>Until 1P, the book is in a kind of trial phase, meaning that either Manning or the author can still decide to stop the collaboration. Apparently, a certain percentage of books fail at 1P when Manning realizes that external reviewers aren’t convinced by how the initial idea is being executed.</p><p><span>After 1P, Manning launches their </span><em>Manning Early Access Program</em><span> (MEAP), which allows people to buy the book and access it while it’s still being written. For the author, it becomes an additional source of feedback, as readers can leave comments on an online platform.</span></p><p><span>When we say people can start buying your book, </span><strong>it also means a shift for Manning: it’s time to sell it.</strong></p><p>That brings a few new responsibilities, like keeping the content regularly updated for those who already paid, writing a welcome letter for MEAP readers, and starting to work with the marketing team on how to promote the book and raise awareness about it.</p><p>On that last point, Manning asked me several times during this period to promote the book at public events (meetups, conferences, etc.), but I always declined. Writing was already taking up so much time and energy that I didn’t feel like adding one more thing to my plate by preparing talks.</p><p><span>The only “promotion” I did during that time was joining a podcast since it required less preparation. I was invited to </span><em><a href="https://open.spotify.com/show/2cKdcxETn7jDp7uJCwqmSE" rel="">Go Time</a></em><span>, which was a weekly podcast about Go and the most popular one in the community (unfortunately, it stopped).</span></p><p><span>The episode I appeared in, titled sarcastically </span><em><a href="https://changelog.com/gotime/190" rel="">How to make mistakes in Go</a></em><span>, was </span><a href="https://x.com/GoTimeFM/status/1475953635569848321" rel="">really well received</a><span>. That was another interesting signal that writing about mistakes was a compelling angle.</span></p><p>During that period, it was time to choose a book cover. Manning has a (very) special way of illustrating their books, all based on drawings from Jacques Grasset de Saint-Sauveur, an 18th-century illustrator.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png" width="600" height="230.14354066985646" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:481,&quot;width&quot;:1254,&quot;resizeWidth&quot;:600,&quot;bytes&quot;:127723,&quot;alt&quot;:&quot;Excerpt explaining the historical background of the book’s cover illustration, sourced from an 18th-century collection by Jacques Grasset de Saint-Sauveur.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Excerpt explaining the historical background of the book’s cover illustration, sourced from an 18th-century collection by Jacques Grasset de Saint-Sauveur." title="Excerpt explaining the historical background of the book’s cover illustration, sourced from an 18th-century collection by Jacques Grasset de Saint-Sauveur." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8346ead0-841a-4e09-bc5a-1eb2bc115117_1254x481.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>At first, I received a few illustration options, including this one:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png" width="351" height="489.6943734015345" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b86937aa-a795-44da-af9d-096e315538e8_782x1091.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1091,&quot;width&quot;:782,&quot;resizeWidth&quot;:351,&quot;bytes&quot;:1172359,&quot;alt&quot;:&quot;18th-century illustration from Jacques Grasset de Saint-Sauveur showing a person in traditional dress, proposed as a potential book cover for 100 Go Mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="18th-century illustration from Jacques Grasset de Saint-Sauveur showing a person in traditional dress, proposed as a potential book cover for 100 Go Mistakes." title="18th-century illustration from Jacques Grasset de Saint-Sauveur showing a person in traditional dress, proposed as a potential book cover for 100 Go Mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb86937aa-a795-44da-af9d-096e315538e8_782x1091.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>In a very delicate and constructive manner, I decided to share my opinion:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png" width="401" height="192.95643564356436" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/f482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:243,&quot;width&quot;:505,&quot;resizeWidth&quot;:401,&quot;bytes&quot;:249268,&quot;alt&quot;:&quot;Screenshot of an email from Teiva Harsanyi expressing honest feedback on illustration options, stating: \&quot;I find those quite ugly.\&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of an email from Teiva Harsanyi expressing honest feedback on illustration options, stating: &quot;I find those quite ugly.&quot;" title="Screenshot of an email from Teiva Harsanyi expressing honest feedback on illustration options, stating: &quot;I find those quite ugly.&quot;" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff482db13-717f-4514-afe2-7ee772e5ed8c_505x243.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The truth is, while I usually enjoy Manning books, I find all their covers pretty bad. Compared to other publishers like </span><a href="https://nostarch.com/" rel="">No Starch Press</a><span>, I definitely prefer what others are doing.</span></p><p><span>I remember having a hard time explaining to my family that my programming book would have </span><em>this</em><span> on the cover:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png" width="350" height="489.1073326248672" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/d814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1315,&quot;width&quot;:941,&quot;resizeWidth&quot;:350,&quot;bytes&quot;:2223270,&quot;alt&quot;:&quot;Illustration from an old book showing a traditionally dressed woman, used as the final cover image for 100 Go Mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Illustration from an old book showing a traditionally dressed woman, used as the final cover image for 100 Go Mistakes." title="Illustration from an old book showing a traditionally dressed woman, used as the final cover image for 100 Go Mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fd814a7e6-6c51-40d7-8491-3024f2a58bb1_941x1315.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>But hey, it is what it is. I guess it contributes to a certain visual identity for Manning. And in the end, if we take a step back, the cover really isn’t </span><em>that</em><span> important… right?</span></p><p>We’re in August 2021, four months after 1P, and it’s now time for 2P. In retrospect, having only four months to complete the second third of the book was a brutal pace. Looking at some old emails with my DE, it’s clear that this period was particularly exhausting for me:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png" width="1155" height="266" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:266,&quot;width&quot;:1155,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:474774,&quot;alt&quot;:&quot;Screenshot of an email from the author to his Development Editor expressing exhaustion while working on chapter 8 of the book.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of an email from the author to his Development Editor expressing exhaustion while working on chapter 8 of the book." title="Screenshot of an email from the author to his Development Editor expressing exhaustion while working on chapter 8 of the book." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc1e2906f-a4a0-44ab-b3a4-ece8411198b8_1155x266.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Anyway, it’s 2P, and this time I received 13 reviews with </span><strong>an average rating of 4.15</strong><span>. So I went from 4.10 to 4.15, and honestly, at that point, I was starting to feel a bit disappointed.</span></p><p><span>I’m a regular user of </span><a href="https://goodreads.com/" rel="">Goodreads</a><span>. On that platform, books are also rated out of 5 stars; in my mind, a “great” book starts at 4.5 and up. Why 4.5? No idea. But that was definitely my goal.</span></p><p><span>4.15 isn’t bad, but it’s still far from 4.5. So yes, I was disappointed but not dejected. Once again, I went through all the reviews, and </span><strong>I just kept improving the book over and over</strong><span>.</span></p><p><span>To give you a sense of what I mean by improving the book “</span><em>over and over</em><span>“, keep in mind that between feedback from my DE, external reviewers, and others, there are parts of the book that I rewrote more than ten times. I don’t know if that’s common, to be honest. Maybe it’s because I was terrible at the beginning. Maybe it’s because I’m literally obsessed with details. Or maybe it’s both.</span></p><p><span>From 2P to 3P is almost a blackout for me. This time, the period lasted five months, during which </span><strong>I wrote the last third of the book and completely rewrote the first few chapters</strong><span>. Indeed, once I reached the end of the book, I reread the first part and thought: </span><em>“This is awful; I can’t publish that.”</em></p><p>That’s more proof that going through the long, demanding process of writing a book really did improve my writing skills. Some parts that felt fine in the beginning ended up being terrible once I had more experience.</p><p>From those five months, I only clearly remember one week of "holiday" that I spent working on my book. And by week, I don’t mean a peaceful 40-hour work week. I mean waking up at 3 p.m., working 14 to 15 hours straight, and going to bed around 8 a.m.</p><p><span>Funny enough, I didn’t hate that week. In my mind, it was </span><em>my</em><span> author week. If I had crossed a stranger on the street and they had asked what I did for a living, I would’ve proudly said: “</span><em>I’m an author!</em><span>”</span></p><p>Unfortunately, I didn’t speak to anyone that week. Except my janitor.</p><p>But during that week, I made a lot of progress. I managed to write the first draft of the last chapter. I’m sharing this to give you an idea of the pace. The book had 12 chapters, and the one that went the fastest still took me about 100 hours to write. You can imagine how long the rest took. And that’s not even counting the endless rewrites after all the feedback from my DE and the reviewers.</p><p><span>During that period, I also worked on my inside cover. I’m a big fan of </span><em>Designing Data-Intensive Applications</em><span> by </span></p><p><span>. His book is full of beautiful visual maps like this one:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png" width="600" height="457.09779179810727" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:966,&quot;width&quot;:1268,&quot;resizeWidth&quot;:600,&quot;bytes&quot;:734227,&quot;alt&quot;:&quot;A hand-drawn fantasy-style map from Designing Data-Intensive Applications, depicting various regions metaphorically named after data concepts like \&quot;Hadoop Region\&quot;, \&quot;Log-Structured Storage\&quot;, and \&quot;Kingdom of Analytics\&quot;.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="A hand-drawn fantasy-style map from Designing Data-Intensive Applications, depicting various regions metaphorically named after data concepts like &quot;Hadoop Region&quot;, &quot;Log-Structured Storage&quot;, and &quot;Kingdom of Analytics&quot;." title="A hand-drawn fantasy-style map from Designing Data-Intensive Applications, depicting various regions metaphorically named after data concepts like &quot;Hadoop Region&quot;, &quot;Log-Structured Storage&quot;, and &quot;Kingdom of Analytics&quot;." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F040a97dd-2acb-437b-9695-f628db317e6e_1268x966.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>I wanted a similar vibe, so I created this:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png" width="600" height="549.3131868131868" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1333,&quot;width&quot;:1456,&quot;resizeWidth&quot;:600,&quot;bytes&quot;:3715838,&quot;alt&quot;:&quot;A fantasy-style illustrated map titled 100 Go Mistakes and How to Avoid Them, with labeled regions like “Concurrency,” “Functions &amp; Methods,” “Testing,” and “Data Types,” representing different Go programming topics in a whimsical, visual way.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="A fantasy-style illustrated map titled 100 Go Mistakes and How to Avoid Them, with labeled regions like “Concurrency,” “Functions &amp; Methods,” “Testing,” and “Data Types,” representing different Go programming topics in a whimsical, visual way." title="A fantasy-style illustrated map titled 100 Go Mistakes and How to Avoid Them, with labeled regions like “Concurrency,” “Functions &amp; Methods,” “Testing,” and “Data Types,” representing different Go programming topics in a whimsical, visual way." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7d11f9a6-15b7-47c4-a60b-ae46cd3038a1_1616x1479.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The map is full of tiny easter eggs. For example, </span><em><a href="https://www.ardanlabs.com/instructors/bill-kennedy/" rel="">Kennedy</a><span> Sea</span></em><span>, </span><em><a href="https://swtch.com/~rsc/" rel="">Cox</a><span> River</span></em><span>, </span><em><a href="https://dave.cheney.net/" rel="">Cheney</a><span> Ocean</span></em><span>, </span><em><span>Mount </span><a href="https://github.com/rakyll" rel="">Dogan</a></em><span>, or even </span><em><a href="https://medium.com/@val_deleplace" rel="">Deleplace</a><span> Tower</span></em><span>. It was my way of giving a nod to the people in the Go community who helped me the most through their content.</span></p><p>So, it’s January 2022, and we finally receive the results from 3P.</p><p><span>In total, I got 15 reviews and </span><strong>an average rating of… 4.6/5</strong><span>. Nice! 😊</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png" width="1160" height="267" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/af9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:267,&quot;width&quot;:1160,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:463085,&quot;alt&quot;:&quot;Email screenshot showing the author celebrating the 3P review phase of the book with a 4.6/5 rating, having reached his secret goal of surpassing a 4.5 average rating.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Email screenshot showing the author celebrating the 3P review phase of the book with a 4.6/5 rating, having reached his secret goal of surpassing a 4.5 average rating." title="Email screenshot showing the author celebrating the 3P review phase of the book with a 4.6/5 rating, having reached his secret goal of surpassing a 4.5 average rating." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faf9bc554-924f-4aec-bc4e-62437b9ab035_1160x267.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>And speaking of good news, around the same time, Manning finally decided to switch my TDE to someone else, </span><a href="https://x.com/tjvdeurzen" rel="">Tim van Deurzen</a><span>. If you want a simple anecdote to understand Tim’s importance was for this book: during 3P, I received feedback from 15 reviewers. Yet I think Tim’s single review was possibly as valuable as all the others combined. The guy is an absolute rockstar; my book wouldn’t have been the same without him. Thanks again, Tim. 🙇‍♂️</span></p><p>One more month of work to take all the reviews into account, and…</p><p>We’re at the end of February 2022, and the book officially moves from the development stage to production. At this stage, only a few steps remain, and they are mostly handled by the publisher:</p><ul><li><p>Copyediting to refine grammar, style, and consistency</p></li><li><p>Proofreading to catch spelling, punctuation, and formatting errors</p></li><li><p>Typesetting to arrange the text, code, and images for publication</p></li><li><p>Indexing to compile a list of key terms and topics with page references</p></li></ul><p>One thing to note: from an author’s standpoint, the book is more or less complete at this stage. You can still add minor things, but the publisher wants to lock in a first version. That’s because adding even a single new paragraph means going through the process again for that section. That’s why publishers insist on fixing the version.</p><p>Reaching that point is a big milestone. To express what I felt at the time, there’s a great quote by Gene Fowler:</p><p>A book is never finished; it's abandoned.</p><p><span>Real question: how can you say a book is finished? For example, I could have improved a figure here, tweaked an example there, rephrased a sentence, or refined a conclusion. But that loop could have lasted forever. At some point, you just have to consider this version final, move to the next stage, and, in a way, </span><strong>abandon your book</strong><span>.</span></p><p>It’s a tough feeling, but that’s how it goes.</p><p><span>That being said, finishing a book calls for a celebration. I remember having a drink one evening with my girlfriend, and we toasted to “</span><em>the end of the book.</em><span>” 🥂</span></p><p>Once again, I was way too naive.</p><p>It’s now time to talk about my second hiccup with Manning, but this time, it was way more serious.</p><p>We started the copyediting process, which is meant to refine grammar, style, and consistency. I don’t know about you, but I imagined the author’s involvement at this stage would be pretty lightweight, right? Absolutely not. At least, not for my book.</p><p><strong>First, the review process was an exercise in frustration and inefficiency.</strong></p><p><span>During the development phase, I wrote everything in </span><a href="https://asciidoc.org/" rel="">AsciiDoc</a><span>, generated content, and got feedback either as PDF comments from the DE or through the Manning website from reviewers.</span></p><p>But copyediting was different. The copyeditor was directly editing my content and leaving questions in the source itself.</p><p>To clarify, my content was stored in a Git repository. Instead of going through a classic pull request (PR) workflow, the copyeditor was directly modifying the source files and adding comments on top of that.</p><p>For example, here is my original sentence:</p><pre><code>Throughout this section we also used an example with errors because ...</code></pre><p>And here’s what it looked like after her changes:</p><pre><code>// AQ: please clarify leading to this error. Which error?
In this section, we used an example with errors because ...</code></pre><p>So she was:</p><ul><li><p>Modifying the content directly</p></li><li><p>Adding comments in the source code itself (🤯)</p></li></ul><p>I tried to explain how review workflows work in a PR-based setup, and gave concrete suggestions for how we could improve the process. But they didn’t want to try it. That might sound like a small thing, but at that stage, all I wanted was a smooth and efficient collaboration process. The easier it was for me to track changes, the better.</p><p>But if that were the only problem, it would have been fine. Unfortunately, it was way more than that.</p><p><span>To put it simply, </span><strong>my experience with the copyeditor was catastrophic</strong><span>. She completely wrecked the content and introduced countless typos and mistakes.</span></p><p>For example, many of the issues came from her confusing the programming language Go with the verb to go. That led to many sentences that made absolutely no sense anymore.</p><p>Let me be clear: it’s totally fine if a copyeditor introduces a few mistakes. It’s supposed to be a collaborative process: they adapt the content, we go back and forth, and we improve it together.</p><p>But in this case, the number of mistakes was absurd. In just one chapter, she introduced 23 errors. I don’t mean things that could be improved; I mean factual errors. Now multiply that by 12 chapters.</p><p><span>And it wasn’t just about errors. When I asked questions like, “</span><em>Why did you remove this sentence? I think it’s an important transition, and we should keep it</em><span>”, she would sometimes just delete my comment. Such a great collaboration, right?</span></p><p>Eventually, when I raised more and more concerns, what was her response?</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png" width="725.1500244140625" height="194.36206251787036" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;normal&quot;,&quot;height&quot;:249,&quot;width&quot;:929,&quot;resizeWidth&quot;:725.1500244140625,&quot;bytes&quot;:487151,&quot;alt&quot;:&quot;Screenshot of an email from the copyeditor stating \&quot;Chapters 1–5 are ready for indexing,\&quot; sent without the author's approval after major issues were raised.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of an email from the copyeditor stating &quot;Chapters 1–5 are ready for indexing,&quot; sent without the author's approval after major issues were raised." title="Screenshot of an email from the copyeditor stating &quot;Chapters 1–5 are ready for indexing,&quot; sent without the author's approval after major issues were raised." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffb8075a8-e04a-4965-9cdb-60adbf7e783b_929x249.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>She basically said chapters 1 to 5 were ready to move to the next phase without even letting me fix the mistakes she introduced.</p><p>Let me try to put you in my shoes so you understand how I felt.</p><p><span>You’ve spent 15 months writing your book. You’ve done countless iterations to carefully improve every single one of the 100 mistakes. You’ve spent more hours than you can count. You’ve carefully processed hundreds, if not thousands, of pieces of feedback. You even took dedicated holidays just to make progress on it. And then, all of a sudden, someone jumps into your book, completely butchers it, and says, “</span><em>These chapters are ready!</em><span>”</span></p><p><strong>How would you feel?</strong></p><p>Well, that’s exactly how I felt. And to be honest, it was too much for me. I wrote an escalation email (which I won’t share here as it was way too salty) explaining that until this was resolved (meaning she had to leave), I would stop working on my own book.</p><p>To be fair to Manning, the situation was handled fairly quickly. Especially by one person: my acquisition editor (the scout). I really think that he saved the book. Because at that point, I swear that I was ready to give up everything.</p><p>In March 2022, the copyeditor stopped working on my book (she was external to Manning), and I was assigned someone new. That change was a huge relief.</p><p>Unfortunately, it meant going through everything again. I had to fix myself every single error she had introduced in the first five chapters, which delayed the book and cost me way more time and energy than I had anticipated.</p><p>Finally, at the end of July 2022, after six months of work after I thought the book was "finished", we reached the end. And this time, for real.</p><p><span>Did I try to celebrate again with my girlfriend? Yes. What did she reply? “</span><em>I can’t trust you anymore with your book.</em><span>”</span></p><p>A few months later, I received a box in the mail. I opened it, and inside were copies of my own book, sent by Manning. As you can imagine, I must have felt a mix of pride and extreme happiness, right? Nope.</p><p><span>I just couldn’t feel anything. I remember holding my own book in my hands and thinking, “</span><em>What’s wrong with me? Why can’t I just be happy?</em><span>”</span></p><p><span>This feeling isn’t that uncommon and is often referred to as </span><strong>post-publication depression</strong><span>.</span></p><p>It’s incredibly hard to put words to what I was feeling. It was around August 2022 and I had started working on the content back in July 2019. That’s almost three years of work. It had been such an intense period, and suddenly it was over.</p><p><span>It wasn’t really sadness. </span><strong>Just… emptiness, I would say.</strong></p><p>Over the following months, I slowly started to recover and eventually became very positive about the whole experience. But that moment really changed the way I look at other people’s work.</p><p>When we evaluate something, a coding project, a book, or an illustration, we often forget how much time, energy, and emotion someone may have poured into it. We have no idea what that work cost them.</p><p>So, the book is released, and everyone can buy it. Time for promotion!</p><p><span>I started with one </span><a href="https://www.reddit.com/r/golang/comments/wwci1c/100_go_mistakes_released/" rel="">Reddit post</a><span> of 175 words, followed by a </span><a href="https://x.com/teivah/status/1562333506105114624" rel="">tweet</a><span> of 49 words:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png" width="550" height="197.19358533791524" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/033238b5-e992-44ae-86e5-3057d41a963b_873x313.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:313,&quot;width&quot;:873,&quot;resizeWidth&quot;:550,&quot;bytes&quot;:79463,&quot;alt&quot;:&quot;Screenshot of a tweet announcing the release of the book \&quot;100 Go Mistakes and How to Avoid Them,\&quot; expressing gratitude to Manning Books and all involved.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of a tweet announcing the release of the book &quot;100 Go Mistakes and How to Avoid Them,&quot; expressing gratitude to Manning Books and all involved." title="Screenshot of a tweet announcing the release of the book &quot;100 Go Mistakes and How to Avoid Them,&quot; expressing gratitude to Manning Books and all involved." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F033238b5-e992-44ae-86e5-3057d41a963b_873x313.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>In total, writing these 224 words took me around 10 minutes. And after that? </span><strong>Nothing for more than a year.</strong></p><p>There were two main reasons.</p><p>First, I was mentally exhausted. Especially after the painful six-month process where I thought my book was finished, but it wasn’t; I just had no energy left. I kept declining Manning’s requests to promote the book at conferences, meetups, YouTube videos, Twitch streams, and so on.</p><p><span>Second, I developed this belief: if my book was good, people would talk about it and share it. I don’t know if I was being delusional, lucky, or a mix of both, but it turns out I was right. The number of people who kept commenting on the book across </span><a href="https://www.reddit.com/r/golang/search/?q=%22100+go+mistakes%22&amp;type=comments&amp;sort=new&amp;cId=a764214d-3cf1-4a80-be1c-41dc991dac42&amp;iId=744f1a2c-3d94-4ace-a3ca-b8c5a759705e" rel="">Reddit</a><span>, </span><a href="https://x.com/search?q=%22100%20go%20mistakes%22&amp;src=typed_query&amp;f=live" rel="">X</a><span>, YouTube, and other platforms was absolutely sensational for me.</span></p><div id="youtube2-a-lYYYr-5a8" data-attrs="{&quot;videoId&quot;:&quot;a-lYYYr-5a8&quot;,&quot;startTime&quot;:null,&quot;endTime&quot;:null}" data-component-name="Youtube2ToDOM"><p><iframe src="https://www.youtube-nocookie.com/embed/a-lYYYr-5a8?rel=0&amp;autoplay=0&amp;showinfo=0&amp;enablejsapi=0" frameborder="0" loading="lazy" gesture="media" allow="autoplay; fullscreen" allowautoplay="true" allowfullscreen="true" width="728" height="409"></iframe></p></div><p><span>One important thing to clarify. This wasn’t about being overconfident or full of ego, like, “</span><em>Yeah, my content is so good, of course people will talk about it!</em><span>”</span></p><p><span>It was more like, “</span><em>If my book is worth sharing, people will share it. If not, then should I really bother promoting something people don’t even enjoy?</em><span>”</span></p><p>Of course, it would’ve broken my heart if people said the content was terrible. But still, that was really my mindset during that year, and honestly, it hasn’t changed much since then.</p><p><span>A year later, in September 2023, with the help of </span><a href="https://github.com/teivah/100-go-mistakes/graphs/contributors" rel="">people</a><span> from the Go community, I released </span><a href="https://100go.co/" rel="">100go.co</a><span>, which contains a summary of all the mistakes in the book:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png" width="500" height="716.1949685534591" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/b8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:911,&quot;width&quot;:636,&quot;resizeWidth&quot;:500,&quot;bytes&quot;:146802,&quot;alt&quot;:&quot;Screenshot of 100go.co displaying some summarized Go mistakes.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10a82403-e4b5-4354-a318-cf67551135cd_636x1183.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Screenshot of 100go.co displaying some summarized Go mistakes." title="Screenshot of 100go.co displaying some summarized Go mistakes." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb8008ff6-1bc9-4e26-acf4-9e5968703e8a_636x911.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>That website was kind of a way to </span><strong>close the loop on my initial wish to create open-source content</strong><span>. People who can’t or just don’t want to buy the book can still visit </span><a href="https://100go.co/" rel="">100go.co</a><span> and access a significant part of the content for free. The traffic ended up being quite strong for such a specialized website: 150k views in 2024.</span></p><p><span>I discussed </span><a href="https://100go.co/" rel="">100go.co</a><span> with Manning, and they said it was a “</span><em>brilliant idea</em><span>”. They even offered me a paid role to help other authors promote their content.</span></p><p>In all honesty, I think they overestimate my sales skills. I haven’t done a lot in that area. For example, last year, I gave a talk at a public conference, and I didn’t even mention that I had written a book. Not because I hate promotion. Well, I do, but that wasn’t the main reason. The real reason was that mentioning my book wouldn’t have improved this talk in any way. So I just didn’t say anything.</p><p>What about Manning’s offer to help other authors? I didn’t take it.</p><p>If it were up to me, people would still have the option to buy my book physically, but the whole content would be available online for free, with no login required.</p><p><span>I’ve considered talking to Manning about that. We will see if they still believe I have “</span><em>brilliant</em><span>” ideas. 😅</span></p><p>At the end of 2022, Manning informed me they had secured licensing deals for four translations. For each of them, I received a fixed payment along with royalties. For example, I earned $4,000 and 6% royalties for the Japanese translation.</p><p><span>As of the end of September 2024, </span><strong>the English version had sold 10,494 copies</strong><span>. I don’t have the sales figures for the translations, but someone at Manning told me that usually, the combined sales of all translated versions may match the English copies sold.</span></p><blockquote><p><strong>NOTE</strong><span>: My book also started a new Manning </span><a href="https://www.google.com/search?q=site%3Amanning.com+%22100%22+%22mistakes+and+how+to+avoid+them" rel="">series</a><span> called </span><em>100 … Mistakes and How to Avoid Them</em><span>, with editions in Java, C++, and SQL Server, for instance.</span></p></blockquote><p><span>To this day, </span><strong>I’ve earned around $47,000 from the book</strong><span> (before taxes). If I consider the time spent, using a conservative lower bound of 2,000 hours, that comes out to about $23 per hour.</span></p><p>There are two ways to look at that hourly rate.</p><p>One could say it’s pretty low compared to what a software engineer could earn. I could have invested 2,000 hours into some paid technical work and probably made a lot more.</p><p><span>The other way to approach it is not to care too much about it. Sure, the money I earned isn’t negligible (it paid for quite a few holidays, to be honest), but my main message is this: </span><strong>if you’re a new author, don’t think about writing your book to become rich</strong><span>.</span></p><p>I’m sure there are well-known authors like Robert Martin who can make significant income from pretty much any book they release. But for the rest of us, the “normal” authors, we can’t and shouldn’t aim to get rich, especially from a single book.</p><p>For me, the money I earned from this book was never the goal. I’m happy with it, of course, but that’s not where my main motivation was.</p><p>It was somewhere else.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_2400,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png" width="1200" height="600.8241758241758" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:false,&quot;imageSize&quot;:&quot;large&quot;,&quot;height&quot;:729,&quot;width&quot;:1456,&quot;resizeWidth&quot;:1200,&quot;bytes&quot;:2900993,&quot;alt&quot;:&quot;A lot of messages saying things like: thank you for your book.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="A lot of messages saying things like: thank you for your book." title="A lot of messages saying things like: thank you for your book." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F219ae5e9-b5e1-47c2-8b39-70fe14eab405_3204x1604.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>So, did I reach my secret goal of getting a rating over 4.5? Yes, I did!</p><div><figure><a target="_blank" href="http://goodreads.com/book/show/58571862-100-go-mistakes-and-how-to-avoid-them" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png" width="500" height="204.54545454545453" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:333,&quot;width&quot;:814,&quot;resizeWidth&quot;:500,&quot;bytes&quot;:48359,&quot;alt&quot;:&quot;Goodreads listing for 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi, showing a 4.66-star rating based on 198 ratings and 36 reviews.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;http://goodreads.com/book/show/58571862-100-go-mistakes-and-how-to-avoid-them&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="Goodreads listing for 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi, showing a 4.66-star rating based on 198 ratings and 36 reviews." title="Goodreads listing for 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi, showing a 4.66-star rating based on 198 ratings and 36 reviews." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F70b5608f-b3f7-41b8-a30c-207caf1b0569_814x333.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>Did I write the best Go book? Probably not. There are many great books out there and to me, a book like </span><em><a href="https://www.goodreads.com/book/show/58655212-ultimate-go-notebook" rel="">Ultimate Go Notebook</a></em><span> is the best one, in my opinion.</span></p><p>But in the end, do I really care if my book is the best or not? Not really.</p><p>The goal of writing the “best Go book” was just a personal motivation, something to push me to do the best I could at that specific time in my life. The book is not perfect, but it’s the best version I could have written then.</p><p>And for that, I will always be proud of it.</p><p>Teiva</p><p><strong>P.S.</strong><span> I don’t know about Go rankings but at least my book was listed among the </span><em><a href="https://www.linkedin.com/pulse/best-8-javascript-books-developers-2024-muhammad-fahad-bhutta-hja8f/" rel="">Best 8 JavaScript Books for Developers in 2024</a></em><span>. Being a Go book that’s an achievement, isn’t it?</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg" width="1456" height="1092" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1092,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:5540661,&quot;alt&quot;:&quot;A hand showing a thumbs-up next to the book 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/jpeg&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/160360907?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="A hand showing a thumbs-up next to the book 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi." title="A hand showing a thumbs-up next to the book 100 Go Mistakes and How to Avoid Them by Teiva Harsanyi." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9d740d21-17b1-4bc1-9c77-c84676431c55_5712x4284.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Yes, I still think the cover is ugly.</figcaption></figure></div><p>Thanks to:</p><ul><li><p>The Go community. If I fell in love with this language, it’s also because most people there are very supportive.</p></li><li><p>All the readers of the book.</p></li><li><p>All the reviewers and Tim, who helped me shape something far better than I could have done on my own.</p></li><li><p>My DE and my acquisition editor who were the two pillars of this book.</p></li><li><p>Manning. I don’t know how you will perceive my story, but in the end, I’m really grateful to Manning, and I’m glad they were the only publisher I had ever contacted.</p></li><li><p><span>The readers of </span><em>The Coder Cafe</em><span>. After a long period where I couldn’t write anything at all, this newsletter reminded me how much I love writing.</span></p></li></ul><p><span>💬 </span><em>Manning recently contacted me about doing a second edition. I’m thinking about it and would love to hear what you think.</em></p><p><span>❤️ </span><em>If you made it this far and enjoyed the post, please consider giving it a like.</em></p><div><figure><a target="_blank" href="https://www.thecoder.cafe/" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png" width="450" height="225" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:600,&quot;width&quot;:1200,&quot;resizeWidth&quot;:450,&quot;bytes&quot;:85525,&quot;alt&quot;:&quot;The Coder Cafe logo.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:&quot;https://www.thecoder.cafe&quot;,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://www.thecoder.cafe/i/150533401?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png&quot;,&quot;isProcessing&quot;:false,&quot;align&quot;:null}" alt="The Coder Cafe logo." title="The Coder Cafe logo." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ba198c3-7331-493d-9d36-e846bb068002_1200x600.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><ul><li><p><a href="https://laurensapala.com/yay-finished-book-feel-depressed/" rel="">Yay! I Finished My Book! So Why Do I Feel So Depressed?</a></p></li></ul></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[PEP 750 – Template Strings (t-strings) have been accepted (399 pts)]]></title>
            <link>https://peps.python.org/pep-0750/</link>
            <guid>43647716</guid>
            <pubDate>Thu, 10 Apr 2025 20:24:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://peps.python.org/pep-0750/">https://peps.python.org/pep-0750/</a>, See on <a href="https://news.ycombinator.com/item?id=43647716">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="pep-content">

<dl>
<dt>Author<span>:</span></dt>
<dd>Jim Baker &lt;jim.baker at python.org&gt;,
Guido van Rossum &lt;guido at python.org&gt;,
Paul Everitt &lt;pauleveritt at me.com&gt;,
Koudai Aono &lt;koxudaxi at gmail.com&gt;,
Lysandros Nikolaou &lt;lisandrosnik at gmail.com&gt;,
Dave Peck &lt;davepeck at davepeck.org&gt;</dd>
<dt>Discussions-To<span>:</span></dt>
<dd><a href="https://discuss.python.org/t/71594">Discourse thread</a></dd>
<dt>Status<span>:</span></dt>
<dd><abbr title="Normative proposal accepted for implementation">Accepted</abbr></dd>
<dt>Type<span>:</span></dt>
<dd><abbr title="Normative PEP with a new feature for Python, implementation change for CPython or interoperability standard for the ecosystem">Standards Track</abbr></dd>
<dt>Created<span>:</span></dt>
<dd>08-Jul-2024</dd>
<dt>Python-Version<span>:</span></dt>
<dd>3.14</dd>
<dt>Post-History<span>:</span></dt>
<dd><a href="https://discuss.python.org/t/60408" title="Discourse thread">09-Aug-2024</a>,
<a href="https://discuss.python.org/t/60408/201" title="Discourse message">17-Oct-2024</a>,
<a href="https://discuss.python.org/t/60408/226" title="Discourse message">21-Oct-2024</a>,
<a href="https://discuss.python.org/t/71594" title="Discourse thread">18-Nov-2024</a></dd>
<dt>Resolution<span>:</span></dt>
<dd><a href="https://discuss.python.org/t/71594/130">10-Apr-2025</a></dd>
</dl>
<hr>
<section id="contents">
<details><summary>Table of Contents</summary><ul>
<li><a href="#abstract">Abstract</a></li>
<li><a href="#relationship-with-other-peps">Relationship With Other PEPs</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#specification">Specification</a><ul>
<li><a href="#template-string-literals">Template String Literals</a></li>
<li><a href="#the-template-type">The <code><span>Template</span></code> Type</a></li>
<li><a href="#the-interpolation-type">The <code><span>Interpolation</span></code> Type</a></li>
<li><a href="#the-template-values-property">The <code><span>Template.values</span></code> Property</a></li>
<li><a href="#iterating-template-contents">Iterating <code><span>Template</span></code> Contents</a></li>
<li><a href="#processing-template-strings">Processing Template Strings</a></li>
<li><a href="#template-string-concatenation">Template String Concatenation</a></li>
<li><a href="#template-and-interpolation-equality">Template and Interpolation Equality</a></li>
<li><a href="#no-support-for-ordering">No Support for Ordering</a></li>
<li><a href="#support-for-the-debug-specifier">Support for the debug specifier (<code><span>=</span></code>)</a></li>
<li><a href="#raw-template-strings">Raw Template Strings</a></li>
<li><a href="#interpolation-expression-evaluation">Interpolation Expression Evaluation</a></li>
<li><a href="#exceptions">Exceptions</a></li>
<li><a href="#no-template-str-implementation">No <code><span>Template.__str__()</span></code> Implementation</a></li>
<li><a href="#the-string-templatelib-module">The <code><span>string.templatelib</span></code> Module</a></li>
</ul>
</li>
<li><a href="#examples">Examples</a><ul>
<li><a href="#example-implementing-f-strings-with-t-strings">Example: Implementing f-strings with t-strings</a></li>
<li><a href="#example-structured-logging">Example: Structured Logging</a><ul>
<li><a href="#approach-1-custom-log-messages">Approach 1: Custom Log Messages</a></li>
<li><a href="#approach-2-custom-formatters">Approach 2: Custom Formatters</a></li>
</ul>
</li>
<li><a href="#example-html-templating">Example: HTML Templating</a></li>
</ul>
</li>
<li><a href="#backwards-compatibility">Backwards Compatibility</a></li>
<li><a href="#security-implications">Security Implications</a></li>
<li><a href="#how-to-teach-this">How To Teach This</a></li>
<li><a href="#why-another-templating-approach">Why another templating approach?</a></li>
<li><a href="#common-patterns-seen-in-processing-templates">Common Patterns Seen in Processing Templates</a><ul>
<li><a href="#structural-pattern-matching">Structural Pattern Matching</a></li>
<li><a href="#memoizing">Memoizing</a></li>
<li><a href="#parsing-to-intermediate-representations">Parsing to Intermediate Representations</a></li>
<li><a href="#context-sensitive-processing-of-interpolations">Context-sensitive Processing of Interpolations</a></li>
<li><a href="#nested-template-strings">Nested Template Strings</a></li>
<li><a href="#approaches-to-lazy-evaluation">Approaches to Lazy Evaluation</a></li>
<li><a href="#approaches-to-asynchronous-evaluation">Approaches to Asynchronous Evaluation</a></li>
<li><a href="#approaches-to-template-reuse">Approaches to Template Reuse</a></li>
<li><a href="#relation-to-format-strings">Relation to Format Strings</a></li>
</ul>
</li>
<li><a href="#reference-implementation">Reference Implementation</a></li>
<li><a href="#rejected-ideas">Rejected Ideas</a><ul>
<li><a href="#arbitrary-string-literal-prefixes">Arbitrary String Literal Prefixes</a></li>
<li><a href="#delayed-evaluation-of-interpolations">Delayed Evaluation of Interpolations</a></li>
<li><a href="#making-template-and-interpolation-into-protocols">Making <code><span>Template</span></code> and <code><span>Interpolation</span></code> Into Protocols</a></li>
<li><a href="#overridden-eq-and-hash-for-template-and-interpolation">Overridden <code><span>__eq__</span></code> and <code><span>__hash__</span></code> for <code><span>Template</span></code> and <code><span>Interpolation</span></code></a></li>
<li><a href="#an-additional-decoded-type">An Additional <code><span>Decoded</span></code> Type</a></li>
<li><a href="#the-final-home-for-template-and-interpolation">The Final Home for <code><span>Template</span></code> and <code><span>Interpolation</span></code></a></li>
<li><a href="#enable-full-reconstruction-of-original-template-literal">Enable Full Reconstruction of Original Template Literal</a></li>
<li><a href="#disallowing-string-concatenation">Disallowing String Concatenation</a></li>
<li><a href="#arbitrary-conversion-values">Arbitrary Conversion Values</a></li>
<li><a href="#removing-conversion-from-interpolation">Removing <code><span>conversion</span></code> From <code><span>Interpolation</span></code></a></li>
<li><a href="#alternate-interpolation-symbols">Alternate Interpolation Symbols</a></li>
<li><a href="#alternate-layouts-for-template">Alternate Layouts for <code><span>Template</span></code></a></li>
<li><a href="#mechanism-to-describe-the-kind-of-template">Mechanism to Describe the “Kind” of Template</a></li>
<li><a href="#binary-template-strings">Binary Template Strings</a></li>
</ul>
</li>
<li><a href="#acknowledgements">Acknowledgements</a></li>
<li><a href="#copyright">Copyright</a></li>
</ul>
</details></section>
<section id="abstract">
<h2><a href="#abstract" role="doc-backlink">Abstract</a></h2>
<p>This PEP introduces template strings for custom string processing.</p>
<p>Template strings are a generalization of f-strings, using a <code><span>t</span></code> in place of
the <code><span>f</span></code> prefix. Instead of evaluating to <code><span>str</span></code>, t-strings evaluate to a new
type, <code><span>Template</span></code>:</p>
<div><pre><span></span><span>template</span><span>:</span> <span>Template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
</pre></div>
<p>Templates provide developers with access to the string and its interpolated
values <em>before</em> they are combined. This brings native flexible string
processing to the Python language and enables safety checks, web templating,
domain-specific languages, and more.</p>
</section>
<section id="relationship-with-other-peps">
<h2><a href="#relationship-with-other-peps" role="doc-backlink">Relationship With Other PEPs</a></h2>
<p>Python introduced f-strings in Python 3.6 with <a href="https://peps.python.org/pep-0498/" title="PEP 498 – Literal String Interpolation">PEP 498</a>. The grammar was
then formalized in <a href="https://peps.python.org/pep-0701/" title="PEP 701 – Syntactic formalization of f-strings">PEP 701</a> which also lifted some restrictions. This PEP
is based on PEP 701.</p>
<p>At nearly the same time PEP 498 arrived, <a href="https://peps.python.org/pep-0501/" title="PEP 501 – General purpose template literal strings">PEP 501</a> was written to provide
“i-strings” – that is, “interpolation template strings”. The PEP was
deferred pending further experience with f-strings. Work on this PEP was
resumed by a different author in March 2023, introducing “t-strings” as template
literal strings, and built atop PEP 701.</p>
<p>The authors of this PEP consider it to be a generalization and simplification
of the updated work in PEP 501. (That PEP has also recently been updated to
reflect the new ideas in this PEP.)</p>
</section>
<section id="motivation">
<h2><a href="#motivation" role="doc-backlink">Motivation</a></h2>
<p>Python f-strings are easy to use and very popular. Over time, however, developers
have encountered limitations that make them
<a href="https://docs.djangoproject.com/en/5.1/ref/utils/#django.utils.html.format_html">unsuitable for certain use cases</a>.
In particular, f-strings provide no way to intercept and transform interpolated
values before they are combined into a final string.</p>
<p>As a result, incautious use of f-strings can lead to security vulnerabilities.
For example, a user executing a SQL query with <a href="https://docs.python.org/3/library/sqlite3.html#module-sqlite3" title="(in Python v3.13)"><code><span>sqlite3</span></code></a>
may be tempted to use an f-string to embed values into their SQL expression,
which could lead to a <a href="https://en.wikipedia.org/wiki/SQL_injection">SQL injection attack</a>.
Or, a developer building HTML may include unescaped user input in the string,
leading to a <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">cross-site scripting (XSS)</a>
vulnerability.</p>
<p>More broadly, the inability to transform interpolated values before they are
combined into a final string limits the utility of f-strings in more complex
string processing tasks.</p>
<p>Template strings address these problems by providing
developers with access to the string and its interpolated values.</p>
<p>For example, imagine we want to generate some HTML. Using template strings,
we can define an <code><span>html()</span></code> function that allows us to automatically sanitize
content:</p>
<div><pre><span></span><span>evil</span> <span>=</span> <span>"&lt;script&gt;alert('evil')&lt;/script&gt;"</span>
<span>template</span> <span>=</span> <span>t</span><span>"&lt;p&gt;</span><span>{evil}</span><span>&lt;/p&gt;"</span>
<span>assert</span> <span>html</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"&lt;p&gt;&amp;lt;script&amp;gt;alert('evil')&amp;lt;/script&amp;gt;&lt;/p&gt;"</span>
</pre></div>
<p>Likewise, our hypothetical <code><span>html()</span></code> function can make it easy for developers
to add attributes to HTML elements using a dictionary:</p>
<div><pre><span></span><span>attributes</span> <span>=</span> <span>{</span><span>"src"</span><span>:</span> <span>"shrubbery.jpg"</span><span>,</span> <span>"alt"</span><span>:</span> <span>"looks nice"</span><span>}</span>
<span>template</span> <span>=</span> <span>t</span><span>"&lt;img </span><span>{attributes}</span><span> /&gt;"</span>
<span>assert</span> <span>html</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>'&lt;img src="shrubbery.jpg" alt="looks nice" /&gt;'</span>
</pre></div>
<p>Neither of these examples is possible with f-strings. By providing a
mechanism to intercept and transform interpolated values, template strings
enable a wide range of string processing use cases.</p>
</section>
<section id="specification">
<h2><a href="#specification" role="doc-backlink">Specification</a></h2>
<section id="template-string-literals">
<h3><a href="#template-string-literals" role="doc-backlink">Template String Literals</a></h3>
<p>This PEP introduces a new string prefix, <code><span>t</span></code>, to define template string literals.
These literals resolve to a new type, <code><span>Template</span></code>, found in the standard library
module <code><span>string.templatelib</span></code>.</p>
<p>The following code creates a <code><span>Template</span></code> instance:</p>
<div><pre><span></span><span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Template</span>
<span>template</span> <span>=</span> <span>t</span><span>"This is a template string."</span>
<span>assert</span> <span>isinstance</span><span>(</span><span>template</span><span>,</span> <span>Template</span><span>)</span>
</pre></div>
<p>Template string literals support the full syntax of <a href="https://peps.python.org/pep-0701/" title="PEP 701 – Syntactic formalization of f-strings">PEP 701</a>. This includes
the ability to nest template strings within interpolations, as well as the ability
to use all valid quote marks (<code><span>'</span></code>, <code><span>"</span></code>, <code><span>'''</span></code>, and <code><span>"""</span></code>). Like other string
prefixes, the <code><span>t</span></code> prefix must immediately precede the quote. Like f-strings,
both lowercase <code><span>t</span></code> and uppercase <code><span>T</span></code> prefixes are supported. Like
f-strings, t-strings may not be combined with <code><span>u</span></code> or the <code><span>b</span></code> prefix.</p>
<p>Additionally, f-strings and t-strings cannot be combined, so the <code><span>ft</span></code>
prefix is invalid. t-strings <em>may</em> be combined with the <code><span>r</span></code> prefix;
see the <a href="#raw-template-strings">Raw Template Strings</a> section below for more information.</p>
</section>
<section id="the-template-type">
<h3><a href="#the-template-type" role="doc-backlink">The <code><span>Template</span></code> Type</a></h3>
<p>Template strings evaluate to an instance of a new immutable type,
<code><span>string.templatelib.Template</span></code>:</p>
<div><pre><span></span><span>class</span><span> </span><span>Template</span><span>:</span>
    <span>strings</span><span>:</span> <span>tuple</span><span>[</span><span>str</span><span>,</span> <span>...</span><span>]</span>
<span>    </span><span>"""</span>
<span>    A non-empty tuple of the string parts of the template,</span>
<span>    with N+1 items, where N is the number of interpolations</span>
<span>    in the template.</span>
<span>    """</span>

    <span>interpolations</span><span>:</span> <span>tuple</span><span>[</span><span>Interpolation</span><span>,</span> <span>...</span><span>]</span>
<span>    </span><span>"""</span>
<span>    A tuple of the interpolation parts of the template.</span>
<span>    This will be an empty tuple if there are no interpolations.</span>
<span>    """</span>

    <span>def</span><span> </span><span>__new__</span><span>(</span><span>cls</span><span>,</span> <span>*</span><span>args</span><span>:</span> <span>str</span> <span>|</span> <span>Interpolation</span><span>):</span>
<span>        </span><span>"""</span>
<span>        Create a new Template instance.</span>

<span>        Arguments can be provided in any order.</span>
<span>        """</span>
        <span>...</span>

    <span>@property</span>
    <span>def</span><span> </span><span>values</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>tuple</span><span>[</span><span>object</span><span>,</span> <span>...</span><span>]:</span>
<span>        </span><span>"""</span>
<span>        Return a tuple of the `value` attributes of each Interpolation</span>
<span>        in the template.</span>
<span>        This will be an empty tuple if there are no interpolations.</span>
<span>        """</span>
        <span>...</span>

    <span>def</span><span> </span><span>__iter__</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>Iterator</span><span>[</span><span>str</span> <span>|</span> <span>Interpolation</span><span>]:</span>
<span>        </span><span>"""</span>
<span>        Iterate over the string parts and interpolations in the template.</span>

<span>        These may appear in any order. Empty strings will not be included.</span>
<span>        """</span>
        <span>...</span>
</pre></div>
<p>The <code><span>strings</span></code> and <code><span>interpolations</span></code> attributes provide access to the string
parts and any interpolations in the literal:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"Hello "</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
</pre></div>
</section>
<section id="the-interpolation-type">
<h3><a href="#the-interpolation-type" role="doc-backlink">The <code><span>Interpolation</span></code> Type</a></h3>
<p>The <code><span>Interpolation</span></code> type represents an expression inside a template string.
Like <code><span>Template</span></code>, it is a new class found in the <code><span>string.templatelib</span></code> module:</p>
<div><pre><span></span><span>class</span><span> </span><span>Interpolation</span><span>:</span>
    <span>value</span><span>:</span> <span>object</span>
    <span>expression</span><span>:</span> <span>str</span>
    <span>conversion</span><span>:</span> <span>Literal</span><span>[</span><span>"a"</span><span>,</span> <span>"r"</span><span>,</span> <span>"s"</span><span>]</span> <span>|</span> <span>None</span>
    <span>format_spec</span><span>:</span> <span>str</span>

    <span>__match_args__</span> <span>=</span> <span>(</span><span>"value"</span><span>,</span> <span>"expression"</span><span>,</span> <span>"conversion"</span><span>,</span> <span>"format_spec"</span><span>)</span>

    <span>def</span><span> </span><span>__new__</span><span>(</span>
        <span>cls</span><span>,</span>
        <span>value</span><span>:</span> <span>object</span><span>,</span>
        <span>expression</span><span>:</span> <span>str</span><span>,</span>
        <span>conversion</span><span>:</span> <span>Literal</span><span>[</span><span>"a"</span><span>,</span> <span>"r"</span><span>,</span> <span>"s"</span><span>]</span> <span>|</span> <span>None</span> <span>=</span> <span>None</span><span>,</span>
        <span>format_spec</span><span>:</span> <span>str</span> <span>=</span> <span>""</span><span>,</span>
    <span>):</span>
        <span>...</span>
</pre></div>
<p>The <code><span>Interpolation</span></code> type is shallow immutable. Its attributes
cannot be reassigned.</p>
<p>The <code><span>value</span></code> attribute is the evaluated result of the interpolation:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
</pre></div>
<p>The <code><span>expression</span></code> attribute is the <em>original text</em> of the interpolation:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"name"</span>
</pre></div>
<p>We expect that the <code><span>expression</span></code> attribute will not be used in most template
processing code. It is provided for completeness and for use in debugging and
introspection. See both the <a href="#common-patterns-seen-in-processing-templates">Common Patterns Seen in Processing Templates</a>
section and the <a href="#examples">Examples</a> section for more information on how to process
template strings.</p>
<p>The <code><span>conversion</span></code> attribute is the <a href="https://docs.python.org/3/library/string.html#formatstrings" title="(in Python v3.13)"><span>optional conversion</span></a>
to be used, one of <code><span>r</span></code>, <code><span>s</span></code>, and <code><span>a</span></code>, corresponding to <code><span>repr()</span></code>,
<code><span>str()</span></code>, and <code><span>ascii()</span></code> conversions. As with f-strings, no other conversions
are supported:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name!r}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>conversion</span> <span>==</span> <span>"r"</span>
</pre></div>
<p>If no conversion is provided, <code><span>conversion</span></code> is <code><span>None</span></code>.</p>
<p>The <code><span>format_spec</span></code> attribute is the <a href="https://docs.python.org/3/library/string.html#formatspec" title="(in Python v3.13)"><span>format specification</span></a>.
As with f-strings, this is an arbitrary string that defines how to present the value:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>template</span> <span>=</span> <span>t</span><span>"Value: </span><span>{value:.2f}</span><span>"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>".2f"</span>
</pre></div>
<p>Format specifications in f-strings can themselves contain interpolations. This
is permitted in template strings as well; <code><span>format_spec</span></code> is set to the eagerly
evaluated result:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>precision</span> <span>=</span> <span>2</span>
<span>template</span> <span>=</span> <span>t</span><span>"Value: {value:.</span><span>{precision}</span><span>f}"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>".2f"</span>
</pre></div>
<p>If no format specification is provided, <code><span>format_spec</span></code> defaults to an empty
string (<code><span>""</span></code>). This matches the <code><span>format_spec</span></code> parameter of Python’s
<a href="https://docs.python.org/3/library/functions.html#format" title="(in Python v3.13)"><code><span>format()</span></code></a> built-in.</p>
<p>Unlike f-strings, it is up to code that processes the template to determine how to
interpret the <code><span>conversion</span></code> and <code><span>format_spec</span></code> attributes.
Such code is not required to use these attributes, but when present they should
be respected, and to the extent possible match the behavior of f-strings.
It would be surprising if, for example, a template string that uses <code><span>{value:.2f}</span></code>
did not round the value to two decimal places when processed.</p>
</section>
<section id="the-template-values-property">
<h3><a href="#the-template-values-property" role="doc-backlink">The <code><span>Template.values</span></code> Property</a></h3>
<p>The <code><span>Template.values</span></code> property is a shortcut for accessing the <code><span>value</span></code>
attribute of each <code><span>Interpolation</span></code> in the template and is equivalent to:</p>
<div><pre><span></span><span>@property</span>
<span>def</span><span> </span><span>values</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>tuple</span><span>[</span><span>object</span><span>,</span> <span>...</span><span>]:</span>
    <span>return</span> <span>tuple</span><span>(</span><span>i</span><span>.</span><span>value</span> <span>for</span> <span>i</span> <span>in</span> <span>self</span><span>.</span><span>interpolations</span><span>)</span>
</pre></div>
</section>
<section id="iterating-template-contents">
<h3><a href="#iterating-template-contents" role="doc-backlink">Iterating <code><span>Template</span></code> Contents</a></h3>
<p>The <code><span>Template.__iter__()</span></code> method provides a simple way to access the full
contents of a template. It yields the string parts and interpolations in
the order they appear, with empty strings omitted.</p>
<p>The <code><span>__iter__()</span></code> method is equivalent to:</p>
<div><pre><span></span><span>def</span><span> </span><span>__iter__</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>Iterator</span><span>[</span><span>str</span> <span>|</span> <span>Interpolation</span><span>]:</span>
    <span>for</span> <span>s</span><span>,</span> <span>i</span> <span>in</span> <span>zip_longest</span><span>(</span><span>self</span><span>.</span><span>strings</span><span>,</span> <span>self</span><span>.</span><span>interpolations</span><span>):</span>
        <span>if</span> <span>s</span><span>:</span>
            <span>yield</span> <span>s</span>
        <span>if</span> <span>i</span><span>:</span>
            <span>yield</span> <span>i</span>
</pre></div>
<p>The following examples show the <code><span>__iter__()</span></code> method in action:</p>
<div><pre><span></span><span>assert</span> <span>list</span><span>(</span><span>t</span><span>""</span><span>)</span> <span>==</span> <span>[]</span>

<span>assert</span> <span>list</span><span>(</span><span>t</span><span>"Hello"</span><span>)</span> <span>==</span> <span>[</span><span>"Hello"</span><span>]</span>

<span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name}</span><span>!"</span>
<span>contents</span> <span>=</span> <span>list</span><span>(</span><span>template</span><span>)</span>
<span>assert</span> <span>len</span><span>(</span><span>contents</span><span>)</span> <span>==</span> <span>3</span>
<span>assert</span> <span>contents</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"Hello "</span>
<span>assert</span> <span>contents</span><span>[</span><span>1</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
<span>assert</span> <span>contents</span><span>[</span><span>1</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"name"</span>
<span>assert</span> <span>contents</span><span>[</span><span>2</span><span>]</span> <span>==</span> <span>"!"</span>
</pre></div>
<p>Empty strings, which may be present in <code><span>Template.strings</span></code>, are not included
in the output of the <code><span>__iter__()</span></code> method:</p>
<div><pre><span></span><span>first</span> <span>=</span> <span>"Eat"</span>
<span>second</span> <span>=</span> <span>"Red Leicester"</span>
<span>template</span> <span>=</span> <span>t</span><span>"</span><span>{first}{second}</span><span>"</span>
<span>contents</span> <span>=</span> <span>list</span><span>(</span><span>template</span><span>)</span>
<span>assert</span> <span>len</span><span>(</span><span>contents</span><span>)</span> <span>==</span> <span>2</span>
<span>assert</span> <span>contents</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"Eat"</span>
<span>assert</span> <span>contents</span><span>[</span><span>0</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"first"</span>
<span>assert</span> <span>contents</span><span>[</span><span>1</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"Red Leicester"</span>
<span>assert</span> <span>contents</span><span>[</span><span>1</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"second"</span>

<span># However, the strings attribute contains empty strings:</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>""</span><span>,</span> <span>""</span><span>,</span> <span>""</span><span>)</span>
</pre></div>
<p>Template processing code can choose to work with any combination of
<code><span>strings</span></code>, <code><span>interpolations</span></code>, <code><span>values</span></code>, and <code><span>__iter__()</span></code> based on
requirements and convenience.</p>
</section>
<section id="processing-template-strings">
<h3><a href="#processing-template-strings" role="doc-backlink">Processing Template Strings</a></h3>
<p>Developers can write arbitrary code to process template strings. For example,
the following function renders static parts of the template in lowercase and
interpolations in uppercase:</p>
<div><pre><span></span><span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Template</span><span>,</span> <span>Interpolation</span>

<span>def</span><span> </span><span>lower_upper</span><span>(</span><span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
<span>    </span><span>"""Render static parts lowercased and interpolations uppercased."""</span>
    <span>parts</span><span>:</span> <span>list</span><span>[</span><span>str</span><span>]</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>item</span> <span>in</span> <span>template</span><span>:</span>
        <span>if</span> <span>isinstance</span><span>(</span><span>item</span><span>,</span> <span>Interpolation</span><span>):</span>
            <span>parts</span><span>.</span><span>append</span><span>(</span><span>str</span><span>(</span><span>item</span><span>.</span><span>value</span><span>)</span><span>.</span><span>upper</span><span>())</span>
        <span>else</span><span>:</span>
            <span>parts</span><span>.</span><span>append</span><span>(</span><span>item</span><span>.</span><span>lower</span><span>())</span>
    <span>return</span> <span>""</span><span>.</span><span>join</span><span>(</span><span>parts</span><span>)</span>

<span>name</span> <span>=</span> <span>"world"</span>
<span>assert</span> <span>lower_upper</span><span>(</span><span>t</span><span>"HELLO </span><span>{name}</span><span>"</span><span>)</span> <span>==</span> <span>"hello WORLD"</span>
</pre></div>
<p>There is no requirement that template strings are processed in any particular
way. Code that processes templates has no obligation to return a string.
Template strings are a flexible, general-purpose feature.</p>
<p>See the <a href="#common-patterns-seen-in-processing-templates">Common Patterns Seen in Processing Templates</a> section for more
information on how to process template strings. See the <a href="#examples">Examples</a> section
for detailed working examples.</p>
</section>
<section id="template-string-concatenation">
<h3><a href="#template-string-concatenation" role="doc-backlink">Template String Concatenation</a></h3>
<p>Template strings support explicit concatenation using <code><span>+</span></code>. Concatenation is
supported for two <code><span>Template</span></code> instances as well as for a <code><span>Template</span></code> instance
and a <code><span>str</span></code>:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"</span><span>{name}</span><span>"</span>

<span>assert</span> <span>isinstance</span><span>(</span><span>t</span><span>"Hello "</span> <span>+</span> <span>template</span><span>,</span> <span>Template</span><span>)</span>
<span>assert</span> <span>(</span><span>t</span><span>"Hello "</span> <span>+</span> <span>template</span><span>)</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>"Hello "</span><span>,</span> <span>""</span><span>)</span>
<span>assert</span> <span>(</span><span>t</span><span>"Hello "</span> <span>+</span> <span>template</span><span>)</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>

<span>assert</span> <span>isinstance</span><span>(</span><span>"Hello "</span> <span>+</span> <span>template</span><span>,</span> <span>Template</span><span>)</span>
<span>assert</span> <span>(</span><span>"Hello "</span> <span>+</span> <span>template</span><span>)</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>"Hello "</span><span>,</span> <span>""</span><span>)</span>
<span>assert</span> <span>(</span><span>"Hello "</span> <span>+</span> <span>template</span><span>)</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
</pre></div>
<p>Concatenation of templates is “viral”: the concatenation of a <code><span>Template</span></code> and
a <code><span>str</span></code> always results in a <code><span>Template</span></code> instance.</p>
<p>Python’s implicit concatenation syntax is also supported. The following code
will work as expected:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>assert</span> <span>(</span><span>t</span><span>"Hello "</span> <span>t</span><span>"World"</span><span>)</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>"Hello World"</span><span>,)</span>
<span>assert</span> <span>(</span><span>"Hello "</span> <span>t</span><span>"World"</span><span>)</span><span>.</span><span>strings</span> <span>==</span> <span>(</span><span>"Hello World"</span><span>,)</span>
</pre></div>
<p>The <code><span>Template</span></code> type supports the <code><span>__add__()</span></code> and <code><span>__radd__()</span></code> methods
between two <code><span>Template</span></code> instances and between a <code><span>Template</span></code> instance and a
<code><span>str</span></code>.</p>
</section>
<section id="template-and-interpolation-equality">
<h3><a href="#template-and-interpolation-equality" role="doc-backlink">Template and Interpolation Equality</a></h3>
<p><code><span>Template</span></code> and <code><span>Interpolation</span></code> instances compare with object identity
(<code><span>is</span></code>).</p>
<p><code><span>Template</span></code> instances are intended to be used by template processing code,
which may return a string or any other type. Those types can provide their
own equality semantics as needed.</p>
</section>
<section id="no-support-for-ordering">
<h3><a href="#no-support-for-ordering" role="doc-backlink">No Support for Ordering</a></h3>
<p>The <code><span>Template</span></code> and <code><span>Interpolation</span></code> types do not support ordering. This is
unlike all other string literal types in Python, which support lexicographic
ordering. Because interpolations can contain arbitrary values, there is no
natural ordering for them. As a result, neither the <code><span>Template</span></code> nor the
<code><span>Interpolation</span></code> type implements the standard comparison methods.</p>
</section>
<section id="support-for-the-debug-specifier">
<h3><a href="#support-for-the-debug-specifier" role="doc-backlink">Support for the debug specifier (<code><span>=</span></code>)</a></h3>
<p>The debug specifier, <code><span>=</span></code>, is supported in template strings and behaves similarly
to how it behaves in f-strings, though due to limitations of the implementation
there is a slight difference.</p>
<p>In particular, <code><span>t'{value=}'</span></code> is treated as <code><span>t'value={value!r}'</span></code>:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello {name=}"</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"Hello name="</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span> <span>==</span> <span>"World"</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>conversion</span> <span>==</span> <span>"r"</span>
</pre></div>
<p>If a separate format string is also provided, <code><span>t'{value=:fmt}</span></code> is treated
instead as <code><span>t'value={value!s:fmt}'</span></code>.</p>
<p>Whitespace is preserved in the debug specifier, so <code><span>t'{value</span> <span>=</span> <span>}'</span></code> is
treated as <code><span>t'value</span> <span>=</span> <span>{value!r}'</span></code>.</p>
</section>
<section id="raw-template-strings">
<h3><a href="#raw-template-strings" role="doc-backlink">Raw Template Strings</a></h3>
<p>Raw template strings are supported using the <code><span>rt</span></code> (or <code><span>tr</span></code>) prefix:</p>
<div><pre><span></span><span>trade</span> <span>=</span> <span>'shrubberies'</span>
<span>template</span> <span>=</span> <span>rt</span><span>'Did you say "</span><span>{trade}</span><span>"?</span><span>\n</span><span>'</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>r</span><span>'Did you say "'</span>
<span>assert</span> <span>template</span><span>.</span><span>strings</span><span>[</span><span>1</span><span>]</span> <span>==</span> <span>r</span><span>'"?\n'</span>
</pre></div>
<p>In this example, the <code><span>\n</span></code> is treated as two separate characters
(a backslash followed by ‘n’) rather than a newline character. This is
consistent with Python’s raw string behavior.</p>
<p>As with regular template strings, interpolations in raw template strings are
processed normally, allowing for the combination of raw string behavior and
dynamic content.</p>
</section>
<section id="interpolation-expression-evaluation">
<h3><a href="#interpolation-expression-evaluation" role="doc-backlink">Interpolation Expression Evaluation</a></h3>
<p>Expression evaluation for interpolations is the same as in <a href="https://peps.python.org/pep-0498/#expression-evaluation" title="PEP 498 – Literal String Interpolation § Expression evaluation">PEP 498</a>:</p>
<blockquote>
<p>The expressions that are extracted from the string are evaluated in the context
where the template string appeared. This means the expression has full access to its
lexical scope, including local and global variables. Any valid Python expression
can be used, including function and method calls.</p></blockquote>
<p>Template strings are evaluated eagerly from left to right, just like f-strings. This means that
interpolations are evaluated immediately when the template string is processed, not deferred
or wrapped in lambdas.</p>
</section>
<section id="exceptions">
<h3><a href="#exceptions" role="doc-backlink">Exceptions</a></h3>
<p>Exceptions raised in t-string literals are the same as those raised in f-string
literals.</p>
</section>
<section id="no-template-str-implementation">
<h3><a href="#no-template-str-implementation" role="doc-backlink">No <code><span>Template.__str__()</span></code> Implementation</a></h3>
<p>The <code><span>Template</span></code> type does not provide a specialized <code><span>__str__()</span></code> implementation.</p>
<p>This is because <code><span>Template</span></code> instances are intended to be used by template processing
code, which may return a string or any other type. There is no canonical way to
convert a Template to a string.</p>
<p>The <code><span>Template</span></code> and <code><span>Interpolation</span></code> types both provide useful <code><span>__repr__()</span></code>
implementations.</p>
</section>
<section id="the-string-templatelib-module">
<h3><a href="#the-string-templatelib-module" role="doc-backlink">The <code><span>string.templatelib</span></code> Module</a></h3>
<p>The <a href="https://docs.python.org/3/library/string.html#module-string" title="(in Python v3.13)"><code><span>string</span></code></a> module will be converted into a package, with a new
<code><span>templatelib</span></code> submodule containing the <code><span>Template</span></code> and <code><span>Interpolation</span></code>
types. Following the implementation of this PEP, this new module may be used
for related functions, such as <code><span>convert()</span></code>, or potential future template
processing code, such as shell script helpers.</p>
</section>
</section>
<section id="examples">
<h2><a href="#examples" role="doc-backlink">Examples</a></h2>
<p>All examples in this section of the PEP have fully tested reference implementations
available in the public <a href="https://github.com/davepeck/pep750-examples">pep750-examples</a>
git repository.</p>
<section id="example-implementing-f-strings-with-t-strings">
<h3><a href="#example-implementing-f-strings-with-t-strings" role="doc-backlink">Example: Implementing f-strings with t-strings</a></h3>
<p>It is easy to “implement” f-strings using t-strings. That is, we can
write a function <code><span>f(template:</span> <span>Template)</span> <span>-&gt;</span> <span>str</span></code> that processes a <code><span>Template</span></code>
in much the same way as an f-string literal, returning the same result:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>value</span> <span>=</span> <span>42</span>
<span>templated</span> <span>=</span> <span>t</span><span>"Hello </span><span>{name!r}</span><span>, value: </span><span>{value:.2f}</span><span>"</span>
<span>formatted</span> <span>=</span> <span>f</span><span>"Hello </span><span>{</span><span>name</span><span>!r}</span><span>, value: </span><span>{</span><span>value</span><span>:</span><span>.2f</span><span>}</span><span>"</span>
<span>assert</span> <span>f</span><span>(</span><span>templated</span><span>)</span> <span>==</span> <span>formatted</span>
</pre></div>
<p>The <code><span>f()</span></code> function supports both conversion specifiers like <code><span>!r</span></code> and format
specifiers like <code><span>:.2f</span></code>. The full code is fairly simple:</p>
<div><pre><span></span><span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Template</span><span>,</span> <span>Interpolation</span>

<span>def</span><span> </span><span>convert</span><span>(</span><span>value</span><span>:</span> <span>object</span><span>,</span> <span>conversion</span><span>:</span> <span>Literal</span><span>[</span><span>"a"</span><span>,</span> <span>"r"</span><span>,</span> <span>"s"</span><span>]</span> <span>|</span> <span>None</span><span>)</span> <span>-&gt;</span> <span>object</span><span>:</span>
    <span>if</span> <span>conversion</span> <span>==</span> <span>"a"</span><span>:</span>
        <span>return</span> <span>ascii</span><span>(</span><span>value</span><span>)</span>
    <span>elif</span> <span>conversion</span> <span>==</span> <span>"r"</span><span>:</span>
        <span>return</span> <span>repr</span><span>(</span><span>value</span><span>)</span>
    <span>elif</span> <span>conversion</span> <span>==</span> <span>"s"</span><span>:</span>
        <span>return</span> <span>str</span><span>(</span><span>value</span><span>)</span>
    <span>return</span> <span>value</span>

<span>def</span><span> </span><span>f</span><span>(</span><span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
    <span>parts</span> <span>=</span> <span>[]</span>
    <span>for</span> <span>item</span> <span>in</span> <span>template</span><span>:</span>
        <span>match</span> <span>item</span><span>:</span>
            <span>case</span> <span>str</span><span>()</span> <span>as</span> <span>s</span><span>:</span>
                <span>parts</span><span>.</span><span>append</span><span>(</span><span>s</span><span>)</span>
            <span>case</span><span> </span><span>Interpolation</span><span>(</span><span>value</span><span>,</span> <span>_</span><span>,</span> <span>conversion</span><span>,</span> <span>format_spec</span><span>):</span>
                <span>value</span> <span>=</span> <span>convert</span><span>(</span><span>value</span><span>,</span> <span>conversion</span><span>)</span>
                <span>value</span> <span>=</span> <span>format</span><span>(</span><span>value</span><span>,</span> <span>format_spec</span><span>)</span>
                <span>parts</span><span>.</span><span>append</span><span>(</span><span>value</span><span>)</span>
    <span>return</span> <span>""</span><span>.</span><span>join</span><span>(</span><span>parts</span><span>)</span>
</pre></div>

</section>
<section id="example-structured-logging">
<h3><a href="#example-structured-logging" role="doc-backlink">Example: Structured Logging</a></h3>
<p>Structured logging allows developers to log data in machine-readable
formats like JSON. With t-strings, developers can easily log structured data
alongside human-readable messages using just a single log statement.</p>
<p>We present two different approaches to implementing structured logging with
template strings.</p>
<section id="approach-1-custom-log-messages">
<h4><a href="#approach-1-custom-log-messages" role="doc-backlink">Approach 1: Custom Log Messages</a></h4>
<p>The <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook" title="(in Python v3.13)"><span>Python Logging Cookbook</span></a>
has a short section on <a href="https://docs.python.org/3/howto/logging-cookbook.html#implementing-structured-logging">how to implement structured logging</a>.</p>
<p>The logging cookbook suggests creating a new “message” class, <code><span>StructuredMessage</span></code>,
that is constructed with a simple text message and a separate dictionary of values:</p>
<div><pre><span></span><span>message</span> <span>=</span> <span>StructuredMessage</span><span>(</span><span>"user action"</span><span>,</span> <span>{</span>
    <span>"action"</span><span>:</span> <span>"traded"</span><span>,</span>
    <span>"amount"</span><span>:</span> <span>42</span><span>,</span>
    <span>"item"</span><span>:</span> <span>"shrubs"</span>
<span>})</span>
<span>logging</span><span>.</span><span>info</span><span>(</span><span>message</span><span>)</span>

<span># Outputs:</span>
<span># user action &gt;&gt;&gt; {"action": "traded", "amount": 42, "item": "shrubs"}</span>
</pre></div>
<p>The <code><span>StructuredMessage.__str__()</span></code> method formats both the human-readable
message <em>and</em> the values, combining them into a final string. (See the
<a href="https://docs.python.org/3/howto/logging-cookbook.html#implementing-structured-logging">logging cookbook</a>
for its full example.)</p>
<p>We can implement an improved version of <code><span>StructuredMessage</span></code> using template strings:</p>
<div><pre><span></span><span>import</span><span> </span><span>json</span>
<span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Interpolation</span><span>,</span> <span>Template</span>
<span>from</span><span> </span><span>typing</span><span> </span><span>import</span> <span>Mapping</span>

<span>class</span><span> </span><span>TemplateMessage</span><span>:</span>
    <span>def</span><span> </span><span>__init__</span><span>(</span><span>self</span><span>,</span> <span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>None</span><span>:</span>
        <span>self</span><span>.</span><span>template</span> <span>=</span> <span>template</span>

    <span>@property</span>
    <span>def</span><span> </span><span>message</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span># Use the f() function from the previous example</span>
        <span>return</span> <span>f</span><span>(</span><span>self</span><span>.</span><span>template</span><span>)</span>

    <span>@property</span>
    <span>def</span><span> </span><span>values</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>Mapping</span><span>[</span><span>str</span><span>,</span> <span>object</span><span>]:</span>
        <span>return</span> <span>{</span>
            <span>item</span><span>.</span><span>expression</span><span>:</span> <span>item</span><span>.</span><span>value</span>
            <span>for</span> <span>item</span> <span>in</span> <span>self</span><span>.</span><span>template</span>
            <span>if</span> <span>isinstance</span><span>(</span><span>item</span><span>,</span> <span>Interpolation</span><span>)</span>
        <span>}</span>

    <span>def</span><span> </span><span>__str__</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>return</span> <span>f</span><span>"</span><span>{</span><span>self</span><span>.</span><span>message</span><span>}</span><span> &gt;&gt;&gt; </span><span>{</span><span>json</span><span>.</span><span>dumps</span><span>(</span><span>self</span><span>.</span><span>values</span><span>)</span><span>}</span><span>"</span>

<span>_</span> <span>=</span> <span>TemplateMessage</span>  <span># optional, to improve readability</span>
<span>action</span><span>,</span> <span>amount</span><span>,</span> <span>item</span> <span>=</span> <span>"traded"</span><span>,</span> <span>42</span><span>,</span> <span>"shrubs"</span>
<span>logging</span><span>.</span><span>info</span><span>(</span><span>_</span><span>(</span><span>t</span><span>"User </span><span>{action}</span><span>: </span><span>{amount:.2f}</span><span> </span><span>{item}</span><span>"</span><span>))</span>

<span># Outputs:</span>
<span># User traded: 42.00 shrubs &gt;&gt;&gt; {"action": "traded", "amount": 42, "item": "shrubs"}</span>
</pre></div>
<p>Template strings give us a more elegant way to define the custom message
class. With template strings it is no longer necessary for developers to make
sure that their format string and values dictionary are kept in sync; a single
template string literal is all that is needed. The <code><span>TemplateMessage</span></code>
implementation can automatically extract structured keys and values from
the <code><span>Interpolation.expression</span></code> and <code><span>Interpolation.value</span></code> attributes,
respectively.</p>
</section>
<section id="approach-2-custom-formatters">
<h4><a href="#approach-2-custom-formatters" role="doc-backlink">Approach 2: Custom Formatters</a></h4>
<p>Custom messages are a reasonable approach to structured logging but can be a
little awkward. To use them, developers must wrap every log message they write
in a custom class. This can be easy to forget.</p>
<p>An alternative approach is to define custom <code><span>logging.Formatter</span></code> classes. This
approach is more flexible and allows for more control over the final output. In
particular, it’s possible to take a single template string and output it in
multiple formats (human-readable and JSON) to separate log streams.</p>
<p>We define two simple formatters, a <code><span>MessageFormatter</span></code> for human-readable output
and a <code><span>ValuesFormatter</span></code> for JSON output:</p>
<div><pre><span></span><span>import</span><span> </span><span>json</span>
<span>from</span><span> </span><span>logging</span><span> </span><span>import</span> <span>Formatter</span><span>,</span> <span>LogRecord</span>
<span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Interpolation</span><span>,</span> <span>Template</span>
<span>from</span><span> </span><span>typing</span><span> </span><span>import</span> <span>Any</span><span>,</span> <span>Mapping</span>


<span>class</span><span> </span><span>MessageFormatter</span><span>(</span><span>Formatter</span><span>):</span>
    <span>def</span><span> </span><span>message</span><span>(</span><span>self</span><span>,</span> <span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span># Use the f() function from the previous example</span>
        <span>return</span> <span>f</span><span>(</span><span>template</span><span>)</span>

    <span>def</span><span> </span><span>format</span><span>(</span><span>self</span><span>,</span> <span>record</span><span>:</span> <span>LogRecord</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>msg</span> <span>=</span> <span>record</span><span>.</span><span>msg</span>
        <span>if</span> <span>not</span> <span>isinstance</span><span>(</span><span>msg</span><span>,</span> <span>Template</span><span>):</span>
            <span>return</span> <span>super</span><span>()</span><span>.</span><span>format</span><span>(</span><span>record</span><span>)</span>
        <span>return</span> <span>self</span><span>.</span><span>message</span><span>(</span><span>msg</span><span>)</span>


<span>class</span><span> </span><span>ValuesFormatter</span><span>(</span><span>Formatter</span><span>):</span>
    <span>def</span><span> </span><span>values</span><span>(</span><span>self</span><span>,</span> <span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>Mapping</span><span>[</span><span>str</span><span>,</span> <span>Any</span><span>]:</span>
        <span>return</span> <span>{</span>
            <span>item</span><span>.</span><span>expression</span><span>:</span> <span>item</span><span>.</span><span>value</span>
            <span>for</span> <span>item</span> <span>in</span> <span>template</span>
            <span>if</span> <span>isinstance</span><span>(</span><span>item</span><span>,</span> <span>Interpolation</span><span>)</span>
        <span>}</span>

    <span>def</span><span> </span><span>format</span><span>(</span><span>self</span><span>,</span> <span>record</span><span>:</span> <span>LogRecord</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>msg</span> <span>=</span> <span>record</span><span>.</span><span>msg</span>
        <span>if</span> <span>not</span> <span>isinstance</span><span>(</span><span>msg</span><span>,</span> <span>Template</span><span>):</span>
            <span>return</span> <span>super</span><span>()</span><span>.</span><span>format</span><span>(</span><span>record</span><span>)</span>
        <span>return</span> <span>json</span><span>.</span><span>dumps</span><span>(</span><span>self</span><span>.</span><span>values</span><span>(</span><span>msg</span><span>))</span>
</pre></div>
<p>We can then use these formatters when configuring our logger:</p>
<div><pre><span></span><span>import</span><span> </span><span>logging</span>
<span>import</span><span> </span><span>sys</span>

<span>logger</span> <span>=</span> <span>logging</span><span>.</span><span>getLogger</span><span>(</span><span>__name__</span><span>)</span>
<span>message_handler</span> <span>=</span> <span>logging</span><span>.</span><span>StreamHandler</span><span>(</span><span>sys</span><span>.</span><span>stdout</span><span>)</span>
<span>message_handler</span><span>.</span><span>setFormatter</span><span>(</span><span>MessageFormatter</span><span>())</span>
<span>logger</span><span>.</span><span>addHandler</span><span>(</span><span>message_handler</span><span>)</span>

<span>values_handler</span> <span>=</span> <span>logging</span><span>.</span><span>StreamHandler</span><span>(</span><span>sys</span><span>.</span><span>stderr</span><span>)</span>
<span>values_handler</span><span>.</span><span>setFormatter</span><span>(</span><span>ValuesFormatter</span><span>())</span>
<span>logger</span><span>.</span><span>addHandler</span><span>(</span><span>values_handler</span><span>)</span>

<span>action</span><span>,</span> <span>amount</span><span>,</span> <span>item</span> <span>=</span> <span>"traded"</span><span>,</span> <span>42</span><span>,</span> <span>"shrubs"</span>
<span>logger</span><span>.</span><span>info</span><span>(</span><span>t</span><span>"User </span><span>{action}</span><span>: </span><span>{amount:.2f}</span><span> </span><span>{item}</span><span>"</span><span>)</span>

<span># Outputs to sys.stdout:</span>
<span># User traded: 42.00 shrubs</span>

<span># At the same time, outputs to sys.stderr:</span>
<span># {"action": "traded", "amount": 42, "item": "shrubs"}</span>
</pre></div>
<p>This approach has a couple advantages over the custom message approach to structured
logging:</p>
<ul>
<li>Developers can log a t-string directly without wrapping it in a custom class.</li>
<li>Human-readable and structured output can be sent to separate log streams. This
is useful for log aggregation systems that process structured data independently
from human-readable data.</li>
</ul>

</section>
</section>
<section id="example-html-templating">
<h3><a href="#example-html-templating" role="doc-backlink">Example: HTML Templating</a></h3>
<p>This PEP contains several short HTML templating examples. It turns out that the
“hypothetical” <code><span>html()</span></code> function mentioned in the  <a href="#motivation">Motivation</a> section
(and a few other places in this PEP) exists and is available in the
<a href="https://github.com/davepeck/pep750-examples/">pep750-examples repository</a>.
If you’re thinking about parsing a complex grammar with template strings, we
hope you’ll find it useful.</p>
</section>
</section>
<section id="backwards-compatibility">
<h2><a href="#backwards-compatibility" role="doc-backlink">Backwards Compatibility</a></h2>
<p>Like f-strings, use of template strings will be a syntactic backwards incompatibility
with previous versions.</p>
</section>
<section id="security-implications">
<h2><a href="#security-implications" role="doc-backlink">Security Implications</a></h2>
<p>The security implications of working with template strings, with respect to
interpolations, are as follows:</p>
<ol>
<li>Scope lookup is the same as f-strings (lexical scope). This model has been
shown to work well in practice.</li>
<li>Code that processes <code><span>Template</span></code> instances can ensure that any interpolations
are processed in a safe fashion, including respecting the context in which
they appear.</li>
</ol>
</section>
<section id="how-to-teach-this">
<h2><a href="#how-to-teach-this" role="doc-backlink">How To Teach This</a></h2>
<p>Template strings have several audiences:</p>
<ul>
<li>Developers using template strings and processing functions</li>
<li>Authors of template processing code</li>
<li>Framework authors who build interesting machinery with template strings</li>
</ul>
<p>We hope that teaching developers will be straightforward. At a glance,
template strings look just like f-strings. Their syntax is familiar and the
scoping rules remain the same.</p>
<p>The first thing developers must learn is that template string literals don’t
evaluate to strings; instead, they evaluate to a new type, <code><span>Template</span></code>. This
is a simple type intended to be used by template processing code. It’s not until
developers call a processing function that they get the result they want:
typically, a string, although processing code can of course return any arbitrary
type.</p>
<p>Developers will also want to understand how template strings relate to other
string formatting methods like f-strings and <a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="(in Python v3.13)"><code><span>str.format()</span></code></a>. They will need
to decide when to use each method. If a simple string is all that is needed, and
there are no security implications, f-strings are likely the best choice. For
most cases where a format string is used, it can be replaced with a function
wrapping the creation of a template string. In cases where the format string is
obtained from user input, the filesystem, or databases, it is possible to write
code to convert it into a <code><span>Template</span></code> instance if desired.</p>
<p>Because developers will learn that t-strings are nearly always used in tandem
with processing functions, they don’t necessarily need to understand the details
of the <code><span>Template</span></code> type. As with descriptors and decorators, we expect many more
developers will use t-strings than write t-string processing functions.</p>
<p>Over time, a small number of more advanced developers <em>will</em> wish to author their
own template processing code. Writing processing code often requires thinking
in terms of formal grammars. Developers will need to learn how to work with the
<code><span>strings</span></code> and <code><span>interpolation</span></code> attributes of a <code><span>Template</span></code> instance and how
to process interpolations in a context-sensitive fashion. More sophisticated
grammars will likely require parsing to intermediate representations like an
abstract syntax tree (AST). Great template processing code will handle format
specifiers and conversions when appropriate. Writing production-grade template
processing code – for instance, to support HTML templates – can be a large
undertaking.</p>
<p>We expect that template strings will provide framework authors with a powerful
new tool in their toolbox. While the functionality of template strings overlaps
with existing tools like template engines, t-strings move that logic into
the language itself. Bringing the full power and generality of Python to bear on
string processing tasks opens new possibilities for framework authors.</p>
</section>
<section id="why-another-templating-approach">
<h2><a href="#why-another-templating-approach" role="doc-backlink">Why another templating approach?</a></h2>
<p>The world of Python already has mature templating languages with wide adoption,
such as Jinja. Why build support for creating new templating systems?</p>
<p>Projects such as Jinja are still needed in cases where the template is less part
of the software by the developers, and more part of customization by designers
or even content created by users, for example in a CMS.</p>
<p>The trends in frontend development have treated templating as part of the
software and written by developers. They want modern language features and a
good tooling experience. PEP 750 envisions DSLs where the non-static parts are
Python: same scope rules, typing, expression syntax, and the like.</p>
</section>
<section id="common-patterns-seen-in-processing-templates">
<h2><a href="#common-patterns-seen-in-processing-templates" role="doc-backlink">Common Patterns Seen in Processing Templates</a></h2>
<section id="structural-pattern-matching">
<h3><a href="#structural-pattern-matching" role="doc-backlink">Structural Pattern Matching</a></h3>
<p>Iterating over the <code><span>Template</span></code> with structural pattern matching is the expected
best practice for many template function implementations:</p>
<div><pre><span></span><span>from</span><span> </span><span>string.templatelib</span><span> </span><span>import</span> <span>Template</span><span>,</span> <span>Interpolation</span>

<span>def</span><span> </span><span>process</span><span>(</span><span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>Any</span><span>:</span>
    <span>for</span> <span>item</span> <span>in</span> <span>template</span><span>:</span>
        <span>match</span> <span>item</span><span>:</span>
            <span>case</span> <span>str</span><span>()</span> <span>as</span> <span>s</span><span>:</span>
                <span>...</span> <span># handle each string part</span>
            <span>case</span> <span>Interpolation</span><span>()</span> <span>as</span> <span>interpolation</span><span>:</span>
                <span>...</span> <span># handle each interpolation</span>
</pre></div>
<p>Processing code may also commonly sub-match on attributes of the <code><span>Interpolation</span></code> type:</p>
<div><pre><span></span><span>match</span> <span>arg</span><span>:</span>
    <span>case</span> <span>Interpolation</span><span>(</span><span>int</span><span>()):</span>
        <span>...</span> <span># handle interpolations with integer values</span>
    <span>case</span> <span>Interpolation</span><span>(</span><span>value</span><span>=</span><span>str</span><span>()</span> <span>as</span> <span>s</span><span>):</span>
        <span>...</span> <span># handle interpolations with string values</span>
    <span># etc.</span>
</pre></div>
</section>
<section id="memoizing">
<h3><a href="#memoizing" role="doc-backlink">Memoizing</a></h3>
<p>Template functions can efficiently process both static and dynamic parts of templates.
The structure of <code><span>Template</span></code> objects allows for effective memoization:</p>
<div><pre><span></span><span>strings</span> <span>=</span> <span>template</span><span>.</span><span>strings</span>  <span># Static string parts</span>
<span>values</span> <span>=</span> <span>template</span><span>.</span><span>values</span>  <span># Dynamic interpolated values</span>
</pre></div>
<p>This separation enables caching of processed static parts while dynamic parts
can be inserted as needed. Authors of template processing code can use the static
<code><span>strings</span></code> as cache keys, leading to significant performance improvements when
similar templates are used repeatedly.</p>
</section>
<section id="parsing-to-intermediate-representations">
<h3><a href="#parsing-to-intermediate-representations" role="doc-backlink">Parsing to Intermediate Representations</a></h3>
<p>Code that processes templates can parse the template string into intermediate
representations, like an AST. We expect that many template processing libraries
will use this approach.</p>
<p>For instance, rather than returning a <code><span>str</span></code>, our theoretical <code><span>html()</span></code> function
(see the <a href="#motivation">Motivation</a> section) could return an HTML <code><span>Element</span></code> defined in the
same package:</p>
<div><pre><span></span><span>@dataclass</span><span>(</span><span>frozen</span><span>=</span><span>True</span><span>)</span>
<span>class</span><span> </span><span>Element</span><span>:</span>
    <span>tag</span><span>:</span> <span>str</span>
    <span>attributes</span><span>:</span> <span>Mapping</span><span>[</span><span>str</span><span>,</span> <span>str</span> <span>|</span> <span>bool</span><span>]</span>
    <span>children</span><span>:</span> <span>Sequence</span><span>[</span><span>str</span> <span>|</span> <span>Element</span><span>]</span>

    <span>def</span><span> </span><span>__str__</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>...</span>


<span>def</span><span> </span><span>html</span><span>(</span><span>template</span><span>:</span> <span>Template</span><span>)</span> <span>-&gt;</span> <span>Element</span><span>:</span>
    <span>...</span>
</pre></div>
<p>Calling <code><span>str(element)</span></code> would then render the HTML but, in the meantime, the
<code><span>Element</span></code> could be manipulated in a variety of ways.</p>
</section>
<section id="context-sensitive-processing-of-interpolations">
<h3><a href="#context-sensitive-processing-of-interpolations" role="doc-backlink">Context-sensitive Processing of Interpolations</a></h3>
<p>Continuing with our hypothetical <code><span>html()</span></code> function, it could be made
context-sensitive. Interpolations could be processed differently depending
on where they appear in the template.</p>
<p>For example, our <code><span>html()</span></code> function could support multiple kinds of
interpolations:</p>
<div><pre><span></span><span>attributes</span> <span>=</span> <span>{</span><span>"id"</span><span>:</span> <span>"main"</span><span>}</span>
<span>attribute_value</span> <span>=</span> <span>"shrubbery"</span>
<span>content</span> <span>=</span> <span>"hello"</span>
<span>template</span> <span>=</span> <span>t</span><span>"&lt;div </span><span>{attributes}</span><span> data-value=</span><span>{attribute_value}</span><span>&gt;</span><span>{content}</span><span>&lt;/div&gt;"</span>
<span>element</span> <span>=</span> <span>html</span><span>(</span><span>template</span><span>)</span>
<span>assert</span> <span>str</span><span>(</span><span>element</span><span>)</span> <span>==</span> <span>'&lt;div id="main" data-value="shrubbery"&gt;hello&lt;/div&gt;'</span>
</pre></div>
<p>Because the <code><span>{attributes}</span></code> interpolation occurs in the context of an HTML tag,
and because there is no corresponding attribute name, it is treated as a dictionary
of attributes. The <code><span>{attribute_value}</span></code> interpolation is treated as a simple
string value and is quoted before inclusion in the final string. The
<code><span>{content}</span></code> interpolation is treated as potentially unsafe content and is
escaped before inclusion in the final string.</p>
</section>
<section id="nested-template-strings">
<h3><a href="#nested-template-strings" role="doc-backlink">Nested Template Strings</a></h3>
<p>Going a step further with our <code><span>html()</span></code> function, we could support nested
template strings. This would allow for more complex HTML structures to be
built up from simpler templates:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>content</span> <span>=</span> <span>html</span><span>(</span><span>t</span><span>"&lt;p&gt;Hello </span><span>{name}</span><span>&lt;/p&gt;"</span><span>)</span>
<span>template</span> <span>=</span> <span>t</span><span>"&lt;div&gt;</span><span>{content}</span><span>&lt;/div&gt;"</span>
<span>element</span> <span>=</span> <span>html</span><span>(</span><span>template</span><span>)</span>
<span>assert</span> <span>str</span><span>(</span><span>element</span><span>)</span> <span>==</span> <span>'&lt;div&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;'</span>
</pre></div>
<p>Because the <code><span>{content}</span></code> interpolation is an <code><span>Element</span></code> instance, it does
not need to be escaped before inclusion in the final string.</p>
<p>One could imagine a nice simplification: if the <code><span>html()</span></code> function is passed
a <code><span>Template</span></code> instance, it could automatically convert it to an <code><span>Element</span></code>
by recursively calling itself on the nested template.</p>
<p>We expect that nesting and composition of templates will be a common pattern
in template processing code and, where appropriate, used in preference to
simple string concatenation.</p>
</section>
<section id="approaches-to-lazy-evaluation">
<h3><a href="#approaches-to-lazy-evaluation" role="doc-backlink">Approaches to Lazy Evaluation</a></h3>
<p>Like f-strings, interpolations in t-string literals are eagerly evaluated. However,
there are cases where lazy evaluation may be desirable.</p>
<p>If a single interpolation is expensive to evaluate, it can be explicitly wrapped
in a <code><span>lambda</span></code> in the template string literal:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>template</span> <span>=</span> <span>t</span><span>"Hello {(lambda: name)}"</span>
<span>assert</span> <span>callable</span><span>(</span><span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span><span>)</span>
<span>assert</span> <span>template</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>value</span><span>()</span> <span>==</span> <span>"World"</span>
</pre></div>
<p>This assumes, of course, that template processing code anticipates and handles
callable interpolation values. (One could imagine also supporting iterators,
awaitables, etc.) This is not a requirement of the PEP, but it is a common
pattern in template processing code.</p>
<p>In general, we hope that the community will develop best practices for lazy
evaluation of interpolations in template strings and that, when it makes sense,
common libraries will provide support for callable or awaitable values in
their template processing code.</p>
</section>
<section id="approaches-to-asynchronous-evaluation">
<h3><a href="#approaches-to-asynchronous-evaluation" role="doc-backlink">Approaches to Asynchronous Evaluation</a></h3>
<p>Closely related to lazy evaluation is asynchronous evaluation.</p>
<p>As with f-strings, the <code><span>await</span></code> keyword is allowed in interpolations:</p>
<div><pre><span></span><span>async</span> <span>def</span><span> </span><span>example</span><span>():</span>
    <span>async</span> <span>def</span><span> </span><span>get_name</span><span>()</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>await</span> <span>asyncio</span><span>.</span><span>sleep</span><span>(</span><span>1</span><span>)</span>
        <span>return</span> <span>"Sleepy"</span>

    <span>template</span> <span>=</span> <span>t</span><span>"Hello {await get_name()}"</span>
    <span># Use the f() function from the f-string example, above</span>
    <span>assert</span> <span>f</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"Hello Sleepy"</span>
</pre></div>
<p>More sophisticated template processing code can take advantage of this to
perform asynchronous operations in interpolations. For example, a “smart”
processing function could anticipate that an interpolation is an awaitable
and await it before processing the template string:</p>
<div><pre><span></span><span>async</span> <span>def</span><span> </span><span>example</span><span>():</span>
    <span>async</span> <span>def</span><span> </span><span>get_name</span><span>()</span> <span>-&gt;</span> <span>str</span><span>:</span>
        <span>await</span> <span>asyncio</span><span>.</span><span>sleep</span><span>(</span><span>1</span><span>)</span>
        <span>return</span> <span>"Sleepy"</span>

    <span>template</span> <span>=</span> <span>t</span><span>"Hello </span><span>{get_name}</span><span>"</span>
    <span>assert</span> <span>await</span> <span>async_f</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"Hello Sleepy"</span>
</pre></div>
<p>This assumes that the template processing code in <code><span>async_f()</span></code> is asynchronous
and is able to <code><span>await</span></code> an interpolation’s value.</p>

</section>
<section id="approaches-to-template-reuse">
<h3><a href="#approaches-to-template-reuse" role="doc-backlink">Approaches to Template Reuse</a></h3>
<p>If developers wish to reuse template strings multiple times with different
values, they can write a function to return a <code><span>Template</span></code> instance:</p>
<div><pre><span></span><span>def</span><span> </span><span>reusable</span><span>(</span><span>name</span><span>:</span> <span>str</span><span>,</span> <span>question</span><span>:</span> <span>str</span><span>)</span> <span>-&gt;</span> <span>Template</span><span>:</span>
    <span>return</span> <span>t</span><span>"Hello </span><span>{name}</span><span>, </span><span>{question}</span><span>?"</span>

<span>template</span> <span>=</span> <span>reusable</span><span>(</span><span>"friend"</span><span>,</span> <span>"how are you"</span><span>)</span>
<span>template</span> <span>=</span> <span>reusable</span><span>(</span><span>"King Arthur"</span><span>,</span> <span>"what is your quest"</span><span>)</span>
</pre></div>
<p>This is, of course, no different from how f-strings can be reused.</p>
</section>
<section id="relation-to-format-strings">
<h3><a href="#relation-to-format-strings" role="doc-backlink">Relation to Format Strings</a></h3>
<p>The venerable <a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="(in Python v3.13)"><code><span>str.format()</span></code></a> method accepts format strings that can later
be used to format values:</p>
<div><pre><span></span><span>alas_fmt</span> <span>=</span> <span>"We're all out of </span><span>{cheese}</span><span>."</span>
<span>assert</span> <span>alas_fmt</span><span>.</span><span>format</span><span>(</span><span>cheese</span><span>=</span><span>"Red Leicester"</span><span>)</span> <span>==</span> <span>"We're all out of Red Leicester."</span>
</pre></div>
<p>If one squints, one can think of format strings as a kind of function definition.
The <em>call</em> to <a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="(in Python v3.13)"><code><span>str.format()</span></code></a> can be seen as a kind of function call. The
t-string equivalent is to simply define a standard Python function that returns
a <code><span>Template</span></code> instance:</p>
<div><pre><span></span><span>def</span><span> </span><span>make_template</span><span>(</span><span>*</span><span>,</span> <span>cheese</span><span>:</span> <span>str</span><span>)</span> <span>-&gt;</span> <span>Template</span><span>:</span>
    <span>return</span> <span>t</span><span>"We're all out of </span><span>{cheese}</span><span>."</span>

<span>template</span> <span>=</span> <span>make_template</span><span>(</span><span>cheese</span><span>=</span><span>"Red Leicester"</span><span>)</span>
<span># Using the f() function from the f-string example, above</span>
<span>assert</span> <span>f</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"We're all out of Red Leicester."</span>
</pre></div>
<p>The <code><span>make_template()</span></code> function itself can be thought of as analogous to the
format string. The call to <code><span>make_template()</span></code> is analogous to the call to
<a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="(in Python v3.13)"><code><span>str.format()</span></code></a>.</p>
<p>Of course, it is common to load format strings from external sources like a
filesystem or database. Thankfully, because <code><span>Template</span></code> and <code><span>Interpolation</span></code>
are simple Python types, it is possible to write a function that takes an
old-style format string and returns an equivalent <code><span>Template</span></code> instance:</p>
<div><pre><span></span><span>def</span><span> </span><span>from_format</span><span>(</span><span>fmt</span><span>:</span> <span>str</span><span>,</span> <span>/</span><span>,</span> <span>*</span><span>args</span><span>:</span> <span>object</span><span>,</span> <span>**</span><span>kwargs</span><span>:</span> <span>object</span><span>)</span> <span>-&gt;</span> <span>Template</span><span>:</span>
<span>     </span><span>"""Parse `fmt` and return a `Template` instance."""</span>
     <span>...</span>

 <span># Load this from a file, database, etc.</span>
 <span>fmt</span> <span>=</span> <span>"We're all out of </span><span>{cheese}</span><span>."</span>
 <span>template</span> <span>=</span> <span>from_format</span><span>(</span><span>fmt</span><span>,</span> <span>cheese</span><span>=</span><span>"Red Leicester"</span><span>)</span>
 <span># Using the f() function from the f-string example, above</span>
 <span>assert</span> <span>f</span><span>(</span><span>template</span><span>)</span> <span>==</span> <span>"We're all out of Red Leicester."</span>
</pre></div>
<p>This is a powerful pattern that allows developers to use template strings in
places where they might have previously used format strings. A full implementation
of <code><span>from_format()</span></code> is available in the examples repository,
which supports the full grammar of format strings.</p>

</section>
</section>
<section id="reference-implementation">
<h2><a href="#reference-implementation" role="doc-backlink">Reference Implementation</a></h2>
<p>A CPython implementation of PEP 750 is <a href="https://github.com/lysnikolaou/cpython/tree/tstrings">available</a>.</p>
<p>There is also a public repository of <a href="https://github.com/davepeck/pep750-examples">examples and tests</a>
built around the reference implementation. If you’re interested in playing with
template strings, this repository is a great place to start.</p>
</section>
<section id="rejected-ideas">
<h2><a href="#rejected-ideas" role="doc-backlink">Rejected Ideas</a></h2>
<p>This PEP has been through several significant revisions. In addition, quite a few interesting
ideas were considered both in revisions of <a href="https://peps.python.org/pep-0501/" title="PEP 501 – General purpose template literal strings">PEP 501</a> and in the <a href="https://discuss.python.org/t/pep-750-tag-strings-for-writing-domain-specific-languages/60408/196">Discourse discussion</a>.</p>
<p>We attempt to document the most significant ideas that were considered and rejected.</p>
<section id="arbitrary-string-literal-prefixes">
<h3><a href="#arbitrary-string-literal-prefixes" role="doc-backlink">Arbitrary String Literal Prefixes</a></h3>
<p>Inspired by <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">JavaScript tagged template literals</a>,
an earlier version of this PEP allowed for arbitrary “tag” prefixes in front
of literal strings:</p>

<p>The prefix was a special callable called a “tag function”. Tag functions
received the parts of the template string in an argument list. They could then
process the string and return an arbitrary value:</p>
<div><pre><span></span><span>def</span><span> </span><span>my_tag</span><span>(</span><span>*</span><span>args</span><span>:</span> <span>str</span> <span>|</span> <span>Interpolation</span><span>)</span> <span>-&gt;</span> <span>Any</span><span>:</span>
    <span>...</span>
</pre></div>
<p>This approach was rejected for several reasons:</p>
<ul>
<li>It was deemed too complex to build in full generality. JavaScript allows for
arbitrary expressions to precede a template string, which is a significant
challenge to implement in Python.</li>
<li>It precluded future introduction of new string prefixes.</li>
<li>It seemed to needlessly pollute the namespace.</li>
</ul>
<p>Use of a single <code><span>t</span></code> prefix was chosen as a simpler, more Pythonic approach and
more in keeping with template strings’ role as a generalization of f-strings.</p>
</section>
<section id="delayed-evaluation-of-interpolations">
<h3><a href="#delayed-evaluation-of-interpolations" role="doc-backlink">Delayed Evaluation of Interpolations</a></h3>
<p>An early version of this PEP proposed that interpolations should be lazily
evaluated. All interpolations were “wrapped” in implicit lambdas. Instead of
having an eagerly evaluated <code><span>value</span></code> attribute, interpolations had a
<code><span>getvalue()</span></code> method that would resolve the value of the interpolation:</p>
<div><pre><span></span><span>class</span><span> </span><span>Interpolation</span><span>:</span>
    <span>...</span>
    <span>_value</span><span>:</span> <span>Callable</span><span>[[],</span> <span>object</span><span>]</span>

    <span>def</span><span> </span><span>getvalue</span><span>(</span><span>self</span><span>)</span> <span>-&gt;</span> <span>object</span><span>:</span>
        <span>return</span> <span>self</span><span>.</span><span>_value</span><span>()</span>
</pre></div>
<p>This was rejected for several reasons:</p>
<ul>
<li>The overwhelming majority of use cases for template strings naturally call
for immediate evaluation.</li>
<li>Delayed evaluation would be a significant departure from the behavior of
f-strings.</li>
<li>Implicit lambda wrapping leads to difficulties with type hints and
static analysis.</li>
</ul>
<p>Most importantly, there are viable (if imperfect) alternatives to implicit
lambda wrapping in many cases where lazy evaluation is desired. See the section
on <a href="#approaches-to-lazy-evaluation">Approaches to Lazy Evaluation</a>, above, for more information.</p>
<p>While delayed evaluation was rejected for <em>this</em> PEP, we hope that the community
continues to explore the idea.</p>
</section>
<section id="making-template-and-interpolation-into-protocols">
<h3><a href="#making-template-and-interpolation-into-protocols" role="doc-backlink">Making <code><span>Template</span></code> and <code><span>Interpolation</span></code> Into Protocols</a></h3>
<p>An early version of this PEP proposed that the <code><span>Template</span></code> and <code><span>Interpolation</span></code>
types be runtime checkable protocols rather than classes.</p>
<p>In the end, we felt that using classes was more straightforward.</p>
</section>
<section id="overridden-eq-and-hash-for-template-and-interpolation">
<h3><a href="#overridden-eq-and-hash-for-template-and-interpolation" role="doc-backlink">Overridden <code><span>__eq__</span></code> and <code><span>__hash__</span></code> for <code><span>Template</span></code> and <code><span>Interpolation</span></code></a></h3>
<p>Earlier versions of this PEP proposed that the <code><span>Template</span></code> and <code><span>Interpolation</span></code>
types should have their own implementations of <code><span>__eq__</span></code> and <code><span>__hash__</span></code>.</p>
<p><code><span>Templates</span></code> were considered equal if their <code><span>strings</span></code> and <code><span>interpolations</span></code>
were equal; <code><span>Interpolations</span></code> were considered equal if their <code><span>value</span></code>,
<code><span>expression</span></code>, <code><span>conversion</span></code>, and <code><span>format_spec</span></code> were equal. Interpolation
hashing was similar to tuple hashing: an <code><span>Interpolation</span></code> was hashable if and
only if its <code><span>value</span></code> was hashable.</p>
<p>This was rejected because <code><span>Template.__hash__</span></code> so defined was not useful as a
cache key in template processing code; we were concerned that it would be
confusing to developers.</p>
<p>By dropping these implementations of <code><span>__eq__</span></code> and <code><span>__hash__</span></code>, we lose the
ability to write asserts such as:</p>
<div><pre><span></span><span>name</span> <span>=</span> <span>"World"</span>
<span>assert</span> <span>t</span><span>"Hello "</span> <span>+</span> <span>t</span><span>"</span><span>{name}</span><span>"</span> <span>==</span> <span>t</span><span>"Hello </span><span>{name}</span><span>"</span>
</pre></div>
<p>Because <code><span>Template</span></code> instances are intended to be quickly processed by further
code, we felt that the utility of these asserts was limited.</p>
</section>
<section id="an-additional-decoded-type">
<h3><a href="#an-additional-decoded-type" role="doc-backlink">An Additional <code><span>Decoded</span></code> Type</a></h3>
<p>An early version of this PEP proposed an additional type, <code><span>Decoded</span></code>, to represent
the “static string” parts of a template string. This type derived from <code><span>str</span></code> and
had a single extra <code><span>raw</span></code> attribute that provided the original text of the string.
We rejected this in favor of the simpler approach of using plain <code><span>str</span></code> and
allowing combination of <code><span>r</span></code> and <code><span>t</span></code> prefixes.</p>
</section>
<section id="the-final-home-for-template-and-interpolation">
<h3><a href="#the-final-home-for-template-and-interpolation" role="doc-backlink">The Final Home for <code><span>Template</span></code> and <code><span>Interpolation</span></code></a></h3>
<p>Previous versions of this PEP proposed placing the <code><span>Template</span></code> and
<code><span>Interpolation</span></code> types in: <code><span>types</span></code>, <code><span>collections</span></code>, <code><span>collections.abc</span></code>,
and even in a new top-level module, <code><span>templatelib</span></code>. The final decision was to
place them in <code><span>string.templatelib</span></code>.</p>
</section>
<section id="enable-full-reconstruction-of-original-template-literal">
<h3><a href="#enable-full-reconstruction-of-original-template-literal" role="doc-backlink">Enable Full Reconstruction of Original Template Literal</a></h3>
<p>Earlier versions of this PEP attempted to make it possible to fully reconstruct
the text of the original template string from a <code><span>Template</span></code> instance. This was
rejected as being overly complex. The mapping between template literal source
and the underlying AST is not one-to-one and there are several limitations with
respect to round-tripping to the original source text.</p>
<p>First, <code><span>Interpolation.format_spec</span></code> defaults to <code><span>""</span></code> if not provided:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>template1</span> <span>=</span> <span>t</span><span>"</span><span>{value}</span><span>"</span>
<span>template2</span> <span>=</span> <span>t</span><span>"</span><span>{value:}</span><span>"</span>
<span>assert</span> <span>template1</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>""</span>
<span>assert</span> <span>template2</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>""</span>
</pre></div>
<p>Next, the debug specifier, <code><span>=</span></code>, is treated as a special case and is processed
before the AST is created. It is therefore not possible to distinguish
<code><span>t"{value=}"</span></code> from <code><span>t"value={value!r}"</span></code>:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>template1</span> <span>=</span> <span>t</span><span>"{value=}"</span>
<span>template2</span> <span>=</span> <span>t</span><span>"value=</span><span>{value!r}</span><span>"</span>
<span>assert</span> <span>template1</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"value="</span>
<span>assert</span> <span>template1</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"value"</span>
<span>assert</span> <span>template1</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>conversion</span> <span>==</span> <span>"r"</span>
<span>assert</span> <span>template2</span><span>.</span><span>strings</span><span>[</span><span>0</span><span>]</span> <span>==</span> <span>"value="</span>
<span>assert</span> <span>template2</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>expression</span> <span>==</span> <span>"value"</span>
<span>assert</span> <span>template2</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>conversion</span> <span>==</span> <span>"r"</span>
</pre></div>
<p>Finally, format specifiers in f-strings allow arbitrary nesting. In this PEP
and in the reference implementation, the specifier is eagerly evaluated to
set the <code><span>format_spec</span></code> in the <code><span>Interpolation</span></code>, thereby losing the original
expressions. For example:</p>
<div><pre><span></span><span>value</span> <span>=</span> <span>42</span>
<span>precision</span> <span>=</span> <span>2</span>
<span>template1</span> <span>=</span> <span>t</span><span>"</span><span>{value:.2f}</span><span>"</span>
<span>template2</span> <span>=</span> <span>t</span><span>"{value:.</span><span>{precision}</span><span>f}"</span>
<span>assert</span> <span>template1</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>".2f"</span>
<span>assert</span> <span>template2</span><span>.</span><span>interpolations</span><span>[</span><span>0</span><span>]</span><span>.</span><span>format_spec</span> <span>==</span> <span>".2f"</span>
</pre></div>
<p>We do not anticipate that these limitations will be a significant issue in practice.
Developers who need to obtain the original template string literal can always
use <code><span>inspect.getsource()</span></code> or similar tools.</p>
</section>
<section id="disallowing-string-concatenation">
<h3><a href="#disallowing-string-concatenation" role="doc-backlink">Disallowing String Concatenation</a></h3>
<p>Earlier versions of this PEP proposed that template strings should not support
concatenation. This was rejected in favor of allowing concatenation.</p>
<p>There are reasonable arguments in favor of rejecting one or all forms of
concatenation: namely, that it cuts off a class of potential bugs, particularly
when one takes the view that template strings will often contain complex grammars
for which concatenation doesn’t always have the same meaning (or any meaning).</p>
<p>Moreover, the earliest versions of this PEP proposed a syntax closer to
JavaScript’s tagged template literals, where an arbitrary callable could be used
as a prefix to a string literal. There was no guarantee that the callable would
return a type that supported concatenation.</p>
<p>In the end, we decided that the surprise to developers of a new string type
<em>not</em> supporting concatenation was likely to be greater than the theoretical
harm caused by supporting it. (Developers concatenate f-strings all the time,
after all, and while we are sure there are cases where this introduces bugs,
it’s not clear that those bugs outweigh the benefits of supporting concatenation.)</p>
<p>While concatenation is supported, we expect that code that uses template strings
will more commonly build up larger templates through nesting and composition
rather than concatenation.</p>
</section>
<section id="arbitrary-conversion-values">
<h3><a href="#arbitrary-conversion-values" role="doc-backlink">Arbitrary Conversion Values</a></h3>
<p>Python allows only <code><span>r</span></code>, <code><span>s</span></code>, or <code><span>a</span></code> as possible conversion type values.
Trying to assign a different value results in <code><span>SyntaxError</span></code>.</p>
<p>In theory, template functions could choose to handle other conversion types. But this
PEP adheres closely to <a href="https://peps.python.org/pep-0701/" title="PEP 701 – Syntactic formalization of f-strings">PEP 701</a>. Any changes to allowed values should be in a
separate PEP.</p>
</section>
<section id="removing-conversion-from-interpolation">
<h3><a href="#removing-conversion-from-interpolation" role="doc-backlink">Removing <code><span>conversion</span></code> From <code><span>Interpolation</span></code></a></h3>
<p>While drafting this PEP, we considered removing the <code><span>conversion</span></code>
attribute from <code><span>Interpolation</span></code> and specifying that the conversion should be
performed eagerly, before <code><span>Interpolation.value</span></code> is set.</p>
<p>This was done to simplify the work of writing template processing code. The
<code><span>conversion</span></code> attribute is of limited extensibility (it is typed as
<code><span>Literal["r",</span> <span>"s",</span> <span>"a"]</span> <span>|</span> <span>None</span></code>). It is not clear that it adds significant
value or flexibility to template strings that couldn’t better be achieved with
custom format specifiers. Unlike with format specifiers, there is no
equivalent to Python’s <a href="https://docs.python.org/3/library/functions.html#format" title="(in Python v3.13)"><code><span>format()</span></code></a> built-in. (Instead, we include a
sample implementation of <code><span>convert()</span></code> in the <a href="#examples">Examples</a> section.)</p>
<p>Ultimately we decided to keep the <code><span>conversion</span></code> attribute in the
<code><span>Interpolation</span></code> type to maintain compatibility with f-strings and to allow
for future extensibility.</p>
</section>
<section id="alternate-interpolation-symbols">
<h3><a href="#alternate-interpolation-symbols" role="doc-backlink">Alternate Interpolation Symbols</a></h3>
<p>In the early stages of this PEP, we considered allowing alternate symbols for
interpolations in template strings. For example, we considered allowing
<code><span>${name}</span></code> as an alternative to <code><span>{name}</span></code> with the idea that it might be useful
for i18n or other purposes. See the
<a href="https://discuss.python.org/t/pep-750-tag-strings-for-writing-domain-specific-languages/60408/122">Discourse thread</a>
for more information.</p>
<p>This was rejected in favor of keeping t-string syntax as close to f-string syntax
as possible.</p>
</section>
<section id="alternate-layouts-for-template">
<h3><a href="#alternate-layouts-for-template" role="doc-backlink">Alternate Layouts for <code><span>Template</span></code></a></h3>
<p>During the development of this PEP, we considered several alternate layouts for
the <code><span>Template</span></code> type. Many focused on a single <code><span>args</span></code> tuple that contained
both strings and interpolations. Variants included:</p>
<ul>
<li><code><span>args</span></code> was a <code><span>tuple[str</span> <span>|</span> <span>Interpolation,</span> <span>...]`</span></code> with the promise that
its first and last items were strings and that strings and interpolations
always alternated. This implied that <code><span>args</span></code> was always non-empty and that
empty strings would be inserted between neighboring interpolations. This was
rejected because alternation could not be captured by the type system and was
not a guarantee we wished to make.</li>
<li><code><span>args</span></code> remained a <code><span>tuple[str</span> <span>|</span> <span>Interpolation,</span> <span>...]</span></code> but did not support
interleaving. As a result, empty strings were not added to the sequence. It
was no longer possible to obtain static strings with <code><span>args[::2]</span></code>; instead,
instance checks or structural pattern matching had to be used to distinguish
between strings and interpolations. This approach was rejected as offering
less future opportunity for performance optimization.</li>
<li><code><span>args</span></code> was typed as a <code><span>Sequence[tuple[str,</span> <span>Interpolation</span> <span>|</span> <span>None]]</span></code>. Each
static string was paired with is neighboring interpolation. The final
string part had no corresponding interpolation. This was rejected as being
overly complex.</li>
</ul>
</section>
<section id="mechanism-to-describe-the-kind-of-template">
<h3><a href="#mechanism-to-describe-the-kind-of-template" role="doc-backlink">Mechanism to Describe the “Kind” of Template</a></h3>
<p>If t-strings prove popular, it may be useful to have a way to describe the
“kind” of content found in a template string: “sql”, “html”, “css”, etc.
This could enable powerful new features in tools such as linters, formatters,
type checkers, and IDEs. (Imagine, for example, <code><span>black</span></code> formatting HTML in
t-strings, or <code><span>mypy</span></code> checking whether a given attribute is valid for an HTML
tag.) While exciting, this PEP does not propose any specific mechanism. It is
our hope that, over time, the community will develop conventions for this purpose.</p>
</section>
<section id="binary-template-strings">
<h3><a href="#binary-template-strings" role="doc-backlink">Binary Template Strings</a></h3>
<p>The combination of t-strings and bytes (<code><span>tb</span></code>) is considered out of scope for
this PEP. However, unlike f-strings, there is no fundamental reason why t-strings
and bytes cannot be combined. Support could be considered in a future PEP.</p>
</section>
</section>
<section id="acknowledgements">
<h2><a href="#acknowledgements" role="doc-backlink">Acknowledgements</a></h2>
<p>Thanks to Ryan Morshead for contributions during development of the ideas leading
to template strings. Special mention also to Dropbox’s
<a href="https://github.com/dropbox/pyxl">pyxl</a> for tackling similar ideas years ago.
Andrea Giammarchi provided thoughtful feedback on the early drafts of this PEP.
Finally, thanks to Joachim Viide for his pioneering work on the <a href="https://github.com/jviide/tagged">tagged library</a>. Tagged was not just the precursor to
template strings, but the place where the whole effort started via a GitHub issue
comment!</p>
</section>
<section id="copyright">
<h2><a href="#copyright" role="doc-backlink">Copyright</a></h2>
<p>This document is placed in the public domain or under the CC0-1.0-Universal
license, whichever is more permissive.</p>
</section>
</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[My Own Private Binary: An Idiosyncratic Introduction to Linux Kernel Modules (246 pts)]]></title>
            <link>https://www.muppetlabs.com/~breadbox/txt/mopb.html</link>
            <guid>43647294</guid>
            <pubDate>Thu, 10 Apr 2025 19:29:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.muppetlabs.com/~breadbox/txt/mopb.html">https://www.muppetlabs.com/~breadbox/txt/mopb.html</a>, See on <a href="https://news.ycombinator.com/item?id=43647294">Hacker News</a></p>
<div id="readability-page-1" class="page">
<h2>My Own Private Binary</h2>



<hr>

<h3>How This Began</h3>

<p>Several years ago, I spent a serious chunk of time figuring out how to
make really teensy ELF executable files. I started down this path
because I was annoyed that all of my programs, no matter how short
they were, never got smaller than 4k or so. I felt that was excessive,
for C, and so I started looking at what ELF files contained, and how
much of that actually needed to be there. (And then, after a while,
how much of it was supposed to be there but could be ripped out
anyway.) Anyway, I eventually managed to shrink an executable down to
45 bytes, and I was able to demonstrate that that was the smallest
possible size an ELF executable could be and still run, under x86
Linux at least.</p>

<p><a href="https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html">I wrote up my findings</a>, and
some people found it interesting, and I got some positive feedback. A
couple of people naturally pointed out that a shell script that did
the same thing was much shorter than 45 bytes, to which my response
was always that a shell script is not an executable, and if you want
to consider scripts then you need to include the size of the
interpreter binary along with the script size.</p>

<p>But then one Internet Random Person™ pointed out that I could
have made a smaller executable if I had created an <a href="https://www.muppetlabs.com/~breadbox/software/tiny/tiny-aout.asm.txt">aout
binary</a> instead. If you
don't know what aout files are, don't worry — that just means you're
not old. (They are also called "a.out files", but that can be easily
confused with just a file named "a.out", so I prefer to spell the name
of the format "aout".) At one time the aout format was widely used on
Linux, because it was Linux's only binary format. ELF was not
introduced to Linux until version 2.0 (or more precisely in one of the
1.x experimental kernels). aout was, and still is, a very simple
format. It sports a 32-byte header, along with a handful of other
metadata. Unfortunately the aout format has some annoying limitations
around dynamic linking, so the fact that Linux switched away from it
early on is not too surprising. ELF is a much nicer format for a
mature system. But even though aout binaries were no longer
fashionable, they still worked.</p>

<p>However, when I first tried to run the aout executable the person had
sent me, I got an "Exec format error" message — i.e. this file format
is not supported. It turned out that a security issue had been
uncovered at one point that involved aout core dumps. (Did you know?
Executable file formats come with their own core dump file formats to
match.) I'm vague on the details, but as a result most distros started
compiling their kernels without aout support. The format was
considered to be pretty thoroughly deprecated by that time, so it
wasn't seen as a difficult call to make.</p>

<p>(Support for aout is still present in the kernel source tree, however,
and you're free to include it if you compile your own kernel. At the
time of this writing there was talk about removing it entirely, but
apparently some architectures still have a use for it. Some people
have suggested removing support just for aout core dumps, but in the
absence of a pressing issue it remains as it is. The whole
conversation is a good reminder that adding a feature to software is
often far easier than removing it.)</p>

<p>But so I did compile a kernel with aout support, and verify that the
35-byte binary did in fact work. And the whole thing got me to
wondering, <em>how many executable file formats does Linux actually
support?</em> I looked into it, and I found out that the way in which
Linux handles binary formats is a dynamic feature of the kernel. That
is to say, it's relatively straightforward to add support for a new
format, without having to recompile your kernel, or reboot your
machine even.</p>

<p>An aside: I want to clarify that I'm not talking about the
"miscellaneous binary format" feature of the kernel. That feature
allows you to dynamically designate an interpreter to be run when the
user attempts to execute certain files. Thus, for example, running a
file ending in <code>.jar</code> can automatically invoke the JavaVM for you.
That feature is controlled via the <code>/proc/sys/fs/binfmt_misc</code> system,
so check out the <code>binfmt_misc</code> documentation if you're curious.
Interpreters are not what I'm interested in here, though; I'm focusing
exclusively on actual binary files.</p>


<p>What I was secretly hoping to discover was if a "flat" format existed
— that is, a binary file format with no metadata at all. Obviously,
such a format would allow for even smaller executables. No such format
was supported, however. But that isn't too surprising, as such a
format isn't very useful. Where there is no metadata, there are no
features, no options. A flat format is a one-size-fits-all approach,
and that's not what most people need from their binary format
standards.</p>

<p>In order to avoid confusion, I should mention here that the Linux
kernel does have support for a format that is <em>called</em> "flat", but
this is just the name of the uClinux native binary format. It is
actually larger and more featureful than the aout format from which it
was derived. Presumably this format is flat along some other
dimension.</p>


<p>Despite such shortcomings, it so happens that there is a flat,
metadata-less executable file format that is well supported on another
popular OS. If you haven't already guessed, I'm referring to the
<code>.com</code> file format that MS Windows supports, having inherited it from
MS-DOS, which in turn inherited it from CP/M. It is truly flat. When
you run a <code>.com</code> file, the OS loads the whole thing in memory at a
standard address and runs it. And this approach works okay on a
single-tasking system like MS-DOS. (Or rather, on the MS-DOS-like
subsystem that MS Windows presents to a running <code>.com</code> file.) In that
environment, the OS can say, "Here you go, program. You have 640
kilobytes of RAM. Have fun!"</p>

<p>And so naturally I asked myself, <em>what would it take to get a <code>.com</code>
file format working under Linux?</em> I mean yes it would not be terribly
useful … but it would let me make the smallest executable file ever.
Sure, I could never hope to get support for such a format added to the
actual Linux kernel. But I <em>could</em> add it to my own kernel, where at
least I would be able to use it myself. I could be living in my own
private binary.</p>

<h3>Kernel Modules</h3>

<p>Linux makes it easy to do this sort of thing via <em>loadable kernel
modules</em>. What exactly is a kernel module? Basically, a kernel module
is an object file built for the kernel that just hasn't been linked
yet. The trick is that you can link one into a running kernel without
having to stop the kernel or even pull over. (This isn't quite the
same thing as what is generally meant by "dynamic linking", though it
is very similar in spirit.) Kernel modules mainly allow users to
manage support for various kinds of hardware dynamically, but they
allow you to add support for all kinds of things without having to
recompile the kernel. So let's take a moment and look at how to create
a kernel module.</p>

<p>Before we get started, we need to make sure that the kernel's header
files are present on the machine. For users on Debian-based systems,
this is typically done with the shell command:</p>

<p><code>uname(1)</code> is used to ensure that you're
getting the files that match the specific version of the kernel you're
currently running.</p>
<p>$ <b>sudo apt install linux-headers-$(uname -r)</b><br>Reading package lists... Done<br>Building dependency tree<br>Reading state information... Done<br>The following NEW packages will be installed:<br>  linux-headers-4.15.0-156-generic<br>0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.<br>        <b>⋮</b><br>/etc/kernel/header_postinst.d/dkms:<br> * dkms: running auto installation service for kernel 4.15.0-156-generic<br>   ...done.</p>

<p>This will install a directory under <code>/usr/src</code> corresponding to the
your current kernel version. (In fact, you may find that you already
have several directories located there, one for every version of the
kernel that you can currently boot into.) This directory contains,
among other things, all of the header files that we'll need to build
kernel modules.</p>

<p>We'll start with a very simple one, predictably named "hello kernel".</p>

<table><tbody><tr><td></td><td rowspan="2"><i>hello.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/init.h&gt;

MODULE_LICENSE("GPL");
MODULE_AUTHOR("me");
MODULE_DESCRIPTION("hello kernel");
MODULE_VERSION("0.1");

static int __init hello_init(void)
{
    printk(KERN_INFO "hello, kernel\n");
    return 0;
}

static void __exit hello_exit(void)
{
    printk(KERN_INFO "goodbye, kernel\n");
}

module_init(hello_init);
module_exit(hello_exit);
</code></pre></td></tr></tbody></table>

<p>A quick rundown of what is being done here:</p>

<table><tbody><tr><td><pre><code>#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/init.h&gt;
</code></pre></td><td>The header file <code>linux/module.h</code> defines the
<code>MODULE_*</code> macros, <code>linux/init.h</code> defines the <code>__init</code> and <code>__exit</code>
macros, and <code>linux/kernel.h</code> gives us the <code>printk()</code> function.</td></tr><tr><td><pre><code>MODULE_LICENSE("GPL");
MODULE_AUTHOR("me");
MODULE_DESCRIPTION("hello kernel");
MODULE_VERSION("0.1");
</code></pre></td><td>These macros just insert some metadata into
our module. You can view this information via the <code>modprobe(1)</code>
utility. Among other things, the kernel keeps track of the presence of
non-free software.<p>⋮</p></td></tr><tr><td><pre><code>module_init(hello_init);
module_exit(hello_exit);
</code></pre></td><td>And then there are two special functions,
the <em>init</em> function and the <em>exit</em> function. The <code>module_init()</code> and
<code>module_exit()</code> macros mark which function is which, so the kernel can
find them. The first one gets called at the time the module is inserted
into a running kernel, and the second one gets called when the module
is being removed from the kernel.</td></tr></tbody></table>

<p>The kernel folks have made it extremely easy to build kernel modules.
Here's the makefile:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>Makefile</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>obj-m = hello.o
kver = $(shell uname -r)
all:
	make -C /lib/modules/$(kver)/build/ M=$(PWD) modules
clean:
	make -C /lib/modules/$(kver)/build M=$(PWD) clean
</code></pre></td></tr></tbody></table>

<p>All you do is put the name of your object file on the first line,
and everything else is done for you.</p>

<p>So, if we run <code>make(1)</code>, a bunch of stuff will get created:</p>

<p>$ <b>ls</b><br>hello.c  Makefile<br>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/hello modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/hello/hello.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/hello/hello.mod.o<br>  LD [M]  /home/breadbox/km/hello/hello.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>ls</b><br>hello.c   hello.mod.c  hello.o   modules.order<br>hello.ko  hello.mod.o  Makefile  Module.symvers</p>

<p>There's <code>hello.o</code>, a regular object file, but we also have an object
file named <code>hello.ko</code>. This is the kernel module. We have become
kernel developers.</p>

<p>The <code>insmod(8)</code> tool can be used to load this module into the running
kernel:</p>

<p>$ <b>sudo insmod ./hello.ko</b><br>$ <b>lsmod | head</b><br>Module                  Size  Used by<br>hello                  16384  0<br>nls_iso8859_1          16384  0<br>uas                    24576  0<br>usb_storage            69632  1 uas<br>btrfs                1155072  0<br>zstd_compress         163840  1 btrfs<br>xor                    24576  1 btrfs<br>raid6_pq              114688  1 btrfs<br>ufs                    77824  0</p>

<p>When we type <code>lsmod(8)</code> to list the active modules, it's right there at
the top, as the most recently added module.</p>

<p>The actual effect of this module is simply to output some log
messages. We can use <code>dmesg(8)</code> to verify that our module really did
load:</p>

<p>$ <b>dmesg | tail -n4</b><br>[2419362.787463] e1000e: eth3 NIC Link is Up 1000 Mbps Full Duplex, Flow Control: Rx/Tx<br>[2448541.604799] EXT4-fs (sda1): re-mounted. Opts: (null)<br>[2474408.687761] usb 5-1: USB disconnect, device number 14<br>[2478627.755269] hello, kernel</p>

<p>We can then use <code>rmmod(8)</code> to remove the module from the running
kernel whenever we want:</p>

<p>$ <b>sudo rmmod hello</b><br>$ <b>dmesg | tail -n4</b><br>[2448541.604799] EXT4-fs (sda1): re-mounted. Opts: (null)<br>[2474408.687761] usb 5-1: USB disconnect, device number 14<br>[2478627.755269] hello, kernel<br>[2478639.607702] goodbye, kernel</p>

<p>So that's all there is to writing kernel modules.</p>

<p>No, of course that's not true. Writing a useful kernel module does
require some specialized knowledge. For example, kernel modules don't
have access to <code>libc</code>, since <code>libc</code> itself is mainly an abstraction
layer that sits atop the kernel. That said, much of the functionality
you're used to having easy access to as a C programmer is also present
in the kernel, though sometimes in slightly different dress.
(Filesystems, for example, are one bit of detail that we as Unix
programmers often ignore, but are obviously a major concern inside the
kernel.)</p>

<p>But don't let all that deter you. The rewards of writing kernel
modules are worth the inconveniences. There is a great deal that you
can do inside a kernel module that is simply impossible outside of it.
Remember, Linux is a monolithic kernel — which means that once you
are loaded, you have the keys to the kingdom. Your lowly, nonstandard
kernel module can do <em>anything</em>. Of course, this is a double-edged
sword, because that also means that you can <em>accidentally</em> do
anything. As it happens, a lot of bad things are actually pretty hard
to do accidentally, such as mucking up some other process's code.
You'd need to jump through a few hoops just to get a pointer to
someone else's memory. But some unfortunate things are remarkably easy
to do. For example, one time while working on my kernel module, I
accidentally put <code>--i</code> instead of <code>++i</code> in the iterator of my <code>for</code>
loop. I inserted that module into my kernel to test it, and my mouse
cursor disappeared, and my music stopped playing … and then it was
time to reboot my computer.</p>

<p>But that sort of risk shouldn't scare you away. With modern journaling
file systems and the like, you're never going to be at any real risk
of losing data. (I mean, unless you're actually working on
implementing a filesystem, in which case please back up your files
regularly.) I encourage you to experiment and try out your own ideas
for kernel modules.</p>

<h3>Binary File Formats Under Linux</h3>

<p>All right, but what exactly does this have to do with making smaller
executables? Well, as I mentioned earlier, the kernel's list of
accepted binary file formats is dynamic. Specifically, this means that
there are functions inside the kernel that allow code to add and
remove binary formats from this list.</p>

<p>This is done by registering a set of callback functions, and these
callbacks get invoked when the kernel is asked to execute a binary
file. The kernel invokes the callbacks on this list, and the first one
that claims to recognize the file takes responsibility for getting it
properly loaded into memory. If nobody on the list accepts it, then as
a last resort the kernel will attempt to treat it as a shell script
without a shebang line. And if that doesn't fly, then you'll get that
"Exec format error" message described above. </p><p>Interesting side note:
The kernel decides whether or not to try to parse a file as a shell
script by whether or not it contains a line break in the first few
hundred bytes — specifically if it contains a line break before the
first zero byte. Thus a data file that just happens to have a "<code>\n</code>"
near the top can produce some odd-looking error messages if you try to
execute it.</p>


<p>So we find ourselves in possession of the following facts:</p>

<ol>
<li>The Linux kernel can dynamically introduce new binary file formats.</li>
<li>Kernel modules can be added to a running kernel.</li>
<li>Being able to run flat binaries would be really neat.</li>
</ol>

<p>Obviously, there is only one possible response to this situation.</p>

<h3>Version 0.1: Look Ma, No Metadata</h3>

<p>We wish to write a kernel module that implements a flat, metadata-less
binary file format for Linux. So, that's what I did.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/init.h&gt;

#include &lt;linux/fs.h&gt;
#include &lt;linux/mm.h&gt;
#include &lt;linux/mman.h&gt;
#include &lt;linux/string.h&gt;
#include &lt;linux/errno.h&gt;
#include &lt;linux/binfmts.h&gt;
#include &lt;linux/personality.h&gt;
#include &lt;linux/processor.h&gt;
#include &lt;linux/ptrace.h&gt;
#include &lt;linux/sched/task_stack.h&gt;

MODULE_DESCRIPTION("Linux command executable files");
MODULE_AUTHOR("Brian Raiter &lt;breadbox@muppetlabs.com&gt;");
MODULE_VERSION("0.1");
MODULE_LICENSE("GPL");

/* Given an address or size, round up to the next page boundary.
 */
#define pagealign(n)  (((n) + PAGE_SIZE - 1) &amp; PAGE_MASK)

static struct linux_binfmt comfile_fmt;

static int load_comfile_binary(struct linux_binprm *lbp)
{
    long const loadaddr = 0x00010000;

    char const *ext;
    loff_t filesize;
    int r;

    ext = strrchr(lbp-&gt;filename, '.');
    if (!ext || strcmp(ext, ".com"))
        return -ENOEXEC;

    r = flush_old_exec(lbp);
    if (r)
        return r;
    set_personality(PER_LINUX);
    set_binfmt(&amp;comfile_fmt);
    setup_new_exec(lbp);

    filesize = generic_file_llseek(lbp-&gt;file, 0, SEEK_END);
    generic_file_llseek(lbp-&gt;file, 0, SEEK_SET);

    current-&gt;mm-&gt;start_code = loadaddr;
    current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + filesize;

    r = setup_arg_pages(lbp, STACK_TOP, EXSTACK_DEFAULT);
    if (r)
        return r;

    r = vm_mmap(lbp-&gt;file, loadaddr, filesize,
                PROT_READ | PROT_WRITE | PROT_EXEC,
                MAP_FIXED | MAP_PRIVATE, 0);
    if (r &lt; 0)
        return r;

    install_exec_creds(lbp);
    /*finalize_exec(lbp);*/
    start_thread(current_pt_regs(), loadaddr,
                 current-&gt;mm-&gt;start_stack);
    return 0;
}

static struct linux_binfmt comfile_fmt = {
    .module = THIS_MODULE,
    .load_binary = load_comfile_binary,
    .load_shlib = NULL,
    .core_dump = NULL,
    .min_coredump = 0
};

static int __init comfile_start(void)
{
    register_binfmt(&amp;comfile_fmt);
    return 0;
}

static void __exit comfile_end(void)
{
    unregister_binfmt(&amp;comfile_fmt);
}

module_init(comfile_start);
module_exit(comfile_end);
</code></pre></td></tr></tbody></table>

<p>Unlike our first kernel module, this one is actually doing some
interesting work. So let's take the time to walk through this code and
understand what's going on.</p>

<table><tbody><tr><td><pre><code>static int __init comfile_start(void)
{
    register_binfmt(&amp;comfile_fmt);
    return 0;
}

static void __exit comfile_end(void)
{
    unregister_binfmt(&amp;comfile_fmt);
}
</code></pre></td><td>Our very-short init function just calls
<code>register_binfmt()</code>, and likewise our exit function calls
<code>unregister_binfmt()</code>. As you have probably already guessed, these are
the functions that add and remove support for a new binary format. The
argument to both functions is a pointer to a static struct of type
<code>linux_binfmt</code>.</td></tr><tr><td><pre><code>static struct linux_binfmt comfile_fmt = {
    .module = THIS_MODULE,
    .load_binary = load_comfile_binary,
    .load_shlib = NULL,
    .core_dump = NULL,
    .min_coredump = 0
};
</code></pre></td><td>The important fields of the <code>linux_binfmt</code>
struct are three function pointers. They provide callbacks for loading
an executable, loading a shared-object library, and dumping a core
file. Thankfully, those latter two features are optional, so we can
leave them unimplemented, and just provide the first callback.</td></tr><tr><td><pre><code>static int load_comfile_binary(struct linux_binprm *lbp)
</code></pre></td><td>And this function is where all the work gets
done. It will be invoked by the kernel every time someone is
attempting to execute one of our files, and its purpose is to get the
file's contents into memory and running. The function is passed a
single argument, <code>lbp</code>, which is a pointer to a struct called
<code>linux_binprm</code> that contains our actual arguments. It has a dozen or
so fields that summarize everything the kernel knows about our file.
The callback returns an <code>int</code> value, as is typical for internal kernel
functions. If all goes well, the return value is zero. When an error
occurs, the function should return a negative number that corresponds
to a negated <code>errno</code> value.</td></tr></tbody></table>

<p>Recall how a program is launched under Unix: first the <code>fork</code> system
call is used to duplicate the process, and then the <code>execve</code>
system call replaces the process's current program with a new one.
</p><p>Note that the <code>fork</code> system call is not quite the same thing as the
<code>fork()</code> function supplied by <code>libc</code>, although the latter is just a
thin wrapper around the former. Similarly, <code>libc</code> provides a family of
seven different "exec" functions, but they all ultimately invoke the
<code>execve</code> system call.</p>


<p>The nice thing about this system is that we never have to worry about
actually creating a process from scratch. That's done for us. Every
program's process is a copy of pid 1, duplicated through a succession
of <code>fork</code>s. Our callback will instead be invoked during the <code>execve</code>
system call. In effect, when the kernel calls us, it is asking, "Hey,
I've got a file here. The user claims it's an executable binary, but
it's not an ELF file. Do <em>you</em> want to deal with it?" Every callback
function that has been registered with <code>register_binfmt()</code> gets
called, in order, going down the list, until someone takes
responsibility for the file.</p>

<p>So that's the first thing our callback function needs to do: it needs
to decide whether or not this is actually a <code>.com</code> file. Which raises
the obvious question: how do we even do that? Most binary formats
looks for a magic-number identifier in the first few bytes of metadata
— but we have no metadata. So then what?</p>

<p>Well, how does MS Windows identify <code>.com</code> files? Answer: it looks at
the filename. When you try to execute a file with a name ending in
"<code>.com</code>", that's all MS Windows really cares about. "Oh, you're a
<code>.com</code> file, are you? Okay: here's 640k and an interrupt table. Call
me when you're done."</p>

<table><tbody><tr><td><pre><code>    ext = strrchr(lbp-&gt;filename, '.');
    if (!ext || strcmp(ext, ".com"))
        return -ENOEXEC;
</code></pre></td><td>So that's what we do, too. One of the
fields of the <code>linux_binprm</code> struct is the filename, so we examine it,
and if there's no "<code>.com</code>" extension, then we return negative
<code>ENOEXEC</code>, the <code>errno</code> equivalent to our "Exec format error" message.
This error normally means "this is not an executable", but in this
particular context, it really means "this is not one of my
executables." When the kernel gets this return value, it will just
continue trying other formats. If all the callbacks return this value,
then <code>ENOEXEC</code> will actually get returned from <code>execve</code> itself, which
<code>libc</code> will then package up and store in <code>errno</code>. But, if it does end
in "<code>.com</code>", then our callback continues.</td></tr></tbody></table>

<p>All we have to do now is load and run the file. No pressure, right?
Luckily for us, the kernel provides lots of functions that will do
almost all of the heavy lifting for us. We just need to oversee the
whole process. So let's quickly run down the sequence of events.</p>

<table><tbody><tr><td><pre><code>    r = flush_old_exec(lbp);
    if (r)
        return r;
</code></pre></td><td>The very first thing we do is call
<code>flush_old_exec()</code>. Boom. Nearly everything that was specific to the
old process is now gone. The process is now an empty salt flat,
extending featurelessly to the horizon. Wait, that's a little bleak.
Instead, let's imagine it as a fallow field, ready for planting. Note
also that if a non-zero value is returned, then a failure occurred, in
which case we dutifully pass the negated <code>errno</code> value back up the
call chain.</td></tr><tr><td><pre><code>    set_personality(PER_LINUX);
</code></pre></td><td>Personality is an obscure feature that
allows certain behaviors of the kernel to vary on a per-process basis.
For whatever reason, it's not reset by the flush.</td></tr><tr><td><pre><code>    set_binfmt(&amp;comfile_fmt);
</code></pre></td><td>The <code>set_binfmt()</code> function explicitly claims
this binary as one of our own. As far as I can tell, this is only used
for debugging purposes.</td></tr><tr><td><pre><code>    setup_new_exec(lbp);
</code></pre></td><td><code>setup_new_exec()</code> initializes the process to
some basic defaults, and allows for any architecture-specific
initializations to occur.</td></tr><tr><td><pre><code>    filesize = generic_file_llseek(lbp-&gt;file, 0, SEEK_END);
    generic_file_llseek(lbp-&gt;file, 0, SEEK_SET);
</code></pre></td><td>At this point we are now cleared to start
defining our memory image, which is currently very empty. So the first
thing we want to do is determine how big the file is, since that's
also the size of program. Inside the kernel, we don't have the
familiar file descriptors. Instead, we have file objects. As you might
expect, the <code>linux_binprm</code> struct includes an already-opened file
object, and the kernel function <code>generic_file_llseek()</code> works pretty
much the same as <code>libc</code>'s more familiar <code>lseek()</code> function for
retrieving the file size.</td></tr><tr><td><pre><code>    current-&gt;mm-&gt;start_code = loadaddr;
    current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + filesize;
</code></pre></td><td><code>current</code> is a global variable that points
to the current task. A task is like a process or a thread, except that
instead of being a numerical identifier, it's the actual thing itself
— the noumenon, the <em>ding-an-sich</em>. It's a struct with literally
hundreds of fields. It's, like, really big. Pretty much anything you
might want to know about a process is in this thing, somewhere. One of
those things is the task's memory manager. And right now, the memory
manager is eager to know where the process's component parts are going
to be located. Since our format is so simple — all we have is a blob
of code — we mainly need to provide a valid load address. There
aren't too many requirements for this address. It just needs to be
page-aligned, well away from the stack, and not zero. I selected
<code>0x10000</code> as our load address because there wasn't a particular reason
not to.</td></tr><tr><td><pre><code>    r = setup_arg_pages(lbp, STACK_TOP, EXSTACK_DEFAULT);
    if (r)
        return r;
</code></pre></td><td>We aren't setting up anything else that
processes typically contain, because we're just so down to earth like
that, so we can go straight to calling <code>setup_arg_pages()</code>. This
function finalizes the location and access permissions of the stack.</td></tr><tr><td><pre><code>    r = vm_mmap(lbp-&gt;file, loadaddr, filesize,
                PROT_READ | PROT_WRITE | PROT_EXEC,
                MAP_FIXED | MAP_PRIVATE, 0);
    if (r &lt; 0)
        return r;
</code></pre></td><td>And now that that's official, let's
actually load something into memory. Yes folks, it's finally time to
call <code>vm_mmap()</code>. This function is basically identical to <code>libc</code>'s
<code>mmap()</code>, and is the natural way to load a file into (page-aligned)
memory. Of course, normally when you call <code>mmap()</code> with a fixed load
address you need to handle the case where that address is already in
use. We don't need to worry about that here, as nothing is currently
in use. We're requesting that the memory be marked as readable,
writeable, and executable. Traditionally, programs will place their
code into non-writeable memory, and store variable data in memory that
is writeable but not executable. And that's definitely the safer way
to do things, but we can't be bothered with all that. After all, the
<code>.com</code> format hearkens back to a simpler time, when RAM was RAM, and
didn't come with geegaws like protection. Staying true to this
approach is a way of honoring our roots. Also, without metadata it's
basically impossible to know which parts of the file are code and
which are data, so we don't really have a choice, but it sounds better
if we claim it's because of our heritage.</td></tr><tr><td><pre><code>    install_exec_creds(lbp);
</code></pre></td><td>We now call <code>install_exec_creds()</code>, which
will set up the correct user ID vs effective user ID, in case it needs
to be changed.</td></tr><tr><td><pre><code>    /*finalize_exec(lbp);*/
</code></pre></td><td>The function <code>finalize_exec()</code> does something
with the stack's <code>rlimit</code> value. I'm a little vague on its purpose
because it's somewhat new. In fact, it doesn't even exist on my
kernel version, which is why it's commented out in my code. If you're
running a 5.x kernel or later, feel free to restore it.</td></tr><tr><td><pre><code>    start_thread(current_pt_regs(), loadaddr,
                 current-&gt;mm-&gt;start_stack);
    return 0;
</code></pre></td><td>And then, at last, we call
<code>start_thread()</code>. This is the big one. We pass it a pointer to a
struct that contains the process's current register values, a pointer
to the top of the stack, and most importantly, the address for the
instruction pointer (which for us is the same thing as the load
address). The process is now ready to be scheduled. And, since we have
indeed made it this far, we return zero to indicate success.</td></tr></tbody></table>

<p>Phew. It's definitely not trivial, the process of setting up a
process. But as I said, all of the real work is done by other code.</p>

<p>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/com modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/com/comfile.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/com/comfile.mod.o<br>  LD [M]  /home/breadbox/km/com/comfile.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>sudo insmod comfile.ko</b><br>$ <b>lsmod | head -n3</b><br>Module                  Size  Used by<br>comfile                16384  0<br>nls_iso8859_1          16384  0</p>

<p>Now in order to actually put this kernel module to the test, we'll
need a program to execute. Specifically, we need to create a binary
file in our flat, metadata-less format. One that actually does
something.</p>

<p>The down side of creating our own binary file format is that none of
our usual tools know anything about it. If we want to build a program
in this format, we're on our own here. But, our format is so utterly
simple that this shouldn't be hard. However, it does mean that we'll
need to use assembly code.</p>

<p>As is traditional, our minimal test program will be one that exits
with a status code of 42. In order to make a system call under 64-bit
Linux, we need to set <code>rax</code> to the system call number, and <code>rdi</code> to
the (first) argument, and then use the <code>syscall</code> instruction. The
<code>exit</code> system call is assigned the ID number 60, so this should be all
we need:</p>

<p>$ <b>cat &gt;tiny.asm</b><br>BITS 64<br>	mov	rax, 60<br>	mov	rdi, 42<br>	syscall<br>$ <b>nasm -f bin -o tiny.com tiny.asm</b><br>$ <b>chmod +x tiny.com</b><br>$ <b>wc -c tiny.com</b><br>     12 tiny.com</p>

<p>The <code>bin</code> format is <code>nasm</code>'s name for its flat binary output format,
so what we get in our output file is nothing more than the assembly
code that we specified.</p>

<p>$ <b>./tiny.com</b><br>$ <b>echo $?</b><br>42</p>

<p>Our project has borne fruit. Behold: it works, and it's twelve bytes
in size. And we can verify that it is, in fact, our kernel module that
is actually loading and running it:</p>

<p>$ <b>sudo rmmod comfile</b><br>$ <b>./tiny.com</b><br>bash: ./tiny.com: cannot execute binary file: Exec format error<br>$ <b>sudo insmod ./comfile.ko</b><br>$ <b>./tiny.com</b><br>$ <b>echo $?</b><br>42</p>

<p>This delightfully unadulterated binary file is almost a quarter the
size of the smallest possible ELF executable, and less than a third
the size of the aout executable that inspired this (admittedly
ridiculous) exploration. And with zero bytes of overhead in our file
format, we can be confident that no binary using a format that
includes metadata can touch this one.</p>

<p>Although, of course, if we're going to start crowing about the size,
then we should probably go ahead and use the smallest possible
instructions.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>tiny.asm</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>BITS 64
	push	42
	pop	rdi
	mov	al, 60
	syscall
</code></pre></td></tr></tbody></table>

<p><code>rdi</code> can be initialized in only three bytes of machine code, and
<code>rax</code> can be initialized in even less, thanks to the fact that it is
pre-initialized to zero.</p>

<p>$ <b>nasm -f bin -o tiny.com tiny.asm</b><br>$ <b>chmod +x tiny.com</b><br>$ <b>./tiny.com</b><br>$ <b>echo $?</b><br>42<br>$ <b>wc -c tiny.com</b><br>      7 tiny.com</p>

<p>Seven bytes. <em>Seven!</em></p>

<p>To be clear, this is very much a nonstandard binary, and therefore it
in no way invalidates or supplants my 45-byte ELF executable (or the
aout executable). But it does make me very happy.</p>

<h3>Further Testing of the Waters</h3>

<p>We should try writing a few more programs, just to verify that our
kernel module really does work in general. Let's try a proper
hello-world program.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>hello.asm</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>BITS 64

	org	0x10000

	mov	eax, 1			; rax = 1: write system call
	mov	edi, eax		; rdi = 1: stdout file desc
	lea	rsi, [rel str]		; rsi = pointer to string
	mov	edx, strlen		; rdx = string length
	syscall				; call write(rdi, rsi, rdx)
	mov	eax, 60			; rax = 60: exit system call
	xor	edi, edi		; rdi = 0: exit code
	syscall				; call exit(rdi)

str:	db	'hello, world', 10
strlen equ $ - str
</code></pre></td></tr></tbody></table>

<p>More assembly, yes, but it's very straightforward for assembly. It
compiles down to a 43-byte binary, and it does work:</p>

<p>$ <b>nasm -f bin -o hello.com hello.asm</b><br>$ <b>chmod +x hello.com</b><br>$ <b>./hello.com</b><br>hello, world<br>$ <b>wc -c hello.com</b><br>     43 hello.com</p>

<p>By using shorter instructions, we could reduce this program to 35
bytes, perhaps less. I will leave that as an exercise to the
interested reader.</p>

<p>As long as our programs only use a fixed amount of data, we can
allocate space by just adding it to our binary file. If we need to
allocate space dynamically, however, then that's going to be a
problem. Why? Because our processes don't have a heap. Why not?
Because we didn't set one up in our loader. Oops.</p>

<h3>Version 0.2: On Having a Heap</h3>

<p>Let's address this oversight by going back to our kernel module and
adding a few more lines of code. It's actually pretty easy. We just
need to let the memory manager know what we want.</p>

<p>Most programs use a memory layout that looks something like this:</p>

<table>
<tbody><tr>
<td>Code</td>
<td>Data</td>
<td>Heap</td>
<td></td>
<td>Stack</td>
</tr>
</tbody></table>

<p>The sections are frequently broken up for the purpose of providing
different access rights. Code sections are marked executable but not
writeable, and the other sections are marked writeable and not
executable. The code and data sections have a constant size, while the
heap and the stack change in size as the program runs, with the heap
growing upwards and the stack growing downwards. (And if they meet in
the middle, then you've run out of memory — although on a 64-bit
machine you'll run out of physical RAM long before that point.) For
historical reasons, the end of the heap is called the <em>program break</em>,
and the <code>brk</code> system call can be used to move it around. </p><p>If we're
being pedantic, we should note that access permissions are not
attached to the memory itself, but rather to the addresses. Different
address ranges can be mapped to the same physical memory but with
different permissions. This is not a distinction we need to worry
about here.</p>


<p>So let's tell the memory manager that we want our processes to enjoy
the benefits of a heap:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    filesize = generic_file_llseek(lbp-&gt;file, 0, SEEK_END);</span>
<span>    generic_file_llseek(lbp-&gt;file, 0, SEEK_SET);</span>
    allocsize = PAGE_ALIGN(filesize);
<span></span>
<span>    current-&gt;mm-&gt;start_code = loadaddr;</span>
<span>    current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + filesize;</span>
    current-&gt;mm-&gt;start_data = current-&gt;mm-&gt;end_code;
    current-&gt;mm-&gt;end_data = loadaddr + allocsize;
    current-&gt;mm-&gt;start_brk = current-&gt;mm-&gt;end_data;
    current-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk;
<span></span>
<span>    r = setup_arg_pages(lbp, STACK_TOP, EXSTACK_DEFAULT);</span>
<span>    if (r)</span>
<span>        return r;</span>
</code></pre></td></tr></tbody></table>

<p>The only measurement we have available to us is the file size, which
we're using to determine the size of the code section. The
<code>PAGE_ALIGN</code> macro rounds a value up to the next page boundary. Since
we can't allocate a fractional number of memory pages, we can take
whatever padding we'll get at the page's end, and let that be our data
section. Our heap will then be located directly following this. It
starts off with a size of zero, which the program can then expand as
desired.</p>

<p>(There's no reason why we couldn't define a larger data section for
our binaries, by the way. We would just need to hard-code a size for
it. Perhaps, to stay true to the MS-DOS roots of our format, we should
allocate a data section of 640k. But this requires making a second
<code>vm_mmap()</code> call to allocate non-file-backed memory, so I've chosen to
punt on that modification for the moment.)</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    r = vm_mmap(lbp-&gt;file, loadaddr, filesize,</span>
<span>                PROT_READ | PROT_WRITE | PROT_EXEC,</span>
<span>                MAP_FIXED | MAP_PRIVATE, 0);</span>
<span>    if (r &lt; 0)</span>
<span>        return r;</span>
    r = vm_brk(current-&gt;mm-&gt;start_brk, 0);
    if (r &lt; 0)
        return r;
</code></pre></td></tr></tbody></table>

<p>After memory has actually been allocated, we will set the process's
program break to its starting value. Our process should now have a
functional heap that the program can dynamically modify.</p>

<p>In order to test this new feature, I've written an implementation of
<code>cat</code>, one that reads all of standard input into memory before doing
any output. It's not an interesting program beyond being a basic
demonstration of low-level heap allocation, so I won't go into it. If
you're curious, you can see the source here:
<a href="https://www.muppetlabs.com/~breadbox/txt/mopb/cat.asm.txt"><code>cat.asm</code></a>. For now, we'll just note that it
succeeds at allocating memory at runtime:</p>

<p>On my machine, <code>/etc/mailcap</code> is a text file well over
64k in size.</p>
<p>$ <b>nasm -f bin -o cat.com cat.asm</b><br>$ <b>chmod +x cat.com</b><br>$ <b>./cat.com &lt;/etc/mailcap | cmp - /etc/mailcap</b><br>$ <b>wc -c cat.com</b><br>    100 cat.com</p>

<p>This version of <code>cat</code> is not really a <code>cat</code> utility, however, as it
can only read from standard input. A proper <code>cat</code> program — and,
indeed, a majority of proper programs — will need to be able to open
files named on the command line. So how do we access the command-line
arguments?</p>

<p>Frankly, we can't, at least not as things stand. You see, when an ELF
binary runs, it has values for <code>argc</code>, <code>argv</code>, and <code>envp</code> placed at
the top of its stack. Surprise! Those values are put there by the
loader. Yes, this issue is also the responsiblity of our kernel
module.</p>

<p>So let's add support for this, too.</p>

<h3>Version 0.3: Leaving Room for Arguments</h3>

<p>To be sure, the strings that make up the command-line arguments are
present in our process's image — specifically, they're sitting in
memory just above the stack. (Which means, given that the stack is
currently empty, that the <code>rsp</code> register currently points to them.)
But this is no neat array of string pointers. It's just a lot of
strings, one after the other. A string of strings, if you will. Worse,
the environment variables come immediately after the command-line
arguments, without any indication of where one set ends and the other
begins. So they aren't really usable, as they stand.</p>

<p>At the absolute least, a program needs to know how many of the strings
are in each set. Well, it turns out that our kernel module has exactly
that information. In the <code>linux_binprm</code> struct (provided via the
argument to our callback function, remember) there are two fields
named <code>argc</code> and <code>envc</code>. These are the number of command-line
arguments and environment variables, respectively. In theory, if we
transmit these two values to the running program, that would be enough
for the code to safely access the data. Of course, if that's all we
did, then every <code>.com</code> program would need to trawl through their
string of strings, to determine where each item begins and ends. We
could just accept that as a fact of life for programmers using our
format, but since we're doing this work anyway, why not take the time
to do it right? We should provide our processes with <code>argv</code> and <code>envp</code>
arguments — neat arrays of pointers to the strings in question —
like all the cool binary formats do.</p>

<p>Since these two arrays don't currently exist, we'll need to reserve
some memory for them. It may feel intuitive to tap our newly-minted
heap, but for this it actually makes more sense to just take it off
the top of the stack. (In fact, these arrays can be seen as forming a
sort of zeroth stack frame.) The top of the stack is at the top of
memory, which is stored in the <code>linux_binprm</code> struct in the
intuitively-named field <code>p</code>. So we want to build arrays in the memory
immediately preceding this address, and then move the top of the stack
down to precede our arrays.</p>

<p>Note, however, that we cannot use familiar functions like <code>strlen()</code>
to walk through these strings. Why? Because the memory holding these
strings isn't owned by the kernel; it belongs to the process itself.
So far, we've only been dealing with addresses in the process's
memory. We haven't tried to access that memory, except through other
functions, such as <code>vm_mmap()</code>. It can thus be easy to forget that
kernel memory and user memory exist in two different address spaces
(not to mention different permission rings). The kernel is allowed to
access user memory, of course, but it needs to be intentional about
it, and this requires some extra work.</p>

<p>Within our kernel module, we use the <code>__user</code> annotation to declare
pointers to user memory. And instead of using the <code>*</code> operator to
dereference such pointers, we have two special macros: <code>get_user()</code> to
read through a user pointer, and <code>put_user()</code> to write through one.
And the kernel provides a handful of convenient functions, like
<code>strnlen_user()</code>, that will operate on strings stored in user space.</p>

<p>Once we have gone through the strings and populated our two arrays,
we'll still need to communicate the values for <code>argc</code>, <code>argv</code>, and
<code>envp</code> to the program. The usual way to do this is to place them on
the stack, allowing the program to access them at its convenience.</p>

<p>So let's add all this to our kernel module. We'll start by defining a
separate function to handle the work of walking through the strings
and building the two arrays.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>/* Given argc + envc strings above the top of the stack, construct the
 * argv and envp arrays in the memory preceding, and then push argc,
 * argv, and envp onto the stack. Return the new stack top address.
 */
static unsigned long make_arrays(struct linux_binprm const *lbp)
{
    void* __user *sp;
    char* __user *argv;
    char* __user *envp;
    char __user *p;
    int i;

    p = (char __user *)lbp-&gt;p;
    envp = (char* __user *)ALIGN(lbp-&gt;p, sizeof *envp);
    envp = envp - (lbp-&gt;envc + 1);
    argv = envp - (lbp-&gt;argc + 1);
    sp = (void* __user *)argv - 3;

    current-&gt;mm-&gt;arg_start = (unsigned long)p;
    for (i = 0 ; i &lt; lbp-&gt;argc ; ++i) {
        put_user(p, argv + i);
        p += strnlen_user(p, MAX_ARG_STRLEN);
    }
    put_user(NULL, argv + i);
    current-&gt;mm-&gt;arg_end = (unsigned long)p;

    current-&gt;mm-&gt;env_start = (unsigned long)p;
    for (i = 0 ; i &lt; lbp-&gt;envc ; ++i) {
        put_user(p, envp + i);
        p += strnlen_user(p, MAX_ARG_STRLEN);
    }
    put_user(NULL, envp + i);
    current-&gt;mm-&gt;env_end = (unsigned long)p;

    put_user((void*)(unsigned long)lbp-&gt;argc, sp);
    put_user(argv, sp + 1);
    put_user(envp, sp + 2);

    return (unsigned long)sp;
}
</code></pre></td></tr></tbody></table>

<p>There's a fair bit of casting in this function because the kernel
tends to store user addresses as <code>unsigned long</code> values. This may
sound counterproductive, but it's somewhat natural given that kernel
code rarely dereferences such addresses. But our function wants to
work with them as pointer types, in order to take advantage of pointer
arithmetic. (We also have to cast <code>argc</code> into a pointer while we
briefly pretend that the stack is an array.)</p>

<p>With this function in our code, we just need to use it at the
appropriate time, after the stack has been created and its address has
been finalized.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>comfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    r = setup_arg_pages(lbp, STACK_TOP, EXSTACK_DEFAULT);</span>
<span>    if (r)</span>
<span>        return r;</span>
    current-&gt;mm-&gt;start_stack = make_arrays(lbp);
</code></pre></td></tr></tbody></table>

<p>In order to verify that all of these changes do in fact work, we can
write a couple more program, <a href="https://www.muppetlabs.com/~breadbox/txt/mopb/echo.asm.txt"><code>echo.asm</code></a> and
<a href="https://www.muppetlabs.com/~breadbox/txt/mopb/env.asm.txt"><code>env.asm</code></a>. Again, they aren't particularly
interesting in the details, so I won't dissect them here. But if
you're at all familiar with reading x86 assembly, they should be
relatively straightforward to understand.</p>

<div><p>$ <b>nasm -f bin -o echo.com echo.asm</b><br>$ <b>chmod +x echo.com</b><br>$ <b>./echo.com foo bar baz</b><br>foo bar baz<br>$ <b>./echo.com</b></p><p>$ <b>wc -c echo.com</b><br>     84 echo.com</p></div>

<h3>Take This Discussion of Practicality Outside</h3>

<p>At this point, we have created a binary format for the Linux kernel
that functions without metadata. Writing code for it is a bit of a
pain, though — we have to write everything in assembly, and none of
the standard tools work with our format.</p>

<p>Well, it so happens that there is something that we can do about that.
With some investment of effort, we can coax our familiar tools into
generating <code>.com</code> binaries, allowing us to use things like C compilers
once more. There's a number of steps to the whole journey, however, so
I've decided to put the gory details in a separate appendix, and I
encourage you to peruse it if you are at all curious.</p>

<p><a href="https://www.muppetlabs.com/~breadbox/txt/mopb-app.html">Click here to check out the appendix.</a></p>

<p>But for now, I don't want to be sidelined by meandering distractions
like "usability". The focus of this essay, after all, is using kernel
modules to let us produce working binaries that are <em>really teensy</em>.
We have already produced a valid seven-byte executable file, and it is
undeniably a thing of beauty. But a question immediately presents
itself.</p>

<p>Could it be even smaller?</p>

<p>Well, we can't shrink the program itself down any further. It's as
small as it can get. But maybe we could get by with a simpler program,
if we changed the binary loader a little bit. Nothing too ridiculous,
mind you. But I'm thinking … what if our binaries could just
automatically exit when they came to the end, instead of forcing the
programmer to use the <code>exit</code> system call? I mean, a majority of
programming languages work that way, right? If a Python program makes
it to the end of the file, it just quietly exits. Could we make our
binaries do that as well?</p>

<h3>Version 0.?: Hello, I Must Be Going</h3>

<p>We absolutely can. What we would need to do is append a few extra
bytes of machine code to the end of our file image. This code will
only be executed if the program would have crashed otherwise, so
one could argue that this is a purely beneficial modification to our
binary format.</p>

<p>However, it does mean that the code size will now be larger than the
file size. This alters the addresses of how we lay out memory, which
could mess with programmers' assumptions, given that programs are
generally written in low-level assembly.</p>

<p>Rather than calling this a minor feature upgrade, I therefore feel
compelled to fork the code base at this point, and give this file
format a new name, so as not to muddy the until-now transparent ABI of
the <code>.com</code> format.</p>

<p><img src="https://www.muppetlabs.com/~breadbox/txt/mopb/poster.jpg" alt="" width="190" height="250">Originally, I was planning on calling this new, extended
format "dot-e-com", or "dot-x-com" or something equally trite.
However, after some reflection, I decided to be less boring and
instead I called it the "keep-calm" (and carry on) format. This name
refers naturally to the fact that you no longer have to fret about
setting up mandatory instructions for exiting. Instead you can just
carry on, right up to the end of the program.</p>

<p>However, I decided I didn't like using <code>.calm</code> as a filename
extension. It was too easy to confuse with <code>.com</code> when said aloud. So
I instead chose to adopt the Unicode character for a crown as the
extension: <code>.</code>♚. (This is U+265A, one of the Unicode chess piece
glyphs.)</p>

<p>Now I realize that some people may find it a bit controversial to use
a non-ASCII symbol in a filename extension. But hey, the Unicode
Consortium has gone to a great deal of trouble to standardize
thousands upon thousands of glyphs, and we programmers continue to
draw upon the same 100 or so characters for our symbols, keywords, and
filenames. All these others are just sitting around, neglected. We
should start using them more. I mean, why not? Heck, put emojis in
your filenames. I'm not your dad. </p><p>Alan, if you're reading this: I
forbid you to put emojis in your filenames.</p>


<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    ext = strrchr(lbp-&gt;filename, '.');</span>
    <s>if (!ext || strcmp(ext, ".com"))</s>
    if (!ext || strcmp(ext, ".♚"))
<span>        return -ENOEXEC;</span>
</code></pre></td></tr></tbody></table>

<p>(If for whatever reason you don't trust your compiler to properly
handle Unicode characters, you can instead assume a UTF-8 environment
and write the second argument to <code>strcmp()</code> as <code>".\342\231\232"</code>.)</p>

<p>Anyway. The machine code that we want to append to the program can
be squeezed into eight bytes:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>epilog.lst</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>00000000 31FF           xor	edi, edi
00000002 678D473C       lea	eax, [edi + 60]
00000006 0F05           syscall
</code></pre></td></tr></tbody></table>

<p>That's convenient, as it means that we can stuff it all into a <code>long</code>
value, which can be stored in user memory with a simple <code>put_user()</code>.
The next change we need to make is to reserve an extra eight bytes in
the layout that we report to the memory manager.</p>

<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    filesize = generic_file_llseek(lbp-&gt;file, 0, SEEK_END);</span>
<span>    generic_file_llseek(lbp-&gt;file, 0, SEEK_SET);</span>
    <s>allocsize = PAGE_ALIGN(filesize);</s>
    codesize = filesize + 8;
    allocsize = PAGE_ALIGN(codesize);
<span></span>
<span>    current-&gt;mm-&gt;start_code = loadaddr;</span>
    <s>current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + filesize;</s>
    current-&gt;mm-&gt;end_code = current-&gt;mm-&gt;start_code + codesize;
<span>    current-&gt;mm-&gt;start_data = current-&gt;mm-&gt;end_code;</span>
<span>    current-&gt;mm-&gt;end_data = loadaddr + allocsize;</span>
<span>    current-&gt;mm-&gt;start_brk = current-&gt;mm-&gt;end_data;</span>
<span>    current-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk;</span>
</code></pre></td></tr></tbody></table>

<p>We will still use <code>filesize</code> when we call <code>vm_mmap()</code>, since we can
only map what's in the file. And here we hit a subtle point. Due to
the fact that memory is always mapped in page-sized chunks, we
typically get more memory than we ask for from <code>vm_mmap()</code> — but not
always. If the binary file happens to be exactly (or nearly exactly)
page-sized, then there won't be enough memory mapped for our
eight-byte epilog. So, we need to check for this edge case, and when
it happens we need to call <code>vm_mmap()</code> a second time to reserve a page
of anonymous memory immediately following:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    r = vm_mmap(lbp-&gt;file, loadaddr, filesize,</span>
<span>                PROT_READ | PROT_WRITE | PROT_EXEC,</span>
<span>                MAP_FIXED | MAP_PRIVATE, 0);</span>
<span>    if (r &lt; 0)</span>
<span>        return r;</span>
    if (allocsize != PAGE_ALIGN(filesize)) {
        r = vm_mmap(NULL, loadaddr + PAGE_ALIGN(filesize), PAGE_SIZE,
                    PROT_READ | PROT_WRITE | PROT_EXEC,
                    MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS, 0);
        if (r &lt; 0)
            return r;
    }
<span>    r = vm_brk(current-&gt;mm-&gt;start_brk, 0);</span>
<span>    if (r &lt; 0)</span>
<span>        return r;</span>

    put_user(0x050F3C478D67FF31, (long __user *)(loadaddr + filesize));
</code></pre></td></tr></tbody></table>

<p>And of course that ridiculous-looking 64-bit magic number at the
bottom is the little-endian encoding of our epilog.</p>

<p>We don't need to <code>rmmod</code> the previous module
this time, since we are defining a new binary format. The two can be
active simultaneously without interfering with each other.</p>
<p>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/calm modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/calm/calmfile.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/calm/calmfile.mod.o<br>  LD [M]  /home/breadbox/km/calm/calmfile.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>sudo insmod ./calmfile.ko</b><br>$ <b>lsmod | head -n3</b><br>Module                  Size  Used by<br>calmfile               16384  0<br>comfile                16384  0</p>

<p>Of the programs we've currently written, <a href="https://www.muppetlabs.com/~breadbox/txt/mopb/cat.asm.txt"><code>cat.asm</code></a>
is the best candidate to benefit from this change, having twelve
bytes' worth of machine code that can be omitted with the new format:</p>

<p>To enter a Unicode glyph at the terminal, type
Ctrl-Shift-U, followed by the codepoint number, and then Enter. The
sequence for the crown symbol is thus Ctrl-Shift-U 2 6 5 A Enter.</p>
<p>$ <b>cp -i cat.com cat.♚</b><br>$ <b>./cat.♚ &lt;hello.txt</b><br>hello, world<br>$ <b>truncate -s -12 cat.♚</b><br>$ <b>wc -c cat.♚</b><br>     88 cat.♚<br>$ <b>./cat.♚ &lt;hello.txt</b><br>hello, world<br>$ <b>echo $?</b><br>0</p>

<p>The only down side of this change is that the exit status no longer
reports error values from read failures.</p>

<p>No, that's not true. The other, more signficant, down side of this
change is that this new feature can't be used to improve the size of
our seven-byte executable! That program still has to explicitly exit,
in order to exit with a non-zero status. (And the non-zero exit is how
we can be certain that the program actually ran, and wasn't, say,
mistakenly handled as a do-nothing shell script.)</p>

<p>Well, it so happens that I have the perfect answer to both of these
concerns.</p>

<h3>Version 0.??: This Is Not At All a Ridiculous Idea</h3>

<p>The way to address these issues is to modify our epilog so that
instead of always returning zero, it uses the value at the top of the
stack as the exit code. Additionally (and here's the brilliant part),
the loader will set up our stack so that it starts out with a zero
entry at the top. That way, if the program is well-behaved and pops
everything off the stack that it pushed, it will automatically exit
with a successful zero status — but it can also quit prematurely at
any time, leaving an error code on the stack that will be
automatically transmitted to the user. This is clearly an improvement
to our original idea, right? I think it makes perfect sense, and isn't
at all contrived.</p>

<p>Fortunately, this new epilog will still fit snugly into eight bytes:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>epilog.lst</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code>00000000 5F             pop	rdi
00000001 B83C000000     mov	eax, 60
00000006 0F05           syscall
</code></pre></td></tr></tbody></table>

<p>This improvement requires only a three-line change to our kernel
module:</p>

<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    r = vm_brk(current-&gt;mm-&gt;start_brk, 0);</span>
<span>    if (r &lt; 0)</span>
<span>        return r;</span>
<span></span>
    <s>put_user(0x050F3C478D67FF31, (long __user *)(loadaddr + filesize));</s>
    put_user(0x050F0000003CB85F, (long __user *)(loadaddr + filesize));
    current-&gt;mm-&gt;start_stack -= sizeof(void*);
    put_user(0, (long __user *)current-&gt;mm-&gt;start_stack);
<span></span>
<span>    install_exec_creds(lbp);</span>
</code></pre></td></tr></tbody></table>

<p>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/calm modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/calm/calmfile.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/calm/calmfile.mod.o<br>  LD [M]  /home/breadbox/km/calm/calmfile.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>sudo rmmod ./calmfile.ko</b><br>$ <b>sudo insmod ./calmfile.ko</b></p>

<p>Once we've verified that it builds, let's revisit our current-best
seven-byte binary. That same program should work just as well in our
new format:</p>

<p>$ <b>./cat.♚ &lt;tiny.asm</b><br>BITS 64<br>	push	42<br>	pop	rdi<br>	mov	al, 60<br>	syscall<br>$ <b>nasm -f bin -o tiny.♚ tiny.asm</b><br>$ <b>chmod +x tiny.♚</b><br>$ <b>./tiny.♚</b><br>$ <b>echo $?</b><br>42<br>$ <b>wc -c tiny.♚</b><br>      7 tiny.♚</p>

<p>But it should also work if we push the number 42 onto the stack
and just leave it there. In other words, if the program just
consists of the <code>push</code> instruction.</p>

<p>$ <b>truncate -s 2 tiny.♚</b><br>$ <b>./tiny.♚</b><br>$ <b>echo $?</b><br>42<br>$ <b>wc -c tiny.♚</b><br>      2 tiny.♚</p>

<p>Two bytes. <em>Two bytes!</em> Our program is the size of a single
machine-language instruction! This is the limit! There's no way to
make a working program any smaller than that!</p>

<p>Well, I mean. I don't think there is. That is, obviously, there does
exist a number that is less than two, so <em>in theory</em> it could be
smaller, but how would that even be possible? Like, if there was a
one-byte instruction for storing an arbitrary value on the stack, then
maybe. But there isn't. The only other realistic possibility I can
think of would be if the binary file could make use of some metadata
to request a particular value to place on the stack initially, instead
of having it be a hard-coded zero value. But there is no metadata in
our file! That's the whole point of the format, right? I mean, of
course, all files have some metadata; that's just the nature of
filesystems. You could argue that the filename itself counts as
metadata. I mean, we are basically using the filename as metadata
already, I suppose. We're looking at the extension to determine the
file type. So you could in theory potentially maybe argue that, just
for example, using the character immediately preceding the extension
would also be valid metadata, and that could be defined to specify
optional behavior, like the default stack value for example …</p>

<table><tbody><tr><td></td><td rowspan="2"><i>calmfile.c</i></td><td></td></tr><tr><td></td><td></td></tr><tr><td colspan="3"><pre><code><span>    put_user(0x050F0000003CB85F, (long __user *)(loadaddr + filesize));</span>
<span>    current-&gt;mm-&gt;start_stack -= sizeof(void*);</span>
    <s>put_user(0, (long __user *)current-&gt;mm-&gt;start_stack);</s>
    put_user(ext[-1], (long __user *)current-&gt;mm-&gt;start_stack);
</code></pre></td></tr></tbody></table>

<p><code>ext</code> is the pointer to the filename's extension, that we initialized
way back at the top of the function, so <code>ext[-1]</code> is the character
directly to the left of the dot. Don't get me wrong; I fully realize
that this is indefensibly contrived — especially since, as it turns
out, the ASCII character for 42 is the asterisk. That's quite an
inconvenient character to have in a filename.</p>

<p>But having come this far, how can I <em>not</em> continue?</p>

<p>$ <b>make</b><br>make -C /lib/modules/4.15.0-156-generic/build/ M=/home/breadbox/km/calm modules<br>make[1]: Entering directory '/usr/src/linux-headers-4.15.0-156-generic'<br>  CC [M]  /home/breadbox/km/calm/calmfile.o<br>  Building modules, stage 2.<br>  MODPOST 1 modules<br>  CC      /home/breadbox/km/calm/calmfile.mod.o<br>  LD [M]  /home/breadbox/km/calm/calmfile.ko<br>make[1]: Leaving directory '/usr/src/linux-headers-4.15.0-156-generic'<br>$ <b>sudo rmmod calmfile</b><br>$ <b>sudo insmod ./calmfile.ko</b><br>$ <b>touch '*.♚'</b><br>$ <b>chmod +x '*.♚'</b><br>$ <b>'./*.♚'</b><br>$ <b>echo $?</b><br>42</p>

<p>Okay.</p>

<p><span>$ wc -c '*.♚'</span><br><span>      0 *.♚</span></p>

<p>Beat <strong>that</strong>, Internet Random Person™!</p>

<p><img src="https://www.muppetlabs.com/~breadbox/txt/mopb/cartoon2.jpg"><br>Illustration
of author surveying the fruits of his labor by Bomberanian</p>

<p><a href="https://www.muppetlabs.com/~breadbox/txt/mopb-app.html">(appendix)</a></p>

<hr>
<small><a href="http://www.muppetlabs.com/~breadbox/txt/">Texts</a></small>
<br>
<small><a href="http://www.muppetlabs.com/~breadbox/">Brian Raiter</a></small>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[How a $2k 'Made in the USA' Phone Is Manufactured (330 pts)]]></title>
            <link>https://www.404media.co/how-a-2-000-made-in-the-usa-liberty-phone-phone-is-manufactured/</link>
            <guid>43646920</guid>
            <pubDate>Thu, 10 Apr 2025 18:43:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.404media.co/how-a-2-000-made-in-the-usa-liberty-phone-phone-is-manufactured/">https://www.404media.co/how-a-2-000-made-in-the-usa-liberty-phone-phone-is-manufactured/</a>, See on <a href="https://news.ycombinator.com/item?id=43646920">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <article>
          <div>
              
<!--kg-card-begin: html-->

<!--kg-card-end: html-->
<p>Earlier this week I wrote an article called “<a href="https://www.404media.co/a-us-made-iphone-is-pure-fantasy/" rel="noreferrer">A US-Made iPhone Is Pure Fantasy</a>." The long and short of it is that Trump’s dream of moving all high tech manufacturing to the US is extremely difficult because global supply chains are so intricate, manufacturing expertise exists primarily in China, Vietnam, Cambodia, and other countries, and the components that go into a phone are often made in other countries as well.</p><p>But there is currently one smartphone that qualifies for a “Made in the USA” title from the FTC. <a href="https://shop.puri.sm/shop/liberty-phone/?ref=404media.co" rel="noreferrer">It’s the Liberty Phone</a>, which is made by a company called Purism. The phone is a version of Purism’s Librem 5. The Made-in-China Librem 5 costs $800, and the Liberty phone costs $2,000. It has 4 GB of memory, and <a href="https://www.androidauthority.com/purism-librem-liberty-phone-3342049/?ref=404media.co" rel="noreferrer">reviewers say that its specs are pretty outdated</a>. Not every single component in the Liberty Phone is made in the USA, but the company has been trying very hard to make it as American-made as possible. The fact that it exists at all is kind of a miracle, and the way that Purism is approaching manufacturing is really interesting, so I called Purism’s founder, Todd Weaver, to talk about smartphone supply chains, making tech products in the United States, and tariffs. Here’s our discussion, which has been edited for length and clarity. The full, hour-long discussion is available here as a bonus episode of the 404 Media podcast:</p>
<!--kg-card-begin: html-->

<!--kg-card-end: html-->
<p>&nbsp;<strong>404 Media: What you're doing is super interesting and I know you've been doing it for a while. I know that there's been tons of discussion over the last few weeks about bringing manufacturing back to the United States, the difficulty of doing that with different supply chains and components and things like that. And I know to the best of your ability, you've </strong><a href="https://puri.sm/products/liberty-phone/?ref=404media.co"><strong><u>brought the Liberty Phone</u></strong></a><strong> to the U.S. Can you tell me a little bit about what the Liberty Phone is and how long you've been doing it for?&nbsp;</strong></p><p><strong>Todd Weaver:</strong> So the first thing is I started the company, Purism, in 2014. The original business plan is actually what we were able to execute on over the course of the last 10 years, and looking at doing a fair number of things different than is currently done.</p><p>One of those is US manufacturing for a lot of reasons, secure supply chain, where we get to manage all the components, full transparency, I can also release my schematics. And then that gets us to where we're really targeting that security market as well, because the security market needs to have control and also verify the claims of any technology stack being used. When I started the company, we also did laptops. And then I knew I wanted to get to the point of phones. But I also knew that I had to increment my way there by building laptops first, showcasing that I'm able to do all of that on the hardware, software services side, and then get to the point of the phone. When we did the phone, it was the Librem 5 phone.</p><p>After we were successful on the Librem 5 crowdfunding campaign, we took our own electronics engineers (EEs), and then we worked with Chinese design and manufacturing through 2018, 2019, and 2020, because that's where every phone is made.</p><p>We had to leverage the knowledge base that was offshored into that country to do so. And so at that point, we were able to take our designs and educate our staff on the entire process and produce the Librem 5. And then we were able to take all those designs and spin up our own SMT, it's called Surface Mount Technology, where we can actually produce the entire electronics of the device at our facility, therefore bringing it back to US soil. And so we have a few different SKUs of our product offering that are manufactured in our facility.&nbsp;</p><figure><img src="https://www.404media.co/content/images/2025/04/CleanShot-2025-04-10-at-11.03.11@2x.png" alt="" loading="lazy" width="1380" height="904" srcset="https://www.404media.co/content/images/size/w600/2025/04/CleanShot-2025-04-10-at-11.03.11@2x.png 600w, https://www.404media.co/content/images/size/w1000/2025/04/CleanShot-2025-04-10-at-11.03.11@2x.png 1000w, https://www.404media.co/content/images/2025/04/CleanShot-2025-04-10-at-11.03.11@2x.png 1380w" sizes="(min-width: 720px) 720px"><figcaption><span>One of the Liberty Phone's boards. Image: Purism</span></figcaption></figure><p>We have a varying degree of the country of origin for components or the total product. So on one end of that spectrum, you have our server, which is an Intel reference design manufactured out of China, and then we're importing it. And then you go through the whole scale all the way down to Liberty Phone and <a href="https://puri.sm/products/librem-key/?ref=404media.co"><u>our Librem Key</u></a> that are 100% produced at our facility in Carlsbad, California.</p><p>On those two products we take the printed circuit board, which is just a blank board that has no components and run that through our surface mount technology by our line operators. And so we go from resistors and capacitors and integrated circuits, put them all on the board, take it off the board, do quality control, any firmware loading. Then we assemble the entire phone and then do a software load for the customer and then ship it direct. That whole process is top to bottom done at our facility.</p><p><strong>There’s a difference between a phone that is fully made and manufactured in the United States and one that is assembled in the United States. Do you believe that you're manufacturing the phone from start to finish in the United States?</strong></p><p>There's no question about it. The difference is actually defined by the FTC. So the Federal Trade Commission has language that describes the difference between assembled and manufactured. Assembly is where you are putting parts together. And they actually even have a sub definition of that called screwdriver assembly. So if you only take a screwdriver to it, and that's the only tool you're using, meaning snapping parts and using a screwdriver, then you cannot claim it was ‘<a href="https://www.ftc.gov/business-guidance/resources/complying-made-usa-standard?ref=404media.co"><u>made in the USA</u></a>’ or you can't even claim ‘assembled in the USA.’ When you're looking at the Liberty phone, we are taking the bare board and we are doing the entire manufacturing process of all of the electronics, meaning resistors, capacitors, integrated circuits are being put onto that board.</p><p>It's going from raw materials to finished goods at our facility. And then we assemble the entire printed circuit board into the actual chassis of the phone. And then we also load our own operating system and then ship it to the customer. So, not only are we doing full electronics manufacturing at our facility on US soil, but we're also doing the entire operating system and authorship and releasing of that.&nbsp;</p><p><strong>You're not buying components from overseas and then screwing them together here? You're making the components here as well?</strong></p><p>Components are the things that you're actually purchasing like a resistor and a capacitor and integrated circuit. Those we are buying from a Western distributor and each chip set that you use has a country of origin. In our case, we also use chip sets that are like ST Micro [a <a href="https://www.st.com/content/st_com/en.html?ref=404media.co"><u>Swiss company with American factories</u></a>], Texas instruments. These are manufactured on US soil.</p><p>So we also go down as deep as we possibly can to purchase from US or Westernized distribution or manufacturers of those components and chips. So obviously resistors, capacitors are manufactured on US oil. We purchase those and install them. When you're talking about the PCB, which is the blank board and the PCBA, which is the printed circuit board assembly. You're taking those raw components and you're putting them onto a board, meaning soldering them onto a board, and then you have a finished electronic circuit board. When you're talking about other companies, what they're importing is typically finished goods, finished electronics. Meaning the chassis, the battery, the whole entire electronics inside. And in rare cases, they might import just the motherboard, meaning the printed circuit board or PCBA assembly. We're very unique in the sense that we actually go from parts in stock all the way to the manufacturing process, all the way to finished goods at our facility. It is a vertically integrated manufacturing process. And that is, as you can recognize, extremely rare.</p><p><strong>The last part of this is the raw materials, the minerals that are being mined and turned into the different parts that you're sourcing from suppliers. Do you try to work with suppliers who are making parts using materials mined in the US? Or is that too hard to follow that deep into the supply chain?</strong></p><p>Yes, we do, but there's levels of complexity, as you can imagine, where the desire is there, but sometimes the parts aren't, or sometimes the negotiation with the suppliers turn into much more challenging or time consuming for the scale that we happen to be at. And then there's another bit of that, which also is leverage. If you're talking millions of units, as a manufacturer you have a lot more leverage than if you have a hundred thousand or tens of thousands. And so there is a degree of how hard can you push into the supply chain for contractual sourcing of raw materials, meaning mined materials. What we tend to do when we're doing Liberty phone is use Western distribution which has to comply with an awful lot more regulation on where it can source components from.&nbsp;</p><blockquote> "If you scoured the United States, you would be able to probably actually still count the number of skilled electronics engineers. If you go to Shenzhen, there's floor after floor after floor after floor of skilled EE's"</blockquote><p>Our philosophy from the very early days, especially as it relates to US manufacturing, is we go as deep as we possibly can to releasing our schematics, to sourcing our components, to having our HBOM, it's called a hardware bill of materials, a country of origin available, to the transparency of all of our source code that we author being published as well so you can verify that all of our claims are accurate.</p><p><strong>How long did it take you to implement this vision for manufacturing everything in the United States?&nbsp;</strong></p><p>2017 was when we actually began to say ‘We want to manufacture a phone and we would like to do it on US soil.’ We then actually <a href="https://puri.sm/products/librem-key/?ref=404media.co"><u>manufactured our Librem Key</u></a> as a very small security token at the same facility, same US soil manufacturing process. But it was a much easier product to produce, but that also showed, hey, we're able to do it on a simpler product.&nbsp;</p><p>Then in 2019, we were able to get what's called PVT samples. That's where you sort of get the initial versions of hardware being produced. So that two years is really about design changes that we needed, developing every bit out. But also in parallel to that, we were educating our electronic engineers to say, every time we're sourcing a Chinese resistor [a circuit board component], let's make sure we're getting the same resistance on a US resistor.</p><p>We always were sort of maintaining two different bills of materials of Chinese componentry and Western componentry because they're different. Then we produced five different iterations of the Librem 5 phone through Chinese contract manufacturing. And we iterated through those five changes over the course of about 18 months. At that point, we finally had a production ready product. And then we were able to take everything that we did and bring it to US soil.&nbsp;</p><p>[The Librem 5 USA was released in 2020, after three years of development.]</p><p>Imagine this literally starting from scratch, you're looking at probably a three year cycle from, from ‘Let's take an existing made-in-China product and then just produce the same thing in the US.’&nbsp;</p><p><strong>Were there specific components or specific parts of the phone that were harder to source in the United States or harder to manufacture in the United States because we don't make that type of component in the US or there's not a US supplier that sells it?</strong></p><p>Yes. There's US-manufactured, and then there’s ‘Westernized’ sourcing, so something from Germany or Europe or Canada. There's a bunch of these where you can’t get a US-component but you can get a ‘Western’ component. And then there’s things you can’t get [from a Western manufacturer].</p><p>One specific item is a type of crystal that needs to be put into phones, which is basically for keeping track of time and a few other measurement metrics. That crystal is something that only comes from China, and maybe I think you can get it from South Korea, which is where we either are sourcing or trying to source that last component from.</p><p>Even where we care to do 100 percent of it, there's still always something that you can try and dig one level deeper and you realize, that's a mineral or a mineral resource of something that's coming from somewhere that would be outside of the U.S. So then you need to import it and you wonder, ‘Is that ever going to be produced in the US or is there some company who would like to begin doing so?’ It's obviously a very complex question when you're dealing with, you know, in our case, 200 unique parts and the entire sourcing of all of them.</p><p>You can imagine the majority of companies who are just selling electronics from manufacturers somewhere else, they don't care. There's no transparency, no visibility, and the company itself doesn't even know the designs or what goes into it.</p><p><strong>Your </strong><a href="https://puri.sm/products/liberty-phone/?ref=404media.co"><strong><u>table of component origins</u></strong></a><strong> on the Liberty Phone site shows where things come from. Most of it is USA, but then you have the M2 Modem module that says its origin declaration is China. Is there a specific reason that’s not USA?&nbsp;</strong></p><p>The M2 module, we actually have options for US made and then we also have European, Germany. That module, specifically for cellular, it depends on the bands that you're looking to install it at or in some cases cost, right? So we have that as an actual module that you can snap in. The one that we ship for when we sell the [Chinese-made] Librem 5 is a Chinese modem. But we have a US-made one and a few other westernized countries for that modem module. We have the options of different bands, different country of origin, and to be able to put that in after the fact or during final assembly.</p><p><strong>But I would just imagine that the Chinese one is a lot cheaper.</strong></p><p>Yeah, absolutely. It's cheaper, it also has pretty wide bands.&nbsp;</p><p><strong>The phone that you were able to manufacture in the United States is not as fast as the latest iPhone. Can the newest best chips and components be manufactured in the US, and what would it take to do it here?</strong></p><p>The short answer is yes, I do, because you didn't ask me the timing. It's going to be multiples of years and a major investment and undertaking. And it has to show that there's a ROI and that there’s stability, like ‘This is the future that we’re going to live in, so let’s actually invest in doing all those things.’</p><p>When you're talking chipsets, the actual CPUs inside of Apple and Samsung and Google phones, those are a complete computer where it's hardware, the CPU, memory, and baseband modem, the cellular modem all combined onto one. And typically that's from Qualcomm or MediaTek. And those particular chipsets are produced outside of China. So really what you're referring to is the actual design of a finished good saying, take the semiconductor and put it into a phone and then add all the other components, the 200 and some other unique components into the finished good. And that is done in China specifically for Apple and a bunch of other major manufacturers.</p><p>It's obviously far more complex, but to try and just level set a little bit about that, where you're at now is you say ‘Let's take what we have in China and try to replicate that in the U.S.’ Well, the challenge is that all high tech jobs were put into China. You have a brain transfer where the ODMs, the original design manufacturers, are in China. If you scoured the United States, you would be able to probably actually still count the number of skilled electronics engineers. If you go to Shenzhen, there's floor after floor after floor after floor of skilled EE's.&nbsp;</p><p>These are people who design the actual board that goes into devices. That training takes time and effort and energy to get to the point where you can design new devices.&nbsp;</p><p>Then you have the next step, which is the actual assembly process. When you're looking at costing, machine versus machine, it's the same price to produce a product in US or China. Because the machine is doing the effort.&nbsp;</p><p>But then you have a person who physically grabs the board and does the assembly, which is a much more costly endeavor in the US than it is in China. China can solve problems by throwing people at it. The US and Western countries can solve problems by throwing engineering at it. If you were to go to Dongguan, China, and you see a manufacturing line, they're going to have rows and rows and rows of people who are taking a tablet or a phone that passes by them, and they just do [quality assurance on] pinch to zoom. They have gloves and they touch the screen, drag it open and drag it back and then it moves on the line. If one doesn't do pinch to zoom properly, they send it back. And that is a job for an entire row of people.&nbsp;</p><p>But what we did at Purism is we solved it with engineering. How we do that is we actually plug in the phone and we flash the entire device and we run through what we call auto Quality Assurance. And that is where we actually hack the firmware to receive or fake to receive a touch screen event into the firmware itself on the screen. And then we actually replicate a pinch to zoom, take a picture and then back again and take another picture. And as long as those pictures match, we have a functioning touch interface, where we didn't have to have people doing that task.&nbsp;</p><p>You can look at our concrete numbers. We sell a Chinese made Librem 5 phone for $799. We sell the Liberty phone for $2,000. When you're looking at just those numbers alone, that looks like a giant leap in cost. But there's a couple of factors that are not publicly known when you're looking at just those prices. When you're looking at COGS, cost of goods sold, our Librem 5 phone is equivalent in cost to about an iPhone. It's about $500 and some odd dollars, $550. So we can see that the Librem 5 phone doesn't have a very high margin when we sell it. The Liberty phone, same COGS componentry wise, but to produce it on US soil, we're adding not quite a hundred dollars. So it's about $650 to produce that entire phone. But what we're doing by selling it for greater originally, we're looking at a lot of differentiators for us. It wasn't just made in the USA. It's the fact that it's a secure supply chain, that you know, staff that's completely auditing every component, which means we're selling to a government security market with all those additional layers that we've added on top.</p><p><strong>Do you feel like you are in a better spot tariffs-wise than a company that is doing all of their manufacturing in China because you've done all of this?</strong></p><p>Absolutely, without question. If there’s a vertically integrated company where they have engineers, they have designers, they have the knowledge to be able to do it, then those companies will be able to adapt and bring it forth. If they choose to do US manufacturing, they have at least the ability to.</p><p>Whereas a company that is marketing and finance, and that's really the bulk of what they're doing, and they don't have any engineering, and they've offloaded all of those tasks. If they have no R&amp;D budget, and they have no operating expenses for any type of engineering or manufacturing, then they're gonna be in a very difficult position because you can also imagine there's kind of a run on the bank, right? Everybody is going to be looking for a company who can build their product at the same time. They have no knowledge of how to do it because that entire process has been brought into China. In China, you’re basically talking to a project manager, who's finding all of the right parties that does all the other tasks, and then they bring in all the engineers and everything else that's needed operationally and what you're receiving at the end of the day is something you can drop ship to a customer without ever actually even opening the box. It’s going to be very challenging to find someone in the US who's going to fill that same void at the same time that everybody else is looking to see if they can fill that void.</p><p><strong>You are doing this manufacturing in Carlsbad, California. Did you find it difficult to find workers who were able to work on a high tech factory line?</strong></p><p>We did not have difficulty in finding line operators, or what we call ‘skilled labor’ where you're able to solder something or do assembly with tweezers. That type of skilled labor exists, but it’s also in [geographical] pockets. If you're to say ‘Why in the world are you in Carlsbad, California?’ It's because there’s skilled labor there. There's companies here that currently work for government contract manufacturers, so that's where the labor is, that's why it was easy for us to spin up a line there and hire skilled labor from some of the other companies who have trained up those same staff.&nbsp;</p><p>Electronics engineers is a rarer position. And that's what I was describing earlier when you scour the nation you'd come up with, you could count the number of skilled electronics engineers on US soil and there's probably a million in Shenzhen alone.&nbsp;</p><p><strong>One thing that I worry about or think might be a problem is if you have tons of companies trying to do this all at once, very quickly, what is that going to be like? Are there enough skilled people to do that here?</strong></p><p>The answer has to be no. There's enough skilled labor to handle the necessary manufacturing that we're currently doing and you know if you increment it slowly then you can probably get there. If you're talking full EEs, that's multi years of education to get to the point of actually being able to do proper designs that actually work.&nbsp;</p><blockquote>"If the tariff from China is 100%, and you know it is going to be 100 % for the next 10 years, you will make a different business decision than if it is, ‘Might be 100%, not sure what's going to be in three months, what's it going to be in a year from now, and what's it going to be in three years from now.’ That uncertainty does not create stable markets. It does not create very accurate business decisions."</blockquote><p>There's another bit that you sort of hinted at there that I think is important, and I’m going to address it. The reliability of knowing that a tariff is in place and how long it's going to be in place allows a business to make informed decisions. If it was something where you knew that importing from China is going to be a hundred percent tariff for the next 10 years concretely, every business owner would be making decisions based off of that assumption, and the reliability of that assumption is important.&nbsp;</p><p>If it's something where ‘Hey, this is what's going to be 100%, but in two months it might not be, and who knows what's going to happen in three years or four years?’ It makes it very hard for a business owner or the board of directors to say ‘It's worth spinning all this up.’&nbsp;</p><p><strong>Did you look at bringing manufacturing to the US as a political project for you? Were you interested in the politics of doing this in the United States or was it a matter of differentiating yourselves?</strong></p><p>There's like probably about 10 items on the list of reasons why we chose to do manufacturing in the US. And obviously one of those is from a civil liberties perspective. So manufacturing high tech componentry in a hostile nation to the United States is not good geopolitical politics, right? Purism as a company, we also care tremendously about civil liberties and the privacy side of things which is to say we manufacture a phone that doesn't spy on you. That's why we manufacture it and also do all the source code. We can't have some nefarious chip put into the supply chain from a hostile country.&nbsp;</p><p>So the short answer is not in the short-term political game, but more of the geopolitical game and also understanding security and privacy and sort of how all those things weave together&nbsp;</p><p><strong>I think no matter where you are on the political spectrum, you can look at the last two weeks of tariffs, more tariffs, maybe not tariffs, maybe a delay in tariffs, increased Chinese tariffs and agree that this is chaotic. And you mentioned the stability of sort of knowing what the rules are going to be. Does this all stress you out?</strong></p><p>I do not stress about the SKUs that we are fully making in the US, right? We don't have to worry about it for our US side, because the majority of it will not be affected. But for others [that we make overseas], you can’t project out, right? What is it gonna be in three months? Should we buy components now? What is it gonna be a year from now? Maybe we should stock up on a bunch of other things?</p><p>Should we buy it today? Then maybe somebody on your procurement team says, ‘Well, maybe we should wait a week, right?’ Because if it's going to change, is it going to change for the better or worse? And you can imagine those little micro example carries forward to everything else that a business has to decide</p><p>If the tariff from China is 100%, and you know it is going to be 100 % for the next 10 years, you will make a different business decision than if it is, ‘Might be 100%, not sure what's going to be in three months, what's it going to be in a year from now, and what's it going to be in three years from now.’ That uncertainty does not create stable markets. It does not create very accurate business decisions.&nbsp;</p>
<!--kg-card-begin: html-->

<!--kg-card-end: html-->

                    <div>
    <div>
      <p>About the author</p>
      <p>Jason is a cofounder of 404 Media. He was previously the editor-in-chief of Motherboard. He loves the Freedom of Information Act and surfing.</p>
      
    </div>
      <p><img data-src="/content/images/2023/08/404-jason-01-copy.jpeg" alt="Jason Koebler" src="https://www.404media.co/content/images/2023/08/404-jason-01-copy.jpeg">  
      </p>
  </div>
          </div>
        </article>
      </div></div>]]></description>
        </item>
    </channel>
</rss>