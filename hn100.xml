<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Fri, 28 Mar 2025 20:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[We hacked Gemini's Python sandbox and leaked its source code (at least some) (213 pts)]]></title>
            <link>https://www.landh.tech/blog/20250327-we-hacked-gemini-source-code/</link>
            <guid>43508418</guid>
            <pubDate>Fri, 28 Mar 2025 18:12:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.landh.tech/blog/20250327-we-hacked-gemini-source-code/">https://www.landh.tech/blog/20250327-we-hacked-gemini-source-code/</a>, See on <a href="https://news.ycombinator.com/item?id=43508418">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="articleContent"><h2>Back to Vegas, and This Time, We Brought Home the MVH Award !</h2>
<p>In 2024 we released the blog post <a href="https://www.landh.tech/blog/20240304-google-hack-50000">We Hacked Google A.I. for $50,000</a>, where we traveled in 2023 to Las Vegas with Joseph "rez0" Thacker, Justin "Rhynorater" Gardner, and myself, Roni "Lupin" Carta, on a hacking journey that spanned from Las Vegas, Tokyo to France, all in pursuit of Gemini vulnerabilities during Google's LLM bugSWAT event. Well, we did it again …</p>
<p>The world of Generative Artificial Intelligence (GenAI) and Large Language Models (LLMs) continues to be the Wild West of tech.  Since GPT burst onto the scene, the race to dominate the LLM landscape has only intensified, with tech giants like Meta, Microsoft, and Google racing to have the best model possible. But now there is also Anthropic, Mistral, Deepseek and more that are coming to the scene and impacting the industry at scale.</p>
<p>As companies rush to deploy AI assistants, classifiers, and a myriad of other LLM-powered tools, a critical question remains: are we building securely ?  As we highlighted last year, the rapid adoption sometimes feels like we forgot the fundamental security principles, opening the door to novel and familiar vulnerabilities alike.</p>
<p>AI agents are rapidly emerging as the next game-changer in the world of artificial intelligence. These intelligent entities leverage advanced chains of thought reasoning, a process where the model generates a coherent sequence of internal reasoning steps to solve complex tasks. By documenting their thought processes, these agents not only enhance their decision-making capabilities but also provide transparency, allowing developers and researchers to understand and refine their performance. This dynamic combination of autonomous action and visible reasoning is paving the way for AI systems that are more adaptive, interpretable, and reliable. As we witness an increasing number of applications. from interactive assistants to sophisticated decision-support systems. The integration of chain-of-thought reasoning in AI agents is setting a new standard for what these models can achieve in real-world scenarios.</p>
<p>Google, to their credit, are actively recognising this emerging frontier of AI security, and they started early on.  Their "LLM bugSWAT" events, held in vibrant locales like Las Vegas, are a testament to their commitment to proactive security red teaming.  These events challenge researchers worldwide to rigorously test their AI systems, seeking out the vulnerabilities that might otherwise slip through the cracks.</p>
<p>And guess what ? We answered the call again in 2024 !  Justin and I returned to the bugSWAT event in Las Vegas, and this time, our efforts paid off in a big way.  Thanks to a brand new vulnerability in Gemini,  the one we’re about to detail, we were incredibly honored to be awarded the Most Valuable Hacker (MVH) title at this year's Las Vegas bugSWAT !</p>
<p><img src="https://www.landh.tech/images/articles/mvh-award.jpeg" alt="Google MVH Award"></p>
<p><em>Picture taken with our MVH award and 2 awesome Googlers &lt;3</em></p>
<p>So, prepare to dive deep once more.  This isn't just a repeat performance; it's a whole new vulnerability that we are about to show you ;)</p>
<h2>Discovering the new Gemini</h2>
<p>The Google team granted us early access to a preview of the next Gemini update, one that had several exciting new features. Along with this exclusive access, we received detailed documentation explaining these features and their intended functionalities. The goal was to fully explore and test these capabilities from an attacker’s perspective.</p>
<p>It all started with a simple prompt. We asked Gemini:</p>
<pre><code>run hello world in python3
</code></pre>
<p>Gemini provided the code, and the interface offered the enticing "Run in Sandbox" button. Intrigued, we started exploring.</p>
<p><img src="https://www.landh.tech/images/articles/run-hello-world-python3.png" alt="Run Hello World Python3"></p>
<h2>Gemini's Python Playground – A Secure Space... or Was It ?</h2>
<p>Gemini at the time offered a Python Sandbox Interpreter. Think of it as a safe space where you can run Python code generated by the AI itself, or even your own custom scripts, right within the Gemini environment. This sandbox, powered by Google's Gvisor in a GRTE (Google Runtime Environment), is designed to be secure. The idea is you can experiment with code without risking any harm to the underlying system, a crucial feature for testing and development.</p>
<p>gVisor is a user-space kernel developed by Google that acts as an intermediary between containerized applications and the host operating system. By intercepting system calls made by applications, it enforces strict security boundaries that reduce the risk of container escapes and limit potential damage from compromised processes. Rather than relying solely on traditional OS-level isolation, gVisor implements a minimal, tailored subset of kernel functionalities, thereby reducing the attack surface while still maintaining reasonable performance. This innovative approach enhances the security of container environments, making gVisor an essential tool for safely running and managing containerized workloads.</p>
<p>As security researchers and bug bounty hunters, we know that this gVisor sandbox is secured with multiple layers of defense and from what we’ve seen no one managed to escape this sandbox. Actually a sandbox escape could award you a $100k bounty:</p>
<p><img src="https://www.landh.tech/images/articles/sandbox-escape-reward.png" alt="Sandbox Escape VRP Reward"></p>
<p>While it might be possible to still escape it, this is a whole different set of challenges than what we were looking for.</p>
<p>However, sandboxes are not always meant to be escaped since there are a lot of cases where there is stuff inside the sandbox itself that can help us leak data. This idea, shared with us by a Googler from the security team, was to be able to have shell access inside the Sandbox itself and try to find any piece of data that wasn't supposed to be accessible. The main problem was the following: <strong>This sandbox can only run a custom compiled Python binary.</strong></p>
<h2>Mapping the Territory</h2>
<p>The first thing we saw is that it was also possible from the Front End to entirely rewrite the Python code and run our arbitrary version in the sandbox. Our first step was to understand the structure of this sandbox. We suspected there might be interesting files lurking around. Since we can’t pop a shell, we checked which libraries were available in this custom compiled Python binary. We found out that os was present ! Great, we can then use it to map the filesystem.</p>
<p>We wrote the following Python Code:</p>
<pre><code>import os

def get_size_formatted(size_in_bytes):
    if size_in_bytes &gt;= 1024 ** 3:
        size = size_in_bytes / (1024 ** 3)
        unit = "Go"
    elif size_in_bytes &gt;= 1024 ** 2:
        size = size_in_bytes / (1024 ** 2)
        unit = "Mb"
    else:
        size = size_in_bytes / 1024
        unit = "Ko"
    return f"{size:.2f} {unit}"

def lslR(path):
    try:
        # Determine if the path is a directory or a file
        if os.path.isdir(path):
            type_flag = 'd'
            total_size = sum(os.path.getsize(os.path.join(path, f)) for f in os.listdir(path))
        else:
            type_flag = 'f'
            total_size = os.path.getsize(path)
        
        size_formatted = get_size_formatted(total_size)
        
        # Check read and write permissions
        read_flag = 'r' if os.access(path, os.R_OK) else '-'
        write_flag = 'w' if os.access(path, os.W_OK) else '-'
        
        # Print the type, permissions, size, and path
        print(f"{type_flag}{read_flag}{write_flag} - {size_formatted} - {path}")
        
        # If it's a directory, recursively print the contents
        if type_flag == 'd':
            for entry in os.listdir(path):
                entry_path = os.path.join(path, entry)
                lslR(entry_path)
    except PermissionError:
        print(f"d-- - 0Ko - {path} (PermissionError: cannot access)")
    except Exception as e:
        print(f"--- - 0Ko - {path} (Error: {e})")
</code></pre>
<p>The goal for this code was to have some kind of recursive listing of files and directories function to be able to see which files are present, their size and also their permissions.</p>
<p>We’ve used the function to list the <code>lslR("/usr")</code> directory.</p>
<p><img src="https://www.landh.tech/images/articles/sandbox-listing.jpeg" alt="Sandbox Listing"></p>
<p>This call identified a binary file located at <code>/usr/bin/entry/entry_point</code>. This sounds juicy !</p>
<p><img src="https://i.giphy.com/3o6MbnvuZWdgL2JI88.webp" alt="Sniff"></p>
<h2>Leak the entry_point file</h2>
<p>Our next move was to extract this file, but with it being 579Mb in size, directly base64 encoding and printing it in the Front End wasn't an option, it caused the entire sandbox to hang until it eventually timed out.</p>
<p>We attempted to see if we could run TCP, HTTP, and DNS calls to exfiltrate information. Intriguingly, all our outbound connection attempts failed, the sandbox appeared completely isolated from the external network. This led to an interesting puzzle: if the sandbox is so tightly isolated that it cannot make external calls, how does it interface with Google services like Google Flights and others ? Well … we might be able to answer this later ;D</p>
<p>So we needed to exfiltrate this binary by printing in the console into chunks, for that we used the seek() function to walk through the binary file and retrieve the entire binary in chunks of 10 MB.</p>
<pre><code>import os
import base64

def read_and_encode(file_path, kilobytes):
    try:
        # Calculate the number of bytes to read
        num_bytes = kilobytes * 1024
        
        # Open the file and read the specified number of bytes
        with open(file_path, 'rb') as file:
            file_content = file.read(num_bytes)
        
        # Base64 encode the bytes
        encoded_content = base64.b64encode(file_content)
        
        # Print the encoded string
        print(encoded_content.decode('utf-8'))
    
    except FileNotFoundError:
        print(f"FileNotFoundError: {file_path} does not exist")
    except PermissionError:
        print(f"PermissionError: Cannot access {file_path}")
    except Exception as e:
        print(f"Error: {e}")

read_and_encode("/usr/bin/entry/entry_point", 10000)
</code></pre>
<p><img src="https://www.landh.tech/images/articles/sandbox-exfil-chunks.png" alt="Sandbox Exfil Chunks"></p>
<p>We then used <a href="https://caido.io/">Caido</a> to catch the request in our proxy that would run the sandbox call and fetch the result and then send it into the Automate feature. The Automate feature allows you to send requests in bulk. This feature provides a flexible way to initiate bruteforce/fuzzing to rapidly modify certain parameters of requests using wordlists.</p>
<blockquote>
<p>Note from Lupin: In the article it seems like a straightforward path, but actually we took several hours to get to that point. It was 3 am we were hacking with Justin and I was sleeping on my keyboard while Justin was exfiltrating the binary using Caido.</p>
</blockquote>
<p>Once we had all the base64 chunks, we reconstructed the entire file locally and we were ready to see its content.</p>
<h2>How to read this file ?</h2>
<h3>file command ?</h3>
<p>Running the file command on the binary revealed its identity as an <code>binary: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /usr/grte/v5/lib64/ld-linux-x86-64.so.2</code> This  confirms that the file is a binary. Mmmmmh what can we do with this ?</p>
<h3>strings command ?</h3>
<p>When we executed the strings command, the output was particularly intriguing due to multiple references to <code>google3</code>, Google’s internal repository. This pointed to the presence of internal data paths and code snippets that were never meant for external exposure, clearly indicating that the binary contains traces of Google’s proprietary software. But is there actually any security implication ?</p>
<h3>Binwalk FTW !</h3>
<p>The real breakthrough came when using Binwalk. This tool managed to extract an entire file structure from within the binary, revealing a comprehensive sandbox layout. The extraction uncovered multiple directories and files, painting a detailed picture of the internal architecture and exposing components where our reaction upon what we found was like ... OMG.</p>
<h2>Wait … is that internal Source Code ?</h2>
<p>When digging into the extract generated by our binwalk analysis, we unexpectedly found internal source code. The extraction revealed entire directories of proprietary Google source code. But is it sensitive ?</p>
<h3>Google3 Directory with Python Code</h3>
<p>In the binwalk extracted directory we can find a <code>google3</code> directory with the following files:</p>
<pre><code>total 2160
drwxr-xr-x   14 lupin  staff   448B Aug  7 06:17 .
drwxr-xr-x  231 lupin  staff   7.2K Aug  7 18:31 ..
-r-xr-xr-x    1 lupin  staff   1.1M Jan  1  1980 __init__.py
drwxr-xr-x    5 lupin  staff   160B Aug  7 06:17 _solib__third_Uparty_Scrosstool_Sv18_Sstable_Ccc-compiler-k8-llvm
drwxr-xr-x    4 lupin  staff   128B Aug  7 06:17 assistant
drwxr-xr-x    4 lupin  staff   128B Aug  7 06:17 base
drwxr-xr-x    5 lupin  staff   160B Aug  7 06:17 devtools
drwxr-xr-x    4 lupin  staff   128B Aug  7 06:17 file
drwxr-xr-x    4 lupin  staff   128B Aug  7 06:17 google
drwxr-xr-x    4 lupin  staff   128B Aug  7 06:17 net
drwxr-xr-x    9 lupin  staff   288B Aug  7 06:17 pyglib
drwxr-xr-x    4 lupin  staff   128B Aug  7 06:17 testing
drwxr-xr-x    9 lupin  staff   288B Aug  7 06:17 third_party
drwxr-xr-x    4 lupin  staff   128B Aug  7 06:17 util
</code></pre>
<p>In the <code>assistant</code> directory, internal Gemini code related to RPC calls (used for handling requests via tools like YouTube, Google Flights, Google Maps, etc.) was also discovered. The directory structure is as follows:</p>
<pre><code>.
├── __init__.py
└── boq
    ├── __init__.py
    └── lamda
        ├── __init__.py
        └── execution_box
            ├── __init__.py
            ├── images
            │   ├── __init__.py
            │   ├── blaze_compatibility_hack.py
            │   ├── charts_json_writer.py
            │   ├── format_exception.py
            │   ├── library_overrides.py
            │   ├── matplotlib_post_processor.py
            │   ├── py_interpreter.py
            │   ├── py_interpreter_main.py
            │   └── vegalite_post_processor.py
            ├── sandbox_interface
            │   ├── __init__.py
            │   ├── async_sandbox_rpc.py
            │   ├── sandbox_rpc.py
            │   ├── sandbox_rpc_pb2.pyc
            │   └── tool_use
            │       ├── __init__.py
            │       ├── metaprogramming.py
            │       └── runtime.py
            └── tool_use
                ├── __init__.py
                └── planning_immersive_lib.py

8 directories, 22 files
</code></pre>
<h3>A Closer Look at the Python Code</h3>
<p>Inside the file <code>google3/assistant/boq/lamda/execution_box/images/py_interpreter.py</code>, a snippet of code reveals:</p>
<pre><code># String for attempted script dump detection:
  snippet = (  # pylint: disable=unused-variable
      "3AVp#dzcQj$U?uLOj+Gl]GlY&lt;+Z8DnKh"  # pylint: disable=unused-variable
  )
</code></pre>
<p>This snippet appears to serve as a safeguard against unauthorized script dumping, underscoring that the code was never intended for public exposure.</p>
<p><img src="https://c.tenor.com/3eIvVsG3yPYAAAAd/tenor.gif" alt="Mind-Blown"></p>
<p>After a thorough review, the inclusion of what appeared to be internal Google3 code was, in fact, a deliberate choice… Too bad x)</p>
<p>The Python code, despite its anti-dumping mechanism that might initially indicate restricted access, had been explicitly approved for public exposure by the Google Security Team well before launch. Although these measures were originally designed to prevent unintended printing, they were retained because … why not ?</p>
<p>But we didn’t leave this sandbox alone, we knew we were close to something huge ! ;D</p>
<h2>Digging the main logic of the Sandbox</h2>
<p>While digging deeper into the Python code, we noticed that, as expected, this sandbox was communicating with external Google servers to perform activities such as fetch data from Google Flights or other Google services.</p>
<p>This was implemented via a python class (<code>google3.assistant.boq.lamda.execution_box.sandbox_interface</code>) which exposed various functions like <code>_set_reader_and_writer</code>  that could be called.</p>
<pre><code>def _set_reader_and_writer(
    reader_handle: io.BufferedReader | None,
    writer_handle: io.BufferedWriter | None,
) -&gt; None:
  """Sets the reader and writer handles for rpcs.

  Should be called before running any user code that might
  import async_sandbox_rpc

  Args:
    reader_handle: the handle through which to receive incoming RpcResponses. If
      None will default to legacy behavior (/dev/fd/3)
    writer_handle: the handle through which to receive incoming RpcRequests. If.
      None will default to legacy behavior (/dev/fd/4)
  """
  with _INIT_LOCK:
    global _READER_HANDLE
    global _WRITER_HANDLE
    _READER_HANDLE, _WRITER_HANDLE = reader_handle, writer_handle
</code></pre>
<pre><code>def run_tool(
    name: str, operation_id: str, parameters: str
) -&gt; sandbox_rpc_pb2.RunToolResponse:
  """Runs a tool with the given name and id, passing in parameters.

  Args:
    name: The name of the tool.
    operation_id: The name of the operation to perform.
    parameters: The parameters to pass to the tool.

  Returns:
    A RunToolResponse containing the response from the tool.
  """
  result = make_rpc(
      sandbox_rpc_pb2.RpcRequest(
          run_tool_request=sandbox_rpc_pb2.RunToolRequest(
              name=name, operation_id=operation_id, parameters=parameters
          )
      )
  )

  if result and result.HasField("run_tool_response"):
    return result.run_tool_response
  else:
    return sandbox_rpc_pb2.RunToolResponse(response="")
</code></pre>
<p>We would provide various pieces of data to these functions, they would serialize the data into the protobuf compatible format, and then call out over RPC by writing to a local file descriptor <code>5</code>. The response could then be read by reading from local file descriptor <code>7</code>. By utilizing the protos that were found in the massive binary, we were able to craft messages to and from this RPC server, and call these Google tools directly.</p>
<p>However, we noticed something interesting, not every sandboxes would have the same set of Google services available. It would depend if the sandbox was spawned by the Front End to be able to run Python source code, or by the Google Agent. What do we mean by that ?</p>
<h3>ReAct Research paper !</h3>
<p>Before explaining the next part, we need to explain that Google’s team showed us the following research paper that Gemini is based of:</p>
<ul>
<li><a href="https://arxiv.org/pdf/2210.03629">REACT: SYNERGIZING REASONING AND ACTING IN LANGUAGE MODELS</a></li>
</ul>
<p>This paper introduces a novel approach (at the time) where language models alternate between generating reasoning traces and executing specific actions, effectively merging thought and behavior in an interleaved manner. In practice, this means that as the model reasons through a problem, creating a transparent trail of thought that helps it plan, track, and adjust its actions, it simultaneously interacts with external sources to gather additional data when needed. This dynamic interplay not only boosts the model’s performance by mitigating common issues like hallucination and error propagation but also makes its decision-making process more interpretable and controllable for human operators.</p>
<p>By integrating both internal reasoning and external knowledge, ReAct offers a flexible and general framework that excels across a variety of tasks, ranging from question answering and fact verification to text-based games and web navigation. In essence, ReAct leverages the combined strengths of reasoning and acting to create more robust, human-aligned, and versatile language models.</p>
<p><img src="https://www.landh.tech/images/articles/react-paper.png" alt="ReAct"></p>
<p>Ok, but why do we need to understand this ? Well, if we follow the logic of this paper, basically Gemini can prompt itself several times in order to refine the commands and have a proper chain of thoughts.</p>
<p>If a user asks “What is the earliest flight between Toronto and New York ?”, Gemini would have roughly a chain of thought like:</p>
<ol>
<li>
<p>The user is asking me to search the earliest flight between Toronto and New York</p>
</li>
<li>
<p>Creating a plan like:</p>
<ol>
<li>I need to run a Python code that will connect to Google Flights tool</li>
<li>The code needs to find all flights from today to next week from YYZ airport to JFK airport</li>
<li>The code needs to sort by date the flights and take the first item</li>
</ol>
</li>
<li>
<p>Once the plan done, it would generate the code with the available Tools that the Agent has</p>
</li>
<li>
<p>Once the code generated, it would spawn a sandbox with the right privileges (eg: having access to the Google Flights tool through the file descriptor)</p>
</li>
<li>
<p>Run the code, process the output</p>
</li>
<li>
<p>Makes a response to the user</p>
</li>
</ol>
<p>So our theory was the following:</p>
<ul>
<li>What if we could do a secondary prompt injection in the planning section of Gemini in order to have access to a more privileged sandbox ?</li>
</ul>
<p>With the help of the Google Security Team, we tested this idea and observed that, depending on factors like the generation seed and temperature (all the usual probabilistic LLM nuances), we could occasionally access what appeared to be a more privileged sandbox.</p>
<p>By “more privileged sandbox,” we mean one that can access the extensions through two new file descriptors. These file descriptors are always present but aren’t always actively listening, when the agent calls the sandbox, they monitor for any calls to the extensions (Google services) so that we can interact with the API, whereas if accessed through the Python interpreter, those extensions remain inaccessible.</p>
<p>This led us to believe that there was a real opportunity for a P0 vulnerability: there was a specific message handler that might allow a file read on Google’s internal infrastructure, and we were hopeful that the sandbox with the tool extension could initiate an RPC call to this specific tool. Given the probabilistic nature of the attack, which made it difficult to reproduce consistently, we have Google Security Team assess this situation. Ultimately, their review revealed that the suspicious message handler was not available via RPC and could only be called externally.</p>
<p><img src="https://www.landh.tech/images/articles/sandbox-answer.png" alt="Sandbox Answer"></p>
<p>Even though our tests were limited, the core idea still has some real potential if we push it further. Running code in the sandbox context isn’t meant to give extra powers, it's treated as untrusted, with safety checks outside the sandbox and every tool call being filtered. But being able to run code does offer some neat benefits:</p>
<ul>
<li>
<p><strong>Reliability</strong>: Once you can run code, you can trigger actions more consistently.</p>
</li>
<li>
<p><strong>Chaining/Complexity</strong>: Controlling multiple tools or fine-tuning parameters via plain text is tough; code execution could let you build more complex chains, even if safety measures are still in place.</p>
</li>
<li>
<p><strong>Tool Output Poisoning</strong>: You might be able to manipulate a tool’s output more effectively.</p>
</li>
<li>
<p><strong>Leaks</strong>: There could be other hidden parts of the environment that, if exposed, might offer extra advantages.</p>
</li>
</ul>
<p>This shows that our idea still holds promise for further escalation. And that “leaks” potential, we wanted to see if we could at least confirm this one theory …</p>
<h2>We found our leak ;D</h2>
<p>While digging deeper, we uncovered several ways to leak proto files. In case you're not familiar, proto files (short for Protocol Buffer files) are like the blueprints of data, defining how messages are structured and how information is exchanged between different parts of the system. At first glance, they might seem harmless, but leaking these files can give a pretty detailed peek into Google’s internal architecture.</p>
<h3>Exposing classification.proto</h3>
<p>It turns out that by running a command like:</p>
<pre><code>strings entry_point &gt; stringsoutput.txt
</code></pre>
<p>and then searching for “Dogfood” in the resulting file, we managed to retrieve snippets of the internal protos. Parts of the extracted content included the metadata description of extremely sensitive protos. It didn’t contain user data by itself but those files are internal categories Google uses to <strong>classify</strong> user data.</p>
<p><em>For legal reasons we can’t show the result of this command x)</em></p>
<p><img src="https://www.landh.tech/images/articles/legal-reasons.png" alt="legal reasons"></p>
<p>Why search for the string “Dogfood” specifically ? At Google, "dogfood" refers to the practice of using pre-release versions of the company's own products and prototypes internally to test and refine them before a public launch. It allows devs to test the deployment and potential issues in these products, before going to production.</p>
<p>Moreover, there was the following exposed file, <code>privacy/data_governance/attributes/proto/classification.proto</code>, which details how data is classified within Google. Although the file includes references to associated documentation, those documents remain highly confidential and should not be publicly accessible.</p>
<blockquote>
<p>Note from Lupin again: This was found the next day of our all-nighter where we exfiltrated the binary file. We were in a suite in an Hotel Room booked by Google, and we were working with the security team to understand what we had found the previous night. This time Justin was the one who slept on the couch hahaha ! This bug was really time consuming but so fun ! 😀</p>
</blockquote>

<p>Exposing Internal Security Proto Definitions</p>
<p>The same output also reveals numerous internal proto files that should have remained hidden. Running:</p>
<pre><code>cat stringsoutput.txt| grep '\.proto' | grep 'security'
</code></pre>
<p>lists several sensitive files, including:</p>
<pre><code>security/thinmint/proto/core/thinmint_core.proto
security/thinmint/proto/thinmint.proto
security/credentials/proto/authenticator.proto
security/data_access/proto/standard_dat_scope.proto
security/loas/l2/proto/credstype.proto
security/credentials/proto/end_user_credentials.proto
security/loas/l2/proto/usertype.proto
security/credentials/proto/iam_request_attributes.proto
security/util/proto/permission.proto
security/loas/l2/proto/common.proto
ops/security/sst/signalserver/proto/ss_data.proto
security/credentials/proto/data_access_token_scope.proto
security/loas/l2/proto/identity_types.proto
security/credentials/proto/principal.proto
security/loas/l2/proto/instance.proto
security/credentials/proto/justification.proto
</code></pre>
<p>When looking in the binary strings for <code>security/credentials/proto/authenticator.proto</code> confirms that its data is indeed exposed.</p>
<h2>Why were those protos there?</h2>
<p>As we said previously, the Google Security Team thoroughly reviewed everything in the sandbox and gave a green light for public disclosure. However, the build pipeline for compiling the sandbox binary included an automated step that adds security proto files to a binary whenever it detects that the binary might need them to enforce internal rules.</p>
<p>In this particular case, that step wasn’t necessary, resulting in the unintended inclusion of highly confidential internal protos in the wild !</p>
<p>As bug bounty hunters, it's essential to deeply understand the business rules that govern a company’s operations. We reported these proto leaks because we know that Google treats them as highly confidential information that should never be exposed. The more we understand the inner workings and priorities of our target, the better we are at identifying and flaging those subtle bugs that might otherwise slip under the radar. This deep knowledge not only helps us pinpoint vulnerabilities but also ensures our reports are aligned with the critical security concerns of the organization.</p>
<h2>Conclusion</h2>
<p>Before we wrap things up, it’s worth mentioning how vital it is to test these cutting-edge A.I. systems before they go live. With so many interconnections and cool features, like even a simple sandbox that can access different extensions, there’s always the potential for unexpected surprises. We’ve seen firsthand that when all these parts work together, even a small oversight can open up new avenues for issues. So, thorough testing isn’t just a best practice; it’s the only way to make sure everything stays secure and functions as intended.</p>
<p>At the end of the day, what made this whole experience so memorable was the pure fun of the ride. Cracking vulnerabilities, exploring hidden code, and pushing the limits of Gemini's sandbox was as much about the challenge as it was about the excitement of the hunt. The people we’ve met at the bugSWAT event in Las Vegas were all awesome. The shared laughs over unexpected twists, and the thrill of outsmarting complex systems turned this technical journey into an adventure we’ll never forget. It’s moments like these, where serious hacking meets good times, that remind us why we do what we do.</p>
<p>Finally, a huge shout-out to all the other winners and participants who made bugSWAT 2024 such a blast. We want to congratulate Sreeram &amp; Sivanesh for their killer teamwork, Alessandro for coming so close to that top spot, and En for making it onto the podium. It was an absolute thrill meeting so many amazing hackers and security pros, your energy and passion made this event unforgettable. We can’t wait to see everyone again at the next bugSWAT, and until then, keep hacking and having fun !</p>
<p>And of course, thanks to the Google Security team ! As always you rock ❤️</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How Kerala got rich (223 pts)]]></title>
            <link>https://aeon.co/essays/how-did-kerala-go-from-poor-to-prosperous-among-indias-states</link>
            <guid>43507286</guid>
            <pubDate>Fri, 28 Mar 2025 16:27:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://aeon.co/essays/how-did-kerala-go-from-poor-to-prosperous-among-indias-states">https://aeon.co/essays/how-did-kerala-go-from-poor-to-prosperous-among-indias-states</a>, See on <a href="https://news.ycombinator.com/item?id=43507286">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>India is a union of 28 states (provinces). The population in some of these states is bigger than that of the largest European countries. For example, Uttar Pradesh is home to more than <span>240 million</span> people, almost three times the population of Germany. Although a part of a federal union, every state has a unique history, shaped by its environment and natural resources, princely or British colonial heritage, language and culture. Since the end of British rule in the region in 1947, their economic trajectories have <span>diverged, too.</span></p>
<p>With roughly <span>35 million</span> people, Kerala, which sits along India’s southwestern tip on the Indian Ocean, is among the smaller Indian states, though it is densely populated. In the 1970s, Kerala’s average income was about two-thirds of the Indian average, making it among the poorest states in India. This difference persisted through the 1980s. In the coming decades, a miracle occurred. Kerala, one of the poorest regions in India, became one of the richest. In 2022, Kerala’s per-capita income was <span>50-60 per</span> cent higher than the national average. What happened?</p>
<p>Even when it was poor, Kerala was different. Though income-poor, Kerala enjoyed the highest average literacy levels, health conditions and life expectancy – components of human development – in all of India. Among economists in the 1970s and ’80s and among locals, ‘Kerala is different’ became a catchphrase. But why, and different from whom? One big difference Kerala presented was with North India, which had an abysmal record of education and healthcare. While the population grew at more than <span>2 per</span> cent per year in the rest of India, Kerala’s population growth rates remained significantly lower in the 1970s. High literacy and healthcare levels contributed to this transition.</p>
<p>Kerala’s unusual mix of high levels of human development and low incomes drew wide attention, including from leading scholars. Among the most influential writers, <span>K N Raj</span> played a big part in <a href="https://digitallibrary.un.org/record/415172?ln=en&amp;v=pdf" target="_blank" rel="noreferrer noopener">projecting</a> Kerala as a model for other states. Anthropologists like Polly Hill and Robin Jeffrey drew <a href="https://www.jstor.org/stable/312633" target="_blank" rel="noreferrer noopener">attention</a> to some of the unique features of the society that led to these achievements. In a series of influential <a href="https://press.princeton.edu/books/hardcover/9780691160795/an-uncertain-glory" target="_blank" rel="noreferrer noopener">works</a>, the Nobel-laureate <a href="https://aeon.co/ideas/why-amartya-sen-remains-the-centurys-great-critic-of-capitalism" target="_blank" rel="noopener">Amartya Sen</a> and his co-author the economist Jean Drèze praised Kerala’s development model for prioritising health and education, even with limited resources, and claimed that this pathway led to significant improvements in quality of life. Kerala vindicated the intuition that Sen and others held that health and education improved wellbeing and shaped economic change by enhancing choices and capabilities.</p>
<p>Why do Kerala’s differences matter? What lessons did the economists draw from the state’s unique record? Around 1975, India’s economic growth had faltered, and a debate started over whether the country should give up its socialist economic policy in favour of a more market-oriented one, in which the government would take a backseat. Kerala suggested three lessons for those engaged in the debate: <span>(a) income</span> growth rate was a weak measure of standards of living; <span>(b) what</span> mattered was quality of life, including education, good health and longer lives; and <span>(c) the</span> government was necessary to ensure investment in schools and hospitals. The three lessons would coalesce into the Kerala Model, an alternative recipe for development to the neoliberal model then being pushed by Right-wing lobbies.</p>
<p>But Kerala was about to grow even more different, confounding orthodoxies in political science and economics. In the 2000s, average income in the state forged ahead of the Indian average. Compared with Indian averages, the post-1990 growth record was less impressive regarding human development, as India caught up with Kerala (see graph below). The forging-ahead in income was offbeat and is still poorly understood. This question remains unanswered because, so far, the attention of economists has been elsewhere – welfare policies – whereas the income turnaround suggests an emerging pattern of private investment that strides in basic health and literacy alone cannot explain.</p>
<figure><img alt="Line graph depicting Kerala’s literacy rate, life expectancy for males and per capita income as percentages of India from 1951-2021." loading="lazy" width="1443" height="1031" decoding="async" data-nimg="1" sizes="(max-width: 640px) 100vw, (max-width: 1440px) 60vw, 880px" srcset="https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=384&amp;quality=75&amp;format=auto 384w, https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=640&amp;quality=75&amp;format=auto 640w, https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=750&amp;quality=75&amp;format=auto 750w, https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=828&amp;quality=75&amp;format=auto 828w, https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=1080&amp;quality=75&amp;format=auto 1080w, https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=1200&amp;quality=75&amp;format=auto 1200w, https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=1920&amp;quality=75&amp;format=auto 1920w, https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=2048&amp;quality=75&amp;format=auto 2048w, https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=3840&amp;quality=75&amp;format=auto 3840w" src="https://images.aeonmedia.co/user_image_upload/3976/new-graph.png?width=3840&amp;quality=75&amp;format=auto"><figcaption></figcaption></figure>
<p>Before we tackle that question, it will be useful to discuss the huge presence of the state in development studies. Where does it come from? Why does the state fascinate so many social scientists?</p>
<p><span>F</span>rom a historical perspective, Kerala has at least four distinct qualities that most states in India do not share. First, it has a centuries-long history of trade and migration, particularly with West Asia and Europe. Second, Kerala is rich in natural resources, which have been commercially exploited. Third, Kerala boasts a highly literate, skilled and mobile workforce. Finally, the state has a strong Left political movement. Any story we tell about its advances in health and education or its recent income growth must refer to some of these longstanding variables.</p>
<p>Why was Kerala different? In the minds of many economists, the state’s heritage of Leftist trade unions (more on this later) and successive rule by Leftist political parties helped provide the foundation for strong human development. Socialism was not just a popular ideology but had a real chance to deliver in this state. Others stressed geography, princely heritage and social reform movements. For example, the British anthropologist Polly Hill noted that Kerala differed due to its coastal position, semi-equatorial climate, maritime tradition, mixed-faith society and princely rule. The combined share of the <a href="https://censusofindia.net/kerala/32#Religion_Population" target="_blank" rel="noreferrer noopener">population</a> following Islam and Christianity in Kerala is about <span>45 per</span> cent; for India as a whole, it is <span>16.5 per</span> cent. The state is home to one of the oldest branches of Christianity. Further, the strategic location along the Arabian Sea facilitated interactions with traders worldwide, including Arabs, Europeans and others. The local rulers were generally tolerant of diverse religious practices.</p>
<p>Many economists in Kerala who noted the difference did not think there was much reason to celebrate. Some said that the record on healthcare and education hid a profound inequality from view. Others <a href="https://www.sciencedirect.com/science/article/abs/pii/S0161893804000481" target="_blank" rel="noreferrer noopener">said</a> the low and stagnant income pushed the state’s fiscals into bankruptcy, making the model unsustainable without active markets driving investment and income growth. By the 1990s, the model’s limitations became apparent as the state struggled with low economic growth and financial strains.</p>
<p>If the situation did not lead to a severe crisis, this was due to inward remittances. The state had a long history of labour migration, with significant numbers of people moving to the rest of India and the Persian Gulf states for work. This migration led to substantial remittances, which sustained private consumption, income and investment. By 2010, the excitement over the Kerala Model was dead, and incomes started forging ahead.</p>
<p>The Left changed their focus from land and educational reforms to private investment and decentralisation</p>
<p>The economists (above) who joined the developmental debate took Kerala’s income poverty for granted. They neither saw the income growth coming nor were prepared to explain it. Some Left-leaning economists <a href="https://www.theindiaforum.in/article/achievements-challenges-kerala-model" target="_blank" rel="noreferrer noopener">attributed</a> the resurgence in per-capita income to education and healthcare. But this is not persuasive. A surge in economic growth everywhere and at all times implies rising investment in productive capital, and basic education and healthcare would not deliver that.</p>
<p>The Indian economy in the 2000s saw robust investment and economic growth. But Kerala was not a major destination for mobile private capital. The forging ahead owed to more specific factors, some more peculiar and powerful than those driving India’s transformation.</p>
<p>Here, we must return to Kerala’s historical engagement with the world economy, its natural resources, its literate workforce and its distinctive political landscape. In different ways, all these reinforced private investment. Deep connections with the global economy were pivotal to the recent history of labour migration. While migration created a flow of remittances into consumption, another significant flow went into investment, especially in service sector enterprises in healthcare, education, hospitality and tourism. The state’s temperate semi-equatorial climate, mountainous topography and abundant water resources supported plantations and natural-resource extraction and processing industries for centuries. Some declined in the mid-20th century, but investment in these activities revived later.</p>
<p>The communist movement in Kerala began in the 1930s with the formation of the Congress Socialist Party, driven by peasant and labour movements and anticolonial struggles. The movement joined electoral politics after the formation of the state in 1956, and since then, Left-ruled governments have formed from time to time, almost always with coalition partners. The Leftist political movement in Kerala helped shape the state’s economic policies. In recent years, the Left also changed their focus from land and educational reforms to private investment and decentralisation. Capable local self-government institutions strengthened democratic governance.</p>
<p>In short ways, four forces of change – Kerala’s reintegration with the global economy, remittances from the Persian Gulf, strong welfare policies from a legacy of Leftist government, and private investment from individuals and businesses who shared the remittance flows – have combined to form the structure of Kerala’s miracle of human wellbeing with economic growth.</p>
<p><span>A</span>round 1900, Kerala was a region composed of three political units: the princely states of Travancore and Cochin, and the British Indian district of Malabar. There were a few other smaller princely states as well. There was a broad similarity in the geography across the three units. India’s climatic-ecological map will show that all of Kerala is a semi-equatorial zone with exceptionally heavy monsoon rains, whereas most of India is arid or semi-arid tropical. The region has plentiful water and almost no history of famines, unlike the rest of India.</p>
<p>Geologically, too, Kerala was distinct. The mighty Western Ghats mountain range runs along its eastern borders throughout. Although the southwestern coast offered little scope for agriculture because good land occurred in a narrow strip between the sea and the mountains, the uplands produced goods like black pepper, cardamom, cloves, cinnamon and ginger, which had a ready demand in the world market. Plentiful coconut trees offered scope for coir rope manufacture. The climate was suitable for rubber and tea plantations. The sailing ship construction industry on the western coast obtained timber from the Malabar forests. In the present day, plywood is a major industry.</p>
<p>In the interwar period, poorer and deprived people circulated more</p>
<p>Around 1900, the authorities in all three regions helped foreign capital, which produced or traded in plantation crops like coffee, tea and pepper, and forest-based industries including timber, rayon, coir and rubber. Some of these products were traded globally. These businesses relied heavily on local partners and suppliers, which led to the accumulation of wealth in the hands of groups like the Syrian Christians.</p>
<p>Some of this wealth was invested in small-scale plantations and urban businesses, which encouraged the local migration of agricultural labourers. In the interwar period, poorer and deprived people circulated more. They sought work outside traditional channels like agricultural labour where they had been at the beck and call of upper castes or caste Hindus. At the same time, protestant missions, social reformers and Leftist political movements became active in ameliorating their conditions. These forces led to a significant focus on mass education. The princely states stepped into mass education late but with greater resources on average than a British Indian district. Their investment reinforced the great strides in health and education that made Kerala different.</p>
<p><span>N</span>ine years after India gained independence, Malabar merged with Cochin and Travancore to form the Kerala state. At that time, the livelihoods in the region, like the rest of the country, were based on agriculture. However, a much larger proportion (half or more) of the domestic product was urban and non-agricultural, compared with India as a whole. Nearly <span>40 per </span>cent of the workforce was employed in industry, trade, commerce and finance, compared with <span>20-35 per</span> cent in the larger states in India.</p>
<p>One reason for this was the scarcity of farmlands. The state’s mountainous geography made good land extremely scarce. The exceptionally high population density in the areas of intensive paddy cultivation ensured a level of available land per head (0.<span>6 acres)</span> that was a fraction of the Indian average (3<span>.1 acres</span>) around 1970, and low by any benchmark. Paddy yield was high in these areas. Still, with the low size of landholding, most farmers were families of small resources.</p>
<p>Urban businesses processing abundant natural resources were another story. Some of these businesses were small, non-mechanised factories processing commercial products like coir in Alappuzha (Alleppey) and cashew in Kollam (Quilon). Some areas, such as Aluva (Alwaye), had larger, mechanised factories producing textiles, fertilisers, aluminium, glass and rayon. The region also had tea estates in the hills, and rubber and spice plantations east of Kottayam. Kerala today is a leading region in Indian financial entrepreneurship. Businesses from the region established banks, deposit companies and companies supplying gold-backed loans, which have a presence throughout India. Several of these companies emerged in the interwar period to finance trading and the production of exportable crops.</p>
<p>Thrissur (Trichur) and Kottayam were service-based cities with a concentration of banks, colleges and wealthy churches. Most local businesses were small-scale, semi-rural and household enterprises. Foreign multinationals owned tea estates and export trading firms at the apex of the spectrum of firms. Nearly everything else – from banks to small plantations, trading firms, agencies, transport and most small-scale industries – were Indian-owned family businesses.</p>
<p>Before statehood began in 1956, a powerful communist movement had emerged</p>
<p>From this base, the two decades after 1956 saw a retreat of private investment from industry and agriculture. Partly because of adverse political pressure, the foreign firms left the businesses, and plantations changed ownership. A militant trade union movement rose in the coir- and cashew-processing industries, and most firms, being relatively small, could not withstand the pressure to raise wages. Some shifted operations across the border with Tamil Nadu, where the state did not protect trade unions and labour costs were cheaper. With the central government’s heavy repression of private financial firms and the retreat of private banks, the synergy between industry, banking and commerce was broken. Private capital retreated from industrial production and trading. Following the socialist trend present in India in the 1960s, Kerala state invested in government-owned industries, which were inefficiently managed and ran heavy losses, usually resulting in negative economic contributions.</p>
<p>Private investment in agriculture declined, too. The Left political movement, which was concentrated in agriculture, was again partly responsible. Before statehood began in 1956, a powerful communist movement had emerged. The movement’s leaders understood that inequality in this part of India was not based on class alone. The agricultural countryside was characterised by inequality between the landholders and landless workers, which was only partly based on landownership but also drew strength from oppression and deprivation of lower castes by upper castes.</p>
<p>A narrow strip of highly fertile rice-growing plains in the central part of the state was the original home of Leftist politics. From the 1940s, it was a political battleground. The Leftist political parties organised the poorest tenants and workers into unions. Class-based movements to get higher wages, better employment terms or more land merged with movements to achieve equal social status. The agricultural labourers came from the depressed castes so they were interested in both class and <a href="https://aeon.co/essays/how-india-deludes-itself-that-caste-discrimination-is-dead" target="_blank" rel="noopener">caste politics</a>.</p>
<p>When in power for a second time (from 1967), the communists ruling in coalition delivered on a promise made long ago: radical land reform. The policy involved taking over private land above a ceiling, redistributing it to landless workers, and bringing them under trade unions. The policy was successful in the extent of land redistributed (compared with most states that followed a similar policy) and in sharply raising wages. However, it did have a damaging effect on investment.</p>
<p>Many employers migrated to the Persian Gulf, leaving their land unattended</p>
<p>From the 1970s, private investment withdrew from agriculture. The cultivation of tree crops held steady, if on a low key. But cultivation of seasonal field crops, especially paddy for which the lowlands and the river basins were especially suitable, fell throughout the 1980s. By 1990, traditional agriculture was reduced to an insignificant employer and earner, and for most people still engaged in it, the land provided no more than a subsidiary income. A relative retreat from traditional agriculture is not unique to Kerala, it happened all over India. But in Kerala, the fall was spectacular.</p>
<p>In this densely populated area, the average landholding was small. Most landholders were middle-class people and not particularly rich. The policy squeezed their resources. Investment and acreage cropped fell. Those who remained tied to land did so because they had nowhere to go or worked the land mainly with family labour. The first Green Revolution unfolded in the rest of India, including Tamil Nadu, and had little impact on the state. Many employers migrated to the Persian Gulf in the late-1970s or ’80s, leaving their homesteads and the land unattended. What made all this anomalous was the high unemployment rate in the countryside, possibly the highest in the country. How were high wages and the retreat of a significant livelihood possible in this condition?</p>
<p>The answer is Gulf remittance. Hundreds of thousands of people migrated to the <a href="https://aeon.co/essays/are-the-persian-gulf-city-states-slave-societies" target="_blank" rel="noopener">Persian Gulf</a> states like Saudi Arabia, Kuwait, the United Arab Emirates, Bahrain and Qatar to work in construction, retail and services, sectors that saw a massive investment boom following the two oil shocks of 1973 and 1979. As they did, the money from the Gulf flowed into construction, retail trade, transport, cinema halls, restaurants and shops in Kerala. An emerging service sector labour market <a href="https://journals.sagepub.com/doi/abs/10.1177/011719680401300405?journalCode=amja" target="_blank" rel="noreferrer noopener">absorbed</a> the effort of those who had been made redundant in agriculture or did not want to work there anymore.</p>
<p>What drove emigration to the Gulf? And why did Kerala lead the emigration of Indians to the Gulf? One answer is that the region had for centuries deeper ties with West Asia than any other part of India. Also, high unemployment pushed skilled individuals to seek work outside the state. Kerala, for at least three decades (1975-2005), supplied a significant share of the workers who moved to these labour markets. The demand for skilled workers increased as the Gulf economies diversified from oil-based jobs to finance and business services. While offering jobs in the millions, the migration also had a series of broad effects back home on occupational diversification, skill accumulation, changing gender roles, consumption, economic and social mobility, and demographic transitions.</p>
<p><span>I</span>n the 1990s, the Indian economy liberalised, reducing protectionist tariffs and restrictions on foreign and domestic private investment. In the following decades, increased private investment led to generally elevated economic growth rates. At the same time, the political culture shifted away from emphasis on socialist ideas, becoming more market-friendly than before. Kerala was not untouched by these tendencies, but its specificities – natural resource abundance, Leftist legacy, migration history – joined the pan-Indian trend distinctly. There were three prominent elements in the story.</p>
<p>First, a demographic transition completed by 1990, when population growth decreased substantially. The fall in population growth rate was not unique to the state but aligned with broader Indian trends. However, the levels differed. Of all states in India, Kerala was <a href="https://www.jstor.org/stable/4396712" target="_blank" rel="noreferrer noopener">ageing</a> much faster than the rest and from earlier times.</p>
<p>Second, politics changed. Again, the legacy of Left rule was an important factor behind the shift. A communist alliance won the first state assembly elections in 1957, lost in 1960, returned to power and ruled the state in <span>1967-70</span> (with breaks), <span>1970-77,</span> <span>1978-79,</span> <span>1980-82,</span> <span>1987-91,</span> <span>1996-2001,</span> <span>2006-11,</span> and since 2016. The composition of the Left coalition changed multiple times, never consisting only of ideologically Left parties. It included, for example, the Muslim League and some Christian factions allied with the communists. However, until 1964, the main constituent of the coalition was the Communist Party of India (CPI), called CPI (Marxist), or CPI (M), after 1964. In no other state in India, except West Bengal (and later Tripura), did the CPI/CPI (M) command a popular support base large enough to win elections.</p>
<p>The Left turned friendly towards private capital and shed the rhetoric of class struggle</p>
<p>The Left Democratic Front, which had ruled Kerala in different years, returned to power in 2016 and has been in power since then. In the 2000s, the Leftists quietly reinvented themselves. They needed to because the older agenda was almost dead. In elections in the 1960s and ’70s, agricultural labourers in this land-poor state formed the main support base for communist victories based on the promise of land reforms. Caste-equality social reform movements coalesced around the Leftist movement. After the Leftists delivered land reforms, there was not much of an agenda.</p>
<p>From 2000, the Left turned friendly towards private capital and shed the rhetoric of class struggle. In practical terms, the state retreated from regulating private capital and strengthening trade unions, and focused on infrastructure investment to strengthen small businesses. The reinvention was a success and delivered election victories. As the private sector took charge of investment in education and healthcare, the state could afford to focus on decentralised governance, corruption-free administration, improved public services and urban infrastructure. The class-based politics of the 1960s and ’70s died. With private investment rising, the state had more capacity to fund welfare schemes and public administration. Tourism promotion is an excellent example of a new form of synergy: the state builds roads, private capital builds hotels, and lakes and mountains supply the landscape.</p>
<p>Third, investment in Kerala revived. Over the past three decades, the private sector has increasingly driven education and healthcare. Since 1990, many new types of small-scale businesses have flourished in the state. There is no single story of where the money came from and what these enterprises add to employment potential. We know much of it happened on the back of natural-resource processing. In all fields, value was added by accessing niche export markets, using new technologies, and forming many micro, medium and small enterprises. The state has one of the highest concentrations of startups. Natural resource extraction does not mean any more plantations packaging harvested spices but the extraction of nutraceuticals. Jewellery manufacture involves invention and experimentation with designs. Rubber products diversified from automotive tyres to surgical accessories.</p>
<p>Although foreign investment inflow, which supported business development in the princely areas, was revived via the Gulf route, most of the business development is concentrated in non-corporate family firms. Few raise significant equity capital or are publicly held. Most service sector enterprises in tourism, trade, transport, banking and real estate are relatively small. Family business remains a strong organisational model. Little research exists on the externalities that these businesses generate. The one large exception to this rule is investment in IT clusters near the big cities.</p>
<p><span>L</span>et us start with a restatement of the main points of the story. Not long ago, Kerala was celebrated for its exceptional human development indices in education and healthcare, with many scholars attributing this to an enlightened political ideology and communist influence. These advances also resulted from factors like the princely states’ higher fiscal capacity, favourable environmental conditions, and a globally connected capitalism. During the 1970s and ’80s, government interventions weakened market activity and growth, making human development look even more striking than otherwise. Since previous commitments to social infrastructure were maintained, the state was heading toward a fiscal crisis.</p>
<p>In the 2000s, an economic revival came through mass migration and remittances, initially supporting consumption and construction. At the same time, a wealthier and technically skilled diaspora invested in the state, in services and manufacturing. New sectors like tourism, hotels, spice extracts, ayurvedic products, rubber products and information technology drove this revival. Remittances also flowed into new forms of consumption. The urban landscape transformed, with towns developing shopping malls, restaurants and modern businesses. While earlier regimes discouraged private investment, now there is a symbiosis between the private sector and the state, as market activity supports public welfare commitments.</p>
<p>The New Left, unlike the Old Left, is open to private capital and acknowledges the importance of the market, including the global market. Without compromising welfare expenditure, the state has expanded the hitherto neglected infrastructure projects, crowding in private investments. This is the second turnaround in the development trajectories of the state. The first turnaround happened during the early 1980s fuelled by remittance money. The second turnaround happened in the 2010s, when social growth, always Kerala’s strength, joined unprecedented levels of capital expenditure. If both the Left and non-Left political parties could take credit for the first turnaround, the credit for the second one should rest with the New Left.</p>
<p>Recent climate change and overdevelopment have increased disaster risks</p>
<p>Looking forward, the pathway of recent economic change has both strengths and challenges. The strengths include the generally high quality of life in small towns, improved youth aspirations often marked by an increased flow to foreign universities, better worker safety, the ability to attract skilled and unskilled migrants, unique natural-resource advantages and a degree of sociability in relations between castes and religions. The challenges are poor higher education quality, environmental threats from new forms of tourism infrastructure and climate change, a rapidly ageing population, and the possibility of a fiscal crisis.</p>
<p>Some of these challenges are enormous, and are already straining the budget and state capacity. Land reforms brought some equality, but the absence of follow-up actions prevented productivity improvements. Kerala produces less than <span>15 per</span> cent of its food requirements, and relies heavily on central supplies and neighbouring states. To respond to this problem, the government has strengthened its public distribution system. That, along with the care of the elderly and scaling up of public services, particularly education and health, will place enormous burdens on the state’s public finances in the near future.</p>
<p>Historically, the state’s unique climate with abundant rainfall provided natural advantages, supporting high life expectancy and diverse agricultural opportunities. However, recent climate change and overdevelopment have increased disaster risks. The environmental transformation has been primarily driven by private construction, especially Gulf-funded developments in dwellings, hotels and service sectors. Land has become the single most speculative asset of the real-estate lobbyists. Extensive economic activities in ecologically sensitive regions, possibly accompanying tourism development with its tagline of ‘God’s own country’, allegedly led to landslides, soil erosion and environmental vulnerabilities. In recent years, an accent on ‘responsible tourism’ has tried to reduce the potential risks.</p>
<p>There is more. Human-wildlife conflicts and soil erosion have increased, and declining rainfall poses significant challenges. The devastating floods in 2018 and the near-disaster in 2019 highlighted the consequences of excessive construction and poor environmental management. The state now has one of India’s highest levels of consumption inequality. The quality of higher and technical education remains poor, contributing to educated unemployment.</p>
<p>The state’s future success will depend on balancing economic growth with environmental sustainability, improving the quality of education, improving the employability of graduates, and social equity. It is a complicated task precisely because so much of the recent growth owes to exploiting the environment. There is a real prospect of worsening inequality along caste, class, gender and age lines if the current pattern of growth slows. On the other hand, recent advancements in the digital and knowledge economy, combined with sustainable infrastructure, open fresh spaces for egalitarian development. Still, the future is hard to predict because the regional economy is deeply dependent on integration with the world economy and the ever-changing ideological alliances.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Japanese scientists create new plastic that dissolves in saltwater overnight (120 pts)]]></title>
            <link>https://newatlas.com/materials/plastic-dissolves-ocean-overnight-no-microplastics/</link>
            <guid>43505626</guid>
            <pubDate>Fri, 28 Mar 2025 14:09:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newatlas.com/materials/plastic-dissolves-ocean-overnight-no-microplastics/">https://newatlas.com/materials/plastic-dissolves-ocean-overnight-no-microplastics/</a>, See on <a href="https://news.ycombinator.com/item?id=43505626">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Plastics are durable and strong, which is great while they’re being used but frustrating when they end up in the environment. Scientists at RIKEN in Japan have developed a new type of plastic that’s just as stable in everyday use but dissolves quickly in saltwater, leaving behind safe compounds.</p><p>The benefit of plastics is that they’re made with strong covalent bonds that hold their molecules together, meaning they take a lot of energy to break. This is why they’re so sturdy, long-lasting and perfect for everything from packaging to toys.</p><p>But those same strong bonds become a problem after the useful life of a plastic product is over. That cup you used once and threw away will sit in landfill for decades, even centuries, before it fully breaks down. And when it does, it forms microplastic pieces that are turning up in all corners of the <a href="https://newatlas.com/environment/underwater-avalanches-microplastic-waste-deep-ocean/" data-cms-ai="0">natural world</a>, including our <a href="https://newatlas.com/microplastic-human-stool-samples/56908/" data-cms-ai="0">own bodies</a>, where they wreak <a href="https://newatlas.com/medical/microplastic-pollution-plastics-human-health/" data-cms-ai="0">havoc on our health</a> in ways we’re only just beginning to understand.</p><p>RIKEN researchers have now developed a new type of plastic that can work just as well as the regular stuff when it’s needed, and break down readily into safe compounds when it’s not. It’s made of what are known as supramolecular polymers, which have reversible bonds that function like sticky notes that can be attached, removed and reattached, according to the team.</p><p>The team wanted to make a specific type of supramolecular polymer that would be strong enough for the usual uses of plastic, but could also be made to break down quickly when required, under mild conditions and leaving only non-toxic compounds.</p><p>After screening a range of molecules, the researchers identified a particular combination that seemed to have the right properties – sodium hexametaphosphate, which is a common food additive, and monomers based on guanidinium ions, which are used in fertilizers. When these two compounds are mixed together in water, they form a viscous material that can be dried to form plastics.</p><p>A reaction between the two ingredients forms “salt bridges” between the molecules that make the material strong and flexible, like conventional plastic. However, when they’re soaked in saltwater, the electrolytes unlock those bonds, and the material dissolves.</p><div data-align-center="">
                
                    <figure>
    
    
    
    


<p><img alt="An artist's impression of the new plastic, showing the strong bonds above the water and how they break down when submerged in saltwater" width="802" height="800" data-image-size="articleImage" loading="lazy" srcset="https://assets.newatlas.com/dims4/default/a6c0711/2147483647/strip/true/crop/802x800+0+0/resize/440x439!/format/webp/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F11%2F30%2F356f14c54945974e053850ff79cb%2Fspring2025fh-main.jpg 440w,https://assets.newatlas.com/dims4/default/343b049/2147483647/strip/true/crop/802x800+0+0/resize/725x723!/format/webp/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F11%2F30%2F356f14c54945974e053850ff79cb%2Fspring2025fh-main.jpg 725w,https://assets.newatlas.com/dims4/default/cb41859/2147483647/strip/true/crop/802x800+0+0/resize/800x798!/format/webp/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F11%2F30%2F356f14c54945974e053850ff79cb%2Fspring2025fh-main.jpg 800w,https://assets.newatlas.com/dims4/default/a35e950/2147483647/strip/true/crop/802x800+0+0/resize/1200x1197!/format/webp/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F11%2F30%2F356f14c54945974e053850ff79cb%2Fspring2025fh-main.jpg 1200w,https://assets.newatlas.com/dims4/default/c3f042e/2147483647/strip/true/crop/802x800+0+0/resize/1920x1915!/format/webp/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F11%2F30%2F356f14c54945974e053850ff79cb%2Fspring2025fh-main.jpg 1920w" src="https://assets.newatlas.com/dims4/default/21fa167/2147483647/strip/true/crop/802x800+0+0/resize/802x800!/format/webp/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2F11%2F30%2F356f14c54945974e053850ff79cb%2Fspring2025fh-main.jpg" sizes="(min-width: 768px) 800px, 100vw">
</p>



    
    

    
        <div><figcaption itemprop="caption">An artist's impression of the new plastic, showing the strong bonds above the water and how they break down when submerged in saltwater</figcaption><p>RIKEN</p></div>
    
</figure>

                
            </div><p>In practice, the team found that the material was just as strong as normal plastic during use, and was non-flammable, colorless and transparent. Immersed in saltwater though, the plastic completely dissolved in about eight and a half hours.</p><p>There’s one major hurdle with any degradable plastic material of course: what if it comes into contact with the catalyst for its destruction before you want it to? A plastic cup is no good if certain liquids can dissolve it, after all.</p><p>In this case, the team found that applying hydrophobic coatings prevented any early breaking down of the material. When you eventually want to dispose of it, a simple scratch on the surface was enough to let the saltwater back in, allowing the material to dissolve just as quickly as the non-coated sheets.</p><p>While some biodegradable plastics can still leave behind harmful microplastics, this material breaks down into nitrogen and phosphorus, which are useful nutrients for plants and microbes. That said, too much of these can be disruptive to the environment as well, so the team suggests the best process might be to do the bulk of the recycling in specialized plants, where the resulting elements can be retrieved for future use.</p><p>But if some of it does end up in the ocean, it will be far less harmful, and possibly even beneficial, compared to current <a href="https://newatlas.com/ocean-cleanup-river-waste/49939/" data-cms-ai="0">plastic waste</a>.</p><p>A paper describing the research was published in the journal <a href="https://www.science.org/doi/10.1126/science.ado1782" target="_blank" data-cms-ai="0"><i>Science</i></a>.</p><p>Source: <a href="https://www.riken.jp/en/news_pubs/research_news/rr/20250327_1/index.html" target="_blank" data-cms-ai="0">RIKEN</a></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Getting hit by lightning is good for some tropical trees (109 pts)]]></title>
            <link>https://www.caryinstitute.org/news-insights/press-release/getting-hit-lightning-good-some-tropical-trees</link>
            <guid>43505447</guid>
            <pubDate>Fri, 28 Mar 2025 13:52:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.caryinstitute.org/news-insights/press-release/getting-hit-lightning-good-some-tropical-trees">https://www.caryinstitute.org/news-insights/press-release/getting-hit-lightning-good-some-tropical-trees</a>, See on <a href="https://news.ycombinator.com/item?id=43505447">Hacker News</a></p>
Couldn't get https://www.caryinstitute.org/news-insights/press-release/getting-hit-lightning-good-some-tropical-trees: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Cross-Platform P2P Wi-Fi: How the EU Killed AWDL (142 pts)]]></title>
            <link>https://www.ditto.com/blog/cross-platform-p2p-wi-fi-how-the-eu-killed-awdl</link>
            <guid>43505022</guid>
            <pubDate>Fri, 28 Mar 2025 13:13:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ditto.com/blog/cross-platform-p2p-wi-fi-how-the-eu-killed-awdl">https://www.ditto.com/blog/cross-platform-p2p-wi-fi-how-the-eu-killed-awdl</a>, See on <a href="https://news.ycombinator.com/item?id=43505022">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><strong>TL;DR:</strong> Under pressure from the EU’s Digital Markets Act (DMA), Apple is being forced to ditch its proprietary peer-to-peer Wi-Fi protocol – Apple Wireless Direct Link (AWDL) – in favor of the industry-standard Wi-Fi Aware, also known as Neighbor Awareness Networking (NAN). A quietly published EU interoperability roadmap mandates Apple support Wi-Fi Aware 4.0 in iOS 19 and v5.0,<sup>1</sup> thereafter, essentially forcing AWDL into retirement. This post investigates how we got here (from Wi-Fi Direct to AWDL to Wi-Fi Aware), what makes Wi-Fi Aware technically superior, and why this shift unlocks true cross-platform peer-to-peer connectivity for developers.</p><h2>EU Forces Apple’s Hand on Peer-to-Peer Wi-Fi</h2><p>In a little-publicized mandate, the European Commission explicitly requires Apple to implement the Wi-Fi Alliance’s Wi-Fi Aware standard as part of DMA interoperability measures. The official DMA roadmap states:</p><blockquote><em>“Apple shall implement the measures for Wi-Fi Aware 4.0 in the next major iOS release, i.e. iOS 19, at the latest, and for Wi-Fi Aware 5.0 in the next iOS release at the latest nine months following the introduction of the Wi-Fi Aware 5.0 specification”</em></blockquote><p>In plain terms, by the time iOS 19 ships, iPhones must support Wi-Fi Aware v4.0, and Apple must roll out v5.0 support soon after the Wi-Fi Alliance finalizes that spec.</p><p>Crucially, this decision was not a voluntary announcement by Apple – it was imposed by regulators. Apple has kept quiet about these changes publicly, likely because they involve opening up formerly closed-off tech. The DMA enforcement timeline was highlighted in an EU Q&amp;A site and legal annex, not an Apple press release.<sup>7</sup> The European Commission’s language makes it clear this is about enabling third-party devices and apps to use high-bandwidth peer-to-peer (P2P) Wi-Fi features equal to Apple’s own, rather than Apple benevolently adopting a new standard. In fact, the EU order compels Apple to deprecate AWD<strong>L</strong> and ensure third-party solutions using Wi-Fi Aware are just as effective as Apple’s internal protocols. In short, the EU gave Apple no choice: embrace Wi-Fi Aware or face penalties.</p><p>What does this mean? Essentially, Apple’s hidden sauce for fast device-to-device communication – AWDL – is being forced into retirement. And with that, for the first time, iPhones and Androids will speak a common language for local wireless networking. Let’s unpack how we got here, and why it’s a big deal for developers.</p><h2>From Wi-Fi Direct to AWDL to Wi-Fi Aware: A Brief History</h2><p>To understand the significance, we need a quick history of ad-hoc Wi-Fi protocols:</p><ul role="list"><li><strong>Wi-Fi Ad-hoc (IBSS mode):</strong> Early 802.11 allowed devices to connect directly in a peer-to-peer “ad-hoc” network (IBSS), but it had limitations (no always-on discovery, no power-saving coordination, weak security). It never gained widespread use.</li></ul><ul role="list"><li><strong>Wi-Fi Direct:</strong> The Wi-Fi Alliance’s first big attempt at standard P2P. Wi-Fi Direct (circa 2010) allows devices to form a direct link without an AP, designating one device as a group owner (soft AP) for security and IP allocation. It improved on ad-hoc mode (supporting WPA2, dynamic group formation), but had drawbacks – e.g. limited service discovery capabilities and difficulty staying connected to infrastructure Wi-Fi concurrently.</li></ul><ul role="list"><li><strong>Apple Wireless Direct Link (AWDL):</strong> Around 2014, Apple developed AWDL as a proprietary, high-performance P2P Wi-Fi protocol for its ecosystem. According to Apple’s patent on AWDL (US20180083858A1) and reverse-engineering by researchers, AWDL was designed to address Wi-Fi Direct’s concerns and succeeded ad-hoc IBSS mode.<sup>8</sup> Apple deployed AWDL in over a billion devices (every modern iPhone, iPad, Mac) to power AirDrop, AirPlay peer connections, GameKit, Apple Watch unlock, and more.<sup>8,9</sup> Notably, AWDL can coexist with regular Wi-Fi by rapidly hopping channels – an iPhone can be on an AP and seamlessly switch to AWDL channel windows to talk to a peer.<sup>9</sup> This gave AWDL low latency and high throughput without dropping your internet connection.</li></ul><ul role="list"><li><strong>Neighbor Awareness Networking (NAN / Wi-Fi Aware):</strong> As it turns out, Apple didn’t keep all of AWDL to itself – it contributed to the Wi-Fi Alliance, which adopted AWDL’s approach as the basis for the NAN standard (branded “Wi-Fi Aware”) around 2015.<sup>8</sup> Wi-Fi Aware is essentially the industry-standard cousin of AWDL, enabling devices to discover each other and communicate directly with Wi-Fi speeds, in a power-efficient way, regardless of vendor. Android added platform support for Wi-Fi Aware in Oreo (8.0) and later,<sup>10</sup> but Apple until now stuck with its in-house AWDL stack which can be used by developers but isn't an open standard.</li></ul><p>In summary, AWDL was Apple’s competitive edge – a proprietary P2P stack that outperformed legacy Wi-Fi Direct and only worked on Apple devices. If an app needed cross-platform local connectivity, it couldn’t use AWDL (Apple provides no raw AWDL API). Developers resorted to Wi-Fi Direct, or Wi-Fi Aware on Android vs. Apple’s AWDL on iOS, with no interoperability. This fragmentation is exactly what the EU’s DMA targeted.</p><p>The DMA order effectively forces Apple to drop AWDL and align with Wi-Fi Aware<strong>.</strong> The Commission explicitly says Apple must&nbsp;</p><blockquote><em>“implement Wi-Fi Aware in iOS devices in accordance with the Wi-Fi Aware specification”</em> and <em>“continue to…improve the Wi-Fi Aware standard… Apple shall not prevent AWDL from becoming part of the Wi-Fi Aware standard”</em>,&nbsp;</blockquote><p>even urging Apple to allocate memory for concurrent P2P on older devices in a non-discriminatory way until AWDL is fully deprecated.&nbsp;</p><p>The writing is on the wall: AWDL as a private protocol is done for.</p><h2>Inside AWDL: Apple’s Once-Secret Peer-to-Peer Protocol</h2><p>AWDL is worth a closer look, because it shows what Apple achieved and what will now be opened up via Wi-Fi Aware. How does AWDL work? In short, it creates a continuously syncing ad-hoc network <em>on the fly</em> among nearby Apple devices:</p><ul role="list"><li><strong>Availability Windows &amp; Channel Hopping:</strong> Each AWDL-enabled device periodically advertises Availability Windows (AWs) – tiny time slices when it’s available on a specific Wi-Fi channel for peer-to-peer communication.<sup>8</sup> An elected master node (chosen via a priority scheme) coordinates these windows across devices. Outside of these AWs, devices can rejoin normal Wi-Fi (e.g. your home router’s channel) or sleep their radio to save power.<sup>8</sup> This scheduling is what allows, let's say, your Mac to be on Wi-Fi for internet most of the time, but briefly switch to channel 6 to AirDrop a file from your iPhone, then switch back – all without manual intervention.</li></ul><ul role="list"><li><strong>Integration with BLE:</strong> AWDL doesn’t work in isolation – it integrates with Bluetooth Low Energy for discovery. For example, AirDrop uses BLE advertisements to initially discover nearby devices (showing them in the UI), then quickly forms an AWDL connection for the actual high-speed file transfer. This combo gives the best of both: BLE’s low-power device discovery and AWDL’s high-throughput data channel.<sup>11,12</sup></li></ul><ul role="list"><li><strong>Performance:</strong> AWDL leverages the full Wi-Fi PHY, so it can hit hundreds of Mbps throughput and sub-second latencies that BLE or classic Bluetooth can’t touch. It also supports robust security (authenticated pairing, encryption) as used in AirDrop/AirPlay. One clever feature: because AWDL devices coordinate their availability, one device can even sustain multiple P2P links concurrently (e.g. an iPhone streaming to a HomePod via AWDL while also AirDropping to a Mac) – something spelled out in the EU requirements.</li></ul><ul role="list"><li><strong>Closed Nature:</strong> Despite its capabilities, AWDL has been closed off to third-party developers and other OSes. Apple’s APIs like MultipeerConnectivity framework ride on AWDL under the hood for Apple-to-Apple connections, but there was no way for an Android device or a Windows laptop to speak AWDL. It was an Apple-only club. Researchers at TU Darmstadt’s Secure Mobile Networking Lab had to reverse-engineer AWDL (publishing an open Linux implementation called <strong>OWL</strong>) to document its inner workings.<sup>13</sup> They demonstrated that AWDL indeed is an IEEE 802.11-based ad-hoc protocol with Apple-specific extensions, tightly integrated with Apple’s ecosystem.<sup>14</sup> Bottom line<strong>:</strong> AWDL gave Apple a technical edge but at the cost of interoperability – a classic “walled garden” approach.</li></ul><p>It’s this walled garden that the EU is breaking down. The mandate that <em>“Apple shall make Wi-Fi Aware available to third parties”</em> means Apple must expose new iOS APIs for P2P connectivity that are standard-based. And since Android (and even some IoT devices) already support Wi-Fi Aware, we’re headed for a world where an iPhone and an Android phone can find and connect to each other directly via Wi-Fi, no access point, no cloud, no hacks – a scenario that AWDL alone never allowed.</p><h2>Wi-Fi Aware 4.0: The New Cross-Platform Standard</h2><p>So what exactly is Wi-Fi Aware (a.k.a. NAN), and why is version 4.0 a game-changer? At a high level, Wi-Fi Aware offers <em>the same kind of capabilities as AWDL</em>, but as an open standard for any vendor. It lets devices discover each other and exchange data directly via Wi-Fi, without needing a router or cell service. Think of it as Wi-Fi’s answer to Bluetooth discovery but with Wi-Fi speed and range. Some key technical features of Wi-Fi Aware (especially in the latest v4.0 spec) include:</p><ul role="list"><li><strong>Continuous, Efficient Discovery:</strong> Devices form a Wi-Fi Aware group and synchronize wake-up times to transmit Discovery Beacons. Like AWDL’s AWs, Wi-Fi Aware defines Discovery Windows where devices are active to find peers, then can sleep outside those windows to save power. This allows always-on background discovery with minimal battery impact.<sup>15 </sup>The latest spec enhances this with an “Instant Communication” mode – a device can temporarily accelerate discovery (e.g. switch to a channel and beacon rapidly) when triggered by an external event like a BLE advertisement or NFC tap, to achieve very fast discovery and connection setup.<sup>16</sup> In practice, that means an app can use BLE to wake up Wi-Fi (advertising a service via BLE then negotiating a NAN link), combining the energy efficiency of BLE with the speed of Wi-Fi – just as Apple’s AirDrop has done privately. Wi-Fi Aware v4.0 explicitly added standardized BLE co-operation: <em>“Latest enhancements to Wi-Fi Aware offer discovery by Bluetooth LE, which triggers a formal Wi-Fi Aware session by waking the Wi-Fi radio.”</em><sup>10</sup></li></ul><ul role="list"><li><strong>High Throughput Data &amp; Range:</strong> Once devices discover each other, Wi-Fi Aware supports establishing a direct Wi-Fi data path. This can be an IP connection or a native transport, and it leverages Wi-Fi’s high data rates (including Wi-Fi 5/6/6E speeds on 5 GHz or 6 GHz bands). In fact, the Wi-Fi Alliance notes that Wi-Fi Aware data connections use <em>“high performance data rates and security, leveraging cutting-edge Wi-Fi technologies, including Wi-Fi 6, Wi-Fi 6E, and WPA3.”</em> <sup>10</sup> Compared to Bluetooth or BLE, the throughput and range are vastly superior – Wi-Fi Aware can work at typical Wi-Fi ranges (tens of meters, even over 100m in open air) and deliver tens or hundreds of Mbps. By contrast, BLE might get 100+ meters but on the order of 0.1 Mbps in real-world throughput. Wi-Fi Aware will close that gap by giving cross-platform apps both long range <em>and</em> high speed.</li></ul><ul role="list"><li><strong>Lower Latency &amp; Instant Communication:</strong> Version 4.0 of the spec introduced refinements for latency-critical applications. The aforementioned Instant Communication mode lets devices expedite the discovery handshake – important for use cases like AR gaming or urgent data sync where waiting a few seconds for a discovery window might be too slow. In Instant mode, a device (say, an AR headset) triggered via BLE could immediately switch to a predetermined channel and begin a quick service discovery exchange with a peer, rather than strictly waiting on the periodic timetable.<sup>16</sup> The spec shows this can cut discovery latency dramatically (Figure 73 in the spec illustrates an accelerated discovery).<sup>16</sup> From a developer’s perspective, Wi-Fi Aware can feel nearly instantaneous in establishing a link when properly used.</li></ul><ul role="list"><li><strong>Accurate Ranging:</strong> Perhaps one of the most exciting features for version 4 and beyond is built-in distance measurement between devices. Wi-Fi Aware includes a ranging protocol (based on Fine Timing Measurement, FTM) that lets one device get the distance to another with sub-meter accuracy.<sup>15</sup> This is similar to how Apple devices can use UWB or Bluetooth RTT for ranging, but now via Wi-Fi. The devices exchange precise timing signals to calculate distance (and even do so <em>as part of discovery</em> – a NAN discovery packet can include a request to measure range). The spec’s NAN Ranging section defines how devices negotiate a ranging session and obtain a distance estimate before or during data exchange.<sup>16</sup> <em>Enhanced ranging</em> could unlock things like peer-to-peer localization (for example, an app can find not just who is nearby but also roughly how far or even what direction).</li></ul><ul role="list"><li><strong>Security and Privacy:</strong> Wi-Fi Aware has baked-in solutions for secure communication and privacy. It supports device pairing (establishing trust and keys) and encrypted data paths with mutual authentication.<sup>15</sup> It also provides privacy features like randomized identifiers that rotate, so devices aren’t broadcasting a fixed MAC or identity constantly.<sup>10</sup> This addresses the concern that always-on discovery could be used to track devices – Aware can randomize its “NAN IDs” and only reveal a stable identity when a trusted handshake occurs. The EU mandate will require Apple to expose the same security levels to third-party developers as it uses for its own devices, meaning things like AirDrop’s peer authentication should extend to third-party Aware sessions.</li></ul><p>In essence, Wi-Fi Aware 4.0 is AWDL on steroids and open to all. It took the concepts Apple pioneered (timeslot synchronization, dual Wi-Fi/BLE use, etc.) and formalized them into a cross-vendor standard, adding improvements along the way. No longer limited to Apple devices, any Wi-Fi Aware certified device can join the discovery clusters and connect. With iOS 19, an iPhone will become just another Wi-Fi Aware node – able to discover and connect to Android phones, PCs, IoT gadgets, etc., directly via Wi-Fi.</p><h2>AWDL vs. Wi-Fi Aware vs. BLE: Feature Comparison</h2><p>How does Apple’s AWDL, the upcoming Wi-Fi Aware, and good old Bluetooth Low Energy stack up? The table below summarizes the key differences and capabilities of these peer-to-peer wireless technologies:</p><div role="region" tabindex="0">
<table>
    <thead>
        <tr>
            <th>Feature</th>
            <th>Apple AWDL (Proprietary)</th>
            <th>Wi-Fi Aware 4.0 (2022 Spec)</th>
            <th>Bluetooth LE (5.x)</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><b>Standardization</b></td>
            <td>
                <p>Apple-defined (private protocol)</p>
            </td>
            <td>
                <p>Wi-Fi Alliance NAN standard</p>
            </td>
            <td>
                <p>Bluetooth SIG standard</p>
            </td>
        </tr>
        <tr>
            <td><b>Topology</b></td>
            <td>
                <p>Mesh networking. Multiple devices in a cluster. One acts as a time sync master.</p>
            </td>
            <td>
                <p>Decentralized cluster (no fixed master). Typically one-to-one data links, but multiple links supported.</p>
            </td>
            <td>
                <p>Point-to-point or star (one-to-many, each connection 1:1). No native mesh routing.</p>
            </td>
        </tr>
        <tr>
            <td>
                <p><b>Discovery Mechanism</b></p>
            </td>
            <td>
                <p>AWDL frames (Wi-Fi beacons), BLE-assisted initial discovery (e.g., AirDrop).</p>
            </td>
            <td>
                <p>Publish/Subscribe discovery with NAN frames. Supports out-of-band BLE wake-up for power saving.</p>
            </td>
            <td>BLE Advertising channels, low-power continuous advertising, and scanning.</td>
        </tr>
        <tr>
            <td>
                <p><b>Initial Connection Latency</b></p>
            </td>
            <td>
                <p>Very fast (&lt;1s) using BLE assist (AirDrop). Quick AWDL link setup.</p>
            </td>
            <td>
                <p>Fast (&lt;1s typical) discovery, tens of ms connection setup after discovery.</p>
            </td>
            <td>
                <p>Fast discovery (~0.5–1s). Connection establishment latency (50–100 ms).</p>
            </td>
        </tr>
        <tr>
            <td>
                <p><b>Data Throughput</b></p>
            </td>
            <td>
                <p>High – 160–320 Mbps real-world (AirDrop). Wi-Fi 5/6 speeds.</p>
            </td>
            <td>
                <p>High – 100+ Mbps real-world on Wi-Fi 5 hardware, 250+ Mbps possible on Wi-Fi 6.</p>
            </td>
            <td>
                <p>Low – Max ~1.36 Mbps app throughput (BLE 5), typically 0.2–0.5 MB/s.</p>
            </td>
        </tr>
        <tr>
            <td><b>Range</b></td>
            <td>
                <p>~50–100m typical Wi-Fi range. 100m+ line-of-sight.</p>
            </td>
            <td>
                <p>~50–100m typical Wi-Fi range, similar to AWDL.</p>
            </td>
            <td>
                <p>Up to 100–200m typical; max ~1km line of sight with BLE 5 long-range (coded PHY).</p>
            </td>
        </tr>
        <tr>
            <td>
                <p><b>Concurrent Internet</b></p>
            </td>
            <td>
                <p>Yes – simultaneous infrastructure Wi-Fi and P2P via channel hopping.</p>
            </td>
            <td>Yes – NAN discovery windows are scheduled around AP connectivity. Coexistence supported.</td>
            <td>
                <p>Yes – BLE separate from Wi-Fi, runs in parallel.</p>
            </td>
        </tr>
        <tr>
            <td>
                <p><b>Notable Features</b></p>
            </td>
            <td>
                <p>Proprietary; Powers AirDrop/AirPlay; Mesh with master; No direct public API (apps use Multipeer Connectivity).</p>
            </td>
            <td>
                <p>Open standard; Flexible discovery; Instant messaging; Built-in secure data path setup; Android API since 2017.</p>
            </td>
            <td>
                <p>Universally supported; Extremely energy-efficient; Background presence detection; Limited data rate. Often combined with Wi-Fi for bulk transfer.</p>
            </td>
        </tr>
    </tbody>
</table>
</div><p><em>(Note: Above ranges and throughput are based on Ditto’s real-world tests and specification data. Bluetooth 5's theoretical 4x range increase can reach ~400m line-of-sight, typical usable range 100–200m indoors. Wi-Fi range varies significantly with the environment.)</em></p><p>As the table shows, Wi-Fi Aware (NAN) and AWDL are closely matched in capabilities – no surprise, given their kinship. Both vastly outperform Bluetooth LE for high-bandwidth applications, though BLE remains invaluable for ultra-low-power needs and simple proximity detection. The sweet spot that AWDL and Aware occupy is: fast, local data exchange (from tens of megabits up to hundreds) over distances of a room or building floor, without requiring any network infrastructure. This is why forcing Apple to support Wi-Fi Aware is so pivotal – it means an iPhone and an Android phone sitting next to each other can finally establish a fast, direct Wi-Fi link without an access point, something that was previously impossible (because the iPhone would only speak AWDL, and the Android only Wi-Fi Aware/Wi-Fi Direct). In effect, the EU is unifying the table’s middle column (“Wi-Fi Aware”) across the industry, and pushing the proprietary AWDL column toward obsolescence.</p><h2>A Glimpse of Wi-Fi Aware 5.0 – What’s Next?</h2><p>The EU is already looking ahead to Wi-Fi Aware 5.0, mandating Apple support it when available. While v5.0 is still in the works, we can speculate based on industry trends and draft discussions:</p><ul role="list"><li><strong>Better Interoperability &amp; Backwards Compatibility:</strong> Each iteration of Aware aims to bring improvements while remaining backward compatible. v5.0 will likely fine-tune the interaction between different versions (e.g. allowing a v5 device to gracefully communicate with a v4 device at a slightly reduced feature set).</li></ul><ul role="list"><li><strong>Multi-Band and Wi-Fi 7 Enhancements:</strong> With Wi-Fi 7 (802.11be) emerging, v5.0 could incorporate support for Multi-Link Operation (MLO) – allowing Aware devices to use multiple bands or channels simultaneously for P2P, increasing reliability and throughput. It might also embrace new PHY capabilities like 320 MHz channels in 6 GHz or even integration of the 60 GHz band for <em>ultra-high throughput at short range</em>. Imagine a future Aware where two devices use 6 GHz for discovery and 60 GHz for a quick gigabit data burst.</li></ul><ul role="list"><li><strong>Improved Ranging and Location:</strong> Wi-Fi Aware might leverage Wi-Fi 7’s improved location features or even integrate with UWB. v5.0 could offer finer distance measurement or angle-of-arrival info by coordinating multiple antennas, which would interest AR/VR use cases and precise indoor positioning.</li></ul><ul role="list"><li><strong>Extended Mesh Networking:</strong> Currently, Aware focuses on finding peers and setting up links; v5.0 might add more mesh networking primitives – e.g., forwarding data through intermediate nodes or coordinating groups of devices more intelligently. This could turn clusters of phones into true mesh networks for group connectivity without infrastructure.</li></ul><ul role="list"><li><strong>Security Upgrades:</strong> Each version updates security. v5.0 will likely address any weaknesses found in v4, perhaps adding quantum-resistant encryption for pairing or tighter integration with device identity frameworks. Given Apple’s emphasis on privacy, expect them to push for features that allow secure sharing of connection metadata with third parties without exposing user data.</li></ul><p>We’ll know for sure once the Wi-Fi Alliance releases the Wi-Fi Aware 5.0 spec, but the direction is clear: faster, farther, and more seamless peer-to-peer connectivity. And importantly, Apple will be on board from day one (not years late as it was with previous standards).</p><h2>Wi-Fi Aware in Action: Android Kotlin Example</h2><p>To illustrate how developers can use Wi-Fi Aware, let’s look at a simplified real-world example on Android. Below is Kotlin code demonstrating a device publishing a service and handling a message from a subscriber. (Android’s Wi-Fi Aware API is available from API level 26; one must have location and “Nearby Wi-Fi Devices” permissions, and the device must support Aware.)</p><pre contenteditable="false"><code><span>val wifiAwareMgr = context.getSystemService(Context.WIFI_AWARE_SERVICE) </span><span>as WifiAwareManager
</span><span>
</span><span></span><span>if</span><span> </span><span>(!wifiAwareMgr.isAvailable)</span><span> </span><span>{
</span><span>    Log.e(</span><span>"WiFiAwareDemo"</span><span>, </span><span>"Wi-Fi Aware not available on this device."</span><span>)
</span><span>    </span><span>return</span><span>
</span>}

<span></span><span>// Attach to the Wi-Fi Aware service</span><span>
</span>wifiAwareMgr.attach(object : AttachCallback() {
<span>    </span><span>override fun </span><span>onAttached</span><span>(session: WifiAwareSession)</span><span> </span><span>{
</span><span>        </span><span>// Once attached, we can publish or subscribe</span><span>
</span>        val publishConfig = PublishConfig.Builder()
<span>            .setServiceName(</span><span>"com.example.p2pchat"</span><span>)    </span><span>// Name of our service</span><span>
</span>            .build()

        session.publish(publishConfig, object : DiscoverySessionCallback() {
<span>            </span><span>override fun </span><span>onPublishStarted</span><span>(pubSession: PublishDiscoverySession)</span><span> </span><span>{
</span><span>                Log.i(</span><span>"WiFiAwareDemo"</span><span>, </span><span>"Service published, ready for subscribers."</span><span>)
</span>            }

<span>            </span><span>override fun </span><span>onMessageReceived</span><span>(
</span><span>                session: DiscoverySession,
</span><span>                peerHandle: PeerHandle,
</span><span>                message: ByteArray
</span><span>            )</span><span> </span><span>{
</span>                val msgStr = String(message, Charsets.UTF_8)
<span>                Log.i(</span><span>"WiFiAwareDemo"</span><span>, </span><span>"Received message from subscriber: $msgStr"</span><span>)
</span><span>                </span><span>// Here we could respond or establish a data path if needed</span><span>
</span>            }
<span>        }, </span><span>null</span><span>)
</span>    }

<span>    </span><span>override fun </span><span>onAttachFailed</span><span>()</span><span> </span><span>{
</span><span>        Log.e(</span><span>"WiFiAwareDemo"</span><span>, </span><span>"Failed to attach to Wi-Fi Aware session."</span><span>)
</span>    }
<span>}, </span><span>null</span><span>)
</span></code></pre><p>In this code, the app attaches to the Wi-Fi Aware service, then publishes a service named <code>"com.example.p2pchat"</code>. When a peer subscribes and sends us a message (for example, “Hello from subscriber”), it arrives in <code>onMessageReceived</code>. A subscriber device would perform complementary steps: calling <code>session.subscribe(...)</code> with the same service name and implementing <code>onServiceDiscovered</code> to detect the publisher, then possibly using <code>subscribeSession.sendMessage(peer, ...)</code> to send that “Hello.” At that point, either side could then use <code>WifiAwareSession.createNetworkSpecifier()</code> to set up an actual data path (network interface) for larger communication.</p><p>The key takeaway is that Wi-Fi Aware makes peer discovery and messaging a first-class citizen in the API, abstracting away the low-level Wi-Fi fiddling. The app developer just provides a service name and gets callbacks when peers appear or messages arrive.</p><p>(Note: The above is a minimal example. In a real app, you’d handle permissions, check for support via <code>PackageManager.FEATURE_WIFI_AWARE</code>, and probably use the new NEARBY_WIFI_DEVICES permission on Android 13+. Also, establishing a full data path would involve requesting a <code>Network</code> from <code>ConnectivityManager</code> with a network specifier from the Aware session.)</p><p>Immediately after Google announced Wi-Fi Aware in Android, we at Ditto realized its potential for seamless peer-to-peer sync. As shown above, you can certainly roll your own discovery and data exchange with Aware. However, not every developer will want to manage these details or deal with corner cases of connectivity. That’s why Ditto’s real-time sync SDK is integrating Wi-Fi Aware support out-of-the-box<strong>.</strong>&nbsp;</p><p>Our upcoming releases will automatically use Wi-Fi Aware in iOS under the hood for nearby devices, enabling peer-to-peer database synchronization and binary file sharing between iOS and Android with zero configuration. In practical terms, if you build your app with Ditto, two devices in proximity will be able to find each other and sync data directly (bypassing cloud or LAN) using the fastest available transport – now including Wi-Fi Aware alongside Bluetooth, AWDL, LAN, etc.&nbsp;</p><p>Cross-platform, edge-first applications (collaborative apps, offline-first data stores, local IoT networks) will significantly benefit from this, as devices will form a local mesh that syncs instantly and reliably, even if the internet is down. Ditto’s approach has always been to multiplex multiple transports (Wi-Fi infrastructure, P2P, BLE, etc.) for robustness; adding NAN support supercharges the bandwidth available for nearby sync sessions.</p><p>A concrete example: Consider an app for first responders that shares maps and live sensor data among a team in the field. With Wi-Fi Aware, an Android tablet, an iPhone, and a specialized helmet device could all auto-discover each other and form a mesh to sync mission data in real-time without any network. Previously, if the iPhone had an app using AWDL, it couldn’t directly connect to the Android tablet’s Wi-Fi Aware session – they were incompatible silos. Now, they’ll speak one language, making such scenarios truly feasible.</p><h2>Bigger Picture: The Dawn of True Cross-Platform Mesh Networking</h2><p>Apple’s reluctant adoption of Wi-Fi Aware marks a pivot point for device connectivity. For years, we’ve seen a split: Apple’s ecosystem “Just Works” within itself (thanks to AWDL, AirDrop, etc.), while other platforms muddled along with standards that never quite matched the seamlessness or performance. That left cross-platform interactions hamstrung – the experience of sharing something between an iPhone and an Android was far from instant or easy.</p><p>With iOS supporting Wi-Fi Aware, we’re essentially witnessing AWDL go open. The proprietary tech that powered some of Apple’s most magical features will now be available in an interoperable way to any developer. The implications are significant:</p><ul role="list"><li><strong>End of the Proprietary P2P Divide:</strong> No more need for parallel implementations. Developers won’t have to build one system using MultipeerConnectivity for iOS-to-iOS and another using Wi-Fi Aware or Wi-Fi Direct for Android-to-Android. They can use Wi-Fi Aware universally for nearby networking. This reduces development complexity and encourages building features that work on all devices, not just within one brand.</li></ul><ul role="list"><li><strong>Cross-Platform AirDrop and Beyond:</strong> We will likely see apps (or OS-level features) that enable AirDrop-like functionality between iOS and Android. Google’s Nearby Share and Samsung’s Quick Share could potentially become interoperable with Apple’s implementation now that the underlying protocol is shared. The user experience barrier between ecosystems could start to blur in local sharing scenarios.</li></ul><ul role="list"><li><strong>Mesh and Edge Computing Potential:</strong> If many devices can seamlessly form ad-hoc networks, this enables new paradigms in edge computing. Clusters of phones could share workload or content directly. For example, at a conference, a presenter’s laptop could broadcast slides via Wi-Fi Aware to all audience phones without internet. Or a fleet of drones could coordinate via Aware when out of range of a base station. The offline mesh becomes a first-class citizen.</li></ul><ul role="list"><li><strong>Competitive Innovation:</strong> The EU’s push here also sets a precedent – even giants like Apple must conform to interoperability on critical features. This may drive Apple (and others) to innovate <em>on top of</em> the standards rather than via proprietary lock-in. We might see Apple contribute more actively to Wi-Fi Aware’s future improvements (as required by the DMA) to ensure it meets their needs for things like AR/VR data streams. That collaboration could yield better tech for everyone, faster.</li></ul><p>One can’t ignore the <em>irony</em> that the Wi-Fi Aware standard is effectively a child of AWDL. Now the child comes back to replace its parent. From a technical perspective, this is a win for engineering elegance – it’s always cleaner to have one agreed-upon protocol rather than parallel ones. From a developer perspective, it’s a huge win for interoperability and user reach.</p><p>Apple will undoubtedly ensure that the transition doesn’t degrade the experience for Apple-to-Apple interactions; the DMA even mandates that third-party access be <em>“equally effective”</em> as Apple’s own solutions. That means as developers, we should expect the new iOS 19 Wi-Fi Aware APIs to give us essentially what AWDL gave Apple’s apps. It’s like being handed the keys to a supercar that was previously locked in Apple’s garage.</p><h2>Conclusion</h2><p>The EU’s crackdown on Apple’s closed ecosystems is catalyzing a long-awaited unification in short-range wireless technology. By compelling Apple to adopt Wi-Fi Aware, the Digital Markets Act is effectively forcing the end of AWDL as an exclusive domain. For developers and users, this is exciting news: soon your apps will be able to use high-speed peer-to-peer Wi-Fi on iPhones and have it talk to other platforms seamlessly. We’ll likely see an explosion of innovative uses for local connectivity – from truly universal AirDrop alternatives to cross-platform local multiplayer games, ad-hoc collaborative editing, IoT device commissioning, and beyond – no specialized hardware or router required.</p><p>At a technical level, AWDL will be remembered as an ahead-of-its-time solution that proved what was possible, and Wi-Fi Aware ensures those capabilities are broadly available as an industry standard. With Wi-Fi Aware 4.0 on the cusp of ubiquity (and 5.0 on the horizon), we are entering a new era of frictionless sharing and syncing among devices in physical proximity. It’s a win for interoperability and a win for innovation in peer-to-peer networking. The walls around AWDL are coming down – and the implications for edge computing and offline experiences are profound.</p><p>‍</p><p><strong>Sources:</strong>&nbsp;</p><p>[1] European Commission – <em>DMA Decisions on Apple Interoperability (Q&amp;A)</em> – <strong>High-bandwidth P2P Wi-Fi (Wi-Fi Aware 4.0 in iOS 19, Wi-Fi Aware 5.0 next)</strong>. (2025)&nbsp; (<a href="https://digital-markets-act.ec.europa.eu/questions-and-answers/interoperability_en#:~:text=,by%20the%20end%20of%202025">Interoperability - European Commission</a>)</p><p>[2] The Apple Wiki – <em>Apple Wireless Direct Link (AWDL)</em> – <strong>Proprietary mesh protocol introduced in iOS 7 (2014) for AirDrop/Continuity.</strong>&nbsp; (<a href="https://theapplewiki.com/wiki/Apple_Wireless_Direct_Link#:~:text=Apple%20Wireless%20Direct%20Link%20is,used%20for%20other%20Continuity%20features">Apple Wireless Direct Link - The Apple Wiki</a>) (<a href="https://theapplewiki.com/wiki/Apple_Wireless_Direct_Link#:~:text=AWDL%20is%20a%20mesh%20protocol%2C,all%20members%20of%20the%20network">Apple Wireless Direct Link - The Apple Wiki</a>)</p><p>[3] ZDNet – <em>Apple’s AWDL protocol plagued by flaws…</em> – <em>Research note: “NAN (Wi-Fi Aware) is a new standard supported by Android which draws on AWDL’s design.”</em> (Nov 2019)&nbsp; (<a href="https://www.zdnet.com/article/apples-awdl-protocol-plagued-by-flaws-that-enable-tracking-and-mitm-attacks/#:~:text=%22NAN%2C%20commonly%20known%20as%20Wi,our%5D%20work">Apple's AWDL protocol plagued by flaws that enable tracking and MitM attacks | ZDNET</a>)</p><p>[4] Android AOSP Documentation – <em>Wi-Fi Aware feature (Neighbor Awareness Networking)</em> – <strong>Added in Android 8.0; supports discovery, connection, and ranging (added in Android 9).</strong>&nbsp; (<a href="https://source.android.com/docs/core/connect/wifi-aware#:~:text=The%20Wi,network">Wi-Fi Aware &nbsp;| &nbsp;Android Open Source Project</a>)</p><p>[5] Nordic Semiconductor – <em>Bluetooth Range Compared</em> – <strong>Bluetooth 5 LE offers up to ~400 m range (4× vs BLE4), 2 Mbps PHY, ~1.36 Mbps application throughput.</strong>&nbsp; (<a href="https://blog.nordicsemi.com/getconnected/things-you-should-know-about-bluetooth-range#:~:text=BLUETOOTH%20v2,outdoors">Things You Should Know About Bluetooth Range</a>)</p><p>[6] Computerworld – <em>Coming soon: Faster, longer-range Bluetooth 5</em> – <em>“In clear line of sight, Bluetooth 5 range could stretch to 400 meters,”</em> (2016)</p><p>[7] BGR -- <em>iOS 19 Features Coming to EU</em> -- <strong>Details new features for EU iPhones including high-bandwidth P2P Wi-Fi, sideloading, and alternative app stores</strong> (March 2025) (<a href="https://bgr.com/tech/8-exclusive-ios-19-features-coming-to-eu-iphone-users/">8 Exclusive iOS 19 Features Coming to EU iPhone Users</a>)</p><p>[8] Open Wireless Link Wiki - <em>What is Apple Wireless Direct Link (AWDL)</em> -- <strong>Apple’s patent on AWDL (US201800838) and origins as a successor to Wi-FI IBSS </strong>(<a href="https://owlink.org/wiki/#:~:text=,NAN">Wiki | Open Wireless Link</a>)</p><p>[9] CyberHoot – <em>Apple Wireless Direct Link (AWDL) – </em><strong>Apple deployed AWDL in over billion devices to power AirDrop, AirPlay peer Connections, and more</strong> (2002) (<a href="https://cyberhoot.com/cybrary/apple-wireless-direct-link-awdl/#:~:text=Apple%20Wireless%20Direct%20Link%20,a%20secondary%20display%20with%20%E2%80%98Sidecar%E2%80%98">Apple Wireless Direct Link (AWDL) - CyberHoot</a>)</p><p>[10] Wi-Fi Alliance – <em>Wifi Aware –</em><strong> Android added platform support for Wi-Fi Aware in Oreo (8.0) and later </strong>(<a href="https://www.wi-fi.org/discover-wi-fi/wi-fi-aware#:~:text=What%20operating%20systems%20support%20Wi,Aware">Wi-Fi Aware | Wi-Fi Alliance</a>)</p><p>[11] Usenix Association – <em>A billion Open Interfaces for Eve and Mallory: MitM, DoS, and Tracking ATtacks on iOS and macOS Through Apple Wireless Direct Link – </em><strong>AWDL integrates with Bluetooth Low Energy </strong>(<a href="https://www.usenix.org/conference/usenixsecurity19/presentation/stute#:~:text=USENIX%20www,services%20such%20as%20Apple%20AirDrop">A Billion Open Interfaces for Eve and Mallory: MitM, DoS ... - USENIX</a>)</p><p>[12] Octet Stream –<em> Building Cross Platform Offline - First Apps with Bluetooth Low Energy</em> - <strong>Integration with Bluetooth Low Energy </strong>(May 2024) (<a href="https://octet-stream.net/b/scb/building-cross-platform-offline-first-apps-with-ble.html#:~:text=Image">Building Cross-Platform Offline-First Apps with Bluetooth Low Energy</a>).</p><p>[13] Open Wireless Link – <em>Code</em> – <strong>Linux Implementation called OWL </strong>(<a href="https://owlink.org/code/#:~:text=OWL%20is%20a%20an%20open,monitor%20mode%20and%20frame%20injection">Code | Open Wireless Link</a>)</p><p>[14] Secure Mobile Networking Lab (SEEMOO) -- <em>Apple Wireless Direct Link (AWDL) and Secure Device Communications</em> –&nbsp; <strong>AWDL is a based ad-hoc protocol with Apple-specific extensions integrated into Apple’s ecosystem</strong> (<a href="https://www.seemoo.tu-darmstadt.de/team/mhollick/#:~:text=Apple%20Wireless%20Direct%20Link%20,device%20communications">Matthias Hollick – Secure Mobile Networking Lab</a>)</p><p>[15] WiFi Alliance – <em>Wi-Fi CERTIFIED Wi-Fi Aware Technology Overview</em> – <strong>Wi-Fi Aware always-on background discovery with power efficiency </strong>(2002) (<a href="https://www.wi-fi.org/file/wi-fi-certified-wi-fi-aware-technology-overview-2022#:~:text=individual%20preferences,device%20data%20exchange">Wi-Fi CERTIFIED Wi-Fi Aware™ Technology Overview (2022) | Wi-Fi Alliance</a>)</p><p>[16] WiF Alliance – <em>Wi-Fi Aware Specification v4.0 </em>– <strong>Detailed Specification for Wi-Fi Aware technology </strong>(2022)<strong> </strong>(<a href="http://about:blank">Wi-Fi Aware Specification v4.0.pdf</a></p><p>‍</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Are Levi's from Amazon different from Levi's from Levi's? (109 pts)]]></title>
            <link>https://nymag.com/strategist/article/levis-amazon-jeans-testing.html</link>
            <guid>43504451</guid>
            <pubDate>Fri, 28 Mar 2025 12:18:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nymag.com/strategist/article/levis-amazon-jeans-testing.html">https://nymag.com/strategist/article/levis-amazon-jeans-testing.html</a>, See on <a href="https://news.ycombinator.com/item?id=43504451">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-editable="main" data-track-zone="main">  <article role="main" data-track-type="article-detail" data-uri="nymag.com/strategist/_components/article/instances/cm8opcv7z000n0igxojqx479f@published" data-content-channel="Clothing &amp; Accessories" data-crosspost="" data-type="Explainer" data-syndication="original" data-headline="Are Levi’s From Amazon Different From Levi’s From Levi’s?" data-authors="Erin Schwartz" data-publish-date="2025-03-26" data-tags="the strategist, jeans month, fashion, unisex apparel, strategist investigates, strategist most popular" data-issue-date="" data-components-count="24" data-canonical-url="http://nymag.com/strategist/article/levis-amazon-jeans-testing.html">


  
  
  
  <header>
    <div>
          

            <p><span>
                  <a href="https://nymag.com/author/erin-schwartz/" rel="author">
                    <img src="https://pyxis.nymag.com/v1/imgs/e89/ab6/b39a4f42c3ede53d0534de0ccaa699a922-ErinSchwartzFINAL.2x.rsquare.w168.jpg" alt="Portrait of Erin Schwartz">
                  </a>
                </span>
            <span data-editable="bylines">
            <p><span>By</span> <span>
        ,
          <span>a Strategist writer covering décor, gardening, and garment care.</span><span>&nbsp;</span>
          <span>They previously worked as an editor at Garage magazine. </span>
      </span></p>

              </span>
          </p>
        </div>
  </header>
  <section>
    <div data-editable="content">
      <div>
          <div>
            <picture> <source media="(min-resolution: 192dpi) and (min-width: 1180px), (-webkit-min-device-pixel-ratio: 2) and (min-width: 1180px)" srcset="https://pyxis.nymag.com/v1/imgs/124/022/9e0f90e82d87160d06a0b7dd52cd097336-levis-jeans-versus.2x.rhorizontal.w700.jpg 2x" width="700" height="467"> <source media="(min-width: 1180px) " srcset="https://pyxis.nymag.com/v1/imgs/124/022/9e0f90e82d87160d06a0b7dd52cd097336-levis-jeans-versus.rhorizontal.w700.jpg" width="700" height="467"> <source media="(min-resolution: 192dpi) and (min-width: 768px), (-webkit-min-device-pixel-ratio: 2) and (min-width: 768px)" srcset="https://pyxis.nymag.com/v1/imgs/124/022/9e0f90e82d87160d06a0b7dd52cd097336-levis-jeans-versus.2x.rhorizontal.w700.jpg 2x" width="700" height="467"> <source media="(min-width: 768px)" srcset="https://pyxis.nymag.com/v1/imgs/124/022/9e0f90e82d87160d06a0b7dd52cd097336-levis-jeans-versus.rhorizontal.w700.jpg" width="700" height="467"> <source media="(min-resolution: 192dpi), (-webkit-min-device-pixel-ratio: 2)" srcset="https://pyxis.nymag.com/v1/imgs/124/022/9e0f90e82d87160d06a0b7dd52cd097336-levis-jeans-versus.2x.rsquare.w400.jpg" width="400" height="400"> <img src="https://pyxis.nymag.com/v1/imgs/124/022/9e0f90e82d87160d06a0b7dd52cd097336-levis-jeans-versus.rsquare.w400.jpg" data-content-img="" width="400" height="400" fetchpriority="high"> </picture>
          </div>
            <div>
              <p><span>Photo-Illustration: The Strategist; Photos: Retailers</span>
              </p>
            </div>
              </div>
        <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8q6doid000e3b70nm6dlj0y@published" data-word-count="38">Welcome to Jeans Month on the Strategist, where we’re obsessively vetting denim — from trying on every pair at the Gap to asking dozens of stylish people about their favorite fits. For more, head to our&nbsp;<a href="https://nymag.com/strategist/article/welcome-to-jeans-month.html">Jeans Month hub</a>.</p>

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdcg5000n3b83q66rk27b@published" data-word-count="84">The Strategist recently received a mysterious tip — the tipster had bought a pair of <a href="https://nymag.com/strategist/article/best-jeans-for-women-of-all-sizes-and-styles.html">Levi’s jeans</a> from Amazon that felt notably different from (and worse than) a pair that came directly from Levi’s. I’ve heard versions of the same theory over the years — not just for Levi’s and Amazon but from buyers of brand-name tank tops, <a href="https://nymag.com/strategist/article/best-mattresses-buy-online.html">mattresses</a>, and <a href="https://nymag.com/strategist/article/best-mens-white-t-shirt-according-to-men.html">T-shirts</a> who were convinced that what they’d gotten from a cheaper retailer was lower quality than the version sold elsewhere under the same name.</p>

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdchu000o3b83s7uh1nac@published" data-word-count="98">As the Strategist’s resident materials expert, I was on the case. I acquired two pairs each of our most-recommended jeans&nbsp;(women’s Wedgies and Ribcages and the classic men’s 501s) — one pair ordered from Amazon, one pair sent by Levi’s for each style. I was careful to match up the same washes to prevent differences in distressing or fabric treatment from skewing the results. Still, I was skeptical. It didn’t make sense: Why would Levi’s maintain separate supply chains for different retailers? I pulled the jeans out of their plastic packaging expecting them to be indistinguishable. They were not.</p>



  <div data-uri="nymag.com/strategist/_components/image/instances/cm8opx2mo004d3b83pjaaxken@published" data-editable="settings">
    
    <p>
      The color difference between non-Amazon Ribcage denim (above) and Amazon Ribcage denim (below).
      <span>Photo: Author</span>
    </p>
</div>

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdcnl000q3b83h9zbjf2g@published" data-word-count="80">The first thing I noticed: The washes looked different. The most pronounced were the Ribcage jeans in a medium blue called “Jazz Pop” — the pair from Amazon had a smoother handfeel and more even color, while the non-Amazon pair felt bumpier with small flecks of higher-contrast fading, an effect I associate with acid washing. The Wedgies from Amazon had a bumpier feel as well, and the 501s from Amazon were a hint darker, closer to indigo than medium blue.</p>



  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdcpi000r3b83qobycz9g@published" data-word-count="85">To figure out whether these aesthetic variations made for differences in quality, I took all the jeans to the testing lab of F.I.T.’s Textile Development and Marketing Department. The pairs were mixed and relabeled to obscure which one came from which retailer; lab assistant Cesar Saavedra stamped and snipped out samples, which were then weighed, pipetted with bleach, and clamped into a blue metal machine that exerted hundreds of pounds of force to rip the denim against the grain before releasing with a pneumatic hiss.</p>

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdcr4000s3b8328pj5kpl@published" data-word-count="43">Based on the results, “the denim in each of these six pairs is different,” said Margaret Bishop, an adjunct professor in the department. “It’s all strong. You’re not getting a cheap product.” But in a blind test, none of the jeans was identical.</p>



  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdcti000t3b83cui3v8ef@published" data-word-count="142">Back at the office, I reconciled my data with my denim scraps to interpret the results. There were some outliers — most of the denim weighed 13 to 14 ounces per square yard except for a pair of non-Amazon 501s, which was 30 percent lighter than its analogue. A pair of non-Amazon Ribcages was significantly less resistant to tearing. But for the most part, one source didn’t significantly outperform the other. In fact, the jeans from Amazon did slightly better on average, but with a six-jean sample size, take that with a grain of salt. The aesthetic differences also didn’t correlate to the jeans’ strength. Bishop attributed the bumpier handfeel of a couple of the pairs to the level of twist in the yarn, but it didn’t make them weaker. (A colorfastness test confirmed the two Jazz Pop Ribcages were dyed differently.)</p>



  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdd49000w3b83q0z4338c@published" data-word-count="56">It seemed the tipster was half right. The tests confirmed a lot of variability between two pairs of the same jeans — you could buy the same style from Amazon and Levi’s and feel a difference. But it didn’t add up to gaps in quality; there was no indication that the Levi’s from Amazon were worse.</p>

  <div data-uri="nymag.com/strategist/_components/image/instances/cm8oq5iht004x3b83o0m6kl74@published" data-editable="settings">
    
    <p>
      A denim sample undergoes a tensile strength test at FIT.
      <span>Photo: Author</span>
    </p>
</div>

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdd69000x3b83m12yh5v7@published" data-word-count="69">Levi’s sources its fabric from dozens of mills across the world, from luxury supplier&nbsp;<a href="https://www.candianidenim.com/">Candiani</a>&nbsp;in Italy to sites in India, Bangladesh, Mexico, and Turkey. The six pairs I tested were manufactured in three places: Cambodia, Macau, and Mexico. The company’s supply chain is vast, and to some extent, it makes sense that jeans made to the same specifications from different mills, dye facilities, and factories would result in different products. <strong>﻿</strong></p>

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8q3wvjz000e3b831ceim9em@published" data-word-count="86">This is especially true for washes and distressing, a notoriously fiddly process. “Wash houses get a formula — a recipe, if you will — of how the denim is supposed to be washed. You might have different machinery, you might have slightly different chemicals,” says Maxine Bédat, author of the jeans study <a href="https://bookshop.org/p/books/unraveled-the-life-and-death-of-a-garment-maxine-bedat/15314085"><em>Unraveled</em></a><em>. </em>Some distressing — whiskering, fraying — is done by hand. Just as “everybody making a recipe doesn’t come out with the same pie,” small differences in production will add up to different-looking jeans.</p>

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opdd7v000y3b83keh6diid@published" data-word-count="70">“The bigger the brand and the more channels in which it’s sold, the more diverse quality and fabric you’re going to see,” says Angela Velasquez, the executive editor of <a href="https://sourcingjournal.com/denim/">SJ Denim</a>. If you want to minimize variation between pairs of jeans, she says to look for a “smaller, niche brand,” which is more likely to have a tighter supply chain and thus fewer differences in fabric and fit between pairs.</p>

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opddd8000z3b83i069dq7h@published" data-word-count="103">Do you have to worry about this if you’re just looking for a good pair of jeans? Not necessarily. According to Bédat, the way to get the most out of your denim is to “really spend time thinking about what actually works and fits,” which will probably involve going into a store in person. But I’ve found no evidence of a plot to offload worse denim onto Amazon. “I truthfully think the only consumers that really care about all the nitty-gritty and will know what any of this means are the true denim heads,” says Velasquez. And they’re getting their denim from <a href="https://en.wikipedia.org/wiki/Kaihara_Denim">Kaihara</a>.</p>



  

  

  <section data-uri="nymag.com/strategist/_components/package-list/instances/cm8rigcuk000n3b83gssfne6w@published" data-track-type="article-list">
  
    <ul>
        <li data-track-type="article-link" data-track-component-name="package-list" data-track-page-uri="nymag.com/strategist/_pages/cm7rwt6wc00000iftacgkhg7a@published" data-track-headline="What’s the Difference Between a Pair of $30 Jeans and $300 Jeans?" data-track-index="0" data-track-component-title="">
          <span>
            <svg viewBox="0 0 11 16" xmlns="http://www.w3.org/2000/svg" role="img"><path d="M10.925 8.275l.01-.02-3.321 7.286a.654.654 0 0 1-.583.348c-.373 0-.676-.316-.676-.705V12.91a.481.481 0 0 0-.47-.492H.654C.296 12.419 0 12.11 0 11.73V4.158c0-.38.295-.688.66-.688l5.224.001c.26 0 .471-.22.471-.49V.704c0-.39.303-.705.676-.705.248 0 .481.141.583.348l3.32 7.285-.009-.019a.761.761 0 0 1 0 .66z" fill="#F85D00" fill-rule="evenodd"></path></svg>

          </span>
          <a href="https://nymag.com/strategist/article/cheap-vs-expensive-jeans.html">
            <span>
              What’s the Difference Between a Pair of $30 Jeans and $300 Jeans?
            </span>
          </a>
        </li>
        <li data-track-type="article-link" data-track-component-name="package-list" data-track-page-uri="nymag.com/strategist/_pages/cm7aw0fce00000ijj6yqrrkgf@published" data-track-headline="I Spent 3 Hours at the Jellycat Diner" data-track-index="1" data-track-component-title="">
          <span>
            <svg viewBox="0 0 11 16" xmlns="http://www.w3.org/2000/svg" role="img"><path d="M10.925 8.275l.01-.02-3.321 7.286a.654.654 0 0 1-.583.348c-.373 0-.676-.316-.676-.705V12.91a.481.481 0 0 0-.47-.492H.654C.296 12.419 0 12.11 0 11.73V4.158c0-.38.295-.688.66-.688l5.224.001c.26 0 .471-.22.471-.49V.704c0-.39.303-.705.676-.705.248 0 .481.141.583.348l3.32 7.285-.009-.019a.761.761 0 0 1 0 .66z" fill="#F85D00" fill-rule="evenodd"></path></svg>

          </span>
          <a href="https://nymag.com/strategist/article/jellycat-diner-reservation-fao-schwartz-new-york.html">
            <span>
              I Spent 3 Hours at the Jellycat Diner
            </span>
          </a>
        </li>
        <li data-track-type="article-link" data-track-component-name="package-list" data-track-page-uri="nymag.com/strategist/_pages/cm5qtnn9p00170ieayzu4z9t2@published" data-track-headline="What Jennifer Aniston Can’t Live Without" data-track-index="2" data-track-component-title="">
          <span>
            <svg viewBox="0 0 11 16" xmlns="http://www.w3.org/2000/svg" role="img"><path d="M10.925 8.275l.01-.02-3.321 7.286a.654.654 0 0 1-.583.348c-.373 0-.676-.316-.676-.705V12.91a.481.481 0 0 0-.47-.492H.654C.296 12.419 0 12.11 0 11.73V4.158c0-.38.295-.688.66-.688l5.224.001c.26 0 .471-.22.471-.49V.704c0-.39.303-.705.676-.705.248 0 .481.141.583.348l3.32 7.285-.009-.019a.761.761 0 0 1 0 .66z" fill="#F85D00" fill-rule="evenodd"></path></svg>

          </span>
          <a href="https://nymag.com/strategist/article/jennifer-aniston-favorite-things.html">
            <span>
              What Jennifer Aniston Can’t Live Without
            </span>
          </a>
        </li>
        <li data-track-type="article-link" data-track-component-name="package-list" data-track-page-uri="nymag.com/strategist/_pages/cm759hxzh003l0iemmrdzmkrk@published" data-track-headline="The State of the Status Hand Soap" data-track-index="3" data-track-component-title="">
          <span>
            <svg viewBox="0 0 11 16" xmlns="http://www.w3.org/2000/svg" role="img"><path d="M10.925 8.275l.01-.02-3.321 7.286a.654.654 0 0 1-.583.348c-.373 0-.676-.316-.676-.705V12.91a.481.481 0 0 0-.47-.492H.654C.296 12.419 0 12.11 0 11.73V4.158c0-.38.295-.688.66-.688l5.224.001c.26 0 .471-.22.471-.49V.704c0-.39.303-.705.676-.705.248 0 .481.141.583.348l3.32 7.285-.009-.019a.761.761 0 0 1 0 .66z" fill="#F85D00" fill-rule="evenodd"></path></svg>

          </span>
          <a href="https://nymag.com/strategist/article/state-of-the-status-hand-soap-2025.html">
            <span>
              The State of the Status Hand Soap
            </span>
          </a>
        </li>
    </ul>
</section>

  

  <p data-editable="text" data-uri="nymag.com/strategist/_components/clay-paragraph/instances/cm8opcv7z000m0igxhe2pjqha@published" data-word-count="48"><a href="https://nymag.com/strategist/about-us/"><em>The Strategist</em></a><em>&nbsp;is designed to surface&nbsp;useful, expert recommendations for things to buy across the vast e-commerce landscape. Every product is independently selected by our team of editors, whom&nbsp;you can read about&nbsp;</em><a href="https://nymag.com/strategist/article/meet-the-strategist-team.html"><em>here</em></a><em>. We update links when possible, but note that deals can expire and all prices are subject to change.</em></p>


    </div>

    


          



      <span>Are Levi’s From Amazon Different From Levi’s From Levi’s?</span>



  </section>
  
</article>

  

</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I drove 300 miles, then asked police to send me surveillance footage of my car. (438 pts)]]></title>
            <link>https://cardinalnews.org/2025/03/28/i-drove-300-miles-in-rural-virginia-then-asked-police-to-send-me-their-public-surveillance-footage-of-my-car-heres-what-i-learned/</link>
            <guid>43504413</guid>
            <pubDate>Fri, 28 Mar 2025 12:14:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://cardinalnews.org/2025/03/28/i-drove-300-miles-in-rural-virginia-then-asked-police-to-send-me-their-public-surveillance-footage-of-my-car-heres-what-i-learned/">https://cardinalnews.org/2025/03/28/i-drove-300-miles-in-rural-virginia-then-asked-police-to-send-me-their-public-surveillance-footage-of-my-car-heres-what-i-learned/</a>, See on <a href="https://news.ycombinator.com/item?id=43504413">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-126445">
	<div>

		
		<p>Two police officers walked into a doughnut shop.&nbsp;

</p><p>It’s not the opening line of a joke; it’s what I saw as I was working on an early draft of this story in March at the Staunton Dunkin’, about a quarter mile from where my vehicle was captured on a Flock camera in January and February coming back from my trips to Cardinal’s Roanoke office.&nbsp;

</p><p>Their eyes may have strayed to the racks of Boston creme, lemon-filled and coconut-covered doughnuts as they strode to the counter with purpose, but they were here for something else.

</p><p>Surveillance footage.&nbsp;

</p>

<p>The research for <a href="https://cardinalnews.org/2025/02/10/state-of-surveillance-everyones-watching/">State of Surveillance</a> showed that you can’t drive anywhere without going through a town, city or county that’s using public surveillance of some kind, mostly license plate reading cameras. I wondered how often I might be captured on camera just driving around to meet my reporters. Would the data over time display patterns that would make my behavior predictable to anyone looking at it?&nbsp;

</p><p>So I took a daylong drive across Cardinal Country and asked 15 law enforcement agencies, using Freedom of Information Act requests, to provide me with the Flock LPR footage of my vehicle. My journey took me over 300 miles through slices of the communities those agencies serve, including the nearly 50 cameras they employ. And this journey may take me to one more place: an <a href="https://cardinalnews.org/2025/03/13/city-of-roanoke-botetourt-county-sheriff-go-to-court-over-foia-request/">April Fool’s Day hearing in a courtroom in Roanoke</a>. There, a judge will be asked to rule on a motion to declare the footage of the public to be beyond the reach of the public.&nbsp;

</p><p>But while Roanoke and Botetourt and two other police agencies denied my request for that footage, nine agencies complied and searched their data for signs of me passing through.

</p><p>Here’s what I found.

</p><h2 id="h-check-out-the-other-stories-in-this-ongoing-series">Check out the other stories in this ongoing series.</h2><p>February 13, 2025, I left Staunton around 7:30 in the morning to head toward Roanoke. Richmond Avenue, on the outskirts of the city, is probably the way most people make their way out of town to interstates 64 and 81. It’s a significant crossroad of the region’s major east-west and north-south highways.&nbsp;

</p><p>Staunton maintains at least one of its six Flock cameras on a local intersection just shy of the cluster of on- and off-ramps. It makes surveillance-sense to position cameras to see who’s coming in and who’s leaving your town at such a singular crossroad.

</p><p>I was not captured by a Flock camera there, though.&nbsp;

</p><p>As part of its services, Flock advises police on where to place its tech. The top priority appears to be places of entry and exit around the community, notably near the main highways. It’s possible that Staunton doesn’t have a camera taking pictures of who is leaving town; it’s also possible my vehicle’s plate was blocked by heavy morning traffic and so no photo could be taken.

</p><p>It was a cold morning, but truckers and car drivers were behaving on the morning commute. Staying on I-81, I passed through Augusta, Rockbridge and Botetourt counties, which between them have at least eight Flock cameras. I didn’t think any would be pointed at the main highway because currently Flock can’t place its cameras on state property.&nbsp;

</p><p>Ninety uneventful minutes later, I pulled into Roanoke to go to the Cardinal office and visit my Roanoke members of our own Cardinal team — which, in an unintentional irony in this story, we refer to as The Flock.&nbsp;

</p><p>I got into town just after 9:15 a.m. I know that because a Roanoke Police Department Flock camera captured my car traveling southbound down Williamson Road near the Salem Avenue intersection at 9:16:09 a.m. (That photo, as well as another, were provided by the Staunton police, as part of their arrangement to access other agencies’ data in their Flock searches.)

</p><p>You can see from the image below exactly what Flock technology captures: a decent shot of the back of any vehicle that passes, a readable image of the license plate.&nbsp;

</p><figure><img decoding="async" src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXf_HMRlMXdob4VJdAguQ4_OKmzqsMM1YBFx7mRGwT2vEucUOKbW27Rr-DocAuAwO5euuyhd4PRz1P2cTZxR28rUW2lTFEBo6BlqKmiWvV89iz2wkZ4fEsownB9wIzFUdEoDeXxB?key=F1ZFCrsGJ8bQyvmoKAwDjVaf" alt=""></figure><p>Part of Flock’s proprietary tech determines the make and model of the vehicle and also notes if there are bumper stickers, bike racks, any other unique markings that would help identify that vehicle. That generates a “vehicle fingerprint” for every car or truck, which none of the agencies I FOIA’d would provide me. That fingerprint could prove helpful in the case where a witness or other camera captured some non-license-plate information about a vehicle, like specific bumper stickers or a roof rack.&nbsp;

</p><p>I parked my car on Church Avenue, walked to the office and logged in to our morning news meeting. Some of our reporters were there in person; others began popping up on the screen from their beats in Danville, Martinsville and Bristol. We talked about our day’s work. Afterward, I drove around town just to see if I’d be picked up in a residential area. I started in Gainsboro. Snow covered the ground around the homes on Gilmer Avenue. I did not notice any cameras.

</p><p>I crossed town to Marshall Avenue and a neighborhood within a few blocks of the YMCA, and then on to another neighborhood sitting next to Interstate 581, which reaches across the town like a tight belt of loud traffic. Looking between homes, I saw the Roanoke Star, perched over trees frosted with ice not yet melted.&nbsp;

</p><p>Each of these neighborhoods had different backstories and histories you could see in the architecture of their homes, in the cars that parked on their streets. One thing they had in common on that cold morning: They were all very quiet. And I did not see any surveillance cameras.&nbsp;

</p><p>Later, I received no images of my car in those places. Flock can be used to monitor public space in suspected high-crime areas, which has earned it the wrath of rights organizations including the ACLU. Because Roanoke has only five cameras, according to contracts we received from the city, it’s my guess they are not yet focusing on specific populations or neighborhoods.&nbsp;

</p><p>After those brief stops, I left town mid-morning. I can’t tell you exactly when, and I’ll tell you why that’s relevant.

</p><p>When I eventually received data from the Staunton Police about my trip, I noticed that Flock cameras had photographed my vehicle in similar locations within both Staunton and Roanoke at similar times on another day, January 29. If you asked me today if I knew whether I had made a trip to the Roanoke office on Jan. 29, I would hesitate before I could answer. I would have to check my calendar and emails to be able to say that I was there, with certainty.

</p><p>But the police would have known, if they wanted to, without asking for any kind of warrant or court order.

</p><p>* * *

</p><p>Franklin County does have four Flock cameras, but my vehicle’s image was not captured by any of them. Until I came into town, I was staying on routes 220 and 57.

</p><p>U.S. 220 was a misty spectacle on Feb. 13. Ice made trees sag. Thick limbs and branches crashed under the weight, closing the right lane of the highway in some places. Snow covered shaded places around buildings, but the roads were mostly clear, and traffic moved along. Nearing noon, milder temps had caused fog to rise up from the hollers. As I drove south past Boones Mill and Trump Town USA, I knew I would not trigger that town’s lone operational Flock camera. It’s set up to catch northbound traffic.

</p><p>&nbsp;<img decoding="async" width="437" height="353" src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXdiKIHwdR3kGicHT_cfyMzBOgTvUv6LBlmD8CULQMECE6thd0neOgFntb9YJ4R40MWxVcelQjnimor5gYHPKmSrWR2_99TSKd1DoDNthZaW5owjnUEy0yvkgfqpMSPdr6yYqrJK?key=F1ZFCrsGJ8bQyvmoKAwDjVaf">

</p><p>I entered Martinsville via Fayette Street. Martinsville has dozens of Flock cameras, 48 according to the contracts Cardinal News gathered, so I expected to be picked up multiple times. However, my vehicle was detected only once.&nbsp;

</p><p>Even the police chief, Rob Fincher, was surprised. He was open to running the test again, but I wasn’t trying for statistical accuracy; I wanted this to be a record of a single day. There are lots of things that can get in the way of taking a clear picture, including glare and shadow and other things (cars in this case) getting between your camera and your subject. Some of those things may have been at play on that particular day.

</p><p>A Martinsville Flock camera did spot my vehicle at 12:11 p.m. eastbound on the way into town from its perch near the corner of West Church Street and South Memorial Boulevard.

</p><div><figure><img decoding="async" src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXc1tXIbvAfOb2o_wBZAc-p2YPMIsv-vCGP61fLP9CwtCDSNnTSNBQcC9Tmy1OYLMfqkrwnXhxq1uvqiXG7QbsEKTgOge6rge_yRc63FzHE0LJuMG5iWz2cJLWPVhAcuc7lVAC1j?key=F1ZFCrsGJ8bQyvmoKAwDjVaf" alt=""></figure></div><p>Twenty-two minutes later I was spreading cream cheese on a bagel and coffee at the Ground Floor. (I know the time because I took my own photo, not because of a surveillance camera timestamp.)&nbsp;

</p><p>The place was bustling. On most tables stood a little rubbery Jesus toy. On one wall hangs a long roll of brown paper where people casually write their prayers. I was reminded that some people believe you’re being watched 24/7 by a higher power, though I’d argue there’s likely a pretty high trust factor about how that surveillance might be utilized. I touched base with our Martinsville reporter Dean-Paul Stephens, and then headed for Danville.

</p><p>* * *

</p><p>Speaking of trust and ethics: two weeks later, Lt. Greg Jones called me at the Roanoke office. The Amherst County Sheriff’s Office had a question about my request for data about my vehicle.

</p><p>“You weren’t trying to spy on a cheating wife or something like that, were you?” he asked.

</p><p>I assured him that I wasn’t. As Cardinal Executive Director Luanne Rife points out in her column on Sunshine Week, public agencies don’t have to agree with why you’re asking for their public information. The idea is that it belongs to you already. They are under legal obligation to provide it to you.

</p><p>Not to say this question didn’t cause some thought and conversation in the newsroom. Public surveillance data like this could indeed be used to stalk an ex; it could also be used by a person suspicious their ex is stalking them to see if their ex’s vehicle actually could be found on the same roads as theirs and at the same times, which could then be used to secure a protective order or even open a criminal investigation. It could be used by private investigators to find bail jumpers and missing persons. Now imagine all those requests coming in to the local police agency…

</p><p>The only reason it hadn’t happened yet was because people really didn’t know they could do that. Suddenly the cops could be in the position to find themselves spending hours looking up public surveillance for citizens with all sorts of reasons to utilize the data.&nbsp;&nbsp;

</p><p>So was this a fool’s errand I was on? I didn’t think so. The police in over 80 of our local communities had chosen to start photographing citizens in their vehicles in public and sharing this with other agencies in our region and beyond, even out of state. I wasn’t the one running over 500 searches a month on its citizens, as the Roanoke police were doing. And who knows who they were running those searches on, and why?&nbsp;

</p><p>* * *

</p><p>By the time I reached Danville, the weather was almost warm. The sun was out and glancing through the empty trees along Craghead Street and in through the plate glass windows of Links Coffee House.&nbsp;

</p><p>I found out after requesting data from Danville that while they did have a contract with Flock, they had not yet installed the Flock cameras, according to Matt Bell, the city’s PR specialist.

</p><p>The coffee was good. The casual conversation surveillance was rich with interesting dialogues. But I had miles to go. It was just before 2 p.m. Time to get moving again.

</p><p>* * *

</p><p>Traffic in Lynchburg was heavy around 3:30 p.m. as I drove north along U.S. 29 Business. I figured there might be at least some of Lynchburg’s Flock cameras along the very busy Business 29, also known in that area as Wards Road.&nbsp;

</p><div><figure><img decoding="async" src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXdG0kqPYoqTpeKwbJq3pt-xBhMMENcoh8Q9qXuTEqOT934KRTNG9OGIQrrlwv4AB6zGEQ9lXw2WLJp244rAM9Z2OO2MxrIYkpg4oOe_qET6VDdM_TeGyVh4UDJg8zor-NzHr3VO?key=F1ZFCrsGJ8bQyvmoKAwDjVaf" alt=""></figure></div><p>Just south of Liberty University, a Flock camera picked up my car near Wards Ferry Road. Lynchburg has at least a dozen Flock cameras, according to contracts we got from them during our reporting for our first State of Surveillance story. I figured one might be on this stretch of road.&nbsp;

</p><p>By this point in the afternoon, the novelty of the day was wearing off. I got back on main route 29 and headed north.&nbsp;

</p><p>Along the rest of the way, I passed through Amherst County, which has four Flock cameras; Nelson County, which has none; and Augusta County, with two cameras. Since I stuck to the main roads, U. S. 29 and then I-64, the chances of running into a camera were low. If I’d pulled off onto a main county road, things might have been different.&nbsp;

</p><p>In March, Amherst would conduct a search and be unable to find my vehicle. Same with Augusta County.

</p><p>At 4:59 p.m., I exited the highway onto Richmond Avenue in Staunton. This time a Flock camera spotted my vehicle and got a clear picture. I went home and ordered pizza.

</p><p>Which brings me back to the cops in the coffee shop, a few weeks later.

</p><figure><img decoding="async" src="https://lh7-rt.googleusercontent.com/docsz/AD_4nXf9asn8llkR7svavVysl8WuMEYyJYC9AZ3Tf90fC0O3G-WbvfRz7V18DJi6ijgE8jihK6OjT-JSBurnZ9ezIKT0NawsI7LZnJ2aOCm-Xp_aAE08hoRm_Y2mNTzo4Nhm7SsOujA?key=F1ZFCrsGJ8bQyvmoKAwDjVaf" alt=""></figure><p>* * *

</p><p>As I mentioned, the two police officers were not interested in doughnuts, or even coffee. They asked to speak to the manager. The counter person explained that the manager was at the other store across town. They asked if they could speak to that person on the phone.&nbsp;

</p><p>It was then I noticed that a person who had come in with them was part of this conversation.&nbsp;

</p><p>From what I could gather, because I didn’t pull out my press badge and start asking questions, the young woman with them had been in some kind of incident; and that the police had determined that maybe some of the video footage that Dunkin takes of its drive-through may have caught the other car as it passed on the road beyond; or maybe the offending vehicle had come through the drive-through.&nbsp;

</p><p>In a few minutes, the officers and the woman were guided behind the counter to review footage.&nbsp;

</p><p>This scene somehow made me feel optimistic about how we’re already using such technology. It still operates under the notion that not all data belongs to the police. They have to ask, or convince a judge to give them a court order.

</p><p>Yet just glancing at the footage I have included in this story, it’s also a little creepy to see how as few as four to six pictures, properly time- and date-stamped, can establish patterns that could enable someone to know with some likelihood how they could intercept me on my way to work one morning.

</p><p>There are two differences between police use of other visual data (like a store’s security video) and Flock’s gathering of public footage (such as my car). In that first case, there’s a crime involved. And the privately captured video is granted to police voluntarily and for a good reason. It’s not theirs to take and examine at their leisure.&nbsp;

</p><p>Public-facing LRP cameras like Flock’s, on the other hand, capture vast amounts of data unrelated to any criminal activity. And there’s zero oversight outside of the law enforcement community.&nbsp;This goes back to the idea that footage taken of me in public, non-investigative in nature, can be considered investigative and not subject to a public information request, and concerns me.&nbsp;

</p><p>The idea that a law enforcement agency will claim the images that we see in this story are “investigative” in nature — and need to be protected from me — tells me that they are worried about something else. What is it?&nbsp;

</p><p>It’s a paradigm shift where we go from having an expectation of privacy even in public spaces to its inverse. Not only do we not have a right to privacy in public; we don’t even have a right to see ourselves as the government and police might see us — a set of still moments in place and time from which they, not us, can decide what our story is.&nbsp;

</p><p><em>We want to know what you think! Tell us what you think about surveillance or share your experiences <a href="https://forms.gle/gdxTX4V7vmkVjbV7A">here.</a></em>

</p>
	</div><!-- .entry-content -->

	<!-- .entry-footer -->

	
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to Write Blog Posts That Developers Read · Refactoring English (211 pts)]]></title>
            <link>https://refactoringenglish.com/chapters/write-blog-posts-developers-read/</link>
            <guid>43503872</guid>
            <pubDate>Fri, 28 Mar 2025 11:01:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/">https://refactoringenglish.com/chapters/write-blog-posts-developers-read/</a>, See on <a href="https://news.ycombinator.com/item?id=43503872">Hacker News</a></p>
<div id="readability-page-1" class="page"><section><article><header></header><p>I recently spoke to a developer who tried blogging but gave up because nobody was reading his posts. I checked out his blog, and it was immediately obvious why he didn’t have any readers.</p><p>The developer had interesting insights, but he made so many mistakes in presenting his ideas that he was driving everyone away. The tragedy was that these errors were easy to fix. Once you learn to recognize them, they feel obvious, but some bloggers make these mistakes for years.</p><p>I know because I’m one of them.</p><p>I’ve been blogging about software development for nine years. My best posts have reached 300k+ readers, but many of them flopped, especially in my first few years.</p><p>Over time, I’ve learned techniques that help some blog posts succeed and the pitfalls that cause others to languish in obscurity.</p><ul><li><a href="#why-listen-to-me">Why listen to me?</a></li><li><a href="#get-to-the-point">Get to the point</a></li><li><a href="#think-one-degree-bigger">Think one degree bigger</a></li><li><a href="#plan-the-route-to-your-readers">Plan the route to your readers</a></li><li><a href="#show-more-pictures">Show more pictures</a></li><li><a href="#accommodate-skimmers">Accommodate skimmers</a></li></ul><h2 id="why-listen-to-me">Why listen to me?<a href="#why-listen-to-me">🔗</a></h2><p>I’m going to say a bunch of gloaty things to establish credibility, but it feels gross, so let’s just get it out of the way:</p><ul><li>I’ve written <a href="https://mtlynch.io/">a software blog</a> for nine years, and it attracts 300k-500k unique readers per year.</li><li>My posts have reached the front page of Hacker News <a href="https://hn.algolia.com/?dateRange=all&amp;page=0&amp;prefix=true&amp;query=https%3A%2F%2Fmtlynch.io&amp;sort=byPopularity&amp;type=story">over 30 times</a>, many of them reaching the #1 spot.<ul><li>According to a ranking system I made up, I have <a href="https://refactoringenglish.com/tools/hn-popularity/">the 48th most popular</a> personal blog on Hacker News.</li></ul></li><li>I launched a successful indie business by writing <a href="https://news.ycombinator.com/item?id=23927380">a popular blog post</a> about my product.</li><li>My articles frequently appear <a href="https://www.reddit.com/search?q=url%3Amtlynch.io&amp;sort=relevance&amp;t=all">on reddit</a> and <a href="https://lobste.rs/domains/mtlynch.io">Lobsters</a>.</li></ul><figure><a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/mtlynch-analytics.webp"><img sizes="(min-width: 768px) 650px, 98vw" srcset="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/mtlynch-analytics.webp 1124w" src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/mtlynch-analytics.webp" alt="" loading="lazy"></a><figcaption><p>My <a href="https://mtlynch.io/">software blog</a> receives 300k-500k unique readers per year.</p></figcaption></figure><p>I don’t claim to be the <a href="https://www.joelonsoftware.com/">world’s best software blogger</a>, but I’ve had enough success and experience to share some useful lessons.</p><h2 id="get-to-the-point">Get to the point<a href="#get-to-the-point">🔗</a></h2><p>The biggest mistake software bloggers make is meandering.</p><p>Often, the author has some valuable insight to share, but they squander their first seven paragraphs on the history of functional programming and a trip they took to Bell Labs in 1973. By the time they get to the part that’s actually interesting, everyone has long since closed the browser tab.</p><p>Internet attention spans are short. If you dawdle before making your point, the reader will seek out one of the literally <strong>billions</strong> of other articles they could be reading instead.</p><p>So, how do you convince the reader to stay and continue reading your blog post?</p><p>When the reader arrives, they’re trying to answer two questions as quickly as possible:</p><ol><li>Did the author write this article for someone like me?</li><li>How will I benefit from reading it?</li></ol><p>Give yourself the title plus your first three sentences to answer both questions. If you find yourself in paragraph two and you haven’t answered either question, you’re in trouble.</p><p>To show the reader you’re writing for them, mention topics they care about, and use terminology they recognize. If you throw out jargon or unfamiliar concepts, the reader assumes the article isn’t meant for them and clicks away.</p><p>Your introduction should also make it clear to the reader how the article will benefit them. There are many possible benefits you can offer:</p><ul><li>A technique the reader can apply in their work or personal life.</li><li>A clear explanation of a concept that impacts the reader’s work or personal life.</li><li>An insight that gives the reader a better understanding of a particular technology or industry.</li><li>An interesting story that resonates with the reader.</li></ul><p><a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/ipod-announcement.webp"><img sizes="(min-width: 768px) 700px, 98vw" srcset="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/ipod-announcement.webp 2000w" src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/ipod-announcement.webp" alt="" loading="lazy"></a></p><h3 id="example-if-got-want-a-simple-way-to-write-better-go-tests">Example: “if got, want: A Simple Way to Write Better Go Tests”<a href="#example-if-got-want-a-simple-way-to-write-better-go-tests">🔗</a></h3><p>I recently wrote <a href="https://mtlynch.io/if-got-want-improve-go-tests/">an article</a> about improving tests when using the Go programming language.</p><p>Here’s the title and first paragraph:</p><blockquote><p><strong>if got, want: A Simple Way to Write Better Go Tests</strong></p><p>There’s an excellent Go testing pattern that too few people know. I can teach it to you in 30 seconds.</p></blockquote><p>This article immediately answers the two questions:</p><ul><li>Did the author write the article for someone like me?<ul><li><strong>The article is for Go developers.</strong></li></ul></li><li>What’s the benefit of reading it?<ul><li><strong>You’ll learn a new testing technique in 30 seconds.</strong></li></ul></li></ul><h2 id="think-one-degree-bigger">Think one degree bigger<a href="#think-one-degree-bigger">🔗</a></h2><p>When you write an article, you hopefully have a type of reader in mind. For example, if you wrote an article called “Debugging Memory Leaks in Java,” you probably assumed that the reader is an intermediate to advanced Java developer.</p><p>Most software bloggers never think to ask, “Is there a wider audience for this topic?”</p><p>For example, “intermediate to advanced Java developers” are a subset of “Java developers,” who are a subset of “programmers,” who are a subset of “people who read blog posts.”</p><p><img src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/programmer-categories.svg" alt="Categories and subcategories"></p><p>If you wrote an article for intermediate and advanced Java developers, how much would have to change for the article to appeal to Java developers of any experience level?</p><p>Often, the change is just an extra sentence or two early in the article to introduce a concept or replace jargon with more accessible terms.</p><blockquote><p><strong>Jeff</strong>: Sony has a futuristic sci-fi movie they’re looking to make.</p><p><strong>Nick</strong>: Cigarettes in space?</p><p><strong>Jeff</strong>: It’s the final frontier, Nick.</p><p><strong>Nick</strong>: But wouldn’t they blow up in an all-oxygen environment?</p><p><strong>Jeff</strong>: Probably. But it’s an easy fix. One line of dialogue. “Thank God we invented the… you know, whatever device.”</p><p><span><em>Thank You for Smoking</em> (2005)</span></p></blockquote><p>The set of all Java developers is about 10x larger than the set of intermediate and advanced Java developers. That means small tweaks can expand the reach of your article by an order of magnitude.</p><p>Obviously, you can’t broaden every article, and you can’t keep broadening your audience forever. No matter how well you explain background concepts, your tax accountant will never read an article about memory leaks in Java. The point isn’t to write articles that appeal to every possible reader but to notice opportunities to reach a larger audience.</p><h3 id="example-how-i-stole-your-siacoin">Example: “How I Stole Your Siacoin”<a href="#example-how-i-stole-your-siacoin">🔗</a></h3><p>One of my earliest successes in blogging was an article called <a href="https://mtlynch.io/stole-siacoins/">“How I Stole Your Siacoin.”</a> It was about a time I stole a reddit user’s cryptocurrency (for noble reasons, I promise).</p><p>Initially, I thought the story would resonate with the few hundred people who followed a niche cryptocurrency called Siacoin. As I was editing the article, I realized that you didn’t have to know anything about Siacoin to understand my story. I revised it slightly so it would make sense to cryptocurrency enthusiasts who had never heard of Siacoin.</p><p>Then, I realized I could even explain this story to people who knew nothing about cryptocurrency. I adjusted the terminology to use regular-person terms like “wallet” and “passphrase” and avoided crypto-specific terms like “blockchain” or “Merkle tree.”</p><p>The article was my first ever hit. It became the most popular story of all time not only on the <a href="https://www.reddit.com/r/siacoin/comments/6hm2rt/how_i_stole_your_siacoin/">/r/siacoin subreddit</a> but also on the larger <a href="https://www.reddit.com/r/CryptoCurrency/comments/6hm4w0/how_i_stole_your_siacoin/">/r/cryptocurrency subreddit</a>. It reached <a href="https://news.ycombinator.com/item?id=14568558">the front page of Hacker News</a>, even though readers there are generally hostile to cryptocurrency-focused stories.</p><h2 id="plan-the-route-to-your-readers">Plan the route to your readers<a href="#plan-the-route-to-your-readers">🔗</a></h2><p>Suppose you wrote the greatest beginner’s tutorial imaginable for the <a href="https://python.org/">Python programming language</a>. Both your five-year-old nephew and 80-year-old dentist blazed through it with ease and delight. Everyone who reads your tutorial goes on to become a Python core contributor.</p><p>Bad news: nobody will ever read your Python tutorial.</p><p>“Lies!” you shout. “Thousands of developers learn Python every year. Why wouldn’t my objectively awesome tutorial become popular?”</p><p>Well, think it through. What happens after you hit publish? How does anyone find your article?</p><p>You’re probably thinking: Google.</p><p>Yes, your friend Google will index your tutorial and use its secret Google magic to identify your article’s superior quality. Before you know it, your tutorial will be the top result for <code>python tutorial</code>.</p><p>Except that can’t happen because there are so many Python tutorials out there already on sites that Google prefers over yours. You’ll never even make it to the first page of results.</p><figure><a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/google-python-results.webp"><img sizes="(min-width: 768px) 350px, 98vw" srcset="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/google-python-results.webp 720w" src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/google-python-results.webp" alt="" loading="lazy"></a><figcaption><p>It’s nearly impossible for a new blog post to rank well in Google for the search term <code>python tutorial</code>.</p></figcaption></figure><p>Okay, so you’ll submit your Python tutorial to reddit. The <a href="https://www.reddit.com/r/Python/">/r/python subreddit</a> has over 1.3 million subscribers. If even 5% of them read your article, that’s a huge audience:</p><figure><a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/r-python-subscribers.webp"><img sizes="(min-width: 768px) 450px, 98vw" srcset="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/r-python-subscribers.webp 980w" src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/r-python-subscribers.webp" alt="" loading="lazy"></a><figcaption><p>The /r/python subreddit has over 1.3 million subscribers.</p></figcaption></figure><p>Whoops! /r/python only accepts text posts, not external links, so you can’t post your tutorial there.</p><figure><a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/r-python-text-posts.webp"><img sizes="(min-width: 768px) 450px, 98vw" srcset="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/r-python-text-posts.webp 633w" src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/r-python-text-posts.webp" alt="" loading="lazy"></a><figcaption><p>The /r/python subreddit disables the option to submit external links.</p></figcaption></figure><p>Fine, then you’ll submit it to Hacker News. They accept anything and let their members decide what’s interesting. Surely, they’ll recognize the quality of your work!</p><p>Nope, it will flop there, too. Hacker News doesn’t like tutorials, especially for mainstream technologies like Python.</p><p>You can try sharing your tutorial by <a href="https://twitter.com/">tweeting it</a>, <a href="https://bsky.app/">skeeting it</a>, or <a href="https://joinmastodon.org/">tooting it</a>, but unless you already have a massive following on social media, that won’t reach a critical mass either.</p><p>So, what’s the answer? How do you get people to read your amazing Python tutorial?</p><p>The answer is that you don’t write a beginner’s Python tutorial.</p><h3 id="you-need-a-realistic-path-to-your-readers">You need a realistic path to your readers<a href="#you-need-a-realistic-path-to-your-readers">🔗</a></h3><p>If you want people to read your blog, choose topics that have a clear path to your readers. Before you begin writing, think through how readers will find your post.</p><div><p><strong>Questions to ask when considering an article topic</strong></p><ul><li>Is it realistic for readers to find you via Google search?<ul><li>Are there already 500 articles about the same topic from more established websites?</li><li>What keywords would your target reader search? Try searching those keywords, and see whether there are already relevant results from well-known domains.</li></ul></li><li>If you’re going to submit it to a link aggregator like Hacker News or Lobsters, how often do <a href="https://hn.algolia.com/">posts like yours succeed there</a>?</li><li>If you’re going to share it on a subreddit or niche forum, does it have any chance there?<ul><li>Does the forum accept links to blog posts?<ul><li>The bigger the community, the stricter the rules tend to be about external links and self-promotion.</li></ul></li><li>Do blog posts like yours ever succeed there?</li><li>Is the community still active?</li></ul></li></ul></div><p>The best plan is to give your post multiple chances to succeed. If you’re betting everything on Google bubbling your post to the top, it could take months or years for you to find out if you succeeded. If you’re relying on Hacker News or reddit to tell you whether your article is worth reading, they’re going to break your heart a lot.</p><h3 id="example-using-zig-to-unit-test-a-c-application">Example: “Using Zig to Unit Test a C Application”<a href="#example-using-zig-to-unit-test-a-c-application">🔗</a></h3><p>In 2023, I wrote an article called <a href="https://mtlynch.io/notes/zig-unit-test-c/">“Using Zig to Unit Test a C Application.”</a> It was about using a new low-level language called <a href="https://ziglang.org/">Zig</a> to write tests for legacy C code.</p><p>Before I wrote the article, I knew that there were several places where I could share it. By luck, they all worked out:</p><ul><li>Hacker News is extremely friendly to Zig content, so my article <a href="https://news.ycombinator.com/item?id=38683852">reached the #7 spot on the front page</a>.</li><li>Lobsters is extremely friendly to Zig content, so my article was <a href="https://lobste.rs/s/ghttjv/using_zig_unit_test_c_application">one of the top links of the day</a>.</li><li>Google bubbled my article to the top result for the keywords <a href="https://www.google.com/search?q=zig+unit+testing+c"><code>zig unit testing c</code></a>.<ul><li>It’s actually even a top result for just <a href="https://www.google.com/search?q=zig+unit+testing"><code>zig unit testing</code></a> because there aren’t many articles about the topic.</li></ul></li><li>The /r/Zig subreddit accepts links to blog posts, even if they’re self-promotion, so my post <a href="https://www.reddit.com/r/Zig/comments/18lbqi0/using_zig_to_unit_test_a_c_application/">reached the top spot in that subreddit</a>.</li><li>Ziggit is a niche forum that’s welcoming to Zig-related articles, so my post received <a href="https://ziggit.dev/t/using-zig-to-unit-test-a-c-application/2502">1,000 views from Ziggit</a>.</li></ul><h2 id="show-more-pictures">Show more pictures<a href="#show-more-pictures">🔗</a></h2><p>The biggest bang-for-your-buck change you can make to a blog post is adding pictures.</p><p>If your article features long stretches of text, think about whether there’s any photo, screenshot, graph, or diagram that could make the post more visually interesting.</p><ul><li>If you’re talking about a program with a graphical interface, show screenshots.</li><li>If you’re talking about an improvement in metrics like app performance or active users, show graphs.</li><li>If you’re writing about your server getting overloaded, show a screenshot of what that looked like in your dashboard or email alerts.</li><li>If you’re explaining a difficult concept, draw a diagram.</li></ul><p>I <a href="https://mtlynch.io/how-to-hire-a-cartoonist/">hire illustrators</a> for most of my posts (including this one). I typically pay $50-100 per illustration. For simple diagrams like the nested circle sketches <a href="#think-one-degree-bigger">above</a>, I use <a href="https://excalidraw.com/">Excalidraw</a>, which is free and <a href="https://github.com/excalidraw/excalidraw">open-source</a>.</p><p>You can also use free stock photos and AI-generated images, as they’re better than nothing, but they’re worse than anything else, including terrible MS Paint drawings.</p><figure><a href="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/ai-vs-mspaint.webp"><img sizes="(min-width: 768px) 2142px, 98vw" srcset="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/ai-vs-mspaint.webp 2142w" src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/ai-vs-mspaint.webp" alt="" loading="lazy"></a><figcaption><p>Even a terrible MS Paint drawing is more interesting than an AI-generated image.</p></figcaption></figure><h2 id="accommodate-skimmers">Accommodate skimmers<a href="#accommodate-skimmers">🔗</a></h2><p>Many readers skim an article first to decide if it’s worth reading. Dazzle those readers during the skim.</p><p>If the reader only saw your headings and images, would it pique their interest?</p><p>The worst thing for a skimmer to see is a wall of text: long paragraphs with no images or headings to break them up. Just text, text, text all the way down.</p><h3 id="tool-read-like-a-skimmer">Tool: Read like a skimmer<a href="#tool-read-like-a-skimmer">🔗</a></h3><p>Here’s a JavaScript <a href="https://en.wikipedia.org/wiki/Bookmarklet">bookmarklet</a> that you can use to see what your article looks like with just headings and images.</p><ul><li>Skimmify page</li></ul><p>Drag the link to your browser bookmark bar, and then click it to see what your article looks like to skimmers.</p><h3 id="example-boring-structure-vs-interesting-structure">Example: Boring structure vs. interesting structure<a href="#example-boring-structure-vs-interesting-structure">🔗</a></h3><p>I wrote my article, “End-to-End Testing Web Apps: The Painless Way,” in 2019, before I thought about structure.</p><p>If you skim the article, does it make you want to read the full version?</p><figure><video controls="">
<source src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/end-to-end-testing-skim.mp4" type="video/mp4">Your browser does not support the video tag.</video></figure><p>Probably not. The headings don’t reveal much about the content, and the visuals are confusing.</p><p>Consider my more recent article, “I Regret My $46k Website Redesign.”</p><figure><video controls="">
<source src="https://refactoringenglish.com/chapters/write-blog-posts-developers-read/website-redesign-skim.mp4" type="video/mp4">Your browser does not support the video tag.</video></figure><p>If you skim that article, you still see the bones of a good story, and there are interesting visual elements to draw the reader in.</p><p>One of those articles barely attracted any readers, and the other became one of the most popular articles I ever published, attracting 150k unique readers in its first week. Can you guess which is which?</p><blockquote data-bluesky-uri="at://did:plc:5rmuptxnl562svleoywqf7fe/app.bsky.feed.post/3llegmdc2fk2e" data-bluesky-cid="bafyreidbaj27kgbx2vefmf25u4ir54gffb4cksfyjmiw4nljsci75gtegu" data-bluesky-embed-color-mode="system"><div lang="en"><p>In the nine years I've been blogging about software development, some of my posts have hit 300k+ readers, while others flopped, especially early on. I'm sharing all the lessons I learned the hard way about how to write popular blog posts for developers. refactoringenglish.com/chapters/wri...</p><p><a href="https://bsky.app/profile/did:plc:5rmuptxnl562svleoywqf7fe/post/3llegmdc2fk2e?ref_src=embed">[image or embed]</a></p></div>— Michael Lynch (<a href="https://bsky.app/profile/did:plc:5rmuptxnl562svleoywqf7fe?ref_src=embed">@mtlynch.io</a>) <a href="https://bsky.app/profile/did:plc:5rmuptxnl562svleoywqf7fe/post/3llegmdc2fk2e?ref_src=embed">March 27, 2025 at 9:43 AM</a></blockquote><hr><p><em>“Not Quite How Developers Read” illustration by <a href="https://cartoony.eu/">Piotr Letachowicz</a>. Steve Jobs illustration by Loraine Yow.</em></p></article></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Google is publishing the home addresses of developers without their consent (107 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=43503720</link>
            <guid>43503720</guid>
            <pubDate>Fri, 28 Mar 2025 10:39:04 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=43503720">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="43506583"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43506583" href="https://news.ycombinator.com/vote?id=43506583&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Some ideas:</p><p>1. Have a lawyer send them a letter.  A legal firm's letterhead will get taken more seriously than an email or Contact Us, and may force them to respond in some way.</p><p>2. Spin up a corporation and have it "acquire" your product.</p><p>Use a law firm or other provider as the registered address.  If that's not possible in Sweden, incorporate in a jurisdiction outside your country.  (This may have an impact on how you get paid, taxes, etc. but that might not matter if you're planning to unpublish).</p><p>3. Quantify your damages (eg. cost of above, security firm to do a home assessment, mitigations like installing security cameras, etc.) and litigate.</p><p>Unfortunately it can be hard to quantify damage to privacy (check for any precedents in the applicable jurisdiction's case law), and you may have already agreed to terms that prejudice this.  Be sure to keep track of any disgruntled user feedback that makes you feel even mildly threatened in any way, any increase in unsolicited mailings, etc.</p><p>4. Get a short term rental somewhere, change the address to that, never update.  Or use a friend who's about to move or doesn't care (eg. change the address on one of your credit cards to theirs for a billing cycle).</p><p>This isn't nice to whoever winds up at that address next.</p><p>5. Move, and don't update them with your new address.</p><p>6. Instead of selling your old home at the poisoned address, contact your local fire department and offer it as a controlled burn site for training.  Scorch the earth and never look back.</p><p>Or, somewhat less satisfyingly, donate the land to your municipality as a park.  Subject to a clause it be named something like "Alphabet's Reach" in perpetuity, and commission some kind of permenant concrete art installation to forever memorialize their betrayal.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43507203"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43507203" href="https://news.ycombinator.com/vote?id=43507203&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>All of this is a ridiculous amount of work/red tape for an app that never will make a single cent (my case).</p><p>I guess we have to read that as virtue signaling: if you aren’t here to make money, go away. Interestingly, they choose a quite stupid way to do so, when they could just straight forward charge a recurring fee like Apple does.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43504416"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504416" href="https://news.ycombinator.com/vote?id=43504416&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>There an interesting debate if home address being public record is a privacy problem. In Canada the government forces business directors/owners to have their address public for transparency. I find that kinda stupid but I do understand the idea behind it and this did shift my threat model when I had to enter it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504549"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504549" href="https://news.ycombinator.com/vote?id=43504549&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>IIUC part of the reason is so that you can sue people. You need to know their address to serve them papers. IIUC this is part of the reason why anyone is allowed to snail-mail you and we don't have spam laws for physical mail like we do for email, phone, ...</p><p>It seems pretty antiquated though and can be putting people at risk. Maybe there should be some form of indirection here where the government can be responsible for notifying you in cases like this and you can indicate who you are suing based on based on either the business or some sort of more opaque identifier.</p><p>Not to mention that an address is a bad identifier as it is not unique, becomes invalid/more confusing over time among other reasons.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504669"><td></td></tr>
                <tr id="43505275"><td></td></tr>
                        <tr id="43504545"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504545" href="https://news.ycombinator.com/vote?id=43504545&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Almost all countries do this, because accountability is a necessary tradeoff for the huge benefits of limited liability.</p><p>(The UK has basically one exception, for Huntingdon Life Sciences, after their directors were subject to an extremely intense harrasment campaign by animal rights activists)</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43505910"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43505910" href="https://news.ycombinator.com/vote?id=43505910&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>You need to put a correspondence address, but it doesn't need to be a home address — most reasonably-sized companies will allow directors to use the company address, or the address of their law firm, instead.  That doesn't work so well for companies that run out of the directors' homes, of course.</p><p>You can see the correspondence addresses for the former directors of Huntingdon Life Sciences in their record at Companies House: <a href="https://find-and-update.company-information.service.gov.uk/company/03126711" rel="nofollow">https://find-and-update.company-information.service.gov.uk/c...</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504559"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43504559" href="https://news.ycombinator.com/vote?id=43504559&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>Yes, but if you want to hold someone accountable you should take them to court where it can be fairly decided, not show up at their home address.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504616"><td></td></tr>
                <tr id="43504673"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43504673" href="https://news.ycombinator.com/vote?id=43504673&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>Yes, this sounds like the root cause. Maybe we should have a way to take someone to court that doesn't rely on knowing their address (and ideally is more stable over time than an address, and less ambiguous if there are multiple people with the same name at the same address).</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43506529"><td></td></tr>
                  <tr id="43504664"><td></td></tr>
                <tr id="43504787"><td><table>  <tbody><tr>    <td indent="5"><img src="https://news.ycombinator.com/s.gif" height="1" width="200"></td><td>
      <center><a id="up_43504787" href="https://news.ycombinator.com/vote?id=43504787&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>I can imagine nothing wrong with having the government gatekeep access to the ability to sue corporations.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504938"><td></td></tr>
                <tr id="43505273"><td></td></tr>
                                                <tr id="43504720"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504720" href="https://news.ycombinator.com/vote?id=43504720&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Here in Czechia, not only addresses corporate legal representatives or sole proprietors are in a public registry, but also addresses of real property owners are in the public cadastre.</p><p>It seems funny to me that government considers these information as privacy-sensitive while also publishes them for majority of population (homeowners).</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43505996"><td></td></tr>
                  <tr id="43504562"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504562" href="https://news.ycombinator.com/vote?id=43504562&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>The UK seems to be heading in roughly the opposite direction. If I've understood the plans correctly then more individuals with significant connections to companies will have to formally prove their identities to the regulators as part of company registration but fewer personal details will then be published online. This seems a much better approach to me - rogue traders and the like can be more easily disrupted but company officials aren't having their personal privacy compromised in ways that could potentially endanger them or their families if that one crazy customer decides to do something inappropriate.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43504870"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504870" href="https://news.ycombinator.com/vote?id=43504870&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>It was a total deal breaker to me so I registered my company in a virtual office, I pay ca. $10/month for that but at least my home address is not floating around the internet.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43505120"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43505120" href="https://news.ycombinator.com/vote?id=43505120&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>This is exactly why when Google began requiring home addresses I just let them kill my account and refused to provide the info. It was not a dealbreaker to me anyway, I had long since moved to iOS as a developer.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504806"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504806" href="https://news.ycombinator.com/vote?id=43504806&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>It was a couple years ago I believe that Google started <i>requiring</i> developers to provide a home address. This was the obvious conclusion of that.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                      <tr id="43504319"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504319" href="https://news.ycombinator.com/vote?id=43504319&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>&gt; I asked them to delete my app. They said no.</p><p>Does the Play Store not allow deleting apps? What reason did they give?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504370"><td></td></tr>
                <tr id="43504555"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43504555" href="https://news.ycombinator.com/vote?id=43504555&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>I'm wondering if the evil solution is to update the app in such a way that it no longer complies with the rules and get yourself banned from the app store. Although that has other risks to your other google accounts.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504867"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43504867" href="https://news.ycombinator.com/vote?id=43504867&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>Doesn't has to be evil, dropping support for newer androids (9.0 and up) is an easy way to get apps delisted.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43504751"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43504751" href="https://news.ycombinator.com/vote?id=43504751&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>So if I release an app on the Play Store I have to support it forever? That sounds unreasonable.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504911"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43504911" href="https://news.ycombinator.com/vote?id=43504911&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>No, there is no requirement to support the software, at least according to what we've heard here. Simply that you can't remove your current rev from the store - you can't prevent people from downloading it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="43505069"><td></td></tr>
                <tr id="43505135"><td></td></tr>
                <tr id="43505509"><td><table>  <tbody><tr>    <td indent="6"><img src="https://news.ycombinator.com/s.gif" height="1" width="240"></td><td>
      <center><a id="up_43505509" href="https://news.ycombinator.com/vote?id=43505509&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>Yes, but it would mitigate the issue almost completely since the app (and thus the address) would not be discoverable by new users.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                                                <tr id="43504612"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504612" href="https://news.ycombinator.com/vote?id=43504612&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>How exactly Google Play works for monetised apps from legal point of view? Are they ones who provide paid licence to an app to consumer (reseller), or are they just a marketplace intermediate, where the transaction is between app provider and consumer?</p><p>But in both cases, seems to me that at least for monetised apps, providing identifying information is important for consumer protection and therefore they have legitimate reason to do this.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504759"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504759" href="https://news.ycombinator.com/vote?id=43504759&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>Apple's App Store is the merchant of record. They do the selling and gathering of sales taxes around the world, etc. I would presume Google Play works the same.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43504547"><td></td></tr>
                <tr id="43504791"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504791" href="https://news.ycombinator.com/vote?id=43504791&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>You are required to send proof for the address, meaning you can only change to another place that you can claim your own.</p><p>In Sweden, we have a public registry for personal addresses, and that’s the only one Google accepts.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43505803"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43505803" href="https://news.ycombinator.com/vote?id=43505803&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Get a PO box, change your Google address, cancel the PO box?</p><p>Edit: Nevermind, seems like they don't allow them.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43505613"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43505613" href="https://news.ycombinator.com/vote?id=43505613&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>Amazon did that to a physical product my wife is selling. I was very annoyed. But it ended up being a configuration but default being `show address` state is definitely annoying.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504935"><td></td></tr>
                      <tr id="43504470"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504470" href="https://news.ycombinator.com/vote?id=43504470&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>If you're in the EU:</p><p>Leverage the GDPR and contact Google's DPO (Data Protection Officer) to inform them about the problem. If the problem is not solved or there is no reaction, lodge a complaint with the DPA (Data Protection Authority).</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504611"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504611" href="https://news.ycombinator.com/vote?id=43504611&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>Probably won’t work, since there’s legitimate interest of app users in having this information accessible. However at least in Germany private person can have a legal address different from home address: you can buy this service from a number of providers and all legal correspondence will be delivered to you without interference with your privacy.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504627"><td></td></tr>
                  <tr id="43503740"><td></td></tr>
                <tr id="43503761"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43503761" href="https://news.ycombinator.com/vote?id=43503761&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>I'm in the UK. But I've seen developers from all around having the same issue. (See Reddit)</p><p>My app is a free app, and their policy (which I don't agree with) states that private home addresses will only be shown for monetised apps.</p><p>To my surprise, Google published my home address for a free app. My account is new too, and address verification is a requirement for getting your developer account approved.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504977"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43504977" href="https://news.ycombinator.com/vote?id=43504977&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>The best guide for dealing with obstructive bureaucracies is patio11's :<a href="https://www.kalzumeus.com/2017/09/09/identity-theft-credit-reports/" rel="nofollow">https://www.kalzumeus.com/2017/09/09/identity-theft-credit-r...</a></p><p>That's specific to credit theft, but a great many of the principles apply to many situations:</p><p>- Approach via the legal dept, since their objective is to remove risk, rather than close tickets.</p><p>- Know your rights under the law</p><p>- Act like a relentless professional not an angry amateur .</p><p>But read the article, it's worth it</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504216"><td></td></tr>
                <tr id="43504874"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43504874" href="https://news.ycombinator.com/vote?id=43504874&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>From my anecdotal experience of 1 attempt of writing to the ICO it was 100% effective: several months later I received a polite response with a history of communication between ICO and the organisation I complained about, where the latter had to justify what they were doing. This was a sports organisation that originally announced that they would be putting DOB of the athletes on their public profiles, but ultimately was just the age (because there are age bands in competitions) maybe as a result of my complaint - who knows?</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504399"><td></td></tr>
            <tr id="43504362"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43504362" href="https://news.ycombinator.com/vote?id=43504362&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>You may wish to contact compliance and inform them that they are violating legal requirements in the UK (assuming that this is, y'know...true). Without blustering or yelling (getting angry makes you look less credible), simply state the government agency that accepts complaints, and state that you will file a complaint if the matter is not resolved. If there are laws that mandate how fast Google is required to resolve the issue, it is worth mentioning them.</p><p>In general, support has the incentive of making tickets go away. Compliance has the incentive of making sure the company doesn't run afoul of regulators. Compliance is also much much more powerful at an organizational level.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504403"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43504403" href="https://news.ycombinator.com/vote?id=43504403&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>I've contacted them and they've left my last email without response, and have chosen to ignore all my requests to take down my private information</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="43504488"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43504488" href="https://news.ycombinator.com/vote?id=43504488&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>&gt; Another channel is writing a formal letter requesting your GDPR rights to deletion on paper</p><p>GDPR is EU, UK is not. how does this work? surley the UK didn't adopt the GDPR voluntarily?</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504513"><td></td></tr>
            <tr id="43504519"><td></td></tr>
                        <tr id="43503828"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43503828" href="https://news.ycombinator.com/vote?id=43503828&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Sounds like it's a matter of UK law then.  At a time when neither the US, nor its tech giants, are particularly popular at 10 Downing St.  Nor in the UK generally.</p><p>And like you've a fair bit of company, to make common cause - whether paying solicitors, or raising a ruckus.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504219"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43504219" href="https://news.ycombinator.com/vote?id=43504219&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>I’m going through the process of listing in the Play Store just now and I’m having the same issues in the EU.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                              <tr id="43504398"><td></td></tr>
                <tr id="43504648"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504648" href="https://news.ycombinator.com/vote?id=43504648&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Yeah, it feels like Goliath. But at the very least, I can try to get my voice heard.</p><p>I'll explore all options available to me.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43505007"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43505007" href="https://news.ycombinator.com/vote?id=43505007&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>I do not know where you live and why you think that Google is wrong publishing your personal address but I can share my own story from Western Europe.</p><p>I managed an online community for tens of thousands of people for 18 years. The domain was registered to a fake address, but once I started accepting ads, I had to register a business and list my home address in the public records.</p><p>I dealt with hundreds of advertisers, and the most obvious risk was that an adversary contacts me to publish an ad, gets my company details, checks online for company address and comes ripping my heart off.</p><p>Over these years, I received multiple online threats from various people... but none have ever have showed at my door step.</p><p>I still wonder why.</p><p>Did the users I blocked and banned never really felt offended because I tried to be professional and predictable in all circumstances?</p><p>Or was it just because finding my personal address required a bit of ingenuity which the most egregious perpetrators simply lacked?</p><p>P.S. And no, this was not a gaming community nor anime lovers forum, but a place where immigrants turned in for help.</p><p>P.P.S. Before downvoting... think again about the responsibility you take on when people pay you money in return for your service.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43506738"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_43506738" href="https://news.ycombinator.com/vote?id=43506738&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>&gt; think again about the responsibility you take on when people pay you money in return for your service.</p><p>OP mentioned their app is free</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43506990"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_43506990" href="https://news.ycombinator.com/vote?id=43506990&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>I just Googled and it looks like even if the app is free, but account has been set to monetized at least once in the past, the address is displayed.</p><p>Back to my story... my online community was also free to join. This does not change much.</p><p>Once you start interacting with the world, expect the world to interact with you.</p></div></td></tr>
        </tbody></table></td></tr>
                                    <tr id="43504615"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504615" href="https://news.ycombinator.com/vote?id=43504615&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Contact a lawyer and have them send a cease and desist. Shouldn't cost a lot.</p><p>Just engaging Google's legal machinery is probably the only way to get their attention</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504645"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504645" href="https://news.ycombinator.com/vote?id=43504645&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Get a PO box. Either USPS or UPS address. Change address. Get the cheapest in your area, especially if you won't actually use it for deliveries. This is a deductible office expense for the business.</p><p>You don't need a DBA (doing business as) registered with the state for this, but it helps build a business narrative for the IRS and business purposes. And then you can use it in lieu of your name.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504656"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504656" href="https://news.ycombinator.com/vote?id=43504656&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Thanks for this. To my knowledge, the current policy doesn't allow a PO box. But I'll explore what you've mentioned.</p><p>Although I've now lost interest in publishing on the play store.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43506637"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43506637" href="https://news.ycombinator.com/vote?id=43506637&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>Check with your Post Office. My USPS Post Office Box actually has a street address I can use, as well. They started this about four or five years ago. It's the street address of the Post Office, with the box number added like an apartment number. (Interestingly, the Zip+four is different.)</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504736"><td></td></tr>
            <tr id="43504782"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43504782" href="https://news.ycombinator.com/vote?id=43504782&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Non-USPS mail services use physical addresses. The post office delivers all the mail there, and it's the responsibility of the private party to sort.</p><p>Therefore you can list the "box" as a "unit" number, or "ste" (suite) or "apt" (apartment). Ask the 3rd party service prior to contracting.</p><p>I had such a service in NYC (they're common, lotsa businesses love having a Suite address on 5th Ave, or whatever).</p><p>I'd test it before committing to a long term contract though.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="43504410"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_43504410" href="https://news.ycombinator.com/vote?id=43504410&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>Google does this kind of nonsense all the time.  That is why everyone is screaming their lungs out that we need to help and support alternative app-stores like F-Droid.</p><p>Your best bet is the privacy watchdog in your country.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="43504632"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_43504632" href="https://news.ycombinator.com/vote?id=43504632&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>It's disheartening. I've tried reaching out on several platforms, but they've completely ignored me.</p><p>I'll be exploring the privacy watchdog, as you've advised.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="43504649"><td></td></tr>
                <tr id="43504894"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43504894" href="https://news.ycombinator.com/vote?id=43504894&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div><p>^This. If you are a trader under the Digital Services Act then your address, email and phone number is published. From <a href="https://eur-lex.europa.eu/eli/dir/2005/29/oj" rel="nofollow">https://eur-lex.europa.eu/eli/dir/2005/29/oj</a>: ‘trader’ means any natural or legal person who, in commercial practices covered by this Directive, is acting for purposes relating to his trade, business, craft or profession and anyone acting in the name of or on behalf of a trader;</p><p>IANAL</p></div></td></tr>
        </tbody></table></td></tr>
                      <tr id="43504819"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_43504819" href="https://news.ycombinator.com/vote?id=43504819&amp;how=up&amp;goto=item%3Fid%3D43503720"></a></center>    </td><td><br><div>
                  <p>This is only applicable if you are making money with your App (either paid or IAP). Free apps don’t have that requirement on Apple’s store.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="43505879"><td></td></tr>
                        </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Learn to code, ignore AI, then use AI to code even better (141 pts)]]></title>
            <link>https://kyrylo.org/software/2025/03/27/learn-to-code-ignore-ai-then-use-ai-to-code-even-better.html</link>
            <guid>43503295</guid>
            <pubDate>Fri, 28 Mar 2025 09:36:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kyrylo.org/software/2025/03/27/learn-to-code-ignore-ai-then-use-ai-to-code-even-better.html">https://kyrylo.org/software/2025/03/27/learn-to-code-ignore-ai-then-use-ai-to-code-even-better.html</a>, See on <a href="https://news.ycombinator.com/item?id=43503295">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
    <p>I woke up today to an <a href="https://x.com/amasad/status/1905103640089825788">X post by Amjad Masad</a>,
the CEO of Replit, a company that sells “AI as a programming service”.</p>

<blockquote>
  <p>I no longer think you should learn to code.</p>
  
</blockquote>

<p>The post got traction, with well over 4.5M views. In the <a href="https://x.com/amasad/status/1905261929452519838">follow-up
post</a>, Amjad dismissed the
community’s reaction as “cope”.</p>

<p>This made me reflect on the future of coding. I have a 3-year-old daughter, and
I wonder what the world will look like when she grows up. Will coding still be a
valuable skill?</p>

<p>The rise of AI and so-called <a href="https://en.wikipedia.org/wiki/Vibe_coding">vibe coding</a>
has sparked debate. Some argue coding is becoming obsolete; others believe it’s
simply evolving. What’s clear is that AI is changing how we code.</p>

<p>Should they learn to code or rely on AI to do the work for them? How should I
teach my daughter to approach coding? Should I even teach her to code at all?</p>

<p>I don’t have all the answers, but I do have some thoughts.</p>

<h2 id="where-i-come-from">Where I come from</h2>

<p>To explain my perspective, I should share some background. I’m a web developer
and software engineer with over 15 years of experience (mostly in interpreted
languages, with occasional ventures into compiled ones). I studied Computer
Science and hold a Master’s degree in Information Control Systems.</p>

<p>Back in school, we played with languages like Basic and Logo. We wrote code on
paper and then typed it into a computer — like it was the ’60s, but it was
actually the early 2000s.</p>

<p>We also had to perform basic arithmetic in binary. I don’t remember much about
it, but I do remember it was fun.</p>

<p>I’m not ancient, but I do recall using images to create rounded corners in CSS.
Nice to meet you!</p>

<h2 id="learning-to-code-in-2025">Learning to code in 2025</h2>

<p>So how do students learn to code nowadays? Beats me! And with AI in the mix,
it’s even trickier. Should you watch online courses? Read books? Just download a
code editor and start coding? Or should you rely on AI to do the work for you?</p>

<p>There are endless options now — more languages, more frameworks, more tools, and
more resources than ever before.</p>

<p>This is tiring. It’s a blissful time to be a programmer, but it’s also a
nightmare. I think the newer generations of programmers have it harder than we
did.</p>

<p>But I do know this: the fundamentals of coding haven’t changed. Computers have
evolved, but the basics remain the same. What I learned in school still holds
true. And if you’re just starting out, the basics are where you should begin.</p>

<p>A solid foundation is crucial if you want to understand what you’re doing.
Ultimately, it comes down to how much control you want over your code and, by
extension, your career.</p>

<p>But should you ignore AI? Absolutely not. I use AI as a coding assistant every
day. Has it made me a better programmer? Probably not.</p>

<h2 id="merchants-of-ai">Merchants of AI</h2>

<p>AI is the new shiny toy everyone wants to play with. And to be honest, it’s
impressive. The problem with AI is that with every year, it gets better and
better. Wait what? How’s that a problem? Well, with every new year you lose
control.</p>

<p>The more you rely on AI, the less you understand what you’re doing. The less you
understand, the more AI vendors can control <em>you</em>. And the more control they
have, the more they can charge you. It’s a vicious cycle.</p>

<p>This shift was inevitable. Humanity must adapt to this new reality. AI isn’t
going away, and we need to learn how to use it to our advantage.</p>

<p>The large language models (LLMs) created by tech giants have absorbed decades of
knowledge — our knowledge. They’ve been trained on our work.</p>

<p>Now they’re selling it back to us and telling us we only need to learn English
to code. This is a lie. As a new programmer, I don’t want you to fall for it.
There’s no corner-cutting. Get your shit together and learn to code.</p>

<h2 id="will-i-continue-using-ai">Will I continue using AI?</h2>

<p>Yes, it’s addictive, and it makes me more productive. If I had to stop using it
tomorrow, I’d feel withdrawal symptops. Coding with AI feels incredible.</p>

<p>But if AI vanished tomorrow due to, say, regulations, I’d just nod and go back
to my old ways. I’d be less productive, yes. And what about you?</p>

<p>If you know how to code, you can build anything. If you only know how to vibe
code, you’re gambling with your future.</p>

<p>Because if you can vibe code… <em>so can everyone else</em>.</p>

<p>And if everyone can do it, what makes you think Devin won’t replace you?</p>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[7.7 magnitude earthquake hits Southeast Asia, affecting Myanmar and Thailand (244 pts)]]></title>
            <link>https://twitter.com/TaraBull808/status/1905534938558157139</link>
            <guid>43503265</guid>
            <pubDate>Fri, 28 Mar 2025 09:32:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/TaraBull808/status/1905534938558157139">https://twitter.com/TaraBull808/status/1905534938558157139</a>, See on <a href="https://news.ycombinator.com/item?id=43503265">Hacker News</a></p>
Couldn't get https://twitter.com/TaraBull808/status/1905534938558157139: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Xee: A Modern XPath and XSLT Engine in Rust (202 pts)]]></title>
            <link>https://blog.startifact.com/posts/xee/</link>
            <guid>43502291</guid>
            <pubDate>Fri, 28 Mar 2025 06:48:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.startifact.com/posts/xee/">https://blog.startifact.com/posts/xee/</a>, See on <a href="https://news.ycombinator.com/item?id=43502291">Hacker News</a></p>
Couldn't get https://blog.startifact.com/posts/xee/: Error: connect EHOSTUNREACH 2a01:7c8:aab6:68:5054:ff:fe1a:c852:443]]></description>
        </item>
        <item>
            <title><![CDATA[Architecture Patterns with Python (384 pts)]]></title>
            <link>https://www.cosmicpython.com/book/preface.html</link>
            <guid>43501989</guid>
            <pubDate>Fri, 28 Mar 2025 05:57:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cosmicpython.com/book/preface.html">https://www.cosmicpython.com/book/preface.html</a>, See on <a href="https://news.ycombinator.com/item?id=43501989">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>You may be wondering who we are and why we wrote this book.</p>
<p>At the end of Harry’s last book,
<a href="http://www.obeythetestinggoat.com/"><em>Test-Driven Development with Python</em></a> (O’Reilly),
he found himself asking a bunch of questions about architecture, such as,
What’s the best way of structuring your application so that it’s easy to test?
More specifically, so that your core business logic is covered by unit tests,
and so that you minimize the number of integration and end-to-end tests you need?
He made vague references to "Hexagonal Architecture" and "Ports and Adapters"
and "Functional Core, Imperative Shell," but if he was honest, he’d have to
admit that these weren’t things he really understood or had done in practice.</p>
<p>And then he was lucky enough to run into Bob, who has the answers to all these
questions.</p>
<p>Bob ended up as a software architect because nobody else on his team was
doing it. He turned out to be pretty bad at it, but <em>he</em> was lucky enough to run
into Ian Cooper, who taught him new ways of writing and thinking about code.</p>
<div>
<h3 id="_managing_complexity_solving_business_problems"><a href="#_managing_complexity_solving_business_problems"></a>Managing Complexity, Solving Business Problems</h3>
<p>We both work for MADE.com, a European ecommerce company that sells furniture
online; there, we apply the techniques in this book to build distributed systems
that model real-world business problems. Our example domain is the first system
Bob built for MADE, and this book is an attempt to write down all the <em>stuff</em> we
have to teach new programmers when they join one of our teams.</p>
<p>MADE.com operates a global supply chain of freight partners and manufacturers.
To keep costs low, we try to optimize the delivery of stock to our
warehouses so that we don’t have unsold goods lying around the place.</p>
<p>Ideally, the sofa that you want to buy will arrive in port on the very day
that you decide to buy it, and we’ll ship it straight to your house without
ever storing it. <span>Getting</span> the timing right is a tricky balancing act when goods take
three months to arrive by container ship. Along the way, things get broken or water
damaged, storms cause unexpected delays, logistics partners mishandle goods,
paperwork goes missing, customers change their minds and amend their orders,
and so on.</p>
<p>We solve those problems by building intelligent software representing the
kinds of operations taking place in the real world so that we can automate as
much of the business as possible.</p>
</div>
<div>
<h3 id="_why_python"><a href="#_why_python"></a>Why Python?</h3>
<p>If you’re reading this book, we probably don’t need to convince you that Python
is great, so the real question is "Why does the <em>Python</em> community need a book
like this?" The answer is about Python’s popularity and maturity: although Python is
probably the world’s fastest-growing programming language and is nearing the top
of the absolute popularity tables, it’s only just starting to take on the kinds
of problems that the C# and Java world has been working on for years.
Startups become real businesses; web apps and scripted automations are becoming
(whisper it) <em>enterprise</em> <span><em>software</em></span>.</p>
<p>In the Python world, we often quote the Zen of Python:
"There should be one—​and preferably only one—​obvious way to do it."<sup>[<a id="_footnoteref_1" href="#_footnotedef_1" title="View footnote.">1</a>]</sup>
Unfortunately, as project size grows, the most obvious way of doing things
isn’t always the way that helps you manage complexity and evolving
requirements.</p>
<p>None of the techniques and patterns we discuss in this book are
new, but they are mostly new to the Python world. And this book isn’t
a replacement for the classics in the field such as Eric Evans’s
<em>Domain-Driven Design</em>
or Martin Fowler’s <em>Patterns of
Enterprise Application Architecture</em> (both published by Addison-Wesley <span>Professional</span>)—which we often refer to and
encourage you to go and read.</p>
<p>But all the classic code examples in the literature do tend to be written in
Java or <span>C++/#</span>, and if you’re a Python person and haven’t used either of
those languages in a long time (or indeed ever), those code listings can be
quite…​trying. There’s a reason the latest edition of that other classic text, Fowler’s
<em>Refactoring</em> (Addison-Wesley Professional), is in JavaScript.</p>
</div>
<div>
<h3 id="_tdd_ddd_and_event_driven_architecture"><a href="#_tdd_ddd_and_event_driven_architecture"></a>TDD, DDD, and Event-Driven Architecture</h3>
<p>In order of notoriety, we know of three tools for managing complexity:</p>
<div>
<ol>
<li>
<p><em>Test-driven development</em> (TDD) helps us to build code that is correct
and enables us to refactor or add new features, without fear of regression.
But it can be hard to get the best out of our tests: How do we make sure
that they run as fast as possible? That we get as much coverage and feedback
from fast, dependency-free unit tests and have the minimum number of slower,
flaky end-to-end tests?</p>
</li>
<li>
<p><em>Domain-driven design</em> (DDD) asks us to focus our efforts on building a good
model of the business domain, but how do we make sure that our models aren’t
encumbered with infrastructure concerns and don’t become hard to change?</p>
</li>
<li>
<p>Loosely coupled (micro)services integrated via messages (sometimes called
<em>reactive microservices</em>) are a well-established answer to managing complexity
across multiple applications or business domains. But it’s not always
obvious how to make them fit with the established tools of
the Python world—​Flask, Django, Celery, and so on.</p>
</li>
</ol>
</div>
<div>
<table>
<tbody><tr>
<td>
<p>Note</p>
</td>
<td>
Don’t be put off if you’re not working with (or interested in) microservices.
    The vast majority of the patterns we discuss,
    including much of the event-driven architecture material,
    is absolutely applicable in a monolithic architecture.
</td>
</tr>
</tbody></table>
</div>
<p>Our aim with this book is to introduce several classic architectural patterns
and show how they support TDD, DDD, and event-driven services.  We hope
it will serve as a reference for implementing them in a Pythonic way, and that
people can use it as a first step toward further research  in this field.</p>
</div>
<div>
<h3 id="_who_should_read_this_book"><a href="#_who_should_read_this_book"></a>Who Should Read This Book</h3>
<p>Here are a few things we assume about you, dear reader:</p>
<div>
<ul>
<li>
<p>You’ve been close to some reasonably complex Python applications.</p>
</li>
<li>
<p>You’ve seen some of the pain that comes with trying to manage
that complexity.</p>
</li>
<li>
<p>You don’t necessarily know anything about DDD or any of the
classic application architecture patterns.</p>
</li>
</ul>
</div>
<p>We structure our explorations of architectural patterns around an example app,
building it up chapter by chapter. We use TDD at
work, so we tend to show listings of tests first, followed by implementation.
If you’re not used to working test-first, it may feel a little strange at
the beginning, but we hope you’ll soon get used to seeing code "being used"
(i.e., from the outside) before you see how it’s built on the inside.</p>
<p>We use some specific Python frameworks and technologies, including Flask,
SQLAlchemy, and pytest, as well as Docker and Redis. If you’re already
familiar with them, that won’t hurt, but we don’t think it’s required.  One of
our main aims with this book is to build an architecture for which specific
technology choices become minor implementation details.</p>
</div>
<div>
<h3 id="_a_brief_overview_of_what_youll_learn"><a href="#_a_brief_overview_of_what_youll_learn"></a>A Brief Overview of What You’ll Learn</h3>
<p>The book is divided into two parts; here’s a look at the topics we’ll cover
and the chapters they live in.</p>
<div>
<h4 id="_part1"><a href="#_part1"></a><a data-type="xref" data-xrefstyle="chap-num-title" href="https://www.cosmicpython.com/book/part1.html">#part1</a></h4>
<div>
<dl>
<dt>Domain modeling and DDD (Chapters <a href="https://www.cosmicpython.com/book/chapter_01_domain_model.html">1</a>, <a href="https://www.cosmicpython.com/book/chapter_02_repository.html">2</a> and <a href="https://www.cosmicpython.com/book/chapter_07_aggregate.html">7</a>)</dt>
<dd>
<p>At some level, everyone has learned the lesson that complex business
problems need to be reflected in code, in the form of a model of the domain.
But why does it always seem to be so hard to do without getting tangled
up with infrastructure concerns, our web frameworks, or whatever else?
In the first chapter we give a broad overview of <em>domain modeling</em> and DDD, and we
show how to get started with a model that has no external dependencies, and
fast unit tests. Later we return to DDD patterns to discuss how to choose
the right aggregate, and how this choice relates to questions of data
integrity.</p>
</dd>
<dt>Repository, Service Layer, and Unit of Work patterns (Chapters <a href="https://www.cosmicpython.com/book/chapter_02_repository.html">2</a>, <a href="https://www.cosmicpython.com/book/chapter_04_service_layer.html">4</a>, and <a href="https://www.cosmicpython.com/book/chapter_05_high_gear_low_gear.html">5</a>)</dt>
<dd>
<p>In these three chapters we present three closely related and
mutually reinforcing patterns that support our ambition to keep
the model free of extraneous dependencies.  We build a layer of
abstraction around persistent storage, and we build a service
layer to define the entrypoints to our system and capture the
primary use cases. We show how this layer makes it easy to build
thin entrypoints to our system, whether it’s a Flask API or a CLI.</p>
</dd>
</dl>
</div>
<div>
<dl>
<dt>Some thoughts on testing and abstractions (Chapter <a href="https://www.cosmicpython.com/book/chapter_03_abstractions.html">3</a> and <a href="https://www.cosmicpython.com/book/chapter_05_high_gear_low_gear.html">5</a>)</dt>
<dd>
<p>After presenting the first abstraction (the Repository pattern), we take the
opportunity for a general discussion of how to choose abstractions, and
what their role is in choosing how our software is coupled together. After
we introduce the Service Layer pattern, we talk a bit about achieving a <em>test pyramid</em>
and writing unit tests at the highest possible level of abstraction.</p>
</dd>
</dl>
</div>
</div>
<div>
<h4 id="_part2"><a href="#_part2"></a><a data-type="xref" data-xrefstyle="chap-num-title" href="https://www.cosmicpython.com/book/part2.html">#part2</a></h4>
<div>
<dl>
<dt>Event-driven architecture (Chapters <a href="https://www.cosmicpython.com/book/chapter_08_events_and_message_bus.html">8</a>-<a href="https://www.cosmicpython.com/book/chapter_11_external_events.html">11</a>)</dt>
<dd>
<p>We introduce three more mutually reinforcing patterns:
the Domain Events, Message Bus, and Handler patterns.
<em>Domain events</em> are a vehicle for capturing the idea that
some interactions with a system are triggers for others.
We use  a <em>message bus</em> to allow actions to trigger events
and call appropriate <em>handlers</em>.
We move on to discuss how events can be used as a pattern
for integration between services in a microservices architecture.
Finally, we distinguish between <em>commands</em> and <em>events</em>.
Our application is now fundamentally a message-processing system.</p>
</dd>
<dt>Command-query responsibility segregation (<a href="https://www.cosmicpython.com/book/chapter_12_cqrs.html">[chapter_12_cqrs]</a>)</dt>
<dd>
<p>We present an example of <em>command-query responsibility segregation</em>,
with and without events.</p>
</dd>
<dt>Dependency injection (<a href="https://www.cosmicpython.com/book/chapter_13_dependency_injection.html">[chapter_13_dependency_injection]</a>)</dt>
<dd>
<p>We tidy up our explicit and implicit dependencies and implement a
simple dependency injection framework.</p>
</dd>
</dl>
</div>
</div>
<div>
<h4 id="_additional_content"><a href="#_additional_content"></a>Additional Content</h4>
<div>
<dl>
<dt>How do I get there from here? (<a href="https://www.cosmicpython.com/book/epilogue_1_how_to_get_there_from_here.html">[epilogue_1_how_to_get_there_from_here]</a>)</dt>
<dd>
<p>Implementing architectural patterns always looks easy when you show a simple
example, starting from scratch, but many of you will probably be wondering how
to apply these principles to existing software. We’ll provide a
few pointers in the epilogue and some links to further reading.</p>
</dd>
</dl>
</div>
</div>
</div>
<div>
<h3 id="_example_code_and_coding_along"><a href="#_example_code_and_coding_along"></a>Example Code and Coding Along</h3>
<p>You’re reading a book, but you’ll probably agree with us when we say that
the best way to learn about code is to code.  We learned most of what we know
from pairing with people, writing code with them, and learning by doing, and
we’d like to re-create that experience as much as possible for you in this book.</p>
<p>As a result, we’ve structured the book around a single example project
(although we do sometimes throw in other examples). We’ll build up this project as the chapters progress, as if you’ve paired with us and
we’re explaining what we’re doing and why at each step.</p>
<p>But to really get to grips with these patterns, you need to mess about with the
code and get a feel for how it works. You’ll find all the code on
GitHub; each chapter has its own branch. You can find <a href="https://github.com/cosmicpython/code/branches/all">a list</a> of the branches on GitHub as well.</p>
<p>Here are three ways you might code along with the book:</p>
<div>
<ul>
<li>
<p>Start your own repo and try to build up the app as we do, following the
examples from listings in the book, and occasionally looking to our repo
for hints. A word of warning, however: if you’ve read Harry’s previous book
and coded along with that, you’ll find that this book requires you to figure out more on
your own; you may need to lean pretty heavily on the working versions on GitHub.</p>
</li>
<li>
<p>Try to apply each pattern, chapter by chapter, to your own (preferably
small/toy) project, and see if you can make it work for your use case.  This
is high risk/high reward (and high effort besides!). It may take quite some
work to get things working for the specifics of your project, but on the other
hand, you’re likely to learn the most.</p>
</li>
<li>
<p>For less effort, in each chapter we outline an "Exercise for the Reader,"
and point you to a GitHub location where you can download some partially finished
code for the chapter with a few missing parts to write yourself.</p>
</li>
</ul>
</div>
<p>Particularly if you’re intending to apply some of these patterns in your own
projects, working through a simple example is a great way to
safely practice.</p>
<div>
<table>
<tbody><tr>
<td>
<p>Tip</p>
</td>
<td>
At the very least, do a <code>git checkout</code> of the code from our repo as you
    read each chapter. Being able to jump in and see the code in the context of
    an actual working app will help answer a lot of questions as you go, and
    makes everything more real. You’ll find instructions for how to do that
    at the beginning of each chapter.
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h3 id="_license"><a href="#_license"></a>License</h3>
<p>The code (and the online version of the book) is licensed under a Creative
Commons CC BY-NC-ND license, which means you are free to copy and share it with
anyone you like, for non-commercial purposes, as long as you give attribution.
If you want to re-use any of the content from this book and you have any
worries about the license, contact O’Reilly at <a href="mailto:permissions@oreilly.com"><em>permissions@oreilly.com</em></a>.</p>
<p>The print edition is licensed differently; please see the copyright page.</p>
</div>
<div>
<h3 id="_conventions_used_in_this_book"><a href="#_conventions_used_in_this_book"></a>Conventions Used in This Book</h3>
<p>The following typographical conventions are used in this book:</p>
<div>
<dl>
<dt><em>Italic</em></dt>
<dd>
<p>Indicates new terms, URLs, email addresses, filenames, and file extensions.</p>
</dd>
<dt>Constant width</dt>
<dd>
<p>Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.</p>
</dd>
<dt><strong><code>Constant width bold</code></strong></dt>
<dd>
<p>Shows commands or other text that should be typed literally by the user.</p>
</dd>
<dt><em>Constant width italic</em></dt>
<dd>
<p>Shows text that should be replaced with user-supplied values or by values determined by context.</p>
</dd>
</dl>
</div>
<div>
<table>
<tbody><tr>
<td>
<p>Tip</p>
</td>
<td>
<p>This element signifies a tip or suggestion.</p>
</td>
</tr>
</tbody></table>
</div>
<div>
<table>
<tbody><tr>
<td>
<p>Note</p>
</td>
<td>
<p>This element signifies a general note.</p>
</td>
</tr>
</tbody></table>
</div>
<div>
<table>
<tbody><tr>
<td>
<p>Warning</p>
</td>
<td>
<p>This element indicates a warning or caution.</p>
</td>
</tr>
</tbody></table>
</div>
</div>
<div>
<h3 id="_oreilly_online_learning"><a href="#_oreilly_online_learning"></a>O’Reilly Online Learning</h3>
<div>
<table>
<tbody><tr>
<td>
<p>Note</p>
</td>
<td>
<p>For more than 40 years, <a href="http://oreilly.com/"><em>O’Reilly Media</em></a> has provided technology and business training, knowledge, and insight to help companies succeed.</p>
</td>
</tr>
</tbody></table>
</div>
<p>Our unique network of experts and innovators share their knowledge and expertise through books, articles, conferences, and our online learning platform. O’Reilly’s online learning platform gives you on-demand access to live training courses, in-depth learning paths, interactive coding environments, and a vast collection of text and video from O’Reilly and 200+ other publishers. For more information, please visit <a href="http://oreilly.com/"><em>http://oreilly.com</em></a>.</p>
</div>
<div>
<h3 id="_how_to_contact_oreilly"><a href="#_how_to_contact_oreilly"></a>How to Contact O’Reilly</h3>
<p>Please address comments and questions concerning this book to the publisher:</p>
<ul>
  <li>O’Reilly Media, Inc.</li>
  <li>1005 Gravenstein Highway North</li>
  <li>Sebastopol, CA 95472</li>
  <li>800-998-9938 (in the United States or Canada)</li>
  <li>707-829-0515 (international or local)</li>
  <li>707-829-0104 (fax)</li>
</ul>

<!--Don't forget to update the link above.-->

<p>For more information about our books, courses, conferences, and news, see our website at <a href="http://www.oreilly.com/">http://www.oreilly.com</a>.</p>



</div>
<div>
<h3 id="_acknowledgments"><a href="#_acknowledgments"></a>Acknowledgments</h3>
<p>To our tech reviewers, David Seddon, Ed Jung, and Hynek Schlawack: we absolutely
do not deserve you. You are all incredibly dedicated, conscientious, and
rigorous. Each one of you is immensely smart, and your different points of
view were both useful and complementary to each other. Thank you from the
bottom of our hearts.</p>
<p>Gigantic thanks also to all our readers so far for their comments and
suggestions:
Ian Cooper, Abdullah Ariff, Jonathan Meier, Gil Gonçalves, Matthieu Choplin,
Ben Judson, James Gregory, Łukasz Lechowicz, Clinton Roy, Vitorino Araújo,
Susan Goodbody, Josh Harwood, Daniel Butler, Liu Haibin, Jimmy Davies, Ignacio
Vergara Kausel, Gaia Canestrani, Renne Rocha, pedroabi, Ashia Zawaduk, Jostein
Leira, Brandon Rhodes, Jazeps Basko, simkimsia, Adrien Brunet, Sergey Nosko,
Dmitry Bychkov,
and many more; our apologies if we missed you on this list.</p>
<p>Super-mega-thanks to our editor Corbin Collins for his gentle chivvying, and
for being a tireless advocate of the reader. Similarly-superlative thanks to
the production staff, Katherine Tozer, Sharon Wilkey, Ellen Troutman-Zaig, and
Rebecca Demarest, for your dedication, professionalism, and attention to
detail. This book is immeasurably improved thanks to you.</p>
<p>Any errors remaining in the book are our own, naturally.</p>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Signal Chat Leak Angers U.S. Military Pilots (107 pts)]]></title>
            <link>https://www.nytimes.com/2025/03/27/us/politics/pilots-signal-leak.html</link>
            <guid>43501821</guid>
            <pubDate>Fri, 28 Mar 2025 05:20:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/03/27/us/politics/pilots-signal-leak.html">https://www.nytimes.com/2025/03/27/us/politics/pilots-signal-leak.html</a>, See on <a href="https://news.ycombinator.com/item?id=43501821">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/03/27/us/politics/pilots-signal-leak.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[A decompilation and port of Sonic Advance 2-a GameBoy Advance game written in C (168 pts)]]></title>
            <link>https://github.com/SAT-R/sa2</link>
            <guid>43500769</guid>
            <pubDate>Fri, 28 Mar 2025 02:21:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/SAT-R/sa2">https://github.com/SAT-R/sa2</a>, See on <a href="https://news.ycombinator.com/item?id=43500769">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-turbo-body="">
      


    <div>
      <p><a href="#start-of-content" data-skip-target-assigned="false">Skip to content</a>

      <span data-view-component="true">
    <span data-view-component="true"></span>
</span></p>

<react-partial partial-name="keyboard-shortcuts-dialog" data-ssr="false" data-attempted-ssr="false">
  
  
  
</react-partial>




      

          

              


<header role="banner" data-is-top="true" data-color-mode="light" data-light-theme="light" data-dark-theme="dark">
  <h2>Navigation Menu</h2>

  

  <div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                    
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code Review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_product_navbar&quot;}" href="https://github.com/features/code-search">
      
      <div>
        <p>Code Search</p><p>
        Find more, search less
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      
</li>


                <li>
      
      <div>
                    <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      Events &amp; Webinars

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                    <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                </ul>
              </div>
</li>


                <li>
      
      <div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

                </ul>
              </div>
              <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

                </ul>
              </div>
              
          </div>
</li>


                <li>
      
      <div>
                <ul>
                    <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

                </ul>
              </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:SAT-R/sa2" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="79ixn-h9tNSGeYQ-HNvTZ_mhddCK4OOqfmgCaZS3cddSju5Hal5JXivA42Z-odc8Ra6QXJ-ncRyf35PAcAY6KQ" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="SAT-R/sa2" data-current-org="SAT-R" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=SAT-R%2Fsa2" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/SAT-R/sa2&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="359e97713e71210e387eaff2e2babf2871d0c46553b358cd5cb43a9a8cfc607a" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
          
        </p></div>
      </div>
</header>

      
    </div>

  








    


    






  <div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" data-commit-hovercards-enabled="" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="" data-project-hovercards-enabled="">
    <main id="js-repo-pjax-container">
      
  





    
    

    






  
  

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
    <div data-view-component="true" id="repo-content-pjax-container">      











<react-partial partial-name="repos-overview" data-ssr="true" data-attempted-ssr="true">
  
  
  <div data-target="react-partial.reactRoot"><div itemscope="" itemtype="https://schema.org/abstract"><h2>Repository files navigation</h2><nav aria-label="Repository files"><ul role="list"><li><a href="#" aria-current="page"><span data-component="icon"></span><span data-component="text" data-content="README">README</span></a></li></ul></nav></div><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Sonic Advance 2</h2><a id="user-content-sonic-advance-2" aria-label="Permalink: Sonic Advance 2" href="#sonic-advance-2"></a></p>
<p dir="auto"><a href="https://github.com/SAT-R/sa2/actions/workflows/build.yml"><img src="https://github.com/SAT-R/sa2/actions/workflows/build.yml/badge.svg" alt="CI status"></a> <a href="https://github.com/SAT-R/sa2"><img src="https://camo.githubusercontent.com/fd2e8b6eb7275955dcd77e92f905b802ffd24a7f453456176a3ed812c4f477dd/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f7361742d722e6769746875622e696f2f7361322f7265706f7274732f70726f67726573732d7361322d736869656c642e6a736f6e" alt="Decompilation Progress" data-canonical-src="https://img.shields.io/endpoint?url=https://sat-r.github.io/sa2/reports/progress-sa2-shield.json"></a> <a href="https://github.com/SAT-R/sa2"><img src="https://camo.githubusercontent.com/4716dfed72757527aab2acd1c65b443c222424b9200c4dc944d4007121803170/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f7361742d722e6769746875622e696f2f7361322f7265706f7274732f70726f67726573732d7361322d736869656c642d6d61746368696e672e6a736f6e" alt="Decompilation Matching Progress" data-canonical-src="https://img.shields.io/endpoint?url=https://sat-r.github.io/sa2/reports/progress-sa2-shield-matching.json"></a> <a href="https://github.com/SAT-R/sa2/graphs/contributors"><img src="https://camo.githubusercontent.com/89bdefe4415b0b76f4a1214569e1e8dd14eaba85ed674523408a24ad530b7419/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f5341542d522f736132" alt="Contributors" data-canonical-src="https://img.shields.io/github/contributors/SAT-R/sa2"></a> <a href="https://discord.gg/vZTvVH3gA9" rel="nofollow"><img src="https://camo.githubusercontent.com/c067c51cf022e56200635fe742a3509e0e701388a97aca2213ded7c64d5f07ad/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f31303532333437323939343537363731323030" alt="Discord" data-canonical-src="https://img.shields.io/discord/1052347299457671200"></a></p>
<blockquote>
<p dir="auto"><g-emoji alias="warning">⚠️</g-emoji> <strong>This project is not completed and still under active development</strong></p>
</blockquote>
<p dir="auto">This is a work in progress matching decompilation of Sonic Advance 2</p>
<p dir="auto">It so far builds the following ROMs:</p>
<ul dir="auto">
<li><a href="https://datomatic.no-intro.org/index.php?page=show_record&amp;s=23&amp;n=0890" rel="nofollow"><strong>sa2.gba</strong></a> <code>sha1: 7bcd6a07af7c894746fa28073fe0c0e34408022d</code> (USA) (En,Ja,Fr,De,Es,It)</li>
<li><a href="https://datomatic.no-intro.org/index.php?page=show_record&amp;s=23&amp;n=0900" rel="nofollow"><strong>sa2_europe.gba</strong></a> <code>sha1: b0f64bdca097f2de8f05ac4c8caea2b80c5faeb1</code> (Europe) (En,Ja,Fr,De,Es,It)</li>
<li>🚧 <a href="https://datomatic.no-intro.org/index.php?page=show_record&amp;s=23&amp;n=0799" rel="nofollow"><strong>sa2_japan.gba</strong></a> <code>sha1: dffd0188fc78154b42b401398a224ae0713edf23</code> (Japan) (En,Ja,Fr,De,Es,It) (Work in Progress)</li>
</ul>
<p dir="auto">It can also build:</p>
<ul dir="auto">
<li><strong>sa2.sdl</strong> <code>make sdl</code> (Linux/MacOS SDL 64bit port)</li>
<li><strong>sa2.sdl_win32.exe</strong> <code>make sdl_win32</code> (Windows SDL 64bit port)</li>
<li>🚧 <strong>sa2.win32.exe</strong> <code>make win32</code> (Win32 native port, not functional)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Current state</h2><a id="user-content-current-state" aria-label="Permalink: Current state" href="#current-state"></a></p>
<ul dir="auto">
<li>🎉 The build is 100% from C files with <a href="https://github.com/SAT-R/sa2/blob/main/asm/non_matching">~80 functions which currently don't match</a></li>
<li>All assembly code extracted, disassembled, and decompiled by hand to their C equivilent</li>
<li>All songs have been extracted, and documented as <a href="https://github.com/SAT-R/sa2/blob/main/sound/songs/midi">matching MIDI files</a></li>
<li>All sprite animation frames have been <a href="https://github.com/SAT-R/sa2/blob/main/graphics/obj_tiles">extracted to PNGs and are used to build the matching rom</a></li>
<li>All tilemaps (backgrounds) have been documented and <a href="https://github.com/SAT-R/sa2/blob/main/data/tilemaps">had their tiles extracted</a></li>
<li>The game compiles to a widescreen port (<em>426x240</em>) for multiple platforms</li>
<li>The "sub games" (Chao Garden and Collect The Rings) have been disassembled but not yet decompiled</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Setting up the repo</h2><a id="user-content-setting-up-the-repo" aria-label="Permalink: Setting up the repo" href="#setting-up-the-repo"></a></p>
<p dir="auto">Please see follow <a href="https://github.com/SAT-R/sa2/blob/main/INSTALL.md">these instructions</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Community</h2><a id="user-content-community" aria-label="Permalink: Community" href="#community"></a></p>
<p dir="auto">Join us on <a href="https://discord.gg/vZTvVH3gA9" rel="nofollow">discord</a> to get started in helping out</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Notes</h2><a id="user-content-notes" aria-label="Permalink: Notes" href="#notes"></a></p>
<ul dir="auto">
<li>The <a href="https://github.com/jiangzhengwenjz/katam/">Kirby &amp; The Amazing Mirror</a> decompilation uses a very similar codebase, as it was written by the same dev team (Dimps)</li>
<li><a href="https://decomp.me/" rel="nofollow">https://decomp.me</a> is a great resource for helping to create matching functions</li>
<li><code>ldscript.txt</code> tells the linker the order which files should be linked</li>
<li>For more info, see the <a href="https://zelda64.dev/games/tmc" rel="nofollow">FAQs section</a> of TMC</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Credits</h2><a id="user-content-credits" aria-label="Permalink: Credits" href="#credits"></a></p>
<ul dir="auto">
<li>
<p dir="auto"><a href="https://github.com/JaceCear">JaceCear</a> for his dedication to understanding the internals of the graphics engine, writing <a href="https://github.com/JaceCear/SA-Trilogy-Animation-Exporter">tools to extract this data</a>, as well as massive effort in contributing towards the decompilation process, <em>and</em> setting up the PC ports</p>
</li>
<li>
<p dir="auto">Shout out to <a href="https://github.com/froggestspirit">@froggestspirit</a> for the drive to set this project up</p>
</li>
<li>
<p dir="auto">Special thanks to <a href="https://github.com/normmatt">@normmatt</a> for the initial repo setup and sounds decompilation</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/pret">Pokemon Reverse Engineering Tools</a> community for their help with the project, and tooling for GBA decompilations</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/Kermalis">Kermalis</a> for <a href="https://github.com/Kermalis/VGMusicStudio">their tool</a> which was used to dump the game midis</p>
</li>
<li>
<p dir="auto"><a href="https://github.com/laqieer">琪姬</a> for their exellent work <a href="https://github.com/FireEmblemUniverse/fireemblem8u/pull/137" data-hovercard-type="pull_request" data-hovercard-url="/FireEmblemUniverse/fireemblem8u/pull/137/hovercard">documenting</a> all the quirks of matching midis</p>
</li>
</ul>
</article></div></div>
</react-partial>

      </div>

</turbo-frame>


    </main>
  </div>

          



    <ghcc-consent id="ghcc" data-initial-cookie-consent-allowed="" data-cookie-consent-required="true"></ghcc-consent>



  

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open="">
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog="">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Using uv and PEP 723 for Self-Contained Python Scripts (228 pts)]]></title>
            <link>https://thisdavej.com/share-python-scripts-like-a-pro-uv-and-pep-723-for-easy-deployment/</link>
            <guid>43500124</guid>
            <pubDate>Fri, 28 Mar 2025 00:53:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://thisdavej.com/share-python-scripts-like-a-pro-uv-and-pep-723-for-easy-deployment/">https://thisdavej.com/share-python-scripts-like-a-pro-uv-and-pep-723-for-easy-deployment/</a>, See on <a href="https://news.ycombinator.com/item?id=43500124">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>We all love Python’s comprehensive standard library, but let’s face it – PyPI’s wealth of packages often becomes essential. Sharing single-file, self-contained Python scripts that rely on these external tools can be a headache. Historically, we’ve relied on <code>requirements.txt</code> or full-fledged package managers such as Poetry or pipenv, which can be overkill for simple scripts and intimidating for newcomers. But what if there was a simpler way? That’s where uv and PEP 723 come in. This article delves into how uv harnesses PEP 723 to embed dependencies directly within scripts, making distribution and execution extremely easy.</p><h2 id="uv-and-pep-723">uv and PEP 723</h2><p>One of my favorite features of <a href="https://docs.astral.sh/uv/" target="_blank" rel="noreferrer noopener">uv</a> and its next-gen Python tooling is the ability to run single-file Python scripts that contain references to external Python packages without a lot of ceremony. This feat is accomplished by uv with the help of <a href="https://peps.python.org/pep-0723/" target="_blank" rel="noreferrer noopener">PEP 723</a> which is focused on “Inline script metadata.” This PEP defines a standardized method for embedding script metadata, including external package dependencies, directly into single-file Python scripts.</p><p>PEP 723 has gone through the Python Enhancement Proposal process and has been approved by the Python steering council and it is now part of the official Python specifications. Various tools in the Python ecosystem have implemented support including uv, <a href="https://pdm-project.org/en/latest/" target="_blank" rel="noreferrer noopener">PDM (Python Development Master)</a>, and <a href="https://hatch.pypa.io/latest/" target="_blank" rel="noreferrer noopener">Hatch</a>. In this article, we focus on the uv’s excellent support of PEP 723 to create and distribute single-file Python scripts.</p><h2 id="setting-the-stage">Setting the stage</h2><p>We have created a Python script called <code>wordlookup.py</code> to fetch definitions from a dictionary API. It’s looking pretty solid, but we want to distribute and give it to others to run with ease:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span>import</span> <span>httpx</span>
</span></span><span><span><span>import</span> <span>json</span>
</span></span><span><span><span>import</span> <span>argparse</span>
</span></span><span><span><span>import</span> <span>asyncio</span>
</span></span><span><span><span>import</span> <span>textwrap</span>
</span></span><span><span><span>import</span> <span>os</span>
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span>async</span> <span>def</span> <span>fetch_word_data</span><span>(</span><span>word</span><span>:</span> <span>str</span><span>)</span> <span>-&gt;</span> <span>list</span><span>:</span>
</span></span><span><span>    <span>"""Fetches word data from the dictionary API."""</span>
</span></span><span><span>    <span>url</span> <span>=</span> <span>f</span><span>"https://api.dictionaryapi.dev/api/v2/entries/en/</span><span>{</span><span>word</span><span>}</span><span>"</span>
</span></span><span><span>    <span>try</span><span>:</span>
</span></span><span><span>        <span>async</span> <span>with</span> <span>httpx</span><span>.</span><span>AsyncClient</span><span>()</span> <span>as</span> <span>client</span><span>:</span>
</span></span><span><span>            <span>response</span> <span>=</span> <span>await</span> <span>client</span><span>.</span><span>get</span><span>(</span><span>url</span><span>)</span>
</span></span><span><span>            <span>response</span><span>.</span><span>raise_for_status</span><span>()</span>
</span></span><span><span>            <span>return</span> <span>response</span><span>.</span><span>json</span><span>()</span>
</span></span><span><span>    <span>except</span> <span>httpx</span><span>.</span><span>HTTPError</span><span>:</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>    <span>except</span> <span>json</span><span>.</span><span>JSONDecodeError</span> <span>as</span> <span>exc</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"Error decoding JSON for '</span><span>{</span><span>word</span><span>}</span><span>': </span><span>{</span><span>exc</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>    <span>except</span> <span>Exception</span> <span>as</span> <span>e</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"An unexpected error occurred: </span><span>{</span><span>e</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span>async</span> <span>def</span> <span>main</span><span>(</span><span>word</span><span>:</span> <span>str</span><span>):</span>
</span></span><span><span>    <span>"""Fetches and prints definitions for a given word with wrapping."""</span>
</span></span><span><span>    <span>data</span> <span>=</span> <span>await</span> <span>fetch_word_data</span><span>(</span><span>word</span><span>)</span>
</span></span><span><span>    <span>if</span> <span>data</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"Definitions for '</span><span>{</span><span>word</span><span>}</span><span>':"</span><span>)</span>
</span></span><span><span>        <span>try</span><span>:</span>
</span></span><span><span>            <span>terminal_width</span> <span>=</span> <span>os</span><span>.</span><span>get_terminal_size</span><span>()</span><span>.</span><span>columns</span> <span>-</span> <span>4</span>  <span># 4 for padding</span>
</span></span><span><span>        <span>except</span> <span>OSError</span><span>:</span>
</span></span><span><span>            <span>terminal_width</span> <span>=</span> <span>80</span>  <span># default if terminal size can't be determined</span>
</span></span><span><span>
</span></span><span><span>        <span>for</span> <span>entry</span> <span>in</span> <span>data</span><span>:</span>
</span></span><span><span>            <span>for</span> <span>meaning</span> <span>in</span> <span>entry</span><span>.</span><span>get</span><span>(</span><span>"meanings"</span><span>,</span> <span>[]):</span>
</span></span><span><span>                <span>part_of_speech</span> <span>=</span> <span>meaning</span><span>.</span><span>get</span><span>(</span><span>"partOfSpeech"</span><span>)</span>
</span></span><span><span>                <span>definitions</span> <span>=</span> <span>meaning</span><span>.</span><span>get</span><span>(</span><span>"definitions"</span><span>,</span> <span>[])</span>
</span></span><span><span>                <span>if</span> <span>part_of_speech</span> <span>and</span> <span>definitions</span><span>:</span>
</span></span><span><span>                    <span>print</span><span>(</span><span>f</span><span>"</span><span>\n</span><span>{</span><span>part_of_speech</span><span>}</span><span>:"</span><span>)</span>
</span></span><span><span>                    <span>for</span> <span>definition_data</span> <span>in</span> <span>definitions</span><span>:</span>
</span></span><span><span>                        <span>definition</span> <span>=</span> <span>definition_data</span><span>.</span><span>get</span><span>(</span><span>"definition"</span><span>)</span>
</span></span><span><span>                        <span>if</span> <span>definition</span><span>:</span>
</span></span><span><span>                            <span>wrapped_lines</span> <span>=</span> <span>textwrap</span><span>.</span><span>wrap</span><span>(</span>
</span></span><span><span>                                <span>definition</span><span>,</span> <span>width</span><span>=</span><span>terminal_width</span><span>,</span>
</span></span><span><span>                                <span>subsequent_indent</span><span>=</span><span>""</span>
</span></span><span><span>                            <span>)</span>
</span></span><span><span>                            <span>for</span> <span>i</span><span>,</span> <span>line</span> <span>in</span> <span>enumerate</span><span>(</span><span>wrapped_lines</span><span>):</span>
</span></span><span><span>                                <span>if</span> <span>i</span> <span>==</span> <span>0</span><span>:</span>
</span></span><span><span>                                    <span>print</span><span>(</span><span>f</span><span>"- </span><span>{</span><span>line</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>                                <span>else</span><span>:</span>
</span></span><span><span>                                    <span>print</span><span>(</span><span>f</span><span>"  </span><span>{</span><span>line</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>    <span>else</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"Could not retrieve definition for '</span><span>{</span><span>word</span><span>}</span><span>'."</span><span>)</span>
</span></span><span><span>
</span></span><span><span>
</span></span><span><span><span>if</span> <span>__name__</span> <span>==</span> <span>"__main__"</span><span>:</span>
</span></span><span><span>    <span>parser</span> <span>=</span> <span>argparse</span><span>.</span><span>ArgumentParser</span><span>(</span><span>description</span><span>=</span><span>"Fetch definitions for a word."</span><span>)</span>
</span></span><span><span>    <span>parser</span><span>.</span><span>add_argument</span><span>(</span><span>"word"</span><span>,</span> <span>type</span><span>=</span><span>str</span><span>,</span> <span>help</span><span>=</span><span>"The word to look up."</span><span>)</span>
</span></span><span><span>    <span>args</span> <span>=</span> <span>parser</span><span>.</span><span>parse_args</span><span>()</span>
</span></span><span><span>
</span></span><span><span>    <span>asyncio</span><span>.</span><span>run</span><span>(</span><span>main</span><span>(</span><span>args</span><span>.</span><span>word</span><span>))</span>
</span></span></code></pre></div><p>This script imports several Python modules, setting the stage for a script that interacts with a dictionary API web service, processes JSON data, handles command-line arguments, utilizes asynchronous operations, formats text output, and interacts with the operating system to fetch the terminal width. With the exception of <a href="https://www.python-httpx.org/" target="_blank" rel="noreferrer noopener"><code>httpx</code></a>, an HTTP client library package, all of the other Python modules we import are part of the Python standard library. While I could technically accomplish the goal with Python’s built-in <a href="https://docs.python.org/3/library/urllib.request.html" target="_blank" rel="noreferrer noopener">urllib.request</a> module, I prefer <code>httpx</code>. This, however, presents a dilemma since I will need a good way to distribute this script so my friends and coworkers can use it without a lot of fuss installing the needed <code>httpx</code> dependency.</p><p>How do we solve this dilemma? uv to the rescue! We’ll walk through how this works next.</p><h2 id="installing-uv">Installing uv</h2><p>As a first step, we first need to install uv. Please refer to the official uv documentation for guidance on <a href="https://docs.astral.sh/uv/getting-started/installation/" target="_blank" rel="noreferrer noopener">installing uv</a>. A couple of common ways to install uv include:</p><div><pre tabindex="0"><code data-lang="sh"><span><span><span># Assuming you have pipx installed, this is the recommended way since it installs</span>
</span></span><span><span><span># uv into an isolated environment</span>
</span></span><span><span>pipx install uv
</span></span><span><span>
</span></span><span><span><span># uv can also be installed this way</span>
</span></span><span><span>pip install uv
</span></span></code></pre></div><p>uv is an amazingly versatile and, in my opinion, is very much the future of Python tooling. In this article, however, I’m just demonstrating one of uv’s awesome features for invoking single-file scripts with external dependencies.</p><h2 id="adding-package-dependencies-in-single-file-scripts-with-uv">Adding package dependencies in single-file scripts with uv</h2><p>We’re now ready to add <code>httpx</code> as a dependency in our <code>wordlookup.py</code> script! Here’s how it’s done:</p><div><pre tabindex="0"><code data-lang="sh"><span><span>uv add --script wordlookup.py httpx
</span></span></code></pre></div><p>That’s it! After this, uv will add metadata in the comments at the top of our script. Here’s the first part of the script with a few lines after for context so you can see this in action:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span># /// script</span>
</span></span><span><span><span># requires-python = "&gt;=3.13"</span>
</span></span><span><span><span># dependencies = [</span>
</span></span><span><span><span>#     "httpx",</span>
</span></span><span><span><span># ]</span>
</span></span><span><span><span># ///</span>
</span></span><span><span>
</span></span><span><span><span>import</span> <span>httpx</span>
</span></span><span><span><span>import</span> <span>json</span>
</span></span><span><span><span>import</span> <span>argparse</span>
</span></span><span><span><span>import</span> <span>asyncio</span>
</span></span><span><span><span>import</span> <span>textwrap</span>
</span></span><span><span><span>import</span> <span>os</span>
</span></span><span><span>
</span></span><span><span><span>async</span> <span>def</span> <span>fetch_word_data</span><span>(</span><span>word</span><span>:</span> <span>str</span><span>)</span> <span>-&gt;</span> <span>list</span><span>:</span>
</span></span><span><span>    <span>"""Fetches word data from the dictionary API."""</span>
</span></span><span><span>    <span>url</span> <span>=</span> <span>f</span><span>"https://api.dictionaryapi.dev/api/v2/entries/en/</span><span>{</span><span>word</span><span>}</span><span>"</span>
</span></span><span><span>    <span>try</span><span>:</span>
</span></span><span><span>        <span>async</span> <span>with</span> <span>httpx</span><span>.</span><span>AsyncClient</span><span>()</span> <span>as</span> <span>client</span><span>:</span>
</span></span><span><span>            <span>response</span> <span>=</span> <span>await</span> <span>client</span><span>.</span><span>get</span><span>(</span><span>url</span><span>)</span>
</span></span><span><span>            <span>response</span><span>.</span><span>raise_for_status</span><span>()</span>
</span></span><span><span>            <span>return</span> <span>response</span><span>.</span><span>json</span><span>()</span>
</span></span><span><span>    <span>except</span> <span>httpx</span><span>.</span><span>HTTPError</span><span>:</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>    <span>except</span> <span>json</span><span>.</span><span>JSONDecodeError</span> <span>as</span> <span>exc</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"Error decoding JSON for '</span><span>{</span><span>word</span><span>}</span><span>': </span><span>{</span><span>exc</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span><span><span>    <span>except</span> <span>Exception</span> <span>as</span> <span>e</span><span>:</span>
</span></span><span><span>        <span>print</span><span>(</span><span>f</span><span>"An unexpected error occurred: </span><span>{</span><span>e</span><span>}</span><span>"</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>None</span>
</span></span></code></pre></div><p>If you have used <code>pyproject.toml</code> with various Python tools such as Poetry, Flit, Hatch, Maturin, setuptools, etc., this syntax will likely look at least somewhat familiar. For example, Poetry might look like this:</p><div><pre tabindex="0"><code data-lang="toml"><span><span><span># &lt;-- other package metadata here --&gt;</span>
</span></span><span><span>
</span></span><span><span><span>[</span><span>tool</span><span>.</span><span>poetry</span><span>.</span><span>dependencies</span><span>]</span>
</span></span><span><span><span>python</span> <span>=</span> <span>"&gt;=3.13"</span>
</span></span><span><span><span>httpx</span> <span>=</span> <span>"^0.28.1"</span>
</span></span><span><span>
</span></span><span><span><span>[</span><span>build-system</span><span>]</span>
</span></span><span><span><span>requires</span> <span>=</span> <span>[</span><span>"poetry-core"</span><span>]</span>
</span></span><span><span><span>build-backend</span> <span>=</span> <span>"poetry.core.masonry.api"</span>
</span></span></code></pre></div><p>You will observe that uv adds the metadata for <code>httpx</code>, but does not specify a version. uv will fetch the latest stable version of httpx from PyPI for use with the script. You can add dependency constraints by modifying the metadata directly after the fact or specifying a version dependency through the command line:</p><div><pre tabindex="0"><code data-lang="sh"><span><span>uv add --script wordlookup.py <span>"httpx&gt;=0.28.1"</span>
</span></span></code></pre></div><h2 id="running-your-script-with-uv">Running your script with uv</h2><p>We are ready to run our script. The uv tool makes it as simple to run as this (note that I am passing a <code>--help</code> argument to the script as well):</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ uv run wordlookup.py --help
</span></span><span><span>Installed <span>7</span> packages in 74ms
</span></span><span><span>usage: wordlookup.py <span>[</span>-h<span>]</span> word
</span></span><span><span>
</span></span><span><span>Fetch definitions <span>for</span> a word.
</span></span><span><span>
</span></span><span><span>positional arguments:
</span></span><span><span>  word        The word to look up.
</span></span><span><span>
</span></span><span><span>options:
</span></span><span><span>  -h, --help  show this <span>help</span> message and <span>exit</span>
</span></span></code></pre></div><p>When invoking the script with <code>uv run</code> the first time, you will see some extra activity at the beginning as uv automatically creates an isolated virtual environment behind the scenes and fetches and installs the <code>httpx</code> package and its associated dependencies. This is why we see <code>Installed 7 packages in 74ms</code> in the terminal output.</p><p>If you try to run the script with <code>python wordlookup.py</code>, the script will fail unless you happen to have <code>httpx</code> installed globally or in your current virtual environment. How does uv use the script metadata? When invoking the script with <code>uv run</code>, uv:</p><ul><li>Checks that the required Python version is available.</li><li>Automatically creates an isolated virtual environment (without modifying your global Python environment).</li><li>Installs the listed dependencies (<code>httpx</code> in this case) if they’re not already installed.</li><li>Executes the script.</li></ul><p>For each subsequent launch of the script with <code>uv run</code>, uv will leverage the virtual environment it created behind the scenes and invoke the script:</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ uv run wordlookup.py postulate
</span></span><span><span>Definitions <span>for</span> <span>'postulate'</span>:
</span></span><span><span>
</span></span><span><span>noun:
</span></span><span><span>- Something assumed without proof as being self-evident or generally accepted, especially when used as a basis
</span></span><span><span>  <span>for</span> an argument. Sometimes distinguished from axioms as being relevant to a particular science or context,
</span></span><span><span>  rather than universally true, and following from other axioms rather than being an absolute assumption.
</span></span><span><span>- A fundamental element<span>;</span> a basic principle.
</span></span><span><span>- An axiom.
</span></span><span><span>- A requirement<span>;</span> a prerequisite.
</span></span><span><span>
</span></span><span><span>verb:
</span></span><span><span>- To assume as a truthful or accurate premise or axiom, especially as a basis of an argument.
</span></span><span><span>- To appoint or request one<span>'</span>s appointment to an ecclesiastical office.
</span></span><span><span>- To request, demand or claim <span>for</span> oneself.
</span></span><span><span>
</span></span><span><span>adjective:
</span></span><span><span>- Postulated.
</span></span></code></pre></div><p>If we add additional dependencies to our script or change the Python or <code>httpx</code> version in the metadata, <code>uv run</code> will create a new isolated virtual environment the next time it is invoked.</p><h2 id="making-it-even-easier-to-run-with-a-python-shebang">Making it even easier to run with a Python shebang</h2><p>We can add a shebang (sometimes called a hashbang) at the top of the Python script to make it even easier to invoke the script with uv. I learned this excellent trick from Trey Hunner <a href="https://treyhunner.com/2024/12/lazy-self-installing-python-scripts-with-uv/" target="_blank" rel="noreferrer noopener">here</a>.</p><h3 id="linuxmacos-users">Linux/macOS users</h3><p>For Linux and macOS (and BSD users), add the following line at the top of the script:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span>#!/usr/bin/env -S uv run --script</span>
</span></span></code></pre></div><p>The fuller script context will look like the following at the top of the file:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span>#!/usr/bin/env -S uv run --script</span>
</span></span><span><span><span># /// script</span>
</span></span><span><span><span># requires-python = "&gt;=3.13"</span>
</span></span><span><span><span># dependencies = [</span>
</span></span><span><span><span>#     "httpx&gt;=0.28.1",</span>
</span></span><span><span><span># ]</span>
</span></span><span><span><span># ///</span>
</span></span><span><span>
</span></span><span><span><span>import</span> <span>httpx</span>
</span></span><span><span><span>import</span> <span>json</span>
</span></span><span><span><span>import</span> <span>argparse</span>
</span></span><span><span><span>import</span> <span>asyncio</span>
</span></span><span><span><span>import</span> <span>textwrap</span>
</span></span><span><span><span>import</span> <span>os</span>
</span></span></code></pre></div><p>Next, make the file executable:</p><p>Once that’s done, you can run the script directly, without needing to use the full <code>uv run wordlookup.py</code> command:</p><h3 id="windows-users">Windows users</h3><p>For Windows users, you’re also in luck since the py launcher for Windows is also able to interpret shebangs. The py launcher is included by default when you install Python on Windows. Please note that you’ll need to omit the <code>-S</code> from the shebang for the script to work correctly. The first line of your script should look like this:</p><div><pre tabindex="0"><code data-lang="py"><span><span><span>#!/usr/bin/env uv run --script</span>
</span></span></code></pre></div><p>You can when invoke the script on Windows as follows with the <code>py</code> command:</p><blockquote><p>Note: This will not work if you invoke the script via <code>python wordlookup.py</code> since the shebang will not be interpreted.</p></blockquote><h2 id="setting-up-your-uv-script-to-be-invoked-from-anywhere-on-your-computer">Setting up your uv script to be invoked from anywhere on your computer</h2><p>To make your uv (Python) script easily executable from anywhere on your system, you can move it to a common executable directory that’s included in your system’s PATH.</p><h3 id="linuxmacos-users-1">Linux/macOS users</h3><p>For Linux and macOS users, copy the <code>wordlookup.py</code> script to a directory in your systems <code>$PATH</code>. On my system, the <code>$HOME/bin</code> folder is in the path and I moved it there:</p><p>I also elected to rename the file and remove the .py file extension to make it more ergonomic to invoke since the shebang contains all of the needed information to identify the file as a Python script:</p><div><pre tabindex="0"><code data-lang="sh"><span><span>mv wordlookup.py wordlookup
</span></span></code></pre></div><p>I am now able to invoke it from anywhere. (You will also observe that uv will create a new virtual environment and resolve the package dependencies the first time the Python script is invoked form the new location.)</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ wordlookup --help
</span></span><span><span>Installed <span>7</span> packages in 21ms
</span></span><span><span>usage: wordlookup.py <span>[</span>-h<span>]</span> word
</span></span><span><span>
</span></span><span><span>Fetch definitions <span>for</span> a word.
</span></span><span><span>
</span></span><span><span>positional arguments:
</span></span><span><span>  word        The word to look up.
</span></span><span><span>
</span></span><span><span>options:
</span></span><span><span>  -h, --help  show this <span>help</span> message and <span>exit</span>
</span></span></code></pre></div><h3 id="windows-users-1">Windows users</h3><p>For Windows users, you can either move the script to one of the directories already included in your system’s <code>PATH</code> environment variable or add a new folder to the <code>PATH</code>. I will assume you have created a folder called <code>c:\scripts</code> and added it to your <code>PATH</code>.</p><p>Next, create a file called <code>wordlookup.cmd</code> and add the following contents:</p><div><pre tabindex="0"><code data-lang="bat"><span><span><span>@</span><span>echo</span> off
</span></span><span><span>py c:\scripts\wordlookup.py <span>%*</span>
</span></span></code></pre></div><p>You will then be able to invoke the script from Windows Terminal or Command Prompt anywhere on the system like this:</p><h2 id="bonus-where-does-uv-install-its-virtual-environments">Bonus: where does uv install its virtual environments?</h2><p>Being a curious software engineer, I decided to dive deeper to see if I could discover where uv was installing its virtual environments on my Fedora Linux system. After all, I had <code>wordlookup.py</code> sitting in its own dedicated directory. After running <code>uv add --script</code> to add the <code>httpx</code> package dependency metadata and invoking <code>uv run</code>, a virtual environment directory such as <code>.venv</code> was nowhere in sight in the local folder.</p><p>I first started by finding all directories named <code>httpx</code> on my system since a new folder by this name would likely get created on the first invocation of <code>uv run</code> after the script had been created.</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ find -type d -name httpx
</span></span><span><span>./.cache/uv/environments-v2/wordlookup-f6e73295bfd5f60b/lib/python3.13/site-packages/httpx
</span></span><span><span><span># &lt;other folders found but omitted for brevity&gt;</span>
</span></span></code></pre></div><p>Lo and behold, I found a folder called <code>httpx</code> in a parent folder called <code>./.cache/uv/environments-v2</code>. This looked promising.</p><p>I then discovered a command I could run (<a href="https://docs.astral.sh/uv/concepts/cache/#clearing-the-cache" target="_blank" rel="noreferrer noopener">uv cache clean</a>) to clear out all of the uv virtual environments. These would be harmless since the virtual environments could easily be recreated.</p><div><pre tabindex="0"><code data-lang="sh"><span><span>$ uv cache clean
</span></span><span><span>Clearing cache at: .cache/uv
</span></span><span><span>Removed <span>848</span> files <span>(</span>8.2MiB<span>)</span>
</span></span></code></pre></div><p>To watch everything in action on my Linux system (perhaps this was overkill 😃), I used <code>inotifywait</code> to monitor all of the file create events that would occur when I invoked <code>uv run wordlookup.py</code> since uv would need to recreate its virtual environment as I had cleared the cache.</p><div><pre tabindex="0"><code data-lang="sh"><span><span>inotifywait -m -r -e create ~/.cache/
</span></span><span><span>
</span></span><span><span><span># While this was running and waiting for event, I invoked `uv run wordlookup.py` from another terminal window</span>
</span></span></code></pre></div><p>The <code>inotifywait</code> command (part of the <code>inotify-tools</code> package) waits for filesystem events and outputs them. Here are the arguments I used:</p><ul><li>-m (monitor): This option tells <code>inotifywait</code> to continuously monitor the specified directory for events. Without this, <code>inotifywait</code> would only report the first event and then exit.</li><li>-r (recursive): This option tells <code>inotifywait</code> to recursively monitor the specified directory and all its subdirectories for events. Any new files or directories created within <code>.cache/</code> or any of its subdirectories will trigger an event.</li><li>-e create (event: create): This option specifies that <code>inotifywait</code> should only report create events. A create event occurs when a new file or directory is created within the monitored directory.</li><li>.cache/: This is the directory that <code>inotifywait</code> was asked to monitor.</li></ul><p>Sure enough, <code>inotifywait</code> revealed the folders being dynamically created when <code>uv run wordlookup.py</code> was launched.</p><p>When I copied the <code>wordlookup.py</code> script to my <code>$HOME/bin</code> folder and invoked it from there, I checked <code>./.cache/uv/environments-v2/</code> and yet another <code>wordlookup-*</code> was created there housing the virtual environment.</p><p>In reviewing my Windows VM, I similarly found <code>uv</code> virtual environments installed under <code>%LOCALAPPDATA%\uv\cache</code>.</p><p>Upon further investigation, I found some <a href="https://docs.astral.sh/uv/concepts/cache/#cache-directory" target="_blank" rel="noreferrer noopener">uv cache directory documentation</a> that described how uv determines the location of its cache directory. Here’s how it works:</p><blockquote><p>uv determines the cache directory according to, in order:</p><ul><li>A temporary cache directory, if <code>--no-cache</code> was requested.</li><li>The specific cache directory specified via <code>--cache-dir</code>, <code>UV_CACHE_DIR</code>, or <code>tool.uv.cache-dir</code>.</li><li>A system-appropriate cache directory, e.g., <code>$XDG_CACHE_HOME/uv</code> or <code>$HOME/.cache/uv</code> on Unix and <code>%LOCALAPPDATA%\uv\cache</code> on Windows</li></ul></blockquote><p>Typically, on Unix-like systems like my Fedora setup, uv stores its cache in $HOME/.cache/uv. However, you have the option to change this location by setting the $XDG_CACHE_HOME environment variable. For those unfamiliar with XDG, the XDG Base Directory Specification is a set of guidelines that applications follow to organize their files. It defines a few key environment variables that point to specific directories, ensuring that different types of application data are stored in their designated places. See <a href="https://wiki.archlinux.org/title/XDG_Base_Directory" target="_blank" rel="noreferrer noopener">here</a> for more information.</p><p>To summarize, uv stores virtual environments for single-file Python scripts within its cache, typically at these OS-specific locations if you don’t do anything special to change the default:</p><table><thead><tr><th>OS</th><th>Virtual Environment Location</th></tr></thead><tbody><tr><td>Linux</td><td><code>~/.cache/uv/environments-v2/</code></td></tr><tr><td>macOS</td><td><code>~/.cache/uv/environments-v2/</code></td></tr><tr><td>Windows</td><td><code>%LOCALAPPDATA%\uv\cache\environments-v2</code></td></tr></tbody></table><h3 id="how-does-uv-derive-its-virtual-environment-folder-name">How does uv derive its virtual environment folder name?</h3><p>Take a look at the following uv virtual environment folder on my Linux system. How is the folder name of <code>wordlookup-f6e73295bfd5f60b</code> generated?</p><div><pre tabindex="0"><code data-lang="text"><span><span>./.cache/uv/environments-v2/wordlookup-f6e73295bfd5f60b
</span></span></code></pre></div><p>My preliminary investigation of uv’s Rust code and other resources suggests that the virtual environment folder names are generated from a hash of the Python version and the external package dependency versions (such as <code>httpx</code> in my context). This design ensures that any modification to these elements, including the script’s name (which is embedded in the folder name itself), results in the creation of a unique virtual environment in the cache. I validated this empirically by observing that uv created a new virtual environment if I specified a different version of <code>httpx</code> in the metadata or if I changed the name of the script file.</p><h2 id="conclusion">Conclusion</h2><p>In conclusion, uv with its implementation of PEP 723 is an awesome tool that simplifies the way we handle single-file Python scripts with external dependencies. By embedding metadata directly within the script, uv eliminates the need for separate <code>requirements.txt</code> files and complex package managers. uv streamlines the process of installing dependencies and managing virtual environments, making it significantly easier to run these scripts. The added convenience of shebangs and system-wide executables further enhances usability. Ultimately, this combination makes Python scripting more accessible, particularly for single-file scripts, and promises a more streamlined workflow for both developers and users.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Things I would have told myself before building an autorouter (341 pts)]]></title>
            <link>https://blog.autorouting.com/p/13-things-i-would-have-told-myself</link>
            <guid>43499992</guid>
            <pubDate>Fri, 28 Mar 2025 00:38:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.autorouting.com/p/13-things-i-would-have-told-myself">https://blog.autorouting.com/p/13-things-i-would-have-told-myself</a>, See on <a href="https://news.ycombinator.com/item?id=43499992">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>I’ve spent about a year working on an autorouter for </span><a href="https://tscircuit.com/" rel="">tscircuit</a><span> (an open-source electronics CAD kernel written in Typescript). If I could go back a year, these are the 13 things I would tell myself:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png" width="1456" height="752" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:752,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" title="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc47a4ad2-a5e8-45fe-a96b-3a6ea491aa0f_2586x1336.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>An intermediate stage of our autorouting routing a keyboard.</figcaption></figure></div><p>If I was king for a day, I would rename A* to “Fundamental Algorithm”. It is truly one of the most adaptable and important algorithms for _any kind_ of search. It is simply the best foundation for any kind of informed search (not just for 2d grids!)</p><p>Here’s an animated version of A* versus “breadth first search” on a 2d grid:</p><p><span>The way A* explores nodes is a lot faster and more intuitive. The major difference between these two algorithms is BFS explores all adjacent nodes, while A* prioritizes exploring nodes that are closer to the destination. Because it considers a metric outside the graph (the distance to the destination) it’s an </span><em>informed search</em><span>.</span></p><p><strong>You are already either using BFS or DFS (depth-first search) in your code.</strong><span> A recursive algorithm is a depth first search. Any loop that explores candidates/neighbors without sorting the candidates is a BFS. </span><strong>99% of the time you can convert it to A* and get dramatic performance gains!</strong></p><p>One of my favorite techniques in our autorouter is we run multiple levels of A* to discover the optimal hyperparameters for a particular problem. So we’re basically running each autorouter as a candidate, then using A* to determine which autorouters we should spend the most time on!</p><p>See all those numbers at the top? Those are each different configurations of hyper parameters. Running each autorouter fairly would be a huge waste of time- if one autorouter starts to win (it is successfully routing with good costs) allocate more iterations to it! This kind of meta-A* combines a regular cost function that penalizes distance with a cost function that penalizes iterations.</p><p>I’m controversially writing our autorouter in Javascript. This is the first thing people call out, but it’s not as unreasonable as you might expect. Consider that when optimizing an algorithm, you’re basically looking at improving two things:</p><ol><li><p>Lowering the number of iterations required (make the algorithm smart)</p></li><li><p>Increasing the speed of each iteration</p></li></ol><p><span>People focus </span><em>way too much</em><span> on improving the speed of each iteration. If you are doing something dumb (like converting everything to a grid for overlap testing), Javascript performance will beat you no matter what language you use!</span></p><p><span>Dumb algorithms in optimal assembly </span><em><span>are slower than smart algorithms in Javascript! </span><strong>Algorithm &gt; Language!</strong></em></p><p>95% of your focus should be on reducing the number of iterations. This is why language doesn’t matter. Whatever gets you to the smartest, most cacheable algorithm fastest is the best language.</p><p><span>You can’t walk 5 feet into multi-dimensional space optimization without someone mentioning a QuadTree, this incredible data structure that makes </span><code>O(N)</code><span> search </span><code>O(log(N))</code><span> when searching for nearby objects in 2d/3d space.</span></p><p><strong>The QuadTree and every general-purpose tree data structure are insanely slow.</strong><span> </span><strong>Trees are not an informed representation of your data.</strong></p><p><span>Any time you’re using a tree you’re ignoring an  </span><code>O(~1)</code><span> hash algorithm for a more complicated </span><code>O(log(N))</code><span> algorithm</span></p><p><span>Why does Javascript use HashSets and HashMaps by default and every chance it gets? </span><strong>They’re super super fast. </strong><span>A Spatial Hash Index is the same concept as a HashMap, but instead of hashing the object we hash it’s location and store it in a Cell (or “bucket of things that are close together”)</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png" width="1456" height="971" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1994340,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0140680c-0a0d-4ca8-9691-ecdbe4d72059_1536x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Let’s look at how we might replace the QuadTree with a SpatialHashIndex with 20% as much code:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png" width="465" height="643.9985795454545" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/fce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1950,&quot;width&quot;:1408,&quot;resizeWidth&quot;:465,&quot;bytes&quot;:393368,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffce23d89-c75d-4697-b17f-6316ea274097_1408x1950.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>There are many variants of this basic data structure for different types of objects, but they all look pretty similar. We’re basically just creating “buckets” with spatial hashes and filling them with any object that is contained within the cell represented by the spatial hash.</p><p>The reason spatial hashes aren’t as popular is you need to be careful about selecting your cell size- this is what makes it an informed algorithm. If your cell size isn’t calibrated well, you’ll end up paying high fixed costs per retrieval. In practice, it’s not that difficult to pick a reasonable cell size.</p><p><span>A circuit board like the one inside an IPhone probably has somewhere between 10,000 and 20,000 traces and take a team several months to route with the best EDA tools in world. It can seem daunting to try to optimize such an incredibly complex task- but the truth is the entire industry is neglecting a very simple idea: </span><strong>everything that has been routed has been routed before.</strong></p><p>Game developers “pre-bake” navigation meshes into many gigabytes for their games. LLMs compress the entire internet into weights for search. The next generation of autorouters will spatially partition their problems, then call upon a massive cache for pre-solved solutions. The speed of the algorithm doesn’t matter when you have a massive cache with 99% of the autorouting problem pre-solved.</p><p>Most algorithms today do not focus on the effective cache-reusability or effective spatial partitioning, but a critical component of future autorouters will be caching inputs and outputs from each stage in a spatially partitioned way.</p><p>Moreover, the size of storage and caching seems to go down faster than the speed of computation goes up. It’s not a big deal to have a gigabyte cache to make your autorouter 50% faster.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png" width="404" height="404" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1024,&quot;width&quot;:1024,&quot;resizeWidth&quot;:404,&quot;bytes&quot;:1579631,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F63c4bed3-2866-4ae0-8f11-7eaaf0307251_1024x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>At the end of the day, the cache will win. Cacheable algorithms matter more than fast algorithms!</figcaption></figure></div><p><span>If there is one thing I could have printed on a poster, it would be </span><strong>VISUALIZE THE PROBLEM. </strong><span>You can’t debug problems by staring at numbers.</span></p><p><span>For every tiny problem we solve, we have a visualization. We will often </span><em>start</em><span> with the visualization. Time and time again this enables us to debug and solve problems 10x faster than we could otherwise. Here’s a visualization we made of a subalgorithm for finding 45 degree paths, we use this in our “Path Simplification Phase”, an ~final phase of the autorouter.</span></p><p><span>Javascript profiling tools are incredibe, you can easily see the </span><em>exact total time in ms spend on each line of code</em><span>. You don’t need to use any performance framework, just execute your javascript in the browser and pull up the performance tab. There are also awesome features like flame charts and stuff for memory usage.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png" width="1456" height="1016" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1016,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:493490,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3772274e-c1dc-46af-8fd3-c80fe6603418_2040x1424.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>You can easily see the time spent on each line of code inside Chrome’s performance tools!</figcaption></figure></div><p><span>Here’s a little </span><a href="https://youtube.com/shorts/xuBoiuK-VlU?si=b9lT9gPzXhbfQ9qc" rel="">youtube short</a><span> I made about it</span></p><p>Recursive functions are bad for multiple reasons:</p><ul><li><p>They are almost always synchronous (can’t be broken out for animation)</p></li><li><p>They are inherently a Depth-First Search, and can’t be easily morphed to A*</p></li><li><p>You can’t easily track iterations</p></li><li><p>Mutability is often unnatural in recursive functions but critical to performance</p></li></ul><p>Here’s an example of an “obviously recursive” function converted to a non-recursive function:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png" width="1456" height="715" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:715,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:3554373,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe4e5f886-732f-44a8-b9c2-a70ac502562e_6020x2957.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>The iteration-based implementation is much faster because it keeps a set of </span><code>visitedNodes</code><span> and checks nodes prior to exploration. You can do this with recursive functions, but you have to pass around a mutable object and do other unnatural things. It’s just best to avoid recursive functions when writing performant code.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png" width="439" height="439" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:1024,&quot;width&quot;:1024,&quot;resizeWidth&quot;:439,&quot;bytes&quot;:1095069,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe6bd16ab-304d-4630-8c3d-a46057cbb8c9_1024x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Monte Carlo algorithms use randomness to iterate towards a solution. They are bad because:</p><ul><li><p>They lead to non-deterministic, hard-to-debug algorithms</p></li><li><p>They are basically never optimal relative to a heuristic</p></li></ul><p>I sometimes use Monte Carlo-style algorithms when I don’t yet know how the algorithm should get to the solution, but I know how to score a candidate. They can help give some basic intuition about how to solve a problem. Once you have something approximating a cost function, do something smarter than Monte Carlo or any other random technique like Simulated Annealing. If your algorithm is sensitive to local minimums, consider using hyper parameters or more complex cost functions. Almost any local minimum your human eye can see can be made into a component of a cost function.</p><p>Another way to think about it: How many PCB Designers randomly draw lines on their circuit board? None. Nobody does that. It’s just not a good technique for this domain. You’ll always be able to find a better heuristic.</p><p>Our autorouter is currently a pipeline with 13 stages and something like 20 sub-algorithms that we measure the iteration count of for various things like determining spatial partitions or simplifying paths at the boundaries independently autorouted sections.</p><p>Being able to overlay different inputs/output visualizations of each stage of the algorithm helps you understand the context surrounding the problem you’re solving. I often ran into issues at downstream stages (often our “high density routing” stage) that could be solved by improving the output of previous stages.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png" width="1456" height="480" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/ce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:480,&quot;width&quot;:1456,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:1187396,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://blog.autorouting.com/i/160020973?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fce34df4d-9862-4dd1-8c31-97817a43cf01_1602x528.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The temptation when building sub-algorithms is to isolate the algorithm to its simplest form, maybe even normalizing around (0, 0). The danger with normalization or any complex transformation is it might impact the ability to quickly see consequences from early stages of the algorithm to later stages of the algorithm. To prevent this, just keep your coordinate space consistent throughout the lifecycle of the algorithm.</p><p>Here’s each stage of our algorithm one after another. We often zoom in on this to see what stage is the most guilty culprit for a failed Design Rule Check.</p><p>Remember how it’s super important to lower your iteration count?</p><p>Animating the iterations of your algorithm will show you how “dumb” it’s being by giving you an intuition for how many iterations are wasted exploring paths that don’t matter. This is particularly helpful when adjusting the greedy multiplier (discussed in 12)</p><p>This video is an animation of a simple trace failing to solve, but instead of failing outright attempting to solve endlessly outward. Without the animation, it would have been hard to tell what was going on!</p><p>Consider two ways to determine if a trace A overlaps another trace B:</p><ol><li><p><span>Consider each segment of A and B, and check for intersections</span><span><a data-component-name="FootnoteAnchorToDOM" id="footnote-anchor-1-160020973" href="https://blog.autorouting.com/p/13-things-i-would-have-told-myself#footnote-1-160020973" target="_self" rel="">1</a></span></p></li><li><p>Create a binary grid that marks each square where trace B is present, then check all the squares where trace A is present to see if B is there</p></li></ol><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png" width="712" height="474.8296703296703" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:971,&quot;width&quot;:1456,&quot;resizeWidth&quot;:712,&quot;bytes&quot;:null,&quot;alt&quot;:&quot;Generated image&quot;,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="Generated image" title="Generated image" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2c9da8e1-4e35-4cf8-9b56-f6f1d7f7ed3f_1536x1024.png 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>Believe it or not, most people would choose to use Option 2 with a binary grid check, even though this can easily be 1000x slower. People do this because math is hard 🤦</p><p><span>Luckily LLMs make this kind of intersection math trivial. Use fast vector math!! </span><strong>Checking a SINGLE grid square (memory access!) can literally be slower than doing a dot product to determine if two segments intersect!</strong></p><p>When doing spatial partitioning of the problem, you can measure the probability of solve failure of each stage with some leading indicators. For example, in the Unravel Autorouter we track the probability of failure for each “Capacity Node” at each major pipeline stage. Each stage focuses on reconfiguring adjacent nodes or rerouting to reduce the probability of failure.</p><p>The great thing about probability of failure as a metric is you can literally measure it and improve your prediction as your algorithm changes. Each stage can then do it’s best to minimize the chance of future stages failing.</p><p>I think generally prioritizing solvability is better than trying to incorporate too many constraints. Once a board is solved, it’s often easier to “work with that solution” than to generate optimal solution from scratch.</p><p>Ok it’s not exactly a secret, maybe a “well-known secret”, but if you don’t know about it, you’re not using A* properly.</p><p><span>By default, A* is guaranteed to give you the optimal solution, but what if you care more about speed than about optimality? Make one tiny change to your </span><code>f(n)</code><span>and you have Weighted A*, a variant of A* that solves more greedily, and generally much, much faster!</span></p><p><span>Normal A*:</span><code><span> f(n) = g(n) + h(n)</span><br></code><span>Weighted A*:</span><code> f(n) = g(n) + w * h(n)</code></p><p><span>You can read more about </span><a href="https://movingai.com/astar-var.html" rel="">weighted A* and other A* variants here</a><span>.</span></p><p>Game developers have a lot of the same problems as autorouting developers, so it’s not a bad idea to look for game development papers if you’re searching for related work!</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg" width="461" height="330.70301291248205" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:500,&quot;width&quot;:697,&quot;resizeWidth&quot;:461,&quot;bytes&quot;:null,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:null,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:null,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7c88ad14-faf3-4d0b-afea-6875d3c558aa_697x500.jpeg 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p><span>If this was interesting to you, I’d love to show you our autorouter as it gets closer to release. I believe that solving autorouting will be a massive unlock for physical-world innovation and is a key piece to enable the “vibe-building” of electronics. All of our work is MIT-licensed open-source. You can also </span><a href="https://x.com/seveibar" rel="">follow me on twitter.</a></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Arctic sea ice sets a record low maximum in 2025 (128 pts)]]></title>
            <link>https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025</link>
            <guid>43499966</guid>
            <pubDate>Fri, 28 Mar 2025 00:34:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025">https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025</a>, See on <a href="https://news.ycombinator.com/item?id=43499966">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-wrapper" data-off-canvas-main-canvas=""> <main id="content" role="main"> <section id="https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025_section"> <a id="main-content" tabindex="-1"></a><div id="block-nsidc-content"> <article data-history-node-id="406583" about="https://nsidc.org/sea-ice-today/analyses/arctic-sea-ice-sets-record-low-maximum-2025" typeof="schema:Article"><div><div><p>WEDNESDAY, MARCH 26, 2025</p></div><div property="schema:text"><p>Arctic sea ice extent appears to have reached its annual maximum on March 22, 2025. This is the lowest maximum in the 47-year satellite record, with previous low maximums occurring in 2017, 2018, 2016, and 2015.</p><p><em>Please note that this is a preliminary announcement. Changing weather or late-season growth could still increase the Arctic sea ice extent. NSIDC scientists will release a full analysis of the 2024 to 2025 Arctic winter sea ice conditions in early April.</em></p><h2>Overview of conditions</h2><p>On March 22, Arctic sea ice likely reached its maximum extent for the year, at 14.33 million square kilometers (5.53 million square miles), the lowest in the 47-year satellite record. This year’s maximum extent is 1.31 million square kilometers (506,000 square miles) below the 1981 to 2010 average maximum of 15.64 million square kilometers (6.04 million square miles) and 80,000 square kilometers (31,000 square miles) below the previous lowest maximum that occurred on March 7, 2017.</p><p>This year’s maximum occurred&nbsp;10&nbsp;days later than the 1981 to 2010 average date of March 12. The date of the maximum has varied considerably over the years, occurring as early as February 24 in 1987 and 1996 and as late as April 2 in 2010.</p><figure data-quickedit-entity-id="media/13084"><p><a href="https://nsidc.org/sites/default/files/images/Data/n_20250322_extn_hires_v3.0.png" aria-label="{&quot;alt&quot;:&quot;Arctic sea ice extent on March 22, 2025&quot;}" role="button" title="Arctic sea ice sets a record low maximum in 2025" data-colorbox-gallery="gallery-image-13084-xrBSWLGgpmQ" aria-controls="colorbox-14KYJMmThd4" data-cbox-img-attrs="{&quot;alt&quot;:&quot;Arctic sea ice extent on March 22, 2025&quot;}"><img id="colorbox-14KYJMmThd4" src="https://nsidc.org/sites/default/files/styles/article_image/public/images/Data/n_20250322_extn_hires_v3.0.png.webp?itok=81j6ehzu" width="672" height="800" alt="Arctic sea ice extent on March 22, 2025" loading="lazy" typeof="foaf:Image" title="Arctic sea ice extent on March 22, 2025"></a></p> <figcaption> <span>Figure 1. Arctic sea ice extent for March 22, 2025, was 14.33 million square kilometers (5.53 million square miles). The orange line shows the 1981 to 2010 average extent for that day. <a href="https://nsidc.org/data/seaice_index">Sea Ice Index</a> data. <a href="https://nsidc.org/sea-ice-today/about-data">About the data</a></span> <span> <span>— Credit:</span> <span>National Snow and Ice Data Center </span> </span> </figcaption> </figure><h2>Conditions in context</h2><p>Low sea ice extent persisted around most of the Arctic during the 2024 to 2025 winter season. Notably, the Gulf of St. Lawrence remained virtually ice free and the Sea Okhotsk had substantially lower sea ice extent than average. Only the East Greenland Sea had near-average extent through the winter. The Bering Sea ice extent was low for much of the season, but growth from late February through late March brought the region closer to average conditions and was the primary contributor to the increase of total Arctic sea ice during March. Temperatures were 1 to 2 degrees Celsius (2 to 4 degrees Fahrenheit) above average in the Arctic and the surrounding seas, which likely slowed the rate of ice growth. &nbsp;</p><figure data-quickedit-entity-id="media/13085"><p><a href="https://nsidc.org/sites/default/files/images/Data/2025-03-22_asina_n_iqr_timeseries.png" aria-label="{&quot;alt&quot;:&quot;Arctic sea ice extent and four other years as of March 22, 2025&quot;}" role="button" title="Arctic sea ice sets a record low maximum in 2025" data-colorbox-gallery="gallery-image-13085-xrBSWLGgpmQ" aria-controls="colorbox-Op4YNAHnZ8s" data-cbox-img-attrs="{&quot;alt&quot;:&quot;Arctic sea ice extent and four other years as of March 22, 2025&quot;}"><img id="colorbox-Op4YNAHnZ8s" src="https://nsidc.org/sites/default/files/styles/article_image/public/images/Data/2025-03-22_asina_n_iqr_timeseries.png.webp?itok=X8GFxj66" width="1000" height="800" alt="Arctic sea ice extent and four other years as of March 22, 2025" loading="lazy" typeof="foaf:Image" title="Arctic sea ice extent and four other years as of March 22, 2025"></a></p> <figcaption> <span>Figure 2. The graph above shows Arctic sea ice extent as of March 22, 2025, along with daily ice extent data for four previous years and the record low year. 2024 to 2025 is shown in blue, 2023 to 2024 in green, 2022 to 2023 in orange, 2021 to 2022 in brown, 2020 to 2021 in magenta, and 2011 to 2012 in dashed brown. The 1981 to 2010 median is in dark gray. The gray areas around the median line show the interquartile and interdecile ranges of the data. <a href="https://nsidc.org/data/seaice_index">Sea Ice Index</a> data.</span> <span> <span>— Credit:</span> <span>National Snow and Ice Data Center </span> </span> </figcaption> </figure><h2>Top 10 lowest Arctic sea ice maximum extents</h2><table><caption><strong>Table 1.&nbsp;</strong>Top 10 lowest maximum Arctic sea ice extents (satellite record, 1979 to present)</caption><thead><tr><th rowspan="2">RANK</th><th rowspan="2">YEAR</th><th colspan="2">MAXIMUM SEA ICE EXTENT</th><th rowspan="2">DATE</th></tr><tr><th>IN MILLIONS OF SQUARE KILOMETERS</th><th>IN MILLIONS OF SQUARE MILES</th></tr></thead><tbody><tr><td>1</td><td>2025</td><td>14.33</td><td>5.53</td><td>March 22</td></tr><tr><td>2</td><td>2017</td><td>14.41</td><td>5.56</td><td>March 7</td></tr><tr><td>3</td><td>2018</td><td>14.47</td><td>5.59</td><td>March 17</td></tr><tr><td>4</td><td>2016<br>2015</td><td>14.51<br>14.52</td><td>5.60<br>5.61</td><td>March 23<br>Feb. 25</td></tr><tr><td>6</td><td>2023</td><td>14.62</td><td>5.64</td><td>March 6</td></tr><tr><td>7</td><td>2011<br>2006</td><td>14.67<br>14.68</td><td>5.66<br>5.67</td><td>March 9<br>March 12</td></tr><tr><td>9</td><td>2007<br>2021</td><td>14.77<br>14.78</td><td>5.70<br>5.71</td><td>March 12<br>March 12</td></tr></tbody></table><p><em>Values within 40,000 square kilometers (15,000 square miles) are considered tied.&nbsp;</em></p></div></div> </article></div> </section> </main></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[LibreOffice downloads on the rise as users look to avoid subscription costs (278 pts)]]></title>
            <link>https://www.computerworld.com/article/3840480/libreoffice-downloads-on-the-rise-as-users-look-to-avoid-subscription-costs.html</link>
            <guid>43499860</guid>
            <pubDate>Fri, 28 Mar 2025 00:20:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.computerworld.com/article/3840480/libreoffice-downloads-on-the-rise-as-users-look-to-avoid-subscription-costs.html">https://www.computerworld.com/article/3840480/libreoffice-downloads-on-the-rise-as-users-look-to-avoid-subscription-costs.html</a>, See on <a href="https://news.ycombinator.com/item?id=43499860">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-3840480">
	<div>
			<div>
						<div>
			<h2>
				The free open-source Microsoft Office alternative is being downloaded by nearly 1 million users a week.			</h2>
			
		</div>					
						
<div id="remove_no_follow">
<div>




<p>Interest in&nbsp;<a href="https://www.libreoffice.org/discover/libreoffice/" target="_blank" rel="noreferrer noopener">LibreOffice</a>, the open-source alternative to Microsoft Office, is on the rise, with weekly downloads of its software package close to 1 million a week. That’s the&nbsp;<a href="https://stats.documentfoundation.org/downloads#week,version" target="_blank" rel="noreferrer noopener">highest download number since 2023</a>.</p>



<p>LibreOffice, which runs on Windows, Linux, and macOS, is a standalone desktop office productivity software that is free to use. Downloads have picked up since The Document Foundation, which manages its development,&nbsp;<a href="https://blog.documentfoundation.org/blog/2025/02/27/announcement-of-libreoffice-25-2-1/" target="_blank" rel="noreferrer noopener">released version 25.2 last week</a>.&nbsp;</p>



<p>It has emerged as the most popular open-source suite, with alternative versions such as Apache’s OpenOffice losing steam. The last version of OpenOffice was released in 2023.</p>
</div>
							
							<div>


<p>“We estimate around 200 million [LibreOffice] users, but it’s important to note that we respect users’ privacy and don’t track them, so we can’t say for sure,” said Mike Saunders, an open-source advocate and a deputy to the board of directors at The Document Foundation.</p>

		

			


<p>There is still noteworthy interest in LibreOffice as a standalone desktop alternative to paid office productivity suites, said Jason Wong, distinguished vice president and analyst at Gartner. “Usually these are clients seeking to keep their on-premises implementation, given that both Microsoft and Google have focused on their cloud offerings,” Wong said.&nbsp;</p>



<p>Cost is a factor for evaluating software suites like LibreOffice, Wong said. “The downside is the additional specialized resources and new skills needed to maintain the [software],” he&nbsp;&nbsp;said.</p>
</div>
							
							<div>


<p>Downloads of LibreOffice have been steadily climbing with each new version, Saunders said.&nbsp;</p>



<p>Though LibreOffice has traditionally been a favorite of home users, there’s growing interest in businesses and government, Saunders said.&nbsp;The northern German state of Schleswig-Holstein last year said it would move 30,000 PCs from&nbsp;<a href="https://www.computerworld.com/article/3555023/heres-whats-new-in-office-2024.html">Microsoft Office</a>&nbsp;to LibreOffice.</p>



<p>“The majority of our users — 85% — are on Windows, followed by macOS and then Linux,” Saunders said.&nbsp;</p>
</div>
							
							<div>


<p>Many desktop Linux distributions pre-install LibreOffice, but it’s unclear how many users that represents.</p>



<p>LibreOffice users typically want a straightforward interface, Saunders said. “They don’t want subscriptions, and they don’t want AI being ‘helpful’ by poking its nose into their work — it reminds them of Clippy from the bad old days,” he said.&nbsp;</p>



<p>There are genuine use cases for generative AI tools, but many users prefer to opt-in to it and choose when and where to enable it. “We have zero plans to put AI into LibreOffice. But we understand the value of some AI tools and are encouraging developers to create … extensions that use AI in a responsible way,” Saunders said.&nbsp;</p>
</div>
							
							<div>
									<p>Although there are cloud-based versions of OpenOffice, The Document Foundation has focused on the desktop version, Saunders said.</p></div>
</div>					</div>

			<!--right side bar-->
			<div id="rightrail-wrapper">
					<p>SUBSCRIBE TO OUR NEWSLETTER			</p>
							<h3>
				From our editors straight to your inbox			</h3>
						<p>
			Get started by entering your email address below.		</p>
				
	</div>
			<!--right side bar ends here-->

		</div>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A note on the USB-to-PS/2 mouse adapter that came with Microsoft mouse devices (344 pts)]]></title>
            <link>https://devblogs.microsoft.com/oldnewthing/20250325-00/?p=110993</link>
            <guid>43499823</guid>
            <pubDate>Fri, 28 Mar 2025 00:16:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://devblogs.microsoft.com/oldnewthing/20250325-00/?p=110993">https://devblogs.microsoft.com/oldnewthing/20250325-00/?p=110993</a>, See on <a href="https://news.ycombinator.com/item?id=43499823">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="single-wrapper">
    
    <article data-clarity-region="article" id="post-110993">
        <div data-bi-area="body_article" data-bi-id="post_page_body_article">
            <p>Back in the early days of USB, Microsoft mouse devices often came with a USB plug at the end of the cable, but also came with a small green adapter to convert the USB type-A plug into a PS/2 plug. How did this adapter work?</p>
<p>USB and PS/2 are completely different protocols that are not compatible in any way. The adapter was purely mechanical (passive). It connected one set of pins to another, but it contained no circuitry. All of the smarts was in the mouse.</p>
<p>The mouse detected whether it received USB-like signals or PS/2-like signals on the pins and changed its behavior accordingly. The mouse did all the work.</p>
<p>It’s similar to the inexpensive electrical outlet adapters which convert between different national plug types. There are no smarts in the adapter. It just connects one set of plugs to another. The actual intelligence is in the appliance itself (or the power brick for the appliance).</p>
<p>So if you find one of these adapters in your junk drawer, be aware that it is not a universal mouse adapter. It is just a physical adapter; the actual conversion happens in the dual-bus mouse on the other end.</p>
<p><b>Bonus chatter</b>: An Internet search shows that people still make these types of mouse adapters. I don’t know whether the ones you can buy today are smart adapters that translate between the PS/2 and USB signaling protocols, or whether they are purely mechanical adapters that rely on the mouse to do the work.</p>
        </div><!-- .entry-content -->

        <!-- AI Disclaimer -->
            </article>
    
</div><div><!-- Author section -->
            <h2>Author</h2>
            <div><div><p><img src="https://devblogs.microsoft.com/oldnewthing/wp-content/uploads/sites/38/2019/02/RaymondChen_5in-150x150.jpg" alt="Raymond Chen"></p></div><p>Raymond has been involved in the evolution of Windows for more than 30 years. In 2003, he began a Web site known as The Old New Thing which has grown in popularity far beyond his wildest imagination, a development which still gives him the heebie-jeebies. The Web site spawned a book, coincidentally also titled The Old New Thing (Addison Wesley 2007). He occasionally appears on the Windows Dev Docs Twitter account to tell stories which convey no useful information.</p></div>        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Giant, fungus-like organism may be a completely unknown branch of life (252 pts)]]></title>
            <link>https://www.livescience.com/animals/giant-fungus-like-organism-may-be-a-completely-unknown-branch-of-life</link>
            <guid>43499342</guid>
            <pubDate>Thu, 27 Mar 2025 23:15:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.livescience.com/animals/giant-fungus-like-organism-may-be-a-completely-unknown-branch-of-life">https://www.livescience.com/animals/giant-fungus-like-organism-may-be-a-completely-unknown-branch-of-life</a>, See on <a href="https://news.ycombinator.com/item?id=43499342">Hacker News</a></p>
<div id="readability-page-1" class="page"><section data-widget-type="contentparsed" id="content">
<div>
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1600-80.jpg.webp 1920w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-320-80.jpg.webp 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1200-80.jpg" alt="A rendering of Prototaxites as it may have looked during the early Devonian Period, approximately 400 million years" srcset="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1600-80.jpg 1920w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o-320-80.jpg 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/zb5qX2JQYMyU5eLuqasZ6o.jpg" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<figcaption>
<span>A painting of what Prototaxites may have looked like, 400 million years ago.</span>
<span>(Image credit: Painting by Mary Parrish, National Museum of Natural History.)</span>
</figcaption>
</div>

<div id="article-body">
<p>A bizarre ancient life-form, considered to be the <a data-analytics-id="inline-link" href="https://www.biorxiv.org/content/10.1101/2025.03.14.643340v1.full.pdf" target="_blank" data-url="https://www.biorxiv.org/content/10.1101/2025.03.14.643340v1.full.pdf" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>first giant organism</u></a> to live on land, may belong to a totally unknown branch of the tree of life, scientists say.</p><p>These organisms, named <em>Prototaxites</em>, lived around 420 million to 375 million years ago during the Devonian period and resembled branchless, cylindrical tree trunks. These organisms would have been massive, with some species growing <a data-analytics-id="inline-link" href="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/35/5/399/129855/Devonian-landscape-heterogeneity-recorded-by-a?redirectedFrom=fulltext" target="_blank" data-url="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/35/5/399/129855/Devonian-landscape-heterogeneity-recorded-by-a?redirectedFrom=fulltext" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>up to 26 feet (8 meters) tall </u></a>and 3 feet (1 meter) wide.</p><p>Since the first <em>Prototaxites</em> fossil was discovered in 1843, scientists haven't been sure whether they were a plant, fungus or even a <a data-analytics-id="inline-link" href="https://phys.org/news/2007-04-prehistoric-mystery-giant-fungus.html" target="_blank" data-url="https://phys.org/news/2007-04-prehistoric-mystery-giant-fungus.html" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>type of algae</u></a>. However, <a data-analytics-id="inline-link" href="https://www.livescience.com/1461-prehistoric-mystery-organism-humongous-fungus.html" data-before-rewrite-localise="https://www.livescience.com/1461-prehistoric-mystery-organism-humongous-fungus.html"><u>chemical analyses of </u><u><em>Prototaxites</em></u><u> fossils</u></a> in 2007 suggested they were likely a <a data-analytics-id="inline-link" href="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/35/5/399/129855/Devonian-landscape-heterogeneity-recorded-by-a?redirectedFrom=fulltext" target="_blank" data-url="https://pubs.geoscienceworld.org/gsa/geology/article-abstract/35/5/399/129855/Devonian-landscape-heterogeneity-recorded-by-a?redirectedFrom=fulltext" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>giant ancient fungus</u></a>.</p><p>Now, <a data-analytics-id="inline-link" href="https://www.biorxiv.org/content/10.1101/2025.03.14.643340v1" target="_blank" data-url="https://www.biorxiv.org/content/10.1101/2025.03.14.643340v1" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>according to a paper</u></a> published March 17 on the preprint server bioRxiv, <em>Prototaxites</em> might not have been a humongous fungus after all — rather, it may have been an entirely different and previously unknown life-form. The study has not yet been peer-reviewed.</p><p>All life on Earth is classified within three domains — bacteria, archaea and eukarya — with eukarya containing all multicellular organisms within the four kingdoms of fungi, animals, plants <a data-analytics-id="inline-link" href="https://www.livescience.com/54242-protists.html" data-before-rewrite-localise="https://www.livescience.com/54242-protists.html"><u>and protists</u></a>. Bacteria and archaea contain only single-celled organisms.</p><p>Previous chemical analysis of <em>Prototaxites</em> fossils indicated that they likely fed off decaying organisms, just like many fungi do today, rather than making their food from carbon dioxide in the air like plants.</p><p>However, according to this new research, <em>Prototaxites</em> may actually have been part of a totally different kingdom of life, separate from fungi, plants, animals and protists.</p><div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-TT23hGQ7XJtsjBD4MeoeD7"><section><p>Get the world’s most fascinating discoveries delivered straight to your inbox.</p></section></div><p>The researchers studied the fossilized remains of one <em>Prototaxites</em> species named <em>Prototaxites taiti</em>, found preserved in the Rhynie chert, a sedimentary deposit of exceptionally well-preserved fossils of early land plants and animals in Scotland. This species was much smaller than many other species of <em>Prototaxites</em>, only growing up to a few inches tall, but it is still the largest <em>Prototaxites</em> specimen found in this region.</p><p>Upon examining the internal structure of the fossilized <em>Prototaxites</em>, the researchers found that its interior was made up of a series of tubes, similar to those within a fungus. But these tubes branched off and reconnected in ways very unlike those seen in modern fungi.</p><p>"We report that <em>Prototaxites taiti</em> was the largest organism in the Rhynie ecosystem and its anatomy was fundamentally distinct from all known extant or extinct fungi," the researchers wrote in the paper. "We therefore conclude that <em>Prototaxites</em> was not a fungus, and instead propose it is best assigned to a now entirely extinct terrestrial lineage."</p><p>True fungi from the same period have also been preserved in the Rhynie chert, enabling the researchers to chemically compare them to <em>Prototaxites</em>. In addition to their unique structural characteristics, the team found that the <em>Prototaxites</em> fossils left completely different chemical signatures to the fungi fossils, indicating that the <em>Prototaxites</em> did not contain chitin, a major building block of fungal cell walls and a hallmark of the fungal kingdom. The <em>Prototaxites</em> fossils instead appeared to contain chemicals similar to lignin, which is found in the wood and bark of plants.</p><p>"We conclude that the morphology and molecular fingerprint of <em>P. taiti</em> is clearly distinct from that of the fungi and other organism preserved alongside it in the Rhynie chert, and we suggest that it is best considered a member of a previously undescribed, entirely extinct group of eukaryotes," the researchers wrote.</p><p><a data-analytics-id="inline-link" href="https://profiles.stanford.edu/charles-boyce" target="_blank" data-url="https://profiles.stanford.edu/charles-boyce" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>Kevin Boyce</u></a>, a professor at Stanford University, led the 2007 study that posited <em>Prototaxites</em> is a giant fungus and was not involved in this new research. However, he <a data-analytics-id="inline-link" href="https://mail.google.com/mail/u/1/#inbox/FMfcgzQZTpzCtMvvcJkXtStFlTLPfFDr?compose=CllgCJvkXVHJsgLpfZdhzNWHHPWtRqFrwhJfmzgpqMlrqdsGgSvRwHxTNMmLMRfttWcxVfRdptg" target="_blank" data-url="https://mail.google.com/mail/u/1/#inbox/FMfcgzQZTpzCtMvvcJkXtStFlTLPfFDr?compose=CllgCJvkXVHJsgLpfZdhzNWHHPWtRqFrwhJfmzgpqMlrqdsGgSvRwHxTNMmLMRfttWcxVfRdptg" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>told the New Scientist</u></a> that he agreed with the study's findings.</p><p>"Given the phylogenetic information we have now, there is no good place to put Prototaxites in the fungal phylogeny," Boyce said. "So maybe it is a fungus, but whether a fungus or something else entirely, it represents a novel experiment with complex multicellularity that is now extinct and does not share a multicellular common ancestor with anything alive today."</p><p>More research into <em>Prototaxites</em> fossils needs to be done to determine if they were fungi or a completely different type of life, and what caused them to go extinct millions of years ago.</p><p>"The conclusion that it is a completely unknown eukaryote certainly creates an air of mystery and intrigue around it — probably not likely to be solved until more fossils are discovered or new analytical techniques developed," <a data-analytics-id="inline-link" href="https://www.botanicgardens.org.au/about-us/our-people/meet-our-experts/brett-summerell" target="_blank" data-url="https://www.botanicgardens.org.au/about-us/our-people/meet-our-experts/brett-summerell" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="none"><u>Brett Summerell</u></a>, a plant pathologist and fungi expert at the Botanic Gardens of Sydney, Australia, who not involved in this new study, told the New Scientist.</p>
</div>
<div id="slice-container-authorBio-TT23hGQ7XJtsjBD4MeoeD7"><p>Jess Thomson is a freelance journalist. She previously worked as a science reporter for Newsweek, and has also written for publications including VICE, The Guardian, The Cut, and Inverse. Jess holds a Biological Sciences degree from the University of Oxford, where she specialised in animal behavior and ecology.</p></div>

</section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Most promoted and blocked domains on Kagi (351 pts)]]></title>
            <link>https://kagi.com/stats?stat=leaderboard</link>
            <guid>43499045</guid>
            <pubDate>Thu, 27 Mar 2025 22:39:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://kagi.com/stats?stat=leaderboard">https://kagi.com/stats?stat=leaderboard</a>, See on <a href="https://news.ycombinator.com/item?id=43499045">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      <table>
        
  <tbody><tr>
    <td>?</td>
    <td>
      Toggle open/close this keyboard shortcut help screen
      
    </td>
  </tr>

        
  <tr>
    <td>j / arrowdown</td>
    <td>
      Move highlight down a result
      
    </td>
  </tr>

        
  <tr>
    <td>k / arrowup</td>
    <td>
      Move highlight up a result
      
    </td>
  </tr>

        
  <tr>
    <td>h / arrowleft</td>
    <td>
      Move left within horizontal inline content, or change boost/ban status in site info modal
      
    </td>
  </tr>

        
  <tr>
    <td>l / arrowright</td>
    <td>
      Move right within horizontal inline content, or change boost/ban status in site info modal
      
    </td>
  </tr>

        
  <tr>
    <td>enter</td>
    <td>
      Go to highlighted result <br>(or open first result, which would be highlighted)
      
    </td>
  </tr>

        
  <tr>
    <td>/</td>
    <td>
      Focus the search bar
      
    </td>
  </tr>

        
  <tr>
    <td>!</td>
    <td>
      Focus the search bar, and add a "!" to start typing a bang
      
    </td>
  </tr>

        
  <tr>
    <td>q</td>
    <td>
      Open quick answer
      
    </td>
  </tr>

        
  <tr>
    <td>Escape</td>
    <td>
      Reset highlight scroll state to first result, or close site info modal
      
    </td>
  </tr>

        
  <tr>
    <td>Shift + ~</td>
    <td>
      Open control center
      
    </td>
  </tr>

        
  <tr>
    <td>s</td>
    <td>
      Open site info modal on the currently highlighted result if applicable, or close it if already open.
      
    </td>
  </tr>

        
  <tr>
    <td>w</td>
    <td>
      Open web search tab
      
    </td>
  </tr>

        
  <tr>
    <td>i</td>
    <td>
      Open images tab
      
    </td>
  </tr>

        
  <tr>
    <td>v</td>
    <td>
      Open videos tab
      
    </td>
  </tr>

        
  <tr>
    <td>m</td>
    <td>
      Open maps tab
      
    </td>
  </tr>

        
  <tr>
    <td>n</td>
    <td>
      Open news tab
      
    </td>
  </tr>

        
        
  <tr>
    <td>]</td>
    <td>
      Cycle forward between navigation tabs
      
    </td>
  </tr>

        
  <tr>
    <td>[</td>
    <td>
      Cycle backwards between navigation tabs
      
    </td>
  </tr>

      </tbody></table>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple Needs a Snow Sequoia (897 pts)]]></title>
            <link>https://reviews.ofb.biz/safari/article/1300.html</link>
            <guid>43498984</guid>
            <pubDate>Thu, 27 Mar 2025 22:32:45 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://reviews.ofb.biz/safari/article/1300.html">https://reviews.ofb.biz/safari/article/1300.html</a>, See on <a href="https://news.ycombinator.com/item?id=43498984">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	<p>Mar 19, 2025 </p>

	
	
<!--break #-->
<p>The same year Apple launched the iPhone, it unveiled a massive upgrade to Mac OS X known as Leopard, sporting “300 New Features.” Two years later, it did something almost unheard of: it released Snow Leopard, an upgrade all about how <em>little</em> it added and how much it took away. Apple needs to make it snow again.</p>



<!--break #-->
<p>Snow Leopard did what it was made to do. It was one of the most solid software releases Apple ever put out. I’d say one of the best modern operating system releases, period.</p>

<p>After Apple’s frenetic run of overhauling and quickly iterating on the entire Mac platform in the early 2000s, becoming a major technology player again with the iPod, moving the Mac to a new processor architecture (for the second of three times) and releasing the iPhone, it was time for detail work. 2009’s Snow Leopard was understated, but improved the underlying system while <em>shrinking</em> it in size by removing outdated accretions.</p>

<p>In an era when people still paid money for operating system upgrades every few years (anyone else remember standing in line for Windows 95?), releasing an OS upgrade without huge new features was unusual. But, it was the right idea and cemented one of the best eras of the Mac. </p>

<p>Nowadays, Apple includes the system upgrades in the upfront cost of its computers, so the incentive to constantly roll out ten or twenty or three hundred “new features” <em>should</em> be lower. Inexplicably, since the company adopted that no extra charge, yearly release cadence, it has seemingly been more reticent to do a disciplined “Snow” release, no matter how necessary.</p>

<p>The latest releases — MacOS Sequoia and iOS/iPadOS 18 — are <em>screaming</em> for such a reset. Yes, they work and are still smoother and less glitchy than Windows 11, but they feel like software developed by people who don’t actually use that software. In the 22 years since I became <a href="https://en.wikipedia.org/wiki/Switch_(advertising_campaign)">a “switcher”</a>, this is the worst state I can remember Apple’s platforms being in.</p>

<p>Some bugs are inevitable with major releases, sure. The troubling aspect is that many are easily reproducible across devices and show up in high-traffic areas, not just forgotten nooks. <em>How do Apple’s engineers not notice these problems?</em></p>

<p>Take Messages. Apple’s iMessage and SMS tool is an essential app for communication for me and, I suspect, the vast majority of Apple users. Since the release of Sequoia last fall, one can no longer reliably cut or copy text from the Mac app. Attempting to copy a message bubble is a game of roulette: the message may copy or it may not. <em>Who knows until you try to paste!</em> Select text in a message and attempt to copy a specific part and it will copy… the whole message, not the selected portion. This is basic, nailed-down-in-the-1980s functionality even my first PC could get right every time.</p>

<p>Surface-level problems like this are joined by deeper structural issues, such as how slow and bloated Messages is. Compared to other end-to-end encrypted messaging tools, Messages takes <em>forever</em> to synchronize if the computer has been off or without Internet for even a day. Nor does it give any indication of an incomplete sync while it takes an hour or more to catch up. Meanwhile, I regularly catch it consuming 20-40% of a processor core when idling. </p>

<p>This is not good.</p>

<p>On my laptop, Mail, and any other tool that depends on MacOS’s secure networking libraries, will at times refuse to connect to the necessary servers. Because the problem is with some aspect of the underlying system, nothing less than a full restart of my Mac will allow connections to flow again. Separately, Safari regularly has internal components jam up and silently prevent a tab <em>or the whole browser</em> from loading pages. </p>

<p>Neither are the glitches confined to the Mac. UI bugs are strewn across Apple’s mobile platforms, too. Messages on iPad, for example, will regularly lose its top navigation bar, requiring a force quit of the app to get things working again. The emoji picker on both the iPad and Mac regularly comes up blank or fails to pass through a selection.</p>

<p>Then there are design decisions that aren’t bugs, they’re just bad. System Settings is a perfect case. For most of MacOS’s existence, you could rearrange a second display’s location in relation to the primary display simply by going into the System Preferences, clicking on Displays and dragging the pictured displays around. Now, counterintuitively, the picture of the displays on this main screen are immovable, with rearrangement functionality hidden behind a button that leads to another window.</p>

<p>That’d be an annoying step backward in the olden days, but it is worse in an era when an iPad can share the Mac’s mouse pointer and even double as a secondary display. Am I the only one who sometimes has his iPad on the left of the Mac and sometimes the right? Why make it harder to rearrange displays <em>now</em>?</p>

<p>I could walk item by item through System Settings and point out many equally inexplicable decisions. Did anyone at Apple really believe a Mac user’s life would be <em>better</em> if common features were buried deep in menus? Or that those menus would be better if designed with odd, glitchy interface arrangements more akin to web pages than a proper Mac app?</p>

<p>Then there’s the abomination that is the iOS and iPadOS Photos app. The previous release was not perfect, but it was <em>good</em>. The new release buried quick access to functions such as favorites. The first release also defaulted to showing all photos and videos with huge margins around them rather than using the full screen. When is the last time you heard someone say, “I sure hate when photos fill my whole screen, I wish they’d put a big border around them instead”? Meanwhile, navigation items are non-standard and riddled with inconsistencies — sometimes there’s a back navigation button, sometimes an “X,” sometimes in one place, sometimes in another — more akin to an Android app than a core part of iOS.</p>

<p>A year focused on cleaning up these and a thousand similar issues big and small is the single step Apple could take that would most enhance its products.</p>

<center><iframe width="800" height="450" src="https://www.youtube.com/embed/XAEPqUtra6E?si=gXq4Ei7Hrvk6DQZB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></center>
<figcaption>This decade old video from Apple’s WWDC conference summarizes Steve Jobs’ philosophy that “Innovation is saying no to 1,000 things.” This has exemplified Apple’s best moments and been absent during their worst.</figcaption>

<p>This is not to say Apple’s platforms are without the need for updates. Apple is clearly behind on the AI arms race and the <a href="https://www.axios.com/2025/03/07/siri-apple-ai-delay">recent announcement</a> that Apple Intelligence’s most exciting features are indefinitely delayed instills little confidence the company will soon catch up. John Gruber is right that Apple now seems to be producing <a href="https://daringfireball.net/2025/03/something_is_rotten_in_the_state_of_cupertino">concept videos of vaporware</a>.</p>

<p>The company’s struggle to release its most important new features in years may be more than tangentially related to everything I’ve bemoaned in this column. Reports <a href="https://www.msn.com/en-us/technology/artificial-intelligence/siri-s-real-ai-upgrade-could-still-be-years-away/ar-AA1A5Hxi?ocid=BingNewsSerp">suggest Siri is actually divided into two different systems</a> — the old, core, limited Siri and a newer one for the latest features — because they haven’t been able to pull off integrating them. </p>

<p>You can put beautiful new windows on your house when the wood is solid; when it is rotten, you need to replace the rotted-out structure first. Snow Leopard’s clean-up paved the way for years of solid, reliable upgrades to MacOS, including many of the flashy features we now take for granted. </p>

<p>I am not suggesting Apple has fallen behind Windows or Android. Changing a setting on Windows 11 can often involve a journey through three or four different interface designs, artifacts of half-implemented changes dating back to the last century. Whenever I find myself stuck outside of Appleland, I am eager to return “home,” flaws and all. </p>

<p>Yet, Apple’s products gained loyal supporters like me because their products were polished and “just worked.” They are middle of the road to premium offerings; it is no compliment when they are the “least bad” instead of the “best.” They <em>should</em> be better than the experience on a $200 PC. </p>

<p>Apple is a company with enormous resources. Apple has not wisely directed some, significant portion of those resources in recent years. An ill-advised focus on the far-fetched Vision Pro occupied Apple when it should have seen AI racing into the mainstream. I <a href="https://ofb.biz/safari/article/1113.html">lamented that nearly two years ago</a>. Having squandered its lead going the wrong direction, Apple’s temptation could now be to ignore the infrastructure rot and simply keep trying to bolt on catchup features without fixing what’s already broken.</p>

<p>With the company’s size and resources, though, this needn’t be a call to fall even further behind on AI. Apple could <em>easily</em> have its core operating system team focused on clean up releases of its operating systems even while its AI team tried to find its footing. </p>

<p>AI or no-AI, spring cleaning would make the Mac, iPhone and iPad really shine. If Apple Intelligence can get caught up, so much the better: the software around it won’t get in the way. <img src="https://ofb.biz/phoenix/images/ofb.svg"></p>

<p><em>Full Disclosure: Tim does own some Apple (AAPL) and Microsoft (MSFT) stock.</em></p>


<!--break #-->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Emacs Solo: A Surprise System Crafters Live Demo (101 pts)]]></title>
            <link>https://www.rahuljuliato.com/posts/emacs-solo-demo</link>
            <guid>43498696</guid>
            <pubDate>Thu, 27 Mar 2025 22:03:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.rahuljuliato.com/posts/emacs-solo-demo">https://www.rahuljuliato.com/posts/emacs-solo-demo</a>, See on <a href="https://news.ycombinator.com/item?id=43498696">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Last Friday, I was genuinely surprised by a live demo of my <strong>Emacs
Solo</strong> configuration on the <strong>System Crafters Weekly Show</strong>. Watching
the live demo was an eye-opener, as I hadn't expected the project to
get such attention, especially in a live setting. Seeing <strong>David
Wilson</strong> take a deep dive into the setup, testing the configuration
live, and exploring how powerful Emacs can be with only its built-in
packages was both humbling and inspiring.</p>
<p>For more details and to explore the configuration yourself, visit the
<a href="https://github.com/LionyxML/emacs-solo/">Emacs Solo GitHub
repository</a>.</p>
<p>The <strong>Emacs Solo</strong> configuration is all about returning to the roots
of Emacs. It's a minimalist setup designed to challenge myself and
test the full potential of Emacs using only its built-in
functionality. The goal was to create an efficient, yet fully
functional environment, all while keeping things as light and fast as
possible. No external dependencies, no clutter. Just pure,
unadulterated Emacs.</p>
<h3>The Project: Emacs Solo</h3>
<p><strong>Emacs Solo</strong> is a configuration that embraces the power of Emacs
without relying on external packages. It's a setup I go back to from
time to time to remind myself of how much can be accomplished with
just what Emacs offers out of the box.</p>
<p>This configuration is designed to be both powerful and lightweight,
allowing for a fast, efficient workflow with a focus on simplicity and
minimalism. The project includes several useful features for
day-to-day tasks like searching, editing, and navigating—everything
you need for an efficient Emacs experience.</p>
<p>Some of the highlights of the project include:</p>
<p>» A preview of <code>icomplete-verical</code> enhancements I proposed to the
Emacs core team (custom prefixes, vertico style setup, and inline
completion closer to corfu/company that works on text buffers and
eshell).</p>
<p>» An experimental custom <code>git-gutter-like</code> feature.</p>
<p>» Supercharged eshell customization.</p>
<p>» Custom solutions for editing multiple search entries.</p>
<p>» Built-in news readers like Gnus and Newsticker.</p>
<p>» Advanced file diffing and version control.</p>
<p>» Extended viper mode for those who prefer vim-style editing.</p>
<p>» Tree-sitter modes.</p>
<p>» LSP configurations.</p>
<p>» Custom <code>rainbown-mode</code> like.</p>
<p>» And many customizations of built-in packages.</p>
<p>The idea is that Emacs is already a powerful IDE, and with a bit of
clever customization, it can be made into something even more
streamlined, adaptable, and effective without the need for external
packages.</p>
<h3>Watch the Demo</h3>
<p>Here's the video of the live demo from the <strong>System Crafters Weekly
Show</strong>:</p>
<iframe width="100%" height="100%" src="https://www.youtube.com/embed/j_2QkCcf8zE?si=UnFWlLIP41tkB6XJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><a href="https://www.youtube.com/watch?v=j_2QkCcf8zE">» Also available here</a></p>
<h3>Conclusion</h3>
<p>I’d like to take this opportunity to thank <strong>David Wilson</strong> for the
amazing show and to the <strong>System Crafters</strong> community for their
continued support and enthusiasm around Emacs. I also want to express
my gratitude to everyone who has contributed code that I’ve borrowed
and learned from over the years. Particularly <strong>Gopar</strong> and
<strong>Protesilaos</strong>. Without the shared knowledge and experience from
these fantastic people, the <strong>Emacs Solo</strong> project wouldn't have been
possible.</p>
<p>As always, the beauty of Emacs lies in its community, and I'm grateful
for all the inspiration, contributions, and shared wisdom that make
projects like <strong>Emacs Solo</strong> come to life. Thank you to everyone who
continues to inspire and teach me along the way.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Asking good questions is harder than giving great answers (141 pts)]]></title>
            <link>https://newsletter.dancohen.org/archive/asking-good-questions-is-harder-than-giving-great-answers/</link>
            <guid>43498570</guid>
            <pubDate>Thu, 27 Mar 2025 21:48:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://newsletter.dancohen.org/archive/asking-good-questions-is-harder-than-giving-great-answers/">https://newsletter.dancohen.org/archive/asking-good-questions-is-harder-than-giving-great-answers/</a>, See on <a href="https://news.ycombinator.com/item?id=43498570">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            
            <date>
                
                March 18, 2025
                
            </date>
            

            

            
            <h2>
                The tests we are using to assess the intelligence of AI are missing an essential aspect of human inquiry — the query itself
            </h2>
            

            
            
            <p>by <a href="https://dancohen.org/?utm_source=dancohen&amp;utm_medium=email" target="_blank">Dan Cohen</a></p>
            
            

            
            
            
<figure><img alt="A painting of Socrates about to drink the hemlock, as his disciples look away in dismay" draggable="false" src="https://assets.buttondown.email/images/9eb0fcbd-5985-4441-b49f-bd8bc19e3200.jpg?w=960&amp;fit=max"><figcaption><em>Jacques-Louis David, “The Death of Socrates,” 1787, Metropolitan Museum of Art. Perhaps he asked too many good questions</em></figcaption></figure>

<p>Recently, I sharpened a #2 pencil and took the history section of "<a href="https://agi.safe.ai/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">Humanity's Last Exam</a>.” Consisting of 3,000 extremely difficult questions, the test is intended for AI, not me. According to its creators and contributors, Humanity’s Last Exam will tell us when artificial general intelligence has arrived to supersede human beings, once a brilliant bot scores an A.</p>
<p>I got an F. Actually, worse than that: Only one of my answers was correct, and I must admit it helped that the question was multiple choice. This is fairly embarrassing for someone with a PhD in history.</p>
<p>What happened? Let me indulge in a standard academic humiliation-avoidance technique: examining the examiners. A much easier exercise. Of the thousands of questions on the test, a mere 16 are on history. By comparison, over 1,200 are on mathematics. This is a rather rude ratio for a purported Test of All Human Knowledge, and a major demerit in this human’s assessment of the exam.</p>
<p>The offense extends further to the historical topics covered. Of the 16 history questions, four of them — 25% of historical understanding! — are about naval battles. My knowledge of the displacement of various warships is admittedly weak. Other questions are byzantine, alas not literally, but figuratively, long narrative journeys with twists and turns that are clearly trying to confuse any AI by flooding its memory with countless opaque terms. Those questions certainly succeeded in confusing me.</p>
<p>I will not be reproducing the history questions here since the creators of Humanity’s Last Exam don’t want AI to have a sneak peek at the questions ahead of taking the test. Of course, this raises another question: Would a true superintelligence cheat? I feel like it would? If you, presumably a human reader, want to take the test yourself, you can find a database of the questions on <a href="https://huggingface.co/datasets/cais/hle?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">Hugging Face</a> and <a href="https://github.com/centerforaisafety/hle?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">GitHub</a>. I should also note that I did not take the “classics” section of the exam, as I am a historian of the modern era and do not know Latin, Greek, etc., but much of that section is history too, perhaps because there <a href="https://en.wikipedia.org/wiki/Battle_of_Salamis?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">were</a> <a href="https://en.wikipedia.org/wiki/Battle_of_Artemisium?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">also</a> <a href="https://en.wikipedia.org/wiki/Battle_of_Sybota?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">naval</a> <a href="https://en.wikipedia.org/wiki/Battle_of_Sphacteria?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">battles</a> in the ancient world.</p>
<p>* * *</p>
<p>Although I failed Humanity’s Last Exam, I did learn something about the current state of our assessment of AI, and what we expect from it. HLE’s implicit definition of “intelligence” is the ability to provide correct answers to complicated questions, and it is just one of many similar exams. Another, <a href="https://proceedings.neurips.cc/paper_files/paper/2024/hash/38cc5cba8e513547b96bc326e25610dc-Abstract-Datasets_and_Benchmarks_Track.html?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">less naval-gazing test</a> of historical knowledge is based on <a href="https://seshat-db.com/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">a comprehensive global history database</a>, but still relies on question-answer pairs so it can provide numerical scores for each LLM’s ability. Upon the release of their latest models, AI companies tout improvements on these assessment tools, which allows them to proclaim definitive AI progress: “This LLM got a 92% on a PhD-level history exam, up from 56% last year!”</p>
<p>And the companies are not wrong about genuinely impressive improvements. <a href="https://newsletter.dancohen.org/archive/humane-ingenuity-3-ai-in-the-archives/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">Six years ago in this newsletter</a>, I wrote about some initial testing I had been doing with computer vision APIs from Google and Microsoft, a first attempt to analyze the photo morgue my library had recently acquired from the <em>Boston Globe</em>. There were glimmers of hope that these pre-GPT tools could help us identify topics in millions of photographs that lacked rigorous metadata, and I found even 80% accuracy to be promising. Now our library’s digital team, much more capable than I am, has created an abstracted interface to all of the main multimodal AI services and is testing the ability of these services to provide subject headings and descriptions, with much better results (although all of the services are still imperfect).</p>
<p>Fellow historian Benjamin Breen <a href="https://resobscura.substack.com/p/the-leading-ai-models-are-now-very?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">has documented similar advances</a> in his testing of AI. The latest models are scarily on par with a first-year doctoral student in history in some areas, able to provide solid context and advanced interpretations of documents and images, even complex ones that require substantial background in a field. The frontier models are much better than most doctoral students in other tasks, such as translation and transcription. Handwriting recognition for historical documents, in particular, has been among the hardest problems for computer scientists to solve, and cracking it will have a significant impact on historical research. Historian <a href="https://cblevins.github.io/posts/llm-primary-sources/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">Cameron Blevins has shown</a> that custom GPTs are now on a path to a solution that could make archives and special collections much more searchable and readable in ways that might transform our ability to do history. What these other tests of artificial intelligence show is that significant AI progress may lie not in some kind of examination endgame, of perfect answers to tough questions, but in the important, but often hidden, middle stages of a research project, when evidence is being assembled and interpreted.</p>
<p>* * *</p>
<p>Even more obscured right now in the conversation about AI and intelligence is that PhD-level work is not just about correct answers. It is more about <em>asking distinctive, uncommon questions</em>. Ultimately, we may want answers, but we must begin with new queries, new areas of interest. Along the way to a better understanding of the past and present, good questions in history may eventually require accurate translations of inscriptions or the location of sea skirmishes. But first, we must imagine why someone, today, should care about such documents and events in the first place, envision how they may have shaped our world. This is a much bigger challenge.</p>
<p>The most vibrant historical studies begin with questions that are unexpected and which therefore have revelatory power. Recently in this newsletter, for instance, <a href="https://newsletter.dancohen.org/archive/synths-and-sensibility/?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">I covered a book</a> that originated with the seemingly simple query, “Why did audiences at orchestral performances become silent when previously they were rowdy?” Before I read <a href="https://www.ucpress.edu/books/listening-in-paris/paper?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank"><em>Listening in Paris</em></a>, I assumed naively that the eternally proper behavior at a concert has been respectful quiet. By asking this curious question, James Johnson was able to unveil a major change in the nature and relationship of music, composers, and audiences that still resonates today, even if our musical tastes have largely changed.</p>
<p>Other books that have influenced me originated with equally novel questions. Why, over a relatively short period of time, <a href="https://www.hup.harvard.edu/books/9780674037076?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">did the British radically change their view of some animals</a>, like dogs, from unkempt wild beasts to delightful members of the household, proudly coiffed and paraded at dog shows? Why did Isaac Newton, the paragon of modern science, <a href="https://www.cambridge.org/us/universitypress/subjects/history/history-science-and-technology/foundations-newtons-alchemy?format=PB&amp;isbn=9780521273817&amp;utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">write more on alchemy</a> than he did on physics or math? How does the experience of war — not the abstract tactics of naval battles but the actual first-person experience — <a href="https://en.wikipedia.org/wiki/The_Great_War_and_Modern_Memory?utm_source=dancohen&amp;utm_medium=email&amp;utm_campaign=asking-good-questions-is-harder-than-giving-great-answers" rel="noopener noreferrer nofollow" target="_blank">profoundly change individual soldiers and then, in aggregate, an entire culture</a>?</p>
<p>Can AI ever produce good <em>questions</em> in history rather than great <em>answers</em>? I’ll tackle that important question in another newsletter.</p>
            
            

            

            





        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Golang on the Playstation 2 (183 pts)]]></title>
            <link>https://rgsilva.com/blog/ps2-go-part-1/</link>
            <guid>43498481</guid>
            <pubDate>Thu, 27 Mar 2025 21:37:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://rgsilva.com/blog/ps2-go-part-1/">https://rgsilva.com/blog/ps2-go-part-1/</a>, See on <a href="https://news.ycombinator.com/item?id=43498481">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
      
      
      <figure>
        <img src="https://rgsilva.com/blog/ps2-go-part-1/cover.jpg">
      </figure>
      <p>I always wanted to do some weird stuff with consoles. I’m not sure why, but making devices do unexpected things is always an interesting topic for me. And the same applies to the <a href="https://en.wikipedia.org/wiki/PlayStation_2">PlayStation 2</a>, the 2000 console released by Sony.</p>
<p>Also, Sony, don’t sue me for this lol</p>
<p>Let’s get straight into it: I want to run code into consoles (more on <em>why</em> this in a future post). Normally this is done in low(er) level languages, but nowadays we have better and easier to work with languages such as <a href="https://go.dev/">Go</a>. So I was wondering.. why not?</p>
<p>Looking online, however, yielded no easy way of doing this, so I decided to tackle this problem myself.</p>
<blockquote>
<p>Please note that I’m writing this after a lot of the research here has been done and tested already. This means that a lot of the experimentation here is from memory and from retracing my steps, so there might be inconsistencies here and there.</p>
</blockquote>
<blockquote>
<p>Also note that this is all running inside an emulator. I do own a PS2 that I can test this, but I’m too lazy to set it up. Plus I want fully functional demos before doing so.</p>
</blockquote>
<blockquote>
<p>Final note: the code will be released at a later point and I’ll update the post accordingly.</p>
</blockquote>
<h2 id="the-challenge">The challenge</h2>
<p>By default, <a href="https://go.dev/wiki/MinimumRequirements">Go only supports a handful of platforms</a>, and unfortunately that does not include the PS2. In fact, Go seems to require an OS behind the scenes, thing that we don’t even have over there (not considering PS2 Linux). To solve that, however, we have <a href="https://tinygo.org/">TinyGo</a>, a Go compiler for small devices, like microcontrollers and embedded systems. The basic way it works is that it gets the Go code, turns into LLVM IR, and then that into the binary code for whatever target we’re trying to code for.</p>
<p>The PS2 main CPU is called <a href="https://en.wikipedia.org/wiki/Emotion_Engine">Emotion Engine</a>, which is based on a MIPS R5900. It implements the instructions for MIPS-III and MIPS-IV, plus some custom stuff. It also is missing a few other things (more on that later). Go can actually build code for MIPS already, which should save me some time, but not a lot, as I need to get TinyGo to work on it. TinyGo relies on LLVM 19, which does support MIPS-III, but not the R5900 CPU directly.</p>
<p>These are all technical issues. There’s a much more pressing one: I don’t know how the PS2 works.</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-10.png"><figcaption>
      Well, that should be fun.
    </figcaption>
</figure>
<h2 id="the-ps2dev-sdk-and-its-quirks">The ps2dev SDK and its quirks</h2>
<p>If you look it up online for a way of developing code for the PS2, you’ll probably cross paths with <a href="https://github.com/ps2dev/ps2dev">ps2dev</a>. This is a full-blown SDK that lets you generate binaries for it in a pretty neat way. The coolest thing about it is that it already provides a bunch of libraries for graphical operations, debugging, I/O, etc - even a stdlib is provided! Because of that, I thought: hey, maybe I want to link to their code - this would allow an easier and faster implementation of anything for the PS2 in Go. Think of it as an “OS” API (technically it’s not?), which we could call whenever we want to do things we don’t want to reimplement (or that aren’t even worth trying sometimes).</p>
<p>That said, this introduces a few problems. The first one is that the ps2dev libraries are compiled to the MIPS-III N32 standard. This means that, whatever code we produce, needs to target the same thing. Same hard-float, same N32 ABI, etc. This is a bit annoying, but manageable. The reason why it needs to match is because we’ll be linking our code to their pre-built libraries, and linkers are not really fond of dealing with different targets.</p>
<blockquote>
<p>For the sake of clarification: MIPS-III N32 means that this is targeting a MIPS CPU that is implementing the MIPS-III instruction set. This is a 64bit CPU, but due to the N32, this is running 32bit code with some 64bit instructions to handle 64bit integers. This is very confusing, but you can check <a href="https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models">this</a> to read more about it.</p>
</blockquote>
<p>Because of this, you’ll see my attempts to target <code>mipsel</code> with a <code>mips3</code> CPU in the next steps, even though it should, technically speaking, be a <code>mips64el</code>, as this is a 64bit CPU. N32 should force things to run in 32bit mode, even though though our target should support 64bit code. However, Clang/LLVM and TinyGo get kinda messy on this and it gets very confusing and complicated. Also, building for <code>mips64el</code> caused TinyGo to failed some verification steps when generating code with the LLVM, as well as clang to refuse to properly build it as the code is kinda broken. Since I <em>really</em> wanted to move forward, I gave up and opted for generating <code>mipsel</code> code with the N32 ABI, which will force clang to change it to a MIPS64 internally, but still generate valid code. Like I said, it’s very weird. Please bear with me, this is all new to me too! :D</p>
<p>Further reiteration on this topic might be necessary to get this just right, but I’m not diving into this hell right now. Future-wise we can try dropping ps2dev and doing things directly in Go, but some assembly is required - literally and metaphorically.</p>
<h2 id="getting-tinygo-to-generate-some-code">Getting TinyGo to generate some code</h2>
<p>For TinyGo to know about a certain target, it requires a file defining it - we’ll call it <code>ps2.json</code>. It defines a bunch of very interesting things that we don’t really care at the moment, but here are the most important ones:</p>
<div><pre tabindex="0"><code data-lang="json"><span><span>{
</span></span><span><span>	<span>"llvm-target"</span>: <span>"mipsel-unknown-unknown"</span>,
</span></span><span><span>	<span>"cpu"</span>: <span>"mips3"</span>,
</span></span><span><span>	<span>"features"</span>: <span>"-noabicalls"</span>,
</span></span><span><span>	<span>"build-tags"</span>: [<span>"ps2"</span>, <span>"baremetal"</span>, <span>"mipsel"</span>],
</span></span><span><span>	<span>"goos"</span>: <span>"linux"</span>,
</span></span><span><span>	<span>"goarch"</span>: <span>"mipsle"</span>,
</span></span><span><span>	<span>"linker"</span>: <span>"ld.lld"</span>,
</span></span><span><span>	<span>"rtlib"</span>: <span>"compiler-rt"</span>,
</span></span><span><span>	<span>"libc"</span>: <span>""</span>,
</span></span><span><span>	<span>"cflags"</span>: [
</span></span><span><span>	],
</span></span><span><span>	<span>"ldflags"</span>: [
</span></span><span><span>	],
</span></span><span><span>	<span>"linkerscript"</span>: <span>""</span>,
</span></span><span><span>	<span>"extra-files"</span>: [
</span></span><span><span>	],
</span></span><span><span>	<span>"gdb"</span>: []
</span></span><span><span>}
</span></span></code></pre></div><p>This file is the culmination of many, maaany days testing different configurations. It is only <strong>partially functional</strong>. It cannot generate object files yet (more below), hence the reason why I’m not bothering to fill in flags for compiling and linking code. There are some relevant things I need to explain, though, so here we go:</p>
<ol>
<li>Target is <code>mipsel-unknown-unknown</code>. This is our LLVM target. I’m sticking with <code>mipsel</code> here for the reasons I explained previously.</li>
<li>The features have <code>-noabicalls</code>. It is required as otherwise shit hits the fan and nothing works (the LLVM IR that gets generated gets broken).</li>
<li>I’ve set it to not use any <code>libc</code>. This is because ps2dev already provides one, and I don’t want to mess with that (trust me). Plus, since we’ll be linking to their code, we might as well use their version of it.</li>
</ol>
<p>This is the <em>basic</em> target file we need so that TinyGo at least <em>knows</em> what a PS2 is. But that’s not all - we need to define a bunch of functions which are target-specific.</p>
<h3 id="baremetal-definitions">Baremetal definitions</h3>
<p>Our target needs a baremetal configuration - <code>baremetal_ps2.go</code>. Usually the <a href="https://github.com/tinygo-org/tinygo/blob/release/src/runtime/baremetal.go">default baremetal file</a> is enough, but in our case I’ve opted to create a custom one so that I can redefine some things.</p>
<blockquote>
<p>Note from the future: this can be improved by adjusting the linker file so it finds the correct externs. I might end up doing that and come back here later on.</p>
</blockquote>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//go:build ps2
</span></span></span><span><span><span></span>
</span></span><span><span><span>package</span> <span>runtime</span>
</span></span><span><span>
</span></span><span><span><span>import</span> <span>"C"</span>
</span></span><span><span><span>import</span> (
</span></span><span><span>	<span>"unsafe"</span>
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>//go:extern _heap_start
</span></span></span><span><span><span></span><span>var</span> <span>heapStartSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>//go:extern _heap_end
</span></span></span><span><span><span></span><span>var</span> <span>heapEndSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>//go:extern _fdata
</span></span></span><span><span><span></span><span>var</span> <span>globalsStartSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>//go:extern _edata
</span></span></span><span><span><span></span><span>var</span> <span>globalsEndSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>//go:extern _stack_top
</span></span></span><span><span><span></span><span>var</span> <span>stackTopSymbol</span> [<span>0</span>]<span>byte</span>
</span></span><span><span>
</span></span><span><span><span>var</span> (
</span></span><span><span>	<span>heapStart</span>    = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>heapStartSymbol</span>))
</span></span><span><span>	<span>heapEnd</span>      = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>heapEndSymbol</span>))
</span></span><span><span>	<span>globalsStart</span> = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>globalsStartSymbol</span>))
</span></span><span><span>	<span>globalsEnd</span>   = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>globalsEndSymbol</span>))
</span></span><span><span>	<span>stackTop</span>     = uintptr(<span>unsafe</span>.<span>Pointer</span>(<span>&amp;</span><span>stackTopSymbol</span>))
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>func</span> <span>growHeap</span>() <span>bool</span> {
</span></span><span><span>	<span>// On baremetal, there is no way the heap can be grown.
</span></span></span><span><span><span></span>	<span>return</span> <span>false</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>//export runtime_putchar
</span></span></span><span><span><span></span><span>func</span> <span>runtime_putchar</span>(<span>c</span> <span>byte</span>) {
</span></span><span><span>	<span>putchar</span>(<span>c</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>//go:linkname syscall_Exit syscall.Exit
</span></span></span><span><span><span></span><span>func</span> <span>syscall_Exit</span>(<span>code</span> <span>int</span>) {
</span></span><span><span>  	<span>// TODO
</span></span></span><span><span><span></span>	<span>exit</span>(<span>code</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>const</span> <span>baremetal</span> = <span>true</span>
</span></span><span><span>
</span></span><span><span><span>var</span> <span>timeOffset</span> <span>int64</span>
</span></span><span><span>
</span></span><span><span><span>//go:linkname now time.now
</span></span></span><span><span><span></span><span>func</span> <span>now</span>() (<span>sec</span> <span>int64</span>, <span>nsec</span> <span>int32</span>, <span>mono</span> <span>int64</span>) {
</span></span><span><span>	<span>mono</span> = <span>nanotime</span>()
</span></span><span><span>	<span>sec</span> = (<span>mono</span> <span>+</span> <span>timeOffset</span>) <span>/</span> (<span>1000</span> <span>*</span> <span>1000</span> <span>*</span> <span>1000</span>)
</span></span><span><span>	<span>nsec</span> = int32((<span>mono</span> <span>+</span> <span>timeOffset</span>) <span>-</span> <span>sec</span><span>*</span>(<span>1000</span><span>*</span><span>1000</span><span>*</span><span>1000</span>))
</span></span><span><span>	<span>return</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>AdjustTimeOffset</span>(<span>offset</span> <span>int64</span>) {
</span></span><span><span>	<span>timeOffset</span> <span>+=</span> <span>offset</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>var</span> <span>errno</span> <span>int32</span>
</span></span><span><span>
</span></span><span><span><span>//export __errno_location
</span></span></span><span><span><span></span><span>func</span> <span>libc_errno_location</span>() <span>*</span><span>int32</span> {
</span></span><span><span>	<span>return</span> <span>&amp;</span><span>errno</span>
</span></span><span><span>}
</span></span></code></pre></div><p>Do we need to understand how most of this works? No, we don’t. Not only that, most of this is copy-paste from the normal <code>baremetal.go</code> implementation. We can adjust later if necessary, no worries. Like I said, we mostly need this to <em>build</em>, so that we can figure out what is wrong and fix it accordingly.</p>
<blockquote>
<p>Note: for this to work, you still need to disable the building of the original <code>baremetal.go</code> for our target, so we need to change its build flag to <code>//go:build baremetal &amp;&amp; !ps2</code>.</p>
</blockquote>
<h3 id="runtime">Runtime</h3>
<p>Our target needs a runtime definitions file - <code>runtime_ps2.go</code>. This is the place where a bunch of target-specific functions get defined, including how <code>putchar</code>, <code>exit</code> and even <code>main</code> (later) gets implemented. Pretty cool part of the code if I’d say so.</p>
<p>A very basic implementation would look like this:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//go:build ps2
</span></span></span><span><span><span></span>
</span></span><span><span><span>package</span> <span>runtime</span>
</span></span><span><span>
</span></span><span><span><span>/*
</span></span></span><span><span><span>extern void _exit(int status);
</span></span></span><span><span><span>extern void* malloc(unsigned int size);
</span></span></span><span><span><span>extern void free(void *ptr);
</span></span></span><span><span><span>extern void scr_printf(const char *format, ...);
</span></span></span><span><span><span>*/</span>
</span></span><span><span><span>import</span> <span>"C"</span>
</span></span><span><span><span>import</span> <span>"unsafe"</span>
</span></span><span><span>
</span></span><span><span><span>// timeUnit in nanoseconds
</span></span></span><span><span><span></span><span>type</span> <span>timeUnit</span> <span>int64</span>
</span></span><span><span>
</span></span><span><span><span>func</span> <span>initUART</span>() {
</span></span><span><span>  <span>// Unsupported.
</span></span></span><span><span><span></span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>putchar</span>(<span>c</span> <span>byte</span>) {
</span></span><span><span>	<span>// This is a very hacky way of doing this. It assumes the debug screen is already active, and prints
</span></span></span><span><span><span></span>	<span>// a whole string for a single char every single time. Very slow, but works. We can improve it later.
</span></span></span><span><span><span></span>
</span></span><span><span>	<span>x</span> <span>:=</span> <span>C</span>.<span>CString</span>(string(<span>c</span>))
</span></span><span><span>	<span>C</span>.<span>scr_printf</span>(<span>x</span>)
</span></span><span><span>	<span>C</span>.<span>free</span>(<span>unsafe</span>.<span>Pointer</span>(<span>x</span>))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>getchar</span>() <span>byte</span> {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> <span>0</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>buffered</span>() <span>int</span> {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> <span>0</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>sleepWDT</span>(<span>period</span> <span>uint8</span>) {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>exit</span>(<span>code</span> <span>int</span>) {
</span></span><span><span>  	<span>// This just delegates it to the ps2dev _exit(int) function.
</span></span></span><span><span><span></span>	<span>C</span>.<span>_exit</span>(<span>C</span>.int(<span>code</span>))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>abort</span>() {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>ticksToNanoseconds</span>(<span>ticks</span> <span>timeUnit</span>) <span>int64</span> {
</span></span><span><span>  	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> int64(<span>ticks</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>nanosecondsToTicks</span>(<span>ns</span> <span>int64</span>) <span>timeUnit</span> {
</span></span><span><span>  	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> <span>timeUnit</span>(<span>ns</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>sleepTicks</span>(<span>d</span> <span>timeUnit</span>) {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>ticks</span>() (<span>ticksReturn</span> <span>timeUnit</span>) {
</span></span><span><span>	<span>// TODO
</span></span></span><span><span><span></span>	<span>return</span> <span>0</span>
</span></span><span><span>}
</span></span></code></pre></div><p>A lot of it is not implemented, and this is intentional - I won’t be using those things at the moment, so I don’t care about them. We can later implement them accordingly, and get them to work as expected. Some of them might be even doable through ps2dev’s C functions, for example.</p>
<h3 id="interrupts">Interrupts</h3>
<p>Another basic file we need is the interrupts defintions - <code>interrupt_ps2.go</code>. I know that ps2dev has implementations for those calls, but I’ve opted to not call them yet. At this moment, we don’t need interrupts, so let’s just implement dummy functions for that:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//go:build ps2
</span></span></span><span><span><span></span>
</span></span><span><span><span>package</span> <span>interrupt</span>
</span></span><span><span>
</span></span><span><span><span>type</span> <span>State</span> <span>uintptr</span>
</span></span><span><span>
</span></span><span><span><span>func</span> <span>Disable</span>() (<span>state</span> <span>State</span>) {
</span></span><span><span>	<span>return</span> <span>0</span>
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>Restore</span>(<span>state</span> <span>State</span>) {}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>In</span>() <span>bool</span> {
</span></span><span><span>	<span>return</span> <span>false</span>
</span></span><span><span>}
</span></span></code></pre></div><p>With that, we <em>should</em> be able to build some Go code. So let’s give it a try.</p>
<h2 id="calling-go-functions-from-c">Calling Go functions from C</h2>
<p>Let’s start with a simple example: get our C code to return a number and a string. Nothing major. We’ll split this into 2 parts: the loader (in C) and our Go code. It will work like this:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-2.png"><figcaption>
      It works!
    </figcaption>
</figure>
<p>Here’s our Go code:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//export aGoString
</span></span></span><span><span><span></span><span>func</span> <span>aGoString</span>() <span>*</span><span>C</span>.<span>char</span> {
</span></span><span><span>	<span>return</span> <span>C</span>.<span>CString</span>(<span>"The answer for everything is"</span>)
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>//export aGoNumber
</span></span></span><span><span><span></span><span>func</span> <span>aGoNumber</span>() <span>C</span>.<span>int</span> {
</span></span><span><span>	<span>return</span> <span>C</span>.int(<span>42</span>)
</span></span><span><span>}
</span></span></code></pre></div><p>And our loader, which contains our <code>main</code> function:</p>
<div><pre tabindex="0"><code data-lang="c"><span><span><span>// Our go functions, exported before.
</span></span></span><span><span><span></span><span>extern</span> <span>char</span><span>*</span> <span>aGoString</span>();
</span></span><span><span><span>extern</span> <span>int</span> <span>aGoNumber</span>();
</span></span><span><span>
</span></span><span><span><span>int</span> <span>main</span>() {
</span></span><span><span>  <span>// Initialize our debug screen.
</span></span></span><span><span><span></span>  <span>sceSifInitRpc</span>(<span>0</span>);
</span></span><span><span>  <span>init_scr</span>();
</span></span><span><span>
</span></span><span><span>  <span>// Print stuff we get from Go functions.
</span></span></span><span><span><span></span>  <span>scr_printf</span>(<span>"%s: %d</span><span>\n</span><span>"</span>, <span>aGoString</span>(), <span>aGoNumber</span>());
</span></span><span><span>
</span></span><span><span>  <span>// Infinite loop so we keep the program running.
</span></span></span><span><span><span></span>  <span>while</span> (<span>1</span>) {}
</span></span><span><span>
</span></span><span><span>  <span>return</span> <span>0</span>;
</span></span><span><span>}
</span></span></code></pre></div><p>Very simple code, right? Let’s build it.</p>
<p>Well, no, wait. There’s a problem. TinyGo, by default, wants you to generate the final ELF (<code>.elf</code>) or the object file (<code>.o</code>) with it. However, the ELF requires adding a linkfile and some other extra bits of code to it, which we’re far from. For now, we just want to get some functions in a way that we can link - so we should be able to just use the object file.</p>
<p>However, attempting to do so generates an incorrect file:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ tinygo build -target ps2 -o test.o
</span></span><span><span>$ file test.o
</span></span><span><span>test.o: ELF 32-bit LSB relocatable, MIPS, MIPS-III version <span>1</span> <span>(</span>SYSV<span>)</span>, with debug_info, not stripped
</span></span></code></pre></div><figcaption>
  Note the missing `N32` in the string
</figcaption>
<p>I thought: oh, ok, we’re just missing the proper <code>cflags</code> and <code>ldflags</code> here, right? So let’s try adding it:</p>
<div><pre tabindex="0"><code data-lang="json"><span><span>{
</span></span><span><span>	<span>// (...)
</span></span></span><span><span><span></span>	<span>"cflags"</span>: [
</span></span><span><span>		<span>"-mabi=n32"</span>
</span></span><span><span>	],
</span></span><span><span>	<span>"ldflags"</span>: [
</span></span><span><span>		<span>"-mabi=n32"</span>
</span></span><span><span>	],
</span></span><span><span>	<span>// (...)
</span></span></span></code></pre></div><figcaption>
  These might not be the right flags, but according to some docs it seems like it is.
</figcaption>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ tinygo build -target ps2 -o test.o
</span></span><span><span>$ file test.o                                        
</span></span><span><span>test.o: ELF 32-bit LSB relocatable, MIPS, MIPS-III version <span>1</span> <span>(</span>SYSV<span>)</span>, with debug_info, not stripped
</span></span></code></pre></div><p>Oh. Ok then.</p>
<p>Since TinyGo is, for some reason, not playing nice here, I’ve opted for breaking this into steps that I can more easily control. TinyGo internally will generating some LLVM IR from your Go code, and then build it. Let’s stop at the LLVM IR level then:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ tinygo build -target ps2 -o build/go.ll
</span></span></code></pre></div><p>This will generate a valid LLVM IR file! 🎉 Now we can just manually build it into the object file with the format we want:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ clang -fno-pic -c --target<span>=</span>mips64el -mcpu<span>=</span>mips3 -fno-inline-functions -mabi<span>=</span>n32 -mhard-float -mxgot -mlittle-endian -o build/go.o build/go.ll
</span></span></code></pre></div><p>The flags here are important. Our target is a MIPS64 (only TinyGo is not happy with it), Little Endian, with the MIPS-III instruction set, using the N32 ABI. It uses hardware floating numbers, and the <code>-fno-pic</code> and <code>-mxgot</code> is to deal with a global offset table size limit issue when linking. With all that, here’s what we get:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ file build/go.o
</span></span><span><span>build/go.o: ELF 32-bit LSB relocatable, MIPS, N32 MIPS-III version <span>1</span> <span>(</span>SYSV<span>)</span>, with debug_info, not stripped
</span></span></code></pre></div><figcaption>
  Finally!
</figcaption>
<p>From here, we can link with our C code. For that, I’ve opted to use the ps2dev linking command (extracted from the Makefile and some testing), with our Go code added into it:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>mips64r5900el-ps2-elf-gcc <span>\
</span></span></span><span><span><span></span>	-Tlinkfile <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/ps2sdk/ee/lib <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/ps2sdk/ports/lib <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/gsKit/lib/ <span>\
</span></span></span><span><span><span></span>	-Lmodules/ds34bt/ee/ <span>\
</span></span></span><span><span><span></span>	-Lmodules/ds34usb/ee/ <span>\
</span></span></span><span><span><span></span>	-Wl,-zmax-page-size<span>=</span><span>128</span> <span>\
</span></span></span><span><span><span></span>	-lpatches <span>\
</span></span></span><span><span><span></span>	-lfileXio <span>\
</span></span></span><span><span><span></span>	-lpad <span>\
</span></span></span><span><span><span></span>	-ldebug <span>\
</span></span></span><span><span><span></span>	-lmath3d <span>\
</span></span></span><span><span><span></span>	-ljpeg <span>\
</span></span></span><span><span><span></span>	-lfreetype <span>\
</span></span></span><span><span><span></span>	-lgskit_toolkit <span>\
</span></span></span><span><span><span></span>	-lgskit <span>\
</span></span></span><span><span><span></span>	-ldmakit <span>\
</span></span></span><span><span><span></span>	-lpng <span>\
</span></span></span><span><span><span></span>	-lz <span>\
</span></span></span><span><span><span></span>	-lmc <span>\
</span></span></span><span><span><span></span>	-laudsrv <span>\
</span></span></span><span><span><span></span>	-lelf-loader <span>\
</span></span></span><span><span><span></span>	-laudsrv <span>\
</span></span></span><span><span><span></span>	-lc <span>\
</span></span></span><span><span><span></span>	-mhard-float <span>\
</span></span></span><span><span><span></span>	-msingle-float <span>\
</span></span></span><span><span><span></span>	-o build/main.elf <span>\
</span></span></span><span><span><span></span>	build/loader.o <span>\
</span></span></span><span><span><span></span>	build/asm_mipsx.o <span>\
</span></span></span><span><span><span></span>	build/go.o
</span></span></code></pre></div><figcaption>
  Loader is our C code, and Go is our.. well, Go code.
</figcaption>
<blockquote>
<p>Note: the <code>asm_mipsx.o</code> is some assembly code provided by TinyGo that I just copied into the project and built with clang. You can find it <a href="https://github.com/tinygo-org/tinygo/blob/release/src/runtime/asm_mipsx.S">here</a>.</p>
</blockquote>
<p>And, with that, we build our new application!</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ file build/main.elf
</span></span><span><span>build/main.elf: ELF 32-bit LSB executable, MIPS, N32 MIPS-III version <span>1</span> <span>(</span>SYSV<span>)</span>, statically linked, with debug_info, not stripped
</span></span></code></pre></div><p>And running it yields success:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-3.png"><figcaption>
      It works! This is PCSX2 v2.3.223 btw.
    </figcaption>
</figure>
<h2 id="switching-to-gos-main">Switching to Go’s main</h2>
<p>Right now the <code>main</code> function that is being called is not in Go, but in C - that is what we’ve been calling <em>loader</em> so far. However, Go applications can start by themselves without a C-based loader - and it would be great if our <del>games</del> PS2 applications would so!</p>
<h3 id="runtime-changes">Runtime changes</h3>
<p>The first step to allowing Go applications to run without our loader is to have the <code>main</code> function exposed by Go. We can do that in our <code>runtime_ps2.go</code>:</p>
<pre tabindex="0"><code>//export main
func main() {
	preinit()
	run()
	preexit()
	exit(0)
}

const (
	memSize = uint(24 * 1024 * 1024)
)

var (
	goMemoryAddr uintptr
)

func preinit() {
	// NOTE: no need to clear .bss and other memory areas as crt0 is already doing that in __start.

	// Since we're loading into whatever ps2dev kernel thingy that exists, it's safer for us to do
	// a proper malloc before proceeding. This guarantees that the heap location is ours. We will
	// need to free it later on though.

	goMemoryAddr = uintptr(unsafe.Pointer(C.malloc(C.uint(memSize))))
	heapStart = goMemoryAddr
	heapEnd = goMemoryAddr + uintptr(memSize)
}

func preexit() {
	C.free(unsafe.Pointer(heapStart))
}
</code></pre><p>There are some important things to note here:</p>
<ol>
<li>The heap start and end could be defined by the linker file. And, ironically, they are. However, the <code>crt0</code> provided by ps2dev will clear those variables for some reason, making it kinda broken.
<ol>
<li>We could just assume that anything above a certain memory address is ours, <em>buuuut</em> ps2dev may want to play with more memory and I don’t want to deal with this right now.</li>
<li>We’ll allocate the memory using ps2dev’s <code>malloc</code> as per stated in the code. This will guarantee that this memory area is ours - if the libraries need more, they should still have some memory left, as the PS2 should have 32MB and we’re allocating 24MB only.</li>
<li>Technically speaking we could make the heap grow per demand - but that’s a problem for future me.</li>
</ol>
</li>
<li>We’ll intentionally unallocate the memory after usage. Not really required, but <em>just in case</em>.</li>
<li>The <code>run</code> function is responsible for calling our <code>main</code> function inside our <code>main</code> package. This is not something we need to deal with - TinyGo’s code does that for us, we just need to call it.</li>
</ol>
<p>It works basically like this:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-4.png"><figcaption>
      Exitpoint is even a word?!
    </figcaption>
</figure>
<p>This is technically a mixed approach: it’s both baremetal - because it runs without a proper OS - but it’s also not - because it allocates memory, enters and exits application.</p>
<p>Fun fact: once the code exits, it shows the memory card selection screen!</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-5.png">
</figure>
<h3 id="our-go-code">Our Go code</h3>
<p>Let’s code something in Go then. First step is to have something to call, so let’s create a package called <code>debug</code> with the debug screen functions:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>package</span> <span>debug</span>
</span></span><span><span>
</span></span><span><span><span>/*
</span></span></span><span><span><span>extern void free(void *ptr);
</span></span></span><span><span><span>extern void sceSifInitRpc(int mode);
</span></span></span><span><span><span>extern void init_scr(void);
</span></span></span><span><span><span>extern void scr_printf(const char *format, ...);
</span></span></span><span><span><span>*/</span>
</span></span><span><span><span>import</span> <span>"C"</span>
</span></span><span><span><span>import</span> (
</span></span><span><span>	<span>"fmt"</span>
</span></span><span><span>	<span>"unsafe"</span>
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>func</span> <span>Init</span>() {
</span></span><span><span>	<span>C</span>.<span>sceSifInitRpc</span>(<span>0</span>)
</span></span><span><span>	<span>C</span>.<span>init_scr</span>()
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>Printf</span>(<span>format</span> <span>string</span>, <span>args</span> <span>...</span><span>interface</span>{}) {
</span></span><span><span>	<span>formatted</span> <span>:=</span> <span>fmt</span>.<span>Sprintf</span>(<span>format</span>, <span>args</span><span>...</span>)
</span></span><span><span>
</span></span><span><span>	<span>str</span> <span>:=</span> <span>C</span>.<span>CString</span>(<span>formatted</span>)
</span></span><span><span>	<span>C</span>.<span>scr_printf</span>(<span>str</span>)
</span></span><span><span>	<span>C</span>.<span>free</span>(<span>unsafe</span>.<span>Pointer</span>(<span>str</span>))
</span></span><span><span>}
</span></span></code></pre></div><blockquote>
<p>Yes, there is an <code>extern</code> for the <code>free</code> function which could be replaced by stdlib. I’ve avoided that at the moment as that requires adding some C flags for include paths and that made it messy. Here’s how it looks like with it:</p>
<pre tabindex="0"><code>/*
#cgo CFLAGS: -I/Users/ricardo/dev/ps2dev/ee/mips64r5900el-ps2-elf/include -I/Users/ricardo/dev/ps2dev/ee/lib/gcc/mips64r5900el-ps2-elf/14.2.0/include/ -I/Users/ricardo/dev/ps2dev/gsKit/include -I/Users/ricardo/dev/ps2dev/ps2sdk/common/include -I/Users/ricardo/dev/ps2dev/ps2sdk/ports/include/freetype2 -I/Users/ricardo/dev/ps2dev/ps2sdk/ports/include/zlib
#include &lt;stdlib.h&gt;

extern void sceSifInitRpc(int mode);
extern void init_scr(void);
extern void scr_printf(const char *format, ...);
*/
</code></pre><p>This can be improved by moving those flags externally to the build process but that’s a problem for future me once this gets released.</p>
</blockquote>
<p>Overall, this is nothing too crazy - it’s just the normal debug functions exposed by ps2dev (declared <a href="https://ps2dev.github.io/ps2sdk/ee_2debug_2include_2debug_8h.html">here</a> and implemented <a href="https://github.com/ps2dev/ps2sdk/blob/master/ee/debug/src/scr_printf.c">here</a>). And then we just call it:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>package</span> <span>main</span>
</span></span><span><span>
</span></span><span><span><span>import</span> (
</span></span><span><span>	<span>"ps2go/debug"</span>
</span></span><span><span>)
</span></span><span><span>
</span></span><span><span><span>func</span> <span>main</span>() {
</span></span><span><span>	<span>debug</span>.<span>Init</span>()
</span></span><span><span>
</span></span><span><span>	<span>debug</span>.<span>Printf</span>(<span>"Hello world from Go!\n"</span>)
</span></span><span><span>	<span>debug</span>.<span>Printf</span>(<span>`
</span></span></span><span><span><span>   ____                                _                           
</span></span></span><span><span><span>  / ___| ___    _ __ _   _ _ __  _ __ (_)_ __   __ _    ___  _ __  
</span></span></span><span><span><span> | |  _ / _ \  | '__| | | | '_ \| '_ \| | '_ \ / _' |  / _ \| '_ \ 
</span></span></span><span><span><span> | |_| | (_) | | |  | |_| | | | | | | | | | | | (_| | | (_) | | | |
</span></span></span><span><span><span>  \____|\___/  |_|   \__,_|_| |_|_| |_|_|_| |_|\__, |  \___/|_| |_|
</span></span></span><span><span><span>    ____  _             ____  _        _   _   |___/       ____    
</span></span></span><span><span><span>   |  _ \| | __ _ _   _/ ___|| |_ __ _| |_(_) ___  _ __   |___ \   
</span></span></span><span><span><span>   | |_) | |/ _' | | | \___ \| __/ _' | __| |/ _ \| '_ \    __) |  
</span></span></span><span><span><span>   |  __/| | (_| | |_| |___) | || (_| | |_| | (_) | | | |  / __/   
</span></span></span><span><span><span>   |_|   |_|\__,_|\__, |____/ \__\__,_|\__|_|\___/|_| |_| |_____|  
</span></span></span><span><span><span>                  |___/                                            
</span></span></span><span><span><span>`</span>)
</span></span><span><span>	<span>for</span> {
</span></span><span><span>		<span>// Infinite loop to not exit!
</span></span></span><span><span><span></span>	}
</span></span><span><span>}
</span></span></code></pre></div><p>Fancy, no? Let’s build the code and see what happens:</p>
<div><pre tabindex="0"><code data-lang="bash"><span><span>$ tinygo build -target ps2 -o build/go.ll
</span></span><span><span>$ clang -fno-pic -c --target<span>=</span>mips64el -mcpu<span>=</span>mips3 -fno-inline-functions -mabi<span>=</span>n32 -mhard-float -mxgot -mlittle-endian -o build/go.o build/go.ll
</span></span><span><span>$ mips64r5900el-ps2-elf-gcc <span>\
</span></span></span><span><span><span></span>	-Tlinkfile <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/ps2sdk/ee/lib <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/ps2sdk/ports/lib <span>\
</span></span></span><span><span><span></span>	-L/usr/local/ps2dev/gsKit/lib/ <span>\
</span></span></span><span><span><span></span>	-Lmodules/ds34bt/ee/ <span>\
</span></span></span><span><span><span></span>	-Lmodules/ds34usb/ee/ <span>\
</span></span></span><span><span><span></span>	-Wl,-zmax-page-size<span>=</span><span>128</span> <span>\
</span></span></span><span><span><span></span>	-lpatches <span>\
</span></span></span><span><span><span></span>	-lfileXio <span>\
</span></span></span><span><span><span></span>	-lpad <span>\
</span></span></span><span><span><span></span>	-ldebug <span>\
</span></span></span><span><span><span></span>	-lmath3d <span>\
</span></span></span><span><span><span></span>	-ljpeg <span>\
</span></span></span><span><span><span></span>	-lfreetype <span>\
</span></span></span><span><span><span></span>	-lgskit_toolkit <span>\
</span></span></span><span><span><span></span>	-lgskit <span>\
</span></span></span><span><span><span></span>	-ldmakit <span>\
</span></span></span><span><span><span></span>	-lpng <span>\
</span></span></span><span><span><span></span>	-lz <span>\
</span></span></span><span><span><span></span>	-lmc <span>\
</span></span></span><span><span><span></span>	-laudsrv <span>\
</span></span></span><span><span><span></span>	-lelf-loader <span>\
</span></span></span><span><span><span></span>	-laudsrv <span>\
</span></span></span><span><span><span></span>	-lc <span>\
</span></span></span><span><span><span></span>	-mhard-float <span>\
</span></span></span><span><span><span></span>	-msingle-float <span>\
</span></span></span><span><span><span></span>	-o build/main.elf <span>\
</span></span></span><span><span><span></span>	build/asm_mipsx.o <span>\
</span></span></span><span><span><span></span>	build/go.o
</span></span></code></pre></div><figcaption>
  Easy, no?
</figcaption>
<p>That builds the ELF file. Now let’s load it in the emulator and see what happens!</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-6.png"><figcaption>
      Yeeeeeeeeey!
    </figcaption>
</figure>
<p>Success! 🎉</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-9.png"><figcaption>
      Gotta love memes
    </figcaption>
</figure>
<h2 id="the-ddivu-problem">The DDIVU problem</h2>
<p>While testing some basic functionality, I’ve noticed that <code>fmt.Sprintf</code> didn’t work properly. Look at this very simple basic code:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>func</span> <span>main</span>() {
</span></span><span><span>	<span>debug</span>.<span>Init</span>()
</span></span><span><span>
</span></span><span><span>	<span>for</span> <span>i</span> <span>:=</span> <span>-</span><span>32</span>; <span>i</span> <span>&lt;=</span> <span>32</span>; <span>i</span><span>++</span> {
</span></span><span><span>		<span>debug</span>.<span>Printf</span>(<span>"%02d, "</span>, <span>i</span>)
</span></span><span><span>	}
</span></span><span><span>
</span></span><span><span>	<span>for</span> {
</span></span><span><span>		<span>// Infinite loop to not exit!
</span></span></span><span><span><span></span>	}
</span></span><span><span>}
</span></span></code></pre></div><figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-7.png"><figcaption>
      Errr this is awkward
    </figcaption>
</figure>
<p>Ok, this is not normal. The numbers between <code>-9</code> and <code>+9</code> are correct, while everything else is wrong. This specific problem took me <em>days</em> to figure out what the hell was going on. I eventually narrowed it down to <a href="https://cs.opensource.google/go/go/+/master:src/fmt/format.go;l=243-249?q=fmtinteger&amp;ss=go%2Fgo">this</a> part of the <code>fmtInteger</code> implementation, used by <code>Sprintf</code> inside the <code>fmt</code> package:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>func</span> (<span>f</span> <span>*</span><span>fmt</span>) <span>fmtInteger</span>(<span>u</span> <span>uint64</span>, <span>base</span> <span>int</span>, <span>isSigned</span> <span>bool</span>, <span>verb</span> <span>rune</span>, <span>digits</span> <span>string</span>) {
</span></span><span><span>	<span>// (... bunch of code here ...)
</span></span></span><span><span><span></span>
</span></span><span><span>	<span>switch</span> <span>base</span> {
</span></span><span><span>	<span>case</span> <span>10</span>:
</span></span><span><span>		<span>for</span> <span>u</span> <span>&gt;=</span> <span>10</span> {
</span></span><span><span>			<span>i</span><span>--</span>
</span></span><span><span>			<span>next</span> <span>:=</span> <span>u</span> <span>/</span> <span>10</span>
</span></span><span><span>			<span>buf</span>[<span>i</span>] = byte(<span>'0'</span> <span>+</span> <span>u</span> <span>-</span> <span>next</span><span>*</span><span>10</span>)
</span></span><span><span>			<span>u</span> = <span>next</span>
</span></span><span><span>		}
</span></span><span><span>
</span></span><span><span>	<span>// (... bunch of code here ...)
</span></span></span><span><span><span></span>}
</span></span></code></pre></div><p>Look at how TinyGo is generating the LLVM IR code for that:</p>
<pre tabindex="0"><code>!875 = !DIFile(filename: "format.go", directory: "/usr/local/go/src/fmt")
!15696 = !DILocalVariable(name: "next", scope: !15679, file: !875, line: 243, type: !373)

; (...)

lookup.next:                                      ; preds = %for.body
  %31 = udiv i64 %27, 10, !dbg !15759
    #dbg_value(i64 %31, !15696, !DIExpression(), !15757)
  %.neg = mul i64 %31, 246, !dbg !15760
  %32 = add i64 %27, 48, !dbg !15761
  %33 = add i64 %32, %.neg, !dbg !15762
  %34 = trunc i64 %33 to i8, !dbg !15763
  %35 = getelementptr inbounds i8, ptr %.pn75, i32 %30, !dbg !15758
  store i8 %34, ptr %35, align 1, !dbg !15758
    #dbg_value(i64 %31, !15696, !DIExpression(), !15764)
    #dbg_value(i64 %31, !15684, !DIExpression(), !15765)
  br label %for.loop, !dbg !15700
</code></pre><figcaption>
  Hopefully this is the right section of the code lol
</figcaption>
<p>Which all seems just fine. Looking deeper into it, there’s this specific thing: <code>udiv i64 %27, 10</code> - this is a unsigned division of a 64bit integer by 10. Keep that 64bit part in mind.</p>
<p>This generates the following MIPS assembly code:</p>
<div><pre tabindex="0"><code data-lang="asm"><span><span>.LBB139_23:                             <span># %lookup.next
</span></span></span><span><span><span></span>                                        <span>#   in Loop: Header=BB139_19 Depth=1
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:i &lt;- [DW_OP_plus_uconst 176] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:u &lt;- [DW_OP_plus_uconst 184] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:negative &lt;- [DW_OP_plus_uconst 332] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:digits &lt;- [DW_OP_LLVM_fragment 32 32] 17
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:base &lt;- [DW_OP_plus_uconst 316] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:verb &lt;- [DW_OP_plus_uconst 312] [$sp+0]
</span></span></span><span><span><span></span>	<span>#DEBUG_VALUE: (*fmt.fmt).fmtInteger:digits &lt;- [DW_OP_plus_uconst 308, DW_OP_LLVM_fragment 0 32] [$sp+0]
</span></span></span><span><span><span></span>	<span>.loc</span>	<span>129</span> <span>0</span> <span>7</span> <span>is_stmt</span> <span>0</span>               <span># format.go:0:7
</span></span></span><span><span><span></span>	<span>lw</span>	<span>$1</span>, <span>176</span>(<span>$sp</span>)                    <span># 4-byte Folded Reload
</span></span></span><span><span><span></span>	<span>lw</span>	<span>$4</span>, <span>272</span>(<span>$sp</span>)                    <span># 4-byte Folded Reload
</span></span></span><span><span><span></span>	<span>ld</span>	<span>$3</span>, <span>184</span>(<span>$sp</span>)                    <span># 8-byte Folded Reload
</span></span></span><span><span><span></span>	<span>daddiu</span>	<span>$2</span>, <span>$zero</span>, <span>10</span>
</span></span><span><span>	<span>.loc</span>	<span>129</span> <span>243</span> <span>14</span> <span>is_stmt</span> <span>1</span>            <span># format.go:243:14
</span></span></span><span><span><span></span>	<span>ddivu</span>	<span>$zero</span>, <span>$3</span>, <span>$2</span>
</span></span><span><span>	<span>teq</span>	<span>$2</span>, <span>$zero</span>, <span>7</span>
</span></span><span><span>	<span>mflo</span>	<span>$2</span>
</span></span></code></pre></div><p>Let’s ignore most of this and focus on one specific thing: <code>ddivu $zero, $3, $2</code>. Looks correct, right?</p>
<p>Well… let’s look into how PCSX2 loads this:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-8.png"><figcaption>
      ??????
    </figcaption>
</figure>
<p>Yep. PCSX2 doesn’t see the <code>DDIVU</code> instruction. Or, more specifically, <em>the PlayStation</em>  doesn’t see it.</p>



<p>The <code>DDIVU</code> (doubleword divide unsigned) is a instruction defined in MIPS-III (<a href="https://www.cs.cmu.edu/afs/cs/academic/class/15740-f97/public/doc/mips-isa.pdf">source</a>) responsible for doing the division of 2 unsigned 64bit integers.</p>
<p>However, that doesn’t work in the PS2, as we saw before. You see, the <code>DDIVU</code> instruction is not defined (<a href="https://psi-rockin.github.io/ps2tek/">source</a>) in the PS2 MIPS instruction set - only <code>DIVU</code> is. This introduces a major problem, as now all <code>int64</code> (with <code>DDIV</code>) and <code>uint64</code> (with <code>DDIVU</code>) divisions won’t execute - or will execute incorrectly if it ends up matching some other instruction. We need to avoid that, and either split this division inside the Go compiler in a way that would not do the 64bit version of it, or modify the LLVM so that it won’t use this instruction, even on a <code>mips3</code> CPU. Or maybe we can implement a custom CPU inside the LLVM - the <code>r5900</code>, like ps2dev’s GCC.</p>
<h3 id="finding-a-way-out">Finding a way out</h3>
<p>My first thought was “oh, let’s adapt this in the LLVM”. But, and I’m not gonna lie to you, changing that code is <em>hell</em>. It’s very complex and requires a ton of changes and most of the time it even requires full rebuild of the LLVM project. I’m just too lazy for that. So I’ve opted for the terrible approach of doing this inside TinyGo’s compiler.</p>
<p>The first step is to <em>have</em> a 64bit division code. According to my good friend ChatGPT (<em>who has never been wrong before /s</em>), whenever 64bit division is not available (like in the R5900), GCC uses an auxiliary function called <code>__udivdi3</code>:</p>
<pre tabindex="0"><code>uint64_t __udivdi3(uint64_t a, uint64_t b);
</code></pre><p>So my thought was: oh, I can just map the uint64 division to this then. The first step is to add this as something that is available on our <code>runtime_ps2.go</code> (because I’m too lazy to do the full proper call):</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>//go:build ps2
</span></span></span><span><span><span></span>
</span></span><span><span><span>package</span> <span>runtime</span>
</span></span><span><span>
</span></span><span><span><span>/*
</span></span></span><span><span><span>extern long __divdi3(long a, long b);
</span></span></span><span><span><span>extern unsigned long __udivdi3 (unsigned long a, unsigned long b);
</span></span></span><span><span><span>extern long __moddi3(long a, long b);
</span></span></span><span><span><span>extern unsigned long __umoddi3(unsigned long a, unsigned long b);
</span></span></span><span><span><span>*/</span>
</span></span><span><span><span>import</span> <span>"C"</span>
</span></span><span><span>
</span></span><span><span><span>func</span> <span>int64div</span>(<span>a</span>, <span>b</span> <span>int64</span>) <span>int64</span> {
</span></span><span><span>	<span>return</span> int64(<span>C</span>.<span>__divdi3</span>(<span>C</span>.<span>long</span>(<span>a</span>), <span>C</span>.<span>long</span>(<span>b</span>)))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>uint64div</span>(<span>a</span>, <span>b</span> <span>uint64</span>) <span>uint64</span> {
</span></span><span><span>	<span>return</span> uint64(<span>C</span>.<span>__udivdi3</span>(<span>C</span>.<span>ulong</span>(<span>a</span>), <span>C</span>.<span>ulong</span>(<span>b</span>)))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>int64mod</span>(<span>a</span>, <span>b</span> <span>int64</span>) <span>int64</span> {
</span></span><span><span>	<span>return</span> int64(<span>C</span>.<span>__moddi3</span>(<span>C</span>.<span>long</span>(<span>a</span>), <span>C</span>.<span>long</span>(<span>b</span>)))
</span></span><span><span>}
</span></span><span><span>
</span></span><span><span><span>func</span> <span>uint64mod</span>(<span>a</span>, <span>b</span> <span>uint64</span>) <span>uint64</span> {
</span></span><span><span>	<span>return</span> uint64(<span>C</span>.<span>__umoddi3</span>(<span>C</span>.<span>ulong</span>(<span>a</span>), <span>C</span>.<span>ulong</span>(<span>b</span>)))
</span></span><span><span>}
</span></span></code></pre></div><p>Then, we need to modify TinyGo’s compiler to use it. That is simpler than it sounds - <a href="https://github.com/tinygo-org/tinygo/blob/3e60eeb368f25f237a512e7553fd6d70f36dc74c/compiler/compiler.go#L2514-L2566">it’s all handled here</a>.</p>
<p>Let’s start with the unsigned operations:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> <span>op</span> <span>==</span> <span>token</span>.<span>QUO</span> {
</span></span><span><span>	<span>return</span> <span>b</span>.<span>CreateUDiv</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>} <span>else</span> {
</span></span><span><span>	<span>return</span> <span>b</span>.<span>CreateURem</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>}
</span></span></code></pre></div><p>will then become:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> <span>op</span> <span>==</span> <span>token</span>.<span>QUO</span> {
</span></span><span><span>	<span>if</span> (<span>x</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>x</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) <span>||</span>
</span></span><span><span>		(<span>y</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>y</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>createRuntimeCall</span>(<span>"uint64div"</span>, []<span>llvm</span>.<span>Value</span>{<span>x</span>, <span>y</span>}, <span>""</span>), <span>nil</span>
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>CreateUDiv</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>	}
</span></span><span><span>} <span>else</span> {
</span></span><span><span>	<span>if</span> (<span>x</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>x</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) <span>||</span>
</span></span><span><span>		(<span>y</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>y</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>createRuntimeCall</span>(<span>"uint64mod"</span>, []<span>llvm</span>.<span>Value</span>{<span>x</span>, <span>y</span>}, <span>""</span>), <span>nil</span>
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>CreateURem</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>	}
</span></span><span><span>}
</span></span></code></pre></div><p>Then we just rebuild the TinyGo’s compiler with a <code>make</code>, and rebuild our application. Let’s retest our previous code:</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-11.png"><figcaption>
      Fuck yeah!
    </figcaption>
</figure>
<p>And for our <code>int64</code> operations as well please. From the following code:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> <span>op</span> <span>==</span> <span>token</span>.<span>QUO</span> {
</span></span><span><span>	<span>return</span> <span>b</span>.<span>CreateSDiv</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>} <span>else</span> {
</span></span><span><span>	<span>return</span> <span>b</span>.<span>CreateSRem</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>}
</span></span></code></pre></div><p>we adapt it into this:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>if</span> <span>op</span> <span>==</span> <span>token</span>.<span>QUO</span> {
</span></span><span><span>	<span>if</span> (<span>x</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>x</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) <span>||</span>
</span></span><span><span>		(<span>y</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>y</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>createRuntimeCall</span>(<span>"int64div"</span>, []<span>llvm</span>.<span>Value</span>{<span>x</span>, <span>y</span>}, <span>""</span>), <span>nil</span>
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>CreateSDiv</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>	}
</span></span><span><span>} <span>else</span> {
</span></span><span><span>	<span>if</span> (<span>x</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>x</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) <span>||</span>
</span></span><span><span>		(<span>y</span>.<span>Type</span>().<span>TypeKind</span>() <span>==</span> <span>llvm</span>.<span>IntegerTypeKind</span> <span>&amp;&amp;</span> <span>y</span>.<span>Type</span>().<span>IntTypeWidth</span>() <span>==</span> <span>64</span>) {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>createRuntimeCall</span>(<span>"int64mod"</span>, []<span>llvm</span>.<span>Value</span>{<span>x</span>, <span>y</span>}, <span>""</span>), <span>nil</span>
</span></span><span><span>	} <span>else</span> {
</span></span><span><span>		<span>return</span> <span>b</span>.<span>CreateSRem</span>(<span>x</span>, <span>y</span>, <span>""</span>), <span>nil</span>
</span></span><span><span>	}
</span></span><span><span>}
</span></span></code></pre></div><p>Finally, we can test our changes by doing this:</p>
<div><pre tabindex="0"><code data-lang="go"><span><span><span>debug</span>.<span>Printf</span>(<span>"\n\n"</span>)
</span></span><span><span><span>for</span> <span>i</span> <span>:=</span> int64(<span>-</span><span>8</span>); <span>i</span> <span>&lt;=</span> <span>8</span>; <span>i</span><span>++</span> {
</span></span><span><span>	<span>debug</span>.<span>Printf</span>(<span>"%02d | div02 = %02d | mod04 = %02d\n"</span>, <span>i</span>, <span>i</span><span>/</span><span>2</span>, <span>i</span><span>%</span><span>4</span>)
</span></span><span><span>}
</span></span></code></pre></div><figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-12.png">
</figure>
<p>And with that, we’re done for the 64bit integer problem! Yey!</p>
<blockquote>
<p>Yes, I know, there might be other instructions that are not implemented. Not looking into this now for sure. Also, yes, I didn’t get big-ass numbers, but also I don’t need them now.</p>
</blockquote>
<blockquote>
<p>Spoiler: not doing this on the LLVM level will bite our asses in the future.</p>
</blockquote>
<h2 id="what-now">What now?</h2>
<p>Well, now we need to keep pushing forward! But I need to stop this post at some point so that people can catch up with this project, and also so I can publish these findings. But there’s a lot still to get done:</p>
<ul>
<li>Target-specific things, such as syscalls, inline assembly and interrupt support</li>
<li>Floating points as they are non-functional at the moment</li>
<li>New LLVM MIPS CPU - yes, we’ll probably need that, plus this way we can avoid hacking code inside TinyGo’s compiler</li>
<li>Everything else we want!</li>
</ul>
<p>You may be wondering, “what can I do with it <em>now</em>”? Well, you can do whatever you want, actually. You can call ps2dev’s libraries and play with them, and if something fails, you can just call C code from Go. But your code will be running from the Go side of things first, which is pretty neat in my opinion - even if a bit limited for now.</p>
<p>I’m already working on the next part of this project though, so stay tuned! See you around!</p>
<figure><img src="https://rgsilva.com/blog/ps2-go-part-1/image-13.png"><figcaption>
      👋
    </figcaption>
</figure>
<ul>
  
   <li>
     <a href="https://rgsilva.com/tags/coding/">Coding</a>
   </li>
  
   <li>
     <a href="https://rgsilva.com/tags/embedded/">Embedded</a>
   </li>
  
   <li>
     <a href="https://rgsilva.com/tags/go/">Go</a>
   </li>
  
</ul>

    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I genuinely don't understand why some people are still bullish about LLMs (616 pts)]]></title>
            <link>https://twitter.com/skdh/status/1905132853672784121</link>
            <guid>43498338</guid>
            <pubDate>Thu, 27 Mar 2025 21:22:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/skdh/status/1905132853672784121">https://twitter.com/skdh/status/1905132853672784121</a>, See on <a href="https://news.ycombinator.com/item?id=43498338">Hacker News</a></p>
Couldn't get https://twitter.com/skdh/status/1905132853672784121: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Take this on-call rotation and shove it (174 pts)]]></title>
            <link>https://www.scottsmitelli.com/articles/take-oncall-and-shove-it/</link>
            <guid>43498213</guid>
            <pubDate>Thu, 27 Mar 2025 21:09:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.scottsmitelli.com/articles/take-oncall-and-shove-it/">https://www.scottsmitelli.com/articles/take-oncall-and-shove-it/</a>, See on <a href="https://news.ycombinator.com/item?id=43498213">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><p>The familiar blue and gold intro graphic fills the screen every evening at six o’clock on the dot. The jabbing staccato string music conjures up vague secondhand memories of what a teletype machine might have sounded like. A high angle view of the studio floor with the large Lexan-clad desk in the middle, then a cross dissolve to a two shot of the presenters for this newscast. The music fades, each person introduces themselves, then they jump straight into the top story for the evening. It’s been this way for as long as anybody can remember. They’ve never failed to get this show on the air.</p><p><em>They’ve never failed.</em></p><h2 id="who-you-gonna-call">Who you gonna call?<a href="#who-you-gonna-call" title="Permalink - Who you gonna call?"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>Everything fails all the time.</p></blockquote><p>Producing any sort of live television show is a complex ballet. The studio’s cameras and microphones route their signals into video switchers and audio mixers, pre-taped packages come from the video server, field reporters are connected bidirectionally through a satellite link, and with a sprinkling of pizazz from the motion graphics machine, the final product is sent off to master control and ultimately to all the kitchen counters and family rooms across the city.</p><p>But there are ancillary systems outside of this direct pipeline. The studio lighting is quite important, as most professional broadcast cameras tend to produce underwhelming images under inadequate light. The teleprompters feeding the anchors their scripts are obviously important. The weather reporting segments use an entirely separate system of graphics rendering equipment that must be linked through a chroma keyer to place the meteorologist in front of the computer-generated forecast images. And quite obviously, this equipment requires a handful of human operators.</p><p>Studio-grade equipment is obscenely expensive, but it is also incredibly reliable. It is rare for things to outright fail, but anything can eventually wear out after enough daily use. If a camera fails, perhaps they can wheel the one from the sports desk over to cover this part of the broadcast. If the teleprompters fail, the anchors have a copy of the script at their desk that they can look down at. If one of the anchors calls out sick, they can sub in talent from the morning news team.</p><p>Each of these is an example of either a redundant backup system or spare capacity that can be reallocated if needed. The broadcast technically does not need any of these contingencies to function under normal circumstances, but in cases where things go wrong it can mean the difference between success and total failure.</p><p>Not everything can be made completely redundant. A failure in the power system for the lights will most likely plunge the entire studio into darkness, and that’s no way to run a news program. Similarly, if the $50,000 video switcher dies, it’s highly unlikely that they’ll have a spare holed up in the supply closet. To insure against every possible thing that could ever go wrong, they would have to build a second studio on a separate part of the city’s electric grid, with redundant copies of all the equipment and broadcast content, along with a full crew of understudies ready to take over at a moment’s notice. This is a degree of redundancy that can’t reasonably be achieved by any budget-conscious station.</p><p>There is a hybrid between the two options, allowing the station to only maintain a single instance of anything expensive while having some assurance that the equipment they do have will work when needed: They can find an expert of some sort who is capable of fixing anything that breaks well enough to get the broadcast out. We’ll name this person Alex. If the microphone battery dies, Alex will swap it out. If the video server acts up, Alex knows how to get it working again. If the tire pressure light in the Chevrolet Weather Beast comes on, or the studio’s air conditioning fails, or the technical director breaks both their hands and needs somebody to push the buttons on their behalf, it’s Alex’s time to shine.</p><p>Now, naturally, most of the time everything is going fine and Alex has nothing to do. So Alex has some other regular job in the studio—say running the audio mixer. In fact, the audio mixer thing is their official job title and their primary responsibility at the station; they only jump into universal-problem-solving mode when something goes wrong. As soon as the problem is resolved, it’s back to the audio mixer.</p><p>The other thing about all this is, well, it’s very difficult to find and train people like Alex. So since they are at the station all evening anyway, why not also have them stick around in case anything goes wrong during the 7:00 news, and 11:00? And if anything happens during the 4:30–7 a.m. news, the station can call Alex at home and have them bop over and fix the problem. Oh, and also the news at noon, and the 4 p.m. block. <label for="_margin-note:0"></label><mark> Apparently this station broadcasts six hours of live news programming most days. At least it’s only four hours on Sunday.</mark> In the station’s view, there is no need for anybody to relieve Alex because—most of the time—they never need Alex’s emergency response skills at all. There should be no need to hire and train somebody else to do this stuff because they barely use the services of the person they already have.</p><p>There is, of course, another option that the station has never seriously entertained: Don’t hold Alex to any of those responsibilities at all, and if things really go to hell they can just throw on an old <em>The Price Is Right</em> rerun and hope for better luck during the next scheduled newscast.</p><h2 id="grandpa-whats-a-beeper">Grandpa, what’s a beeper?<a href="#grandpa-whats-a-beeper" title="Permalink - Grandpa, what’s a beeper?"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>1-800-759-7243<br>But if you ain’t got that pin number, dummy, you can’t call me<br>To hook up with Mix you gotta call that number<br>Then sit by the phone and wonder<br>Will he call? If you’re fine I might<br>If you’re a duck, good night</p></blockquote><p>There was a time—not that long ago, really—where people couldn’t contact you if they didn’t know where you were. Telephones were literally screwed into the walls of houses and businesses. Portable two way radios existed, but they were a massive pain to carry around and operate. If somebody wished to contact you, they would not call <em>you</em> specifically but rather <em>your house</em> or <em>your workplace</em>, places where you might or might not have been at the time. If you were not there, maybe they’d try to call your brother’s house, your favorite bar, the Kiwanis club, or another location that was significant to you. If they still couldn’t find you, eventually they’d give up. People used to be more chill in that way.</p><p>In a more structured environment—say a hospital where doctors moved from room to room but stayed inside one building—it was important to be able to get in touch with a specific person without knowing which room they were in. To accomplish this, a phone operator would <strong>page</strong> <label for="_margin-note:1"></label><mark> This verb form of the word “page” uses the same sense as the noun “page,” an old-timey word meaning roughly “servant boy.” I page you in the sense that I am asking <a href="https://en.wikipedia.org/wiki/Kenneth_Parcell" rel="external" data-link-id="wiki-kenneth-parcell">Kenneth, the NBC page from <em>30 Rock</em></a> to send for you.</mark> the desired person via an announcement over the building’s public address speakers: “Paging Dr. Johnson, Dr. Johnson, please call fourth floor nurse station.” Assuming Dr. Johnson was in the building to hear this, they would find a phone and call the station as instructed.</p><p>This worked fine, but it generated a lot of “useless” noise because most of the staff were uninvolved in most of the pages they overheard. Thanks to incremental improvements in technology, the voice announcements were phased out to make way for unidirectional radio broadcasts that covered the entire building. The content of the radio message remained the same as the audible announcement: who the page was for, and who that person needed to contact in response. Each person who needed to receive pages was given a <strong>pager</strong>, a radio receiver that was pre-programmed to only activate in response to pages specifically addressed to it. Each pager contained a small numeric display where the information about who to call could be shown. These were colloquially called <strong>beepers</strong> because, well, they made a beeping sound to announce each incoming page.</p><p>To send a page, a person would pick up one of the building’s telephones and dial the number for the paging system. They would be prompted to enter the recipient’s PIN or unique identification code along with a callback number. If the sender wanted the recipient to call them directly, the callback number would be a phone that the sender was ready to pick up. It didn’t have to be, though. For example, the sender and recipient could have a prearranged system in which a code like “505” could be interpreted as the distress signal SOS with some mutually understood meaning. <label for="_margin-note:2"></label><mark> These codes were more common from senders that the recipient knew well, representing messages they frequently needed to exchange. To a building maintenance worker, “234” could indicate an emergency at 234 Maple Avenue while “5300” could have been 5300 Elm Street. The codes meant what the sender and recipient agreed they meant.</mark></p><p>Technology got better. Things got smaller and faster. The unidirectional pager networks started becoming overshadowed by mobile phone networks which soon gained the ability to send bidirectional SMS messages. Microprocessors advanced to the point where a battery-operated handheld device could serve as a phone that could also send and receive text messages. These advances made it possible to send longer messages using a more expressive character set on a device that also did other things.<label for="_margin-note:3"></label><mark> My very first mobile phone could run a game of Snake that objectively blew. But the capabilities were there.</mark> Phones continued to gain capabilities, the networks they ran on continued to get faster with wider coverage, but the central thread of “I need to get <em>this</em> message to <em>that</em> device” is as clear today as it was when Sir Mix-A-Lot was courting his lady friends in the 1980s.</p><p>Also, the systems described up to this point had one thing in common: The person sending the page was a human being.</p><h2 id="getting-on-the-same-page">Getting on the same page<a href="#getting-on-the-same-page" title="Permalink - Getting on the same page"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p><strong>Dude:</strong> They gave Dude a beeper, so whenever these guys call—</p><p><strong>Walter:</strong> What if it’s during a game?</p><p><strong>Dude:</strong> Oh, I told them if it was during league play…</p><p><strong>Donny:</strong> What’s during league play?</p><p><strong>Walter:</strong> Life does not stop and start at your convenience, you miserable piece of shit.</p></blockquote><p>Like a disheartening number of things in the tech industry, there are no real standards around what <strong>on-call</strong> responsibilities look like. Each organization<label for="_margin-note:4"></label><mark> And each team within!</mark> is free to set things up in whichever way suits their tastes, and the resulting practices vary widely as a result. In order to ground this article in something concrete, I will describe Alex’s on-call arrangement, which seems to be typical for US companies whose business model is “Have a website and/or mobile app, and either put ads all over it or convince the users to enter their credit card information somewhere to use it.” The prevailing attitude of these organizations is that the product must work at all times, otherwise it results in failure to show an ad or collect a payment. Both of these negatively affect revenue.</p><p>Alex’s company uses the <strong>SEV</strong> system, which might<label for="_margin-note:5"></label><mark> Again, no standards. Somebody copied part of the philosophy from Amazon or Facebook or someplace but never bothered to codify exactly what the abbreviation meant to them.</mark> mean “<strong>sev</strong>erity,” “<strong>s</strong>ite <strong>ev</strong>ent,” “<strong>s</strong>ignificant <strong>ev</strong>ent,” “<strong>s</strong>erious <strong>ev</strong>ent,” or anything else you might care to contrive that matches the pattern. SEVs are further divided into numbered classes depending on their impact on the product experience; a SEV 1 means that the business is currently failing to be a business because it is unable to perform its core functions and/or collect its revenue. The lesser SEV 3 might represent degraded performance on some non-critical portion of the application. <label for="_margin-note:6"></label><mark> An example of a SEV 3 might be a situation where users can still change their profile pictures, but those changes are not showing up promptly in the app due to some kind of processing delay. This will <em>probably</em> not impact the quarterly financial statement in a measurable way. An instance of a SEV 1, on the other hand, might entail the mobile app showing a perpetual loading spinner on every request to every user at once. That type of thing tends to get noticed.</mark></p><p>Below the SEV system, there is a bubbling churn of things that are subtly broken, or are well on the way to someday being definitely broken, but are fine for the time being. A good example of this would be a disk that is 98% full. In its current state, nothing is actually wrong. But once it finally becomes 100% full and cannot accept any more data, something else in the system is going to respond poorly and this can likely cascade into some kind of SEV. Most systems in most organizations have monitoring in place for this sort of thing, and it is common for an on-call engineer to receive pages due to (e.g.) high disk usage to investigate specifically to avoid a potential SEV in the future. Practically all pages of this nature are generated and sent through automated means, and these pages can sometimes resolve themselves without outside intervention if (e.g.) the disk usage abates naturally.</p><p>The on-call engineer in Alex’s department is selected out of a <strong>rotation</strong> of all the team members. The on-call <strong>shift</strong> is seven consecutive days of 24-hour support, or 168 solid hours.<label for="_margin-note:7"></label><mark> ±1 hour depending on how daylight saving time shakes out.</mark> The on-call engineer does not need to stay awake for seven straight days; the idea is that they’re supposed to work on typical tasks during business hours and go about their non-work lives as usual, but be able to jump into handling an issue quickly after receiving any page at any time. The “quickly” part is formally defined as <strong>time to acknowledge</strong>, and durations from 5 to 30 minutes are fairly typical. Alex’s team expects pages to be acknowledged within 15 minutes.</p><p>If a page is not acknowledged by the on-call engineer, a system of <strong>escalation</strong> begins. The escalation policy usually follows one of these patterns:</p><ul><li>If there is only a single on-call engineer, the page may escalate to them again. This re-raises the original alert in case it was somehow missed the first time.</li><li>In a “primary/secondary” type of arrangement, there are actually two people on-call at any given moment. All pages go to the primary, and only unacknowledged pages escalate to the secondary. If the secondary doesn’t acknowledge the page either, it may escalate further as described by the other bullet points here.</li><li>In a “hunt group” configuration, an unacknowledged page is sent to every member of the team—none of whom are officially on-call at the moment—in the hopes that one of them is free to acknowledge and handle the issue. This arrangement has a strong tendency to break down into one of two degenerate states:<ol><li>One or a few people naturally become highly responsive to all pages, acknowledging them before most of their teammates have the opportunity to do so. Over time, most of the team members stop paying attention to pages and leave their highly-responsive peers to handle everything that comes in.</li><li>Something very close to the <a href="https://en.wikipedia.org/wiki/Bystander_effect" rel="external" data-link-id="wiki-bystander-effect">bystander effect</a> occurs, where everybody in the group assumes somebody else will acknowledge the page, and ultimately nobody steps up to do it. This deadlock is broken when somebody (perhaps a team lead or supervisor) tags a specific team member and tasks them with taking ownership of the issue.</li></ol></li></ul><p>In each of the setups described above, the team’s manager may or may not be part of the escalation chain. If they are, it adds a whole new layer to the on-call calculus: Nobody wants their unacknowledged pages to end up notifying their manager, especially outside of working hours. Alex’s team uses the “single on-call engineer” model with escalation to the manager.</p><p>On-call shifts occur one week out of every <em>N</em> weeks, where <em>N</em> is the number of people on the team. <label for="_margin-note:9"></label><mark> For primary/secondary arrangements, the shift frequency is <em>two</em> weeks out of <em>N</em>, even though one of those weeks will ideally see few or zero pages. Still, the secondary must remain fully available during that time.</mark> If there are fifteen people on a team, each person will barely need to cover one shift per quarter. On a team of two, each person is on-call <em>every other week.</em> This is a substantial source of variability, and it can change suddenly as team members go on vacation, take personal leave, or part ways with the team or company. Alex works in a department of four, resulting in an on-call shift approximately once a month.</p><p>Sometimes life interferes with on-call scheduling, and for those times there is usually a mechanism for team members to trade partial or complete on-call shifts between themselves. If the active on-call engineer needs a few uninterrupted hours to attend a family function or unavoidable appointment, they can seek out a peer who is willing to cover the responsibility for that time. At some future date, the favor can be reciprocated when that other person is on-call and needs somebody to cover for them.</p><p>When an engineer receives a page and needs to do unplanned work in response to it, that work is called on-call <strong>load</strong>. Each organization has an expected amount of on-call load for each shift. Or rather, they’re <em>supposed</em> to, but it’s not surprising to find places that have never given the idea any serious thought. If an excessive number of issues occur and the load exceeds the expectations for the shift, it becomes on-call <strong>pain</strong>.<label for="_margin-note:10"></label><mark> <a href="https://reviews.pagerduty.com/definitions/" rel="external" data-link-id="pagerduty-definitions">True fact.</a> Why would I make that up?</mark> Pages that occur outside of regular working hours are considered more painful than those that occur during weekdays.</p><p>As far as what the on-call engineer needs to do during <strong>incident response</strong>—the time between acknowledging a page and resolving the issue that caused it—this is another area of huge variance. Sometimes they’ll need to log into some web UI and click one button. Sometimes they’ll spend ten straight hours trying to resuscitate a completely inaccessible product. <label for="_margin-note:11"></label><mark> A team may experience both ends of the load spectrum from one week to another just by luck of the draw.</mark></p><p>Occasionally the on-call engineer will be faced with a situation that is objectively unfixable. Sometimes <a href="https://aws.amazon.com/message/41926/" rel="external" data-link-id="aws-2017-outage">a critical piece of AWS’s entire us-east-1 region fails</a>, ultimately hobbling a significant chunk of the internet along with it. Sometimes <a href="https://www.datacenterknowledge.com/security-and-risk-management/after-sandy-datagram-recovers-from-apocalyptic-flood" rel="external" data-link-id="datacenterknowledge-after-sandy">33 Whitehall loses generator power</a> after Superstorm Sandy drowns its fuel pumps in seawater. Alex’s company has worked very hard to cut down on operational costs by farming out a bit too much of its core functionality to a third party with bad customer support turnaround times, whose outages then become Alex’s outages by proxy. In instances like these, sometimes the on-call engineer just has to throw up their hands in defeat. Other than simply waiting out the problem, the only other feasible option would be to undertake some over-ambitions migration to an entirely different provider. That’s not something that anybody can do in any kind of reasonable time frame, and doing it under the duress of a service outage would be unwise at best. At a certain point, the best Alex can do is turn on <em>The Price Is Right</em> and wait for things to blow over.</p><p>Now, obviously, on-call duty is by no means a job requirement that is specific to the tech industry. Doctors and surgeons can be on-call. The building superintendent for an apartment complex can be on-call. The guy who fixes air conditioners can be on-call. The difference is that the people in those industries are fairly compensated for doing it.</p><h2 id="wait-you-guys-are-getting-paid">Wait, you guys are getting paid?<a href="#wait-you-guys-are-getting-paid" title="Permalink - Wait, you guys are getting paid?"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>Work work work, day after day<br>Fifty hour week, forty hour pay<br>No time to get over all this overtime<br>Yeah I’m always runnin’, but I’m always runnin’ behind</p></blockquote><p>There are ways of looking at employee wages in the US that are elegantly simple. An employee is hired at a rate of $<em>X</em>/hour, they work for <em>Y</em> hours in a week, and the total pay is the product of those two numbers. There is a minimum wage at the federal and possibly state level that sets the smallest legal amount for $<em>X</em>. The employee should work a maximum <em>Y</em> of 40 hours in that week, otherwise they enter an <strong>overtime</strong> situation where their hourly $<em>X</em> becomes $<em>X</em> and a half. Those highfalutin white collar workers are basically the same, except their <em>Y</em> is fixed at 40 hours regardless of the time actually worked so their total pay stays the same week after week. That’s how it all works, right?</p><p>This is the system laid out in the <strong><a href="https://en.wikipedia.org/wiki/Fair_Labor_Standards_Act_of_1938" rel="external" data-link-id="wiki-fair-labor-standards-act">Fair Labor Standards Act of 1938</a></strong> (FLSA) and its many amendments. This is the law that underpins concepts like minimum wage, overtime, the 40-hour work week, and the notion that child labor probably isn’t such a good thing to do. It also defines a set of <strong>exemptions</strong> to the rules, thus creating the concept of an <strong>exempt employee</strong>. If you are a US-based tech worker in a full-time position, I’m going to take a stab in the dark and assume that you are almost certainly classified as an exempt employee. This means that the FLSA’s protections <em>effectively do not exist for you.</em> You are not guaranteed overtime, and you could conceivably work so many hours over the course of a week that your effective hourly rate ends up less than minimum wage. <label for="_margin-note:15"></label><mark> Now I’m wondering if an employer could get away with hiring child labor by classifying them as exempt employees. I would guess not, or somebody out there would be doing it right now.</mark></p><p>The FLSA is designed with repetitive and predictable work in mind: Somebody who works on an assembly line, or who moves boxes around in a warehouse, drivers and couriers, et cetera. Workers in these sorts of jobs have a tendency to produce a similar and predictable amount of work in any given hour. Drop in on them during one hour of the workday and you’ll observe roughly the same level of productivity that you would find from them at any other hour.</p><p>Employees who are exempt from the FLSA tend to have variability in their workday. The original thinking was that this would apply to executives and highly-skilled professionals who performed such a wide range of tasks throughout the day that some hours were markedly more valuable than others. These sensibilities changed and eventually morphed into “white collar jobs that paid a lot.” The current regulations specifically list <a href="https://www.dol.gov/agencies/whd/fact-sheets/17e-overtime-computer" rel="external" data-link-id="dol-17e-overtime-computer">computer-related occupations</a> in their list of exempted fields. And from a certain angle, if you really squint, it makes sense! Think of hours where you have pounded out hundreds of lines of code, then compare it to hours where you sat in a conference room staring at a blinking text insertion cursor instead of paying attention to the presenter. Sometimes you’ll make no progress towards a thorny challenge during the course of an entire workday, which might be completely offset by a single spark of creative inspiration while washing the dishes later that night.</p><p>All this to say, there is nothing in the regulations of the United States that can protect Alex from working more than 40 hours in a week. There is no requirement that overtime be paid to them. If the work requires more than 40 hours in a week, oh well, sucks to be Alex. <label for="_margin-note:17"></label><mark> This means that technically Alex could work fewer than 40 hours by applying the same logic, assuming they get all their necessary work done. They have been meaning to work up the nerve to try to pull that one day.</mark></p><p>So. With that bit of background out of the way, it’s clear that there is no legal or regulatory requirement for an employer to pay anything for performing on-call duties as long as the responsibility is given to an exempt employee. Based on my own experiences and informal polling of others in the industry, the prevailing attitude is that on-call is part of the job description and “baked in” with the total compensation. It’s not at all unusual to find on-call shifts that receive no additional payment or consideration for carrying the pager. There is also usually nothing extra paid for responding to a page that occurs outside of regular working hours.</p><p>And again, there are no absolute rules about this. Some places actually do pay a modest honorarium for each on-call shift worked. Some will provide “unofficial” compensatory time<label for="_margin-note:18"></label><mark> And if your employer gives comp time, a small question for you: Do they <em>also</em> reduce the amount of sprint story points they expect you to work through when you take it?</mark> to balance out a page handled outside of typical business hours. Legends are told of organizations where the teams are staffed adequately and the systems simply don’t page. Just imagine a magical place where a person is only on-call for like three weeks a year, and who never gets paged during those times. Alex, who once spent an entire summer being on-call every other week while occasionally fielding a dozen pages in the span of a single day, cannot.</p><p>Most places won’t even provide a phone or subsidize a mobile carrier bill, nor will they provide a company-paid mobile hotspot for laptop tethering purposes. It’s just assumed that you’ll happily install PagerDuty or Opsgenie or some other hateful app that violates the sanctity of your personal device, right there on the home screen next to Okta Verify.<label for="_margin-note:19"></label><mark> A brief tangent: Fuck Okta Verify.</mark> Your personal phone becomes your pager, the thing that pulls you out of leisure time and into work time. After a while, you might start to notice on-call beginning to fundamentally change your relationship with the device.</p><p>The absolute largest source of variability comes from a team’s willingness to improve the on-call situation as opposed to simply accepting that things are the way they’re meant to be. Some teams view every page—no matter how trivial—as a signal that something needs to be immediately fixed to prevent that specific thing from <em>ever</em> happening again. Other teams view it as something that just happens as a natural consequence of supporting a product, like a smoke detector battery chirp that everybody has learned to tune out over the course of several years. It is the manifestation of technical debt that has been boiling for years, looking for a pressure relief valve to escape through, and it just happens to keep finding its release through Alex’s pager.</p><p>Perhaps unsurprisingly, the teams that are most willing to defend against recurring pages are also the most likely to actually perform in-depth postmortems so they can write and maintain their on-call runbooks. Sometimes the runbook is the only friend an on-call engineer has, and there’s nothing more disappointing than discovering that this friend can’t help fix anything.</p><h2 id="168-long-cold-lonely-hours">168 long, cold, lonely hours<a href="#168-long-cold-lonely-hours" title="Permalink - 168 long, cold, lonely hours"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>All I wanna do all day is spend it in bed<br>But that’s bad for the body and even worse for my head<br>So I’ll try and find a place where no one will ask me a thing<br>It’ll help me to forget and help me to sing</p></blockquote><p>A page can conceivably come at any time, day or night. Alex needs to receive the alert and begin working on the issue within fifteen minutes, which means they must have a suitable work computer and sufficient internet connectivity available within that time commitment. They must remain cognizant of their phone’s signal quality and the availability of nearby Wi-Fi networks. Unless they take their bulky work laptop with them, <label for="_margin-note:20"></label><mark> By the way, not everybody lives in a perfectly idyllic area. There are plenty of places where computers get stolen from parked cars and bags get snatched. Carrying this stuff around is a <em>genuine risk</em> for people in some situations.</mark> it’s not possible to travel anywhere that takes more than a few minutes to return from.</p><p>Even certain household tasks—cutting the lawn for example—require special consideration. If a page arrives during that activity, Alex needs to put the mower away to a certain extent <label for="_margin-note:21"></label><mark> In some areas, as above, an unattended mower might get swiped. In others, it could lead to an HOA fine.</mark> before going inside to clean up enough to do knowledge work. It’s mentally taxing to jump from domestic labor to complex problem-solving, and it’s equally difficult to go back when the issue is finally resolved.</p><p>It turns out that there are many things in life that are technically compatible with an on-call shift, but which require such delicate planning and forethought that it sometimes ends up being easier to just not bother doing any of that stuff during an on-call week. No significant travel or long walks/drives, no excessive drinking or <em>*ahem*</em>, no ability to simply unplug and decompress. Even if a page never actually comes, there is always the <em>potential</em> for a page to come. Maybe the primary on-call turned off their phone without telling anybody to attend a screening of <em>Oppenheimer</em>.<label for="_margin-note:22"></label><mark> Actually happened.</mark> Maybe there’s time to quickly run to the grocery store and back, but it might be cutting it close. Maybe it’s better to just stay home until the end of the week. Park in front of the TV and run out the clock. But don’t watch anything too engrossing; getting paged right during the good part really sucks.</p><p>This has a tendency to happen eventually, even at organizations where the expected on-call load is near zero. It’s not possible to live life completely normally while staying prepared to handle any page at any time. It would perhaps be hyperbolic to compare the experience to that of being placed under house arrest, but it’s the closest a lot of us will ever get to experiencing that level of freedom-yet-confinement.</p><p>And, of course, when a page does come, it manages to find the most inopportune time to do so. Alex has been paged during nice dinners, in the middle of live entertainment, and at times that rightly should’ve been devoted to time with family members and friends. Not to mention that alert sound, and the notification box on the phone’s lock screen. Alex’s phone became a source of resentment and negative emotions to the point where they basically had to disable almost every other sound and all other notifications because their heart jumped every time one popped up. Alex won’t go as far as to say it caused PTSD, but it sure led to a fair number of the <em>symptoms</em> of PTSD.</p><p>Also, it regularly ruined my sleep. Whoops, I meant Alex’s sleep. I’m not Alex. Nope.</p><p>Sometimes pages decide to come during overnight hours. Here’s what happens when a page occurs in the middle of the night: First, if you happen to have a significant other, the alert sound invariably wakes them up before it wakes you. You get out of bed. It’s dark. It’s cold. You open your work laptop. Even at its lowest brightness setting, the 16-inch Liquid Retina XDR display lights up the room with its blinding intensity. You log into your email and Slack, open some dashboards, open Okta Verify on your phone,<label for="_margin-note:23"></label><mark> Fuck Okta Verify.</mark> and you’ve basically done everything you usually do at 9 a.m. on a regular workday. Six hours before you’re supposed to be here, you’re here. Still half asleep—no sense having any caffeine if the intention is to try to go back to bed after this is over—this is really not the right kind of headspace to be in while poking at unfamiliar and on-fire code on production systems. And since it’s the middle of the night, nobody else is here to help diagnose or double-check anything. There would be a kind of palpable loneliness here, if you had the mental acuity to notice it. Maybe you’ll manually page somebody else to come and help. Or maybe you can’t bear the thought of being the one responsible for spreading this on-call pain onto them.</p><p>Eventually the problem gets resolved one way or another. You close the laptop and try to quietly return to bed. Your significant other (if applicable) is awoken again by this. You end up lying there for a while, unable to go to sleep due to the mental exertion, the light from the computer screen, and a fair bit of leftover adrenaline. May as well just stay awake; the issue probably isn’t actually fixed and it’ll likely page again in a few minutes anyway.</p><p>Hey, you know what this sounds like? Anxiety! On-call basically causes anxiety. And if you’re a person who <em>already has</em> anxiety due to some other preexisting reason, congratulations! Now you have extra anxiety. And for what? Because some Kafka broker stopped running?</p><h2 id="we-need-to-talk-about-kafka">We need to talk about Kafka<a href="#we-need-to-talk-about-kafka" title="Permalink - We need to talk about Kafka"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>I thought that since Kafka was a system optimized for writing, using a writer’s name would make sense. I had taken a lot of lit classes in college and liked Franz Kafka. Plus the name sounded cool for an open source project.</p></blockquote><p>Jay Kreps contributed to the technology that would eventually become <strong><a href="https://kafka.apache.org/" rel="external" data-link-id="apache-kafka">Apache Kafka</a></strong> while he was working at LinkedIn. Very broadly, Kafka can be thought of as a message queue that accepts data from one side and sends it out to one or many interested parties on the other side. Unlike a typical queue it also persists this stream of messages on disk so that delivery can be deferred, batched, or even repeated at some future date. At scale, it may be tasked with handling such an immense volume of data that the operation of the system becomes a major pain in the ass.</p><p>Part of this operational difficulty is caused by the fact that Kafka runs on multiple discrete computers that must constantly cooperate with each other to behave as a single larger system.<label for="_margin-note:25"></label><mark> Much like the Borg in <em>Star Trek</em>. But Google already <a href="https://en.wikipedia.org/wiki/Borg_%28cluster_manager%29" rel="external" data-link-id="wiki-borg-cluster-manager">took that name</a>.</mark> If any of the members of the cluster of computers become disconnected or degraded, the performance and stability of the entire group is impacted. If an organization runs Kafka in production, there is a very good chance it is routinely paging somebody due to low disk space, processing lag, or other inscrutable gremlins.</p><p>The sheer quantity of data that Kafka wants to write to its disks, as alluded to in the Kreps quote above, is what led to its name. Apache Kafka writes a lot, just like author Franz Kafka did. Surely there is no reason to think any further about this.</p><p><strong>Franz Kafka</strong> created literary worlds in which unbearably absurd things happen for seemingly no reason and people are expected to simply endure them as if nothing out of the ordinary is going on. His environments only <em>partially</em> make sense, producing bureaucracies that defy any attempt at comprehension. The protagonists in his stories feel alienated and isolated. A queasy undercurrent of anxiousness and sometimes outright horror runs through his whole oeuvre. The author was likely neurotic, he destroyed approximately 90% of everything he ever wrote, then he died well ahead of when he probably should have—leaving several substantial works unfinished. In this regard, Apache Kafka shares some similarities.</p><p><em>That</em> is how you justify the project’s name. Saying “I took some literature classes in college and I thought I remembered liking them” is just intellectually lazy.</p><h2 id="important-meaningless-things--meaningful-unimportant-things">Important meaningless things / Meaningful unimportant things<a href="#important-meaningless-things--meaningful-unimportant-things" title="Permalink - Important meaningless things / Meaningful unimportant things"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p><strong>Jesse:</strong> Look, I like making cherry product, but let’s keep it real, alright? We make poison for people who don’t care. We probably have the most unpicky customers in the world.</p></blockquote><p>I am going to pose what might sound like an unthinkable question: <em>Is this important?</em></p><p>My question is sincere. Does this service or product fulfill a need so critical that there is a legitimate reason to always keep one or more human beings on-call for it? <label for="_margin-note:26"></label><mark> Or my personal favorite, usually offered by engineers trying to pull one another back into the <a href="https://en.wikipedia.org/wiki/Crab_mentality" rel="external" data-link-id="wiki-crab-mentality">crab bucket</a>, which goes something like: “Don’t you think you should be responsible for your own code that you have put into production?” The proper response to this, of course, is “What <em>my</em> code? We are a team; this is <em>our</em> code.” Or, probably a more healthy view, “This is <em>the</em> code.” The production system in question is almost certainly a schizophrenic box of compromises brought about through poor decision-making, unaddressed technical debt, design-by-committee, and impossible timelines and budgets. This is not a system that any single rational human being on the team would’ve chosen to build if permitted to do so alone. Trying to assert ownership over an environment like that is just begging to get your shit rocked.</mark> Will the business suffer a significant loss in sales due to an outage? Will they break a contractual service-level agreement (SLA) and expose themselves to legal liability if the outage exceeds a certain threshold? Will they lose the goodwill of customers if the product is unavailable for too long? Do the customers have other options if they get upset with the reliability of the product? Is it even feasible for them to switch to those competitors? Can an unaddressed issue lead to loss of life or property damage?</p><p>The answer to at least one of those questions is probably automatically “yes,” which justifies the use of any means the organization deems appropriate to avoid risks. Like an adult sternly barking “because I said so,” the conversation is supposed to end here. On-call is important because it’s important. The mere idea of questioning that axiom brings almost certain trouble, so few people dare prying further.</p><p>But it is worth prying. If there are no firm SLAs, it’s hard to justify why the “time to acknowledge” expectations are set the way they are. How much additional customer goodwill does the organization earn by adding one more <a href="https://en.wikipedia.org/wiki/High_availability#%22Nines%22" rel="external" data-link-id="wiki-high-availability-nines">nine</a> of availability? What is customer goodwill actually worth in the first place?<label for="_margin-note:28"></label><mark> Is it worth more or less than the long term mental well-being of the engineering staff and the eventual turnover incurred by burning them all out?</mark></p><p>Each of these perspectives boil down to the same thing: The business might lose money (either from uncaptured revenue or due to penalties) if somebody is not around all the time to handle any technical fault that may occur. It then follows that this person—this lowly on-call engineer—is like an insurance policy that can prevent a larger calamity.</p><p>But here’s the key difference: Insurance policies have <em>premiums that cost something.</em> The insured entity can’t just hand-wave the cost away by smearing the responsibility across a bunch of exempt employees who have the words “and other duties as assigned” at the end of their job descriptions. Handling on-call load is work. Modifying life outside of business hours to make them compatible with <em>potential</em> on-call load is work. On-call pain is tantamount to a large volume of work. Work should be compensated, especially if that work is such a critical part of the organization’s risk mitigation plan. If it’s not important enough to fairly compensate the people who have to shoulder the on-call load, why is it important enough to base the success of the business on?</p><p>“Importance” really is the key to thinking about all of this. Some might hold the opinion that if an engineer is not on-call as a part of their regular duties, they clearly must not be working on anything very important. I propose to look at it a different way. To understand this perspective, you’ll need to go deep into the forgotten corner of your closet and find <em>That Cage.</em> You know, That Cage you have worked so long and so hard to trap your imposter syndrome in. Go ahead and pull That Cage out for a minute. Lift off the bed sheet that’s been covering it up. Stare deeply into the dark, haunting eyes of that demon. Once comfortable in each other’s presence, ask your imposter syndrome a simple question: If this was actually important to the success of the organization, why did they trust <em>us</em> with it?</p><h2 id="something-for-the-pain">Something for the pain<a href="#something-for-the-pain" title="Permalink - Something for the pain"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p><strong>Bart:</strong> Milhouse, how could you let this happen? You were supposed to be the night watchman!</p><p><strong>Milhouse:</strong> I was watching. I saw the whole thing. First it started falling over, then it fell over.</p></blockquote><p>Obviously, there are ways to support a product that don’t involve putting staff on-call outside of working hours. The so-called “follow the sun” paradigm pretty accurately describes itself—the team is distributed around the world and the product is supported by whichever part of the globe is in daylight at that time. To do this perfectly fairly, there should be a minimum of three teams each separated by eight hours of timezone distance. When it’s 5 p.m. in Chicago and folks are preparing to go home, it’s 9 a.m in Melbourne. When the Aussies are done for the day, it’s a new workday in Lviv and the sun is rising over Dublin. <label for="_margin-note:29"></label><mark> This doesn’t provide perfectly fair coverage during weekends or holidays, but see below for some ideas about that. Or, just close during those times. Banks and financial institutions all do it, and they seem to be doing fine!</mark> At any given point during the course of the day, there is some team that is already awake and already within working hours that can handle things without pulling somebody out of their slumber.</p><p>If there is no other option than to require on-call support outside working hours, consider making it voluntary. Now I know what you’re going to say to that: If it’s voluntary, nobody will want to do it. And that is absolutely the point. Nobody wants to do it because it freakin’ sucks. It’s not a good deal. So it’s the organization’s responsibility to sweeten that deal enough for somebody to consider taking it. Pay people something for taking an on-call shift. Either a per-day or per-week stipend, or something like the equivalent of one hour’s pay for every four hours on-call. Saying “well, you’re already making plenty of money with your engineer’s salary so that should count” ain’t the way to do it at all.</p><p>On-call staff should also be paid something each time they respond to a page, especially when it occurs outside of working hours. If simply <em>being available</em> is worth a flat-rate stipend, actually having to jump into a firefight should be worth something even greater than that. Because if not, it implies that a span of unbearable on-call pain endured by person <em>A</em> is exactly equivalent to an uncharacteristically tranquil week enjoyed by person <em>B</em> at a different time. This is not fair to either of these people or the team as a whole.</p><p>Making the business pay to page staff will certainly change the timbre of the on-call load. Nothing cleans up noisy, flapping, inactionable pager alerts quicker than making them expensive to generate.</p><p>In a distant past life, this was proposed and shot down with the following rationale, which I distinctly remember as being one of the stupidest things I have ever heard somebody in my management chain say. Paraphrasing: “If on-call engineers were to receive compensation for each incident they resolved, it would incentivize them to intentionally build systems that fail so they could increase their pay by increasing their on-call load.” My guy, that is <em>sabotage</em> and <em>fraud</em>. You are hypothesizing a scenario where your subordinates are committing actual crimes. If somebody is doing <em>criminal acts</em> at work, fire their ass! Not to mention that anybody who deliberately self-inflicts on-call load is a goddamn idiot and should be sacked just on that basis alone.</p><p>There is also the radical option of simply leaving certain spans of the day/week uncovered, with nobody officially on-call during those hours. If something fails, let it fail for a while and then deal with it during support hours. Sometimes a large and visceral production incident needs to bubble up to senior management’s attention in order to rally together the willpower to actually pay down some of the technical debt that led to the problem. If all the engineers know that the product is a wobbly tower of paperclips and duct tape, perhaps the people seated at the very top of the infernal structure should get to see exactly how precarious the whole thing really is from time to time. It’s rather easy to put up a fake facade of perfect customer-facing uptime, and it’s also surprisingly easy to conceal the damage done to the employees who are tasked with carrying the weight of that facade on their backs. At least until they all become disillusioned and quit, anyway.</p><p>Something to bear in mind is that you, as the employee, have a certain voice here. You can ask potential employers during the interview stage how they do on-call, and withdraw yourself from consideration if you don’t like the answer they give. You can tell them flatly that this is your reason for not wanting to work there. You can leave a job if on-call is cramping your style or ruining your life, and you can tell the exit interviewer exactly this. If you’re at a place that’s thinking about formally adopting on-call, you can dig your heels in and either demand compensation for it or refuse to do it. Will your employer respect the boundaries you’re drawing? There’s really only one way to find out.</p><p>If you find yourself negotiating a job, try to get a line in the employment agreement that specifically disallows unpaid after-hours on-call shenanigans. Remember, negotiating isn’t just about arguing over compensation numbers, you can try to haggle over material job duties and expectations. Push back on the non-compete and non-solicitation clauses while you’re at it, and the overreaching intellectual property assignment, all that crap. <label for="_margin-note:30"></label><mark> Have you ever redlined a contract? It might be worth giving it a shot someday!</mark> And I won’t go as far as to say that tech workers should unionize or anything like that, but I will say that it seems like a whole lot of employers in this industry specifically do not want their employees to unionize. There’s probably a reason they’re apprehensive about it, and that reason almost certainly benefits the employers and not the rest of us.</p><p>And it’s <em>scary</em> to stand up for principles like this, which is likely a big part of why on-call duties get successfully foisted on so many unfortunate people. I can’t promise this won’t lead to an uncomfortable and fruitless conversation, or a burned bridge, or a pay cut, or months of unemployment. All I can say is that you—<em>you</em> specifically—are worth something. Your time is worth something, just like your mental health and physical well-being. Your employer spent money hiring you, and they would need to spend money to replace you with another hire. Unless you are absolutely useless or a complete dickhead, losing you would negatively affect your team’s morale and output. Your manager has to go through the performance review cycle just like you do, and losing a direct report is not a good look for them. You have a voice and you have some leverage. It’s up to you what you do with it.</p><h2 id="sleeping-through-the-night">Sleeping through the night<a href="#sleeping-through-the-night" title="Permalink - Sleeping through the night"><svg viewBox="0 0 16 16" width="16" height="16"><path d="m7.78 3.27 1.25-1.25a3.5 3.5.0 114.95 4.96l-2.5 2.5a3.5 3.5.0 01-4.95.0.75.75.0 01.01-1.05.75.75.0 011.05-.01 2 2 0 002.83.0l2.5-2.5a2 2 0 00-2.83-2.84L8.84 4.33a.75.75.0 01-1.05-.01.75.75.0 01-.01-1.05zm-4.7 9.64a2 2 0 002.83.0l1.25-1.24a.75.75.0 011.05.01.75.75.0 01.01 1.05l-1.24 1.25A3.5 3.5.0 112.03 9.03l2.5-2.5a3.5 3.5.0 014.95.0.75.75.0 01-.02 1.04.75.75.0 01-1.05.02 2 2 0 00-2.82.0l-2.5 2.5a2 2 0 000 2.83z"></path></svg></a></h2><blockquote><p>But it’s a five o’clock world when the whistle blows<br>No one owns a piece of my time<br>And there’s a five o’clock me inside my clothes<br>Thinking that the world looks fine, yeah</p></blockquote><p>Earlier, when I asked if this was important, I suspect that most readers answered from the perspective of the company. Of course it’s important, why wouldn’t it be? But now I’m asking <em>you</em>, specifically. Is this important <em>to you?</em></p><p>I suspect that a fair number of readers are going to feel that what I wrote is naive, overly cynical, too idealistic, or simply incompatible with the realities of modern business expectations. Perhaps this article will be perceived as a handbook for how to become embittered and then get fired. But detached from all of that, in the innate nature of almost every human that participates in these systems, this can’t possibly sit right. Why do we accept this plainly abusive practice? Why do we go above and beyond to forfeit the enjoyment of our free time to an organization that is unwilling to reciprocate in any meaningful way? To an organization that is perhaps <em>incapable</em> of reciprocating?</p><p>It turns out that there are all kinds of different people out there. Some are young (or young at heart) and have nothing better to do outside of work than party and pass out drunk. For them, on-call might be almost fun, like that invigorating feeling somebody might get when they sign up for stage crew in high school and get to screw around in the building after all the other students and staff have gone home and it’s weird and empty. Others have complicated home lives with difficult caretaking situations and really do not need to be dealing with yet another source of stress and anxiety in an existence that is already a hair’s breadth from going completely off the rails. Some people simply do not care about work when they’re not physically there; they clock in, work for the day, then clock out. There is nothing inherently wrong with trying to limit the encroachment of work into life. Each of these people have different priorities, different needs, different values and principles. It is not fair to blindly shoehorn them all into the same on-call rotation and pretend they are going to respond to it the same way.</p><p>On average, most of us get around 4,000 weeks of life on this earth. If you’re exceptionally fortunate, you might make it to 5,000. How many of those weeks do you want to spend in the shadow of a pager?</p><p>When I was just shy of 2,000 weeks old, I suffered through a particularly acute week of on-call pain. At one point I was in my third or fourth video call about the same long and protracted smoldering SEV and, in a moment of frustrated weakness, I made an offhand comment about just being <em>tired</em> of repeatedly handling the same problem. My manager was present on the call, and my statement seemed to really set him off. I was essentially told that my feelings about the situation—perhaps the only authentic part of myself I ever expressed there—were wrong. In the days that followed I was made to feel like I was not a team player, that I was not pulling my weight, and that I was not meeting the bare minimum of what was expected of a person bearing the torch of on-call. With the utterance of a single sentence, I opened a rift in the relationship with my manager that remained until the day I left that job.</p><p>But I meant what I said. I mean it now more than ever: I have been paged enough.</p><a href="https://www.scottsmitelli.com/articles/" title="Articles">«&nbsp;Back to Articles</a></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Learning Theory from First Principles [pdf] (179 pts)]]></title>
            <link>https://www.di.ens.fr/~fbach/ltfp_book.pdf</link>
            <guid>43497954</guid>
            <pubDate>Thu, 27 Mar 2025 20:45:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.di.ens.fr/~fbach/ltfp_book.pdf">https://www.di.ens.fr/~fbach/ltfp_book.pdf</a>, See on <a href="https://news.ycombinator.com/item?id=43497954">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
    </channel>
</rss>