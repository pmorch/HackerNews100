<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 28 Sep 2024 21:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[The perils of transition to 64-bit time_t (145 pts)]]></title>
            <link>https://blogs.gentoo.org/mgorny/2024/09/28/the-perils-of-transition-to-64-bit-time_t/</link>
            <guid>41681266</guid>
            <pubDate>Sat, 28 Sep 2024 16:31:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blogs.gentoo.org/mgorny/2024/09/28/the-perils-of-transition-to-64-bit-time_t/">https://blogs.gentoo.org/mgorny/2024/09/28/the-perils-of-transition-to-64-bit-time_t/</a>, See on <a href="https://news.ycombinator.com/item?id=41681266">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-2218">
	<!-- .entry-header -->

	
	
	<div>
		<p>In the <a href="https://blogs.gentoo.org/mgorny/2024/09/23/overview-of-cross-architecture-portability-problems/">Overview of cross-architecture portability problems</a>, I have dedicated a section to the problems resulting from use of 32-bit <kbd>time_t</kbd> type.  This design decision, still affecting Gentoo systems using glibc, means that 32-bit applications will suddenly start failing in horrible ways in 2038: they will be getting <kbd>-1</kbd> error instead of the current time, they won’t be able to <kbd>stat()</kbd> files.  In one word: complete mayhem will emerge.</p>
<p>There is a general agreement that the way forward is to change <kbd>time_t</kbd> to a 64-bit type.  Musl has already switched to that, glibc supports it as an option.  A number of other distributions such as Debian have taken the leap and switched.  Unfortunately, source-based distributions such as Gentoo don’t have it that easy.  So we are still debating the issue and experimenting, trying to figure out a maximally safe upgrade path for our users.</p>
<p>Unfortunately, that’s nowhere near trivial.  Above all, we are talking about a breaking ABI change.  It’s all-or-nothing.  If a library uses <kbd>time_t</kbd> in its API, everything linking to it needs to use the same type width.  In this post, I’d like to explore the issue in detail — why is it so bad, and what we can do to make it safer.<br>
<span id="more-2218"></span></p>
<h2>Going back to Large File Support</h2>
<p>Before we get into the time64 change, as I’m going to shortly call it, we need to go back in history a bit and consider another similar problem: Large File Support.</p>
<p>Long story short, originally 32-bit architectures specify two important file-related types that were 32 bits wide: <kbd>off_t</kbd> used to specify file offsets (signed to support relative offsets) and <kbd>ino_t</kbd> used to specify inode numbers.  This had two implications: you couldn’t open files larger than 2&nbsp;GiB, and you couldn’t open files whose inode numbers exceeded 32-bit unsigned integer range.</p>
<p>To resolve this problem, Large File Support was introduced.  It involved replacing these two types with 64-bit variants, and on glibc it is still optional today.  In its case, we didn’t take the leap and transitioned globally.  Instead, packages generally started enabling LFS support upstream — also taking care to resolve any ABI breakage in the process.  While many packages did that, we shouldn’t consider the problem solved.</p>
<p>The important point here is that time64 support in glibc requires LFS to be used.  This makes sense — if we are going to break stuff, we may as well solve both problems.</p>
<h2>What ABIs are we talking about?</h2>
<p>To put it simply, we have three possible sub-ABIs here:</p>
<ol>
<li>the original ABI with 32-bit types,</li>
<li>LFS: 64-bit <kbd>off_t</kbd> and <kbd>ino_t</kbd>, 32-bit <kbd>time_t</kbd>,</li>
<li>time64: LFS + 64-bit <kbd>time_t</kbd>.</li>
</ol>
<p>What’s important here is that a single glibc build remains compatible with all three variants.  However, libraries that use these types in their API are not.</p>
<p>Today, 32-bit systems roughly use a mix of the first and second ABI — the latter including packages that enabled LFS explicitly.  For the future, our goal is to focus on the third option.  We are not concerned about providing full-LFS systems with 32-bit <kbd>time_t</kbd>.</p>
<h2>Why the ABI change is so bad?</h2>
<p>Now, the big deal is that we are replacing a 32-bit type with a 64-bit type, in place.  Unlike with LFS, glibc does not provide any transitional API that could be used to enable new functions while preserving backwards compatibility — it’s all-or-nothing.</p>
<p>Let’s consider structures.  If a structure contains <kbd>time_t</kbd> with its natural 32-bit alignment, then there’s no padding for the type to extend to.  Inevitable, all fields will have to shift to make room for the new type.  Let’s consider a trivial example:</p>
<pre>struct {
    int a;
    time_t b;
    int c;
};</pre>
<p>With 32-bit <kbd>time_t</kbd>, the offset of <kbd>c</kbd> is 8.  With the 64-bit type, it’s 12.  If you mix binaries using different <kbd>time_t</kbd> width, they’re inevitably are going to read or wrong the wrong fields!  Or perhaps even read or write out of bounds!</p>
<p>Let’s just look at the size of <kbd>struct stat</kbd>, as an example of structure that uses both file and time-related types.  On plain 32-bit x86 glibc it’s 88 byte long.  With LFS, it’s 96 byte long (size and inode number fields are expanded).  With LFS + time64, it’s 108 byte long (three timestamps are expanded).</p>
<p>However, you don’t even need to use structures.  After all, we are talking about x86 where function parameters are passed on stack.  If one of the parameters is <kbd>time_t</kbd>, then positions of all parameters on stack change, and we find ourselves seeing the exact same problem!  Consider the following prototype:</p>
<pre>extern void foo(int a, time_t b, int c);</pre>
<p>Let’s say we’re calling it as <kbd>foo(1, 2, 3)</kbd>.  With 32-bit types, the call looks like the following:</p>
<pre>	pushl	$3
	pushl	$2
	pushl	$1
	call	foo@PLT</pre>
<p>However, with 64-bit <kbd>time_t</kbd>, it changes to:</p>
<pre>	pushl	$3
	pushl	$0
	pushl	$2
	pushl	$1
	call	foo@PLT</pre>
<p>An additional 32-bit value (zero) is pushed between the “old” <kbd>b</kbd> and <kbd>c</kbd>.  Once again, if we mix both kinds of binaries, they are going to fail to read the parameters correctly!</p>
<p>So yeah, it’s a big deal.  And right now, there are no real protections in place to prevent mixing these ABIs.  So what you actually may get is runtime breakage, potentially going as far as to create security issues.</p>
<p>You don’t have to take my word for it.  You can reproduce it yourself on x86/amd64 easily enough.  Let’s take the more likely case of a time32 program linked against a library that has been rebuilt for time64:</p>
<pre>$ cat &gt;libfoo.c &lt;&lt;EOF
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

void foo(int a, time_t b, int *c) {
   printf("a = %d\n", a);
   printf("b = %lld", (long long) b);
   printf("%s", ctime(&amp;b));
   printf("c = %d\n", *c);
}
EOF
$ cat &gt;foo.c &lt;&lt;EOF
#include &lt;stddef.h&gt;
#include &lt;time.h&gt;

extern void foo(int a, time_t b, int *c);

int main() {
    int three = 3;
    foo(1, time(NULL), &amp;three);
    return 0;
}
EOF
$ cc -m32 libfoo.c -shared -o libfoo.so
$ cc -m32 foo.c -o foo -Wl,-rpath,. libfoo.so
$ ./foo
a = 1
b = 1727154919
Tue Sep 24 07:15:19 2024
c = 3
$ cc -m32 -D_FILE_OFFSET_BITS=64 -D_TIME_BITS=64 \
  libfoo.c -shared -o libfoo.so
$ ./foo 
a = 1
b = -34556652301432063
Thu Jul 20 06:16:17 -1095054749
c = 771539841</pre>
<p>On top of that, the source-first nature of Gentoo amplifies these problems.  An average binary distribution rebuilds all binary packages — and then the user upgrades the system in a single, relatively atomic step.  Sure, if someone uses third-party repositories or has locally built programs that link to system libraries, problems can emerge but the process is relatively safe.</p>
<p>On the other hand, in Gentoo we are talking about rebuilding <kbd>@world</kbd> while breaking ABI in place.  For a start, we are talking around prolonged periods of time between two packages being rebuilt when they would actually be mixing incompatible ABI.  Then, there is a fair risk that some rebuild will fail and leave your system half-transitioned with no easy way out.  Then, there is a real risk that cyclic dependencies will actually make rebuild impossible — rebuilding a dependency will break build-time tools, preventing stuff from being rebuilt.  It’s a true horror.</p>
<h2>What can we do to make it safer?</h2>
<p>Our deliberations currently revolve about three ideas, that are semi-related, though not inevitably dependent one upon another:</p>
<ol>
<li>Changing the platform tuple (<kbd>CHOST</kbd>) for the new ABIs, to clearly distinguish them from the baseline 32-bit ABI.</li>
<li>Changing the libdir for the new ABIs, effectively permitting the rebuilt libraries to be installed independently of the original versions.</li>
<li>Introducing an binary-level ABI distinction that could prevent binaries using different sub-ABI to be linked to one another.</li>
</ol>
<p>The subsequent sections will focus on each of these changes in detail.  Note that all the values used there are just examples, and not necessarily the strings used in a final solution.</p>
<h2>The platform tuple change</h2>
<p>The platform tuple (generally referenced through the <kbd>CHOST</kbd> variable) identifies the platform targeted by the toolchain.  For example, it is used as a part of GCC/binutils install paths, effectively allowing toolchains for multiple targets to be installed simultaneously.  In clang, it can be used to switch between supported cross-compilation targets, and can control the defaults to match the specified ABI.  In Gentoo, it is also used to uniquely identify ABIs for the purpose of multilib support.  Because of that, we require that no two co-installable ABIs share the same tuple.</p>
<p>A tuple consists of four parts, separated by hyphens: architecture, vendor, operating system and libc.  Of these, vendor is generally freeform but the other three are restricted to some degree.  A few semi-equivalent examples of tuples used for 32-bit x86 platform include:</p>
<pre>i386-pc-linux-gnu
i686-pc-linux-gnu
i686-unknown-linux-gnu</pre>
<p>Historically, two approaches were used to introduce new ABIs.  Either the vendor field was changed, or an additional ABI specification was appended to the libc field.  For example, Gentoo historically used two different kind of tuples for ARM ABIs with hardware floating-point unit:</p>
<pre>armv7a-hardfloat-linux-gnueabi
armv7a-unknown-linux-gnueabihf</pre>
<p>The former approach was used earlier, to avoid incompatibility problems resulting from altering other tuple fields.  However, as these were fixed and upstreams normalized on the latter solution, Gentoo followed suit.</p>
<p>Similarly, the discussion of time64 ABIs resurfaced the same dilemma: should we just “abuse” the vendor field for this, or instead change libc field and fix packages?  The main difference is that the former is “cleaner” as a downstream solution limited to Gentoo, while the latter generally opens up discussions about interoperability.  Therefore, the options look like:</p>
<pre>i686-gentoo_t64-linux-gnu
i686-pc-linux-gnut64
armv7a-gentoo_t64-linux-gnueabihf
armv7a-unknown-linux-gnueabihft64</pre>
<p>Fortunately, changing the tuple should not require much patching.  The GNU toolchain and GNU build system both ignore everything following “gnu” in the libc field.  Clang will require patching — but upstream is likely to accept our patches, and we will want to make patches anyway, as they will permit clang to automatically choose the right ABI based on the tuple.</p>
<h2>The libdir change</h2>
<p>The term “libdir” refers to the base name of the library install directory.  Having different libdirs, and therefore separate library install directories, makes it possible to build multilib systems, i.e. installing multiple ABI variations of libraries on a single system, and making it possible to run executables for different ABIs.  For example, this is what makes it possible to run 32-bit x86 executables on amd64 systems.</p>
<p>The libdir values are generally specified in the ABI.  Naturally, the baseline value is plain <kbd>lib</kbd>.  As a historical convention (since 32-bit architectures were first), usually 32-bit platforms (arm, ppc, x86) use <kbd>lib</kbd>, whereas their more modern 64-bit counterparts (amd64, arm64, ppc64) use <kbd>lib64</kbd> — even if a particular architecture never really supported multilib on Gentoo.</p>
<p>Architectures that support multiple ABIs also define different libdirs.  For example, the additional x32 ABI on x86 uses <kbd>libx32</kbd>.  MIPS n32 ABI uses <kbd>lib32</kbd> (with plain <kbd>lib</kbd> defining the o32 ABI).</p>
<p>Now, we are considering changing the libdir value for time64 variants of 32-bit ABIs, for example from <kbd>lib</kbd> to <kbd>libt64</kbd>.  This would make it possible to install the rebuilt libraries separately from the old libraries, effectively bringing three advantages:</p>
<ol>
<li>reducing the risk of time64 executables accidentally linking to time32 libraries,</li>
<li>enabling Portage’s <kbd>preserved-libs</kbd> feature to preserve time32 libraries once the respective packages have been rebuilt for time64, and before their reverse dependencies have been rebuilt,</li>
<li>optionally, making it possible to use a time32 + time64 multilib profiles, that could be used to preserve compatibility with prebuilt time32 applications linking to system libraries.</li>
</ol>
<p>In my opinion, the second point is a killer feature.  As I’ve mentioned before, we are talking about the kind of migration that would break executables for a prolonged time on production systems, and possibly break build-time tools, preventing the rebuild from proceeding further.  By preserving original libraries, we are minimizing the risk of actual breakage, since the existing executables will keep using the time32 libraries until they are rebuilt and linked to the time64 libraries.</p>
<p>The libdir change is definitely going to require some toolchain patching.  We may want to also consider special-casing glibc, as the same set of glibc libraries is valid for all of the sub-ABIs we were considering.  However, we will probably want a separate <kbd>ld.so</kbd> executable, as it would need to load libraries from the correct libdir, and then we will want to set <kbd>.interp</kbd> in time64 executables to reference the time64 <kbd>ld.so</kbd>.</p>
<p>Note that due to how multilib is designed in Gentoo, a proper multilib support for this (i.e. the third point) requires a unique platform tuple for the ABI as well — so that specific aspect is dependent on the tuple change.</p>
<h2>Ensuring binary incompatibility</h2>
<p>In general, you can’t mix binaries using different ABIs.  For example, if you try to link a 64-bit program to a 32-bit library, the linker will object:</p>
<pre>$ cc foo.c libfoo.so 
/usr/lib/gcc/x86_64-pc-linux-gnu/14/../../../../x86_64-pc-linux-gnu/bin/ld: libfoo.so: error adding symbols: file in wrong format
collect2: error: ld returned 1 exit status</pre>
<p>Similarly, the dynamic loader will refuse to use a 32-bit library with 64-bit program:</p>
<pre>$ ./foo 
./foo: error while loading shared libraries: libfoo.so: wrong ELF class: ELFCLASS32</pre>
<p>There a few mechanisms that are used for this.  As demonstrated above, architectures with 32-bit and 64-bit ABIs use two distinct ELF classes (<kbd>ELFCLASS32</kbd> and <kbd>ELFCLASS64</kbd>).  Additionally, some architectures use different machine identifiers (<kbd>EM_386</kbd> vs. <kbd>EM_X86_64</kbd>, <kbd>EM_PPC</kbd> vs. <kbd>EM_PPC64</kbd>).  The x32 bit ABI on x86 “abuses” this by declaring its binaries as <kbd>ELFCLASS32 + EM_X86_64</kbd> (and therefore distinct from <kbd>ELFCLASS32 + EM_386</kbd> and from <kbd>ELFCLASS64 + EM_X86_64</kbd>).</p>
<p>Both ARM and MIPS use the flags field (it is a bit-field with architecture-specific flags) to distinguish different ABIs (hardfloat vs. softfloat, n32 ABI on MIPS…).  Additionally, both feature a dedicated attribute section — and again, the linker refuses to link incompatible object files.</p>
<p>It may be desirable to implement a similar mechanism for time32 and time64 systems.  Unfortunately, it’s not a trivial task.  It doesn’t seem that there is a reusable generic mechanism that could be used for that.  On top of that, we need a solution that would fit a fair number of different architectures.  It seems that the most reasonably solution right now would be to add a new ELF note section dedicated to this feature, and implement complete toolchain support for it.</p>
<p>However, whatever we decide to do, we need to take into consideration that the user may want to disable it.  Particularly, there is a fair number of prebuilt software that have no sources available, and it may continue working correctly against system libs, provided it does not call into any API using <kbd>time_t</kbd>.  The cure of unconditionally preventing them from working might be worse than the disease.</p>
<p>On the bright side, it should be possible to create a non-fatal QA check for this without much hacking, provided that we go with separate libdirs.  We can distinguish time64 executables by their <kbd>.interp</kbd> section, pointing to the dynamic loader in the appropriate libdir, and then verify that time32 programs will not load any libraries from <kbd>libt64</kbd>, and that time64 programs will not load any libraries directly from <kbd>lib</kbd>.</p>
<h2>What about old prebuilt applications?</h2>
<p>So far we were concerned about packages that are building from sources.  However, there is still a fair number of old applications, usually proprietary, that are available only as prebuilt binaries — particularly for x86 and PowerPC architectures.  These packages are going to face two problems: firstly, compatibility issues with system libraries, and secondly, the y2k38 problem itself.</p>
<p>For the compatibility problem, we have a reasonably good solution already.  Since we already had to make them work on amd64, we have a multilib layout in place, along with necessary machinery to build multiple library versions.  In fact, given that the primary purpose of multilib is compatibility with old software, it’s not even clear if there is much of a point in switching amd64 multilib to use time64 for 32-bit binaries.  Either way, we can easily extend our multilib machinery to distinguish the regular <kbd>abi_x86_32</kbd> target from <kbd>abi_x86_t64</kbd> (and we probably should do that anyway), and then create new multilib x86 profiles that would support both ABIs.</p>
<p>The second part is much harder.  Obviously, as soon as we’re past the 2038 cutoff date, all 32-bit programs — using system libraries or not — will simply start failing in horrible ways.  One possibility is to work with <a rel="external" href="https://github.com/wolfcw/libfaketime">faketime</a> to control the system clock.  Another is to run a whole VM that’s moved back in time.</p>
<h2>Summary</h2>
<p>As 2038 is approaching, 32-bit applications exercising 32-bit <kbd>time_t</kbd> are up to stop working.  At this point, it is pretty clear that the only way forward is to rebuild these applications with 64-bit <kbd>time_t</kbd> (and while at it, force <abbr title="Large File Support">LFS as well).  Unfortunately, that’s not a trivial task since it involves an ABI change, and mixing time32 and time64 programs and libraries can lead to horrible runtime bugs.</abbr></p>
<p>While the exact details are still in the making, the proposed changes revolve around three ideas that can be implemented independently to some degree: changing the platform tuple (<kbd>CHOST</kbd>), changing libdir and preventing accidentally mixing time32 and time64 binaries.</p>
<p>The tuple change is mostly a more formal way of distinguishing builds for the regular time32 ABI (e.g. <kbd>i686-pc-linux-gnu</kbd>) from ones specifically targeting time64 (e.g. <kbd>i686-pc-linux-gnut64</kbd>).  It should be relatively harmless and easy to carry out, with minimal amount of fixing necessary.  For example, clang will need to be updated to accept new tuples.</p>
<p>The libdir change is probably the most important of all, as it permits a breakage-free transition, thanks to Portage’s <kbd>preserved-libs</kbd> feature.  Long story short, time64 libraries get installed to a new libdir (e.g. <kbd>libt64</kbd>), and the original time32 libraries remain in <kbd>lib</kbd> until the applications using them are rebuilt.  Unfortunately, it’s a bit harder to implement — it requires toolchain changes, and ensuring that all software correctly respects libdir.  The extra difficulty is that with this change alone, the dynamic loader won’t ignore time32 libraries if e.g. <kbd>-Wl,-rpath,/usr/lib</kbd> is injected somewhere.</p>
<p>The incompatibility part is quite important, but also quite difficult.  Ideally, we’d like to stop the linker from trying to accidentally link time32 libraries with time64 programs, and likewise the dynamic loader from trying to load them.  Unfortunately, so far we weren’t able to come up with a realistic way of doing that, short of actually making some intrusive changes to the toolchain.  On the positive side, writing a QA check to detect accidental mixing at build time shouldn’t be that hard.</p>
<p>Doing all three should enable us to provide a clean and relatively safe transition path for 32-bit Gentoo systems using glibc.  However, these only solve problems for packages built from source.  Prebuilt 32-bit applications, particularly proprietary software like old games, can’t be helped that way.  And even if time64 changes won’t break them via breaking the ABI compatibility with system libraries, then year 2038 will.  Unfortunately, there does not seem to be a good solution to that, short of actually running them with faked system time, one way or another.</p>
<p>Of course, all of this is still only a rough draft.  A lot may still change, following experiments, discussion and patch submission.</p>
<h2>Acknowledgements</h2>
<p>I would like to thank the following people for proof-reading and suggestions, and for their overall work towards time64 support in Gentoo: Arsen Arsenović, Andreas K. Hüttel, Sam James and Alexander Monakov.</p>
	</div><!-- .entry-content -->

	<!-- .entry-footer -->
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Role of Deliberate Practice in the Development of Creativity (2014) (137 pts)]]></title>
            <link>https://repositories.lib.utexas.edu/server/api/core/bitstreams/c8cc4a4f-e641-462b-9a72-654e60f71485/content</link>
            <guid>41680156</guid>
            <pubDate>Sat, 28 Sep 2024 13:35:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://repositories.lib.utexas.edu/server/api/core/bitstreams/c8cc4a4f-e641-462b-9a72-654e60f71485/content">https://repositories.lib.utexas.edu/server/api/core/bitstreams/c8cc4a4f-e641-462b-9a72-654e60f71485/content</a>, See on <a href="https://news.ycombinator.com/item?id=41680156">Hacker News</a></p>
&lt;Not HTML&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Remember That DNA You Gave 23andMe? (130 pts)]]></title>
            <link>https://www.theatlantic.com/health/archive/2024/09/23andme-dna-data-privacy-sale/680057/</link>
            <guid>41679994</guid>
            <pubDate>Sat, 28 Sep 2024 13:05:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theatlantic.com/health/archive/2024/09/23andme-dna-data-privacy-sale/680057/">https://www.theatlantic.com/health/archive/2024/09/23andme-dna-data-privacy-sale/680057/</a>, See on <a href="https://news.ycombinator.com/item?id=41679994">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><header data-event-module="hero"><div><div><p>The company is in trouble, and anyone who has spit into one of the company’s test tubes should be concerned.</p></div><div><figure><div data-flatplan-lead_figure_media="true"><picture><img alt="Color illustration of a giant double helix in a shopping basket" sizes="(min-width: 976px) 976px, 100vw" srcset="https://cdn.theatlantic.com/thumbor/dwhsnYACFAvfTQqvJU1jM0Wf33E=/0x0:2000x1125/750x422/media/img/mt/2024/09/DNA_worth_final/original.jpg 750w, https://cdn.theatlantic.com/thumbor/MLFiD4XYUzOY1K7S38OlTGj-uiM=/0x0:2000x1125/828x466/media/img/mt/2024/09/DNA_worth_final/original.jpg 828w, https://cdn.theatlantic.com/thumbor/WwkP2L9X1IgqS4qdxVv8Q3N_b40=/0x0:2000x1125/960x540/media/img/mt/2024/09/DNA_worth_final/original.jpg 960w, https://cdn.theatlantic.com/thumbor/M2GrcZbd_Bu2ZtfNk2Dj8vNTPKc=/0x0:2000x1125/976x549/media/img/mt/2024/09/DNA_worth_final/original.jpg 976w, https://cdn.theatlantic.com/thumbor/RhYugbaHCEY3uJ7BVHhLlEx1-i4=/0x0:2000x1125/1952x1098/media/img/mt/2024/09/DNA_worth_final/original.jpg 1952w" src="https://cdn.theatlantic.com/thumbor/WwkP2L9X1IgqS4qdxVv8Q3N_b40=/0x0:2000x1125/960x540/media/img/mt/2024/09/DNA_worth_final/original.jpg" id="article-lead-image" width="960" height="540"></picture></div><figcaption data-flatplan-lead_figure_caption="true">Illustration by Akshita Chandra / The Atlantic. Source: Getty.</figcaption></figure></div></div><div><p><time datetime="2024-09-27T19:38:43Z" data-flatplan-timestamp="true">September 27, 2024, 3:38 PM ET</time> </p></div><gpt-ad format="injector" sizes-at-0="mobile-wide" targeting-pos="injector-article-start" sizes-at-976="desktop-wide"></gpt-ad></header><div data-view-action="view - audio player - start" data-view-label="680057" data-event-module="audio player" data-event-content-type="narrated" data-event-module-state="start" data-event-view="true"><div><p><img alt="Color illustration of a giant double helix in a shopping basket" sizes="80px" srcset="https://cdn.theatlantic.com/thumbor/rwZx92FyPVT1ymZXOiILr4G0yhI=/468x0:1593x1125/80x80/media/img/mt/2024/09/DNA_worth_final/original.jpg 80w, https://cdn.theatlantic.com/thumbor/565G5BewAZ5UlhVeki_2SFXer4s=/468x0:1593x1125/96x96/media/img/mt/2024/09/DNA_worth_final/original.jpg 96w, https://cdn.theatlantic.com/thumbor/Si6PbOzrASQN205HpG0efjDuUFk=/468x0:1593x1125/128x128/media/img/mt/2024/09/DNA_worth_final/original.jpg 128w, https://cdn.theatlantic.com/thumbor/UVKXXysPaBSYqrDpsrqe0iH82HI=/468x0:1593x1125/160x160/media/img/mt/2024/09/DNA_worth_final/original.jpg 160w, https://cdn.theatlantic.com/thumbor/rhx86PEA9BXeL5Iw7gasrTkgSrQ=/468x0:1593x1125/192x192/media/img/mt/2024/09/DNA_worth_final/original.jpg 192w, https://cdn.theatlantic.com/thumbor/JBZed8stnKCET-WqjFwspCXJitE=/468x0:1593x1125/256x256/media/img/mt/2024/09/DNA_worth_final/original.jpg 256w, https://cdn.theatlantic.com/thumbor/c3TQ4Kv3aJ35PrqkiFwJaJptexc=/468x0:1593x1125/384x384/media/img/mt/2024/09/DNA_worth_final/original.jpg 384w, https://cdn.theatlantic.com/thumbor/TMpuUFZOmyFXWaQgM47TfQQY_Wg=/468x0:1593x1125/512x512/media/img/mt/2024/09/DNA_worth_final/original.jpg 512w" src="https://cdn.theatlantic.com/thumbor/rwZx92FyPVT1ymZXOiILr4G0yhI=/468x0:1593x1125/80x80/media/img/mt/2024/09/DNA_worth_final/original.jpg" width="80" height="80"></p></div><p>Produced by ElevenLabs and News Over Audio (NOA) using AI narration.</p></div><section data-event-module="article body" data-flatplan-body="true"><p data-flatplan-paragraph="true">23andMe is <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2024-08-08/23andme-s-quarterly-sales-miss-estimates-as-ceo-seeks-control?srnd=undefined">not doing well</a>. Its stock is on the verge of being delisted. It shut down its in-house drug-development unit last month, only the latest in several rounds of layoffs. Last week, the <a data-event-element="inline link" href="https://www.theguardian.com/technology/2024/sep/18/23andme-directors-resign">entire board of directors</a> quit, save for Anne Wojcicki, a co-founder and the company’s CEO. Amid this downward spiral, Wojcicki <a data-event-element="inline link" href="https://www.reuters.com/markets/deals/23andme-ceo-wojcicki-open-third-party-takeover-proposals-firm-filing-shows-2024-09-11/">has said</a> she’ll consider selling 23andMe—which means the DNA of 23andMe’s 15 million customers would be up for sale, too.</p><p data-flatplan-paragraph="true">23andMe’s trove of genetic data might be its most valuable asset. For about two decades now, since human-genome analysis became quick and common, the A’s, C’s, G’s, and T’s of DNA have allowed long-lost relatives to connect, <a data-event-element="inline link" href="https://www.theatlantic.com/health/archive/2024/03/dna-tests-incest/677791/">revealed family secrets</a>, and helped police catch serial killers. Some people’s genomes contain clues to what’s making them sick, or even, <a data-event-element="inline link" href="https://www.bloomberg.com/news/features/2024-05-15/23andme-s-dna-test-drama-shows-limits-of-what-genetics-can-do">occasionally</a>, how their disease should be treated. For most of us, though, consumer tests don’t have much to offer beyond a snapshot of our ancestors’ roots and confirmation of the traits we already know about. (Yes, 23andMe, my eyes <em>are</em> blue.) 23andMe is floundering in part because it hasn’t managed to prove the value of collecting all that sensitive, personal information. And potential buyers may have very different ideas about how to use the company’s DNA data to raise the company’s bottom line. This should concern anyone who has used the service.</p><p data-flatplan-paragraph="true">DNA might contain health information, but unlike a doctor’s office, 23andMe is not bound by the health-privacy law HIPAA. And the company’s <a data-event-element="inline link" href="https://www.23andme.com/legal/privacy/full-version/">privacy policies</a> make clear that in the event of a merger or an acquisition, customer information is a salable asset. 23andMe promises to ask its customers’ permission before using their data for research or targeted advertising, but that doesn’t mean the next boss will do the same. It says so right there in the fine print: The company reserves the right to update its policies at any time. A spokesperson acknowledged to me this week that the company can’t fully guarantee the sanctity of customer data, but said in a statement that “any scenario which impacts our customer's data would need to be carefully considered. We take the privacy and trust of our customers very seriously, and would strive to maintain commitments outlined in our Privacy Statement.”</p><p data-flatplan-paragraph="true"><a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2023-12-05/the-risks-of-sharing-your-dna-with-genetic-testing-firms-like-23andme?embedded-checkout=true">Certain parties</a> might take an obvious interest in the secrets of Americans’ genomes. Insurers, for example, would probably like to know about any genetic predispositions that might make you more expensive to them. In the United States, a <a data-event-element="inline link" href="http://www.ginahelp.org/">2008 law</a> called the Genetic Information Nondiscrimination Act protects against discrimination by employers and health insurers on the basis of genetic data, but <a data-event-element="inline link" href="https://www.fastcompany.com/3055710/if-you-want-life-insurance-think-twice-before-getting-genetic-testing">gaps in it</a> exempt providers of life, disability, and long-term-care insurance from such restrictions. That means that if you have, say, a genetic marker that can be correlated with a heart condition, a life insurer could find that out and legally deny you a policy—even if you never actually develop that condition. Law-enforcement agencies rely on DNA data to solve many difficult cases, and although 23andMe says it requires a warrant to share data, <a data-event-element="inline link" href="https://www.gedmatch.com/join-the-genetic-witness-program/">some other companies</a> <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2019-02-01/major-dna-testing-company-is-sharing-genetic-data-with-the-fbi">have granted</a> broad access to police. You don’t have to commit a crime to be affected: Because we share large chunks of our genome with relatives, your DNA could be used to implicate a close family member or even a third cousin whom you’ve never met. Information about your ethnicity can also be sensitive, and that’s encoded in your genome, too. That’s all part of why, in 2020, the U.S. military <a data-event-element="inline link" href="https://www.army.mil/article/232314/osd_advises_service_members_against_using_dtc_genetic_testing">advised</a> its personnel against using consumer tests.</p><p id="injected-recirculation-link-0" data-view-action="view link - injected link - item 1" data-event-element="injected link" data-event-position="1"><a href="https://www.theatlantic.com/science/archive/2018/07/big-pharma-dna/566240/">Read: Big Pharma would like your DNA</a></p><p data-flatplan-paragraph="true">Spelling out all the potential consequences of an unknown party accessing your DNA is impossible, because scientists’ understanding of the genome is still evolving. Imagine drugmakers trolling your genome to find out what ailments you’re at risk for and then targeting you with ads for drugs to treat them. “There’s a lot of ways that this data might be misused or used in a way that the consumers couldn’t anticipate when they first bought 23andMe,” Suzanne Bernstein, counsel at the Electronic Privacy Information Center, told me. And unlike a password that can be changed after it leaks, once your DNA is out in the wild, it’s out there for good.</p><p data-flatplan-paragraph="true">Some states, <a data-event-element="inline link" href="https://privacyrights.org/resources/genetic-information-privacy-act-california#:~:text=The%20Genetic%20Information%20Privacy%20Act,with%20access%20and%20deletion%20rights.">such as California,</a> give consumers additional genetic-privacy rights and might allow DNA data to be deleted ahead of a sale. The 23andMe spokesperson told me that “customers have the ability to download their data and delete their personal accounts.” Companies are also required to notify customers of any changes to terms of service and give them a chance to opt out, though typically such changes take effect automatically after a certain amount of time, whether or not you’ve read through the fine print.</p><p data-flatplan-paragraph="true">Consumers have assumed this risk without getting much in return. When the first draft of the human genome was unveiled, it was billed as a panacea, hiding within its code secrets that would help each and every one of us unlock a personalized health plan. But <a data-event-element="inline link" href="https://www.bloomberg.com/news/features/2024-05-15/23andme-s-dna-test-drama-shows-limits-of-what-genetics-can-do">most diseases</a>, it turns out, can't be pinned on a single gene. And most people have a boring genome, free of red-flag mutations, which means DNA data just <a data-event-element="inline link" href="https://www.bloomberg.com/news/features/2024-05-15/23andme-s-dna-test-drama-shows-limits-of-what-genetics-can-do">aren’t that useful</a> to them—at least not in this form. And if a DNA test reveals elevated risk for a more common health condition, such as diabetes and heart disease, you probably already know the interventions: eating well, exercising often, getting a solid eight hours of sleep. (To an insurer, though, even a modicum of risk might make someone an unattractive candidate for coverage.) That’s likely a big part of why 23andMe’s sales have slipped. There are only so many people who want to know about their Swedish ancestry, and that, it turns out, is consumer DNA testing’s biggest sell.</p><p id="injected-recirculation-link-1" data-view-action="view link - injected link - item 2" data-event-element="injected link" data-event-position="2"><a href="https://www.theatlantic.com/health/archive/2024/03/dna-tests-incest/677791/">Read: DNA tests are uncovering the true prevalence of incest</a></p><p data-flatplan-paragraph="true">Wojcicki has pulled 23andMe back from the brink before, after the Food and Drug Administration ordered the company to <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2013-11-27/do-genetic-tests-need-doctors-fda-defends-its-challenge-to-23andme">stop selling</a> its health tests in 2013 until they could be proved safe and effective. In recent months, Wojcicki has explored a variety of options to save the company, including splitting it to separate the cash-burning drug business from the consumer side. Wojcicki has <a data-event-element="inline link" href="https://investors.23andme.com/node/9936/html">still expressed interest</a> in trying to take the company private herself, but the board rejected her initial offer. 23andMe has until November 4 to raise its shares to at least $1, or be delisted. As that date approaches, a sale looks more and more likely—whether to Wojcicki or someone else.</p><p data-flatplan-paragraph="true">The risk of DNA data being misused has existed since DNA tests first became available. When customers opt in to participate in drug-development research, third parties already get access to their de-identified DNA data, which can in some cases be <a data-event-element="inline link" href="https://www.bloomberg.com/news/articles/2018-06-15/deleting-your-online-dna-data-is-brutally-difficult">linked back to people’s identities</a> after all. Plus, 23andMe has failed to protect its customers’ information in the past—it just agreed to pay <a data-event-element="inline link" href="https://www.reuters.com/technology/cybersecurity/23andme-settles-data-breach-lawsuit-30-million-2024-09-13/">$30 million</a> to settle a lawsuit resulting from an October 2023 data breach. But for nearly two decades, the company had an incentive to keep its customers’ data private: 23andMe is a consumer-facing business, and to sell kits, it also needed to win trust. Whoever buys the company’s data may not operate under the same constraints.</p></section><div data-event-module="footer"><p><h3>About the Author</h3></p></div><gpt-ad format="injector" sizes-at-0="mobile-wide,native,house" targeting-pos="injector-most-popular" sizes-at-976="desktop-wide,native,house"></gpt-ad></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SunVox: Powerful Modular Synthesizer and DAW (118 pts)]]></title>
            <link>https://www.warmplace.ru/soft/sunvox/</link>
            <guid>41679972</guid>
            <pubDate>Sat, 28 Sep 2024 13:00:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.warmplace.ru/soft/sunvox/">https://www.warmplace.ru/soft/sunvox/</a>, See on <a href="https://news.ycombinator.com/item?id=41679972">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="outer_content_div">


<center>
<p>SunVox</p>
<p>Latest release - v2.1.1c (29 nov 2023)</p>
<a href="https://www.warmplace.ru/soft/sunvox/index_ru.php">Русская версия здесь</a><br>
</center>



<p><a href="#about">About</a><br>
<a href="https://www.warmplace.ru/soft/sunvox/manual.php">User manual</a><br>
<a href="#vid">Video</a> | 
<a href="https://www.warmplace.ru/forum/viewtopic.php?f=3&amp;t=1223">Tutorials</a> | 
<a href="#scr">Screenshots</a> | 
<a href="https://www.warmplace.ru/soft/sunvox/art.php">Logo</a><br>
<a href="#music">Music</a> | 
<a href="https://www.warmplace.ru/forum/viewtopic.php?f=16&amp;t=1445">Samples</a> | 
<a href="https://www.warmplace.ru/forum/viewforum.php?f=11">Modules</a><br>
<a href="https://www.warmplace.ru/forum/viewforum.php?f=16">Forum</a> | 
<a href="https://www.facebook.com/groups/sunvox/">FB</a> | 
<a href="https://t.me/joinchat/ROQAGZ12P9MLDQUu">Telegram chat</a>/<a href="https://t.me/sunvox">news</a><br>
<a href="#old">Old versions</a></p><p>What is SunVox</p>
<p>

SunVox is a small, fast and powerful <a href="https://en.wikipedia.org/wiki/Modular_synthesizer">modular synthesizer</a> with pattern-based sequencer (<a href="https://en.wikipedia.org/wiki/Tracker_(music_software)">tracker</a>). 
It is a tool for those people who like to compose music wherever they are, whenever they wish. On any device. On any system.
And it's free for most of the systems, except the Android and iOS.</p><center><br><img alt="SunVox - Modular Music Studio in Your Pocket" src="https://www.warmplace.ru/soft/sunvox/images/sunvox.jpg"></center>
<p>

Key features:
</p><ul>
<li>highly optimized synth algorithms, flexible architecture; SunVox works on a variety of devices with different CPUs;
</li><li>supported systems: <ul>
<li>Windows (2000+);
</li><li>macOS (10.13+);
</li><li>Linux (x86, x86_64, ARM (Raspberry Pi, PocketCHIP, N900, etc.), ARM64 (PINE64, etc.));
</li><li>iOS (12.0+);
</li><li>Android (4.1+);
</li><li>Windows CE (including Pocket PC and Windows Mobile; ARM only);
</li></ul>
</li><li>supported sound systems: ASIO, DirectSound, MME, ALSA, OSS, JACK, Audiobus, IAA;
</li><li>SunVox as a plugin: AU instrument/effect for iOS;
</li><li>support of 16/24/32bit WAV, AIFF and XI samples;
</li><li>multitrack WAV export;
</li><li>MIDI In/Out/Import/Export;
</li><li>XM (FastTracker) and MOD (ProTracker, OctaMED) import;
</li><li>real-time sample recording;
</li><li>real-time recording of any types of sound events (notes, Touch Theremin, controllers);
</li><li>powerful microtonal (ultra-chromatic) sequencer;
</li><li>generative music features: random selection of notes, random values of controllers, probability effects; <a href="https://www.warmplace.ru/soft/sunvox/jsplay/">see examples</a>;
</li><li>free cross-platform <a href="https://www.warmplace.ru/soft/sunvox/sunvox_lib.php">library</a> for developers is available; so it's possible to use SunVox engine in your own applications;
</li><li>a lot of built-in modules (synths and effects) + ability to make very complex connections between them.
<!--<ul>
<li>Generators;
<li>DrumSynth with 120 unique synthetic drum sounds;
<li>FM synth;
<li>Sampler (multisample instrument);
<li>SpectraVoice (FFT-based synthesizer for warm atmospheric sounds);
<li>Side Chain Compressor;
<li>Distortion;
<li>Echo & Reverb;
<li>Equalizer & Filters;
<li>Flanger;
<li>Loop (for glitch effects);
<li>Vocal Filter (for human voice simulation);
<li>Vorbis Player;
<li>WaveShaper;
<li>Pitch Detector;
<li>Pitch Shifter;
<li>and more ...
</ul>-->
</li></ul>

<p><a href="https://www.warmplace.ru/soft/sunvox/manual.php">More information...</a><br>(user manual, installation guide, system requirements, FAQ, etc.)</p><p>Screenshots</p>
<br>

<center>
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox36.png"><img alt="SunVox screenshot 1" src="https://www.warmplace.ru/soft/sunvox/images/01.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox37.png"><img alt="SunVox screenshot 2" src="https://www.warmplace.ru/soft/sunvox/images/02.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox38.png"><img alt="SunVox screenshot 3" src="https://www.warmplace.ru/soft/sunvox/images/03.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox39.png"><img alt="SunVox screenshot 4" src="https://www.warmplace.ru/soft/sunvox/images/04.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox40.png"><img alt="SunVox screenshot 5" src="https://www.warmplace.ru/soft/sunvox/images/05.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox41.png"><img alt="SunVox screenshot 6" src="https://www.warmplace.ru/soft/sunvox/images/06.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox42.png"><img alt="SunVox screenshot 7" src="https://www.warmplace.ru/soft/sunvox/images/07.png"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/images/sunvox43.png"><img alt="SunVox screenshot 8" src="https://www.warmplace.ru/soft/sunvox/images/08.png"></a><p>
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Compaq%20iPAQ%203850%20(WinMobile).jpg"><img alt="Compaq iPAQ 3850" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Compaq%20iPAQ%203850%20(WinMobile).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Dell%20Axim%20(WinMobile).jpg"><img alt="Dell Axim" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Dell%20Axim%20(WinMobile).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Jornada%20720%20(WinMobile)%20(2).jpg"><img alt="Jornada 720" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Jornada%20720%20(WinMobile)%20(2).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Jornada%20720%20(WinMobile).jpg"><img alt="Jornada 720" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Jornada%20720%20(WinMobile).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Nec%20MobilePro%20900%20(WinMobile).jpg"><img alt="Nec MobilePro 900" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Nec%20MobilePro%20900%20(WinMobile).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Nokia%20N900%20(Maemo).jpg"><img alt="Nokia N900" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Nokia%20N900%20(Maemo).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/TungstenT%20(PalmOS).jpg"><img alt="Tungsten|T" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20TungstenT%20(PalmOS).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/iPad,%20Alesis%20IO%20Dock,%20Monotron.jpg"><img alt="iPad, Alesis IO Dock, Monotron" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPad,%20Alesis%20IO%20Dock,%20Monotron.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/iPad2,%20MIDI.jpg"><img alt="iPad2" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPad2,%20MIDI.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/iPhone%20plus%20Monotron.jpg"><img alt="iPhone and Monotron" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPhone%20plus%20Monotron.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Samsung%20Galaxy%20Note%20(Android).jpg"><img alt="Galaxy Note (Android)" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Samsung%20Galaxy%20Note%20(Android).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/OpenPandora%20(Linux).jpg"><img alt="Galaxy Note (Android)" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20OpenPandora%20(Linux).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Sony%20CLIE%20PEG-UX50%20(PalmOS).jpg"><img alt="Sony CLIE PEG-UX50 (PalmOS)" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Sony%20CLIE%20PEG-UX50%20(PalmOS).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/various.jpg"><img alt="Samsung galaxy Fit (Android); Dell Axim X30 (Windows Mobile); Prestigio multyPAD pmp5080b (Android)" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20various.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/LG%20Optimus%20Hub%20(Android).jpg"><img alt="Monotron Duo, LG Optimus Hub (Android), Zoom H4n" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20LG%20Optimus%20Hub%20(Android).jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/Palm%20TX.jpg"><img alt="Palm TX" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20Palm%20TX.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/iPad%20mini%202,%20MIDI.jpg"><img alt="iPad mini 2 + bluetooth MIDI" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20iPad%20mini%202,%20MIDI.jpg"></a> 
<a href="https://www.warmplace.ru/soft/sunvox/device_screens/various2.jpg"><img alt="Various Android and iOS devices" src="https://www.warmplace.ru/soft/sunvox/device_screens/P.%20various2.jpg"></a></p></center>

<p>Video</p>
<br>

<center>
<iframe width="640" height="360" src="https://www.youtube.com/embed/wmfHPnXhmZI" frameborder="0" allowfullscreen=""></iframe><iframe width="640" height="360" src="https://www.youtube.com/embed/xK1VMKaxGoc" frameborder="0" allowfullscreen=""></iframe><iframe width="640" height="360" src="https://www.youtube.com/embed/BG5TZ2V-RQs" frameborder="0" allowfullscreen=""></iframe><iframe width="640" height="360" src="https://www.youtube.com/embed/E54uAhMBA1A" frameborder="0" allowfullscreen=""></iframe></center>
<p><a href="https://www.warmplace.ru/forum/viewtopic.php?f=3&amp;t=1223">Video tutorials</a><br>
<a href="https://www.youtube.com/user/NightRadio2007">More videos on my YouTube channel...</a></p><p>Music created in SunVox</p>
<p>

Сompetitions:</p><ul>
<li><a href="https://www.warmplace.ru/forum/viewtopic.php?t=6651">SunVox Compo 2024.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=6327">SunVox Compo 2023.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=6026">SunVox Compo 2022.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=5645">SunVox Compo 2021.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=5194">SunVox Compo 2020.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=4859">SunVox Compo 2019.03</a>
</li><li><a href="https://www.warmplace.ru/compo/sunvox/2015.10">SunVox Compo 2015.10</a>
</li><li><a href="https://www.warmplace.ru/compo/sunvox/2015.02">SunVox Compo 2015.02</a>
</li><li><a href="https://www.warmplace.ru/forum/viewtopic.php?f=10&amp;t=3441">SunVox Compo 2014.10</a>
</li></ul><p>
SoundCloud: best of 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2022">2022</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2021">2021</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2020">2020</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2019">2019</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2018">2018</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2017">2017</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2016">2016</a>, 
<a href="https://soundcloud.com/nightradio/sets/sunvox-music-best-of-2015">2015</a>.
<br>
Please mark your songs with the #SunVox hashtag, so that anyone can easily find it. 
</p><!-- The best tracks will be included in the monthly compilation. Thank you! -->
<p>

<a href="https://www.warmplace.ru/music/archive/">Music from NightRadio</a></p><p>Old versions</p>


<p><a href="https://www.warmplace.ru/soft/sunvox/sunvox-1.8.1-palmos-meego.zip">SunVox 1.8.1 for PalmOS and MeeGo</a><br>
<a href="https://www.dropbox.com/sh/5tjr1m8ri7i455z/AAAQktsEmqH90IGrRGfooqaNa?dl=0">Archive</a><br>


    </p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[MtCellEdit – Lightweight Spreadsheet Program (114 pts)]]></title>
            <link>https://www.marktyler.org/ced/</link>
            <guid>41679471</guid>
            <pubDate>Sat, 28 Sep 2024 11:10:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.marktyler.org/ced/">https://www.marktyler.org/ced/</a>, See on <a href="https://news.ycombinator.com/item?id=41679471">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<h2>About</h2>
<p>
mtCellEdit is a lightweight spreadsheet program that I created from scratch. It is a small, no frills program which is designed to handle simple day to day spreadsheet tasks. I have put the most important facilities I want into a small customized program which means I can avoid the problems of larger programs such as slow operating speeds and overcomplicated user interfaces. The GUI is presented using Qt5.
</p>

<p>
The core of the program is a shared C/C++ library which can be used by any C/C++ program to read, write and manipulate spreadsheets. The source code suite also contains other example programs that use this library, such as command line tools to allow scripts to access the API.
</p>

<p>
The default file format mtCellEdit uses is portable and transparent as it is a ZIP file containing TSV text files. I deliberately designed it this way so that data can be extracted and read by any modern spreadsheet program on any operating system without requiring mtCellEdit. Over the years I have been frustrated by binary and XML formats that make data only accessible via a single program (or by me wasting time manually converting each file, or by me writing a file format conversion program). This format ensures that my data never becomes stranded, and can be manipulated by whichever tool I choose for a particular job (i.e. spreadsheet programs, text editors, command line tools, etc).
</p>

<h2>System Requirements</h2>
<p>
mtCellEdit is designed for GNU/Linux operating systems.  Hardware wise it
has been tested on x86_32, x86_64, and ARM_32 platforms.
</p>


<h2>License</h2>
<p>
The source code is distributed under the GNU General Public License version 3
or later.  Read more about this here
<a href="https://www.gnu.org/copyleft/gpl.html">https://www.gnu.org/copyleft/gpl.html</a>
</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta fined $102M for storing passwords in plain text (157 pts)]]></title>
            <link>https://www.engadget.com/big-tech/meta-fined-102-million-for-storing-passwords-in-plain-text-110049679.html</link>
            <guid>41678840</guid>
            <pubDate>Sat, 28 Sep 2024 08:38:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.engadget.com/big-tech/meta-fined-102-million-for-storing-passwords-in-plain-text-110049679.html">https://www.engadget.com/big-tech/meta-fined-102-million-for-storing-passwords-in-plain-text-110049679.html</a>, See on <a href="https://news.ycombinator.com/item?id=41678840">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>The Irish Data Protection Commission (DPC) has slapped Meta with a $101.5 million (€91 million) fine after wrapping up an investigation into a security breach in 2019, wherein the company mistakenly <a data-i13n="cpos:1;pos:1" href="https://www.engadget.com/2019-03-21-facebook-user-passwords-plain-text.html" data-ylk="slk:stored users' passwords in plain text;cpos:1;pos:1;elm:context_link;itc:0;sec:content-canvas">stored users' passwords in plain text</a>. Meta's original announcement only talked about how it found some user passwords stored in plain text on its servers in January that year. But a month later, it updated its announcement to reveal that <a data-i13n="cpos:2;pos:1" href="https://www.engadget.com/2019-04-18-facebook-stored-instagram-passwords-plain-text.html" data-ylk="slk:millions of Instagram passwords;cpos:2;pos:1;elm:context_link;itc:0;sec:content-canvas">millions of Instagram passwords</a> were also stored in easily readable format.</p><p>While Meta didn't say how many accounts were affected, a senior employee told <a data-i13n="cpos:3;pos:1" href="https://krebsonsecurity.com/2019/03/facebook-stored-hundreds-of-millions-of-user-passwords-in-plain-text-for-years/" rel="nofollow noopener" target="_blank" data-ylk="slk:Krebs on Security;cpos:3;pos:1;elm:context_link;itc:0;sec:content-canvas"><em>Krebs on Security </em></a>back then that the incident involved up to 600 million passwords. Some of the passwords had been stored in easily readable format in the company's servers since 2012. They were also reportedly searchable by over 20,000 Facebook employees, though the DPC has clarified in its decision that they were at least not made available to external parties.</p><p>The DPC found that Meta violated several GDPR rules related to the breach. It determined that the company failed to "notify the DPC of a personal data breach concerning storage of user passwords in plaintext" without undue delay and failed to "document personal data breaches concerning the storage of user passwords in plaintext." It also said that Meta violated the GDPR by not using appropriate technical measures to ensure the security of users' passwords against unauthorized processing.</p><p>"It is widely accepted that user passwords should not be stored in plaintext, considering the risks of abuse that arise from persons accessing such data. It must be borne in mind, that the passwords the subject of consideration in this case, are particularly sensitive, as they would enable access to users’ social media accounts," DPC's Deputy Commissioner, Graham Doyle, said in a statement.</p><p>The DPC has also given the company a reprimand in addition to the penalty. We may know more about what that means for Meta exactly when the commission publishes its full final decision and other related information in the future.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I Made a Rubbish Clock (107 pts)]]></title>
            <link>https://blog.jgc.org/2024/09/i-made-rubbish-clock.html</link>
            <guid>41678600</guid>
            <pubDate>Sat, 28 Sep 2024 07:36:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.jgc.org/2024/09/i-made-rubbish-clock.html">https://blog.jgc.org/2024/09/i-made-rubbish-clock.html</a>, See on <a href="https://news.ycombinator.com/item?id=41678600">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-522901623747231800" itemprop="description articleBody">
<p>With separate plastic, metal, paper, and glass recycling, composting, and pick up of all the rest, knowing which days to put out which bins can be complicated. Some have turned to high-tech solutions like Darren Tarbard's wonderful "<a href="https://x.com/tarbard/status/1002464120447397888">bindicator</a>".</p><p><a href="https://x.com/tarbard/status/1002464120447397888"><img data-original-height="835" data-original-width="900" height="371" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisozadvkoI9CxySkzJNcnOY_o2vZNWnv2gonXZ-K3eYn24dsIy5j7DoEHNxNShAVd-OBqk1PUMGRqJvSdmOs10lTHYGTlCgYz7uqOjXD_vf57eKTbMPeedRuCETBjUWnp-Sh9mIDxK0vMqp_va2txelYdG8f_9Yem8IweeCIQlhclFQi7HwOIlNA/w400-h371/Del3rp-WsAES2IE.jpg" width="400"></a></p><p>There's even a&nbsp;<a href="https://www.bindicator.net/">commercial version</a>&nbsp;of that.</p><p>I thought about making something similar, but decided that a high-tech solution isn't always the right one. Instead I made a clock, or rather a clock face. My rationale was as follows: the bin days don't change frequently so no need to call an API to get them, and anyway most councils don't have an API for this sort of thing. Also, I really didn't want yet another thing with a wall wart, or WiFi to configure, or code to debug (there comes a time in every programmer's life when they can't face debugging yet another thing that should be simple and just work).&nbsp;</p><p>Not everything needs to be Turing Complete! But you can buy cheap clock mechanisms where the hands go full circle in seven days instead of 12 hours. Something like <a href="https://www.youngtownco.com/en/product-496882/7-Days-Week-Clock-Movement-12888SDWK.html">this</a>.&nbsp;</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsdpeNHoK98X_LNj45s4b71ULFC-yEBbTAAC5Dt3Mp6jfwfE6FnMHw80boTFqBF1pbTeDye9C8S6fY-UAQfjlk0uxJj_o7-9RsoB5psG_mMfG5EhI7H5QpwQ4w_cPgtL95VIpBKSzb75r3aXV7BBPcPAbuqUzUwif5uxm-LFQZJofvnmctDB9uVQ/s508/lixo-2.jpg"><img data-original-height="500" data-original-width="508" height="315" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsdpeNHoK98X_LNj45s4b71ULFC-yEBbTAAC5Dt3Mp6jfwfE6FnMHw80boTFqBF1pbTeDye9C8S6fY-UAQfjlk0uxJj_o7-9RsoB5psG_mMfG5EhI7H5QpwQ4w_cPgtL95VIpBKSzb75r3aXV7BBPcPAbuqUzUwif5uxm-LFQZJofvnmctDB9uVQ/s320/lixo-2.jpg" width="320"></a></p><p>So, I wrote a bunch of code to produce an SVG (and PDF and PNG) for the clock face. The code is <a href="https://github.com/jgrahamc/lixo">here</a>. You end up with something like this which can be printed.</p><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi50DJtFU-77BZVN0Zidd-1XHQNnQqwL2EDdX6sPvxlJgWOj2OvrzHjcoNZk7-GoxbPrFlcoTH6ijQ7Jrtp5vk3v7Vedt9JAH-3Rd7yzPGY427oDsqkrinfduN0NJb02z2dDsM91tR-xxAianznNcIVOr50eIedZmBL_XVlhVpwApRi2PEPPU7i4g/s2362/lixo.png"><img data-original-height="2362" data-original-width="2362" height="400" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi50DJtFU-77BZVN0Zidd-1XHQNnQqwL2EDdX6sPvxlJgWOj2OvrzHjcoNZk7-GoxbPrFlcoTH6ijQ7Jrtp5vk3v7Vedt9JAH-3Rd7yzPGY427oDsqkrinfduN0NJb02z2dDsM91tR-xxAianznNcIVOr50eIedZmBL_XVlhVpwApRi2PEPPU7i4g/w400-h400/lixo.png" width="400"></a></p><p>The colours and wording are all determined by the <span>schd</span> and <span>bins</span> variables. The code should be easy to customize for your location's schedule. It supports up to two different bin types per day. If you need more you'll have to modify the code.</p><div><p><span><span>&nbsp;&nbsp; &nbsp;</span>bins = {</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>"none": ["white", ""],</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>"lixo": ["#72859E", "Lixo"],</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>"papl": ["#255FC9", "Papel"],</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>"embl": ["#DED044", "Embalagens"],</span></p><p><span><span>&nbsp;&nbsp; &nbsp;</span>}</span></p><p><span><span>&nbsp;&nbsp; &nbsp;</span>days = ["Sun", "Mon", "Tues", "Wednes", "Thurs", "Fri", "Satur"]</span></p><p><span><span>&nbsp;&nbsp; &nbsp;</span>schd = [["none"],</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>&nbsp; &nbsp; ["lixo"],</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>["papl", "embl"],</span></p><p><span>&nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>&nbsp; ["lixo"],</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;&nbsp; &nbsp;</span> ["papl"],</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>["lixo", "embl"],</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>["papl"]]</span></p><p>There's no need for you to use Portuguese; I have because I'm dealing with Portuguese rubbish collection.</p><p>The only interesting piece of code is the generation of the curves for the seven daily segments (and also for the curved wording). This is done by the function <span>path</span>:</p><div><p><span><span>&nbsp;&nbsp; &nbsp;</span>def getXY(p, r, s):</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>a = 2.0 * math.pi * (p * pps + rot)</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>return s % (r * math.cos(a),</span></p><p><span>&nbsp; &nbsp; &nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>&nbsp; &nbsp; &nbsp; &nbsp; r * math.sin(a))</span></p><p><span><span>&nbsp;&nbsp; &nbsp;</span>def path(p, r):</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>s = " %.2f %.2f "</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>pa = "M"</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>pa += getXY(p, r, s)</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>pa += "A %.2f %.2f 0 0 1" % (r, r)</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>pa += getXY((p+1), r, s)</span></p><p><span>&nbsp; &nbsp; <span>&nbsp;&nbsp; &nbsp;</span>return pa</span></p><p>In SVG you can define a <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths">path</a> element which can be used to make all sorts of curves, arcs, and lines. My <span>path</span> function takes two parameters: <span>p</span> is a number between zero and six representing the seven daily segments needed on the clock; <span>r</span> is the radius of the arc. The function uses <span>getXY</span> to find the position of a point on the arc. It does this twice to find the start and end point.&nbsp;</p><p>So, path ends up returning something like <span>M x0 y0 A r r 0 0 1 x1 y1</span> where <span>x0</span>, <span>y0</span>, <span>x1</span>, <span>y1</span> are the calculated end points of the arc and <span>r</span> is the radius of the arc. The <span>M x0 y0</span> means "move to (<span>x0</span>, <span>y0</span>)" The&nbsp;<span>A r r 0 0 1 x1 y1</span>&nbsp;means "draw an <a href="https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands">arc</a> of radius r to the point (<span>x1</span>, <span>y1</span>)". The <span>0 0 1</span> in the middle correspond to three parameters:&nbsp;x-axis-rotation, large-arc-flag, and sweep-flag; it's best to refer to the documentation for those because they determine the direction in which the arc points and whether it is rotated.</p><div><p>The final part of the path SVG element, <span>L 0 0</span>, is added elsewhere in the code. It sets the centre of the arc at (<span>0</span>, <span>0</span>). I used the <span>viewBox</span> attribute of the SVG to make the SVG geometry be between (<span>-1</span>, <span>-1</span>) and (<span>1</span>, <span>1</span>) thus making the centre of the image (<span>0</span>, <span>0</span>).&nbsp;&nbsp;</p><p><span><span>&nbsp;&nbsp; &nbsp;</span>print('&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="-1 -1 2 2" width="%s" height="%s"&gt;' % (wh, wh))</span></p></div><p>Armed with a suitable printed clock face, I got a simple square picture frame, a few bits of wood for spacers, and put it all together into a "rubbish clock".</p></div><div><p><a href="https://flyingtiger.com/pt-pt/products/black-picture-frame-20x20-cm-3034806"><img data-original-height="1200" data-original-width="1200" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgjLt5yQO3Yskdk8xTXFjHTL_PwvbRm5PmqrTMMXHrTnaEuCPRsnqrvgGzb_qs6pPHiK_pfsHZSgzQoYuPfbu1mUZoLuhyphenhyphenDGyedf_kURe3UIPm1TRJPhewAKwHSRTWWw9pLQwtn0XJspWp_m-ogVQv0oPDMvs9le2MBGPkKglSaXkSzlpuYV7oXcA/w640-h640/lixo-4.webp" width="640"></a></p><p><a href="https://flyingtiger.com/pt-pt/products/black-picture-frame-20x20-cm-3034806"><img data-original-height="1200" data-original-width="1200" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixHHRXpURAEsmK_bYXaQyR8iLSGK14efmCSbFsmie4tRUsvd9kZzzk9ZiOy79k9TDl5t4PRcRhyqwFXU0qlhdmnMfiWLguPb8mszXhjrcpMxhtBvp0ecFu7GPL7UiPDq8Xzl8usb0LuKuJIQzZd7a08DYdPJvNIdK2fub3Fixs09_G0CqPAMG8JA/w640-h640/lixo-3.webp" width="640"></a></p></div><table><tbody><tr><td><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpj8fOLwk9PArF_K9sUwkYhSCZVRmwC7xmI-wvs32RetBhwFdTOzRdFOzDg6gXEn-taEu3SQW5hJz78Zrkryl5x5ReEr9iexphsiMabORQfh4BqLzNWzkgVhbcF5zNMWeTbWikEwyPkhbaZwFtQBy6_TMFOz-ZH48-owPvbaUZaeyGWnrWACnR1g/s1200/lixo-5.jpg"><img data-original-height="1200" data-original-width="1200" height="640" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpj8fOLwk9PArF_K9sUwkYhSCZVRmwC7xmI-wvs32RetBhwFdTOzRdFOzDg6gXEn-taEu3SQW5hJz78Zrkryl5x5ReEr9iexphsiMabORQfh4BqLzNWzkgVhbcF5zNMWeTbWikEwyPkhbaZwFtQBy6_TMFOz-ZH48-owPvbaUZaeyGWnrWACnR1g/w640-h640/lixo-5.jpg" width="640"></a></td></tr><tr><td><br></td></tr></tbody></table><br></div><p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjvTpcZoantZ16120z-lQK12YKhHkbb_lXVQEdznDiWKicX4J4EoD4yaibwH_iROLsHVCkeh4qti2xmslW-u5Qy96-5OkdfmK_l4-bpLHcezEPtQyNkR-9NuW9ZNDwVHRSO91S1kQZTHPtXZdQdcaFCxWSQFLwLz8y-NFx5oT2AMLi3SqVEzQ0_KQ/s1200/lixo-7.jpg"><img data-original-height="953" data-original-width="1200" height="509" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjvTpcZoantZ16120z-lQK12YKhHkbb_lXVQEdznDiWKicX4J4EoD4yaibwH_iROLsHVCkeh4qti2xmslW-u5Qy96-5OkdfmK_l4-bpLHcezEPtQyNkR-9NuW9ZNDwVHRSO91S1kQZTHPtXZdQdcaFCxWSQFLwLz8y-NFx5oT2AMLi3SqVEzQ0_KQ/w640-h509/lixo-7.jpg" width="640"></a></p><br>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FFT-based ocean-wave rendering, implemented in Godot (588 pts)]]></title>
            <link>https://github.com/2Retr0/GodotOceanWaves</link>
            <guid>41678412</guid>
            <pubDate>Sat, 28 Sep 2024 06:51:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/2Retr0/GodotOceanWaves">https://github.com/2Retr0/GodotOceanWaves</a>, See on <a href="https://news.ycombinator.com/item?id=41678412">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">GodotOceanWaves</h2><a id="user-content-godotoceanwaves" aria-label="Permalink: GodotOceanWaves" href="#godotoceanwaves"></a></p>
<p dir="auto">An open ocean rendering experiment in the Godot Engine utilizing the inverse Fourier transform of directional ocean-wave spectra for wave generation. A concise set of parameters is exposed, allowing for scriptable, real-time modification of wave properties to emulate a wide-variety of ocean-wave environments.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description ocean_demo.mp4">ocean_demo.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/18603664/371443621-a8083878-a297-4536-a481-9123cea7e7df.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNzE0NDM2MjEtYTgwODM4NzgtYTI5Ny00NTM2LWE0ODEtOTEyM2NlYTdlN2RmLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1NGI4ODAzMjU0NmQ0YzdjYTg3YTZkYmYxNmUzZmIxOTY5MTE4ODhjN2VmMGEwNTllMjMyYWJhMTMxNGE2MjQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.woLyampML5KaxatdZL9Tg1Grfm2FiX_wXjz8ysQSLBA" data-canonical-src="https://private-user-images.githubusercontent.com/18603664/371443621-a8083878-a297-4536-a481-9123cea7e7df.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNzE0NDM2MjEtYTgwODM4NzgtYTI5Ny00NTM2LWE0ODEtOTEyM2NlYTdlN2RmLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1NGI4ODAzMjU0NmQ0YzdjYTg3YTZkYmYxNmUzZmIxOTY5MTE4ODhjN2VmMGEwNTllMjMyYWJhMTMxNGE2MjQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.woLyampML5KaxatdZL9Tg1Grfm2FiX_wXjz8ysQSLBA" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">Introduction</h2><a id="user-content-introduction" aria-label="Permalink: Introduction" href="#introduction"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Why Fourier Transforms?</h3><a id="user-content-why-fourier-transforms" aria-label="Permalink: Why Fourier Transforms?" href="#why-fourier-transforms"></a></p>
<p dir="auto">A common approach for animating water in video games is by displacing vertices using <em>Gerstner waves</em>. While Gerstner waves work well for modeling the lower-frequency details in calmer waters, they fall short in accurately representing the choppy surfaces in an open ocean. To simulate the latter, a more complex approach simulates waves using the <em>inverse Fourier transform</em> of ocean-wave spectra modeled from empirical data gathered by oceanographers.</p>
<p dir="auto">A benefit of working in frequency space using ocean-wave spectra is the ease of modifying ocean properties (e.g., surface choppiness). When using Gerstner waves, it is unclear how waves (and their parameters) need to be changed to emulate a certain ocean state. In contrast, ocean-wave spectra expose parameters that change waves' properties directly.</p>
<p dir="auto">To compute the Fourier transform, a <em>fast Fourier transform</em> algorithm (FFT) is used specifically. On top of having a lower computational complexity than the classical discrete Fourier transform algorithm (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$O(N \log N)$</math-renderer> versus <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$O(N^2)$</math-renderer>), the FFT is <em>scalable as a parallel system</em>. This means that it is perfect for running on the GPU. Using Gerstner waves requires each thread to perform <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$N$</math-renderer> computations, one for each wave. In contrast, FFT-based waves only require each thread to perform <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\log(N)$</math-renderer> equivalent computations. At scale, more waves can be added to the system (at the same performance cost), permitting more accurate surface simulation.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Results</h2><a id="user-content-results" aria-label="Permalink: Results" href="#results"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Wave Shading</h3><a id="user-content-wave-shading" aria-label="Permalink: Wave Shading" href="#wave-shading"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Lighting Model</h4><a id="user-content-lighting-model" aria-label="Permalink: Lighting Model" href="#lighting-model"></a></p>
<p dir="auto">The ocean lighting model largely follows the BSDF described in the 'Atlas' GDC talk. One deviation, however, is the use of the GGX distribution (rather than Beckmann distribution) for the microfacet distribution. This was due to the GGX distribution's 'flatter' and softer highlights providing a more uniform appearance in many of the ocean-wave environments tested.</p>
<p dir="auto">The normal/foam map is sampled with a mix between bicubic and bilinear filtering depending on the world-space pixel density (a value dependent on the normal map texture resolution and texture UV tiling size). This effectively reduces texture aliasing artifacts at lower surface resolutions while maintaining the detail at higher surface resolutions.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Sea Foam</h4><a id="user-content-sea-foam" aria-label="Permalink: Sea Foam" href="#sea-foam"></a></p>
<p dir="auto">Tessendorf notes a method for determining when to generate sea foam by checking where the waves' peaks curl into themselves (i.e., when the Jacobian of the displacement is negative). Foam accumulates linearly and dissipates exponentially on a texture over multiple wave updates, and are controlled by "foam grow rate" and "foam decay rate" parameters respectively.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Sea Spray</h4><a id="user-content-sea-spray" aria-label="Permalink: Sea Spray" href="#sea-spray"></a></p>
<p dir="auto">Sea spray is modeled using particles via Godot's GPUParticles3D node and makes heavy use of a custom particle shader. Particles are distributed evenly across the plane within the GPUParticles3D node's bounding box. Then, they are culled based on the foam amount present at their position. Un-culled particles begin their lifecycle at a random offset.</p>
<p dir="auto">Each sea spray particle uses a billboarded sprite with a single static texture. Over the course of their lifecycle, particles' scales and displacements are modified to emulate a splash's appearance. A dissolve effect in particles' mesh shader fades the sprite in a way that simulates how sea spray atomizes once in the air.</p>
<p dir="auto">One <em>major</em> drawback of this method is that a large increase in particle amount only results in a small increase in sea spray density. This is due to the equal distribution of particles along the bounding box, which results in a majority of the added particles being culled.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/18603664/367495381-c69766e7-711c-4909-a1fa-290bac0d577a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNjc0OTUzODEtYzY5NzY2ZTctNzExYy00OTA5LWExZmEtMjkwYmFjMGQ1NzdhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTdmZThlYjZkYTM1MGZhZTAwNGU1ZTAxY2UzYjgwNTE0ZDZhY2Y5YmNjNTg0MDg4OGY5ZWMxNzRkM2EzZmU4Y2ImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.TsauWxPeyGFgju5z9_6ePtRLKSGiuVHYeXbvtOIx3y4"><img src="https://private-user-images.githubusercontent.com/18603664/367495381-c69766e7-711c-4909-a1fa-290bac0d577a.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNjc0OTUzODEtYzY5NzY2ZTctNzExYy00OTA5LWExZmEtMjkwYmFjMGQ1NzdhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTdmZThlYjZkYTM1MGZhZTAwNGU1ZTAxY2UzYjgwNTE0ZDZhY2Y5YmNjNTg0MDg4OGY5ZWMxNzRkM2EzZmU4Y2ImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.TsauWxPeyGFgju5z9_6ePtRLKSGiuVHYeXbvtOIx3y4" alt="shading_demo"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Wave Simulation</h3><a id="user-content-wave-simulation" aria-label="Permalink: Wave Simulation" href="#wave-simulation"></a></p>
<p dir="auto">The method for generating surface waves closely follows Tessendorf. A directional ocean-wave spectrum function is multiplied with Gaussian-distributed random numbers to generate an initial spectral sea state. The initial state is then propagated in time through a "dispersion relation" (relating the frequency of waves and their propagation speed). An inverse Fourier transform can then be applied to the propagated state to generate displacement and normal maps.</p>
<p dir="auto">The methodology Tessendorf describes was implemented through a compute shader pipeline using Godot's RenderingDevice abstraction. The following sections detail more on major aspects of the wave generation system.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Ocean-Wave Spectra</h4><a id="user-content-ocean-wave-spectra" aria-label="Permalink: Ocean-Wave Spectra" href="#ocean-wave-spectra"></a></p>
<p dir="auto">The directional ocean-wave spectrum function, <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$S(\omega, \theta)$</math-renderer>, returns the energy of a wave given its frequency (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\omega$</math-renderer>) and direction (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\theta$</math-renderer>). It is comprised of a <strong>non-directional spectrum function</strong>, <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$S(\omega)$</math-renderer>, and a <strong>directional spread function</strong>, <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$D(\omega, \theta)$</math-renderer>; the choice of either is entirely independent.</p>
<ul dir="auto">
<li>For the <strong>non-directional spectrum function</strong>, the <em>Texel-Marsen-Arsloe</em> (TMA) spectrum described in Horvath was chosen. Given the wind speed (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$U$</math-renderer>), depth (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$D$</math-renderer>), and fetch length (i.e., distance from shoreline) (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$F$</math-renderer>), the TMA spectrum combines its preceding <em>JONSWAP</em> spectrum with a depth attenuation function and is defined as <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$S_{\text{TMA}}(\omega) = S_{\text{JONSWAP}}(\omega)\Phi(\omega)$</math-renderer> where:</li>
</ul>
<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$$\begin{align*}
S_{\text{JONSWAP}}(\omega) &amp;= \Big[0.076\Big(\tfrac{U^2}{F \cdot 9.81}\Big)^{0.22}\Big]\Big[\tfrac{9.81^2}{\omega^5}\exp\Big({-\tfrac 5 4}\big(\tfrac{\omega_p}{\omega}\big)^4\Big)\Big] \Big[3.3^{\exp\Big(-\tfrac{(\omega - \omega_p)^2}{2(0.07 + 0.02\cdot\mathrm{step}(\omega - \omega_p))^2\omega_p^2}\Big)}\Big]\\\
\Phi(\omega) &amp;\approx \tfrac 1 2 \omega_h^2 + ({-\omega}_h^2+2\omega_h-1)\cdot\mathrm{step}(\omega_h - 1)\\\
\omega_p &amp;= 22\Big(\tfrac{9.81^2}{U F}\Big)\\\
\omega_h &amp;= \omega \sqrt{\tfrac D {9.81}}
\end{align*}$$</math-renderer>
<ul dir="auto">
<li>For the <strong>directional spread function</strong>, a combination of the <em>flat</em> and <em>Hasselmann</em> directional spreadings described in Horvath—mixed by a 'spread' parameter (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\mu$</math-renderer>)—was chosen. Horvath also proposes the addition of a 'swell' parameter (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\xi$</math-renderer>) to model ocean-wave elongation—this was also incorporated into the spread model. The mixed spread function is defined as <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">${D_{\text{mixed}}(\omega, \theta) = \mathrm{lerp}((2\pi){^{-1}},\ Q(s+s_\xi)\text{|}\cos(\theta \text{/}2)\text{|}^{2(s+s_\xi)},\ \mu)}$</math-renderer> where:</li>
</ul>
<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$$\begin{align*}
&lt;!-- https://www.wolframalpha.com/input?i2d=true&amp;i=taylor+series+Divide%5BPower%5B2%2C%5C%2840%292x-1%5C%2841%29%5D%2C%CF%80%5D*Divide%5BPower%5B%5C%2840%29x%21%5C%2841%29%2C2%5D%2C%5C%2840%292x%5C%2841%29%21%5D+at+x+%3D+0 --&gt;
Q(\sigma) &amp;\approx \begin{cases}
 0.09\sigma^3 + \big(\tfrac{\ln^2 2}{\pi} - \tfrac{\pi}{12}\big)\sigma^2+\big(\tfrac{\ln 2}{\pi}\big)\sigma+\tfrac{1}{2\pi} &amp; \text{if } \sigma \leq 0.4\\\
 \frac{\sqrt \sigma}{2\sqrt \pi} + \frac{1}{16\sqrt{\pi \sigma}} &amp; \text{otherwise.}
\end{cases}\\\
s &amp;= \begin{cases}
 6.97\big(\tfrac \omega {\omega_p}\big){^{4.06}} &amp; \text{if } \omega \leq \omega_p\\\
 9.77\big(\tfrac \omega {\omega_p}\big){^{-2.33 -1.45(\omega_p U\text{/}9.81-1.17)}} &amp; \text{otherwise.}
\end{cases}\\\
s_\xi &amp;= 16 \tanh\big(\tfrac{\omega_p}{\omega}\big)\xi^2
\end{align*}$$</math-renderer>
<p dir="auto"><math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$Q(\sigma)$</math-renderer> is a normalization factor used to satisfy the condition: <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\int_{-\pi}^\pi D(\omega, \theta)d \theta = 1$</math-renderer>. The Hasselmann directional spread was chosen due to its approximate analytical solution for <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$Q(\sigma)$</math-renderer> (as opposed to e.g., the Donelan-Banner directional spread also described in Horvath).</p>
<p dir="auto">Following a suggestion in Tessendorf, the resultant spectrum function was also multiplied by a small-wave suppression term, <math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\exp({-k}^2(1-\delta)^2)$</math-renderer> (given the magnitude of the wave vector (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$k$</math-renderer>) and a 'detail' parameter (<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$\delta$</math-renderer>)). Combining the above, our <em>final</em> directional ocean-wave spectrum function used can be denoted as:</p>
<math-renderer data-static-url="https://github.githubassets.com/static" data-run-id="3bb48dd0e93aac9c804f5bc9c48749f1">$$S(\omega, \theta) = S_{\text{TMA}}(\omega)D_{\text{mixed}}(\omega, \theta)\exp({-k}^2(1-\delta)^2)$$</math-renderer>
<p dir="auto"><h4 tabindex="-1" dir="auto">Fast Fourier Transform</h4><a id="user-content-fast-fourier-transform" aria-label="Permalink: Fast Fourier Transform" href="#fast-fourier-transform"></a></p>
<p dir="auto">A custom FFT implementation was written for the GPU using compute shaders. The <em>Stockham</em> FFT algorithm was used over the Cooley-Tukey algorithm to avoid the initial bit-reversal permutation. Following Flügge, a 'butterfly' texture is computed, once per spectrum texture resolution change, encoding the dataflow of the FFT.</p>
<p dir="auto">First, the FFT kernel is applied row-wise to perform the 2D FFT on the spectrum texture. The texture is then transposed using a compute shader, allowing the same row-wise FFT kernel to then be reused for—what is effectively—a column-wise FFT. This transposition also improves memory access patterns along with enabling pipeline reuse.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Wave Cascades</h4><a id="user-content-wave-cascades" aria-label="Permalink: Wave Cascades" href="#wave-cascades"></a></p>
<p dir="auto">At large-enough distances—especially with sea foam present—tiling artifacts become very apparent. The wave generation system allows multiple wave cascades to be layered simultaneously to address this. Each cascade has its own tiling size and set of parameters. Cascades can be added/removed from the generation system dynamically in real-time. However, as all cascades use the same compute pipelines, they must have the same spectra texture resolution. Alternatively, blending wave displacements/normals with noise could also reduce tiling artifacts—at a lesser performance cost.</p>
<p dir="auto">Each wave cascades’ parameters and size must be carefully chosen to avoid wave interference when layered. Similarly, the cascades' wave phases should be offset to avoid interference with other cascades. The generation system automatically attempts this by offsetting each cascades’ start times differently (honestly, not sure if it works lol).</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Load Balancing</h4><a id="user-content-load-balancing" aria-label="Permalink: Load Balancing" href="#load-balancing"></a></p>
<p dir="auto">Due to the erratic nature of wave motion, their movement can appear perceptually smooth even without updating their displacements every frame. Thus, an "update rate" parameter was introduced to control how often wave cascades are updated per second. While this reduces the amount of GPU-time spent working on FFT, frames during which the wave generation pipeline runs still stutter.</p>
<p dir="auto">An experiment to asynchronously compute cascade updates using Godot's local RenderingDevices, caused significant performance overhead due to transferring textures between the CPU and GPU. Instead, the wave generation system <em>attempts to load-balance cascades</em>. Whenever the frame time is shorter than the update rate, only one cascade is updated per frame. This reduces stuttering while still benefiting from the lower GPU workload of frame skipping.</p>
<p dir="auto">The displacement, normal, and foam maps generated after running FFT on our directional ocean-wave spectrum function (along with its associated parameters) yield realistic surface motion across a broad range of ocean-wave environments.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description ocean_param_demo.mp4">ocean_param_demo.mp4</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/18603664/367477646-7589758f-1233-4be8-accc-2902a1dd01ec.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNjc0Nzc2NDYtNzU4OTc1OGYtMTIzMy00YmU4LWFjY2MtMjkwMmExZGQwMWVjLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJmMjM2Njc1OGVhYzFlZmRjNjYwMTQ2OGM0OTA1YTExOTEyNDViMjhjMGIxZTU3MWEwYWNmOWViMWIzNGI1YTcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.9ySTzoAP2MM4b3nC3RfbSdJk8v7kVXn0TPmAEyIdTiY" data-canonical-src="https://private-user-images.githubusercontent.com/18603664/367477646-7589758f-1233-4be8-accc-2902a1dd01ec.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjc1MTk3MDUsIm5iZiI6MTcyNzUxOTQwNSwicGF0aCI6Ii8xODYwMzY2NC8zNjc0Nzc2NDYtNzU4OTc1OGYtMTIzMy00YmU4LWFjY2MtMjkwMmExZGQwMWVjLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA5MjglMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwOTI4VDEwMzAwNVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWJmMjM2Njc1OGVhYzFlZmRjNjYwMTQ2OGM0OTA1YTExOTEyNDViMjhjMGIxZTU3MWEwYWNmOWViMWIzNGI1YTcmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.9ySTzoAP2MM4b3nC3RfbSdJk8v7kVXn0TPmAEyIdTiY" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><h2 tabindex="-1" dir="auto">References</h2><a id="user-content-references" aria-label="Permalink: References" href="#references"></a></p>
<p dir="auto"><strong>Flügge, Fynn-Jorin</strong>. <strong><a href="https://tore.tuhh.de/entities/publication/1cd390d3-732b-41c1-aa2b-07b71a64edd2" rel="nofollow">Realtime GPGPU FFT Ocean Water Simulation</a></strong>. Hamburg University of Technology. (2017).<br>
<strong>Gunnell, Garrett</strong>. <strong><a href="https://www.youtube.com/watch?v=yPfagLeUa7k" rel="nofollow">I Tried Simulating The Entire Ocean</a></strong>. (2023).<br>
<strong>Horvath, Christopher J</strong>. <strong><a href="https://dl.acm.org/doi/10.1145/2791261.2791267" rel="nofollow">Empirical Directional Wave Spectra for Computer Graphics</a></strong>. DigiPro. (2015).<br>
<strong>Tessendorf, Jerry</strong>. <strong><a href="https://people.computing.clemson.edu/~jtessen/reports/papers_files/coursenotes2004.pdf" rel="nofollow">Simulating Ocean Water</a></strong>. SIGGRAPH. (2004).<br>
<strong>Matusiak, Robert</strong>. <strong><a href="https://www.ti.com/lit/an/spra291/spra291.pdf" rel="nofollow">Implementing Fast Fourier Transform Algorithms of Real-Valued Sequences</a></strong>. Texas Instruments. (2001).<br>
<strong>Mihelich, Mark</strong>. <strong><a href="https://www.youtube.com/watch?v=Dqld965-Vv0" rel="nofollow">Wakes, Explosions and Lighting: Interactive Water Simulation in 'Atlas'</a></strong>. GDC. (2019).<br>
<strong>Pensionerov, Ivan</strong>. <strong><a href="https://github.com/gasgiant/FFT-Ocean">FFT-Ocean</a></strong>. GitHub. (2020).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Attribution</h2><a id="user-content-attribution" aria-label="Permalink: Attribution" href="#attribution"></a></p>
<p dir="auto"><strong><a href="https://polyhaven.com/a/evening_road_01_puresky" rel="nofollow">Evening Road 01 (Pure Sky)</a></strong> by <strong>Jarod Guest</strong> is used under the <a href="https://creativecommons.org/publicdomain/zero/1.0/" rel="nofollow">CC0 1.0</a> license.<br>
<strong><a href="http://wwwa.pikara.ne.jp/okojisan/otfft-en/stockham3.html" rel="nofollow">OTFFT DIT Stockham Algorithm</a></strong> by <strong>Takuya Okahisa</strong> is used and modified under the <a href="http://wwwa.pikara.ne.jp/okojisan/otfft-en/download.html" rel="nofollow">MIT</a> license.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Amusing Ourselves to Death (341 pts)]]></title>
            <link>https://otpok.com/2014/01/03/amusing-ourselves-to-death/</link>
            <guid>41678208</guid>
            <pubDate>Sat, 28 Sep 2024 05:56:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://otpok.com/2014/01/03/amusing-ourselves-to-death/">https://otpok.com/2014/01/03/amusing-ourselves-to-death/</a>, See on <a href="https://news.ycombinator.com/item?id=41678208">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page" role="main">

		
			
<article id="post-1457">
	<!-- .entry-header -->

	<div>
		<p><a href="http://www.diet-specialist.co.uk/pathofknowledge"><img src="https://otpok.com/wp-content/uploads/2014/01/diet-specialist-1.gif?w=646&amp;h=106" alt="" width="646" height="106"></a></p>
<p>This is perhaps one of the most striking passages I have read for a while. It describes the modern world with startling accuracy. In our fear of an increasingly authoritarian rule, we have allowed a far more dangerous vision to come true: <span><strong><em>heedlessness</em></strong></span></p>
<p>Below is the foreward of Neil Postman’s book “<strong>Amusing Ourselves to Death: Public Discourse in the Age of Show Business</strong>“, accompanied by a comic illustration of the two ideas. It gives a concise comparison of the two authors views and what they foresaw society will become. But perhaps the remarkable part of this whole story passage lies beyond its lines with us:</p>
<p><span><em><strong>Most of us will read this and continue living our life exactly the same way as before</strong></em></span></p>
<p><span><strong><em>…wake up</em></strong></span></p>
<p>————————————————————–</p>
<blockquote><p>We were keeping our eye on 1984. When the year came and the prophecy didn’t, thoughtful Americans sang softly in praise of themselves. The roots of liberal democracy had held. Wherever else the terror had happened, we, at least, had not been visited by Orwellian nightmares.</p>
<p>But we had forgotten that alongside Orwell’s dark vision, there was another – slightly older, slightly less well known, equally chilling: Aldous Huxley’s Brave New World. Contrary to common belief even among the educated, Huxley and Orwell did not prophesy the same thing. Orwell warns that we will be overcome by an externally imposed oppression. But in Huxley’s vision, no Big Brother is required to deprive people of their autonomy, maturity and history. As he saw it, people will come to love their oppression, to adore the technologies that undo their capacities to think.</p>
<p>What Orwell feared were those who would ban books. What Huxley feared was that there would be no reason to ban a book, for there would be no one who wanted to read one. Orwell feared those who would deprive us of information. Huxley feared those who would give us so much that we would be reduced to passivity and egoism. Orwell feared that the truth would be concealed from us. Huxley feared the truth would be drowned in a sea of irrelevance. Orwell feared we would become a captive culture. Huxley feared we would become a trivial culture, preoccupied with some equivalent of the feelies, the orgy porgy, and the centrifugal bumblepuppy. As Huxley remarked in Brave New World Revisited, the civil libertarians and rationalists who are ever on the alert to oppose tyranny “failed to take into account man’s almost infinite appetite for distractions”. In 1984, Huxley added, people are controlled by inflicting pain. In Brave New World, they are controlled by inflicting pleasure. In short, Orwell feared that what we hate will ruin us. Huxley feared that what we love will ruin us.</p>
<p>This book is about the possibility that Huxley, not Orwell, was right</p>
<p><strong><em>[Neil Postman – Amusing ourselves to death]</em></strong></p></blockquote>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/screenshot_1.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/wpid-storageextsdcarddcimcomparison-1.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/wpid-storageextsdcarddcimcomparison-2.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/comparison-31.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/comparison-4.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/comparison-51.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/wpid-storageextsdcarddcimcomparison-6.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/comparison-71.png?w=700" alt=""></p>
<p><img src="https://otpok.com/wp-content/uploads/2014/01/screenshot_16.png?w=700" alt=""></p>
<p><em>[The comic is Stuart McMillen’s interpretation of media theorist Niel Postman’s book Amusing Ourselves to Death (1985), subtitled “Public Discourse in the Age of&nbsp;Show Business”]</em></p>

			
						</div><!-- .entry-content -->

	<!-- .entry-meta -->
</article><!-- #post-## -->
			<div>
	<h3>Related posts</h3>
	
		<article id="post-1449">

						<p><a href="https://otpok.com/2013/12/25/hamster/"><img width="50" height="50" src="https://otpok.com/wp-content/uploads/2013/12/skeleton-wheel.gif?w=50&amp;h=50&amp;crop=1" alt="" decoding="async" data-attachment-id="1450" data-permalink="https://otpok.com/2013/12/25/hamster/skeleton-wheel/" data-orig-file="https://otpok.com/wp-content/uploads/2013/12/skeleton-wheel.gif" data-orig-size="960,544" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;}" data-image-title="Skeleton Wheel" data-image-description="" data-image-caption="" data-medium-file="https://otpok.com/wp-content/uploads/2013/12/skeleton-wheel.gif?w=300" data-large-file="https://otpok.com/wp-content/uploads/2013/12/skeleton-wheel.gif?w=700" tabindex="0" role="button"></a>
			</p>
			
			<!-- .entry-header -->

		</article>

	
		<article id="post-2847">

						<p><a href="https://otpok.com/2020/03/28/deaths-spectre/"><img width="50" height="50" src="https://otpok.com/wp-content/uploads/2020/03/death-164761.jpg?w=50&amp;h=50&amp;crop=1" alt="" decoding="async" data-attachment-id="2849" data-permalink="https://otpok.com/2020/03/28/deaths-spectre/death-164761/" data-orig-file="https://otpok.com/wp-content/uploads/2020/03/death-164761.jpg" data-orig-size="1920,1271" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="death-164761" data-image-description="" data-image-caption="" data-medium-file="https://otpok.com/wp-content/uploads/2020/03/death-164761.jpg?w=300" data-large-file="https://otpok.com/wp-content/uploads/2020/03/death-164761.jpg?w=700" tabindex="0" role="button"></a>
			</p>
			
			<!-- .entry-header -->

		</article>

	
		<article id="post-498">

			
			<!-- .entry-header -->

		</article>

	</div>

				<!-- #nav-below -->
	
			
	<!-- #comments -->

		
		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Everything you need to know about Python 3.13 – JIT and GIL went up the hill (318 pts)]]></title>
            <link>https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/</link>
            <guid>41677131</guid>
            <pubDate>Sat, 28 Sep 2024 01:23:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/">https://drew.silcock.dev/blog/everything-you-need-to-know-about-python-3-13/</a>, See on <a href="https://news.ycombinator.com/item?id=41677131">Hacker News</a></p>
<div id="readability-page-1" class="page"><article> <p>On October 2<sup>nd</sup>, 2024, the Python core developers and community will release <a href="https://docs.python.org/3.13/whatsnew/3.13.html">CPython v3.13.0</a> – and it’s a doozy.</p>
<p>So what makes this release different, and why should you care about it?</p>
<p>In short, there are two big changes being made to how Python runs at a core level which have the potential to radically change the performance profile of Python code in the future.</p>
<p>Those changes are:</p>
<ul>
<li>A “free-threaded” version of CPython which allows you to disable the Global Interpreter Lock (GIL), and</li>
<li>Support for experimental Just-in-Time (JIT) compilation.</li>
</ul>
<p>So what are these new features and what impact will they have on you?</p>
<a href="#global-interpreter-lock-gil">#</a><h2 id="global-interpreter-lock-gil">Global Interpreter Lock (GIL)</h2>
<a href="#what-is-the-gil">#</a><h3 id="what-is-the-gil">What is the GIL?</h3>
<p>From the inception of the Python programming language by Guido Van Rossum in a science park in East Amsterdam in the late ’80s, it was designed and implemented as a single-threaded interpreted language. What exactly does this mean?</p>
<p>You’ll commonly hear that there are 2 types of programming languages – interpreted and compiled. So which is Python? The answer is: <strong>yes</strong>.</p>
<p>You will very rarely find a programming language which is purely interpreted from source by an interpreter. For interpreted languages, the human-readable source code is almost always compiled into some kind of intermediary form, called bytecode. The interpreter then looks at the bytecode and executes the instructions one-by-one.</p>
<p>The “interpreter” here is commonly called a “virtual machine”, especially in other languages like Java which does the same thing as Python re. <a href="https://en.wikipedia.org/wiki/Java_bytecode">Java bytecode</a> and <a href="https://en.wikipedia.org/wiki/List_of_Java_virtual_machines">Java VMs</a>. In Java and <a href="https://kotlinlang.org/">friends</a>, it’s much more common to ship the compiled bytecode itself, whereas Python applications are usually distributed as source code (although, having said that, packages are often deployed as <a href="https://packaging.python.org/en/latest/discussions/package-formats/#what-is-a-wheel">wheels</a> as well as <a href="https://packaging.python.org/en/latest/discussions/package-formats/#what-is-a-source-distribution">sdist</a> nowadays).</p>
<p>Virtual machines in this meaning of the word come up in all kinds of unexpected places, like in the PostScript format (PDF files are essentially compiled PostScript) and in font rendering<sup><a href="#user-content-fn-font-rendering" id="user-content-fnref-font-rendering" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup>.</p>
<p>If you’ve ever noticed a bunch of <code>*.pyc</code> files in your Python projects, this is the compiled bytecode for your application. You can decompile and explore <code>pyc</code> files in exactly the same way you can find Java class files.</p>
<p><span data-astro-cid-mrmim4ef="">💡</span> <span data-astro-cid-mrmim4ef=""> <p><strong>Python vs CPython</strong></p><p>I can already hear a chorus of pedantic Pythonistas shouting “Python isn’t the same as CPython!”, and they’re right. And this is an important distinction to make.</p><p>Python is the programming language, which is essentially a specification saying what the language should do.</p><p>CPython is the <em>reference implementation</em> of this language specification, and what we’re talking about here is mostly about the CPython implementation. There are other Python implementations, like <a href="https://pypy.org/">PyPy</a> which has always used JIT compilation, <a href="https://www.jython.org/">Jython</a> which runs on the JVM and <a href="https://ironpython.net/">IronPython</a> which runs on the .NET CLR.</p><p>Having said that, pretty much everyone just uses CPython and so I think it’s reasonable to talk about “Python” when we’re really talking about CPython. If you disagree, go ahead and get in the comments or write me a strongly worded email with an aggressive font (maybe <a href="https://www.google.com/search?q=impact+font">Impact</a>; I’ve always thought <a href="https://www.google.com/search?q=comic+sans">Comic Sans</a> has a subtly threatening aura).</p> </span> </p> 
<p>So when we run Python, the <code>python</code> executable will generate the bytecode which is a stream of instructions, then the interpreter will read and execute the instructions one-by-one.</p>
<p>If you try to spin up multiple threads, what happens then? Well, the threads all share the same memory (apart from their local variables) and so they can all access and update the same objects. Each thread will be executing its own bytecode using its own stack and instruction pointer.</p>
<p>What happens if multiple threads try to access / edit the same object at the same time? Imagine one thread is trying to add to a dict while another is trying to read from it. There are two options here:</p>
<ul>
<li>Make the implementation of dict (and all the other objects) thread-safe, which takes a lot of effort and will make it slower for a single-threaded application, or</li>
<li>Create a global mutual exclusion lock (a.k.a. mutex) which allows only one thread to be executing bytecode at any one time.</li>
</ul>
<p>This latter option is the GIL. The former option is what the Python developers are calling “free-threading” mode.</p>
<p>It’s also worth mentioning that the GIL makes garbage collection much simpler and faster. We don’t have time to go into the depths of garbage collection here as it’s a whole big topic in itself, but a simplified version is that Python keeps a count of how many references there are to a particular object, and when that count reaches zero, Python knows that it can safely delete that object. If there are multiple threads concurrently creating and dropping references to different objects, this can lead to race conditions and memory corruptions, so any free-threaded version needs to use atomically counted references for all objects.</p>
<p>The GIL also makes it much easier to develop C extensions for Python (e.g. using the confusingly named <a href="https://cython.org/">Cython</a>) as you can make assumptions about thread safety that make your life much easier, check out the <a href="https://py-free-threading.github.io/porting">py-free-threading guide for porting C extensions</a> for more details on this.</p>
<a href="#why-does-python-have-a-gil">#</a><h3 id="why-does-python-have-a-gil">Why does Python have a GIL?</h3>
<p>Despite having a surge in popularity over the last few years, it’s not a particularly new language – it was conceived in the late ’80s, with the first release on 20<sup>th</sup> February 1991 (making it slightly older than me). Back then, computers looked very different. Most programs were single-threaded and the performance of individual cores was increasing exponentially (see good old <a href="https://en.wikipedia.org/wiki/Moore%27s_law">Moore’s Law</a>). In this environment, it didn’t make much sense to compromise single-threaded performance for thread safety when most programs would not be utilising multiple cores.</p>
<p>Also, implementing thread safety obviously takes a lot of work.</p>
<p>This isn’t to say that you can’t utilise multiple cores in Python. It just means that instead of using threading, you have to utilise multiple processes (i.e. <a href="https://docs.python.org/3/library/multiprocessing.html"><code>multiprocessing</code></a> module).</p>
<p>Multi-processing differs from multi-threading because each process is its own Python interpreter with its own separate memory space. This means that multiple processes can’t access the same objects in memory but instead you have to use special constructs and communication to share data (see <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes">“Sharing state between processes”</a> and <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue"><code>multiprocessing.Queue</code></a>).</p>
<p>It’s worth mentioning that there is a bit more overhead in using multiple processes as opposed to multiple threads, in addition to it being more difficult to share data.</p>
<p>Using multiple threads is sometimes not as bad as people commonly assume, however. If Python is doing I/O like reading from files or making network calls, it will release the GIL so that other threads can run. This means that if you’re doing lots of I/O, multi-threading will often be as fast as multi-processing. It’s when you are CPU-bound that the GIL becomes a big issue.</p>
<a href="#ok-so-why-are-they-removing-the-gil-now">#</a><h3 id="ok-so-why-are-they-removing-the-gil-now">Ok, so why are they removing the GIL now?</h3>
<p>The removal of the GIL has been something that certain people have been pushing for for several years now, but the main reason it’s not been done is not the amount of work it takes but instead is the corresponding performance degradation that would come with it for single-threaded programs.</p>
<p>Nowadays, the incremental improvements in single-core performance of computers doesn’t change too much from year to year (although big advances are being made with custom processor architectures, e.g. Apple Silicon chips) while the number of cores in a computer continues to increase. This means it’s much more common for programs to utilise multiple cores and hence the inability of Python to properly utilise multi-threading is becoming more and more of an issue.</p>
<p>Fast forward to 2021 and <a href="https://github.com/colesbury">Sam Gross</a> implemented a <a href="https://lwn.net/ml/python-dev/CAGr09bSrMNyVNLTvFq-h6t38kTxqTXfgxJYApmbEWnT71L74-g@mail.gmail.com/">no-GIL Proof of Concept implementation</a> that spurred the <a href="https://github.com/python/steering-council">Python Steering Council</a> to propose a vote on <a href="https://peps.python.org/pep-0703/">PEP 703 – Making the Global Interpreter Lock Optional in CPython</a>. The outcome of the vote was positive, resulting in the Steering Council <a href="https://discuss.python.org/t/a-steering-council-notice-about-pep-703-making-the-global-interpreter-lock-optional-in-cpython/30474">accepting the proposal</a> as part of a <a href="https://discuss.python.org/t/pep-703-making-the-global-interpreter-lock-optional-in-cpython-acceptance/37075">gradual rollout</a> in three phases:</p>
<ul>
<li><strong>Phase 1</strong>: Free-threading mode is an experimental build-time option that is not the default.</li>
<li><strong>Phase 2</strong>: Free-threading mode is officially supported but still not the default.</li>
<li><strong>Phase 3</strong>: Free-threading mode is the default.</li>
</ul>
<p>From reading the discussions, there’s a strong desire to not “split” Python into two separate implementations – one with the GIL and one without – with the intention being that eventually after free-threading mode has been the default for a while, the GIL will be removed entirely and the free-threading mode will be the only mode.</p>
<p>While all this GIL vs. no-GIL stuff has been going on the last few years, there has been a parallel effort called the “Faster CPython” project. This has been <a href="https://lwn.net/ml/python-dev/CAGr09bSrMNyVNLTvFq-h6t38kTxqTXfgxJYApmbEWnT71L74-g@mail.gmail.com/">funded by Microsoft</a> and led by <a href="https://us.pycon.org/2023/speaker/profile/81/index.html">Mark Shannon</a> and <a href="https://gvanrossum.github.io/">Guido van Rossum</a> himself, both of whom work at Microsoft.</p>
<p>The effort this team have been making has produced some very impressive results, particularly for <a href="https://docs.python.org/3/whatsnew/3.11.html#faster-cpython">3.11</a> which boasted significant performance boosts over 3.10.</p>
<p>With the combination of community / council support, increasing ubiquity of multi-core processors and the Faster CPython effort, the time was ripe for the beginning of Phase 1 of the GIL adoption plan.</p>
<a href="#what-does-the-performance-look-like">#</a><h3 id="what-does-the-performance-look-like">What does the performance look like?</h3>
<p>I’ve run a few benchmarks on both my machine – MacBook Pro with Apple M3 Pro (CPU has 6 performance cores and 6 efficiency cores) – and on a quiet EC2 instance – t3.2xlarge (8 vCPUs).</p>
<p>The graphs below show a comparison of the runtime performance of a CPU-intensive task (converging Mandelbrot set) between Python 3.12 and Python 3.13 with and without the GIL.</p>
<img src="https://drew.silcock.dev/_astro/bench-comparison-m3-dark.B6MCcmGa_96BpF.webp" alt="Performance comparison for Apple M3 Pro" width="2400" height="800" loading="lazy" decoding="async">
<img src="https://drew.silcock.dev/_astro/bench-comparison-m3-light.CBPn1teC_Z1H6EDr.webp" alt="Performance comparison for Apple M3 Pro" width="2400" height="800" loading="lazy" decoding="async">
<img src="https://drew.silcock.dev/_astro/bench-comparison-ec2-dark.DsCVDY3z_2hOeU1.webp" alt="Performance comparison for t3.2xlarge EC2 instance" width="2400" height="800" loading="lazy" decoding="async">
<img src="https://drew.silcock.dev/_astro/bench-comparison-ec2-light.ojc_JmYg_Z1h2QNH.webp" alt="Performance comparison for t3.2xlarge EC2 instance" width="2400" height="800" loading="lazy" decoding="async">
<p>(These graphs aren’t the most readable, I know – I’ll improve on them when I get some time.)</p>
<p>To explain what these runtimes mean:</p>
<ul>
<li><code>3.12.6</code> – Python version 3.12.6.</li>
<li><code>3.13.0rc2</code> – the default build of Python 3.13.0 release candidate 2 (the latest version at the time of writing).</li>
<li><code>3.13.0rc2t</code> – the Python 3.13.0 release candidate 2 with experimental free-threading enabled at build-time, run without additional arguments (i.e. GIL disabled).</li>
<li><code>3.13.0rc2t-g1</code> – the Python 3.13.0 release candidate 2 with experimental free-threading enabled at build-time, run with the <code>-X gil=1</code> argument, thereby “re-enabling” the GIL at runtime.</li>
</ul>
<p>A few caveats to this:</p>
<ul>
<li>I didn’t use a proper well established benchmark, just a simple iterative algorithm. You can find the code for running the benchmarks and graphing the results at: <a href="https://github.com/drewsilcock/gil-perf">github.com/drewsilcock/gil-perf</a>. Try it out for yourself!</li>
<li>I used <a href="https://github.com/sharkdp/hyperfine">hyperfine</a> to run the benchmarks, which is a really good tool, but these aren’t proper scientific benchmarks running on dedicated hardware. My MacBook is running a whole bunch of things and even the EC2 instance will have stuff going on in the background, although not nearly as much.</li>
<li>These benchmarks are really interesting and fun to talk about, but do bear in mind that in the real world, most libraries that do CPU-intensive work use <a href="https://cython.readthedocs.io/en/latest/src/userguide/nogil.html">Cython</a> or similar&nbsp;– very few people use raw Python for very compute-intensive tasks. Cython has the ability to release the GIL temporarily during execution and has had for a while. These benchmarks aren’t representative of this use case.</li>
</ul>
<p>With that in mind, we can already make a few observations:</p>
<ul>
<li>The performance degradation when Python is built with free-threading support is significant – around 20%.</li>
<li>It doesn’t matter whether you re-enable the GIL via the <code>-X gil=1</code> argument, the performance degradation is the same.</li>
<li>Multi-threading shows a significant boost with GIL disabled, as expected.</li>
<li>Multi-threading with GIL enabled is slower than single-threading, as expected.</li>
<li>Multi-threading with GIL disabled is about the same as multi-processing. Then again, this is a pretty noddy example where you don’t need to do much real work.</li>
<li>Apple Silicon chips really are quite impressive. Single-threaded performance on my M3 Pro is about 4x faster than single-threaded performance on the t3.2xlarge. I mean, I know t3 are designed to be cheap and burstable, but even so! It’s even more impressive if you consider the insane battery life you get out of these things<sup><a href="#user-content-fn-apple-sponsorship" id="user-content-fnref-apple-sponsorship" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup>.</li>
</ul>
<a href="#how-do-i-try-out-free-threaded-python">#</a><h3 id="how-do-i-try-out-free-threaded-python">How do I try out free-threaded Python?</h3>
<p>At the time of writing, Python 3.13 is still in release candidate and hasn’t been officially released. Having said that, today is Saturday 28<sup>th</sup> and the release is scheduled for 2<sup>nd</sup> October which is Wednesday, so its not far away.</p>
<p>If you want to try it out ahead of time, you’re out of luck with <a href="https://rye.astral.sh/">rye</a> which only seems to ship deployed versions and <a href="https://docs.astral.sh/uv/">uv</a> which includes the 3.13.0rc2 build but not the 3.13.0rc2t build. Luckily, <a href="https://github.com/pyenv/pyenv">pyenv</a> supports both 3.13.0rc2 and 3.13.0rc2t. To try it out for yourself:</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span># If you're reading this from the future, rye may have it:</span></p></div><div><div><p>2</p></div><p><span>$</span><span> </span><span>rye</span><span> </span><span>toolchain</span><span> </span><span>list</span><span> </span><span>--include-downloadable</span><span> </span><span>|</span><span> </span><span>rg</span><span> </span><span>-F</span><span> </span><span><a href="https://drew.silcock.dev/cdn-cgi/l/email-protection" data-cfemail="1e7d6e676a7671705e2d302f2d">[email&nbsp;protected]</a></span></p></div><div><p>3</p></div><div><div><p>4</p></div><p><span># uv may also have it</span></p></div><div><div><p>5</p></div><p><span>$</span><span> </span><span>uv</span><span> </span><span>python</span><span> </span><span>list</span><span> </span><span>|</span><span> </span><span>rg</span><span> </span><span>-F</span><span> </span><span>cpython-3.13</span></p></div><div><p>6</p></div><div><div><p>7</p></div><p><span># pyenv should have it, though.</span></p></div><div><div><p>8</p></div><p><span>$</span><span> </span><span>pyenv</span><span> </span><span>install</span><span> </span><span>--list</span><span> </span><span>|</span><span> </span><span>rg</span><span> </span><span>'^\s+3\.13'</span></p></div><div><p>9</p></div><div><div><p>10</p></div><p><span># Take 3.13.0rc2t for a spin</span></p></div><div><div><p>11</p></div><p><span>$</span><span> </span><span>pyenv</span><span> </span><span>install</span><span> </span><span>3.13.0rc2t</span></p></div><div><div><p>12</p></div><p><span>$</span><span> </span><span>pyenv</span><span> </span><span>local</span><span> </span><span>3.13.0rc2t</span></p></div><div><p>13</p></div><div><div><p>14</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>-VV</span></p></div><div><div><p>15</p></div><p><span>Python</span><span> </span><span>3.13.0rc2</span><span> </span><span>experimental</span><span> </span><span>free-threading</span><span> </span><span>build</span><span> (main, </span><span>Sep</span><span> </span><span>18</span><span> </span><span>2024,</span><span> </span><span>16:41:38</span><span>) [Clang </span><span>15.0.0</span><span> (clang</span><span>-</span><span>1500</span><span>.</span><span>3</span><span>.</span><span>9</span><span>.</span><span>4</span><span>)]</span></p></div><div><p>16</p></div><div><div><p>17</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>-c</span><span> </span><span>'import sys;print("GIL enabled 🔒" if sys._is_gil_enabled() else "GIL disabled 😎")'</span></p></div><div><div><p>18</p></div><p><span>GIL</span><span> </span><span>disabled</span><span> </span><span>😎</span></p></div><div><p>19</p></div><div><div><p>20</p></div><p><span># GIL can be re-enabled at runtime</span></p></div><div><div><p>21</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>-X</span><span> </span><span>gil=</span><span>1</span><span> </span><span>-c</span><span> </span><span>'import sys;print("GIL enabled 🔒" if sys._is_gil_enabled() else "GIL disabled 😎")'</span></p></div><div><div><p>22</p></div><p><span>GIL</span><span> </span><span>enabled</span><span> </span><span>🔒</span></p></div></code></pre></figure></div>
<p>Just a heads up if you are trying free-threading Python – if you don’t specify either <code>-X gil=0</code> or <code>-X gil=1</code>, the GIL will be disabled by default but simply importing a module which does not support running without the GIL will cause the GIL to be re-enabled. I found this when running the benchmarks because I imported matplotlib, which results in the GIL being re-enabled and all my benchmarks coming out rubbish. If you manually specify <code>-X gil=0</code>, the GIL will not be sneakily re-enabled, even if a package does not mark itself as supporting GIL-free running.</p>
<a href="#jit-just-in-time-compiler">#</a><h2 id="jit-just-in-time-compiler">JIT (Just-in-Time) Compiler</h2>
<p>It’s not just the GIL that’s a big change in this Python release – there’s also the addition into the Python interpreter of an experimental JIT compiler.</p>
<a href="#what-is-a-jit">#</a><h3 id="what-is-a-jit">What is a JIT?</h3>
<p>JIT stands for Just in Time and is a compilation technique where machine code is produced just in time to execute it, as opposed to ahead of time (AOT) like your traditional C compiler like gcc or clang.</p>
<p>We already talked about bytecode and the interpreter earlier. The important thing is that, before Python 3.13, the interpreter would look at each bytecode instruction one at a time and turn each one into native machine code before executing it. With the introduction of the JIT compiler, it is now possible for bytecode to be “interpreted” into machine code once and updated as necessary, instead of being re-interpreted every time.</p>
<p>It’s important to point out that this kind of JIT that has been <a href="https://github.com/python/cpython/pull/113465">introduced in 3.13</a> is what’s called <a href="https://en.wikipedia.org/wiki/Copy-and-patch">“copy-and-patch” JIT</a>. This is a very recent idea introduced in 2021 in an article called <a href="https://dl.acm.org/doi/10.1145/3485513">“Copy-and-patch compilation: a fast compilation algorithm for high-level languages and bytecode</a>. The core idea behind copy-and-patch as opposed to more advanced JIT compilers is that there is a simple list of pre-generated templates – the JIT compiler will pattern match for bytecode that matches one of the pre-defined templates and if it does, it will patch in pre-generated native machine code.</p>
<p>Traditional JIT compilers will be massively more advanced that this and also massively more memory intensive, especially if you compare it to heavily JIT-compiled languages like Java or C#. (That’s part of the reason Java programs take up so much memory.)</p>
<p>What’s great about JIT compilers is that they can adapt to your code as its running. For instance, as your code runs, the JIT compiler will keep track of how “hot” each piece of code is. JIT compilers can perform incremental optimisations as the code get hotter and hotter and even use information about how the program is actually running to inform the optimisations it is making (like how Profile-Guided Optimisation does for AOT compilers). This means that JIT doesn’t waste time optimising some code which is only running once but the really hot sections of code can have heavy run-time informed optimisations done on them.</p>
<p>Now, the JIT compiler in Python 3.13 is relatively simple and won’t be doing any crazy at this stage, but it’s a really exciting development for the future of Python performance.</p>
<a href="#what-difference-will-the-jit-make-to-me">#</a><h3 id="what-difference-will-the-jit-make-to-me">What difference will the JIT make to me?</h3>
<p>In the short term, the introduction of the JIT is unlikely to make any difference to how you write or run your Python code. But it’s an exciting internal change to the way that the Python interpreter operates that could lead to much more significant performance improvements being made to Python performance in the future.</p>
<p>In particular, it opens up the way for incremental performance improvements to be made over time which could gradually bump up Python’s performance to be more competitive with other languages. Having said that, this is still early stages and the copy-and-patch JIT technique is both new and lightweight, so there’s more big changes needed before we start seeing significant benefits from the JIT compiler.</p>
<a href="#how-do-i-try-out-the-jit">#</a><h3 id="how-do-i-try-out-the-jit">How do I try out the JIT?</h3>
<p>The JIT compilers is “experimental” in 3.13 and isn’t built with support out of the box (at least not when I downloaded 3.13.0rc2 using pyenv). You can enable experimental JIT support by doing:</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>$</span><span> </span><span>PYTHON_CONFIGURE_OPTS="--enable-experimental-jit"</span><span> </span><span>pyenv</span><span> </span><span>install</span><span> </span><span>3.13-dev</span></p></div><div><div><p>2</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>openssl@3</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>3</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>readline</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>4</p></div><p><span>Cloning</span><span> </span><span>https://github.com/python/cpython...</span></p></div><div><div><p>5</p></div><p><span>Installing</span><span> </span><span>Python-3.13-dev...</span></p></div><div><div><p>6</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>tcl-tk</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>7</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>readline</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>8</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>ncurses</span><span> </span><span>from</span><span> </span><span>homebrew</span></p></div><div><div><p>9</p></div><p><span>python-build:</span><span> </span><span>use</span><span> </span><span>zlib</span><span> </span><span>from</span><span> </span><span>xcode</span><span> </span><span>sdk</span></p></div><div><div><p>10</p></div><p><span>Installed</span><span> </span><span>Python-3.13-dev</span><span> </span><span>to</span><span> </span><span>/Users/drew.silcock/.pyenv/versions/3.13-dev</span></p></div><div><div><p>11</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>-c</span><span> </span><span>'import sysconfig;print("JIT enabled 🚀" if "-D_Py_JIT" in sysconfig.get_config_var("PY_CORE_CFLAGS") else "JIT disabled 😒")'</span></p></div><div><div><p>12</p></div><p><span>JIT</span><span> </span><span>enabled</span><span> </span><span>🚀</span></p></div></code></pre></figure></div>
<p>There are additional configure options which you can read about <a href="https://discuss.python.org/t/pep-744-jit-compilation/50756">on the PEP 744 discussion page</a> (like enabling the JIT but requiring it be enabled by running <code>-X jit=1</code> at runtime, etc.).</p>
<p>The test here only checks for whether the JIT was enabled at built-time, not whether it’s currently running (e.g. has been disabled at runtime). It is possible to check at runtime whether the JIT is enabled, but it’s a bit more tricky. Here’s a script you can use to figure it out (taken from the <a href="https://discuss.python.org/t/pep-744-jit-compilation/50756/53">PEP 744 discussion page</a>)[^jit-deps]:</p>
<div><figure><pre data-language="python"><code><div><div><p>1</p></div><p><span>import</span><span> _opcode</span></p></div><div><div><p>2</p></div><p><span>import</span><span> types</span></p></div><div><p>3</p></div><div><p>4</p></div><div><div><p>5</p></div><p><span>def</span><span> </span><span>is_jitted</span><span>(f: types.FunctionType) -&gt; </span><span>bool</span><span>:</span></p></div><div><div><p>6</p></div><p><span>    </span><span>for</span><span> i </span><span>in</span><span> </span><span>range</span><span>(</span><span>0</span><span>, </span><span>len</span><span>(f.</span><span>__code__</span><span>.co_code), </span><span>2</span><span>):</span></p></div><div><div><p>7</p></div><p><span>        </span><span>try</span><span>:</span></p></div><div><div><p>8</p></div><p><span><span>            </span></span><span>_opcode.get_executor(f.</span><span>__code__</span><span>, i)</span></p></div><div><div><p>9</p></div><p><span>        </span><span>except</span><span> </span><span>RuntimeError</span><span>:</span></p></div><div><div><p>10</p></div><p><span>            </span><span># This isn't a JIT build:</span></p></div><div><div><p>11</p></div><p><span>            </span><span>return</span><span> </span><span>False</span></p></div><div><div><p>12</p></div><p><span>        </span><span>except</span><span> </span><span>ValueError</span><span>:</span></p></div><div><div><p>13</p></div><p><span>            </span><span># No executor found:</span></p></div><div><div><p>14</p></div><p><span>            </span><span>continue</span></p></div><div><div><p>15</p></div><p><span>        </span><span>return</span><span> </span><span>True</span></p></div><div><div><p>16</p></div><p><span>    </span><span>return</span><span> </span><span>False</span></p></div><div><p>17</p></div><div><p>18</p></div><div><div><p>19</p></div><p><span>def</span><span> </span><span>fibonacci</span><span>(n):</span></p></div><div><div><p>20</p></div><p><span><span>    </span></span><span>a, b </span><span>=</span><span> </span><span>0</span><span>, </span><span>1</span></p></div><div><div><p>21</p></div><p><span>    </span><span>for</span><span> _ </span><span>in</span><span> </span><span>range</span><span>(n):</span></p></div><div><div><p>22</p></div><p><span><span>        </span></span><span>a, b </span><span>=</span><span> b, a </span><span>+</span><span> b</span></p></div><div><div><p>23</p></div><p><span>    </span><span>return</span><span> a</span></p></div><div><p>24</p></div><div><p>25</p></div><div><div><p>26</p></div><p><span>def</span><span> </span><span>main</span><span>():</span></p></div><div><div><p>27</p></div><p><span><span>    </span></span><span>fibonacci(</span><span>100</span><span>)</span></p></div><div><div><p>28</p></div><p><span>    </span><span>if</span><span> is_jitted(fibonacci):</span></p></div><div><div><p>29</p></div><p><span>        </span><span>print</span><span>(</span><span>"JIT enabled 🚀"</span><span>)</span></p></div><div><div><p>30</p></div><p><span>    </span><span>else</span><span>:</span></p></div><div><div><p>31</p></div><p><span>        </span><span>print</span><span>(</span><span>"Doesn't look like the JIT is enabled 🥱"</span><span>)</span></p></div><div><p>32</p></div><div><p>33</p></div><div><p>34</p></div><div><div><p>35</p></div><p><span>if</span><span> </span><span>__name__</span><span> </span><span>==</span><span> </span><span>"__main__"</span><span>:</span></p></div><div><div><p>36</p></div><p><span><span>    </span></span><span>main()</span></p></div></code></pre></figure></div>
<p>The PEP 744 discussion has mention of both <code>PYTHON_JIT=0/1</code> and <code>-X jit=0/1</code> – I did not find that the <code>-X</code> option did anything at all, but the environment variable seems to do the trick.</p>
<div><figure><pre data-language="shell"><code><div><div><p>1</p></div><p><span>$</span><span> </span><span>python</span><span> </span><span>is-jit.py</span></p></div><div><div><p>2</p></div><p><span>JIT</span><span> </span><span>enabled</span><span> </span><span>🚀</span></p></div><div><div><p>3</p></div><p><span>$</span><span> </span><span>PYTHON_JIT=</span><span>0</span><span> </span><span>python</span><span> </span><span>is-jit.py</span></p></div><div><div><p>4</p></div><p><span>Doesn</span><span>'t look like the JIT is enabled 🥱</span></p></div></code></pre></figure></div>
<p>[^jit-deps] I also found a few people online talking about how you could use <code>sysconfig.get_config_var("JIT_DEPS")</code> but I did not found that this worked at all for me.</p>
<a href="#conclusion">#</a><h2 id="conclusion">Conclusion</h2>
<p>Python 3.13 is a big release in introducing some exciting new concepts and features to the runtime. It’s unlikely to make any immediate different to how you write and run your Python, but it’s likely that over the next few months and years as both free-threading and JIT become more mature and well established, they’ll begin to have more and more of an impact on the performance profile of Python code, particularly for CPU-bound tasks.</p>
<a href="#further-reading">#</a><h2 id="further-reading">Further reading</h2>
<ul>
<li><a href="https://peps.python.org/pep-0703/">PEP 703 – Making the Global Interpreter Lock Optional in CPython</a></li>
<li><a href="https://py-free-threading.github.io/">py-free-threading</a></li>
<li><a href="https://tonybaloney.github.io/posts/python-gets-a-jit.html">Python 3.13 gets a JIT – Anthony Shaw</a></li>
<li><a href="https://peps.python.org/pep-0744/">PEP 744 – JIT Compilation</a></li>
<li><a href="https://discuss.python.org/t/pep-744-jit-compilation/50756">Discuss – PEP 744: JIT Compilation</a></li>
</ul>
<section data-footnotes=""><a href="#footnote-label">#</a>
<ol>
<li id="user-content-fn-font-rendering">
<p>Font rendering is a fascinating topic and that immensely complex. Trust me, however complicated you think font rendering is, it’s more complicated that that. IIRC most of the complexity actually comes from nicely drawing text at small resolutions. For instance, in TrueType both a whole font and individual glyphs have instructions associated with them which are executed by the FontEngine virtual machine a.k.a. interpreter. If this is something you’re interested in learning more about, I highly recommend Sebastian Lague’s video – <a href="https://www.youtube.com/watch?v=SO83KQuuZvg&amp;pp=ygUOZm9udCByZW5kZXJpbmc%3D">Coding Adventure: Rendering Text</a>. He makes really great videos. The <a href="https://developer.apple.com/fonts/TrueType-Reference-Manual/RM02/Chap2.html#how_works">TrueType reference</a> is also surprisingly readable. <a href="#user-content-fnref-font-rendering" data-footnote-backref="" aria-label="Back to reference 1">↩</a></p>
</li>
<li id="user-content-fn-apple-sponsorship">
<p>Apple aren’t even paying me to say this stuff, it’s just true. <a href="#user-content-fnref-apple-sponsorship" data-footnote-backref="" aria-label="Back to reference 2">↩</a></p>
</li>
</ol>
</section>   </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[If WordPress is to survive, Matt Mullenweg must be removed (237 pts)]]></title>
            <link>https://joshcollinsworth.com/blog/fire-matt</link>
            <guid>41676653</guid>
            <pubDate>Fri, 27 Sep 2024 23:49:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://joshcollinsworth.com/blog/fire-matt">https://joshcollinsworth.com/blog/fire-matt</a>, See on <a href="https://news.ycombinator.com/item?id=41676653">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main" tabindex="-1"><article><img src="https://joshcollinsworth.com/images/post_images/beatings.webp" alt="" width="1920" height="1388">

		

		<p><b>Published:</b>
			September 27, 2024
			</p>

		
		<div><p>This post is a little more hasty than some of my others, in the interest of expedience. I hope you’ll bear with the poorly edited jumble of thoughts. It’s being actively edited. I also usually avoid cussing on my blog, but I do a little here because it feels warranted.</p>
<p>Cover image from <a href="https://www.etsy.com/listing/1341940035/the-beatings-will-continue-until-morale" rel="nofollow">this Etsy store</a> (unaffiliated).</p></div>
<p>There are some people who think being right about something gives them the right to do whatever they think should be done about it; a license to act however they see fit in order to correct that wrong.</p>
<p>This, of course, is never the case. Doing the wrong thing for the right reason never makes it the right thing. No matter how bad the original infraction, there are some responses it never justifies. Two wrongs don’t make a right, to be pithy about it. The ends don’t justify…you know how it goes.</p>
<p>Matt Mullenweg appears to be one of those people who believe the ends do indeed justify the means, as he’s effectively blowing up massive swaths of the WordPress community in his fight with some of its landlords.</p>
<p>Matt has, for far too long, enjoyed unchecked powers at the top of WordPress—powers which are all too often a direct and flagrant conflict of interest. And while we’ve seen this power abused before, we’ve never seen it on this scale.</p>
<p>Yes, Matt’s original point <em>might</em> be warranted. But his egregious actions utterly nullify any previous merit.</p>
<p>A line has been crossed, and the entire community is worse for it.</p>


<p>I believe that if WordPress is to survive, let alone thrive, Matt Mullenweg must be removed from all forms of official WordPress leadership, as expediently as possible.</p>

<h2 id="wait-who-are-you-and-why-do-you-care">Wait, who are you and why do you care?</h2>
<p>Let’s get this out of the way right off: I’m not the best person to be talking about this. I haven’t really been involved in WordPress for about five years now. Honestly, I couldn’t tell you the last time I even logged in to a WordPress site.</p>
<p>That said, however: I spent some six or seven years of my life deep in the WordPress world. I built and customized WordPress sites for clients as a designer; I taught a WordPress development course (focused on building custom themes in PHP) for about five years; and I worked in support for Flywheel, a managed WordPress hosting company, for a little over five years. It was there I transitioned to full-time frontend work, building tools to help support WordPress sites.</p>
<p>So while I’ve been out of the WordPress game for a good while now, I still might be considered an expert next to your average Joe. I’d like to think I could still sling some theme templates with the best of ‘em. (Hell, some days I even get a little nostalgic and think about booting up a Local site just for fun.)</p>
<p>You might have spotted the word “Flywheel” up there and realized that company was acquired by WP Engine—the company with which Mullenweg is publicly feuding at the moment—back in 2019. That might reasonably raise questions of my objectivity, so let’s get this out of the way:</p>
<p>Yes, I used to work for WP Engine. I even kinda liked them, for a while (mostly while they just kinda left us alone for the first year or so). But I wouldn’t say my time at the company left a good taste in my mouth.</p>
<p>We don’t need to dredge up a bunch of old and buried stuff that isn’t really important anyway, but suffice to say: I really don’t have any reason to be a WP Engine cheerleader. Most of the people I knew there have left, and I’ve watched from the sidelines as the company has implemented a bunch of scummy policies and shady sales tactics to squeeze money from their customers and make it harder to leave.</p>
<p>On most days, if you wanted to have a conversation about how much WP Engine sucks, frankly, I’d be a happy participant.</p>
<p>So this post might be a lot of things, but I can assure you it’s <em>not</em> me defending my old company just because I used to work for them. I’ve got literally no reason to do that.</p>


<p>To the extent I’m on WP Engine’s side, it’s not because of any sense of loyalty to the company or to the remaining good people I know there; it’s because I believe what Matt’s doing is deeply wrong and foolishly destructive.</p>

<p>I’ll also go on record as saying I got pretty far in the interview process at Automattic once, a few years back. And, since we’re being honest, it was the absolute <em>worst</em> interview process I’ve ever taken part of as a web professional (though the people themselves were lovely). But that alone ain’t gonna get a post out of me. I’m not wasting my time and yours just to gripe about an interview I chose to drop out of over three years ago. Just thought it merited a mention.</p>
<p>I still regarded Matt Mullenweg himself pretty highly after that, up until the last year or so. This post isn’t long enough to get into the details, but Matt had already become a pretty “problemattic” character well before any of this went down.</p>
<p>So in summary: I’m not a big fan of either party, and I don’t have any good reason to side with either one of them.</p>
<p>I <em>am</em>, however, somebody who still cares deeply about WordPress. It’s what gave me my start, and I still recommend it to a lot of people when they ask me what system might best suit their needs.</p>
<p>It’s a wonderful community, all in all, and despite my inactivity, I still feel invested in WordPress, and interested in seeing it continue to be a productive way to democratize the web.</p>
<p>Finally: I am not a lawyer, and since it’s Friday now and this feud had already reached lawyers-involved level by Monday morning, I should be careful to clarify any legal commentary here is expressly my personal, non-expert opinion.</p>
<h2 id="im-sorry-what-happened">I’m sorry, what happened?</h2>
<p>For those of you who haven’t been following the story thus far (read: aren’t chronically online web nerds like me), let’s hit the highlights.</p>
<h3 id="automattic-approaches-wp-engine-to-offer-a-license">Automattic approaches WP Engine to offer a “license”</h3>
<p>Sometime in or around July of this year, <a href="https://automattic.com/" rel="nofollow">Automattic</a> (Matt Mullenweg’s for-profit company, which owns, among other things, <a href="https://wordpress.com/" rel="nofollow">WordPress.com</a>, a major WordPress hosting company) reached out to <a href="https://wpengine.com/" rel="nofollow">WP Engine</a> (also a for-profit company that offers WordPress hosting, and probably Automattic’s largest business rival).</p>
<p>Automattic was offering WP Engine some kind of “licensing,” at a rate of 8% of total business revenue, adding up to the eye-popping sum of several million dollars per year.</p>
<p>WP Engine apparently turned down this offer, presumably because <em>it doesn’t appear they actually need any license</em>. The term “WP” is explicitly not covered by the <a href="https://wordpressfoundation.org/trademark-policy/" rel="nofollow">WordPress trademark policy</a>, and using the term “WordPress” to describe products and services (e.g., calling yourself a “WordPress specialist,” or saying you offer “WordPress hosting”) is fully allowed, according to the policy.</p>
<p>They’ve also been in business for like 15 years now, and somehow none of this has come up before.</p>
<p>Besides, I could name dozens of companies just off the top of my head also using one or both of those terms. So the “you need a license to say this” argument seems highly targeted and extremely dubious.</p>
<h3 id="matts-rejected-so-he-tries-new-strategies">Matt’s rejected, so he tries new strategies</h3>
<p>Immediately following WP Engine’s rejection, <a href="https://wordpressfoundation.org/" rel="nofollow">the WordPress Foundation</a> (the nonprofit that governs WordPress, the open source software, and which Matt Mullenweg <em>also</em> runs, in effect if not nominally) <a href="https://www.searchenginejournal.com/wordpress-files-to-trademark-managed-wordpress-hosted-wordpress/528112/" rel="nofollow">filed to trademark the terms “Managed WordPress” and “Hosted WordPress</a>.”</p>
<p>Neither trademark has been granted at this point, nor should they; they’ve been in use for ages, and are obviously far too generic for any one organization to hold.</p>
<p>Most reasonable and knowledgeable people seem to share this opinion. Companies have been describing themselves as one or both of those terms for around 15 years at this point. (We freely called Flywheel a “managed WordPress hosting company” the entire time I worked there, and we were far from the first. We were also at one point one of WordPress.org’s recommended hosts. So…obviously, not a big deal.)</p>
<p>Anyway, this filing of spurious trademarks makes it appear very much like Matt’s endgame was to extract money from WP Engine, but he just needed more of a foundation to do it (pun intended?). So, following that initial rejection, Matt set the Foundation arm of WordPress working on securing highly dubious trademarks, which, again, I and most reasonable observers think and hope will fail.</p>
<p>Meanwhile, Matt <em>also</em> began sending a series of very apparently extortive messages to WP Engine leadership, essentially demanding they pay up or else. (This is all in <a href="https://wpengine.com/wp-content/uploads/2024/09/Cease-and-Desist-Letter-to-Automattic-and-Request-to-Preserve-Documents-Sent.pdf" rel="nofollow">WP Engine’s letter to Automattic</a>, which I’m getting to, but which comes later in the story.)</p>
<p>All of this was in the run-up to <a href="https://us.wordcamp.org/2024/" rel="nofollow">WordCamp US</a>, the largest WordPress event of the year, at least in North America. (Of note: WP Engine <a href="https://us.wordcamp.org/2024/sponsors/" rel="nofollow">sponsored this event</a> at the highest level, as did WordPress.com.)</p>
<p>Matt let WP Engine leadership know, via private DMs, that he intended to “go nuclear” and “scorched earth” on WP Engine in his keynote at the conference—that is, if WP Engine failed to acquiesce to his monetary demands, i.e., 8% of total revenue, i.e., tens of millions of dollars. It appears he repeated the “just pay up and I’ll make this all go away” offer up to the literal last minute before he went on stage.</p>


<p>Let’s not beat around the bush: words like “threat” and “extortion” very much apply to Matt’s behavior here.</p>

<p>Again: this demand was ostensibly in exchange for a “license” to use terms like “WordPress,” “WordPress hosting,” “WooCommerce,” etc.—none of which appear to be actually necessary.</p>
<p>The only <em>possible</em> exception seems to be “WooCommerce,” which <em>is</em> a trademark (and product/company) owned by Automattic. However, the lines are very blurry on what is and is not permissable when it comes to using the WooCommerce name. WP Engine does indeed call one of its offerings “WooCommerce hosting,” which is explicitly called out in the guidelines. So I don’t know, <em>maybe</em> there’s validity there. <em>Maybe</em>.</p>
<p>However, for one thing, it’s hard to know whether, or how much the trademark guidelines might have changed. Matt made several changes to the WordPress license page in the last week, among other things, to call out WP Engine. That makes me not trust that the WooCommerce license page I’m looking at today is the same as it was last week—which, all on its own, should be setting off raging alarms for even the most casual of observers. It’s extremely bad news when the company you’re doing business with can just decide what the new terms are with no warning or recourse.</p>
<p>Anyway, Matt keeps sending the DMs all the way up until the literal last minute, offering <em>not</em> to excoriate WP Engine onstage during his keynote at the country’s (continent’s? world’s?) largest WordPress event, provided they simply pay up.</p>
<p>Once more: I’m no lawyer, but I’m pretty sure that’s called extortion.</p>
<p>WP Engine says no (actually, they ask for more time, which Matt denies and takes as a no), so he proceeds with operation “scorched earth,” and blasts WP Engine both onstage at WordCamp US, and in several other venues.</p>
<h3 id="waitwhats-matts-actual-deal-why-is-he-doing-this">Wait—what’s Matt’s actual deal? Why is he doing this?</h3>
<p>Aside from the licensing issue, which I covered above (and which seems like a mostly flimsy premise to me), Matt’s got some other complaints with WP Engine. Some have validity, some seem completely made-up. Let’s walk through them.</p>
<h4 id="matt-claims-wp-engine-is-misrepresenting-itself">Matt claims WP Engine is misrepresenting itself</h4>
<p>Among Matt’s complaints: that WP Engine is “misrepresenting” itself as an entity that’s officially affiliated with and/or endorsed by WordPress itself. Matt’s repeatedly used as an example his own mom’s confusion; she apparently thought WP Engine was somehow affiliated with WordPress.com (I guess because they also use the word “WordPress,” and are maybe a vaguely similar shade of blue).</p>


<p>I’m sure it’s frustrating, having taken over half the internet and being worth hundreds of millions of dollars, only to find out your own mom <em>still</em> doesn’t really understand what you do, but: come on, bro.</p>

<p>First, <em>tons</em> of companies use “WP” in their names, and/or the names of their products. Why isn’t Matt going after them?</p>
<p>Second, as many people have already noted: Matt effectively runs both <code>wordpress.com</code> <em>and</em> <code>wordpress.org</code>, which are entirely separate entities that do two completely different things. You wanna tell me <em>that’s</em> clear, but somehow WP Engine and WordPress.com are too similar? Really?</p>
<p>Third, my kindergartner and every kid in his class could tell the difference between the WordPress W and WP Engine’s dumb logo. (WP Engine’s logo has always been a grid of weird, almost-square shapes that’s apparently meant to vaguely resemble an engine, but which makes no sense to pretty much anyone who’s ever seen it, far as I can tell. It’s a bad logo, in my professional opinion as a designer, even the slightly better version they just released recently. But I digress. Point is: it looks literally nothing like any WordPress logo. Also: it’s not the same color. I have color vision deficiency, and even <em>I</em> can tell that.)</p>
<p>Finally, for the whole two years I worked for Shopify, most of my family thought I was at Spotify. Now I’m at Deno, and nobody in my family has any clue what a JavaScript runtime is, and my dad basically thinks I work for Java.</p>
<p>Family members don’t always get tech. That’s not a sign that something is wrong, and it’s most <em>certainly</em> not a sign that any wrongdoing has been committed, let alone deliberately. (Which, I assume, probably wasn’t Matt’s mom’s point to begin with, but that didn’t stop him from running with it.)</p>
<h4 id="matt-claims-wp-engine-is-selling-a-cheap-knock-off-of-wordpress">Matt claims WP Engine is selling a “cheap knock-off” of WordPress</h4>
<p>Matt also claims WP Engine is selling “something that they’ve chopped up, hacked, butchered to look like WordPress.” His reason for this wild claim? Because WP Engine disables revisions (a default feature of WordPress, albeit a pretty small one).</p>
<p>Literally, that’s it. One tiny feature. The whole thing’s been “hacked and butchered” because they just chose to modify one tiny detail.</p>
<p>Of all Matt’s spurious claims, this one might be the one that reeks the most of absolute made-up bullshit. WP Engine will just turn on revisions if you want them to, but that’s beside the point.</p>
<p>First, if I decide to build something with, say, Laravel, but decide there’s one feature I want to turn off, I’m not “hacking and butchering” Laravel. That’s obviously ridiculous.</p>
<p>Second, pretty much all hosts limit revisions in some way or another anyway, because they take up a ton of memory and most people don’t really need them that bad.</p>
<p>And third, <em>it’s open-source software</em>! You don’t get to tell people how they use it!</p>
<p>We could also get into the utter hypocrisy that many of WordPress.com’s plans do far, far, <em>far</em> more invasive modifications of WordPress core (<em>you can’t even install themes and plugins, FFS!</em>), but again, that’s all beside the point. It’s open-source. They can do that. Anyone can. It’s in the license. This claim is clearly total garbage.</p>
<h4 id="matt-says-wp-engine-doesnt-give-back-enough">Matt says WP Engine doesn’t give back enough</h4>


<p>Matt’s other complaint—and I think this is what everything else really boils down to—is: WP Engine doesn’t give back enough to WordPress, in Matt’s estimation.</p>

<p>Matt showed some numbers onscreen at WCUS, comparing Automattic’s contributions to WP Engine’s. But I’m not going to repeat them because I’m certain they’re distorted. Besides, I’m not sure the two companies’ work can, or <em>should</em>, be considered directly comparable in the first place. They do different things in different ways, and there’s no law or license mandating either of them do anything to begin with.</p>
<p>Regardless, Matt seems irked that WP Engine isn’t abiding by the <a href="https://wordpress.org/five-for-the-future" rel="nofollow">“Five for the Future” program, outlined on WordPress.org</a>. Five for the Future asks that if you benefit from WordPress, you give back 5% of your time directly to that open-source project, which I think pretty much everyone can agree is a very noble and admirable aspiration that companies such as these involved <em>should</em> probably be doing.</p>
<p>But it’s not a requirement, or a policy, and enforcing it as such—acting unilaterally as the WordPress police, let alone so suddenly and violently—is extremely questionable and deeply troubling. (Not to mention a likely deterrent for people and organizations who might want to participate in the WordPress space.)</p>
<p>Matt’s claimed he/Automattic have been soliciting WP Engine for increased contributions for “years,” and that they’ve given “$0” to the WordPress foundation. To the best of my knowledge, neither of those claims has been substantiated, but I suppose they don’t really change this discussion much either way, because again: Matt’s taken it upon himself to act as the WP PD to enforce a law that isn’t even a law.</p>
<p>So that’s it; that’s what Matt’s mad about. There’s <em>some</em> substance there, and in a vacuum, I think he’d probably have a lot of people on his side.</p>
<p>But we’re not in a vacuum; there’s a lot of context here. So I’d like to talk about that next.</p>
<h3 id="an-aside-on-motivations-and-justifications">An aside on motivations and justifications</h3>
<p>Having explored Matt’s complaints, I’d like to pause for a moment, because this is where the sides seems to diverge.</p>
<p>The relatively small number of people in the community who appear to remain on Matt’s side (which seems to be mostly made up of his own employees and some people with their own reasons for hating WP Engine) appear to be sticking with him because they agree with <em>this</em> core point, i.e.: WP Engine should be doing more—maybe much more—especially considering that they’re a company owned by private equity and making significant money off WordPress.</p>
<p><strong>On its own, I think that claim seems perfectly fair</strong>. We could disagree about the details, or how much is too much or too little, but I don’t think it’s unreasonable to say a company the size and profitability of WPE probably owes quite a lot to the open-source software it’s built on (ethically, at least; likely not legally).</p>


<p>So it bears mentioning that WP Engine actually <em>does</em> do a pretty good deal for WordPress. You can cherry-pick specific ways it hasn’t contributed much, and you could certainly make a reasonable case they should be doing more. But to say they’ve given “$0” strikes me as pretty deliberately misleading.</p>

<p>WP Engine pays several staff members to contribute work hours to WordPress core (again, maybe the number should be greater than it is, but it’s definitely not zero), on top of the full-time maintenance of plugins, themes, and apps like Advanced Custom Fields, WP Migrate, WP GraphQL, Genesis, Local WP, and many others—all of which used by countless thousands of WordPress users every day.</p>
<p>This is to say nothing of WP Engine sponsoring of WordCamps, creating their own tutorials and educational material, their own events, and so on and so forth.</p>
<p>Point is: WP Engine <em>does</em> do a lot more than zero. You could argue those contributions are not “pure” (Matt does), and that they’re ultimately in service to WP Engine, and not the WordPress community.</p>
<p>But in fairness: sure, they’re all marketing tools in some form or another, but you don’t <em>have</em> to pay for any of them. They all get maintained, they all have tons of users both on and off WP Engine, and they all work no matter what host you choose. (I’m sure they’re all used on WordPress.com. I’d even use some of those things if I had to spin up a WordPress site tomorrow, even if I probably wouldn’t host on WP Engine, personally. I’d probably choose <a href="https://spinupwp.com/" rel="nofollow">SpinupWP</a>, myself, which is another company with “WP” in the name that Matt apparently doesn’t care about.)</p>
<p>Besides, Matt’s company does exactly the same thing with Jetpack, which charges $5–$50 per month, depending on tier, so…not sure where that moral high ground is supposed to be coming from. Is Automattic really gonna claim Jetpack’s paid features are purely for the altruistic benefit of the community? Why do <em>they</em> get a pass on paid features?</p>
<p>I think you could fairly, if crudely, paraphrase Matt’s argument as: “WP Engine is in it for the money, and we are in it for WordPress.”</p>
<p>That’s a really flimsy stance in my view, without even getting into whether we can, or should, have exactly the same expectations of both companies in the first place (which is at least questionable; Automattic has their hands in a lot more things than WP Engine does, including Tumblr, PocketCasts, Longreads, and many others things that may or may not be related to WordPress, along with at least two hosting companies).</p>
<p>Still, once more: there’s probably <em>some</em> validity there. WP Engine is a big company that makes lots of money, and it probably can and should do more.</p>


<p><em>Matt could’ve made that point</em>. I think most people would’ve agreed with him, if he had gone about it properly. We’d probably be lining up with him. There was a way to rally the community around this.</p>

<p><em>If</em> Matt Mullenweg had done this the right way.</p>
<p>But Matt, being Matt, <em>didn’t</em> make that point in a good way.</p>
<p>(Sorry, this post is already too long without me going into all the times in the past he’s stirred up drama and just generally been a toxic jerk to undeserving people in the WordPress community. But if you’re not aware: it’s become increasingly common. He was even adding public snarky comments on WP Engine employees’ posts, ones who had given decades of their life to the project, as recently as yesterday.)</p>


<p>Matt tried extortion, and threats, and petty, childish tantrums, and when none of that worked, he fully exercised his unmatched and unchecked powers in an inconscionable way, in order to extract millions of dollars from WP Engine to put in his own for-profit competitor’s bank account.</p>

<p>But I’m getting ahead of myself.</p>
<p>So that’s the core of this whole thing; Matt thinks private equity is ruining everything and taking too much without giving enough back. It’s an easy home run of a point to make in this economy. Pretty much nobody disagrees with that.</p>
<p>Maybe he thought he’d come off like Robin Hood in this whole deal. I don’t know. But if there was a way to tactfully and gracefully thread that needle, it wasn’t the rampaging hippopotamus approach Matt took.</p>
<p>The split in the community seems to lie in whether that core point <em>justifies</em> Matt’s actions.</p>
<p>It seems to me that most people agree it does <em>not</em>; that Matt’s committed too many flagrant fouls of his own for the original infraction to matter.</p>


<p>Matt had a problem with the landlords, so he carpet bombed the neighborhood. He didn’t like Alderaan’s leaders, and so he fired the Death Star. And now it doesn’t really matter what his original point was; he’s made himself the bad guy.</p>

<p>Anyway, back to the timeline. (Note: I may have the chronology slightly mixed up here on a few of the points, but I don’t think it should really matter.)</p>
<h3 id="the-wordcamp-us-fallout-and-matts-abuse-of-power">The WordCamp US fallout and Matt’s abuse of power</h3>
<p>At some point in this chaos (during his keynote at WCUS, or shortly after), Matt used his sway over every branch of power in the WordPress government to write a blog post called ”<a href="https://wordpress.org/news/2024/09/wp-engine/" rel="nofollow">WP Engine is not WordPress</a>,” (which isn’t something anybody seems to have been confused about, except of course Matt’s mom).</p>
<p>That post, crucially, went up on WordPress.org, which on its own seems questionable. WordPress.org is ostensibly the website for the nonprofit foundation; it’s supposed to exist to <em>prevent</em> any one for-profit company from having too much power over the WordPress ecosystem. It’s supposed to be agnostic.</p>
<p>Not only was that boundary ignored, but since the post was published as WordPress news, it was then <em>syndicated to each and every WordPress admin dashboard in the world</em>.</p>
<p>Forget for a second whether you agree with Matt or not; we’re getting into some of the worst of the conflicts of interest and abuses of power here.</p>
<p>This type of maneuver, plainly, is anti-competitive. It’s a flagrant exploitation of Matt’s many roles and the wild control he has over many branches of WordPress, many with conflicting priorities.</p>
<p>It’s bullying, really; WP Engine doesn’t have any tools to strike back like that. It can’t. (Maybe it <em>wouldn’t</em>, since to date, WP Engine appears to be the company with grown-ups in the room, who know to behave as though their actions will be examined in a courtroom one day.)</p>


<p>This would be like Meta one day deciding it didn’t like how a competitor was using React, and serving every single Facebook user a story on their home feed, brutally disparaging that competitor. It’s <em>clearly</em> a dramatic overreach.</p>

<p>I think Matt <em>thought</em> WP Engine had no retaliation. I think he was <em>counting</em> on this maneuver being yet another push towards their eventual acquiescence. But I guess it doesn’t matter; that’s just my speculation.</p>
<p>In any case, Matt wasn’t done. Matt went on flexing (read: abusing) his power by updating the <a href="https://wordpressfoundation.org/trademark-policy/" rel="nofollow">WordPress trademark policy</a> to <em>retroactively disincentivize the use of the term “WP” in titles of products and companies</em>. (<a href="https://www.reddit.com/r/Wordpress/comments/1foknoq/the_wordpress_foundation_trademark_policy_was/" rel="nofollow">Here’s the source on that change.</a>)</p>
<p>You know why you constantly get notifications saying “we’ve updated our terms”? Because you legally <em>have</em> to do that. To just change the terms without letting people know is shady at best, and actively malicious at worst.</p>
<p>Well, Matt just went in and changed the terms.</p>


<p>Altering the WordPress trademark policy is yet another abuse that should make any remotely impartial observer shudder. Why would anyone want to use a software with an oligarch dictating the terms, and changing them on a whim, with no warning?</p>

<p>It’s around this point in the story Matt is really losing the plot. His whole complaint with WP Engine is that they’re not helping WordPress enough.</p>
<p>But yet…he’s burning WordPress to the ground to make that point.</p>
<h3 id="wp-engines-reaction">WP Engine’s reaction</h3>
<p>Following all this, WP Engine—quite understandably—doesn’t really care for all of their users seeing that negative messaging in their wp-admin. So, WP Engine finds a way to block the news feed on WP Engine sites.</p>
<p>That would be questionable in a vacuum, to be sure. But we’re steeped in context at this point. (A lot of users either turn it off or ignore it on their own anyway, for what it’s worth.)</p>
<p>Following WordCamp US, WP Engine <em>also</em> sent a <a href="https://wpengine.com/wp-content/uploads/2024/09/Cease-and-Desist-Letter-to-Automattic-and-Request-to-Preserve-Documents-Sent.pdf" rel="nofollow">cease-and-desist</a> to Automattic. It’s pretty damning, and does a good job laying out all the points I tried to cover above. (In short: Matt tried to extort money from WP Engine for spurious licensing claims, and used disinformation, or at least heavily slanted data, to do it.)</p>


<p>One of the biggest revelations here is: Matt wanted the money he was trying to get from WP Engine to go <em>to Automattic</em>, which, again, is Matt’s for-profit company.</p>

<p>There are some pretty obvious conflicts of interest here. First and foremost, Automattic (or WordPress.com, at least) is a direct competitor of WP Engine’s.</p>
<p>Second, while Automattic <em>does</em> apparently own the WooCommerce copyright, it does <em>not</em> own the WordPress copyright. That is owned by the WordPress Foundation.</p>
<p>But it gets even murkier from there, as the Foundation is maybe (or maybe not) WordPress.org? And either way, the Foundation is apparently three people, and Matt Mullenweg is not only one of them, he appears to be <em>the only active one</em>!</p>
<p>Of the other two board members, one is a blogger whose company Matt bought out, and who apparently is no longer in the industry. The other is apparently a Partner and Managing Director at—surprise!—<em>a private equity firm</em> (not to mention a twice-failed Republican politician).</p>
<p>Wait…isn’t private equity bad? I guess not if it’s on Matt’s side. (For the record, Matt and his companies are tied up in private equity in other, more substantial ways than this, but that’s not worth getting into. It’s all pretty hypocritical.)</p>


<p>It appears neither of the other two Foundation board members is active, and therefore, Matt is essentially, behind the curtains, the King, Prime Minister, and Pope when it comes to WordPress.</p>

<p>Nobody holds any ability to check his power or challenge him. (That’s very relevant to what happens next.)</p>
<p>Also: Matt apparently kinda sorta owns WordPress.org, too. So he has a dizzying interweaving of conflicts of interest and power abuses here. (<a href="https://www.pluginvulnerabilities.com/2024/09/24/who-is-on-the-wordpress-foundation-board/" rel="nofollow">Source for all that about the foundation here</a>.)</p>


<p>Let’s not leave unspoken the irony that the guy who basically <em>is</em> WordPress.com, <em>and</em> WordPress.org, <strong><em>and</em></strong> the WordPress Foundation, wants you to think the name “WP Engine” is confusing.</p>

<p>Anyway. <a href="https://automattic.com/2024/09/25/open-source-trademarks-wp-engine/" rel="nofollow">Automattic responded</a> by sending its own cease-and-desist to WP Engine, claiming mainly that WP Engine is deliberately confusing people, and that it owes licensing to…someone. Automattic, I guess, though the lines are so blurry it’s clear the separations between WordPress entities were only ever little more than a smokescreen.</p>
<hr>
<p><strong>I should mention: most people believe WordPress.com and WordPress.org/the Foundation are two (three!?) separate entities</strong>. I sure did, before this week. I thought the two had separated many years ago, with the express intent of preventing any one for-profit company from abusing the WordPress name.</p>
<p>I guess they technically are. But when one person apparently enjoys unchecked control over all of them…</p>
<p>[Guitar begins strumming with Alanis Morissette vocalizing]</p>
<h3 id="matt-melts-down">Matt melts down</h3>
<p>Two really weird things happened on Wednesday.</p>
<p>First, <em>out of nowhere</em>, Matt decides to <a href="https://ma.tt/2024/09/charitable-contributions/" rel="nofollow">publish a post on his personal blog</a> outlining his charitable donations. He really frames it as though he’s being victimized and bullied into revealing this information, and I suppose some people were probably (reasonably) asking how much <em>he</em> gives, since he spent the whole week blowing up half the internet over how much WP Engine gives.</p>
<p>In the post, he also spends a lot more time defending himself against claims of being a “mafia boss” than most people who aren’t mafia bosses or acting like mafia bosses ever feel the need to do.</p>
<p>Weird move all around. Especially since the implication seems to be…what? “I’m a good guy so I can’t do bad things”?</p>
<p>I tried my best to look up Matt’s net worth and work out what percentage he’s giving, and by the best figures I could find, we’re likely at or below 5% here. (He’s said to be worth around $400 million, although that figure appears to be a little outdated—especially since he may or may not have <a href="https://www.404media.co/tumblr-and-wordpress-to-sell-users-data-to-train-ai-tools/" rel="nofollow">sold a shitload of user data to AI companies earlier this year</a>.)</p>
<p>Which, fine, that’s still millions of dollars going to charity, and that’s objectively a good thing.</p>
<p>But also: if my wife and I gave that percentage of <em>our</em> income, it wouldn’t even be enough money to get a tax deduction for it. So it’s worth mentioning that just for scale. Contextually, Matt’s donating at below the standard deduction level for somebody of his net worth. (And, most likely, enjoying significant tax benefits for it.)</p>
<p>Anyway, no matter which way you look at it, that’s all weird, but it doesn’t even really matter in the case of this larger discussion. It has major “oh yeah? Well would a bad guy do THIS?” energy.</p>
<p>You know…the sort of thing actual good guys don’t usually have to do.</p>
<p>Almost like Matt was trying to distract from something…</p>
<h3 id="matt-goes-nuclear">Matt goes nuclear</h3>
<p>The next move, and most recent development in this story, is still shocking to me. I think it should be shocking, and deeply disturbing, to <em>any</em> observer.</p>
<p><a href="https://techcrunch.com/2024/09/25/wordpress-org-bans-wp-engine-blocks-it-from-accessing-its-resources/" rel="nofollow">WordPress.org banned WP Engine sites from accessing the plugin repository</a>.</p>
<p>No more doing anything with plugins via the WordPress admin area. No installing, no updating. Not if you’re on WP Engine/Flywheel.</p>
<p>There are many layers to this.</p>
<p>First: again, this is the <code>.org</code> arm of WordPress enforcing this brutal new edict. The Organization, or Foundation, or <em>whatever</em>, is not <em>supposed</em> to be controlled solely by an oligarch who can bend it to their own will, to directly benefit their own interests. It’s <em>supposed</em> to be agnostic.</p>


<p>WordPress.org’s entire reason for existence, as I understood it (and I think as it was pitched to a lot of people), was explicitly to prevent things like this from happening.</p>

<p>Second: <em>not being able to update plugins is a <strong>massive</strong> deal</em>. You could very well be exposing your site to security vulnerabilities if plugins don’t update (to say nothing of bugs). There are nonprofits, charities, government agencies, and public services that host on WP Engine, on top of countless businesses. All of those are just being thrown under the bus to serve one man’s whims.</p>
<p>(<em>Yes,</em> it’s possible to manually update plugins, but nobody’s gonna do that. Certainly not the agencies and freelancers who oversee dozens or hundreds of sites on WP Engine.)</p>


<p>This is bombing civilians. This is putting innocent bystanders in harm’s way. This is firing the Death Star.</p>
<p>What Matt’s done is unforgivable, no matter how right he might have been at the beginning. To unleash harm on actual <em>users</em> of WordPress, indiscriminantly, solely over where they choose to host their sites, is an unconscionable, terroristic abuse of power.</p>

<p>(In the middle of all this, Pressable, a separate host Automattic owns, started offering promos to help people migrate to them from WP Engine. That alone should be majorly headline-grabbing, but Matt’s abuses up to this point are so egregious it barely even registers on the scale.)</p>
<p><em>You don’t hurt users because you’re beefing with their host</em>.</p>
<p>You don’t bomb civilians because they live near a criminal, you don’t shoot at innocent bystanders because a terrorist is hiding behind them, and you don’t fire the Death Star because you disagree with Alderaan’s government.</p>
<p>It no longer matters what this was all about at that point, or whether you were originally right or not. <em>You are irreversibly the bad guy now</em>.</p>
<p>It’s also worth calling out a side effect of this move, which may or may not have been deliberate:</p>


<p>Matt’s actions have ensured <em>his</em> hosting companies are now the <em>only</em> WordPress hosts that can guarantee something like this will never happen to their users.</p>

<p>I mean, he can just flip the switch at any time. He can change the rules whenever he wants to. So what company is safe?</p>
<p>None. Except his.</p>
<p>I hope I don’t need to go into how anti-competitive that is, all on its own, or what an egregious abuse of power it is to have put himself and his company in that position by using WordPress.org to do it.</p>



<p>The weapons Matt Mullenweg has wielded unilaterally in this war shouldn’t even <em>exist</em>, let alone be controlled by one person.</p>

<p>I believe the ability to block an entire hosting provider from accessing the plugins repository is a power that nobody should have. If one could <em>ever</em> be justified in the use of such unthinkably drastic measures, this case most certainly isn’t extreme enough to do that.</p>
<p>Imagine if Microsoft got into a dispute with Apple, and decided to block npm for anyone using a Mac.</p>
<p>Imagine if Apple got into a dispute with Google, and blocked all text messages from Android phones.</p>
<p>Imagine if Google had a dispute with Amazon, and blocked all Amazon communications in Gmail. Or with Walmart, and prevented store locations from showing up on Google Maps.</p>
<p>And imagine if <em>one person</em> at any one of those companies had the power to make that decision, unilaterally and without challenge.</p>
<p><em>This is the scale of thing we’re talking about.</em> This is the collateral damage Matt has unleashed on the WordPress community, and it’s not to <em>anyone’s</em> benefit except maybe Matt’s and his own companies’. (For now, anyway. We’ll see how it all shakes out; it seems pretty inevitable that a class action suit will follow and this all gets dragged into court.)</p>
<p>Virtually no WordPress users are happy about this, no matter how they felt about WP Engine. Certainly, none benefit.</p>


<p>No reasonable person could argue WordPress is in a <em>better</em> place today than it was a week ago, or is on a better path now than it was then.</p>

<p>It’s less secure, less trustworthy, more volatile, and overall just not something <em>anybody</em> is as excited about as they were a week ago. People who spent the majority of their lives working on this software are leaving it. Professionals are looking at new tools to sell their clients. Major sites are considering changing platforms, when they wouldn’t have before.</p>
<p>The neighborhood we all lived in just rocked, by a man who’s enjoyed unchecked power as the head of every branch of the current government, as it were. And he <em>insists</em> he’s doing the right thing by us for blowing up a whole bunch of our homes. (Forgive me, I know the metaphor is beleaguered by this point, but it seems apt.)</p>
<p>Matt’s clearly willing to burn it all down to score a pyrrhic victory, and that’s not a power he or anybody else should ever have over any community, let alone one this size.</p>
<p>Matt has to go.</p>
<p>I don’t expect him to be removed from Automattic leadership (although I think others in leadership absolutely <em>should</em> be considering whether that’s the right move). But in any case:</p>


<p>It’s clear that the blurry lines between WordPress.org and WordPress.com should be turned into unbreachable walls, with no one company on both sides, or able to exercise power over the Foundation and/or Organization.</p>

<p>I don’t care about Automattic giving 5% to WordPress anymore. I want it to give up Matt’s unchecked, unilateral power. Because it’s clearer than ever he can’t be trusted with it.</p>

		

		
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Arch Linux and Valve Collaboration (145 pts)]]></title>
            <link>https://lists.archlinux.org/archives/list/arch-dev-public@lists.archlinux.org/thread/RIZSKIBDSLY4S5J2E2STNP5DH4XZGJMR/</link>
            <guid>41676646</guid>
            <pubDate>Fri, 27 Sep 2024 23:47:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lists.archlinux.org/archives/list/arch-dev-public@lists.archlinux.org/thread/RIZSKIBDSLY4S5J2E2STNP5DH4XZGJMR/">https://lists.archlinux.org/archives/list/arch-dev-public@lists.archlinux.org/thread/RIZSKIBDSLY4S5J2E2STNP5DH4XZGJMR/</a>, See on <a href="https://news.ycombinator.com/item?id=41676646">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="thread-content">

                    <!-- Start first email -->
                    





<div>

     <!-- /email-header: gravatar, author-info, date, peramlink, changed_subject -->
    <p>We are excited to announce that Arch Linux is entering into a direct 
collaboration with Valve. Valve is generously providing backing for two 
critical projects that will have a huge impact on our distribution: a 
build service infrastructure and a secure signing enclave. By supporting 
work on a freelance basis for these topics, Valve enables us to work on 
them without being limited solely by the free time of our volunteers.

This opportunity allows us to address some of the biggest outstanding 
challenges we have been facing for a while. The collaboration will 
speed-up the progress that would otherwise take much longer for us to 
achieve, and will ultimately unblock us from finally pursuing some of 
our planned endeavors. We are incredibly grateful for Valve to make this 
possible and for their explicit commitment to help and support Arch Linux.

These projects will follow our usual development and consensus-building 
workflows. [RFCs] will be created for any wide-ranging changes. 
Discussions on this mailing list as well as issue, milestone and epic 
planning in our GitLab will provide transparency and insight into the 
work. We believe this collaboration will greatly benefit Arch Linux, and 
are looking forward to share further development on this mailing list as 
work progresses.

[RFCs]: <a target="_blank" href="https://rfc.archlinux.page/">https://rfc.archlinux.page/</a></p>

    
    
    

    

</div>

                    <!-- End first email -->

                    <p>
                        
                        <a href="https://lists.archlinux.org/archives/list/arch-dev-public@lists.archlinux.org/thread/RIZSKIBDSLY4S5J2E2STNP5DH4XZGJMR/?sort=date">Show replies by date</a>
                        
                    </p>

                    
                    

                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[US Trademark Office Cancels Marvel, DC's 'Super Hero' Marks (194 pts)]]></title>
            <link>https://www.reuters.com/legal/litigation/us-trademark-office-cancels-marvel-dcs-super-hero-marks-2024-09-26/</link>
            <guid>41676297</guid>
            <pubDate>Fri, 27 Sep 2024 22:51:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/legal/litigation/us-trademark-office-cancels-marvel-dcs-super-hero-marks-2024-09-26/">https://www.reuters.com/legal/litigation/us-trademark-office-cancels-marvel-dcs-super-hero-marks-2024-09-26/</a>, See on <a href="https://news.ycombinator.com/item?id=41676297">Hacker News</a></p>
Couldn't get https://www.reuters.com/legal/litigation/us-trademark-office-cancels-marvel-dcs-super-hero-marks-2024-09-26/: Error: Request failed with status code 401]]></description>
        </item>
    </channel>
</rss>