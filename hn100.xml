<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 25 Jan 2025 22:30:14 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Wall Street banks prepare to sell up to $3B in X loans next week (103 pts)]]></title>
            <link>https://www.reuters.com/technology/wall-street-banks-set-sell-billions-dollars-x-loans-wsj-reports-2025-01-24/</link>
            <guid>42823908</guid>
            <pubDate>Sat, 25 Jan 2025 19:22:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/technology/wall-street-banks-set-sell-billions-dollars-x-loans-wsj-reports-2025-01-24/">https://www.reuters.com/technology/wall-street-banks-set-sell-billions-dollars-x-loans-wsj-reports-2025-01-24/</a>, See on <a href="https://news.ycombinator.com/item?id=42823908">Hacker News</a></p>
Couldn't get https://www.reuters.com/technology/wall-street-banks-set-sell-billions-dollars-x-loans-wsj-reports-2025-01-24/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Every HTML Element (128 pts)]]></title>
            <link>https://iamwillwang.com/dollar/every-html-element/</link>
            <guid>42823722</guid>
            <pubDate>Sat, 25 Jan 2025 19:02:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://iamwillwang.com/dollar/every-html-element/">https://iamwillwang.com/dollar/every-html-element/</a>, See on <a href="https://news.ycombinator.com/item?id=42823722">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <p>
There are over a hundred HTML elements. This page uses all of them.
        You're looking at &lt;p&gt;&lt;/p&gt; right now.
</p> <hgroup> <h2>HTML loves text. We can get some huge text with &lt;h1&gt;&lt;/h1&gt;.</h2> <h2>Or smaller with &lt;h2&gt;&lt;/h2&gt;</h2> <h3>And so on...</h3> <h4>And so on...</h4> <h5>And so on...</h5> <h6>
And... nope that's it for headings. These are all in an &lt;hgroup&gt;&lt;/hgroup&gt; by the way.
</h6> </hgroup> <pre>      Some text is &lt;pre&gt;&lt;/pre&gt;-formatted. Just a different look.
    </pre> <ul>
We can make a list with &lt;ul&gt;&lt;/ul&gt; <li>and</li> <li>some</li> <li>&lt;li&gt;&lt;/li&gt;s</li> </ul> <ol>
Or a numbered list with &lt;ol&gt;&lt;/ol&gt; <li>and</li> <li>some</li> <li>&lt;li&gt;&lt;/li&gt;s</li> </ol> <dl>
Or even a description list with &lt;dl&gt;&lt;/dl&gt;.
<dt>It</dt> <dt>holds</dt> <dt>description terms, &lt;dt&gt;&lt;/dt&gt;</dt> <dd> and description definitions, &lt;dd&gt;&lt;/dd&gt;. </dd> </dl> <menu> &lt;menu&gt;&lt;/menu&gt; is also a list. But it's the same as &lt;ul&gt;&lt;/ul&gt;.
</menu> <blockquote> &lt;blockquote&gt;&lt;/blockquote&gt; indents text. How credible!
</blockquote> <q>&lt;q&gt;&lt;/q&gt; is block's little brother.</q> <figure>
Here's a &lt;figure&gt;&lt;/figure&gt;... It usually contains some other media
        (like an image).
<img src="https://iamwillwang.com/_astro/figure.o8SCE8C_.png" alt="figure" width="363.3333333333333" height="32.666666666666664"> <figcaption>
and this &lt;figcaption&gt;&lt;/figcaption&gt; can then describe said media.
</figcaption> </figure>
And we can take a break with &lt;hr /&gt;. <hr>
We <strong>can</strong>
get a lot <em>fancier</em> with text <mark>of course</mark> with elements like
&lt;strong&gt;&lt;/strong&gt;, &lt;em&gt;&lt;/em&gt;, and &lt;mark&gt;&lt;/mark&gt;.
<p> <b>&lt;b&gt;&lt;/b&gt; bolds</b> </p> <p> <i>&lt;i&gt;&lt;/i&gt; italicizes</i> </p> <p> <u>&lt;u&gt;&lt;/u&gt; underlines</u> </p> <p> <small>&lt;small&gt;&lt;/small&gt; is small </small> </p> <p> &lt;sub&gt;&lt;/sub&gt; <sub>subscripts</sub> </p> <p> &lt;sup&gt;&lt;/sup&gt; <sup>superscripts</sup> </p> <p> <s>&lt;s&gt;&lt;/s&gt; is for marking text as accurate</s>... err never mind
</p> <p> <ins>&lt;ins&gt;&lt;/ins&gt; marks text as inserted</ins> </p> <p> <del>&lt;del&gt;&lt;/del&gt; marks text as deleted</del> </p> <p> <bdi> &lt;bdi&gt;&lt;/bdi&gt; is for isolating text that may flow in a different direction
          than surrounding text: ex. ŸÖÿ≠ŸÖÿØ.
</bdi> </p> <p> &lt;bdo&gt;&lt;/bdo&gt; <bdo dir="rtl">
is for overriding the direction of text: ex. ŸÖÿ≠ŸÖÿØ.
</bdo> </p> <p>   
Ah, now there's some breathing room, thanks to &lt;br /&gt;.
</p><p> <cite>You can &lt;cite&gt;&lt;/cite&gt; this website as Every HTML Element.</cite> <code>And this whole thing is &lt;code&gt;&lt;/code&gt;,</code>
living on the <abbr title="World Wide Web">WWW</abbr>.
</p> <data value="123">Ignore &lt;data&gt;&lt;/data&gt;. That's more for the machines.</data> <time datetime="2025-01-23">&lt;time&gt;&lt;/time&gt; too. It's 10:35 PM right now.</time> <p>  
That sense of <kbd>Ctrl</kbd> might all be in your head. Well, actually it's
      in &lt;kbd&gt;.
</p><p> <dfn>This</dfn> is defined. And <var>this</var> is a &lt;var&gt;&lt;/var&gt;iable.
</p> <p>
How bout some hidden gems?
<ruby>
Êº¢ <rp>(</rp><rt>„Åã„Çì</rt><rp>)</rp> </ruby> </p> <samp>Here's a taste of a &lt;samp&gt;&lt;/samp&gt;</samp> <p> <span>&lt;span&gt;&lt;/span&gt; doesn't do much alone. But who can?</span> </p> <p>
Here's an opportunity for a break &lt;wbr/&gt;.
<wbr>
The browser will decide when to take it.
</p> <hr>
All this text... where does it live? Well we're inside the &lt;main&gt;&lt;/main&gt; &lt;body&gt;&lt;/body&gt;
of an &lt;html&gt;&lt;/html&gt; document. There's a &lt;head&gt;&lt;/head&gt; here with us
      too. The
&lt;head&gt;&lt;/head&gt; thinks about things like &lt;link&gt;s to other things, &lt;meta&gt;data, our &lt;style&gt;&lt;/style&gt;, and our &lt;title&gt;&lt;/title&gt;.
<header> <p>
A &lt;header&gt;&lt;/header&gt; is different than the head. It's for content.
</p> </header>  <section> <article> <p>
By this point, I think it's clear that HTML elements run the gamut
            from content to container to logic to edge case. Some elements we
            can see, others not so much. Some elements are meant to combine with
            others. Some elements are only meant for your browser to read. Some
            elements had good intentions but never picked up mainstream use.
</p>  </article> <nav>
If you're getting a bit lost, &lt;nav&gt;&lt;/nav&gt; can help you
<a href="#">find</a> <a href="#">the</a> <a href="#">way</a> </nav> <address>
Or maybe an &lt;address&gt;&lt;/address&gt; would be better?
</address> <br>
That concludes this section.
</section> <hr> <p>HTML is more than text.</p> <map name="map"> <area shape="rect" coords="0,0,300,100" href="#first" alt="area"> <area shape="rect" coords="300,0,600,100" href="#second" alt="area"> </map> <img src="https://iamwillwang.com/_astro/map.ZvQu5ZE9.png" alt="figure" usemap="#map" width="600"> <div> <p>
Sometimes it's more fun to listen than read. This is the sound of the
          website being made.
</p> <p>And this is a video.</p> <video controls="" src="https://iamwillwang.com/_astro/every-html-video.CVGtkcfY.mp4"></video> <p>In other words, media! Media everywhere.</p> <picture> <source srcset="https://dummyimage.com/200"> <source srcset="https://dummyimage.com/2000"> <source srcset="https://dummyimage.com/20000"> <source srcset="https://dummyimage.com/200000"> <img src="https://dummyimage.com/20" alt="figure" usemap="#map" width="100"> </picture>  <svg width="100" height="100"> <circle cx="50" cy="50" r="10" stroke="black" stroke-width="3" fill="red"></circle> </svg> <canvas> A blank canvas </canvas> <p>
That's <math><mrow>
              <msup>
                <mi>n</mi>
                <mn>i</mn>
              </msup>
              <mi>c</mi>
              <mo>e</mo>
            </mrow>
          </math> </p> </div> <hr> <table> <!-- Caption --> <caption>We can make tables too.</caption> <!-- Colgroup and Col --> <colgroup> <col span="1"> <col span="1"> <col span="1"> <col span="1"> </colgroup> <!-- Table Head --> <thead> <tr> <th>Element</th> <th>Purpose</th> <th>Used?</th> <th>Notes</th> </tr> </thead> <!-- Table Body --> <tbody> <tr> <td>&lt;html&gt;</td> <td>The root element of the page</td> <td>‚úîÔ∏è</td> <td>Without this, you're not doing HTML.</td> </tr> <tr> <td>&lt;marquee&gt; (deprecated)</td> <td>Scrolling text</td> <td>X</td> <td>Now that would've been fun.</td> </tr> <tr> <td>&lt;blink&gt; (deprecated)</td> <td>Flashing text</td> <td>XÔ∏è</td> <td>This one not so much.</td> </tr> </tbody> <!-- Table Footer --> <tfoot> <tr> <td colspan="4">Disclaimer: No web standards were harmed in the making of this
              table.</td> </tr> </tfoot> </table> <hr>  <search>The search for meaning continues</search> <hr>
You can interact with HTML beyond a form too!
<details> <summary>Click me!</summary> <p>üéâ Surprise! Congratulations! ü•≥</p> </details> <!-- A button to open the dialog -->  <!-- Dialog Element --> <dialog id="my-dialog"> <h2>Welcome to the Dialog</h2> <p>This is a modal dialog displayed using just HTML.</p> <p>You can close it by clicking the button below.</p>  </dialog> <hr> <p>
That concludes our journey! I lied a bit at the beginning. There are
        more elements than this: experimental ones, deprecated ones, web
        components, hydrogen, oxygen, and so on. Regardless, I hope this text
        got you a little hyper because, mark my words, you're speaking a new
        language now.
</p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenRA ‚Äì Classic strategy games rebuilt for the modern era (169 pts)]]></title>
            <link>https://www.openra.net/</link>
            <guid>42823667</guid>
            <pubDate>Sat, 25 Jan 2025 18:55:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.openra.net/">https://www.openra.net/</a>, See on <a href="https://news.ycombinator.com/item?id=42823667">Hacker News</a></p>
Couldn't get https://www.openra.net/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[DeepSeek-R1: Incentivizing Reasoning Capability in LLMs via RL (300 pts)]]></title>
            <link>https://arxiv.org/abs/2501.12948</link>
            <guid>42823568</guid>
            <pubDate>Sat, 25 Jan 2025 18:39:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2501.12948">https://arxiv.org/abs/2501.12948</a>, See on <a href="https://news.ycombinator.com/item?id=42823568">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
    <div><p><span>Authors:</span><a href="https://arxiv.org/search/cs?searchtype=author&amp;query=DeepSeek-AI" rel="nofollow">DeepSeek-AI</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Guo,+D" rel="nofollow">Daya Guo</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yang,+D" rel="nofollow">Dejian Yang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+H" rel="nofollow">Haowei Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Song,+J" rel="nofollow">Junxiao Song</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+R" rel="nofollow">Ruoyu Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu,+R" rel="nofollow">Runxin Xu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhu,+Q" rel="nofollow">Qihao Zhu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ma,+S" rel="nofollow">Shirong Ma</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+P" rel="nofollow">Peiyi Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Bi,+X" rel="nofollow">Xiao Bi</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+X" rel="nofollow">Xiaokang Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yu,+X" rel="nofollow">Xingkai Yu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wu,+Y" rel="nofollow">Yu Wu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wu,+Z" rel="nofollow">Z.F. Wu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Gou,+Z" rel="nofollow">Zhibin Gou</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Shao,+Z" rel="nofollow">Zhihong Shao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+Z" rel="nofollow">Zhuoshu Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Gao,+Z" rel="nofollow">Ziyi Gao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liu,+A" rel="nofollow">Aixin Liu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xue,+B" rel="nofollow">Bing Xue</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+B" rel="nofollow">Bingxuan Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wu,+B" rel="nofollow">Bochao Wu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Feng,+B" rel="nofollow">Bei Feng</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lu,+C" rel="nofollow">Chengda Lu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhao,+C" rel="nofollow">Chenggang Zhao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Deng,+C" rel="nofollow">Chengqi Deng</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+C" rel="nofollow">Chenyu Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ruan,+C" rel="nofollow">Chong Ruan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Dai,+D" rel="nofollow">Damai Dai</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+D" rel="nofollow">Deli Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ji,+D" rel="nofollow">Dongjie Ji</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+E" rel="nofollow">Erhang Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lin,+F" rel="nofollow">Fangyun Lin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Dai,+F" rel="nofollow">Fucong Dai</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Luo,+F" rel="nofollow">Fuli Luo</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Hao,+G" rel="nofollow">Guangbo Hao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+G" rel="nofollow">Guanting Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+G" rel="nofollow">Guowei Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+H" rel="nofollow">H. Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Bao,+H" rel="nofollow">Han Bao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu,+H" rel="nofollow">Hanwei Xu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+H" rel="nofollow">Haocheng Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ding,+H" rel="nofollow">Honghui Ding</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xin,+H" rel="nofollow">Huajian Xin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Gao,+H" rel="nofollow">Huazuo Gao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Qu,+H" rel="nofollow">Hui Qu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+H" rel="nofollow">Hui Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Guo,+J" rel="nofollow">Jianzhong Guo</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+J" rel="nofollow">Jiashi Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+J" rel="nofollow">Jiawei Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+J" rel="nofollow">Jingchang Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yuan,+J" rel="nofollow">Jingyang Yuan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Qiu,+J" rel="nofollow">Junjie Qiu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+J" rel="nofollow">Junlong Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Cai,+J" rel="nofollow">J.L. Cai</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ni,+J" rel="nofollow">Jiaqi Ni</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liang,+J" rel="nofollow">Jian Liang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+J" rel="nofollow">Jin Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Dong,+K" rel="nofollow">Kai Dong</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Hu,+K" rel="nofollow">Kai Hu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Gao,+K" rel="nofollow">Kaige Gao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Guan,+K" rel="nofollow">Kang Guan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Huang,+K" rel="nofollow">Kexin Huang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yu,+K" rel="nofollow">Kuai Yu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+L" rel="nofollow">Lean Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+L" rel="nofollow">Lecong Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhao,+L" rel="nofollow">Liang Zhao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+L" rel="nofollow">Litong Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+L" rel="nofollow">Liyue Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu,+L" rel="nofollow">Lei Xu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xia,+L" rel="nofollow">Leyi Xia</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+M" rel="nofollow">Mingchuan Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+M" rel="nofollow">Minghua Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Tang,+M" rel="nofollow">Minghui Tang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+M" rel="nofollow">Meng Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+M" rel="nofollow">Miaojun Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+M" rel="nofollow">Mingming Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Tian,+N" rel="nofollow">Ning Tian</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Huang,+P" rel="nofollow">Panpan Huang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+P" rel="nofollow">Peng Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+Q" rel="nofollow">Qiancheng Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+Q" rel="nofollow">Qinyu Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Du,+Q" rel="nofollow">Qiushi Du</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ge,+R" rel="nofollow">Ruiqi Ge</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+R" rel="nofollow">Ruisong Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Pan,+R" rel="nofollow">Ruizhe Pan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+R" rel="nofollow">Runji Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+R" rel="nofollow">R.J. Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Jin,+R" rel="nofollow">R.L. Jin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+R" rel="nofollow">Ruyi Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lu,+S" rel="nofollow">Shanghao Lu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhou,+S" rel="nofollow">Shangyan Zhou</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+S" rel="nofollow">Shanhuang Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ye,+S" rel="nofollow">Shengfeng Ye</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+S" rel="nofollow">Shiyu Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yu,+S" rel="nofollow">Shuiping Yu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhou,+S" rel="nofollow">Shunfeng Zhou</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Pan,+S" rel="nofollow">Shuting Pan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+S" rel="nofollow">S.S. Li</a></p>
  <p>
    et al. (100 additional authors not shown)
  </p></div>            
    <p><a href="https://arxiv.org/pdf/2501.12948">View PDF</a>
    <a href="https://arxiv.org/html/2501.12948v1">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>We introduce our first-generation reasoning models, DeepSeek-R1-Zero and DeepSeek-R1. DeepSeek-R1-Zero, a model trained via large-scale reinforcement learning (RL) without supervised fine-tuning (SFT) as a preliminary step, demonstrates remarkable reasoning capabilities. Through RL, DeepSeek-R1-Zero naturally emerges with numerous powerful and intriguing reasoning behaviors. However, it encounters challenges such as poor readability, and language mixing. To address these issues and further enhance reasoning performance, we introduce DeepSeek-R1, which incorporates multi-stage training and cold-start data before RL. DeepSeek-R1 achieves performance comparable to OpenAI-o1-1217 on reasoning tasks. To support the research community, we open-source DeepSeek-R1-Zero, DeepSeek-R1, and six dense models (1.5B, 7B, 8B, 14B, 32B, 70B) distilled from DeepSeek-R1 based on Qwen and Llama.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Wenfeng Liang [<a href="https://arxiv.org/show-email/d9d56d83/2501.12948" rel="nofollow">view email</a>]      <br>    <strong>[v1]</strong>
        Wed, 22 Jan 2025 15:19:35 UTC (928 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Hacker infects 18,000 "script kiddies" with fake malware builder (175 pts)]]></title>
            <link>https://www.bleepingcomputer.com/news/security/hacker-infects-18-000-script-kiddies-with-fake-malware-builder/</link>
            <guid>42821611</guid>
            <pubDate>Sat, 25 Jan 2025 13:47:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bleepingcomputer.com/news/security/hacker-infects-18-000-script-kiddies-with-fake-malware-builder/">https://www.bleepingcomputer.com/news/security/hacker-infects-18-000-script-kiddies-with-fake-malware-builder/</a>, See on <a href="https://news.ycombinator.com/item?id=42821611">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
	   
<p><img alt="Hacker smiley face" height="900" src="https://www.bleepstatic.com/content/hl-images/2022/09/15/cyber-smiley-lower.jpg" width="1600"></p>

<p>A threat actor targeted low-skilled hackers, known as "script kiddies," with a fake malware builder that secretly infected them with a backdoor to steal data and take over computers.</p>

<p>Security researchers at CloudSEK report that the malware infected 18,459 devices globally, most located in Russia, the United States, India, Ukraine, and Turkey.</p>

<p>"A trojanized version of the XWorm RAT builder has been weaponized and propagated," reads the <a href="http://www.cloudsek.com/blog/no-honour-among-thieves-uncovering-a-trojanized-xworm-rat-builder-propagated-by-threat-actors-and-disrupting-its-operations" target="_blank" rel="nofollow noopener">CloudSEK report</a>.</p>

<p>"It is&nbsp;<strong><em>targeted specially towards script kiddies who are new to cybersecurity</em></strong> and directly download and use tools mentioned in various tutorials thus showing that there is no honour among thieves."</p>

<p>CloudSEK has found the malware included a kill switch that was activated to uninstall the malware from many of the infected machines, but due to practical limitations, some remain compromised.</p>

<div>
<figure><img alt="Location of infected devices" height="500" src="https://www.bleepstatic.com/images/news/u/1220909/2025/January/hackers.jpg" width="842"><figcaption><strong>Location of infected devices</strong><br><em>Source: CloudSEK</em></figcaption></figure></div>

<h2>Fake RAT builder installs malware</h2>

<p>The researchers say they recently discovered a Trojanized XWorm RAT builder being distributed through various channels, including&nbsp;GitHub repositories, file hosting platforms, Telegram channels, YouTube videos, and websites.</p>

<p>These sources promoted the RAT builder, stating it would allow other threat actors to utilize the malware without having to pay for it.</p>

<p>However, instead of being an actual builder for the XWorm RAT, it infected the threat actor's devices with the malware.</p>

<p>Once a machine is infected, the XWorm malware checks the Windows Registry for signs it is running on a virtualized environment and stops if the results are positive.</p>

<p>If the host qualifies for infection, the malware performs the required Registry modifications to ensure persistence between system boots.</p>

<p>Every infected system is registered to a Telegram-based command and control (C2) server using a hardcoded Telegram bot ID and token.</p>

<p>The malware also automatically steals Discord tokens, system information, and location data (from IP address), and exfiltrates it to the C2 server. Then, it waits for commands from the operators.</p>

<p>Out of the 56 commands supported in total, the following are particularly dangerous:</p>

<ul><li><strong>/machine_id*browsers</strong> ‚Äì Steal saved passwords, cookies, and autofill data from web browsers</li>
	<li><strong>/machine_id*keylogger</strong> ‚Äì Record everything the victim types on their computer</li>
	<li><strong>/machine_id*desktop</strong> ‚Äì Capture the victim‚Äôs active screen</li>
	<li><strong>/machine_id*encrypt*&lt;password&gt;</strong> - Encrypt all files on the system using a provided password</li>
	<li><strong>/machine_id*processkill*&lt;process&gt;</strong> - Terminate specific running processes, including security software</li>
	<li><strong>/machine_id*upload*&lt;file&gt;</strong> - Exfiltrate specific files from the infected system</li>
	<li><strong>/machine_id*uninstall</strong> ‚Äì Remove the malware from the device</li>
</ul><p>CloudSEK found that the malware operators had exfiltrated data from roughly 11% of the infected devices, mostly taking screenshots of infected devices, as shown below, and stealing browser data.</p>

<div>
<figure><img alt="Screenshot from a hacker's desktop" height="600" src="https://www.bleepstatic.com/images/news/u/1220909/2025/January/screenshot.jpg" width="1066"><figcaption><strong>Screenshot from a hacker's desktop</strong><br><em>Source: CloudSEK</em></figcaption></figure></div>

<h2>Disrupting with the kill switch</h2>

<p>The CloudSEK researchers disrupted the botnet by utilizing hard-coded API tokens and a built-in kill switch to uninstall the malware from infected devices.</p>

<p>To do this, they sent a mass uninstall command to all listening clients, looping through all known machine IDs they had previously extracted from Telegram logs. They also brute-forced machine IDs from 1 to 9999, assuming a simple numeric pattern.</p>

<div>
<figure><img alt="Sending out the uninstall command" height="600" width="615" data-src="https://www.bleepstatic.com/images/news/u/1220909/2025/January/unisntall.jpg" src="https://www.bleepstatic.com/images/news/u/1220909/2025/January/unisntall.jpg"><figcaption><strong>Sending out the uninstall command</strong><br><em>Source: CloudSEK</em></figcaption></figure></div>

<p>Although this caused the malware to be removed from many of the infected machines, those not online when the command was issued remain compromised.</p>

<p>Also, Telegram subjects messages to rate limiting, so some of the uninstall commands may have been lost in transit.</p>

<p>Hackers hacking hackers&nbsp;is a common scenario we often see manifesting in the wild.</p>

<p>The takeaway from CloudSEK's findings is never to trust unsigned software, especially those distributed by other cybercriminals,&nbsp;and only install malware builders on testing/analysis environments.</p>

	   
           
          
 
	  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pixelfed Hit 500K Users (239 pts)]]></title>
            <link>https://fedidb.org/software/pixelfed</link>
            <guid>42821519</guid>
            <pubDate>Sat, 25 Jan 2025 13:29:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fedidb.org/software/pixelfed">https://fedidb.org/software/pixelfed</a>, See on <a href="https://news.ycombinator.com/item?id=42821519">Hacker News</a></p>
Couldn't get https://fedidb.org/software/pixelfed: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I built a DIY plane spotting system at home (149 pts)]]></title>
            <link>https://pilane.obviy.us/</link>
            <guid>42821457</guid>
            <pubDate>Sat, 25 Jan 2025 13:14:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pilane.obviy.us/">https://pilane.obviy.us/</a>, See on <a href="https://news.ycombinator.com/item?id=42821457">Hacker News</a></p>
Couldn't get https://pilane.obviy.us/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[The Mythical IO-Bound Rails App (176 pts)]]></title>
            <link>https://byroot.github.io/ruby/performance/2025/01/23/the-mythical-io-bound-rails-app.html</link>
            <guid>42820419</guid>
            <pubDate>Sat, 25 Jan 2025 08:47:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://byroot.github.io/ruby/performance/2025/01/23/the-mythical-io-bound-rails-app.html">https://byroot.github.io/ruby/performance/2025/01/23/the-mythical-io-bound-rails-app.html</a>, See on <a href="https://news.ycombinator.com/item?id=42820419">Hacker News</a></p>
Couldn't get https://byroot.github.io/ruby/performance/2025/01/23/the-mythical-io-bound-rails-app.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[First Look: Loops, by Pixelfed ‚Äì Decentralised TikTok Competitor (2024) (178 pts)]]></title>
            <link>https://wedistribute.org/2024/11/loops-early-look/</link>
            <guid>42820053</guid>
            <pubDate>Sat, 25 Jan 2025 07:07:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wedistribute.org/2024/11/loops-early-look/">https://wedistribute.org/2024/11/loops-early-look/</a>, See on <a href="https://news.ycombinator.com/item?id=42820053">Hacker News</a></p>
Couldn't get https://wedistribute.org/2024/11/loops-early-look/: Error: getaddrinfo EBUSY wedistribute.org]]></description>
        </item>
        <item>
            <title><![CDATA[TinyZero (187 pts)]]></title>
            <link>https://github.com/Jiayi-Pan/TinyZero</link>
            <guid>42819262</guid>
            <pubDate>Sat, 25 Jan 2025 03:38:52 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/Jiayi-Pan/TinyZero">https://github.com/Jiayi-Pan/TinyZero</a>, See on <a href="https://news.ycombinator.com/item?id=42819262">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">TinyZero</h2><a id="user-content-tinyzero" aria-label="Permalink: TinyZero" href="#tinyzero"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/Jiayi-Pan/TinyZero/blob/main/cover.png"><img src="https://github.com/Jiayi-Pan/TinyZero/raw/main/cover.png" alt="image"></a></p>
<p dir="auto">TinyZero is a reproduction of <a href="https://github.com/deepseek-ai/DeepSeek-R1">DeepSeek R1 Zero</a>. We built upon <a href="https://github.com/volcengine/verl">veRL</a>.</p>
<p dir="auto">Through RL, the 3B base LM develops self-verification and search abilities all on its own</p>
<p dir="auto">You can experience the Ahah moment yourself for &lt; $30</p>
<p dir="auto">Twitter thread: <a href="https://x.com/jiayi_pirate/status/1882839370505621655" rel="nofollow">https://x.com/jiayi_pirate/status/1882839370505621655</a></p>
<p dir="auto">Full experiment log: <a href="https://wandb.ai/jiayipan/TinyZero" rel="nofollow">https://wandb.ai/jiayipan/TinyZero</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Instalation</h2><a id="user-content-instalation" aria-label="Permalink: Instalation" href="#instalation"></a></p>
<div data-snippet-clipboard-copy-content="conda create -n zero python=3.9
# install torch [or you can skip this step and let vllm to install the correct version for you]
pip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu121
# install vllm
pip3 install vllm==0.6.3 # or you can install 0.5.4, 0.4.2 and 0.3.1
pip3 install ray

# verl
pip install -e .

# flash attention 2
pip3 install flash-attn --no-build-isolation
# quality of life
pip install wandb IPython matplotlib"><pre><code>conda create -n zero python=3.9
# install torch [or you can skip this step and let vllm to install the correct version for you]
pip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu121
# install vllm
pip3 install vllm==0.6.3 # or you can install 0.5.4, 0.4.2 and 0.3.1
pip3 install ray

# verl
pip install -e .

# flash attention 2
pip3 install flash-attn --no-build-isolation
# quality of life
pip install wandb IPython matplotlib
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Countdown task</h2><a id="user-content-countdown-task" aria-label="Permalink: Countdown task" href="#countdown-task"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Run Training</h3><a id="user-content-run-training" aria-label="Permalink: Run Training" href="#run-training"></a></p>

<p dir="auto"><strong>Data Preparation</strong></p>
<div data-snippet-clipboard-copy-content="python ./examples/data_preprocess/countdown.py --local_dir {path_to_your_dataset}"><pre><code>python ./examples/data_preprocess/countdown.py --local_dir {path_to_your_dataset}
</code></pre></div>
<p dir="auto"><strong>Single GPU</strong>
Works for model &lt;= 1.5B. For Qwen2.5-0.5B base, we know it fails to learn reasoning.</p>
<div data-snippet-clipboard-copy-content="export N_GPUS=1
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=1
export EXPERIMENT_NAME=countdown-qwen2.5-0.5b
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh"><pre><code>export N_GPUS=1
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=1
export EXPERIMENT_NAME=countdown-qwen2.5-0.5b
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh
</code></pre></div>
<p dir="auto"><strong>3B+ model</strong>
In this case, the base model is able to develop sophisticated reasoning skills.</p>
<div data-snippet-clipboard-copy-content="export N_GPUS=2
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=2
export EXPERIMENT_NAME=countdown-qwen2.5-3b
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh"><pre><code>export N_GPUS=2
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=2
export EXPERIMENT_NAME=countdown-qwen2.5-3b
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Instruct Abaltion</h3><a id="user-content-instruct-abaltion" aria-label="Permalink: Instruct Abaltion" href="#instruct-abaltion"></a></p>
<p dir="auto">We experiment with QWen-2.5-3B Instruct too.
<strong>Data Preparation</strong>
To follow chat template, we need to reprocess the data:</p>
<div data-snippet-clipboard-copy-content="conda activate zero
python examples/data_preprocess/countdown.py --template_type=qwen-instruct --local_dir={path_to_your_dataset}"><pre><code>conda activate zero
python examples/data_preprocess/countdown.py --template_type=qwen-instruct --local_dir={path_to_your_dataset}
</code></pre></div>
<p dir="auto"><strong>Training</strong></p>
<div data-snippet-clipboard-copy-content="export N_GPUS=2
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=2
export EXPERIMENT_NAME=countdown-qwen2.5-3b-instruct
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh"><pre><code>export N_GPUS=2
export BASE_MODEL={path_to_your_model}
export DATA_DIR={path_to_your_dataset}
export ROLLOUT_TP_SIZE=2
export EXPERIMENT_NAME=countdown-qwen2.5-3b-instruct
export VLLM_ATTENTION_BACKEND=XFORMERS

bash ./scripts/train_tiny_zero.sh
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledge</h2><a id="user-content-acknowledge" aria-label="Permalink: Acknowledge" href="#acknowledge"></a></p>
<ul dir="auto">
<li>We run our experiments based on <a href="https://github.com/volcengine/verl">veRL</a>.</li>
<li>We use Qwen2.5 series base model <a href="https://github.com/QwenLM/Qwen2.5">Qwen2.5</a>.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Citation</h2><a id="user-content-citation" aria-label="Permalink: Citation" href="#citation"></a></p>
<div data-snippet-clipboard-copy-content="@misc{tinyzero,
author       = {Jiayi Pan and Junjie Zhang and Xingyao Wang and Lifan Yuan},
title        = {TinyZero},
howpublished = {[https://github.com/Jiayi-Pan/TinyZero](https://github.com/Jiayi-Pan/TinyZero)},
note         = {Accessed: 2025-01-24},
year         = {2025}
}"><pre><code>@misc{tinyzero,
author       = {Jiayi Pan and Junjie Zhang and Xingyao Wang and Lifan Yuan},
title        = {TinyZero},
howpublished = {[https://github.com/Jiayi-Pan/TinyZero](https://github.com/Jiayi-Pan/TinyZero)},
note         = {Accessed: 2025-01-24},
year         = {2025}
}
</code></pre></div>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[French police free kidnapped Ledger executive (163 pts)]]></title>
            <link>https://moneycheck.com/french-police-free-kidnapped-ledger-executive-after-day-long-ordeal/</link>
            <guid>42819018</guid>
            <pubDate>Sat, 25 Jan 2025 02:48:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://moneycheck.com/french-police-free-kidnapped-ledger-executive-after-day-long-ordeal/">https://moneycheck.com/french-police-free-kidnapped-ledger-executive-after-day-long-ordeal/</a>, See on <a href="https://news.ycombinator.com/item?id=42819018">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-100590"><div><h2>TLDR</h2><ul><li>French cryptocurrency executive David Balland endured a violent kidnapping from his home with his wife on January 21, 2025</li><li>Kidnappers demanded cryptocurrency payment and reportedly mutilated Balland during the 24-hour ordeal</li><li>French National Gendarmerie successfully rescued both victims through a tactical operation</li><li>Ledger, valued at 1.3 billion euros, is a leading manufacturer of cryptocurrency security devices</li><li>The incident happened as Bitcoin trades near record highs around $109,000</li></ul><hr><p>French technology executive David Balland, who helped create the cryptocurrency security company Ledger, <a href="https://decrypt.co/302430/ledger-co-founder-kidnapped-crypto-ransom">has survived a brutal kidnapping attempt</a> that ended with a police rescue operation on January 22, 2025, according to statements from the Paris prosecutor‚Äôs office.</p><p>The attackers struck in darkness, forcing their way into Balland‚Äôs residence in the Cher region of central France during the early morning hours of January 21. Both Balland and his wife were taken from their home and transported to a nearby location where they were held against their will.</p><p><a href="https://www.leparisien.fr/faits-divers/le-cofondateur-de-lentreprise-de-cryptomonnaies-ledger-enleve-vaste-operation-de-la-gendarmerie-en-cours-23-01-2025-SJPOOPUFFNGBDMIBZT5ON2MUBQ.php">French newspaper Le Parisien reports</a> the kidnappers employed extreme violence during the ordeal, including cutting off one of Balland‚Äôs fingers. Sources say the severed digit was sent to Balland‚Äôs associates as proof of their intentions and to reinforce their demands for cryptocurrency payment.</p><p>The victims‚Äô location remained unknown for nearly 24 hours as family members and business associates grappled with ransom demands. The exact amount of cryptocurrency requested has not been disclosed by authorities, who have also not confirmed whether any payment was made.</p><p>France‚Äôs National Gendarmerie mobilized its specialized intervention group to handle the crisis. The tactical team successfully stormed the location where Balland and his wife were being held, freeing both victims without any reported casualties during the operation.</p><p>Medical teams immediately transported Balland to receive treatment for his injuries following the rescue. The Paris prosecutor‚Äôs office has confirmed that an active investigation continues as they work to identify and capture all persons involved in the kidnapping.</p><p>The news created waves throughout the cryptocurrency industry. Former Binance CEO Changpeng Zhao initially posted about the rumors on social media before deleting his message, citing uncertainty about the developing situation.</p><p>Casa chief technology officer Jameson Lopp also commented on the events, noting that Ledger‚Äôs initial silence about the situation had raised red flags within the cryptocurrency security community.</p><p>The kidnapping targeted one of France‚Äôs most successful cryptocurrency entrepreneurs. Balland co-founded Ledger in Paris in 2014, helping build it into a global leader in digital asset security hardware. The company produces specialized devices called hardware wallets that store cryptocurrency access keys offline to protect them from hackers.</p><p>From 2019 to 2021, Balland served as director of Ledger‚Äôs manufacturing facility in Vierzon, France. Under his leadership, the company has sold more than seven million hardware wallets worldwide, maintaining a perfect security record with no successful breaches of their devices.</p><p>Recent fundraising has demonstrated Ledger‚Äôs continued growth, with the company securing 100 million euros ($109 million) in 2023. This investment brought Ledger‚Äôs total valuation to 1.3 billion euros ($1.42 billion). The company now employs around 700 people across its operations.</p><p>Pascal Gauthier, who leads Ledger as chairman and CEO, released a statement expressing gratitude for Balland‚Äôs safe return. ‚ÄúWe are deeply relieved that David and his wife have been released and are now safe,‚Äù Gauthier said, while also praising law enforcement‚Äôs handling of the crisis.</p><blockquote data-width="550" data-dnt="true"><p lang="fr" dir="ltr">üá´üá∑ Nous sommes profond√©ment soulag√©s d‚Äôapprendre la lib√©ration de David et sa femme et de les savoir sains et saufs. J‚Äôai pris contact avec David, et nos pens√©es vont avec lui et sa famille. Nous partageons aussi l‚Äô√©motion des membres de notre √©quipe, et en particulier de celles‚Ä¶</p><p>‚Äî Pascal Gauthier @Ledger (@_pgauthier) <a href="https://twitter.com/_pgauthier/status/1882505648161583609?ref_src=twsrc%5Etfw">January 23, 2025</a></p></blockquote><p>The attack comes at a time when cryptocurrency-related crime continues to rise. Data from blockchain analysis firm Chainalysis shows ransomware gangs extracted over $1.1 billion in cryptocurrency payments during 2023 alone.</p><p>The timing also coincides with a surge in cryptocurrency values, as Bitcoin trades near $109,000 ‚Äì its highest level ever according to CoinGecko data. These elevated prices may make industry executives more attractive targets for criminal enterprises.</p><p>Beyond its core Nano series of hardware wallets, Ledger has expanded into premium products like the Ledger Flex and Ledger Stax, which feature touchscreen interfaces. These devices cater to users seeking both security and ease of use in managing their digital assets.</p><p>The incident has prompted renewed focus on executive security within the cryptocurrency industry. As digital assets become more valuable, companies may need to increase protection for key personnel who could be targeted by criminals.</p><p><span></span> <span></span> <span>8</span></p><div><h2>Stay Ahead of the Market with Benzinga Pro!</h2><p> Want to trade like a pro? Benzinga Pro gives you the edge you need in today's fast-paced markets. Get real-time news, exclusive insights, and powerful tools trusted by professional traders:<img loading="lazy" src="https://moneycheck.com/wp-content/uploads/2024/10/bz.jpg" alt="" width="288" height="241"></p><ul><li>Breaking market-moving stories before they hit mainstream media</li><li>Live audio squawk for hands-free market updates</li><li>Advanced stock scanner to spot promising trades</li><li>Expert trade ideas and on-demand support</li></ul><p> Don't let opportunities slip away. Start your free trial of Benzinga Pro today and take your trading to the next level!</p><p><a href="https://moneycheck.com/out/benzingapro" target="_blank">Visit Benzinga Pro</a></p></div></div> </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Caltrain's Electric Fleet More Efficient Than Expected (311 pts)]]></title>
            <link>https://www.caltrain.com/news/caltrains-electric-fleet-more-efficient-expected</link>
            <guid>42818692</guid>
            <pubDate>Sat, 25 Jan 2025 01:53:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.caltrain.com/news/caltrains-electric-fleet-more-efficient-expected">https://www.caltrain.com/news/caltrains-electric-fleet-more-efficient-expected</a>, See on <a href="https://news.ycombinator.com/item?id=42818692">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="¬∂-3839470"><p><span>Caltrain announced at its monthly Board of Directors meeting that regenerative braking on the new trains is generating and sending back to the electric grid approximately 23% of the energy consumed by the system. The new electric trains are outperforming Caltrain‚Äôs original projections, which is welcome news for a public agency that holds sustainability as a core value.&nbsp;</span></p><p><span>Originally estimated to cost approximately $19.5 million annually, Caltrain‚Äôs electricity use since the launch of electric service averages 207 MWh on weekdays and 175 MWh on weekends, revising cost estimates to $16.5 million. With the agency expecting approximately $6 million annually in energy credits from the California Air Resources Board‚Äôs Low Carbon Fuel Standard Program, the first year of electric service will have lower fuel costs than the previous diesel service. Currently, Caltrain is providing that power to the grid free of charge as there is no legal requirement for the agency to be reimbursed for the energy generated.</span></p><p><span>Regenerative braking is a technology first introduced to electric trains in 1886. They work by driving an electric motor in reverse to recapture energy rather than losing it as heat during braking. Caltrain‚Äôs fleet is designed to return that power to the Overhead Contact System (OCS), which feeds it to the nearest traction power facility. From there, it can be used to power other trains on the system or returned to the grid.</span></p><p><span>‚ÄúCaltrain is running its service on 100% renewable energy and is returning nearly a quarter of that energy to the grid,‚Äù said Michelle Bouchard, Caltrain Executive Director. ‚ÄúThe new electric fleet is delivering on its promise of state-of-the-art service, living up to our mission of providing sustainable transportation that enhances quality of life for everyone.‚Äù</span></p><p><span>###</span></p><p><em><span>About Caltrain: Owned and operated by the Peninsula Corridor Joint Powers Board, Caltrain provides rail service from San Francisco to San Jose, with commute service to Gilroy. Serving the region since 1863, Caltrain is the oldest continually operating rail system west of the Mississippi and the first railroad to convert from diesel to electric power in a generation.&nbsp;</span></em></p><p><em><span>Follow Caltrain on&nbsp;</span></em><a href="https://www.facebook.com/caltrain"><em><span>Facebook</span></em></a><em><span>&nbsp;and&nbsp;</span></em><a href="https://twitter.com/caltrain"><em><span>X</span></em></a><em><span>.&nbsp;&nbsp;&nbsp;&nbsp;</span></em></p><p><em><span>Free translation assistance is available. Para traducci√≥n llama al 1.800.660.4287;&nbsp;Â¶ÇÈúÄÁøªË≠Ø,Ë´ãÈõª 1.800.660.4287.</span></em></p><p><span lang="ES-MX">Para traducci√≥n llama al 1.800.660.4287;&nbsp;</span><span>Â¶ÇÈúÄÁøªË≠Ø</span><span lang="ES-MX">,</span><span>Ë´ãÈõª</span><span lang="ES-MX"> 1.800.660.4287.</span><span>&nbsp;</span></p><p><span>Media Contact: Dan Lieberman, 650.622.2492</span></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[File Explorer is merged to Helix editor (225 pts)]]></title>
            <link>https://github.com/helix-editor/helix/pull/11285</link>
            <guid>42818278</guid>
            <pubDate>Sat, 25 Jan 2025 00:28:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/helix-editor/helix/pull/11285">https://github.com/helix-editor/helix/pull/11285</a>, See on <a href="https://news.ycombinator.com/item?id=42818278">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pjax="" data-turbo-frame="" id="repo-content-turbo-frame" target="_top" data-turbo-action="advance">
      
  <div id="partial-discussion-header" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0OjE5ODM2MjUyMzkiLCJ0IjoxNzM3NzkzODA0fQ==--9ec89367c1a76cf1709a5e6a5dc1adb732cf6ff2b7e16c9479380f2da3ba581d" data-url="/helix-editor/helix/pull/11285/partials/title?sticky=true" data-channel-event-name="title_updated" data-pull-is-open="false" data-gid="PR_kwDOD__WI852O7gX">

          
<details>
  <summary>
    
    New issue
  </summary>
  <details-dialog aria-label="Sign up for GitHub">
            <div>
  <p>
    <strong>Have a question about this project?</strong> Sign up for a free GitHub account to open an issue and contact its maintainers and the community.
  </p>

  

  <p>By clicking ‚ÄúSign up for GitHub‚Äù, you agree to our <a href="https://docs.github.com/terms" target="_blank">terms of service</a> and
  <a href="https://docs.github.com/privacy" target="_blank">privacy statement</a>. We‚Äôll occasionally send you account related emails.</p>

  <p>
    Already on GitHub?
    <a data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;new issue modal&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/helix-editor/helix/pull/11285&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="388b5313ec1a967a680e2630f4ef72126c7d3b40bb300ce8a19135121d1d8994" href="https://github.com/login?return_to=%2Fhelix-editor%2Fhelix%2Fissues%2Fnew%2Fchoose">Sign in</a>
    to your account
  </p>
</div>
  </details-dialog>
</details>
          
      </div>



        




    <div data-view-component="true" id="discussion_bucket" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0OjE5ODM2MjUyMzk6dGltZWxpbmUiLCJ0IjoxNzM3NzkzODA0fQ==--d8b7e6af21d65ccfb5a6eee15e0e5455d5c271defecda627b1e05b14dfbd5ef3">            <h2>Conversation</h2>
  <div data-quote-markdown=".js-comment-body" data-discussion-hovercards-enabled="" data-issue-and-pr-hovercards-enabled="" data-team-hovercards-enabled="" data-hpc="">
    <template>
  <div data-view-component="true" class="flash flash-warn flash-full d-flex flex-items-center">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <span>
      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.
      <a class="Link--inTextBlock" href="https://github.co/hiddenchars" target="_blank">Learn more about bidirectional Unicode characters</a>
    </span>


  <div data-view-component="true" class="flash-action">        <a href="{{ revealButtonHref }}" data-view-component="true" class="btn-sm btn">    Show hidden characters
</a>
</div>
</div></template>
<template>
  <span aria-label="This line has hidden Unicode characters" data-view-component="true" class="line-alert tooltipped tooltipped-e">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
</span></template>

    <div>

      <div data-gid="PR_kwDOD__WI852O7gX" data-url="/helix-editor/helix/pull/11285/partials/body" data-channel-event-name="body_updated" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0OjE5ODM2MjUyMzkiLCJ0IjoxNzM3NzkzODA0fQ==--9ec89367c1a76cf1709a5e6a5dc1adb732cf6ff2b7e16c9479380f2da3ba581d">

<p><a href="https://github.com/drybalka" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/24950890?s=60&amp;v=4" alt="drybalka" size="40" height="40" width="40" data-view-component="true"></a>
  
  
</p><div id="issue-2425528527">
          

          <div>
  
  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">This is a minimal implementation of the file browser, which would probably cover a lot of requirements in <a data-error-text="Failed to load title" data-id="916413629" data-permission-text="Title is private" data-url="https://github.com/helix-editor/helix/issues/200" data-hovercard-type="issue" data-hovercard-url="/helix-editor/helix/issues/200/hovercard" href="https://github.com/helix-editor/helix/issues/200">#200</a>. The whole thing works analogous to the <a href="https://github.com/nvim-telescope/telescope-file-browser.nvim">https://github.com/nvim-telescope/telescope-file-browser.nvim</a> as suggested in <a href="https://github.com/helix-editor/helix/issues/200#issuecomment-1340815804" data-hovercard-type="issue" data-hovercard-url="/helix-editor/helix/issues/200/hovercard">this comment</a>. Even though the resolution of the discussion seems to be "file tree/browser is too hard, it should be implemented as a plugin", I feel like my changes are quite small and natural to be considered for adding to the core nonetheless.</p>
<p dir="auto">The implementation simply builds on the existing file picker and only modifies 3 files, so the added maintenance burden should be quite small. The code itself is not particularly elegant (in my rather inexperienced opinion), but I did not want to over-complicate things. This is also the reason why some features might be missing.</p>
<p dir="auto">Feel free to modify this PR or simply make suggestions, I'd be happy to improve it. This is also my first PR here, so sorry if I miss anything.</p>
    </div>
  </task-lists>
  
</div>

          <!-- '"` --><!-- </textarea></xmp> -->
          <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
    <div>
          <tool-tip id="tooltip-35a9fed0-5e10-4f7c-a131-339ea77e31bd" for="reactions--reaction_button_component-a53e26" popover="manual" data-direction="n" data-type="description" data-view-component="true">philipgiuliani, baldwindavid, jerabaul29, galearez, Akselmo, ryanabx, luisdavim, oworope, JasonLovesDoggo, sommerper, and 48 more reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-5b98e40d-39b7-49bc-8288-00af3492367b" for="reactions--reaction_button_component-aa25f0" popover="manual" data-direction="n" data-type="description" data-view-component="true">mariansimecek, GtrMo, nilsherzig, cd-a, H4ckint0sh, philipgiuliani, DaveTJones, darshanCommits, ff2400t, joshua-obritsch, and 76 more reacted with heart emoji</tool-tip>
          <tool-tip id="tooltip-d9caff88-5844-43c7-90c9-4eb493796afc" for="reactions--reaction_button_component-923846" popover="manual" data-direction="n" data-type="description" data-view-component="true">rotmh, pvoliveira, and larsblumberg reacted with rocket emoji</tool-tip>
          <tool-tip id="tooltip-3cc66de4-21b4-4db7-862b-b0edc5def707" for="reactions--reaction_button_component-8c4d07" popover="manual" data-direction="n" data-type="description" data-view-component="true">ymgyt, Ansimorph, vlabo, H4ckint0sh, philipgiuliani, ff2400t, tuyentv96, cotneit, petejodo, ryanabx, and 15 more reacted with eyes emoji</tool-tip>
      
    </div>
</form></div>

</div>
</div>


       
            


      

      <div data-gid="IC_kwDOD__WI86GJTFV" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GJTFV/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/daedroza/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/daedroza"><img src="https://avatars.githubusercontent.com/u/19841386?s=80&amp;u=e41441fcc9cfa158fba6f741b765e63e4008f0a5&amp;v=4" width="40" height="40" alt="@daedroza"></a>

</p>


  <div data-body-version="a990be21f15343a501fc03d78f0ed261db690ce3f87925ea40a1f712b0e101e8" id="issuecomment-2250584405">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">Would it be possible to implement a file browser with this methodology instead? <a href="https://github.com/stevearc/oil.nvim">https://github.com/stevearc/oil.nvim</a></p>
<p dir="auto">It uses a buffer/pop to navigate and edit files like you're inside a buffer.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86GJ7qL" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GJ7qL/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/gj1118/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/gj1118"><img src="https://avatars.githubusercontent.com/u/473101?s=80&amp;u=7c2cb10f1cd650e95e44556e67ac4885031a38cd&amp;v=4" width="40" height="40" alt="@gj1118"></a>

</p>


  <div data-body-version="131e6c50a2527c351564f36e7b033f31bee5a12a26db1926e0453f9ff9e83a3e" id="issuecomment-2250750603">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> this is awesome.. thanks for the effort. Can you please post a screenshot as to how it looks ? Basically I am interested to show how nested directories/files are being presented.<br>
Thanks</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86GKZXo" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GKZXo/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="05b1f4b70ee747fbc9db873a3eb130d5e1c955e589844cc237667a3bb89e70d8" id="issuecomment-2250872296">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">Would it be possible to implement a file browser with this methodology instead? <a href="https://github.com/stevearc/oil.nvim">https://github.com/stevearc/oil.nvim</a></p>
<p dir="auto">It uses a buffer/pop to navigate and edit files like you're inside a buffer.</p>
</blockquote>
<p dir="auto">I am not a maintainer of helix, but in my opinion this is rather a plugin functionality. First of all, it would be hard-ish to implement and therefore to maintain. Secondly, buffers are primarily used for text editing and one does not usually need to create/delete/rename files so much.</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-c65f68b2-ed60-4540-960a-c5d80246fe23" for="reactions--reaction_button_component-764a69" popover="manual" data-direction="n" data-type="description" data-view-component="true">the-mikedavis, cd-a, archseer, aukeroorda, tobibrunner, TornaxO7, AbeEstrada, and Benexl reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-aa0046d5-7038-4c95-be4b-f1cb93e60b69" for="reactions--reaction_button_component-0d872b" popover="manual" data-direction="n" data-type="description" data-view-component="true">strash, erasebegin, allaboutevemirolive, RoastBeefer00, falcucci, azzamsa, smartinellimarco, and reo101 reacted with thumbs down emoji</tool-tip>
          <tool-tip id="tooltip-dd5b2204-a3c5-4f0e-ba1f-cec09e6f5581" for="reactions--reaction_button_component-f81ab9" popover="manual" data-direction="n" data-type="description" data-view-component="true">rotmh reacted with heart emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86GKdtO" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GKdtO/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="f046c6a9bc03035cfc6197b22d5363641ba271f28ee60a6d04bbaeeb3feae648" id="issuecomment-2250890062">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> this is awesome.. thanks for the effort. Can you please post a screenshot as to how it looks ? Basically I am interested to show how nested directories/files are being presented. Thanks</p>
</blockquote>
<p dir="auto">Well, the idea was to make it look and behave like the original <a href="https://github.com/nvim-telescope/telescope-file-browser.nvim">telescope-file-browser</a>, so you may look at the showcase video there (just without all pretty-niceness as this is just a proof-of-concept). As for a real screenshot it looks (quite bare bones) like this:<br>
<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/24950890/352210559-024058a7-6eda-4f2a-96bb-1bbcc3dc91a4.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNDk1MDg5MC8zNTIyMTA1NTktMDI0MDU4YTctNmVkYS00ZjJhLTk2YmItMWJiY2MzZGM5MWE0LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAxMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMTI1VDA4MzAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEzYWIxYzkxNmY5ZjUxOWM1Yjk4NjBmODYwNDNmNWY4ZjJiYmVmYjYzZTNjMTcyMGU2Y2ZlNmY4ZjZkNjZkZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.j83xiUf6xQJlxXTrAH2ZUcPOr_yc1-nrsYrHixGV-A0"><img src="https://private-user-images.githubusercontent.com/24950890/352210559-024058a7-6eda-4f2a-96bb-1bbcc3dc91a4.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNDk1MDg5MC8zNTIyMTA1NTktMDI0MDU4YTctNmVkYS00ZjJhLTk2YmItMWJiY2MzZGM5MWE0LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAxMjUlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMTI1VDA4MzAwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTEzYWIxYzkxNmY5ZjUxOWM1Yjk4NjBmODYwNDNmNWY4ZjJiYmVmYjYzZTNjMTcyMGU2Y2ZlNmY4ZjZkNjZkZDAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.j83xiUf6xQJlxXTrAH2ZUcPOr_yc1-nrsYrHixGV-A0" alt="image"></a></p>
<p dir="auto">In other words, both the picker and the preview (if a dir is selected) show the contents at depth 1, similar to how <code>ls</code> works.</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-bf574d16-5310-4cc2-afdf-ede01e6a8fd0" for="reactions--reaction_button_component-59d1ac" popover="manual" data-direction="n" data-type="description" data-view-component="true">philipgiuliani, cd-a, vlabo, H4ckint0sh, joshua-obritsch, MAST1999, aukeroorda, fgimian, dodheim, and varaskkar reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-bce2f2e1-8ad9-45bd-a8af-ede5b9ebc1b7" for="reactions--reaction_button_component-899cb2" popover="manual" data-direction="n" data-type="description" data-view-component="true">joshua-obritsch, aradwann, and m0ar reacted with heart emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86GqES7" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86GqES7/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/archseer/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/archseer"><img src="https://avatars.githubusercontent.com/u/1372918?s=80&amp;u=3cdf0e9a84945967b3545727092c49168c9467e7&amp;v=4" width="40" height="40" alt="@archseer"></a>

</p>


  <div data-body-version="cde833ea74b4e5b7493a4b020992a2347317a7437cc23cbd2a5277739bfc74c6" id="issuecomment-2259174587">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">I kind of like just how simple this change is! It reuses existing UI components and allows exploring the file tree without adding any of the heavier features.</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-2ecd63b8-8cd2-4c41-ba69-a581e297279f" for="reactions--reaction_button_component-597a19" popover="manual" data-direction="n" data-type="description" data-view-component="true">joshua-obritsch, H4ckint0sh, Alexis-Lapierre, timskovjacobsen, jerabaul29, drew-harris, and CraigglesO reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-f14fb9d1-a45e-47c4-be4f-c004255847b0" for="reactions--reaction_button_component-87ec68" popover="manual" data-direction="n" data-type="description" data-view-component="true">philipgiuliani, ff2400t, Ansimorph, tuyentv96, skyl4b, cd-a, MAST1999, aukeroorda, cotneit, drybalka, and 12 more reacted with heart emoji</tool-tip>
          <tool-tip id="tooltip-8ae358a8-3b1b-4036-b2b2-01d8be14e88e" for="reactions--reaction_button_component-515fa9" popover="manual" data-direction="n" data-type="description" data-view-component="true">rotmh reacted with rocket emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


      <div id="pullrequestreview-2213510756" data-gid="PRR_kwDOD__WI86D735k" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyMjEzNTEwNzU2IiwidCI6MTczNzc5MzgwNX0=--7c006b723de7ac79e27814175aa3d61f1134cc3f8904e292349a4ebd60b56311" data-url="/helix-editor/helix/pull/11285/partials/reviews/2213510756">
      <div data-view-component="true">
  <p><a href="https://github.com/the-mikedavis" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/21230295?s=60&amp;v=4" alt="the-mikedavis" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

      <div data-view-component="true">            <turbo-frame id="review-thread-or-comment-id-1086958329" target="_top">
  <details-collapsible>
      <details open="open" data-resolved="false" data-target="details-collapsible.detailsElement" data-view-component="true">
    <summary aria-expanded="true" aria-label="Collapse comment" data-target="details-collapsible.summaryElement" data-action="click:details-collapsible#toggle" data-aria-label-closed="Expand comment" data-aria-label-open="Collapse comment" role="button" data-view-component="true">        
</summary>
    <div data-view-component="true">            <div>
      <p>
      Comment on lines

    <span>
      305
    </span> to <span>
      311
    </span>

  </p>

  </div>

  <div>
    
    <table data-tab-size="8" data-paste-markdown-skip="">
          <tbody><tr>

              <td></td>

              <td data-line-number="305"></td>

            <td>
              <span>    <span>if</span> <span>let</span> <span>Ok</span><span>(</span>files<span>)</span> = directory_content <span>{</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="306"></td>

            <td>
              <span>        <span>for</span> file <span>in</span> files <span>{</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="307"></td>

            <td>
              <span>            <span>if</span> injector<span>.</span><span>push</span><span>(</span>file<span>)</span><span>.</span><span>is_err</span><span>(</span><span>)</span> <span>{</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="308"></td>

            <td>
              <span>                <span>break</span><span>;</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="309"></td>

            <td>
              <span>            <span>}</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="310"></td>

            <td>
              <span>        <span>}</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="311"></td>

            <td>
              <span>    <span>}</span></span>

            </td>
          </tr>
    </tbody></table>

</div>


<div data-quote-markdown=".js-comment-body">
        <div id="discussion_r1700591852">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <p dir="auto">This style is used by the file picker because finding files is a potentially long-running iterator and we might use the injector to push some files asynchronously after a timeout. Since you've already collected the directory contents above you should pass that vec as the third argument to Picker::new</p>
  </task-lists>
  

</div>

  <div id="discussion_r1700596202">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <p dir="auto">Also I believe this function should return a result and pass up the error from <code>directory_content</code>. Currently if you fail to list the directory contents a blank picker opens</p>
  </task-lists>
  

</div>

  <div id="discussion_r1712612169">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <p dir="auto">Great suggestions, simplified the code, thank you!</p>
  </task-lists>
  

</div>




    </div>

</div>
</details>  </details-collapsible>
</turbo-frame>

  <turbo-frame id="review-thread-or-comment-id-1086961817" target="_top">
  <details-collapsible>
      <details data-resolved="true" data-deferred-details-content-url="/helix-editor/helix/pull/11285/threads/1086961817?rendering_on_files_tab=false" data-hidden-comment-ids="1700597241" data-target="details-collapsible.detailsElement" data-view-component="true">
    <summary aria-expanded="true" aria-label="Collapse comment" data-target="details-collapsible.summaryElement" data-action="click:details-collapsible#toggle" data-aria-label-closed="Expand comment" data-aria-label-open="Collapse comment" role="button" data-view-component="true">        
</summary>
    
</details>  </details-collapsible>
</turbo-frame>

  <turbo-frame id="review-thread-or-comment-id-1086968746" target="_top">
  <details-collapsible>
      <details data-resolved="true" data-deferred-details-content-url="/helix-editor/helix/pull/11285/threads/1086968746?rendering_on_files_tab=false" data-hidden-comment-ids="1700607982,1712612365" data-target="details-collapsible.detailsElement" data-view-component="true">
    <summary aria-expanded="true" aria-label="Collapse comment" data-target="details-collapsible.summaryElement" data-action="click:details-collapsible#toggle" data-aria-label-closed="Expand comment" data-aria-label-open="Collapse comment" role="button" data-view-component="true">        
</summary>
    
</details>  </details-collapsible>
</turbo-frame>




</div>  </div>

      <div data-team-hovercards-enabled="" id="event-13748086534" data-gid="LE_lADOD__WI86QkqDPzwAAAAMzcycG">

      

          <p><a data-hovercard-type="user" data-hovercard-url="/users/kirawi/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/kirawi"><img src="https://avatars.githubusercontent.com/u/67773714?s=40&amp;v=4" width="20" height="20" alt="@kirawi"></a>
<a data-hovercard-type="user" data-hovercard-url="/users/kirawi/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/kirawi">kirawi</a>




          added
  the 
<a id="label-e542e7" href="https://github.com/helix-editor/helix/labels/S-waiting-on-author" data-name="S-waiting-on-author" data-view-component="true">
  S-waiting-on-author
</a></p><tool-tip id="tooltip-5ead53f1-3cd2-4a92-b42a-78ade633af19" for="label-e542e7" popover="manual" data-direction="s" data-type="description" data-view-component="true">Status: This is awaiting some action (such as code changes or more information) from the author.</tool-tip><p>
 label


      </p><a href="#event-13748086534"><relative-time datetime="2024-08-03T03:44:23Z">Aug 3, 2024</relative-time></a>

    </div>

      <div data-gid="IC_kwDOD__WI86KSdQ8" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86KSdQ8/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/zegervdv/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/zegervdv"><img src="https://avatars.githubusercontent.com/u/747627?s=80&amp;v=4" width="40" height="40" alt="@zegervdv"></a>

</p>


  <div data-body-version="f0218757ad070d1f5a3328554ec0cf3def5941f5a092577c8f4d74e75d6e872a" id="issuecomment-2320094268">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">I think it would be useful to have the equivalent version of <code>file_picker_in_current_buffer_directory</code>. I often use this, only to realize I need to go one or more levels up. The file_browser would solve that perfectly :).</p>
<p dir="auto">It could be something like this:</p>
<div dir="auto" data-snippet-clipboard-copy-content="fn file_browser_in_current_buffer_directory(cx: &amp;mut Context) {
    let doc_dir = doc!(cx.editor)
        .path()
        .and_then(|path| path.parent().map(|path| path.to_path_buf()));

    let path = match doc_dir {
        Some(path) => path,
        None => {
            cx.editor.set_error(&quot;current buffer has no path or parent&quot;);
            return;
        }
    };

    if let Ok(picker) = ui::file_browser(path) {
        cx.push_layer(Box::new(overlaid(picker)));
    }
}"><pre><span>fn</span> <span>file_browser_in_current_buffer_directory</span><span>(</span><span>cx</span><span>:</span> <span>&amp;</span><span>mut</span> <span>Context</span><span>)</span> <span>{</span>
    <span>let</span> doc_dir = <span>doc</span><span>!</span><span>(</span>cx<span>.</span>editor<span>)</span>
        <span>.</span><span>path</span><span>(</span><span>)</span>
        <span>.</span><span>and_then</span><span>(</span>|path| path<span>.</span><span>parent</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span>|path| path<span>.</span><span>to_path_buf</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>

    <span>let</span> path = <span>match</span> doc_dir <span>{</span>
        <span>Some</span><span>(</span>path<span>)</span> =&gt; path<span>,</span>
        <span>None</span> =&gt; <span>{</span>
            cx<span>.</span><span>editor</span><span>.</span><span>set_error</span><span>(</span><span>"current buffer has no path or parent"</span><span>)</span><span>;</span>
            <span>return</span><span>;</span>
        <span>}</span>
    <span>}</span><span>;</span>

    <span>if</span> <span>let</span> <span>Ok</span><span>(</span>picker<span>)</span> = ui<span>::</span><span>file_browser</span><span>(</span>path<span>)</span> <span>{</span>
        cx<span>.</span><span>push_layer</span><span>(</span><span>Box</span><span>::</span><span>new</span><span>(</span><span>overlaid</span><span>(</span>picker<span>)</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span></pre></div>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86KaNAO" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86KaNAO/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="05247abf1b599f961424e84e0243c0c47b8211fd1845a746cb8a6b337092c7d3" id="issuecomment-2322124814">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">I think it would be useful to have the equivalent version of <code>file_picker_in_current_buffer_directory</code>. I often use this, only to realize I need to go one or more levels up. The file_browser would solve that perfectly :).</p>
</blockquote>
<p dir="auto">I think this can even be the default behavior, thanks for suggesting! Not sure when I would even need to open a file browser in the project root. I deliberately wanted to keep this PR simple and feature-poor, but your suggestion is quite simple and I think it is worth it.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86Kk8LB" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86Kk8LB/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/baldwindavid/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/baldwindavid"><img src="https://avatars.githubusercontent.com/u/4578?s=80&amp;v=4" width="40" height="40" alt="@baldwindavid"></a>

</p>


  <div data-body-version="ff435eac6e00f38972cbbc468a1cc9271426c74ce987508bdf06a3e09930b555" id="issuecomment-2324939457">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> This is perfect with the change to the current buffer directory. It's similar to good ol' netrw for quick navigation and covers 95% of the needs for me. The more advanced stuff (copy, paste, create, delete, etc) can be covered by a mix of <a data-error-text="Failed to load title" data-id="2407368319" data-permission-text="Title is private" data-url="https://github.com/helix-editor/helix/issues/11164" data-hovercard-type="pull_request" data-hovercard-url="/helix-editor/helix/pull/11164/hovercard" href="https://github.com/helix-editor/helix/pull/11164">#11164</a>, shell scripts, wezterm, and the yazi file explorer. Thanks for your work!</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86LHBqC" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86LHBqC/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/zegervdv/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/zegervdv"><img src="https://avatars.githubusercontent.com/u/747627?s=80&amp;v=4" width="40" height="40" alt="@zegervdv"></a>

</p>


  <div data-body-version="2d66cd7bf41332354dfe49c6e83aaf16f88d7d2b03227584fd6e1beb5adb2dbf" id="issuecomment-2333874818">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> found a small issue when testing: if the cursor is on a binary file, the preview will mess up the view and leave random characters everywhere. Maybe binary files can be excluded from preview somehow?<br>
These files are normally excluded from the file_picker, so maybe this is a more general issue with the preview.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86LJCaK" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86LJCaK/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="231c732449d0c9a7a8e4a8ad825dc0384fe31390f23cc72e1ab5bfdabc972399" id="issuecomment-2334402186">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a> found a small issue when testing: if the cursor is on a binary file, the preview will mess up the view and leave random characters everywhere. Maybe binary files can be excluded from preview somehow? These files are normally excluded from the file_picker, so maybe this is a more general issue with the preview.</p>
</blockquote>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/zegervdv/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/zegervdv">@zegervdv</a> I am using the same file previewer as file_picker, so the problem is probably in the previewer itself. Although as far as I tested the usual .jpg, .pdf, and executables are all correctly previewed as <code>&lt;Binary file&gt;</code>. Maybe you're using some exotic file formats?</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86LdgYX" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86LdgYX/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/thomasaarholt/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/thomasaarholt"><img src="https://avatars.githubusercontent.com/u/2721423?s=80&amp;u=9223d3be5ac0c96657b957e8f939c89df430bd3b&amp;v=4" width="40" height="40" alt="@thomasaarholt"></a>

</p>


  <div data-body-version="b11934fa07cddae3009ae966008370f6b03cb2772e46febda2a66e8ed0a573d6" id="issuecomment-2339767831">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">It would be nice to add support for going straight to the root of the project if the current buffer hasn't been saved yet. I went to test the file browser functionality by escaping the file <em>picker</em> when calling <code>hx .</code>, but then it didn't work:</p>
<details open="">
  <summary>
    
    <span aria-label="Video description Screen.Recording.2024-09-10.at.08.18.51.mov">Screen.Recording.2024-09-10.at.08.18.51.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/2721423/365917199-22113048-2d31-4382-acd0-0cc5d43ee9d7.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNzIxNDIzLzM2NTkxNzE5OS0yMjExMzA0OC0yZDMxLTQzODItYWNkMC0wY2M1ZDQzZWU5ZDcubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMjVUMDgzMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NDNiYjY1MzQ4M2Q5YTI1MGU4OGUzYTRkNGJhODEyZTc3YmU2MjRiYjc2YjJiNTAzNDg2NjgwY2U1Y2I3ZGU1NSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Jt01UjSAdJjPCbI9bERFJ_diPHY_NVr6zioeW3b2hVQ" data-canonical-src="https://private-user-images.githubusercontent.com/2721423/365917199-22113048-2d31-4382-acd0-0cc5d43ee9d7.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNzIxNDIzLzM2NTkxNzE5OS0yMjExMzA0OC0yZDMxLTQzODItYWNkMC0wY2M1ZDQzZWU5ZDcubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMjVUMDgzMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NDNiYjY1MzQ4M2Q5YTI1MGU4OGUzYTRkNGJhODEyZTc3YmU2MjRiYjc2YjJiNTAzNDg2NjgwY2U1Y2I3ZGU1NSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Jt01UjSAdJjPCbI9bERFJ_diPHY_NVr6zioeW3b2hVQ" controls="controls" muted="muted">

  </video>
</details>

      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86Ldq0I" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86Ldq0I/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/thomasaarholt/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/thomasaarholt"><img src="https://avatars.githubusercontent.com/u/2721423?s=80&amp;u=9223d3be5ac0c96657b957e8f939c89df430bd3b&amp;v=4" width="40" height="40" alt="@thomasaarholt"></a>

</p>


  <div data-body-version="c88b6fd56d7e186889155ecc8edc291c1e53b81a5909fbe467c569a203bd5cf8" id="issuecomment-2339810568">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">Actually, I can't get this to work at all? Running on MacOS.</p>
<details open="">
  <summary>
    
    <span aria-label="Video description Screen.Recording.2024-09-10.at.08.47.35.mov">Screen.Recording.2024-09-10.at.08.47.35.mov</span>
    <span></span>
  </summary>

  <video src="https://private-user-images.githubusercontent.com/2721423/365925271-c787a6eb-03bc-44a1-9e71-2a044a49a5c8.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNzIxNDIzLzM2NTkyNTI3MS1jNzg3YTZlYi0wM2JjLTQ0YTEtOWU3MS0yYTA0NGE0OWE1YzgubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMjVUMDgzMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZmFiYTE3YWE5MGRlYWNkZmVhYjVjYTNkMjRlN2ZmMGMxNmYyOGE5ZTc4ZmRmNzk3MjZlZGRlNWViMDAzNzgwMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Pnlnp2s6pAhaZJF_KNJTGHyaGOQcNZIIcyk_A9hfcKk" data-canonical-src="https://private-user-images.githubusercontent.com/2721423/365925271-c787a6eb-03bc-44a1-9e71-2a044a49a5c8.mov?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii8yNzIxNDIzLzM2NTkyNTI3MS1jNzg3YTZlYi0wM2JjLTQ0YTEtOWU3MS0yYTA0NGE0OWE1YzgubW92P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDEyNSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAxMjVUMDgzMDA0WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZmFiYTE3YWE5MGRlYWNkZmVhYjVjYTNkMjRlN2ZmMGMxNmYyOGE5ZTc4ZmRmNzk3MjZlZGRlNWViMDAzNzgwMiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.Pnlnp2s6pAhaZJF_KNJTGHyaGOQcNZIIcyk_A9hfcKk" controls="controls" muted="muted">

  </video>
</details>

<p dir="auto"><a href="https://gist.github.com/thomasaarholt/fd8de460bb7bf8d028bd7038421ae6d1">Here is the log</a> from <code>hx -vvv .</code></p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86LduGC" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86LduGC/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="a99ef3d4b24e2572fca6f5fedd1fe81dfbb2e28fc586d43b76ae34a1454e9966" id="issuecomment-2339824002">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">Actually, I can't get this to work at all? Running on MacOS.</p>
</blockquote>
<p dir="auto">Well, this is actually the behavior I get when using the command palette for the file_picker as well, I guess the palette is somehow buggy in this regard. I just mapped it to some keymap and tested like that.</p>
<p dir="auto">But anyway, even if you map it correctly and then try to open the file_browser after <code>hx .</code> then it will probably still would not work. The behavior is the same as file_picker and requires an opened document to get the current path where to open the browser. I guess it would make sense to default it to the current working directory.</p>
      </div>
</task-lists>


        
      </div>

</div>


      

      <div data-gid="IC_kwDOD__WI86MCyFY" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86MCyFY/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/L-Trump/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/L-Trump"><img src="https://avatars.githubusercontent.com/u/37738631?s=80&amp;u=89992debb6094648b07bf4f92db07b19b5b9ca11&amp;v=4" width="40" height="40" alt="@L-Trump"></a>

</p>


  <div data-body-version="2cdca522fb91ce725c33731b038c7e01e0baf51cddeff3e39869c0121a6de228" id="issuecomment-2349539672">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">Actually, I can't get this to work at all? Running on MacOS.<br>
Screen.Recording.2024-09-10.at.08.47.35.mov</p>
<p dir="auto"><a href="https://gist.github.com/thomasaarholt/fd8de460bb7bf8d028bd7038421ae6d1">Here is the log</a> from <code>hx -vvv .</code></p>
</blockquote>
<p dir="auto">Actually in current latest version of helix, no file picker can open from the command pallete (tried in nixos and archlinux). It seems like another bug.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86MoW6S" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86MoW6S/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/summersz/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/summersz"><img src="https://avatars.githubusercontent.com/u/7293216?s=80&amp;v=4" width="40" height="40" alt="@summersz"></a>

</p>


  <div data-body-version="090a29b9d3a81222fae7af4a2e7688d20c9efa6210b1db2e4afad4a121d077bf" id="issuecomment-2359389842">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">I have the same reported issue when trying to open the browser from the command palette.  Works great when opened from a keymap though.</p>
<p dir="auto">I do have a couple of suggestions to consider</p>
<ol dir="auto">
<li>
<p dir="auto">Can directory names be appended with a '/' to distinguish them (like netrw)</p>
</li>
<li>
<p dir="auto">Can left and right keys be used to navigate down and up directories, respectively? ( I have gotten used to this in yazi and find it very intuitive)</p>
</li>
</ol>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-gid="IC_kwDOD__WI86NqAxm" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86NqAxm/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/m0ar/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/m0ar"><img src="https://avatars.githubusercontent.com/u/479022?s=80&amp;u=f0dfdecf5cf278715631b96937d72b666f23a9b0&amp;v=4" width="40" height="40" alt="@m0ar"></a>

</p>


  <div data-body-version="1d9e48ac93d3edeb5f70656de108e353b4a5fec7d00c37a1a5dc9c71d4ca0459" id="issuecomment-2376600678">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">So stoked to see this <a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a>! ü´∂</p>
<p dir="auto">Probably not worth it at this stage as merging the base feature is higher priority, but it'd be cool be be able to classify the entries with icons. Having a trailing slash on dirs makes sense, but hugely useful IMO to when something is linked, and being able to visually filter on filetypes.</p>
<p dir="auto">Kinda like <a href="https://github.com/lsd-rs/lsd?tab=readme-ov-file#icon-theme-file-content"><code>lsd</code></a>, which has a default set of unicode chars, but being able to opt in to using nerdfont glyphs for extra gloss.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/479022/371098951-2427ad0b-b92d-42b8-b9ca-eef72654685d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii80NzkwMjIvMzcxMDk4OTUxLTI0MjdhZDBiLWI5MmQtNDJiOC1iOWNhLWVlZjcyNjU0Njg1ZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTI1JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyNVQwODMwMDRaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mMTI1Yzg2MTFiZjU2MWM1MTZkNzRlNzVlNDBiN2U2NjZkOGE2MGJmMDUwZWM0ZmZkYmY0NzYyYWJlYWMwZmEzJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.QHBO_uehllMJVl-c550J-p8dS8WdL-IX24jj5TGIHEk"><img src="https://private-user-images.githubusercontent.com/479022/371098951-2427ad0b-b92d-42b8-b9ca-eef72654685d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc3OTQxMDQsIm5iZiI6MTczNzc5MzgwNCwicGF0aCI6Ii80NzkwMjIvMzcxMDk4OTUxLTI0MjdhZDBiLWI5MmQtNDJiOC1iOWNhLWVlZjcyNjU0Njg1ZC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTI1JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyNVQwODMwMDRaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mMTI1Yzg2MTFiZjU2MWM1MTZkNzRlNzVlNDBiN2U2NjZkOGE2MGJmMDUwZWM0ZmZkYmY0NzYyYWJlYWMwZmEzJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.QHBO_uehllMJVl-c550J-p8dS8WdL-IX24jj5TGIHEk" alt="image"></a></p>
<p dir="auto">I could probably take a look at doing this when this is in if you aren't feeling it :)</p>
      </div>
</task-lists>


        
      </div>

</div>


      

      <div data-gid="IC_kwDOD__WI86OgSXH" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86OgSXH/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="4d782719751cac7360660395c40d9a8b7fbb74905ed3370b3cb3e7a631fbe446" id="issuecomment-2390828487">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/summersz/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/summersz">@summersz</a> Adding slash to dirs is a great idea, thank you! Using other keys in a picker is harder. The current design does not allow picker-specific keymaps, and even remapping the existing keys is not allowed yet. I will leave this idea for the future, as pickers refactor should come at some point.</p>
<p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/m0ar/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/m0ar">@m0ar</a> I also really like the idea with icons! The file_browser picker shares a lot of code with the file_picker, so if the icons would work there then most probably they will also work here. I don't want to complicate this PR with icons at this point, but you may already try implementing them for the file_picker.</p>
      </div>
</task-lists>


        
      </div>

</div>


      <div data-view-component="true" id="pullrequestreview-2346462436" data-gid="PRR_kwDOD__WI86L3Czk" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyMzQ2NDYyNDM2IiwidCI6MTczNzc5MzgwNX0=--0eecf366cce090528be58cc6b53a4c4fa955cb62f2e509fb32deb46cfdf429ba" data-url="/helix-editor/helix/pull/11285/partials/reviews/2346462436">
  <p><a href="https://github.com/the-mikedavis" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/21230295?s=60&amp;v=4" alt="the-mikedavis" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

      

      <div data-gid="IC_kwDOD__WI86OqE14" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86OqE14/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/thomasaarholt/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/thomasaarholt"><img src="https://avatars.githubusercontent.com/u/2721423?s=80&amp;u=9223d3be5ac0c96657b957e8f939c89df430bd3b&amp;v=4" width="40" height="40" alt="@thomasaarholt"></a>

</p>


  <div data-body-version="e677dd6eb9466abae12646df57e939d42cad2ec75e717c1ea202ebec4ae026c0" id="issuecomment-2393394552">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">To use this, you can add the following keybinding to your config (<code>:config-open</code>, and then after saving <code>:config-reload</code>):</p>
<div dir="auto" data-snippet-clipboard-copy-content="[keys.normal.space.space]
f = &quot;file_browser&quot;"><pre>[<span>keys</span>.<span>normal</span>.<span>space</span>.<span>space</span>]
<span>f</span> = <span><span>"</span>file_browser<span>"</span></span></pre></div>
<p dir="auto">Now, you can double-tap <code>space</code> and then press <code>f</code> to open the file browser.</p>
<p dir="auto">Note that you cannot open the file browser <strong>from the command palette</strong> due to <a data-error-text="Failed to load title" data-id="1427277744" data-permission-text="Title is private" data-url="https://github.com/helix-editor/helix/issues/4508" data-hovercard-type="issue" data-hovercard-url="/helix-editor/helix/issues/4508/hovercard" href="https://github.com/helix-editor/helix/issues/4508">#4508</a> (as discussed above).</p>
      </div>
</task-lists>


        
      </div>

</div>



  

        <div data-view-component="true" data-gid="C_kwDOMQCa7NoAKDUyYTljZWY3YjA4ZGQ4ZmNiMmY3ZjE0NjY1Njg3MDYwMTYwYmZiN2M">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/24950890?s=40&amp;v=4" width="20" height="20" alt="@drybalka">
</a>  </p>
</div>

        

        <div data-gid="IC_kwDOD__WI86YnM5I" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86YnM5I/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka"><img src="https://avatars.githubusercontent.com/u/24950890?s=80&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="40" height="40" alt="@drybalka"></a>

</p>


  <div data-body-version="b4e69f8736a95191afe01e110ead42833ac477b9246a45d991821cd3c7276202" id="issuecomment-2560413256">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto"><a data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/the-mikedavis">@the-mikedavis</a> Thank you very much for the review, I really appreciate the insights! I added the styling for dirs, as you suggested, and also removed canonicalization and unnecessary is_dir syscalls. Now the type signatures are a bit polluted with <code>(PathBuf, bool)</code> tuples, but I just couldn't come up with a decent name for it (PathBufWithSomeMetadata or FileBrowserEntry are not better, I think). Hopefully this is fine.</p>
<p dir="auto">I also had to rebase to the newest master to get the styling code, but I did not modify any commits, only added the last one.</p>
<p dir="auto">Have a Merry Christmas!</p>
      </div>
</task-lists>


        
      </div>

</div>


        <div data-gid="IC_kwDOD__WI86YocoN" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86YocoN/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/Axlefublr/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Axlefublr"><img src="https://avatars.githubusercontent.com/u/101342105?s=80&amp;u=d83eb94a87455ab03dc949683fddd938f5806ca8&amp;v=4" width="40" height="40" alt="@Axlefublr"></a>

</p>


  <div data-body-version="c63525523c5fc46c89eae8bb95bf9bea5c5e24992b717fb6002d9f2c9321f9f5" id="issuecomment-2560739853">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">thank you for rebasing <a data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">@drybalka</a>! for us forkers that is very valuable :3 <br>
hope this PR will get merged into core anyway, though!</p>
      </div>
</task-lists>


        
      </div>

</div>


        <div data-gid="CRE_kwDOD__WI85u2GBD">
  
          

  
<div id="ref-commit-44f5515">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-44f5515">
      <relative-time datetime="2025-01-02T18:48:18Z">Jan 2, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OjQ0ZjU1MTU0MjI4ZjhhY2EzYTkyM2VmYzRlODA4YjQ1OGZhNmU2MTciLCJ0IjoxNzM3NzkzODA1fQ==--6fc6c19d2831fe840dabc2d5a0cc16f14a045d493a7800fd6e693852566ae31c" data-url="/nik-rev/helix/commit/44f55154228f8aca3a923efc4e808b458fa6e617/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>

  
<div id="ref-commit-2e968e4">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/rockboynton/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/rockboynton">rockboynton</a> 

      pushed a commit
        to rockboynton/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-2e968e4">
      <relative-time datetime="2025-01-02T21:51:57Z">Jan 2, 2025</relative-time>
    </a>
    
  </div>

  
<div id="ref-commit-958dcd0">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/rockboynton/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/rockboynton">rockboynton</a> 

      pushed a commit
        to rockboynton/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-958dcd0">
      <relative-time datetime="2025-01-02T23:49:02Z">Jan 2, 2025</relative-time>
    </a>
    
  </div>

  
<div id="ref-commit-23f5fb6">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-23f5fb6">
      <relative-time datetime="2025-01-04T07:54:04Z">Jan 4, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OjIzZjVmYjYzMTZmY2EyNWViOTRjYzI4OGU1NjlhNGRkOTE3ZmU1ZGYiLCJ0IjoxNzM3NzkzODA1fQ==--038cd1476ce2ea84633f0320824c0616fb14735eb5578171218459088e1637b4" data-url="/nik-rev/helix/commit/23f5fb6316fca25eb94cc288e569a4dd917fe5df/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>



</div>

        <div id="pullrequestreview-2530410524" data-gid="PRR_kwDOD__WI86W0wAc" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyNTMwNDEwNTI0IiwidCI6MTczNzc5MzgwNX0=--df1292549f3723cc98cf403f3374d9c4469635bec7ce4e74c076afc941aab79e" data-url="/helix-editor/helix/pull/11285/partials/reviews/2530410524">
      <div data-view-component="true">
  <p><a href="https://github.com/nik-rev" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/154856872?s=60&amp;v=4" alt="nik-rev" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

      <div data-view-component="true">            <turbo-frame id="review-thread-or-comment-id-1218019762" target="_top">
  <details-collapsible>
      <details open="open" data-resolved="false" data-target="details-collapsible.detailsElement" data-view-component="true">
    <summary aria-expanded="true" aria-label="Collapse comment" data-target="details-collapsible.summaryElement" data-action="click:details-collapsible#toggle" data-aria-label-closed="Expand comment" data-aria-label-open="Collapse comment" role="button" data-view-component="true">        
</summary>
    <div data-view-component="true">          
  <div>
    
    <table data-tab-size="8" data-paste-markdown-skip="">
          <tbody><tr>

              <td></td>

              <td data-line-number="3016"></td>

            <td>
              <span>                <span>)</span><span>;</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="3017"></td>

            <td>
              <span>                <span>return</span><span>;</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="3018"></td>

            <td>
              <span>            <span>}</span></span>

            </td>
          </tr>
          <tr>

              <td></td>

              <td data-line-number="3019"></td>

            <td>
              <span>            cx<span>.</span><span>editor</span><span>.</span><span>set_error</span><span>(</span></span>

            </td>
          </tr>
    </tbody></table>

</div>


<div data-quote-markdown=".js-comment-body">
        <div id="discussion_r1902797289">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">I wouldn't call this an error, honestly. For example I'm frequently doing <code>hx .</code> and then opening the file browser, since i am in a <code>[scratch]</code>, everytime I do that it adds a red message to the statusline, so it looks like something went wrong, but really it's just fine</p>
<p dir="auto">I think that this call to <code>set_error</code> can just be removed</p>
    </div>
  </task-lists>
  

</div>

  <div id="discussion_r1903122961">
  <div data-view-component="true">
  
    <h3>Choose a reason for hiding this comment</h3>

    <p>
      The reason will be displayed to describe this comment to others. <a href="https://docs.github.com/articles/managing-disruptive-comments/#hiding-a-comment" aria-label="Learn more about hiding disruptive comments">Learn more</a>.
    </p>

    <!-- '"` --><!-- </textarea></xmp> -->

  
</div>

  <task-lists disabled="" sortable="">
    <div>
      <p dir="auto">To be fair, this function is called <code>file_browser_in_current_buffer_directory</code>, so this error is quite justified to inform the user that the <code>[scratch]</code> buffer does not have a dedicated directory. In my opinion, it would be confusing to remove this message for cases when something actually goes wrong.</p>
<p dir="auto">What you want to call after <code>hx .</code> is probably <code>file_browser_in_current_directory</code> or simply <code>file_browser</code>. Now I agree, that it is more convenient to have a single key combination that covers all file browsing needs in one go, and arguably <code>file_browser_in_current_buffer_directory</code> already does that for the price of showing you a somewhat-irritating-but-easily-ignorable error message. In an ideal world one would probably have to wait for when programmable config will be available in helix and code the desired behavior themself.</p>
    </div>
  </task-lists>
  

</div>




    </div>

</div>
</details>  </details-collapsible>
</turbo-frame>




</div>  </div>

        <div data-gid="REFE_lADOD__WI86QkqDPzwAAAAOuomgN">
  
          
<div id="ref-commit-6cdf2b2">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nyawox/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nyawox">nyawox</a> 

      added a commit
        to nyawox/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-6cdf2b2">
      <relative-time datetime="2025-01-04T09:20:57Z">Jan 4, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo5MDA3OTc3NDU6Y29tbWl0OjZjZGYyYjIzOTlmNDA3NjgzOTY3ZDMyNzY0YmJkZjVhNWUzY2I5OGQiLCJ0IjoxNzM3NzkzODA1fQ==--617503d1fe74dd78e0ae08689572d3fc5c5c6b5b09ab312e6cc72b59ad5af3f8" data-url="/nyawox/helix/commit/6cdf2b2399f407683967d32764bbdf5a5e3cb98d/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nyawox/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nyawox">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/93813719?s=40&amp;u=1f03718f8c2a86c5c8bb5ec82d8c4905d2b8f6f7&amp;v=4" width="20" height="20" alt="@nyawox">
</a>  </p>
</div>
  </div>

  
<div id="ref-commit-e22c144">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-e22c144">
      <relative-time datetime="2025-01-06T17:16:13Z">Jan 6, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OmUyMmMxNDQ3NzIyM2JjOThjNDBkZmE2YzRhYmE5YjgwMWEwY2MyZDgiLCJ0IjoxNzM3NzkzODA1fQ==--125d7d17980319753fe66e8b1a3de246ef2ace848ac75fabb7c12b910af83838" data-url="/nik-rev/helix/commit/e22c14477223bc98c40dfa6c4aba9b801a0cc2d8/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>

  
<div id="ref-commit-e7c5d6f">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-e7c5d6f">
      <relative-time datetime="2025-01-07T13:03:53Z">Jan 7, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OmU3YzVkNmY3NWVhODkxMDI3ZmE5ZTdhYzk4NWU5YmQ5MjAyMGEwMTQiLCJ0IjoxNzM3NzkzODA1fQ==--2ebad4a05997bcd6e679fea0b265116e223def47d4638a484849387c6fdfb40c" data-url="/nik-rev/helix/commit/e7c5d6f75ea891027fa9e7ac985e9bd92020a014/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>

  
<div id="ref-commit-bd2d640">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      added a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-bd2d640">
      <relative-time datetime="2025-01-07T13:27:53Z">Jan 7, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OmJkMmQ2NDAwMzliM2IzNTRkNWY5YmUyOGQ4Yzg1YTdiYzJmZjcxMGUiLCJ0IjoxNzM3NzkzODA1fQ==--0cff937ec12c1ea20ac28f2ee0280aa699abe7e488924fad595b281048741dca" data-url="/nik-rev/helix/commit/bd2d640039b3b354d5f9be28d8c85a7bc2ff710e/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>



</div>

        <div data-view-component="true" id="pullrequestreview-2535483904" data-gid="PRR_kwDOD__WI86XIGoA" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyNTM1NDgzOTA0IiwidCI6MTczNzc5MzgwNX0=--12dc1dc37a06b2761b594ad4a5a328c6c0097005e486c295448a9ca073d24277" data-url="/helix-editor/helix/pull/11285/partials/reviews/2535483904">
  <p><a href="https://github.com/the-mikedavis" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/21230295?s=60&amp;v=4" alt="the-mikedavis" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

        <div data-gid="C_kwDOMQCa7NoAKDk5NmVlOTNlNDE1MTczODZkNjI1ZTA2MGZlMWU1ZDA4NjBhYzRkMzE">
      <div data-view-component="true">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/24950890?s=40&amp;v=4" width="20" height="20" alt="@drybalka">
</a>  </p>
</div>      <div data-view-component="true">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/KevinDanne/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/KevinDanne">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/26122654?s=40&amp;v=4" width="20" height="20" alt="@KevinDanne">
</a>  </p>
</div>  </div>

        

        <div data-gid="IC_kwDOD__WI86bBQ-t" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86bBQ-t/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/civa/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/civa"><img src="https://avatars.githubusercontent.com/u/44102586?s=80&amp;u=a0d0d0c77d73dfe9562962068c061ee82337087e&amp;v=4" width="40" height="40" alt="@civa"></a>

</p>


  <div data-body-version="3edf3df1b58b0281a1b1b633be03f4c31ccf07b1c31f4dfd6ae918125e5762d1" id="issuecomment-2600800173">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<p dir="auto">Actually, I can't get this to work at all? Running on MacOS.</p>
<p dir="auto">Screen.Recording.2024-09-10.at.08.47.35.mov</p>
<p dir="auto"><a href="https://gist.github.com/thomasaarholt/fd8de460bb7bf8d028bd7038421ae6d1">Here is the log</a> from <code>hx -vvv .</code></p>
</blockquote>
<p dir="auto">Same issue</p>
      </div>
</task-lists>


        
      </div>

</div>


        <div data-gid="IC_kwDOD__WI86bohuz" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86bohuz/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev"><img src="https://avatars.githubusercontent.com/u/154856872?s=80&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="40" height="40" alt="@nik-rev"></a>

</p>


  <div data-body-version="f7d29eeb305fb883d5aebc5b50704dce5ac8704184074ba576feeb18e3ab67a7" id="issuecomment-2611092403">

        <task-lists disabled="" sortable="">
<div>
          <blockquote>
<blockquote>
<p dir="auto">Actually, I can't get this to work at all? Running on MacOS.<br>
Screen.Recording.2024-09-10.at.08.47.35.mov<br>
<a href="https://gist.github.com/thomasaarholt/fd8de460bb7bf8d028bd7038421ae6d1">Here is the log</a> from <code>hx -vvv .</code></p>
</blockquote>
<p dir="auto">Same issue</p>
</blockquote>
<p dir="auto">You can't open <em>any</em> pickers from the command palette, it isn't limited to just this PR. It's a known bug for a while and fixing it would require a large refactor. See <a data-error-text="Failed to load title" data-id="1427277744" data-permission-text="Title is private" data-url="https://github.com/helix-editor/helix/issues/4508" data-hovercard-type="issue" data-hovercard-url="/helix-editor/helix/issues/4508/hovercard" href="https://github.com/helix-editor/helix/issues/4508">#4508</a></p>
      </div>
</task-lists>


        
      </div>

</div>


        <div data-view-component="true" id="pullrequestreview-2571158000" data-gid="PRR_kwDOD__WI86ZQMHw" data-channel="eyJjIjoicHVsbF9yZXF1ZXN0X3JldmlldzoyNTcxMTU4MDAwIiwidCI6MTczNzc5MzgwNX0=--37d6507f714ece19eb3f13e71881f11bb04b0a21a8a22c82e9b361fb7639e84a" data-url="/helix-editor/helix/pull/11285/partials/reviews/2571158000">
  <p><a href="https://github.com/the-mikedavis" data-view-component="true"><img data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" src="https://avatars.githubusercontent.com/u/21230295?s=60&amp;v=4" alt="the-mikedavis" size="40" height="40" width="40" data-view-component="true"></a></p>
  
</div>

        

        <div data-gid="IC_kwDOD__WI86boyxc" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86boyxc/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev"><img src="https://avatars.githubusercontent.com/u/154856872?s=80&amp;u=6f0fbb0c6b67d5895a32108d67c89299cf170fb4&amp;v=4" width="40" height="40" alt="@nik-rev"></a>

</p>


  <div data-body-version="66acb9fecf0948e86df55df920ab022a43f6e8c7b14d903beda8dd5fb8d560fe" id="issuecomment-2611162204">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">It's merged!! Yayyyyyyy :D</p>
<p dir="auto">(small thing, but I noticed it's mapped to <code>space</code> + <code>e</code> but the command is called <code>file_browser</code>. maybe it's better to rename it to <code>file_explorer</code> as a mnemonic?)</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-99bf0fd0-14f4-417b-b029-3f5157311fee" for="reactions--reaction_button_component-059a7c" popover="manual" data-direction="n" data-type="description" data-view-component="true">uncenter, goldie-lin, TornaxO7, Akselmo, Defelo, clintjedwards, bluedragon1221, azzamsa, davidchandra95, dawnchan030920, and 15 more reacted with thumbs up emoji</tool-tip>
          <tool-tip id="tooltip-003dbd23-cd52-4777-873c-89cbe288a104" for="reactions--reaction_button_component-37a6d1" popover="manual" data-direction="n" data-type="description" data-view-component="true">summersz, Taywee, and pandalec reacted with hooray emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


        <div data-gid="IC_kwDOD__WI86bo1PG" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86bo1PG/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/Axlefublr/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Axlefublr"><img src="https://avatars.githubusercontent.com/u/101342105?s=80&amp;u=d83eb94a87455ab03dc949683fddd938f5806ca8&amp;v=4" width="40" height="40" alt="@Axlefublr"></a>

</p>


  <div data-body-version="223f8d1472569318fd144115550e6cc5952af5b08c8fface53012f0cc4b2139b" id="issuecomment-2611172294">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">NO FUCKING WAY FINALLY OMG</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-e4684696-358c-4b1b-bee2-14a7a1eafdb2" for="reactions--reaction_button_component-c9970f" popover="manual" data-direction="n" data-type="description" data-view-component="true">nik-rev, uncenter, goldie-lin, CraigglesO, Akselmo, necromeo, univerz, Defelo, azzamsa, Ladas552, and 15 more reacted with laugh emoji</tool-tip>
          <tool-tip id="tooltip-c9f785ef-c65a-40cc-87d2-22eed20cddd3" for="reactions--reaction_button_component-f14b43" popover="manual" data-direction="n" data-type="description" data-view-component="true">rotmh, Bowarc, danillos, tuchandra, Taywee, and pandalec reacted with rocket emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


        <div data-gid="IC_kwDOD__WI86bo9bE" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86bo9bE/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/the-mikedavis/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/the-mikedavis"><img src="https://avatars.githubusercontent.com/u/21230295?s=80&amp;u=d2a86deab590b17364e8bc5ee7d8d6c45d44f101&amp;v=4" width="40" height="40" alt="@the-mikedavis"></a>

</p>


  <div data-body-version="b22ea8b2f2aa6968fd98b82f0c908837179dc9b258c3d1678e8d4b86105faa91" id="issuecomment-2611205828">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">It does look a bit like Vim's <code>:Explore</code>, "explore" could be a more fitting name</p>
      </div>
</task-lists>


        <div data-view-component="true">
  <!-- '"` --><!-- </textarea></xmp> --><form data-turbo="false" action="/helix-editor/helix/reactions" accept-charset="UTF-8" method="post">
    
      
    <div>
          <tool-tip id="tooltip-1f91794b-aa45-4da9-acb0-a260263c2d52" for="reactions--reaction_button_component-e2a6e3" popover="manual" data-direction="n" data-type="description" data-view-component="true">RoloEdits, TornaxO7, goldie-lin, Akselmo, uncenter, azzamsa, DaveTJones, wxxxcxx, drybalka, KevinDanne, and 5 more reacted with thumbs up emoji</tool-tip>
      
    </div>
</form></div>
      </div>

</div>


        <div id="ref-commit-7ac8c34" data-gid="REFE_lADOD__WI86QkqDPzwAAAAO8uk7V">
    
  <p><a data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">nik-rev</a> 

      pushed a commit
        to nik-rev/helix
      that referenced
      this pull request

    </p><a href="#ref-commit-7ac8c34">
      <relative-time datetime="2025-01-24T01:27:57Z">Jan 24, 2025</relative-time>
    </a>
    <div data-channel="eyJjIjoicmVwbzo4ODQzODQ4MDI6Y29tbWl0OjdhYzhjMzQzZGNjZThkZmVjMDBkZmFkMTcwZmViYTY3NzVjZjU5M2EiLCJ0IjoxNzM3NzkzODA1fQ==--ab34124fec91124a0e8d2179643ce5124ac231badce23caee5302dfccc38d329" data-url="/nik-rev/helix/commit/7ac8c343dcce8dfec00dfad170feba6775cf593a/show_partial?partial=commit%2Fcondensed_details">
  <p><a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/drybalka/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/drybalka">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/24950890?s=40&amp;u=ba42e68c981e722bbeed7c8cc173dba27aa9f6ac&amp;v=4" width="20" height="20" alt="@drybalka">
</a>      <a data-test-selector="commits-avatar-stack-avatar-link" data-hovercard-type="user" data-hovercard-url="/users/nik-rev/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/nik-rev">
        <img data-test-selector="commits-avatar-stack-avatar-image" src="https://avatars.githubusercontent.com/u/154856872?s=40&amp;v=4" width="20" height="20" alt="@nik-rev">
</a>  </p>
</div>
  </div>

        <div data-gid="IC_kwDOD__WI86brskg" data-url="/helix-editor/helix/comments/IC_kwDOD__WI86brskg/partials/timeline_issue_comment">

  <p><a data-hovercard-type="user" data-hovercard-url="/users/rotmh/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/rotmh"><img src="https://avatars.githubusercontent.com/u/148942120?s=80&amp;u=9a9bdb5f3207ac14c2972bcd040256161c422a94&amp;v=4" width="40" height="40" alt="@rotmh"></a>

</p>


  <div data-body-version="66a4498a45343a076df28a8d56edd27a4e3f51929facfc90607f48ef4fa99c66" id="issuecomment-2611923232">

        <task-lists disabled="" sortable="">
<div>
          <p dir="auto">Hi, awesome and exciting! :)</p>
<p dir="auto">One thing, it seems not to ignore ignored files (from <code>.gitignore</code>, <code>.ignore</code>, etc.). Is that the desired behavior, a problem in my case, maybe it has been forgotten?</p>
<p dir="auto">Edit: just looked out the code and compared <code>file_browser</code> and <code>file_picker</code> - the picker uses a walker with ignores, and the browser reads dir content, which I guess makes sense, as the walker is used for recursive file iteration... Well, I'll leave it here as I don't know what was the intentions.</p>
      </div>
</task-lists>


        
      </div>

</div>


        



  <!-- Rendered timeline since 2025-01-24 23:08:48 -->
  



    </div>

    
  </div>

</div>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You could have invented Fenwick trees (124 pts)]]></title>
            <link>https://www.cambridge.org/core/journals/journal-of-functional-programming/article/you-could-have-invented-fenwick-trees/B4628279D4E54229CED97249E96F721D</link>
            <guid>42818248</guid>
            <pubDate>Sat, 25 Jan 2025 00:23:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cambridge.org/core/journals/journal-of-functional-programming/article/you-could-have-invented-fenwick-trees/B4628279D4E54229CED97249E96F721D">https://www.cambridge.org/core/journals/journal-of-functional-programming/article/you-could-have-invented-fenwick-trees/B4628279D4E54229CED97249E96F721D</a>, See on <a href="https://news.ycombinator.com/item?id=42818248">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<div data-magellan-destination="s1" id="s1">

<h2><span>1</span> Introduction</h2>
<p> Suppose we have a sequence of <em>n</em> integers <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline1.png?pub-status=live" width="89" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline1.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline1.png">
<span data-mathjax-type="texmath"><span>
$a_1, a_2, \ldots, a_n$
</span></span>
</span>
</span> and want to be able to perform arbitrary interleavings of the following two operations, as illustrated in Figure&nbsp;<a href="#f1">1</a> :</p>
<div data-magellan-destination="f1" id="f1">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig1.png?pub-status=live" width="1535" height="1239" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig1.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig1.png"></p>
<div><p><span>Fig. 1</span> Update and range query operations.</p>
</div></div>

<ul>
<li>

<p><span>‚Ä¢</span> 
<em>Update</em> the value at any given index<a href="#fn1"><span>Footnote </span>
<sup>1</sup>
</a> <em>i</em> by adding some value <em>v</em>.</p>
</li>
<li>

<p><span>‚Ä¢</span> Find the sum of all values in any given range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline2.png?pub-status=live" width="31" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline2.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline2.png">
<span data-mathjax-type="texmath"><span>
$[i,\ j]$
</span></span>
</span>
</span>, that is, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline3.png?pub-status=live" width="130" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline3.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline3.png">
<span data-mathjax-type="texmath"><span>
$a_i + a_{i+1} + \ldots + a_j$
</span></span>
</span>
</span>. We call this operation a <em>range query</em>.</p>
</li>
</ul>

<p> Note that update is phrased in terms of <em>adding</em> some value <em>v</em> to the existing value; we can also <em>set</em> a given index to a new value <em>v</em> by adding <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline4.png?pub-status=live" width="35" height="7" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline4.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline4.png">
<span data-mathjax-type="texmath"><span>
$v - u$
</span></span>
</span>
</span>, where <em>u</em> is the old value.</p>
<p> If we simply store the integers in a mutable array, then we can update in constant time, but range queries require time linear in the size of the range, since we must iterate through the entire range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline5.png?pub-status=live" width="30" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline5.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline5.png">
<span data-mathjax-type="texmath"><span>
$[i,\ j]$
</span></span>
</span>
</span> to add up the values.</p>
<p> In order to improve the running time of range queries, we could try to cache (at least some of) the range sums. However, this must be done with care, since the cached sums must be kept up to date when updating the value at an index. For example, a straightforward approach would be to use an array <em>P</em> where <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline6.png?pub-status=live" width="15" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline6.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline6.png">
<span data-mathjax-type="texmath"><span>
$P_i$
</span></span>
</span>
</span> stores the prefix sum <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline7.png?pub-status=live" width="86" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline7.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline7.png">
<span data-mathjax-type="texmath"><span>
$a_1 + \ldots + a_i$
</span></span>
</span>
</span>; <em>P</em> can be precomputed in linear time via a scan. Now range queries are fast: we can obtain <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline8.png?pub-status=live" width="84" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline8.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline8.png">
<span data-mathjax-type="texmath"><span>
$a_i + \ldots + a_j$
</span></span>
</span>
</span> in constant time by computing <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9.png?pub-status=live" width="61" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9.png">
<span data-mathjax-type="texmath"><span>
$P_j - P_{i-1}$
</span></span>
</span>
</span> (for convenience we set <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline10.png?pub-status=live" width="46" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline10.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline10.png">
<span data-mathjax-type="texmath"><span>
$P_0 = 0$
</span></span>
</span>
</span> so this works even when <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline11.png?pub-status=live" width="31" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline11.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline11.png">
<span data-mathjax-type="texmath"><span>
$i=1$
</span></span>
</span>
</span>). Unfortunately, it is update that now takes linear time, since changing <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline12.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline12.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline12.png">
<span data-mathjax-type="texmath"><span>
$a_i$
</span></span>
</span>
</span> requires updating <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline13.png?pub-status=live" width="15" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline13.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline13.png">
<span data-mathjax-type="texmath"><span>
$P_j$
</span></span>
</span>
</span> for every <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline14.png?pub-status=live" width="26" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline14.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline14.png">
<span data-mathjax-type="texmath"><span>
$j {\geqslant} i$
</span></span>
</span>
</span>.</p>
<p> Is it possible to design a data structure that allows <em>both</em> operations to run in sublinear time? (You may wish to pause and think about it before reading the next paragraph!) This is not just academic: the problem was originally considered in the context of <em>arithmetic coding</em> (Rissanen &amp; Langdon, <a href="#ref11"><span>Reference Rissanen and Langdon</span>1979</a>; Bird &amp; Gibbons, <a href="#ref2"><span>Reference Bird and Gibbons</span>2002</a>), a family of techniques for turning messages into sequences of bits for storage or transmission. In order to minimize the bits required, one generally wants to assign shorter bit sequences to more frequent characters, and vice versa; this leads to the need to maintain a dynamic table of character frequencies. We <em>update</em> the table every time a new character is processed and <em>query</em> the table for cumulative frequencies in order to subdivide a unit interval into consecutive segments proportional to the frequency of each character (Ryabko, <a href="#ref12"><span>Reference Ryabko</span>1989</a>; Fenwick, <a href="#ref5"><span>Reference Fenwick</span>1994</a>).</p>
<p> So, can we get both operations to run in sublinear time? The answer, of course, is yes. One simple technique is to divide the sequence into <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline15.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline15.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline15.png">
<span data-mathjax-type="texmath"><span>
$\sqrt n$
</span></span>
</span>
</span> buckets, each of size <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline16.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline16.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline16.png">
<span data-mathjax-type="texmath"><span>
$\sqrt n$
</span></span>
</span>
</span>, and create an additional array of size <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline17.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline17.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline17.png">
<span data-mathjax-type="texmath"><span>
$\sqrt n$
</span></span>
</span>
</span> to cache the sum of each bucket. Updates still run in <em>O</em>(1), since we simply have to update the value at the given index and the corresponding bucket sum. Range queries now run in <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline18.png?pub-status=live" width="45" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline18.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline18.png">
<span data-mathjax-type="texmath"><span>
$O(\sqrt n)$
</span></span>
</span>
</span> time: to find the sum <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline19.png?pub-status=live" width="83" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline19.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline19.png">
<span data-mathjax-type="texmath"><span>
$a_i + \ldots + a_j$
</span></span>
</span>
</span>, we manually add the values from <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline20.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline20.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline20.png">
<span data-mathjax-type="texmath"><span>
$a_i$
</span></span>
</span>
</span> to the end of its bucket, and from <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline21.png?pub-status=live" width="12" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline21.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline21.png">
<span data-mathjax-type="texmath"><span>
$a_j$
</span></span>
</span>
</span> to the beginning of its bucket; for all the buckets in between we can just look up their sum.</p>
<p> We can make range queries even faster, at the cost of making updates slightly slower, by introducing additional levels of caching. For example, we can divide the sequence into <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline22.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline22.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline22.png">
<span data-mathjax-type="texmath"><span>
$\sqrt[3] n$
</span></span>
</span>
</span> ‚Äúbig buckets‚Äù and then further subdivide each big bucket into <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline23.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline23.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline23.png">
<span data-mathjax-type="texmath"><span>
$\sqrt[3] n$
</span></span>
</span>
</span> ‚Äúsmall buckets‚Äù, with each small bucket holding <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline24.png?pub-status=live" width="23" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline24.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline24.png">
<span data-mathjax-type="texmath"><span>
$\sqrt[3] n$
</span></span>
</span>
</span> values. The sum of each bucket is cached; now each update requires modifying three values, and range queries run in <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline25.png?pub-status=live" width="45" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline25.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline25.png">
<span data-mathjax-type="texmath"><span>
$O(\sqrt[3] n)$
</span></span>
</span>
</span> time.</p>
<p> In the limit, we end up with a binary divide-and-conquer approach to caching range sums, with both update and range query taking <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline26.png?pub-status=live" width="47" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline26.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline26.png">
<span data-mathjax-type="texmath"><span>
$O(\lg n)$
</span></span>
</span>
</span> time. In particular, we can make a balanced binary tree where the leaves store the sequence itself, and every internal node stores the sum of its children. (This will be a familiar idea to many functional programmers; for example, finger trees (Hinze &amp; Paterson, <a href="#ref7"><span>Reference Hinze and Paterson</span>2006</a>; Apfelmus, <a href="#ref1"><span>Reference Apfelmus</span>2009</a>) use a similar sort of caching scheme.) The resulting data structure is popularly known as a <em>segment tree</em>,<a href="#fn2"><span>Footnote </span>
<sup>2</sup>
</a> presumably because each internal node ultimately caches the sum of a (contiguous) <em>segment</em> of the underlying sequence. Figure&nbsp;<a href="#f2">2</a> shows a segment tree built on a sample array of length <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline27.png?pub-status=live" width="43" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline27.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline27.png">
<span data-mathjax-type="texmath"><span>
$n=16$
</span></span>
</span>
</span> (for simplicity, we will assume that <em>n</em> is a power of two, although it is easy to generalize to situations where it is not). Each leaf of the tree corresponds to an array entry; each internal node is drawn with a grey bar showing the segment of the underlying array of which it is the sum.</p>
<div data-magellan-destination="f2" id="f2">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig2.png?pub-status=live" width="2255" height="1072" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig2.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig2.png"></p>
</div>

<p> Let‚Äôs see how we can use a segment tree to implement the two required operations so that they run in logarithmic time.</p>
<ul>
<li>

<p><span>‚Ä¢</span> To update the value at index <em>i</em>, we also need to update any cached range sums which include it. These are exactly the nodes along the path from the leaf at index <em>i</em> to the root of the tree; there are <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline28.png?pub-status=live" width="47" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline28.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline28.png">
<span data-mathjax-type="texmath"><span>
$O(\lg n)$
</span></span>
</span>
</span> such nodes. Figure&nbsp;<a href="#f3">3</a> illustrates this update process for the example segment tree from Figure&nbsp;<a href="#f2">2</a>; updating the entry at index 5 requires modifying only the shaded nodes along the path from the root to the updated entry.</p>
</li>
<li>

<p><span>‚Ä¢</span> To perform a range query, we descend through the tree while keeping track of the range covered by the current node.</p><ul>
<li>

<p><span>-</span> If the range of the current node is wholly contained within the query range, return the value of the current node.</p>
</li>
<li>

<p><span>-</span> If the range of the current node is disjoint from the query range, return 0.</p>
</li>
<li>

<p><span>-</span> Otherwise, recursively query both children and return the sum of the results.</p>
</li>
</ul>

</li>
</ul>

<p> Figure&nbsp;<a href="#f4">4</a> illustrates the process of computing the sum of the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline29.png?pub-status=live" width="60" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline29.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline29.png">
<span data-mathjax-type="texmath"><span>
$[4 \ldots 11]$
</span></span>
</span>
</span>. Blue nodes are the ones we recurse through; green nodes are those whose range is wholly contained in the query range and are returned without recursing further; grey nodes are disjoint from the query range and return zero. The final result in this example is the sum of values at the green nodes, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline30.png?pub-status=live" width="131" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline30.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline30.png">
<span data-mathjax-type="texmath"><span>
$1 + 1 + 5 + -2 = 5$
</span></span>
</span>
</span> (it is easily verified that this is in fact the sum of values in the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline31.png?pub-status=live" width="60" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline31.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline31.png">
<span data-mathjax-type="texmath"><span>
$[4 \ldots 11]$
</span></span>
</span>
</span>).</p>
<div data-magellan-destination="f3" id="f3">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig3.png?pub-status=live" width="2255" height="1072" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig3.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig3.png"></p>
<div><p><span>Fig. 3</span> Updating a segment tree.</p>
</div></div>

<div data-magellan-destination="f4" id="f4">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig4.png?pub-status=live" width="2256" height="1160" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig4.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig4.png"></p>
<div><p><span>Fig. 4</span> Performing a range query on a segment tree.</p>
</div></div>

<p> On this small example tree, it may seem that we visit a significant fraction of the total nodes, but in general, we visit no more than about <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline32.png?pub-status=live" width="36" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline32.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline32.png">
<span data-mathjax-type="texmath"><span>
$4 \lg n$
</span></span>
</span>
</span>. Figure&nbsp;<a href="#f5">5</a> makes this more clear. Only one blue node in the entire tree can have two blue children, and hence, each level of the tree can contain at most two blue nodes and two non-blue nodes. We essentially perform two binary searches, one to find each endpoint of the query range.</p>
<div data-magellan-destination="f5" id="f5">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig5.png?pub-status=live" width="3694" height="670" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig5.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig5.png"></p>
<div><p><span>Fig. 5</span> Performing a range query on a larger segment tree.</p>
</div></div>

<p> Segment trees are a very nice solution to the problem: as we will see in Section <a href="#s2">2</a>, they fit well in a functional language; they also lend themselves to powerful generalizations such as lazily propagated range updates and persistent update history via shared immutable structure (<a href="#ref9"><span>Reference Ivanov</span>Ivanov, 2011<em>b</em>
</a>).</p>
<p> 
<em>Fenwick trees</em>, or <em>binary indexed trees</em> (Fenwick, <a href="#ref5"><span>Reference Fenwick</span>1994</a>; <a href="#ref8"><span>Reference Ivanov</span>Ivanov, 2011<em>a</em>
</a>), are an alternative solution to the problem. What they lack in generality, they make up for with an extremely small memory footprint‚Äîthey require literally nothing more than an array storing the values in the tree‚Äîand a blazing fast implementation. In other words, they are perfect for applications such as low-level coding/decoding routines where we don‚Äôt need any of the advanced features that segment trees offer, and want to squeeze out every last bit of performance.</p>
<p> Figure&nbsp;<a href="#f6">6</a> shows a typical implementation of Fenwick trees in Java. As you can see, the implementation is incredibly concise and consists mostly of some small loops doing just a few arithmetic and bit operations per iteration. It is not at all clear what this code is doing, or how it works! Upon closer inspection, the <span>range</span>, <span>get</span>, and <span>set</span> functions are straightforward, but the other functions are a puzzle. We can see that both the <span>prefix</span> and <span>update</span> functions call another function <span>LSB</span>, which for some reason performs a bitwise logical AND of an integer and its negation. In fact, <span>LSB(x)</span> computes the <em>least significant bit</em> of <em>x</em>, that is, it returns the smallest <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline33.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline33.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline33.png">
<span data-mathjax-type="texmath"><span>
$2^k$
</span></span>
</span>
</span> such that the <em>k</em>th bit of <em>x</em> is a one. However, it is not obvious how the implementation of <span>LSB</span> works, nor how and why least significant bits are being used to compute updates and prefix sums.</p>
<div data-magellan-destination="f6" id="f6">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig6.png?pub-status=live" width="2659" height="1580" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig6.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig6.png"></p>
<div><p><span>Fig. 6</span> Implementing Fenwick trees with bit tricks.</p>
</div></div>

<p> Our goal is <em>not</em> to write elegant functional code for this‚Äîalready solved!‚Äîproblem. Rather, our goal will be to use a functional domain-specific language for bit strings, along with equational reasoning, to <em>derive</em> and <em>explain</em> this baffling imperative code from first principles‚Äîa demonstration of the power of functional thinking and equational reasoning to understand code written even in other, non-functional languages. After developing more intuition for segment trees (Section <a href="#s2">2</a>), we will see how Fenwick trees can be viewed as a variant on segment trees (Section <a href="#s3">3</a>). We will then take a detour into two‚Äôs complement binary encoding, develop a suitable DSL for bit manipulations, and explain the implementation of the <span>LSB</span> function (Section <a href="#s4">4</a>). Armed with the DSL, we will then derive functions for converting back and forth between Fenwick trees and standard binary trees (Section <a href="#s5">5</a>). Finally, we will be able to derive functions for moving within a Fenwick tree by converting to binary tree indices, doing the obvious operations to effect the desired motion within the binary tree, and then converting back. Fusing away the conversions via equational reasoning will finally reveal the hidden LSB function, as expected (Section <a href="#s6">6</a>).</p>
<p> This paper was produced from a literate Haskell document; the source is available from GitHub, at <a href="https://github.com/byorgey/fenwick/blob/master/Fenwick.lhs">https://github.com/byorgey/fenwick/blob/master/Fenwick.lhs</a>.</p>
</div>
<div data-magellan-destination="s2" id="s2">

<h2><span>2</span> Segment trees</h2>
<p> Figure&nbsp;<a href="#f7">7</a> exhibits a simple implementation of a segment tree in Haskell, using some utilities for working with index ranges shown in Figure&nbsp;<a href="#f8">8</a>. We store a segment tree as a recursive algebraic data type and implement <em>update</em> and <em>rq</em> using code that directly corresponds to the recursive descriptions given in the previous section; <em>get</em> and <em>set</em> can then also be implemented in terms of them. It is not hard to generalize this code to work for segment trees storing values from either an arbitrary commutative monoid if we don‚Äôt need the <em>set</em> operation‚Äîor from an arbitrary Abelian group (i.e. commutative monoid with inverses) if we do need <em>set</em>‚Äîbut we keep things simple since the generalization doesn‚Äôt add anything to our story.</p>
<div data-magellan-destination="f7" id="f7">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig7.png?pub-status=live" width="2337" height="2308" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig7.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig7.png"></p>
<div><p><span>Fig. 7</span> Simple segment tree implementation in Haskell.</p>
</div></div>

<div data-magellan-destination="f8" id="f8">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig8.png?pub-status=live" width="2968" height="1204" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig8.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig8.png"></p>
</div>

<p> Although this implementation is simple and relatively straightforward to understand, compared to simply storing the sequence of values in an array, it incurs a good deal of overhead. We can be more clever in our use of space by storing all the nodes of a segment tree in an array, using the standard left-to-right breadth-first indexing scheme illustrated in Figure&nbsp;<a href="#f9">9</a> (for example, this scheme, or something like it, is commonly used to implement binary heaps). The root has label 1; every time we descend one level we append an extra bit: 0 when we descend to the left child and 1 when we descend to the right. Thus, the index of each node expressed in binary records the sequence of left-right choices along the path to that node from the root. Going from a node to its children is as simple as doing a left bit shift and optionally adding 1; going from a node to its parent is a right bit shift. This defines a bijection from the positive natural numbers to the nodes of an infinite binary tree. If we label the segment tree array with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline34.png?pub-status=live" width="73" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline34.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline34.png">
<span data-mathjax-type="texmath"><span>
$s_1 \ldots s_{2n-1}$
</span></span>
</span>
</span>, then <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline35.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline35.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline35.png">
<span data-mathjax-type="texmath"><span>
$s_1$
</span></span>
</span>
</span> stores the sum of all the <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline36.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline36.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline36.png">
<span data-mathjax-type="texmath"><span>
$a_i$
</span></span>
</span>
</span>, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline37.png?pub-status=live" width="13" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline37.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline37.png">
<span data-mathjax-type="texmath"><span>
$s_2$
</span></span>
</span>
</span> stores the sum of the first half of the <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline38.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline38.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline38.png">
<span data-mathjax-type="texmath"><span>
$a_i$
</span></span>
</span>
</span>, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline39.png?pub-status=live" width="12" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline39.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline39.png">
<span data-mathjax-type="texmath"><span>
$s_3$
</span></span>
</span>
</span> stores the sum of the second half, and so on. <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline40.png?pub-status=live" width="56" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline40.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline40.png">
<span data-mathjax-type="texmath"><span>
$a_1 \ldots a_n$
</span></span>
</span>
</span> themselves are stored as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline41.png?pub-status=live" width="72" height="10" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline41.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline41.png">
<span data-mathjax-type="texmath"><span>
$s_n \ldots s_{2n-1}$
</span></span>
</span>
</span>.</p>
<div data-magellan-destination="f9" id="f9">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig9.png?pub-status=live" width="2131" height="997" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig9.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig9.png"></p>
<div><p><span>Fig. 9</span> Indexing a binary tree.</p>
</div></div>

<p> The important point is that since descending recursively through the tree corresponds to simple operations on indices, all the algorithms we have discussed can be straightforwardly transformed into code that works with a (mutable) array: for example, instead of storing a reference to the current subtree, we store an integer index; every time we want to descend to the left or right, we simply double the current index or double and add one, and so on. Working with tree nodes stored in an array presents an additional opportunity: rather than being forced to start at the root and recurse downwards, we can start at a particular index of interest and move <em>up</em> the tree instead.</p>
<p> So how do we get from segment trees to Fenwick trees? We start with an innocuous-seeming observation: <em>not all the values stored in a segment tree are necessary</em>. Of course, all the non-leaf nodes are ‚Äúunnecessary‚Äù in the sense that they represent cached range sums which could easily be recomputed from the original sequence. That‚Äôs the whole point: caching these ‚Äúredundant‚Äù sums trades off space for time, allowing us to perform arbitrary updates and range queries quickly, at the cost of doubling the required storage space.</p>
<p> But that‚Äôs not what I mean! In fact, there is a different set of values we can forget about, but in such a way that we still retain the logarithmic running time for updates and range queries. Which values, you ask? Simple: just forget the data stored in <em>every node which is a right child</em>. Figure&nbsp;<a href="#f10">10</a> shows the same example tree we have been using, but with the data deleted from every right child. Note that ‚Äúevery right child‚Äù includes both leaves and internal nodes: we forget the data associated to <em>every</em> node which is the right child of its parent. We will refer to the nodes with discarded data as <em>inactive</em> and the remaining nodes (that is, left children and the root) as <em>active</em>. We also say that a tree with all its right children inactivated in this way has been <em>thinned</em>.</p>
<div data-magellan-destination="f10" id="f10">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig10.png?pub-status=live" width="2131" height="1012" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig10.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig10.png"></p>
<div><p><span>Fig. 10</span> Inactivating all right children in a segment tree.</p>
</div></div>

<p> Updating a thinned segment tree is easy: just update the same nodes as before, ignoring any updates to inactive nodes. But how do we answer range queries? It‚Äôs not too hard to see that there is enough information remaining to reconstruct the information that was discarded (you might like to try convincing yourself of this: can you deduce what values must go in the greyed-out nodes in Figure&nbsp;<a href="#f10">10</a>, without peeking at any previous figures?). However, in and of itself, this observation does not give us a nice algorithm for computing range sums.</p>
<p> It turns out the key is to think about <em>prefix sums</em>. As we saw in the introduction and the implementation of <span>range</span> in Figure&nbsp;<a href="#f6">6</a>, if we can compute the prefix sum <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline42.png?pub-status=live" width="125" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline42.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline42.png">
<span data-mathjax-type="texmath"><span>
$P_k = a_1 + \ldots + a_k$
</span></span>
</span>
</span> for any <em>k</em>, then we can compute the range sum <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline43.png?pub-status=live" width="83" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline43.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline43.png">
<span data-mathjax-type="texmath"><span>
$a_i + \ldots + a_j$
</span></span>
</span>
</span> as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline44.png?pub-status=live" width="62" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline44.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline44.png">
<span data-mathjax-type="texmath"><span>
$P_j - P_{i-1}$
</span></span>
</span>
</span>.</p>
<p><span>Theorem 1</span> Given a thinned segment tree, the sum of any prefix of the original array (and hence also any range sum) can be computed, in logarithmic time, using only the values of active nodes.</p>

<p><span>Proof</span> Surprisingly, in the special case of prefix queries, the original range query algorithm described in Section <a href="#s1">1</a> and implemented in Figure&nbsp;<a href="#f7">7</a> works unchanged! That is to say, the base case in which the range of the current node is wholly contained within the query range‚Äîand we thus return the value of the current node‚Äîwill only ever happen at active nodes.</p>

<p> First, the root itself is active, and hence, querying the full range will work. Next, consider the case where we are at a node and recurse on both children. The left child is always active, so we only need to consider the case where we recurse to the right. It is impossible that the range of the right child will be wholly contained in the query range: since the query range is always a prefix of the form <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline45.png?pub-status=live" width="34" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline45.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline45.png">
<span data-mathjax-type="texmath"><span>
$[1,\ j]$
</span></span>
</span>
</span>, if the right child‚Äôs range is wholly contained in <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline46.png?pub-status=live" width="35" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline46.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline46.png">
<span data-mathjax-type="texmath"><span>
$[1,\ j]$
</span></span>
</span>
</span> then the left child‚Äôs range must be as well‚Äîwhich means that the parent node‚Äôs range (which is the union of its children‚Äôs ranges) would also be wholly contained in the query range. But in that case we would simply return the parent‚Äôs value without recursing into the right child. Thus, when we do recurse into a right child, we might end up returning 0, or we might recurse further into both grandchildren, but in any case we will never try to look at the value of the right child itself.</p>
<p> Figure&nbsp;<a href="#f11">11</a> illustrates performing a prefix query on a segment tree. Notice that visited right children are only ever blue or grey; the only green nodes are left children.</p>
<div data-magellan-destination="f11" id="f11">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig11.png?pub-status=live" width="2136" height="1096" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig11.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig11.png"></p>
<div><p><span>Fig. 11</span> Performing a prefix query on a segment tree.</p>
</div></div>

</div>
<div data-magellan-destination="s3" id="s3">

<h2><span>3</span> Fenwick trees</h2>
<p> How should we actually store a thinned segment tree in memory? If we stare at Figure&nbsp;<a href="#f10">10</a> again, one strategy suggests itself: simply take every active node and ‚Äúslide‚Äù it down and to the right until it lands in an empty slot in the underlying array, as illustrated in Figure&nbsp;<a href="#f12">12</a>. This sets up a one-to-one correspondence between active nodes and indices in the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline47.png?pub-status=live" width="42" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline47.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline47.png">
<span data-mathjax-type="texmath"><span>
$1 \ldots n$
</span></span>
</span>
</span>. Another way to understand this indexing scheme is to use a postorder traversal of the tree, skipping over inactive nodes and giving consecutive indices to active nodes encountered during the traversal. We can also visualize the result by drawing the tree in a ‚Äúright-leaning‚Äù style (Figure&nbsp;<a href="#f13">13</a>), vertically aligning each active node with the array slot where it is stored.</p>
<div data-magellan-destination="f12" id="f12">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig12.png?pub-status=live" width="2132" height="1461" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig12.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig12.png"></p>
<div><p><span>Fig. 12</span> Sliding active values down a thinned segment tree.</p>
</div></div>

<div data-magellan-destination="f13" id="f13">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig13.png?pub-status=live" width="2131" height="1012" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig13.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig13.png"></p>
<div><p><span>Fig. 13</span> Right-leaning drawing of a thinned segment tree, vertically aligning nodes with their storage location.</p>
</div></div>

<p> This method of storing the active nodes from a thinned segment tree in an array is precisely a <em>Fenwick tree</em>. I will also sometimes refer to it as a <em>Fenwick array</em>, when I want to particularly emphasize the underlying array data structure. Although it is certainly a clever use of space, the big question is how to implement the update and range query operations. Our implementations of these operations for segment trees worked by recursively descending through the tree, either directly if the tree is stored as a recursive data structure, or using simple operations on indices if the tree is stored in an array. However, when storing the active nodes of a thinned tree in a Fenwick array, it is not <em>a priori</em> obvious what operations on array indices will correspond to moving around the tree. In order to attack this problem, we first take a detour through a domain-specific language for two‚Äôs complement binary values.</p>
</div>
<div data-magellan-destination="s4" id="s4">

<h2><span>4</span> Two‚Äôs complement binary</h2>
<p> The bit tricks usually employed to implement Fenwick trees rely on a <em>two‚Äôs complement</em> representation of binary numbers, which allow positive and negative numbers to be represented in a uniform way; for example, a value consisting of all 1 bits represents <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline48.png?pub-status=live" width="19" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline48.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline48.png">
<span data-mathjax-type="texmath"><span>
$-1$
</span></span>
</span>
</span>. We therefore turn now to developing a domain-specific language, embedded in Haskell, for manipulating two‚Äôs complement binary representations.</p>
<p> First, we define a type of bits, with functions for inversion, logical conjunction, and logical disjunction:</p>
<div data-magellan-destination="dispU9001" id="dispU9001">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9001.png?pub-status=live" width="504" height="271" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9001.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9001.png"></p>
</div>

<p> Next, we must define bit strings, i.e. sequences of bits. Rather than fix a specific bit width, it will be much more elegant to work with <em>infinite</em> bit strings.<a href="#fn3"><span>Footnote </span>
<sup>3</sup>
</a> It is tempting to use standard Haskell lists to represent potentially infinite bit strings, but this leads to a number of problems. For example, equality of infinite lists is not decidable, and there is no way in general to convert from an infinite list of bits back to an <em>Integer</em>‚Äîhow would we know when to stop? In fact, these practical problems stem from a more fundamental one: infinite lists of bits are actually a bad representation for two‚Äôs complement bit strings, because of ‚Äújunk‚Äù, that is, infinite lists of bits which do not correspond to values in our intended semantic domain. For example, <em>cycle</em> [<em>I</em>,<em>O</em>] is an infinite list which alternates between <em>I</em> and <em>O</em> forever, but it does not represent a valid two‚Äôs complement encoding of an integer. Even worse are non-periodic lists, such as the one with <em>I</em> at every prime index and <em>O</em> everywhere else.</p>
<p> In fact, the bit strings we want are the <em>eventually constant</em> ones, that is, strings which eventually settle down to an infinite tail of all zeros (which represent nonnegative integers) or all ones (which represent negative integers). Every such string has a finite representation, so directly encoding eventually constant bit strings in Haskell not only gets rid of the junk but also leads to elegant, terminating algorithms for working with them.</p>
<div data-magellan-destination="dispU9002" id="dispU9002">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9002.png?pub-status=live" width="301" height="110" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9002.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9002.png"></p>
</div>

<p> 
<em>Rep b</em> represents an infinite sequence of bit <em>b</em>, whereas <em>Snoc bs b</em> represents the bit string <em>bs</em> followed by a final bit <em>b</em>. We use <em>Snoc</em>, rather than <em>Cons</em>, to match the way we usually write bit strings, with the least significant bit last. Note also the use of a <em>strictness annotation</em> on the <em>Bits</em> field of <em>Snoc</em>; this is to rule out infinite lists of bits using only <em>Snoc</em>, such as <em>bs</em>=<em>Snoc</em> (<em>Snoc bs O</em>) <em>I</em>. In other words, the only way to make a non-bottom value of type <em>Bits</em> is to have a finite sequence of <em>Snoc</em> finally terminated by <em>Rep</em>.</p>
<p> Although we have eliminated junk values, one remaining problem is that there can be multiple distinct representations of the same value. For example, <em>Snoc</em> (<em>Rep O</em>) <em>O</em> and <em>Rep O</em> both represent the infinite bit string containing all zeros. However, we can solve this with a carefully constructed <em>bidirectional pattern synonym</em> (Pickering <em>et al</em>., <a href="#ref10"><span>Reference Pickering, √ârdi, Peyton Jones and Eisenberg</span>2016</a>).</p>
<div data-magellan-destination="dispU9003" id="dispU9003">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9003.png?pub-status=live" width="432" height="291" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9003.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9003.png"></p>
</div>

<p> Matching with the pattern <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline50.png?pub-status=live" width="49" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline50.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline50.png">
<span data-mathjax-type="texmath"><span>
${({bs}\mathrel{:\!.}{b})}$
</span></span>
</span>
</span> uses a <em>view pattern</em> (Erwig &amp; Jones, <a href="#ref4"><span>Reference Erwig and Jones</span>2001</a>) to potentially expand a <em>Rep</em> one step into a <em>Snoc</em>, so that we can pretend <em>Bits</em> values are always constructed with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline51.png?pub-status=live" width="19" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline51.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline51.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span>. Conversely, constructing a <em>Bits</em> with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline52.png?pub-status=live" width="20" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline52.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline52.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> will do nothing if we happen to snoc an identical bit <em>b</em> onto an existing <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline53.png?pub-status=live" width="38" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline53.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline53.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{b}}$
</span></span>
</span>
</span>. This ensures that as long as we stick to using <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline54.png?pub-status=live" width="20" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline54.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline54.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> and never directly use <em>Snoc</em>, <em>Bits</em> values will always be <em>normalized</em> so that the terminal <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline55.png?pub-status=live" width="38" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline55.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline55.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{b}}$
</span></span>
</span>
</span> is immediately followed by a different bit. Finally, we mark the pattern <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline56.png?pub-status=live" width="20" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline56.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline56.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> as <span>COMPLETE</span> on its own, since matching on <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline57.png?pub-status=live" width="19" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline57.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline57.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> is indeed sufficient to handle every possible input of type <em>Bits</em>. However, in order to obtain terminating algorithms we will often include one or more special cases for <em>Rep</em>.</p>
<p> Let‚Äôs begin with some functions for converting <em>Bits</em> to and from <em>Integer</em> and for displaying <em>Bits</em> (intended only for testing).</p>
<div data-magellan-destination="dispU9004" id="dispU9004">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9004.png?pub-status=live" width="579" height="516" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9004.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9004.png"></p>
</div>

<p> Let‚Äôs try it out, using QuickCheck (Claessen &amp; Hughes, <a href="#ref3"><span>Reference Claessen and Hughes</span>2000</a>) to verify our conversion functions:</p>
<div data-magellan-destination="dispU9005" id="dispU9005">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9005.png?pub-status=live" width="675" height="385" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9005.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9005.png"></p>
</div>

<p> We can now begin implementing some basic operations on <em>Bits</em>. First, incrementing and decrementing can be implemented recursively as follows:</p>
<div data-magellan-destination="dispU9006" id="dispU9006">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9006.png?pub-status=live" width="317" height="243" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9006.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9006.png"></p>
</div>

<p> The <em>least significant bit</em>, or LSB, of a sequence of bits can be defined as follows:</p>
<div data-magellan-destination="dispU9007" id="dispU9007">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9007.png?pub-status=live" width="282" height="120" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9007.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9007.png"></p>
</div>

<p> Note that we add a special case for <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline58.png?pub-status=live" width="42" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline58.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline58.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{O}}$
</span></span>
</span>
</span> to ensure that <em>lsb</em> is total. Technically, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline59.png?pub-status=live" width="42" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline59.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline59.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{O}}$
</span></span>
</span>
</span> does not have a least significant bit, so defining <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline60.png?pub-status=live" width="136" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline60.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline60.png">
<span data-mathjax-type="texmath"><span>
${{lsb}\;({Rep}\;{O})\mathrel{=}{Rep}\;{O}}$
</span></span>
</span>
</span> seems sensible.</p>
<div data-magellan-destination="dispU9008" id="dispU9008">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9008.png?pub-status=live" width="337" height="253" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9008.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9008.png"></p>
</div>

<p> Bitwise logical conjunction can be defined straightforwardly. Note that we only need two cases; if the finite parts of the inputs have different lengths, matching with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline61.png?pub-status=live" width="19" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline61.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline61.png">
<span data-mathjax-type="texmath"><span>
${(\mathrel{:\!.})}$
</span></span>
</span>
</span> will automatically expand the shorter one to match the longer one.</p>
<div data-magellan-destination="dispU9009" id="dispU9009">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9009.png?pub-status=live" width="431" height="107" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9009.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9009.png"></p>
</div>

<p> Bitwise inversion is likewise straightforward.</p>
<div data-magellan-destination="dispU9010" id="dispU9010">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9010.png?pub-status=live" width="270" height="89" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9010.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9010.png"></p>
</div>

<p> The above functions follow familiar patterns. We could easily generalize to eventually constant streams over an arbitrary element type and then implement <img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9001.png?pub-status=live" width="26" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9001.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9001.png"> in terms of a generic <em>zipWith</em> and <em>inv</em> in terms of <em>map</em>. However, for the present purpose we do not need the extra generality.</p>
<p> We implement addition with the usual carry-propagation algorithm, along with some special cases for <em>Rep</em>.</p>
<div data-magellan-destination="dispU9011" id="dispU9011">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9011.png?pub-status=live" width="441" height="190" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9011.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9011.png"></p>
</div>

<p> It is not too hard to convince ourselves that this definition of addition is terminating and yields correct results; but we can also be fairly confident by just trying it with QuickCheck:</p>
<div data-magellan-destination="dispU9012" id="dispU9012">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9012.png?pub-status=live" width="871" height="78" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9012.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9012.png"></p>
</div>

<p> Finally, the following definition of negation is probably familiar to anyone who has studied two‚Äôs complement arithmetic; I leave it as an exercise for the interested reader to prove that <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline62.png?pub-status=live" width="124" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline62.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline62.png">
<span data-mathjax-type="texmath"><span>
${{x}\oplus{neg}\;{x}\equiv {Rep}\;{O}}$
</span></span>
</span>
</span> for all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline63.png?pub-status=live" width="51" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline63.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline63.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{::}{Bits}}$
</span></span>
</span>
</span>.</p>
<div data-magellan-destination="dispU9013" id="dispU9013">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9013.png?pub-status=live" width="274" height="86" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9013.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9013.png"></p>
</div>

<p> We now have the tools to resolve the first mystery of the Fenwick tree implementation.</p>
<p><span>Theorem 4.1</span> For all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline64.png?pub-status=live" width="51" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline64.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline64.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{::}{Bits}}$
</span></span>
</span>
</span>,</p>

<div data-magellan-destination="dispU9014" id="dispU9014">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9014.png?pub-status=live" width="187" height="31" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9014.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9014.png"></p>
</div>

<p> 
<strong>Proof.</strong> By induction on <em>x</em>.</p>
<ul>
<li>

<p><span>‚Ä¢</span> First, if <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline65.png?pub-status=live" width="69" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline65.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline65.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{Rep}\;{O}}$
</span></span>
</span>
</span>, it is an easy calculation to verify that <img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9002.png?pub-status=live" width="159" height="19" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9002.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9002.png">.</p>
</li>
<li>

<p><span>‚Ä¢</span> Likewise, if <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline66.png?pub-status=live" width="64" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline66.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline66.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{Rep}\;{I}}$
</span></span>
</span>
</span>, both <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline67.png?pub-status=live" width="30" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline67.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline67.png">
<span data-mathjax-type="texmath"><span>
${{lsb}\;{x}}$
</span></span>
</span>
</span> and <img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9003.png?pub-status=live" width="58" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9003.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9003.png"> reduce to <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline68.png?pub-status=live" width="65" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline68.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline68.png">
<span data-mathjax-type="texmath"><span>
${{Rep}\;{O}\mathrel{:\!.}{I}}$
</span></span>
</span>
</span>.</p>
</li>
<li>

<p><span>‚Ä¢</span> If <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline69.png?pub-status=live" width="69" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline69.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline69.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{xs}\mathrel{:\!.}{O}}$
</span></span>
</span>
</span>, then <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline70.png?pub-status=live" width="208" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline70.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline70.png">
<span data-mathjax-type="texmath"><span>
${{lsb}\;{x}\mathrel{=}{lsb}\;({xs}\mathrel{:\!.}{O})\mathrel{=}{lsb}\;{xs}\mathrel{:\!.}{O}}$
</span></span>
</span>
</span> by definition, whereas</p>
<div data-magellan-destination="dispU9015" id="dispU9015">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9015.png?pub-status=live" width="615" height="342" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9015.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9015.png"></p>
</div>

</li>
<li>

<p><span>‚Ä¢</span> Next, if <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline71.png?pub-status=live" width="64" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline71.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline71.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{xs}\mathrel{:\!.}{I}}$
</span></span>
</span>
</span>, then <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline72.png?pub-status=live" width="153" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline72.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline72.png">
<span data-mathjax-type="texmath"><span>
${{lsb}\;({xs}\mathrel{:\!.}{I})\mathrel{=}{Rep}\;{O}\mathrel{:\!.}{I}}$
</span></span>
</span>
</span> by definition, whereas</p>
</li>
</ul>

<div data-magellan-destination="dispU9016" id="dispU9016">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9016.png?pub-status=live" width="769" height="341" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9016.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9016.png"></p>
</div>

<p> For the last equality, we need a lemma that <img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9004.png?pub-status=live" width="123" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9004.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline9004.png">, which should be intuitively clear and can easily be proved by induction as well.</p>
<p> Finally, in order to express the index conversion functions we will develop in the next section, we need a few more things in our DSL. First, some functions to set and clear individual bits and to test whether particular bits are set:</p>
<div data-magellan-destination="dispU9017" id="dispU9017">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9017.png?pub-status=live" width="408" height="409" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9017.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9017.png"></p>
</div>

<p> The only other things we will need are left and right shift, and a generic <em>while</em> combinator that iterates a given function, returning the first iterate for which a predicate is false.</p>
<div data-magellan-destination="dispU9018" id="dispU9018">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9018.png?pub-status=live" width="424" height="268" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9018.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9018.png"></p>
</div>

</div>
<div data-magellan-destination="s5" id="s5">

<h2><span>5</span> Index conversion</h2>
<p> Before deriving our index conversion functions, we must deal with one slightly awkward fact. In a traditional binary tree indexing scheme, as shown in Figure&nbsp;<a href="#f9">9</a>, the root has index 1, every left child is twice its parent, and every right child is one more than twice its parent. Recall that in a thinned segment tree, the root node and every left child are active, with all right children being inactive. This makes the root an awkward special case‚Äîall active nodes have an even index, <em>except</em> the root, which has index 1. This makes it more difficult to check whether we are at an active node‚Äîit is not enough to simply look at the least significant bit.</p>
<p> One easy way to fix this is simply to give the root index 2 and then proceed to label the rest of the nodes using the same scheme‚Äîevery left child is twice its parent, and every right child is one more than twice its parent. This results in the indexing shown in Figure&nbsp;<a href="#f14">14</a>, as if we had just taken the left subtree of the tree rooted at 1, and ignored the right subtree. Of course, this means about half the possible indices are omitted‚Äîbut that‚Äôs not a problem, since we will only use these indices as an intermediate step which will eventually get fused away.</p>
<div data-magellan-destination="f14" id="f14">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig14.png?pub-status=live" width="2131" height="997" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig14.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig14.png"></p>
<div><p><span>Fig. 14</span> Indexing a binary tree with 2 at the root.</p>
</div></div>

<p> Figure&nbsp;<a href="#f15">15</a> shows a binary tree where nodes have been numbered in two different ways: the left side of each node shows the node‚Äôs binary tree index (with the root having index 2). The right side of each node shows its index in the Fenwick array, if it has one (inactive nodes simply have their right half greyed out). The table underneath shows the mapping from Fenwick array indices (top row) to binary tree indices (bottom row). As a larger example, Figure&nbsp;<a href="#f16">16</a> shows the same thing on a binary tree one level deeper.</p>
<div data-magellan-destination="f15" id="f15">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig15.png?pub-status=live" width="3134" height="1941" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig15.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig15.png"></p>
<div><p><span>Fig. 15</span> Binary tree labelled with both binary and Fenwick indexing.</p>
</div></div>

<div data-magellan-destination="f16" id="f16">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig16.png?pub-status=live" width="3654" height="1535" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig16.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig16.png"></p>
<div><p><span>Fig. 16</span> Binary tree labelled with both binary and Fenwick indexing.</p>
</div></div>

<p> Our goal is to come up with a way to calculate the binary index for a given Fenwick index or vice versa. Staring at the table in Figure&nbsp;<a href="#f16">16</a>, a few patterns stand out. Of course, all the numbers in the bottom row are even, which is precisely because the binary tree is numbered in such a way that all active nodes have an even index. Second, we can see the even numbers <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline73.png?pub-status=live" width="83" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline73.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline73.png">
<span data-mathjax-type="texmath"><span>
$32, 34 \ldots 46$
</span></span>
</span>
</span>, in order, in all the odd positions. These are exactly the leaves of the tree, and indeed, every other node in the Fenwick array will be a leaf from the original tree. Alternating with these, in the even positions, are the numbers <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline74.png?pub-status=live" width="91" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline74.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline74.png">
<span data-mathjax-type="texmath"><span>
$16\;\; 8\;\; 18\;\; 4 \ldots$
</span></span>
</span>
</span>, which correspond to all the non-leaf nodes; but these are exactly the sequence of binary indices from the bottom row of the table in Figure&nbsp;<a href="#f15">15</a>‚Äîsince the internal nodes in a tree of height 4 themselves constitute a tree of height 3, with the nodes occurring in the same order.</p>
<p> These observations lead to the recurrence shown in Figure&nbsp;<a href="#f17">17</a> for the sequence <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline75.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline75.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline75.png">
<span data-mathjax-type="texmath"><span>
$b_n$
</span></span>
</span>
</span> of binary indices for the nodes stored in a Fenwick array of length <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline76.png?pub-status=live" width="14" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline76.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline76.png">
<span data-mathjax-type="texmath"><span>
$2^n$
</span></span>
</span>
</span>: <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline77.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline77.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline77.png">
<span data-mathjax-type="texmath"><span>
$b_0$
</span></span>
</span>
</span> is just the singleton sequence [2], and otherwise <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline78.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline78.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline78.png">
<span data-mathjax-type="texmath"><span>
$b_n$
</span></span>
</span>
</span> is the even numbers <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline79.png?pub-status=live" width="224" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline79.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline79.png">
<span data-mathjax-type="texmath"><span>
$2^{n+1}, 2^{n+1} + 2, \ldots, 2^{n+1} + 2^n - 2$
</span></span>
</span>
</span> interleaved with <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline80.png?pub-status=live" width="28" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline80.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline80.png">
<span data-mathjax-type="texmath"><span>
$b_{n-1}$
</span></span>
</span>
</span>.</p>
<div data-magellan-destination="f17" id="f17">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig17.png?pub-status=live" width="1753" height="729" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig17.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig17.png"></p>
<div><p><span>Fig. 17</span> Recurrence for sequence of binary tree indices in a Fenwick array.</p>
</div></div>

<p> We can check that this does in fact reproduce the observed sequence for <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline81.png?pub-status=live" width="35" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline81.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline81.png">
<span data-mathjax-type="texmath"><span>
$n = 4$
</span></span>
</span>
</span>:</p>
<div data-magellan-destination="dispU9019" id="dispU9019">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9019.png?pub-status=live" width="576" height="78" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9019.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9019.png"></p>
</div>

<p> Let <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline82.png?pub-status=live" width="31" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline82.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline82.png">
<span data-mathjax-type="texmath"><span>
${{s}\text{ ! }{k}}$
</span></span>
</span>
</span> denote the <em>k</em>th item in the list <em>s</em> (counting from 1), as defined in Figure&nbsp;<a href="#f18">18</a>. The same figure also lists two easy lemmas about the interaction between indexing and interleaving, namely <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline83.png?pub-status=live" width="152" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline83.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline83.png">
<span data-mathjax-type="texmath"><span>
${({xs}{\curlyvee}{ys})\text{ ! }(\mathrm{2}\cdot{j})\mathrel{=}{ys}\text{ ! }{j}}$
</span></span>
</span>
</span> and <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline84.png?pub-status=live" width="181" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline84.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline84.png">
<span data-mathjax-type="texmath"><span>
${({xs}{\curlyvee}{ys})\text{ ! }(\mathrm{2}\cdot{j}\mathbin{-}\mathrm{1})\mathrel{=}{xs}\text{ ! }{j}}$
</span></span>
</span>
</span> (as long as <em>xs</em> and <em>ys</em> have equal lengths). With these in hand, we can define the Fenwick to binary index conversion function as </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU1.png?pub-status=live" width="115" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU1.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU1.png">
<span data-mathjax-type="texmath"><span>
\[ {{f2b}\;{n}\;{k}\mathrel{=}{b}\;{n}\text{ ! }{k}}. \]
</span></span>
</span>
</p><p> Of course, since <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline85.png?pub-status=live" width="14" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline85.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline85.png">
<span data-mathjax-type="texmath"><span>
$b_n$
</span></span>
</span>
</span> is of length <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline86.png?pub-status=live" width="14" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline86.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline86.png">
<span data-mathjax-type="texmath"><span>
$2^n$
</span></span>
</span>
</span>, this function is only defined on the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline87.png?pub-status=live" width="40" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline87.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline87.png">
<span data-mathjax-type="texmath"><span>
$[1, 2^n]$
</span></span>
</span>
</span>.</p>
<div data-magellan-destination="f18" id="f18">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig18.png?pub-status=live" width="406" height="276" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig18.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig18.png"></p>
<div><p><span>Fig. 18</span> Indexing and interleaving.</p>
</div></div>

<p> We can now simplify the definition of <em>f2b</em> as follows. First of all, for even inputs, we have</p>
<div data-magellan-destination="dispU9020" id="dispU9020">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9020.png?pub-status=live" width="572" height="321" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9020.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9020.png"></p>
</div>

<p> And for odd inputs,</p>
<div data-magellan-destination="dispU9021" id="dispU9021">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9021.png?pub-status=live" width="659" height="343" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9021.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9021.png"></p>
</div>

<p> Thus, we have </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU2.png?pub-status=live" width="261" height="51" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU2.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU2.png">
<span data-mathjax-type="texmath"><span>
\[ {{f2b}\;{n}\;{k}} = \begin{cases} {{f2b}\;({n}\mathbin{-}\mathrm{1})\;({k}\mathbin{/}\mathrm{2})} &amp; k \text{ even} \\ 2^{n+1} + k - 1 &amp; k \text{ odd} \end{cases} \]
</span></span>
</span>
</p><p> Note that when <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline88.png?pub-status=live" width="40" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline88.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline88.png">
<span data-mathjax-type="texmath"><span>
$n = 0,$
</span></span>
</span>
</span> we must have <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline89.png?pub-status=live" width="34" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline89.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline89.png">
<span data-mathjax-type="texmath"><span>
$k = 1$
</span></span>
</span>
</span>, and hence, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline90.png?pub-status=live" width="167" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline90.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline90.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;\mathrm{0}\;\mathrm{1}} = 2^0 + 1 - 1 = 1$
</span></span>
</span>
</span>, as required, so this definition is valid for all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline91.png?pub-status=live" width="29" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline91.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline91.png">
<span data-mathjax-type="texmath"><span>
$n {\geqslant} 0$
</span></span>
</span>
</span>. Now factor <em>k</em> uniquely as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline92.png?pub-status=live" width="34" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline92.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline92.png">
<span data-mathjax-type="texmath"><span>
$2^a \cdot b$
</span></span>
</span>
</span> where <em>b</em> is odd. Then by induction we can see that </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU3.png?pub-status=live" width="316" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU3.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU3.png">
<span data-mathjax-type="texmath"><span>
\[ {{f2b}\;{n}\;(\mathrm{2}^ {{a}}\cdot{b})\mathrel{=}{f2b}\;({n}\mathbin{-}{a})\;{b}} = 2^{n-a+1} + b - 1. \]
</span></span>
</span>
</p><p> So, in other words, computing <em>f2b</em> consists of repeatedly dividing by 2 (i.e. right bit shifts) as long as the input is even and then finally decrementing and adding a power of 2. However, knowing what power of 2 to add at the end depends on knowing how many times we shifted. A better way to think of it is to add <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline93.png?pub-status=live" width="28" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline93.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline93.png">
<span data-mathjax-type="texmath"><span>
$2^{n+1}$
</span></span>
</span>
</span> at the <em>beginning</em>, and then let it be shifted along with everything else. Thus, we have the following definition of <em>f2b‚Äô</em> using our <em>Bits</em> DSL. Defining <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline94.png?pub-status=live" width="201" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline94.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline94.png">
<span data-mathjax-type="texmath"><span>
${{shift}\;{n}\mathrel{=}{while}\;{even}\;{shr}\mathbin{\circ}{set}\;{n}}$
</span></span>
</span>
</span> separately will make some of our proofs more compact later.</p>
<div data-magellan-destination="dispU9022" id="dispU9022">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9022.png?pub-status=live" width="312" height="134" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9022.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9022.png"></p>
</div>

<p> For example, we can verify that this produces identical results to <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline95.png?pub-status=live" width="38" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline95.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline95.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;\mathrm{4}}$
</span></span>
</span>
</span> on the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline96.png?pub-status=live" width="41" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline96.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline96.png">
<span data-mathjax-type="texmath"><span>
$[1, 2^4]$
</span></span>
</span>
</span> (for convenience, we define <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline97.png?pub-status=live" width="163" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline97.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline97.png">
<span data-mathjax-type="texmath"><span>
${({f}\mathbin{===}{g})\;{k}\mathrel{=}{f}\;{k}\equiv {g}\;{k}}$
</span></span>
</span>
</span>):</p>
<div data-magellan-destination="dispU9023" id="dispU9023">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9023.png?pub-status=live" width="738" height="80" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9023.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9023.png"></p>
</div>

<p> We now turn to deriving <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline98.png?pub-status=live" width="36" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline98.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline98.png">
<span data-mathjax-type="texmath"><span>
${{b2f}\;{n}}$
</span></span>
</span>
</span>, which converts back from binary to Fenwick indices. <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline99.png?pub-status=live" width="35" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline99.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline99.png">
<span data-mathjax-type="texmath"><span>
${{b2f}\;{n}}$
</span></span>
</span>
</span> should be a left inverse to <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline100.png?pub-status=live" width="39" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline100.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline100.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;{n}}$
</span></span>
</span>
</span>, that is, for any <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline101.png?pub-status=live" width="66" height="15" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline101.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline101.png">
<span data-mathjax-type="texmath"><span>
$k \in [1, 2^n]$
</span></span>
</span>
</span> we should have <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline102.png?pub-status=live" width="126" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline102.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline102.png">
<span data-mathjax-type="texmath"><span>
${{b2f}\;{n}\;({f2b}\;{n}\;{k})\equiv {k}}$
</span></span>
</span>
</span>. If <em>k</em> is an input to <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline103.png?pub-status=live" width="27" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline103.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline103.png">
<span data-mathjax-type="texmath"><span>
${{f2b}}$
</span></span>
</span>
</span>, we have <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline104.png?pub-status=live" width="89" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline104.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline104.png">
<span data-mathjax-type="texmath"><span>
$k = 2^a \cdot b {\leqslant} 2^n$
</span></span>
</span>
</span>, and so <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline105.png?pub-status=live" width="84" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline105.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline105.png">
<span data-mathjax-type="texmath"><span>
$b-1 &lt; 2^{n-a}$
</span></span>
</span>
</span>. Hence, given the output <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline106.png?pub-status=live" width="200" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline106.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline106.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;{n}\;{k}} = m = 2^{n-a+1} + b - 1$
</span></span>
</span>
</span>, the highest bit of <em>m</em> is <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline107.png?pub-status=live" width="43" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline107.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline107.png">
<span data-mathjax-type="texmath"><span>
$2^{n-a+1}$
</span></span>
</span>
</span>, and the rest of the bits represent <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline108.png?pub-status=live" width="35" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline108.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline108.png">
<span data-mathjax-type="texmath"><span>
$b-1$
</span></span>
</span>
</span>. So, in general, given some <em>m</em> which is the output of <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline109.png?pub-status=live" width="38" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline109.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline109.png">
<span data-mathjax-type="texmath"><span>
${{f2b}\;{n}}$
</span></span>
</span>
</span>, we can write it uniquely as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline110.png?pub-status=live" width="75" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline110.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline110.png">
<span data-mathjax-type="texmath"><span>
$m = 2^c + d$
</span></span>
</span>
</span> where <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline111.png?pub-status=live" width="55" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline111.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline111.png">
<span data-mathjax-type="texmath"><span>
$d &lt; 2^{c-1}$
</span></span>
</span>
</span>; then </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU4.png?pub-status=live" width="219" height="18" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU4.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU4.png">
<span data-mathjax-type="texmath"><span>
\[ {{b2f}\;{n}\;(\mathrm{2}^ {{c}}\mathbin{+}{d})\mathrel{=}\mathrm{2}^ {{n}\mathbin{-}{c}\mathbin{+}\mathrm{1}}\cdot({d}\mathbin{+}\mathrm{1})}. \]
</span></span>
</span>
</p><p> In other words, given the input <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline112.png?pub-status=live" width="43" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline112.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline112.png">
<span data-mathjax-type="texmath"><span>
$2^c + d$
</span></span>
</span>
</span>, we subtract off the highest bit <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline113.png?pub-status=live" width="13" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline113.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline113.png">
<span data-mathjax-type="texmath"><span>
$2^c$
</span></span>
</span>
</span>, increment, then left shift <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline114.png?pub-status=live" width="62" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline114.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline114.png">
<span data-mathjax-type="texmath"><span>
$n-c+1$
</span></span>
</span>
</span> times. Again, though, there is a simpler way: we can increment first (note since <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline115.png?pub-status=live" width="55" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline115.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline115.png">
<span data-mathjax-type="texmath"><span>
$d &lt; 2^{c-1}$
</span></span>
</span>
</span>, incrementing cannot disturb the bit at <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline116.png?pub-status=live" width="13" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline116.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline116.png">
<span data-mathjax-type="texmath"><span>
$2^c$
</span></span>
</span>
</span>), then left shift enough times to bring the leftmost bit into position <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline117.png?pub-status=live" width="34" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline117.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline117.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span>, and finally remove it. That is:</p>
<div data-magellan-destination="dispU9024" id="dispU9024">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9024.png?pub-status=live" width="485" height="137" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9024.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9024.png"></p>
</div>

<p> Verifying:</p>
<div data-magellan-destination="dispU9025" id="dispU9025">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9025.png?pub-status=live" width="817" height="79" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9025.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9025.png"></p>
</div>

</div>
<div data-magellan-destination="s6" id="s6">

<h2><span>6</span> Deriving Fenwick operations</h2>
<p> We can now finally derive the required operations on Fenwick array indices for moving through the tree, by starting with operations on a binary indexed tree and conjugating by conversion to and from Fenwick indices. First, in order to fuse away the resulting conversion, we will need a few lemmas.</p>
<div data-magellan-destination="lem6_1" id="lem6_1">

<p><span>Lemma 6.1</span> (shr-inc-dec). For all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline118.png?pub-status=live" width="58" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline118.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline118.png">
<span data-mathjax-type="texmath"><span>
${{bs}\mathbin{::}{Bits}}$
</span></span>
</span>
</span> which are odd (that is, end with I),</p>
<ul>
<li>

<p><span>‚Ä¢</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline119.png?pub-status=live" width="147" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline119.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline119.png">
<span data-mathjax-type="texmath"><span>
${({shr}\mathbin{\circ}{dec})\;{bs}\mathrel{=}{shr}\;{bs}}$
</span></span>
</span>
</span>
</p>
</li>
<li>

<p><span>‚Ä¢</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline120.png?pub-status=live" width="191" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline120.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline120.png">
<span data-mathjax-type="texmath"><span>
${({shr}\mathbin{\circ}{inc})\;{bs}\mathrel{=}({inc}\mathbin{\circ}{shr})\;{bs}}$
</span></span>
</span>
</span>
</p>
</li>
</ul>

</div>

<p><span>Proof</span> Both are immediate by definition.</p>

<div data-magellan-destination="lem6_2" id="lem6_2">

<p><span>Lemma 6.2</span> (while-inc-dec). <em>The following both hold for all Bits values:</em>
</p>
<ul>
<li>

<p><span>‚Ä¢</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline121.png?pub-status=live" width="274" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline121.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline121.png">
<span data-mathjax-type="texmath"><span>
${{inc}\mathbin{\circ}{while}\;{odd}\;{shr}\mathrel{=}{while}\;{even}\;{shr}\mathbin{\circ}{inc}}$
</span></span>
</span>
</span>
</p>
</li>
<li>

<p><span>‚Ä¢</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline122.png?pub-status=live" width="280" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline122.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline122.png">
<span data-mathjax-type="texmath"><span>
${{dec}\mathbin{\circ}{while}\;{even}\;{shr}\mathrel{=}{while}\;{odd}\;{shr}\mathbin{\circ}{dec}}$
</span></span>
</span>
</span>
</p>
</li>
</ul>

</div>

<p> 
<strong>Proof.</strong> Easy proof by induction on <em>Bits</em>. For example, for the <em>inc</em> case, the functions on both sides discard consecutive 1 bits and then flip the first 0 bit to a 1.</p>
<p> Finally, we will need a lemma about shifting zero bits in and out of the right side of a value.</p>
<div data-magellan-destination="lem6_3" id="lem6_3">

<p><span>Lemma 6.3</span> (shl-shr). For all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline123.png?pub-status=live" width="83" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline123.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline123.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^{n+2}$
</span></span>
</span>
</span>, </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU5.png?pub-status=live" width="531" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU5.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU5.png">
<span data-mathjax-type="texmath"><span>
\[ {({while}\;(not\mathbin{\circ}{test}\;({n}\mathbin{+}\mathrm{1}))\;{shl}\mathbin{\circ}{while}\;{even}\;{shr})\;{x}\mathrel{=}{while}\;(not\mathbin{\circ}{test}\;({n}\mathbin{+}\mathrm{1}))\;{shl}\;{x}}. \]
</span></span>
</span>
</p>

</div>

<p><span>Proof</span> Intuitively, this says that if we first shift out all the zero bits and then left shift until bit <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline124.png?pub-status=live" width="35" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline124.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline124.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span> is set, we could get the same result by forgetting about the right shifts entirely; shifting out zero bits and then shifting them back in should be the identity.</p>

<p> Formally, the proof is by induction on <em>x</em>. If <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline125.png?pub-status=live" width="64" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline125.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline125.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{xs}\mathrel{:\!.}{I}}$
</span></span>
</span>
</span> is odd, the equality is immediate since <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline126.png?pub-status=live" width="133" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline126.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline126.png">
<span data-mathjax-type="texmath"><span>
${{while}\;{even}\;{shr}\;{x}\mathrel{=}{x}}$
</span></span>
</span>
</span>. Otherwise, if <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline127.png?pub-status=live" width="69" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline127.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline127.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathrel{=}{xs}\mathrel{:\!.}{O}}$
</span></span>
</span>
</span>, on the left-hand side the <em>O</em> is immediately discarded by <em>shr</em>, whereas on the right-hand side <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline128.png?pub-status=live" width="99" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline128.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline128.png">
<span data-mathjax-type="texmath"><span>
${{xs}\mathrel{:\!.}{O}\mathrel{=}{shl}\;{xs}}$
</span></span>
</span>
</span>, and the extra <em>shl</em> can be absorbed into the <em>while</em> since <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline129.png?pub-status=live" width="62" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline129.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline129.png">
<span data-mathjax-type="texmath"><span>
${{xs}} &lt; 2^{n+1}$
</span></span>
</span>
</span>. What remains is simply the induction hypothesis.</p>
<p> With these lemmas under our belt, let‚Äôs see how to move around a Fenwick array in order to implement <em>update</em> and <em>query</em>; we‚Äôll begin with <em>update</em>. When implementing the <em>update</em> operation, we need to start at a leaf and follow the path up to the root, updating all the active nodes along the way. In fact, for any given leaf, its closest active parent is precisely the node stored in the slot that used to correspond to that leaf (see Figure&nbsp;<a href="#f13">13</a>). So to update index <em>i</em>, we just need to start at index <em>i</em> in the Fenwick array, and then repeatedly find the closest active parent, updating as we go. Recall that the imperative code for <em>update</em> works this way, apparently finding the closest active parent at each step by adding the LSB of the current index:</p>
<div data-magellan-destination="dispU9026" id="dispU9026">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9026.png?pub-status=live" width="538" height="95" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9026.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9026.png"></p>
</div>

<p> Let‚Äôs see how to derive this behavior.</p>
<p> To find the closest active parent of a node under a binary indexing scheme, we first move up to the immediate parent (by dividing the index by two, i.e. performing a right bit shift); then continue moving up to the next immediate parent as long as the current node is a right child (i.e. has an odd index). This yields the definition:</p>
<div data-magellan-destination="dispU9027" id="dispU9027">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9027.png?pub-status=live" width="417" height="77" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9027.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9027.png"></p>
</div>

<p> This is why we used the slightly strange indexing scheme with the root having index 2‚Äîotherwise this definition would not work for any node whose active parent is the root!</p>
<p> Now, to derive the corresponding operation on Fenwick indices, we conjugate by conversion to and from Fenwick indices and compute as follows. To make the computation easier to read, the portion being rewritten is underlined at each step.</p>
<div data-magellan-destination="dispU9028" id="dispU9028">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9028.png?pub-status=live" width="876" height="481" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9028.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9028.png"></p>
</div>

<p> In the final step, since the input <em>x</em> satisfies <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline130.png?pub-status=live" width="36" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline130.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline130.png">
<span data-mathjax-type="texmath"><span>
$x {\leqslant} 2^n$
</span></span>
</span>
</span>, we have <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline131.png?pub-status=live" width="162" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline131.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline131.png">
<span data-mathjax-type="texmath"><span>
${{inc}\mathbin{\circ}{shift}\;({n}\mathbin{+}\mathrm{1})} &lt; 2^{n+2}$
</span></span>
</span>
</span>, so Lemma 6.3 applies.</p>
<p> Reading from right to left, the pipeline we have just computed performs the following steps:</p>
<p> 1. Set bit <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline132.png?pub-status=live" width="35" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline132.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline132.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span>
</p>
<p> 2. Shift out consecutive zeros until finding the least significant 1 bit</p>
<p> 3. Increment</p>
<p> 4. Shift zeros back in to bring the most significant bit back to position <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline133.png?pub-status=live" width="34" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline133.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline133.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span>, then clear it.</p>
<p> Intuitively, this does look a lot like adding the LSB! In general, to find the LSB, one must shift through consecutive 0 bits until finding the first 1; the question is how to keep track of how many 0 bits were shifted on the way. The <em>lsb</em> function itself keeps track via the recursion stack; after finding the first 1 bit, the recursion stack unwinds and re-snocs all the 0 bits recursed through on the way. The above pipeline represents an alternative approach: set bit <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline134.png?pub-status=live" width="35" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline134.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline134.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span> as a ‚Äúsentinel‚Äù to keep track of how much we have shifted; right shift until the first 1 is literally in the ones place, at which point we increment; and then shift all the 0 bits back in by doing left shifts until the sentinel bit gets back to the <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline135.png?pub-status=live" width="34" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline135.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline135.png">
<span data-mathjax-type="texmath"><span>
$n+1$
</span></span>
</span>
</span> place. One example of this process is illustrated in Figure&nbsp;<a href="#f19">19</a>. Of course, this only works for values that are sufficiently small that the sentinel bit will not be disturbed throughout the operation.</p>
<div data-magellan-destination="f19" id="f19">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig19.png?pub-status=live" width="814" height="1280" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig19.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig19.png"></p>
<div><p><span>Fig. 19</span> Adding LSB with a sentinel bit + shifts.</p>
</div></div>

<p> To make this more formal, we begin by defining a helper function <em>atLSB</em>, which does an operation ‚Äúat the LSB‚Äù, that is, it shifts out 0 bits until finding a 1, applies the given function, then restores the 0 bits.</p>
<div data-magellan-destination="dispU9029" id="dispU9029">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9029.png?pub-status=live" width="370" height="128" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9029.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9029.png"></p>
</div>

<p><span>Lemma 6.4</span> (add-lsb). For all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline136.png?pub-status=live" width="51" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline136.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline136.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{::}{Bits}}$
</span></span>
</span>
</span>, <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline137.png?pub-status=live" width="152" height="12" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline137.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline137.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{+}{lsb}\;{x}\mathrel{=}{atLSB}\;{inc}\;{x}}$
</span></span>
</span>
</span> and <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline138.png?pub-status=live" width="156" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline138.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline138.png">
<span data-mathjax-type="texmath"><span>
${{x}\mathbin{-}{lsb}\;{x}\mathrel{=}{atLSB}\;{dec}\;{x}}$
</span></span>
</span>
</span>.</p>

<p><span>Proof</span> Straightforward induction on <em>x</em>.</p>

<p> We can formally relate the ‚Äúshifting with a sentinel‚Äù scheme to the use of <em>atLSB</em>, with the following (admittedly rather technical) lemma:</p><p><span>Lemma 6.5</span> (sentinel). Let <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline139.png?pub-status=live" width="28" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline139.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline139.png">
<span data-mathjax-type="texmath"><span>
$n {\geqslant} 1$
</span></span>
</span>
</span> and let <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline140.png?pub-status=live" width="104" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline140.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline140.png">
<span data-mathjax-type="texmath"><span>
${{f}\mathbin{::}{Bits}\to {Bits}}$
</span></span>
</span>
</span> be a function such that</p>

<ol>
<li>

<p><span>1.</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline141.png?pub-status=live" width="246" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline141.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline141.png">
<span data-mathjax-type="texmath"><span>
${({f}\mathbin{\circ}{set}\;({n}\mathbin{+}\mathrm{1}))\;{x}\mathrel{=}({set}\;({n}\mathbin{+}\mathrm{1})\mathbin{\circ}{f})\;{x}}$
</span></span>
</span>
</span> for any <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline142.png?pub-status=live" width="69" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline142.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline142.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^n$
</span></span>
</span>
</span>, and</p>
</li>
<li>

<p><span>2.</span> 
<span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline143.png?pub-status=live" width="69" height="16" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline143.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline143.png">
<span data-mathjax-type="texmath"><span>
${{f}\;{x}} &lt; 2^{n+1}$
</span></span>
</span>
</span> for any <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline144.png?pub-status=live" width="117" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline144.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline144.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^n + 2^{n-1}$
</span></span>
</span>
</span>.</p>
</li>
</ol>

<p> Then for all <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline145.png?pub-status=live" width="68" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline145.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline145.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^n$
</span></span>
</span>
</span>, </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU6.png?pub-status=live" width="319" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU6.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU6.png">
<span data-mathjax-type="texmath"><span>
\[ {({unshift}\;({n}\mathbin{+}\mathrm{1})\mathbin{\circ}{f}\mathbin{\circ}{shift}\;({n}\mathbin{+}\mathrm{1}))\;{x}\mathrel{=}{atLSB}\;{f}\;{x}}. \]
</span></span>
</span>
</p>

<p> The proof is rather tedious and not all that illuminating, so we omit it</p>
<p> (an extended version including a full proof may be found on the author‚Äôs website, at <a href="http://ozark.hendrix.edu/">http://ozark.hendrix.edu/</a> yorgey/pub/Fenwick-ext.pdf). However, we do note that both <em>inc</em> and <em>dec</em> fit the criteria for <em>f</em>: incrementing or decrementing some <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline146.png?pub-status=live" width="69" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline146.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline146.png">
<span data-mathjax-type="texmath"><span>
$0 &lt; x &lt; 2^n$
</span></span>
</span>
</span> cannot affect the <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline147.png?pub-status=live" width="46" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline147.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline147.png">
<span data-mathjax-type="texmath"><span>
$(n+1)$
</span></span>
</span>
</span>st bit as long as <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline148.png?pub-status=live" width="29" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline148.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline148.png">
<span data-mathjax-type="texmath"><span>
$n {\geqslant} 1$
</span></span>
</span>
</span>, and the result of incrementing or decrementing a number less than <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline149.png?pub-status=live" width="62" height="14" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline149.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline149.png">
<span data-mathjax-type="texmath"><span>
$2^n + 2^{n-1}$
</span></span>
</span>
</span> will be a number less than <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline150.png?pub-status=live" width="28" height="13" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline150.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline150.png">
<span data-mathjax-type="texmath"><span>
$2^{n+1}$
</span></span>
</span>
</span>. We can now put all the pieces together show that adding the LSB at each step is the correct way to implement <em>update</em>.</p>
<div data-magellan-destination="the6_6" id="the6_6">

<p><span>Theorem 6.6</span> Adding the LSB is the correct way to move up a Fenwick-indexed tree to the nearest active parent, that is, </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU7.png?pub-status=live" width="520" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU7.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU7.png">
<span data-mathjax-type="texmath"><span>
\[ {{activeParentFenwick}\mathrel{=}{b2f'}\;{n}\mathbin{\circ}{activeParentBinary}\mathbin{\circ}{f2b'}\;{n}\mathrel{=}\lambda {x}\to {x}\mathbin{+}{lsb}\;{x}} \]
</span></span>
</span>
</p><p> everywhere on the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline151.png?pub-status=live" width="40" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline151.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline151.png">
<span data-mathjax-type="texmath"><span>
$[1, 2^n)$
</span></span>
</span>
</span>. (We exclude <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline152.png?pub-status=live" width="14" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline152.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline152.png">
<span data-mathjax-type="texmath"><span>
$2^n$
</span></span>
</span>
</span> since it corresponds to the root of the tree under a Fenwick indexing scheme.)</p>
</div>

<p> <strong>Proof</strong></p>
<div data-magellan-destination="dispU9030" id="dispU9030">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9030.png?pub-status=live" width="631" height="268" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9030.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9030.png"></p>
</div>

<p> We can carry out a similar process to derive an implementation for prefix query (which supposedly involves <em>subtracting</em> the LSB). Again, if we want to compute the sum of [1, <em>j</em>], we can start at index <em>j</em> in the Fenwick array, which stores the sum of the unique segment ending at <em>j</em>. If the node at index <em>j</em> stores the segment [<em>i</em>,<em>j</em>], we next need to find the unique node storing a segment that ends at <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline153.png?pub-status=live" width="31" height="11" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline153.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline153.png">
<span data-mathjax-type="texmath"><span>
$i-1$
</span></span>
</span>
</span>. We can do this repeatedly, adding up segments as we go.</p>
<p> Staring at Figure&nbsp;<a href="#f20">20</a> for inspiration, we can see that what we want to do is find the <em>left sibling</em> of our <em>closest inactive parent</em>, that is, we go up until finding the first ancestor which is a right child, then go to its left sibling. Under a binary indexing scheme, this can be implemented simply as:</p>
<div data-magellan-destination="f20" id="f20">


<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig20.png?pub-status=live" width="2136" height="1096" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig20.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_fig20.png"></p>
<div><p><span>Fig. 20</span> Moving up a segment tree to find successive prefix segments.</p>
</div></div>

<div data-magellan-destination="dispU9031" id="dispU9031">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9031.png?pub-status=live" width="447" height="75" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9031.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9031.png"></p>
</div>

<div data-magellan-destination="the6_7" id="the6_7">

<p><span>Theorem 6.7</span> Subtracting the LSB is the correct way to move up a Fenwick-indexed tree to the active node covering the segment previous to the current one, that is, </p><p><span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU8.png?pub-status=live" width="524" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU8.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU8.png">
<span data-mathjax-type="texmath"><span>
\[ {{prevSegmentFenwick}\mathrel{=}{b2f'}\;{n}\mathbin{\circ}{prevSegmentBinary}\mathbin{\circ}{f2b'}\;{n}\mathrel{=}\lambda {x}\to {x}\mathbin{-}{lsb}\;{x}} \]
</span></span>
</span>
</p><p> everywhere on the range <span data-mathjax-status="alt-graphic">
<span>
<img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline154.png?pub-status=live" width="41" height="17" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline154.png" data-zoomable="false" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_inline154.png">
<span data-mathjax-type="texmath"><span>
$[1, 2^n)$
</span></span>
</span>
</span>.</p>
</div>

<div data-magellan-destination="prf5" id="prf5">

<p><span>Proof</span> 
</p><div data-magellan-destination="dispU9032" id="dispU9032">
<p><img data-src="https://static.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9032.png?pub-status=live" width="788" height="539" data-original-image="/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9032.png" data-zoomable="true" src="https://www.cambridge.org/binary/version/id/urn:cambridge.org:id:binary:20250116174732089-0720:S0956796824000169:S0956796824000169_eqnU9032.png"></p>
</div>

</div>

</div>
<div data-magellan-destination="s7" id="s7">

<h2><span>7</span> Conclusion</h2>
<p> Historically, to my knowledge, Fenwick trees were not actually developed as an optimization of segment trees as presented here. This has merely been a fictional‚Äîbut hopefully illuminating‚Äîalternate history of ideas, highlighting the power of functional thinking, domain-specific languages, and equational reasoning to explore relationships between different structures and algorithms. As future work, it would be interesting to explore some of the mentioned generalizations of segment trees, to see whether one can derive Fenwick-like structures that support additional operations.</p>
</div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA['Never seen anything like this' ‚Äì NIH meetings and travel halted abruptly (147 pts)]]></title>
            <link>https://www.nature.com/articles/d41586-025-00231-y</link>
            <guid>42817910</guid>
            <pubDate>Fri, 24 Jan 2025 23:21:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nature.com/articles/d41586-025-00231-y">https://www.nature.com/articles/d41586-025-00231-y</a>, See on <a href="https://news.ycombinator.com/item?id=42817910">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-test="access-teaser"> <figure><picture><source type="image/webp" srcset="https://media.nature.com/lw767/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50504406.jpg?as=webp 767w, https://media.nature.com/lw319/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50504406.jpg?as=webp 319w" sizes="(max-width: 319px) 319px, (min-width: 1023px) 100vw,  767px"><img alt="The exterior of a Vaccine Research Center of National Institutes of Allergy and Infectious Diseases (NIAID) at NIH. in the U.S." loading="lazy" src="https://media.nature.com/lw767/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50504406.jpg"><figcaption><p><span>A vaccine research centre on the campus of the National Institutes of Health in Bethesda, Maryland.</span><span>Credit: Alamy</span></p></figcaption></picture></figure><p>Confusion and anxiety is rippling through the US health-research community this week following <a href="https://www.nature.com/articles/d41586-025-00197-x" data-track="click" data-label="https://www.nature.com/articles/d41586-025-00197-x" data-track-category="body text link">Donald Trump taking office as the 47th US president</a>. His administration has abruptly cancelled research-grant reviews, travel and trainings for scientists inside and outside the National Institutes of Health (NIH), the world‚Äôs largest public biomedical funder. Adding to the worry: the Trump team appears to have deleted entire webpages about diversity programmes and diversity-related grants from the agency‚Äôs site.</p><article data-label="Related"><a href="https://www.nature.com/articles/d41586-024-03736-0" data-track="click" data-track-label="recommended article"><img alt="" src="https://media.nature.com/w400/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50471522.jpg"><p>Major biomedical funder NIH poised for massive reform under Trump 2.0</p></a></article><p>The cancelling of meetings and travel is part of a pause in external communications issued on 21 January by the NIH‚Äôs parent organization, the US Department of Health and Human Services (HHS). Researchers who spoke to <i>Nature</i> say that although a short, daylong pause in communications at US agencies has occurred in the past when new administrations have started, to reorient strategy, the reach and length of the Trump team‚Äôs ‚Äî it is set to last until at least 1 February ‚Äî is unprecedented. Without advisory-committee meetings, the NIH cannot issue research grants, temporarily freezing 80% of the agency‚Äôs US$47-billion budget that funds research across the country and beyond.</p><p>‚ÄúI‚Äôve never seen anything like this before,‚Äù says Carole LaBonne, a developmental biologist at Northwestern University in Evanston, Illinois, who has received funding from the agency for more than 20 years. The uncertainty caused by the pause will be ‚Äúdevastating for the scientific community‚Äù, particularly for early-career researchers, LaBonne adds.</p><p>The pause includes ‚Äúmass communications and public appearances that are not directly related to emergencies or critical to preserving health‚Äù, according to an NIH spokesperson. ‚ÄúThis is a short pause to allow the new team to set up a process for review and prioritization.‚Äù</p><p>NIH and HHS spokespeople did not respond to queries about whether grant-review panels were considered public appearances and why they were cancelled, or about concerns from researchers that the pause will hinder the agency‚Äôs mission.</p><h2>A mission under threat?</h2><p>Typically, the NIH awards research grants after two separate panels of independent specialists in a particular scientific field have reviewed project proposals. On Wednesday, reports emerged on the <a href="https://x.com/gsducker/status/1882176107405013168" data-track="click" data-label="https://x.com/gsducker/status/1882176107405013168" data-track-category="body text link">social-media platforms X</a> <a href="https://bsky.app/profile/liebschutz.bsky.social/post/3lgeaf7bixs2f" data-track="click" data-label="https://bsky.app/profile/liebschutz.bsky.social/post/3lgeaf7bixs2f" data-track-category="body text link">and </a><a href="https://bsky.app/profile/liebschutz.bsky.social/post/3lgeaf7bixs2f" data-track="click" data-label="https://bsky.app/profile/liebschutz.bsky.social/post/3lgeaf7bixs2f" data-track-category="body text link">Bluesky</a> that grant-review panels scheduled prior to 2 February had been cancelled without any indication of when they would be rescheduled.</p><article data-label="Related"><a href="https://www.nature.com/articles/d41586-025-00197-x" data-track="click" data-track-label="recommended article"><img alt="" src="https://media.nature.com/w400/magazine-assets/d41586-025-00231-y/d41586-025-00231-y_50504258.jpg"><p>What Trump‚Äôs flurry of executive orders means for science</p></a></article><p>These panels, called ‚Äòstudy sections‚Äô and ‚Äòadvisory councils‚Äô, are sometimes scheduled a year in advance and can include more than 30 participating researchers, so it will take time to reschedule and might result in a ‚Äòdomino effect‚Äô of cancellations. Researchers awaiting a grant-review decision ‚Äúmay be laid off or forced to seek employment elsewhere if funding is uncertain or delayed‚Äù, LaBonne says. Early-career researchers are particularly at risk, ‚Äúas it can mean missing research milestones and jeopardize hiring, promotion and tenure decisions‚Äù, she adds.</p><p>Harold Varmus, a former NIH director who is now a cancer researcher at Weill Cornell Medicine in New York City, says that putting a hold on communications of new policies when there‚Äôs a new presidential administration can make sense. But the extensive remit of the current pause is counter to the agency‚Äôs mission, he says. The US Congress allocates budget money to the NIH for funding research, he adds, so ‚Äúthe will of Congress will be challenged if we don‚Äôt change what is going on‚Äù.</p><p>Esther Choo, an emergency-medicine physician at the Oregon Health &amp; Science University in Portland, <a href="https://bsky.app/profile/choo.bsky.social/post/3lgeks3sp7k2i" data-track="click" data-label="https://bsky.app/profile/choo.bsky.social/post/3lgeks3sp7k2i" data-track-category="body text link">wrote on Bluesky on 22 January</a> that a study section she was supposed to participate in was cancelled this week. As a reviewer on grant proposals, she said, you constantly read ideas for research projects that could be ‚Äúa game changer in health‚Äù. She added: ‚ÄúI hope we get back on track soon. There are real people, real lives waiting on the science.‚Äù</p></div></div>]]></description>
        </item>
    </channel>
</rss>