<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Thu, 27 Mar 2025 21:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[I tried making artificial sunlight at home (109 pts)]]></title>
            <link>https://victorpoughon.fr/i-tried-making-artificial-sunlight-at-home/</link>
            <guid>43497394</guid>
            <pubDate>Thu, 27 Mar 2025 19:49:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://victorpoughon.fr/i-tried-making-artificial-sunlight-at-home/">https://victorpoughon.fr/i-tried-making-artificial-sunlight-at-home/</a>, See on <a href="https://news.ycombinator.com/item?id=43497394">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2025-03-27T11:51Z">
                    27 Mar, 2025
                </time>
            </i>
        </p>
    

    <p>Some time ago, I saw <a href="https://www.youtube.com/watch?v=6bqBsHSwPgw">this video by DIY Perks</a> where they make artificial sunlight at home with a 500W LED and a gigantic (1.2m) parabolic reflector. I've been fascinated by this project ever since, and I wanted my own.</p>
<p>Over the past year or so, I finally took the time to work on a similar project, but I had the idea for a different design. The issue with the parabolic reflector is that it takes a huge amount of space. Could I do something similar, but with a less bulky design? This is the story of my first attempt at this project - version 1 so to speak. Perhaps there will be a version 2 in the future. Enjoy the read!</p>
<hr>
<p>My idea - as others have had I'm sure - was to use an array of lenses laid out as a grid. Then, instead of a single light source, I would use a grid array of multiple LEDs, one per lens. In my mind, this would have two major advantages:</p>
<ul>
<li>Less bulky. The size of the device would be determined by the focal length of the individual lens elements, and because each would be small, the focal length could be small also, while maintaining a decent f number.</li>
<li>Easier thermal management. Multiple light sources could be regular low power LEDs which wouldn't need special cooling. There would just be a lot of them, spread out over the entire device surface.</li>
</ul>
<p>Over the course of this project, I also intended to teach myself some manufacturing and 3D design, as I don't have any experience doing any of this. My background is software, and as you'll see I took a very software heavy approach to this. It was all a long learning journey for me, but in the end I used:</p>
<ul>
<li>Mostly <a href="https://build123d.readthedocs.io/en/latest/">build123d</a> for CAD modeling, with some <a href="https://www.freecad.org/">FreeCAD</a> for final assembly checks and some experiments here and there - including with the cool <a href="https://github.com/chbergmann/OpticsWorkbench">OpticsWorkbench</a>.</li>
<li><a href="https://www.kicad.org/">KiCad</a> for PCB design.</li>
<li>Custom python code for simulating light and optimizing the optical system. (This custom code eventually became <a href="https://victorpoughon.github.io/torchlensmaker/">an entire open-source project for optimization-based optical design</a>)</li>
<li><a href="https://jlcpcb.com/">JLCPCB</a> for printing and assembling PCBs, and for manufacturing aluminum and plastic parts with their CNC service.</li>
</ul>
<p><strong>TL;DR: I did it!</strong> Here is the finished device sitting on my desk today, at night:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/main4.JPG" alt="main6.jpg"></p>
<p>And here it is during the day (much less impressive!)</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/daylight.jpg" alt="daylight"></p>
<p>Beware it's kinda hard to take good pictures of it, and I don't have the best photo gear. Here's also a video: (at night)</p>
<video width="640" controls="">
  <source src="https://github.com/victorpoughon/pulaski-v1-blog-post/raw/refs/heads/main/video-web.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>
<p>Kinda cool that you can see a lens flare effect in the shape of the lens grid array.</p>
<h2 id="technical-specs">Technical specs</h2><p>Mechanical:</p>
<ul>
<li>Lens square side length: 30mm</li>
<li>Effective Focal length: 55mm</li>
<li>Array size: 6x6 = 36 LEDs</li>
<li>Total size: 180x180mm</li>
</ul>
<p>Parts:</p>
<ul>
<li>Lenses: 1 biconvex lens array, 1 plano-convex lens array - custom made out of PMMA acrylic, CNC fabrication with vapor polish finish @ <a href="https://jlccnc.com/">JLCCNC</a></li>
<li>LEDs: <a href="https://lumileds.com/products/mid-power-leds/luxeon-2835-architectural/">LUXEON 2835 3V</a> -- Ref: 2835HE. CRI: 95+, color temp: 4000K, 65mA.</li>
<li>PCBs: Custom design</li>
<li>Mounting hardware: custom design - aluminium 60601 for the CNC parts and mate black resin for the 3D printed parts</li>
<li>Rayleigh diffuser: waterproof printing inkjet film</li>
</ul>
<h2 id="general-design-and-sizing">General design and sizing</h2><p>To create artificial sunlight, you need four ingredients:</p>
<ul>
<li>Parallel light rays. The sun is so far away that light rays emitted from a point on the surface of the sun reach us essentially parallel. This is not to say that all light rays coming from the sun are parallel, as it still has a 0.5 deg apparent angular size. But they need to be pretty straight. Any light coming from an artificial light source like an LED will be going in all directions, so some optics is required.</li>
<li>High color quality. A good indicator to look for on a datasheet is the <a href="https://en.wikipedia.org/wiki/Color_rendering_index">color rendering index (CRI)</a>. 95+ is recommended to achieve a good effect. I'm sure there's more color science you could get into, but CRI is a great start for off the shelf parts.</li>
<li>Rayleigh scattering, or an imitation of it.</li>
<li>A LOT of power.</li>
</ul>
<p>Light intensity is the most important sizing constraint, so let's look at it first. Now, the sun is <strong>very bright</strong>. Like, ridiculously bright: around 100,000 lux. To achieve this with LEDs is by no means impossible, but it's a challenge. For this first version, I thought that targetting 10,000 lux would be quite enough because it would reduce the power consumption a lot for a first prototype, and also brightness perception is logarithmic. So one tenth of the intensity is really, perceptually, almost the same as full brightness. (In the end, I estimate my design only effectively achieved something between 1000 and 10000 lux).</p>
<p>The general grid based design of this project really has two variables:</p>
<ul>
<li>the individual LED light output, in lumens</li>
<li>the individual lens surface area in mmÂ²</li>
</ul>
<p>After some research, I think values between 30 to 130 lumens are typical for high CRI surface mount LEDs. So, assuming this is what we are working with, what is the required lens size to achieve the brightness of the sun?</p>
<p>We have to assume some non perfect efficiency for collimating the light. This will never be 100%, and in fact may be quite low if the focal length is high, because a lot of the light will be hitting the side walls instead of reaching the lens. The lens itself will also be absorbing some light. So taking a wild guess of 0.5 for the overall optical efficiency, and taking three lumens value of 30, 80 and 130, we get this plot:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/plot.png" alt="plot"></p>
<p>With that in mind, I selected 30mm as my lens square side length. Presumably, this would be small enough to achieve some effect, but not too small to make the lenses too hard to make.</p>
<h2 id="lenses">Lenses</h2><p>Focal length, and the lenses shape in general, is the next design consideration. The goal is to have perfectly parallel light rays. In theory, with a perfect point source and a perfect lens this is easy. Put the light source at the lens focal length, you're done. In practice, a lot of things make it harder to achieve with a lens. (This is where the parabolic reflector design is superior to a lens).</p>
<ul>
<li>A LED is not a point source</li>
<li>A lens will not have perfect optical performance (i.e. aberrations)</li>
<li>Mechanical reality of the device means that positioning and orientation will not be perfect</li>
<li>A LED radiation pattern is not isotropic, meaning intensity will be greater at the lens center</li>
</ul>
<p>This is the radiation pattern characteristics diagram from my LED datasheet:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/led-radiation.png" alt="led-radiation"></p>
<p>I wrote some custom python code to simulate the optical system I had in mind, and find the best lens shape using numerical optimization. (This code eventually became an <a href="https://victorpoughon.github.io/torchlensmaker/">open-source project: torchlensmaker</a>) After a lot of experimentation, I settled on a 2 lens design:</p>
<ul>
<li>Lens 1: Biconvex parabolic lens</li>
<li>Lens 2: Planoconvex parabolic lens</li>
</ul>
<p>The effective focal length of this two lens system is about 55mm. Focal length is a key design parameter, and here I feel like more experimentation is needed. It's a big tradeoff consideration and has a huge impact on the system design. It impacts:</p>
<ul>
<li>The curvature of the lens surface, which is a key manufacturing point (you want to minimize curvature for manufacturing, which means maximizing focal length)</li>
<li>The optical efficiency of the system due to the led radiance pattern (here you want to minimize focal length, to gather more of the emitted light)</li>
<li>The device thickness (here I wanted a not-too-thick device, so to minimize focal length also)</li>
</ul>
<p>I used a two lens system mostly to reduce the surface curvature of the lens arrays. This reduces the manufacturing cost by a lot. High curvature lenses are more expensive in general, and this grid array design means that a high curvature lens will create sort of "valleys" in between the lenses. Because I was targetting CNC manufacturing, this is to be minimized to get a design that's even possible to machine.</p>
<p>This is the optical simulation I had at the time I finalized the design and ordered the lenses. (Since then my simulation code has improved and I could likely do much better modeling today using the latest version of torchlensmaker):</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/lenses.png" alt="lenses"></p>
<p>With some custom build123d code I was able to make the two lenses 3D models by stacking the lenses in a grid pattern and adding edges for mounting:</p>


<p>What's really cool using <a href="https://build123d.readthedocs.io/en/latest/">build123d</a> for 3D modeling, is that I can just change a python variable to change the size of the array, of the thickness of the lens, of anything else really. It's all parametric out of the box because it's regular Python code! This makes exploring the design space very efficient. I've never done 3D modeling any other way, but I can't imagine ever not having the power of programming with me if I ever do it again!</p>
<p>I had the lenses manufactured out of PMMA acrylic at JLC with a vapor polish finish. Total cost for the lenses was about 55â¬ which is really not bad!</p>
<p>One of the two main lens array, built by JLCCNC:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-lens.jpg" alt="assembly-lens"></p>
<h2 id="leds">LEDs</h2><p>I really wanted to use the <a href="https://store.yujiintl.com/collections/yujileds-led-emitters/products/yujileds-cri-95-0-9w-high-efficacy-led-smd-3030-g04?variant=42570626072833">3030 G04 from YUJILEDS</a>, but it's only sold on 5000 units reels that cost $1000 a piece... maybe for version 2 I will upgrade to those. For version 1, I settled on <a href="https://lumileds.com/products/mid-power-leds/luxeon-2835-architectural/">LUXEON 2835 3V</a>. They are about 3 times less bright than the YUJILED, but they have good color rendering and the SMD package I was looking for. And importantly, the minimum order quantity was only 50 at JLC global sourcing.</p>
<p>In the version 1 design, the grid is 6x6 which means 36 LEDs total.</p>
<h2 id="pcbs">PCBs</h2><p>I designed a custom PCB with KiCAD. Each PCB holds 6 LEDs which are laid out as 2 segments of a 12V led strip in parallel. This allows to use a standard wall plug 12V power supply.</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/pcb-schematic.png" alt="pcb-schematic"></p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/pcb-layout.png" alt="pcb-layout"></p>
<p>The mechanical role of the PCB is very important in this design. Not only does it distribute power to the LEDs and regulate current, it also precisely positions the LEDs at the lens focal point. For this, exporting the PCB 3D model and importing it into FreeCAD was very useful to check that everything fits together: the PCB in the aluminum support baseplate, the holes on the light hoods, etc. My Python code exported the precise LED coordinates which I could input into KiCad's layout editor.</p>
<p>I had the PCB printed and the components assembled by JLCPCB. It's very very cool to design an electronic board on your computer and get it fully assembled in the mail a few weeks later - no soldering required! (for this step anyway).</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-pcbs.jpg" alt="assembly-pcb"></p>
<h2 id="mechanical-mounting-parts">Mechanical mounting parts</h2><p>To mount everything together I designed 3 parts:</p>
<ul>
<li>A baseplate, to hold the PCBs and the side walls. The PCBs are fitted below the baseplate, and light goes through holes drilled into the baseplate. There are also partial holes to allow for the thickness of the SMD resistors mounted on top of the PCBs, and finally two mounting holes per PCB. This is why it has so many holes :)</li>
</ul>

<ul>
<li>Side walls to hold the lenses using grooves in which to insert them, and a larger groove to secure in the baseplate. The baseplate side holes are threaded to support M2 screws securing the base of the walls. Again, JLCCNC did the drilling and threading of the holes at a great price.</li>
</ul>

<ul>
<li>Light hoods, a rectangle block with rectangular holes. It sits on top of the PCB to shape the light coming from each LED into a cone (or really a four sided pyramid). This is to make sure light from a given LED only reaches its matching lens on the lens array, and no other. Bleed light is inevitable, but at least this prevents direct leakage.</li>
</ul>

<p>The hoods were 3D printed out of black resin, the walls and baseplate were CNC cut out of Aluminum 60601.</p>
<p>I'm not a mechanical engineer so this process was... trial and error. Still the result is working so I'm quite happy with that. For a possible version 2, there's a lot I'll change in the mechanical design. But apart from the one design flaw I was able to fix manually with a drill (more on that below), everything fit together quite well on the first try.</p>
<h2 id="rayleigh-scattering">Rayleigh scattering</h2><p>The final ingredient is <a href="https://en.wikipedia.org/wiki/Rayleigh_scattering">Rayleigh scattering</a>. This is the physical phenomenon that makes the sky look blue, and it's important to achieve a convincing effect. In the DIY Perks video that inspired this project, they used a home made liquid solution with suspended particles of the correct size for Rayleigh scattering. Not super practical and I really wanted to find another solution (get it?). Thankfully, some time after the original video, someone on the <a href="https://forum.diyperks.com/lighting/artificial-sunlight-official-topic/paged/3/#post-3191">diyperks forum</a> discovered that inkjet print film achieves a very similar effect. A quick trip to <a href="https://www.avery.fr/produit/transparent-2503">a local office supply store</a> was all I needed here! Amazing discovery.</p>
<p>I didn't anticipate this step during the initial design phase, so the film is simply cut to the correct size and secured with black electrical tape.</p>
<h2 id="assembly">Assembly</h2><p>After a few weeks of design work, and another few weeks of waiting for the parts to arrive, it was finally time for assembly!</p>
<p>On top of the individual 3D models made with build123d, I had a final assembly FreeCAD model with all parts fitted together, including the lenses:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/freecad_assembly.png" alt="freecad_assembly"></p>
<p>Note the green brackets that I initially planned to use. When actually assembling the walls to the baseplate, the solidity of the formed box was very high, I decided to drop the brackets entirely. This is why some extra unused holes remain on the side walls.</p>
<p>This is all the parts just after unboxing (excluding the inkjet film, solder tin, screws, power supply, wiring, electrical tape):</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-all-parts.jpg" alt="assembly-all-parts"></p>
<p>The only real design flaw was insufficient width of the grooves that hold the lenses. The lenses have an edge thickness of 1.2mm, which I had intended to fit into a 1.22mm groove. Turns out this was not enough, probably due to a combination of manufacturing tolerance and additional thickness added by the anodizing black matte surface finish of the aluminum part. The lenses didn't fit into the grooves!</p>
<p>I don't have a very advanced tools at home, so my best solution to this was making the existing grooves wider by hand using a power drill. I bought a 1.5mm metal drill bit and achieved a decent result by doing 4 to 5 passes per groove. This took about 2-3h in total because I had to move the bit quite slow and could only machine about 1/4th of each groove depth at a time by moving the drill bit slowly accross, and there are 8 grooves total.</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/drill.jpg" alt="drill"></p>
<p>Here's some more pictures of assembly below.</p>
<p>The back side after soldering wires to the PCB power pins and a socket for the 12V power supply. The PCBs and hood pieces share a common mounting hole so only two screws per PCB-hood pair are used.</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-back.jpg" alt="assembly-back"></p>
<p>The front side of the baseplate + PCB + hoods assembly, but without the lenses, powered on. Don't look at it directly :)</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-front.jpg" alt="assembly-front"></p>
<p>It's interesting to note that in the picture above, all of the light you can see from the LEDs is actually "bleed light" and not useful light. None of the light visible above is the light that's intended to go into the lens and produce the sunlight effect.</p>
<p>Testing with partial assembly of the walls and only 1 out of the 2 lenses:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-one-lens.jpg" alt="assembly-one-lens"></p>
<p>Testing the inkjet film layers with an avocado as a subject. I settled on using two layers of the inkjet film for the final build:</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/assembly-avocado.jpg" alt="assembly-avocado"></p>
<h2 id="cost">Cost</h2><p>Overall I spent around 1000â¬ on this project. But this includes cost of tools I was missing, prototype parts that I had manufactured but discarded, bulk orders for parts like LEDs and PCBs which had a minium order quantity above what I need for 1 unit, and various supplies like screws, etc. The actual raw cost of parts only, without shipping, to build the final unit is hard to estimate. But I would say around 300â¬. The most expensive parts are the CNC parts (PMMA lenses and the aluminum baseplate and walls) accounting for about 2/3rd of the total price. The rest (PCBs, assembly service, LEDs, 3D printed plastic parts) was quite cheap.</p>
<h2 id="conclusion">Conclusion</h2><p>As I write this the final piece is sitting on my desk and producing a pleasant soft white glow. It's definitely nice, and I'm very proud of the result - especially because this was by far the biggest build project I have ever done.</p>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/main1.JPG" alt="main1.jpg"></p>
<p>Thanks to this project, I've learned a ton about PCB design, electronics and CNC manufacturing and optics. I even got so far down the side quest of learning optics that I started <a href="https://victorpoughon.github.io/torchlensmaker/">an open-source python project</a> for modeling geometric optics.</p>
<p><strong>So, is it convincing as artificial sunlight?</strong></p>
<p>My honest answer to that is: partially. The geometric effect of the light source appearing at infinity works. As I pan and tilt my head from side to side, the illusion of light coming from way far behind the object is 100% a success. On top of that, if you look at it while moving your head into the light beam, my eyes get surprised - almost hurt - by the sudden intensity jump. This indicates that collimation is good and you can sort of see it in the video at the start of this post.</p>
<p>However it's apparent that it's simply too weak. Don't get me wrong, it's still bright. I can't look at it directly without sunglasses, and honestly it's really hard to take a good picture of it because the contrast between the light it emits and the outside of it is very high.</p>
<p>Another downside is that I can definitely make out the grid of lenses, as the intensity pattern clearly reveals the grid shape. This is quite a minor downside and not really unpleasant, and I'm sure it could be improved upon.</p>
<p>If I were to ever work on a version 2, I would focus on:</p>
<ul>
<li>More power. My feeling is the light output needs to be 3 to 5 times stronger to get any closer to a convincing effect, and it's not crazy to aim for as much as 10x brighter than this prototype.</li>
<li>More surface area. This prototype is 18cm x 18cm. So you only really get the effect if you are able to sit with the produced straight beam of light, which is quite narrow to resemble any kind of "fake window". A future version would need to be 2 to 4 times wider in my opinion.</li>
<li>Better optical design. I still think a refraction based design is possible, but it requires very precise optical design and mechanical tolerances. My feeling is that a refraction based design, especially as a grid, is very sensitive to positioning and orientation of parts. I lack mechanical engineering skills in this area.</li>
</ul>
<p><img src="https://raw.githubusercontent.com/victorpoughon/pulaski-v1-blog-post/refs/heads/main/main3.JPG" alt="main3.jpg"></p>
<p>However there are some really encouraging things that I really like about this grid based, refractive design:</p>
<ul>
<li>It's scalable. If I had built 4 identical items, I could literally stack them on top of each other and get more surface area. The "bezels" would be only 5% of the total light emitting area, and I'm sure this could be lowered. I also like that the inner design calls for repeated elements, as this introduces some economy of scale, even at the prototype level. The only part that's not trivially scalable is the lens grid. Maybe it could be injection molded for very large scale production, or for medium scale you could come up with a way to tile multiple lens grids into a larger overall grid pattern, adding some thin bezels for mounting.</li>
<li>It's compact. The total size is 19cm x 19cm x 9cm. This is quite compact for a 5cm focal length and an effective lighting area of 18cm x 18cm. Reflective designs like the DIYPerks video or commercial products like <a href="https://www.coelux.com/">CoeLux</a> do not achieve this form factor.</li>
<li>Thermal management is better by design. This is not really something I got into for this design, as it's quite underpowered. The whole thing runs comfortably on a 12V / 3A wall brick power supply. But this design offers great margin for scaling up because there isn't a single light source to cool down, but a number of LEDs proportional to the surface area. I suspect the main thermal issue when scaling up would be the cooling of the power supply itself, not of the lamp.</li>
</ul>
<p>As final thoughts, let me talk about the software heavy approach I had for this project. It's awesome. If I was starting a manufacturing company today, I would do it all code based. PCBs, 3D models, assembly, testing... I want code everywhere. The power of changing a parameter and having the entire design updated with a single script it so good. Run a script and get all the production data including GERBERs, BOM, 3D models, mechanical schematics, technical diagrams, automated tolerance and electrical checks... absolutely no manual steps between changing a design parameter and ready to send a new order to manufacturing. The PCB and CAD space is even evolving to use <a href="https://sschueller.github.io/posts/ci-cd-with-kicad-and-gitlab/">proper CI/CD tools</a> which is really exciting.</p>
<p>I don't know if I'll ever have the time to work on version 2 of this project, but it was great fun anyway! And now I have a cool unique lamp. Thank you for reading!</p>


    

    
        

        
            


        
    


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AI models miss disease in Black and female patients (158 pts)]]></title>
            <link>https://www.science.org/content/article/ai-models-miss-disease-black-female-patients</link>
            <guid>43496644</guid>
            <pubDate>Thu, 27 Mar 2025 18:38:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/ai-models-miss-disease-black-female-patients">https://www.science.org/content/article/ai-models-miss-disease-black-female-patients</a>, See on <a href="https://news.ycombinator.com/item?id=43496644">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/ai-models-miss-disease-black-female-patients: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[California bill aims to phase out harmful ultra-processed foods in schools (113 pts)]]></title>
            <link>https://www.thenewlede.org/2025/03/california-bill-aims-to-phase-out-harmful-ultra-processed-foods-in-schools/</link>
            <guid>43495997</guid>
            <pubDate>Thu, 27 Mar 2025 17:45:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.thenewlede.org/2025/03/california-bill-aims-to-phase-out-harmful-ultra-processed-foods-in-schools/">https://www.thenewlede.org/2025/03/california-bill-aims-to-phase-out-harmful-ultra-processed-foods-in-schools/</a>, See on <a href="https://news.ycombinator.com/item?id=43495997">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

                                        <p>As states across the country move to ban food dyes, California lawmakers on March 19 introduced the first US bill that would phase out certain ultra-processed foods from school meals.</p>
<p>If signed into law, <a href="https://leginfo.legislature.ca.gov/faces/billNavClient.xhtml?bill_id=202520260AB1264" target="_blank" rel="noopener">Assembly Bill 1264</a> would establish the first statutory definition of what qualifies as an ultra-processed food and would direct state scientists to work with university experts to identify particularly harmful products, which would then be removed from school cafeterias by 2032.</p>
<p>âWe have not done enough to protect [children] from ultra-processed foods and beverages that have far more in common with a cigarette than they do a fruit or vegetable,â Ashley Gearhardt, a professor of psychology at the University of Michigan and director of the schoolâs Food Addiction Science &amp; Treatment Lab, said on a March 19 press call.</p>
<p>AB 1264 is a âcourageous step forwardâ towards treating ultra-processed foods like the serious health threats they are, said Gearhardt.</p>
<p>To identify which ultra-processed foods should be eliminated from school offerings, scientists will consider whether a product includes additives that are banned elsewhere, whether it has been linked to health harms, whether it has been show to contribute to food addiction, and whether it contains excessive fat, sugar or salt, California Assemblymember Jesse Gabriel, one of the lawmakers who introduced the bill, said on the call.</p>
<p>The scientists will be required to publish a first report outlining this subcategory of especially harmful ultra-processed foods by July 1, 2026, said Gabriel, and will be required to update the list every two years as research on these foods evolves.</p>
<p>The bill was embraced by both Democrat and Republican lawmakers, added Gabriel. âProtecting our kids from harm is, and always should be, a bipartisan issue,â he said</p>
<p>In 2023, Gabriel introduced the <a href="https://www.thenewlede.org/2023/06/californias-skittles-bill-could-kick-off-broader-actions-against-food-additives/" target="_blank" rel="noopener">California Food Safety Act</a> or so-called âSkittles billâ, which is set to ban foods in the state containing brominated vegetable oil, Red Dye No. 3 and other toxic chemicals beginning in 2027. The bill was followed by the California School Food Safety Act last year,&nbsp; which will ban schools from serving foods with six artificial dyes linked to neurobehavioral problems in children.</p>
<p>The bills, signed into law by Governor Gavin Newsom, have been followed by a <a href="https://www.thenewlede.org/2025/03/amid-lack-of-faith-in-fda-us-states-rush-to-ban-food-dyes/" target="_blank" rel="noopener">wave of recent legislation across the country</a>. West Virginia this month <a href="https://westvirginiawatch.com/2025/03/05/wv-senate-passes-bill-banning-artificial-dyes-in-food-opponents-say-its-overreach/" target="_blank" rel="noopener">advanced a sweeping bipartisan bill</a> that would ban a range of food dyes linked to health problems, while New York lawmakers have <a href="https://www.nysenate.gov/legislation/bills/2025/S1239/amendment/A" target="_blank" rel="noopener">proposed a law</a> that would ban seven food dyes from public schools and eliminate Red Dye 3 and two other food additives statewide.</p>
<p>Ultra-processed foods, which have typically undergone many industrial changes such as the addition of preservatives, sweeteners, and artificial flavors, have been linked to 32 health conditions, according to a 2024 <a href="https://www.bmj.com/content/384/bmj-2023-077310" target="_blank" rel="noopener">review</a> in the British Medical Journal (BMJ), including heart disease, diabetes, mental health disorders and obesity. About <a href="https://www.cdc.gov/obesity/childhood-obesity-facts/childhood-obesity-facts.html" target="_blank" rel="noopener">one in five US children</a> between the ages of two and 19 are obese. Eating ultra-processed foods has also been associated with <a href="https://www.clinicalnutritionespen.com/article/S2405-4577(22)01132-9/fulltext" target="_blank" rel="noopener">attention-deficit/hyperactivity disorder (ADHD) in children</a>.</p>
<p>Some industry players have pushed back against the growing negative perception of ultra-processed foods, with General Mills reportedly arguing in a <a href="https://www.startribune.com/ultra-processed-food-is-tasty-and-easy-how-bad-is-it-for-you/600371266" target="_blank" rel="noopener">letter</a> to the Department of Health and Human Services last year that âNot all processed foods are nutritionally equivalent and do not have the same impact on health.â</p>
<p>Processing is âpart of a complex food system that helps consumers meet nutritional needs within their abilities, budget and preferences,â wrote General Mills.</p>
<p>Countries around the world have banned ingredients with concerning health effects that are still commonly used in US foods, including titanium dioxide, brominated vegetable oil and artificial food dyes.</p>
<p>âWe hope that this bill will inspire food companies to tweak their recipes and remove unnecessary harmful additives so that they can continue to access this enormous [California] market,â said Gabriel.</p>
<p>(Featured image by <a href="https://unsplash.com/@gainingvisuals?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash" target="_blank" rel="noopener">Gaining Visuals</a> on <a href="https://unsplash.com/photos/orange-and-white-plastic-pack-0hyliwOpNH0?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash" target="_blank" rel="noopener">Unsplash</a>.)</p>

            
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Abundance Isn't Going to Happen Unless Politicians Are Scared of the Status Quo (175 pts)]]></title>
            <link>https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless</link>
            <guid>43495644</guid>
            <pubDate>Thu, 27 Mar 2025 17:09:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless">https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless</a>, See on <a href="https://news.ycombinator.com/item?id=43495644">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div dir="auto"><p><span>â</span><a href="https://www.scottlucas.me/the-housing-caucus" rel="">Too many goods created a bad</a><span>.â</span></p><p>Thatâs how California Governor Jerry Brown put it in 2017 when he signed a package of 15 housing-related bills, the first YIMBY-supported pro-housing bills. He was explaining, in his meandering way, how the housing shortage was the result of hundreds of well-intentioned laws, which had promised all kinds of things, but mostly succeeded in slowing down the production of new housing.</p><p><span>In many ways, Jerry was ahead of the curve. He was lamenting â</span><a href="https://www.nytimes.com/2023/04/02/opinion/democrats-liberalism.html" rel="">everything bagel liberalism</a><span>â and â</span><a href="https://marginallyproductive.com/2020/07/08/process-oriented-politics/" rel="">process over outcomesâ</a><span> before it was cool.</span></p><p>But at the same time, there was a distinct lack of fire under the Governorâs ass. He was skeptical that this new legislation would do much to unwind the tangled legal web holding back housing production. And while we YIMBYs were bright eyed and bushy tailed, seeing as it was the first state bill signing weâd been invited to, it was also kind of depressing.</p><p><span>Less than ten years later, the discourse is suddenly</span><em> all about</em><span> the seemingly simple idea that we should âdo things and build things,â and there is finally a sense of urgency. Iâm heading to Atlanta this week to interview Derek Thompson about his new book </span><em><a href="https://bookshop.org/p/books/abundance-what-progress-takes-derek-thompson/20165403?ean=9781668023488&amp;next=t&amp;affiliate=2181" rel="">Abundance</a></em><span> with Ezra Klein at the Georgia Center for the Book (</span><a href="https://www.acappellabooks.com/pages/events/1332/georgia-center-for-the-book-presents-derek" rel="">tickets</a><span>). Their thesis is simple: we need more of everything. More housing, more immigrants, more clean energy infrastructure.</span></p><p>And Klein and Thomsonâs book is just the latest entry into the growing genre that attempts to address the root causes of stagnation in America and prescribe a path towards abundance and renewal. Recent books in this genre include:</p><ul><li><p><em><a href="https://www.hachettebookgroup.com/titles/marc-j-dunkelman/why-nothing-works/9781541700215/" rel="">Why Nothing Works</a></em><span> by Marc J. Dunkelman</span></p></li><li><p><em><a href="https://www.amazon.com/dp/0593449290/ref=mes-dp?_encoding=UTF8&amp;pd_rd_w=jmm7l&amp;content-id=amzn1.sym.7d2923e8-7496-46a5-862d-8ef28e908025&amp;pf_rd_p=7d2923e8-7496-46a5-862d-8ef28e908025&amp;pf_rd_r=X4ZZ1XY6FB725V25M091&amp;pd_rd_wg=d3jBw&amp;pd_rd_r=9360970f-e272-462b-9a4a-c861c20f7fc1" rel="">Stuck</a></em><span> by Yoni Applebaum,</span></p></li><li><p><em><a href="https://www.amazon.com/dp/1250266777/ref=mes-dp?_encoding=UTF8&amp;pd_rd_w=jmm7l&amp;content-id=amzn1.sym.7d2923e8-7496-46a5-862d-8ef28e908025&amp;pf_rd_p=7d2923e8-7496-46a5-862d-8ef28e908025&amp;pf_rd_r=X4ZZ1XY6FB725V25M091&amp;pd_rd_wg=d3jBw&amp;pd_rd_r=9360970f-e272-462b-9a4a-c861c20f7fc1" rel="">Recoding America</a></em><span> by Jennifer Pahlka,</span></p></li></ul><p><span>Meanwhile Ned Resnikoff is </span><a href="https://resnikoff.beehiiv.com/p/the-abundance-discourse-trap" rel="">pointing out that YIMBYs were doing abundance before it was cool (or maybe were the driving force in making it cool)</a><span>. While I appreciate the credit to the original YIMBY brand, Iâm choosing to adopt an abundance mindset about abundance. More is more, after all.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png" data-component-name="Image2ToDOM" rel=""><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png" width="1200" height="900" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/c4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:900,&quot;width&quot;:1200,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:949873,&quot;alt&quot;:null,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://inpractice.yimbyaction.org/i/159774522?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png&quot;,&quot;isProcessing&quot;:false}" alt="" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4364997-4ca5-4171-a3c8-8f91a8c7ab64_1200x900.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a></figure></div><p>As I see it, the Abundance concept isnât quite an ideology, itâs more of a refocusing on outcomes. Itâs a framework that points to tangible outcomes and asks us to tactically identify what is blocking progress to that goal, irrespective of what the intention of that blockage might be. It extends the classic YIMBY way of doing politics into a larger philosophy. It is a re-focusing on âendsâ over âmeans,â and allows for a variety of ideologies to come together on specific ends. The language around âoutcomes focused legislatingâ brings some degree of sanity to our often self-sabotaging process.</p><p>Outcome-based politics seems so obvious that it can sound silly to say it out loud. Government should deliver material outcomes. Elected officials should be extremely motivated to produce tangible outcomes for the largest number of people.</p><p>So why isnât that happening?</p><p><span>The hot topic in the growing abundance discourse is </span><a href="https://www.niskanencenter.org/policy/state-capacity/" rel="">state capacity</a><span>. Thatâs a fancy term for a simple concept â the governmentâs ability to deliver outcomes, whether those are growing the economy, establishing laws, or just picking up the garbage.</span></p><p><span>Itâs not a new idea. In fact, five decades ago, some of the worldâs most pre-eminent political scientists fretted about the erosion of state capacity in democracies across the world. âThe demands on democratic government grow,â </span><a href="https://web.archive.org/web/20120309011043/http://www.trilateral.org/download/doc/crisis_of_democracy.pdf" rel="">wrote Michael Crozier, Samuel Huntington, and Joji Watanuki</a><span>, âwhile the capacity of democratic government stagnates.â</span></p><p><span>Sounds familiar, doesnât it? They argued that in countries like the United States, Japan, and Western Europe, citizens were asking their governments to take on more and more without increasing their governmentâs ability to carry out those projects. That led to an erosion in legitimacy, and decades of retrenchment and cutbacks. About the only thing that the left and the right seemed to agree on was that the â</span><a href="https://clintonwhitehouse4.archives.gov/WH/New/other/sotu.html#:~:text=The%20era%20of%20big%20government,virtues%3B%20we%20must%20have%20both." rel="">era of big government is over</a><span>.â</span></p><p><span>The 70âs was an era of community organizing to stop The Big Bad Thing, and this urge to tap the breaks continues to this day. Elaborate outreach processes, reporting requirements and the opportunities for objections about those reportsâ¦ they all can seem reasonable. But added together they created a mighty web. Marc Dunkelman explained the problem of this approach on </span><a href="https://slate.com/podcasts/political-gabfest/2025/02/politics-justice-department-scandal-amid-corrupt-bargain-of-eric-adams" rel="">a recent episode of the Political Gabfest</a><span>: âWe've now created a system where there are so many veto players and you need so many approvals that government fundamentally doesn't work.â</span></p><p><span>Little by little, we stitched together a gigantic wet blanket that continues to hold back housing production. Itâs easy to blame liberals, but like all of our worst problems, it was bipartisan. Conservatives liked constraining government because they didnât trust it. Liberals liked constraining it because they overestimated how much those constraints would produce better outcomes like protecting the marginalized, preserving the environment, and elevating the voices of the community. And people who felt that integration was a threat, helped </span><a href="https://www.nytimes.com/2021/02/16/opinion/ezra-klein-podcast-heather-mcghee.html" rel="">create innumerable local processes to tap the brakes on all kinds of public goods and housing</a><span>.</span></p><p><span>As a society, we have chronically underestimated the cost of all this. Itâs a chronic case of letting the perfect be the enemy of the good. Every constraint makes the continuation of the status quo more likely. Legislators and advocates know this, but treat it like the normal cost of getting the sausage made. In the process of getting pro-housing bills passed, Iâve had countless arguments with other advocates and legislators over the innumerable ways bills are weakened. And while weâre taking steps in the right direction, </span><a href="https://www.yimbylaw.org/law-journal/californias-streamlining-laws-dlf8x" rel="">the outcomes still arenât great.</a></p><p>State capacity is being eaten by excessive process. Overly restrictive rules (zoning) and elaborate process (permitting and planning) create chronic shortages driving prices higher and creating an angry populace. Thatâs the TLDR thesis of a lot of the abundance books. Things grind to a halt. People suffer. It all feels incredibly self-sabotaging and frustrating.</p><p>That brings us to today, in which people across the country are mad that shit sucks. I could say more but, come on, shit sucks. Prices are high, infrastructure is crumbling, people are pissed, youâve heard this already.</p><p>There are two big responses happening right now:</p><ol><li><p>Tear down (DOGE vibes)</p></li><li><p>Build up (Abundance vibes)</p></li></ol><p><span>The DOGE point of view says </span><em>if the government canât do anything, we should just get rid of the government</em><span>. That appeals to many Americans because they are angry. The frustrated urge to blow it all up is strong. As a rule, shortages do not bring out the best in humanity. They make us blame perceived-outsiders and foster the urge to topple governments.</span></p><p>The housing shortage fosters a âcrabs in a bucketâ mentality everywhere, from Blue-dot cities to Red rural communities. Whether your enemy is yuppies, coastal elites or immigrants, the through-line is that there isnât enough to go around and someone is stealing from us. The DOGE-style of governance is about trying to tell everyone who has been stealing and publicly firing those people.</p><p><span>The alternative gaining traction is a (sometimes vague) notion of abundance, which boils down to âthings should work.â But if these new books are any indication, the Build Up team is feeling more urgency. The consensus that government is not delivering tangible good outcomes for average people is </span><em>finally </em><span>being recognized as an existential threat to the democratic project. The constituency for âcan we please just fucking do thingsâ is real.</span></p><p>YIMBY has a practical goal of housing abundance. And for years, YIMBYs have been building ideologically diverse coalitions aligned on that specific, narrow goal.</p><p><span>And while that work is great, my key point is that </span><em>we are running out of time</em><span>. âGet your house in orderâ should have a deep level of urgency right now. Elected officials at the state and local level need to rebuild the belief that government is worth preserving and can deliver a thriving middle class.</span></p><p>We are in the middle of a race between the destroyers and the builders, and too many elected officials are twiddling their thumbs the sinking ship of the status quo.</p><p>People will nod and agree to everything I just said above, but what does it actually look like in practice?</p><p><span>Literally yesterday I spoke with a city council member who was thinking about introducing single stair reform in their city. He knew how it </span><a href="https://www.jchs.harvard.edu/blog/how-could-legalizing-mid-rise-single-stair-housing-expand-and-improve-housing-supply" rel="">could be a deeply impactful reform</a><span> and </span><a href="https://www.pewtrusts.org/en/research-and-analysis/reports/2025/02/small-single-stairway-apartment-buildings-have-strong-safety-record" rel="">is completely safe</a><span>. But then he said âWe canât do it without the support of the firefighters union, and theyâre deeply opposed.â </span><a href="https://www.niskanencenter.org/understanding-single-stair-reform-efforts-across-the-united-states/" rel="">Every redundant requirement was deliberately put there by someone who doesnât think it needs reform and will fight it.</a><strong> </strong><span>Most elected officials weigh the various highly engaged stakeholders, as if they represent the average voters in their district. Theyâre not.</span></p><p><span>YIMBY Action, through </span><a href="https://yimbyaction.org/get-involved/what-is-a-chapter/" rel="">our local chapter model</a><span>, is building a visible constituency to incentivize politicians to take bolder action on housing. But politicians need to get ahead of this. To critique my own work: it shouldnât be necessary! Elected officials should be more concerned that the general public is feeling economically stunted and enraged!</span></p><p><span>The status quo is a </span><em>downward trajectory</em><span> and you will be punished electorally for maintaining it. If people continue to feel economically stunted, they will continue to boot incumbents. Being committed to outcomes requires continuous deep commitment to pushing back, with the knowledge that outcomes add up to that important âright track / wrong trackâ polling data.</span></p><p data-attrs="{&quot;url&quot;:&quot;https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share&quot;,&quot;text&quot;:&quot;Share&quot;,&quot;action&quot;:null,&quot;class&quot;:null}" data-component-name="ButtonCreateButton"><a href="https://inpractice.yimbyaction.org/p/abundance-isnt-going-to-happen-unless?utm_source=substack&amp;utm_medium=email&amp;utm_content=share&amp;action=share" rel=""><span>Share</span></a></p></div></article></div><div id="discussion"><h4>Discussion about this post</h4></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tracing the thoughts of a large language model (356 pts)]]></title>
            <link>https://www.anthropic.com/research/tracing-thoughts-language-model</link>
            <guid>43495617</guid>
            <pubDate>Thu, 27 Mar 2025 17:05:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anthropic.com/research/tracing-thoughts-language-model">https://www.anthropic.com/research/tracing-thoughts-language-model</a>, See on <a href="https://news.ycombinator.com/item?id=43495617">Hacker News</a></p>
Couldn't get https://www.anthropic.com/research/tracing-thoughts-language-model: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Launch HN: Continue (YC S23) â Create custom AI code assistants (122 pts)]]></title>
            <link>https://hub.continue.dev/explore/assistants</link>
            <guid>43494427</guid>
            <pubDate>Thu, 27 Mar 2025 15:06:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hub.continue.dev/explore/assistants">https://hub.continue.dev/explore/assistants</a>, See on <a href="https://news.ycombinator.com/item?id=43494427">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Custom AI code assistants are configurations of building blocks that enable you to receive assistance tailored to your specific use cases</p><a href="https://docs.continue.dev/hub/assistants/intro" target="_blank" rel="noopener noreferrer">Learn more<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 3h6v6"></path><path d="M10 14 21 3"></path><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path></svg></a></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A filmmaker and a crooked lawyer shattered Denmark's self-image (180 pts)]]></title>
            <link>https://www.theguardian.com/world/2025/mar/27/black-swan-denmark-documentary-mads-brugger-amira-smajic</link>
            <guid>43493159</guid>
            <pubDate>Thu, 27 Mar 2025 13:01:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/world/2025/mar/27/black-swan-denmark-documentary-mads-brugger-amira-smajic">https://www.theguardian.com/world/2025/mar/27/black-swan-denmark-documentary-mads-brugger-amira-smajic</a>, See on <a href="https://news.ycombinator.com/item?id=43493159">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p><span>T</span>he trap was laid in a rented office: two rooms in downtown Copenhagen, furnished without a whisper of Scandi style. If it wasnât for a Frida Kahlo print on one wall, the premises might have felt as impersonal and stark as a confessional. That, in any event, was what it became. For six months, beginning in mid-2022, a parade of people â members of motorcycle gangs, entrepreneurs, lawyers, real-estate barons, politicians â trooped through to recount their sins to Amira Smajic. They didnât come for expiation. They knew Smajic to be one of them â an outlaw, and in her particular case, a business lawyer so skilled at laundering money that sheâd enabled a couple of billion kroner in financial crime over the previous decade. They called her the Ice Queen, because she showed not a flicker of regret for what she did.</p><p>In her office, Smajicâs visitors bragged about dodging tax, bribing officials or exploiting the bankruptcy code. She offered them coffee and coaxed forth their confidences. Six cameras and three microphones, secreted in power sockets, captured it all â footage that was turned into a documentary called The Black Swan. In its surreptitious method and breathtaking drama, The Black Swan bore all the fingerprints of its director, Mads BrÃ¼gger, a provocateur who has spent his career searching for bombshells to drop but who had never quite managed it as well as he did here. Denmarkâs national bird is the <em>Cygnus olor</em>, a swan as white as virtue. The Black Swan, in showing such easy, unbridled formulations of crime, blew up Denmarkâs idea of itself.</p><p>Since airing last May as a five-part series on TV2, Denmarkâs biggest television network, The Black Swan has sent the country into convulsions. One out of every two Danes has seen the documentary. After its release, a biker-gang member and his accountant were charged with financial crimes and taken into custody; others, including a municipal official, are under investigation. The Danish Bar and Law Society formally apologised to the minister of justice for the conduct of two lawyers caught on camera; they have been either fired or disbarred. A new money-laundering law was introduced to give banks more oversight over âclient accountsâ â the kind of accounts in which lawyers pool the funds of several clients and transact on their behalf, and that featured in many of the machinations in Smajicâs office. In her New Yearâs speech, Denmarkâs prime minister suggested biker-gang criminals ought to be stripped of their pension rights â a detail so specific it was surely inspired by The Black Swan.</p><p>Other Scandinavian nations also reeled upon watching The Black Swan. After the series premiered in Sweden, a criminologist at Lund University warned: âThereâs a lot of evidence that itâs probably even worse here.â Norwegian civil servants invited BrÃ¼gger to Oslo in January to talk to them about money-laundering. All of Scandinavia, he believes, has persuaded itself that crime exists only in violent, poor abscesses on the edges of their societies. âThe Danes totally subscribe to this idea that Denmark has no corruption, and to the idea of Denmark as the end of the road,â BrÃ¼gger said, referring to the political scientist Francis Fukuyamaâs notion that âgetting to Denmarkâ is the goal of every modern democracy. âThe Black Swan punctured that hallucination,â BrÃ¼gger said. âIt was Denmarkâs red-pill moment.â</p><p>Sitting in the Copenhagen offices of Frihedsbrevet, or Freedom Letter, an investigative journalism site BrÃ¼gger co-founded in 2021, I asked him what ordinarily passes for corruption in Denmark. He thought about it for a comically long time. During his boyhood, he recalled, one major scandal involved a small-town mayor being bribed with a bathroom renovation for his home. In 2011, Danish newspapers carried as front-page news the revelation that the prime minister, Helle Thorning-Schmidt, was leasing her car from Germany, saving â¬20 a month and depriving the exchequer of â¬70 a month in tax. BrÃ¼gger had told a Greek friend about this brouhaha; the friend stared at him and said: âBack home, weâre talking about a politician who was given an entire island as a bribe.â BrÃ¼gger also related a Frihedsbrevet scoop: Copenhagenâs leading newspaper editors had been attending a Proust book club run by a government official, a degree of socialising that BrÃ¼gger characterised as unhealthy. This was, he was suggesting, the scale of grift Danes were used to â chump-change tax avoidance and highbrow hobnobbing â until The Black Swan came along.</p><p>But he was embroidering for effect. There have been graver controversies: a stock price manipulation scheme in 2008; a money-laundering case <a href="https://www.theguardian.com/business/2018/sep/21/is-money-laundering-scandal-at-danske-bank-the-largest-in-history" data-link-name="in body link">involving Danske Bank</a>; a $1bn tax fraud case that ended in a 12-year prison sentence for its mastermind last December. Michael Bang Petersen, a political scientist at Aarhus University who studies trust in Danish society, told me that citizensâ trust in politicians has fallen by 20 percentage points since 2007. But their trust in fellow citizens has stayed stable. When asked if they can trust most people, an astonishing 80% of Danes reply in the affirmative. Lawyers, roasted as rogues practically everywhere, enjoy a glowing reputation in Denmark, and the welfare state is revered, as inviolable as a cathedral.</p><p>âWeâre taught from a young age that cheating the system is not something you do, because you end up pissing on everybody,â Ane Cortzen, a television presenter and BrÃ¼ggerâs sister, told me. âCheating on taxes is one of the most serious crimes you can commit.â Kalle Johannes Rose, an associate professor at Copenhagen Business School, observed: âMost Danish scandals have to do with the state â public healthcare, public banks, public something or the other. People want to know their high taxes are being spent correctly. If they donât trust the system, they donât pay their taxes, and then the house of cards falls down.â The Black Swan thus invited viewers to dwell on their worst nightmare: a shattering of the trust that underpins not just the smooth functioning of their beloved welfare state but the essence of what makes Danes proud to be Danes.</p><hr><p><span>A</span>mira Smajic wears her dark hair pulled back so tightly that her skin tightens around her high cheekbones. It lends her the severe, credible look of a schoolteacher, doubtless an asset during her years of crime. In her first job after university, at an accounting firm, Smajic quickly sensed they were skating close to the edge of the law. Her employer was subsequently <a href="https://www.tv2fyn.dk/odense/amiras-laeremester-gav-gode-raad-paa-tv-men-traekker-spor-af-kriminalitet-bag-sig" data-link-name="in body link">convicted</a> of fraud and forgery â but by then, Smajic had struck out on her own, working with Denmarkâs biker gangs, which are notorious for criminality and violence. âI specialised in making accounts look as needed â getting white money to turn black and vice versa,â she says in the film. For these services, she earned several hundred thousand kroner a month. âI shopped in Louis Vuitton every week. I bought shoes like other people buy milk.â</p><figure id="242ddae3-3346-4bf5-8735-d09d40c05c63" data-spacefinder-role="showcase" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-2"><picture><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=880&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=880&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=800&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 1140px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1140px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=800&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 1140px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=640&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=640&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A woman with dark hair looks pensive and to the side of the image" src="https://i.guim.co.uk/img/media/d18cb729190a1f2979995b1228575c2bb6da81d4/0_0_4096_2160/master/4096.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="234.66796875" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Amira Smajic in a still from The Black Swan.</span> Photograph: Wingman Media/TV2 Denmark</figcaption></figure><p>In 2020, wearying of the paranoia and guilt of this delinquent life, Smajic thought of going public â through a book, perhaps, or a film. Having met several publishers and journalists, she eventually found her way to BrÃ¼gger, and she commanded every shred of his attention. Over sushi, she told him so much about her connections with the criminal underworld that âshe was clearly the real dealâ, BrÃ¼gger told me. He was instantly smitten, in that half-ardent, half-extractive way that journalists are with their subjects.</p><p>BrÃ¼gger and TV2 first considered investigating the old contracts, emails and texts in Smajicâs files. But Michael NÃ¸rgaard, TV2âs editor-in-chief, said he was aware that Smajic had spent years engaging in fraud and forgery. âCould we believe that the materials she came to us with were intact â that she didnât take out documents to put her in a better light?â he wondered. The idea to open a new office and clandestinely film its operations, BrÃ¼gger and NÃ¸rgaard told me, came from Smajic. In a 2021 email, which BrÃ¼gger showed me, Smajic excitedly laid out five pages of plans to monetise her past: articles, newsletters, podcasts, an eight-part true-crime show, the documentary, four books, the full panoply of a repentance empire. The arc, Smajic wrote, referring to herself in the third person, would be of âher social and moral redressâ.</p><p>BrÃ¼gger says he believed her. Smajic had come to Denmark as a child refugee from Bosnia, along with her family, and on one occasion she told BrÃ¼gger that her father, whoâd died of cancer, would have been disappointed that sheâd turned to crime after Denmark had taken her in. âI will never get out of this life if I do nothing,â Smajic says in the first episode, with the air of a woman plotting to burn a bridge even as she flees over it. Before filming began, a security expert talked Smajic through the consequences of making the documentary, BrÃ¼gger told me. âHe didnât spare her. He said she may have to relocate to another country, change her name, or not see her friends any more. She was crying, and I thought: âOK, thatâs it. Sheâs out.â But she insisted on continuing.â</p><p>BrÃ¼gger and NÃ¸rgaard knew one more thing about Smajic. She was at the time, and had been for years, a police informant. On her request, they withheld that from the documentary â but they also didnât let the police know in advance about the trap they were setting. In a brief contract, drafted at the outset of production and barely two pages long, BrÃ¼ggerâs producer, Peter Engel, stipulated that Smajic would be paid 30,000 kroner (roughly Â£3,350) a month. Engel said she also agreed to refrain from any actual criminal activity during production. In the opening minutes of The Black Swan, sitting across a desk from Smajic in a room resembling an interrogation chamber, BrÃ¼gger asks her what the worst outcome of her undertaking could be. She replies: âThat someone finds out and I will be liquidated before any of this is shown.â</p><hr><p><span>T</span>he suspense of whether Smajic will be unmasked keeps The Black Swan as taut as a bowstring. The documentaryâs more immediate shocks come from watching people methodically plan to break the law. The crimes range from the paltry to the serious. A man named Wassem, to whom Smajic introduces herself in the first episode, runs a shawarma shop and wants to skip out on tax. Fasar Abrar Raja, a grey-bearded member of a motorcycle gang called Bandidos, helps demolition crews dispose of asbestos and other toxic material without the costly safety measures the law requires. For a fee, he will bribe environmental analysts and local officials to look the other way while he dumps the material in the Danish countryside. Fasar also brings along Martin Malm, a smooth-faced businessman who launders millions of kroner a month through his âinvoice factoriesâ: companies that issue fake invoices for services never rendered. (Malm might invoice a nightclub owner for providing bouncers, say; the owner would pay Malm, whoâd keep a fee and return the rest to the owner in cash or some other fashion, allowing him to avoid paying tax on it. The bouncers, needless to say, donât exist.)</p><p>One of the filmâs revelations, BrÃ¼gger says in a voiceover, is the connection âbetween the nice-looking, everyday citizens and the underworldâ. In Smajicâs presence, a lawyer named Lise Roulund delivers to Fasar a USB drive full of confidential documents she has obtained from the police â an illegal act in itself. On suspicions of money-laundering, Fasarâs bank account has been frozen, so Roulund helps him enact his tax dodges by transferring money in and out of an account she controls. Without lawyers willing to look the other way, criminal activity would seize up, Roulund says. âWeâre the ones who make it go around.â</p><p>Another lawyer, named Nicolai Dyhr, <a href="https://nyheder-tv2-dk.translate.goog/krimi/2024-05-15-topadvokat-fanget-paa-skjult-kamera-lovede-at-daekke-over-fakturafabrik-og-opfordrede-til-selskabssvindel?_x_tr_sl=da&amp;_x_tr_tl=en&amp;_x_tr_hl=en&amp;_x_tr_pto=sc" data-link-name="in body link">a partner at one of Denmarkâs most prestigious law firms</a>, is a fount of suggestions on how to exploit the bankruptcy code. He lays out how Wassem could shutter his shawarma business, declare bankruptcy and avoid a tax debt of 2.4m kroner; he even details how Wassem could squeeze additional money out of a government fund that guarantees worker salaries while companies are going through bankruptcy. Malm, the businessman with the invoice factories, also files for bankruptcy, and Dyhr advises him to hide evidence of fraud and deliberately undervalue his businesses. (Later, Dyhr claimed he was âeel-trappingâ â leading Malm on to secure him as a client, but with no plans to commit crimes. Dyhr sued TV2, demanding that all covert footage of him be edited out of the film, but <a href="https://nyheder.tv2.dk/samfund/2024-05-30-topadvokat-taber-sag-mod-tv-2-i-retten" data-link-name="in body link">lost</a> his case. Fasar denied committing the crimes discussed on camera; Malm told TV2 it âdidnât have the whole pictureâ; Roulund has refused to comment.)</p><p>By themselves, the sums of laundered money bandied about run only to a few million pounds, small enough in scale that one expert described it to me as <em>hyggekrim</em> â crime so domestic itâs practically cosy. But all these cons purport to show how simple it is to exploit the Danish state. It was one of the earliest lessons of Smajicâs career, she says: âThe state always pays.â</p><p>Some episodes of The Black Swan prickle with violence. On a trip to his native Pakistan, Fasar discusses killing a patient in a hospital â a potential witness in a trial against him. (NÃ¸rgaard told me TV2 tipped off the Danish police about Fasarâs plans.) After returning to Copenhagen, Fasar storms into Smajicâs office, threatening to âcrush you with my bare handsâ because she has failed to secure a Danish passport for his daughter. Without breaking character, Smajic mollifies him. By the end of the meeting, theyâre reminiscing about how a mental illness diagnosis concocted years ago has kept Fasar out of prison for drug and arms trafficking offences, and heâs laughing along. Itâs an astonishing performance from Smajic â like watching someone act out Hamlet while walking a high wire.</p><p>Then, in the final episode, we learn Smajic is an even more nerveless and consummate actor than we thought â that she has double-crossed BrÃ¼gger himself.</p><p>From one of Smajicâs sound recorders, the producers recover a file she has deleted, and discover that she knows Wassem far better than she lets on. His name is not even Wassem, and from their conversation on the file, about transporting cash, she seems to be engaged in an entirely different caper with him, one that BrÃ¼gger and TV2 know nothing about. Upon investigation, they find she has secretly been running a second office, where they suspect she has been laundering hundreds of thousands of kroner via invoice factories for other clients. (Smajic has said she never facilitated any crimes during this period.) In <a href="https://nyheder.tv2.dk/samfund/2024-07-04-nye-tv-2-afsloeringer-faar-muldvarps-fortaelling-til-at-smuldre-yderligere" data-link-name="in body link">one case</a>, TV2 claims to have found undiluted fraud: Smajic embezzling 65,000 kroner from a client by forwarding him emails that sheâd fabricated, and that appeared to be from the tax authority. Smajic isnât a crook on the mend at all, the film concludes; sheâs a crook in the thick of committing an assortment of crimes. When she finds out that BrÃ¼gger and his colleagues know about her side hustles, she demands the documentary be shelved.</p><p>All documentaries are artificial: their footage has been carefully threshed and sieved with an eye to telling a story or pushing an argument. The Black Swan, though, relies on the unblinking, real-time gaze of hidden CCTV cameras, so we lull ourselves into thinking that weâre seeing the full picture, the full truth. No such thing. Instead, we get evasion upon evasion: Smajicâs charade for her clients, Malm cheating the taxman, TV2 withholding their work from the police, BrÃ¼gger keeping details from his audience. Smajicâs final bluff merely confirms what BrÃ¼gger seems to have believed throughout his career: everywhere, there are conspiracies and lies that he must expose, even if he has to participate in the dissembling himself.</p><hr><p><span>B</span>rÃ¼gger, who turns 53 in June, is a very tall, very bald man with a very red beard. He never seems to run out of conversational energy; whatever time of day it is, heâs likely to be ready to talk for hours, looking at you unblinkingly through his chunky spectacles as he tells you how bizarre or absurd the world really is. When I first met him, at the Frihedsbrevet offices in January, we loitered in the buildingâs courtyard, our pates goose-pimpling over in the Danish winter, so he could finish his cigarette. He warmed us up with fresh gossip. We had originally planned to attend, that evening, a public lecture by three TV2 journalists about The Black Swan. But Smajic had emailed the journalists a few days earlier, promising to show up and ask a few questions of her own, such as: âHow does it feel to take credit for a program I pay for with my life (even though Iâm still breathing, yes)?â or âHow many people have you thrown under the bus against your better judgment to make your story work?â</p><p>After the documentaryâs release, fearing for her safety and that of her young son, Smajic had gone into hiding, so her cameo at the lecture would have been sensational. She would bring âa bunch of friendsâ, she warned â and then, in a second email, added: âHave you thought about and arranged security for that night â¦ The assessment is that my participation that evening increases the risk for both me, you and the audience.â</p><p>Citing caution, TV2 cancelled the event. I couldnât tell if BrÃ¼gger felt disappointed or vindicated â the first at the dashed prospect of seeing Smajic rising in the audience and setting it abuzz, the second at how Smajicâs emails appeared laced with an articulate derangement. âSheâs an expert in creating conflict and manipulating people,â he told me. âIf you plant her inside a biker gang, she could tear it apart within two weeks.â</p><figure id="cd5cbf35-ce37-4549-b962-0ae96e7562ed" data-spacefinder-role="inline" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-3"><picture><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A women with her hair in a tight bun talks intensely to a man with a full beard. Both are gesticulating." src="https://i.guim.co.uk/img/media/f3b484c06131fcd643dff4467ad1c4e6e1dafa3b/0_0_1920_960/master/1920.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="222.5" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Smajic and Fasar Abrar Raja in a still from The Black Swan.</span> Photograph: Wingman Media</figcaption></figure><p>BrÃ¼gger was raised in the belief that conflict makes for great copy. His parents were journalists, and at the dinner table, his sister, Ane Cortzen, said: âWeâd talk about society and politics, and you couldnât just sit and listen. You had to have an opinion.â Cortzen remembers BrÃ¼gger as an inventive child obsessed with comic books, to the point that he developed a âvery black-and-white view of the world, in which some people are good and some are evilâ. (On the middle finger of his right hand, BrÃ¼gger wears a skull ring as homage to The Phantom, a comic-book crimefighter who wears a skintight purple suit and lives in a cave resembling a human cranium.) At university, BrÃ¼gger studied film-making, and then worked at the state broadcaster, where he met his longtime producer, Peter Engel. âThe best thing, I discovered, is to let him do his own stuff,â Engel said. âIf you hear thereâs a black market for diplomatic credentials, an ordinary journalist will say: âIâll interview the broker and write a piece.â Mads would say: âLet me become a fake diplomat.â He always wants to step into his own universe.â</p><p>As a documentarian, BrÃ¼gger likes to make things happen. Not for him the Attenboroughian serenity of waiting for a lion to grow hungry and then track down its antelope; heâd rather starve the lion, hobble the antelope, and then introduce both beasts into a cage to film the carnage. In all his projects, BrÃ¼gger has mounted elaborate, artificial setups just like Smajicâs office, and lured people into self-indictment, folly or sudden disclosures. Most of his films pivot on BrÃ¼gger pretending to be someone he isnât. In The Red Chapel, which won a Sundance award in 2010, he plays the manager of a pair of comedians touring North Korea. In The Ambassador, he impersonates a Liberian diplomat in Central African Republic. His cameras are, if not hidden, claiming to be present for benign purposes. In Pyongyang with his comedians, BrÃ¼ggerâs tapes were screened every night by a government agency; the filmâs splenetic views of North Korea â âa sanctuary for crazy peopleâ â emerge in the edits and in BrÃ¼ggerâs voiceovers. As in The Black Swan, the most burning question in these films is always: will someone tear the facade away and expose BrÃ¼gger?</p><p>Even in Cold Case HammarskjÃ¶ld, in which BrÃ¼gger tamely appears as himself â a film-maker smelling conspiracy behind the death of Dag HammarskjÃ¶ld, the UN secretary general, in a 1961 plane crash â he cannot resist a splash of play-acting. He wears an all-white outfit, down to his sneakers, because, as he says in his narration: âI know for a fact that the villain of this story, he wore only white.â BrÃ¼gger fails to prove that this villain â a long-dead South African mercenary â actually brought down HammarskjÃ¶ldâs plane, but that kind of factfinding is, in any case, never the priority of his films. âHammarskjÃ¶ld was a ticket to all the things I really enjoy: tracking down mercenaries, telling tales of evil men who dress in white, [and] rumours about secret African societies,â BrÃ¼gger says in one voiceover. Heâs always out for spectacle, shock and a wild ride. âIf Hunter S Thompson had gone into film and ditched all the drugs,â a Norwegian columnist wrote of Cold Case HammarskjÃ¶ld, âmaybe this is what he could have ended up with.â</p><p>BrÃ¼ggerâs approach can leave his collaborators uneasy. When I spoke to one of the comedians in The Red Chapel, he euphemistically called BrÃ¼ggerâs journalism âuncompromising,â adding: âMads is often portrayed as either a villain or a genius â and maybe heâs both.â An early collaborator described BrÃ¼gger to me as ruthlessly ambitious â someone who wouldnât hesitate to pilfer an idea or sell out a friend to make good TV. But he admits BrÃ¼gger can be charming and persuasive, and I know what he means. When BrÃ¼gger outlines his outre philosophies of journalism â of orchestrating scenarios and entering them â you feel like a mug for having arranged an interview in a cafe.</p><p>Itâs often unclear what BrÃ¼gger is setting out to discover, what facts heâs seeking to establish. In The Red Chapel, even as his comedians rehearse on a riverbank, BrÃ¼gger declares he wants to âexpose the very core of the evil in North Koreaâ â an aim as grand and adolescent as it is vague. (As it happens, he never even makes it out of his mindersâ line of sight.) As a Liberian diplomat in The Ambassador, BrÃ¼gger tries to buy blood diamonds, pretends he wants to start a match factory in Central African Republic (CAR), and arranges to tour a âPygmy villageâ. The CAR is a place with no moral boundaries, he tells us, and so it âoffers itself as a sort of Jurassic Park for people longing for the Africa of the 1970sâ. He circles some sort of exposÃ© â evidence of how illicitly obtained diplomatic papers can be used to smuggle diamonds and commit other crimes â but never quite pins it to the mat. By the end of Cold Case HammarskjÃ¶ld, similarly, BrÃ¼gger has proven no conspiracy. The ride has been weird, but the case remains cold.</p><figure id="2e6dc4ef-c60f-4268-a286-148c4a48ef49" data-spacefinder-role="supporting" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-4"><picture><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=380&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=380&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=300&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=300&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A man leans against a railing with a large tree beside him. He is wearing sunglasses, a white shirt and tie and a long coat. " src="https://i.guim.co.uk/img/media/8c99ca4a14df12530b5eafa382a1296885b21dc3/0_0_5463_6963/master/5463.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="567.1856123009335" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Mads BrÃ¼gger.</span> Photograph: Marie Hald/The Guardian</figcaption></figure><p>Only in The Mole, a story of such reckless and dogged infiltration that it might have been hatched by an intelligence agency, does BrÃ¼gger obtain more orthodox journalistic results. Ulrich Larsen, a retired chef who had watched The Red Chapel, tracked BrÃ¼gger down in 2010 and volunteered as a spy within the Copenhagen chapter of the Korean Friendship Association. BrÃ¼gger gave him cameras and instructed him to film everything. âI thought Iâd just be showing these Danish guys as Monty Python weirdos doing silly walks,â Larsen told me. Instead, under BrÃ¼ggerâs supervision, Larsen posed so effectively as a sympathiser that he wound up penetrating the heart of North Koreaâs influence network better than any full-time spy â and filmed himself doing it, to boot. With an accomplice, he duped North Korean officials into thinking he was setting up a drug and arms factory in Uganda â part of a plan to make enough money to buy North Korea weapons despite prevailing sanctions. The con ran a full decade â so long that BrÃ¼gger sometimes clean forgot about it for months on end.</p><p>BrÃ¼gger wouldnât necessarily quibble with these characterisations of his movies. âIâm a film-maker who craves sensation,â he says in The Mole, and that he does provide. His tone is caustic, his characters are colourful, and his plot twists are what Lotte Folke Kaarsholm, the opinion editor at the Danish daily Politiken, wryly calls âmaximalistâ. During one of our conversations, BrÃ¼gger quoted JÃ¸rgen Leth, the doyen of Danish documentarians, to describe their line of work as âlaying a trap in the forest and then waiting behind a tree to see who falls inâ. Later, I looked up the quote and found that Leth had talked about setting a trap for reality, to capture the most authentic version of the world. âWe are relaxed, attentive and noncommittal,â he said in a 2000 interview. âThings happen when they happen.â Leth was advocating patience and preparation; BrÃ¼gger was thinking of a literal trap to tempt someone into making a mistake.</p><hr><p><span>O</span>ne morning in Copenhagen, I visited Smajicâs lawyer, who led me into a conference room, laid his mobile on the table, and dialled her on speakerphone. The previous day, sheâd been convicted in a different case of a million-kroner fraud; the following week, she would be sentenced to 18 months in prison. When we spoke, she was still in hiding, but there wasnât a trace of anxiety in her voice. She complimented me on pronouncing her name correctly, and said sheâd spoken to no other journalist since the documentaryâs release. Midway through our conversation, while mentioning the episode during which Fasar threatened her, I told her I was appalled that journalists had put her in that position. I did mean it, but itâs also the sort of thing a journalist says, with exaggerated concern, to gain someoneâs confidence. âThatâs the first time someone has been sympathetic and said that,â she told me â something I knew to be false, because Iâd read Danish columnists expressing the same views. Later, I learned that I <a href="https://www.berlingske.dk/indland/muldvarpen-fra-den-sorte-svane-taler-ud-for-foerste-gang-mit-familieliv-er?gaa_at=eafs&amp;gaa_n=AerBZYPjfiiCeAAOO_bRMmuC3e9iqWKjq_DRpaR6qkF8MPzipYwYAYzBjPpHb61Ocqs%3D&amp;gaa_ts=67cc5c96&amp;gaa_sig=2qAhukP5LmbRdoPxyXNVUhC9YQ0PDsHKKBaouYajSeunh_ynmu6epcvlSFrIZC21QUWIFajYL-bBATnf4dyVjw%3D%3D" data-link-name="in body link">was also not</a> the first journalist to interview her about the film.</p><p>Smajic believes sheâs a victim of journalistic deceit. The Black Swan was meant to be about her life, she said, with the hidden camera footage being used only sparingly to corroborate her stories. Sheâd been offered no security during the filming, she said. When TV2 screened the first three episodes for her approval, they were really just raw, unedited clips, she maintained, and in any case, sheâd been strongly medicated after a surgery and couldnât assess them with a clear mind. (âAmira watched the edited episodes, they just needed finalising,â TV2âs NÃ¸rgaard told me. âDuring the four hours she spent with the editorial team that day, she appeared unaffected and seemed coherent, as we also documented in the series.â) Smajic hadnât been running any other office at the time, she said to me, and in any case, âthey hadnât bought the rights to every single moment in my lifeâ.</p><p>Smajic felt betrayed. âFor two years, these people were telling me to go through with it, saying: âThis is going to be the biggest thing. Youâre going to be a star.ââ When she began worrying that the documentary would place her in danger, she asked for it to be suspended. âThey figured that if they made me out to be a criminal, I wouldnât have a say,â she told me. Early in 2024, months before The Black Swan was due to be broadcast, Smajic sued for an injunction against the film. A court denied her plea on grounds of public interest. In its verdict, it decided Smajic was fully aware of the projectâs risks, the protection that TV2 arranged for her, and the ambit of the documentary.</p><p>Among those who think Smajic was treated poorly is Jacob Mollerup, a veteran of the Danish media and a co-founder of Foreningen for UndersÃ¸gende Journalistik (FUJ), an association of investigative journalists. Mollerup described The Black Swan as âan exceptional productionâ, but argued BrÃ¼gger had prized his dramatisation too much, abandoning fairness and balance in the bargain. âNormally, you protect your sources, but here they say: âNow sheâs just a criminal, she broke our contract, so we can set aside her wishes about the production,â Mollerup told me. Hiding Smajicâs ongoing work as a police informant from The Black Swanâs viewers was dishonest, he said. If she was telling her handlers everything about the sting as it happened, that made it an operation implicitly sanctioned by the police â and plunged it into all sorts of ethical murk. Was Smajic inviting into her lair suspects whom the police wanted to nab? Which of the crimes being planned on camera were actually carried out, and how? Mollerup believes journalists must be transparent about their methods and precise in documenting misdeeds. When The Black Swan won an FUJ prize, he gave up his membership. âI told them: âThis is not what I worked for.ââ</p><p>BrÃ¼gger briskly rejected all of Smajicâs statements. Sheâd often claimed to be on medication before, he said, including once when she was pleading loss of memory while testifying in another criminal trial. She was merely recycling this excuse to explain to me why she hadnât objected to the advance cuts of the first three episodes, BrÃ¼gger told me. On his laptop, he found a photo of a production teamâs stakeout that had been in place throughout the sting, in an office near Smajicâs. The team constantly watched the feed from the hidden cameras, ready to summon security if things went south â a setup she knew about, he said. When I wondered if the police had known of Smajicâs parallel adventures in money-laundering, or perhaps even endorsed them for their own purposes, BrÃ¼gger said: âI find it highly unlikely, but itâs a possibility. The police wouldnât confirm or deny this anyway.â</p><p>Nothing I learned from Smajic solved the central mystery of The Black Swan: why did she choose to capsize her life by participating at all? Janet Malcolm, the deft vivisectionist of the psyche in journalism, would argue that such masochistic tendencies can be found in anyone who volunteers to talk to the press. But Smajic wasnât just anyone: she was a habitual lawbreaker, so for her to let a television crew into the darkest corners of her life felt positively self-destructive. Perhaps she did think of exposure as disinfectant, a step towards a cure. Perhaps she believed she could bear any waves of bad press, or even surf them towards fame and freedom. âThe thing is,â BrÃ¼gger said, âwith Amira, you can just never be sure of anything.â</p><figure id="a94f231d-1646-4653-90ab-23b5656477f0" data-spacefinder-role="supporting" data-spacefinder-type="model.dotcomrendering.pageElements.ImageBlockElement"><div id="img-5"><picture><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=380&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 1300px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 1300px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=380&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 1300px)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=300&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 980px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 980px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=300&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 980px)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=620&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 660px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 660px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=620&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 660px)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=605&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 480px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 480px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=605&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 480px)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=445&amp;dpr=2&amp;s=none&amp;crop=none" media="(min-width: 320px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: 320px) and (min-resolution: 120dpi)"><source srcset="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" media="(min-width: 320px)"><img alt="A painting of two woman with dark hair, holding hands. The woman on the left wears a white dress, the woman on the right wears a red and blue dress." src="https://i.guim.co.uk/img/media/6db9843604d2405a4ee4117387639bab135ec3ed/0_0_3500_3364/master/3500.jpg?width=445&amp;dpr=1&amp;s=none&amp;crop=none" width="445" height="427.7085714285715" loading="lazy"></picture></div><figcaption data-spacefinder-role="inline"><span><svg width="18" height="13" viewBox="0 0 18 13"><path d="M18 3.5v8l-1.5 1.5h-15l-1.5-1.5v-8l1.5-1.5h3.5l2-2h4l2 2h3.5l1.5 1.5zm-9 7.5c1.9 0 3.5-1.6 3.5-3.5s-1.6-3.5-3.5-3.5-3.5 1.6-3.5 3.5 1.6 3.5 3.5 3.5z"></path></svg></span><span>Frida Kahlo, The Two Fridas (1939).</span> Photograph: Archivart/Alamy</figcaption></figure><p>He said this with the kind of awe that one veteran trickster reserves for another. Despite the lies and lawsuits, BrÃ¼gger remains magnetised by Smajic. In one conversation, heâd mentioned his sole contribution to the decor of Smajicâs office: a print of The Two Fridas, in which Frida Kahlo painted herself twice, once with a gaping hole in her chest cavity, and again with a healthy heart and a small picture in her hand. âIâd hoped someone would come in and ask about it, but I didnât prepare Amira for that,â BrÃ¼gger said. This trap-within-a-trap is sprung in the fourth episode by a motorcycle thugâs curiosity, but Smajic improvises like a maestro. âItâs only when you cut out the heart that you can think coldly and rationally,â she explains. The picture the second Kahlo holds is of her child, Smajic ad-libs: âYou canât be cold if you have a family â¦ That was me then, and this is me now.â</p><p>BrÃ¼gger was delighted. âIt was brilliant. I became so happy and excited when I saw that. Itâs my favourite scene.â The journalist may often be cast as the seducer, coaxing information out of people, but heâs just as liable to be seduced â by the mirage of the perfect story, as clean and vivid as a comic book. For BrÃ¼gger, Smajic had initially promised to provide just that. When she turned out to be staging a perilous deception, throwing his production into chaos, he only grew further enthralled â perhaps because he recognised in Smajic an even more skilled version of himself.</p><hr><p><span>I</span>tâs difficult to feel sorry for Smajic, or for anyone in The Black Swan. The most moving passages in BrÃ¼ggerâs films always involve peripheral players in the great jape: the Ugandan villagers who are told they will be relocated so that an arms factory can be built on their land; or the North Korean interpreter who weeps at the memorial to Kim Il-Sung, claiming sheâs mourning him but possibly grieving for some other reason; or the Central African Republicans who take lessons in how to make matches in a factory that BrÃ¼gger will never build. To his credit, BrÃ¼gger acknowledges the odd pang of guilt in his voiceovers â but only in passing.</p><p>For The Ambassador, BrÃ¼gger flew an Indian match-exporter named Sumeet Mehta to the CAR for a few days, ostensibly to train his employees. The Ambassador came out in 2011, but until I called him recently, Mehta didnât know heâd featured in a documentary â or, indeed, that BrÃ¼gger was a film-maker and not a diplomat. âI was kind of afraid to go, but I went anyway,â Mehta said, sounding baffled. âI sensed this factory was some kind of gimmick, but I didnât know the reason behind it.â Ulrich Larsen told me that he wonders about the repercussions that the North Koreans unwittingly cast in The Mole might have suffered. âThe rough answer is: Iâm not responsible for what the regime does,â Larsen said. He hoped that âMr Kangâ, his translator in Pyongyang, was all right, âbut of course, nobody knows. I did what I could. I brought his daughter a Lego.â Like BrÃ¼gger, Larsen seemed to write it off as the cost of making an engrossing film. As BrÃ¼gger says in The Red Chapel: âFor your sake and mine, I have to lie.â</p><figure id="966ecf39-66e3-45f3-811a-b1a9553c0936" data-spacefinder-role="richLink" data-spacefinder-type="model.dotcomrendering.pageElements.RichLinkBlockElement"><gu-island name="RichLinkComponent" priority="feature" deferuntil="idle" props="{&quot;richLinkIndex&quot;:49,&quot;element&quot;:{&quot;_type&quot;:&quot;model.dotcomrendering.pageElements.RichLinkBlockElement&quot;,&quot;prefix&quot;:&quot;Related: &quot;,&quot;text&quot;:&quot;Who killed the prime minister? The unsolved murder that still haunts Sweden&quot;,&quot;elementId&quot;:&quot;966ecf39-66e3-45f3-811a-b1a9553c0936&quot;,&quot;role&quot;:&quot;richLink&quot;,&quot;url&quot;:&quot;https://www.theguardian.com/news/2019/may/16/olof-palme-sweden-prime-minister-unsolved-murder-new-evidence&quot;},&quot;ajaxUrl&quot;:&quot;https://api.nextgen.guardianapps.co.uk&quot;,&quot;format&quot;:{&quot;design&quot;:10,&quot;display&quot;:1,&quot;theme&quot;:0}}"></gu-island></figure><p>The Black Swan is such a careful, hermetically sealed production that it yields no such collateral damage, and I wondered if it was because BrÃ¼gger was less cavalier in his own country, with his compatriots. Most journalists begin their careers at home before venturing farther afield. BrÃ¼ggerâs has run in reverse â in part, I think, because he, too, had once bought into the image of Denmark as a safe, dull place where nothing ever happens. âIâve come to Africa because <a href="https://www.theguardian.com/world/europe-news" data-link-name="in body link" data-component="auto-linked-tag">Europe</a> has become old and tired,â he says in The Ambassador â a sentence that could have been uttered by a European man in any of the last half-dozen centuries. It was a backhanded jibe: a suggestion that Europe was no longer troubled by the anarchic social disorder that he desires in his films. The Black Swan showed BrÃ¼gger can find all that he craves at home: conspiracy, corruption, shape-shifters, sensation, stories that evaporate like dry ice or swallow you like quicksand. The world is full of lies, not least the ones we tell ourselves.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Blasting Past WebP - An analysis of the NSO BLASTPASS iMessage exploit (194 pts)]]></title>
            <link>https://googleprojectzero.blogspot.com/2025/03/blasting-past-webp.html</link>
            <guid>43493056</guid>
            <pubDate>Thu, 27 Mar 2025 12:49:44 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://googleprojectzero.blogspot.com/2025/03/blasting-past-webp.html">https://googleprojectzero.blogspot.com/2025/03/blasting-past-webp.html</a>, See on <a href="https://news.ycombinator.com/item?id=43493056">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-4442255878341841259" itemprop="description articleBody">

 <p id="h.7totxo172g4m"><span>An analysis of the NSO BLASTPASS iMessage exploit</span></p>
 <p><span>Posted by Ian Beer, Google Project Zero</span></p>
 
 <p><span>On September 7, 2023 Apple </span><span><a href="https://support.apple.com/en-us/106361">issued</a></span><span>&nbsp;an out-of-band security update for iOS:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpVzqhKSxPZc0TxpxC_Ka4_MVC3fJD4u9HbPMnh5jE4_tLYK08va_RroD4K3PkzOHV5SLJa8ovjXtUpF5FJRaA2SBW-SFv4fELlDeF8kEznmeBu4Zzi-kV_AMIlQLXBZTgUj9s6WQvkpE041lbp2XmSqGkj4u49X9EQOdNCeum_m1acT1HAul-xsuToi0/s1748/image8.png"><img alt="Release notes for iOS 16.6.1 and iPadOS 16.6.1, including CVE-2023-41064 for ImageIO and CVE-2023-41061 for Wallet, detailing security updates and potential exploitation." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhpVzqhKSxPZc0TxpxC_Ka4_MVC3fJD4u9HbPMnh5jE4_tLYK08va_RroD4K3PkzOHV5SLJa8ovjXtUpF5FJRaA2SBW-SFv4fELlDeF8kEznmeBu4Zzi-kV_AMIlQLXBZTgUj9s6WQvkpE041lbp2XmSqGkj4u49X9EQOdNCeum_m1acT1HAul-xsuToi0/s1200/image8.png" title="Release notes for iOS 16.6.1 and iPadOS 16.6.1, including CVE-2023-41064 for ImageIO and CVE-2023-41061 for Wallet, detailing security updates and potential exploitation."></a></span></p>
 
 <p><span>Around the same time on September 7th 2023, </span><span><a href="https://citizenlab.ca/2023/09/blastpass-nso-group-iphone-zero-click-zero-day-exploit-captured-in-the-wild/">Citizen Lab published a blog post</a></span><span>&nbsp;linking the two CVEs fixed in iOS 16.6.1 to an "NSO Group Zero-Click, Zero-Day exploit captured in the wild":</span></p>
 
 <p><span>"</span><span>[The target was] an individual employed by a Washington DC-based civil society organization with international offices...</span></p>
 
 <p><span>The exploit chain was capable of compromising iPhones running the latest version of iOS (16.6) without any interaction from the victim.</span></p>
 
 <p><span>The exploit involved PassKit attachments containing malicious images sent from an attacker iMessage account to the victim."</span></p>
 
 <p><span>The day before, on September 6th 2023, Apple </span><span><a href="https://issues.chromium.org/issues/40071416">reported a vulnerability to the WebP project</a></span><span>, indicating in the report that they planned to ship a custom fix for Apple customers the next day.</span></p>
 
 <p><span>The WebP team posted their first </span><span><a href="https://chromium.googlesource.com/webm/libwebp/%2B/902bc9190331343b2017211debcec8d2ab87e17a">proposed fix</a></span><span>&nbsp;in the public git repo the next day, and five days after that on September 12th Google released a </span><span><a href="https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_12.html">new Chrome stable release</a></span><span>&nbsp;containing the WebP fix. Both Apple and Google marked the issue as exploited in the wild, alerting other integrators of WebP that they should rapidly integrate the fix as well as causing the security research community to take a closer look...</span></p>
 
 <p><span>A couple of weeks later on September 21st 2023, former Project Zero team lead Ben Hawkes (in collaboration with </span><span><a href="https://x.com/mistymntncop">@mistymntncop</a></span><span>) published the </span><span><a href="https://blog.isosceles.com/the-webp-0day/">first detailed writeup</a></span><span>&nbsp;of the root cause of the vulnerability on the </span><span>Isosceles</span><span>&nbsp;Blog. A couple of months later, on November 3rd, a group called </span><span><a href="https://www.darknavy.org/">Dark Navy</a></span><span>&nbsp;published their first blog post: a two-part analysis (</span><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_1/">Part 1</a></span><span>&nbsp;- </span><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_2/">Part 2</a></span><span>) of the WebP vulnerability and a </span><span><a href="https://github.com/DarkNavySecurity/PoC/tree/main/CVE-2023-4863">proof-of-concept exploit</a></span><span>&nbsp;targeting Chrome (CVE-2023-4863).</span></p>
 
 
 <p><span>Whilst the Isosceles and Dark Navy posts explained the underlying memory corruption vulnerability in great detail, they were unable to solve another fascinating part of the puzzle: just how exactly do you land an exploit for this vulnerability in a one-shot, zero-click setup? As we'll soon see, the corruption primitive is very limited. Without access to the samples it was almost impossible to know.</span></p>
 
 <p><span>In mid-November, in collaboration with </span><span><a href="https://securitylab.amnesty.org/">Amnesty International Security Lab</a></span><span>, I was able to obtain a number of BLASTPASS </span><span><a href="https://en.wikipedia.org/wiki/PKPASS">PKPass</a></span><span>&nbsp;sample files as well as crash logs from failed exploit attempts.</span></p>
 
 <p><span>This blog post covers my analysis of those samples and the journey to figure out how one of NSO's recent zero-click iOS exploits really worked. For me that journey began by immediately taking three months of paternity leave, and resumed in March 2024 where this story begins:</span></p><h3 id="h.l3phtwrgqdig"><span>Setting the scene</span></h3>
 <p><span>For a detailed analysis of the root-cause of the WebP vulnerability and the primitive it yields, I recommend first reading the three blog posts I mentioned earlier (</span><span><a href="https://blog.isosceles.com/the-webp-0day/">Isosceles</a></span><span>, </span><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_1/">Dark Navy 1</a></span><span>, </span><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_2/">Dark Navy 2</a></span><span>.) I won't restate their analyses here (both because you should read their original work, and because it's quite complicated!) Instead I'll briefly discuss WebP and the corruption </span><span>primitive the vulnerability</span><span>&nbsp;yields.</span></p><h3 id="h.115gmx6di0dd"><span>WebP</span></h3>
 <p><span><a href="https://developers.google.com/speed/webp">WebP</a></span><span>&nbsp;is a relatively modern image file format, first released in 2010. In reality WebP is actually two completely distinct image formats: </span><span><a href="https://developers.google.com/speed/webp/docs/compression%23lossy_webp">a lossy format</a></span><span>&nbsp;based on the VP8 video codec and a separate </span><span><a href="https://developers.google.com/speed/webp/docs/compression%23lossless_webp">lossless format</a></span><span>. The two formats share nothing apart from both using a </span><span><a href="https://en.wikipedia.org/wiki/Resource_Interchange_File_Format">RIFF</a></span><span>&nbsp;container and the string </span><span>WEBP</span><span>&nbsp;for the first chunk name. From that point on (12 bytes into the file) they are completely different. The vulnerability is in the lossless format, with the RIFF chunk name </span><span>VP8L</span><span>.</span></p>
 
 <p><span>Lossless WebP makes extensive use of </span><span><a href="https://en.wikipedia.org/wiki/Huffman_coding">Huffman coding</a></span><span>; there are at least 10 huffman trees present in the BLASTPASS sample. In the file they're stored as </span><span><a href="https://en.wikipedia.org/wiki/Canonical_Huffman_code">canonical huffman trees</a></span><span>, meaning that only the code lengths are retained. At decompression time those lengths are converted directly into a two-level huffman decoding table, with the five largest tables all getting squeezed together into the same pre-allocated buffer. The (it turns out not quite) maximum size of these tables is pre-computed based on the number of symbols they encode. If you're up to this part and you're slightly lost, the other three blogposts referenced above explain this in detail.</span></p>
 
 <p><span>With control over the symbol lengths it's possible to define all sorts of strange trees, many of which aren't valid. The fundamental issue was that the WebP code only checked the validity of the tree </span><span>after</span><span>&nbsp;building the decoding table. But the pre-computed size of the decoding table was only correct for </span><span>valid</span><span>&nbsp;trees.</span></p>
 
 <p><span>As the Isosceles blog post points out, this means that a fundamental part of the vulnerability is that triggering the bug </span><span>is</span><span>&nbsp;detected, though after memory has been corrupted, and image parsing stops only a few lines of code later</span><span>. This presents another exploitation mystery: in a zero-click context, how do you exploit a bug where every time the issue is triggered it also stops parsing any attacker-controlled data?</span></p>
 
 <p><span>The second mystery involves the actual corruption primitive. The vulnerability will write a </span><span>HuffmanCode</span><span>&nbsp;structure at a known offset past the end of the huffman tables buffer:</span></p>
 
 <p><span>// Huffman lookup table entry</span></p>
 <p><span>typedef struct {</span></p>
 <p><span>&nbsp; uint8_t bits;</span></p>
 <p><span>&nbsp; uint16_t value;</span></p>
 <p><span>} HuffmanCode;</span></p>
 
 <p><span><a href="https://www.darknavy.org/blog/exploiting_the_libwebp_vulnerability_part_1/%23how-to-control-the-data-to-write">As DarkNavy point out</a></span><span>, whilst the </span><span>bits</span><span>&nbsp;and </span><span>value</span><span>&nbsp;fields are nominally attacker-controlled, in reality there isn't that much flexibility. The fifth huffman table (the one at the end of the preallocated buffer, part of which can get written </span><span>out-of-bounds</span><span>) only has </span><span>40</span><span>&nbsp;symbols, limiting </span><span>value</span><span>&nbsp;to a maximum value of </span><span>39</span><span>&nbsp;(</span><span>0x27</span><span>) and </span><span>bits</span><span>&nbsp;will be between </span><span>1</span><span>&nbsp;and </span><span>7</span><span>&nbsp;(for a second-level table entry). There's a padding byte between </span><span>bits</span><span>&nbsp;and </span><span>value</span><span>&nbsp;which makes the largest value that could be written out-of-bounds </span><span>0x00270007</span><span>. And it just so happens that that's exactly the value which the exploit does write â and they likely didn't have that much choice about it.</span></p>
 
 <p><span>There's also not much flexibility in the huffman table allocation size. The table allocation in the exploit is </span><span>12072</span><span>&nbsp;(</span><span>0x2F28</span><span>) bytes, which will get rounded up to fit within a </span><span>0x3000</span><span>&nbsp;byte libmalloc </span><span>small</span><span>&nbsp;region. The code lengths are chosen such that the overflow occurs like this:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgDhw37v8HaNAcUY9lTzT-ePEPn_stvb57BbFv0ktM5_XCGEvQD2Mego6iMH3bBO8EZgWOfhFhg-e5R1YoUquDFdVwBWX6QRHIcccAWJnWQXlxwSU44nDYIQF_MCldcENnaef5JPaCR1Nmam7NrnZD2yng0BPEfrIDnIfww-efdAECA5F4UaSDfGi1dSJY/s766/image10.png"><img alt="Memory layout diagram showing Huffman tables at offset 0x3000 and the structure of a Huffman lookup table entry at offset 0x3058." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgDhw37v8HaNAcUY9lTzT-ePEPn_stvb57BbFv0ktM5_XCGEvQD2Mego6iMH3bBO8EZgWOfhFhg-e5R1YoUquDFdVwBWX6QRHIcccAWJnWQXlxwSU44nDYIQF_MCldcENnaef5JPaCR1Nmam7NrnZD2yng0BPEfrIDnIfww-efdAECA5F4UaSDfGi1dSJY/s766/image10.png" title="Memory layout diagram showing Huffman tables at offset 0x3000 and the structure of a Huffman lookup table entry at offset 0x3058."></a></span></p>
 
 <p><span>To summarize: The 32-bit value </span><span>0x270007</span><span>&nbsp;will be written </span><span>0x58</span><span>&nbsp;bytes past the end of a </span><span>0x3000</span><span>&nbsp;byte huffman table allocation. And then WebP parsing will fail, and the decoder will bail out.</span></p><h3 id="h.ow3137rwwm6g"><span>DÃ©jÃ  vu?</span></h3>
 <p><span>Long-term readers of the Project Zero blog might be experiencing a sense of dÃ©jÃ  vu at this point... haven't I already written a blog post about an NSO zero-click iPhone zero day exploiting a vulnerability in a slightly obscure lossless compression format used in an image parsed from an iMessage attachment?</span></p>
 
 <p><span><a href="https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html">Indeed</a></span><span>.</span></p>
 
 <p><span>BLASTPASS has many similarities with </span><span><a href="https://en.wikipedia.org/wiki/FORCEDENTRY">FORCEDENTRY</a></span><span>, and my initial hunch (which turned out to be completely wrong) was that this exploit might take a similar approach to build a weird machine using some fancier WebP features. To that end I started out by writing a WebP parser to see what features were actually used.</span></p><h3 id="h.2q4vz1fpty3b"><span>Transformation</span></h3>
 <p><span>In a very similar fashion to </span><span><a href="https://en.wikipedia.org/wiki/JBIG2">JBIG2</a></span><span>, WebP also </span><span><a href="https://developers.google.com/speed/webp/docs/webp_lossless_bitstream_specification">supports</a></span><span>&nbsp;invertible transformations on the input pixel data:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisPMddn7TKdOEgMlAvECAc_0pAKivdDJ6Zs0O-FmBK8MOiTFlpnf5SUTXiaHcK0EYE733CtDTMboqnyHpUNw-2FTMA606fQvta_MUm0TPwoY6GeZHctPb-MKo4U73mbXbF0XGAZG4UtB3iqTCW_sUFYvY7VAKxIQJQRc8ZsmE678can0zHE445bOnVVG8/s1964/image12.png"><img alt="Screenshot of WebP documentation explaining '4 Transforms' and their role in image compression." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisPMddn7TKdOEgMlAvECAc_0pAKivdDJ6Zs0O-FmBK8MOiTFlpnf5SUTXiaHcK0EYE733CtDTMboqnyHpUNw-2FTMA606fQvta_MUm0TPwoY6GeZHctPb-MKo4U73mbXbF0XGAZG4UtB3iqTCW_sUFYvY7VAKxIQJQRc8ZsmE678can0zHE445bOnVVG8/s1200/image12.png" title="Screenshot of WebP documentation explaining '4 Transforms' and their role in image compression."></a></span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjOaeJ5e_hL-BxqWZFAVyDb38AlNiW53Uf_67I9jiMTNvSRP8sJbF6GOZtxM587_jVZPDvL84Lu2P7D4HshHEwN5Ui3KBUMa7zmv8hh5bMvThElMj7-5k1lefL5siOGS1M2uu8lW-FjV-0ZQSUstBbbkETa10kFbWFE-65ZAb_S5Qpw-fuZvnQ2GusU33I/s1356/image3.png"><img alt="Screenshot of a table listing pixel prediction modes with corresponding formulas for calculating predicted values." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjOaeJ5e_hL-BxqWZFAVyDb38AlNiW53Uf_67I9jiMTNvSRP8sJbF6GOZtxM587_jVZPDvL84Lu2P7D4HshHEwN5Ui3KBUMa7zmv8hh5bMvThElMj7-5k1lefL5siOGS1M2uu8lW-FjV-0ZQSUstBbbkETa10kFbWFE-65ZAb_S5Qpw-fuZvnQ2GusU33I/s1200/image3.png" title="Screenshot of a table listing pixel prediction modes with corresponding formulas for calculating predicted values."></a></span></p>
 
 <p><span>My initial theory was that the exploit might operate in a similar fashion to FORCEDENTRY and apply sequences of these transformations outside of the bounds of the image buffer to build a weird machine. But after implementing enough of the WebP format in python to parse every bit of the </span><span>VP8L</span><span>&nbsp;chunk it became pretty clear that it was only triggering the Huffman table overflow and nothing more. The VP8L chunk was only </span><span>1052</span><span>&nbsp;bytes, and pretty much all of it was the 10 Huffman tables needed to trigger the overflow.</span></p><h3 id="h.jkdp8pyrc6re"><span>What's in a pass?</span></h3>
 <p><span>Although BLASTPASS is often referred to as an exploit for "the WebP vulnerability", the attackers don't actually just send a WebP file (even though that is supported in iMessage). They send a </span><span><a href="https://developer.apple.com/documentation/passkit_apple_pay_and_wallet">PassKit</a></span><span>&nbsp;PKPass file, which contains a WebP. There must be a reason for this. So let's step back and actually take a look at one of the sample files I received:</span></p>
 
 <p><span>171K sample.pkpass</span></p>
 
 <p><span>$ file sample.pkpass </span></p>
 <p><span>sample.pkpass: Zip archive data, at least v2.0 to extract, compression method=deflate</span></p>
 
 <p><span>There are five files inside the PKPass zip archive:</span></p>
 
 <p><span>60K &nbsp;background.png</span></p>
 <p><span>5.5M logo.png</span></p>
 <p><span>175B manifest.json</span></p>
 <p><span>18B &nbsp;pass.json</span></p>
 <p><span>3.3K signature</span></p>
 
 <p><span>The 5.5MB </span><span>logo.png</span><span>&nbsp;is the WebP image, just with a </span><span>.png</span><span>&nbsp;extension instead of </span><span>.webp</span><span>:</span></p>
 
 <p><span>$ file logo.png:</span></p>
 <p><span>logo.png: &nbsp; &nbsp; &nbsp; &nbsp; RIFF (little-endian) data, Web/P image</span></p>
 
 <p><span>The closest thing to a specification for the PKPass format appears to be the </span><span><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/PassKit_PG/Creating.html">Wallet Developer Guide</a></span><span>, and whilst it doesn't explicitly state that the </span><span>.png</span><span>&nbsp;files should actually be Portable Network Graphics images, that's presumably the intention. This is yet another parallel with FORCEDENTRY, where a similar trick was used to reach the PDF parser when attempting to parse a GIF.</span></p>
 
 <p><span>PKPass files require a valid signature which is contained in </span><span>manifest.json</span><span>&nbsp;and </span><span>signature</span><span>. The signature has a presumably fake name and more timestamps indicating that the PKPass is very likely being generated and signed on the fly for each exploit attempt.</span></p>
 
 <p><span>pass.json</span><span>&nbsp;is just this:</span></p>
 
 <p><span>{"pass": "PKpass"}</span></p>
 
 <p><span>Finally </span><span>background.png</span><span>:</span></p>
 
 <p><span>$ file background.png </span></p>
 <p><span>background.png: TIFF image data, big-endian, direntries=15, height=16, bps=0, compression=deflate, PhotometricIntepretation=RGB, orientation=upper-left, width=48</span></p>
 
 <p><span>Curious. Another file with a misleading extension; this time a </span><span>TIFF</span><span>&nbsp;file with a </span><span>.png</span><span>&nbsp;extension. </span></p>
 
 <p><span>We'll return to this TIFF later in the analysis as it plays a critical role in the exploit flow, but for now we'll focus on the WebP, with one short diversion:</span></p><h3 id="h.cf35pgn7ecq3"><span>Blastdoor</span></h3>
 <p><span>So far I've only mentioned the WebP vulnerability, but the Apple advisory I linked at the start of this post mentions two separate CVEs:</span></p>
 
 <p><span>The first, CVE-2023-41064 in ImageIO, is the WebP bug (though just to keep things confusing with a different CVE from the upstream WebP fix which is CVE-2023-4863 - they're the same vulnerability though).</span></p>
 
 <p><span>The second, CVE-2023-41061 in "Wallet", is described in the Apple advisory as: "</span><span>A maliciously crafted attachment may result in arbitrary code execution</span><span>".</span></p>
 
 <p><span>The </span><span><a href="https://blog.isosceles.com/the-webp-0day/">Isosceles blog post</a></span><span>&nbsp;hypothesises:</span></p>
 
 <p><span>"</span><span>Citizen Lab called this attack "BLASTPASS", since the attackers found a clever way to bypass the "BlastDoor" iMessage sandbox. We don't have the full technical details, but it looks like by bundling an image exploit in a PassKit attachment, the malicious image would be processed in a different, unsandboxed process. This corresponds to the first CVE that Apple released, CVE-2023-41061.</span><span>"</span></p>
 
 <p><span>This theory makes sense â FORCEDENTRY had a similar trick where the </span><span><a href="https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html">JBIG2 bug was actually exploited inside </a></span><span><a href="https://googleprojectzero.blogspot.com/2022/03/forcedentry-sandbox-escape.html">IMTranscoderAgent</a></span><span>&nbsp;instead of the more restrictive sandbox of BlastDoor. But in all my experimentation, as well as all the in-the-wild crash logs I've seen, this hypothesis doesn't seem to hold.</span></p>
 
 <p><span>The PKPass file and the images enclosed within </span><span>do</span><span>&nbsp;get parsed inside the BlastDoor sandbox and that's where the crashes occur or the payload executes â later on we'll also see evidence that the </span><span>NSExpression</span><span>&nbsp;payload which eventually gets evaluated expects to be running </span><span>inside</span><span>&nbsp;BlastDoor.</span></p>
 
 <p><span>My guess is that CVE-2023-41061 is more likely referring to the lax parsing of PKPasses which didn't reject images which weren't </span><span>png'</span><span>s.</span></p>
 
 <p><span>In late 2024</span><span>, I received another set of in-the-wild crash logs including two which do in fact strongly indicate that there was also a path to hit the WebP vulnerability in the MobileSMS process, outside the BlastDoor sandbox! Interestingly, the timestamps indicate that these devices were targeted in November 2023, two months after the vulnerability was patched.</span></p>
 
 <p><span>In those cases the WebP code was reached inside the MobileSMS process via a </span><span>ChatKit</span><span>&nbsp;</span><span>CKPassPreviewMediaObject</span><span>&nbsp;created by a </span><span>CKAttachmentMessagePartChatItem</span><span>.</span></p><h3 id="h.le24xell6lgv"><span>What's in a WebP?</span></h3>
 <p><span>I mentioned that the </span><span>VP8L</span><span>&nbsp;chunk in the WebP file is only around 1KB. Yet in the file listing above the WebP file is 5.5MB! So what's in the rest of it? Expanding out my WebP parser we see that there's one more RIFF chunk:</span></p>
 
 <p><span>EXIF : 0x586bb8</span></p>
 <p><span>exif is Intel byte alignment</span></p>
 <p><span>EXIF has n_entries=1</span></p>
 <p><span>tag=8769 fmt=4 n_components=1 data=1a</span></p>
 <p><span>subIFD has n_entries=1</span></p>
 <p><span>tag=927c fmt=7 n_components=586b8c data=2c</span></p>
 
 <p><span>It's a (really really huge) </span><span><a href="https://en.wikipedia.org/wiki/Exif">EXIF</a></span><span>&nbsp;- the standard format which cameras use to store image metadata â stuff like the camera model, exposure time, f-stop etc.</span></p>
 
 <p><span>It's a tag-based format and pretty much all 5.5MB is inside one tag with the id </span><span>0x927c</span><span>. So what's that?</span></p>
 
 <p><span>Looking through an </span><span><a href="https://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif.html">online list of EXIF tags</a></span><span>&nbsp;just below the lens FocalLength tag and above the UserComment tag we spot </span><span>0x927c</span><span>:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi4qMYlckEAJZhphzfIDHw4kQg6htOmpV99VYzwChysKpCA9l6gNZriWUdWxws3xcVGIq7Hl3WNtBmNdXLQC6ezsQ6lPjdRHhv2z9LHCXhWPwTuSnxJGURaDEhBz_ZjjPLviIO3Y87lo3VHmTFyLhONCSE_RAWzZ6-iVm-Yub5AQ5Q5wo2K31SZBdvL83s/s1999/image4.png"><img alt="Screenshot of a table listing EXIF tag definitions. The table includes columns for tag number, tag name, and description. The row for tag number 0x927C with the tag name 'MakerNote' is highlighted in red, with the description 'Manufacturer specific information'." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi4qMYlckEAJZhphzfIDHw4kQg6htOmpV99VYzwChysKpCA9l6gNZriWUdWxws3xcVGIq7Hl3WNtBmNdXLQC6ezsQ6lPjdRHhv2z9LHCXhWPwTuSnxJGURaDEhBz_ZjjPLviIO3Y87lo3VHmTFyLhONCSE_RAWzZ6-iVm-Yub5AQ5Q5wo2K31SZBdvL83s/s1200/image4.png" title="Screenshot of a table listing EXIF tag definitions. The table includes columns for tag number, tag name, and description. The row for tag number 0x927C with the tag name 'MakerNote' is highlighted in red, with the description 'Manufacturer specific information'."></a></span></p>
 
 <p><span>It's the very-vague-yet-fascinating sounding: "</span><span>MakerNote - Manufacturer specific information.</span><span>"</span></p>
 
 <p><span>Looking to </span><span><a href="https://en.wikipedia.org/wiki/Exif">Wikipedia for some clarification</a></span><span>&nbsp;on what that actually is, we learn that </span></p>
 
 <p><span>"the "MakerNote" tag contains information normally in a proprietary binary format."</span></p>
 
 <p><span>Modifying the webp parser to now dump out the MakerNote tag we see:</span></p>
 
 <p><span>$ file sample.makernote </span></p>
 <p><span>sample.makernote: Apple binary property list</span></p>
 
 <p><span>Apple's chosen format for the "proprietary binary format" is binary plist!</span></p>
 
 <p><span>And indeed: looking through the ImageIO library in IDA there's a clear path between the WebP parser, the EXIF parser, the MakerNote parser and the binary plist parser.</span></p><h3 id="h.9tu54e9o1ow0"><span>unbplisting</span></h3>
 <p><span>I covered the binary plist format in </span><span><a href="https://googleprojectzero.blogspot.com/2023/10/an-analysis-of-an-in-the-wild-ios-safari-sandbox-escape.html">a previous blog post</a></span><span>. That was the second time I'd had to analyse a large bplist. The first time (for the FORCEDENTRY sandbox escape) it was possible mostly by hand, just using the human-readable output of </span><span>plutil</span><span>. Last year, for the Safari sandbox escape analysis, the bplist was 437KB and I had to write a custom bplist parser to figure out what was going on. Keeping the exponential curve going this year the bplist was 10x larger again.</span></p>
 
 <p><span>In this case it's fairly clear that the bplist must be a heap groom - and at 5.5MB, presumably a fairly complicated one. So what's it doing?</span></p><h3 id="h.dwp3fpvl5otv"><span>Switching Views</span></h3>
 <p><span>I had a hunch that the bplist would use duplicate dictionary keys as a fundamental building block for the heap groom, but running my parser it didn't output any... until I realised that my tool stored the parsed dictionaries directly as python dictionaries before dumping them. Fixing the tools to instead keep lists of keys and values it became clear that there were duplicate keys. Lots of them:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhi8ixELdnlgPEAlry1qJUaZAL0gu_lmlCy2OFHIpWIe3Jdmc89ST1jaPfEyInzGSxxUEbtX5L0dk5d5Z9L1RPSpDS0FDG_PJtCfy-HLcQBMYHZNokkE1XEgizDmBr_5Sww7JxA7joYE7zI0fMbuUt-34d5pXHAHSplO9t7lhzRMk7NObBmdIaPGkEe4eY/s1999/image6.png"><img alt="Screenshot of code showing a series of nested dictionary creations / duplicate keys" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhi8ixELdnlgPEAlry1qJUaZAL0gu_lmlCy2OFHIpWIe3Jdmc89ST1jaPfEyInzGSxxUEbtX5L0dk5d5Z9L1RPSpDS0FDG_PJtCfy-HLcQBMYHZNokkE1XEgizDmBr_5Sww7JxA7joYE7zI0fMbuUt-34d5pXHAHSplO9t7lhzRMk7NObBmdIaPGkEe4eY/s1200/image6.png" title="Screenshot of code showing a series of nested dictionary creations / duplicate keys"></a></span></p>
 
 <p><span>In the Safari exploit writeup I described how I used different visualisation techniques to try to explore the structure of the objects, looking for patterns I could use to simplify what was going on. In this case, modifying the parser to emit well-formed curly brackets and indentation then relying on </span><span><a href="https://code.visualstudio.com/">VS Code</a></span><span>'s automatic code-folding proved to work well enough for browsing around and getting a feel for the structure of the groom object.</span></p>
 
 <p><span>Sometimes the right visualisation technique is sufficient to figure out what the exploit is trying to do. In this case, where the primitive is a heap-based buffer overflow, the groom will inevitably try to put two things next to each other in memory and I want to know "what two things?"</span></p>
 
 <p><span>But no matter how long I stared and scrolled, I couldn't figure anything out. Time to try something different.</span></p><h3 id="h.qsa5rb3wbgxp"><span>Instrumentation</span></h3>
 <p><span>I wrote a small helper to load the bplist using the same API as the </span><span>MakerNote</span><span>&nbsp;parser and ran it using the Mac Instruments app:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEioXK-ctrJxcKGIj-UEWZpLrFDR6z8L4jtEne1cJrcBpAEM_jYaHWn1NaQ_-DEAf7kZ8PSgrk1pzy11pe9TGfurgmHfFwW3MezoSrdZ_KQJzMUEIjkiL7mWt-gE-3XOiK1ooX7AibTNufcXkAjlWqS-x87ld2xLNm7sDygVVgduf_npeudyoA0645BDRuw/s1999/image1.png"><img alt="Screenshot of Instruments app showing memory allocation with detailed information for the top three categories: 'All Heap &amp; Anonymous...', 'CFString (store)', and 'Malloc 16.00 KiB'" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEioXK-ctrJxcKGIj-UEWZpLrFDR6z8L4jtEne1cJrcBpAEM_jYaHWn1NaQ_-DEAf7kZ8PSgrk1pzy11pe9TGfurgmHfFwW3MezoSrdZ_KQJzMUEIjkiL7mWt-gE-3XOiK1ooX7AibTNufcXkAjlWqS-x87ld2xLNm7sDygVVgduf_npeudyoA0645BDRuw/s1200/image1.png" title="Screenshot of Instruments app showing memory allocation with detailed information for the top three categories: 'All Heap &amp; Anonymous...', 'CFString (store)', and 'Malloc 16.00 KiB'"></a></span></p>
 
 <p><span>Parsing the single 5.5MB bplist causes nearly half a million allocations, churning through nearly a gigabyte of memory. Just looking through this allocation summary it's clear there's lots of </span><span>CFString</span><span>&nbsp;and </span><span>CFData</span><span>&nbsp;objects, likely used for heap shaping. Looking further down the list there are other interesting numbers:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTNContQj1sCDNIzAplyRVfRMR6y1vgjkGkRBbKXdlIrmiVV90kTNmxSvWwcv4iQ7Ju6W_bbrmqoh7k7UoTvytds40F1p7WUWhGmMtk8a5LfZuVNt7P1VjwZJ980-Xee42x_rNEK_HTmGSkPy8xucdhd0eyHj5XCcH3PwPfN5ZmzbNXR0hu_T6UNwZlbE/s1428/image11.png"><img alt="Memory allocation table showing 'All Heap &amp; Anonymous...' using 990.66 MiB of total bytes, with 660.77 MiB being persistent." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhTNContQj1sCDNIzAplyRVfRMR6y1vgjkGkRBbKXdlIrmiVV90kTNmxSvWwcv4iQ7Ju6W_bbrmqoh7k7UoTvytds40F1p7WUWhGmMtk8a5LfZuVNt7P1VjwZJ980-Xee42x_rNEK_HTmGSkPy8xucdhd0eyHj5XCcH3PwPfN5ZmzbNXR0hu_T6UNwZlbE/s1200/image11.png" title="Memory allocation table showing 'All Heap &amp; Anonymous...' using 990.66 MiB of total bytes, with 660.77 MiB being persistent."></a></span></p>
 
 <p><span>The </span><span>20'000</span><span>&nbsp;in the last line is far too round a number to be a coincidence. This number matches up with the number of </span><span>__NSDictionaryM</span><span>&nbsp;objects allocated:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFVqxOaJc8pyHBEa74GIoOpG-Y7TbNOvBcaslTYe3e-sFEe7nW2GjN4YA0xlKhmd0FT8c1vCkY5OwWtGdsO_tGDic8CZC3jHHe9HKy33YMGRrdp_yyPUvdtOQkaL3kVTV1p8eZT_LzWsKoCSOZIFVd_t3zszVFhlQhYARImnbr7sKHO7n56fDyEKmQmGA/s1510/image7.png"><img alt="Table displaying memory usage broken down by allocation size, showing the number of allocations, the size of each allocation, and the total memory used for each size. In the middle of the image, there are 20000 __NSDictionaryM objects allocated." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFVqxOaJc8pyHBEa74GIoOpG-Y7TbNOvBcaslTYe3e-sFEe7nW2GjN4YA0xlKhmd0FT8c1vCkY5OwWtGdsO_tGDic8CZC3jHHe9HKy33YMGRrdp_yyPUvdtOQkaL3kVTV1p8eZT_LzWsKoCSOZIFVd_t3zszVFhlQhYARImnbr7sKHO7n56fDyEKmQmGA/s1200/image7.png" title="Table displaying memory usage broken down by allocation size, showing the number of allocations, the size of each allocation, and the total memory used for each size. In the middle of the image, there are 20000 __NSDictionaryM objects allocated."></a></span></p>
 
 <p><span>Finally, at the very bottom of the list there are two more allocation patterns which stand out:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiqhUsJFzltLPjA4xT4zUvWvbkRNrboNac_h7srw04M3PhAisiqgVw5EmdczdjaCP7sDwUwfqU1TR6d27MY0EzAEHOwGfWz6mNx2GJJmRyKEmY_JeV8Mvtzx41up9VSGRV3d9kYbKB4DZ8bNXkwQc0wCUR7BFU445qNnY2-euwBgJIu2p_-re5PXC7hEx8/s1622/image9.png"><img alt="Screenshot of a table listing memory allocations with details like size, count, and total bytes, highlighting two sets of very large allocations: eighty 1MB allocations and 44 4MB ones." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiqhUsJFzltLPjA4xT4zUvWvbkRNrboNac_h7srw04M3PhAisiqgVw5EmdczdjaCP7sDwUwfqU1TR6d27MY0EzAEHOwGfWz6mNx2GJJmRyKEmY_JeV8Mvtzx41up9VSGRV3d9kYbKB4DZ8bNXkwQc0wCUR7BFU445qNnY2-euwBgJIu2p_-re5PXC7hEx8/s1200/image9.png" title="Screenshot of a table listing memory allocations with details like size, count, and total bytes, highlighting two sets of very large allocations: eighty 1MB allocations and 44 4MB ones."></a></span></p>
 
 <p><span>There are two sets of very large allocations: eighty 1MB allocations and 44 4MB ones.</span></p>
 
 <p><span>I modified my bplist tool again to dump out each unique string or data buffer, along with a count of how many times it was seen and its hash. Looking through the file listing there's a clear pattern:</span></p>
 <table><tbody><tr><td colspan="1" rowspan="1">
 <p><span>Object Size</span></p></td><td colspan="1" rowspan="1">
 <p><span>Count</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x3FFFFF</span></p></td><td colspan="1" rowspan="1">
 <p><span>44</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0xFFFFF</span></p></td><td colspan="1" rowspan="1">
 <p><span>80</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x3FFF</span></p></td><td colspan="1" rowspan="1">
 <p><span>20</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x26A9</span></p></td><td colspan="1" rowspan="1">
 <p><span>24978</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x2554</span></p></td><td colspan="1" rowspan="1">
 <p><span>44</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x23FF</span></p></td><td colspan="1" rowspan="1">
 <p><span>5822</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x22A9</span></p></td><td colspan="1" rowspan="1">
 <p><span>4</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x1FFF</span></p></td><td colspan="1" rowspan="1">
 <p><span>2</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x1EA9</span></p></td><td colspan="1" rowspan="1">
 <p><span>26</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x1D54</span></p></td><td colspan="1" rowspan="1">
 <p><span>40</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x17FF</span></p></td><td colspan="1" rowspan="1">
 <p><span>66</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x13FF</span></p></td><td colspan="1" rowspan="1">
 <p><span>66</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x3FF</span></p></td><td colspan="1" rowspan="1">
 <p><span>322</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x3D7</span></p></td><td colspan="1" rowspan="1">
 <p><span>404</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0xF</span></p></td><td colspan="1" rowspan="1">
 <p><span>112882</span></p></td></tr><tr><td colspan="1" rowspan="1">
 <p><span>0x8</span></p></td><td colspan="1" rowspan="1">
 <p><span>3</span></p></td></tr></tbody></table>
 
 
 <p><span>There are a large number of allocations which fall just below a "round" number in hexadecimal: </span><span>0x3ff</span><span>, </span><span>0x13ff</span><span>, </span><span>0x17ff</span><span>, </span><span>0x1fff</span><span>, </span><span>0x23ff</span><span>, </span><span>0x3fff</span><span>... That heavily hints that they are sized to fall exactly within certain allocator size buckets.</span></p>
 
 <p><span>Almost all of the allocations are just filled with zeros or '</span><span>A</span><span>'s. But the 1MB one is quite different:</span></p>
 
 <p><span>$ hexdump -C 170ae757_80.bin | head -n 20</span></p>
 
 <p><span>00000000 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000010 &nbsp;00 00 00 00 00 00 00 00 &nbsp;80 26 00 00 01 00 00 00 &nbsp;|.........&amp;......|</span></p>
 <p><span>00000020 &nbsp;1f 00 00 00 00 00 00 00 &nbsp;10 00 8b 56 02 00 00 00 &nbsp;|...........V....|</span></p>
 <p><span>00000030 &nbsp;b0 c3 31 16 02 00 00 00 &nbsp;60 e3 01 00 00 00 00 00 &nbsp;|..1.....`.......|</span></p>
 <p><span>00000040 &nbsp;20 ec 46 58 02 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;| .FX............|</span></p>
 <p><span>00000050 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000060 &nbsp;00 00 00 00 00 00 00 00 &nbsp;60 bf 31 16 02 00 00 00 &nbsp;|........`.1.....|</span></p>
 <p><span>00000070 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>*</span></p>
 <p><span>000004b0 &nbsp;00 00 00 00 00 00 00 00 &nbsp;10 c4 31 16 02 00 00 00 &nbsp;|..........1.....|</span></p>
 <p><span>000004c0 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>*</span></p>
 <p><span>000004e0 &nbsp;02 1c 00 00 01 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>000004f0 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000500 &nbsp;00 00 00 00 00 00 00 00 &nbsp;70 80 33 16 02 00 00 00 &nbsp;|........p.3.....|</span></p>
 <p><span>00000510 &nbsp;b8 b5 e5 57 02 00 00 00 &nbsp;ff ff ff ff ff ff ff ff &nbsp;|...W............|</span></p>
 <p><span>00000520 &nbsp;58 c4 31 16 02 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|X.1.............|</span></p>
 <p><span>00000530 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>*</span></p>
 <p><span>00000550 &nbsp;50 75 2c 18 02 00 00 00 &nbsp;01 00 00 00 00 00 00 00 &nbsp;|Pu,.............|</span></p>
 
 
 <p><span>Further on in the hexdump of the 1MB object there's clearly an </span><span>NSExpression</span><span>&nbsp;payload - this payload is also visible just running </span><span>strings</span><span>&nbsp;on the WebP file. Matthias Frielingsdorf from iVerify gave a </span><span><a href="https://i.blackhat.com/Asia-24/Asia-24-Frielingsdorf-YouShallNotPassAnalysing.pdf">talk at BlackHat Asia with an initial analysis of this NSExpression payload</a></span><span>, we'll return to that at the end of this blog post.</span></p>
 
 <p><span>Equally striking (and visible in the hexdump above): there are clearly pointers in there. It's too early in the analysis to know whether this is a payload which gets rebased somehow, or whether there's a separate ASLR disclosure step.</span></p>
 
 <p><span>On a slightly higher level this hexdump looks a little bit like an Objective-C or C++ object, though some things are strange. Why are the first 24 bytes all zero? Why isn't there an isa pointer or vtable? It looks a bit like there are a number of integer fields before the pointers, but what are they? At this stage of the analysis, I had no idea.</span></p><h3 id="h.m4inyehexyvr"><span>Thinking dynamically</span></h3>
 <p><span>I had tried a </span><span>lot</span><span>&nbsp;to reproduce the exploit primitives on a real device; I built tooling to dynamically generate and sign legitimate PKPass files that I could send via iMessage to test devices and I could crash a lot, but I never seemed to get very far into the exploit - the iOS version range where the heap grooming works seems to be pretty small, and I didn't have an exact device and iOS version match to test on.</span></p>
 
 <p><span>Regardless of what I tried: sending the original exploits via iMessage, sending custom PKPasses with the trigger and groom, rendering the WebP directly in a test app or trying to use the PassKit APIs to render the PKPass file the best I could manage dynamically was to trigger a heap metadata integrity check failure, which I assumed was indicative of the exploit failing.</span></p>
 
 <p><span>(Amusingly, using the legitimate APIs to render the PKPass inside an app failed with an error that the PKPass file was malformed. And indeed, the exploit sample PKPass is malformed: it's missing multiple required files. But the "secure" PKPass BlastDoor parser entrypoint (</span><span>PKPassSecurePreviewContextCreateMessagesPreview</span><span>) is, in this regard at least, less strict and will attempt to render an incomplete and invalid PKPass).</span></p>
 
 <p><span>Though getting the whole PKPass parsed was proving tricky, with a bit of reversing it was possible to call the correct underlying CoreGraphics APIs to render the WebP and also get the EXIF/MakerNote parsed. By then setting a breakpoint when the huffman tables were allocated I had hoped it would be obvious what the overflow target was. But it was actually totally unclear what the following object was: (Here </span><span>X</span><span>3</span><span>&nbsp;points to the start of the huffman tables which are </span><span>0x3000</span><span>&nbsp;bytes large)</span></p>
 
 <p><span>(lldb) x/6xg $x3+0x3000</span></p>
 <p><span>0x112000000: 0x0000000111800000 0x0000000000000000</span></p>
 <p><span>0x112000010: 0x00000000001a1600 0x0000000000000004</span></p>
 <p><span>0x112000020: 0x0000000000000001 0x0000000000000019</span></p>
 
 <p><span>The first qword (</span><span>0x111800000</span><span>) is a valid pointer, but this is clearly not an Objective-C object, nor did it seem to look like any other recognizable object or have much to do with either the bplist or WebP. But running the tests a few times, there was a curious pattern:</span></p>
 
 <p><span>(lldb) x/6xg $x3+0x3000</span></p>
 <p><span>0x148000000: 0x0000000147800000 0x0000000000000000</span></p>
 <p><span>0x148000010: 0x000000000019c800 0x0000000000000004</span></p>
 <p><span>0x148000020: 0x0000000000000001 0x0000000000000019</span></p>
 
 <p><span>The huffman table is </span><span>0x2F28</span><span>&nbsp;bytes, which the allocator rounds up to </span><span>0x3000</span><span>. And in both of those test runs, adding the allocation size to the huffman table pointer yielded a suspiciously round number. There's no way that's a coincidence. Running a few more tests the </span><span>table+0x3000</span><span>&nbsp;pointer is always 8MB aligned. I remembered from some presentations on the iOS userspace allocator I'd read that 8MB is a meaningful number. Here's </span><span><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf">one from Synaktiv</a></span><span>:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgTLmTlzJ81OUix0D0YbwLxJHqxvWz9FoODHNMMlc2YXu7zIsXlnDlN3rLeYeZS89uMuNXWVyT21f6WweYNhi7T9rjYNI48bdaMdwu99QNv5W04XPk2zciSMmvnPr5WeixDG9UqD5feWIVoP8nx9Sq4_CJeASquS0cD3gvJvT992qTLTh7Ggp7CjaVC41k/s1999/image13.png"><img alt="Presentation slide from SynAckTiv explaining scalable zone memory allocation using Tiny, Small, and Large racks" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgTLmTlzJ81OUix0D0YbwLxJHqxvWz9FoODHNMMlc2YXu7zIsXlnDlN3rLeYeZS89uMuNXWVyT21f6WweYNhi7T9rjYNI48bdaMdwu99QNv5W04XPk2zciSMmvnPr5WeixDG9UqD5feWIVoP8nx9Sq4_CJeASquS0cD3gvJvT992qTLTh7Ggp7CjaVC41k/s1200/image13.png" title="Presentation slide from SynAckTiv explaining scalable zone memory allocation using Tiny, Small, and Large racks"></a></span></p>
 
 <p><span>Or </span><span><a href="https://www.slideshare.net/AngelBoy1/macos-memory-allocator-libmalloc-exploitation%2352">this one from Angelboy</a></span><span>:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi93g-2hZd6CFI7vQ8H7FcV3FCyUlIQJ94eWD85k_8UmrLJHqjLF4tWkKjzQmQA2g3LdKts1IY9zovIt0c1Fhc40ZkqbMTmdV7IwHkkKK0AkVpzTML52EstSqcu4SLB9RcAoDl15qgGLucFzYpVjlM8v1LgoChwrrfiDBA6nxGgDgOy-S5nNpuKrSb46ak/s1670/image5.png"><img alt="Slide from Angelboy explaining the 'Small' memory region in libmalloc, noting its size of 0x800000 and 16319 blocks, and showing a diagram of its memory layout and linked list structure." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi93g-2hZd6CFI7vQ8H7FcV3FCyUlIQJ94eWD85k_8UmrLJHqjLF4tWkKjzQmQA2g3LdKts1IY9zovIt0c1Fhc40ZkqbMTmdV7IwHkkKK0AkVpzTML52EstSqcu4SLB9RcAoDl15qgGLucFzYpVjlM8v1LgoChwrrfiDBA6nxGgDgOy-S5nNpuKrSb46ak/s1200/image5.png" title="Slide from Angelboy explaining the 'Small' memory region in libmalloc, noting its size of 0x800000 and 16319 blocks, and showing a diagram of its memory layout and linked list structure."></a></span></p>
 
 <p><span>8MB is the size of the iOS userspace default allocator's small rack regions. It looks like they might be trying to groom the allocator not to target application-specific data but allocator metadata. Time to dive into some libmalloc internals!</span></p><h3 id="h.ghgbtq9u1wm2"><span>libmalloc</span></h3>
 <p><span>I'd suggest reading the two presentations linked above for a good overview of the iOS default userspace malloc implementation</span><span>. Libmalloc manages memory on four levels of abstraction. From largest to smallest those are: rack, magazine, region and block. The size split between the tiny, small and large racks depends on the platform. Almost all the relevant allocations for this exploit come from the small rack, so that's the one I'll focus on.</span></p>
 
 <p><span>Reading through the libmalloc source I noticed that the region trailer, whilst still called a trailer, has been now moved to the start of the region object. The small region manages memory in chunks of 8MB. That 8MB gets split up in to (for our purposes) three relevant parts: a header, an array of metadata words, then blocks of 512 bytes which form the allocations:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCMp-bRPTYK_XPZAy21JujY_GaDKo20e3Jov0_Z4CD8xpL7AZpmYoH6BgC-m4bamxMvpIxz-mXXnKarp-HelkUvP_BSxEfrYGtI2ABj8x9k_C_X7sMG-H0kMXuWiGI7azIvlzyb7v4l3MnyE071j5pfoTktL0c4wg7L3ODkaZecnY29TdOPoDwAdE1T_A/s899/image2.png"><img alt="Diagram showing a memory layout with a small pink block on the left labeled with 'free flag bit' and '15 count bits', and dimensions '0x28 bytes'. Below it is a larger white block labeled '512 bytes'. On the right is a larger structure composed of three stacked blocks, colored green, red, and blue, with the entire structure labeled '0x8200 bytes' and '8MB'." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgCMp-bRPTYK_XPZAy21JujY_GaDKo20e3Jov0_Z4CD8xpL7AZpmYoH6BgC-m4bamxMvpIxz-mXXnKarp-HelkUvP_BSxEfrYGtI2ABj8x9k_C_X7sMG-H0kMXuWiGI7azIvlzyb7v4l3MnyE071j5pfoTktL0c4wg7L3ODkaZecnY29TdOPoDwAdE1T_A/s899/image2.png" title="Diagram showing a memory layout with a small pink block on the left labeled with 'free flag bit' and '15 count bits', and dimensions '0x28 bytes'. Below it is a larger white block labeled '512 bytes'. On the right is a larger structure composed of three stacked blocks, colored green, red, and blue, with the entire structure labeled '0x8200 bytes' and '8MB'."></a></span></p>
 
 <p><span>The first 0x28 bytes are a header where the first two fields form a linked-list of small regions:</span></p>
 
 <p><span>typedef</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>region_trailer</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>struct</span><span>&nbsp;</span><span>region_trailer</span><span>&nbsp;</span><span>*prev;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>struct</span><span>&nbsp;</span><span>region_trailer</span><span>&nbsp;</span><span>*next;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>unsigned</span><span>&nbsp;</span><span>bytes_used;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>unsigned</span><span>&nbsp;</span><span>objects_in_use;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>mag_index_t</span><span>&nbsp;</span><span>mag_index;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>volatile</span><span>&nbsp;</span><span>int32_t</span><span>&nbsp;</span><span>pinned_to_depot;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>bool</span><span>&nbsp;</span><span>recirc_suitable;</span></p>
 <p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>rack_dispose_flags_t</span><span>&nbsp;</span><span>dispose_flags;</span></p>
 <p><span>}</span><span>&nbsp;</span><span>region_trailer_t;</span></p>
 
 <p><span>The small region manages memory in units of 512 bytes called blocks. On iOS allocations from the small region consist of contiguous runs of up to 31 blocks. Each block has an associated 16-bit metadata word called a small meta word, which itself is subdivided into a "free" flag in the most-significant bit, and a 15-bit count.</span></p>
 
 <p><span>To mark a contiguous run of blocks as in-use (belonging to an allocation) the first meta word has its free flags cleared and the count set to the number of blocks in the run. On </span><span>free</span><span>, </span><span>an allocation is first placed on a lookaside list for rapid reuse without freeing. But once an allocation really gets freed the allocator will attempt to greedily coalesce neighbouring chunks. While in-use runs can never exceed 31 blocks, free runs can grow to encompass the entire region.</span></p><h3 id="h.r67dy0s0nxnn"><span>The groom</span></h3>
 <p><span>Below you can see the state of the meta words array for the small region directly following the one containing the huffman table as its last allocation: </span></p>
 
 <p><span>(lldb) x/200wh 0x148000028</span></p>
 <p><span>0x148000028: </span><span>0x0019</span><span>&nbsp;0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000038: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000048: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000058: </span><span>0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000a8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000b8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000c8: </span><span>0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x001d 0x0000 0x0000 0x0000 0x0000</span></p>
 
 <p><span>With some simple maths we can convert indexes in the meta words array into their corresponding heap pointers. Doing that it's possible to dump the memory associated with the allocations shown above. The larger </span><span>0x19</span><span>, </span><span>0x18</span><span>&nbsp;and </span><span>0x1c</span><span>&nbsp;allocations all seem to be generic groom allocations, but the two </span><span>0x3</span><span>&nbsp;block allocations appear more interesting. The first one (with the first metadata word at </span><span>0x14800005a</span><span>, shown in yellow) is the </span><span>code_lengths</span><span>&nbsp;array which gets freed directly after the huffman table building fails. The blue </span><span>0x3</span><span>&nbsp;block run (with the first metadata word at </span><span>0x148000090</span><span>) is the backing buffer for a </span><span>CFSet</span><span>&nbsp;object from the MakerNote and contains object pointers.</span></p>
 
 <p><span>Recall that the corruption primitive will write the dword </span><span>0x270007</span><span>&nbsp;</span><span>0x58</span><span>&nbsp;bytes off the end of the </span><span>0x3000</span><span>&nbsp;allocation (and that allocation happens to sit directly in front of this small region). That corruption has the following effect (shown in bold):</span></p>
 
 <p><span>(lldb) x/200wh 0x148000028</span></p>
 <p><span>0x148000028: </span><span>0x0019 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000038: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000048: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000058: </span><span>0x0007</span><span>&nbsp;</span><span>0x0027</span><span>&nbsp;0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000a8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000b8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000c8: </span><span>0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x001d 0x0000 0x0000 0x0000 0x0000</span></p>
 
 <p><span>It's changed the size of an in-use allocation from </span><span>3</span><span>&nbsp;blocks to </span><span>39</span><span>&nbsp;(or from </span><span>1536</span><span>&nbsp;to </span><span>19968</span><span>&nbsp;bytes). I mentioned before that the maximum size of an in-use allocation is meant to be 31 blocks, but this doesn't seem to be checked in every single free path. If things don't quite work out, you'll hit a runtime check. But if things do work out you end up with a situation like this:</span></p>
 
 <p><span>(lldb) x/200wh 0x148000028</span></p>
 <p><span>0x148000028: </span><span>0x0019 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000038: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000048: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000058: </span><span>0x0007</span><span>&nbsp;</span><span>0x8027</span><span>&nbsp;0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 </span><span>0x8027</span></p>
 <p><span>0x1480000a8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000b8: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x1480000c8: </span><span>0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x001d 0x0000 0x0000 0x0000 0x0000</span></p>
 
 <p><span>The yellow (</span><span>0x8027</span><span>) allocation now extends beyond its original three blocks and completely overlaps the following green (</span><span>0x18</span><span>) and blue (</span><span>0x3</span><span>) as well as the start of the purple (</span><span>0x1c</span><span>) allocation.</span></p>
 
 <p><span>But as soon as this corruption occurs WebP parsing fails and it's not going to make any other allocations. So what are they doing? How are they able to leverage these overlapping allocations? I was pretty stumped.</span></p>
 
 <p><span>One theory was that perhaps it was some internal ImageIO or BlastDoor specific object which reallocated the overlapping memory. Another theory was that perhaps the exploit had two parts; this first part which puts overlapping entries on the allocator freelist, then another file which is sent to exploit that? And maybe I was lacking that file? But then, why would there be that huge 1MB payload with NSExpressions in it? That didn't add up.</span></p><h3 id="h.swwxr4jh7qvs"><span>Puzzling pieces</span></h3>
 <p><span>As is so often the case, stepping back and not thinking about the problem for a while I realised that I'd completely overlooked and forgotten something critical. Right at the very start of the analysis I had run </span><span>file</span><span>&nbsp;on all the files inside the PKPass and noted that </span><span>background.png</span><span>&nbsp;was actually not a </span><span>png</span><span>&nbsp;but a </span><span>TIFF</span><span>. I had then completely forgotten that. But now the solution seemed obvious: the reason to use a PKPass versus just a WebP is that the PKPass parser will render multiple images in sequence, and there must be something in the TIFF which reallocates the overlapping allocation with something useful.</span></p>
 
 <p><span><a href="http://www.libtiff.org/">Libtiff</a></span><span>&nbsp;comes with a suite of tools for parsing tiff files. </span><span>tiffdump</span><span>&nbsp;displays the headers and </span><span>EXIF</span><span>&nbsp;tags:</span></p>
 
 <p><span>$ tiffdump background-15.tiff </span></p>
 <p><span>background-15.tiff:</span></p>
 <p><span>Magic: 0x4d4d &lt;big-endian&gt; Version: 0x2a &lt;ClassicTIFF&gt;</span></p>
 <p><span>Directory 0: offset 68 (0x44) next 0 (0)</span></p>
 <p><span>ImageWidth (256) SHORT (3) 1&lt;48&gt;</span></p>
 <p><span>ImageLength (257) SHORT (3) 1&lt;16&gt;</span></p>
 <p><span>BitsPerSample (258) SHORT (3) 4&lt;8 8 8 8&gt;</span></p>
 <p><span>Compression (259) SHORT (3) 1&lt;8&gt;</span></p>
 <p><span>Photometric (262) SHORT (3) 1&lt;2&gt;</span></p>
 <p><span>StripOffsets (273) LONG (4) 1&lt;8&gt;</span></p>
 <p><span>Orientation (274) SHORT (3) 1&lt;1&gt;</span></p>
 <p><span>SamplesPerPixel (277) SHORT (3) 1&lt;4&gt;</span></p>
 <p><span>StripByteCounts (279) LONG (4) 1&lt;59&gt;</span></p>
 <p><span>PlanarConfig (284) SHORT (3) 1&lt;1&gt;</span></p>
 <p><span>ExtraSamples (338) SHORT (3) 1&lt;2&gt;</span></p>
 <p><span>700 (0x2bc) BYTE (1) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>33723 (0x83bb) UNDEFINED (7) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>34377 (0x8649) BYTE (1) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>ICC Profile (34675) UNDEFINED (7) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 
 <p><span>The presence of the four 15KB buffers is notable, but they seemed to mostly just be zeros. Here's the output from </span><span>tiffinfo</span><span>:</span></p>
 
 <p><span>$ tiffinfo -c -j -d -s -z background-15.tiff </span></p>
 <p><span>=== TIFF directory 0 ===</span></p>
 <p><span>TIFF Directory at offset 0x44 (68)</span></p>
 <p><span>&nbsp; Image Width: 48 Image Length: 16</span></p>
 <p><span>&nbsp; Bits/Sample: 8</span></p>
 <p><span>&nbsp; Compression Scheme: AdobeDeflate</span></p>
 <p><span>&nbsp; Photometric Interpretation: RGB color</span></p>
 <p><span>&nbsp; Extra Samples: 1&lt;unassoc-alpha&gt;</span></p>
 <p><span>&nbsp; Orientation: row 0 top, col 0 lhs</span></p>
 <p><span>&nbsp; Samples/Pixel: 4</span></p>
 <p><span>&nbsp; Planar Configuration: single image plane</span></p>
 <p><span>&nbsp; XMLPacket (XMP Metadata):</span></p>
 
 <p><span>&nbsp; RichTIFFIPTC Data: &lt;present&gt;, 15347 bytes</span></p>
 <p><span>&nbsp; Photoshop Data: &lt;present&gt;, 15347 bytes</span></p>
 <p><span>&nbsp; ICC Profile: &lt;present&gt;, 15347 bytes</span></p>
 <p><span>&nbsp; 1 Strips:</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; 0: [ &nbsp; &nbsp; &nbsp; 8, &nbsp; &nbsp; &nbsp; 59]</span></p>
 <p><span>Strip 0:</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 84 13 00 00 01 00 00 00 01 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;cd ab 34 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>&nbsp;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span></p>
 <p><span>...</span></p>
 
 <p><span>This dumps the uncompressed TIFF strip buffer and this looks much more interesting! There's clearly some structure, though not a lot of it. Is this really enough to do something useful? It looks like there could be some sort of object, but I didn't recognise the structure, and had no idea how replacing an object with this would be useful. I explored two possibilities:</span></p><h4 id="h.w1yajpmi02ag"><span>1) Alpha blending:</span></h4>
 <p><span>This is actually the raw TIFF strip after decompression but before the rendering step which applies the </span><span><a href="https://en.wikipedia.org/wiki/Alpha_compositing">alpha</a></span><span>, so it was possible that this got rendered "on top" of another object. That seemed like a reasonable explanation for why the object seemed so sparse; perhaps the idea was to just "move" a pointer value. The first 16 bytes of the strip look like this:</span></p>
 
 <p><span>00 00 00 00 00 00 00 00 84 13 00 00 01 00 00 00</span></p>
 
 <p><span>which when viewed as two 64-bit values look like this:</span></p>
 
 <p><span>0x0000000000000000 0x0000000100001384</span></p>
 
 <p><span>It seemed sort-of plausible that rendering the </span><span>0x100001384</span><span>&nbsp;on top of another pointer might be a neat primitive, but there was something that didn't quite add up. This pointer-</span><span>ish</span><span>&nbsp;value is at the </span><span>start</span><span>&nbsp;of the strip buffer, so if the overlapping allocation got reallocated with this strip buffer </span><span>directly,</span><span>&nbsp;nothing interesting would happen, as the </span><span>overlapping</span><span>&nbsp;parts are </span><span>further</span><span>&nbsp;along. Maybe the overlapping buffer gets split up multiple times, but this was seeming less and less likely, and I couldn't reproduce this part of the exploit to actually observe what happened.</span></p><h4 id="h.xf2e3zlng30e"><span>2) This is an object:</span></h4>
 <p><span>The other theory I had was that this actually was an object. The 8 zero bytes at the start were certainly strangeâ¦ </span><span>so then</span><span>&nbsp;what's the significance of the next 8 bytes?</span></p>
 
 <p><span>84 13 00 00 01 00 00 00</span></p>
 
 <p><span>I tried using </span><span>lldb</span><span>'s </span><span>memory find</span><span>&nbsp;command to see if there were other instances of that exact byte sequence occurring in a test iOS app rendering the WebP then the TIFF using the CoreGraphics APIs:</span></p>
 
 <p><span>(lldb) memory find -e 0x100001384 -- 0x100000000 0x200000000</span></p>
 <p><span>data not found within the range.</span></p>
 
 <p><span>Nope, plus it was very, very slow.</span></p>
 
 <p><span>One thing I had noticed was that this byte sequence was similar to one near the start of the 1MB groom object:</span></p>
 
 <p><span>00000000 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000010 &nbsp;00 00 00 00 00 00 00 00 &nbsp;</span><span>80 26 00 00 01 00 00 00</span><span>&nbsp; |.........&amp;......|</span></p>
 <p><span>00000020 &nbsp;1f 00 00 00 00 00 00 00 &nbsp;10 00 8b 56 02 00 00 00 &nbsp;|...........V....|</span></p>
 <p><span>00000030 &nbsp;b0 c3 31 16 02 00 00 00 &nbsp;60 e3 01 00 00 00 00 00 &nbsp;|..1.....`.......|</span></p>
 
 <p><span>They're not identical, but it seemed a strange coincidence.</span></p>
 
 <p><span>I took a bunch of test app core dumps using </span><span>lldb</span><span>'s </span><span>process save-core</span><span>&nbsp;command and wrote some simple code to search for similar-ish byte patterns. After some experimentation I managed to find something:</span></p>
 
 <p><span>1c7b2600 &nbsp;49 d2 e4 29 02 00 00 01 &nbsp;</span><span>84 13 00 00 02 00 00 00</span><span>&nbsp; |I..)............|</span></p>
 <p><span>1c7b2610 &nbsp;42 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|B...............|</span></p>
 <p><span>1c7b2620 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>1c7b2630 &nbsp;c0 92 d6 83 02 00 00 00 &nbsp;00 93 d6 83 02 00 00 00 &nbsp;|................|</span></p>
 
 <p><span>Converting those coredump offsets into VM address and looking them up revealed:</span></p>
 
 <p><span>(lldb) x/10xg 0x121E47600</span></p>
 <p><span>0x121e47600: </span><span>0x0100000229e4d249</span><span>&nbsp;0x0000000200001384 </span></p>
 <p><span>0x121e47610: 0x0000000000000042 0x0000000000000000</span></p>
 <p><span>0x121e47620: 0x0000000000000000 0x0000000000000000</span></p>
 
 <p><span>(lldb) image lookup --address </span><span>0x229e4d248</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; Address: CoreFoundation[0x00000001dceed248] (CoreFoundation.__DATA_DIRTY.__objc_data + 7800)</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; Summary: (void *)0x0000000229e4d0e0: __NSCFArray</span></p>
 
 <p><span>It's an </span><span>NSCFArray</span><span>, which is the Foundation (Objective-C) "</span><span><a href="https://ridiculousfish.com/blog/posts/bridge.html">toll-free bridged</a></span><span>" version of the Core Foundation (C) CFArray type! This was the hint that I was looking for to identify the significance of the TIFF and that 1MB groom object, which also contains a similar byte sequence. </span></p><h3 id="h.udq8imwbq2pa"><span>Cores and Foundations</span></h3>
 <p><span>Even though Apple hasn't updated the open-source version of CoreFoundation for almost a decade, the old source is still helpful. Here's what a CoreFoundation object looks like:</span></p>
 
 <p><span>/*</span><span>&nbsp;</span><span>All</span><span>&nbsp;</span><span>CF</span><span>&nbsp;</span><span>"instances"</span><span>&nbsp;</span><span>start</span><span>&nbsp;</span><span>with</span><span>&nbsp;</span><span>this</span><span>&nbsp;</span><span>structure.</span><span>&nbsp; </span><span>Never</span><span>&nbsp;</span><span>refer</span><span>&nbsp;</span><span>to</span></p>
 <p><span>&nbsp;</span><span>*</span><span>&nbsp;</span><span>these</span><span>&nbsp;</span><span>fields</span><span>&nbsp;</span><span>directly</span><span>&nbsp;</span><span>--</span><span>&nbsp;</span><span>they</span><span>&nbsp;</span><span>are</span><span>&nbsp;</span><span>for</span><span>&nbsp;</span><span>CF's</span><span>&nbsp;</span><span>use</span><span>&nbsp;</span><span>and</span><span>&nbsp;</span><span>may</span><span>&nbsp;</span><span>be</span><span>&nbsp;</span><span>added</span></p>
 <p><span>&nbsp;</span><span>*</span><span>&nbsp;</span><span>to</span><span>&nbsp;</span><span>or</span><span>&nbsp;</span><span>removed</span><span>&nbsp;</span><span>or</span><span>&nbsp;</span><span>change</span><span>&nbsp;</span><span>format</span><span>&nbsp;</span><span>without</span><span>&nbsp;</span><span>warning.</span><span>&nbsp; </span><span>Binary</span></p>
 <p><span>&nbsp;</span><span>*</span><span>&nbsp;</span><span>compatibility</span><span>&nbsp;</span><span>for</span><span>&nbsp;</span><span>uses</span><span>&nbsp;</span><span>of</span><span>&nbsp;</span><span>this</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>is</span><span>&nbsp;</span><span>not</span><span>&nbsp;</span><span>guaranteed</span><span>&nbsp;</span><span>from</span></p>
 <p><span>&nbsp;</span><span>*</span><span>&nbsp;</span><span>release</span><span>&nbsp;</span><span>to</span><span>&nbsp;</span><span>release.</span></p>
 <p><span>&nbsp;</span><span>*/</span></p>
 <p><span>typedef</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>__CFRuntimeBase</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>uintptr_t</span><span>&nbsp;</span><span>_cfisa;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>uint8_t</span><span>&nbsp;</span><span>_cfinfo[4];</span></p>
 <p><span>#if</span><span>&nbsp;</span><span>__LP64__</span></p>
 <p><span>&nbsp; &nbsp; </span><span>uint32_t</span><span>&nbsp;</span><span>_rc;</span></p>
 <p><span>#endif</span></p>
 <p><span>}</span><span>&nbsp;</span><span>CFRuntimeBase;</span></p>
 
 <p><span>So the header is an Objective-C </span><span><a href="https://alwaysprocessing.blog/2023/01/19/objc-class-isa">isa</a></span><span>&nbsp;pointer followed by four bytes of </span><span>_cfinfo</span><span>, </span><span>followed by a reference count. Taking a closer look at the uses of </span><span>__cfinfo</span><span>:</span></p>
 
 <p><span>CF_INLINE</span><span>&nbsp;</span><span>CFTypeID</span><span>&nbsp;</span><span>__CFGenericTypeID_inline(const</span><span>&nbsp;</span><span>void</span><span>&nbsp;</span><span>*cf)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; </span><span>//</span><span>&nbsp;</span><span>yes,</span><span>&nbsp;</span><span>10</span><span>&nbsp;</span><span>bits</span><span>&nbsp;</span><span>masked</span><span>&nbsp;</span><span>off,</span><span>&nbsp;</span><span>though</span><span>&nbsp;</span><span>12</span><span>&nbsp;</span><span>bits</span><span>&nbsp;</span><span>are</span></p>
 <p><span>&nbsp; </span><span>//</span><span>&nbsp;</span><span>there</span><span>&nbsp;</span><span>for</span><span>&nbsp;</span><span>the</span><span>&nbsp;</span><span>type</span><span>&nbsp;</span><span>field;</span><span>&nbsp;</span><span>__CFRuntimeClassTableSize</span><span>&nbsp;</span><span>is</span><span>&nbsp;</span><span>1024</span></p>
 <p><span>&nbsp; </span><span>uint32_t</span><span>&nbsp;</span><span>*cfinfop</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>(uint32_t</span><span>&nbsp;</span><span>*)&amp;(((CFRuntimeBase</span><span>&nbsp;</span><span>*)cf)-&gt;_cfinfo);</span></p>
 <p><span>&nbsp; </span><span>CFTypeID</span><span>&nbsp;</span><span>typeID</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>(*cfinfop</span><span>&nbsp;</span><span>&gt;&gt;</span><span>&nbsp;</span><span>8)</span><span>&nbsp;</span><span>&amp;</span><span>&nbsp;</span><span>0x03FF;</span><span>&nbsp;</span><span>//</span><span>&nbsp;</span><span>mask</span><span>&nbsp;</span><span>up</span><span>&nbsp;</span><span>to</span><span>&nbsp;</span><span>0x0FFF</span></p>
 <p><span>&nbsp; </span><span>return</span><span>&nbsp;</span><span>typeID;</span></p>
 <p><span>}</span></p>
 
 <p><span>It seems that the second byte in </span><span>__cfinfo</span><span>&nbsp;is a type identifier. And indeed, running </span><span>expr (int) CFArrayGetTypeID()</span><span>&nbsp;in </span><span>lldb</span><span>&nbsp;prints: </span><span>19</span><span>&nbsp;(</span><span>0x13</span><span>) which matches up with both the object found in the coredump as well as the strange (or now not so strange) object in the TIFF strip buffer.</span></p><h3 id="h.rn1kanz6est3"><span>X steps forwards, Y steps back</span></h3>
 <p><span>Looking through more of the CoreFoundation code it seems that the object in the TIFF strip buffer is a </span><span>CFArray</span><span>&nbsp;with inline storage containing one element with the value </span><span>0x1234abcd</span><span>. It also seems that it's possible for CF objects to have NULL isa pointers, which explains why the first 8 bytes of the fake object are zero.</span></p>
 
 <p><span>This is interesting, but it still doesn't actually get us any closer to figuring out what the next step of the exploit actually is. If the </span><span>CFArray</span><span>&nbsp;is meant to overlap with something, then what? And what interesting side-effects could having an </span><span>CFArray</span><span>&nbsp;with only a single element with the value </span><span>0x1234abcd</span><span>&nbsp;possibly have?</span></p>
 
 <p><span>This seems like one step forward and two steps back, but there's something else which we can now figure out: what that 1MB groom object actually is. Let's take a look at the start of it again:</span></p>
 
 <p><span>00000000 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000010 &nbsp;00 00 00 00 00 00 00 00 &nbsp;80 26 00 00 01 00 00 00 &nbsp;|.........&amp;......|</span></p>
 <p><span>00000020 &nbsp;1f 00 00 00 00 00 00 00 &nbsp;10 00 8b 56 02 00 00 00 &nbsp;|...........V....|</span></p>
 <p><span>00000030 &nbsp;b0 c3 31 16 02 00 00 00 &nbsp;48 e3 01 00 00 00 00 00 &nbsp;|..1.....H.......|</span></p>
 <p><span>00000040 &nbsp;20 ec 46 58 02 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;| .FX............|</span></p>
 <p><span>00000050 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000060 &nbsp;00 00 00 00 00 00 00 00 &nbsp;60 bf 31 16 02 00 00 00 &nbsp;|........`.1.....|</span></p>
 <p><span>00000070 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 
 <p><span>It looks like another CF object, starting at </span><span>+0x10</span><span>&nbsp;in the buffer with the same NULL isa pointer, a reference count of </span><span>1</span><span>&nbsp;and a </span><span>__cfinfo</span><span>&nbsp;of </span><span>{0x80, 0x26, 0, 0}</span><span>. The type identifiers aren't actually fixed, they're allocated dynamically via calls to </span><span>_CFRuntimeRegisterClass</span><span>&nbsp;like this:</span></p>
 
 <p><span>CFTypeID</span><span>&nbsp;</span><span>CFArrayGetTypeID(void)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>static</span><span>&nbsp;</span><span>dispatch_once_t</span><span>&nbsp;</span><span>initOnce;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>dispatch_once(&amp;initOnce,</span><span>&nbsp;</span><span>^{</span><span>&nbsp;</span><span>__kCFArrayTypeID</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>_CFRuntimeRegisterClass(&amp;__CFArrayClass);</span><span>&nbsp;</span><span>});</span></p>
 <p><span>&nbsp; &nbsp; </span><span>return</span><span>&nbsp;</span><span>__kCFArrayTypeID;</span></p>
 <p><span>}</span></p>
 
 <p><span>The </span><span>CFTypeID</span><span>s</span><span>&nbsp;are really just indexes into the </span><span>__CFRuntimeClassTable</span><span>&nbsp;array, and even though the types are allocated dynamically the ordering seems sufficiently stable that the hardcoded type values in the exploit work. </span><span>0x26</span><span>&nbsp;is the </span><span>CFTypeID</span><span>&nbsp;for </span><span>CFReadStream</span><span>:</span></p>
 
 <p><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFRuntimeBase</span><span>&nbsp;</span><span>_cfBase;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFOptionFlags</span><span>&nbsp;</span><span>flags;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFErrorRef</span><span>&nbsp;</span><span>error;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>struct</span><span>&nbsp;</span><span>_CFStreamClient</span><span>&nbsp;</span><span>*client;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>void</span><span>&nbsp;</span><span>*info;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>const</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>_CFStreamCallBacks</span><span>&nbsp;</span><span>*callBacks;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFLock_t</span><span>&nbsp;</span><span>streamLock;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>CFArrayRef</span><span>&nbsp;</span><span>previousRunloopsAndModes;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>dispatch_queue_t</span><span>&nbsp;</span><span>queue;</span></p>
 <p><span>};</span></p>
 
 <p><span>Looking through the </span><span>CFStream</span><span>&nbsp;code it seems to call various callback functions during object destruction â that seems like a very likely path towards code execution, though with some significant caveats:</span></p>
 
 <p><span>Caveat I: It's still unclear how an overlapping allocation in the small malloc region could lead to a </span><span>CFRelease</span><span>&nbsp;being called on this 1MB allocation.</span></p>
 
 <p><span>Caveat II: What about ASLR? There have been some tricks in the past targeting "universal gadgets" which work across multiple slides. Nemo also had </span><span><a href="http://www.phrack.org/issues/69/9.html">a neat objective-c trick</a></span><span>&nbsp;for defeating ASLR in the past, so it's plausible that there's something like that here.</span></p>
 
 <p><span>Caveat III: What about PAC? If it's a data-only attack then maybe PAC isn't an issue, but if they are trying to JOP they'd need a trick beyond just an ASLR leak, as all forward control flow edges should be protected by PAC.</span></p><h3 id="h.w6e9d5pn9dq0"><span>Special Delivery</span></h3>
 <p><span>Around this time in my analysis </span><span><a href="https://x.com/helthydriver">Matthias Frielingsdorf</a></span><span>&nbsp;</span><span>offered me the use of an iPhone running 16.6, the same version as the targeted ITW victim. With Matthias' vulnerable iPhone, I was able to use the </span><span><a href="https://ellekit.space/dopamine/">Dopamine</a></span><span>&nbsp;jailbreak to attach </span><span>lldb</span><span>&nbsp;to </span><span>MessagesBlastDoorService</span><span>&nbsp;and a</span><span>fter a few tries was able to reproduce the exploit right up to the </span><span>CFRelease</span><span>&nbsp;call on the fake </span><span>CFReadStream</span><span>, confirming that that part of my analysis was correct! </span></p>
 
 <p><span>Collecting a few crashes led, yet again, to even more questions...</span></p><h3 id="h.ie8yjj3vyb3y"><span>Caveat I:</span><span>&nbsp;</span><span>Mysterious Pointers</span></h3>
 
 <p><span>Similar to the analysis of the huffman tables, there was a clear pattern in the fake object pointers, which this time were even stranger than the huffman tables. The crash site was here:</span></p>
 
 <p><span>LDR</span><span>&nbsp; &nbsp; </span><span>X8,</span><span>&nbsp;</span><span>[X19,#0x30]</span></p>
 <p><span>LDR</span><span>&nbsp; &nbsp; </span><span>X8,</span><span>&nbsp;</span><span>[X8,#0x58]</span></p>
 
 <p><span>At this point </span><span>X19</span><span>&nbsp;points to the fake </span><span>CFReadStream</span><span>&nbsp;object, and collecting a few </span><span>X19</span><span>&nbsp;values there's a pretty clear pattern:</span></p>
 
 <p><span>0x000000075f000010</span></p>
 <p><span>0x0000000d4f000010</span></p>
 
 <p><span>The fake object is inside a 1MB heap allocation, but all those fake object addresses are always 16 bytes above a 16MB-aligned address. It seemed really strange to me to end up with a pointer 0x10 bytes past such a round number. What kind of construct would lead to the creation of such a pointer? Even though I did have a debugger attached to </span><span>MessagesBlastDoorService</span><span>, it wasn't a time-travel debugger, so figuring out the history of such a pointer was non-trivial. Using the same core dump analysis techniques I could see that the pointer which would end up in </span><span>X19</span><span>&nbsp;was also present in the backing buffer of the </span><span>CFSet</span><span>&nbsp;described earlier. But how did it get there?</span></p>
 
 <p><span>Having found the strange </span><span>CFArray</span><span>&nbsp;inside the TIFF I was heavily biased towards believing that this must have something to do with it, so I wrote some tooling to modify the fake </span><span>CFArray</span><span>'s in the TIFF in the exploit. The theory was that by messing with that </span><span>CFArray</span><span>, I could cause a crash when it was used and figure out what was going on. But making minor changes to the strip buffer didn't seem to have any effect â the exploit still worked! Even replacing the entire strip buffer with </span><span>A</span><span>'s didn't stop the exploit working... What's going on?</span></p><h3 id="h.du8xlqhnw8z7"><span>Stepping back</span></h3>
 <p><span>I had made a list of the primitives I thought might lead to the creation of such a strange looking pointer â first on the list was a partial pointer overwrite. But then why the </span><span>CFArray</span><span>? But now having shown that the </span><span>CFArray</span><span>&nbsp;can't be involved, it was time to go back to the list. And step back even further and make sure I'd really looked at all of that TIFF...</span></p>
 
 <p><span>There were still those four other metadata buffers in the </span><span>tiffdump</span><span>&nbsp;output I'd shown earlier:</span></p>
 
 <p><span>700 (0x2bc) BYTE (1) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>33723 (0x83bb) UNDEFINED (7) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>34377 (0x8649) BYTE (1) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 <p><span>ICC Profile (34675) UNDEFINED (7) 15347&lt;00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ...&gt;</span></p>
 
 <p><span>I'd just dismissed them, but, maybe I shouldn't have done that? I had actually already dumped the full contents of each of those buffers and checked that there wasn't something else apart from the zeros. They were all zeros, except the third-to-last bytes which were 0x10, which I'd considered completely uninteresting. Uninteresting, unless you wanted to partially overwrite the three least-significant bytes of a little-endian pointer value with 0x000010 that is!</span></p>
 
 <p><span>Let's look back at the SMALL metadata:</span></p>
 
 <p><span>0x148000058: </span><span>0x0007</span><span>&nbsp;</span><span>0x8027</span><span>&nbsp;0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 </span><span>0x8027</span></p>
 
 <p><span>Each of those four metadata buffers in the TIFF is </span><span>15347</span><span>&nbsp;bytes, which is </span><span>0x3bf3</span><span>&nbsp;â looked at another way that's </span><span>0x3c00</span><span>&nbsp;(the size rounded up to the next </span><span>0x200</span><span>&nbsp;block size), minus </span><span>5</span><span>, minus </span><span>8</span><span>.</span></p>
 
 <p><span>0x3c00</span><span>&nbsp;is exactly 30 </span><span>0x200</span><span>&nbsp;byte blocks. Each 16-bit word in the metadata array shown above corresponds to one </span><span>0x200</span><span>&nbsp;block, where the overlapping chunk in yellow starts at </span><span>0x14800005a</span><span>. Counting forwards 30 chunks means that the end of a </span><span>0x3c00</span><span>&nbsp;allocation overlaps perfectly with the end of the original blue three-chunk allocation:</span></p>
 
 <p><span>0x148000058: </span><span>0x0007</span><span>&nbsp;</span><span>0x8027</span><span>&nbsp;0x0000 0x0000</span><span>&nbsp;</span><span>0x0018 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000068: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000078: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000</span></p>
 <p><span>0x148000088: </span><span>0x0000 0x0000 0x0000 0x0000</span><span>&nbsp;</span><span>0x0003 0x0000 0x0000</span><span>&nbsp;</span><span>0x001c</span></p>
 <p><span>0x148000098: </span><span>0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 </span><span>0x8027</span></p>
 
 <p><span>This has the effect of overwriting all but the last 16 bytes of the blue allocation with zeros, then overwriting the three least-significant bytes of the second-to-last pointer-sized value with </span><span>0x10 00 00</span><span>; which, if that memory happened to contain a pointer, has the effect of "shifting" that pointer down to the nearest 16MB boundary, then adding </span><span>0x10</span><span>&nbsp;bytes! (For those who saw my </span><span><a href="https://www.youtube.com/watch?v%3DZawX9I9MM6Y">2024 Offensivecon talk</a></span><span>, this was the missing link between the overlapping allocations and code execution I mentioned.)</span></p>
 
 
 <p><span>As mentioned earlier, that</span><span>&nbsp;blue allocation</span><span>&nbsp;starting with </span><span>0x0003</span><span>&nbsp;is the backing buffer of a </span><span>CFSet</span><span>&nbsp;object from the bplist inside the WebP MakerNote. The set is constructed in a very precise fashion such that the target pointer (the one to be rounded down) ends up as the second-to-last pointer in the backing buffer. The 1MB object is then also groomed such that it falls on a 16MB boundary below the object which the CFSet entry originally points to. Then when that </span><span>CFSet</span><span>&nbsp;is destructed it calls </span><span>CFRelease</span><span>&nbsp;on each object, causing the fake </span><span>CFReadStream</span><span>&nbsp;destructor to run.</span></p><h3 id="h.vdkjpva8e9lq"><span>Caveat II: ASLR</span></h3>
 <p><span>We've looked at the whole flow from huffman table overflow to </span><span>CFRelease</span><span>&nbsp;being invoked on a fake </span><span>CFReadStream</span><span>&nbsp;â but there's still stuff missing. The second open question I discussed earlier was ASLR. I had theorised that maybe it used a trick like a universal gadget, but is that the case?</span></p>
 
 <p><span>In addition to the samples, I was also able to obtain a number of crash logs from failed exploit attempts where those samples were thrown, which meant I could figure out the ASLR slide of the </span><span>MessagesBlastDoorService</span><span>&nbsp;when the exploit failed. In combination with the target device and exact OS build (also contained in the crash log) I could then obtain the matching </span><span>dyld_shared_cache</span><span>, subtract the runtime ASLR slide from a bunch of the pointer-looking things in the 1MB object and take a look at them. </span></p>
 
 <p><span>The simple answer is:</span><span>&nbsp;the 1MB object contains a large number of hardcoded, pre-slid, valid pointers. There's no weird machine, tricks or universal gadget here. By the time the PKPass is built and sent by the attackers they already know both the target device type and build as well as the runtime ASLR slide of the </span><span>MessagesBlastDoorService</span><span>...</span></p>
 
 <p><span>Based on </span><span><a href="https://iverify.io/post/clipping-wings-our-analysis-of-a-pegasus-spyware-sample">analysis by iVerify</a></span><span>,</span><span>&nbsp;as well as analysis of </span><span><a href="https://citizenlab.ca/2023/04/nso-groups-pegasus-spyware-returns-in-2022/">earlier exploit chains published by Citizen Lab</a></span><span>, my current working theory is that the large amount of HomeKit traffic seen in those cases is likely a separate ASLR/memory disclosure exploit.</span></p><h3 id="h.pybpzzcf990c"><span>Caveat III: Pointer Authentication</span></h3>
 <p><span>In the years since PAC was introduced we've seen a whole spectrum of interesting ways to either defeat, or just avoid, PAC. So what did these attackers do? To understand that let's follow the </span><span>CFReadStream</span><span>&nbsp;destruction code closely. (All these code snippets are from the most recently available version of CF from 2015, but the code doesn't seem to have changed much.)</span></p>
 
 <p><span>Here's the definition of the </span><span>CFReadStream</span><span>:</span></p>
 
 <p><span>static</span><span>&nbsp;</span><span>const</span><span>&nbsp;</span><span>CFRuntimeClass</span><span>&nbsp;</span><span>__CFReadStreamClass</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>0</span><span>,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>"CFReadStream"</span><span>,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span><span>&nbsp; &nbsp; &nbsp; </span><span>// init</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span><span>&nbsp; &nbsp; &nbsp; </span><span>// copy</span></p>
 <p><span>&nbsp; &nbsp; </span><span>__CFStreamDeallocate,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span></p>
 <p><span>&nbsp; &nbsp; </span><span>NULL</span><span>,</span><span>&nbsp; &nbsp; &nbsp; </span><span>// copyHumanDesc</span></p>
 <p><span>&nbsp; &nbsp; </span><span>__CFStreamCopyDescription</span></p>
 <p><span>};</span></p>
 
 <p><span>When a </span><span>CFReadStream</span><span>&nbsp;is passed to </span><span>CFRelease</span><span>, it will call </span><span>__CFStreamDeallocate</span><span>:</span></p>
 
 <p><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;</span><span>__CFStreamDeallocate(CFTypeRef</span><span>&nbsp;</span><span>cf)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; </span><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>*stream</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>(</span><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>*)cf;</span></p>
 <p><span>&nbsp; </span><span>const</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>_CFStreamCallBacks</span><span>&nbsp;</span><span>*cb</span><span>&nbsp;</span><span>=</span></p>
 <p><span>&nbsp; &nbsp; </span><span>_CFStreamGetCallBackPtr(stream);</span></p>
 <p><span>&nbsp; </span><span>CFAllocatorRef</span><span>&nbsp;</span><span>alloc</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>CFGetAllocator(stream);</span></p>
 <p><span>&nbsp; </span><span>_CFStreamClose(stream);</span></p>
 
 <p><span>_CFStreamGetCallBackPtr</span><span>&nbsp;just returns the </span><span>CFStream</span><span>'s </span><span>callBacks</span><span>&nbsp;field:</span></p>
 
 <p><span>CF_INLINE</span><span>&nbsp;</span><span>const</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>_CFStreamCallBacks</span><span>&nbsp;</span><span>*_CFStreamGetCallBackPtr(</span><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>*stream)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>return</span><span>&nbsp;</span><span>stream-&gt;callBacks;</span></p>
 <p><span>}</span></p>
 
 <p><span>Here's </span><span>_CFStreamClose</span><span>:</span></p>
 
 <p><span>CF_PRIVATE</span><span>&nbsp;</span><span>void</span><span>&nbsp;</span><span>_CFStreamClose(</span><span>struct</span><span>&nbsp;</span><span>_CFStream</span><span>&nbsp;</span><span>*stream)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; </span><span>CFStreamStatus</span><span>&nbsp;</span><span>status</span><span>&nbsp;</span><span>=</span><span>&nbsp;</span><span>_CFStreamGetStatus(stream);</span></p>
 <p><span>&nbsp; </span><span>const</span><span>&nbsp;</span><span>struct</span><span>&nbsp;</span><span>_CFStreamCallBacks</span><span>&nbsp;</span><span>*cb</span><span>&nbsp;</span><span>=</span></p>
 <p><span>&nbsp; &nbsp; </span><span>_CFStreamGetCallBackPtr(stream);</span></p>
 <p><span>&nbsp; </span><span>if</span><span>&nbsp;</span><span>(status</span><span>&nbsp;</span><span>==</span><span>&nbsp;</span><span>kCFStreamStatusNotOpen</span><span>&nbsp;</span><span>||</span><span>&nbsp;</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; </span><span>status</span><span>&nbsp;</span><span>==</span><span>&nbsp;</span><span>kCFStreamStatusClosed</span><span>&nbsp;</span><span>||</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp;</span><span>(status</span><span>&nbsp;</span><span>==</span><span>&nbsp;</span><span>kCFStreamStatusError</span><span>&nbsp;</span><span>&amp;&amp;</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>__CFBitIsSet(stream-&gt;flags,</span><span>&nbsp;</span><span>HAVE_CLOSED)</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; </span><span>))</span></p>
 <p><span>&nbsp; </span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>// Stream is not open from the client's perspective;</span></p>
 <p><span>&nbsp; &nbsp; </span><span>// do not callout and do not update our status to "closed"</span></p>
 <p><span>&nbsp; &nbsp; </span><span>return</span><span>;</span></p>
 <p><span>&nbsp; </span><span>}</span></p>
 <p><span>&nbsp; </span><span>if</span><span>&nbsp;</span><span>(!</span><span>&nbsp;</span><span>__CFBitIsSet(stream-&gt;flags,</span><span>&nbsp;</span><span>HAVE_CLOSED))</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>__CFBitSet(stream-&gt;flags,</span><span>&nbsp;</span><span>HAVE_CLOSED);</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>__CFBitSet(stream-&gt;flags,</span><span>&nbsp;</span><span>CALLING_CLIENT);</span></p>
 <p><span>&nbsp; &nbsp; </span><span>if</span><span>&nbsp;</span><span>(cb-&gt;close)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; </span><span>cb-&gt;close(stream,</span><span>&nbsp;</span><span>_CFStreamGetInfoPointer(stream));</span></p>
 <p><span>&nbsp; &nbsp; </span><span>}</span></p>
 
 
 
 <p><span>_CFStreamGetStatus</span><span>&nbsp;extracts the </span><span>status</span><span>&nbsp;bitfield from the </span><span>flags</span><span>&nbsp;field:</span></p>
 
 <p><span>#define</span><span>&nbsp;</span><span>__CFStreamGetStatus(x)</span><span>&nbsp;</span><span>__CFBitfieldGetValue((x)-&gt;flags,</span><span>&nbsp;</span><span>MAX_STATUS_CODE_BIT,</span><span>&nbsp;</span><span>MIN_STATUS_CODE_BIT)</span></p>
 
 <p><span>Looking at the 1MB object again the flags field is the first non-base field:</span></p>
 
 <p><span>00000000 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000010 &nbsp;00 00 00 00 00 00 00 00 &nbsp;80 26 00 00 01 00 00 00 &nbsp;|.........&amp;......|</span></p>
 <p><span>00000020 &nbsp;</span><span>1f 00 00 00</span><span>&nbsp;00 00 00 00 &nbsp;10 00 8b 56 02 00 00 00 &nbsp;|...........V....|</span></p>
 <p><span>00000030 &nbsp;b0 c3 31 16 02 00 00 00 &nbsp;48 e3 01 00 00 00 00 00 &nbsp;|..1.....H.......|</span></p>
 <p><span>00000040 &nbsp;20 ec 46 58 02 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;| .FX............|</span></p>
 <p><span>00000050 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 <p><span>00000060 &nbsp;00 00 00 00 00 00 00 00 &nbsp;60 bf 31 16 02 00 00 00 &nbsp;|........`.1.....|</span></p>
 <p><span>00000070 &nbsp;00 00 00 00 00 00 00 00 &nbsp;00 00 00 00 00 00 00 00 &nbsp;|................|</span></p>
 
 <p><span>That gives a status code of </span><span>0x1f</span><span>&nbsp;with all the other flags bits clear. This gets through the two conditional branches to reach this close callback call:</span></p>
 
 
 <p><span>&nbsp; </span><span>if</span><span>&nbsp;</span><span>(cb-&gt;close)</span><span>&nbsp;</span><span>{</span></p>
 <p><span>&nbsp; &nbsp; </span><span>cb-&gt;close(stream,</span><span>&nbsp;</span><span>_CFStreamGetInfoPointer(stream));</span></p>
 <p><span>&nbsp; </span><span>}</span></p>
 
 
 <p><span>At this point we need to switch to looking at the assembly to see what's really happening:</span></p>
 
 <p><span>__CFStreamClose</span></p>
 
 <p><span>var_30=</span><span>&nbsp;</span><span>-0x30</span></p>
 <p><span>var_20=</span><span>&nbsp;</span><span>-0x20</span></p>
 <p><span>var_10=</span><span>&nbsp;</span><span>-0x10</span></p>
 <p><span>var_s0=</span><span>&nbsp; </span><span>0</span></p>
 
 <p><span>PACIBSP</span></p>
 <p><span>STP</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X24,</span><span>&nbsp;</span><span>X23,</span><span>&nbsp;</span><span>[SP,#-0x10+var_30]!</span></p>
 <p><span>STP</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X22,</span><span>&nbsp;</span><span>X21,</span><span>&nbsp;</span><span>[SP,#0x30+var_20]</span></p>
 <p><span>STP</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X20,</span><span>&nbsp;</span><span>X19,</span><span>&nbsp;</span><span>[SP,#0x30+var_10]</span></p>
 <p><span>STP</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X29,</span><span>&nbsp;</span><span>X30,</span><span>&nbsp;</span><span>[SP,#0x30+var_s0]</span></p>
 <p><span>ADD</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X29,</span><span>&nbsp;</span><span>SP,</span><span>&nbsp;</span><span>#0x30</span></p>
 <p><span>MOV</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X19,</span><span>&nbsp;</span><span>X0</span></p>
 <p><span>BL</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>__CFStreamGetStatus</span></p>
 <p><span>CBZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X0,</span><span>&nbsp;</span><span>loc_187076958</span></p>
 
 <p><span>The fake </span><span>CFReadStream</span><span>&nbsp;is the first argument to this function, so passed in the </span><span>X0</span><span>&nbsp;register. It's then stored into </span><span>X19</span><span>&nbsp;so it survives the call to </span><span>__CFStreamGetStatus</span><span>.</span></p>
 
 <p><span>Skipping ahead past the flag checks we reach the callback callsite (this is also the crash site seen earlier):</span></p>
 
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>[X19,#0x30]</span></p>
 <p><span>...</span></p>
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>[X8,#0x58]</span></p>
 <p><span>CBZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>loc_187076758</span></p>
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X1,</span><span>&nbsp;</span><span>[X19,#0x28]</span></p>
 <p><span>MOV</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X0,</span><span>&nbsp;</span><span>X19</span></p>
 <p><span>BLRAAZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>X8</span></p>
 
 <p><span>Let's walk through each instruction in turn there:</span></p>
 
 <p><span>First it loads the 64-bit value from </span><span>X19+0x30</span><span>&nbsp;into </span><span>X8</span><span>:</span></p>
 
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>[X19,#0x30]</span></p>
 
 <p><span>Looking at the hexdump of the 1MB object above this will load the value </span><span>0x25846ec20</span><span>.</span></p>
 
 <p><span>From the crash reports we know the runtime ASLR slide of the </span><span>MessagesBlastDoorService</span><span>&nbsp;when this exploit was thrown was </span><span>0x3A8D0000</span><span>, so subtracting that we can figure out where in the shared cache this pointer should point:</span></p>
 
 <p><span>0x25846ec20-0x3A8D0000=0x21DB9EC20</span></p>
 
 <p><span>It points into the </span><span>__const</span><span>&nbsp;segment of the </span><span>TextToSpeechMauiSupport</span><span>&nbsp;library in the shared cache:</span></p>
 
 <p><span><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisVBydDqsc93nYCwXZuJdCfA16RTdCOLAgDG0jBVQ1_qAmFpkdYPTzqHv4W69SbzLVBkNd9lgBoy8m3EWOfwDpS9EKDxwWt35m1eJnpER6E2UxaG3e8tBYdBwxA7bHvMuvUzH2zRNYj-C1HfRQHrOAI5qWHBVm9E4XYMWV8q-Wu0qk0j4-hEyYMEGxuWc/s1999/image14.png"><img alt="Assembly code snippet with the memory address 000000021DB9EC20 highlighted, followed by DataSectionWriter function definitions." src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEisVBydDqsc93nYCwXZuJdCfA16RTdCOLAgDG0jBVQ1_qAmFpkdYPTzqHv4W69SbzLVBkNd9lgBoy8m3EWOfwDpS9EKDxwWt35m1eJnpER6E2UxaG3e8tBYdBwxA7bHvMuvUzH2zRNYj-C1HfRQHrOAI5qWHBVm9E4XYMWV8q-Wu0qk0j4-hEyYMEGxuWc/s1200/image14.png" title="Assembly code snippet with the memory address 000000021DB9EC20 highlighted, followed by DataSectionWriter function definitions."></a></span></p>
 
 <p><span>The next instruction adds </span><span>0x58</span><span>&nbsp;to that TextToSpeechMauiSupport pointer and reads a 64-bit value from there:</span></p>
 
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>[X8,#0x58]</span><span>&nbsp;</span><span>//</span><span>&nbsp;</span><span>x8</span><span>&nbsp;</span><span>:=</span><span>&nbsp;</span><span>[0x21DB9EC20+0x58]</span></p>
 
 <p><span>This loads the pointer to the function </span><span>_DataSectionWriter_CommitDataBlock</span><span>&nbsp;from </span><span>0x21DB9EC78</span><span>.</span></p>
 
 <p><span>IDA is simplifying something for us here: the function pointer loaded there is actually signed with the </span><span><a href="https://googleprojectzero.blogspot.com/2019/02/examining-pointer-authentication-on.html">A-family instruction key</a></span><span><a href="https://googleprojectzero.blogspot.com/2019/02/examining-pointer-authentication-on.html">&nbsp;with a zero context</a></span><span>. This signing happens transparently (either during load or when the page is faulted in).</span></p>
 
 <p><span>The remaining four instructions then check that the pointer wasn't </span><span>NULL</span><span>, load </span><span>X1</span><span>&nbsp;from offset </span><span>+0x28</span><span>&nbsp;in the fake 1MB object, move the pointer to the fake object back into </span><span>X0</span><span>&nbsp;and call the PAC'ed </span><span>_DataSectionWriter_CommitDataBlock</span><span>&nbsp;function pointer via </span><span>BLRAAZ</span><span>:</span></p>
 
 <p><span>CBZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X8,</span><span>&nbsp;</span><span>loc_187076758</span></p>
 <p><span>LDR</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X1,</span><span>&nbsp;</span><span>[X19,#0x28]</span></p>
 <p><span>MOV</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span>X0,</span><span>&nbsp;</span><span>X19</span></p>
 <p><span>BLRAAZ</span><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>X8</span></p>
 <h3 id="h.85z2ks5ykaev"><span>Callback-Oriented Programming</span></h3>
 <p><span>A well-known attack against PAC is to swap two valid, PAC'ed pointers which are signed in the same way but point to different places (e.g. swapping two function pointers with different semantics, allowing you to exploit those semantic differences).</span></p>
 
 <p><span>Since a large number of PAC-protected pointers are signed with the A-family instruction key with a zero-context value, there are a large number of pointers to choose from. "Just" having an ASLR defeat shouldn't be enough to achieve this though; surely you'd need to disclose the actual PAC'ed pointer value? But that's not what happened above.</span></p>
 
 <p><span>Notice that the </span><span>CFStream</span><span>&nbsp;objects don't directly contain the callback function pointers â there's an extra level of indirection. The </span><span>CFStream</span><span>&nbsp;object contains a pointer </span><span>to</span><span>&nbsp;a callback structure, and </span><span>that</span><span>&nbsp;structure has the PAC'd function pointers. And crucially: that first pointer, the one </span><span>to</span><span>&nbsp;the callbacks structure, isn't protected by PAC. This means that the attackers can freely swap pointers to callback structures, operating one-level removed from the function pointers.</span></p>
 
 <p><span>This might seem like a severe constraint, but the dyld_shared_cache is vast and there are easily enough pre-existing callback structures to build a "callback-oriented JOP" chain, chaining together unsigned pointers to signed function pointers.</span></p>
 
 <p><span>The initial portion of the payload is a large callback-oriented JOP chain which is used to bootstrap the evaluation of the next payload stage, a large NSExpression.</span></p><h3 id="h.x0b2urrhmfz4"><span>Similarities</span></h3>
 <p><span>There are a number of similarities between this exploit chain and PWNYOURHOME, an earlier exploit also attributed by CitizenLab to NSO, </span><span><a href="https://citizenlab.ca/2023/04/nso-groups-pegasus-spyware-returns-in-2022/">described in this blog post in April 2023</a></span><span>.</span></p>
 
 <p><span>That chain also had an initial stage targeting HomeKit, followed by a stage targeting </span><span>MessagesBlastDoorService</span><span>&nbsp;and also involving a </span><span>MakerNote</span><span>&nbsp;object â the Citizen Lab post claims that at the time the </span><span>MakerNote</span><span>&nbsp;was inside a PNG file. My guess would be that that PNG was being used as the delivery mechanism for the </span><span>MakerNote</span><span>&nbsp;bplist heap grooming primitives discussed in this post.</span></p>
 
 <p><span>Based on Citizen Lab's description it also seems like PWNYOURHOME was leveraging a similar callback-oriented JOP technique, and it seems likely that there was also a HomeKit-based ASLR disclosure. The PWNYOURHOME post has a couple of extra details around a minor fix which Apple made, preventing parsing of "</span><span>certain HomeKit messages unless they arrive from a plausible source.</span><span>" But there still aren't enough details to figure out the underlying vulnerability or primitive. It seems likely to me that the same issue, or a variant thereof was still in use in BLASTPASS.</span></p><h3 id="h.x3s02rsriugj"><span>Key material</span></h3>
 <p><span>Matthias from iVerify presented an </span><span><a href="https://i.blackhat.com/Asia-24/Asia-24-Frielingsdorf-YouShallNotPassAnalysing.pdf">initial analysis of the NSExpression payload at BlackHat Asia</a></span><span>&nbsp;in April 2024. In early July 2024, Matthias and I took a closer look at the final stages of the NSExpression payload which decrypts an AES-encrypted NSExpression and executes it.</span></p>
 
 <p><span>It seems very likely that the encrypted payload contains a BlastDoor sandbox escape. Although the BlastDoor sandbox profile is fairly restrictive it still allows access to a number of system services like </span><span>notifyd</span><span>, </span><span>logd</span><span>&nbsp;and </span><span>mobilegestalt</span><span>. In addition to the syscall attack surface there's also a non-trivial IOKit driver attack surface:</span></p>
 
 <p><span>...</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>iokit-open-user-client</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>(iokit-user-client-class</span><span>&nbsp;</span><span>"IOSurfaceRootUserClient")</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>(iokit-user-client-class</span><span>&nbsp;</span><span>"IOSurfaceAcceleratorClient")</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>(iokit-user-client-class</span><span>&nbsp;</span><span>"AGXDevice"))</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>iokit-open-service)</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>mach-derive-port)</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>mach-kernel-endpoint)</span></p>
 <p><span>(allow</span><span>&nbsp;</span><span>mach-lookup</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>(require-all</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(require-not</span><span>&nbsp;</span><span>(global-name</span><span>&nbsp;</span><span>"com.apple.diagnosticd"))</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(require-any</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(global-name</span><span>&nbsp;</span><span>"com.apple.logd")</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(global-name</span><span>&nbsp;</span><span>"com.apple.system.notification_center")</span></p>
 <p><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>(global-name</span><span>&nbsp;</span><span>"com.apple.mobilegestalt.xpc"))))</span></p>
 <p><span>...</span></p>
 
 <p><span>(This profile snippet was generated using the </span><span><a href="https://github.com/cellebrite-labs/sandblaster">Cellebrite labs' fork of SandBlaster</a></span><span>)</span></p>
 
 <p><span>In FORCEDENTRY the sandbox escape was contained directly in the NSExpression payload (though that was an escape from the less-restrictive IMTranscoderAgent sandbox). This time around it seems extra care has been taken to prevent analysis of the sandbox escape.</span></p>
 
 <p><span>The question is: where does the key come from? We had a few theories:</span></p>
 <ul><li><span>Perhaps the key is just obfuscated, and by completely reversing the </span><span>NSExpression</span><span>&nbsp;payload we can find it?</span></li><li><span>Perhaps the key is derived from some target-specific information?</span></li><li><span>Perhaps the key was somehow delivered in some other way and can be read from inside BlastDoor?</span></li></ul>
 
 <p><span>We spent a day analysing the NSExpression payload and concluded that the third theory appeared to be the correct one. The NSExpression walks up the native stack looking for the communication ports back to </span><span>imagent</span><span>. It then hijacks that communication, effectively taking over responsibility for parsing all subsequent incoming requests from </span><span>imagent</span><span>&nbsp;for "defusing" of iMessage payloads. The NSExpression loops 100 times, parsing incoming requests as XPC messages, reading the </span><span>request</span><span>&nbsp;xpc dictionary then the </span><span>data</span><span>&nbsp;</span><span>xpc data</span><span>&nbsp;object to get access to the raw, binary iMessage format. It waits until the device receives another iMessage with a specific format, and from that message extracts an AES key which is then used to decrypt the next NSExpression stage and evaluate it.</span></p>
 
 <p><span>We were unable to recover any messages with the matching format and therefore unable to analyse the next stage of the exploit.</span></p><h3 id="h.kwbzpb78bv4k"><span>Conclusion</span></h3>
 <p><span>In contrast to FORCEDENTRY, BLASTPASS's separation of the ASLR disclosure and RCE phases mitigated the need for a novel weird machine. Whilst the heap groom was impressively complicated and precise, the exploit still relied on well-known exploitation techniques. Furthermore, the MakerNote bplist groom and callback-JOP PAC defeat techniques appear to have been in use for multiple years, based on similarities with </span><span><a href="https://citizenlab.ca/2023/04/nso-groups-pegasus-spyware-returns-in-2022/">Citizenlab's blogpost in 2023</a></span><span>, which looked at devices compromised in 2022. </span></p>
 
 <p><span>Enforcing much stricter requirements on the format of the bplist inside the MakerNote (for example: a size limit or a strict-parser mode which rejects duplicate keys) would seem prudent. The callback-JOP issue is likely harder to mitigate.</span></p>
 
 <p><span>The HomeKit aspect of the exploit chain remains mostly a mystery, but it seems very likely that it was somehow involved in the ASLR disclosure. </span><span><a href="https://googleprojectzero.blogspot.com/2021/01/a-look-at-imessage-in-ios-14.html">Samuel GroÃ's post "A Look at iMessage in iOS 14"</a></span><span>&nbsp;in 2021,</span><span>&nbsp;mentioned that Apple added support for re-randomizing the shared cache slide of certain services. Ensuring that BlastDoor has a unique ASLR slide could be a way to mitigate this.</span></p>
 
 <p><span>This is the second in-the-wild NSO exploit which relied on simply renaming a file extension to access a parser in an unexpected context which shouldn't have been allowed. </span></p>
 
 <p><span>FORCEDENTRY had a .gif which was really a .pdf. </span></p>
 
 <p><span>BLASTPASS had a .png which was really a .webp. </span></p>
 
 <p><span>A basic principle of sandboxing is treating all incoming attacker-controlled data as untrusted, and not simply trusting a file extension.</span></p>
 
 <p><span>This speaks to a broader challenge in sandboxing: that current approaches based on process isolation can only take you so far. They increase the length of an exploit chain, but don't necessarily reduce the size of the initial remote attack surface. Accurately mapping, then truly reducing the scope of that initial remote attack surface should be a top priority.</span></p>
 
 


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Source code art in the Rivulet language (135 pts)]]></title>
            <link>https://github.com/rottytooth/Rivulet</link>
            <guid>43492652</guid>
            <pubDate>Thu, 27 Mar 2025 11:55:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/rottytooth/Rivulet">https://github.com/rottytooth/Rivulet</a>, See on <a href="https://news.ycombinator.com/item?id=43492652">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/8b6255a742dcf233027f246b3233216d6f2c33d9641ba21e3de97e506571c7c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e31322d626c7565"><img src="https://camo.githubusercontent.com/8b6255a742dcf233027f246b3233216d6f2c33d9641ba21e3de97e506571c7c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e31322d626c7565" alt="Python versions" data-canonical-src="https://img.shields.io/badge/Python-3.12-blue"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/cce5a2a14b0faab422e0bfcdc074afb46089831a0bf5930a7d8af3f31b98f847/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667"><img src="https://camo.githubusercontent.com/cce5a2a14b0faab422e0bfcdc074afb46089831a0bf5930a7d8af3f31b98f847/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667" alt="License" data-canonical-src="https://img.shields.io/badge/License-MIT-blue.svg"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Rivulet</h2><a id="user-content-rivulet" aria-label="Permalink: Rivulet" href="#rivulet"></a></p>
<p dir="auto">Rivulet is a programming language of flowing strands, written in semigraphic characters. A strand is not pictographic: its flow does not simulate computation. There are four kinds of strands, each with their own symbolism and grammatical rules. Together, they form glyphs, tightly-packed blocks of code whose strands execute together.</p>
<p dir="auto">Here is a complete Fibonacci program:</p>
<div data-snippet-clipboard-copy-content="   âµâââ®ââââ®â­â    âµâµâ­âââââââââ®
    â°ââ¯â°âââ¯â       â°ââ¶ â¶â®â¶â®â¶â¯
   â°ââââââ® â      â­ââââââ¯ â°ââââââ®
         â°ââ¯ â·    â°âââ       ââââ¯â·

   âµâµââ®  â­ââ®     â­ââ       âµâµâ°ââ®  âââ®âââ®
      â°ââ®â â°ââ¯ âµâµâ°ââ¯â¶â®       â´ââ¯  â­ââ¯â­ââ¯
      â°ââ¯â°â â°âââ¯â°âââââ¯       â­â´ âµâ¶â¯ â¶â¯â¶â®
        â­ââ® â­â´               â  â°âââââââ¯
        â â â                â°ââ®       â­ââ® 
      â â â°ââ¯                  â     â   â
      â°ââ¯            â·         â°ââââ â°ââââ¯â·

   âµâµ â­ââ  âââ®  â­ââ®         âµâ°ââ®
      â°ââ®  â­ââ¯â­ââ¯ â          â´ââ¯
       â¶â¯âµâ¶â¯  â â·â¶â¯          â­ââ®
     â­ââ® â°âââââ¯ â   â­ââ®        â
     â â°âââââ® â­ââ¯ â­â´â â      â­ââ¯
     â°âââââ® â â â â â â      â
     â­âââââ¯ â â â°ââ¯ â â·      â°ââ·
     â°âââââ® â â°ââââââ¯ â  
          â â°ââââââââââ¯â·"><pre><code>   âµâââ®ââââ®â­â    âµâµâ­âââââââââ®
    â°ââ¯â°âââ¯â       â°ââ¶ â¶â®â¶â®â¶â¯
   â°ââââââ® â      â­ââââââ¯ â°ââââââ®
         â°ââ¯ â·    â°âââ       ââââ¯â·

   âµâµââ®  â­ââ®     â­ââ       âµâµâ°ââ®  âââ®âââ®
      â°ââ®â â°ââ¯ âµâµâ°ââ¯â¶â®       â´ââ¯  â­ââ¯â­ââ¯
      â°ââ¯â°â â°âââ¯â°âââââ¯       â­â´ âµâ¶â¯ â¶â¯â¶â®
        â­ââ® â­â´               â  â°âââââââ¯
        â â â                â°ââ®       â­ââ® 
      â â â°ââ¯                  â     â   â
      â°ââ¯            â·         â°ââââ â°ââââ¯â·

   âµâµ â­ââ  âââ®  â­ââ®         âµâ°ââ®
      â°ââ®  â­ââ¯â­ââ¯ â          â´ââ¯
       â¶â¯âµâ¶â¯  â â·â¶â¯          â­ââ®
     â­ââ® â°âââââ¯ â   â­ââ®        â
     â â°âââââ® â­ââ¯ â­â´â â      â­ââ¯
     â°âââââ® â â â â â â      â
     â­âââââ¯ â â â°ââ¯ â â·      â°ââ·
     â°âââââ® â â°ââââââ¯ â  
          â â°ââââââââââ¯â·
</code></pre></div>
<p dir="auto">Here is the same program formatted by the interpreter into an svg, alongside two variations that produce equivalent computer instructions:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Fibonacci 1</th>
<th>Fibonacci 2</th>
<th>Fibonacci 4</th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/rottytooth/Rivulet/blob/main/images/fibonacci1.png"><img src="https://github.com/rottytooth/Rivulet/raw/main/images/fibonacci1.png"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/rottytooth/Rivulet/blob/main/images/fibonacci2.png"><img src="https://github.com/rottytooth/Rivulet/raw/main/images/fibonacci2.png"></a></td>
<td><a target="_blank" rel="noopener noreferrer" href="https://github.com/rottytooth/Rivulet/blob/main/images/fibonacci4.png"><img src="https://github.com/rottytooth/Rivulet/raw/main/images/fibonacci4.png"></a></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th><g-emoji alias="warning">â ï¸</g-emoji> WARNING</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Status: Version 0.4</strong>. This is a mostly-working interpreter, and a tool to generate svg files of source code. The command list will likely need to expand for usability.</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Design Philosophy</h2><a id="user-content-design-philosophy" aria-label="Permalink: Design Philosophy" href="#design-philosophy"></a></p>
<p dir="auto">Rivulet is a list-based language that avoids ordinary approaches to branching and looping. Strands never split and no strand is left un-executed.</p>
<p dir="auto">Its writing system was inspired by the satisfying compactness of mazes, Anni Albers's Meanders series, and space-filling algorithms. Its calligraphic aspects draw from natural language and favor the ability to write by hand.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Data Model</h2><a id="user-content-data-model" aria-label="Permalink: Data Model" href="#data-model"></a></p>
<p dir="auto">In Rivulet, data is organized into lists of adjacent cells, populated with zeros by default. Commands are applied to either a single cell or an entire list. They take a second parameter, a constant or the value of another cell.</p>
<p dir="auto">Commands can also be run list-to-list, applying the command to each successive cell of one list, from the corresponding cells of the other. While these consider zero-populated cells as well, a list-to-list command ends at the last cell holding a value in either list.</p>
<p dir="auto">The first list, List 1, is sometimes used as the output stream. This is an interpreter setting, as is whether they are displayed as numerical data or a Unicode string (where each value is rounded to the nearest integer).</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Control Flow</h2><a id="user-content-control-flow" aria-label="Permalink: Control Flow" href="#control-flow"></a></p>
<p dir="auto">Every strand of every glyph runs in a Rivulet program; there is no equivalent of an "if" statement. If a glyph leads to an unwanted state, that glyph and the others of its block (all contiguous glyphs of the same level or higher), can be rolled back, setting the execution state to what it was before the glyph (or set of glyphs) fired. The conditional rollback is the only form of branching in Rivulet. Loops only end with a rollback of their last iteration. Tests for rollback are that a single cell or an entire list is either zero or non-zero, indicated by a special strand called the Question Strand.</p>
<p dir="auto">Data strands are run in the order they begin at the top left, moving through each column flowing to the right. So the strand beginning at coordinate 2,0 is run, then 2,1, then 3,0, and so on. Question strands are always run after the data strands are executed.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Syntax</h2><a id="user-content-syntax" aria-label="Permalink: Syntax" href="#syntax"></a></p>
<p dir="auto">Rivulet's nuanced grammar may seem overwhelming at first but becomes easy to read and write with practice.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Glyphs</h3><a id="user-content-glyphs" aria-label="Permalink: Glyphs" href="#glyphs"></a></p>
<p dir="auto">Glyphs begin with markers: âµ in the upper left and end with â· at the bottom right. They must not have a vertically-oriented character directly above or below them, or they'll be confused for strands. Any text outside of glyph markers is ignored.</p>
<p dir="auto">The level of the glyph is marked by how many âµs appear at the beginning of the glyph. Levels tell where glyphs fall within larger blocks of code.</p>
<p dir="auto">Glyphs can be arranged vertically or side-by-side. They are read in the order of their starting marker location: top-to-bottom, left-to-right.</p>
<p dir="auto">In other words, this program:</p>
<div data-snippet-clipboard-copy-content="1 âµâ°âââ®â°â â­âââ¯ â¶â®
2    ââ   ââ    â
3    â­âââââââââââ
5    âââââââââ  â·

1 âµâµ     â­ââââ® â­â
2    â´ââ®â¶â¯â¶â® â·â¶â¯
3  âµâ°âââ   â
5  â°ââââââââ¯"><pre><code>1 âµâ°âââ®â°â â­âââ¯ â¶â®
2    ââ   ââ    â
3    â­âââââââââââ
5    âââââââââ  â·

1 âµâµ     â­ââââ® â­â
2    â´ââ®â¶â¯â¶â® â·â¶â¯
3  âµâ°âââ   â
5  â°ââââââââ¯
</code></pre></div>
<p dir="auto">is identical to this one:</p>
<div data-snippet-clipboard-copy-content="1 âµâ°âââ®â°â â­âââ¯ â¶â® âµâµ     â­ââââ® â­â
2    ââ   ââ    â    â´ââ®â¶â¯â¶â® â·â¶â¯
3    â­âââââââââââ  âµâ°âââ   â
5    âââââââââ  â·  â°ââââââââ¯"><pre><code>1 âµâ°âââ®â°â â­âââ¯ â¶â® âµâµ     â­ââââ® â­â
2    ââ   ââ    â    â´ââ®â¶â¯â¶â® â·â¶â¯
3    â­âââââââââââ  âµâ°âââ   â
5    âââââââââ  â·  â°ââââââââ¯
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Lines of code</h3><a id="user-content-lines-of-code" aria-label="Permalink: Lines of code" href="#lines-of-code"></a></p>
<p dir="auto">The interpreter refers to code locations in terms of glyph numbers and then line numbers. Line numbers reset to 1 in each glyph. After line 1, they are numbered for each successive prime. These numbers are semantically meaningful for some strands.</p>
<p dir="auto">Other strand types use horizontal line numbers, counting in primes away from their starting hook. They always begin on line 1 and their neighbors are 2 on each side. They progress through primes, but always in distance from their starting point. Line numbers are every-other-line vertically: this is so vertical lines are not packed too tightly.</p>
<p dir="auto">Here are examples of such strands:</p>
<div data-snippet-clipboard-copy-content="  â­ââ® â­â´  â­â´ 
  â â â   â â
â â â°ââ¯   â â
â°ââ¯       â°ââ¯
5 3 2 1   1 2"><pre><code>  â­ââ® â­â´  â­â´ 
  â â â   â â
â â â°ââ¯   â â
â°ââ¯       â°ââ¯
5 3 2 1   1 2
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Lexemes</h2><a id="user-content-lexemes" aria-label="Permalink: Lexemes" href="#lexemes"></a></p>
<p dir="auto">Rivulet commands are written with these signs. Some re-use characters in a way that only context can disambiguate:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Name</th>
<th>Signs</th>
<th>Context</th>
<th>Interpretation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Glyph Start and End</td>
<td>âµ â·</td>
<td>Not be adjacent another sign with a vertical reading</td>
<td>Marks the glyph, the smallest block of code in Rivulet</td>
</tr>
<tr>
<td>Location</td>
<td>âµ â· â´â¶</td>
<td>Leaves a gap, to punctuate the end of a strand e.g. from left: âââ¶</td>
<td>A reference pointer to a cell</td>
</tr>
<tr>
<td>Continue</td>
<td>â â</td>
<td>Continues the flows in the same direction e.g.  ââââ</td>
<td>Depending on the strand type, it can add or subtract the line number of its horizontal or vertical line number, or simply continue the strand</td>
</tr>
<tr>
<td>Corner</td>
<td>â¯ââ°â â®ââ­â</td>
<td>Sharp or curved corners have the same meaning and can be used interchangeably</td>
<td>Turns direction of flow</td>
</tr>
<tr>
<td>Hook</td>
<td>â¯ââ°â´ââ´ â®ââ­â´ââ´</td>
<td>It's a character or characters that turn ninety degrees at the beginning of some strands. If it turns to the right or left, it is extended with a half-length line, the same character used to indicate Location, but flipped to extend the hook and not leave a gap.</td>
<td></td>
</tr>
<tr>
<td>Non-hook Begin Strand</td>
<td>â· above a â</td>
<td>Strands with no hook begin with the half-length character to extend it</td>
<td>Marks the beginning of a Question Strand</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">Data Strands</h2><a id="user-content-data-strands" aria-label="Permalink: Data Strands" href="#data-strands"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Value Strands</h3><a id="user-content-value-strands" aria-label="Permalink: Value Strands" href="#value-strands"></a></p>
<p dir="auto">A value strand indicates a command that takes a constant value. Value strands (and other data strands), begin with a hook that points up (as in the third strand below) or to the left (as in the first two). All three of the strands below are value strands:</p>
<div data-snippet-clipboard-copy-content="1 âµâ°âââ®â­âââ¯â¶â®
2    ââââ   âââ®
3               
5              â·"><pre><code>1 âµâ°âââ®â­âââ¯â¶â®
2    ââââ   âââ®
3               
5              â·
</code></pre></div>
<p dir="auto">Each of these value strands writes to list 1, as their hooks sit on line 1. The first strand writes to the first cell (cell 0), as it appears first on that line, the second writes to the second cell (cell 1), etc.</p>
<p dir="auto">The first strand moves two spaces (two ââ characters) to the right on line 1, adding 1 twice. It then moves one ââ to the left on line 2, subtracting two. This leaves zero. This makes the first strand a <em>zero strand</em>. The default command applied to a strand is addition assignement, and so zero strands usually invoke no operation.</p>
<p dir="auto">The second strand is also a zero strand: it makes the same motions in reverse of the first strand, subtracting two and then adding two strand back.</p>
<p dir="auto">The third strand adds the value two to the third cell or list 1. The importance of the two zero strands is in marking the third strand to write to cell 2 of list 1, rather than cell 0.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Reference Strands</h3><a id="user-content-reference-strands" aria-label="Permalink: Reference Strands" href="#reference-strands"></a></p>
<p dir="auto">Reference strands look identical to value strands, only they end with a Location Marker, a small gap that punctuates the end of the strand. It appears in the two top strands here:</p>
<div data-snippet-clipboard-copy-content="1 âµâ°âââ®  â­âââ¯
2   â´âââ¶â®âââ¶ 
3       âââ®        
5            â·"><pre><code>1 âµâ°âââ®  â­âââ¯
2   â´âââ¶â®âââ¶ 
3       âââ®        
5            â·
</code></pre></div>
<p dir="auto">The movement of Reference Strands back and forth through the glyph has no effect on what they reference; only where they end.</p>
<p dir="auto">The first strand above is no longer a Zero Strand, but a reference to the first cell (cell 0) of List 2. The second strand beginning on line 1 refers to the second cell (cell 1) of List 2. This is because between those two strands is a strand writing to cell 0 of List 2. If we wanted both of the top strands to read from cell 0 of List 2, we would move its end to before that assignment (here using the vertical version of the Location Marker):</p>
<div data-snippet-clipboard-copy-content="1 âµâ°âââ®â­âââââ¯
2   â´âââ·â¶â® 
3        âââ®        
5            â·"><pre><code>1 âµâ°âââ®â­âââââ¯
2   â´âââ·â¶â® 
3        âââ®        
5            â·
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Action Strands</h2><a id="user-content-action-strands" aria-label="Permalink: Action Strands" href="#action-strands"></a></p>
<p dir="auto">The default command is addition assignment ( += ). To choose another commands, we create an Action Strand to apply to an existing data strand.</p>
<p dir="auto">Action Strands have hooks that point down or to the right. They sit directly below the data strand they apply to. If two data strands' hooks are aligned vertically, the top action strand applies to the top data strand, the second to the second, etc.</p>
<p dir="auto">Where a data strand's value is determined by movements to the left and right, action strands determine value through vertical movement. Their line numbers are independent of the other strands in the glyph, each beginning with line 1 as the column where they begin. Their neighbors to the left and right are line 2, followed by 3 and 5.</p>
<p dir="auto">EXAMPLE: This command that raises the values of list 1, cells 0 and 1, each to their fourth power:</p>
<div data-snippet-clipboard-copy-content=" 1 âµâ°ââ® â°ââ®
 2    â   â 
 3  â­â´âââ­â´ââ
 5  â   â 
 7  â   â
11  â°ââ® â°ââ®
13    â   â â·
    1 2 1 2"><pre><code> 1 âµâ°ââ® â°ââ®
 2    â   â 
 3  â­â´âââ­â´ââ
 5  â   â 
 7  â   â
11  â°ââ® â°ââ®
13    â   â â·
    1 2 1 2
</code></pre></div>
<p dir="auto">The action strands each have a value of 4, which corresponds to exponentiation_assignment, under data strands of value 4. Here is the (INCOMPLETE) command list, showing which values assign to what command:</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Value</th>
<th>Command</th>
<th>Interpretation</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>addition_assignment</td>
<td>add to location, set to zero by default</td>
</tr>
<tr>
<td>0</td>
<td>overwrite</td>
<td>assignment, overwriting existing value</td>
</tr>
<tr>
<td>1</td>
<td>insert</td>
<td>inserts value after indicated cell</td>
</tr>
<tr>
<td>-1</td>
<td>subtraction assignment</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>multiplication assignment</td>
<td></td>
</tr>
<tr>
<td>-2</td>
<td>division assignment</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>no-op</td>
<td>TBD; currently only has value when assigned to list</td>
</tr>
<tr>
<td>-3</td>
<td>mod assignment</td>
<td>modulus of cell value against supplied argument</td>
</tr>
<tr>
<td>4</td>
<td>exponentiation assignment</td>
<td>raise to power of supplied argument"</td>
</tr>
<tr>
<td>-4</td>
<td>root assignment</td>
<td>take root at power of supplied argument</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">:WARNING: It is every-other-line that increments between the primes, as the vertical length for a block-drawing char is longer than their horizontal length. This sounds confusing but is usually clear visually.</p>
<p dir="auto">Here is an example of two action strands and their numbering:</p>
<div data-snippet-clipboard-copy-content="  â­ââ® â­â´  â­â´ 
  â â â   â â
â â â°ââ¯   â â
â°ââ¯       â°ââ¯
5 3 2 1   1 2"><pre><code>  â­ââ® â­â´  â­â´ 
  â â â   â â
â â â°ââ¯   â â
â°ââ¯       â°ââ¯
5 3 2 1   1 2
</code></pre></div>
<p dir="auto">The first strand has a value of: (1 - 2 + 2*3 - 5) = 2, multiplication assignment. The second strand has a value of (2 * 1) - (2 * 2) = -2, division assignment.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">List indicator</h3><a id="user-content-list-indicator" aria-label="Permalink: List indicator" href="#list-indicator"></a></p>
<p dir="auto">Action strands can also mark that a command applies not to a single cell (as is the default) but to an entire list. This is indicated by ending an action strand with a horizontal movement. When a list indicator appears, the data strand maintains the same order as if it were its cell that updates. If cell 3 has an action strand, it is still run after cell 2 and before cell 4 strands.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">List 2 List</h3><a id="user-content-list-2-list" aria-label="Permalink: List 2 List" href="#list-2-list"></a></p>
<p dir="auto">If an action strand ends with a location marker (the tiny gap), it shows that the action should be applied for every cell of the referenced list to every cell of the assigned list. This is only syntactically valid when the data strand also ends with a location marker (is a reference strand).</p>
<p dir="auto">Every cell with a number in the second list is applied to the cells in the first.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Question Strand Sets</h2><a id="user-content-question-strand-sets" aria-label="Permalink: Question Strand Sets" href="#question-strand-sets"></a></p>
<p dir="auto">Question Strands appear in pairs, one above the other.</p>
<p dir="auto">Together, they pose a question about the state of the data. Should it be found wanting, the glyph and its siblings (those at the same level) are rolled back. If in a loop, only the most recent iteration is undone. This is the only way to exit a loop.</p>
<p dir="auto">The top question strand begins with a vertical line. It ends either to the left or right of where it began (above or below has no semantic meaning).</p>
<p dir="auto">The bottom question strand begins directly above its partner. It too ends either to the left or right of where it began, and it ends with a vertical piece (indicating the question applies only to a single cell) or a horizontal piece (indicating the entire list is to be questioned, the answer an accumulation of its answer).</p>
<p dir="auto">Question strands, read only by their beginning vs end, can move back and forth through the glyph, filling in blank spaces. They are often decorative, gap-filling lines.</p>
<p dir="auto">Question lines always fail if an item is less than or equal to zero.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Top Line</th>
<th>Bottom Line</th>
<th>Use</th>
<th>Checks</th>
</tr>
</thead>
<tbody>
<tr>
<td>Left</td>
<td>Horizontal</td>
<td>If</td>
<td>List (all items)</td>
</tr>
<tr>
<td>Left</td>
<td>Vertical</td>
<td>If</td>
<td>Cell</td>
</tr>
<tr>
<td>Right</td>
<td>Horizontal</td>
<td>While</td>
<td>List</td>
</tr>
<tr>
<td>Right</td>
<td>Vertical</td>
<td>While</td>
<td>Cell</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto">(any) vs (all) are equivalent if testing only a single cell</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Piranesi's Perspective Trick (2019) (276 pts)]]></title>
            <link>https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9</link>
            <guid>43492562</guid>
            <pubDate>Thu, 27 Mar 2025 11:41:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9">https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9</a>, See on <a href="https://news.ycombinator.com/item?id=43492562">Hacker News</a></p>
Couldn't get https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Modern C (118 pts)]]></title>
            <link>https://gustedt.gitlabpages.inria.fr/modern-c/</link>
            <guid>43492211</guid>
            <pubDate>Thu, 27 Mar 2025 10:49:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gustedt.gitlabpages.inria.fr/modern-c/">https://gustedt.gitlabpages.inria.fr/modern-c/</a>, See on <a href="https://news.ycombinator.com/item?id=43492211">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="text-1">
<p>
The free version of this new edition is now available at
</p>



<p>
This new edition has been the occasion to overhaul the presentation in
many places, but its main purpose is the update to the new C standard,
<a href="https://www.iso.org/standard/82075.html">C23</a>.  The goal was to publish this new edition of Modern C at the same
time as the new C standard goes through the procedure of ISO
publication. The closest approximation of the contents of the new
standard in a publically available document can be found <a href="https://www.open-std.org/JTC1/SC22/WG14/www/docs/n3220.pdf">here</a>.  New
releases of major compilers already implement most of the new features
that it brings.
</p>

<p>
Among the most noticeable changes and additions that we handle are
those for integers: there are new bit-precise types coined
<code>_BitInt(N)</code>, new C library headers <code>&lt;stdckdint.h&gt;</code> (for arithmetic
with overflow check) and <code>&lt;stdbit.h&gt;</code> (for bit manipulation),
possibilities for 128 bit types on modern architectures, and
substantial improvements for enumeration types. Other new concepts in
C23 include a <code>nullptr</code> constant and its underlying type, syntactic
annotation with attributes, more tools for type generic programming
such as type inference with <code>auto</code> and <code>typeof</code>, default
initialization with <code>{}</code>, even for variable length arrays, and
<code>constexpr</code> for name constants of any type. Furthermore, new material
has been added, discussing compound expressions and lambdas, so-called
âinternationalizationâ, a comprehensive approach for program failure.
</p>

<p>
Also added has been an appendix and a temporary include header for an
easy transition to C23 on existing platforms, that will allow you to
start off with C23 right away.
</p>

<hr>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[They Might Be Giants Flood EPK Promo (1990) [video] (165 pts)]]></title>
            <link>https://www.youtube.com/watch?v=C-tQSFQ-ESY</link>
            <guid>43490173</guid>
            <pubDate>Thu, 27 Mar 2025 03:37:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.youtube.com/watch?v=C-tQSFQ-ESY">https://www.youtube.com/watch?v=C-tQSFQ-ESY</a>, See on <a href="https://news.ycombinator.com/item?id=43490173">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[DeepSeek-V3 Technical Report (129 pts)]]></title>
            <link>https://arxiv.org/abs/2412.19437</link>
            <guid>43490167</guid>
            <pubDate>Thu, 27 Mar 2025 03:36:40 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arxiv.org/abs/2412.19437">https://arxiv.org/abs/2412.19437</a>, See on <a href="https://news.ycombinator.com/item?id=43490167">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content-inner">
    
    
    <div><p><span>Authors:</span><a href="https://arxiv.org/search/cs?searchtype=author&amp;query=DeepSeek-AI" rel="nofollow">DeepSeek-AI</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liu,+A" rel="nofollow">Aixin Liu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Feng,+B" rel="nofollow">Bei Feng</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xue,+B" rel="nofollow">Bing Xue</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+B" rel="nofollow">Bingxuan Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wu,+B" rel="nofollow">Bochao Wu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lu,+C" rel="nofollow">Chengda Lu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhao,+C" rel="nofollow">Chenggang Zhao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Deng,+C" rel="nofollow">Chengqi Deng</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+C" rel="nofollow">Chenyu Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ruan,+C" rel="nofollow">Chong Ruan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Dai,+D" rel="nofollow">Damai Dai</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Guo,+D" rel="nofollow">Daya Guo</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yang,+D" rel="nofollow">Dejian Yang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+D" rel="nofollow">Deli Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ji,+D" rel="nofollow">Dongjie Ji</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+E" rel="nofollow">Erhang Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lin,+F" rel="nofollow">Fangyun Lin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Dai,+F" rel="nofollow">Fucong Dai</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Luo,+F" rel="nofollow">Fuli Luo</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Hao,+G" rel="nofollow">Guangbo Hao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+G" rel="nofollow">Guanting Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+G" rel="nofollow">Guowei Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+H" rel="nofollow">H. Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Bao,+H" rel="nofollow">Han Bao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu,+H" rel="nofollow">Hanwei Xu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+H" rel="nofollow">Haocheng Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+H" rel="nofollow">Haowei Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ding,+H" rel="nofollow">Honghui Ding</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xin,+H" rel="nofollow">Huajian Xin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Gao,+H" rel="nofollow">Huazuo Gao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+H" rel="nofollow">Hui Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Qu,+H" rel="nofollow">Hui Qu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Cai,+J" rel="nofollow">J.L. Cai</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Liang,+J" rel="nofollow">Jian Liang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Guo,+J" rel="nofollow">Jianzhong Guo</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ni,+J" rel="nofollow">Jiaqi Ni</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+J" rel="nofollow">Jiashi Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+J" rel="nofollow">Jiawei Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+J" rel="nofollow">Jin Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+J" rel="nofollow">Jingchang Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yuan,+J" rel="nofollow">Jingyang Yuan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Qiu,+J" rel="nofollow">Junjie Qiu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+J" rel="nofollow">Junlong Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Song,+J" rel="nofollow">Junxiao Song</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Dong,+K" rel="nofollow">Kai Dong</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Hu,+K" rel="nofollow">Kai Hu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Gao,+K" rel="nofollow">Kaige Gao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Guan,+K" rel="nofollow">Kang Guan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Huang,+K" rel="nofollow">Kexin Huang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yu,+K" rel="nofollow">Kuai Yu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+L" rel="nofollow">Lean Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+L" rel="nofollow">Lecong Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu,+L" rel="nofollow">Lei Xu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xia,+L" rel="nofollow">Leyi Xia</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhao,+L" rel="nofollow">Liang Zhao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+L" rel="nofollow">Litong Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+L" rel="nofollow">Liyue Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+M" rel="nofollow">Meng Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+M" rel="nofollow">Miaojun Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+M" rel="nofollow">Mingchuan Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+M" rel="nofollow">Minghua Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Tang,+M" rel="nofollow">Minghui Tang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+M" rel="nofollow">Mingming Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Tian,+N" rel="nofollow">Ning Tian</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Huang,+P" rel="nofollow">Panpan Huang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+P" rel="nofollow">Peiyi Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+P" rel="nofollow">Peng Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+Q" rel="nofollow">Qiancheng Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhu,+Q" rel="nofollow">Qihao Zhu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+Q" rel="nofollow">Qinyu Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Du,+Q" rel="nofollow">Qiushi Du</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+R" rel="nofollow">R.J. Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Jin,+R" rel="nofollow">R.L. Jin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ge,+R" rel="nofollow">Ruiqi Ge</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+R" rel="nofollow">Ruisong Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Pan,+R" rel="nofollow">Ruizhe Pan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+R" rel="nofollow">Runji Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu,+R" rel="nofollow">Runxin Xu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhang,+R" rel="nofollow">Ruoyu Zhang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+R" rel="nofollow">Ruyi Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li,+S" rel="nofollow">S.S. Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Lu,+S" rel="nofollow">Shanghao Lu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhou,+S" rel="nofollow">Shangyan Zhou</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chen,+S" rel="nofollow">Shanhuang Chen</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wu,+S" rel="nofollow">Shaoqing Wu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ye,+S" rel="nofollow">Shengfeng Ye</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ye,+S" rel="nofollow">Shengfeng Ye</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ma,+S" rel="nofollow">Shirong Ma</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+S" rel="nofollow">Shiyu Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhou,+S" rel="nofollow">Shuang Zhou</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yu,+S" rel="nofollow">Shuiping Yu</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zhou,+S" rel="nofollow">Shunfeng Zhou</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Pan,+S" rel="nofollow">Shuting Pan</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang,+T" rel="nofollow">T. Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yun,+T" rel="nofollow">Tao Yun</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Pei,+T" rel="nofollow">Tian Pei</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Sun,+T" rel="nofollow">Tianyu Sun</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xiao,+W" rel="nofollow">W.L. Xiao</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zeng,+W" rel="nofollow">Wangding Zeng</a></p>
  <p>
    et al. (100 additional authors not shown)
  </p></div>            
    <p><a href="https://arxiv.org/pdf/2412.19437">View PDF</a>
    <a href="https://arxiv.org/html/2412.19437v2">HTML (experimental)</a></p><blockquote>
            <span>Abstract:</span>We present DeepSeek-V3, a strong Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token. To achieve efficient inference and cost-effective training, DeepSeek-V3 adopts Multi-head Latent Attention (MLA) and DeepSeekMoE architectures, which were thoroughly validated in DeepSeek-V2. Furthermore, DeepSeek-V3 pioneers an auxiliary-loss-free strategy for load balancing and sets a multi-token prediction training objective for stronger performance. We pre-train DeepSeek-V3 on 14.8 trillion diverse and high-quality tokens, followed by Supervised Fine-Tuning and Reinforcement Learning stages to fully harness its capabilities. Comprehensive evaluations reveal that DeepSeek-V3 outperforms other open-source models and achieves performance comparable to leading closed-source models. Despite its excellent performance, DeepSeek-V3 requires only 2.788M H800 GPU hours for its full training. In addition, its training process is remarkably stable. Throughout the entire training process, we did not experience any irrecoverable loss spikes or perform any rollbacks. The model checkpoints are available at <a href="https://github.com/deepseek-ai/DeepSeek-V3" rel="external noopener nofollow">this https URL</a>.
    </blockquote>

    <!--CONTEXT-->
    
  </div><div>
      <h2>Submission history</h2><p> From: Wenfeng Liang [<a href="https://arxiv.org/show-email/8023bf0d/2412.19437" rel="nofollow">view email</a>]      <br>            <strong><a href="https://arxiv.org/abs/2412.19437v1" rel="nofollow">[v1]</a></strong>
        Fri, 27 Dec 2024 04:03:16 UTC (1,114 KB)<br>
    <strong>[v2]</strong>
        Tue, 18 Feb 2025 17:26:38 UTC (1,114 KB)<br>
</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[DJ With Apple Music launches to enable subscribers to mix their own sets (189 pts)]]></title>
            <link>https://www.musicweek.com/digital/read/dj-with-apple-music-launches-to-enable-subscribers-to-mix-their-own-sets/091655</link>
            <guid>43489271</guid>
            <pubDate>Thu, 27 Mar 2025 00:51:30 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.musicweek.com/digital/read/dj-with-apple-music-launches-to-enable-subscribers-to-mix-their-own-sets/091655">https://www.musicweek.com/digital/read/dj-with-apple-music-launches-to-enable-subscribers-to-mix-their-own-sets/091655</a>, See on <a href="https://news.ycombinator.com/item?id=43489271">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                    <p dir="ltr">Apple has introduced DJ with Apple Music, which enables&nbsp;<a href="https://www.musicweek.com/digital/read/apple-music-launches-replay-2024-and-reveals-year-end-charts/090980"><span>Apple Music</span></a><span> subscribers to build and mix sets directly from the streaming services catalogue.</span></p>
<p dir="ltr">The feature is integrated with DJ software and hardware platforms AlphaTheta, Serato and InMusicâs Engine DJ, Denon DJ, Numark, and Rane DJ. It builds on an integration with Algoriddim's Djay Pro software.</p>
<p dir="ltr">DJs at all levels will have access to Apple Musicâs catalogue of more than 100 million songs to create and rehearse their sets on any of these DJ software and hardware platforms&nbsp;</p>
<p dir="ltr">âApple Music is committed to supporting DJs,â said<a href="https://www.musicweek.com/live/read/apple-music-and-the-warehouse-project-to-release-spatial-audio-dj-sets/090349"> Stephen Campbell, global head of dance, electronic &amp; DJ mixes at Apple Music</a>. âWith this latest integration, weâre taking that commitment even further â seamlessly connecting Apple Music with the industryâs leading DJ software and hardware. This innovation brings the full power of Apple Music into the creative workflow, making it easier than ever for DJs to access, play, and discover music in real time.â</p>
<p dir="ltr">Users can also access a new dedicated DJ with Apple Music category page, spotlighting a series of DJ-friendly editorial playlists, along with new curator pages for each DJ software and hardware platform that will showcase any mixes or sample playlists that can be used to practice.</p>
<p dir="ltr">"The integration of Djay with Apple Music across mobile, desktop, and spatial devices opens up a world of creative possibilities for both beginners and seasoned pros,â said Karim Morsy, CEO at Algoriddim. âWith instant access to Apple Musicâs catalogue of over 100 million songs, <a href="https://www.musicweek.com/digital/read/apple-music-monetises-dj-mixes-for-creators-and-rights-holders/084104">DJs can mix anytime</a>, anywhere â transforming the way they discover and play their favorite music. Whether using Automix for a seamless, hands-free experience or crafting their own unique sets with djayâs powerful mixing tools, this integration marks a major milestone in making DJing more accessible than ever.â</p>
<blockquote>
<p>Apple Music is committed to supporting DJs</p>
<p>Stephen Campbell</p>
</blockquote>
<p dir="ltr">âWe are thrilled to bring this integration with Apple Music to DJs around the world and in their creative process," said Yoshinori Kataoka, president and CEO of AlphaTheta. "This marks a significant step forward in making DJing more accessible, and we couldnât be more excited about the possibilities it opens up.â</p>
<p dir="ltr">"At inMusic, our goal has always been to empower DJs with innovative tools that enhance creativity and performance,â said Morgan Donoghue, VP marketing, DJ brands at InMusic. âIntegrating Apple Music into our Engine DJ platforms marks a major step forward, giving DJs instant access to a vast library of over 100 million tracks and expertly curated playlists to build and refine their sets with ease. This collaboration ensures DJs at every level can seamlessly discover, play, and integrate new music into their creative workflow."</p>
<p dir="ltr">âTeaming up with Apple Music is a milestone moment for Seratoâs artist community,â said Young Ly, CEO at Serato. âWe are excited to see established and new DJs alike combine their passion and creativity with access to one of the largest streaming catalogues in the world.â</p>
<p dir="ltr">DJ with Apple Music builds upon <a href="https://www.musicweek.com/digital/read/apple-music-expands-live-global-radio-offering-with-three-stations/091020">Apple Musicâs DJ Mixes</a>, a programme that launched on the platform in September 2021 with a collection of thousands of sets.&nbsp;</p>
<p dir="ltr">In December, Apple Music also launched Apple Music Club, a live global radio station with curated DJ mixes.</p>
<p dir="ltr">âTodayâs launch aims to expand on that relationship by encouraging DJs to use this integrated experience as a creative tool, allowing them to access and find inspiration in their libraries more easily,â concluded the statement.</p>
                </div><p> For more stories like this, and to keep up to date with all our market leading news, features and analysis, sign up to receive our daily <a href="https://subs.musicweek.com/register?surveycode=9" target="_blank">Morning Briefing newsletter</a> </p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The mysterious flow of fluid in the brain (131 pts)]]></title>
            <link>https://www.quantamagazine.org/the-mysterious-flow-of-fluid-in-the-brain-20250326/</link>
            <guid>43489136</guid>
            <pubDate>Thu, 27 Mar 2025 00:31:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.quantamagazine.org/the-mysterious-flow-of-fluid-in-the-brain-20250326/">https://www.quantamagazine.org/the-mysterious-flow-of-fluid-in-the-brain-20250326/</a>, See on <a href="https://news.ycombinator.com/item?id=43489136">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="postBody">
                <div>
        <p>
            A popular hypothesis for how the brain clears molecular waste, which may help explain why sleep feels refreshing, is a subject of debate.        </p>
        
    </div>
    <figure>
        <div>
                            <p><img width="2560" height="1440" src="https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic-Theory-cr.ChanelleNibbelink-Lede.webp" alt="An illustration shows a personâs head that looks like a drawn map. Rushing rivers, standing for cerebrospinal fluid, flow around small islands." decoding="async" fetchpriority="high" srcset="https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic-Theory-cr.ChanelleNibbelink-Lede.webp 2560w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic-Theory-cr.ChanelleNibbelink-Lede-1720x968.webp 1720w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic-Theory-cr.ChanelleNibbelink-Lede-520x293.webp 520w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic-Theory-cr.ChanelleNibbelink-Lede-768x432.webp 768w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic-Theory-cr.ChanelleNibbelink-Lede-1536x864.webp 1536w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic-Theory-cr.ChanelleNibbelink-Lede-2048x1152.webp 2048w" sizes="(max-width: 2560px) 100vw, 2560px">                </p>
                        </div>
        <figcaption>
    <div>
                            <p>No one knows why cerebrospinal fluid circulates through and around our brains, or what directs its flow.</p>
            <p>Chanelle Nibbelink for&nbsp;<em>Quanta Magazine</em></p>
        </div>
</figcaption>
    </figure>
<div>
            <h2>Introduction</h2>
            <div data-role="selectable">
    <p>Encased in the skull, perched atop the spine, the brain has a carefully managed existence. It receives only certain nutrients, filtered through <a href="https://www.quantamagazine.org/how-the-brain-protects-itself-from-blood-borne-threats-20230620/">the blood-brain barrier</a>; an elaborate system of protective membranes surrounds it. That privileged space contains a mystery. For more than a century, scientists have wondered: If itâs so hard for anything to get into the brain, how does waste get out?</p>
<p>The brain has one of the highest metabolisms of any organ in the body, and that process must yield by-products that need to be removed. In the rest of the body, blood vessels are shadowed by a system of lymphatic vessels. Molecules that have served their purpose in the blood move into these fluid-filled tubes and are swept away to the lymph nodes for processing. But blood vessels in the brain have no such outlet. Several hundred kilometers of them, all told, seem to thread their way through this dense, busily working tissue without a matching waste system.</p>
<p>However, the brainâs blood vessels are surrounded by open, fluid-filled spaces. In recent decades, the cerebrospinal fluid, or CSF, in those spaces has drawn a great deal of interest. âMaybe the CSF can be a highway, in a way, for the flow or exchange of different things within the brain,â said Steven Proulx, who studies the CSF system at the University of Bern.</p>
<p>A recent paper in <em>Cell</em> contains a new report about <a href="https://doi.org/10.1016/j.cell.2024.11.027">what is going on around the brain</a> and in its hidden cavities. A team at the University of Rochester led by the neurologist <a href="https://www.urmc.rochester.edu/labs/nedergaard">Maiken Nedergaard</a> asked whether the slow pumping of the brainâs blood vessels might be able to push the fluid around, among, and in some cases through cells, to potentially drive a system of drainage. In a mouse model, researchers injected a glowing dye into CSF, manipulated the blood vessel walls to trigger a pumping action, and saw the dye concentration increase in the brain soon after. They concluded that the movement of blood vessels might be enough to move CSF, and possibly the brainâs waste, over long distances.</p>
<p>The team took a further step in their interpretation. Because this kind of pumping â distinct from the familiar pulse from the heart â is regularly observed during sleep, they suggest that perhaps their observations can help explain why sleep feels refreshing. But itâs a hypothesis that <a href="https://www.thetransmitter.org/glymphatic-system/maiken-nedergaards-power-of-disruption/">not everyone agrees is well founded</a>. When it comes to ascribing purpose to the fluid moving through the brain, many researchers believe that the truth is still elusive.</p>
<h2><strong>Brain Drain</strong></h2>
<p>At the center of the brain are flooded caverns, like great cisterns shrouded in darkness, called ventricles. Cerebrospinal fluid seeps from the ventricle walls and then moves. Under pressure, it emerges elsewhere within the skull, flows down the neck and enters the spine.</p>
</div>
    </div>
    <figure>
        <div>
                            <p><img width="1580" height="1064" src="https://www.quantamagazine.org/wp-content/uploads/2025/03/Maiken-Nedergaard-cr._______.webp" alt="A portrait of Maiken Nedergaard." decoding="async" srcset="https://www.quantamagazine.org/wp-content/uploads/2025/03/Maiken-Nedergaard-cr._______.webp 1580w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Maiken-Nedergaard-cr._______-520x350.webp 520w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Maiken-Nedergaard-cr._______-768x517.webp 768w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Maiken-Nedergaard-cr._______-1536x1034.webp 1536w" sizes="(max-width: 1580px) 100vw, 1580px">                </p>
                        </div>
        <figcaption>
    <div>
                            <p>The neurologist Maiken Nedergaardâs âglymphatic hypothesisâ proposes that cerebrospinal fluid helps drain waste from the brain during sleep. Her evidence is highly debated.</p>
            <div>
    <p>Adam Fenster, University of Rochester</p>
</div>
        </div>
</figcaption>
    </figure>
<div data-role="selectable">
    <p>Scientists have known for more than a century that, <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC2094440/">at the moment of death</a>, CSF flows from the spine into the brain. This suggests that the living brain somehow keeps the stuff moving, but no one knows exactly how or where it flows. Any arrows drawn on diagrams of the brain and skull to show its movement should not be taken as the complete truth.</p>
<p>âEveryone accepts that there must be some kind of flow here,â said <a href="https://ki.se/en/people/christer-betsholtz">Christer Betsholtz</a>, a professor of vascular biology at the Karolinska Institute in Sweden. âAbout half a liter of CSF is produced in the ventricles every day, and it has to get out. People are still fighting about where the cerebrospinal fluid gets out.â</p>

<p>Also under discussion is whether it picks up waste on the way out of the brain and, crucially, how. There is good evidence that small molecules, at least, can diffuse through the spaces between cells, make their way to the CSF, and <a href="https://doi.org/10.1016/b978-0-12-804279-3.00002-2">ride it out of the brain</a>. In fact, some researchers believe that the entire system works by way of passive diffusion.</p>
<p>In 2012, results from Nedergaardâs lab suggested a more active process. Nedergaard, along with the neurologist <a href="https://psychiatry.uw.edu/profile/jeff-iliff/">Jeffrey Iliff</a>, then a postdoc in her lab, and their colleagues, <a href="https://doi.org/10.1126/scitranslmed.3003748">injected a tracer into cerebrospinal fluid</a> and watched it quickly arrive elsewhere. How did it get from one place to another? They proposed that the spaces around blood vessels commune with even smaller spaces deep in the brain, between individual cells. They also suggested that CSF moves through brain cells called astrocytes into those spaces. There, the fluid might drop off some molecules and pick up others; it may then wend its way back out to the spaces around blood vessels, and thence move waste out of the brain. All of this would have to be driven by a flow of uncertain mechanism.</p>
<p>It was a striking idea. Nedergaard, who is the senior author of the new paper, and colleagues soon made it more striking by linking it to another mystery: why sleep seems to be beneficial. In a 2013 paper, her team wrote that there was <a href="https://doi.org/10.1126/science.1241224">more movement of cerebrospinal fluid</a> in sleeping and anesthetized mice than in waking ones â and that perhaps during sleep CSF sweeps waste out of the brain. Maybe this âbrainwashing,â as headlines described it, could provide one reason <a href="https://www.linkedin.com/pulse/what-we-know-why-need-sleep-quanta-magazine-sojqe">why sleep is necessary</a>, and explain how much better we feel after a good night of it.</p>
</div>
    <figure>
        <div>
                            <p><img src="https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic_Theory-crMarkBelan-Mobilev3.svg" alt="" decoding="async"><img src="https://www.quantamagazine.org/wp-content/uploads/2025/03/Glymphatic_Theory-crMarkBelan-Desktopv3.svg" alt="" decoding="async">                </p>
                        </div>
        <figcaption>
    <div>
            <p>Mark Belan/<em>Quanta Magazine</em></p>
        </div>
</figcaption>
    </figure>
<div data-role="selectable">
    <p>âIâm of the strong belief that the restorative part of sleep is not memory consolidation,â Nedergaard said. âMaybe it is partly. But it is really the housekeeping function of sleep that is important.â</p>
<p>In the years since those initial studies, <a href="https://pubmed.ncbi.nlm.nih.gov/?term=glymphatic&amp;page=1">a large number of papers</a> referencing this brain-drainage theory, called the glymphatic hypothesis, have been published. Itâs a catchy idea, but parts of the story <a href="https://doi.org/10.7554/eLife.27679">raise red flags</a> to some researchers who study the brainâs vasculature.</p>
<p><a href="https://profiles.ucsf.edu/alan.verkman">Alan Verkman</a>, a professor emeritus at the University of California, San Francisco who studies fluid flow in the body, has argued that some aspects of the theory are physically implausible â for instance, the channels said to let the fluid in cannot actually play the role demanded of them. According to Betsholtz, there is no evidence that fluid is moving into the spaces around blood vessels that leave the brain.</p>
<p>But many other researchers appear to have accepted the glymphatic hypothesis. Thatâs because it fills a hole in our understanding of the brain, said <a href="https://mcdonald.ucsf.edu/our-research">Donald McDonald</a>, who studies blood and lymph vessels at the UCSF School of Medicine. Personally, he doesnât feel that the theory holds water, but he acknowledges its popularity. It fits comfortably in the space where there is a mystery.</p>
<h2><strong>Ebb and Flow</strong></h2>

<p>Imagine a sealed bottle of water. To study that fluid in its natural state, you have to cut a hole in the bottle. This is the difficulty that scientists studying CSF flow have to deal with. âIf you are studying a fluid and you put a hole in the system, you really change it,â said <a href="https://imes.mit.edu/people/lewis-laura">Laura Lewis</a>, a professor of neuroscience at the Massachusetts Institute of Technology. âFluid dynamics are really easily disturbed by invasive procedures.â Further, so many behaviors that living animals perform, such as breathing and having a heartbeat, directly affect the fluid.</p>
<p>Building a case for a new hypothesis in this area, then, is tricky. In the Nedergaard groupâs recent <em>Cell</em> paper, the team wanted to explore <a href="https://doi.org/10.1016/j.cell.2024.11.027">an intriguing connection</a> that would not only explain how CSF could be pumped between brain cells, but also link that process to sleep.</p>
<p>For the study, mice underwent surgery to have sensors, wires and tubes implanted within the brain â one way to study the bottle of water. The researchersâ goal was to inject tracer dye into CSF at one point in the brain and then track its oscillations and dynamics while the mice slept.</p>
<p>The data showed that, while mice were in their nonârapid eye movement (NREM) phase of sleep, the concentration of tracer moved rhythmically. From a sensor perched above the brain surface, the researchers saw a pattern of increases and decreases, according to first author Natalie Haugland. âIt had this wave pattern.â</p>
<p>What could be driving this rhythmic flow? The researchers thought of the neurotransmitter norepinephrine, which causes blood vessels to constrict. âNorepinephrine is very well known for controlling blood flow,â Nedergaard said. Itâs possible, they thought, that vessels constricting and relaxing could put enough force on the surrounding cerebrospinal fluid to push it through the brainâs tissues.</p>
</div>
    <figure>
        <div>
                            <p><img width="1496" height="893" src="https://www.quantamagazine.org/wp-content/uploads/2025/03/Natalie-Hauglund-cr._______.webp" alt="A portrait of Natalie Haugland." decoding="async" srcset="https://www.quantamagazine.org/wp-content/uploads/2025/03/Natalie-Hauglund-cr._______.webp 1496w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Natalie-Hauglund-cr._______-520x310.webp 520w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Natalie-Hauglund-cr._______-768x458.webp 768w" sizes="(max-width: 1496px) 100vw, 1496px">                </p>
                        </div>
        <figcaption>
    <div>
                            <p>Research led by Natalie Haugland suggests that pulses of norepinephrine help pump cerebrospinal fluid through the brain during non-REM sleep.</p>
            <p>BjÃ¶rn Sigurdsson</p>
        </div>
</figcaption>
    </figure>
<div data-role="selectable">
    <p>Whatâs more, during NREM sleep norepinephrine levels change rhythmically. This neurotransmitter could help tie together their hypotheses â the physical movement of CSF through brain tissues and the âbrainwashingâ occurring during sleep.</p>
<p>The team engineered mice in which they could switch the production of the neurotransmitter on and off. When norepinephrine levels went up, the volume of CSF in the brain went up, they saw, suggesting that it was somehow altering the fluidâs flow.</p>

<p>Then, to test whether the pumping of blood vessels could move CSF, the team engineered mice with blood vessel walls they could manipulate directly. Instead of pumping the vessels slowly, as happens naturally, they moved the walls quickly â once every 10 seconds rather than once every 50. âWhen we did this, we increased CSF flow on one side of the brainâ in a very small area where they were pumping, Haugland said. âIt was very local. â¦ Everywhere else in the brain it was the same.â</p>
<p>For Nedergaard, Haugland and their collaborators, the findings tie together norepinephrine, the physical movement of blood vessels, and the flow of CSF in the brain. Nedergaard also asserts that the results are consistent with her groupâs earlier finding that there is more brain drainage during sleep than during wakefulness.</p>
<p>âWe have been searching for why the glymphatic [system] primarily works when we sleep for a long time,â Nedergaard said. âThe paper is really about: Now weâve found the motor or the driver of how we wash the brain when we sleep.â</p>
<p>However, to critics of the theory, there are still too many open spaces.</p>
<h2><strong>Under Pressure</strong></h2>

<p>McDonald, of the UCSF School of Medicine, pointed out that the work is complex and requires many intricate methods. However, heâs concerned that Nedergaard is working backward: seeking an explanation for her hypothesis rather than trying to find out how the system actually works. âIn this paper, itâs unclear what is interpretation and what is data,â he said. âVery early on, their interpretation gets substituted for what actually are the data.â He pointed to schematics showing flow dynamics that he doesnât see supported, for instance.</p>
<p>Proulx questioned whether the tracer dye moved via an active force at all. The molecule is so small that it could be traveling by diffusion, he said. He imagines an experiment, using techniques Nedergaardâs lab has used before, where a large molecule is infused into the CSF. If the rhythmic releases of norepinephrine correlate with the arrival of a larger tracer at a sensor on the brainâs surface, that would be a fascinating finding. âThatâs what I would have liked to have seen,â he said. To his eye, it would make a clearer connection between fluid flow and norepinephrine than the labâs work has shown thus far.</p>
<p>The critiques of Nedergaardâs work come on strong in part because this idea is currently the most prominent hypothesis of CSF flow in the brain. That may change if other researchers can introduce other ideas that can be tested. Another wrinkle is that not everyone means the same thing when they talk about the glymphatic system. âSome people use âglymphaticsâ to mean âwaste transport system of the brain.â Other people use it to mean a really specific mechanistic model,â Lewis said. âItâs clear that the brain has and needs a waste clearance system. â¦ Itâs really interesting to explore what that is and how that works.â</p>
        
        
<p>Haugland, now a postdoc at the University of Oxford, is aware of the controversy about the glymphatic hypothesis. âThere is critique of it. Iâm also not sure that we understand it in the right way,â she said. âThe more people who are actually working on finding out how it works, no matter what their hypothesis is â all that will help drive the field forward and give us more knowledge.</p>
<p>âThe results are what they are. They show something about the biology,â she continued. âWe are trying to ask a lot of questions and weâre not, maybe, all the time very good at it because we donât know how it works â the big picture.â</p>
<p>âNobody has the truth,â Proulx said, about what the brain is doing up there, in our skulls, to rid itself of its waste. âSome people think they know. But I think we donât know.â</p>
</div>
                
                
            </div><div>
        <div data-name="next-post__image-wrapper">
    <p><img width="1720" height="728" src="https://www.quantamagazine.org/wp-content/uploads/2025/03/Newtons-Method-cr.MicheleSclafani-HP-1720x728.webp" alt="" decoding="async" srcset="https://www.quantamagazine.org/wp-content/uploads/2025/03/Newtons-Method-cr.MicheleSclafani-HP-1720x728.webp 1720w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Newtons-Method-cr.MicheleSclafani-HP-520x220.webp 520w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Newtons-Method-cr.MicheleSclafani-HP-768x325.webp 768w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Newtons-Method-cr.MicheleSclafani-HP-1536x650.webp 1536w, https://www.quantamagazine.org/wp-content/uploads/2025/03/Newtons-Method-cr.MicheleSclafani-HP-2048x867.webp 2048w" sizes="(max-width: 1720px) 100vw, 1720px">    </p>
</div>
        
        <div>
                <h2>Next article</h2>
                <p>Three Hundred Years Later, a Tool from Isaac Newton Gets an Update</p>
            </div>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Blender releases their Oscar winning version tool (757 pts)]]></title>
            <link>https://www.blender.org/download/releases/4-4/</link>
            <guid>43489114</guid>
            <pubDate>Thu, 27 Mar 2025 00:27:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.blender.org/download/releases/4-4/">https://www.blender.org/download/releases/4-4/</a>, See on <a href="https://news.ycombinator.com/item?id=43489114">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<article id="post-93964" class="page">
			<div>
				
<div id="intro">
<figure data-wp-context="{&quot;imageId&quot;:&quot;67e4adfc735b2&quot;}" data-wp-interactive="core/image"><img fetchpriority="high" decoding="async" width="1000" height="500" data-wp-class--hide="state.isContentHidden" data-wp-class--show="state.isContentVisible" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2025/03/splash.webp" alt="Splash artwork: Flow Â© Dream Well Studio, Sacrebleu Productions, Take Five
Image licensed under CC-BY-SA - https://flow.movie/" srcset="https://www.blender.org/wp-content/uploads/2025/03/splash.webp 1000w, https://www.blender.org/wp-content/uploads/2025/03/splash-512x256.webp 512w, https://www.blender.org/wp-content/uploads/2025/03/splash-768x384.webp 768w" sizes="(max-width: 1000px) 100vw, 1000px"><figcaption><mark>Splash artwork: <mark>Flow</mark> Â© Dream Well Studio, Sacrebleu Productions, Take Five</mark><br><mark>Image licensed under CC-BY-SA â <a href="https://flow.movie/" target="_blank" rel="noreferrer noopener">https://flow.movie/</a></mark></figcaption></figure>
</div>



<div id="reel">
<figure><p>
<iframe title="Blender 4.4 - Showcase Reel" width="500" height="281" src="https://www.youtube.com/embed/TQElJP1AaS0?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p></figure>
</div>



<div id="recap">
<h2>Whatâs New <strong>Recap</strong></h2>



<p>Round-up of whatâs new in Blender 4.4, in detail.</p>



<figure><p>
<iframe title="What's New in Blender 4.4! Official Overview" width="500" height="281" src="https://www.youtube.com/embed/-eqPs-boihU?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</p><figcaption>Blender 4.4 new features overview by Jonathan Lampel from <a href="https://www.youtube.com/channel/UC9VayT7q3pQ7tdF-TG4Q0yQ" data-type="link" data-id="https://www.youtube.com/channel/UC9VayT7q3pQ7tdF-TG4Q0yQ" target="_blank" rel="noreferrer noopener">CGCookie</a>, <a href="https://www.youtube.com/@harryblends" data-type="link" data-id="https://www.youtube.com/@harryblends" target="_blank" rel="noreferrer noopener">Harry Blends</a>, <a href="https://www.youtube.com/@PCaggegi" data-type="link" data-id="https://www.youtube.com/@PCaggegi" target="_blank" rel="noreferrer noopener">Paul Caggegi</a>, and <a href="https://www.youtube.com/@waynedixon7280" data-type="link" data-id="https://www.youtube.com/@waynedixon7280" target="_blank" rel="noreferrer noopener">Wayne Dixon</a>.</figcaption></figure>
</div>



<div id="quality">
<div>
<h2><strong>QUALITY</strong> BLEND</h2>



<p>Blender 4.4 is all about stability. During the 2024â2025 northern hemisphere winter, Blender developers doubled down on quality and stability in a group effort called âWinter of Quality.â</p>
</div>



<div>
<div>
<div>
<figure data-wp-context="{&quot;imageId&quot;:&quot;67e4adfc74833&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="750" height="430" data-wp-class--hide="state.isContentHidden" data-wp-class--show="state.isContentVisible" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2025/03/blender_winter_of_quality_high_severity_bugs.webp" alt="Amount of high severity bugs since January 1st." srcset="https://www.blender.org/wp-content/uploads/2025/03/blender_winter_of_quality_high_severity_bugs.webp 750w, https://www.blender.org/wp-content/uploads/2025/03/blender_winter_of_quality_high_severity_bugs-512x294.webp 512w" sizes="auto, (max-width: 750px) 100vw, 750px"><figcaption>Amount of high severity bugs since January 1st, 2025</figcaption></figure>
</div>



<div>
<h2>Winter of <strong><mark>Quality</mark></strong></h2>



<p>In just a few months, developers fixed<strong> <a href="https://developer.blender.org/docs/release_notes/4.4/bugfixes/" data-type="link" data-id="https://developer.blender.org/docs/release_notes/4.4/bugfixes/" target="_blank" rel="noreferrer noopener"><mark>over 700</mark></a> </strong>reported issues, revisited old bug reports, and addressed unreported problems.</p>



<p>Alongside bug fixes, Winter of Quality also included tackling technical debt and improving documentation.</p>




</div>
</div>



<h2>Issues Addressed per Module</h2>




</div>
</div>



<section id="animation">
<div>
<div>
<h2><strong>ACTION</strong> PACKED</h2>



<p>Blender 4.4 introduces <strong>Action Slots</strong>, revolutionizing animation workflows by letting multiple data-blocks share a single Action.</p>
</div>



<div>
<div>
<h2>WHAT ARE<br><mark>ACTION</mark><strong><mark> SLOTS</mark></strong>?</h2>



<p>Before Action Slots, each data-block specific animationâlike an objectâs position, a cameraâs depth of field, or a materialâs shader propertiesâneeded its own separate Action. This made it difficult to animate multiple elements together or share animations between objects or even projects.</p>
</div>



<div>
<div>
<p>For example, if you wanted to animate a camera moving while also changing its depth of field, youâd need two separate Actions, which couldnât be easily linked or reused.</p>



<p>Now you can mix all sorts of animations such as an objectâs position, its material properties, even compositing effectsâall within a single Action.</p>




</div>



<div>
<figure data-wp-context="{&quot;imageId&quot;:&quot;67e4adfc76baf&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="884" height="466" data-wp-class--hide="state.isContentHidden" data-wp-class--show="state.isContentVisible" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2025/03/action_slots.webp" alt="Action Slots in Blender 4.4" srcset="https://www.blender.org/wp-content/uploads/2025/03/action_slots.webp 884w, https://www.blender.org/wp-content/uploads/2025/03/action_slots-512x270.webp 512w, https://www.blender.org/wp-content/uploads/2025/03/action_slots-768x405.webp 768w" sizes="auto, (max-width: 884px) 100vw, 884px"></figure>
</div>
</div>
</div>
</div>



<h2>MORE <strong>ANIMATION</strong></h2>



<div id="word-cloud-block_b85d66c7a871960db7d4f62fc4679261">
			<p>Rigging</p>
			<ul>
											<li>
																<a href="https://docs.blender.org/manual/en/latest/animation/armatures/bones/editing/symmetrize.html" target="_blank">
							Bone collection membership is now mirrored when symmetrizing an armature.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/d6da9710d0ebb96394ccd3f02981376f420caac0" target="_blank">
							N-panel normalization now supports locking multiple vertex groups.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/5100a80f7f" target="_blank">
							Removing a modifier, constraint, or shape key also deletes its driver.						</a>
														</li>
										</ul>
		</div>
</section>



<section id="vse">
<div>
<div>
<div>
<h2><strong>VSE:</strong> <strong>V</strong>astly <strong>S</strong>uperior <strong>E</strong>diting</h2>



<p>The Video Sequencer continues to improve with quality-of-life upgrades for text editing, expanded support for codecs including H.265 and 10/12-bit videos, and performance improvements that make editing faster than ever.</p>
</div>



<div>
<h2>EDIT TEXT <strong>ON THE SPOT</strong></h2>



<p>Introducing: Edit mode for text strips in Preview! </p>



<figure><video autoplay="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2025/03/vse_text_edit_mode_subtitles.mp4"></video><figcaption>Simply press <strong>Tab</strong> and type away.</figcaption></figure>



<h2>FIND YOUR <strong>CENTER</strong> </h2>



<p>Multi-line text strips can now be properly aligned to the left, right, or center.</p>



<figure><video autoplay="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2025/03/vse_text_alignment.mp4"></video></figure>
</div>



<div>
<p>
<h2><strong>FASTER</strong><br><s>EDITING</s> EVERYTHING</h2>
</p>



<div>
<ul>
<li><a href="https://projects.blender.org/blender/blender/pulls/128752" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/128752" target="_blank" rel="noreferrer noopener">Building proxies</a> for image sequences is <strong>faster</strong> now.</li>



<li>Preview playback <a href="https://projects.blender.org/blender/blender/pulls/128829" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/128829" target="_blank" rel="noreferrer noopener">performance of float/HDR content</a> is <strong>faster</strong> now.</li>



<li>Text strip <a href="https://projects.blender.org/blender/blender/pulls/130403" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/130403" target="_blank" rel="noreferrer noopener">background fill âBoxâ is <strong>several times faster</strong></a> for large fill areas.</li>



<li><a href="https://projects.blender.org/blender/blender/pulls/131736" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/131736" target="_blank" rel="noreferrer noopener">Curves, Hue Correct, White Balance</a> modifiers are <strong>1.5x-2x faster</strong> now.</li>



<li>Many <a href="https://projects.blender.org/blender/blender/pulls/132380" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/132380" target="_blank" rel="noreferrer noopener">sequencer effects</a> are <strong>slightly faster</strong> now thanks to more efficient multi-threading.</li>
</ul>
</div>
</div>
</div>



<div>
<div>
<p>
<h2><strong>VIDEO</strong><br>BEYOND</h2>
</p>




</div>



<div>
<div>
<p>Blender now supports <a href="https://projects.blender.org/blender/blender/pulls/129298" data-type="link" data-id="https://projects.blender.org/blender/blender/pulls/129298"><strong>10 and 12 bit/channel</strong></a> videos!</p>



<p>During rendering, you can set a <strong>color depth</strong> of 10 or 12 bits for supported codecs (<strong>10 bit </strong>for<strong> H.264, H.265, AV1</strong>, <strong>12 bit </strong>for<strong> H.265, AV1</strong>).</p>



<p>When reading <strong>10-bit</strong> or <strong>12-bit</strong> videos, they are loaded as <strong>floating-point</strong> images.</p>
</div>



<p>
<h2>A <strong>BIT</strong><br>MORE</h2>
</p>
</div>
</div>
</div>



<h2>EVEN MORE <strong>SEQUENCER</strong></h2>




</section>



<div id="extensions"><p><strong>EXPAND</strong><br>
YOUR BLENDER</p>



<div>
<p>The <a href="https://extensions.blender.org/" data-type="link" data-id="https://extensions.blender.org/" target="_blank" rel="noreferrer noopener">Blender Extensions platform</a> keeps growing, with over 500 free add-ons and themes to customize your workflows.</p>



<p>You can also share your own add-ons and themes!</p>
</div>




</div>



<section id="modeling">
<div>
<div>
<h5>MODELING</h5>



<h2><strong>Pole</strong> Position</h2>



<p>A new option in the <strong>Select by Trait</strong> operator lets you select by pole count.</p>



<p>Easily find all 3-pole or 5-pole points in your mesh.</p>



<p>Given their impact on topology, the default selects all poles that do not have 4 edges, allowing for easy inspection.</p>




</div>



<div>
<div>
<figure><img loading="lazy" decoding="async" width="425" height="622" src="https://www.blender.org/wp-content/uploads/2025/03/modeling_topology_influence.webp" alt="Topology Influence" srcset="https://www.blender.org/wp-content/uploads/2025/03/modeling_topology_influence.webp 425w, https://www.blender.org/wp-content/uploads/2025/03/modeling_topology_influence-350x512.webp 350w" sizes="auto, (max-width: 425px) 100vw, 425px"></figure>
</div>



<div>
<h5>MODELING</h5>



<h2>Influencer</h2>



<p>Joining triangles to quads now prioritizes quad-dominant topology, creating a more structured âgridâ layout. This helps maintain cleaner geometry and improves mesh flow, especially in models where uniform quads are preferred.</p>



<p>This behavior can be adjusted using a <strong>topology influence factor</strong>, to better control how triangles are merged.</p>




</div>
</div>



<div>
<div>
<h5>MODELING</h5>



<h2>Vertex &amp; Edge <strong>Dissolve</strong></h2>



<p>Dissolving edges may remove additional, unselected edges to ensure the mesh remains valid. Previously, this also dissolved vertices connected to those unselected edges.</p>



<p>The new behavior processes only vertices that belonged to the selected, now dissolved edges.</p>




</div>



<div>
<figure><img loading="lazy" decoding="async" width="838" height="684" src="https://www.blender.org/wp-content/uploads/2025/03/modeling_improved_dissolve.webp" alt="Mesh Dissolve" srcset="https://www.blender.org/wp-content/uploads/2025/03/modeling_improved_dissolve.webp 838w, https://www.blender.org/wp-content/uploads/2025/03/modeling_improved_dissolve-512x418.webp 512w, https://www.blender.org/wp-content/uploads/2025/03/modeling_improved_dissolve-768x627.webp 768w" sizes="auto, (max-width: 838px) 100vw, 838px"></figure>
</div>
</div>
</div>



<div>
<h2>MORE <strong>MODELING</strong></h2>



</div>
</section>



<section id="benchmark"><img loading="lazy" decoding="async" width="1920" height="1080" alt="Projects to Look forward to in 2024" src="https://www.blender.org/wp-content/uploads/2023/12/020_0130_A.jpg" data-object-fit="cover" data-object-position="50% 30%" srcset="https://www.blender.org/wp-content/uploads/2023/12/020_0130_A.jpg 1920w, https://www.blender.org/wp-content/uploads/2023/12/020_0130_A-512x288.jpg 512w, https://www.blender.org/wp-content/uploads/2023/12/020_0130_A-1280x720.jpg 1280w, https://www.blender.org/wp-content/uploads/2023/12/020_0130_A-768x432.jpg 768w, https://www.blender.org/wp-content/uploads/2023/12/020_0130_A-1536x864.jpg 1536w, https://www.blender.org/wp-content/uploads/2023/12/020_0130_A-480x270.jpg 480w" sizes="auto, (max-width: 1920px) 100vw, 1920px"></section>



<section id="sculpt">
<div>
<h5>SCULPT</h5>



<h2><strong>Plane</strong> &amp; Simple</h2>



<p>Stay grounded or reach new heights with a new sculpt brush type: <strong>Plane</strong>.</p>



<figure><video autoplay="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2025/03/sculpt_plane_brush.mp4"></video></figure>







<div>
<div>
<figure><img loading="lazy" decoding="async" width="435" height="522" src="https://www.blender.org/wp-content/uploads/2025/03/sculpt_plane_brush.webp" alt="Sculpt Plane Brush in Blender 4.4" srcset="https://www.blender.org/wp-content/uploads/2025/03/sculpt_plane_brush.webp 435w, https://www.blender.org/wp-content/uploads/2025/03/sculpt_plane_brush-427x512.webp 427w" sizes="auto, (max-width: 435px) 100vw, 435px"><figcaption>Customized settings for the Plane brush type in Blender 4.4</figcaption></figure>
</div>



<div>
<p>The <strong>Plane</strong> brush is a generalization of the existing <strong>Flatten</strong>, <strong>Fill</strong>, and <strong>Scrape</strong> brushes, with new options to control stabilization and range of influence above and below the brush plane.</p>



<p>Key features include adjustable <strong>height</strong> above the brush plane, <strong>depth</strong> control for vertices below it, and an option to <strong>invert</strong> these settings.</p>



<p><strong>Stabilization</strong> options for the <strong>Normal</strong> (brush planeâs orientation) and <strong>Plane</strong>âs position are also available for precise control.</p>




</div>
</div>
</div>



<div>
<h2>MORE <strong>SCULPT</strong></h2>



</div>
</section>



<section id="ui">
<div>
<div>
<div>
<figure data-wp-context="{&quot;imageId&quot;:&quot;67e4adfc7f066&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="610" height="654" data-wp-class--hide="state.isContentHidden" data-wp-class--show="state.isContentVisible" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2025/03/blender_ui_window_border.webp" alt="Blender UI Window Border" srcset="https://www.blender.org/wp-content/uploads/2025/03/blender_ui_window_border.webp 610w, https://www.blender.org/wp-content/uploads/2025/03/blender_ui_window_border-478x512.webp 478w" sizes="auto, (max-width: 610px) 100vw, 610px"><figcaption>New window decorations on Windows 11</figcaption></figure>
</div>



<div>
<h5>USER INTERFACE</h5>



<h2>She Comes in <strong><mark>C</mark><mark>o</mark><mark>l</mark><mark>o</mark><mark>r</mark><mark>s</mark></strong></h2>



<p>Window decorations now follow the theme colors on Windows 11 and macOS.</p>
</div>
</div>



<div>
<div>
<div>
<h2>Snap Into Place</h2>



<p>Editors now softly snap to minimum and maximum sizes, with improved splitting previews and docking feedback.</p>



<p>Scrollbars are hidden for small editors.</p>
</div>



<p>
<figure><video autoplay="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2025/03/blender_editor_snap.mp4"></video><figcaption>Resizing editors now snaps to a minimum, maximum, and half way.</figcaption></figure>
</p>
</div>



<div>
<p>
<figure><video autoplay="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2025/03/blender_editor_scrollbars_hidden.mp4"></video><figcaption>Scrollbars are now automatically hidden.</figcaption></figure>
</p>



<div>
<h2>Hidden Away</h2>



<p>Horizontal scrollbars are now hidden automatically when they donât fit in the editor.</p>
</div>
</div>



<div>
<p>
<figure><video autoplay="" loop="" muted="" src="https://www.blender.org/wp-content/uploads/2025/03/node_editor_gray_out_items.mp4"></video><figcaption>See at a glance whether inputs are valid.</figcaption></figure>
</p>



<div>
<h5>Node Editor</h5>



<h2>Fade</h2>



<p>In Node Editors, inputs that canât affect output are now grayed out for group nodes, Geometry Nodes modifiers, and node tools.</p>




</div>
</div>
</div>
</div>



<div>
<h2>OTHER <strong>EDITOR</strong> IMPROVEMENTS</h2>




</div>



<div>
<div>
<h5>macOS</h5>



<h2>Quick Look</h2>



<p>On macOS, you can now preview blend file contents in a thumbnail in Finder, App ExposÃ© and Spotlight.</p>
</div>



<div>
<figure data-wp-context="{&quot;imageId&quot;:&quot;67e4adfc84f1a&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="1232" height="645" data-wp-class--hide="state.isContentHidden" data-wp-class--show="state.isContentVisible" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2025/03/macos_preview.webp" alt="macos Preview" srcset="https://www.blender.org/wp-content/uploads/2025/03/macos_preview.webp 1232w, https://www.blender.org/wp-content/uploads/2025/03/macos_preview-512x268.webp 512w, https://www.blender.org/wp-content/uploads/2025/03/macos_preview-768x402.webp 768w" sizes="auto, (max-width: 1232px) 100vw, 1232px"><figcaption>.blend file previews on macOS Finder.</figcaption></figure>
</div>
</div>



<div>
<h2>EVERYTHING <strong>UI</strong></h2>




</div>
</section>



<div id="donate"><p><img loading="lazy" decoding="async" width="1270" height="720" alt="Sprite Fright" src="https://www.blender.org/wp-content/uploads/2023/03/sprite_fright_older_sprite_16x9.jpg" data-object-fit="cover" srcset="https://www.blender.org/wp-content/uploads/2023/03/sprite_fright_older_sprite_16x9.jpg 1270w, https://www.blender.org/wp-content/uploads/2023/03/sprite_fright_older_sprite_16x9-512x290.jpg 512w, https://www.blender.org/wp-content/uploads/2023/03/sprite_fright_older_sprite_16x9-768x435.jpg 768w" sizes="auto, (max-width: 1270px) 100vw, 1270px"></p></div>



<section id="compositor">
<div>
<div>
<div>
<h5>COMPOSITOR</h5>



<h2><strong>Speed</strong><br>for Everyone</h2>



<p>The CPU compositor was rewritten to pave the way for future development.</p>



<p>The rewrite provides significant improvements in performance in certain configurations of some nodes, caching of static resources like images, and less memory usage on node setups with many nodes that operate on pixels.</p>



<p>Filter nodes are particularly faster now:</p>



<ul>
<li><strong><a href="https://docs.blender.org/manual/en/4.4/compositing/types/utilities/levels.html" data-type="link" data-id="https://docs.blender.org/manual/en/4.4/compositing/types/utilities/levels.html" target="_blank" rel="noreferrer noopener">Levels</a></strong> node is up to <strong>10x</strong> faster.</li>



<li><strong><a href="https://docs.blender.org/manual/en/4.4/compositing/types/filter/filter.html" data-type="link" data-id="https://docs.blender.org/manual/en/4.4/compositing/types/filter/filter.html" target="_blank" rel="noreferrer noopener">Filter</a></strong> and <a href="https://docs.blender.org/manual/en/4.4/compositing/types/filter/kuwahara.html" data-type="link" data-id="https://docs.blender.org/manual/en/4.4/compositing/types/filter/kuwahara.html" target="_blank" rel="noreferrer noopener"><strong>Kuwahara</strong></a> are <strong>twice</strong> as fast.</li>



<li><strong><a href="https://docs.blender.org/manual/en/4.4/compositing/types/filter/blur/index.html" data-type="link" data-id="https://docs.blender.org/manual/en/4.4/compositing/types/filter/blur/index.html" target="_blank" rel="noreferrer noopener">Blur</a></strong> nodes up to <strong>four</strong> <strong>times</strong> faster.</li>



<li><strong><a href="https://docs.blender.org/manual/en/4.4/compositing/types/filter/glare.html" data-type="link" data-id="https://docs.blender.org/manual/en/4.4/compositing/types/filter/glare.html" target="_blank" rel="noreferrer noopener">Glare</a></strong> filter is not only more advanced but also <strong>6x</strong> more performant.</li>



<li><a href="https://docs.blender.org/manual/en/4.4/compositing/types/filter/pixelate.html" data-type="link" data-id="https://docs.blender.org/manual/en/4.4/compositing/types/filter/pixelate.html" target="_blank" rel="noreferrer noopener"><strong>Pixelate</strong></a> node is <strong>9x</strong> faster.</li>
</ul>



<p>Adjusting compositor node trees can be significantly faster and more interactive. Thatâs because the compositor now <a href="https://projects.blender.org/blender/blender/commit/e53ac805af" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/e53ac805af">avoids computing outputs</a> that arenât viewed by the user through the backdrop or image editor.</p>



<p>The overall compositing experience should now feel more responsive, whether youâre using the CPU or GPU.</p>
</div>



<div id="chart-bars-block_a069cc7391226ff14dbd739cd30a176f">
  <div>
    <ul>
                  <li>
          <span></span>
          <span>Blender 4.3</span>
        </li>
                        <li>
          <span></span>
          <span>Blender 4.4</span>
        </li>
              </ul>
  </div>

  <ul>
          <li>
        <p>Levels</p>
        
      </li>
          <li>
        <p>Pixelate</p>
        
      </li>
          <li>
        <p>Glare</p>
        
      </li>
          <li>
        <p>Pixel Nodes</p>
        
      </li>
          <li>
        <p>Bilateral Blur</p>
        
      </li>
          <li>
        <p>Variable Blur</p>
        
      </li>
          <li>
        <p>Kuwahara</p>
        
      </li>
          <li>
        <p>Masks</p>
        
      </li>
          <li>
        <p>Lens Distortion</p>
        
      </li>
      </ul>

    <div>
    <ul>
    <li>0</li><li>2</li><li>4</li><li>6</li><li>8</li><li>10</li>    </ul>
  </div>
  
  <div>
    
          <ul>
        <li><span>Relative performance (higher is better)</span></li>              </ul>
      </div>
  </div>
</div>



<div>
<div>
<figure data-wp-context="{&quot;imageId&quot;:&quot;67e4adfc8bbd6&quot;}" data-wp-interactive="core/image"><img loading="lazy" decoding="async" width="814" height="1048" data-wp-class--hide="state.isContentHidden" data-wp-class--show="state.isContentVisible" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://www.blender.org/wp-content/uploads/2025/03/compositor_new_glare_node.webp" alt="" srcset="https://www.blender.org/wp-content/uploads/2025/03/compositor_new_glare_node.webp 814w, https://www.blender.org/wp-content/uploads/2025/03/compositor_new_glare_node-398x512.webp 398w, https://www.blender.org/wp-content/uploads/2025/03/compositor_new_glare_node-768x989.webp 768w" sizes="auto, (max-width: 814px) 100vw, 814px"><figcaption>Comparison between Blender 4.3 and Blender 4.4</figcaption></figure>
</div>



<div>
<h5>COMPOSITOR</h5>



<h2><strong>Glare</strong> Glow Up</h2>



<p>The Glare node got a major revamp for better control and usability:</p>



<ul>
<li><strong><a href="https://projects.blender.org/blender/blender/commit/004e3d39fa" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/004e3d39fa">Linkable Inputs</a></strong> â Most node options are now input sockets you can connect.</li>



<li><strong><a href="https://projects.blender.org/blender/blender/commit/004e3d39fa" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/004e3d39fa">New Outputs</a></strong> â Generated glare and highlights are now exposed as output sockets.</li>



<li>A new <strong><strong><a href="https://projects.blender.org/blender/blender/commit/004e3d39fa" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/004e3d39fa">Strength</a></strong></strong> input lets you adjust glare intensity.</li>



<li><strong><a href="https://projects.blender.org/blender/blender/commit/004e3d39fa" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/004e3d39fa">Fog Glow</a></strong> and <strong><a href="https://projects.blender.org/blender/blender/commit/004e3d39fa" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/004e3d39fa">Bloom</a></strong> sizes are now <strong>linear</strong> and scale properly.</li>



<li>More realistic, energy-conserving, and properly scaled <strong><a href="https://projects.blender.org/blender/blender/commit/b92a6eab3a" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/b92a6eab3a">Bloom</a></strong>.</li>



<li>Adjust <a href="https://projects.blender.org/blender/blender/commit/c37d51f73d" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/c37d51f73d">glare <strong>saturation</strong> and <strong>tint</strong></a> with dedicated inputs.</li>



<li><strong><a href="https://projects.blender.org/blender/blender/commit/3b28cf276e" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/3b28cf276e">Highlight Control</a></strong> â Clamp and smooth highlights with the new <strong>Smoothness</strong> and <strong>Maximum</strong> inputs.</li>



<li><strong><a href="https://projects.blender.org/blender/blender/commit/14a380089a" data-type="link" data-id="https://projects.blender.org/blender/blender/commit/14a380089a">Tidy UI</a></strong> â Inputs are now neatly organized into collapsible panels.</li>
</ul>




</div>
</div>
</div>



<div>
<h2>MORE <strong>COMPOSITOR</strong></h2>



</div>
</section>



<section id="vfx-platform"><img loading="lazy" decoding="async" width="2048" height="858" alt="Still from Agent 327: view of Amsterdam." src="https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146.jpg" data-object-fit="cover" srcset="https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146.jpg 2048w, https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146-512x215.jpg 512w, https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146-1280x536.jpg 1280w, https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146-768x322.jpg 768w, https://www.blender.org/wp-content/uploads/2023/07/a327_barbershop_00146-1536x644.jpg 1536w" sizes="auto, (max-width: 2048px) 100vw, 2048px"><div><p><strong>INDUSTRY</strong> READY</p>



<p>All library versions used in Blender 4.4 are aligned with the <a href="https://vfxplatform.com/" data-type="link" data-id="https://vfxplatform.com/" target="_blank" rel="noreferrer noopener"><strong>VFX Reference Platform 2025</strong></a>, making studio pipeline integration and maintenance easier.</p>




</div></section>



<section id="more">
<h2>BUT WAIT, <strong>THEREâS MORE</strong></h2>


<div id="word-cloud-block_7b805d224241dc1bde0a2bc10d5c226f">
			<div>
			<p>Geometry Nodes</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/1098f434b091" target="_blank">
							New node <strong>âFind in Stringâ</strong>.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/65b1ab43bf9f" target="_blank">
							New input nodes: <strong>Collection</strong> and <strong>Object</strong>.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/7074daed047a" target="_blank">
							New âLimit Surfaceâ option available in the <strong>Subdivision Surface</strong> node.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/b36eb6903879" target="_blank">
							<strong>Normal</strong> input node now outputs proper face corner normals instead of just face normals.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/84c7684871d7" target="_blank">
							<strong>Join Geometry</strong> and <strong>Realize Instances</strong> nodes now preserve the vertex group status of input attributes.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/95ef33059c39b9" target="_blank">
							The text overlay in the 3D view works for matrix attributes now.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/ea875f6f3278" target="_blank">
							Performance: <strong>Triangulate</strong> node is <strong>30x to 100x faster</strong>.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/9d13e39585ee" target="_blank">
							<strong>Sort Elements</strong> node is <strong>50% faster</strong> in common scenarios.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/6e9d988018ef" target="_blank">
							The <strong>Warning</strong> node now has a dynamic label depending on the selected type.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/4de34c8205a4" target="_blank">
							UI: Resizing nodes now support <strong>snapping</strong>.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Core</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/pulls/129119" target="_blank">
							Added support for rendering videos using <strong>H.265/HEVC</strong> codec.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/132812" target="_blank">
							<code>BLENDER_SYSTEM_SCRIPTS</code> now supports multiple paths.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/132812" target="_blank">
							New <code>BLENDER_CUSTOM_SPLASH</code> to replace the splash screen artwork.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/128790" target="_blank">
							EXR images that use DWAA/DWAB compression codec now have a Quality setting						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/132877" target="_blank">
							âRender Audioâ can now render to AAC (.aac) format.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/core/#other" target="_blank">
							Auto-save and quit.blend files are now always saved with compression. 						</a>
														</li>
										</ul>
		</div>
			
			<div>
			<p>USD</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/391612c7259f496d5176f1ce545d26f491490e7f" target="_blank">
							Animated volumes from Geometry Nodes or volume modifiers are now supported for export.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/b4c2feea38cb4a1a75d685d6b05c270af288c4db" target="_blank">
							Material displacement for UsdPreviewSurface is now supported in import and export.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/2523958e0e3ec903c8e555baa01d985ea19384b1" target="_blank">
							Point instancers with animated attributes are now supported on import.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/319c64205ddf7169c8e4a7c06105dee10da0e6e0" target="_blank">
							The experimental âInstancingâ option now supports object hierarchies and non-mesh geometry (e.g., curves, point clouds).						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/pipeline_assets_io/#usd" target="_blank">
							New Python hooks.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/000416c933de383d2a7dc8f5b56f76e2e4a33e41" target="_blank">
							Added âMerge parent Xformâ option to control USD prim merging with its Xform parent during import for better hierarchy preservation.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/0c544974d1690d8476031b9c6965f1920fb90494" target="_blank">
							Added âApply Unit Conversion Scaleâ option to scale objects by the USD stageâs meters per unit value.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/428ab699dcf58c607a8995b9d5e77b8ddb7e3679" target="_blank">
							Added âMerge parent Xformâ option to control whether Blender object transforms are written to their data prim or kept separate on export, reducing USD prim count and preserving hierarchy.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/0c544974d1690d8476031b9c6965f1920fb90494" target="_blank">
							Added âUnitsâ and âMeters Per Unitâ options to set the USD Stage measurement or a custom value.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/3c9a71b46f8ef760f30e88b4caeda13e68ae203a" target="_blank">
							USD &amp; Alembic: Edge and vertex crease processing now respects the value range expected by OpenSubdiv.						</a>
														</li>
										</ul>
		</div>
			
			<div>
			<p>Grease Pencil</p>
			<ul>
											<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/grease_pencil/#blender-44-grease-pencil" target="_blank">
							Several operators and functionality from the old Grease Pencil were restored.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/d4d046a67334b7aacf85b5e7267b95dda10c76b2" target="_blank">
							Properties of locked materials can be edited (similar to properties of locked layers)						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/9438597b3425b70c9ddae4b68d167c64a6027efc" target="_blank">
							Invisible layers are no longer part of evaluated data.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/7878b3908b7e54ec82a7053e4b30e31528914c8c" target="_blank">
							UI: The preview icon of locked materials is no longer grayed out.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/53255bcf6c5079af319849e5f24411bd5d397319" target="_blank">
							âLock allâ and âUnlock allâ operators now work on Layer Groups.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/b16e7dec28297929d1aa9dda691d8d0c868fa0b6" target="_blank">
							âHide Othersâ operator now also considers layer groups.						</a>
														</li>
															<li>
																<span>Vertex colors and layer tinting render in âSolidâ shading mode.</span>
														</li>
										</ul>
		</div>
			<div>
			<p>glTF</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/cf08856ccd5725238b49d6e05741689e0a0fb178" target="_blank">
							Added support for importing Action Slots.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/599788666278d0ce5a822c02ebf2be316a9015df" target="_blank">
							Add option to not select created objects.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/dbb670c6d1d9f724cd8bfd447cc90a7543a79f87" target="_blank">
							Add option to import scene extras or not.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/pipeline_assets_io/#gltf" target="_blank">
							Export: Several (breaking) changes to hooks.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/7ea11a47242bcb284e660d8b7ce91e7f40cb394c" target="_blank">
							Export: Always bake scene animation, so driven animated properties can be exported.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/748c91ce2772354dc5121c603472a44cf7aafa56" target="_blank">
							Export: Add interpolation fallback option.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/pipeline_assets_io/#gltf" target="_blank">
							Export: Several improvements to Collection export.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/pipeline_assets_io/#gltf" target="_blank">
							Bug fixes						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Python API</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/a6b293daacb0259b9879b88e33afc0220306a578" target="_blank">
							New: `bpy.app.module` indicates if Blender is running as Python module.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/481a8b67d42ce03249b2aa6901630254291cbe65" target="_blank">
							New property to check if installation is portable.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/python_api/#curves" target="_blank">
							New operations for Curves.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/python_api/#nodes" target="_blank">
							New properties for Nodes.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/python_api/#grease-pencil_1" target="_blank">
							Grease Pencil Python API updates.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/python_api/#video-sequencer-strips" target="_blank">
							VSE: Major API breaking changes and deprecated properties.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/python_api/#slotted-actions" target="_blank">
							Animation: Slotted Action related additions, deprecated properties and breaking changes.						</a>
														</li>
															<li>
					<strong>											<a href="https://developer.blender.org/docs/release_notes/4.4/python_api/#breaking-changes" target="_blank">
							Complete list of API breaking changes.						</a>
										</strong>				</li>
										</ul>
		</div>
			<div>
			<p>Cycles</p>
			<ul>
											<li>
					<strong>											<a href="https://developer.blender.org/docs/release_notes/4.4/cycles/#optix-denoiser" target="_blank">
							Improved OptiX Denoiser						</a>
										</strong>				</li>
															<li>
					<strong>											<a href="https://projects.blender.org/blender/blender/pulls/133991" target="_blank">
							More accurately render sub-pixel bump mapping.						</a>
										</strong>				</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/128964" target="_blank">
							Baking: Speed up Selected to Active baking.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/cycles/#other" target="_blank">
							OSL: Improved closure compatibility with MaterialX.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/cycles/#sample-subset" target="_blank">
							Improved Sample Subset						</a>
														</li>
															<li>
																<span>More robust host memory fallback when the GPU runs out of memory.</span>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/134170" target="_blank">
							NVIDIA: Support GeForce RTX 50Ã0 series (Blackwell)						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/pulls/133129" target="_blank">
							AMD: Support RX 90Ã0 series (RDNA4)						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/cycles/#amd" target="_blank">
							AMD: HIP RT library updates and minimum driver version increased.						</a>
														</li>
															<li>
																<a href="https://developer.blender.org/docs/release_notes/4.4/cycles/#intel" target="_blank">
							Intel: Minimum driver version increased.						</a>
														</li>
															<li>
																<span>Intel: Improved image texture sampling performance.</span>
														</li>
										</ul>
		</div>
			
			<div>
			<p>Outliner</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/531ed68061" target="_blank">
							Improved vertex group sorting.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/a1fc2eb37a" target="_blank">
							Support Ctrl/Shift for excluding collections.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/25febbbb32" target="_blank">
							Fixed overlapping icons with some display options.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/f181262634" target="_blank">
							Can now un-isolate collection when a linked collection is present.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/62a0350f6d" target="_blank">
							Non-object active item text now drawn in âtext highâ color. 						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/340aa78724" target="_blank">
							Drag and drop to scene now updates the view.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/f4f2248a9c" target="_blank">
							Child objects linked to other collections are now faded.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Windows</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/0193579e90" target="_blank">
							Copy and paste OS image paths into Image Editor. 						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/fe6609c4eb" target="_blank">
							File system volume names display correctly with high-bit Unicode characters.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/d99d19cd22" target="_blank">
							AltGr key is now treated as regular Alt key.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>macOS</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/pulls/131593" target="_blank">
							Improved color picking outside of Blender windows.						</a>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/001c3b0d4b" target="_blank">
							Keymaps can be searched with native key names.						</a>
														</li>
															<li>
																<span>Main window title improvements.</span>
														</li>
															<li>
																<a href="https://projects.blender.org/blender/blender/commit/c3d92f32dc3046bf95d73c864c98fb0ff0316146" target="_blank">
							Enhanced NDOF device input handling when using 3DConnexion driver v10.8.7 and later.						</a>
														</li>
										</ul>
		</div>
			<div>
			<p>Linux</p>
			<ul>
											<li>
																<a href="https://projects.blender.org/blender/blender/commit/720fc44ca3" target="_blank">
							Fixed text pasting from Blender to certain other applications (such as Firefox) not working under X11.						</a>
														</li>
										</ul>
		</div>
		</div>



<p>Plus hundreds of bug fixes, code cleanups and refactors.<br>See the <a href="https://developer.blender.org/docs/release_notes/4.4/" data-type="link" data-id="https://developer.blender.org/docs/release_notes/4.3/" target="_blank" rel="noreferrer noopener">full list of changes</a>.</p>
</section>



<section id="credits">
<h2>CREDITS</h2>



<div>
<p><a href="https://www.blender.org/about/credits/">List of developers</a> that contributed to Blender 4.4</p>



<p>Blender is a community project.<br>Learn more on how you can <a href="https://developer.blender.org/docs/handbook/new_developers/" data-type="link" data-id="https://developer.blender.org/docs/handbook/new_developers/" target="_blank" rel="noreferrer noopener">contribute to Blender</a>.</p>



<div><p>Splash artwork: <strong>Flow Â© Dream Well Studio, Sacrebleu Productions, Take Five â Licensed under CC-BY-SA â <a href="https://flow.movie/" data-type="link" data-id="https://flow.movie/">flow.movie</a></strong></p><p>Huge thanks to everyone involved ð§¡</p></div>



<p>The Blender team. March 18th, 2025</p>
</div>
</section>
			</div>
		</article>
	</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Website Hacker News Is Afraid to Discuss (380 pts)]]></title>
            <link>https://daringfireball.net/2025/03/the_website_hacker_news_is_afraid_to_discuss</link>
            <guid>43489058</guid>
            <pubDate>Thu, 27 Mar 2025 00:18:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://daringfireball.net/2025/03/the_website_hacker_news_is_afraid_to_discuss">https://daringfireball.net/2025/03/the_website_hacker_news_is_afraid_to_discuss</a>, See on <a href="https://news.ycombinator.com/item?id=43489058">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="Box">



<p>Back in 2017, <a href="https://daringfireball.net/2017/09/iphone_x_event_thoughts_and_observations">the iPhone X was announced alongside the iPhones 8 and 8 Plus</a> in mid-September. The iPhones 8 shipped that month, and I published <a href="https://daringfireball.net/2017/09/the_iphones_8">a review of the iPhones 8</a> on September 19. The iPhone X, though, <a href="https://www.apple.com/newsroom/2017/09/the-future-is-here-iphone-x/">wasnât available to order until October 27</a>, and didnât start shipping to customers until November 3. It was an unusual iPhone release cycle that year, to say the least. Initial reviews of the much-anticipated iPhone X appeared on October 31, but Iâd only had the phone for 24 hours when the embargo dropped, so I published <a href="https://daringfireball.net/2017/10/iphone_x_review_roundup">some initial impressions then</a>, but wound up not publishing my <a href="https://daringfireball.net/2017/12/the_iphone_x">full review of the iPhone X</a> until December 26.</p>

<p>A few days later I wrote a follow-up regarding a specific new interaction design, â<a href="https://daringfireball.net/2017/12/side_button_to_confirm_payments_on_iphone_x">Pressing the Side Button to Confirm Payments on iPhone X</a>â, which I began thus:</p>

<blockquote>
  <p>Occasionally I notice a burst of traffic to Daring Fireball from
Hacker News. Itâs always short-lived, because for reasons Iâve
never seen explained, Daring Fireball articles always get
blacklisted from Hacker News once they hit their front page. Itâs
apparent that a lot of HN readers do not like my work on the basis
that they see me as a shameless Apple shill, but itâs a shame the
articles get deleted because I like reading the comments. I feel
like it keeps me on my toes to read the comments from people who
donât like Daring Fireball.</p>

<p>Even after being blacklisted from the Hacker News homepage,
though, the comment threads still exist. I went through <a href="https://news.ycombinator.com/item?id=16014464">the
Hacker News comments on my iPhone X review</a> today, and a few
comments about how Apple Pay works on the iPhone X caught my
attention.</p>
</blockquote>

<p>What I didnât mention then was that DFâs buried status at HN was, at the time, a relatively new phenomenon. Hacker News <a href="https://techcrunch.com/2013/05/18/the-evolution-of-hacker-news/">started in early 2007</a> and for a yearslong stretch, Daring Fireball articles seemed more or less appropriately popular there. Articles that I would think would resonate with the HN readership would hit, and get what always seemed to me an appropriate number of comments. At some point in the mid-2010s though, it seemed like DF articles would get downvoted or flagged after hitting the HN front page. Iâd been noticing this for some time when I wrote the above in December 2017.</p>

<p>But even in 2017, DF articles would get active comment threads on HN occasionally. The Hacker News thread I referenced above, <a href="https://news.ycombinator.com/item?id=16014464">regarding my iPhone X review</a>, garnered 107 comments. In the years after that, DF articles went from being mysteriously disappeared <em>after</em> hitting the HN front page (and gaining some comment traction) to pretty much <em>never</em> hitting the HN front page (and thus never gaining any comment traction). I found this curious, and I couldnât figure out <a href="https://news.ycombinator.com/newsfaq.html">why or how</a> this was happeningâââor who was doing itâââbut I didnât mention it much.</p>

<p>Two years ago, <a href="https://daringfireball.net/2023/02/making_our_hearts_sing#fn1-2023-02-01">I did mention it again in a footnote</a>, in a piece about the inexplicably poor state of Android apps from a design perspective:</p>

<blockquote>
  <p>It sounds a bit conspiratorial, but <a href="https://daringfireball.net/2017/12/side_button_to_confirm_payments_on_iphone_x">for several years
now</a> itâs seemed clear to me that Hacker News has
Daring Fireball in some sort of graylist. Itâs not blacklisted,
obviously, given the aforementioned <a href="https://news.ycombinator.com/item?id=34605535">two</a>
<a href="https://news.ycombinator.com/item?id=34611552">threads</a> about yesterdayâs piece, but nothing I
write here ever gains any significant traction there. Ever. And
the reason there are two threads for yesterdayâs piece is that the
first one disappeared from the home page soon after it was posted.
I think? In <a href="https://news.ycombinator.com/from?site=daringfireball.net">this list of recent Hacker News threads for articles
from DF</a>, going back four months, only three have
more than 10 commentsâââand two of those are the threads from
yesterday. I donât know who I pissed off there or why, but Iâve
never seen an explanation for this. <strong>UPDATE:</strong> <a href="https://news.ycombinator.com/item?id=34626587">HN commenter
Michiel de Mare has quantified the apparent
suppression</a>, based on the ranking of this very
article. Exactly what Iâve noticed for years.</p>
</blockquote>

<p>You can see this yourself right now, with <a href="https://news.ycombinator.com/from?site=daringfireball.net">the current list of recent DF articles submitted to Hacker News</a>. Most of them have 0, 1, or 2 comments. Some got up to 3. â<a href="https://daringfireball.net/2025/03/something_is_rotten_in_the_state_of_cupertino">Something Is Rotten in the State of Cupertino</a>â is the most read, most commented upon things Iâve written in a while. On Hacker News <a href="https://news.ycombinator.com/item?id=43348891">it got just 28 comments</a> before being shitlisted, which, I have to say, is just weird. Thatâs one piece Iâd have thought would resonate with the HN audience, and make for good grist for discussion. Then, after the original thread was shitlisted, someone re-submitted it (perhaps confused that it wasnât on the HN front page). That re-submission <a href="https://news.ycombinator.com/item?id=43355009">got 1 comment</a> before it too fell to the mysterious shitlist reaper.</p>

<p>The one recent exception is â<a href="https://daringfireball.net/2025/03/why_cant_we_screenshot_frames_from_drm-protected_video">Why Canât We Screenshot Frames From DRM-Protected Video on Apple Devices?</a>â, which somehow <a href="https://news.ycombinator.com/item?id=43223985">escaped the shitlist and garnered 208 comments</a>. These occasional exceptions to DFâs general shitlisting at HN have always made the whole thing more mysterious to me. Thereâs clearly no programmatic blacklisting that keeps Daring Fireball articles from being submitted, or from gaining a few comments. But once any traction occurs, <em>something</em> happens and poof, theyâre gone from the Hacker News front page. It certainly doesnât make any sense to me why my off-hand post griping about our inability to screenshot DRM video frames would be an order of magnitude more popular than âSomething Is Rotten in the State of Cupertinoâ was.</p>

<p>Today, though, I saw <a href="https://jasette.facil.services/@jerome/114229390677476922">a helpful mention on Mastodon</a> that pointed me to an interesting project. An author named Michael Lynch has written a tool to quantify â<a href="https://refactoringenglish.com/tools/hn-popularity/">the highest-ranking personal blogs of Hacker News</a>â since HNâs inception in 2007. According to Lynchâs all-time listing, Daring Fireball ranks #5, which I have to say surprised me, given its years of inexplicable (or at the very least, unexplained) shitlisting status. But Lynchâs tool lets you select date ranges. If you look at <a href="https://refactoringenglish.com/tools/hn-popularity/?start=2006-10-09&amp;end=2021-03-26&amp;limit=100">2007 through 2021</a>, Daring Fireball ranked #3, behind only <a href="https://paulgraham.com/">Paul Grahamâs renowned eponymous blog</a> and Brian Krebsâs excellent (and also eponymous) <a href="https://krebsonsecurity.com/">Krebs on Security</a>. From <a href="https://refactoringenglish.com/tools/hn-popularity/?start=2006-10-09&amp;end=2013-03-26&amp;limit=100">2007 though 2013</a>, DF ranked #2, behind only Graham (who created Hacker News). But if you look at the last four years, from <a href="https://refactoringenglish.com/tools/hn-popularity/?start=2021-10-09&amp;end=2025-03-26&amp;limit=100">2021 through 2025</a>, Daring Fireball ranks #72.</p>

<p>Maybe Iâve lost my fastball, and I just donât write so good no more. Or maybe itâs not me, but the Hacker News audience that has changed in recent years.<sup id="fnr1-2025-03-26"><a href="#fn1-2025-03-26">1</a></sup> But it seems to me <a href="https://news.ycombinator.com/item?id=34626587">thereâs something fishy going on</a>. What bothers me isnât so much that Daring Fireball is shitlisted at Hacker Newsâââeven though I really did enjoy reading the commentary on my posts back when they regularly surfaced there, and <a href="https://news.ycombinator.com/user?id=jgruber">still do</a> when one slips through the cracks. What bothers me is that itâs unexplained. Which, ultimately, seems not so much censorial as just cowardly.</p>





 <!-- PreviousNext -->
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Federal Government Detains International Student at Tufts (103 pts)]]></title>
            <link>https://www.nytimes.com/2025/03/26/us/ice-tufts-student-detained-rumeysa-ozturk.html</link>
            <guid>43488916</guid>
            <pubDate>Wed, 26 Mar 2025 23:56:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nytimes.com/2025/03/26/us/ice-tufts-student-detained-rumeysa-ozturk.html">https://www.nytimes.com/2025/03/26/us/ice-tufts-student-detained-rumeysa-ozturk.html</a>, See on <a href="https://news.ycombinator.com/item?id=43488916">Hacker News</a></p>
Couldn't get https://www.nytimes.com/2025/03/26/us/ice-tufts-student-detained-rumeysa-ozturk.html: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Rost â Rust Programming in German (153 pts)]]></title>
            <link>https://github.com/michidk/rost</link>
            <guid>43488490</guid>
            <pubDate>Wed, 26 Mar 2025 23:04:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/michidk/rost">https://github.com/michidk/rost</a>, See on <a href="https://news.ycombinator.com/item?id=43488490">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">rost</h2><a id="user-content-rost" aria-label="Permalink: rost" href="#rost"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/michidk/rost/blob/hauptzweig/logo.jpg"><img src="https://github.com/michidk/rost/raw/hauptzweig/logo.jpg" alt="Rust German Logo"></a></p>
<p dir="auto">Aren't you <em>mÃ¼de</em> from writing Rust programs in English? Do you like saying
"scheiÃe" a lot? Would you like to try something different, in an exotic and
funny-sounding language? Would you want to bring some German touch to your
programs?</p>
<p dir="auto"><strong>rost</strong> (German for <em>Rust</em>) is here to save your day, as it allows you to
write Rust programs in German, using German keywords, German function names,
German idioms.</p>
<p dir="auto">You don't feel at ease using only German words? Don't worry!
German Rust is fully compatible with English-Rust, so you can mix both at your
convenience.</p>
<p dir="auto">Here's an example of what can be achieved with Rost:</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">struct and impl (aka Konvention und Umsetzung)</h2><a id="user-content-struct-and-impl-aka-konvention-und-umsetzung" aria-label="Permalink: struct and impl (aka Konvention und Umsetzung)" href="#struct-and-impl-aka-konvention-und-umsetzung"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="rost::rost! {
    benutze std::sammlungen::WÃ¶rterbuch als WÃ¶bu;

    eigenschaft SchlÃ¼sselWert {
        fk schreibe(&amp;selbst, schlsl: Zeichenkette, wert: Zeichenkette);
        fk lese(&amp;selbst, schlsl: Zeichenkette) -> Ergebnis<MÃ¶glichkeit<&amp;Zeichenkette>, Zeichenkette>;
    }

    statisch Ã¤nd WÃRTERBUCH: MÃ¶glichkeit<WÃ¶bu<Zeichenkette, Zeichenkette>> = Nichts;

    struktur Konkret;

    umstz SchlÃ¼sselWert fÃ¼r Konkret {

        fk schreibe(&amp;selbst, schlsl: Zeichenkette, wert: Zeichenkette) {
            lass wÃ¶bu = gefÃ¤hrlich {
                WÃRTERBUCH.hole_oder_fÃ¼ge_ein_mit(Standard::standard)
            };
            wÃ¶bu.einfÃ¼gen(schlsl, wert);
        }

        fk lese(&amp;selbst, schlsl: Zeichenkette) -> Ergebnis<MÃ¶glichkeit<&amp;Zeichenkette>, Zeichenkette> {
            wenn lass Etwas(wÃ¶bu) = gefÃ¤hrlich { WÃRTERBUCH.als_ref() } {
                Gut(wÃ¶bu.hole(&amp;schlsl))
            } anderenfalls {
                Fehler(&quot;Holt das WÃ¶rterbuch&quot;.hinein())
            }
        }
    }
}"><pre>rost<span>::</span>rost! <span>{</span>
    benutze std<span>::</span>sammlungen<span>::</span><span>WÃ¶rterbuch</span> als <span>WÃ¶bu</span><span>;</span>

    eigenschaft <span>SchlÃ¼sselWert</span> <span>{</span>
        fk schreibe<span>(</span><span>&amp;</span>selbst<span>,</span> schlsl<span>:</span> <span>Zeichenkette</span><span>,</span> wert<span>:</span> <span>Zeichenkette</span><span>)</span><span>;</span>
        fk lese<span>(</span><span>&amp;</span>selbst<span>,</span> schlsl<span>:</span> <span>Zeichenkette</span><span>)</span> -&gt; <span>Ergebnis</span>&lt;<span>MÃ¶glichkeit</span>&lt;<span>&amp;</span><span>Zeichenkette</span>&gt;<span>,</span> <span>Zeichenkette</span>&gt;<span>;</span>
    <span>}</span>

    statisch Ã¤nd <span>WÃRTERBUCH</span><span>:</span> <span>MÃ¶glichkeit</span>&lt;<span>WÃ¶bu</span>&lt;<span>Zeichenkette</span><span>,</span> <span>Zeichenkette</span>&gt;&gt; = <span>Nichts</span><span>;</span>

    struktur <span>Konkret</span><span>;</span>

    umstz <span>SchlÃ¼sselWert</span> fÃ¼r <span>Konkret</span> <span>{</span>

        fk schreibe<span>(</span><span>&amp;</span>selbst<span>,</span> schlsl<span>:</span> <span>Zeichenkette</span><span>,</span> wert<span>:</span> <span>Zeichenkette</span><span>)</span> <span>{</span>
            lass wÃ¶bu = gefÃ¤hrlich <span>{</span>
                <span>WÃRTERBUCH</span><span>.</span>hole_oder_fÃ¼ge_ein_mit<span>(</span><span>Standard</span><span>::</span>standard<span>)</span>
            <span>}</span><span>;</span>
            wÃ¶bu<span>.</span>einfÃ¼gen<span>(</span>schlsl<span>,</span> wert<span>)</span><span>;</span>
        <span>}</span>

        fk lese<span>(</span><span>&amp;</span>selbst<span>,</span> schlsl<span>:</span> <span>Zeichenkette</span><span>)</span> -&gt; <span>Ergebnis</span>&lt;<span>MÃ¶glichkeit</span>&lt;<span>&amp;</span><span>Zeichenkette</span>&gt;<span>,</span> <span>Zeichenkette</span>&gt; <span>{</span>
            wenn lass <span>Etwas</span><span>(</span>wÃ¶bu<span>)</span> = gefÃ¤hrlich <span>{</span> <span>WÃRTERBUCH</span><span>.</span>als_ref<span>(</span><span>)</span> <span>}</span> <span>{</span>
                <span>Gut</span><span>(</span>wÃ¶bu<span>.</span>hole<span>(</span><span>&amp;</span>schlsl<span>)</span><span>)</span>
            <span>}</span> anderenfalls <span>{</span>
                <span>Fehler</span><span>(</span><span>"Holt das WÃ¶rterbuch"</span><span>.</span>hinein<span>(</span><span>)</span><span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Other examples</h2><a id="user-content-other-examples" aria-label="Permalink: Other examples" href="#other-examples"></a></p>
<p dir="auto">See the <a href="https://github.com/michidk/rost/blob/hauptzweig/examples/src/main.rs">examples</a> to get a rough sense of the whole
syntax. Gut so!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">but why would you do das?</h2><a id="user-content-but-why-would-you-do-das" aria-label="Permalink: but why would you do das?" href="#but-why-would-you-do-das"></a></p>
<ul dir="auto">
<li>the <a href="https://github.com/bnjbvr/rouille">French</a> and <a href="https://github.com/jeroenhd/roest">Dutch</a> can do it, so we can as well!</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mitwirken</h2><a id="user-content-mitwirken" aria-label="Permalink: Mitwirken" href="#mitwirken"></a></p>
<p dir="auto">First of all, <em>vielen Dank</em> for considering participating to this joke, the
German government will thank you later! Feel free to throw in a few identifiers
here and there, and open a pull-request against the <code>hauptzweig</code> (German for
<code>main branch</code>). The initial translation was made by <a href="https://github.com/Shemnei/">Shemnei</a> and <a href="https://github.com/michidk/">michidk</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Die Lizenzbestimmungen</h2><a id="user-content-die-lizenzbestimmungen" aria-label="Permalink: Die Lizenzbestimmungen" href="#die-lizenzbestimmungen"></a></p>
<p dir="auto"><a href="http://www.wtfpl.net/" rel="nofollow">WTFPL</a>. The images do not fall under this license, see below.</p>
<p dir="auto">Image attributions:</p>
<ul dir="auto">
<li>"Brezel und Filzhut zum Oktoberfest" by Tim Reckmann | a59.de is licensed under CC BY 2.0</li>
<li>"Lederhose" is licensed under CC BY-NC-SA 4.0</li>
</ul>
</article></div></div>]]></description>
        </item>
    </channel>
</rss>