<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 11 Mar 2025 18:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Fastplotlib: GPU-accelerated, fast, and interactive plotting library (122 pts)]]></title>
            <link>https://medium.com/@caitlin9165/fastplotlib-driving-scientific-discovery-through-data-visualization-418f8bff094c</link>
            <guid>43334190</guid>
            <pubDate>Tue, 11 Mar 2025 16:33:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://medium.com/@caitlin9165/fastplotlib-driving-scientific-discovery-through-data-visualization-418f8bff094c">https://medium.com/@caitlin9165/fastplotlib-driving-scientific-discovery-through-data-visualization-418f8bff094c</a>, See on <a href="https://news.ycombinator.com/item?id=43334190">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div aria-hidden="false"><a rel="noopener follow" href="https://medium.com/@caitlin9165?source=post_page---byline--418f8bff094c---------------------------------------"><div><p><img alt="Caitlin Lewis" src="https://miro.medium.com/v2/resize:fill:88:88/1*BT5qbDPGGFvpvkUr1jmHUA.jpeg" width="44" height="44" loading="lazy" data-testid="authorPhoto"></p></div></a></div><figure></figure><blockquote><p id="10f2"><a href="https://github.com/fastplotlib/fastplotlib" rel="noopener ugc nofollow" target="_blank">fastplotlib</a> is a new GPU-accelerated fast and interactive scientific plotting library that leverages WGPU</p></blockquote><h2 id="ee07"><strong>Introduction</strong></h2><p id="69bd">Scientific visualization is hard — but it doesn’t have to be.</p><figure><figcaption>Visualization examples using fastplotlib</figcaption></figure><p id="ec06"><strong>What makes scientific visualization so challenging?</strong></p><ul><li id="7a7c"><strong>High-dimensional, massive datasets</strong> — often spanning terabytes of information</li><li id="7fbb"><strong>Computational bottlenecks</strong> — efficiently utilizing resources is non-trivial</li><li id="56f7"><strong>Limited interactive tools</strong> — most are designed for static plotting or do not scale to large data</li><li id="d126"><strong>Real-time analysis barriers</strong> — visualization lags behind modern data generation speeds</li></ul><p id="28c4">Enter <strong>fastplotlib, </strong>which is<strong> </strong>built for high-performance, interactive scientific visualization.</p><h2 id="c3ae"><strong>fastplotlib</strong></h2><figure><figcaption><a href="https://github.com/fastplotlib/fastplotlib" rel="noopener ugc nofollow" target="_blank">https://github.com/fastplotlib/fastplotlib</a></figcaption></figure><p id="fc6c"><code>fastplotlib</code> is a very new open source Python-based GPU-accelerated scientific plotting library.</p><figure><figcaption>Large-scale calcium imaging dataset with corresponding behavior and down-stream analysis</figcaption></figure><p id="a00d"><strong>What can you do with <em>fastplotlib</em>?</strong></p><ul><li id="ce7c">GPU-accelerated visualization (a modern integrated GPU is sufficient for most use cases)</li><li id="01c4">Rapid prototyping and algorithm design</li><li id="c239">Exploration and fast rendering of large-scale data</li><li id="5be7">Creation of real-time acquisition systems for instruments</li></ul><blockquote><p id="d575">Note: this is by no means an exhaustive list, merely just the highlights :)</p></blockquote></div><div><h2 id="a412">Agenda</h2><p id="e2ec">In the remainder of this article, I am going to cover the following topics that highlight why <code>fastplotlib</code> is a powerful tool that can be used to drive scientific discovery through data visualization:</p><ul><li id="cb40">Scientific visualization is more than just <em>static</em> plots</li><li id="8daa">API design matters</li><li id="8363">Leveraging new hardware is critical</li></ul></div><div><h2 id="c3f9">Scientific visualization is more than just <em>static</em> plots</h2><p id="4cbe">While scientific visualization has traditionally relied on static plots, dynamic and interactive visualizations are the key to enhancing data exploration and analysis.</p><p id="6164">For example, consider the interactive plot depicted below.</p><figure><figcaption>Interactive covariance matrix of Olivetti faces dataset</figcaption></figure><p id="6ef2">This plot shows a simple interactive visualization of a covariance matrix in <code>fastplotlib</code>. As a formal definition, a covariance matrix gives a measure of how pairs of random variables change together.</p><p id="f860">In the left subplot, the covariance matrix for the <a href="https://scikit-learn.org/0.19/datasets/olivetti_faces.html" rel="noopener ugc nofollow" target="_blank">Olivetti faces dataset</a> is shown. In this case, each entry in the covariance matrix indicates how the intensity of any two pixels varies. In the right subplot is the reconstructed row image from the currently selected row of the covariance matrix. We can easily change what row of the covariance matrix we are looking at by simply moving the selector.</p><p id="6bdf">It is very clear visually that looking at the reconstructed image for each row of the covariance matrix is much more informative than having a static plot of just the covariance matrix by itself. By looking at the reconstructed row image, we can get a sense of how the pixel intensity is changing across faces in the dataset.</p><p id="832b">The purpose of displaying this plot is not to conduct a detailed analysis of the covariance matrix but to demonstrate how even a small degree of interactivity can enhance our understanding of the data, ultimately transforming the types of analysis we may pursue in the future.</p><p id="ca66">The goal of <code>fastplotlib</code> is to expand the field of scientific visualization by providing a mechanism that allows the creation of high-level interactive plots, ultimately driving scientific discovery.</p></div><div><h2 id="9405">API design matters</h2><p id="d229">The ecosystem for scientific visualization has come a long way since the early 2000s.</p><figure><figcaption>Scientific Python visualization ecosystem timeline</figcaption></figure><p id="c471">These days, there are many open-source Python visualization tools available. However, one limiting factor for scientists and other users is the high barrier to entry in learning how to use some of these libraries. Often, users are forced to learn complicated APIs that make it difficult to focus on their data or research questions.</p><p id="93fa">In <code>fastplotlib</code>, we aim to provide fast interactive visualization via an easy-to-use and intuitive API.</p><p id="e288"><strong>1) Data interaction</strong></p><p id="a621">The premise behind our API design is that you should never have to think of your data as anything but an array.</p><p id="4d5c">If the data in our visualization maintains an array-like structure we are familiar with, interacting with the visualization becomes much easier.</p><p id="c5e7">Consider the following example:</p><p id="871b">Suppose we want to plot a simple sine wave.</p><pre><span id="0360">import fastplotlib as fpl<br>import numpy as np<p># generate some data <br>xs = np.linspace(-10, 10, 100)<br>ys = np.sin(xs)<br>data = np.dstack([xs, ys])[0]</p><p># create a figure<br>figure = fpl.Figure()</p><p># add the data to the figure<br>sine_wave = figure[0, 0].add_line(data=data, thickness=10)</p><p>figure.show()</p></span></pre><figure><figcaption>simple sine wave</figcaption></figure><p id="af07">Now, say we wanted to change every third point of our sine wave to have the color red. If the data in our visualization can be thought of as an array, then doing this kind of fancy indexing isn’t any different than usual NumPy array manipulation.</p><pre><span id="3d06">sine_wave.colors[::3] = "red"</span></pre><figure><figcaption>fancy index sine wave colors</figcaption></figure><p id="09c1">With this framework, we can perform all sorts of dynamic manipulations to different features of our graphic (e.g., color maps, colors, data, etc.) after we have initially plotted something.</p><p id="2463">The goal of taking this approach to the API design is to limit the amount of mental overhead required to use <code>fastplotlib</code>, ultimately making the library flexible, intuitive, and easy to use.</p><p id="bafe"><strong>2) Events</strong></p><p id="6261">Another area of our API that we have tried to simplify for users is our events system. Using simple callback functions, we can define events between graphics or plots, which allows for the generation and build-up of interactive visualizations.</p><p id="ace9">For example, suppose we wanted to define a simple click event. Let’s first generate some data.</p><pre><span id="8946">import fastplotlib as fpl<br>import numpy as np<p># generate some circles<br>def make_circle(center, radius: float, n_points: int = 75) -&gt; np.ndarray:<br>    theta = np.linspace(0, 2 * np.pi, n_points)<br>    xs = radius * np.sin(theta)<br>    ys = radius * np.cos(theta)</p><p>    return np.column_stack([xs, ys]) + center</p><p>circles = list()<br>for x in range(0, 50, 10):<br>    circles.append(make_circle(center=(x, 0), radius=4, n_points=100))</p><p># create figure<br>fig = fpl.Figure()</p><p># add circles to plot<br>circles_graphic = fig[0,0].add_line_collection(data=circles, cmap="tab10", thickness=10)</p><p>fig.show()</p></span></pre><figure><figcaption>simple plot of circles</figcaption></figure><p id="dd71">Now that we have generated our data, we can define a click event so that when we click on the plot, we get the closest circle and “highlight” it.</p><pre><span id="71ef"># get the nearest graphic that is clicked and change the color<br>@fig.renderer.add_event_handler("click")<br>def click_event(ev):<br>    # reset colors<br>    circles_graphic.cmap = "tab10"<p>    # map the click position to world coordinates<br>    xy = fig[0, 0].map_screen_to_world(ev)[:-1]</p><p>    # get the nearest graphic to the position<br>    nearest = fpl.utils.get_nearest_graphics(xy, circles_graphic)[0]</p><p>    # change the closest graphic color to white<br>    nearest.colors = "w"</p></span></pre><figure><figcaption>simple click event</figcaption></figure><p id="f29e">In <code>fastplotlib</code>, specifying an event is as simple as defining how we want to handle the event and then adding our handler to the appropriate graphic or plot the event corresponds to. The beauty of this approach is that it doesn’t require users to learn new, complicated, library-specific API features (knowing how to define functions is sufficient).</p><p id="21ed">The streamlined design of our API for data interaction and event handling is a key strength of the library, making <code>fastplotlib</code> both intuitive and easy to master.</p></div><div><h2 id="006b">Leveraging new hardware is critical</h2><p id="fdb8">These days, having a GPU is practically a prerequisite to doing science, and visualization is no exception.</p><p id="f57a">Maximizing the computational resources on the GPU is a key factor in making high-resolution performant visualizations.</p><p id="58f1">Depicted below is an example of plotting 3 million points using <code>fastplotlib</code>. Not only are we plotting the lines, but we are also easily zooming in and out, changing the color map of the lines, and even further, individually changing the color of specific points.</p><figure><figcaption>fastpotlib 3 million points line example</figcaption></figure><p id="e690">Plotting this many points at once and having fine-grained control over the colors of the points is impossible in many other Python scientific visualization libraries.</p><p id="b921">What makes the performance capabilities of <em>fastplotlib</em> so powerful is the underlying graphics technology on which it is built.</p><p id="ba6a"><strong>The nitty gritty details</strong></p><p id="24e5"><code>fastplotlib</code> is abstracted on top of the <a href="https://github.com/pygfx/pygfx" rel="noopener ugc nofollow" target="_blank">pygfx</a> rendering engine. <code>pygfx</code>, in turn, is powered by <a href="https://github.com/pygfx/wgpu-py/" rel="noopener ugc nofollow" target="_blank">WGPU</a>, a cross-platform graphics API that targets Vulkan (Linux), Metal (Mac), and DX12 (Windows).</p><figure><figcaption>fastplotlib software stack</figcaption></figure><p id="dfb3">In essence, these new graphics APIs (Vulkan, Metal, and DX12) are very <strong>fast</strong>, <strong>efficient</strong>, and <strong>leverage GPU hardware better than OpenGL</strong>, the old graphics standard.</p><p id="178c">The reason we built <code>fastplotlib</code> on top of <code>pygfx</code> is to abstract away some of the lower-level rendering engine details (e.g., the camera, renderer, scene, etc.) that are boilerplate code for many visualizations. This allows users to focus primarily on their data!</p></div><div><h2 id="8c7f"><strong>Conclusion</strong></h2><p id="dad0">It is one thing for it to be easy to see your data and explore different dimensions, but being able to interact with your data after it is initially plotted, we believe, is the key to driving scientific discovery. However, the ability to create these interactive plots that allow you to explore and analyze your data easily and intuitively is not trivial.</p><p id="254f">Many prominent Python visualization libraries force you to learn complicated APIs, making the barrier to entry high. Furthermore, many of these libraries are built on <a href="https://www.opengl.org/" rel="noopener ugc nofollow" target="_blank">OpenGL</a>, an older graphics API that <a href="https://www.vulkan.org/" rel="noopener ugc nofollow" target="_blank">Vulkan</a>, <a href="https://developer.apple.com/documentation/metal/" rel="noopener ugc nofollow" target="_blank">Metal</a>, and <a href="https://learn.microsoft.com/en-us/windows/win32/direct3d12/directx-12-programming-guide" rel="noopener ugc nofollow" target="_blank">DX12</a> are slowly replacing. These new graphics APIs leverage the GPU better, allowing for more powerful and expressive visualizations.</p><p id="ff35"><code>fastplotlib</code> seeks to address current challenges in Python scientific visualization by providing an easy-to-use array-like API that leverages modern graphics hardware to provide GPU-accelerated fast interactive visualization.</p></div><div><h2 id="b0f9"><strong>Documentation &amp; Examples</strong></h2><p id="03f9">Our documentation and examples can be found <a href="https://www.fastplotlib.org/ver/dev/" rel="noopener ugc nofollow" target="_blank">here</a>. This includes a user guide and how-to on getting started using <code>fastplotlib</code>. We also have an extensive examples gallery that we are always expanding.</p><p id="57b4">Lastly, we are always happy to help you visualize your data, and we would love to add more examples to our library for your use case!</p><h2 id="076e"><strong>Contact Us</strong></h2><p id="367b">We love to interact with our community ❤️</p><p id="1d21">If you have questions or would like to chat, feel free to contact us by posting a GitHub Issue or Discussion!</p><h2 id="e064"><strong>Future articles</strong></h2><p id="845d">We plan on this being the first in a series of articles. In the future, we would like to add articles walking through examples using <code>fastplotlib </code>and potentially some in-depth articles on the underlying graphics technology.</p><p id="e81c">If this is something you would be interested in, please let us know :D</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A 10x Faster TypeScript (853 pts)]]></title>
            <link>https://devblogs.microsoft.com/typescript/typescript-native-port/</link>
            <guid>43332830</guid>
            <pubDate>Tue, 11 Mar 2025 14:32:23 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://devblogs.microsoft.com/typescript/typescript-native-port/">https://devblogs.microsoft.com/typescript/typescript-native-port/</a>, See on <a href="https://news.ycombinator.com/item?id=43332830">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="single-wrapper">
    
    <article data-clarity-region="article" id="post-4567">
        <div data-bi-area="body_article" data-bi-id="post_page_body_article">
            <p>Today I’m excited to announce the next steps we’re taking to radically improve TypeScript performance.</p>
<p><iframe title="A 10x Faster TypeScript" src="https://www.youtube.com/embed/pNlq-EVld70?si=OaEgTg6ROtfYDYLt" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>The core value proposition of TypeScript is an excellent developer experience.
As your codebase grows, so does the value of TypeScript itself, but in many cases TypeScript has not been able to scale up to the very largest codebases.
Developers working in large projects can experience long load and check times, and have to choose between reasonable editor startup time or getting a complete view of their source code.
We know developers love when they can rename variables with confidence, find all references to a particular function, easily navigate their codebase, and do all of those things without delay.
New experiences powered by AI benefit from large windows of semantic information that need to be available with tighter latency constraints.
We also want fast command-line builds to validate that your entire codebase is in good shape.</p>
<p>To meet those goals, we’ve begun work on a native port of the TypeScript compiler and tools.
The native implementation will <strong>drastically improve editor startup, reduce most build times by 10x, and substantially reduce memory usage</strong>.
By porting the current codebase, we expect to be able to preview a native implementation of <code>tsc</code> capable of command-line typechecking by mid-2025, with a feature-complete solution for project builds and a language service by the end of the year.</p>
<p>You can <strong><a href="https://github.com/microsoft/typescript-go">build and run the Go code from our new working repo</a></strong>, which is offered under the same license as the existing TypeScript codebase.
Check the README for instructions on how to build and run <code>tsc</code> and the language server, and to see a summary of what’s implemented so far.
We’ll be posting regular updates as new functionality becomes available for testing.</p>
<h2 id="how-much-faster">How Much Faster?</h2>
<p>Our native implementation is already capable of loading many popular TypeScript projects, including <a href="https://github.com/microsoft/TypeScript/tree/main/src/compiler">the TypeScript compiler itself</a>.
Here are times to run <code>tsc</code> on some popular codebases on GitHub of varying sizes:</p>
<table>
<thead>
<tr>
<th>Codebase</th>
<th>Size (LOC)</th>
<th>Current</th>
<th>Native</th>
<th>Speedup</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/microsoft/vscode">VS Code</a></td>
<td>1,505,000</td>
<td>77.8s</td>
<td>7.5s</td>
<td>10.4x</td>
</tr>
<tr>
<td><a href="https://github.com/microsoft/playwright">Playwright</a></td>
<td>356,000</td>
<td>11.1s</td>
<td>1.1s</td>
<td>10.1x</td>
</tr>
<tr>
<td><a href="https://github.com/typeorm/typeorm">TypeORM</a></td>
<td>270,000</td>
<td>17.5s</td>
<td>1.3s</td>
<td>13.5x</td>
</tr>
<tr>
<td><a href="https://github.com/date-fns/date-fns">date-fns</a></td>
<td>104,000</td>
<td>6.5s</td>
<td>0.7s</td>
<td>9.5x</td>
</tr>
<tr>
<td><a href="https://github.com/trpc/trpc">tRPC</a> (server + client)</td>
<td>18,000</td>
<td>5.5s</td>
<td>0.6s</td>
<td>9.1x</td>
</tr>
<tr>
<td><a href="https://github.com/ReactiveX/rxjs">rxjs</a> (observable)</td>
<td>2,100</td>
<td>1.1s</td>
<td>0.1s</td>
<td>11.0x</td>
</tr>
</tbody>
</table>
<p>While we’re not yet feature-complete, these numbers are representative of the order of magnitude performance improvement you’ll see checking most codebases.</p>
<p>We’re incredibly excited about the opportunities that this massive speed boost creates. Features that once seemed out of reach are now within grasp.
This native port will be able to provide instant, comprehensive error listings across an entire project, support more advanced refactorings, and enable deeper insights that were previously too expensive to compute.
This new foundation goes beyond today’s developer experience and will enable the next generation of AI tools to enhance development, powering new tools that will learn, adapt, and improve the coding experience.</p>
<h2 id="editor-speed">Editor Speed</h2>
<p>Most developer time is spent in editors, and it’s where performance is most important.
We want editors to load large projects quickly, and respond quickly in all situations.
Modern editors like Visual Studio and Visual Studio Code have excellent performance as long as the underlying language services are also fast.
With our native implementation, we’ll be able to provide incredibly fast editor experiences.</p>
<p>Again using the Visual Studio Code codebase as a benchmark, the current time to load the entire project in the editor on a fast computer is about 9.6 seconds.
This drops down to about 1.2 seconds with the native language service, an <strong>8x improvement in project load time</strong> in editor scenarios.
What this translates to is a faster working experience from the time you open your editor to your first keystroke in any TypeScript codebase.
We expect all projects to see this level of improvement in load time.</p>
<p>Overall memory usage also appears to be roughly half of the current implementation, though we haven’t actively investigated optimizing this yet and expect to realize further improvements.
Editor responsiveness for all language service operations (including completion lists, quick info, go to definition, and find all references) will also see significant speed gains.
We’ll also be moving to the Language Server Protocol (LSP), a longstanding infrastructural work item to better align our implementation with other languages.</p>
<h2 id="versioning-roadmap">Versioning Roadmap</h2>
<p>Our most recent TypeScript release was TypeScript 5.8, with TypeScript 5.9 coming soon.
The JS-based codebase will continue development into the 6.x series, and TypeScript 6.0 will introduce some deprecations and breaking changes to align with the upcoming native codebase.</p>
<p>When the native codebase has reached sufficient parity with the current TypeScript, we’ll be releasing it as <strong>TypeScript 7.0</strong>.
This is still in development and we’ll be announcing stability and feature milestones as they occur.</p>
<p>For the sake of clarity, we’ll refer to them simply as TypeScript 6 (JS) and TypeScript 7 (native), since this will be the nomenclature for the foreseeable future.
You may also see us refer to “Strada” (the original TypeScript codename) and “Corsa” (the codename for this effort) in internal discussions or code comments.</p>
<p>While some projects may be able to switch to TypeScript 7 upon release, others may depend on certain API features, legacy configurations, or other constraints that necessitate using TypeScript 6.
Recognizing TypeScript’s critical role in the JS development ecosystem, we’ll still be maintaining the JS codebase in the 6.x line until TypeScript 7+ reaches sufficient maturity and adoption.</p>
<p>Our long-term goal is to keep these versions as closely aligned as possible so that you can upgrade to TypeScript 7 as soon as it meets your requirements, or fall back to TypeScript 6 if necessary.</p>
<h2 id="next-steps">Next Steps</h2>
<p>In the coming months we’ll be sharing more about this exciting effort, including deeper looks into performance, a new compiler API, LSP, and more.
We’ve written up some <a href="https://github.com/microsoft/typescript-go/discussions/categories/faqs">FAQs</a> on the GitHub repo to address some questions we expect you might have.
We also invite you to join us for an AMA at the <a href="https://discord.gg/typescript">TypeScript Community Discord</a> at <strong>10 AM PDT | 5 PM UTC</strong> on March 13th.</p>
<p>A 10x performance improvement represents a massive leap in the TypeScript and JavaScript development experience, so we hope you are as enthusiastic as we are for this effort!</p>
        </div><!-- .entry-content -->

        <!-- AI Disclaimer -->
            </article>
    
</div><div><!-- Author section -->
            <h2>Author</h2>
            <div><div><p><img src="https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2024/12/Anders-96x96.jpg" alt="Anders Hejlsberg"></p></div><p>Microsoft Technical Fellow and lead architect of TypeScript. Original designer of C#, Delphi, and Turbo Pascal.</p></div>        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Happy 20th Birthday, Y Combinator (224 pts)]]></title>
            <link>https://twitter.com/garrytan/status/1899092996702048709</link>
            <guid>43332658</guid>
            <pubDate>Tue, 11 Mar 2025 14:14:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/garrytan/status/1899092996702048709">https://twitter.com/garrytan/status/1899092996702048709</a>, See on <a href="https://news.ycombinator.com/item?id=43332658">Hacker News</a></p>
Couldn't get https://twitter.com/garrytan/status/1899092996702048709: Error: Request failed with status code 400]]></description>
        </item>
        <item>
            <title><![CDATA[Mapping the University of Chicago's 135-Year Expansion into Hyde Park and Beyond (144 pts)]]></title>
            <link>https://chicagomaroon.github.io/data-visualizations/2025/uchicago-property/</link>
            <guid>43332424</guid>
            <pubDate>Tue, 11 Mar 2025 13:50:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chicagomaroon.github.io/data-visualizations/2025/uchicago-property/">https://chicagomaroon.github.io/data-visualizations/2025/uchicago-property/</a>, See on <a href="https://news.ycombinator.com/item?id=43332424">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="title-container">
                    <div>
                        <p><img src="https://chicagomaroon.github.io/data-visualizations/2025/uchicago-property/static/images/seal.svg" alt="Chicago Maroon Logo"></p><p>
                            Mapping the University of Chicago’s 135-Year
                            Expansion into Hyde Park and Beyond
                        </p>
                    </div>
                    <p>
                        Drawing from University archives, campus maps, academic
                        literature, and news clippings, the
                        <i>Maroon</i> charted the University’s contentious
                        property acquisitions from its charter in 1890 to the
                        present.
                    </p>
                    <hr>
                    
                </div><div>
                    <p>
                        As the University of Chicago has expanded its property
                        footprint on the South Side, conflicting priorities,
                        land use disputes, and racial tension have characterized
                        a historically fraught “town and gown” relationship with
                        the surrounding neighborhoods. Setting the stage for
                        others to follow, the University was the first higher
                        education institution to embark on an urban renewal
                        campaign of its kind, a topic University scholars and
                        students have written on extensively.
                    </p>
                    <p>
                        The following narration is not an exhaustive history;
                        rather, it traces the contours of shifting values and
                        priorities that have contributed to the University’s
                        current institutional identity.
                    </p>
                    <p>
                        Scroll below to follow a visual history of the
                        University’s role in shaping its built environment over
                        its 135-year history.
                    </p>
                    <p>
                        Scroll to Continue
                    </p>

                    
                </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Factorio Learning Environment – Agents Build Factories (451 pts)]]></title>
            <link>https://jackhopkins.github.io/factorio-learning-environment/</link>
            <guid>43331582</guid>
            <pubDate>Tue, 11 Mar 2025 12:02:02 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jackhopkins.github.io/factorio-learning-environment/">https://jackhopkins.github.io/factorio-learning-environment/</a>, See on <a href="https://news.ycombinator.com/item?id=43331582">Hacker News</a></p>
<div id="readability-page-1" class="page">
        

        
        <div>
                <div>
                            <div>
                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices (loads first on desktop) -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_2213-cropped-h264.mp4" type="video/mp4">
                                            Your browser does not support the video tag.
                                        </video>
                                        <p><span>Mine 16 Iron Ore</span><br><span>per minute</span></p>
                                    </div>

                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_720-cropped-h264.mp4" type="video/mp4">
                                        </video>
                                        <p><span>Smelt 16 Iron Plates</span><br><span>per minute</span></p>
                                    </div>

                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_767-cropped-h264.mp4" type="video/mp4">
                                        </video>
                                        <p><span>Make 16 Iron Gears</span><br><span>per minute</span></p>
                                    </div>
                            </div>
                            <div>
                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_1891-cropped-h264.mp4" type="video/mp4">
                                        </video>
                                        <p><span>Extract 250 Petroleum Gas</span><br><span>per minute</span></p>
                                    </div>

                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_761-cropped-h264.mp4" type="video/mp4">
                                        </video>
                                        <p><span>Refine 16 Sulfur</span><br><span>per minute</span></p>
                                    </div>

                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_1897-cropped-h264.mp4" type="video/mp4">
                                        </video>
                                        <p><span>Make 16 Plastic bars</span><br><span>per minute</span></p>
                                    </div>
                            </div>
                            <div>
                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_803-cropped-h264.mp4" type="video/mp4">
                                        </video>
                                        <p>Build the largest possible factory</p>
                                    </div>

                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_527-cropped-h264.mp4" type="video/mp4">
                                        </video>
                                        <p>Build the largest possible factory</p>
                                    </div>

                                <div>
                                        <video playsinline="" muted="" autoplay="" loop="" width="100%">
                                            <!-- MP4 for desktop devices -->
                                            <source src="https://jackhopkins.github.io/factorio-learning-environment/assets/videos/compressed_804-cropped-h264.mp4" type="video/mp4">
                                        </video>
                                        <p>Build the largest possible factory</p>
                                    </div>
                            </div>
                        </div>
                <p>Claude Sonnet 3.5 builds factories</p>
            </div>

        <!-- Add this script to help with video loading -->
        

        <div>
                        <h2>Abstract</h2>
                        <div>
                            <p>
                                Large Language Models (LLMs) are rapidly saturating existing benchmarks, necessitating new open-ended evaluations.
                                We introduce the <b>Factorio Learning Environment (FLE)</b>, based on the game of Factorio, that tests agents in long-term planning, program synthesis, and resource optimization.
                            </p>
                            <p>
                                FLE provides open-ended and exponentially scaling challenges - from basic automation to complex factories processing millions of resource units per second.
                                We provide two settings:
                            </p>
                            <ol>
                                <li><b>Lab-play</b> consisting of 24 structured tasks with fixed resources.</li>
                                <li><b>Open-play</b> with the unbounded task of building the largest factory from scratch on a procedurally generated map.</li>
                            </ol>
                            <p>
                                We demonstrate across both settings that models still lack strong spatial reasoning.
                                In lab-play, we find that LLMs exhibit promising short-horizon skills, yet are unable to operate effectively in constrained environments, reflecting limitations in error analysis.
                                In open-play, while LLMs discover automation strategies that improve growth (e.g electric-powered drilling), they fail to achieve complex automation (e.g electronic-circuit manufacturing).
                            </p>
                        </div>
                    </div>
          <div>
                <h2><span>Introduction</span></h2>

                <p>
                    Large Language Models (LLMs) have demonstrated remarkable capabilities at solving complex question-answer (QA) problems, saturating benchmarks in factual recollection, reasoning and code generation.
                    Benchmark saturation presents a critical challenge for the AI research community: how do we meaningfully evaluate and differentiate increasingly capable models?
                </p>
                
                <p>
                    We introduce the <b>Factorio Learning Environment (FLE)</b>: a novel framework built upon the game of Factorio that addresses this challenge by enabling <i>unbounded</i> agent evaluation. FLE provides the infrastructure, API, and metrics for assessing frontier LLM agents in code generation, spatial reasoning and long-term planning.
                    In this environment, agents must navigate rapidly scaling challenges—from basic resource extraction producing ~30 units/minute to sophisticated production chains processing millions of units/second. This dramatic growth in complexity, driven by geometric increases in research costs and the combinatorial expansion of interdependent production chains, creates natural curricula for evaluating increasingly capable agents.
                </p>
                
                <p>
                    Within FLE, we define two complementary evaluation protocols: (1) <b>lab-play</b> with structured, goal-oriented tasks that have clear completion criteria, allowing targeted assessment of specific capabilities, and (2) <b>open-play</b> with no predetermined end-state, supporting truly unbounded evaluation of an agent's ability to autonomously set and achieve increasingly complex goals.
                </p>
            </div>
        <div>
                <h2><span>Environment</span></h2>

                <div>
                            <p><img src="https://jackhopkins.github.io/factorio-learning-environment/assets/images/figure_2.png" alt="">
                                <br>
                                <span>
                                    <b>Agents in FLE aim to optimise factories programmatically.</b> Left: Agents aim to create increasingly efficient factories, advancing through technological tiers to produce more resources per second. Middle: We provide a Python API to Factorio which enables direct interaction with the environment through code. Right: Agents submit programs to the game server and receive rich feedback, enabling them to refine their strategies through an iterative process of exploration and refinement.
                                </span>
                            </p>
                        </div>
                <div>
                            <p><img src="https://jackhopkins.github.io/factorio-learning-environment/assets/images/repl.png" alt="">
                                <br>
                                <span>
                                    <b>Agents develop policies through an interactive feedback loop.</b>
                                    Using 23 core API tools, agents compose programs that interact with the environment and observe the results through <i>stdout</i> and <i>stderr</i> streams.
                                    The Python namespace allows agents to store variables and define functions for later use, enabling increasingly sophisticated strategies as experience grows.
                                    This approach mirrors the way human programmers learn - through iteration, debugging, and refinement based on direct feedback.
                                    Agent programs yield both a Production Score (PS) representing the economic value of all items produced, and milestones that reflect technological advancements.
                                </span>
                            </p>
                        </div>
                </div>


        <section>

            <div>
                <h2><span>Experiments</span></h2>
                <p>
                    To systematically evaluate agent capabilities in the Factorio Learning Environment, we introduce two complementary experimental settings that test different aspects of planning, automation, and resource management; namely <i>open-play</i> and <i>lab-play</i>.
                </p>
                
                <p>
                    We evaluate six frontier language models across both settings: Claude 3.5-Sonnet, GPT-4o, GPT-4o-Mini, Deepseek-v3, Gemini-2-Flash, and Llama-3.3-70B-Instruct.
                    Each model interacts with the environment through a consistent prompting approach, receiving the API schema, a guide describing common patterns, and memory of past actions and observations.
                </p>

                <br>
                <h2><span>Open-Play</span></h2>
                <p>
                    Agents begin in a procedurally generated world with instruction to "build the largest possible factory". This setting tests agents' ability to set appropriate goals, balance short-term production against long-term research, and navigate the complex tech tree and game map without external guidance.
                </p>
                <div>
                            <p><img src="https://jackhopkins.github.io/factorio-learning-environment/assets/images/figure_4.png" width="100%" alt="">
                                <br>
                                <span>
                            <b>Agent capabilities are clearly differentiated by their production scores in open-play.</b>
                                    Left: By plotting Production Score (PS) against steps on a log/log scale, we can observe distinct performance trajectories for each model.
                                    More capable models not only achieve higher scores but demonstrate steeper growth curves, indicating better long-term planning.
                                    Milestone annotations show when the median agent first created key entities, revealing how quickly each model progresses through the tech tree.
                                    Right: Final rewards reveal how weaker models struggle to advance when complex automation and logistics become necessary.
                        </span>
                            </p>
                        </div>
            </div>

            <div>
                            <p><img src="https://jackhopkins.github.io/factorio-learning-environment/assets/images/figure_6.png" width="100%" alt="">
                                <br>
                                <span>
                                <b>Production strategies reveal differences in agent planning and capabilities.</b>
                                    We track how various models produce items with multiple antecedent ingredients in open-play, showing not just what they build but how they approach factory design.
                                    Claude 3.5-Sonnet demonstrates sophisticated strategy by immediately beginning complex crafting and investing in research and automation, ultimately unlocking <code>electric-mining-drills</code> around step 3k - a decision that boosts <code>iron-plate</code> production by 50% thereafter.
                                    In contrast, less advanced models like GPT-4o-Mini produce minimal quantities of multi-ingredient items, revealing limitations in planning horizons.
                                    Interestingly, Deepseek showed stronger capabilities in lab-play than open-play, suggesting that its general capabilities exceed its objective-setting abilities in open-ended environments.
                            </span>
                            </p>
                        </div>
        </section>

        <section>
            <div>
                <h2><span>Lab-Play</span></h2>
                <p>
                    Agents are provided with resources and given a time-limit to achieve an objective.
                    We task agents to build production lines of 24 distinct target entities of increasing complexity, starting from a single resource mine requiring at most 2 machines (making <code>iron-ore</code>) to a late game entity requiring the coordination of close to 100 machines (making <code>utility-science-pack</code>).
                    The target entities cover items from early to late game, requiring agents to use a wide variety of machines present in Factorio (drills, furnaces, assembling machines, oil refineries, chemical plants). As the task difficulty naturally increases with resource requirements, this provides a measure of the complexity that agents are capable of creating in a limited number of steps.
                    All tasks provide the agent with sufficient resources to complete the task with all technologies unlocked.
                </p>
                <div>
                            <p><img src="https://jackhopkins.github.io/factorio-learning-environment/assets/images/figure_5.png" width="100%" alt="">
                                <br>
                                 <span>
                                    <b>Item production complexity creates a natural difficulty gradient for agent evaluation.</b> Top: We measure task success rates across the first 8 complexity levels, revealing a clear decline as target entity crafting complexity increases. Even the most capable models struggle with coordinating more than six machines when producing items with three or more ingredients. Bottom: Production progress over time shows a pattern of initial rapid advancement followed by stagnation or regression. This reveals a key limitation in current agents' abilities: they often break existing functional structures when attempting to scale production or add new factory sections. The high variance in task progress across runs further demonstrates the challenge of consistent performance in complex automation tasks.
                                </span>
                            </p>
                        </div>
            </div>

            <div>
                            <p><img src="https://jackhopkins.github.io/factorio-learning-environment/assets/images/figure_1.png" width="600px" alt="">
                                <br>
                                <span>
                                    <b>Plastic bar manufacturing is the most challenging task successfully completed in lab-play.</b>
                                    The factory consists of a electricity steam generator (top-left), a coal mine with storage buffer (top), a crude-oil to petroleum gas pipeline (bottom) and a chemical plant  (bottom-right).
                                    The chemical plant creates plastic bars using the coal and petroleum gas as inputs. By themselves, the cumulative raw resources generate a production score of $224$.
                                    With this specific layout, the factory creates $40$ plastic bars per $60$ in-game seconds, for a production score of $352$.
                                    This factory was created by Claude Sonnet 3.5.
                                </span>
                            </p>
                        </div>

            <div>
                            <p><img src="https://jackhopkins.github.io/factorio-learning-environment/assets/images/table_1.png" width="600px" alt="">
                                <br>
                                <span>
                                    Even the strongest model (Claude) only completed 7/24 tasks in lab-play, illustrating substantial room for improvement in this benchmark.
                                </span>
                            </p>
                        </div>
        </section>

        <div>
                <h2>Key Insights</h2>
                <p>
                Our experiments revealed several key patterns that highlight both the capabilities and limitations of current AI agents when faced with open-ended industrial challenges:
                </p>
                <div>
                    <div>
                        <div>
                                <h4>1. Coding skill predicts performance</h4>
                                <p>Models with stronger coding abilities (Claude 3.5-Sonnet, GPT-4o) achieved higher Production Scores and completed more lab tasks. Claude outperformed others with a PS of 293,206 and 28 milestones, progressing beyond early-game resource extraction.</p>
                            </div>

                        <div>
                                <h4>2. Technology investment drives growth</h4>
                                <p>Only Claude consistently invested resources in researching new technologies, despite their importance for long-term progression. After deploying electric mining drills at step 3k, Claude's PS grew by 50% (from 200k to 300k), demonstrating the value of strategic investment.</p>
                            </div>

                    </div>

                    <div>
                        <div>
                                <h4>3. Planning is essential in open-play</h4>
                                <p>In open-play, agents frequently pursue short-sighted objectives — like Gemini-2.0 manually crafting 300+ wooden chests over 100 steps — rather than investing in research or scaling existing production. This reveals a telling discrepancy: while Gemini-2 and Deepseek demonstrate early-game automation capabilities in structured lab-play, they rarely attempt to create cohesive factories during open-ended exploration, resulting in poorer overall performance.</p>
                            </div>

                       <div>
                                <h4>4. Spatial reasoning is a major limitation</h4>
<!--                                <p>Models struggled with spatial planning when building multi-section factories. Common failures included placing entities too close together, not leaving room for connections, or incorrect inserter placement, leading to significant underperformance in complex tasks.</p>-->
<!--                            -->
                                <p>All models exhibited limitations in spatial planning when constructing multi-section factories. Common failures included placing entities too close together, not allocating space for connections, or incorrect inserter placement - issues that severely impacted performance in complex tasks requiring coordination of multiple production lines.</p>

                            </div>
                    </div>

                    <div>
                        <div>
                                <h4>5. Error recovery poses a significant challenge</h4>
                                <p>Models frequently become trapped in repetitive error patterns, attempting the same invalid operations repeatedly rather than exploring alternative solutions. For instance, GPT-4o repeated the same API method incorrectly for 78 consecutive steps despite identical error messages.</p>
                            </div>
                        <div>
                                <h4>6. Programming styles vary significantly</h4>
                                <p>Models exhibited distinct coding approaches: Claude favored a REPL style with extensive print statements (43.3% of code lines) but few assertions (2.0%), while GPT-4o used a defensive style with more validation checks (12.8% assertions) and fewer prints (10.3%).</p>

                            </div>
                    </div>
                </div>
            </div>

        <!--Conclusion-->
        <div>
                            <h2><span>Conclusion</span></h2>
                            <div>
<!--                                <p style="font-size: 125%;">-->
<!--                                    In this work, we introduce the Factorio Learning Environment (FLE), a platform for evaluating AI agents in complex, industrial-scale automation scenarios. Through our complementary evaluation protocols - structured lab-play and unbounded open-play - we assess agent capabilities in:-->
<!--                                </p>-->
<!--                                <ul style="font-size: 115%;">-->
<!--                                    <li>Long-term planning across thousands of steps</li>-->
<!--                                    <li>Spatial reasoning and factory layout optimization</li>-->
<!--                                    <li>Resource allocation in complex production chains</li>-->
<!--                                    <li>Error recovery and iterative debugging</li>-->
<!--                                </ul>-->
                                <p>
                                    Our results show that even state-of-the-art LLMs struggle with the coordination and optimization challenges inherent in automation tasks. The rapidly scaling complexity of Factorio's technology tree creates evaluation scenarios that will remain challenging even as progress in AI research continues, allowing meaningful differentiation between increasingly capable models.
                                </p>

<!--                                <p style="font-size: 115%;">-->
<!--                                    Looking forward, FLE provides a platform for investigating critical research questions:-->
<!--                                </p>-->

<!--                                <ul style="font-size: 115%;">-->
<!--                                    <li>How can we develop agents that better understand spatial constraints and resource interdependencies?</li>-->
<!--                                    <li>What agent frameworks enable more effective error recovery and debugging in complex environments?</li>-->
<!--                                    <li>How might advances in planning and resource optimization in Factorio transfer to real-world industrial systems?</li>-->
<!--                                </ul>-->

                                <p>
                                    We release the Factorio Learning Environment as an open-source platform, along with our evaluation protocols and baseline implementations, to encourage research on agent capabilities in complex, open-ended domains.
                                </p>

                            </div>
                        </div>



        <!--Team-->
        


        <div id="BibTeX">
                <h2>BibTeX</h2>
                <pre><code>@article{hopkins2025factorio,
  title   = {Factorio Learning Environment},
  author  = {Jack Hopkins and Mart Bakler and Akbir Khan},
  year    = {2025},
  journal = {arXiv preprint arXiv: Arxiv-2305.16291}
}</code></pre>
                <div>
                    <p>With thanks to Jack Kleeman and Minqi Jiang for their invaluable help with setting up compute resources and advice during the inception of this project. Thanks to Wube and the Factorio team for developing such a stimulating game.
                    </p>
            </div>
            </div>

        
    


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[What Makes Code Hard to Read: Visual Patterns of Complexity (2023) (175 pts)]]></title>
            <link>https://seeinglogic.com/posts/visual-readability-patterns/</link>
            <guid>43330900</guid>
            <pubDate>Tue, 11 Mar 2025 10:07:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://seeinglogic.com/posts/visual-readability-patterns/">https://seeinglogic.com/posts/visual-readability-patterns/</a>, See on <a href="https://news.ycombinator.com/item?id=43330900">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Not long ago, I was auditing a codebase for work (looking for bugs) when I realized that despite the quality of the code, I was becoming mentally fatigued extremely quickly and had a hard time working on it for long stretches of time…</p><p>I ended up figuring out what made this codebase so difficult to stick with, but it didn’t turn out to be what I expected (<a href="https://seeinglogic.com/posts/cyclomatic-complexity-illustrated/">Cyclomatic Complexity</a>). After doing a little reflection and research, it ended up being something more related to readability–something I didn’t have a lot of data on, but was curious to learn if there was objective terminology or common metrics.</p><p>So today we’re jumping into the results of that investigation, which means instead of visualizing code, we’re talking about <strong>visual patterns</strong> of code, specifically the ones that make my brain hurt!</p><p>Be warned! Tis a murky and ill-defined realm… some of the data points include popular metrics, academic papers, and practical opinions (including my own), but by the end of the search we’ll distill it down to <a href="#8-patterns-for-improving-code-readability">8 visually-observable properties</a> that can help programmers of any language improve the readability of code.</p><h2>Code readability metrics and alternate complexity metrics<span><a href="#code-readability-metrics-and-alternate-complexity-metrics" aria-label="Anchor">#</a></span></h2><p>Let me be upfront: there is no commonly-used and accepted metric for code readability.</p><p>All I could find was 1) academic papers that didn’t seem to be used by the real world and 2) opinions… when I was looking for something more tangible.</p><p>Since I wasn’t looking to invent my own metric, my goal was to collect a set of visual patterns that anyone could use in a discussion about what makes code easier to read.</p><p>For example, take the examples below where the primary difference is just the shape or pattern of logic. Is any one of them the <em>easiest</em> to read? Or are some of them objectively <em>worse</em> to read?</p><figure><img loading="lazy" src="https://seeinglogic.com/posts/visual-readability-patterns/6-oddness.png" alt="Six ways to write a simple getOddness function"></figure><p>The differences between some of the examples above are a matter of preference, but it is interesting to look for patterns that point out the “bad” ones… especially if those are easy to spot visually, with no special tools required!</p><p>My first thought for finding such patterns was to look at complexity metrics, but interestingly there’s not a huge number of well-known software complexity metrics or academic readability ideas that fit what I was looking for, specifically measures that:</p><ol><li>Work on source code snippets or a single function</li><li>Don’t focus on “core complexity”: certain measurements like cyclomatic complexity are to some degree inseparable from the algorithm being implemented</li><li>Don’t focus on superficial style factors: length of variable names, whitespace usage, choices of indentation or brackets/parens placement, etc.</li></ol><p>But the good news was that there was two metrics that seem to be in use that did fit the criteria, so that’s where the journey begins.</p><h2>Halstead Complexity Metrics<span><a href="#halstead-complexity-metrics" aria-label="Anchor">#</a></span></h2><p>In the late 70’s, a fellow named Maurice Halstead came up with a set of metrics in an attempt to build empirical measures of source code.
This means they are translatable across languages and platforms, which is really nice for our purpose because they focus on how something is written rather than the complexity of underlying algorithms being described.</p><figure><img loading="lazy" src="https://seeinglogic.com/posts/visual-readability-patterns/halstead-and-book.png" alt="Maurice Halstead and his seminal work"></figure><p>The root of his metrics was four measurements based around counting <a href="https://en.wikipedia.org/wiki/Operator_%28computer_programming%29" target="_blank">operators</a> and <a href="https://en.wikipedia.org/wiki/Operand" target="_blank">operands</a>:</p><ul><li>Number of <em>distinct</em> <em>operators</em> (<code>n1</code>)</li><li>Number of <em>distinct</em> <strong>operands</strong> (<code>n2</code>)</li><li>Number of <strong>total</strong> <em>operators</em> (<code>N1</code>)</li><li>Number of <strong>total</strong> <strong>operands</strong> (<code>N2</code>)</li></ul><p>Halstead’s focus was building a system of related metrics such as program “length”, “volume”, and “difficulty” with a series of equations describing the relationships between them… ambitiously culminating in a numerical value that would estimate the number of bugs contained in the implementation!</p><figure><img loading="lazy" src="https://seeinglogic.com/posts/visual-readability-patterns/halstead-equations.png" alt="Halstead Complexity Metrics Equations"></figure><p>These metrics definitely are debatable (they were made in the 70’s…), but they give us numbers that are a starting point for at least comparison, and the reasoning seems to make sense</p><p>Intuitively, the more operators in play, the more one has to reason about potential interactions.
Similarly, a larger number of operands means understanding possibilities of dataflow become more complex.</p><h3>Halstead Complexity Javascript Example<span><a href="#halstead-complexity-javascript-example" aria-label="Anchor">#</a></span></h3><p>If we go back to our early example we can make two variations that attempt to be on separate ends of the spectrum in terms of operands and operators, and we can see how that affects two of the Halstead metrics, <em>Volume</em> and <em>Difficulty</em>.</p><div><pre tabindex="0"><code data-lang="javascript"><span><span><span>function</span> <span>getOddnessA</span><span>(</span><span>n</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>n</span> <span>%</span> <span>2</span><span>)</span>
</span></span><span><span>        <span>return</span> <span>'Odd'</span><span>;</span>
</span></span><span><span>    <span>return</span> <span>'Even'</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>// Halstead metrics from: https://ftaproject.dev/playground
</span></span></span><span><span><span>// operators: 4 unique, 7 total
</span></span></span><span><span><span>// operands:  5 unique, 6 total
</span></span></span><span><span><span>// "Volume"      33.30
</span></span></span><span><span><span>// "Difficulty"  2.50
</span></span></span><span><span><span></span>
</span></span><span><span><span>function</span> <span>getOddnessB</span><span>(</span><span>n</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>const</span> <span>evenOdd</span> <span>=</span> <span>[</span><span>'Odd'</span><span>,</span> <span>'Even'</span><span>];</span>
</span></span><span><span>    <span>const</span> <span>index</span> <span>=</span> <span>Number</span><span>(</span><span>n</span> <span>%</span> <span>2</span> <span>===</span> <span>0</span><span>);</span>
</span></span><span><span>    <span>return</span> <span>evenOdd</span><span>[</span><span>index</span><span>];</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>// operators: 7 unique, 10 total
</span></span></span><span><span><span>// operands:  9 unique, 12 total
</span></span></span><span><span><span>// "Volume"      71.35
</span></span></span><span><span><span>// "Difficulty"  3.75
</span></span></span></code></pre></div><p>You can tell just by looking that the first one has fewer operators and operands and is a bit easier to read, and the Halstead Volume and Difficulty numbers confirm this. That’s kinda nice!</p><p>The big downside here is that it’s not well-defined what exactly counts as an <strong>operator</strong> or <strong>operand</strong> for all languages, so it’s best to just use a specific tool or implementation for measurement and stick with it. I used <a href="https://ftaproject.dev/playground" target="_blank">this site</a> for the measurements reported above, whereas the picture below shows my estimation of trying to color code operators/operands to show visually that fewer colors is simpler:</p><figure><img loading="lazy" src="https://seeinglogic.com/posts/visual-readability-patterns/halstead-colors.png" alt="Pictures of operands and operators colored for getOddnessA and B"></figure><h3>Halstead Complexity Takeaways<span><a href="#halstead-complexity-takeaways" aria-label="Anchor">#</a></span></h3><p>From a practical standpoint, these metrics suggest a couple of useful patterns to me:</p><ul><li>Smaller functions with fewer variables are generally easier to read, and redundant variables are only for when you hate the people that read your code</li><li>Prefer to <em>not</em> use language-specific operators or syntactic sugars, since additional constructs are a tax on the reader. Try reading someone else’s Perl or Ruby if this doesn’t resonate with you.</li><li>Chaining together <code>map</code>/<code>reduce</code>/<code>filter</code> and other functional programming constructs (lambdas, iterators, comprehensions) may be concise, but long/multiple chains hurt readability<ul><li>This seems more common in Javascript and Rust, or when a Python programmer gets fascinated with itertools</li></ul></li></ul><p>As mentioned, the Halstead metrics have been debated fiercely in <a href="https://arxiv.org/pdf/1408.4523.pdf" target="_blank">academic</a> and <a href="https://nvlpubs.nist.gov/nistpubs/TechnicalNotes/NIST.TN.1990.pdf" target="_blank">other</a> circles, but we don’t need to wait for <em>science</em>.</p><p>Pfft, we can take the ideas and run!</p><h2>“Cognitive Complexity”<span><a href="#cognitive-complexity" aria-label="Anchor">#</a></span></h2><p>A more recent metric developed in an effort to more accurately capture the difficulty of reading is a measure called “<a href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf" target="_blank">Cognitive Complexity</a>” developed by SonarSource, a company that makes static analysis products.</p><p>Some people find the name of the metric misleading, feeling that it makes the measure sound more scientific or objective, rather than naming it something that sounds like a heuristic developed from experience.</p><p>Being a practitioner who really only cares about effectiveness, I’ll take good metrics with bad names over bad metrics, and I have respect for heuristics as long as they work!</p><p>The authors break down Cognitive Complexity into three ideas:</p><ol><li>Shorthand constructs that combine statements decreases difficulty</li><li>Each break from linear flow increases difficulty</li><li>Nested control flow increases difficulty</li></ol><p>Seems straightforward and reasonable, but the whitepaper goes into <em>much</em> more depth than just three points, so let’s get into the meat of this to see what a group of static analysis developers believe hurt readability.</p><h3>Shorthand Constructs<span><a href="#shorthand-constructs" aria-label="Anchor">#</a></span></h3><p>For the first principle, their whitepaper uses the following two snippets, arguing that the first increases difficulty for the reader while the second doesn’t:</p><div><pre tabindex="0"><code data-lang="javascript"><span><span><span>// 1
</span></span></span><span><span><span></span><span>MyObj</span> <span>myObj</span> <span>=</span> <span>null</span><span>;</span>
</span></span><span><span><span>if</span> <span>(</span><span>a</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>myObj</span> <span>=</span> <span>a</span><span>.</span><span>myObj</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>// 2
</span></span></span><span><span><span></span><span>MyObj</span> <span>myObj</span> <span>=</span> <span>a</span><span>?</span><span>.</span><span>myObj</span><span>;</span>
</span></span></code></pre></div><p>The second is shorter and takes less time to read, but I’d argue that in the second construct there’s a better chance that the programmer forgets to properly handle all of the possibilities… case in point, these code snippets aren’t actually equivalent!</p><p>In the first case <code>myObj</code> will either be <code>a.myObj</code> or <code>null</code> and in the second it will be <code>a.myObj</code> or <code>undefined</code>!</p><p>This may seem like splitting hairs, but if I’ve got my bug-hunting hat on, I look for the small unexpected behaviors like this to see if I can leverage them into something useful!</p><p>Even using languages with solid type-checking like TypeScript or Rust, they only reduce the chance you <em>omit</em> handling such a case, but it doesn’t mean that you handle it <em>correctly</em> in all cases.</p><p>Without the assistance of type checking, like in vanilla JavaScript, the chances of that corner case not being handled are much higher.
So while I won’t argue that shorthand constructs are simpler to write and easier to read, there’s still some tradeoff in terms of conciseness and density.</p><h3>Linear Flow Breaks<span><a href="#linear-flow-breaks" aria-label="Anchor">#</a></span></h3><p>One thing that seems obvious is that “linear” code with no conditionals is easier to scan than code with conditionals, and is a big focus for Cognitive Complexity.</p><p>Naturally they assess additional difficulty for any conditionals, loops, or <code>goto</code>s, but they also get a bit fancier and include conditional macros, try/except blocks, sequences of logical operators, and recursion.</p><p>I totally agree that each of these things generally affect readability, but I think there are four fine points worth talking about.</p><p>Point 1. They count <code>switch</code> statements as a single group, but they penalize each additional <code>else-if</code> in a chain because each <code>else-if</code> <strong>can</strong> make more than one comparison, even the one in question doesn’t.</p><p>Don’t get me wrong, I think switches look better than if-else chains, but they aren’t innocent either; switch case fall-throughs definitely increase reading difficulty and missing <code>break</code>s have caused needless headaches for many programmers, myself included!</p><div><pre tabindex="0"><code data-lang="typescript"><span><span><span>// Switches are preferred by this metric
</span></span></span><span><span><span></span><span>function</span> <span>getSign1</span><span>(</span><span>n</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>switch</span> <span>(</span><span>math</span><span>.</span><span>sign</span><span>(</span><span>n</span><span>))</span> <span>{</span>
</span></span><span><span>        <span>case</span> <span>-</span><span>1</span>:
</span></span><span><span>            <span>return</span> <span>'negative'</span><span>;</span>
</span></span><span><span>        <span>case</span> <span>1</span>:
</span></span><span><span>            <span>return</span> <span>'positive'</span><span>;</span>
</span></span><span><span>        <span>default</span><span>:</span>
</span></span><span><span>            <span>return</span> <span>'other'</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>// It's true that else-if doesn't look as nice when each case returns
</span></span></span><span><span><span></span><span>function</span> <span>getSign2() {</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>math</span><span>.</span><span>sign</span><span>(</span><span>n</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>'negative'</span><span>;</span>
</span></span><span><span>    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>math</span><span>.</span><span>sign</span><span>(</span><span>n</span><span>)</span> <span>==</span> <span>-</span><span>1</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>'positive'</span><span>;</span>
</span></span><span><span>    <span>}</span> <span>else</span> <span>{</span>
</span></span><span><span>        <span>return</span> <span>'other'</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>// but if the switch uses "break", the advantage decreases...
</span></span></span><span><span><span></span><span>function</span> <span>getSign3</span><span>(</span><span>n</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>let</span> <span>sign</span> <span>=</span> <span>''</span><span>;</span>
</span></span><span><span>    <span>switch</span> <span>(</span><span>math</span><span>.</span><span>sign</span><span>(</span><span>n</span><span>))</span> <span>{</span>
</span></span><span><span>        <span>case</span> <span>-</span><span>1</span>:
</span></span><span><span>            <span>sign</span> <span>=</span> <span>'negative'</span><span>;</span>
</span></span><span><span>            <span>break</span><span>;</span>
</span></span><span><span>        <span>case</span> <span>1</span>:
</span></span><span><span>            <span>sign</span> <span>=</span> <span>'positive'</span><span>;</span>
</span></span><span><span>            <span>break</span><span>;</span>
</span></span><span><span>        <span>default</span><span>:</span>
</span></span><span><span>            <span>sign</span> <span>=</span> <span>'other'</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    <span>return</span> <span>sign</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Point 2. They count sequences of logical operators in a conditional, meaning that any length chain <code>&amp;&amp;</code> and <code>||</code> would count as one, but mixing them would count as increased difficulty.</p><p>This actually feels pretty right on, and I think this addresses how some conditionals are more difficult to read without being much longer:</p><div><pre tabindex="0"><code data-lang="typescript"><span><span><span>// this conditional only adds 1 point
</span></span></span><span><span><span></span><span>if</span> <span>(</span><span>debug</span> <span>||</span> <span>verbose</span> <span>||</span> <span>consoleMode</span><span>)</span> <span>{</span> <span>...</span> <span>}</span>
</span></span><span><span>
</span></span><span><span><span>// this conditional adds 2, and not because of the indent
</span></span></span><span><span><span></span><span>if</span> <span>(</span><span>debug</span> <span>||</span>
</span></span><span><span>    <span>(</span><span>verbose</span> <span>&amp;&amp;</span> <span>consoleMode</span><span>))</span> <span>{</span> <span>...</span> <span>}</span>
</span></span><span><span>
</span></span><span><span><span>// this conditional adds 3:
</span></span></span><span><span><span></span><span>if</span> <span>(</span><span>debug</span> <span>||</span> 
</span></span><span><span>    <span>!</span><span>(</span><span>verbose</span> <span>&amp;&amp;</span> <span>consoleMode</span><span>))</span> <span>{</span> <span>...</span> <span>}</span>
</span></span></code></pre></div><p>Point 3. Exception handling–something I think is commonly overlooked but can really be hard on a reader if not handled well.</p><p>In Cognitive Complexity, try/catch blocks increase the difficulty score, but multiple <code>catch</code> blocks aren’t considered harder than just one, and <code>try</code> and <code>finally</code> blocks are ignored.</p><p>I don’t want to get caught up on every point, but one important thing I think this leaves out is the readability cost of throwing exceptions.
When exception handling crosses function boundaries, it essentially interleaves the complexity of the involved functions.</p><div><pre tabindex="0"><code data-lang="javascript"><span><span><span>function</span> <span>divideBy7</span><span>(</span><span>n</span><span>)</span><span>:</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>n</span> <span>&lt;=</span> <span>0</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>throw</span> <span>Error</span><span>(</span><span>`divideBy7 expects positive numbers, got </span><span>${</span><span>n</span><span>}</span><span>`</span><span>);</span>
</span></span><span><span>        <span>// aggressive exception throwing hurts readability because
</span></span></span><span><span><span></span>        <span>// now the reader has to search and find where this might be caught
</span></span></span><span><span><span></span>    <span>}</span>
</span></span><span><span>    <span>return</span> <span>parseInt</span><span>(</span><span>n</span> <span>/</span> <span>7</span><span>)</span>
</span></span></code></pre></div><p>Point 4. is that this metric counts any <em>goto</em> (aka “jump-to-label”) as always increasing difficulty; seems reasonable, right?</p><p>But there is one particular goto structure (usually “goto out” or “goto done”, etc) that <a href="https://wiki.sei.cmu.edu/confluence/display/c/MEM12-C.+Consider+using+a+goto+chain+when+leaving+a+function+on+error+when+using+and+releasing+resources" target="_blank">some experts</a> seem to agree can be helpful for concisely dealing with cleanup handling on error conditions.</p><p>Conversely, if a <em>goto</em> crosses a loop boundary in an unexpected way (e.g. something not achievable with a plain <code>continue</code> or <code>break</code>), it forces the reader to re-create and understand this new and unexpected control flow… and that is always taxing to read, even if the structure and intent is logical.</p><p>My opinion is that a <em>goto</em> can be as harmless as any other conditional in some cases, but in other cases they are much worse than adding an extra <code>if</code> statement.</p><figure><img loading="lazy" src="https://seeinglogic.com/posts/visual-readability-patterns/one-goto.png" alt="xkcd 292: GOTO"><figcaption><a href="https://xkcd.com/292/" target="_blank">https://xkcd.com/292/</a></figcaption></figure><h3>Nested Conditionals/Loops<span><a href="#nested-conditionalsloops" aria-label="Anchor">#</a></span></h3><p>Since conditionals are harder to read, nested conditionals are worse, right?</p><p>The authors of this metric definitely believe so, doubling down and adding an additional point of difficult for each level of nesting (in addition to points for conditionals, loops, etc), as they show with a Java example:</p><div><pre tabindex="0"><code data-lang="java"><span><span><span>void</span> <span>myMethod</span> <span>()</span> <span>{</span>
</span></span><span><span>    <span>try</span> <span>{</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>condition1</span><span>)</span> <span>{</span> <span>// +1
</span></span></span><span><span><span></span>            <span>for</span> <span>(</span><span>int</span> <span>i</span> <span>=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>10</span><span>;</span> <span>i</span><span>++)</span> <span>{</span> <span>// +2 (nesting=1)
</span></span></span><span><span><span></span>                <span>while</span> <span>(</span><span>condition2</span><span>)</span> <span>{</span> <span>…</span> <span>}</span> <span>// +3 (nesting=2)
</span></span></span><span><span><span></span>            <span>}</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span> <span>catch</span> <span>(</span><span>ExcepType1</span> <span>|</span> <span>ExcepType2</span> <span>e</span><span>)</span> <span>{</span> <span>// +1
</span></span></span><span><span><span></span>        <span>if</span> <span>(</span><span>condition2</span><span>)</span> <span>{</span> <span>…</span> <span>}</span> <span>// +2 (nesting=1)
</span></span></span><span><span><span></span>    <span>}</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>// Cognitive  complexity 9
</span></span></span></code></pre></div><p>This is actually a common idea, one I agree with and have heard other practitioners call it things like the “Level of Indentation” or “Bumpy Road” metric.
Hard to disagree with the premise that nested conditional logic is harder to read, especially if the level of nesting goes beyond 2:</p><div><pre tabindex="0"><code data-lang="typescript"><span><span><span>function</span> <span>logIntegerDivA</span><span>(</span><span>x</span>: <span>number</span><span>,</span> <span>y</span>: <span>number</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>debug</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>if</span> <span>(</span><span>x</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span>
</span></span><span><span>            <span>if</span> <span>(</span><span>y</span> <span>!=</span> <span>0</span><span>)</span> <span>{</span>
</span></span><span><span>                <span>console</span><span>.</span><span>log</span><span>(</span><span>Math</span><span>.</span><span>floor</span><span>(</span><span>x</span><span>/</span><span>y</span><span>));</span>
</span></span><span><span>            <span>}</span>
</span></span><span><span>        <span>}</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>// vs
</span></span></span><span><span><span></span><span>function</span> <span>logIntegerDivB</span><span>(</span><span>x</span>: <span>number</span><span>,</span> <span>y</span>: <span>number</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>if</span> <span>(</span><span>debug</span> <span>===</span> <span>false</span><span>)</span> <span>{</span>
</span></span><span><span>        <span>return</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    <span>if</span> <span>((</span><span>x</span> <span>==</span> <span>0</span><span>)</span> <span>||</span> <span>(</span><span>y</span> <span>==</span> <span>0</span><span>))</span> <span>{</span>
</span></span><span><span>        <span>return</span><span>;</span>
</span></span><span><span>    <span>}</span>
</span></span><span><span>    <span>console</span><span>.</span><span>log</span><span>(</span><span>Math</span><span>.</span><span>floor</span><span>(</span><span>x</span><span>/</span><span>y</span><span>));</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>We can talk about how many points different constructs are warranted, but our goal is to improve code, not come up with our own metric so we can sell a static analysis tool.</p><p>To wrap this part up, we see that Cognitive Complexity raises a lot of great discussion points on what affects readability and could be an effective heuristic, but it has its flaws.</p><p>For example, one interesting omission is that it doesn’t directly account for the length of a function… because all else being equal, long functions are generally more effort to read than short ones.</p><p>And since the company that invented it doesn’t advertise an open-source reference implementation for common languages, it’s best to take the ideas that we find helpful and continue on.</p><h2>Function shape, patterns, and variables<span><a href="#function-shape-patterns-and-variables" aria-label="Anchor">#</a></span></h2><p>A common theme when talking about visual patterns of code is to reference the “shape” of a function (referring to more than just indentation) and how it uses variables.</p><p>While there are a number of academic papers around variable use and understanding, “shape” and “pattern” aren’t well-defined terms, so I couldn’t find any that effectively captured more than one piece of what I find to be three important factors for readability:</p><ol><li>Good names are vitally important, and variable shadowing is terrible</li><li>Prefer shorter variable liveness durations</li><li>Familiar variable usage patterns are easier to understand than novel ones</li></ol><h3>Distinct and Descriptive Names<span><a href="#distinct-and-descriptive-names" aria-label="Anchor">#</a></span></h3><p>I hesitate to include the first one, because it’s obvious that descriptive names help someone understand what code is supposed to do, and duplicative or cryptic names do the opposite.</p><p>But there’s actually two facets of this idea that I feel are more related to “shape” or usage than meets the eye:</p><ol><li><a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes" target="_blank">Variable shadowing</a> is dangerous; any place where the reader has to think about scope rules in order to deconflict which version of a variable is being used <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes" target="_blank">should be changed</a></li><li>Prefer <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL02-C.+Use+visually+distinct+identifiers" target="_blank">visually distinct names</a> (e.g. have you ever mistaken <code>i</code> for <code>j</code> or <code>item</code> for <code>items</code>?)<ul><li>I once audited a codebase where one module’s author had used three variations of same variable name in a single function, (e.g. <code>node</code>, <code>_node</code>, and <code>thisNode</code>)… unsurprisingly this component was rife with bugs that had security impacts on the larger system</li></ul></li></ol><h3>Shorter-lived Variables<span><a href="#shorter-lived-variables" aria-label="Anchor">#</a></span></h3><p>The second idea refers to “<a href="https://en.wikipedia.org/wiki/Live-variable_analysis" target="_blank">live variable analysis</a>”, which looks at the span between where a variable is first written and the last place it could possibly be used.
This topic seems to be reserved for compiler classes, but it’s an intuitive thing: long liveness durations force the reader to do keep more possible variables and variables in their head.</p><div><pre tabindex="0"><code data-lang="typescript"><span><span><span>// this version declares variables at the top,
</span></span></span><span><span><span></span><span>function</span> <span>fibonacciA</span><span>(</span><span>n</span>: <span>number</span><span>)</span><span>:</span> <span>number</span> <span>{</span>
</span></span><span><span>  <span>let</span> <span>fibN</span> <span>=</span> <span>n</span><span>;</span>
</span></span><span><span>  <span>let</span> <span>fibNMinus1</span> <span>=</span> <span>1</span><span>;</span>
</span></span><span><span>  <span>let</span> <span>fibNMinus2</span> <span>=</span> <span>0</span><span>;</span>
</span></span><span><span>  <span>// live: n, fibN, fibNMinus1, fibNMinus2
</span></span></span><span><span><span></span>  <span>if</span> <span>(</span><span>n</span> <span>===</span> <span>0</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>0</span><span>;</span>
</span></span><span><span>  <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>n</span> <span>===</span> <span>1</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>1</span><span>;</span>
</span></span><span><span>  <span>}</span>
</span></span><span><span>  <span>// live: n, fibN, fibNMinus1, fibNMinus2
</span></span></span><span><span><span></span>  <span>for</span> <span>(</span><span>let</span> <span>i</span> <span>=</span> <span>2</span><span>;</span> <span>i</span> <span>&lt;=</span> <span>n</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>fibN</span> <span>=</span> <span>fibNMinus1</span> <span>+</span> <span>fibNMinus2</span><span>;</span>
</span></span><span><span>    <span>fibNMinus2</span> <span>=</span> <span>fibNMinus1</span><span>;</span>
</span></span><span><span>    <span>fibNMinus1</span> <span>=</span> <span>fibN</span><span>;</span>
</span></span><span><span>  <span>}</span>
</span></span><span><span>  <span>// live: fibN
</span></span></span><span><span><span></span>  <span>return</span> <span>fibN</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span><span><span>
</span></span><span><span><span>// this reduces the live range of the three local variables
</span></span></span><span><span><span></span><span>function</span> <span>fibonacciA</span><span>(</span><span>n</span>: <span>number</span><span>)</span><span>:</span> <span>number</span> <span>{</span>
</span></span><span><span>  <span>// live: n
</span></span></span><span><span><span></span>  <span>if</span> <span>(</span><span>n</span> <span>===</span> <span>0</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>0</span><span>;</span>
</span></span><span><span>  <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>n</span> <span>===</span> <span>1</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>return</span> <span>1</span><span>;</span>
</span></span><span><span>  <span>}</span>
</span></span><span><span>  <span>// these three only become live right before their use
</span></span></span><span><span><span></span>  <span>let</span> <span>fibN</span> <span>=</span> <span>n</span><span>;</span>
</span></span><span><span>  <span>let</span> <span>fibNMinus1</span> <span>=</span> <span>1</span><span>;</span>
</span></span><span><span>  <span>let</span> <span>fibNMinus2</span> <span>=</span> <span>0</span><span>;</span>
</span></span><span><span>
</span></span><span><span>  <span>for</span> <span>(</span><span>let</span> <span>i</span> <span>=</span> <span>2</span><span>;</span> <span>i</span> <span>&lt;=</span> <span>n</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>
</span></span><span><span>    <span>fibN</span> <span>=</span> <span>fibNMinus1</span> <span>+</span> <span>fibNMinus2</span><span>;</span>
</span></span><span><span>    <span>fibNMinus2</span> <span>=</span> <span>fibNMinus1</span><span>;</span>
</span></span><span><span>    <span>fibNMinus1</span> <span>=</span> <span>fibN</span><span>;</span>
</span></span><span><span>  <span>}</span>
</span></span><span><span>
</span></span><span><span>  <span>return</span> <span>fibN</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>For this, don’t be concerned about the exact definition, because while it’s partly about the difficulty of mental dataflow, it’s also about locality and how far away the various uses of a variable are from each other.</p><p>The picture below shows a span of uses which approximates the liveness analysis and shows the difference even for a fairly small and contrived example.</p><figure><img loading="lazy" src="https://seeinglogic.com/posts/visual-readability-patterns/live-analysis.png" alt="Side-by-side of the examples above with horizontal colored bars showing the span between initialization and last use of each variable"></figure><p>The worst case is a variable whose liveness spans multiple functions and is written in multiple places… those are tough situations to manage without error, so carefully consider whether there’s a better way.</p><p>Often an object may be more appropriate than passing long-lived variables between functions, especially with multiple variables whose liveness durations are basically the same.
If an object doesn’t make sense, minimize the amount of functions and lines a reader has to read in order to understand what the value could be.</p><p>Functional programming paradigms often push programmers towards keeping variable liveness short, even to the point of skipping the use of variables altogether.
While there is a lot of elegant code that shows this working, you can definitely take things too far in this direction…</p><p>For long function chains or callbacks that stack up, breaking up the chain into smaller groups and using a well-named variable or helper function can go a long way in reducing the cognitive load for readers.</p><div><pre tabindex="0"><code data-lang="typescript"><span><span><span>// which is easier and faster to read?
</span></span></span><span><span><span></span><span>function</span> <span>funcA</span><span>(</span><span>graph</span><span>)</span> <span>{</span>
</span></span><span><span>  <span>return</span> <span>graph</span><span>.</span><span>nodes</span><span>(</span><span>`node[name = </span><span>${</span><span>name</span><span>}</span><span>]`</span><span>)</span>
</span></span><span><span>    <span>.</span><span>connected</span><span>()</span>
</span></span><span><span>    <span>.</span><span>nodes</span><span>()</span>
</span></span><span><span>    <span>.</span><span>not</span><span>(</span><span>'.hidden'</span><span>)</span>
</span></span><span><span>    <span>.</span><span>data</span><span>(</span><span>'name'</span><span>);</span>
</span></span><span><span><span>}</span>
</span></span><span><span><span>// or:
</span></span></span><span><span><span></span><span>function</span> <span>funcB</span><span>(</span><span>graph</span><span>)</span> <span>{</span>
</span></span><span><span>  <span>const</span> <span>targetNode</span> <span>=</span> <span>graph</span><span>.</span><span>nodes</span><span>(</span><span>`node[name = </span><span>${</span><span>name</span><span>}</span><span>]`</span><span>)</span>
</span></span><span><span>  <span>const</span> <span>neighborNodes</span> <span>=</span> <span>targetNode</span><span>.</span><span>connected</span><span>().</span><span>nodes</span><span>();</span>
</span></span><span><span>  <span>const</span> <span>visibleNames</span> <span>=</span> <span>neighborNodes</span><span>.</span><span>not</span><span>(</span><span>'.hidden'</span><span>).</span><span>data</span><span>(</span><span>'name'</span><span>)</span>
</span></span><span><span>
</span></span><span><span>  <span>return</span> <span>visibleNames</span><span>;</span>
</span></span><span><span><span>}</span>
</span></span></code></pre></div><p>Is the second one marginally less efficient?</p><p>Yes.</p><p>Does it actually matter? No. Unless you’ve run a performance tool that tells you <em>those specific lines</em> are the problem.</p><p>As others have written, <a href="https://jvns.ca/blog/2014/05/12/computers-are-fast/" target="_blank">computers are fast</a> and <a href="https://wiki.c2.com/?PrematureOptimization" target="_blank">premature optimization is a bad thing</a>.</p><h3>Reuse of Familiar Code Patterns<span><a href="#reuse-of-familiar-code-patterns" aria-label="Anchor">#</a></span></h3><p>The third and final idea on variables is on reusing familiar code/variable shapes: basically suggesting you leverage familiarity and follow the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" target="_blank">Principle of Least Surprise</a> when writing code.</p><p>Reusing code patterns wherever possible (without copy-pasting) helps because readers don’t have to think as hard about patterns they recognize, and you can call out departures from otherwise familiar structures with edifying variable names or comments.</p><p>A common example would be to stay consistent in your choice of how to write conditionals (e.g. pick one of the 6 <code>getOddness</code> shape variations from the <a href="https://seeinglogic.com/posts/visual-readability-patterns/#alternate-complexity-metrics">top of this post</a> and only use that shape in a particular codebase).
Taking this idea to its logical conclusion is basically just encouraging the use of templated or generic functions so that a reader doesn’t have to recognize that a pattern is being repeated across functions.</p><h2>8 Patterns for Improving Code Readability<span><a href="#8-patterns-for-improving-code-readability" aria-label="Anchor">#</a></span></h2><p>Combining the points discussed so far and merging/removing duplicates where possible, we end up with a list of 8 factors:</p><ol><li><strong>Line/Operator/Operand count</strong>: Make smaller functions with fewer variables and operators, they are easier to read</li><li><strong>Novelty</strong>: Avoid novelty in function shapes, operators, or syntactic sugars; prefer reusing common patterns in a codebase</li><li><strong>Grouping</strong>: Split series of long function chains, iterators, or comprehensions into logical groupings via helper functions or intermediate variables</li><li><strong>Conditional simplicity</strong>: Keep conditional tests as short as possible and prefer sequences of the same logical operator over mixing operators within a conditional</li><li><strong>Gotos</strong>: Never use <code>goto</code>s unless you are following <a href="https://wiki.sei.cmu.edu/confluence/display/c/MEM12-C.+Consider+using+a+goto+chain+when+leaving+a+function+on+error+when+using+and+releasing+resources" target="_blank">this one pattern</a>, and even then only when the alternatives are worse</li><li><strong>Nesting</strong>: Minimize nested logic (aka avoid large variations in indentation). If deep nesting is required, isolate it in a function instead of deeply nesting inside a larger function</li><li><strong>Variable distinction</strong>: Always use descriptive and visually distinct variable names; avoid variable shadowing</li><li><strong>Variable liveness</strong>: Prefer shorter liveness durations for variables, especially with regard to function boundaries</li></ol><p>Each of these applies across languages and code format/styles, and can give objective measures to use in discussions about readability.</p><h2>Conclusion<span><a href="#conclusion" aria-label="Anchor">#</a></span></h2><p>We’ve covered a lot of ideas from a wide variety of sources, but in the end we collected a set of visually observable patterns that can help determine why certain code is harder to read.</p><figure><img loading="lazy" src="https://seeinglogic.com/posts/visual-readability-patterns/wtfs-per-minute.jpg" alt="WTFs per minute is the only real measure of code quality"></figure><p>To bring closure to the story at the beginning of this post, the codebase that was breaking my brain had several anti-patterns, specifically related to items 1, 2, 3, 6, and 8 in the list above.</p><p>It had long functions, used a wide mix of language constructs, and contained many function chains which should’ve been put in helper functions. As a side effect, the code’s many large functions ended up with a lot of nested complexity and long-lived variables too.</p><p>Despite the high quality of the code and the authors, we found more than one critical bug, including one that was pretty easy to see… but it had been missed, in my opinion because it was in the middle of a long and complex function that was difficult to reason about.</p><p>Since all of the patterns in this post focused on snippets and single functions, maybe in the future we’ll talk about interprocedural issues. If you want to hear more about complexity issues, find me on your <a href="https://twitter.com/seeinglogic" target="_blank">social</a> of <a href="https://infosec.exchange/@seeinglogic" target="_blank">choice</a> and let me know, or reshare this post!</p><p>Til then, I’m just going to end with what a mentor once told me early in my career: “the person who is most likely to read your code a month from now is you.”</p><h2>Selected References<span><a href="#selected-references" aria-label="Anchor">#</a></span></h2><ul><li><a href="https://iopscience.iop.org/article/10.1088/1757-899X/1076/1/012046/pdf" target="_blank">Comparing Halstead metrics of the same algorithm in Python, C++, JavaScript and Java</a></li><li><a href="https://ftaproject.dev/playground" target="_blank">Typescript Playground for Halstead Metrics and Cyclomatic Complexity</a></li><li><a href="https://radon.readthedocs.io/en/latest/intro.html" target="_blank">Radon: a Python package for complexity metrics</a></li><li><a href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf" target="_blank">Cognitive complexity whitepaper</a></li><li><a href="https://peps.python.org/pep-0020/" target="_blank">The Zen of Python</a></li><li><a href="https://wiki.sei.cmu.edu/confluence/display/c/MEM12-C.+Consider+using+a+goto+chain+when+leaving+a+function+on+error+when+using+and+releasing+resources" target="_blank">Carnegie Mellon Software Engineering Institute: gotos are ok in this one case</a></li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ESP32 Undocumented Bluetooth Commands: Clearing the Air (212 pts)]]></title>
            <link>https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/</link>
            <guid>43330331</guid>
            <pubDate>Tue, 11 Mar 2025 08:21:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/">https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/</a>, See on <a href="https://news.ycombinator.com/item?id=43330331">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2>Overview<span><a href="#overview" aria-label="Anchor">#</a></span></h2><p>Espressif has already provided a <a href="https://www.espressif.com/en/news/Response_ESP32_Bluetooth" target="_blank">formal response</a> to the recently published claims about ESP32 Bluetooth controller serving as a potential “backdoor” or having “undocumented features” that can cause security concerns.</p><p>This post highlights the technical details about the relevant commands (HCI Commands) that were undocumented and establishes that the mentioned undocumented HCI commands do not pose a security threat and are certainly not a “backdoor”.</p><h3>What are HCI Commands?<span><a href="#what-are-hci-commands" aria-label="Anchor">#</a></span></h3><p>The Bluetooth protocol stack consists of two primary layers:</p><ul><li><strong>Bluetooth Controller (Lower Layer)</strong> – Handles radio operations, link management, and low-level Bluetooth communication. Each ESP32 series chip implements a controller through a combination of hardware and software.</li><li><strong>Bluetooth Host Stack (Upper Layer)</strong> – Manages higher-level Bluetooth functionality, such as pairing, encryption, and application-layer interactions. This is fully implemented in software. The ESP32 series of chips support open-source NimBLE and Bluedroid as Bluetooth host stacks.</li></ul><figure><img src="https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/img/bluetooth_architecture.webp" alt="Zoom Image"><figcaption><p><a href="https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/img/bluetooth_architecture.webp">Zoom Image</a></p></figcaption></figure><p>These layers communicate via a standard interface call the Host Controller Interface (HCI). HCI defines a set of standard commands for the Bluetooth Host stack to use. The Bluetooth controller implements standard HCI commands along with a set of Vendor-specific HCI commands that are primarily used for custom hardware initialization on control as well as for debugging purposes.</p><h3>What is the Reported Security Issue?<span><a href="#what-is-the-reported-security-issue" aria-label="Anchor">#</a></span></h3><p>The reported security issue highlights that the ESP32 contains a set of undocumented HCI commands. The issue claims that these could be used to gain malicious access to devices running Bluetooth on the ESP32.</p><h3>What are these Undocumented Commands?<span><a href="#what-are-these-undocumented-commands" aria-label="Anchor">#</a></span></h3><p>The “undocumented” HCI commands mentioned in the report are debug commands present in the Bluetooth controller IP in the ESP32. These commands are mostly for assisting the debug (e.g., read/write RAM, memory mapped flash read, send/receive packets, etc.) and do not play any active role in the HCI communication from a standard Bluetooth host stack such as NimBLE or Bluedroid used on the ESP32.</p><p>Such debugging commands, a common paradigm for Bluetooth Controller implementations, assist developers to debug Controller behavior. This is particularly helpful in dual-chip solutions.</p><h2>ESP32 Bluetooth Architecture<span><a href="#esp32-bluetooth-architecture" aria-label="Anchor">#</a></span></h2><p>In ESP32, the Controller and the Host both run on the same MCU. The Host continues to communicate with the Controller over HCI. But since both are running on the same MCU, the HCI can be treated as a <strong>virtual</strong> HCI layer, an internal layer of communication.</p><p>Any code accessing this virtual HCI layer should itself be first executing on the ESP32, with full execution privileges.</p><figure><img src="https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/img/esp32_bluetooth_vhci.webp" alt="Zoom Image"><figcaption><p><a href="https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/img/esp32_bluetooth_vhci.webp">Zoom Image</a></p></figcaption></figure><h2>Impact<span><a href="#impact" aria-label="Anchor">#</a></span></h2><ul><li>For the majority of the ESP32 applications, the Bluetooth Host and Controller are part of the same application binary running on ESP32. There is no security risk because the application already has full privileged access to the memory and registers as well as ability to send/receive Bluetooth packets irrespective of the availability of these HCI commands.</li><li>These undocumented HCI commands cannot be triggered by Bluetooth, radio signals, or over the Internet, unless there is a vulnerability in the application itself or the radio protocols. Presence of such vulnerabilities will be a bigger problem and the presence of these undocumented commands does not offer additional attack surface.</li><li>Only the original ESP32 chip has these commands. ESP32-C, ESP32-S and ESP32-H series chips are unaffected as they don’t have these commands supported in their Bluetooth controller.</li></ul><h2>ESP32 Hosted Mode Operation (Less Commonly Used)<span><a href="#esp32-hosted-mode-operation-less-commonly-used" aria-label="Anchor">#</a></span></h2><p>In a not-so-commonly-used alternate configuration, ESP32 can tunnel HCI commands over a serial (e.g., <strong>UART HCI</strong>) interface to an external host system. This is typically used in scenarios where ESP32 acts just as a communication coprocessor. This type of use of ESP32 is not as common as the standalone mode of operation.</p><figure><img src="https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/img/esp32_bluetooth_serial_hci.webp" alt="Zoom Image"><figcaption><p><a href="https://developer.espressif.com/blog/2025/03/esp32-bluetooth-clearing-the-air/img/esp32_bluetooth_serial_hci.webp">Zoom Image</a></p></figcaption></figure><p>In such a system, the ESP32 fully trusts the host. If an attacker maliciously gains control over the host system, they could potentially issue these debug commands to influence ESP32’s behavior. However, an attacker must first compromise the host device, making this a second-stage attack vector rather than a standalone vulnerability. Or, gain a physical access to the device to send the HCI commands over serial interface.</p><p>For these UART-HCI-based implementations, the attack is not self-exploitable. Still, a software fix can disable debug commands via an OTA update for added security. We will have more updates in our software stack regarding this soon.</p><h2>Mitigation<span><a href="#mitigation" aria-label="Anchor">#</a></span></h2><p>As summarized above, there is no real, known security threat that these undocumented commands pose. Regardless, Espressif has decided to take the following measures:</p><ul><li>Espressif will provide a fix that removes access to these HCI debug commands through a software patch for currently supported ESP-IDF versions</li><li>Espressif will document all Vendor-specific HCI commands to ensure transparancy of what functionality is available at the HCI layer</li></ul><h2>Summary<span><a href="#summary" aria-label="Anchor">#</a></span></h2><p>To summarize, for most ESP32 applications, we do not foresee any impact from the reported issue provided the product has the recommended platform security features enabled. For a small number of Bluetooth HCI serial use-cases, we can mitigate the issue by disabling debug commands and we will provide an update on that front soon.</p><p>We follow a standardized <a href="https://www.espressif.com/sites/default/files/Espressif%20Security%20Incident%20Response%20Process%20v1.0_EN.pdf" target="_blank">Product Security Incident Response process</a> and we believe in responsible disclosure.</p><p>We believe that the security of devices based on Espressif chips is of paramount importance and are committed to transparency and best security practices. We will continue to work with the community to ensure that our devices are secure and that all security-related information is responsibly disclosed.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[New Zealand's $16B health dept managed finances with single Excel spreadsheet (125 pts)]]></title>
            <link>https://www.theregister.com/2025/03/10/nz_health_excel_spreadsheet/</link>
            <guid>43330206</guid>
            <pubDate>Tue, 11 Mar 2025 07:56:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theregister.com/2025/03/10/nz_health_excel_spreadsheet/">https://www.theregister.com/2025/03/10/nz_health_excel_spreadsheet/</a>, See on <a href="https://news.ycombinator.com/item?id=43330206">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="body">
<p>The body that runs New Zealand’s public health system uses a single Excel spreadsheet as the primary source of data to consolidate and manage its finances, which aren’t in great shape perhaps due to the sheet’s shortcomings.</p>
<p>The spreadsheet-using agency is Health New Zealand (HNZ) which was established in 2022 to replace 20 district health boards in the expectation it would be more cost-effective and deliver more consistent services. The org has a budget of $NZ28 billion ($16 billion) and advised lawmakers it would stay within it for FY 23.24.</p>
<p>That prediction was incorrect and HNZ blew its budget, leading to a review of its finances that last week delivered a damning <a target="_blank" href="https://www.tewhatuora.govt.nz/assets/Uploads/HNZ-Financial-Review-Report.pdf">report</a> [PDF] that found the org lost “control of the critical levers that drive financial outcomes” and had an “inability to identify and respond to the disconnect between expenditure and revenue.”</p>

    

<p>The Deloitte-penned report also found an Excel spreadsheet was the “primary data file used by HNZ to manage its financial performance” and was used for “consolidation, journals, business-critical reporting, and analysis.”</p>

        


        

<p>The report also noted five big problems with the sheet used at HNZ:</p>
<ul>
<li>Financial information was often 'hard-coded,' making it difficult to trace to the source or have updated data flow through.</li>

<li>Errors such as incorrectly releasing accruals or double-up releases were not picked up until following periods.</li>

<li>Changes to prior periods and FTE errors in district financial reporting Excel submissions, would not flow through to consolidated file.</li>

<li>The spreadsheet can be easy to manipulate information as there is limited tracking to source information where information is not flowing directly from accounting systems.</li>

<li>It is highly prone to human error, such as accidental typing of a number or omission of a zero.</li>
</ul>
<p>Relying on the spreadsheet also meant Health NZ moved slowly: The report found “monthly financial reporting usually took 12-15 days to consolidate and five days to analyse.”</p>
<p>The report suggests that’s a long way short of where Health NZ needs to be.</p>
<p>“The use of an Excel spreadsheet file to track and report financial performance for a NZ$28bn expenditure organisation raises significant concerns, particularly when other more appropriate systems are present on the IT landscape,” the report states.</p>
<ul>

<li><a href="https://www.theregister.com/2025/03/01/internetnz_constitution/">Membership of New Zealand’s domain registry suddenly triples, which isn't entirely welcome</a></li>

<li><a href="https://www.theregister.com/2024/08/16/kim_dotcom_us_extradition/">New Zealand minister OKs Kim Dotcom extradition to US</a></li>

<li><a href="https://www.theregister.com/2024/08/09/on_call/">Techie told 'Bill Gates' Excel is rubbish – and the Microsoft boss had it fixed in 48 hours</a></li>

<li><a href="https://www.theregister.com/2023/10/16/excel_hell_comment/">Excel Hell II: If the sickness can't be fixed, it must be contained</a></li>
</ul>
<p>It gets worse: Health Minister Simeon Brown last week delivered a <a target="_blank" rel="nofollow" href="https://www.beehive.govt.nz/speech/speech-businessnz-health-forum">speech</a> in which he said HNZ operates “an estimated 6,000 applications and 100 digital networks” – or roughly one application for every 16 staff members.</p>
<p>He also said HNZ’s Senior Leadership Team members “have only just begun weekly in-person meetings, and have continued to operate from different offices, despite the majority living in Auckland and the organization being two and a half years old.” Most work in different buildings.</p>

        

<p>However the Minister doesn’t have a plan to get off Excel, or fix HNZ’s tech leadership woes.</p>
<p>In his speech, Simeon promised to investigate “creating a separate Health Infrastructure Entity under Health New Zealand, to manage and deliver physical and digital assets.” But there’s no word on when that investigation might conclude</p>
<p><i>Reg</i> writers who learn of organizations that contemplate ERP as the fix for an unruly estate of legacy apps, with Excel holding things together in the middle, know they’re a chance of spending years chronicling the resulting mess. So good luck, HNZ, you might one day wish for the bad old days of running the org with spreadsheets. ®</p>                                
                    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Local Deep Research – ArXiv, wiki and other searches included (112 pts)]]></title>
            <link>https://github.com/LearningCircuit/local-deep-research</link>
            <guid>43330164</guid>
            <pubDate>Tue, 11 Mar 2025 07:51:32 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/LearningCircuit/local-deep-research">https://github.com/LearningCircuit/local-deep-research</a>, See on <a href="https://news.ycombinator.com/item?id=43330164">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Local Deep Research</h2><a id="user-content-local-deep-research" aria-label="Permalink: Local Deep Research" href="#local-deep-research"></a></p>
<p dir="auto">A powerful AI-powered research assistant that performs deep, iterative analysis using multiple LLMs and web searches. The system can be run locally for privacy or configured to use cloud-based LLMs for enhanced capabilities.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Features</h2><a id="user-content-features" aria-label="Permalink: Features" href="#features"></a></p>
<ul dir="auto">
<li>
<p dir="auto">🔍 <strong>Advanced Research Capabilities</strong></p>
<ul dir="auto">
<li>Automated deep research with intelligent follow-up questions</li>
<li>Citation tracking and source verification</li>
<li>Multi-iteration analysis for comprehensive coverage</li>
<li>Full webpage content analysis (not just snippets)</li>
</ul>
</li>
<li>
<p dir="auto">🤖 <strong>Flexible LLM Support</strong></p>
<ul dir="auto">
<li>Local AI processing with Ollama models</li>
<li>Cloud LLM support (Claude, GPT)</li>
<li>Supports all Langchain models</li>
<li>Configurable model selection based on needs</li>
</ul>
</li>
<li>
<p dir="auto">📊 <strong>Rich Output Options</strong></p>
<ul dir="auto">
<li>Detailed research findings with citations</li>
<li>Comprehensive research reports</li>
<li>Quick summaries for rapid insights</li>
<li>Source tracking and verification</li>
</ul>
</li>
<li>
<p dir="auto">🔒 <strong>Privacy-Focused</strong></p>
<ul dir="auto">
<li>Runs entirely on your machine when using local models</li>
<li>Configurable search settings</li>
<li>Transparent data handling</li>
</ul>
</li>
<li>
<p dir="auto">🌐 <strong>Enhanced Search Integration</strong></p>
<ul dir="auto">
<li><strong>Auto-selection of search sources</strong>: The "auto" search engine intelligently analyzes your query and selects the most appropriate search engine based on the query content</li>
<li>Wikipedia integration for factual knowledge</li>
<li>arXiv integration for scientific papers and academic research</li>
<li>DuckDuckGo integration for web searches (may experience rate limiting)</li>
<li>SerpAPI integration for Google search results (requires API key)</li>
<li>The Guardian integration for news articles and journalism (requires API key)</li>
<li><strong>Local RAG search for private documents</strong> - search your own documents with vector embeddings</li>
<li>Full webpage content retrieval</li>
<li>Source filtering and validation</li>
<li>Configurable search parameters</li>
</ul>
</li>
<li>
<p dir="auto">📑 <strong>Local Document Search (RAG)</strong></p>
<ul dir="auto">
<li>Vector embedding-based search of your local documents</li>
<li>Create custom document collections for different topics</li>
<li>Privacy-preserving - your documents stay on your machine</li>
<li>Intelligent chunking and retrieval</li>
<li>Compatible with various document formats (PDF, text, markdown, etc.)</li>
<li>Automatic integration with meta-search for unified queries</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example Research: Fusion Energy Developments</h2><a id="user-content-example-research-fusion-energy-developments" aria-label="Permalink: Example Research: Fusion Energy Developments" href="#example-research-fusion-energy-developments"></a></p>
<p dir="auto">The repository includes complete research examples demonstrating the tool's capabilities. For instance, our <a href="https://github.com/LearningCircuit/local-deep-research/blob/main/examples/fusion-energy-research-developments.md">fusion energy research analysis</a> provides a comprehensive overview of:</p>
<ul dir="auto">
<li>Latest scientific breakthroughs in fusion research (2022-2025)</li>
<li>Private sector funding developments exceeding $6 billion</li>
<li>Expert projections for commercial fusion energy timelines</li>
<li>Regulatory frameworks being developed for fusion deployment</li>
<li>Technical challenges that must be overcome for commercial viability</li>
</ul>
<p dir="auto">This example showcases the system's ability to perform multiple research iterations, follow evidence trails across scientific and commercial domains, and synthesize information from diverse sources while maintaining proper citation.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<ol dir="auto">
<li>Clone the repository:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="git clone https://github.com/yourusername/local-deep-research.git
cd local-deep-research"><pre>git clone https://github.com/yourusername/local-deep-research.git
<span>cd</span> local-deep-research</pre></div>
<ol start="2" dir="auto">
<li>Install dependencies:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="pip install -r requirements.txt"><pre>pip install -r requirements.txt</pre></div>
<ol start="3" dir="auto">
<li>Install Ollama (for local models):</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="# Install Ollama from https://ollama.ai
ollama pull mistral  # Default model - many work really well choose best for your hardware (fits in GPU)"><pre><span><span>#</span> Install Ollama from https://ollama.ai</span>
ollama pull mistral  <span><span>#</span> Default model - many work really well choose best for your hardware (fits in GPU)</span></pre></div>
<ol start="4" dir="auto">
<li>Configure environment variables:</li>
</ol>
<div dir="auto" data-snippet-clipboard-copy-content="# Copy the template
cp .env.template .env

# Edit .env with your API keys (if using cloud LLMs)
ANTHROPIC_API_KEY=your-api-key-here  # For Claude
OPENAI_API_KEY=your-openai-key-here  # For GPT models
GUARDIAN_API_KEY=your-guardian-api-key-here  # For The Guardian search"><pre><span><span>#</span> Copy the template</span>
cp .env.template .env

<span><span>#</span> Edit .env with your API keys (if using cloud LLMs)</span>
ANTHROPIC_API_KEY=your-api-key-here  <span><span>#</span> For Claude</span>
OPENAI_API_KEY=your-openai-key-here  <span><span>#</span> For GPT models</span>
GUARDIAN_API_KEY=your-guardian-api-key-here  <span><span>#</span> For The Guardian search</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Usage</h2><a id="user-content-usage" aria-label="Permalink: Usage" href="#usage"></a></p>
<p dir="auto">Terminal usage (not recommended):</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Web Interface</h3><a id="user-content-web-interface" aria-label="Permalink: Web Interface" href="#web-interface"></a></p>
<p dir="auto">The project includes a web interface for a more user-friendly experience:</p>

<p dir="auto">This will start a local web server, accessible at <code>http://127.0.0.1:5000</code> in your browser.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Web Interface Features:</h4><a id="user-content-web-interface-features" aria-label="Permalink: Web Interface Features:" href="#web-interface-features"></a></p>
<ul dir="auto">
<li><strong>Dashboard</strong>: Intuitive interface for starting and managing research queries</li>
<li><strong>Real-time Updates</strong>: Track research progress with live updates</li>
<li><strong>Research History</strong>: Access and manage past research queries</li>
<li><strong>PDF Export</strong>: Download completed research reports as PDF documents</li>
<li><strong>Research Management</strong>: Terminate ongoing research processes or delete past records</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Configuration</h3><a id="user-content-configuration" aria-label="Permalink: Configuration" href="#configuration"></a></p>
<p dir="auto">Key settings in <code>config.py</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# LLM Configuration
DEFAULT_MODEL = &quot;mistral&quot;  # Change based on your needs
DEFAULT_TEMPERATURE = 0.7
MAX_TOKENS = 8000

# Search Configuration
MAX_SEARCH_RESULTS = 40
SEARCH_REGION = &quot;us-en&quot;
TIME_PERIOD = &quot;y&quot;
SAFE_SEARCH = True
SEARCH_SNIPPETS_ONLY = False

# Choose search tool: &quot;wiki&quot;, &quot;arxiv&quot;, &quot;duckduckgo&quot;, &quot;guardian&quot;, &quot;serp&quot;, &quot;local_all&quot;, or &quot;auto&quot;
search_tool = &quot;auto&quot;  # &quot;auto&quot; will intelligently select the best search engine for your query"><pre><span># LLM Configuration</span>
<span>DEFAULT_MODEL</span> <span>=</span> <span>"mistral"</span>  <span># Change based on your needs</span>
<span>DEFAULT_TEMPERATURE</span> <span>=</span> <span>0.7</span>
<span>MAX_TOKENS</span> <span>=</span> <span>8000</span>

<span># Search Configuration</span>
<span>MAX_SEARCH_RESULTS</span> <span>=</span> <span>40</span>
<span>SEARCH_REGION</span> <span>=</span> <span>"us-en"</span>
<span>TIME_PERIOD</span> <span>=</span> <span>"y"</span>
<span>SAFE_SEARCH</span> <span>=</span> <span>True</span>
<span>SEARCH_SNIPPETS_ONLY</span> <span>=</span> <span>False</span>

<span># Choose search tool: "wiki", "arxiv", "duckduckgo", "guardian", "serp", "local_all", or "auto"</span>
<span>search_tool</span> <span>=</span> <span>"auto"</span>  <span># "auto" will intelligently select the best search engine for your query</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Local Document Search (RAG)</h2><a id="user-content-local-document-search-rag" aria-label="Permalink: Local Document Search (RAG)" href="#local-document-search-rag"></a></p>
<p dir="auto">The system includes powerful local document search capabilities using Retrieval-Augmented Generation (RAG). This allows you to search and retrieve content from your own document collections.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Setting Up Local Collections</h3><a id="user-content-setting-up-local-collections" aria-label="Permalink: Setting Up Local Collections" href="#setting-up-local-collections"></a></p>
<p dir="auto">Create a file named <code>local_collections.py</code> in the project root directory:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# local_collections.py
import os
from typing import Dict, Any

# Registry of local document collections
LOCAL_COLLECTIONS = {
    # Research Papers Collection
    &quot;research_papers&quot;: {
        &quot;name&quot;: &quot;Research Papers&quot;,
        &quot;description&quot;: &quot;Academic research papers and articles&quot;,
        &quot;paths&quot;: [os.path.abspath(&quot;local_search_files/research_papers&quot;)],  # Use absolute paths
        &quot;enabled&quot;: True,
        &quot;embedding_model&quot;: &quot;all-MiniLM-L6-v2&quot;,
        &quot;embedding_device&quot;: &quot;cpu&quot;,
        &quot;embedding_model_type&quot;: &quot;sentence_transformers&quot;,
        &quot;max_results&quot;: 20,
        &quot;max_filtered_results&quot;: 5,
        &quot;chunk_size&quot;: 800,  # Smaller chunks for academic content
        &quot;chunk_overlap&quot;: 150,
        &quot;cache_dir&quot;: &quot;.cache/local_search/research_papers&quot;
    },
    
    # Personal Notes Collection
    &quot;personal_notes&quot;: {
        &quot;name&quot;: &quot;Personal Notes&quot;,
        &quot;description&quot;: &quot;Personal notes and documents&quot;,
        &quot;paths&quot;: [os.path.abspath(&quot;local_search_files/personal_notes&quot;)],  # Use absolute paths
        &quot;enabled&quot;: True,
        &quot;embedding_model&quot;: &quot;all-MiniLM-L6-v2&quot;,
        &quot;embedding_device&quot;: &quot;cpu&quot;,
        &quot;embedding_model_type&quot;: &quot;sentence_transformers&quot;,
        &quot;max_results&quot;: 30,
        &quot;max_filtered_results&quot;: 10,
        &quot;chunk_size&quot;: 500,  # Smaller chunks for notes
        &quot;chunk_overlap&quot;: 100,
        &quot;cache_dir&quot;: &quot;.cache/local_search/personal_notes&quot;
    }
}

Create the directories for your collections:
```bash
mkdir -p local_search_files/research_papers
mkdir -p local_search_files/personal_notes"><pre><span># local_collections.py</span>
<span>import</span> <span>os</span>
<span>from</span> <span>typing</span> <span>import</span> <span>Dict</span>, <span>Any</span>

<span># Registry of local document collections</span>
<span>LOCAL_COLLECTIONS</span> <span>=</span> {
    <span># Research Papers Collection</span>
    <span>"research_papers"</span>: {
        <span>"name"</span>: <span>"Research Papers"</span>,
        <span>"description"</span>: <span>"Academic research papers and articles"</span>,
        <span>"paths"</span>: [<span>os</span>.<span>path</span>.<span>abspath</span>(<span>"local_search_files/research_papers"</span>)],  <span># Use absolute paths</span>
        <span>"enabled"</span>: <span>True</span>,
        <span>"embedding_model"</span>: <span>"all-MiniLM-L6-v2"</span>,
        <span>"embedding_device"</span>: <span>"cpu"</span>,
        <span>"embedding_model_type"</span>: <span>"sentence_transformers"</span>,
        <span>"max_results"</span>: <span>20</span>,
        <span>"max_filtered_results"</span>: <span>5</span>,
        <span>"chunk_size"</span>: <span>800</span>,  <span># Smaller chunks for academic content</span>
        <span>"chunk_overlap"</span>: <span>150</span>,
        <span>"cache_dir"</span>: <span>".cache/local_search/research_papers"</span>
    },
    
    <span># Personal Notes Collection</span>
    <span>"personal_notes"</span>: {
        <span>"name"</span>: <span>"Personal Notes"</span>,
        <span>"description"</span>: <span>"Personal notes and documents"</span>,
        <span>"paths"</span>: [<span>os</span>.<span>path</span>.<span>abspath</span>(<span>"local_search_files/personal_notes"</span>)],  <span># Use absolute paths</span>
        <span>"enabled"</span>: <span>True</span>,
        <span>"embedding_model"</span>: <span>"all-MiniLM-L6-v2"</span>,
        <span>"embedding_device"</span>: <span>"cpu"</span>,
        <span>"embedding_model_type"</span>: <span>"sentence_transformers"</span>,
        <span>"max_results"</span>: <span>30</span>,
        <span>"max_filtered_results"</span>: <span>10</span>,
        <span>"chunk_size"</span>: <span>500</span>,  <span># Smaller chunks for notes</span>
        <span>"chunk_overlap"</span>: <span>100</span>,
        <span>"cache_dir"</span>: <span>".cache/local_search/personal_notes"</span>
    }
}

<span>Create</span> <span>the</span> <span>directories</span> <span>for</span> <span>your</span> <span>collections</span>:
<span>``</span>`<span>bash</span>
<span>mkdir</span> <span>-</span><span>p</span> <span>local_search_files</span><span>/</span><span>research_papers</span>
<span>mkdir</span> <span>-</span><span>p</span> <span>local_search_files</span><span>/</span><span>personal_notes</span></pre></div>
<p dir="auto">Add your documents to these folders, and the system will automatically index them and make them available for searching.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Using Local Search</h3><a id="user-content-using-local-search" aria-label="Permalink: Using Local Search" href="#using-local-search"></a></p>
<p dir="auto">You can use local search in several ways:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Auto-selection</strong>: Set <code>search_tool = "auto"</code> in <code>config.py</code> and the system will automatically use your local collections when appropriate for the query.</p>
</li>
<li>
<p dir="auto"><strong>Explicit Selection</strong>: Set <code>search_tool = "research_papers"</code> to search only that specific collection.</p>
</li>
<li>
<p dir="auto"><strong>Search All Local Collections</strong>: Set <code>search_tool = "local_all"</code> to search across all your local document collections.</p>
</li>
<li>
<p dir="auto"><strong>Query Syntax</strong>: Use <code>collection:collection_name your query</code> to target a specific collection within a query.</p>
</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Search Engine Options</h3><a id="user-content-search-engine-options" aria-label="Permalink: Search Engine Options" href="#search-engine-options"></a></p>
<p dir="auto">The system supports multiple search engines that can be selected by changing the <code>search_tool</code> variable in <code>config.py</code>:</p>
<ul dir="auto">
<li><strong>Auto</strong> (<code>auto</code>): Intelligent search engine selector that analyzes your query and chooses the most appropriate source (Wikipedia, arXiv, local collections, etc.)</li>
<li><strong>Wikipedia</strong> (<code>wiki</code>): Best for general knowledge, facts, and overview information</li>
<li><strong>arXiv</strong> (<code>arxiv</code>): Great for scientific and academic research, accessing preprints and papers</li>
<li><strong>DuckDuckGo</strong> (<code>duckduckgo</code>): General web search that doesn't require an API key</li>
<li><strong>The Guardian</strong> (<code>guardian</code>): Quality journalism and news articles (requires an API key)</li>
<li><strong>SerpAPI</strong> (<code>serp</code>): Google search results (requires an API key)</li>
<li><strong>Local Collections</strong>: Any collections defined in your <code>local_collections.py</code> file</li>
</ul>
<blockquote>
<p dir="auto"><strong>Note:</strong> The "auto" option will intelligently select the best search engine based on your query. For example, if you ask about physics research papers, it might select arXiv or your research_papers collection, while if you ask about current events, it might select The Guardian or DuckDuckGo.</p>
</blockquote>
<blockquote>
<p dir="auto"><strong>Support Free Knowledge:</strong> If you frequently use the search engines in this tool, please consider making a donation to these organizations. They provide valuable services and rely on user support to maintain their operations:</p>
<ul dir="auto">
<li><a href="https://donate.wikimedia.org/" rel="nofollow">Donate to Wikipedia</a></li>
<li><a href="https://support.theguardian.com/" rel="nofollow">Support The Guardian</a></li>
<li><a href="https://arxiv.org/about/give" rel="nofollow">Support arXiv</a></li>
<li><a href="https://duckduckgo.com/donations" rel="nofollow">Donate to DuckDuckGo</a></li>
</ul>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">This project is licensed under the MIT License - see the <a href="https://github.com/LearningCircuit/local-deep-research/blob/main/LICENSE">LICENSE</a> file for details.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgments</h2><a id="user-content-acknowledgments" aria-label="Permalink: Acknowledgments" href="#acknowledgments"></a></p>
<ul dir="auto">
<li>Built with <a href="https://ollama.ai/" rel="nofollow">Ollama</a> for local AI processing</li>
<li>Search powered by multiple sources:
<ul dir="auto">
<li><a href="https://www.wikipedia.org/" rel="nofollow">Wikipedia</a> for factual knowledge (default search engine)</li>
<li><a href="https://arxiv.org/" rel="nofollow">arXiv</a> for scientific papers</li>
<li><a href="https://duckduckgo.com/" rel="nofollow">DuckDuckGo</a> for web search</li>
<li><a href="https://www.theguardian.com/" rel="nofollow">The Guardian</a> for quality journalism</li>
<li><a href="https://serpapi.com/" rel="nofollow">SerpAPI</a> for Google search results (requires API key)</li>
</ul>
</li>
<li>Built on <a href="https://github.com/hwchase17/langchain">LangChain</a> framework</li>
<li>Uses <a href="https://github.com/miso-belica/justext">justext</a> for content extraction</li>
<li><a href="https://playwright.dev/" rel="nofollow">Playwright</a> for web content retrieval</li>
<li>Uses <a href="https://github.com/facebookresearch/faiss">FAISS</a> for vector similarity search</li>
<li>Uses <a href="https://github.com/UKPLab/sentence-transformers">sentence-transformers</a> for embeddings</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">Contributions are welcome! Please feel free to submit a Pull Request.</p>
<ol dir="auto">
<li>Fork the repository</li>
<li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)</li>
<li>Commit your changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li>
<li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)</li>
<li>Open a Pull Request</li>
</ol>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Extreme poverty in India has dropped to negligible levels (203 pts)]]></title>
            <link>https://www.economist.com/finance-and-economics/2025/02/27/india-has-undermined-a-popular-myth-about-development</link>
            <guid>43329373</guid>
            <pubDate>Tue, 11 Mar 2025 05:19:50 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.economist.com/finance-and-economics/2025/02/27/india-has-undermined-a-popular-myth-about-development">https://www.economist.com/finance-and-economics/2025/02/27/india-has-undermined-a-popular-myth-about-development</a>, See on <a href="https://news.ycombinator.com/item?id=43329373">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><p><time datetime="2025-02-27T10:55:44.365Z"> <!-- -->Feb 27th 2025</time></p></div><section><p data-component="paragraph"><span data-caps="initial">T</span><small>hirty years</small> ago Siddharth Dube, a writer, visited a small village in northern India near the site of a historic peasants’ revolt. He found plenty that remained enraging: mud huts, primitive ploughs, “barefoot old men” and “bone-thin children”. One older villager, Ram Dass, recalled the bitter deprivation of his younger years, when he would work long days on someone else’s land for the meagre reward of 1.5kg of grain. On cold nights, the poor stuffed rice stalks into old clothes to keep warm. “What did we know what a quilt was?” A man was lucky to own a single pair of shoes from his wedding to his death.</p></section><p><h3 id="article-tags">Explore more</h3><nav aria-labelledby="article-tags"><a href="https://www.economist.com/topics/finance-and-economics" data-analytics="tags:finance_and_economics"><span>Finance &amp; economics</span></a><a href="https://www.economist.com/topics/india" data-analytics="tags:india"><span>India</span></a><a href="https://www.economist.com/topics/free-exchange" data-analytics="tags:free_exchange"><span>Free exchange</span></a></nav></p><p>This article appeared in the Finance &amp; economics section of the print edition under the headline “Ploughing its own furrow”</p><div data-test-id="chapterlist" data-tracking-id="content-well-chapter-list"><div><hr data-testid="rule-accent"><div><h3><a href="https://www.economist.com/finance-and-economics" text="Finance &amp; economics" data-analytics="chapter_list_header:Finance &amp; economics">Finance &amp; economics</a></h3><p><span>March 1st 2025</span></p></div></div><ul><li><a href="https://www.economist.com/finance-and-economics/2025/02/27/how-to-get-rich-in-2025" id="af6e9436-e49c-4f00-b3e0-4d09de6d0c34" data-analytics="article:reports_headline:1" data-test-id="chapterlist-link-0"><span data-testid="right-london-5-false"><span>→</span></span><span>How to get rich in 2025</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/02/26/how-cheap-can-investing-get" id="f55d294c-c8e0-4e2b-b761-b0b305a066e8" data-analytics="article:reports_headline:2" data-test-id="chapterlist-link-1"><span data-testid="right-london-5-false"><span>→</span></span><span>How cheap can investing get?</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/02/25/meet-trumps-fiercest-opponent-the-bond-market" id="f7da5cb4-163c-4431-86e0-3cb5f05f6ea3" data-analytics="article:reports_headline:3" data-test-id="chapterlist-link-2"><span data-testid="right-london-5-false"><span>→</span></span><span>Meet Trump’s fiercest opponent: the bond market</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/02/23/stablecoins-the-real-crypto-craze" id="f2769e6d-e6ca-4e9a-a41a-2bb304760c43" data-analytics="article:reports_headline:4" data-test-id="chapterlist-link-3"><span data-testid="right-london-5-false"><span>→</span></span><span>Stablecoins: the real crypto craze</span></a></li><li><a href="https://www.economist.com/finance-and-economics/2025/02/27/how-india-escaped-extreme-poverty-without-an-industrial-miracle" id="08ffc6ce-954f-495f-a313-70400d15f5cf" data-analytics="article:reports_headline:5" data-test-id="chapterlist-link-4"><span data-testid="right-economist-red-false"><span>→</span></span><span>India has undermined a popular myth about development</span></a></li></ul></div><div orientation="vertical" data-test-id="vertical"><div orientation="vertical"><figure><img loading="lazy" width="1280" height="1709" decoding="async" data-nimg="1" sizes="300px" srcset="https://www.economist.com/cdn-cgi/image/width=16,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 16w, https://www.economist.com/cdn-cgi/image/width=32,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 32w, https://www.economist.com/cdn-cgi/image/width=48,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 48w, https://www.economist.com/cdn-cgi/image/width=64,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 64w, https://www.economist.com/cdn-cgi/image/width=96,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 96w, https://www.economist.com/cdn-cgi/image/width=128,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 128w, https://www.economist.com/cdn-cgi/image/width=256,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 256w, https://www.economist.com/cdn-cgi/image/width=360,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 360w, https://www.economist.com/cdn-cgi/image/width=384,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 384w, https://www.economist.com/cdn-cgi/image/width=480,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 480w, https://www.economist.com/cdn-cgi/image/width=600,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 600w, https://www.economist.com/cdn-cgi/image/width=834,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 834w, https://www.economist.com/cdn-cgi/image/width=960,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 960w, https://www.economist.com/cdn-cgi/image/width=1096,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 1096w, https://www.economist.com/cdn-cgi/image/width=1280,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 1280w, https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg 1424w" src="https://www.economist.com/cdn-cgi/image/width=1424,quality=80,format=auto/content-assets/images/20250301_DE_EU.jpg"></figure></div><div orientation="vertical"><h3 orientation="vertical">From the March 1st 2025 edition</h3><p orientation="vertical">Discover stories from this section and more in the list of contents</p><p><a href="https://www.economist.com/weeklyedition/2025-03-01" data-analytics="sidebar:weekly_edition"><span data-testid="right-economist-red-true"><span>⇒</span></span><span>Explore the edition</span></a></p></div></div><div><a href="https://s100.copyright.com/AppDispatchServlet?publisherName=economist&amp;publication=economist&amp;title=India%20has%20undermined%20a%20popular%20myth%20about%20development&amp;publicationDate=2025-02-27&amp;contentID=%2Fcontent%2Fdog6q0eljr7pojcnsco7q83f8g4if4q6&amp;type=A&amp;orderBeanReset=TRUE" target="_blank" rel="noreferrer" data-analytics="end_of_article:reuse_this_content"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" data-testid="renew-outline"><path fill="var(--mb-colour-base-chicago-45)" d="M5.1 16.05a8.25 8.25 0 0 1-.825-1.95A7.696 7.696 0 0 1 4 12.05c0-2.233.775-4.133 2.325-5.7C7.875 4.783 9.767 4 12 4h.175l-1.6-1.6 1.4-1.4 4 4-4 4-1.4-1.4 1.6-1.6H12c-1.667 0-3.083.588-4.25 1.763C6.583 8.938 6 10.367 6 12.05c0 .433.05.858.15 1.275.1.417.25.825.45 1.225l-1.5 1.5ZM12.025 23l-4-4 4-4 1.4 1.4-1.6 1.6H12c1.667 0 3.083-.587 4.25-1.762C17.417 15.063 18 13.633 18 11.95c0-.433-.05-.858-.15-1.275-.1-.417-.25-.825-.45-1.225l1.5-1.5c.367.633.642 1.283.825 1.95.183.667.275 1.35.275 2.05 0 2.233-.775 4.133-2.325 5.7C16.125 19.217 14.233 20 12 20h-.175l1.6 1.6-1.4 1.4Z"></path></svg><span>Reuse this content</span></a></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Seven39 – a social media app that is only open for 3 hours every evening (610 pts)]]></title>
            <link>https://www.seven39.com</link>
            <guid>43328095</guid>
            <pubDate>Tue, 11 Mar 2025 01:05:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.seven39.com">https://www.seven39.com</a>, See on <a href="https://news.ycombinator.com/item?id=43328095">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>Social media that's only open from 7:39pm to 10:39pm EST.</p></div><div><h2>Why seven39?</h2><p>Because social media is better when we're all online together.</p><p>No endless scrolling. No FOMO. Just 3 hours of fun every evening.</p><h2>Why 7:39?</h2><p>The domain was available.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Shef (124 pts)]]></title>
            <link>https://github.com/eduardoagarcia/shef</link>
            <guid>43327758</guid>
            <pubDate>Tue, 11 Mar 2025 00:16:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/eduardoagarcia/shef">https://github.com/eduardoagarcia/shef</a>, See on <a href="https://news.ycombinator.com/item?id=43327758">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Shef</h2><a id="user-content-shef" aria-label="Permalink: Shef" href="#shef"></a></p>
<p dir="auto">Shef, a wordplay on <em>"shell"</em> and <em>"chef"</em>, is a powerful CLI tool for cooking up advanced shell recipes.</p>
<p dir="auto">Inspired by <a href="https://gchq.github.io/CyberChef" rel="nofollow">CyberChef</a>, Shef allows you to pipe commands together, add interactive
user prompts, loop using complex control structures, and build reusable workflows with advanced conditional logic.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick Start Example</h2><a id="user-content-quick-start-example" aria-label="Permalink: Quick Start Example" href="#quick-start-example"></a></p>
<p dir="auto">The following example showcases a simple Shef recipe, giving you a quick glance at the syntax and functionality.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/eduardoagarcia/shef/blob/main/images/conditional.gif"><img src="https://github.com/eduardoagarcia/shef/raw/main/images/conditional.gif" alt="Quick Start Conditional Example" data-animated-image=""></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="recipes:
  - name: &quot;conditional&quot;
    description: &quot;A simple demo of conditional operations using direct prompt values&quot;
    category: &quot;demo&quot;
    operations:
      - name: &quot;Choose Fruit&quot;
        id: &quot;choose&quot;
        command: 'echo &quot;You selected: {{ .fruit }}&quot;'
        prompts:
          - name: &quot;fruit&quot;
            type: &quot;select&quot;
            message: &quot;Choose a fruit:&quot;
            options:
              - &quot;Apples&quot;
              - &quot;Oranges&quot;

      - name: &quot;Apple Operation&quot;
        id: &quot;apple&quot;
        command: echo {{ style &quot;bold&quot; (color &quot;red&quot; &quot;This is the apple operation!&quot;) }}
        condition: &quot;.fruit == 'Apples'&quot;

      - name: &quot;Orange Operation&quot;
        id: &quot;orange&quot;
        command: echo {{ style &quot;bold&quot; (color &quot;yellow&quot; &quot;This is the orange operation!&quot;) }}
        condition: &quot;.fruit == 'Oranges'&quot;"><pre><span>recipes</span>:
  - <span>name</span>: <span><span>"</span>conditional<span>"</span></span>
    <span>description</span>: <span><span>"</span>A simple demo of conditional operations using direct prompt values<span>"</span></span>
    <span>category</span>: <span><span>"</span>demo<span>"</span></span>
    <span>operations</span>:
      - <span>name</span>: <span><span>"</span>Choose Fruit<span>"</span></span>
        <span>id</span>: <span><span>"</span>choose<span>"</span></span>
        <span>command</span>: <span><span>'</span>echo "You selected: {{ .fruit }}"<span>'</span></span>
        <span>prompts</span>:
          - <span>name</span>: <span><span>"</span>fruit<span>"</span></span>
            <span>type</span>: <span><span>"</span>select<span>"</span></span>
            <span>message</span>: <span><span>"</span>Choose a fruit:<span>"</span></span>
            <span>options</span>:
              - <span><span>"</span>Apples<span>"</span></span>
              - <span><span>"</span>Oranges<span>"</span></span>

      - <span>name</span>: <span><span>"</span>Apple Operation<span>"</span></span>
        <span>id</span>: <span><span>"</span>apple<span>"</span></span>
        <span>command</span>: <span>echo {{ style "bold" (color "red" "This is the apple operation!") }}</span>
        <span>condition</span>: <span><span>"</span>.fruit == 'Apples'<span>"</span></span>

      - <span>name</span>: <span><span>"</span>Orange Operation<span>"</span></span>
        <span>id</span>: <span><span>"</span>orange<span>"</span></span>
        <span>command</span>: <span>echo {{ style "bold" (color "yellow" "This is the orange operation!") }}</span>
        <span>condition</span>: <span><span>"</span>.fruit == 'Oranges'<span>"</span></span></pre></div>
<p dir="auto">Now that you've gotten acquainted with the basics, let's explore Shef's capabilities in depth!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Table of Contents</h2><a id="user-content-table-of-contents" aria-label="Permalink: Table of Contents" href="#table-of-contents"></a></p>
<ul dir="auto">
<li><a href="#shef-features">Shef Features</a></li>
<li><a href="#bash-scripts-and-shef-complementary-tools">Bash Scripts and Shef: Complementary Tools</a></li>
<li><a href="#ugh-yaml-really">Ugh. YAML? Really?</a></li>
<li><a href="#installation">Installation</a></li>
<li><a href="#quick-start">Quick Start</a></li>
<li><a href="#shef-command-reference">Shef Command Reference</a></li>
<li><a href="#recipe-sources">Recipe Sources</a></li>
<li><a href="#recipe-structure">Recipe Structure</a></li>
<li><a href="#interactive-user-prompts">Interactive Prompts</a></li>
<li><a href="#transformations">Transformations</a></li>
<li><a href="#conditional-execution">Conditional Execution</a></li>
<li><a href="#branching-workflows">Branching Workflows</a></li>
<li><a href="#data-flow-between-operations">Data Flow Between Operations</a></li>
<li><a href="#control-flow-structures">Control Flow Structures</a></li>
<li><a href="#example-recipes">Example Recipes</a></li>
<li><a href="#creating-recipes">Creating Recipes</a></li>
<li><a href="#ai-assisted-recipe-creation">AI-Assisted Recipe Creation</a></li>
<li><a href="#troubleshooting">Troubleshooting</a></li>
<li><a href="#contributing-to-shef">Contributing to Shef</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Shef Features</h2><a id="user-content-shef-features" aria-label="Permalink: Shef Features" href="#shef-features"></a></p>
<ul dir="auto">
<li><strong>Command Piping</strong>: Chain multiple commands together, passing output from one command to the next</li>
<li><strong>Transformations</strong>: Transform command output with powerful templating</li>
<li><strong>Interactive Prompts</strong>: Add user input, selections, confirmations, and more</li>
<li><strong>Conditional Logic</strong>: Use if/else branching based on command results</li>
<li><strong>Control Flow</strong>: Create dynamic workflows with loops and control structures</li>
<li><strong>Multiple Sources</strong>: Use local, user, or public recipes</li>
<li><strong>Organized Recipes</strong>: Categorize and share your recipes with others</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Bash Scripts and Shef: Complementary Tools</h2><a id="user-content-bash-scripts-and-shef-complementary-tools" aria-label="Permalink: Bash Scripts and Shef: Complementary Tools" href="#bash-scripts-and-shef-complementary-tools"></a></p>
<p dir="auto">Bash scripting is a powerful and valid approach for shell automation. Shef isn't designed to replace bash scripts, but
rather provides a toolkit that compliments bash when you need specific features.</p>
<p dir="auto">Shef implements some common tooling like built-in support for interactive prompts, conditional logic, and command
piping. This structured approach can simplify certain tasks that might require more verbose code in bash.</p>
<p dir="auto">Consider Shef as another tool in your automation toolkit. Absolutely use bash scripts when they're the right fit, and
reach for Shef when its features align with your specific needs.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Ugh. YAML? Really?</h2><a id="user-content-ugh-yaml-really" aria-label="Permalink: Ugh. YAML? Really?" href="#ugh-yaml-really"></a></p>
<p dir="auto">Sigh. Yep. Another config format. I considered several options, and YAML emerged as the most practical choice for
this particular use case. JSON lacks comments and multiline string support, which are essential when defining shell
commands and documenting workflows. XML would have been unnecessarily verbose. TOML, while nice, doesn't handle nested
structures as elegantly for complex workflows.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Installation</h2><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<div dir="auto"><p dir="auto">Note</p><p dir="auto">In the future, I would like to support these installation methods:</p>
<ul dir="auto">
<li>Brew install</li>
<li>APT install</li>
<li>YUM/DNF install</li>
<li>Arch User Repository (AUR)</li>
<li>Standalone binary downloads</li>
<li>Windows package managers (Chocolatey/Scoop)</li>
</ul>
</div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Prerequisites</h3><a id="user-content-prerequisites" aria-label="Permalink: Prerequisites" href="#prerequisites"></a></p>
<p dir="auto">Before installing Shef, ensure you have Go installed and configured on your system:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Install Go</strong>: If you don't have Go installed, download and install it from <a href="https://golang.org/dl/" rel="nofollow">golang.org</a> or
use your system's package manager:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# macOS (using Homebrew)
brew install go

# Ubuntu/Debian
sudo apt update
sudo apt install golang-go

# Fedora
sudo dnf install golang"><pre><span><span>#</span> macOS (using Homebrew)</span>
brew install go

<span><span>#</span> Ubuntu/Debian</span>
sudo apt update
sudo apt install golang-go

<span><span>#</span> Fedora</span>
sudo dnf install golang</pre></div>
</li>
<li>
<p dir="auto"><strong>Configure Go Environment</strong>: Ensure your Go environment is properly set up:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Add these to your shell configuration (.bashrc, .zshrc, etc.)
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin"><pre><span><span>#</span> Add these to your shell configuration (.bashrc, .zshrc, etc.)</span>
<span>export</span> GOPATH=<span>$HOME</span>/go
<span>export</span> PATH=<span>$PATH</span>:<span>$GOPATH</span>/bin</pre></div>
</li>
<li>
<p dir="auto"><strong>Verify Installation</strong>: Confirm Go is correctly installed:</p>

</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Quick Installation</h3><a id="user-content-quick-installation" aria-label="Permalink: Quick Installation" href="#quick-installation"></a></p>
<p dir="auto">The simplest way to install Shef is with Make:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Clone the repository
git clone git@github.com:eduardoagarcia/shef.git
cd shef

# Install (requires sudo for system-wide installation)
make install

# Or install to your home directory (no sudo required)
make install-local"><pre><span><span>#</span> Clone the repository</span>
git clone git@github.com:eduardoagarcia/shef.git
<span>cd</span> shef

<span><span>#</span> Install (requires sudo for system-wide installation)</span>
make install

<span><span>#</span> Or install to your home directory (no sudo required)</span>
make install-local</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Manual Installation Options</h3><a id="user-content-manual-installation-options" aria-label="Permalink: Manual Installation Options" href="#manual-installation-options"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Install with Go</h4><a id="user-content-install-with-go" aria-label="Permalink: Install with Go" href="#install-with-go"></a></p>
<p dir="auto">Once you have Go installed, you can install Shef directly:</p>
<div dir="auto" data-snippet-clipboard-copy-content="go install github.com/eduardoagarcia/shef@latest"><pre>go install github.com/eduardoagarcia/shef@latest</pre></div>
<p dir="auto">This will install the <code>shef</code> binary to your <code>$GOPATH/bin</code> directory.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Build from Source</h4><a id="user-content-build-from-source" aria-label="Permalink: Build from Source" href="#build-from-source"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Clone the repository
git clone git@github.com:eduardoagarcia/shef.git

# Build the application
cd shef
go build -o shef

# Move to a directory in your PATH
sudo mv shef /usr/local/bin/"><pre><span><span>#</span> Clone the repository</span>
git clone git@github.com:eduardoagarcia/shef.git

<span><span>#</span> Build the application</span>
<span>cd</span> shef
go build -o shef

<span><span>#</span> Move to a directory in your PATH</span>
sudo mv shef /usr/local/bin/</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Adding to PATH</h3><a id="user-content-adding-to-path" aria-label="Permalink: Adding to PATH" href="#adding-to-path"></a></p>
<p dir="auto">If the installation directory is not in your PATH, you'll need to add it:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Add this to your .bashrc, .bash_profile, or .zshrc
export PATH=&quot;$PATH:$GOPATH/bin&quot;  # For go install
# OR
export PATH=&quot;$PATH:$HOME/bin&quot;    # For make install-local"><pre><span><span>#</span> Add this to your .bashrc, .bash_profile, or .zshrc</span>
<span>export</span> PATH=<span><span>"</span><span>$PATH</span>:<span>$GOPATH</span>/bin<span>"</span></span>  <span><span>#</span> For go install</span>
<span><span>#</span> OR</span>
<span>export</span> PATH=<span><span>"</span><span>$PATH</span>:<span>$HOME</span>/bin<span>"</span></span>    <span><span>#</span> For make install-local</span></pre></div>
<p dir="auto">Then reload your shell configuration: <code>source ~/.bashrc</code> (or <code>~/.zshrc</code>, <code>~/.bash_profile</code> depending on your shell)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Updating Shef</h3><a id="user-content-updating-shef" aria-label="Permalink: Updating Shef" href="#updating-shef"></a></p>
<p dir="auto">To update Shef to the latest version:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Navigate to your local repository
cd shef

# Pull the latest changes
git pull

# Update system-wide installation (requires sudo)
make update

# Or update local installation (no sudo required)
make update-local"><pre><span><span>#</span> Navigate to your local repository</span>
<span>cd</span> shef

<span><span>#</span> Pull the latest changes</span>
git pull

<span><span>#</span> Update system-wide installation (requires sudo)</span>
make update

<span><span>#</span> Or update local installation (no sudo required)</span>
make update-local</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick Start</h2><a id="user-content-quick-start" aria-label="Permalink: Quick Start" href="#quick-start"></a></p>
<p dir="auto">Once Shef is installed, you are ready to begin using it.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Sync all public recipes locally
shef sync

# Run the Hello World recipe
shef demo hello-world

# List available recipes
shef ls

# List all recipes within a category
shef ls demo"><pre><span><span>#</span> Sync all public recipes locally</span>
shef sync

<span><span>#</span> Run the Hello World recipe</span>
shef demo hello-world

<span><span>#</span> List available recipes</span>
shef ls

<span><span>#</span> List all recipes within a category</span>
shef ls demo</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Shef Command Reference</h2><a id="user-content-shef-command-reference" aria-label="Permalink: Shef Command Reference" href="#shef-command-reference"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Basic Shef Command Structure</h3><a id="user-content-basic-shef-command-structure" aria-label="Permalink: Basic Shef Command Structure" href="#basic-shef-command-structure"></a></p>
<div data-snippet-clipboard-copy-content="shef [category] [recipe-name]"><pre><code>shef [category] [recipe-name]
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Global Flags</h3><a id="user-content-global-flags" aria-label="Permalink: Global Flags" href="#global-flags"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Flag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-h, --help</code></td>
<td>Show help information</td>
</tr>
<tr>
<td><code>-v, --version</code></td>
<td>Show version information</td>
</tr>
<tr>
<td><code>-d, --debug</code></td>
<td>Enable debug output</td>
</tr>
<tr>
<td><code>-c, --category</code></td>
<td>Specify a category</td>
</tr>
<tr>
<td><code>-L, --local</code></td>
<td>Force local recipes first</td>
</tr>
<tr>
<td><code>-U, --user</code></td>
<td>Force user recipes first</td>
</tr>
<tr>
<td><code>-P, --public</code></td>
<td>Force public recipes first</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h3 tabindex="-1" dir="auto">Utility Commands</h3><a id="user-content-utility-commands" aria-label="Permalink: Utility Commands" href="#utility-commands"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sync</code></td>
<td>Sync public recipes locally</td>
</tr>
<tr>
<td><code>list</code> <code>ls</code> <code>l</code></td>
<td>List available recipes</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<div dir="auto"><p dir="auto">Important</p><p dir="auto">Make sure your Shef git repo is up to date before running <code>shef sync</code></p>
</div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Recipe Sources</h2><a id="user-content-recipe-sources" aria-label="Permalink: Recipe Sources" href="#recipe-sources"></a></p>
<p dir="auto">Shef looks for recipes in multiple locations:</p>
<ol dir="auto">
<li><strong>Local Recipes</strong>: <code>./.shef/*.yaml</code> in the current directory</li>
<li><strong>User Recipes</strong>: <code>~/.shef/user/*.yaml</code> in your home directory</li>
<li><strong>Public Recipes</strong>: <code>~/.shef/public/*.yaml</code> in your home directory</li>
</ol>
<p dir="auto">If you have recipes with the same name and category in different locations, you can prioritize a specific source:</p>
<div dir="auto" data-snippet-clipboard-copy-content="shef -L git version  # Prioritize local recipes
shef -U git version  # Prioritize user recipes
shef -P git version  # Prioritize public recipes"><pre>shef -L git version  <span><span>#</span> Prioritize local recipes</span>
shef -U git version  <span><span>#</span> Prioritize user recipes</span>
shef -P git version  <span><span>#</span> Prioritize public recipes</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Recipe Structure</h2><a id="user-content-recipe-structure" aria-label="Permalink: Recipe Structure" href="#recipe-structure"></a></p>
<p dir="auto">Recipes are defined in YAML files:</p>
<div dir="auto" data-snippet-clipboard-copy-content="recipes:
  - name: &quot;example&quot;
    description: &quot;An example recipe&quot;
    category: &quot;demo&quot;
    operations:
      - name: &quot;First Operation&quot;
        id: &quot;first_op&quot;
        command: &quot;echo 'Hello, World!'&quot;

      - name: &quot;Second Operation&quot;
        command: &quot;cat&quot;
        transform: &quot;{{ filter .input 'Hello' }}&quot;"><pre><span>recipes</span>:
  - <span>name</span>: <span><span>"</span>example<span>"</span></span>
    <span>description</span>: <span><span>"</span>An example recipe<span>"</span></span>
    <span>category</span>: <span><span>"</span>demo<span>"</span></span>
    <span>operations</span>:
      - <span>name</span>: <span><span>"</span>First Operation<span>"</span></span>
        <span>id</span>: <span><span>"</span>first_op<span>"</span></span>
        <span>command</span>: <span><span>"</span>echo 'Hello, World!'<span>"</span></span>

      - <span>name</span>: <span><span>"</span>Second Operation<span>"</span></span>
        <span>command</span>: <span><span>"</span>cat<span>"</span></span>
        <span>transform</span>: <span><span>"</span>{{ filter .input 'Hello' }}<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Key Recipe Components</h3><a id="user-content-key-recipe-components" aria-label="Permalink: Key Recipe Components" href="#key-recipe-components"></a></p>
<ul dir="auto">
<li><strong>name</strong>: Unique identifier for the recipe</li>
<li><strong>description</strong>: Human-readable description</li>
<li><strong>category</strong>: Used for organization and filtering</li>
<li><strong>author</strong>: Optional author attribution</li>
<li><strong>operations</strong>: List of operations to execute in sequence</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Operations</h3><a id="user-content-operations" aria-label="Permalink: Operations" href="#operations"></a></p>
<p dir="auto">Operations are the building blocks of recipes:</p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;Operation Name&quot;            # Operation name
  id: &quot;unique_id&quot;                   # Identifier for referencing output
  command: &quot;echo 'Hello'&quot;           # Shell command to execute
  execution_mode: &quot;standard&quot;        # [Optional] How the command runs (standard, interactive, or stream)
  silent: false                     # [Optional] Whether to suppress output to stdout
  condition: &quot;var == true&quot;          # [Optional] Condition for execution
  on_success: &quot;success_op&quot;          # [Optional] Operation to run on success
  on_failure: &quot;failure_op&quot;          # [Optional] Operation to run on failure
  transform: &quot;{{ .output | trim }}&quot; # [Optional] Transform output
  prompts:                          # [Optional] Interactive prompts
     - name: &quot;var_name&quot;
       type: &quot;input&quot;
       message: &quot;Enter value:&quot;
  control_flow:                     # [Optional] Control flow structure (one of the below types)
    type: &quot;foreach&quot;                 # Type of control flow (foreach, for, while)
  operations:                       # [Optional] Sub-operations for when control flow structures are used
    - name: &quot;Sub Operation&quot;
      command: &quot;echo 'Processing {{ .item }}'&quot;"><pre>- <span>name</span>: <span><span>"</span>Operation Name<span>"</span></span>            <span><span>#</span> Operation name</span>
  <span>id</span>: <span><span>"</span>unique_id<span>"</span></span>                   <span><span>#</span> Identifier for referencing output</span>
  <span>command</span>: <span><span>"</span>echo 'Hello'<span>"</span></span>           <span><span>#</span> Shell command to execute</span>
  <span>execution_mode</span>: <span><span>"</span>standard<span>"</span></span>        <span><span>#</span> [Optional] How the command runs (standard, interactive, or stream)</span>
  <span>silent</span>: <span>false                     </span><span><span>#</span> [Optional] Whether to suppress output to stdout</span>
  <span>condition</span>: <span><span>"</span>var == true<span>"</span></span>          <span><span>#</span> [Optional] Condition for execution</span>
  <span>on_success</span>: <span><span>"</span>success_op<span>"</span></span>          <span><span>#</span> [Optional] Operation to run on success</span>
  <span>on_failure</span>: <span><span>"</span>failure_op<span>"</span></span>          <span><span>#</span> [Optional] Operation to run on failure</span>
  <span>transform</span>: <span><span>"</span>{{ .output | trim }}<span>"</span></span> <span><span>#</span> [Optional] Transform output</span>
  <span>prompts</span>:                          <span><span>#</span> [Optional] Interactive prompts</span>
     - <span>name</span>: <span><span>"</span>var_name<span>"</span></span>
       <span>type</span>: <span><span>"</span>input<span>"</span></span>
       <span>message</span>: <span><span>"</span>Enter value:<span>"</span></span>
  <span>control_flow</span>:                     <span><span>#</span> [Optional] Control flow structure (one of the below types)</span>
    <span>type</span>: <span><span>"</span>foreach<span>"</span></span>                 <span><span>#</span> Type of control flow (foreach, for, while)</span>
  <span>operations</span>:                       <span><span>#</span> [Optional] Sub-operations for when control flow structures are used</span>
    - <span>name</span>: <span><span>"</span>Sub Operation<span>"</span></span>
      <span>command</span>: <span><span>"</span>echo 'Processing {{ .item }}'<span>"</span></span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Control Flow Configuration</h4><a id="user-content-control-flow-configuration" aria-label="Permalink: Control Flow Configuration" href="#control-flow-configuration"></a></p>
<p dir="auto">Control flow structures are configured as follows:</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Foreach</h5><a id="user-content-foreach" aria-label="Permalink: Foreach" href="#foreach"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="control_flow:
  type: &quot;foreach&quot;               # Iterate over a collection
  collection: &quot;Item 1\nItem 2&quot;  # Collection of items (newline separated)
  as: &quot;item&quot;                    # Variable name for current item"><pre><span>control_flow</span>:
  <span>type</span>: <span><span>"</span>foreach<span>"</span></span>               <span><span>#</span> Iterate over a collection</span>
  <span>collection</span>: <span><span>"</span>Item 1<span>\n</span>Item 2<span>"</span></span>  <span><span>#</span> Collection of items (newline separated)</span>
  <span>as</span>: <span><span>"</span>item<span>"</span></span>                    <span><span>#</span> Variable name for current item</span></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto">For</h5><a id="user-content-for" aria-label="Permalink: For" href="#for"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="control_flow:
  type: &quot;for&quot;    # Execute a fixed number of times
  count: 5       # Number of iterations
  variable: &quot;i&quot;  # Variable name for iteration index (optional)"><pre><span>control_flow</span>:
  <span>type</span>: <span><span>"</span>for<span>"</span></span>    <span><span>#</span> Execute a fixed number of times</span>
  <span>count</span>: <span>5</span>       <span><span>#</span> Number of iterations</span>
  <span>variable</span>: <span><span>"</span>i<span>"</span></span>  <span><span>#</span> Variable name for iteration index (optional)</span></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto">While</h5><a id="user-content-while" aria-label="Permalink: While" href="#while"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="control_flow:
  type: &quot;while&quot;                          # Execute while condition is true
  condition: &quot;{{ ne .status `ready` }}&quot;  # Condition to evaluate each iteration"><pre><span>control_flow</span>:
  <span>type</span>: <span><span>"</span>while<span>"</span></span>                          <span><span>#</span> Execute while condition is true</span>
  <span>condition</span>: <span><span>"</span>{{ ne .status `ready` }}<span>"</span></span>  <span><span>#</span> Condition to evaluate each iteration</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Execution Modes</h4><a id="user-content-execution-modes" aria-label="Permalink: Execution Modes" href="#execution-modes"></a></p>
<ul dir="auto">
<li><strong>standard</strong>: Default mode (used when no execution_mode is specified). Output is captured and can be used by
subsequent operations.</li>
<li><strong>interactive</strong>: The command has direct access to the terminal's stdin, stdout, and stderr. Useful for commands that
require direct terminal interaction, but output cannot be captured for use in subsequent operations.</li>
<li><strong>stream</strong>: Similar to interactive mode but optimized for long-running processes that produce continuous output. The
command's output streams to the terminal in real-time, but output cannot be captured for use in subsequent operations.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Interactive User Prompts</h2><a id="user-content-interactive-user-prompts" aria-label="Permalink: Interactive User Prompts" href="#interactive-user-prompts"></a></p>
<p dir="auto">Shef supports the following types of user prompts:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Basic Input Types</h3><a id="user-content-basic-input-types" aria-label="Permalink: Basic Input Types" href="#basic-input-types"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Text Input
- name: &quot;username&quot;
  type: &quot;input&quot;
  message: &quot;Enter your username:&quot;
  default: &quot;admin&quot;
  help_text: &quot;This will be used for authentication&quot;

# Selection
- name: &quot;environment&quot;
  type: &quot;select&quot;
  message: &quot;Select environment:&quot;
  options:
    - &quot;dev&quot;
    - &quot;staging&quot;
    - &quot;production&quot;
  default: &quot;dev&quot;
  help_text: &quot;Choose the deployment environment&quot;

# Confirmation (yes/no)
- name: &quot;confirm_deploy&quot;
  type: &quot;confirm&quot;
  message: &quot;Deploy to production?&quot;
  default: &quot;false&quot;
  help_text: &quot;This will start the deployment process&quot;

# Password (input is masked)
- name: &quot;password&quot;
  type: &quot;password&quot;
  message: &quot;Enter your password:&quot;
  help_text: &quot;Your input will be hidden&quot;"><pre><span><span>#</span> Text Input</span>
- <span>name</span>: <span><span>"</span>username<span>"</span></span>
  <span>type</span>: <span><span>"</span>input<span>"</span></span>
  <span>message</span>: <span><span>"</span>Enter your username:<span>"</span></span>
  <span>default</span>: <span><span>"</span>admin<span>"</span></span>
  <span>help_text</span>: <span><span>"</span>This will be used for authentication<span>"</span></span>

<span><span>#</span> Selection</span>
- <span>name</span>: <span><span>"</span>environment<span>"</span></span>
  <span>type</span>: <span><span>"</span>select<span>"</span></span>
  <span>message</span>: <span><span>"</span>Select environment:<span>"</span></span>
  <span>options</span>:
    - <span><span>"</span>dev<span>"</span></span>
    - <span><span>"</span>staging<span>"</span></span>
    - <span><span>"</span>production<span>"</span></span>
  <span>default</span>: <span><span>"</span>dev<span>"</span></span>
  <span>help_text</span>: <span><span>"</span>Choose the deployment environment<span>"</span></span>

<span><span>#</span> Confirmation (yes/no)</span>
- <span>name</span>: <span><span>"</span>confirm_deploy<span>"</span></span>
  <span>type</span>: <span><span>"</span>confirm<span>"</span></span>
  <span>message</span>: <span><span>"</span>Deploy to production?<span>"</span></span>
  <span>default</span>: <span><span>"</span>false<span>"</span></span>
  <span>help_text</span>: <span><span>"</span>This will start the deployment process<span>"</span></span>

<span><span>#</span> Password (input is masked)</span>
- <span>name</span>: <span><span>"</span>password<span>"</span></span>
  <span>type</span>: <span><span>"</span>password<span>"</span></span>
  <span>message</span>: <span><span>"</span>Enter your password:<span>"</span></span>
  <span>help_text</span>: <span><span>"</span>Your input will be hidden<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Advanced Input Types</h3><a id="user-content-advanced-input-types" aria-label="Permalink: Advanced Input Types" href="#advanced-input-types"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Multi-select
- name: &quot;features&quot;
  type: &quot;multiselect&quot;
  message: &quot;Select features to enable:&quot;
  options:
    - &quot;logging&quot;
    - &quot;metrics&quot;
    - &quot;debugging&quot;
  default: &quot;logging,metrics&quot;
  help_text: &quot;Use space to toggle, enter to confirm&quot;

# Numeric Input
- name: &quot;count&quot;
  type: &quot;number&quot;
  message: &quot;Enter number of instances:&quot;
  default: &quot;3&quot;
  min_value: 1
  max_value: 10
  help_text: &quot;Value must be between 1 and 10&quot;

# File Path Input
- name: &quot;config_file&quot;
  type: &quot;path&quot;
  message: &quot;Select configuration file:&quot;
  default: &quot;./config.json&quot;
  file_extensions:
    - &quot;json&quot;
    - &quot;yaml&quot;
    - &quot;yml&quot;
  required: true
  help_text: &quot;File must exist and have the right extension&quot;

# Text Editor
- name: &quot;description&quot;
  type: &quot;editor&quot;
  message: &quot;Enter a detailed description:&quot;
  default: &quot;# Project Description\n\nEnter details here...&quot;
  editor_cmd: &quot;vim&quot;  # Uses $EDITOR env var if not specified
  help_text: &quot;This will open your text editor&quot;

# Autocomplete Selection
- name: &quot;service&quot;
  type: &quot;autocomplete&quot;
  message: &quot;Select a service:&quot;
  options:
    - &quot;authentication&quot;
    - &quot;database&quot;
    - &quot;storage&quot;
    - &quot;analytics&quot;
  help_text: &quot;Type to filter options&quot;"><pre><span><span>#</span> Multi-select</span>
- <span>name</span>: <span><span>"</span>features<span>"</span></span>
  <span>type</span>: <span><span>"</span>multiselect<span>"</span></span>
  <span>message</span>: <span><span>"</span>Select features to enable:<span>"</span></span>
  <span>options</span>:
    - <span><span>"</span>logging<span>"</span></span>
    - <span><span>"</span>metrics<span>"</span></span>
    - <span><span>"</span>debugging<span>"</span></span>
  <span>default</span>: <span><span>"</span>logging,metrics<span>"</span></span>
  <span>help_text</span>: <span><span>"</span>Use space to toggle, enter to confirm<span>"</span></span>

<span><span>#</span> Numeric Input</span>
- <span>name</span>: <span><span>"</span>count<span>"</span></span>
  <span>type</span>: <span><span>"</span>number<span>"</span></span>
  <span>message</span>: <span><span>"</span>Enter number of instances:<span>"</span></span>
  <span>default</span>: <span><span>"</span>3<span>"</span></span>
  <span>min_value</span>: <span>1</span>
  <span>max_value</span>: <span>10</span>
  <span>help_text</span>: <span><span>"</span>Value must be between 1 and 10<span>"</span></span>

<span><span>#</span> File Path Input</span>
- <span>name</span>: <span><span>"</span>config_file<span>"</span></span>
  <span>type</span>: <span><span>"</span>path<span>"</span></span>
  <span>message</span>: <span><span>"</span>Select configuration file:<span>"</span></span>
  <span>default</span>: <span><span>"</span>./config.json<span>"</span></span>
  <span>file_extensions</span>:
    - <span><span>"</span>json<span>"</span></span>
    - <span><span>"</span>yaml<span>"</span></span>
    - <span><span>"</span>yml<span>"</span></span>
  <span>required</span>: <span>true</span>
  <span>help_text</span>: <span><span>"</span>File must exist and have the right extension<span>"</span></span>

<span><span>#</span> Text Editor</span>
- <span>name</span>: <span><span>"</span>description<span>"</span></span>
  <span>type</span>: <span><span>"</span>editor<span>"</span></span>
  <span>message</span>: <span><span>"</span>Enter a detailed description:<span>"</span></span>
  <span>default</span>: <span><span>"</span># Project Description<span>\n\n</span>Enter details here...<span>"</span></span>
  <span>editor_cmd</span>: <span><span>"</span>vim<span>"</span></span>  <span><span>#</span> Uses $EDITOR env var if not specified</span>
  <span>help_text</span>: <span><span>"</span>This will open your text editor<span>"</span></span>

<span><span>#</span> Autocomplete Selection</span>
- <span>name</span>: <span><span>"</span>service<span>"</span></span>
  <span>type</span>: <span><span>"</span>autocomplete<span>"</span></span>
  <span>message</span>: <span><span>"</span>Select a service:<span>"</span></span>
  <span>options</span>:
    - <span><span>"</span>authentication<span>"</span></span>
    - <span><span>"</span>database<span>"</span></span>
    - <span><span>"</span>storage<span>"</span></span>
    - <span><span>"</span>analytics<span>"</span></span>
  <span>help_text</span>: <span><span>"</span>Type to filter options<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Dynamic Options</h3><a id="user-content-dynamic-options" aria-label="Permalink: Dynamic Options" href="#dynamic-options"></a></p>
<p dir="auto">You can generate selection options from a previous operation's output:</p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;List Files&quot;
  id: &quot;files_list&quot;
  command: &quot;find . -name '*.go'&quot;

- name: &quot;Select File&quot;
  command: &quot;cat {{ .file }}&quot;
  prompts:
    - name: &quot;file&quot;
      type: &quot;select&quot;
      message: &quot;Select a file:&quot;
      source_operation: &quot;files_list&quot;
      source_transform: &quot;{{ .input | trim }}&quot;"><pre>- <span>name</span>: <span><span>"</span>List Files<span>"</span></span>
  <span>id</span>: <span><span>"</span>files_list<span>"</span></span>
  <span>command</span>: <span><span>"</span>find . -name '*.go'<span>"</span></span>

- <span>name</span>: <span><span>"</span>Select File<span>"</span></span>
  <span>command</span>: <span><span>"</span>cat {{ .file }}<span>"</span></span>
  <span>prompts</span>:
    - <span>name</span>: <span><span>"</span>file<span>"</span></span>
      <span>type</span>: <span><span>"</span>select<span>"</span></span>
      <span>message</span>: <span><span>"</span>Select a file:<span>"</span></span>
      <span>source_operation</span>: <span><span>"</span>files_list<span>"</span></span>
      <span>source_transform</span>: <span><span>"</span>{{ .input | trim }}<span>"</span></span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Transformations</h2><a id="user-content-transformations" aria-label="Permalink: Transformations" href="#transformations"></a></p>
<p dir="auto">Transformations let you modify a command's output before it's passed to the next operation or used in prompts.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Basic Syntax</h3><a id="user-content-basic-syntax" aria-label="Permalink: Basic Syntax" href="#basic-syntax"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="transform: &quot;{{ .output | function1 | function2 }}&quot;"><pre><span>transform</span>: <span><span>"</span>{{ .output | function1 | function2 }}<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Available Transformation Functions</h3><a id="user-content-available-transformation-functions" aria-label="Permalink: Available Transformation Functions" href="#available-transformation-functions"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trim</code></td>
<td>Remove whitespace</td>
<td><code>{{ .output | trim }}</code></td>
</tr>
<tr>
<td><code>split</code></td>
<td>Split string by delimiter</td>
<td><code>{{ .output | split "," }}</code></td>
</tr>
<tr>
<td><code>join</code></td>
<td>Join array with delimiter</td>
<td><code>{{ .output | join "\n" }}</code></td>
</tr>
<tr>
<td><code>joinArray</code></td>
<td>Join any array type with delimiter</td>
<td><code>{{ .output | joinArray "," }}</code></td>
</tr>
<tr>
<td><code>filter</code></td>
<td>Keep lines containing a pattern</td>
<td><code>{{ .output | filter "pattern" }}</code></td>
</tr>
<tr>
<td><code>grep</code></td>
<td>Alias for filter</td>
<td><code>{{ .output | grep "pattern" }}</code></td>
</tr>
<tr>
<td><code>cut</code></td>
<td>Extract field from each line</td>
<td><code>{{ .output | cut ":" 1 }}</code></td>
</tr>
<tr>
<td><code>trimPrefix</code></td>
<td>Remove prefix</td>
<td><code>{{ .output | trimPrefix "foo" }}</code></td>
</tr>
<tr>
<td><code>trimSuffix</code></td>
<td>Remove suffix</td>
<td><code>{{ .output | trimSuffix "bar" }}</code></td>
</tr>
<tr>
<td><code>contains</code></td>
<td>Check if string contains pattern</td>
<td><code>{{ if contains .output "pattern" }}yes{{ end }}</code></td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Replace text</td>
<td><code>{{ .output | replace "old" "new" }}</code></td>
</tr>
<tr>
<td><code>atoi</code></td>
<td>Convert string to int</td>
<td><code>{{ .output | atoi }}</code></td>
</tr>
<tr>
<td><code>add</code></td>
<td>Add numbers</td>
<td><code>{{ .output | atoi | add 5 }}</code></td>
</tr>
<tr>
<td><code>sub</code></td>
<td>Subtract numbers</td>
<td><code>{{ .output | atoi | sub 3 }}</code></td>
</tr>
<tr>
<td><code>div</code></td>
<td>Divide numbers</td>
<td><code>{{ .output | atoi | div 2 }}</code></td>
</tr>
<tr>
<td><code>mul</code></td>
<td>Multiply numbers</td>
<td><code>{{ .output | atoi | mul 4 }}</code></td>
</tr>
<tr>
<td><code>exec</code></td>
<td>Execute command</td>
<td><code>{{ exec "date" }}</code></td>
</tr>
<tr>
<td><code>color</code></td>
<td>Add color to text</td>
<td><code>{{ color "green" "Success!" }}</code></td>
</tr>
<tr>
<td><code>style</code></td>
<td>Add styling to text</td>
<td><code>{{ style "bold" "Important!" }}</code></td>
</tr>
<tr>
<td><code>resetFormat</code></td>
<td>Reset all colors and styles</td>
<td><code>{{ resetFormat }}</code></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h3 tabindex="-1" dir="auto">Terminal Colors and Styles</h3><a id="user-content-terminal-colors-and-styles" aria-label="Permalink: Terminal Colors and Styles" href="#terminal-colors-and-styles"></a></p>
<p dir="auto">You can make your recipe outputs more readable by adding colors and styles. These are automatically disabled when using
the <code>NO_COLOR</code> environment variable.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Available Colors</h4><a id="user-content-available-colors" aria-label="Permalink: Available Colors" href="#available-colors"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Color Type</th>
<th>Available Colors</th>
</tr>
</thead>
<tbody>
<tr>
<td>Text Colors</td>
<td><code>black</code>, <code>red</code>, <code>green</code>, <code>yellow</code>, <code>blue</code>, <code>magenta</code>, <code>cyan</code>, <code>white</code></td>
</tr>
<tr>
<td>Background Colors</td>
<td><code>bg-black</code>, <code>bg-red</code>, <code>bg-green</code>, <code>bg-yellow</code>, <code>bg-blue</code>, <code>bg-magenta</code>, <code>bg-cyan</code>, <code>bg-white</code></td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h4 tabindex="-1" dir="auto">Available Styles</h4><a id="user-content-available-styles" aria-label="Permalink: Available Styles" href="#available-styles"></a></p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Style</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bold</code></td>
<td>Bold text</td>
</tr>
<tr>
<td><code>dim</code></td>
<td>Dimmed text</td>
</tr>
<tr>
<td><code>italic</code></td>
<td>Italic text</td>
</tr>
<tr>
<td><code>underline</code></td>
<td>Underlined text</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h4 tabindex="-1" dir="auto">Using Colors and Styles</h4><a id="user-content-using-colors-and-styles" aria-label="Permalink: Using Colors and Styles" href="#using-colors-and-styles"></a></p>
<p dir="auto">Colors and styles can be used in commands, transformations, and anywhere templates are rendered:</p>
<p dir="auto"><h5 tabindex="-1" dir="auto">Basic Color Usage</h5><a id="user-content-basic-color-usage" aria-label="Permalink: Basic Color Usage" href="#basic-color-usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="command: echo &quot;{{ color &quot;green&quot; &quot;Success!&quot; }}&quot;"><pre><span>command</span>: <span>echo "{{ color "green" "Success!" }}"</span></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto">Basic Style Usage</h5><a id="user-content-basic-style-usage" aria-label="Permalink: Basic Style Usage" href="#basic-style-usage"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="command: echo &quot;{{ style &quot;bold&quot; &quot;Important!&quot; }}&quot;"><pre><span>command</span>: <span>echo "{{ style "bold" "Important!" }}"</span></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto">Combine Color and Style</h5><a id="user-content-combine-color-and-style" aria-label="Permalink: Combine Color and Style" href="#combine-color-and-style"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="command: echo &quot;{{ style &quot;bold&quot; (color &quot;red&quot; &quot;Error!&quot;) }}&quot;"><pre><span>command</span>: <span>echo "{{ style "bold" (color "red" "Error!") }}"</span></pre></div>
<p dir="auto"><h5 tabindex="-1" dir="auto">Transformations</h5><a id="user-content-transformations-1" aria-label="Permalink: Transformations" href="#transformations-1"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="transform: |
  {{ if contains .output &quot;error&quot; }}
  {{ color &quot;red&quot; (style &quot;bold&quot; &quot;✗ Operation failed&quot;) }}
  {{ else }}
  {{ color &quot;green&quot; (style &quot;bold&quot; &quot;✓ Operation succeeded&quot;) }}
  {{ end }}"><pre><span>transform</span>: <span>|</span>
<span>  {{ if contains .output "error" }}</span>
<span>  {{ color "red" (style "bold" "✗ Operation failed") }}</span>
<span>  {{ else }}</span>
<span>  {{ color "green" (style "bold" "✓ Operation succeeded") }}</span>
<span>  {{ end }}</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Accessing Variables</h3><a id="user-content-accessing-variables" aria-label="Permalink: Accessing Variables" href="#accessing-variables"></a></p>
<p dir="auto">You can access all context variables in transformations:</p>
<div dir="auto" data-snippet-clipboard-copy-content="transform: &quot;{{ if eq .format `json` }}{{ .output }}{{ else }}{{ .output | cut ` ` 0 }}{{ end }}&quot;"><pre><span>transform</span>: <span><span>"</span>{{ if eq .format `json` }}{{ .output }}{{ else }}{{ .output | cut ` ` 0 }}{{ end }}<span>"</span></span></pre></div>
<p dir="auto">Variables available in templates:</p>
<ul dir="auto">
<li><code>.output</code>: The output to the current transformation (output from the command)</li>
<li><code>.input</code>: The input to the current command (input from previous operation)</li>
<li><code>.{prompt_name}</code>: Any variable from defined prompts</li>
<li><code>.{operation_id}</code>: The output of a specific operation by ID</li>
<li><code>.operationOutputs</code>: Map of all operation outputs by ID</li>
<li><code>.operationResults</code>: Map of operation success/failure results by ID</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Conditional Execution</h2><a id="user-content-conditional-execution" aria-label="Permalink: Conditional Execution" href="#conditional-execution"></a></p>
<p dir="auto">Operations can be conditionally executed:</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Basic Conditions</h3><a id="user-content-basic-conditions" aria-label="Permalink: Basic Conditions" href="#basic-conditions"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="condition: .confirm == &quot;true&quot;  # Run only if confirm prompt is true"><pre><span>condition</span>: <span>.confirm == "true"  </span><span><span>#</span> Run only if confirm prompt is true</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Operation Result Conditions</h3><a id="user-content-operation-result-conditions" aria-label="Permalink: Operation Result Conditions" href="#operation-result-conditions"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="condition: build_op.success  # Run if build_op succeeded
condition: test_op.failure   # Run if test_op failed"><pre><span>condition</span>: <span>build_op.success  </span><span><span>#</span> Run if build_op succeeded</span>
<span>condition</span>: <span>test_op.failure   </span><span><span>#</span> Run if test_op failed</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Variable Comparison</h3><a id="user-content-variable-comparison" aria-label="Permalink: Variable Comparison" href="#variable-comparison"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="condition: .environment == &quot;production&quot;  # Equality check
condition: .count != 0                   # Inequality check"><pre><span>condition</span>: <span>.environment == "production"  </span><span><span>#</span> Equality check</span>
<span>condition</span>: <span>.count != 0                   </span><span><span>#</span> Inequality check</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Numeric Comparison</h3><a id="user-content-numeric-comparison" aria-label="Permalink: Numeric Comparison" href="#numeric-comparison"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="condition: .count > 5
condition: .memory <= 512
condition: .errors >= 10
condition: .progress < 100"><pre><span>condition</span>: <span>.count &gt; 5</span>
<span>condition</span>: <span>.memory &lt;= 512</span>
<span>condition</span>: <span>.errors &gt;= 10</span>
<span>condition</span>: <span>.progress &lt; 100</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Complex Logic</h3><a id="user-content-complex-logic" aria-label="Permalink: Complex Logic" href="#complex-logic"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="condition: build_op.success &amp;&amp; .confirm_deploy == &quot;true&quot;
condition: test_op.failure || lint_op.failure
condition: !.skip_validation"><pre><span>condition</span>: <span>build_op.success &amp;&amp; .confirm_deploy == "true"</span>
<span>condition</span>: <span>test_op.failure || lint_op.failure</span>
<span>condition</span>: <span>!.skip_validation</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Branching Workflows</h2><a id="user-content-branching-workflows" aria-label="Permalink: Branching Workflows" href="#branching-workflows"></a></p>
<p dir="auto">You can create branching workflows based on success or failure:</p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;Build App&quot;
  id: &quot;build_op&quot;
  command: &quot;make build&quot;
  on_success: &quot;deploy_op&quot;  # Go to deploy_op on success
  on_failure: &quot;fix_op&quot;     # Go to fix_op on failure

- name: &quot;Deploy&quot;
  id: &quot;deploy_op&quot;
  command: &quot;make deploy&quot;
  
- name: &quot;Fix Issues&quot;
  id: &quot;fix_op&quot;
  command: &quot;make lint&quot;"><pre>- <span>name</span>: <span><span>"</span>Build App<span>"</span></span>
  <span>id</span>: <span><span>"</span>build_op<span>"</span></span>
  <span>command</span>: <span><span>"</span>make build<span>"</span></span>
  <span>on_success</span>: <span><span>"</span>deploy_op<span>"</span></span>  <span><span>#</span> Go to deploy_op on success</span>
  <span>on_failure</span>: <span><span>"</span>fix_op<span>"</span></span>     <span><span>#</span> Go to fix_op on failure</span>

- <span>name</span>: <span><span>"</span>Deploy<span>"</span></span>
  <span>id</span>: <span><span>"</span>deploy_op<span>"</span></span>
  <span>command</span>: <span><span>"</span>make deploy<span>"</span></span>
  
- <span>name</span>: <span><span>"</span>Fix Issues<span>"</span></span>
  <span>id</span>: <span><span>"</span>fix_op<span>"</span></span>
  <span>command</span>: <span><span>"</span>make lint<span>"</span></span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Data Flow Between Operations</h2><a id="user-content-data-flow-between-operations" aria-label="Permalink: Data Flow Between Operations" href="#data-flow-between-operations"></a></p>
<p dir="auto">Each operation's output is automatically piped to the next operation's input. You can also access any operation's output
by its ID:</p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;Get Hostname&quot;
  id: &quot;hostname_op&quot;
  command: &quot;hostname&quot;

- name: &quot;Show Info&quot;
  command: &quot;echo 'Running on {{ .hostname_op }}'&quot;"><pre>- <span>name</span>: <span><span>"</span>Get Hostname<span>"</span></span>
  <span>id</span>: <span><span>"</span>hostname_op<span>"</span></span>
  <span>command</span>: <span><span>"</span>hostname<span>"</span></span>

- <span>name</span>: <span><span>"</span>Show Info<span>"</span></span>
  <span>command</span>: <span><span>"</span>echo 'Running on {{ .hostname_op }}'<span>"</span></span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Control Flow Structures</h2><a id="user-content-control-flow-structures" aria-label="Permalink: Control Flow Structures" href="#control-flow-structures"></a></p>
<p dir="auto">Shef supports advanced control flow structures that let you create dynamic, iterative workflows.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Foreach Loops</h3><a id="user-content-foreach-loops" aria-label="Permalink: Foreach Loops" href="#foreach-loops"></a></p>
<p dir="auto">You can iterate over a collection of items and perform a flow of operations on each item.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Key Foreach Components</h4><a id="user-content-key-foreach-components" aria-label="Permalink: Key Foreach Components" href="#key-foreach-components"></a></p>
<ul dir="auto">
<li><strong>control_flow</strong>
<ul dir="auto">
<li><strong>type</strong>: foreach</li>
<li><strong>collection</strong>: The list of items to iterate over (string with items separated by newlines)</li>
<li><strong>as</strong>: The variable name to use for the current item in each iteration</li>
</ul>
</li>
<li><strong>operations</strong>: The sub-operations to perform for each item (all sub-operations have access to the <code>as</code> loop variable)</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">Mechanics of the Foreach Loop</h4><a id="user-content-mechanics-of-the-foreach-loop" aria-label="Permalink: Mechanics of the Foreach Loop" href="#mechanics-of-the-foreach-loop"></a></p>
<ol dir="auto">
<li>Parse the collection into separate items (splitting by newlines)</li>
<li>For each item, set the variable specified in "as"</li>
<li>Execute all operations in the foreach block for each item</li>
<li>Clean up the loop variable when done</li>
</ol>
<p dir="auto"><h4 tabindex="-1" dir="auto">Common Uses</h4><a id="user-content-common-uses" aria-label="Permalink: Common Uses" href="#common-uses"></a></p>
<ul dir="auto">
<li>Processing multiple files</li>
<li>Handling lists of servers, containers, or resources</li>
<li>Applying the same transformation to multiple inputs</li>
<li>Building dynamic workflows based on discovered items</li>
</ul>
<div dir="auto"><p dir="auto">Tip</p><p dir="auto">Within a foreach loop, you can use conditional operations, transformations, and all other Shef features.</p>
</div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Example Foreach Recipes</h4><a id="user-content-example-foreach-recipes" aria-label="Permalink: Example Foreach Recipes" href="#example-foreach-recipes"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;Process Each Item&quot;
  control_flow:
     type: &quot;foreach&quot;
     collection: &quot;🍎 Apples\n🍌 Bananas\n🍒 Cherries\n🍊 Oranges&quot;
     as: &quot;fruit&quot;  # Each item will be available as .fruit
  operations:
     - name: &quot;Process Fruit&quot;
       command: &quot;echo 'Processing {{ .fruit }}'&quot;"><pre>- <span>name</span>: <span><span>"</span>Process Each Item<span>"</span></span>
  <span>control_flow</span>:
     <span>type</span>: <span><span>"</span>foreach<span>"</span></span>
     <span>collection</span>: <span><span>"</span>🍎 Apples<span>\n</span>🍌 Bananas<span>\n</span>🍒 Cherries<span>\n</span>🍊 Oranges<span>"</span></span>
     <span>as</span>: <span><span>"</span>fruit<span>"</span></span>  <span><span>#</span> Each item will be available as .fruit</span>
  <span>operations</span>:
     - <span>name</span>: <span><span>"</span>Process Fruit<span>"</span></span>
       <span>command</span>: <span><span>"</span>echo 'Processing {{ .fruit }}'<span>"</span></span></pre></div>
<p dir="auto">You can also generate the collection dynamically:</p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;List Files&quot;
  id: &quot;files&quot;
  command: &quot;find . -type f -name '*.txt'&quot;

- name: &quot;Process Each File&quot;
  control_flow:
    type: &quot;foreach&quot;
    collection: &quot;{{ .files }}&quot;  # Using output from previous operation
    as: &quot;file&quot;                  # Each item will be available as .file
  operations:
    - name: &quot;Process File&quot;
      command: &quot;cat {{ .file }} | wc -l&quot;"><pre>- <span>name</span>: <span><span>"</span>List Files<span>"</span></span>
  <span>id</span>: <span><span>"</span>files<span>"</span></span>
  <span>command</span>: <span><span>"</span>find . -type f -name '*.txt'<span>"</span></span>

- <span>name</span>: <span><span>"</span>Process Each File<span>"</span></span>
  <span>control_flow</span>:
    <span>type</span>: <span><span>"</span>foreach<span>"</span></span>
    <span>collection</span>: <span><span>"</span>{{ .files }}<span>"</span></span>  <span><span>#</span> Using output from previous operation</span>
    <span>as</span>: <span><span>"</span>file<span>"</span></span>                  <span><span>#</span> Each item will be available as .file</span>
  <span>operations</span>:
    - <span>name</span>: <span><span>"</span>Process File<span>"</span></span>
      <span>command</span>: <span><span>"</span>cat {{ .file }} | wc -l<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">For Loops</h3><a id="user-content-for-loops" aria-label="Permalink: For Loops" href="#for-loops"></a></p>
<p dir="auto">You can execute a set of operations a fixed number of times.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Key For Loop Components</h4><a id="user-content-key-for-loop-components" aria-label="Permalink: Key For Loop Components" href="#key-for-loop-components"></a></p>
<ul dir="auto">
<li><strong>control_flow</strong>
<ul dir="auto">
<li><strong>type</strong>: for</li>
<li><strong>count</strong>: The number of iterations to execute</li>
<li><strong>variable</strong>: (Optional) The variable name to use for the current iteration index (defaults to "i")</li>
</ul>
</li>
<li><strong>operations</strong>: The sub-operations to perform for each iteration</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">Mechanics of the For Loop</h4><a id="user-content-mechanics-of-the-for-loop" aria-label="Permalink: Mechanics of the For Loop" href="#mechanics-of-the-for-loop"></a></p>
<ol dir="auto">
<li>Parse and evaluate the count value to determine the number of iterations</li>
<li>For each iteration, set the loop variable to the current index (starting from 0)</li>
<li>Also set the <code>.iteration</code> variable to the 1-based iteration number</li>
<li>Execute all operations in the operations block for each iteration</li>
<li>Clean up the loop variables when done</li>
</ol>
<p dir="auto"><h4 tabindex="-1" dir="auto">Common Uses</h4><a id="user-content-common-uses-1" aria-label="Permalink: Common Uses" href="#common-uses-1"></a></p>
<ul dir="auto">
<li>Repeating an operation a fixed number of times</li>
<li>Creating numbered resources or items</li>
<li>Running tests multiple times</li>
<li>Implementing retry logic with a maximum attempt limit</li>
</ul>
<div dir="auto"><p dir="auto">Tip</p><p dir="auto">Within a for loop, both the specified variable (zero-based index) and <code>.iteration</code> (one-based counter) are available.</p>
</div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Example For Loop Recipes</h4><a id="user-content-example-for-loop-recipes" aria-label="Permalink: Example For Loop Recipes" href="#example-for-loop-recipes"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;Run a For Loop&quot;
  control_flow:
    type: &quot;for&quot;
    count: 5
    variable: &quot;i&quot;
  operations:
    - name: &quot;Print Iteration&quot;
      command: &quot;echo 'Running iteration {{ .iteration }} (zero-based index: {{ .i }})'&quot;"><pre>- <span>name</span>: <span><span>"</span>Run a For Loop<span>"</span></span>
  <span>control_flow</span>:
    <span>type</span>: <span><span>"</span>for<span>"</span></span>
    <span>count</span>: <span>5</span>
    <span>variable</span>: <span><span>"</span>i<span>"</span></span>
  <span>operations</span>:
    - <span>name</span>: <span><span>"</span>Print Iteration<span>"</span></span>
      <span>command</span>: <span><span>"</span>echo 'Running iteration {{ .iteration }} (zero-based index: {{ .i }})'<span>"</span></span></pre></div>
<p dir="auto">You can also use a dynamic count:</p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;Get Count&quot;
  id: &quot;count&quot;
  command: &quot;echo '3'&quot;
  transform: &quot;{{ trim .input }}&quot;

- name: &quot;Dynamic For Loop&quot;
  control_flow:
    type: &quot;for&quot;
    count: &quot;{{ .count }}&quot;
    variable: &quot;step&quot;
  operations:
    - name: &quot;Execute Step&quot;
      command: &quot;echo 'Executing step {{ .step }} of {{ .count }}'&quot;"><pre>- <span>name</span>: <span><span>"</span>Get Count<span>"</span></span>
  <span>id</span>: <span><span>"</span>count<span>"</span></span>
  <span>command</span>: <span><span>"</span>echo '3'<span>"</span></span>
  <span>transform</span>: <span><span>"</span>{{ trim .input }}<span>"</span></span>

- <span>name</span>: <span><span>"</span>Dynamic For Loop<span>"</span></span>
  <span>control_flow</span>:
    <span>type</span>: <span><span>"</span>for<span>"</span></span>
    <span>count</span>: <span><span>"</span>{{ .count }}<span>"</span></span>
    <span>variable</span>: <span><span>"</span>step<span>"</span></span>
  <span>operations</span>:
    - <span>name</span>: <span><span>"</span>Execute Step<span>"</span></span>
      <span>command</span>: <span><span>"</span>echo 'Executing step {{ .step }} of {{ .count }}'<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">While Loops</h3><a id="user-content-while-loops" aria-label="Permalink: While Loops" href="#while-loops"></a></p>
<p dir="auto">You can repeatedly execute operations as long as a condition remains true.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Key While Loop Components</h4><a id="user-content-key-while-loop-components" aria-label="Permalink: Key While Loop Components" href="#key-while-loop-components"></a></p>
<ul dir="auto">
<li><strong>control_flow</strong>
<ul dir="auto">
<li><strong>type</strong>: while</li>
<li><strong>condition</strong>: The condition to evaluate before each iteration</li>
</ul>
</li>
<li><strong>operations</strong>: The sub-operations to perform for each iteration</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">Mechanics of the While Loop</h4><a id="user-content-mechanics-of-the-while-loop" aria-label="Permalink: Mechanics of the While Loop" href="#mechanics-of-the-while-loop"></a></p>
<ol dir="auto">
<li>Evaluate the condition before each iteration</li>
<li>If the condition is true, execute the operations and repeat</li>
<li>If the condition is false, exit the loop</li>
<li>An <code>.iteration</code> variable is automatically set to track the current iteration (starting from 1)</li>
<li>A safety limit prevents infinite loops (maximum 1000 iterations)</li>
</ol>
<p dir="auto"><h4 tabindex="-1" dir="auto">Common Uses</h4><a id="user-content-common-uses-2" aria-label="Permalink: Common Uses" href="#common-uses-2"></a></p>
<ul dir="auto">
<li>Polling for a condition (e.g., waiting for a service to be ready)</li>
<li>Processing data until a certain state is reached</li>
<li>Implementing retry logic with conditional termination</li>
<li>Continuously monitoring resources until a specific event occurs</li>
</ul>
<div dir="auto"><p dir="auto">Tip</p><p dir="auto">Within a while loop, the <code>.iteration</code> variable lets you track how many iterations have occurred.</p>
</div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Example While Loop Recipes</h4><a id="user-content-example-while-loop-recipes" aria-label="Permalink: Example While Loop Recipes" href="#example-while-loop-recipes"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;Initialize Status&quot;
  id: &quot;status&quot;
  command: &quot;echo 'running'&quot;
  transform: &quot;{{ trim .input }}&quot;
  silent: true

- name: &quot;Wait For Completion&quot;
  control_flow:
    type: &quot;while&quot;
    condition: &quot;{{ contains .status `running` }}&quot;
  operations:
    - name: &quot;Check Status&quot;
      command: &quot;echo 'Checking status (iteration {{ .iteration }})...'&quot;
      id: &quot;status&quot;
      transform: &quot;{{ if eq .iteration 5 }}completed{{ else }}running{{ end }}&quot;"><pre>- <span>name</span>: <span><span>"</span>Initialize Status<span>"</span></span>
  <span>id</span>: <span><span>"</span>status<span>"</span></span>
  <span>command</span>: <span><span>"</span>echo 'running'<span>"</span></span>
  <span>transform</span>: <span><span>"</span>{{ trim .input }}<span>"</span></span>
  <span>silent</span>: <span>true</span>

- <span>name</span>: <span><span>"</span>Wait For Completion<span>"</span></span>
  <span>control_flow</span>:
    <span>type</span>: <span><span>"</span>while<span>"</span></span>
    <span>condition</span>: <span><span>"</span>{{ contains .status `running` }}<span>"</span></span>
  <span>operations</span>:
    - <span>name</span>: <span><span>"</span>Check Status<span>"</span></span>
      <span>command</span>: <span><span>"</span>echo 'Checking status (iteration {{ .iteration }})...'<span>"</span></span>
      <span>id</span>: <span><span>"</span>status<span>"</span></span>
      <span>transform</span>: <span><span>"</span>{{ if eq .iteration 5 }}completed{{ else }}running{{ end }}<span>"</span></span></pre></div>
<p dir="auto">Real-world polling example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="- name: &quot;Poll Service Until Ready&quot;
  control_flow:
    type: &quot;while&quot;
    condition: &quot;{{ ne .status `ready` }}&quot;
  operations:
    - name: &quot;Check Service Status&quot;
      command: &quot;curl -s http://service/status&quot;
      id: &quot;status&quot;
      transform: &quot;{{ trim .input }}&quot;"><pre>- <span>name</span>: <span><span>"</span>Poll Service Until Ready<span>"</span></span>
  <span>control_flow</span>:
    <span>type</span>: <span><span>"</span>while<span>"</span></span>
    <span>condition</span>: <span><span>"</span>{{ ne .status `ready` }}<span>"</span></span>
  <span>operations</span>:
    - <span>name</span>: <span><span>"</span>Check Service Status<span>"</span></span>
      <span>command</span>: <span><span>"</span>curl -s http://service/status<span>"</span></span>
      <span>id</span>: <span><span>"</span>status<span>"</span></span>
      <span>transform</span>: <span><span>"</span>{{ trim .input }}<span>"</span></span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example Recipes</h2><a id="user-content-example-recipes" aria-label="Permalink: Example Recipes" href="#example-recipes"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Hello World</h3><a id="user-content-hello-world" aria-label="Permalink: Hello World" href="#hello-world"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="recipes:
  - name: &quot;hello-world&quot;
    description: &quot;A simple hello world recipe&quot;
    category: &quot;demo&quot;
    operations:
      - name: &quot;Greet User&quot;
        command: |
          echo &quot;Hello, {{ .name }}!&quot;
          echo &quot;Current time: $(date)&quot;
          echo &quot;Welcome to Shef, the shell recipe tool.&quot;
        prompts:
          - name: &quot;name&quot;
            type: &quot;input&quot;
            message: &quot;What is your name?&quot;
            default: &quot;World&quot;"><pre><span>recipes</span>:
  - <span>name</span>: <span><span>"</span>hello-world<span>"</span></span>
    <span>description</span>: <span><span>"</span>A simple hello world recipe<span>"</span></span>
    <span>category</span>: <span><span>"</span>demo<span>"</span></span>
    <span>operations</span>:
      - <span>name</span>: <span><span>"</span>Greet User<span>"</span></span>
        <span>command</span>: <span>|</span>
<span>          echo "Hello, {{ .name }}!"</span>
<span>          echo "Current time: $(date)"</span>
<span>          echo "Welcome to Shef, the shell recipe tool."</span>
<span></span>        <span>prompts</span>:
          - <span>name</span>: <span><span>"</span>name<span>"</span></span>
            <span>type</span>: <span><span>"</span>input<span>"</span></span>
            <span>message</span>: <span><span>"</span>What is your name?<span>"</span></span>
            <span>default</span>: <span><span>"</span>World<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Conditional Operations</h3><a id="user-content-conditional-operations" aria-label="Permalink: Conditional Operations" href="#conditional-operations"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="recipes:
  - name: &quot;conditional&quot;
    description: &quot;A simple demo of conditional operations using direct prompt values&quot;
    category: &quot;demo&quot;
    operations:
      - name: &quot;Choose Fruit&quot;
        id: &quot;choose&quot;
        command: 'echo &quot;You selected: {{ .fruit }}&quot;'
        prompts:
          - name: &quot;fruit&quot;
            type: &quot;select&quot;
            message: &quot;Choose a fruit:&quot;
            options:
              - &quot;Apples&quot;
              - &quot;Oranges&quot;

      - name: &quot;Apple Operation&quot;
        id: &quot;apple&quot;
        command: echo &quot;This is the apple operation! 🍎&quot;
        condition: &quot;.fruit == 'Apples'&quot;

      - name: &quot;Orange Operation&quot;
        id: &quot;orange&quot;
        command: echo &quot;This is the orange operation! 🍊&quot;
        condition: &quot;.fruit == 'Oranges'&quot;"><pre><span>recipes</span>:
  - <span>name</span>: <span><span>"</span>conditional<span>"</span></span>
    <span>description</span>: <span><span>"</span>A simple demo of conditional operations using direct prompt values<span>"</span></span>
    <span>category</span>: <span><span>"</span>demo<span>"</span></span>
    <span>operations</span>:
      - <span>name</span>: <span><span>"</span>Choose Fruit<span>"</span></span>
        <span>id</span>: <span><span>"</span>choose<span>"</span></span>
        <span>command</span>: <span><span>'</span>echo "You selected: {{ .fruit }}"<span>'</span></span>
        <span>prompts</span>:
          - <span>name</span>: <span><span>"</span>fruit<span>"</span></span>
            <span>type</span>: <span><span>"</span>select<span>"</span></span>
            <span>message</span>: <span><span>"</span>Choose a fruit:<span>"</span></span>
            <span>options</span>:
              - <span><span>"</span>Apples<span>"</span></span>
              - <span><span>"</span>Oranges<span>"</span></span>

      - <span>name</span>: <span><span>"</span>Apple Operation<span>"</span></span>
        <span>id</span>: <span><span>"</span>apple<span>"</span></span>
        <span>command</span>: <span>echo "This is the apple operation! 🍎"</span>
        <span>condition</span>: <span><span>"</span>.fruit == 'Apples'<span>"</span></span>

      - <span>name</span>: <span><span>"</span>Orange Operation<span>"</span></span>
        <span>id</span>: <span><span>"</span>orange<span>"</span></span>
        <span>command</span>: <span>echo "This is the orange operation! 🍊"</span>
        <span>condition</span>: <span><span>"</span>.fruit == 'Oranges'<span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Transformation Pipeline</h3><a id="user-content-transformation-pipeline" aria-label="Permalink: Transformation Pipeline" href="#transformation-pipeline"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="recipes:
  - name: &quot;transform&quot;
    description: &quot;A simple demo of data transformation and pipeline flow&quot;
    category: &quot;demo&quot;
    operations:
      - name: &quot;Generate a Simple List&quot;
        id: &quot;generate&quot;
        command: |
          echo &quot;apple
          banana
          cherry
          dragonfruit
          eggplant&quot;

      - name: &quot;Filter Items&quot;
        id: &quot;filter&quot;
        command: &quot;cat&quot;
        transform: &quot;{{ filter .input `a` }}&quot;
        silent: true

      - name: &quot;Display Results&quot;
        id: &quot;display&quot;
        command: &quot;echo 'Items containing `a`:\n{{ .filter }}'&quot;"><pre><span>recipes</span>:
  - <span>name</span>: <span><span>"</span>transform<span>"</span></span>
    <span>description</span>: <span><span>"</span>A simple demo of data transformation and pipeline flow<span>"</span></span>
    <span>category</span>: <span><span>"</span>demo<span>"</span></span>
    <span>operations</span>:
      - <span>name</span>: <span><span>"</span>Generate a Simple List<span>"</span></span>
        <span>id</span>: <span><span>"</span>generate<span>"</span></span>
        <span>command</span>: <span>|</span>
<span>          echo "apple</span>
<span>          banana</span>
<span>          cherry</span>
<span>          dragonfruit</span>
<span>          eggplant"</span>
<span></span>
<span></span>      - <span>name</span>: <span><span>"</span>Filter Items<span>"</span></span>
        <span>id</span>: <span><span>"</span>filter<span>"</span></span>
        <span>command</span>: <span><span>"</span>cat<span>"</span></span>
        <span>transform</span>: <span><span>"</span>{{ filter .input `a` }}<span>"</span></span>
        <span>silent</span>: <span>true</span>

      - <span>name</span>: <span><span>"</span>Display Results<span>"</span></span>
        <span>id</span>: <span><span>"</span>display<span>"</span></span>
        <span>command</span>: <span><span>"</span>echo 'Items containing `a`:<span>\n</span>{{ .filter }}'<span>"</span></span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Creating Recipes</h2><a id="user-content-creating-recipes" aria-label="Permalink: Creating Recipes" href="#creating-recipes"></a></p>
<p dir="auto">To create your own recipes:</p>
<ol dir="auto">
<li>Create your user directory: <code>mkdir -p ~/.shef/user</code> (if it does not already exist)</li>
<li>Create a new YAML file: <code>touch ~/.shef/user/my-recipes.yaml</code></li>
<li>Build and develop your recipes following the instructions above</li>
<li>Run <code>shef ls</code> to see your new recipes</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">AI-Assisted Recipe Creation</h2><a id="user-content-ai-assisted-recipe-creation" aria-label="Permalink: AI-Assisted Recipe Creation" href="#ai-assisted-recipe-creation"></a></p>
<p dir="auto">You can generate powerful Shef recipes quickly using AI tools like ChatGPT, Claude, or other large language models.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Using AI to Create Recipes</h3><a id="user-content-using-ai-to-create-recipes" aria-label="Permalink: Using AI to Create Recipes" href="#using-ai-to-create-recipes"></a></p>
<ol dir="auto">
<li>Copy the prompt below</li>
<li>Paste it into your AI assistant of choice</li>
<li>Replace <code>[DESCRIBE YOUR WORKFLOW IN DETAIL]</code> with a detailed description of your recipe's workflow</li>
<li>The AI will generate a complete Shef recipe based on your description</li>
<li>Test and iterate until the recipe works as expected</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Example Usage</h3><a id="user-content-example-usage" aria-label="Permalink: Example Usage" href="#example-usage"></a></p>
<p dir="auto">Here's an example of how to fill in your workflow description:</p>
<div data-snippet-clipboard-copy-content="I need a Docker management workflow that helps me clean up unused containers and images to free up disk space.

The workflow should:
1. Show the current Docker disk usage
2. List all stopped containers and allow me to select which ones to remove
3. Confirm before removing the selected containers
4. List dangling images (unused) and allow me to select which ones to remove
5. Offer an option to perform a more aggressive cleanup (removing all unused images)
6. Show before/after disk usage comparison
7. Include error handling in case any operation fails

The recipe should be interactive and safe, requiring confirmation before any destructive operations."><pre><code>I need a Docker management workflow that helps me clean up unused containers and images to free up disk space.

The workflow should:
1. Show the current Docker disk usage
2. List all stopped containers and allow me to select which ones to remove
3. Confirm before removing the selected containers
4. List dangling images (unused) and allow me to select which ones to remove
5. Offer an option to perform a more aggressive cleanup (removing all unused images)
6. Show before/after disk usage comparison
7. Include error handling in case any operation fails

The recipe should be interactive and safe, requiring confirmation before any destructive operations.
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Tips for Better Results</h3><a id="user-content-tips-for-better-results" aria-label="Permalink: Tips for Better Results" href="#tips-for-better-results"></a></p>
<ul dir="auto">
<li>Use the latest AI models with advanced reasoning capabilities</li>
<li>Be specific about what commands should be executed at each step</li>
<li>Mention if you need interactive prompts, conditions, or transformations</li>
<li>For complex workflows, break down your requirements into clear, logical steps</li>
<li>Include any specific error handling or conditional branches you need</li>
<li>Request comments in the generated recipe to explain complex sections</li>
<li>Ask the AI to analyze and iterate on its recipe solution, considering edge cases and improvements</li>
<li>If the first recipe doesn't fully meet your needs, refine your requirements and ask for adjustments</li>
</ul>
<p dir="auto">Remember, the AI-generated recipes can provide an excellent starting point that you can further customize to fit your
exact needs.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">The Prompt</h3><a id="user-content-the-prompt" aria-label="Permalink: The Prompt" href="#the-prompt"></a></p>
<div data-snippet-clipboard-copy-content="I need help creating a Shef recipe. Shef is a CLI tool that combines shell commands into reusable recipes defined in YAML.

[DESCRIBE YOUR WORKFLOW IN DETAIL]

A Shef recipe is defined in YAML with this structure:

recipes:
  - name: &quot;short-name&quot;
    description: &quot;Human-readable description&quot;
    category: &quot;category&quot;
    author: &quot;optional author&quot;
    operations:
      - name: &quot;Operation Name&quot;
        id: &quot;unique_id&quot;
        command: &quot;shell command&quot;
        execution_mode: &quot;standard|interactive|stream&quot;  # How the command runs
        silent: true|false  # Whether to suppress the command's output
        condition: &quot;optional condition&quot;
        on_success: &quot;next_op_id&quot;
        on_failure: &quot;fallback_op_id&quot;
        transform: &quot;{{ .input | transformation }}&quot;
        prompts:
          - name: &quot;variable_name&quot;
            type: &quot;input|select|confirm|password|multiselect|number|editor|path|autocomplete&quot;
            message: &quot;Prompt message&quot;
            default: &quot;Default value&quot;
            help_text: &quot;Additional help information&quot;
            required: true|false  # Whether input is required
            options: [&quot;option1&quot;, &quot;option2&quot;]  # For select/multiselect/autocomplete types
            source_operation: &quot;operation_id&quot;  # For dynamic options
            source_transform: &quot;{{ .input | transform }}&quot;  # For processing source options
            min_value: 0  # For number type
            max_value: 100  # For number type
            file_extensions: [&quot;txt&quot;, &quot;json&quot;]  # For path type
            multiple_limit: 3  # For multiselect type
            editor_cmd: &quot;vim&quot;  # For editor type
        control_flow:
          type: &quot;foreach|for|while&quot;  # Type of control flow
          collection: &quot;Item 1\nItem 2\nItem 3&quot;  # Items to iterate over (foreach loops)
          as: &quot;item&quot;  # Variable name for current item (foreach loops)
          count: 5  # Number of iterations (for loops)
          variable: &quot;i&quot;  # Variable name for iteration index (for loops)
          condition: &quot;{{ lt .counter 5 }}&quot;  # Condition to check (while loops)
        operations:  # Operations to perform for each iteration
          - name: &quot;Sub Operation&quot;
            # command: &quot;echo 'Processing {{ .item }}'&quot; # foreach loop
            # command: &quot;echo 'Iteration {{ .i }} of 5'&quot; # for loop
            # command: &quot;echo 'While iteration {{ .iteration }}'&quot; # while loop

RECIPE MECHANICS:
1. Operations execute in sequence unless redirected by on_success/on_failure
2. Each operation's output becomes input to the next operation
3. Variables from prompts are accessible as {{ .variable_name }}
4. Operation outputs are accessible as {{ .operation_id }}
5. You can combine variables and operation outputs in command templates
6. Control flow structures like foreach allow iterating over collections

CONTROL FLOW STRUCTURES:
- foreach: Iterate over a collection of items
  - collection: Newline-separated list of items (can be fixed or from operation output)
  - as: Variable name to assign each item during iteration
  - operations: Operations to execute for each item (with access to the iteration variable)
- for: Execute operations a fixed number of times
  - count: Number of iterations to perform (can be fixed or from operation output)
  - variable: Variable name for the current zero-based index (optional, defaults to &quot;i&quot;)
  - operations: Operations to execute for each iteration (with access to the index variable and .iteration)
- while: Execute operations as long as a condition is true
  - condition: Expression to evaluate before each iteration
  - operations: Operations to execute while the condition is true (with access to .iteration)

INTERACTIVE PROMPTS:
- input: Free text input (default: string)
- select: Choose from options (static or dynamic from previous operation)
- confirm: Yes/no boolean question
- password: Masked text input
- multiselect: Choose multiple options
- number: Numeric input with range validation
- editor: Multi-line text input in an editor
- path: File path with validation
- autocomplete: Selection with filtering

TRANSFORMATION EXAMPLES:
- Trim whitespace: {{ .input | trim }}
- Split by delimiter: {{ .input | split &quot;,&quot; }}
- Join array: {{ .input | join &quot;\n&quot; }}
- Filter lines: {{ .input | filter &quot;pattern&quot; }} or {{ .input | grep &quot;pattern&quot; }}
- Extract field: {{ .input | cut &quot;:&quot; 1 }}
- Remove prefix/suffix: {{ .input | trimPrefix &quot;foo&quot; }} {{ .input | trimSuffix &quot;bar&quot; }}
- Check content: {{ if contains .input &quot;pattern&quot; }}yes{{ end }}
- Replace text: {{ .input | replace &quot;old&quot; &quot;new&quot; }}
- Math operations: {{ .input | atoi | add 5 | mul 2 | div 3 | sub 1 }}
- Execute command: {{ exec &quot;date&quot; }}

CONDITIONAL LOGIC:
- Variable equality: variable == &quot;value&quot; or variable != &quot;value&quot;
- Operation success/failure: operation_id.success or operation_id.failure
- Boolean operators: condition1 &amp;&amp; condition2, condition1 || condition2, !condition
- Numeric comparison: value > 5, count <= 10
- Complex example: (check_files.success &amp;&amp; has_tests == true) || skip_tests == true

ADVANCED FEATURES:
- Dynamic selection options from previous commands
- Conditional branching based on operation results
- Multi-step workflows with error handling
- Custom error messages and recovery steps
- Transforming outputs between operations
- Execution modes (standard or interactive)
- Silent operations that suppress output

EXAMPLE RECIPE PATTERNS:
1. Get input → Process → Show result
2. List options → Select one → Take action
3. Check condition → Branch based on result → Handle each case
4. Execute command → Transform output → Use in next command
5. Try operation → Handle success/failure differently

Please create a complete Shef recipe that accomplishes my goal, with proper indentation and comments explaining complex parts."><pre lang="text"><code>I need help creating a Shef recipe. Shef is a CLI tool that combines shell commands into reusable recipes defined in YAML.

[DESCRIBE YOUR WORKFLOW IN DETAIL]

A Shef recipe is defined in YAML with this structure:

recipes:
  - name: "short-name"
    description: "Human-readable description"
    category: "category"
    author: "optional author"
    operations:
      - name: "Operation Name"
        id: "unique_id"
        command: "shell command"
        execution_mode: "standard|interactive|stream"  # How the command runs
        silent: true|false  # Whether to suppress the command's output
        condition: "optional condition"
        on_success: "next_op_id"
        on_failure: "fallback_op_id"
        transform: "{{ .input | transformation }}"
        prompts:
          - name: "variable_name"
            type: "input|select|confirm|password|multiselect|number|editor|path|autocomplete"
            message: "Prompt message"
            default: "Default value"
            help_text: "Additional help information"
            required: true|false  # Whether input is required
            options: ["option1", "option2"]  # For select/multiselect/autocomplete types
            source_operation: "operation_id"  # For dynamic options
            source_transform: "{{ .input | transform }}"  # For processing source options
            min_value: 0  # For number type
            max_value: 100  # For number type
            file_extensions: ["txt", "json"]  # For path type
            multiple_limit: 3  # For multiselect type
            editor_cmd: "vim"  # For editor type
        control_flow:
          type: "foreach|for|while"  # Type of control flow
          collection: "Item 1\nItem 2\nItem 3"  # Items to iterate over (foreach loops)
          as: "item"  # Variable name for current item (foreach loops)
          count: 5  # Number of iterations (for loops)
          variable: "i"  # Variable name for iteration index (for loops)
          condition: "{{ lt .counter 5 }}"  # Condition to check (while loops)
        operations:  # Operations to perform for each iteration
          - name: "Sub Operation"
            # command: "echo 'Processing {{ .item }}'" # foreach loop
            # command: "echo 'Iteration {{ .i }} of 5'" # for loop
            # command: "echo 'While iteration {{ .iteration }}'" # while loop

RECIPE MECHANICS:
1. Operations execute in sequence unless redirected by on_success/on_failure
2. Each operation's output becomes input to the next operation
3. Variables from prompts are accessible as {{ .variable_name }}
4. Operation outputs are accessible as {{ .operation_id }}
5. You can combine variables and operation outputs in command templates
6. Control flow structures like foreach allow iterating over collections

CONTROL FLOW STRUCTURES:
- foreach: Iterate over a collection of items
  - collection: Newline-separated list of items (can be fixed or from operation output)
  - as: Variable name to assign each item during iteration
  - operations: Operations to execute for each item (with access to the iteration variable)
- for: Execute operations a fixed number of times
  - count: Number of iterations to perform (can be fixed or from operation output)
  - variable: Variable name for the current zero-based index (optional, defaults to "i")
  - operations: Operations to execute for each iteration (with access to the index variable and .iteration)
- while: Execute operations as long as a condition is true
  - condition: Expression to evaluate before each iteration
  - operations: Operations to execute while the condition is true (with access to .iteration)

INTERACTIVE PROMPTS:
- input: Free text input (default: string)
- select: Choose from options (static or dynamic from previous operation)
- confirm: Yes/no boolean question
- password: Masked text input
- multiselect: Choose multiple options
- number: Numeric input with range validation
- editor: Multi-line text input in an editor
- path: File path with validation
- autocomplete: Selection with filtering

TRANSFORMATION EXAMPLES:
- Trim whitespace: {{ .input | trim }}
- Split by delimiter: {{ .input | split "," }}
- Join array: {{ .input | join "\n" }}
- Filter lines: {{ .input | filter "pattern" }} or {{ .input | grep "pattern" }}
- Extract field: {{ .input | cut ":" 1 }}
- Remove prefix/suffix: {{ .input | trimPrefix "foo" }} {{ .input | trimSuffix "bar" }}
- Check content: {{ if contains .input "pattern" }}yes{{ end }}
- Replace text: {{ .input | replace "old" "new" }}
- Math operations: {{ .input | atoi | add 5 | mul 2 | div 3 | sub 1 }}
- Execute command: {{ exec "date" }}

CONDITIONAL LOGIC:
- Variable equality: variable == "value" or variable != "value"
- Operation success/failure: operation_id.success or operation_id.failure
- Boolean operators: condition1 &amp;&amp; condition2, condition1 || condition2, !condition
- Numeric comparison: value &gt; 5, count &lt;= 10
- Complex example: (check_files.success &amp;&amp; has_tests == true) || skip_tests == true

ADVANCED FEATURES:
- Dynamic selection options from previous commands
- Conditional branching based on operation results
- Multi-step workflows with error handling
- Custom error messages and recovery steps
- Transforming outputs between operations
- Execution modes (standard or interactive)
- Silent operations that suppress output

EXAMPLE RECIPE PATTERNS:
1. Get input → Process → Show result
2. List options → Select one → Take action
3. Check condition → Branch based on result → Handle each case
4. Execute command → Transform output → Use in next command
5. Try operation → Handle success/failure differently

Please create a complete Shef recipe that accomplishes my goal, with proper indentation and comments explaining complex parts.
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Troubleshooting</h2><a id="user-content-troubleshooting" aria-label="Permalink: Troubleshooting" href="#troubleshooting"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Common Issues</h3><a id="user-content-common-issues" aria-label="Permalink: Common Issues" href="#common-issues"></a></p>
<p dir="auto"><strong>Recipe not found</strong></p>
<ul dir="auto">
<li>Check if you're using the correct name and category</li>
<li>Use <code>shef ls</code> to see available recipes</li>
<li>Check your recipe file syntax</li>
</ul>
<p dir="auto"><strong>Command fails with unexpected output</strong></p>
<ul dir="auto">
<li>Remember all commands run through a shell, so shell syntax applies</li>
<li>Escape special characters in command strings</li>
<li>Use the <code>transform</code> field to format output</li>
</ul>
<p dir="auto"><strong>Prompt validation errors</strong></p>
<ul dir="auto">
<li>Ensure minimum/maximum values are within range</li>
<li>Check that file paths exist and have correct extensions</li>
<li>Verify select options contain the default value</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing to Shef</h2><a id="user-content-contributing-to-shef" aria-label="Permalink: Contributing to Shef" href="#contributing-to-shef"></a></p>
<p dir="auto">Thank you for taking an interest in contributing to Shef!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Contributing Code</h3><a id="user-content-contributing-code" aria-label="Permalink: Contributing Code" href="#contributing-code"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Development Setup</h4><a id="user-content-development-setup" aria-label="Permalink: Development Setup" href="#development-setup"></a></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Fork the Repository</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Fork via GitHub UI, then clone your fork
git clone git@github.com:yourusername/shef.git
cd shef"><pre><span><span>#</span> Fork via GitHub UI, then clone your fork</span>
git clone git@github.com:yourusername/shef.git
<span>cd</span> shef</pre></div>
</li>
<li>
<p dir="auto"><strong>Set Up Development Environment</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Install development dependencies
go mod download

# Build the development version
go build -o shef"><pre><span><span>#</span> Install development dependencies</span>
go mod download

<span><span>#</span> Build the development version</span>
go build -o shef</pre></div>
</li>
<li>
<p dir="auto"><strong>Create a New Branch</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="git checkout -b my-awesome-feature"><pre>git checkout -b my-awesome-feature</pre></div>
</li>
</ol>
<p dir="auto"><h4 tabindex="-1" dir="auto">Development Guidelines</h4><a id="user-content-development-guidelines" aria-label="Permalink: Development Guidelines" href="#development-guidelines"></a></p>
<ul dir="auto">
<li><strong>Code Style</strong>: Follow standard Go conventions and the existing style in the codebase</li>
<li><strong>Documentation</strong>: Update documentation for any new features or changes</li>
<li><strong>Commit Messages</strong>: Write clear, descriptive commit messages explaining your changes</li>
<li><strong>Tests</strong>: Update tests accordingly</li>
</ul>
<p dir="auto"><h4 tabindex="-1" dir="auto">Submitting Your Changes</h4><a id="user-content-submitting-your-changes" aria-label="Permalink: Submitting Your Changes" href="#submitting-your-changes"></a></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Push to Your Fork</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="git push origin my-awesome-feature"><pre>git push origin my-awesome-feature</pre></div>
</li>
<li>
<p dir="auto"><strong>Create a Pull Request</strong>: Visit your fork on GitHub and create a pull request against the main repository</p>
</li>
<li>
<p dir="auto"><strong>PR Description</strong>: Include a clear description of what your changes do and why they should be included</p>
</li>
<li>
<p dir="auto"><strong>Code Review</strong>: Respond to any feedback during the review process</p>
</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Contributing Recipes</h3><a id="user-content-contributing-recipes" aria-label="Permalink: Contributing Recipes" href="#contributing-recipes"></a></p>
<p dir="auto">Sharing your recipes helps grow the Shef ecosystem and benefits the entire community.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Creating Public Recipes</h4><a id="user-content-creating-public-recipes" aria-label="Permalink: Creating Public Recipes" href="#creating-public-recipes"></a></p>
<ol dir="auto">
<li>
<p dir="auto"><strong>Develop and Test Your Recipe Locally</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# Create your recipe in the user directory first
mkdir -p ~/.shef/user
vim ~/.shef/user/my-recipe.yaml

# Test thoroughly
shef -U my-category my-recipe-name"><pre><span><span>#</span> Create your recipe in the user directory first</span>
mkdir -p <span>~</span>/.shef/user
vim <span>~</span>/.shef/user/my-recipe.yaml

<span><span>#</span> Test thoroughly</span>
shef -U my-category my-recipe-name</pre></div>
</li>
<li>
<p dir="auto"><strong>Recipe Quality Guidelines</strong></p>
<ul dir="auto">
<li>Include clear descriptions for the recipe and each operation</li>
<li>Add helpful prompts with descriptive messages and defaults</li>
<li>Handle errors gracefully</li>
<li>Follow YAML best practices</li>
<li>Comment complex transformations or conditionals</li>
</ul>
</li>
<li>
<p dir="auto"><strong>Submitting Your Recipe</strong></p>
<p dir="auto"><strong>Option 1: Via Pull Request</strong></p>
<ul dir="auto">
<li>Fork the Shef repository</li>
<li>Add your recipe to the <code>recipes/public/</code> directory</li>
<li>Create a pull request with your recipe</li>
</ul>
<p dir="auto"><strong>Option 2: Via Issue</strong></p>
<ul dir="auto">
<li>Create a new issue on the Shef repository</li>
<li>Attach your recipe file or paste its contents</li>
<li>Describe what your recipe does and why it's useful</li>
</ul>
</li>
</ol>
<p dir="auto"><h4 tabindex="-1" dir="auto">Recipe Documentation</h4><a id="user-content-recipe-documentation" aria-label="Permalink: Recipe Documentation" href="#recipe-documentation"></a></p>
<p dir="auto">When submitting a recipe, include a section in your PR or issue that explains:</p>
<ol dir="auto">
<li><strong>Purpose</strong>: What problem does your recipe solve?</li>
<li><strong>Usage</strong>: How to use the recipe, including example commands</li>
<li><strong>Requirements</strong>: Any special requirements or dependencies</li>
<li><strong>Examples</strong>: Sample outputs or use cases</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Community Guidelines</h3><a id="user-content-community-guidelines" aria-label="Permalink: Community Guidelines" href="#community-guidelines"></a></p>
<ul dir="auto">
<li>Be respectful of others' contributions</li>
<li>Help review pull requests and test others' recipes</li>
<li>Report bugs and suggest improvements</li>
<li>Share your Shef success stories and use cases</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Getting Help</h3><a id="user-content-getting-help" aria-label="Permalink: Getting Help" href="#getting-help"></a></p>
<p dir="auto">If you need help with your contribution, you can:</p>
<ul dir="auto">
<li>Open an issue on GitHub</li>
<li>Ask questions in the discussions section</li>
<li>Contact us directly</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Bending Spacetime in the Basement (204 pts)]]></title>
            <link>https://www.fourmilab.ch/gravitation/foobar/</link>
            <guid>43327730</guid>
            <pubDate>Tue, 11 Mar 2025 00:11:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.fourmilab.ch/gravitation/foobar/">https://www.fourmilab.ch/gravitation/foobar/</a>, See on <a href="https://news.ycombinator.com/item?id=43327730">Hacker News</a></p>
<div id="readability-page-1" class="page">



<hr>

<p>
One of the things I detested about being a little kid was that every
time I thought of something really cool to do, I was invariably
thwarted by my little brother shouting, “<em>Mom!  Kelvin's
mixing rocket fuel in the bathtub again!</em>” or
“<em>Mom!  Kelvin's making a submarine out of the old
refrigerator!</em>”.  Well, middle age has its drawbacks, but at
least you can undertake a project like this without fear of getting
nipped in the bud at the cry, “<em>Mom! Kelvin's down in the
basement bending spacetime!</em>”.  It's important to recall the
distinction between “grownup” and “grown up”.
Let's us grownups head for the basement to bend some serious
spacetime.
</p>

<h2>Matters of Gravity</h2>

<p>
Apart from rare and generally regrettable moments of free-fall, we
spend our entire lives under the influence of the Earth's
gravity, yet rarely, if ever, do we experience the
<em>universal</em> nature of gravitation.  It's a tremendous
philosophical leap from “stuff falls” to “everything in the universe
attracts everything else”.  That leap, made by Isaac Newton in the
17th century, not only allowed understanding the motion of the Moon
and the planets, but inoculated in Western culture the idea that
the universe as a whole was governed by laws humans could discover.
This realisation fueled the Enlightenment and the subsequent
development of science and technology.
</p>

<p>
This page presents a “basement science” experiment which
reveals the universality of gravitation by demonstrating the
gravitational attraction between palpable objects on the human scale.
The experiment deliberately uses only
the crudest and most commonplace materials, permitting
anybody who's so inclined to perform it.
Einstein's 1915 theory of General Relativity explains
gravitation as spacetime curvature created by
matter and energy.  So, by demonstrating how every object
in the universe attracts everything else, we're
<em>bending spacetime in the basement</em>.
</p>

<p>
But, if gravitation is ubiquitous, why was it not discovered millennia
before Newton's 1687 <cite lang="la" xml:lang="la">Philosophiæ
naturalis principia mathematica</cite>?  The reason lies in the
extraordinary <em>weakness</em> of the gravitational force.
</p>

<h2>Feeble Attraction</h2>

<p>
Now you might say, “What do you mean, <em>weak</em>?  I fell down a
flight of stairs a couple of years ago, and gravity sure didn't feel
weak to me!“.  And yet, of the four forces of nature known to
physics, gravitation is the weakest, by the mindboggling factor of
4.17×10<sup>42</sup> (4 followed by 42 zeroes) times weaker than
the electromagnetic force.
</p>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/magrav.jpg" width="202" height="317" alt="Electromagnetism vs. gravity">
The stark difference in the strength of the electromagnetic and
gravitational forces is evident in the picture to the left.  The
bright square in the jaws of the pliers is a 4 mm cubical magnet.  It
is lifting a spherical steel pétanque (a lawn bowling game popular in
southern France and Switzerland) ball which weighs 550 grams.
Consider this picture in the following way: we're pitting our valiant
little magnet, with a volume of 0.064 cubic centimetres, weighing
less than one gram, pulling <b>up</b> with the electromagnetic force,
against the entire Earth, pulling <b>down</b> with gravity.  And the
winner is…the magnet.  A one gram magnet (I'm being generous: I
don't have a scale on which its weight reads other than zero)
out-pulls the Earth, which weighs 5.9736×10<sup>27</sup> grams and has
a volume of more than 10<sup>27</sup> cubic centimetres.
</p>

<p>
(The apparent discrepancy between the ratio of masses of the Earth
and the magnet and the 4.17×10<sup>42</sup> strength ratio
of electromagnetism and gravitation is due to the
fact that only an infinitesimal fraction of the mass of the magnet
contributes to the [electro]magnetic attraction on the ball,
while every gram of the Earth's mass exerts gravitational force.
To obtain the correct ratio of force strengths, one must compare
the gravitational attraction between two electrons at a given
distance with the electromagnetic repulsion
resulting from their charge.  This calculation arrives at the
correct strength ratio for the two forces.)
</p>

<p>
If gravity were not so weak compared to the electromagnetic force, you
wouldn't be reading this page; it's only because the electromagnetic
force that bonds the atoms in your body together so easily defeats the
Earth's gravity that you, along with all other solid objects,
don't slump into a puddle and eventually merge into a perfectly
spherical (actually, slightly ellipsoidal thanks to rotation) planet.
<br>
</p>

<p id="gravcalc">
If your browser supports JavaScript, you can use the following calculator
to determine the gravitational force between any two objects.  The
gravitational force between two masses <em>m</em> and <em>m'</em>
whose centres of gravity are separated by a distance <em>r</em> is
given by:
</p>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/gforce.png" alt="F = G\frac{m m'}{r^2}" width="96" height="42">
</p>

<p>
where <em>G</em>, the <em>gravitational constant</em>, is:
</p>

<p>
6.67408×10<sup>−8</sup> cm³/g-sec²
</p>



<form name="calc1">
Given:<br>
Mass 1: <em>m</em> =  grams<br>
Mass 2: <em>m'</em> =  grams<br>
Distance: <em>r</em> =  centimetres<br>

<br>
Gravitational force: <em>F</em> =  dyne

<p>
Since most folks don't encounter forces in dynes on an everyday basis,
not to mention small fractions of a dyne, it's useful to express
this force in terms of the weight of something one can visualise.
We can calculate the mass of an object from its weight at the
Earth's surface merely by solving the gravitational force
equation above for <em>m</em> and plugging in the Earth's
mass, <em>m<sub>e</sub></em> = 5.9736×10<sup>27</sup> grams,
and the Earth's equatorial radius, <em>r<sub>e</sub></em> =
6.37814×10<sup>8</sup>&nbsp;cm:
</p>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/gravmass.png" alt="m = \frac{{r_e}^2 F}{G m_e}" width="84" height="47">
</p>

<p>
The value below, then, is the mass of an object whose weight
at the Earth's surface equals the gravitational force displayed
in the box above.  This value is automatically updated when you
press the “Calculate” button.
</p>

<p>
Equivalent mass:   grams
</p><p id="monofilament">
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/monofilament.jpg" width="256" height="234" alt="Picture of 0.02 cm nylon monofilament, with micrometer and distance scale">
This mass is equivalent to the following
length of nylon monofilament fishing line with a diameter of 0.02&nbsp;cm
(0.2 millimetres) like that shown at the left (the scale at top shows
centimetres and millimetres; the micrometer holding the segment of
monofilament is, regrettably, calibrated in English inches—one inch
is 2.54 centimetres.
</p>

<p>
Monofilament length:   mm
</p>

<p>
This is small, but it is an object visible to the naked eye (easily
with a modest magnifier), and heavy enough to fall under
the influence of Earth's gravity, as opposed to smaller and
lighter particles of dust and smoke which stay suspended
in the air for long periods of time.
<br>
</p>
</form>

<h2>Do the Twist!</h2>

<p>
Even though the force of gravity between objects of modest mass is
palpable compared to the weight of objects one can see,
detecting such a tiny force seems a daunting, if not hopeless,
endeavour for the basement tinkerer.  Certainly, painstakingly
designed and constructed laboratory apparatus has allowed measuring
the gravitational constant to great precision and verifying the
equivalence of gravitational and inertial mass, and precision
gravitometers are routinely used in oil and gas exploration and
mineral prospecting, but we're trying to see if we can experience
the universal attraction of gravity without any high tech, high
budget gear.
</p>

<p>
Measuring tiny gravitational forces would be easy if we were in deep
space, far from any massive bodies.  The only forces on objects in our
space laboratory, then, would be those entirely under our control.  As
long as we made sure none of the objects we were experimenting with
were magnetic or electrically charged (easily arranged, assuming they
are conductive, simply by bringing them into contact so all excess
charges equilibrate), the only force remaining between objects would
be gravity, so however weak it be, we need only be sufficiently
patient to observe its effects.  (The other two forces, the strong and
weak nuclear interactions, are limited in range to distances on the
order of the size of an atomic nucleus and can be neglected on the
human scale.)
</p>

<p>
What we'd like to do, then, is <em>cancel</em> the Earth's gravity so
that the much smaller gravitational forces between objects that fit in
the basement become evident.  Fortunately, we don't need a 25th
century WarpMan to accomplish this, only a modest helping of 18th
century technology.
</p>

<h3>Differential Cleverness</h3>

<p>
One of the great all-purpose sledgehammers in the toolbox of
physicists and engineers is <em>differential measurement</em>; in
other words, don't worry about the absolute value of something, but
only the <em>difference</em> between things you can measure.  For
example, it is common practice for linemen repairing high-voltage
power transmission lines to work on them, without cutting power, from
insulated baskets raised by a crane.  As long as the lineman is
insulated from the ground, only the voltage difference between his
hands and the line he's working on matters; after attaching the basket
to the line, this is zero, so he might as well be repairing a grounded
conductor.  Now if, while working on a conductor at, say, 200,000
volts above Earth potential, he should happen to touch the tower,
grounded to Earth, that would make for a really bad day.  The trick is
keeping the <em>difference</em> small; you can live your entire life
at 1 million volts, and as long as everything around you is near that
value, there is no way, even in principle, you could discover the
absolute potential.  This is the consequence of all the
forces of physics being <em>gauge invariant</em>:
absolute values don't exist—only differences matter.
</p>

<h3>The Torsion Balance</h3>

<p>
What we're looking for, then, is a device which responds only to
differences in gravitational attraction, canceling out the
much stronger constant gravitational attraction of the
Earth.  We need look no further than a slightly modified version of
the same device Henry Cavendish used in 1798 to first measure
the gravitational constant, <em>G</em> in the equations above.
Ever since, the <em>torsion balance</em> has been the primary tool
used both for measuring the gravitational constant
and testing the <em>equivalence principle</em>, which states
that all bodies experience the same gravitational force regardless
of composition; Einstein's General Relativity showed this to be
a fundamental consequence of the structure of space and time.
</p>

<p>
State of the art torsion balances have measured the gravitational
constant to better than one part per million and confirmed
the equivalence principle to more than 11 decimal places.  This
requires extraordinarily refined and delicate laboratory apparatus and
experimental design, in which a multitude of subtle effects must be
compensated for or canceled out.  We, however, aren't going to
<em>measure</em> anything—we're only interested in <em>observing</em>
universal gravitation.  This allows simplifying the torsion balance to
something we can set up in the basement.
</p>

<p>
The principle of the torsion balance is extremely simple.  Suspend a
horizontal <em>balance arm</em> from a vertical elastic fibre.  At
each end of the balance arm are masses, much denser than material of
the arm, which respond to the gravitational force.  Once the
suspending fibre, balance arm, and weights are set up and brought into
balance, the downward force of gravitation acts equally on every
component.  The balance arm is then free to rotate without any
hindrance from the Earth's gravity.  It is constrained only by air
friction and the <em>torsional strength</em> of the support fibre—its
resistance to being twisted.  We can then place
<em>test masses</em> near the ends of the balance arm and observe
whether the gravitational attraction between them and the masses on
the arm causes the balance arm to move.  When measuring the
gravitational constant one must precisely calibrate the torsional
strength of the fibre, but to simply observe gravitation we need only
make sure the fibre is sufficiently limp to allow the gravitational
force to overcome its resistance to twisting.
</p>

<p>
In practice, the balance arm is <em>so</em> free to move that once any
force sets it into motion, it oscillates for a long period, spinning
round and round if free or bouncing back and forth off the stops if
constrained.  To avoid this we need to <em>damp</em> the system so
kinetic energy acquired by the bar is more rapidly dissipated.  Well,
nothing's more damp than water, so we add a <em>water brake</em> to
the arm which turns in a fixed reservoir.  The resulting drag as the
balance arm moves is much greater than air resistance and frictional
losses in the fibre, and reduces the oscillations to a tolerable
degree.
</p>

<h2 id="GravBal">The Gravitational Balance</h2>

<blockquote>
“The time has come,” the Hacker said,<br>
&nbsp;&nbsp;  “To talk of many things:<br>
Of plastic foam—and tuna cans—<br>
&nbsp;&nbsp;  Of chunks of lead—and string—<br>
And how the force of gravity—<br>
&nbsp;&nbsp;  Will make the balance swing.”
</blockquote>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/appov1.jpg" width="400" height="464" alt="The experimental apparatus">
</p>

<p>
So here's the sophisticated, high-tech, big science apparatus we'll
use to observe the subtle curvature of spacetime.  An aluminium ladder
serves as the support from which the balance arm is suspended.  Nylon
monofilament fishing line, as <a href="#monofilament">shown above</a>,
is knotted to the middle of the third cross-beam at the back of the
ladder, one above the brace bearing the little white box, about which
<a href="#spycam">more later</a>.  Using a ladder or similar movable support frame allows
setting up the balance in the middle of the room.  This is important
because we <em>are</em> bending spacetime in the basement, in this
case an underground storage room at Fourmilab.  Ground level is about
even with the ceiling of this room, about 45&nbsp;cm above the top of the
ventilation window at the upper right of the picture.  An underground
room is ideal because it minimises temperature variations and
vibration which might perturb the balance arm.  Both walls shown in
this picture are sunk into solid limestone rock—if you set up the
balance near one of these walls, the gravitational field from all that
rock will mask that of the test masses, and the balance will assume a
“gravity gradient” position with one of the ends of the bar pointing
toward the wall, and will budge only slightly under the influence of
the test masses.  With the bar in the middle of the room, the tidal
influence of the mass of the wall and the rock behind it is reduced to
a negligible value.  The pipe on the wall at the right is part of the
serpentine pressurised hot water heating system; it was disabled to
prevent air currents from disrupting the balance arm.  In fact, since
the room is underground, the heating system is rarely engaged, and
only in the depths of winter, never in June.
</p>

<h4>The Balance Arm and Cradle</h4>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/appdetail.jpg" width="320" height="297" alt="Detail of balance arm">
The balance arm is a 5 × 5 × 30&nbsp;cm bar of plastic foam, hacked from a
5&nbsp;cm thick slab of packing material with a
<a href="http://www.victorinox.ch/" target="Fourmilab_Bending_Aux">Swiss Army knife</a>.  The
bar is suspended in a cradle made of insulated telephone wire.
The bar is held in its cradle by friction and the indentation made
in the soft plastic foam due to the weights at either end of the
bar; it's easier to adjust the bar for proper alignment this way
than if it were glued to the cradle.
</p>

<h4>The Support Fibre</h4>

<p>
The nylon monofilament that suspends the cradle is barely visible at
the top of the picture—it is fastened by a knot to a loop formed
into the cradle wires by twisting them.  The monofilament is a very
fine “six pound test” (about 3&nbsp;kg capacity) fishing line
manufactured in Japan; a 300 metre spool of it costs about US$9. The
masses which cause the bar to turn when a gravitational force acts
upon them are lead “sinkers” used by fishermen, each
weighing 169 grams.  Two are placed on each end of the balance beam,
giving it a total weight of 676 grams.  Be sure to place the weights
on both ends of the beam simultaneously so it doesn't topple, then
adjust the placement so the beam is horizontal.  Nylon monofilament is
very elastic: when you put the weights on the beam the support line
will stretch and the beam will end up closer to the ground.  You may
have to adjust the attachment of the line to the ladder (or other
support) or, as I did, twist the cradle wires to restore the beam to
the desired height. Finally, when you first hang the beam, it may take
some time to release stresses in the fibre remaining from the
manufacturing process and from its having been rolled onto a spool. 
It's best to let the arm hang for a couple of days, free to turn, to
allow these initial stresses to equalise before attempting any
experiments with gravitation.
<br>
</p>

<h4>The Water Brake</h4>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/appclose.jpg" width="320" height="175" alt="Closeup of beam and water brake">
The height of the beam is important because of the need for it to fit
properly with the water brake.  If the beam is allowed to swing
freely, it will be terribly underdamped—once it starts to swing,
only air friction and the minuscule losses in the fibre will act to
stop it.  This causes the beam to bounce around incessantly, masking
the steady influence of gravitation.  The water brake dissipates the
energy of these unwanted oscillations precisely as an automotive shock
absorber does; the flap's motion does work on a viscous fluid, water
in this case, and deposits its energy in heating it.
<br>
</p>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/brakeflap.jpg" width="200" height="193" alt="Closeup of water brake flap">
The water brake consists of a flap which projects downward from the
balance arm (in this case, a piece of aluminium cut with scissors from
the tray of a “heat and eat” meal, fixed with white glue
into a slot cut into the bottom of the balance beam).  The flap
projects into a reservoir (a tuna fish can) filled with water.  A more
viscous fluid such as salad oil would provide greater damping and less
bouncing than water, but I opted for water since it's less icky to
clean up when the inevitable spill occurs and can be disposed of when
the experiment's done without a visit to the village recycling barrel.
</p>

<p>
If I were rebuilding the balance beam, I would use a longer and
narrower flap and/or a larger and deeper water reservoir.  If
the flap is only slightly smaller than the inside diameter of the
reservoir, you have to be very careful that the flap and reservoir are
centred on the beam.  Otherwise, the flap will touch the edge of
the reservoir and freeze the beam in place, as that frictional force is many
orders of magnitude greater than the gravitational force we wish
the beam to respond to.  The water reservoir can be as large as
you like, as long as it doesn't interfere with placing the
test masses; the larger it is, the less you have to worry
about its being precisely centred.
<br>
</p>

<h4>Test Masses and Supports</h4>

<p>
Blocks of plastic foam support the test masses so their centre of
gravity is at the same height as the masses at the ends of the balance
beam, maximising the attraction.  The foam also keeps the balls from
tending to roll away.  The black rectangle, actually an inverted mouse
pad, serves as a background for the time display superimposed by the
video camera, rendering it more readable when images are reduced in
scale so movies download more rapidly.
</p>

<p>
Use the densest objects you can obtain for the ends of the balance
beam and as test masses: lead sinkers, steel balls, plutonium
hemispheres, etc.  Density is important because the gravitational
force varies as the inverse square of the distance <em>between the
centres of mass</em> of two objects.  With a dense substance, the
centre of mass is closer to the surface, so you can get the centres of
mass closer together and enhance the gravitational force.  For
example, consider two pairs of one-kilogram spheres, the first made of
lead (density 11.3&nbsp;g/cm³), the second of pine wood (density about
0.43&nbsp;g/cm³), placed so the surfaces of each pair of spheres are
1&nbsp;cm apart.  A one kilogram lead sphere has a radius of 2.76&nbsp;cm,
so the centres of mass are separated by 1+2.76×2, or 6.52&nbsp;cm.  A
one kilogram sphere of pine has a radius of 8.22&nbsp;cm, by comparison,
so the centres of mass of the two pine spheres are 1+8.22×2 = 17.44&nbsp;cm
apart.  Taking the square of the ratio of these distances shows that
the gravitational force between the lead spheres is more than 7
times that of the pine spheres.  Since attraction is linear by mass but
inverse square in distance, you're better off with a modest mass of
high-density material than a large mass of a substance with lesser density.
</p>

<p>
It's best to use a nonmagnetic material like lead for the weights
on the ends of the balance arm.  The forces we're working with are
so small that if you use, for example, steel ball bearings on the
arms, you may end up accidentally reinventing the compass instead of
detecting the force of gravity.
</p>

<h4 id="spycam">The Spy Cam</h4>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/bsrmon.jpg" width="256" height="267" alt="BSR surveillance monitor">
“So what's the little white box on the back of the
ladder?”, you ask. Okay….  It's a BSR Model 500
surveillance camera which lets me observe the state of the experiment
as it runs.  The Sony camcorder I use to make movies doesn't generate
video output while recording, so I can't use its video feed to monitor
what's happening.  Popping into the room where the experiment's
running is a no-no—air currents from opening and closing the
door, not to mention walking around in the room could seriously
disrupt things.  The BSR camera and accompanying 13&nbsp;cm (diagonal)
monitor allows keeping tabs on what's happening in a non-intrusive
manner.  I made a custom interface of the BSR camera/monitor cable to
Fourmilab's ubiquitous RJ-45 cabling, so I can place two BSR cameras
anywhere on the site and monitor either from anywhere else.  At the
right is an image from the surveillance camera taken at the end of an
experiment, confirming that the balance beam has come to a stop
against the foam block supporting the mass at the top.  The camera is
sensitive to infrared and includes infrared LEDs to illuminate nearby
objects, and has a microphone linked to a speaker in the monitor. 
This makes it ideal for anxious parents who wish to monitor their
sleeping baby; spacetime hackers can use the infrared illumination to
view the balance beam without the thermal disruption of incandescent
lamps or direct sunlight.  The storage room where I ran this
experiment has fluorescent strip lighting on the ceiling, and I
observed no detrimental effects from its being illuminated.  Of
course, if the room you're using is equipped with that low-tech
miracle called a window, you can dispense with all this complexity.
<br>
</p>

<h2>Gravitation in Action</h2>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/appcam.jpg" width="256" height="192" alt="View showing camera angle used in the movies">
The following time-lapse movies (about 30 seconds per frame) show the
torsion balance responding to the gravitational field generated by two
740 gram competition pétanque balls.  The picture at left shows the
camera angle employed in both movies.  In each, the movie begins with
the bar stationary, in contact with one of the balls or the foam
supporting it.  The balls are then shifted to the opposite corners,
where they attract the lead weights on the ends of the bar.  The bar
then turns, slowly at first and then with increasing speed as it is
accelerated by the gravitational force growing as the inverse square
of the decreasing distance between the masses.  The bar bounces when
it hits the stop on the other end, and finally, after a series of
smaller and smaller bounces as the water brake dissipates its kinetic
energy, comes to rest in contact with the closer ball or support.
This is the lowest energy state, at which the bar will always arrive
at the end of the experiment.
<br>
</p>


<h4>Movie 1</h4>

<p>
<video width="640" height="320" controls="controls">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar1.webm" type="video/webm">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar2.ogg" type="video/ogg">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar2.mp4" type="video/mp4">
    <b>Your browser does not support HTML5 video.</b><br>
    <img src="https://www.fourmilab.ch/gravitation/foobar/figures/movie1.png" width="520" height="145" alt="Frames from first movie"><br>
    <b>Download and play video file:</b><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-1.mpg">MPEG format (600 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-1.mov">QuickTime format with JPEG compression (1584 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-1r.mov">QuickTime format with Apple Video (RPZA) compression (3380 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar1.mp4">MP4 format (h.264) (7925 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar1.ogg">OGG format (Theora/Vorbis) (7092 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar1.webm">WEBM format (VP8/Vorbis) (6368 Kb)</a>
</video>
</p>

<h4>Movie 2</h4>

<p>
<video width="640" height="320" controls="controls">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar2.webm" type="video/webm">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar2.ogg" type="video/ogg">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar2.mp4" type="video/mp4">
<b>Your browser does not support HTML5 video.</b>
    <img src="https://www.fourmilab.ch/gravitation/foobar/figures/movie2.png" width="520" height="147" alt="Frames from second movie"><br>
    <b>Download and play video file:</b><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-2.mpg">MPEG format (740 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-2.mov">QuickTime format with JPEG compression (1779 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-2r.mov">QuickTime format with Apple Video (RPZA) compression (3610 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar2.mp4">MP4 format (h.264) (9094 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar2.ogg">OGG format (Theora/Vorbis) (8222 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar2.webm">WEBM format (VP8/Vorbis) (7120 Kb)</a>
</video>
</p>

<p>
Pay no attention to the plastic robot ant—she's just curious.
It's a <a href="https://www.fourmilab.ch/documents/hackants13.html" target="Fourmilab_Bending_Aux">long story</a>.
</p>

<h2>A Tide in the Affairs of Man</h2>

<p>
What we've demonstrated by these experiments is the universality of
gravitation; there is nothing special about the Earth that makes
objects fall toward it.  Everything attracts everything else;
the Earth's attraction is greater simply because the Earth is
so much more massive than the objects we encounter in everyday
life.  Only by canceling out the Earth's gravitation by means of
a torsion balance were we able to observe the gravitational
attraction between masses of less than a kilogram.
</p>

<p>
The universality of gravitation means that every object in the
universe is interlinked in a web of mutual attraction; the universe is
transparent to gravitation.  The most distant galaxies exert a pull on
you, as you do upon them—immeasurably tiny to be sure, but
present just the same.  From a practical standpoint, universality
means there's no way to shield your torsion balance from the
gravitational attraction of masses in its vicinity; you can only set
it up sufficiently far from other massive objects so the attraction of
the test masses predominates.  One interesting massive object to
consider is yourself (I use “massive” only in the sense of
"possessing mass", not pejoratively; if you took it that way, perhaps
you should check out my on-line
<a href="https://www.fourmilab.ch/hackdiet/" target="Fourmilab_Bending_Aux">diet book</a>).
</p>

<p>
Using the <a href="#gravcalc">gravitational force calculator</a>
earlier in this document, we can compute the gravitational attraction
between the 338 gram mass at the end of the balance beam and the 740
gram test mass at the 14&nbsp;cm distance when the beam is at the midpoint
between the masses to be 0.000085 dynes.  Now suppose you're crouching
down in order to move the test masses, with your centre of gravity one
metre from the closer test mass, and that you weigh 65&nbsp;kg.  Plugging
these numbers into the calculator shows that your own gravitational
attraction on the nearer end of the beam is 0.000147 dynes, 1.7 times
as great as that of the test mass.  Your actual influence on the
motion of the balance arm is less, however, since what matters is the
<em>difference</em> in force exerted on the masses at the two ends of
the balance arm.  Since your centre of gravity is more distant than
the test masses, the difference is less.
</p>

<p>
Let's work it out.  Assume the centres of gravity of the two masses on
the balance arm are 25&nbsp;cm apart, and that you're crouching so the arm
makes a 45° angle with your centre of gravity, one metre from the
centre of the arm.  The nearer mass is then 17.68&nbsp;cm closer than the
more distant one and the difference in gravitational attraction (or <em>tidal
force</em>) on the two masses is the difference in attraction on a
mass 91.16&nbsp;cm distant and one 108.84&nbsp;cm away.  The calculator gives
the attraction on the near end of the arm as 0.0001764 dynes and the
far end as 0.0001238 dyne, with a difference of 0.0000527 dynes.
Now recall that the force exerted by the test mass was 0.000085 dynes,
only 1.6 times as large, so even taking into account the reduced tidal
influence due to your greater distance, the force you exert on the
balance cannot be neglected.  This makes it essential to remotely monitor
the experiment so your own mass doesn't disrupt it.
</p>

<p>
In practice, air currents due to your motion and resulting from convection
driven by your body's temperature being above room temperature may exert
greater forces on the balance arm than the gravitational field generated
by your mass.  In any case, it's best to let the experiment evolve
on its own, observed from elsewhere.
</p>

<img src="https://www.fourmilab.ch/gravitation/foobar/figures/archimede.png" width="161" height="250" alt="Archimedes">
<h2><em>Enlightenment Deferred:</em><br>An Historical Speculation</h2>

<p>
Nineteen centuries elapsed between the death of Archimedes in
212&nbsp;<span>B.C.</span> and the publication of
Newton's <em>Principia</em> in 1687.  Given the philosophical
implications of Newton's theory, it's interesting to speculate what
might have happened had Archimedes discovered the universal nature of
gravitation.
</p>

<p>
To do this, he would have had to suspect that attraction was
universal, suggest an experiment to confirm this, and perform that
experiment, with results validating the hypothesis.  Here is
information in Archimedes' possession which might have suggested the
universality of gravitation.
<br>
</p>

<ul>
    <li>    The Earth is a sphere.  The shape of its shadow on the Moon
	    during a lunar eclipse demonstrated this, and was
	    confirmed by the next item.  The assertion that “the
	    ancients thought the world was flat” is
	    nonsense—Columbus didn't “discover the world
	    was round”: he discovered that his own estimate of
	    the diameter of the world was wrong by a factor of two
	    compared to that available to Archimedes; if he hadn't
	    inadvertently discovered the New World, he and his
	    unfortunate crew would have died of starvation far from
	    the coast of China.</li>

    <li>    The approximate radius of the Earth.  Around
	    250&nbsp;<span>B.C.</span>, by measuring the
	    difference in the angle of sunlight at noon on the June
	    Solstice, which illuminated the bottom of a well at Syene
	    (now Aswan) Egypt near the Tropic of Cancer, with the
	    length of the shadow cast on the same date and time by a
	    vertical pillar in Alexandria, a known distance to the
	    North, Eratosthenes determined the Earth's circumference. 
	    Archimedes corresponded extensively with Eratosthenes and
	    other scholars in Alexandria, and knew of this result. 
	    Archimedes himself calculated the value of π as between 3
	    10/71 and 3 1/7, with a mean value of 3.14185, allowing
	    accurate computation of the Earth's radius from the
	    circumference.</li>

    <li>    The approximate mass of the Earth.  Assuming the Earth
            to have the same density as common rocks such as
            limestone (2.7&nbsp;g/cm³) gives an estimate within a
            factor of two of the correct value.  The actual density of
            the Earth is 5.52&nbsp;g/cm³.</li>

    <li>    How to calculate with very large numbers.  
            In <cite>The Sand Reckoner</cite>
	    (<span lang="el" xml:lang="el">Ψαμμίτης</span>)
            in 215&nbsp;<span>B.C.</span>, Archimedes
            invented a positional number system which allowed writing
            and calculating with arbitrarily large quantities, which he
            demonstrated by calculating not only how many grains of
            sand would fill the volume of the Earth, but how many
            grains of sand would fill the entire universe (which the
            Greeks estimated to be about one light year in diameter).
            The latter number, about 10<sup>63</sup>, is comfortably
            larger than any of the quantities associated with
            gravitation.</li>
             
    <li>    The existence of electrostatic and magnetic forces which
            appeared to act at a distance.  The inverse square
            behaviour of these forces was not
            known in antiquity, however.</li>
</ul>

<p>
Suppose then that, given these facts, Archimedes embarked upon the
following chain of reasoning.
</p>

<ul>
    <li>    Objects fall, not in a fixed direction, but toward the
            centre of our world.  If they fell in a fixed direction,
            if I dropped a rock down a well in the south of
            Egypt and a well in Syracuse, separated by a
            substantial percentage of the world's circumference,
            one would hit the wall of the well before striking the
            bottom.  This doesn't happen, so objects fall everywhere
            toward the centre of the world.</li>

    <li>    Why does the world attract falling objects?  Is there
            something special which endows it with
            this property?  Yet the world seems to be made of the same
            substances as everything else.  What is the difference
            between the world and a rock?</li>

    <li>    <span lang="el" xml:lang="el" title="Eureka, eureka!">Εὕρηκα,
    	    εὕρηκα!</span>
            The world is <em>much larger</em> than
            a rock!  Perhaps <em>every object</em> attracts
            <em>every other</em>.  We only feel the world's attraction
            because it is so large.</li>

    <li>    But if this is so, might the celestial bodies be objects
            no different from the world and its inhabitants, and subject
            to the same forces?</li>

    <li>    If attraction is universal, might an artificer
            be able to build a device to show it?</li>

    <li>    Such a device must be isolated from falling down.  Perhaps
            a horizontal balance, free to turn in either direction,
            with weights at each end to be attracted to objects
            in their vicinity….</li>
</ul>

<h3>The Archimedes Apparatus</h3>

<p>
<img src="https://www.fourmilab.ch/gravitation/foobar/figures/archapp.jpg" width="400" height="300" alt="Balance built from materials available to Archimedes">
It seems plausible, then, given the knowledge at hand and a chain of
inference which, in retrospect at least, appears straightforward, that
Archimedes could have suspected the universality of gravitation.  But
could he have <em>demonstrated it</em>?  Unlike many scholars in
ancient Greece who contented themselves with philosophical arguments,
Archimedes was an intensely practical man, renowned as a military
engineer as well as a mathematician and philosopher.  His laws of the
lever and buoyancy were tested experimentally, and so we should expect
he would subject any inference about gravitation to experimental
confirmation.  Now that we've succeeded in bending spacetime in the
basement with common household materials of the late 20th century,
let's see if the experiment can be done using only materials
Archimedes might have employed.
<br>
</p>

<p>
Let's try to redesign the torsion balance using only materials
available in antiquity.
</p>

<dl>
<dt>The Balance Arm</dt>
    <dd>Instead of plastic foam, we use a strip of pine wood,
	2&nbsp;cm wide, ½&nbsp;cm high, and 30&nbsp;cm long. 
	Notches are cut in the edges of the beam near each end to
	secure the support cradle. For masses at the ends of the
	balance beam we may continue to use lead, which was produced
	in Egypt in the 2nd millennium <span>B.C.</span>
	and in Europe no later than the 6th century <span>B.C.</span> As the discoverer of specific
	gravity, Archimedes would understand the merit in using the
	densest substance available. (Gold, almost twice as dense as
	lead, would be an even better choice.  Perhaps King Hiero of
	Syracuse, grateful to Archimedes for exposing the goldsmith
	who adulterated the gold in his crown with silver, might have
	contributed gold weights for the balance beam, thereby taking
	the first small step down the road to government-funded Big
	Science.  Wishing to remain in the domain of basement science,
	we shall forgo royal subsidies and soldier on with lead.)</dd>

<dt>The Cradle</dt>
    <dd>To support the balance arm, we substitute twine
        made of vegetable fibre for telephone wire.  Actually,
        since copper was known for thousands of years before
        the Greeks, a lightweight copper cradle could have been
        made, but it would have been more work to fabricate
        and has no advantage compared to the twine.  Thread,
        string, and rope were made from a variety of natural
        fibres by all ancient cultures.</dd>

<dt>The Support Fibre</dt>
    <dd>The support fibre is the most difficult component to
        replace with a 3rd century <span>B.C.</span> analogue.  Nylon
        monofilament so closely approaches the ideal of a
        massless support free of torsional resistance that
        doing without it requires experimenting with a variety
        of alternatives and compromising with the shortcomings
        of whatever is selected.  I finally settled on a very thin 
        vegetable fibre support “peeled” from a piece of
        twine by unwinding it.  The fibres you find in rope or
        twine are a variety of lengths—you have to separate them
        and then select individual fibres long enough to support
        the balance arm.  To obtain sufficient strength, I used
        four separate fibres selected from the twine.  If the
        rope or twine has been twisted or braided, you'll have
        to let the fibre hang for an extended period of time (three
        or four days at least) to release its internal stresses.
	
    	<p> In choosing and using any natural fibre support, you have to
        approach the project with a willingness to learn by trial and
        error and a great deal of patience.  Each kind of fibre has
        its own “personality”, and the quirks can take some time to
        understand.  For example, many plant and animal fibres are
        sensitive to moisture—if a summer thunderstorm increases the
        relative humidity from 50% to 99% in the space of an hour,
        your balance arm may start to swing wildly as the fibre
        absorbs moisture from the air.  Further,
        plant fibres tend to tear, both under tensile stress and
        when twisted.  This can cause your balance beam to
        “spontaneously” shift to a different equilibrium point or,
        after having been displaced, return to a different location
        than the starting point.</p>

        <p>Would Archimedes have appreciated the importance of choosing a
        supple and well-behaved support fibre?  I think so.  From the
        radius of the Earth, which he knew, and assuming its density
        to be the same as rocks such as limestone (about half the
        actual density of the Earth), the ratio of the Earth's
        mass to that of whatever test masses were employed could be
        estimated within a factor of two.  Making the simplest
        assumption (which has the additional merit of being correct)
        that attraction is proportional to mass, it is clear that
        the force acting on the masses at the ends of the balance
        arm is minuscule, so a fibre which offers the least possible resistance
        to twisting should be employed.</p></dd>

<dt>Test Masses</dt>
    <dd>Lead or gold (<em>Monarch!  Archimedes is doing natural
        philosophy in the bathtub again!</em>) test masses would be
        preferable, but to show how robust this experiment is I opted
        for a couple of rocks—two kilogram paving stones like those
        which border every highway in Switzerland, where roads are so
        built to last that Julius Cæsar would shake his head in
        admiration.</dd>

<dt>No Water Brake</dt>
    <dd>After experimenting with a variety of vegetable fibres,
        I decided to proceed without a water brake for this
        experiment.  The balance arm is more prone to oscillation,
        but the friction in the support fibre, much greater than
        in synthetic nylon monofilament, damps the oscillations
        adequately.  Allowing the lead weights on the balance arm
        to collide with the stone test masses also dissipates
        substantial energy, further reducing the need for a brake.</dd>

<dt>Unreconciled Residua</dt>
    <dd>I didn't bother to replace the aluminium ladder with a support
        Archimedes might have used.  Any carpenter could fashion a
        more suitable replacement for the ladder.  In fact, a wooden
        saw-horse would have been better for all these experiments,
        but I don't have one and didn't feel like making one from
        various pallets and spare lumber in the High Bay.

    	<p>The concrete floor would also seem strange to Archimedes, but
        it is irrelevant to the experiment.  A smooth stone floor, as
        existed for millennia before, would produce identical results.</p></dd>

</dl>

<h3>The Archimedes Experiments</h3>

<p>
The following movies demonstrate universal gravitation with an apparatus
which, as argued above, could have been conceived by Archimedes and
built from materials he could readily obtain.
</p>

<h4>Movie 3</h4>

<p>
<video width="640" height="320" controls="controls">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar3.webm" type="video/webm">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar3.ogg" type="video/ogg">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar3.mp4" type="video/mp4">
    <b>Your browser does not support HTML5 video.</b><br>
    <img src="https://www.fourmilab.ch/gravitation/foobar/figures/movie3.png" width="520" height="145" alt="Frames from first Archimedes movie"><br>
    <b>Download and play video file:</b><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-3.mpg">MPEG format (329 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-3.mov">QuickTime format with
    	JPEG compression (825 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-3r.mov">QuickTime format with
    	Apple Video (RPZA) compression (2126 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar3.mp4">MP4 format (h.264) (5364 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar3.ogg">OGG format (Theora/Vorbis) (4321 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar3.webm">WEBM format (VP8/Vorbis) (4313 Kb)</a>
</video>
</p>

<h4>Movie 4</h4>

<p>
<video width="640" height="320" controls="controls">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar4.webm" type="video/webm">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar4.ogg" type="video/ogg">
<source src="https://www.fourmilab.ch/gravitation/foobar/videos/foobar4.mp4" type="video/mp4">
    <b>Your browser does not support HTML5 video.</b><br>
    <img src="https://www.fourmilab.ch/gravitation/foobar/figures/movie4.png" width="520" height="145" alt="Frames from second Archimedes movie"><br>
    <b>Download and play video file:</b><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-4.mpg">MPEG format (216 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-4.mov">QuickTime format with
    	JPEG compression (543 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/movie-4r.mov">QuickTime format with
    	Apple Video (RPZA) compression (1383 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar4.mp4">MP4 format (h.264) (3415 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar4.ogg">OGG format (Theora/Vorbis) (2669 Kb)</a><br>
    <a href="https://www.fourmilab.ch/gravitation/foobar/videos/foobar4.webm">WEBM format (VP8/Vorbis) (2741 Kb)</a>
</video>

</p><h3>The Archimedes Enlightenment?</h3>

<p>
Suppose this had happened.  Consider how easily it could have.
Would such a discovery in Archimedes' time have had an impact
comparable to Newton's or, occurring in a very different social
and intellectual milieu, would it have been regarded as no more than
a curiosity?  How might human history have played out had the
Enlightenment begun 1900 years before Newton?
</p>


<h2>References</h2>

<p>
	Click on titles to order books on-line from
	<br>
	    <a href="http://www.amazon.com/?tag=fourmilabwwwfour" target="Amazon_Fourmilab"><img src="https://www.fourmilab.ch/images/icons/amazon.png" width="90" height="29" alt="Amazon.com"></a>
    </p>

<dl>

<dt>Archimedes.  <cite>The Sand Reckoner</cite>.  English
translation in Newman, James R.
<cite><a href="http://www.amazon.com/dp/0486432688/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">The World of Mathematics</a></cite>.
Mineola, NY: Dover, 2003.
ISBN 978-0-486-43268-7.</dt>
<dd></dd>

<dt>Carroll, Lewis [Charles Dodgson].
<cite><a href="http://www.amazon.com/dp/0553213458/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">Alice's Adventures in Wonderland
and Through the Looking Glass</a></cite>.
New York: Bantam, 1984.
ISBN 978-0-553-21345-4.</dt><dd></dd>

<dt>Cavendish, Henry.  “Experiments to determine the density
of the Earth”.  <cite>Philosophical Transactions of the Royal
Society of London, Part II</cite> (1798), pp. 469–526.</dt><dd></dd>

<dt>Eötvös, Loránd von.
“<span lang="de" xml:lang="de">Über die Anziehung der Erde auf verschiedene
Substanzen</span>.”
<cite>Math. Naturw. Ber. aus Ungarn</cite> 8, 65–68 (1889).</dt>
<dd>Eötvös (his Hungarian surname is pronounced like
“ut-vush” in English) improved the original Cavendish
torsion balance to its modern form and used it to
test the equivalence principle (in his final publication on
the topic in 1922) to better than one part in 5×10<sup>10</sup>.</dd>

<dt>Feynman, Richard P., Robert B. Leighton, and Matthew Sands.
<cite><a href="http://www.amazon.com/dp/0465023827/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">The Feynman Lectures on Physics</a></cite> Vol. 1 (Chapter 7).
New York: Basic Books, [1963] 2011.
ISBN 978-0-465-02382-0.</dt>
<dd></dd>

<dt>Gamow, George.
<cite><a href="http://www.amazon.com/dp/0486257673/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">The Great Physicists from Galileo to Einstein</a></cite>.
Mineola, New York: Dover, 1988.
ISBN 0-486-25767-3.  (Originally published by
Harper in 1961 as <cite>Biography of Physics</cite>.)</dt><dd></dd>

<dt>Hogben, Lancelot.
<cite><a href="http://www.amazon.com/dp/039331071X/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">Mathematics for the Million</a></cite> (Chapter 12).
New York: W.W. Norton, [1937, 1967], 1993.
ISBN 978-0-393-31071-9.</dt><dd></dd>

<dt>Icikovics, Jean-Pierre and Nicolas Journet, eds.
“<em lang="fr" xml:lang="fr">Archimède</em>.”
<cite lang="fr" xml:lang="fr">Les Cahiers de Science&amp;Vie: Les
pères fondateurs de la science</cite> 18 (December 1993).
ISSN 1157-4887.</dt><dd></dd>

<dt>Kutz, Myer, ed.
<cite>
<a href="http://www.amazon.com/dp/1118112822/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">
Mechanical Engineers' Handbook</a></cite>, 4th ed.
New York: Wiley, 2015.
ISBN 978-1-118-11282-3.</dt><dd></dd>

<dt>Lide, David R., ed.
<cite><a href="http://www.amazon.com/dp/1498754287/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">CRC Handbook of Chemistry and Physics</a></cite>, 97th ed.
Boca Raton, Florida: CRC Press, 2016.
ISBN 978-1-4987-5428-6.</dt><dd></dd>

<dt>Newton, Isaac.  <cite lang="la" xml:lang="la">Philosophiæ naturalis principia
mathematica</cite>.  London: Streater, 1687.  English
translation by A. Motte, revised by A. Cajori,
<cite>Sir Isaac Newton's Mathematical Principles of Natural
Philosophy and His System of the World</cite>, 1729.  A
modern edition is published by the University
of California Press as
<a href="http://www.amazon.com/dp/0520290887/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">ISBN 978-0-520-29088-4</a>.
</dt><dd></dd>

<dt>Rucker, Rudy.
<cite><a href="http://www.amazon.com/dp/0395468108/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">Mind Tools</a></cite>.
Boston: Houghton Mifflin, 1987.
ISBN 978-0-395-46810-4.</dt><dd></dd>

<dt>Trifonov, D. N., and V. D. Trifonov.
<cite><a href="http://www.amazon.com/dp/0828530033/?tag=fourmilabwwwfour" target="Amazon_Fourmilab">Chemical Elements: How they Were Discovered</a></cite>.
Translated from the Russian by O. A. Glebov and I. V. Poluyan.
Moscow: Mir Publishers, 1982.
<br>
</dt><dd></dd>

</dl>

<h3><a href="https://www.fourmilab.ch/gravitation/">Other gravitation resources on this site</a></h3>
<h3><a href="https://www.fourmilab.ch/index.html">Fourmilab home page</a></h3>

<hr>
<address>
by <a href="https://www.fourmilab.ch/">John Walker</a><br>
</address>
July 8th, 1997<br>
Updated: January 2017


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[US Green-Card Holder and Columbia Student Arrested by ICE for Protest (124 pts)]]></title>
            <link>https://www.reuters.com/world/us/us-authorities-arrest-palestinian-student-protester-columbia-university-students-2025-03-09/</link>
            <guid>43327071</guid>
            <pubDate>Mon, 10 Mar 2025 22:54:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.reuters.com/world/us/us-authorities-arrest-palestinian-student-protester-columbia-university-students-2025-03-09/">https://www.reuters.com/world/us/us-authorities-arrest-palestinian-student-protester-columbia-university-students-2025-03-09/</a>, See on <a href="https://news.ycombinator.com/item?id=43327071">Hacker News</a></p>
Couldn't get https://www.reuters.com/world/us/us-authorities-arrest-palestinian-student-protester-columbia-university-students-2025-03-09/: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[What made the Irish famine so deadly (288 pts)]]></title>
            <link>https://www.newyorker.com/magazine/2025/03/17/rot-padraic-x-scanlan-book-review</link>
            <guid>43326275</guid>
            <pubDate>Mon, 10 Mar 2025 21:24:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newyorker.com/magazine/2025/03/17/rot-padraic-x-scanlan-book-review">https://www.newyorker.com/magazine/2025/03/17/rot-padraic-x-scanlan-book-review</a>, See on <a href="https://news.ycombinator.com/item?id=43326275">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>In the first act of the wittiest Irish play of the nineteenth century, Oscar Wilde’s “Importance of Being Earnest,” there is much ado about a shortage of food. The fearsome Aunt Augusta is coming to tea, but we have watched the feckless Algernon eat all the cucumber sandwiches prepared for her by his manservant, Lane. The servant saves the day when the aunt arrives, expecting her sandwiches, by lying: “There were no cucumbers in the market this morning, sir. I went down twice.” Algy responds with high emotion: “I am greatly distressed, Aunt Augusta, about there being no cucumbers, not even for ready money.”</p><p>The play, first performed in 1895, is subtitled “A Trivial Comedy for Serious People,” and this scene is an exquisite exercise in trivialization. Wilde is imagining what a food crisis might look like if it were happening among the English upper classes rather than in his home country. The panic and dread of searching for nourishment and finding none is transformed into an airy nothing: a fake story about the nonexistent dearth of a plant that has relatively little nutritional value, and a charade of great distress. The comedy is so wonderfully weightless as to seem entirely free from the gravitational pull of the history that had preoccupied Wilde’s family, and of a place called Ireland, where the unfortunately unavailable food was not the cucumber but the potato.</p><p>In 1854, when Oscar was born, his father was also engaged in the sublimation of horror. William Wilde, a pioneering surgeon and medical statistician, was the assistant commissioner for the census of Ireland that was conducted in 1851—the one that recorded the disappearance from what was then the richest, most powerful, and most technologically advanced country in the world, the United Kingdom of Great Britain and Ireland, of some one and a half million people. They had died in, or fled from, what the Irish poor called in their native language An Gorta Mór, the Great Hunger, a catastrophe that was then continuing into its sixth year.</p><p>The year Oscar turned two, William published the results of his immersion in the minutiae of the famine as an official report of the British Parliament. The two-volume work is called the “Tables of Deaths.” Because the census relied on the information given by survivors, and thus did not count many victims whose entire families had been wiped out or had left Ireland as desperate refugees, it actually underestimated the number of lives lost in the Great Hunger.</p><p>William and his assistants were nonetheless able to build solid pillars of data, mass death broken down into discrete numerals to represent sexes, ages, locations, seasons, years, and causes of mortality, which included starvation, scurvy, dysentery, cholera, typhus, and relapsing fever. The tables of deaths occupy hundreds of double-page spreads, laid out with exemplary clarity and precision. They speak of order, regularity, the capacity of Victorian governance for infinite comprehension. The staggering rise in mortality may have demanded extraordinary efforts from the statisticians, but they were equal to their task. They tabulated calamity, confined it safely within vertical and horizontal lines on the pages of sturdily bound official tomes. There are no names of human beings.</p><p>This dutiful, sober, and rigorously unemotional work might also have been titled “The Importance of Being Earnest,” albeit without a hint of Oscar’s playful irony. William’s safely anonymized figures are, in their way, just as weightless as Oscar’s sharply amusing figments. In the introduction to his volume, he uses the remote and clinical language of officialdom: “The labours of the Commissioners in this particular portion of their work greatly exceed those connected with the Tables of Deaths published in the Census of 1841, chiefly owing to the extraordinary increase in the numbers of deaths.” It almost seems as though the reader’s sympathy is being evoked not for the people behind the statistics but for the commissioners who had to work so hard to categorize the circumstances in which those people expired.</p><p>There was also a third kind of language used to cloak the horrors of the famine: an accusatory rage against the British authorities who had failed to prevent it. As it happens, it was another Wilde, Oscar’s mother and William’s wife, Jane, writing as a passionate and incendiary Irish nationalist under the pen name Speranza, who helped to invent that language. In 1847, she published a poem about the famine whose voice is that of the “wretches, famished, scorned,” who warn their oppressors that their deaths will be avenged: “But our whitening bones against ye will rise as witnesses,&nbsp;/&nbsp;From the cabins and the ditches, in their charred, uncoffin’d masses,&nbsp;//&nbsp;A ghastly, spectral army, before the great God we’ll stand,&nbsp;/&nbsp;And arraign ye as our murderers, the spoilers of our land.”</p><p>Jane’s fiercely unforgiving tone was adopted by militant Irish nationalists for whom the famine stood as the ultimate proof of English perfidy. But in her poem, too, the victims appear as an undifferentiated mass. Her avenging army of the undead is in its own way just as distanced as the numbers in her husband’s tables.</p><p>One difficulty in writing about the Great Hunger is scale. There have been, in absolute terms, many deadlier famines, but as Amartya Sen, the eminent Indian scholar of the subject, concluded, in “no other famine in the world [was] the proportion of people killed&nbsp;.&nbsp;.&nbsp;. as large as in the Irish famines in the 1840s.” The pathogen that caused it was a fungus-like water mold called <em>Phytophthora infestans</em>. Its effect on the potato gives “Rot,” a vigorous and engaging new study of the Irish famine by the historian Padraic&nbsp;X. Scanlan, its title. The blight began to infect the crop across much of western and northern Europe in the summer of 1845. In the Netherlands, about sixty thousand people died in the consequent famine—a terrible loss, but a fraction of the mortality rate in Ireland. It is, oddly, easier to form a mental picture of what it might have been like to witness the Dutch tragedy than to truly convey the magnitude of the suffering in Ireland.</p><p>Another difficulty is that the Great Hunger was not just an Irish event. It bled far beyond its own borders, seeping into the national narratives of the rest of the Anglophone world. Only about one in three people born in Ireland in the early eighteen-thirties would die at home of old age. The other two either were consumed by the famine or joined the exodus in which, between 1845 and 1855, almost 1.5 million sailed to North America and hundreds of thousands to Britain and Australia, making the Irish famine a central episode in the history of those countries, too.</p><p>There has long been something inarticulable about this vast human disaster. In a preface to the monumental “Atlas of the Great Irish Famine,” published in 2012, the former President of Ireland, Mary McAleese, observed that “for many years the event was cloaked in silence, its memory for the most part buried or neglected.” The editors of the “Atlas” noted that, until recently, “there was a strange reluctance on the part of historians, historical geographers and others to address” the vast archival records. Right up to the nineteen-nineties, the annual rate of publication of scholarly papers on the subject of the famine never rose above a half-dozen.</p><p>The novelist Colm Tóibín suggested, in 1998, that the problem “may lie in the relationship between catastrophe and analytic narrative. How do you write about the Famine? What tone do you use?” He speculated, moreover, that the Great Hunger had created a great divide even in Irish consciousness. If, he said, he were to write a novel about his home town, Enniscorthy, that took place after the famine years, “I would not have to do much research”—because the place would resemble the one he grew up in. But he would find the years before and during the event itself “difficult to imagine.”</p><p>It is easy to sympathize with this difficulty. The famine set in motion a process of depopulation—even now, after many decades of growth, the island has a million fewer inhabitants than it had in 1841. It disproportionately affected those who spoke the Irish language, creating an Anglophone Ireland. It led ultimately to a radical reform of land ownership, which passed to a new class of Catholic farmers. The profoundly uncomfortable truth is that Ireland started to become modern when its poorest people were wiped out or sent into exile—a reality that is too painful to be faced without deep unease.</p><p>Even before the potato blight, there was a degree of hunger among the Irish rural underclass that seemed like an ugly remnant of a receding past. In 1837, two years after Alexis de Tocqueville published the first volume of “Democracy in America,” his lifelong collaborator, Gustave de Beaumont, went to Ireland, a country the two men had previously visited together. The book de Beaumont produced in 1839, “L’Irlande: Sociale, Politique et Religieuse,” was a grim companion piece to his friend’s largely optimistic vision of the future that was taking shape on the far side of the Atlantic. De Beaumont, a grandson by marriage of the Marquis de Lafayette, understood that, while the United States his ancestor had helped to create was a vigorous outgrowth of the British political traditions he and de Tocqueville so admired, Ireland was their poisoned fruit. America, he wrote, was “the land where destitution is the exception,” Ireland “the country where misery is the common rule.”</p><p>The problem was not that the land was barren: Scanlan records that, “in 1846, 3.3 million acres were planted with grain, and Irish farms raised more than 2.5 million cattle, 2.2 million sheep and 600,000 pigs.” But almost none of this food was available for consumption by the people who produced it. It was intended primarily for export to the burgeoning industrial cities of England. Thus, even Irish farmers who held ten or more acres and who would therefore have been regarded as well off, ate meat only at Christmas. “If an Irish family slaughtered their own pig, they would sell even the intestines and other offal,” Scanlan writes. He quotes the testimony of a farmer to a parliamentary commission, in 1836, that “he knew other leaseholders who had not eaten even an egg in six months. ‘We sell them now,’ he explained.”</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>In the mid-nineteenth century, Scanlan notes, fewer than four thousand people owned nearly eighty per cent of Irish land. Most of them were Protestant descendants of the English and Scottish settlers who benefitted from the wholesale expropriation of land from Catholic owners in the seventeenth century. Many lived part or all of the year in England. They rented their lands to farmers, a large majority of whom were Catholics. Scanlan points out that, whereas in England a tenant farmer might pay between a sixth and a quarter of the value of his crops in rent, in Ireland “rent often equalled the entire value of a farm’s saleable produce.”</p><p>Landlords could extract these high rents because their tenants, in turn, made money by subletting little parcels of land, often as small as a quarter of an acre, to laborers who had none of their own. The whole system was possible only because of the potato. Most years, those micro farms could produce enough of this wonder crop to keep a family alive. It provided enough calories to sustain hardworking people and also delivered the necessary minerals and vitamins. By the eighteen-forties, as many as 2.7 million people (more than a quarter of the entire population) were surviving on potatoes they grew in tiny fields that encroached on ever more marginal land, clinging to bogs and the sides of stony mountains.</p><p>De Beaumont, noting that these laboring families had to endure a “life of fasting” when their store of potatoes ran out in the summer or when the crop was scanty, grasped the precarity of this situation. One of his most striking insights was that the exceptionally cruel nature of Irish poverty made it seem incredible to outsiders: “The word <em>famine</em>, employed to describe the misery of Ireland, appeared to them a metaphorical expression for great distress, and not the exact term to express the state of human beings <em>really</em> famishing and perishing from sheer want of food.” It was, he suggested, particularly in England that “persons were pleased to keep themselves in this state of doubt.”</p><p>Yet de Beaumont himself felt he could not describe what he saw on his travels. Words were not adequate to the task. Adopting a disembodied third-person voice, he asked, “Shall he relate what he saw?—No. There are misfortunes so far beyond the pale of humanity, that human language has no words to represent them.” If he were to “recall the sinister impressions produced” by the contrasts between the wealth of the Irish landowning aristocracy and the destitution of the rural poor, “he feels that the pen would fall from his hands, and that he would not have the courage to complete the task which he has undertaken to accomplish.”</p><p>This feeling that Irish reality was at once incredible and indescribable became almost a standard response to the Great Hunger. In one of the first widely circulated eyewitness accounts, an open letter written to the Duke of Wellington by Nicholas Cummins, a magistrate in Cork, Cummins struggled to articulate what he saw when he entered a settlement outside Skibbereen, in December, 1846. “I was surprised to find the wretched hamlet apparently deserted,” he wrote. “I entered some of the hovels to ascertain the cause, and the scenes which presented themselves were such as no pen or tongue can convey the slightest idea of.&nbsp;.&nbsp;.&nbsp;. It is impossible to go through the details.”</p><p>Asenath Nicholson, a woman from Vermont who began a one-person relief operation in Ireland, in 1847, recorded a moment when a man invited her to inspect a cabin where a mother, a father, and their two children lay dead: “The man called, begging me to look in. I did not, and could not endure, as the famine progressed, such sights&nbsp;.&nbsp;.&nbsp;. they were too real, and these realities became a dread.”</p><p>The Great Hunger was excessively real to many European and North American observers because it was in the wrong place at the wrong time. It was happening not in India or China but in what was supposed to be the Empire’s heartland. Its victims were white, Christian, and (notionally, at least) subjects of the United Kingdom with the same rights as the inhabitants of Hampstead Heath or Tunbridge Wells.</p><p>It was also an affront to the liberal Victorian certainty that progress was linear and inevitable. The British Prime Minister Lord John Russell told the House of Commons, in January, 1847, that “the famine is such as has not been known in modern times; indeed, I should say it is like a famine of the thirteenth century acting upon the population of the nineteenth.” What the British ruling class could not grasp was that the Irish famine was a phenomenon of “modern times,” the product, as Scanlan convincingly argues, of a particularly virulent form of exploitative capitalism that left millions of people utterly exposed to the instability of short-term rental of land, to fluctuating food markets, and to wages driven downward by the pressure of too many laborers looking for too little work.</p><p>Militant Irish nationalism would follow Jane Wilde in seeing the famine as mass murder and thus as what would later be categorized as a genocide. Under pressure from Irish Americans, this even became an official doctrine in New York, where a state law signed in 1996 by then governor George Pataki required schools to portray the famine “as a human rights violation akin to genocide, slavery and the Holocaust.”</p></div><div data-journey-hook="client-content" data-testid="BodyWrapper"><p>Pataki announced that “history teaches us the Great Irish Hunger was not the result of a massive failure of the Irish potato crop but rather was the result of a deliberate campaign by the British to deny the Irish people the food they needed to survive.” But this is not what history teaches us. A much more accurate conclusion is the one drawn by the Irish historian Peter Gray, who wrote that there was “not a policy of deliberate genocide” on the part of the British. Instead, Gray argued, the great failure of the British government was ideological—“a dogmatic refusal to recognise that measures intended to ‘encourage industry, [and] to do battle with sloth’&nbsp;.&nbsp;.&nbsp;. were based on false premises.” The British did not cause the potatoes to rot in the ground. They did launch, by the standards of the mid-nineteenth century, very large-scale efforts to keep people alive, importing grain from America, setting up soup kitchens, and establishing programs of public works to employ those who were starving. But they were blinded by prejudice, ignorance, and a fanatical devotion to two orthodoxies that are very much alive in our own time: their belief that poverty arises from the moral failings of the poor and their faith in the so-called free market. The famine was so devastating because, while the mold was rotting the potatoes, mainstream British opinion was infected with a cognitive blight.</p><p>It was obvious to outsiders that the root of Ireland’s misery was what de Beaumont characterized as a “bad aristocracy”—the monopolization of land by a small élite that had no cultural or religious affinity with its tenantry and little sense of obligation to develop sustainable agriculture. But an English ruling class in which many leading politicians were themselves owners of vast estates in Ireland was unable to acknowledge this inconvenient truth. Who, if not the landlord system, could be to blame? It must be the Irish poor themselves. As Scanlan puts it, “Intensive monoculture made Irish potatoes vulnerable to blight. The solutions proposed to mitigate famine were themselves the product of a kind of intellectual and political monoculture. Solutions were unimaginable outside the market that fuelled the crisis to begin with.”</p><p>In a neatly circular argument, the conditions that had been forced on the laboring class became proof of its moral backwardness. It was relatively easy to plant and harvest potatoes—therefore, those who did so had clearly chosen the easy life. “Ireland, through this lens,” Scanlan writes, “was a kind of living fossil within the United Kingdom, a country where the majority of the poor were inert and indolent, unwilling and unable to exert themselves for wages and content to rely on potatoes for subsistence.” Or, as William Carleton, the first major writer in the English language to have sprung from the Irish Catholic peasantry, put it with withering sarcasm, the Irish poor had not learned “to starve in an enlightened manner”: “Political economy had not then taught the people how to be poor upon the most scientific principles.”</p><p>Civilized people ate meat—England’s unofficial national anthem was “The Roast Beef of Old England.” The desire to consume animal flesh stimulated effort and enterprise. Thus, the destruction of the potato crop, however terrible and regrettable its short-term effects, would teach the Irish to crave meat instead and become proper capitalist wage earners so that they could afford to buy it. “When the Celts once cease to be potatophagi,” wrote the editors of the London <em>Times</em>, “they must become carnivorous.” Let them, as Marie Antoinette did not say, eat steak.</p><p>This arrant nonsense obscured the reality that the Irish had no particular love of potatoes. Their historically varied diet, based on oats, milk, and butter, had been reduced by economic oppression to one tuber. Nor were they reluctant to work for wages. Many travelled long distances to earn money as seasonal migrant laborers on farms in England and Scotland, and Irish immigrants were integrating themselves into the capitalist money economy in the mills of Massachusetts and the factories of New York.</p><p>Yet, as stupid as this bigotry undoubtedly was, it was also deadly. The idea of Irish indolence fused with a quasi-religious faith in the laws of the market to shape the British response to the famine. In its first full year, 1846, Robert Peel’s Conservative government imported huge quantities of corn, known in Europe as maize, from America to feed the starving. The government insisted that the corn be sold rather than given away (free food would merely reinforce Irish indolence), and those who received it had little idea at first how to cook it. Nonetheless, the plan was reasonably effective in keeping people alive.</p><p>The general assumption, however, was that the blight of 1845 was a one-off event. At the end of July, 1846, it became crushingly obvious that the blight had spread even wider, wiping out more than ninety per cent of the new crop. By then, most of the poor tenants had sold whatever goods they had, leaving nothing with which to stave off starvation. Fishermen on the coasts had pawned their nets for money to buy maize. The terrible year that followed is still remembered in Ireland as Black ’47, though the famine would, in fact, last until 1852.</p><p>In London, the realization that this was not a temporary crisis coincided with the coming to power of a party with a deep ideological commitment to free trade. The Liberals, under Lord John Russell, were determined that what they saw as an illegitimate intervention in the free market should not be repeated. They moved away from importing corn and created instead an immense program of public works to employ starving people—for them, as for the Conservatives, it was axiomatic that the moral fibre of the Irish could not be improved by giving them something for nothing. Wages were designed to be lower than the already meagre earnings of manual workers so that the labor market would not be upset.</p><p>The result was the grotesque spectacle of people increasingly debilitated by starvation and disease doing hard physical labor for wages that were not sufficient to keep their families alive. Meanwhile, many of the same people were evicted from their houses as landowners used the crisis to clear off these human encumbrances and free their fields for more profitable pasturage. Exposure joined hunger and sickness to complete the task of mass killing.</p><p>“Rot” provides a convincing answer to Tóibín’s question of what tone you should use in writing about the famine. Scanlan’s voice is cool but never cold. The book is richly underpinned by research in contemporary sources and firmly rooted in historical scholarship, and it does not fall into the trap of oversimplifying the famine as deliberate genocide. But a proper sense of outrage runs between the lines and carries a consistently high voltage.</p><p>Above all, “Rot” reminds us that the Great Hunger was a very modern event, and one shaped by a mind-set that is now again in the ascendant. The poor are the authors of their own misery. The warning signs of impending environmental disaster can be ignored. Gross inequalities are natural, and God-given. The market must be obeyed at all costs. There is only one thing about the Irish famine that now seems truly anachronistic—millions of refugees were saved because other countries took them in. That, at least, would not happen now.&nbsp;♦</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Cancer Institute Employees Can't Publish on These Topics Without Approval (101 pts)]]></title>
            <link>https://www.propublica.org/article/national-cancer-institute-flagged-topics-vaccines-autism-rfk-jr</link>
            <guid>43324279</guid>
            <pubDate>Mon, 10 Mar 2025 18:46:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.propublica.org/article/national-cancer-institute-flagged-topics-vaccines-autism-rfk-jr">https://www.propublica.org/article/national-cancer-institute-flagged-topics-vaccines-autism-rfk-jr</a>, See on <a href="https://news.ycombinator.com/item?id=43324279">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-pp-location="article body">

        
                    <div data-pp-location="top-note">
                

                                                
            <p>ProPublica is a nonprofit newsroom that investigates abuses of power. Sign up to receive <a href="https://www.propublica.org/newsletters/the-big-story?source=www.propublica.org&amp;placement=top-note&amp;region=national">our biggest stories</a> as soon as they’re published.</p>

                

            </div><!-- end .article-body__top-notes -->
        
        
        




                    

<figure data-pp-id="1" data-pp-blocktype="embed">

    


                        
            
    
<figcaption>
    
    
    
    </figcaption>


</figure>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="2.0">Employees at the National Cancer Institute, which is part of the National Institutes of Health, received internal guidance last week to flag manuscripts, presentations or other communications for scrutiny if they addressed “controversial, high profile, or sensitive” topics. Among the 23 hot-button issues, according to internal records reviewed by ProPublica: vaccines, fluoride, peanut allergies, autism.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="3.0">While it’s not uncommon for the cancer institute to outline a couple of administration priorities, the scope and scale of the list is unprecedented and highly unusual, said six employees who spoke on the condition of anonymity because they were not authorized to comment publicly. All materials must be reviewed by an institute “clearance team,” according to the records, and could be examined by officials at the NIH or its umbrella agency, the U.S. Department of Health and Human Services.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="4.0">Staffers and experts worried that the directive would delay or halt the publication of research. “This is micromanagement at the highest level,” said Dr. Georges C. Benjamin, executive director of the American Public Health Association.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="6.0">The list touches on the personal priorities of HHS Secretary Robert F. Kennedy Jr., a longtime <a href="https://www.washingtonpost.com/health/2024/11/08/rfk-jr-vaccines-fda-trump-health-policy/">anti-vaccine activist</a> who has <a href="https://www.washingtonpost.com/health/2024/11/15/rfk-jr-views-conspiracies-false-claims/">repeatedly promoted</a> medical conspiracy theories and false claims. He has advanced the idea that <a href="https://www.nytimes.com/2025/03/07/health/vaccines-autism-cdc-rfk-jr.html">rising rates of autism</a> are linked to vaccines, a claim that has been <a href="https://www.nbcnews.com/politics/trump-administration/cdc-research-debunked-link-vaccines-autism-rcna195499">debunked by hundreds of scientific studies</a>. He has also <a href="https://www.yahoo.com/lifestyle/rfk-jr-says-environmental-toxins-213900364.html">suggested that aluminum in vaccines</a> is responsible for childhood allergies (his son <a href="https://www.vanityfair.com/news/2021/05/how-robert-f-kennedy-jr-became-anti-vaxxer-icon-nightmare?srsltid=AfmBOoopWQA8bGt49aHJcBYiXZgjuaF3aGg72lKBSbMM0TxwKMGvuv3h">reportedly is severely allergic to peanuts</a>). And he has <a href="https://www.theguardian.com/us-news/2024/nov/04/fluoride-explainer-what-is-us-election-donald-trump-robert-f-kennedy-jr">claimed that water fluoridation</a> —&nbsp;which the Centers for Disease Control and Prevention has <a href="https://blogs.cdc.gov/pcd/2015/04/23/community-water-fluoridation-one-of-the-10-greatest-public-health-achievements-of-the-20th-century/">called</a> “one of the 10 greatest public health achievements of the 20th century” — is an “industrial waste.”</p>
        
    
                        
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="8.0">In confirmation hearings in January, Kennedy <a href="https://apnews.com/article/rfk-trump-health-hhs-vaccine-abortion-b785e44f341691684b4daa711dae8c85">said that he was not “anti-vaccine,”</a> and that as secretary, he would not discourage people from getting immunized for measles or polio, but he <a href="https://www.npr.org/sections/shots-health-news/2025/01/30/nx-s1-5281452/trump-cabinet-picks-rfk-confirmation-hearing-help-committee">dodged questions</a> about the link between autism and vaccines.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="9.0">Another term on the list, “cancer moonshot,” refers to a <a href="https://www.cancer.gov/research/key-initiatives/moonshot-cancer-initiative">program</a> <a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC4849336/">launched</a> by President Barack Obama in 2016. It was a <a href="https://bidenwhitehouse.archives.gov/ostp/news-updates/2025/01/15/the-biden-cancer-moonshot-ending-cancer-as-we-know-it/">priority of the Biden administration</a>, which intended for the program to cut the nation’s cancer death rate by at least half and prevent more than 4 million deaths.</p>
        
    
                    
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="11.0">The list is “an unusual mix of words that are tied to activities that this administration has been at war with — like equity, but also words that they purport to be in favor of doing something about, like ultraprocessed food,” Tracey Woodruff, director of the Program on Reproductive Health and the Environment at the University of California, San Francisco, said in an email.</p>
        
    
                    

<figure data-pp-id="12" data-pp-blocktype="image">

    


                    
    


    <img alt="" width="2854" height="2060" loading="lazy" js-autosizes="" src="https://img.assets-d.propublica.org/v5/images/NCI-Red-Flags-Leaked-Document-NO-METADATA_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=577&amp;q=75&amp;w=800&amp;s=57fdd60133d9b084e7d4770bb79f4ee4" srcset="https://img.assets-d.propublica.org/v5/images/NCI-Red-Flags-Leaked-Document-NO-METADATA_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=289&amp;q=75&amp;w=400&amp;s=a8393ded24d1a197a6ef9a89867b5601 400w, https://img.assets-d.propublica.org/v5/images/NCI-Red-Flags-Leaked-Document-NO-METADATA_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=577&amp;q=75&amp;w=800&amp;s=57fdd60133d9b084e7d4770bb79f4ee4 800w, https://img.assets-d.propublica.org/v5/images/NCI-Red-Flags-Leaked-Document-NO-METADATA_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=866&amp;q=75&amp;w=1200&amp;s=8001a199e7be7dee2034e078167872d4 1200w, https://img.assets-d.propublica.org/v5/images/NCI-Red-Flags-Leaked-Document-NO-METADATA_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=938&amp;q=75&amp;w=1300&amp;s=26df0d38118b8969e63cfe134ee3d766 1300w, https://img.assets-d.propublica.org/v5/images/NCI-Red-Flags-Leaked-Document-NO-METADATA_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1047&amp;q=75&amp;w=1450&amp;s=45024a8504bc8e61268f75555ca858aa 1450w, https://img.assets-d.propublica.org/v5/images/NCI-Red-Flags-Leaked-Document-NO-METADATA_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1155&amp;q=75&amp;w=1600&amp;s=4ffe2410eaa82961e2bd2ade7ca5af5e 1600w, https://img.assets-d.propublica.org/v5/images/NCI-Red-Flags-Leaked-Document-NO-METADATA_maxWidth_3000_maxHeight_3000_ppi_72_quality_95_embedColorProfile_true.jpg?crop=focalpoint&amp;fit=crop&amp;fm=webp&amp;fp-x=0.5&amp;fp-y=0.5&amp;h=1444&amp;q=75&amp;w=2000&amp;s=c26bc814b371cd49248fa704e9a57d41 2000w">

            
    
<figcaption>
        <span>A directive on topics requiring prepublication review at the National Cancer Institute was said to be circulated by the agency’s communications team.</span>
    
        <span>
        <span>Credit: </span>
        Obtained by ProPublica
    </span>
    
    
    </figcaption>

</figure>

        
    
                    
<p data-pp-blocktype="copy" data-pp-id="13.0">The guidance states that staffers “do not need to share content describing the routine conduct of science if it will not get major media attention, is not controversial or sensitive, and does not touch on an administration priority.”</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="14.0">A longtime senior employee at the institute said that the directive was circulated by the institute’s communications team, and the content was not discussed at the leadership level. It is not clear in which exact office the directive originated. The NCI, NIH and HHS did not respond to ProPublica’s emailed questions. (The existence of the list was first revealed in social media posts on Friday.)</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="15.0">Health and research experts told ProPublica they feared the chilling effect of the new guidance. Not only might it lead to a lengthier and more complex clearance process, it may also cause researchers to censor their work out of fear or deference to the administration’s priorities.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="16.0">“This is real interference in the scientific process,” said Linda Birnbaum, a former director of the National Institute of Environmental Health Sciences who served as a federal scientist for four decades. The list, she said, “just seems like Big Brother intimidation.”</p>
        
    
                        
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="18.0">During the first two months of Donald Trump’s second presidency, his administration has <a href="https://www.nytimes.com/interactive/2025/02/13/upshot/nih-trump-funding-cuts.html">slashed funding</a> for research institutions and <a href="https://www.npr.org/sections/shots-health-news/2025/02/26/g-s1-50920/trump-nih-funding-freeze-medical-research">stalled the NIH’s grant application process</a>.</p>
        
    
                                  
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="20.0">Kennedy has suggested that <a href="https://www.insidehighered.com/news/government/science-research-policy/2024/11/15/what-robert-f-kennedy-jr-has-said-about-nih">hundreds of NIH staffers</a> should be fired and said that the institute should deprioritize infectious diseases like COVID-19 and <a href="https://www.nbcnews.com/health/health-news/rfk-jr-says-government-ignores-chronic-disease-misguided-rcna190042">shift its focus</a> to chronic diseases, such as diabetes and obesity.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="21.0">Obesity is on the NCI’s new list, as are infectious diseases including COVID-19, bird flu and measles.</p>
        
    
                    
<p data-pp-blocktype="copy" data-pp-id="22.0">The “focus on bird flu and covid is concerning,” Woodruff wrote, because “not being transparent with the public about infectious diseases will not stop them or make them go away and could make them worse.”</p>
        
    
        
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tesla shares plunge 14%, head for worst day in five years (107 pts)]]></title>
            <link>https://www.cnbc.com/2025/03/10/tesla-shares-plunge-14percent-head-for-worst-day-in-five-years.html</link>
            <guid>43324157</guid>
            <pubDate>Mon, 10 Mar 2025 18:39:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.cnbc.com/2025/03/10/tesla-shares-plunge-14percent-head-for-worst-day-in-five-years.html">https://www.cnbc.com/2025/03/10/tesla-shares-plunge-14percent-head-for-worst-day-in-five-years.html</a>, See on <a href="https://news.ycombinator.com/item?id=43324157">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="ArticleBody-InlineImage-108113271" data-test="InlineImage"><p>People gather in a protest outside a Tesla dealership in Lisbon against Tesla and SpaceX CEO Elon Musk on March 9, 2025.</p><p>Patricia De Melo Moreira | Afp | Getty Images</p></div><div><p><span data-test="QuoteInBody" id="RegularArticle-QuoteInBody-1"><a href="https://www.cnbc.com/quotes/TSLA/">Tesla's</a><span><span id="-WatchlistDropdown" data-analytics-id="-WatchlistDropdown"></span></span></span> sell-off on Wall Street intensified on Monday, with shares of the electric vehicle maker plunging 15%, their worst day on the market since September 2020.</p><p>On Friday, Tesla <a href="https://www.cnbc.com/2025/03/07/tesla-shares-declined-every-week-since-elon-musk-went-to-washington.html">wrapped up</a> a seventh straight week of losses, its longest losing streak since debuting on the Nasdaq in 2010. The stock has fallen every week since CEO <a href="https://www.cnbc.com/elon-musk/">Elon Musk</a> went to Washington, D.C., to take on a major role in the second Trump White House.</p><p>Since peaking at $479.86 on Dec. 17, Tesla shares have lost more than 50% of their value, wiping out upward of $800 billion in market cap. Monday marked the stock's seventh worst day on record.</p><p>Tesla led a <a href="https://www.cnbc.com/2025/03/09/stock-market-news-today-live-updates.html">broader slump</a> in U.S. equities, with the Nasdaq tumbling almost 4%, its steepest decline since 2022.</p><p>During an interview on Fox Business after hours on Monday, Musk was asked how he manages to run his businesses while fulfilling his role in the Trump White House. He said he's doing so<strong> </strong><a href="https://www.cnbc.com/2025/03/10/musk-tesla-doge-stock-market.html">"with great difficulty."</a></p><p>In addition to Tesla's troubles, Musk's social network X experienced <a href="https://www.cnbc.com/2025/03/10/elon-musks-social-platform-x-is-down-for-some-users-.html">several outages</a> throughout the day on Monday, and his aerospace and defense company SpaceX is investigating two <a href="https://www.nbcnews.com/news/us-news/spacex-rocket-explosion-leads-flight-delays-florida-airports-fears-fal-rcna195319" target="_blank">explosions</a> in a row that occurred during test flights of its massive Starship rocket.</p><p>Musk also said during the interview that he expected to remain in the Trump administration for another year. After the broadcast, he <a href="https://x.com/elonmusk/status/1899202765781450951" target="_blank">posted on X</a> that "It will be fine long-term," referencing Tesla's steep stock price decline.</p><p>The downdraft in Tesla's stock on Monday was tied to uncertainty surrounding <a href="https://www.cnbc.com/donald-trump/">President Donald Trump's</a> plans on tariffs. Canada and Mexico are key markets for automotive suppliers, and increased tariffs, with the potential for a trade war, will likely affect production and lead to higher prices.</p><p>Tesla is also dealing with <a href="https://www.cnbc.com/2025/01/21/tesla-lost-15-billion-in-brand-value-in-2024-brand-finance-found.html">brand erosion</a> due to Musk's incendiary political rhetoric and his extensive work with the Trump administration, where he is leading up the so-called Department of Government Efficiency. Musk, the world's wealthiest person, has become the public face of the administration's effort to dramatically shrink the federal government's workforce, spending and capacity.</p><p>Meanwhile, Musk has used X to level accusations against judges whose decisions he did not like and promoted false Kremlin talking points about Ukraine President Volodymyr Zelenskyy.</p><p>Activists and former Musk fans have protested at Tesla facilities across the U.S., and Tesla vehicles and facilities have been the apparent targets of vandalism and arson attempts. Repeated arson attempts and instances of vandalism occurred at a Tesla store and service center in Loveland, Colorado, most recently on March 7, police told CNBC.</p><p>Ben Kallo, an analyst at Baird, told CNBC's "<a href="https://www.cnbc.com/squawk-on-the-street/">Squawk on the Street</a>" on Monday that recent reports of vandalism could hurt demand.</p><p>"When people's cars are in jeopardy of being keyed or set on fire out there, even people who support Musk or are indifferent Musk might think twice about buying a Tesla," Kallo said.</p><p>Analysts at Bank of America's wrote in a report on Monday that Tesla's new vehicle sales plummeted about 50% in Europe in January from a year earlier, partly owing to growing distaste for the brand. The firm also noted that some prospective customers are waiting for the new version of the Model Y.</p><p>Tesla's Model Y, which is a small SUV, remained the best-selling battery electric vehicle globally in January. It was followed by China's Geely Geome, which surpassed the Tesla Model 3 sedan for the month.</p><p>Global sales of electric vehicles, including fully electric and plug-in hybrid models, increased 21% in January from a year ago, even as Tesla's sales declined. The growth was driven by demand in Europe, according to Bank of America.</p><p><em>— CNBC's Jesse Pound contributed to this report.</em></p></div><div id="RegularArticle-RelatedContent-1"><h2>Don’t miss these insights from CNBC PRO</h2><div><ul><li><a href="https://www.cnbc.com/2025/03/06/blackrock-says-investors-can-grab-attractive-income-in-these-assets.html">BlackRock says investors should look beyond the noise and grab attractive income in these assets</a></li><li><a href="https://www.cnbc.com/2025/03/09/try-stocks-with-strong-fundamentals-less-risk-in-market-tumult-piper-sandler-says.html">Invest in these stocks with 'stronger fundamentals and less risk,' Piper Sandler says</a></li><li><a href="https://www.cnbc.com/2025/03/08/gen-zs-wealth-effect-will-shape-the-economy-over-time-heres-who-will-benefit.html">Gen Z's wealth effect will shape the economy over time — here's who will benefit</a></li><li><a href="https://www.cnbc.com/2025/03/09/stocks-including-investor-favorite-apple-have-most-downside-barclays-says.html">These stocks including investor-favorite Apple have the most downside in the wake of the pullback, Barclays says</a><br></li></ul></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[British tourist detained by US authorities for 10 days over visa issue (195 pts)]]></title>
            <link>https://www.theguardian.com/uk-news/2025/mar/10/british-tourist-detained-us-authorities-10-days-visa-issue</link>
            <guid>43324040</guid>
            <pubDate>Mon, 10 Mar 2025 18:32:22 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.theguardian.com/uk-news/2025/mar/10/british-tourist-detained-us-authorities-10-days-visa-issue">https://www.theguardian.com/uk-news/2025/mar/10/british-tourist-detained-us-authorities-10-days-visa-issue</a>, See on <a href="https://news.ycombinator.com/item?id=43324040">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="maincontent"><p>A British tourist on a four-month backpacking trip around North America has been detained by Immigration and Customs Enforcement in the US for 10 days after trying to enter the country via the Canadian border.</p><p>Rebecca Burke, 28, a graphic artist from Monmouthshire, was trying to cross into the state of Washington when she was refused entry.</p><p>She was planning to stay with a host family where she would carry out domestic chores in exchange for accommodation and was told she should have applied for a working visa, instead of a tourist visa.</p><p>She had previously been staying with a host family in Portland, Oregon, under a similar arrangement after spending some time sightseeing in New York City, where she first arrived from the UK at the start of the year.</p><p>“She’s basically living with a family, doing a little bit of housework, taking the dog for a walk, whatever it is. She’s been a part of a family,” her father, Paul Burke, a consultant in the steel industry, said.</p><p>Canadian authorities told her to go back to the US and fill in new paperwork before returning to cross into Canada.</p><p>However, when she tried to re-enter the US she was handcuffed and put in a cell before being taken to Tacoma Northwest detention facility in Washington state.</p><p>“She’s been there for over 10 days now,” Paul Burke said. “We haven’t got any clear timeline for her release. I really can’t understand why someone, a tourist, would be incarcerated and locked up.”</p><p>“It’s like we’re living in a nightmare we can’t wake up from,” he added. “It’s like we’re having an out-of-body experience. We’re watching ourselves go through the motions of life, but we’re not really doing it, we’re not really there.”</p><p>His daughter wants to leave the country and fly back to the UK, he said, but he feared the immigration crackdown in the US meant there could be a long delay before her case was dealt with.</p><p>“She’s in this orange prison outfit,” he said. “She just feels so isolated and desperate, you can imagine, she’s saying, ‘I want to come home’.”</p><p>She is safe, he said, but living “in horrendous conditions” and had not had access to legal representation. He was taking comfort from the fact that the other women at the facility, many of whom have been incarcerated for months or even years while fighting deportation, had “all been really nice to Becky,” Burke said.</p><p>Burke said he and his wife, Andrea, had naturally had some worries about their daughter travelling, but thought the US and Canada would be one of the safest places for her to go as a solo traveller, and her plan to stay with host families provided further reassurance.</p><p>“The only thing really we were concerned with, in general, was our little girl was going off for four months as a solo traveller,” he said.</p><p>“We knew for a long time in advance of Trump being inaugurated what his plans were for immigration, but that didn’t enter our minds with respect to Becky,” he added. “She was going on a four-month backpacking tourist trip. We wouldn’t even think of her as an immigrant.</p><p>“We were horrified about what was planned for immigrants and illegal aliens in the US, just like many people around the world were,” he added. “But why would we put that together with Becky making this trip? We now know better, because we believe it’s had a direct impact.”</p><p>Burke said he wanted to warn other families who may have children travelling to the US. “The key thing is check and double-check and triple-check the visa requirements, especially if it’s an extended visit like Becky’s was, rather than just a couple of weeks’ holiday,” he said. “I really don’t want anyone else to go through this.”</p><p>The family’s local MP Catherine Fookes, the Labour MP for Monmouthshire, said: “I am deeply concerned about my constituent’s welfare and the distress this situation is causing her and her family.</p><div><p>“Her family is desperate to bring her home, and I share their urgency in seeking a resolution.<strong></strong>“Since being made aware of the case, my team have been in regular contact with the Foreign, Commonwealth and Development Office (FCDO) and other relevant authorities to press for urgent action. We have relayed the family’s request for voluntary departure and continue to push for clear answers on the next steps to get her home as soon as possible.</p><p>
 “My team and I will continue doing everything in our power to secure a swift resolution and will not stop working until my constituent is safely reunited with her family.”</p></div><p>A Foreign Office spokesperson said: “We are supporting a British national detained in the USA and are in contact with the local authorities.”</p></div></div>]]></description>
        </item>
    </channel>
</rss>