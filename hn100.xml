<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Tue, 25 Feb 2025 03:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Everyone at NSF overseeing the Platforms for Wireless Experimentation is gone (201 pts)]]></title>
            <link>https://discuss.systems/@ricci/114059690609284323</link>
            <guid>43166830</guid>
            <pubDate>Tue, 25 Feb 2025 00:59:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://discuss.systems/@ricci/114059690609284323">https://discuss.systems/@ricci/114059690609284323</a>, See on <a href="https://news.ycombinator.com/item?id=43166830">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA["The closer to the train station, the worse the kebab" – a "study" (213 pts)]]></title>
            <link>https://www.jmspae.se/write-ups/kebabs-train-stations/</link>
            <guid>43165112</guid>
            <pubDate>Mon, 24 Feb 2025 21:25:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jmspae.se/write-ups/kebabs-train-stations/">https://www.jmspae.se/write-ups/kebabs-train-stations/</a>, See on <a href="https://news.ycombinator.com/item?id=43165112">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				

<p><strong>2025-02-14</strong></p>

    <ul>
    
        <li>
            <a href="https://jmspae.se/write-ups/kebabs-train-stations/#introduction">Introduction</a>
            
        </li>
    
        <li>
            <a href="https://jmspae.se/write-ups/kebabs-train-stations/#method">Method</a>
            
                <ul>
                    
                        <li>
                            <a href="https://jmspae.se/write-ups/kebabs-train-stations/#network-data">Network Data</a>
                        </li>
                    
                        <li>
                            <a href="https://jmspae.se/write-ups/kebabs-train-stations/#restaurant-data">Restaurant Data</a>
                        </li>
                    
                        <li>
                            <a href="https://jmspae.se/write-ups/kebabs-train-stations/#routing-and-distance">Routing and Distance</a>
                        </li>
                    
                </ul>
            
        </li>
    
        <li>
            <a href="https://jmspae.se/write-ups/kebabs-train-stations/#results">Results</a>
            
        </li>
    
        <li>
            <a href="https://jmspae.se/write-ups/kebabs-train-stations/#discussion">Discussion</a>
            
        </li>
    
    </ul>

<p><em>This write-up was originally posted <a href="https://www.reddit.com/r/gis/comments/1iph0yy/the_closer_to_the_railway_station_the_less_tasty/">on reddit</a>, though I've cleaned things up specifically for this post. Due to reasons discussed towards the end of this post, I'm not entirely happy with the results and intend to take another shot at it in the near future.</em></p>
<h2 id="introduction">Introduction<a href="#introduction" aria-label="Anchor link for: introduction">🔗</a></h2>
<p>I came across <a href="https://www.reddit.com/r/gis/comments/1iopp56/anyone_motivated_to_prove_that_the_closer_from/">this post</a> sharing a hypothesis from a French subreddit;</p>
<blockquote>
<p>The closer to the train station, the worse the kebab.</p>
</blockquote>
<p>The original French post gained a decent amount of traction compared to the subreddit's relatively small size, indicating a certain amount of agreement among its members. There were some detractors in the comments, however, sharing experiences which ran contrary to the stated hypothesis.</p>
<p>Thus, I figured I had nothing better to do, being a burned-out, unemployed drop-out with a newly-obtained autism diagnosis, so I figured I'd sacrifice my time for a worthy cause and perform this informal <em>"study"</em>. I'll be expecting my Nobel peace prize in the postbox and several job offers in my DMs within the next 3 working days.</p>
<h2 id="method">Method<a href="#method" aria-label="Anchor link for: method">🔗</a></h2>
<p>I assumed the best study area to be Paris, France since;</p>
<ol>
<li>The original post was French</li>
</ol>
<p>I haven't personally heard of this hypothesis in my home country (Sweden, also home to many a kebab-serving restaurant) so I figured I'd assume this to be a French phenomenon for the purpose of this informal "Study".</p>
<ol start="2">
<li>Density</li>
</ol>
<p>The inner city is <em><strong>dense</strong></em> with dozens of train/metro stations and god knows how many kebab shops. I knew early on that this would make my life pretty miserable, but at least it'd provide plenty of sample data.</p>
<h2 id="network-data">Network Data<a href="#network-data" aria-label="Anchor link for: network-data">🔗</a></h2>
<p>I used OSMnx to download and save a navigation network. Given the public transit-centric nature of the French subreddit, I though it'd make sense to stick to walking distance (eg. footpaths, side-walks) thus i set the OSMnx <code>network_type</code> to <code>"walk"</code>. Given the location (and that OSMnx used this CRS automatically when none was provided), all data was projected to EPSG:32631 (UTM zone 31N).</p>
<pre data-lang="py"><code data-lang="py"><span>import </span><span>osmnx </span><span>as </span><span>ox
</span><span>from </span><span>geopandas </span><span>import </span><span>GeoDataFrame
</span><span>
</span><span>#EPSG
</span><span>PROJECTION </span><span>= </span><span>32631
</span><span>
</span><span>graph </span><span>= </span><span>ox.</span><span>graph_from_place</span><span>(</span><span>'Paris, FR'</span><span>, </span><span>network_type</span><span>=</span><span>"walk"</span><span>)
</span><span>graph </span><span>= </span><span>ox.</span><span>project_graph</span><span>(graph, </span><span>to_crs</span><span>=</span><span>PROJECTION</span><span>)
</span><span>
</span><span>ox.</span><span>save_graphml</span><span>(graph, </span><span>filepath</span><span>=</span><span>"network.graphml"</span><span>)
</span></code></pre>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-1.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-1.c53f23b9b1fd351c.jpg"></a>

<em>Figure 1: The study area and network</em></p>
<p>Next up is the various train/metro stations. Given the nature of the original French sub, I figured it'd make sense to include both the long-distance central stations along with the countless metro stations. This was also rather trivial with OSMnx, filtering by <code>railway=subway_entrance</code> or <code>railway=train_station_entrance.</code></p>
<pre data-lang="py"><code data-lang="py"><span>stations: GeoDataFrame </span><span>= </span><span>ox.</span><span>features_from_place</span><span>(</span><span>'Paris, FR'</span><span>, </span><span>tags </span><span>= </span><span>{
</span><span>    </span><span>"railway"</span><span>: [</span><span>"subway_entrance"</span><span>, </span><span>"train_station_entrance"</span><span>]
</span><span>})
</span><span>
</span><span># Filter results to points
</span><span>station_nodes: GeoDataFrame </span><span>= </span><span>stations.loc[stations.geom_type</span><span>==</span><span>"Point"</span><span>]
</span><span>station_nodes </span><span>= </span><span>station_nodes.</span><span>to_crs</span><span>(</span><span>epsg</span><span>=</span><span>PROJECTION</span><span>)
</span><span>
</span><span>station_nodes.</span><span>to_file</span><span>(</span><span>"train_station_entrances.gpkg"</span><span>)
</span></code></pre>
<p>I saved outputs religiously so I could easily inspect them in QGIS. I did attempt to get python notebooks working with my NeoVIM setup, but it was all for naught.</p>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-2.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-2.51f0e47dcd63c0a8.jpg"></a>

<em>Figure 2: Rail/metro entrances... Please ignore the airport iconography.</em></p>
<p>... And there we have the first half of the data, now for the restaurants.</p>
<h2 id="restaurant-data">Restaurant Data<a href="#restaurant-data" aria-label="Anchor link for: restaurant-data">🔗</a></h2>
<p>The Google Places API (and their respective reviews) seemed like a reasonable choice. Google reviews are naturally far from perfect and subject to their fair share of botting and the like, but it's the best I could think of at the time. There are alternatives such as Yelp, but their API is horrifically expensive for poor old me, and I was not in the mood to build a web scraper (it has the same soul-sucking effect on me as prompting an LLM). The $200 of free credit was also enticing.</p>
<p>However, as I started exploring the API... I realised that the Places API doesn't seem to have any way to search within a polygon, only within a point radius. Thank you, Mr. publicly owned mega-corporation. How Fun.</p>
<p>It also didn't help that autocomplete for the <code>googlemaps</code> library wasn't working. Python's a fine language, but its tooling does like to test my patience a little too often. And whilst I'm still complaining... The Google Cloud dashboard is likely the slowest "website" I've ever had the displeasure of interacting with.</p>
<p>So... This meant I'd have to perform some sort of grid search of the whole of Paris, crossing my fingers that I wouldn't bust my free usage. This, along with a couple interesting questions;</p>
<ol>
<li>What is... <em>A kebab?</em></li>
</ol>
<p>When I search for "kebab" (no further context necessary)... How does Google decide what restaurant serves kebab?</p>
<p>After some perusing, it didn't seem to be as deep as I thought. Plenty of restaurants simply had "kebab" in the name, some were designated as "Mediterranean" (Kebab has its origins in Turkey, Persia, middle east in general) and others had a fair few reviews simply mentioning "kebab." Good enough for me.</p>
<ol start="2">
<li>Trouble in query-land</li>
</ol>
<p>It turns out that when you query for places within a given radius, it's only a "bias." It's not a hard cut-off that'll help narrow-down our data harvesting and reduce unnecessary requests. It was becoming increasingly clear that google isn't really a fan of people doing this.</p>
<p>Now with all of that preamble out of the way, I needed to prepare my search.</p>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-3.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-3.605c84ffddad8323.jpg"></a>

<em>Figure 3. Original admin boundaries</em></p>
<p>Paris' administrative boundary contains a couple of large green spaces. To the west, a park and to the east, some sort of sports institute.</p>
<p>After perusing these rather large spaces in Google maps, they seemed to contain a distinct lack of kebab-serving establishments. Thus, they were a burden on our API budget and needed to go.</p>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-4.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-4.b360881962350eea.jpg"></a>

<em>Figure 4. Adjusted admin boundaries w/ network</em></p>
<p>I figured keeping the network and stations wouldn't do any harm, so they went unmodified.</p>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-5.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-5.eedb86cb4c85e12c.jpg"></a>

<em>Figure 5. Sampling points, later projected to WGS84 for harvesting purposes</em></p>
<p>To maximise data-harvesting, I decided to go with a hex layout with a vertical spacing of 1 km. This should give us a search radius of 500m * √3 ~= 866 meters. Plenty of overlap, sure, but we shouldn't be getting any holes anywhere. I'm not sure why I was spending this much time ensuring "data integrity" when that might just have flown the window courtesy of Google, but it's the illusion of control that counts.</p>
<p>This give us 99 sample points which... Should be enough?</p>
<p>Regardless, here's how my 3AM python turned out:</p>
<pre data-lang="py"><code data-lang="py"><span># Already projected to WGS84
</span><span>sample_points: GeoDataFrame </span><span>= </span><span>GeoDataFrame.</span><span>from_file</span><span>(</span><span>"samples.gpkg"</span><span>)
</span><span>gmaps: googlemaps.Client </span><span>= </span><span>googlemaps.</span><span>Client</span><span>(</span><span>key</span><span>=</span><span>'get-your-own'</span><span>)
</span><span>
</span><span>output </span><span>= </span><span>{}
</span><span>
</span><span>for </span><span>point </span><span>in </span><span>sample_points.geometry:
</span><span>    lat, lon </span><span>= </span><span>point.y, point.x
</span><span>
</span><span>    next_page_token </span><span>= </span><span>None
</span><span>    num_fetches </span><span>= </span><span>3
</span><span>
</span><span>    </span><span>while </span><span>num_fetches </span><span>&gt; </span><span>0</span><span>:
</span><span>        result </span><span>= </span><span>{}
</span><span>
</span><span>        </span><span>if </span><span>next_page_token </span><span>== </span><span>None</span><span>:
</span><span>            result </span><span>= </span><span>gmaps.</span><span>places</span><span>(
</span><span>                </span><span>"kebab"</span><span>,
</span><span>                </span><span>location</span><span>=</span><span>(lat, lon),
</span><span>                </span><span>radius</span><span>=</span><span>866</span><span>,
</span><span>            )
</span><span>        </span><span>else</span><span>:
</span><span>            result </span><span>= </span><span>gmaps.</span><span>places</span><span>(
</span><span>                </span><span>page_token</span><span>=</span><span>next_page_token
</span><span>            )
</span><span>
</span><span>        next_page_token </span><span>= </span><span>result.</span><span>get</span><span>(</span><span>"next_page_token"</span><span>)
</span><span>        </span><span>print</span><span>(result[</span><span>"status"</span><span>], next_page_token)
</span><span>
</span><span>        </span><span>for </span><span>p </span><span>in </span><span>result[</span><span>"results"</span><span>]:
</span><span>            output[p[</span><span>"place_id"</span><span>]] </span><span>= </span><span>p
</span><span>
</span><span>        </span><span>if </span><span>next_page_token </span><span>== </span><span>None</span><span>:
</span><span>            </span><span>break
</span><span>
</span><span>        num_fetches </span><span>-= </span><span>1
</span><span>
</span><span>        </span><span>sleep</span><span>(</span><span>2</span><span>)
</span><span>
</span><span>json_out </span><span>= </span><span>json.</span><span>dumps</span><span>(output)
</span><span>
</span><span>with </span><span>open</span><span>(</span><span>"output.json"</span><span>, </span><span>"w"</span><span>) </span><span>as </span><span>file:
</span><span>    file.</span><span>write</span><span>(json_out)
</span></code></pre>
<p>This worked quite well. Initially I skipped paging, resulting in 322 results. However, I noticed that a few establishments were missing in the results compared to my explorations in Google Maps.</p>
<p>After implementing paging and re-running, this gave us a grand total of 400 kebab-serving establishments. I was likely over-zealous with the paging considering how few additional results were retrieved. That, and that the API doesn't cap the search radius (again, it's only a bias) likely led to a fair few redundant API calls.</p>
<p>The raw Google Places API-output also needed to be clipped to the study area, projected to the local UTM zone as well as converted to a geospatial format;</p>
<pre data-lang="py"><code data-lang="py"><span>import </span><span>pandas </span><span>as </span><span>pd
</span><span>
</span><span>with </span><span>open</span><span>(</span><span>"output.json"</span><span>, </span><span>"r"</span><span>) </span><span>as </span><span>file:
</span><span>    data </span><span>= </span><span>json.</span><span>load</span><span>(file)
</span><span>    file.</span><span>close</span><span>()
</span><span>    
</span><span>    </span><span>for </span><span>id </span><span>in </span><span>data:
</span><span>        place </span><span>= </span><span>data[</span><span>id</span><span>]
</span><span>        point </span><span>= </span><span>place[</span><span>"geometry"</span><span>][</span><span>"location"</span><span>]
</span><span>        data[</span><span>id</span><span>][</span><span>"lng"</span><span>] </span><span>= </span><span>point[</span><span>"lng"</span><span>]
</span><span>        data[</span><span>id</span><span>][</span><span>"lat"</span><span>] </span><span>= </span><span>point[</span><span>"lat"</span><span>]
</span><span>        </span><span>del </span><span>data[</span><span>id</span><span>][</span><span>"geometry"</span><span>]
</span><span>
</span><span>    data </span><span>= </span><span>pd.DataFrame.</span><span>from_dict</span><span>(data).T
</span><span>    data.rating </span><span>= </span><span>pd.</span><span>to_numeric</span><span>(data.rating)
</span><span>    data.user_ratings_total </span><span>= </span><span>pd.</span><span>to_numeric</span><span>(data.user_ratings_total)
</span><span>    data </span><span>= </span><span>data[data[</span><span>"user_ratings_total"</span><span>] </span><span>&gt; </span><span>0</span><span>]
</span><span>
</span><span>    </span><span># Cleanup was added after the screenshot below was taken
</span><span>    data </span><span>= </span><span>data.</span><span>drop</span><span>(</span><span>columns</span><span>=</span><span>[
</span><span>        </span><span>"icon"</span><span>,
</span><span>        </span><span>"icon_background_color"</span><span>,
</span><span>        </span><span>"icon_mask_base_uri"</span><span>,
</span><span>        </span><span>"plus_code"</span><span>,
</span><span>        </span><span>"reference"</span><span>,
</span><span>        </span><span>"photos"</span><span>,
</span><span>        </span><span>"opening_hours"
</span><span>    ])
</span><span>
</span><span>    gdata </span><span>= </span><span>GeoDataFrame</span><span>(
</span><span>        data, </span><span>geometry</span><span>=</span><span>geopandas.</span><span>points_from_xy</span><span>(data.lng, data.lat),
</span><span>        </span><span>crs</span><span>=</span><span>4326
</span><span>    )
</span><span>
</span><span>    gdata: GeoDataFrame </span><span>= </span><span>gdata.</span><span>to_crs</span><span>(</span><span>PROJECTION</span><span>)
</span><span>
</span><span>    </span><span># Modified boundaries from Figure 4.
</span><span>    paris </span><span>= </span><span>GeoDataFrame.</span><span>from_file</span><span>(</span><span>"mod_bounary.gpkg"</span><span>);
</span><span>
</span><span>    gdata: GeoDataFrame </span><span>= </span><span>gdata.</span><span>clip</span><span>(paris)
</span><span>
</span><span>    gdata.</span><span>to_file</span><span>(</span><span>"establishments.gpkg"</span><span>)
</span></code></pre>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-6.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-6.1eab106a30493ee2.jpg"></a>

<em>Figure 6. We're in f###ing business</em></p>
<h2 id="routing-and-distance">Routing and Distance<a href="#routing-and-distance" aria-label="Anchor link for: routing-and-distance">🔗</a></h2>
<p>Finally, the fun part. I need to get the distance to the nearest station entrance for each establishment.</p>
<p>I could've absolutely just routed to every single entrance for every single restaurant to get the nearest... But that would've taken several decades. I needed to build some sort of spatial index and route to the nearest ~3 or something along those lines. Since Paris is so dense with plenty of routing options, I figured I wouldn't need to perform too many routing operations.</p>
<p>After some googling and dredging through API docs, however, it seemed GeoPandas was nice enough to do that for us with <code>sindex</code>. Although it didn't have the same "return nearest N" like my beloved r-tree rust library I was all too used to, it did allow me to search within a certain radius (1 km was large enough) and go from there. The query results weren't sorted, so I had to sort the indexes by distance and cut it down to size.</p>
<p>The network analysis was relatively straight-forward thanks to NetworkX, and after a couple of hours I managed to cobble together the following;</p>
<pre data-lang="py"><code data-lang="py"><span>import </span><span>networkx </span><span>as </span><span>nx
</span><span>import </span><span>shapely </span><span>as </span><span>shp
</span><span>
</span><span>establishments: GeoDataFrame </span><span>= </span><span>GeoDataFrame.</span><span>from_file</span><span>(</span><span>"establishments.gpkg"</span><span>)
</span><span>entrances: GeoDataFrame </span><span>= </span><span>GeoDataFrame.</span><span>from_file</span><span>(</span><span>"entrances.gpkg"</span><span>)
</span><span>graph </span><span>= </span><span>ox.</span><span>load_graphml</span><span>(</span><span>"network.graphml"</span><span>)
</span><span>graph </span><span>= </span><span>ox.</span><span>project_graph</span><span>(graph, </span><span>to_crs </span><span>= </span><span>PROJECTION</span><span>)
</span><span>
</span><span># Ensure the same CRS
</span><span>if </span><span>(establishments.crs </span><span>!= </span><span>entrances.crs </span><span>!= </span><span>PROJECTION</span><span>):
</span><span>    </span><span>exit</span><span>(</span><span>100</span><span>)
</span><span>
</span><span># Helper function to get the distance between a graph node and establishment geometry
</span><span>def </span><span>node_geom_dist</span><span>(</span><span>node_id</span><span>: int, </span><span>geom</span><span>: shp.Point):
</span><span>    node </span><span>= </span><span>graph.nodes[node_id]
</span><span>    </span><span>return </span><span>math.</span><span>sqrt</span><span>((geom.x </span><span>- </span><span>node[</span><span>'x'</span><span>]) </span><span>** </span><span>2 </span><span>+ </span><span>(geom.y </span><span>- </span><span>node[</span><span>'y'</span><span>]) </span><span>** </span><span>2</span><span>)
</span><span>
</span><span>distances: list[float] </span><span>= </span><span>[]
</span><span>
</span><span>for </span><span>(</span><span>id</span><span>, establishment) </span><span>in </span><span>establishments.</span><span>iterrows</span><span>():
</span><span>    establishment_geom: shp.Point </span><span>= </span><span>establishment.geometry
</span><span>    establishment_node: int </span><span>= </span><span>ox.</span><span>nearest_nodes</span><span>(graph, establishment_geom.x, establishment_geom.y)
</span><span>    establishment_dist_to_node: float </span><span>= </span><span>node_geom_dist</span><span>(establishment_node, establishment_geom)
</span><span>    
</span><span>    </span><span># Spatial index for rail entrances
</span><span>    index: shp.STRtree </span><span>= </span><span>entrances.sindex
</span><span>    nearest_q </span><span>= </span><span>index.</span><span>query</span><span>(establishment_geom, </span><span>predicate</span><span>=</span><span>"dwithin"</span><span>, </span><span>distance </span><span>= </span><span>1000</span><span>)
</span><span>    nearest_entrances: list[tuple[int, float]] </span><span>= </span><span>[]
</span><span>
</span><span>    </span><span>for </span><span>i </span><span>in </span><span>nearest_q:
</span><span>        ent </span><span>= </span><span>entrances.iloc[i]
</span><span>        ent_geom: shp.Point </span><span>= </span><span>ent.geometry
</span><span>
</span><span>        dist </span><span>= </span><span>ent_geom.</span><span>distance</span><span>(establishment.geometry)
</span><span>        
</span><span>        nearest_entrances.</span><span>append</span><span>((i, dist))
</span><span>     
</span><span>    nearest_entrances </span><span>= </span><span>sorted</span><span>(nearest_entrances, </span><span>key </span><span>= lambda </span><span>e</span><span>: e[</span><span>1</span><span>])[:</span><span>3</span><span>]
</span><span>    entrance_geom: list[shp.Point] </span><span>= </span><span>[entrances.iloc[i].geometry </span><span>for </span><span>(i, </span><span>_</span><span>) </span><span>in </span><span>nearest_entrances]
</span><span>    entrance_nodes: list[int] </span><span>= </span><span>[ox.</span><span>nearest_nodes</span><span>(graph, point.x, point.y) </span><span>for </span><span>point </span><span>in </span><span>entrance_geom]
</span><span>    entrance_geom_dist_to_node: list[float] </span><span>= </span><span>[</span><span>node_geom_dist</span><span>(entrance_nodes[i], entrance_geom[i]) </span><span>for </span><span>i </span><span>in </span><span>range</span><span>(</span><span>len</span><span>(nearest_entrances))]
</span><span>
</span><span>    result_paths </span><span>= </span><span>[nx.</span><span>shortest_path</span><span>(graph, establishment_node, dest_node, </span><span>weight</span><span>=</span><span>"length"</span><span>) </span><span>for </span><span>dest_node </span><span>in </span><span>entrance_nodes]
</span><span>    result_lengths: list[float] </span><span>= </span><span>[nx.</span><span>path_weight</span><span>(graph, path, </span><span>"length"</span><span>) </span><span>+ </span><span>entrance_geom_dist_to_node[i] </span><span>+ </span><span>establishment_dist_to_node </span><span>for </span><span>(i, path) </span><span>in </span><span>enumerate</span><span>(result_paths)]
</span><span>
</span><span>    distances.</span><span>append</span><span>(</span><span>min</span><span>(result_lengths))
</span><span>
</span><span>establishments[</span><span>"distance"</span><span>] </span><span>= </span><span>distances 
</span><span>establishments.</span><span>to_file</span><span>(</span><span>"establishment_results.gpkg"</span><span>)
</span></code></pre>
<p>Not exactly my finest work. The sheer amount of list comprehension is perhaps a little terrifying, but it works.</p>
<p>After some prodding around in QGIS with the resulting data and networks (and many print() statements), I was confident in the accuracy of the results.</p>
<h2 id="results">Results<a href="#results" aria-label="Anchor link for: results">🔗</a></h2>
<p>Now with all of this data, it is time to settle the question of whether or not the kebabs are less tasty the closer they are to a train/metro station...</p>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-7.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-7.1ff7f2b316a90f62.jpg"></a>

<em>Figure 7. Hmmmmm....</em></p>
<p>With a mighty Pearson's correlation of 0.091, the data indicates that this could be true! If you ignore the fact that the correlation is so weak that calling it 'statistically insignificant' would be quite generous.</p>
<p>Outliers can have an outsized impact on a Pearson's correlation, so after ridding the dataset of some outliers via IQR fencing...</p>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-8.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-8.af2b5c5cacb7b32d.jpg"></a>

<em>Figure 8. Removed outliers</em></p>
<p>... This increased the coefficient to a whopping 0.098.</p>
<p>This was a bit of a bummer (though hardly surprising) and figuring I had nothing to lose from messing around a little, I tried filtering out metro stations in case my original assumption of the metro being included in the original hypothesis was incorrect.</p>
<p>
<a href="https://jmspae.se/write-ups/kebabs-train-stations/fig-9.webp" target="_blank"><img src="https://jmspae.se/processed_images/fig-9.3427bdea5242e0b1.jpg"></a>

*Figure 9. Not much better, eh? Correction: "... Nearest train station entrance."</p>
<p>With an even worse coefficient of 0.001, I think It's time to hang up the towel.</p>
<p>Whilst there are some minor indications that the hypothesis <em>could</em> be correct (eg. Many of the absolute worst restaurants being some of the closest) the correlation is simply too weak.</p>
<h2 id="discussion">Discussion<a href="#discussion" aria-label="Anchor link for: discussion">🔗</a></h2>
<p><em><strong>- Are Google reviews an objective measurement of how tasty the kebabs are?</strong></em></p>
<p>Absolutely the f### not. This was a rather subjective observation from the very beginning and Google reviews aren't exactly a good measure of "is the food good?" There are many aspects of the dining experience that could hypothetically impact a review score. The staff, cleanliness, the surrounding environment, etc. Not to mention online skulduggery and review manipulation.</p>
<p><em><strong>- Can tourism have an impact?</strong></em></p>
<p>It absolutely could. I don't want to make any definitive assumptions, but I can absolutely imagine the local regulars being harsher than the massive tourist population, or even vice-versa.</p>
<p><em><strong>- Were the Google results accurate?</strong></em></p>
<p>To an extent, yes. From what I could gather, every location from the query seemed to serve kebab in some form. There were a few weird outliers and nuances, such as Pizza Hut which likely only serves kebab pizza rather than the multitude of different forms in which kebab could possibly be consumed.</p>
<p><em><strong>- Why not restaurants in general?</strong></em></p>
<p>Because the initial hypothesis was too comically hyper-specific for me to give up on.</p>
<p><em><strong>- What about review count?</strong></em></p>
<p>This could very well have an effect, though I was not entirely certain how to properly implement this metric into the analysis at the time.</p>
<p><em><strong>- Gib Data</strong></em></p>
<p>I'm not quite comfortable in doing so, mostly due to potential breaches of Google's TOS. I don't think they would care about me harvesting some 400 POIs for this little experiment, I'm not quite willing to gamble sharing the data with others.</p>
<p>Besides, I gave you the code. Go burn some of your own credits.</p>
<p><em><strong>- Are you Ok?</strong></em></p>
<p>... I guess? Are you?</p>
<p>In conclusion, this was actually quite fun. I wrote this as the project went on (otherwise I would likely never have found the motivation) and I would encourage others to do other silly explorations like this, even if the results end up slightly depressing.</p>
<p>... <em>However</em>, after some additional discussion, I decided I wasn't quite done.</p>
<p>As stated earlier, there were a few detracting comments on the original French post. Interestingly, many of the provided examples of good kebab restaurants next to train stations just so happened to be in Paris.</p>
<p>The user who originally posted the French post for the sub in English provided some <a href="https://imgur.com/gallery/kebab-railway-stations-wuYG9D2">examples</a> which seem to strengthen the hypothesis. It could very well be that whatever conditions affect Paris restaurants (whether it be higher rent, wages, tourism, population density...) had a larger impact than I initially suspected.</p>
<p><em><strong>Stay tuned for part 2... Whenever I get around to doing it!</strong></em></p>


			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Claude 3.7 Sonnet and Claude Code (1356 pts)]]></title>
            <link>https://www.anthropic.com/news/claude-3-7-sonnet</link>
            <guid>43163011</guid>
            <pubDate>Mon, 24 Feb 2025 18:28:59 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.anthropic.com/news/claude-3-7-sonnet">https://www.anthropic.com/news/claude-3-7-sonnet</a>, See on <a href="https://news.ycombinator.com/item?id=43163011">Hacker News</a></p>
<div id="readability-page-1" class="page"><article><div><p>Today, we’re announcing Claude 3.7 Sonnet<sup>1</sup>, our most intelligent model to date and the first hybrid reasoning model on the market. Claude 3.7 Sonnet can produce near-instant responses or extended, step-by-step thinking that is made <a href="https://youtu.be/t3nnDXa81Hs">visible to the user</a>. API users also have fine-grained control over <em>how long</em> the model can think for.</p><p>Claude 3.7 Sonnet shows particularly strong improvements in coding and front-end web development. Along with the model, we’re also introducing a command line tool for agentic coding, Claude Code. Claude Code is available as a limited research preview, and enables developers to delegate substantial engineering tasks to Claude directly from their terminal.</p><div><figure><img alt="Screen showing Claude Code onboarding" loading="eager" width="1920" height="1080" decoding="async" data-nimg="1" srcset="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F4a4df6b6629f9814aec4eb9323028130f43a8d70-1920x1080.png&amp;w=1920&amp;q=75 1x, https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F4a4df6b6629f9814aec4eb9323028130f43a8d70-1920x1080.png&amp;w=3840&amp;q=75 2x" src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F4a4df6b6629f9814aec4eb9323028130f43a8d70-1920x1080.png&amp;w=3840&amp;q=75"></figure></div><p>Claude 3.7 Sonnet is now available on all <a href="https://claude.ai/new">Claude</a> plans—including Free, Pro, Team, and Enterprise—as well as the <a href="https://docs.anthropic.com/en/docs/about-claude/models">Anthropic API</a>, <a href="https://aws.amazon.com/bedrock/claude/">Amazon Bedrock</a>, and <a href="https://cloud.google.com/vertex-ai/generative-ai/docs/partner-models/use-claude">Google Cloud’s Vertex AI</a>. Extended thinking mode is available on all surfaces except the free Claude tier.</p><p>In both standard and extended thinking modes, Claude 3.7 Sonnet has the same price as its predecessors: $3 per million input tokens and $15 per million output tokens—which includes thinking tokens.</p><h2 id="claude-37-sonnet-frontier-reasoning-made-practical">Claude 3.7 Sonnet: Frontier reasoning made practical</h2><p>We’ve developed Claude 3.7 Sonnet with a different philosophy from other reasoning models on the market. Just as humans use a single brain for both quick responses and deep reflection, we believe reasoning should be an integrated capability of frontier models rather than a separate model entirely. This unified approach also creates a more seamless experience for users.</p><p>Claude 3.7 Sonnet embodies this philosophy in several ways. First, Claude 3.7 Sonnet is both an ordinary LLM and a reasoning model in one: you can pick when you want the model to answer normally and when you want it to <a href="https://www.anthropic.com/research/visible-extended-thinking">think longer before answering</a>. In the standard mode, Claude 3.7 Sonnet represents an upgraded version of Claude 3.5 Sonnet. In <a href="https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking">extended thinking mode</a>, it self-reflects before answering, which improves its performance on math, physics, instruction-following, coding, and many other tasks. We generally find that prompting for the model works similarly in both modes.</p><p>Second, when using Claude 3.7 Sonnet through the API, users can also control the <em>budget </em>for thinking: you can tell Claude to think for no more than N tokens, for any value of N up to its output limit of 128K tokens. This allows you to trade off speed (and cost) for quality of answer.</p><p>Third, in developing our reasoning models, we’ve optimized somewhat less for math and computer science competition problems, and instead shifted focus towards real-world tasks that better reflect how businesses actually use LLMs.</p><p><a href="https://www.anthropic.com/claude/sonnet">Early testing</a> demonstrated Claude’s leadership in coding capabilities across the board: Cursor noted Claude is once again best-in-class for real-world coding tasks, with significant improvements in areas ranging from handling complex codebases to advanced tool use. Cognition found it far better than any other model at planning code changes and handling full-stack updates. Vercel highlighted Claude’s exceptional precision for complex agent workflows, while Replit has successfully deployed Claude to build sophisticated web apps and dashboards from scratch, where other models stall. In Canva’s evaluations, Claude consistently produced production-ready code with superior design taste and drastically reduced errors.</p><div><figure><img alt="Bar chart showing Claude 3.7 Sonnet as state-of-the-art for SWE-bench Verified" loading="lazy" width="1920" height="1145" decoding="async" data-nimg="1" srcset="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F08bba4487fb5ac1ba52540ee656d7e4da10ca1be-1920x1145.png&amp;w=1920&amp;q=75 1x, https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F08bba4487fb5ac1ba52540ee656d7e4da10ca1be-1920x1145.png&amp;w=3840&amp;q=75 2x" src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F08bba4487fb5ac1ba52540ee656d7e4da10ca1be-1920x1145.png&amp;w=3840&amp;q=75"><figcaption>Claude 3.7 Sonnet achieves state-of-the-art performance on SWE-bench Verified, which evaluates AI models’ ability to solve real-world software issues. See the appendix for more information on scaffolding.</figcaption></figure></div><div><figure><img alt="Bar chart showing Claude 3.7 Sonnet as state-of-the-art for TAU-bench" loading="lazy" width="1920" height="1114" decoding="async" data-nimg="1" srcset="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F787e59d548c230afd7efaed1bda1fb7f7ca207b8-1920x1114.png&amp;w=1920&amp;q=75 1x, https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F787e59d548c230afd7efaed1bda1fb7f7ca207b8-1920x1114.png&amp;w=3840&amp;q=75 2x" src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F787e59d548c230afd7efaed1bda1fb7f7ca207b8-1920x1114.png&amp;w=3840&amp;q=75"><figcaption>Claude 3.7 Sonnet achieves state-of-the-art performance on TAU-bench, a framework that tests AI agents on complex real-world tasks with user and tool interactions. See the appendix for more information on scaffolding.</figcaption></figure></div><div><figure><img alt="Benchmark table comparing frontier reasoning models" loading="lazy" width="2600" height="2360" decoding="async" data-nimg="1" srcset="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F654cf6680d32858dfba9af644f8c4a5b04425af1-2600x2360.png&amp;w=3840&amp;q=75 1x" src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F654cf6680d32858dfba9af644f8c4a5b04425af1-2600x2360.png&amp;w=3840&amp;q=75"><figcaption>Claude 3.7 Sonnet excels across instruction-following, general reasoning, multimodal capabilities, and agentic coding, with extended thinking providing a notable boost in math and science. Beyond traditional benchmarks, it even outperformed all previous models in our <a href="https://www.anthropic.com/research/visible-extended-thinking">Pokémon gameplay tests</a>.</figcaption></figure></div><h2 id="claude-code">Claude Code</h2><p>Since June 2024, Sonnet has been the preferred model for developers worldwide. Today, we're empowering developers further by introducing Claude Code—our first agentic coding tool—in a limited research preview.</p><p>Claude Code is an active collaborator that can search and read code, edit files, write and run tests, commit and push code to GitHub, and use command line tools—keeping you in the loop at every step.</p><p>Claude Code is an early product but has already become indispensable for our team, especially for test-driven development, debugging complex issues, and large-scale refactoring. In early testing, Claude Code completed tasks in a single pass that would normally take 45+ minutes of manual work, reducing development time and overhead.</p><p>In the coming weeks, we plan to continually improve it based on our usage: enhancing tool call reliability, adding support for long-running commands, improved in-app rendering, and expanding Claude's own understanding of its capabilities.</p><p>Our goal with Claude Code is to better understand how developers use Claude for coding to inform future model improvements. By <a href="https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview">joining this preview</a>, you’ll get access to the same powerful tools we use to build and improve Claude, and your feedback will directly shape its future.</p><h2 id="working-with-claude-on-your-codebase">Working with Claude on your codebase</h2><p>We’ve also improved the coding experience on Claude.ai. Our GitHub integration is now available on all Claude plans—enabling developers to connect their code repositories directly to Claude.</p><p>Claude 3.7 Sonnet is our best coding model to date. With a deeper understanding of your personal, work, and open source projects, it becomes a more powerful partner for fixing bugs, developing features, and building documentation across your most important GitHub projects.</p><h2 id="building-responsibly">Building responsibly</h2><p>We’ve conducted extensive testing and evaluation of Claude 3.7 Sonnet, working with external experts to ensure it meets our standards for security, safety, and reliability. Claude 3.7 Sonnet also makes more nuanced distinctions between harmful and benign requests, reducing <a href="https://www.anthropic.com/claude-3-7-sonnet-system-card">unnecessary refusals by 45%</a> compared to its predecessor.</p><p>The <a href="https://www.anthropic.com/claude-3-7-sonnet-system-card">system card</a> for this release covers new safety results in several categories, providing a detailed breakdown of our Responsible Scaling Policy evaluations that other AI labs and researchers can apply to their work. The card also addresses emerging risks that come with computer use, particularly prompt injection attacks, and explains how we evaluate these vulnerabilities and train Claude to resist and mitigate them. Additionally, it examines potential safety benefits from reasoning models: the ability to understand how models make decisions, and whether model reasoning is genuinely trustworthy and reliable. Read the full <a href="https://www.anthropic.com/claude-3-7-sonnet-system-card">system card </a>to learn more.</p><h2 id="looking-ahead">Looking ahead</h2><p>Claude 3.7 Sonnet and Claude Code mark an important step towards AI systems that can truly augment human capabilities. With their ability to reason deeply, work autonomously, and collaborate effectively, they bring us closer to a future where AI enriches and expands what <a href="https://darioamodei.com/machines-of-loving-grace">humans can achieve</a>.</p><div><figure><img alt="Milestone timeline showing Claude progressing from assistant to pioneer" loading="lazy" width="1920" height="1080" decoding="async" data-nimg="1" srcset="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F3bde9831ea84e3663fe4598589d71eaa531f9912-1920x1080.png&amp;w=1920&amp;q=75 1x, https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F3bde9831ea84e3663fe4598589d71eaa531f9912-1920x1080.png&amp;w=3840&amp;q=75 2x" src="https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F3bde9831ea84e3663fe4598589d71eaa531f9912-1920x1080.png&amp;w=3840&amp;q=75"></figure></div><p>We're excited for you to explore these new capabilities and to see what you’ll create with them. As always, we welcome your <a href="mailto: feedback@anthropic.com">feedback</a> as we continue to improve and evolve our models.</p></div></article><div><h4>Appendix</h4><p><sup>1 </sup>Lesson learned on <a href="https://www.anthropic.com/news/3-5-models-and-computer-use">naming</a>.</p><h3>Eval data sources</h3><ul><li><a href="https://x.ai/blog/grok-3">Grok</a></li><li><a href="https://developers.googleblog.com/en/gemini-2-family-expands/">Gemini 2 Pro</a></li><li><a href="https://openai.com/index/openai-o3-mini/">o1 and o3-mini</a></li><li><a href="https://cdn.openai.com/o1-system-card-20241205.pdf">Supplementary o1</a></li><li><a href="https://web.archive.org/web/20250203044057/https://openai.com/index/o1-and-new-tools-for-developers/">o1 TAU-bench</a></li><li><a href="https://cdn.openai.com/o3-mini-system-card-feb10.pdf">Supplementary o3-mini</a></li><li><a href="https://github.com/deepseek-ai/DeepSeek-R1/blob/main/DeepSeek_R1.pdf">Deepseek R1</a></li></ul><h3>TAU-bench</h3><p><strong>Information about the scaffolding</strong></p><p>Scores were achieved with a prompt addendum to the Airline Agent Policy instructing Claude to better utilize a “planning” tool, where the model is encouraged to write down its thoughts as it solves the problem distinct from our usual thinking mode, during the multi-turn trajectories to best leverage its reasoning abilities. To accommodate the additional steps Claude incurs by utilizing more thinking, the maximum number of steps (counted by model completions) was increased from 30 to 100 (most trajectories completed under 30 steps with only one trajectory reaching above 50 steps).</p><p>Additionally, the TAU-bench score for Claude 3.5 Sonnet (new) differs from what we originally reported on release because of small dataset improvements introduced since then. We re-ran on the updated dataset for more accurate comparison with Claude 3.7 Sonnet.</p><h3>SWE-bench Verified</h3><p><strong>Information about the scaffolding</strong></p><p>There are many approaches to solving open ended agentic tasks like SWE-bench. Some approaches offload much of the complexity of deciding which files to investigate or edit and which tests to run to more traditional software, leaving the core language model to generate code in predefined places, or select from a more limited set of actions. Agentless (<a href="https://arxiv.org/abs/2407.01489">Xia et al., 2024</a>) is a popular framework used in the evaluation of Deepseek’s R1 and other models which augments an agent with prompt- and embedding-based file retrieval mechanisms, patch localization, and best-of-40 rejection sampling against regression tests. Other scaffolds (e.g. <a href="https://aide.dev/blog/sota-bitter-lesson">Aide</a>) further supplement models with additional test-time compute in the form of retries, best-of-N, or Monte Carlo Tree Search (MCTS).</p><p>For Claude 3.7 Sonnet and Claude 3.5 Sonnet (new), we use a much simpler approach with minimal scaffolding, where the model decides which commands to run and files to edit in a single session. Our main “no extended thinking” pass@1 result simply equips the model with the <a href="https://www.anthropic.com/research/swe-bench-sonnet">two tools described here</a>—a bash tool, and a file editing tool that operates via string replacements—as well as the “planning tool” mentioned above in our TAU-bench results. Due to infrastructure limitations, only 489/500 problems are actually solvable on our internal infrastructure (i.e., the golden solution passes the tests). For our vanilla pass@1 score we are counting the 11 unsolvable problems as failures to maintain parity with the <a href="https://www.swebench.com/#verified">official leaderboard</a>. For transparency, we separately release the test cases that did not work on our infrastructure.</p><p>For our “high compute” number we adopt additional complexity and parallel test-time compute as follows:</p><ul><li>We sample multiple parallel attempts with the scaffold above</li><li>We discard patches that break the visible regression tests in the repository, similar to the rejection sampling approach adopted by Agentless; note no hidden test information is used.</li><li>We then rank the remaining attempts with a scoring model similar to our results on GPQA and AIME described in our <a href="https://www.anthropic.com/news/visible-extended-thinking">research post</a> and choose the best one for the submission.</li></ul><p>This results in a score of 70.3% on the subset of n=489 verified tasks which work on our infrastructure. Without this scaffold, Claude 3.7 Sonnet achieves 63.7% on SWE-bench Verified using this same subset. The excluded 11 test cases that were incompatible with our internal infrastructure are:</p><ul><li>scikit-learn__scikit-learn-14710</li><li>django__django-10097</li><li>psf__requests-2317</li><li>sphinx-doc__sphinx-10435</li><li>sphinx-doc__sphinx-7985</li><li>sphinx-doc__sphinx-8475</li><li>matplotlib__matplotlib-20488</li><li>astropy__astropy-8707</li><li>astropy__astropy-8872</li><li>sphinx-doc__sphinx-8595</li><li>sphinx-doc__sphinx-9711</li></ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The best way to use text embeddings portably is with Parquet and Polars (143 pts)]]></title>
            <link>https://minimaxir.com/2025/02/embeddings-parquet/</link>
            <guid>43162995</guid>
            <pubDate>Mon, 24 Feb 2025 18:27:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://minimaxir.com/2025/02/embeddings-parquet/">https://minimaxir.com/2025/02/embeddings-parquet/</a>, See on <a href="https://news.ycombinator.com/item?id=43162995">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><a href="https://stackoverflow.blog/2023/11/09/an-intuitive-introduction-to-text-embeddings/">Text embeddings</a>, particularly modern embeddings generated from large language models, are one of the most useful applications coming from the generative AI boom. Embeddings are a list of numbers which represent an object: in the case of text embeddings, they can represent words, sentences, and full paragraphs and documents, and they do so with a surprising amount of distinctiveness.</p><p>Recently, I created text embeddings representing every distinct <a href="https://magic.wizards.com/en">Magic: the Gathering</a> card released as of the February 2025 Aetherdrift expansion: 32,254 in total. With these embeddings, I can find the mathematical similarity between cards through the encoded representation of their card design, including all mechanical attributes such as the card name, card cost, card text, and even card rarity.</p><figure><img loading="lazy" srcset="https://minimaxir.com/2025/02/embeddings-parquet/wog_hu17410071956209960561.webp 320w,https://minimaxir.com/2025/02/embeddings-parquet/wog_hu17201351259632573234.webp 768w,https://minimaxir.com/2025/02/embeddings-parquet/wog.webp 976w" src="https://minimaxir.com/2025/02/embeddings-parquet/wog.webp" alt="The iconic Magic card Wrath of God, along with its top four most similar cards identified using their respective embeddings. The similar cards are valid matches, with similar card text and card types."><figcaption><p>The iconic Magic card <a href="https://gatherer.wizards.com/pages/card/Details.aspx?multiverseid=129808">Wrath of God</a>, along with its top four most similar cards identified using their respective embeddings. The similar cards are valid matches, with similar card text and card types.</p></figcaption></figure><p>Additionally, I can create a fun 2D <a href="https://umap-learn.readthedocs.io/en/latest/">UMAP</a> projection of all those cards, which also identifies interesting patterns:</p><figure><img loading="lazy" srcset="https://minimaxir.com/2025/02/embeddings-parquet/mtg_umap_hu1954379011677155299.webp 320w,https://minimaxir.com/2025/02/embeddings-parquet/mtg_umap_hu11781744338083152452.webp 768w,https://minimaxir.com/2025/02/embeddings-parquet/mtg_umap_hu15618369906233811734.webp 1024w,https://minimaxir.com/2025/02/embeddings-parquet/mtg_umap.webp 1200w" src="https://minimaxir.com/2025/02/embeddings-parquet/mtg_umap.webp" alt="The UMAP dimensionality reduction process also implicitly clusters the Magic cards to logical clusters, such as by card color(s) and card type."><figcaption><p>The UMAP dimensionality reduction process also implicitly clusters the Magic cards to logical clusters, such as by card color(s) and card type.</p></figcaption></figure><p>I generated these Magic card embeddings for <em>something special</em> besides a pretty data visualization, but if you are curious how I generated them, they were made using the new-but-underrated <a href="https://huggingface.co/Alibaba-NLP/gte-modernbert-base">gte-modernbert-base</a> embedding model and the process is detailed <a href="https://github.com/minimaxir/mtg-embeddings">in this GitHub repository</a>. The embeddings themselves (including the coordinate values to reproduce the 2D UMAP visualization) are available as a <a href="https://huggingface.co/datasets/minimaxir/mtg-embeddings">Hugging Face dataset</a>.</p><p>Most tutorials involving embedding generation omit the obvious question: what do you <em>do</em> with the text embeddings after you generate them? The common solution is to use a <a href="https://en.wikipedia.org/wiki/Vector_database">vector database</a>, such as <a href="https://github.com/facebookresearch/faiss">faiss</a> or <a href="https://qdrant.tech/">qdrant</a>, or even a cloud-hosted service such as <a href="https://www.pinecone.io/">Pinecone</a>. But those aren’t easy to use: faiss has <a href="https://github.com/facebookresearch/faiss/wiki/Guidelines-to-choose-an-index">confusing configuration options</a>, qdrant requires <a href="https://github.com/qdrant/qdrant?tab=readme-ov-file#client-server">using a Docker container</a> to host the storage server, and Pinecone can get <a href="https://www.pinecone.io/pricing/">very expensive</a> very quickly, and its free Starter tier is limited.</p><p>What many don’t know about text embeddings is that you don’t <em>need</em> a vector database to calculate nearest-neighbor similarity if your data isn’t too large. Using <a href="https://numpy.org/doc/stable/index.html">numpy</a> and my Magic card embeddings, a 2D matrix of 32,254 <code>float32</code> embeddings at a dimensionality of 768D (common for “smaller” LLM embedding models) occupies <strong>94.49 MB</strong> of system memory, which is relatively low for modern personal computers and can fit within free usage tiers of cloud VMs. If both the query vector and the embeddings themselves are unit normalized (many embedding generators normalize by default), then the matrix dot product between the query and embeddings results in a cosine similarity between <code>[-1, 1]</code>, where the higher score is better/more similar. Since dot products are such a fundamental aspect of linear algebra, numpy’s implementation is extremely fast: with the help of additional numpy <a href="https://numpy.org/doc/stable/reference/generated/numpy.argpartition.html">sorting</a> <a href="https://numpy.org/doc/2.1/reference/generated/numpy.argsort.html">shenanigans</a>, on my M3 Pro MacBook Pro it takes just <strong>1.08 ms</strong> on average to calculate all 32,254 dot products, find the top 3 most similar embeddings, and return their corresponding <code>idx</code> of the matrix and and cosine similarity <code>score</code>.</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>def</span> <span>fast_dot_product</span><span>(</span><span>query</span><span>,</span> <span>matrix</span><span>,</span> <span>k</span><span>=</span><span>3</span><span>):</span>
</span></span><span><span>    <span>dot_products</span> <span>=</span> <span>query</span> <span>@</span> <span>matrix</span><span>.</span><span>T</span>
</span></span><span><span>
</span></span><span><span>    <span>idx</span> <span>=</span> <span>np</span><span>.</span><span>argpartition</span><span>(</span><span>dot_products</span><span>,</span> <span>-</span><span>k</span><span>)[</span><span>-</span><span>k</span><span>:]</span>
</span></span><span><span>    <span>idx</span> <span>=</span> <span>idx</span><span>[</span><span>np</span><span>.</span><span>argsort</span><span>(</span><span>dot_products</span><span>[</span><span>idx</span><span>])[::</span><span>-</span><span>1</span><span>]]</span>
</span></span><span><span>
</span></span><span><span>    <span>score</span> <span>=</span> <span>dot_products</span><span>[</span><span>idx</span><span>]</span>
</span></span><span><span>
</span></span><span><span>    <span>return</span> <span>idx</span><span>,</span> <span>score</span>
</span></span></code></pre></div><p>In most implementations of vector databases, once you insert the embeddings, they’re stuck there in a proprietary serialization format and you are locked into that library and service. If you’re just building a personal pet project or sanity-checking embeddings to make sure the results are good, that’s a huge amount of friction. For example, when I want to experiment with embeddings, I generate them on a cloud server with a GPU since LLM-based embeddings models are often slow to generate without one, and then download them locally to my personal computer. What is the best way to handle embeddings portably such that they can easily be moved between machines and also in a non-proprietary format?</p><p>The answer, after much personal trial-and-error, is Parquet files, which still has a surprising amount of nuance. But before we talk about why Parquet files are good, let’s talk about how <em>not</em> to store embeddings.</p><h2 id="the-worst-ways-to-store-embeddings">The Worst Ways to Store Embeddings</h2><p>The incorrect-but-unfortunately-common way to store embeddings is in a text format such as a CSV file. Text data is substantially larger than <code>float32</code> data: for example, a decimal number with full precision (e.g. <code>2.145829051733016968e-02</code>) as a <code>float32</code> is 32 bits/4 bytes, while as a text representation (in this case 24 ASCII <code>char</code>s) it’s 24 bytes, <strong>6x larger</strong>. When the CSV is saved and loaded, the data has to be serialized between a numpy and a string representation of the array, which adds significant overhead. Despite that, in <a href="https://github.com/openai/openai-cookbook/blob/a3e98ea4dcf866b5e7a3cb7d63dccaa68c7d63aa/examples/Embedding_Wikipedia_articles_for_search.ipynb">one of OpenAI’s official tutorials</a> for their embeddings models, they save the embeddings as a CSV using <a href="https://pandas.pydata.org/">pandas</a> with the admitted caveat of “Because this example only uses a few thousand strings, we’ll store them in a CSV file. (For larger datasets, use a vector database, which will be more performant.)”. In the case of the Magic card embeddings, pandas-to-CSV performs the <em>worst</em> out of any encoding options: more on why later.</p><p>Numpy has native methods to <a href="https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html">save</a> and <a href="https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html">load</a> embeddings as a <code>.txt</code> that’s straightforward:</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>np</span><span>.</span><span>savetxt</span><span>(</span><span>"embeddings_txt.txt"</span><span>,</span> <span>embeddings</span><span>)</span>
</span></span><span><span>
</span></span><span><span><span>embeddings_r</span> <span>=</span> <span>np</span><span>.</span><span>loadtxt</span><span>(</span><span>"embeddings_txt.txt"</span><span>,</span> <span>dtype</span><span>=</span><span>np</span><span>.</span><span>float32</span><span>,</span> <span>delimiter</span><span>=</span><span>" "</span><span>)</span>
</span></span></code></pre></div><p>The resulting file not only takes a few seconds to save and load, but it’s also massive: <strong>631.5 MB</strong>!</p><p>As an aside, HTTP APIs such as OpenAI’s <a href="https://platform.openai.com/docs/guides/embeddings">Embeddings API</a> do transmit the embeddings over text which adds needless latency and bandwidth overhead. I wish more embedding providers offered <a href="https://grpc.io/">gRPC</a> APIs which allow transfer of binary <code>float32</code> data instead to gain a performance increase: Pinecone’s <a href="https://docs.pinecone.io/reference/python-sdk">Python SDK</a>, for example, does just that.</p><p>The second incorrect method to save a matrix of embeddings to disk is to save it as a Python <a href="https://docs.python.org/3/library/pickle.html">pickle</a> object, which stores its representation in memory on disk with a few lines of code from the native <code>pickle</code> library. Pickling is unfortunately common in the machine learning industry since many ML frameworks such as <a href="https://scikit-learn.org/stable/">scikit-learn</a> don’t have easy ways to serialize encoders and models. But it comes with two major caveats: pickled files are a massive security risk as they can execute arbitrary code, and the pickled file may not be guaranteed to be able to be opened on other machines or Python versions. It’s 2025, just stop pickling if you can.</p><p>In the case of the Magic card embeddings, it does indeed work with instant save/loads, and the file size on disk is <strong>94.49 MB</strong>: the same as its memory consumption and about 1/6th of the text size as expected:</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>with</span> <span>open</span><span>(</span><span>"embeddings_matrix.pkl"</span><span>,</span> <span>"wb"</span><span>)</span> <span>as</span> <span>f</span><span>:</span>
</span></span><span><span>    <span>pickle</span><span>.</span><span>dump</span><span>(</span><span>embeddings</span><span>,</span> <span>f</span><span>)</span>
</span></span><span><span>
</span></span><span><span><span>with</span> <span>open</span><span>(</span><span>"embeddings_matrix.pkl"</span><span>,</span> <span>"rb"</span><span>)</span> <span>as</span> <span>f</span><span>:</span>
</span></span><span><span>    <span>embeddings_r</span> <span>=</span> <span>pickle</span><span>.</span><span>load</span><span>(</span><span>f</span><span>)</span>
</span></span></code></pre></div><p>But there are still better and easier approaches.</p><h2 id="the-intended-but-not-great-way-to-store-embeddings">The Intended-But-Not-Great Way to Store Embeddings</h2><p>Numpy itself has a canonical way to <a href="https://numpy.org/doc/2.1/reference/generated/numpy.save.html">save</a> and <a href="https://numpy.org/doc/2.1/reference/generated/numpy.load.html">load</a> matrixes — which annoyingly saves as a pickle by default for compatability reasons, but that can fortunately be disabled by setting <code>allow_pickle=False</code>:</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>np</span><span>.</span><span>save</span><span>(</span><span>"embeddings_matrix.npy"</span><span>,</span> <span>embeddings</span><span>,</span> <span>allow_pickle</span><span>=</span><span>False</span><span>)</span>
</span></span><span><span>
</span></span><span><span><span>embeddings_r</span> <span>=</span> <span>np</span><span>.</span><span>load</span><span>(</span><span>"embeddings_matrix.npy"</span><span>,</span> <span>allow_pickle</span><span>=</span><span>False</span><span>)</span>
</span></span></code></pre></div><p>File size and I/O speed are the same as with the <code>pickle</code> approach.</p><p>This works — and it’s something I had used for awhile — but in the process it exposes another problem: how do we map metadata (the Magic cards in this case) to embeddings? Currently, we use the <code>idx</code> of the most-similar matches to perform an efficient batched lookup to the source data. In this case, the number of rows matches the number of cards exactly, but what happens if the embeddings matrix needs to be changed, such as to add or remove cards and their embeddings? What happens if you want to add a dataset filter? It becomes a mess that inevitably causes technical debt.</p><p>The solution to this is to colocate metadata such as card names, card text, and attributes with their embeddings: that way, if they are later added, removed, or sorted, the results will remain the same. Modern vector databases such as qdrant and Pinecone do just that, with the ability to filter and sort on the metadata at the same time you query the most similar vectors. This is a bad idea to do in numpy itself, as it’s more optimized for numbers and not other data types such as strings, which have <a href="https://numpy.org/devdocs/user/basics.strings.html">limited operations available</a>.</p><p>The solution is to look at another file format that can store metadata and embeddings simultaneously, and the answer to that is Parquet files. But there’s a rabbit hole as to what’s the <em>best</em> way to interact with them.</p><h2 id="what-are-parquet-files">What are Parquet files?</h2><p>Parquet, developed by the open-source <a href="https://parquet.apache.org/">Apache Parquet</a> project, is a file format for handling columnar data, but despite being <a href="https://blog.x.com/engineering/en_us/a/2013/announcing-parquet-10-columnar-storage-for-hadoop">first released in 2013</a> it hasn’t taken off in the data science community until very recently. <sup id="fnref:1"><a href="#fn:1" role="doc-noteref">1</a></sup> The most relevant feature of Parquet is that the resulting files are typed for each column, and that this typing includes nested lists, such as an embedding which is just a list of <code>float32</code> values. As a bonus, the columnar format allows downstream libraries to save/load them selectively and very quickly, far faster than CSVs and with rare parsing errors. The file format also allows for efficient compression and decompression, but that’s less effective with embeddings as there’s little redundant data.</p><p>For Parquet file I/O, the standard approach is to use the <a href="https://arrow.apache.org/">Apache Arrow</a> protocol that is columnar in-memory, which complements the Parquet storage medium on disk. But how do you use Arrow?</p><h2 id="how-do-you-use-parquet-files-in-python-for-embeddings">How do you use Parquet files in Python for embeddings?</h2><p>Ideally, we need a library that can handle nested data easily and can interoperate with numpy for serializing to a matrix and can run fast dot products.</p><p>The official Arrow library that <a href="https://arrow.apache.org/docs/python/index.html">interacts with Parquet natively</a> in Python is <a href="https://arrow.apache.org/docs/python/index.html">pyarrow</a>. Here, I have an example Parquet file generated with [SPOILERS] that contains both the card metadata and an <code>embedding</code> column, with the embedding for each row corresponding to that card.</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>df</span> <span>=</span> <span>pa</span><span>.</span><span>parquet</span><span>.</span><span>read_table</span><span>(</span><span>"mtg-embeddings.parquet"</span><span>)</span>
</span></span></code></pre></div><figure><img loading="lazy" srcset="https://minimaxir.com/2025/02/embeddings-parquet/parquet_hu17998700735124782486.webp 320w,https://minimaxir.com/2025/02/embeddings-parquet/parquet_hu3640072816198911328.webp 768w,https://minimaxir.com/2025/02/embeddings-parquet/parquet_hu8958370197007221068.webp 1024w,https://minimaxir.com/2025/02/embeddings-parquet/parquet.png 1352w" src="https://minimaxir.com/2025/02/embeddings-parquet/parquet.png" alt="Pyarrow’s table schema from the input Parquet file of Magic card embeddings. Note the embedding column at the bottom is a list of 768 floats."><figcaption><p>Pyarrow’s table schema from the input Parquet file of Magic card embeddings. Note the <code>embedding</code> column at the bottom is a list of 768 floats.</p></figcaption></figure><p>But pyarrow is not a DataFrame library, and despite the data being in a Table, it’s hard to slice and access: the documentation suggests that you export to pandas if you need more advanced manipulation.</p><p>Other more traditional data science libraries can leverage pyarrow directly. The most popular one is, of course, pandas itself which can <a href="https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html">read/write Parquet</a> doing just that. There are many, many resources for using pandas well, so it’s often the first choice among data science practioners.</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>df</span> <span>=</span> <span>pd</span><span>.</span><span>read_parquet</span><span>(</span><span>"mtg-embeddings.parquet"</span><span>,</span> <span>columns</span><span>=</span><span>[</span><span>"name"</span><span>,</span> <span>"embedding"</span><span>])</span>
</span></span><span><span><span>df</span>
</span></span></code></pre></div><figure><img loading="lazy" srcset="https://minimaxir.com/2025/02/embeddings-parquet/pandas_embed_hu6407179862966887367.webp 320w,https://minimaxir.com/2025/02/embeddings-parquet/pandas_embed_hu14762325519826550103.webp 768w,https://minimaxir.com/2025/02/embeddings-parquet/pandas_embed_hu12287036768330367704.webp 1024w,https://minimaxir.com/2025/02/embeddings-parquet/pandas_embed.png 1224w" src="https://minimaxir.com/2025/02/embeddings-parquet/pandas_embed.png" alt="Pandas HTML table output of the Magic card DataFrame when printed in a Jupyter Notebook."><figcaption><p>Pandas HTML table output of the Magic card DataFrame when printed in a Jupyter Notebook.</p></figcaption></figure><p>There’s one major weakness for the use case of embeddings: pandas is very bad at nested data. From the image above you’ll see that the <code>embedding</code> column <em>appears</em> to be a list of numbers, but it’s actually a list of numpy <code>object</code>s, which is a very inefficent datatype and why I suspect writing it to a CSV is very slow. Simply converting it to numpy with <code>df["embedding"].to_numpy()</code> results in a 1D array, which is definitely wrong, and trying to cast it to <code>float32</code> doesn’t work. I found that the best way to extract the embeddings matrix from a pandas <code>embedding</code> column is to <a href="https://numpy.org/doc/2.1/reference/generated/numpy.vstack.html">np.vstack()</a> the embeddings, e.g. <code>np.vstack(df["embedding"].to_numpy())</code>, which does result in a <code>(32254, 768)</code> <code>float32</code> matrix as expected. That adds a lot of compute and memory overhead in addition to unnecessary numpy array copies. Finally, after computing the dot products between a candidate query and the embedding matrix, row metadata with the most similar values can then be retrieved using <code>df.loc[idx]</code>. <sup id="fnref:2"><a href="#fn:2" role="doc-noteref">2</a></sup></p><p>However, there is another, more recent tabular data library that not only is faster than pandas, it has proper support for nested data. That library is polars.</p><h2 id="the-power-of-polars">The Power of polars</h2><p><a href="https://pola.rs/">Polars</a> is a relatively new Python library which is primarily written in <a href="https://www.rust-lang.org/">Rust</a> and <a href="https://docs.pola.rs/#key-features">supports Arrow</a>, which gives it a <a href="https://duckdblabs.github.io/db-benchmark/">massive performance increase</a> over pandas and many other DataFrame libraries. In the case of Magic cards, 32k rows isn’t nearly “big data” and the gains of using a high-performance library are lesser, but there are some unexpected features that coincidentally work <em>perfectly</em> for the embeddings use case.</p><p>As with pandas, you read a parquet file with a <code>read_parquet()</code>:</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>df</span> <span>=</span> <span>pl</span><span>.</span><span>read_parquet</span><span>(</span><span>"mtg-embeddings.parquet"</span><span>,</span> <span>columns</span><span>=</span><span>[</span><span>"name"</span><span>,</span> <span>"embedding"</span><span>])</span>
</span></span><span><span><span>df</span>
</span></span></code></pre></div><figure><img loading="lazy" srcset="https://minimaxir.com/2025/02/embeddings-parquet/polars_embed_hu6230264701954762810.webp 320w,https://minimaxir.com/2025/02/embeddings-parquet/polars_embed_hu6820488175446530372.webp 768w,https://minimaxir.com/2025/02/embeddings-parquet/polars_embed.png 957w" src="https://minimaxir.com/2025/02/embeddings-parquet/polars_embed.png" alt="Polars HTML table output of the Magic card DataFrame when printed in a Jupyter Notebook."><figcaption><p>Polars HTML table output of the Magic card DataFrame when printed in a Jupyter Notebook.</p></figcaption></figure><p>There’s a notable difference in the table output compared to <code>pandas</code>: it also reports the data type of its columns, and more importantly, it shows that the <code>embedding</code> column consists of arrays, all <code>float32</code>s, and all length 768. That’s a great start!</p><p>polars also has a to_numpy() function. Unlike pandas, if you call <code>to_numpy()</code> on a column as a Series, e.g. <code>df['embedding'].to_numpy()</code>, the returned object is a numpy 2D matrix: no <code>np.vstack()</code> needed. If you look at the <a href="https://docs.pola.rs/api/python/stable/reference/series/api/polars.Series.to_numpy.html">documentation</a> for the function, there’s a curious feature:</p><blockquote><p>This operation copies data only when necessary. The conversion is zero copy when all of the following hold: […]</p></blockquote><p>Zero copy! And in the case of columnar-stored embeddings, the conditions will always hold, but you can set <code>allow_copy=False</code> to throw an error just in case.</p><p>Inversely, if you want to add a 2D embeddings matrix to an existing DataFrame and colocate each embedding’s corresponding metadata, such as after you batch-generate thousands of embeddings and want to save and download the resulting Parquet, it’s just as easy as adding a column to the DataFrame.</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>df</span> <span>=</span> <span>pl</span><span>.</span><span>with_columns</span><span>(</span><span>embedding</span><span>=</span><span>embeddings</span><span>)</span>
</span></span><span><span>
</span></span><span><span><span>df</span><span>.</span><span>write_parquet</span><span>(</span><span>"mtg-embeddings.parquet"</span><span>)</span>
</span></span></code></pre></div><p>Now, let’s put the speed to the test using all the Magic card metadata. What if we perform embedding similarity on a Magic card, but beforehand dynamically filter the dataset according to user parameters (therefore filtering the candidate embeddings at the same time since they are colocated) and perform the similarity calculations quickly as usual? Let’s try with <a href="https://gatherer.wizards.com/pages/card/details.aspx?multiverseid=87908">Lightning Helix</a>, a card whose effects are self-explanatory even to those who don’t play Magic.</p><figure><img loading="lazy" srcset="https://minimaxir.com/2025/02/embeddings-parquet/helix_1_hu9495365185621367508.webp 320w,https://minimaxir.com/2025/02/embeddings-parquet/helix_1_hu243742327427369351.webp 768w,https://minimaxir.com/2025/02/embeddings-parquet/helix_1.webp 976w" src="https://minimaxir.com/2025/02/embeddings-parquet/helix_1.webp" alt="The most similar cards to Lightning Helix do have similar effects, although “Lightning” cards dealing damage is a common trope in Magic. Warleader’s Helix is a direct reference to Lightning Helix."><figcaption><p>The most similar cards to Lightning Helix do have similar effects, although “Lightning” cards dealing damage is a common trope in Magic. <a href="https://gatherer.wizards.com/pages/card/Details.aspx?multiverseid=456806">Warleader’s Helix</a> is a direct reference to Lightning Helix.</p></figcaption></figure><p>Now we can also find similar cards to Lightning Helix but with filters. In this case, let’s look for a Sorcery (which are analogous to Instants but tend to be stronger since they have play limitations) and has Black as one of its colors. This limits the candidates to ~3% of the original dataset. The resulting code would look like this, given a <code>query_embed</code>:</p><div><pre tabindex="0"><code data-lang="py3"><span><span><span>df_filter</span> <span>=</span> <span>df</span><span>.</span><span>filter</span><span>(</span>
</span></span><span><span>    <span>pl</span><span>.</span><span>col</span><span>(</span><span>"type"</span><span>)</span><span>.</span><span>str</span><span>.</span><span>contains</span><span>(</span><span>"Sorcery"</span><span>),</span>
</span></span><span><span>    <span>pl</span><span>.</span><span>col</span><span>(</span><span>"manaCost"</span><span>)</span><span>.</span><span>str</span><span>.</span><span>contains</span><span>(</span><span>"B"</span><span>),</span>
</span></span><span><span><span>)</span>
</span></span><span><span>
</span></span><span><span><span>embeddings_filter</span> <span>=</span> <span>df_filter</span><span>[</span><span>"embedding"</span><span>]</span><span>.</span><span>to_numpy</span><span>(</span><span>allow_copy</span><span>=</span><span>False</span><span>)</span>
</span></span><span><span><span>idx</span><span>,</span> <span>_</span> <span>=</span> <span>fast_dot_product</span><span>(</span><span>query_embed</span><span>,</span> <span>embeddings_filter</span><span>,</span> <span>k</span><span>=</span><span>4</span><span>)</span>
</span></span><span><span><span>related_cards</span> <span>=</span> <span>df_filter</span><span>[</span><span>idx</span><span>]</span>
</span></span></code></pre></div><p>As an aside, in polars you can call row subsets of a DataFrame with <code>df[idx]</code>, which makes it infinitely better than pandas and its <code>df.iloc[idx]</code>.</p><p>The resulting similar cards:</p><figure><img loading="lazy" srcset="https://minimaxir.com/2025/02/embeddings-parquet/helix_2_hu8536479567478311954.webp 320w,https://minimaxir.com/2025/02/embeddings-parquet/helix_2_hu10382916257055575322.webp 768w,https://minimaxir.com/2025/02/embeddings-parquet/helix_2.webp 976w" src="https://minimaxir.com/2025/02/embeddings-parquet/helix_2.webp" alt="In this case, the similarity focuses on card text similarity, and these cards have near identical text. Smiting Helix is also a direct reference to Lightning Helix."><figcaption><p>In this case, the similarity focuses on card text similarity, and these cards have near identical text. <a href="https://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=464058">Smiting Helix</a> is also a direct reference to Lightning Helix.</p></figcaption></figure><p>Speed-wise, the code runs at about <strong>1.48ms</strong> on average, or about 37% slower than calculating all dot products, so the filtering does still have some overhead, which is not surprising as that the filtered dataframe does copy the embeddings. Overall, it’s still more than fast enough for a hobby project.</p><p>I’ve created an <a href="https://colab.research.google.com/drive/19C_9sBC0Py2PlXYihl2ed378oGyroONZ?usp=sharing">interactive Colab Notebook</a> where you can generate similarities for any Magic card, and apply any filters you want!</p><h2 id="scaling-to-vector-databases">Scaling to Vector Databases</h2><p>Again, all of this assumes that you are using the embeddings for smaller/noncommercial projects. If you scale to hundreds of thousands of embeddings, the parquet and dot product approach for finding similarity should still be fine, but if it’s a business critical application, the marginal costs of querying a vector database are likely lower than the marginal revenue from a snappy similarity lookup. Deciding how to make these tradeoffs is the fun part of MLOps!</p><p>In the case that the amount of vectors is too large to fit into memory but you don’t want to go all-in on vector databases, another option that may be worth considering is using an old-fashioned database that can now support vector embeddings. Notably, <a href="https://www.sqlite.org/">SQLite</a> databases are just a single portable file, however interacting with them has more technical overhead and considerations than the <code>read_parquet()</code> and <code>write_parquet()</code> of polars. One notable implementation of vector databases in SQLite is the <a href="https://alexgarcia.xyz/sqlite-vec/">sqlite-vec extension</a>, which also allows for simultaneous filtering and similarity calculations.</p><p>The next time you’re working with embeddings, consider whether you really need a vector database. For many applications, the combination of Parquet files and polars provides everything you need: efficient storage, fast similarity search, and easy metadata filtering. Sometimes the simplest solution is the best one.</p><p><em>The code used to process the Magic card data, create the embeddings, and plot the UMAP 2D projection, is all available <a href="https://github.com/minimaxir/mtg-embeddings">in this GitHub repository</a>.</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Google Co-Scientist AI fed previous paper with the answer in it (142 pts)]]></title>
            <link>https://pivot-to-ai.com/2025/02/22/google-co-scientist-ai-cracks-superbug-problem-in-two-days-because-it-had-been-fed-the-teams-previous-paper-with-the-answer-in-it/</link>
            <guid>43162582</guid>
            <pubDate>Mon, 24 Feb 2025 17:52:11 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://pivot-to-ai.com/2025/02/22/google-co-scientist-ai-cracks-superbug-problem-in-two-days-because-it-had-been-fed-the-teams-previous-paper-with-the-answer-in-it/">https://pivot-to-ai.com/2025/02/22/google-co-scientist-ai-cracks-superbug-problem-in-two-days-because-it-had-been-fed-the-teams-previous-paper-with-the-answer-in-it/</a>, See on <a href="https://news.ycombinator.com/item?id=43162582">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
			<p>The hype cycle for Google’s fabulous new AI Co-Scientist tool, based on the Gemini LLM, includes a BBC headline about how José Penadés’ team at Imperial College asked the tool about a problem he’d been working on for years — and it solved it in less than 48 hours! [<a href="https://www.bbc.co.uk/news/articles/clyz6e9edy3o"><i>BBC</i></a><i>; </i><a href="https://research.google/blog/accelerating-scientific-breakthroughs-with-an-ai-co-scientist/"><i>Google</i></a>]</p>
<p>Penadés works on the evolution of drug-resistant bacteria. Co-Scientist suggested the bacteria might be hijacking fragments of DNA from bacteriophages. The team said that if they’d had this hypothesis at the start, it would have saved years of work.</p>
<p>Sounds almost too good to be true! Because it is. It turns out Co-Scientist had been fed a 2023 paper by Penadés’ team that included a version of the hypothesis. The BBC coverage failed to mention this bit. [<a href="https://www.newscientist.com/article/2469072-can-googles-new-research-assistant-ai-give-scientists-superpowers/"><i>New Scientist</i></a><i>, </i><a href="https://archive.is/etd5F"><i>archive</i></a>]</p>
<p>Google’s other claimed successes for Co-Scientist follow this pattern. The system proposed new drugs for liver fibrosis — but the proposed drugs had previously been studied for this use case.</p>
<p>In 2023, Google loudly publicised how DeepMind had synthesized 43 “new materials” — but studies in 2024 showed that none of the materials was actually new, and that only 3 of 58 syntheses were even successful. [<a href="https://journals.aps.org/prxenergy/abstract/10.1103/PRXEnergy.3.011002"><i>APS</i></a><i>; </i><a href="https://chemrxiv.org/engage/api-gateway/chemrxiv/assets/orp/resource/item/65957d349138d231611ad8f7/original/challenges-in-high-throughput-inorganic-material-prediction-and-autonomous-synthesis.pdf"><i>ChemrXiv</i></a>]</p>
<p>“Everything was already published, but in different bits,” said Penadés about Co-Scientist. “The system was able to put everything together.”</p>
<p>Sure. LLM-based madlibs can work as a suggestion tool.&nbsp; But the headline claim is not so convincing on AI scientific creativity.</p>

		</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Student refines 100-year-old math problem, expanding wind energy possibilities (106 pts)]]></title>
            <link>https://www.psu.edu/news/engineering/story/student-refines-100-year-old-math-problem-expanding-wind-energy-possibilities</link>
            <guid>43162544</guid>
            <pubDate>Mon, 24 Feb 2025 17:49:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.psu.edu/news/engineering/story/student-refines-100-year-old-math-problem-expanding-wind-energy-possibilities">https://www.psu.edu/news/engineering/story/student-refines-100-year-old-math-problem-expanding-wind-energy-possibilities</a>, See on <a href="https://news.ycombinator.com/item?id=43162544">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemscope="" itemtype="http://schema.org/ImageObject" data-testid="article-hero-image"><figcaption id="caption" data-testid="caption"><div><p><span>Divya Tyagi, right, a Penn State engineering graduate student, shows her work on a century-old math problem to Sven Schmitz, a College of Engineering faculty member and Tyagi's adviser.</span>&nbsp;<span data-testid="credit">Credit: <!-- -->Kevin Sliman<!-- -->. <!-- -->All Rights Reserved<!-- -->.</span></p></div></figcaption></div><div id="text-content-container"><p>UNIVERSITY PARK, Pa. — A Penn State engineering student refined a century-old math problem into a simpler, more elegant form, making it easier to use and explore. <a href="https://www.linkedin.com/in/dft5201/">Divya Tyagi’s</a> work expands research in aerodynamics, unlocking new possibilities in wind turbine design that Hermann Glauert, a British aerodynamicist and the original author, did not consider.&nbsp;&nbsp;&nbsp;</p>
<p>Tyagi, a graduate student pursuing her master’s degree in aerospace engineering, completed this work as a Penn State undergraduate for her Schreyer Honors College thesis. Her research was published in&nbsp;<a href="https://wes.copernicus.org/articles/10/451/2025/">Wind Energy Science</a>.</p>
<p>“I created an addendum to Glauert’s problem which determines the optimal aerodynamic performance of a wind turbine by solving for the ideal flow conditions for a turbine in order to maximize its power output,” said Tyagi, who earned her bachelor’s degree in aerospace engineering.&nbsp;</p>
<p>Her adviser, <a href="https://www.aero.psu.edu/department/directory-detail-g.aspx?q=SUS52">Sven Schmitz</a>, the Boeing/A.D. Welliver Professor in the Department of Aerospace Engineering and co-author on the paper, said Glauert’s original work focused exclusively on the maximum attainable power coefficient, which measures how efficiently a turbine converts wind energy into electricity. However, Glauert did not account for the total force and moment coefficients acting on the rotor — the spinning unit with attached blades — or how turbine blades bend under wind pressure.&nbsp;&nbsp;&nbsp;</p>
<p>“If you have your arms spread out and someone presses on your palm, you have to resist that movement,” said Schmitz, a faculty member in the <a href="https://iee.psu.edu/">Institute of Energy and the Environment</a>. “We call that the downwind thrust force and the root bending moment, and wind turbines must withstand that, too. You need to understand how large the total load is, which Glauert did not do.”&nbsp;&nbsp;</p>
<p>Schmitz said the simplicity of Tyagi’s addendum based on calculus of variations, a mathematical method used for constrained optimization problems, will allow people to explore new facets of wind turbine design.&nbsp;&nbsp;</p>
<p>“The real impact will be on the next generation of wind turbines using the new knowledge that has been unveiled,” Schmitz said. “As for Divya’s elegant solution, I think it will find its way into the classrooms, across the country and around the world.”&nbsp;</p>
<p>Tyagi said she sees her work as a step toward improving wind energy production and reducing costs.&nbsp;&nbsp;&nbsp;</p>
<p>“Improving the power coefficient of a large wind turbine by just 1% has significant impacts on the energy production of a turbine, and that translates towards the other coefficients that we derived relations for,” she said. "A 1% improvement in power coefficient could notably increase a turbine’s energy output, potentially powering an entire neighborhood."&nbsp;</p>
<p>During her senior year, Tyagi won the Anthony E. Wolk Award for her thesis on the addendum to Glauert’s work. The Wolk Award is presented to a senior in aerospace engineering who has developed the best thesis among aerospace engineering students.&nbsp;&nbsp;</p>
<p>Now pursuing her master’s degree, Tyagi is studying computational fluid dynamics simulations, analyzing airflow around a helicopter rotor.&nbsp;&nbsp;&nbsp;</p>
<p>“The goal is to integrate that with the complex flow around a ship to see how the ship airwake interacts with a helicopter trying to land on its deck,” she said.&nbsp;&nbsp;&nbsp;</p>
<p>Her U.S. Navy-supported research aims to improve flight simulation and pilot safety by better understanding these dynamic interactions.&nbsp;&nbsp;&nbsp;</p>
<p>Reflecting on her undergraduate research, Tyagi said proving her solution on paper was challenging.&nbsp;</p>
<p>“I would spend about 10 to 15 hours a week between the problem, writing the thesis and on research. It took a long time because it was so math intensive,” she said. “But I feel really proud now, seeing all the work I’ve done.”&nbsp;&nbsp;&nbsp;</p>
<p>Schmitz, who has contemplated Glauert’s problem for decades, credited Tyagi’s persistence in tackling it.&nbsp;&nbsp;&nbsp;</p>
<p>“When I thought about the Glauert problem, I thought steps were missing and it was very complicated,” Schmitz said. “There had to be an easier way to do it. That’s when Divya came in. She was the fourth student I challenged with looking at it, and she was the only one who took it on. Her work is truly impressive.”</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I made a site to tell the time in corporate (197 pts)]]></title>
            <link>https://corporate.watch</link>
            <guid>43162340</guid>
            <pubDate>Mon, 24 Feb 2025 17:33:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://corporate.watch">https://corporate.watch</a>, See on <a href="https://news.ycombinator.com/item?id=43162340">Hacker News</a></p>
<div id="readability-page-1" class="page">
    <h2>We are <span color="magenta">7 weeks</span> into <span color="magenta">Q1, 2025</span> (<span color="magenta">week 7 of 13</span>)</h2>
    <h2>The quarter started <span color="magenta">Wednesday, 01 January</span> and will end <span color="magenta">
            Monday, 31 March</span> (each quarter is <span color="magenta">~13</span> weeks)</h2>
    <h2>There are <span color="magenta">35</span> calendar days until the end of the quarter (<span color="magenta">39.33%</span> to go)</h2>
    <h4>Corporate coordinates generated <span color="darkgreen">Mon, 24 Feb 2025 21:30:01 +0000</span> (<span color="darkgreen">
            2025-02-24T21:30:01.584254767+00:00</span>)</h4>

    <hr>
    <center>
        <h4>
            <i>Wouldn't it be better if there was a tool that removed the need for this though?</i>
        </h4>
        <h4>
            <b>Take a look at <a href="https://objectivetrackr.com/?utm_source=corporatewatch&amp;utm_medium=web&amp;utm_campaign=corporatewatchlanding">objectivetrackr.com</a>!</b>
        </h4>
    </center>


</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Right to Repair laws have now been introduced in all 50 us states (411 pts)]]></title>
            <link>https://www.ifixit.com/News/108371/right-to-repair-laws-have-now-been-introduced-in-all-50-us-states</link>
            <guid>43161777</guid>
            <pubDate>Mon, 24 Feb 2025 16:55:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ifixit.com/News/108371/right-to-repair-laws-have-now-been-introduced-in-all-50-us-states">https://www.ifixit.com/News/108371/right-to-repair-laws-have-now-been-introduced-in-all-50-us-states</a>, See on <a href="https://news.ycombinator.com/item?id=43161777">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    
<p>With the introduction of <a href="https://www.midwestfarmreport.com/2025/02/21/sen-pfaff-introduces-right-to-repair-legislation/">a bill in Wisconsin</a>, Right to Repair legislation has now been introduced in <a href="https://pirg.org/media-center/release-all-50-states-now-have-filed-right-to-repair-legislation-over-last-8-years/">every single US state</a>.&nbsp;</p>



<p>We’ve been fighting for the simple right to fix everything we own for the last eleven years—and we’ve been joined in that fight by more and more advocates, tinkerers, farmers, students, and lawmakers. Today, that movement has touched every corner of the country. Lawmakers in every state in the union have <a href="https://www.repair.org/legislation">filed legislation</a> demanding access to the parts, tools, and documentation we need for repair. This year alone, legislation is active in 24 states.&nbsp;</p>



<figure><img fetchpriority="high" decoding="async" width="1220" height="966" src="https://valkyrie.cdn.ifixit.com/media/2025/02/24014255/all-50-states-have-introduced-right-to-repair-legislation.png" alt="" srcset="https://valkyrie.cdn.ifixit.com/media/2025/02/24014255/all-50-states-have-introduced-right-to-repair-legislation.png 1220w, https://valkyrie.cdn.ifixit.com/media/2025/02/24014255/all-50-states-have-introduced-right-to-repair-legislation-1137x900.png 1137w" sizes="(max-width: 1220px) 100vw, 1220px"></figure>



<h2>One in Five Americans Is Protected by Right to Repair Legislation</h2>



<p>Some of those laws have passed: Five states (<a href="https://www.ifixit.com/News/70515/new-york-passes-historic-right-to-repair-bill">New York</a>, <a href="https://www.ifixit.com/News/84491/california-right-to-repair-signed-into-law">California</a>, <a href="https://www.ifixit.com/News/75965/minnesotas-new-right-to-repair-law-will-give-the-whole-world-repair-manuals">Minnesota</a>, <a href="https://www.ifixit.com/News/92144/oregon-just-struck-a-blow-to-parts-pairing-and-won-a-decade-of-repair-support">Oregon</a>, and <a href="https://www.ifixit.com/News/96296/colorado-adds-electronics-to-right-to-repair-protections">Colorado</a>) have passed electronics Right to Repair legislation. One in five Americans lives in a state that has passed Right to Repair—and the remaining states are working hard to restore repair competition.</p>



<p>“Here, there and everywhere—people just want to fix their stuff,” said PIRG’s Senior Right to&nbsp;Repair Campaign Director Nathan Proctor. “Americans are fed up with all the ways in which&nbsp;manufacturers of everything from toasters to tractors frustrate or block repairs, and lawmakers&nbsp;are hearing that frustration and taking action.”</p>



<figure><img decoding="async" width="850" height="850" src="https://valkyrie.cdn.ifixit.com/media/2025/02/24014620/image.png" alt="" srcset="https://valkyrie.cdn.ifixit.com/media/2025/02/24014620/image.png 850w, https://valkyrie.cdn.ifixit.com/media/2025/02/24014620/image-150x150.png 150w" sizes="(max-width: 850px) 100vw, 850px"><figcaption>Some scenes from iFixit’s eleven years of advocacy: We called on Governor Kathy Hochul to sign the <a href="https://www.ifixit.com/News/70515/new-york-passes-historic-right-to-repair-bill">first bill in New York</a> and brought a tractor to the <a href="https://www.ifixit.com/News/73291/colorado-approves-first-ever-agricultural-right-to-repair-bill">Colorado</a> statehouse.</figcaption></figure>



<h2>iFixit’s Eleven Years of Advocacy</h2>



<p>We’ve been boots-on-the-ground fighting for Right to Repair since <a href="https://www.repair.org/history">the very beginning</a>, working to develop and testifying on behalf of the first electronics bill, introduced in South Dakota in 2014. Since then, we’ve worked closely with our US advocacy partners, Repair.org and PIRG, to advance legislation.&nbsp;</p>



<p>“Now that Wisconsin filed their first Right to Repair legislation, we’ve completed the sweep of&nbsp;getting bills filed in all 50 states. Our legislative map no longer has any blanks,” said Gay&nbsp;Gordon-Byrne, Executive Director at Repair.org. “This proves that Right to Repair is needed&nbsp;everywhere—and we are well on our way towards making that happen.”</p>



<p><a href="https://www.ifixit.com/News/3970/2012-the-year-of-the-fixer">When we first got involved</a> in Right to Repair, it felt like an uphill battle. Manufacturers told legislators there was no problem—so we brought in repair professionals, did surveys, and shared our repairability expertise to prove that things were really becoming increasingly hard to fix. Manufacturers told legislators that sharing repair information would make it impossible for them to protect their trade secrets and would be dangerous to customers—so we brought in experts, shared data, and proved that repair information is not protected and changing batteries isn’t dangerous.</p>



<p>Over time, more and more legislators joined the fight. The message is simple: If you bought it, you should be able to fix it. And soon, companies started to work with us instead of against us. Now, Google is a major supporter of Right to Repair legislation in the US, and even Apple has come on board to support some laws.</p>



<p>“This is more than a legislative landmark—it’s a tipping point. We’ve gone from a handful of&nbsp;passionate advocates to a nationwide call for repair autonomy,” said Kyle Wiens, CEO of&nbsp;iFixit. “People are fed up with disposable products and locked-down devices. Repair is the&nbsp;future, and this moment proves it.”</p>



<figure><img decoding="async" width="1926" height="1084" src="https://valkyrie.cdn.ifixit.com/media/2025/02/24014856/image-1.png" alt="" srcset="https://valkyrie.cdn.ifixit.com/media/2025/02/24014856/image-1.png 1926w, https://valkyrie.cdn.ifixit.com/media/2025/02/24014856/image-1-1536x864.png 1536w, https://valkyrie.cdn.ifixit.com/media/2025/02/24014856/image-1-1599x900.png 1599w" sizes="(max-width: 1926px) 100vw, 1926px"><figcaption><a href="https://www.ifixit.com/News/78204/congress-asks-ifixit-if-the-right-to-repair-exists">Kyle testifying before Congress</a> in a Right to Repair hearing in 2023.</figcaption></figure>



<h2>We’re Not Done Fighting</h2>



<p>Having introduced bills in all 50 states is a massive milestone. It means more pressure on lawmakers, more attention from manufacturers, and more opportunities for all of us to demand repair-friendly products. But we’re not done yet. We’ll keep pushing for stronger laws, better standards, and a future where repair autonomy is a given, not a privilege.</p>



<p>Thank you for being part of this journey. Let’s keep fixing what matters.</p>
    
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Larry Ellison's half-billion-dollar quest to change farming (110 pts)]]></title>
            <link>https://www.wsj.com/tech/larry-ellison-hawaii-greenhouse-farm-food-2d260e1f</link>
            <guid>43161188</guid>
            <pubDate>Mon, 24 Feb 2025 16:11:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/tech/larry-ellison-hawaii-greenhouse-farm-food-2d260e1f">https://www.wsj.com/tech/larry-ellison-hawaii-greenhouse-farm-food-2d260e1f</a>, See on <a href="https://news.ycombinator.com/item?id=43161188">Hacker News</a></p>
Couldn't get https://www.wsj.com/tech/larry-ellison-hawaii-greenhouse-farm-food-2d260e1f: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[Breaking into apartment buildings in five minutes on my phone (298 pts)]]></title>
            <link>https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/</link>
            <guid>43160884</guid>
            <pubDate>Mon, 24 Feb 2025 15:48:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/">https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/</a>, See on <a href="https://news.ycombinator.com/item?id=43160884">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="title-block-header">
        <p>
          What a place to use default credentials
        </p>
      </div><div id="quarto-content">
<!-- sidebar -->
<!-- margin-sidebar -->
    
<!-- main -->
<main id="quarto-document-content">





<section id="background">
<h3 data-anchor-id="background">Background</h3>
<p>A few months ago I was on my way to catch the <a href="https://www.instagram.com/seabusmemes/?hl=en">SeaBus</a> when I walked by an apartment building with an interesting looking access control panel. I wrote down the “MESH by Viscount” brand name and made a note to look into it when I had a chance. I ended up just missing my ferry (the 30 minute Sunday headways are brutal), so I decided to see if I could find anything promising on my phone while waiting at Waterfront for the next boat.</p>
</section>
<section id="part-0-recon">
<h3 data-anchor-id="part-0-recon">Part 0: Recon</h3>
<p>Googling the name of the system brings up a sales page advertising “TCP/IP capability to remotely program and maintain the system.” That sounds promising, so let’s try to find a manual. <code>"mesh by viscount" filetype:pdf</code> gets us an <a href="https://files.identiv.com/products/telephone-entry/common/Enterphone_MESH_Installation_Guide.pdf">installation guide</a>. Page 4 explains how to log in to the system’s web UI:</p>
<div>
<figure>
<p><img src="https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/manual.png"></p>
</figure>
</div>
<p>Default credentials that “should” be changed, with no requirement or explanation of how to do so. Surely no building managers ever leave the defaults, right? And even if they did, they’d surely have no reason to expose this thing to the Internet, right?</p>
<p>The screenshot from the manual tells us the web UI login page’s title is “FREEDOM Administration Login”, which gives us something to search for.</p>
<div>
<figure>
<p><img src="https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/google.png"></p>
</figure>
</div>
<p>Oh no.</p>
</section>
<section id="part-1-pii-galore">
<h3 data-anchor-id="part-1-pii-galore">Part 1: PII galore</h3>
<p>Exposing the panel to the Internet is dumb, but fortunately none of these systems were accessible using the def– just kidding. The <em>very first result</em> happily lets me in with the <code>freedom:viscount</code> login. The first interesting thing here is the Users section:</p>
<div>
<figure>
<p><img src="https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/users_censored.png"></p>
</figure>
</div>
<p>This maps residents’ full names to their unit numbers. The building address is also used as the Site title. That’s already not great, but it’s worse in conjunction with the Events section:</p>
<div>
<figure>
<p><img src="https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/events_censored.png"></p>
</figure>
</div>
<p>This is a multi-year log of every time a fob associated with a certain suite number accessed an entrance or an elevator. So we can now easily determine that, say, Jon Snow of Unit 999, 123 Bear St Vancouver BC comes home every day at 6pm.</p>
<p>For good measure, there’s also a Users section which exposes every resident’s phone number.</p>
</section>
<section id="part-2-breaking-in">
<h3 data-anchor-id="part-2-breaking-in">Part 2: Breaking in</h3>
<p>The PII leaks are pretty wild, but the most interesting thing we have access to is the Controlled Areas section. In here I can apparently register new access fobs, disable existing ones, and change the floors they’re authorized for. The system for this is somewhat convoluted. Fortunately I don’t need to understand it at all, because I can just unlock any entrance I want through an override function:</p>
<div>
<figure>
<p><img src="https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/override.png"></p>
</figure>
</div>
<p>So I can break into this building in about 5 minutes without attracting any attention whatsoever. Neat.</p>
</section>
<section id="part-3-how-widespread-is-this">
<h3 data-anchor-id="part-3-how-widespread-is-this">Part 3: How widespread is this?</h3>
<p>Maybe I just got lucky that the default credentials worked on the first result and this is actually really rare. Let’s get back to a desktop and scan more properly with ZoomEye:</p>
<p><img src="https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/zoomeye.png"></p>
<p>That’s not a good sign. ZoomEye kindly offers to let me download a CSV of the results for 700 ZoomPoints. I have no idea what a ZoomPoint is nor how I ended up with 2000 of them, but this seems as good a use as any. With all the hosts in hand, let’s put together a quick Nuclei template:</p>
<pre><code>id: mesh-default-login
info:
  name: MESH By Viscount
  author: Eric Daigle
  severity: high
  description: |
    MESH By Viscount default credentials were discovered.
http:
  - method: POST
  redirects: false
  path:
    - "{{BaseURL}}/mesh/servlet/mesh.webadmin.MESHAdminServlet?requestedAction=login"
  headers:
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
    Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7
    Cache-Control: max-age=0
    Content-Type: application/x-www-form-urlencoded
    Cookie: MESHWebAdminLanguage=en; MESHWebAdminRefreshInterval=0;
    MESHWebAdminPageSize=100;
    Connection: keep-alive
  body: "formLoginName=freedom&amp;formLoginPassword=viscount&amp;formLanguage=en&amp;formLogRefreshInterval=0&amp;formPageSize=100"
  matchers:
    - type: word
      part: body
      words:
        - 'Login Failed. Invalid username or password.'
      negative: true</code></pre>
<p>The login behaviour is poorly coded (shocking, I know): it returns 200 whether or not the login was successful. To get around this we use a negative matcher that returns true as long as the “Login Failed” string is not present. The web UI also returns a 301 if the default landing page on successful login has been changed, which we handle as well. Time to send it:</p>
<p><img src="https://www.ericdaigle.ca/posts/breaking-into-dozens-of-apartments-in-five-minutes/nuclei.png"></p>
<p>In total, Nuclei finds 89 hits, so about 14% of the apartment buildings using this system that have ever exposed it to ZoomEye are vulnerable. But most of those 659 hits were old - of the buildings using this system that have exposed it to ZoomEye in the past year, 43% are vulnerable and have essentially no access control. The large majority (71) of the exposed systems are in Canada, not surprising since 582 out of the 742 ZoomEye hits were Canadian (Nuclei scans fewer targets due to some duplicates).</p>
<p>I’m so glad we have modern IoT technology to keep us safe! It’s crazy to think people used to trust analog locks with physical keys.</p>
</section>
<section id="timeline">
<h3 data-anchor-id="timeline">Timeline</h3>
<ul>
<li>2024-12-20: vulnerability discovered</li>
<li>2024-12-27: Current vendor of MESH identified as Hirsch (subsidiary of Vitaprotech Group) and contacted</li>
<li>2025-01-09: CEO of Identiv, former vendor of MESH, contacted</li>
<li>2025-01-11: Hirsch product security responds requesting details and are asked if they intend to alert clients</li>
<li>2025-01-29: Hirsch replies stating that these vulnerable systems are not following manufacturers’ recommendations to change the default password</li>
<li>2025-01-30: Hirsch asked for an update as to whether clients running vulnerable systems have been alerted (no response as of publication)</li>
<li>2025-02-14: CVE-2025-26793 assigned</li>
<li>2025-02-15: publication</li>
</ul>
</section>
<section id="support">
<h3 data-anchor-id="support">Support</h3>
<p>If you’ve made it this far, consider supporting my work with a small donation on <a href="https://ko-fi.com/edaigle">ko-fi</a>! This site is ad-free, and social-media-free and uses open-source privacy-respecting <a href="https://matomo.org/privacy/">analytics</a>.</p>


</section>

</main> <!-- /main -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Introduction to Stochastic Calculus (330 pts)]]></title>
            <link>https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/</link>
            <guid>43160779</guid>
            <pubDate>Mon, 24 Feb 2025 15:40:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/">https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/</a>, See on <a href="https://news.ycombinator.com/item?id=43160779">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><h2 id="introduction-to-stochastic-calculus"><strong>Introduction to Stochastic Calculus</strong></h2><p>Notation and code for generating visuals are presented in the <a href="#appendix">Appendix</a>.</p><h3 id="0-introduction"><span><strong>0. Introduction</strong></span><a href="#0-introduction"><i></i></a></h3><p>This document is a brief introduction to stochastic calculus. Like, an actual introduction. Not the textbook “introductions” which immediately blast you with graduate-level probability theory axioms and definitions.</p><p>The goal of this blog post is more to focus on the physical intuition and derivation of Brownian motion, which is the foundation of stochastic calculus. I will avoid very technical formalisms such as probability spaces, measure theory, filtrations, etc. in favor of a more informal approach by considering only well-behaved cases. I also try to avoid introducing too many new concepts and vocabulary.</p><p>I hope that a wider audience can feel inspired as to how stochastic calculus emerges naturally from the physical world. Then, hopefully, more people can appreciate the beauty and meaning of the mathematics behind it, and decide to dig deeper into the subject.</p><h4 id="applications"><span>Applications</span><a href="#applications"><i></i></a></h4><p>Brownian motion and Itô calculare a notable example of fairly high-level mathematics that are applied to model the real world. Stock prices jiggle erratically, molecules bounce in fluids, and noise partially corrupts signals. Stochastic calculus gives us tools to predict, optimize, and understand these messy systems in a simpified model.</p><ul><li><strong>Physics</strong>: Einstein used Brownian motion to prove atoms exist—its jittering matched molecular collisions.</li><li><strong>Finance</strong>: Option pricing (e.g., the famous Black-Scholes equation) relies on stochastic differential equations like \(dS = \mu S dt + \sigma S dW\).</li><li><strong>Biology</strong>: Random walks model how species spread or neurons fire.</li></ul><p>This is just the tip of the iceberg. More and more applications are emerging, notably in machine learning, as <a href="https://arxiv.org/abs/2011.13456">Song et al. (2021)</a> have shown in their great paper “Score-Based Generative Modeling through Stochastic Differential Equations”.</p><p>They precisely use a stochastic differential equation using Itô calculus to model the evolution of noise over time, which they can then reverse in time to generate new samples. This framework generalizes previous ones and improves performance, allowing for new paths of innovation to be explored.</p><h3 id="1-motivation"><span><strong>1. Motivation</strong></span><a href="#1-motivation"><i></i></a></h3><p>Pascal’s triangle gives the number of paths that go either left or right at each step, up to a certain point:</p><p>\[\begin{array}{cccccc} &amp; &amp; &amp; 1 &amp; &amp; &amp; \\ &amp; &amp; 1 &amp; &amp; 1 &amp; &amp; \\ &amp; 1 &amp; &amp; 2 &amp; &amp; 1 &amp; \\ 1 &amp; &amp; 3 &amp; &amp; 3 &amp; &amp; 1 \end{array}\]</p><p>Using 0-indexing, the number of ways to reach the \(k\)-th spot in the \(n\)-th row is \(\binom{n}{k} = \frac{n!}{k!(n-k)!}\). For example, in row 3, there are \(\binom{3}{2} = 3\) ways to hit position 2.</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/binom_3_2_paths_pascal.svg"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/binom_3_2_paths_pascal.svg" alt="Pascal's Triangle Paths for 3 choose 2" loading="lazy"></a> <em><a href="#b5-latex-code-for-tikz-diagram-of-paths-in-pascals-triangle">Code</a> 2D image: All 3 paths for the 2nd position in the 3rd row of Pascal’s triangle</em></p><p>Why care? This setup powers the binomial distribution, which models repeated trials with two outcomes—win or lose, heads or tails. Think of:</p><ul><li>A basketball player shooting free throws with probability \(p\) of success and \(q = 1 - p\) of failure.</li><li>A gambler betting on dice rolls.</li></ul><p>Pascal’s triangle tells us there are \(\binom{n}{k}\) ways to get \(k\) wins in \(n\) trials. If the trials are <strong>independent</strong>, we can use the multiplication rule for probabilities:</p><blockquote><p>Note that the independence assumption is <strong>strong</strong>. Real life isn’t always so clean—winning streaks in games often tie to mentality or momentum, not just chance. Keep in mind that this model can and will be inaccurate, especially visibile for very long streaks in phenomena like stock prices or sports. However, in more common scenarios, it usually approximates reality well.</p></blockquote><p>\[P(A \text{ and } B \text{ and } C \dots) = P(A) P(B) P(C) \dots\]</p><p>For one sequence with \(k\) wins (probability \(p\) each) and \(n - k\) losses (probability \(q\) each), the probability is \(p^k q^{n-k}\). Multiply by the number of ways to arrange those wins, and we get:</p><p>\[P(k \text{ wins in } n \text{ trials}) = \binom{n}{k} p^k q^{n-k}\]</p><p>This is the binomial distribution—great for discrete setups. Now, let’s zoom out. The real world often involves <strong>continuous</strong> processes, like:</p><ul><li>The motion of a falling object,</li><li>Gas diffusing through a room,</li><li>Stock prices jumping around,</li><li>Molecules colliding in a liquid.</li></ul><p>For these, the binomial model gets messy as trials pile up. Calculus, with its focus on continuous change, feels more natural. In the continuous case:</p><blockquote><p>Points and sums (discrete tools) lead to infinities. We need <strong>intervals</strong> and <strong>integrals</strong> instead.</p></blockquote><h3 id="2-from-discrete-steps-to-continuous-limits"><span><strong>2. From Discrete Steps to Continuous Limits</strong></span><a href="#2-from-discrete-steps-to-continuous-limits"><i></i></a></h3><p>It’s actually known what happens to the binomial distribution as it becomes continuous. But what does that conversion mean mathematically? Let’s dig in with examples and then formalize it.</p><p>In calculus, going from discrete to continuous means shrinking step sizes and cranking up the number of steps. For an interval \([a, b]\), we:</p><ol><li>Split it into \(n\) chunks of size \(h = \frac{b - a}{n}\),</li><li>Sum up contributions (like a Riemann sum),</li><li>Let \(n \to \infty\) and \(h \to 0\), landing on an integral.</li></ol><p>Can we adapt this to the binomial distribution? Let’s try.</p><p>Picture the \(n\)-th row of Pascal’s triangle as a random walk: at each of \(n\) steps, we move \(+1\) (a win) or \(-1\) (a loss).</p><p>We’ll set the probabability of winning as \(p = 0.5\) as a first example since it’s symmetric, making each direction equally likely and simpler to work with.</p><p>The number of ways to get \(k\) wins (and \(n - k\) losses) is \(\binom{n}{k}\). Let’s try to plot this for a different values \(n\) over \(k\). (The code can be found in the <a href="#b1-python-code-for-binomial-plots">Appendix</a>.)</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/random_walk_combined.png"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/random_walk_combined.png" alt="Plots for n=5,10,25,50,100" loading="lazy"></a> <em><a href="#b1-python-code-for-binomial-plots">Code</a> 2D image: Binomial distribution plots for n=5,10,25,50,100</em></p><p>That looks awfully familiar, doesn’t it? It’s a bell curve, so naturally, we might guess that the limit is a <strong>normal distribution</strong> (aka Gaussian distribution).</p><p>Where does such a normal distribution arise from? The answer lies in the <strong>Central Limit Theorem</strong>, which states that the sum of a large number of independent random variables will be approximately normally distributed. So where’s the sum happening here? Let’s proceed to formalizing our intuition.</p><p>To accomplish this, let’s define a random variable for a single step as:</p><p>\[X(t) = \begin{cases} 1 &amp; \text{with probability } \frac{1}{2} \\ -1 &amp; \text{with probability } \frac{1}{2} \\ \end{cases}\]</p><p>Here, \(X(t)\) will encode our displacement at the \(t\)-th step where \(t \in \{1,\dots,n\}\) is an indexing parameter. As before, we assume that \(X(t_1)\) is independent of \(X(t_2)\) for \(t_1 \ne t_2\). At each step \(t\), \(X(t)\) has mean \(0\) and variance \(1\).</p><p>Then, the overall displacement \(S(n)\) is:</p><p>\[S(n) = X(1) + X(2) + \dots + X(n) = \sum_{t=1}^n X(t)\]</p><p>So there it is! The central limit theorem states more precisely that given \(n\) independent and identically distributed random variables \(X_1, X_2, \dots, X_n\) with mean \(\mu\) and variance \(\sigma^2\), we have:</p><p>\[X_1 + \dots + X_n \sim N(n\mu, n\sigma^2) \text{ as } n \to \infty\]</p><p>This is precisely what need. As we take \(n \to \infty\), we have that</p><p>\[S(n) \sim N(0, n)\]</p><p>such that</p><p>\[\lim_{n \to \infty} \frac{1}{\sqrt{n}} \cdot S(n) = N(0, 1)\]</p><p>which is our desired limit. We have shown that a “continuous binomial distribution” is in fact a normal distribution.</p><p>Here are some very nice 3D animations of sample paths with the distribution evolving over the number of steps:</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_binomial.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_binomial.gif" alt="Discrete Random Walk, 15 steps" loading="lazy"></a> <em><a href="#c1-3d-plot-of-discrete-random-walks">Code</a> 3D animation: Discrete Random Walk, 15 steps</em></p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_binomial_normalizing.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_binomial_normalizing.gif" alt="Discrete Random Walk, 100 steps" loading="lazy"></a> <em><a href="#c1-3d-plot-of-discrete-random-walks">Code</a> 3D Animation: Discrete Random Walk, 100 steps over 5 seconds</em></p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_random_walk.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/discrete_random_walk.gif" alt="Normal Distribution Approximation by Random Walks" loading="lazy"></a> <em><a href="#c4-python-code-for-normal-distribution-approximation-by-random-walks">Code</a> 2D animation: Normal distribution approximation by discrete random walks</em></p><h3 id="3-defining-brownian-motion-wiener-process"><span><strong>3. Defining Brownian motion (Wiener process)</strong></span><a href="#3-defining-brownian-motion-wiener-process"><i></i></a></h3><p>Let’s consider a scenario faced by Scottish botanist <strong>Robert Brown</strong> in the 1820s. Imagine a small particle, like dust or pollen, floating on a body of water.</p><p>Brown realized that its movement was surprisingly erratic. It seemed like the small-scale nature of the setup resulted in such sensitivity to fluctuations, so much is that the real movement from external forces would completely overtake the previous one. Hence, in a simplified mathematical model we scale consider the events at different times as <em>independent</em>.</p><p>In addition, there is positional symmetry: the average position of the particle at time \(t\) seemed float approximately around the origin.</p><p>Motivated by these observations as well as our previous intuition on continuous random walks, let’s first think about a simplified model for 1-dimensional discrete case. We’ll list some properties that a continuous random walk should have.</p><ol><li><strong>Starting Point</strong>: As a mathematical convenience, we position our coordinate system to set the starting point of the walk to be zero.</li><li><strong>Positional Symmetry</strong>: The walk has no directional bias. For each step, the expected displacement is zero, such that the overall expected displacement is also zero.</li><li><strong>Independence</strong>: Steps at different times are independent. The displacement between two different intervals of time is independent.</li><li><strong>Continuity</strong>: The walk is continuous, with no jumps or gaps.</li><li><strong>Normality</strong>: As we established by taking discrete random walks in the continuous limit, the distribution of positions at any given time should be normal.</li></ol><p>So let’s write this mathematically. Such a random variable is usually denoted either by \(B_t\) for “Bronian motion”, which is the physical phenomenon, or \(W_t\) for “Wiener process”, in honor of the mathematician <strong>Norbert Wiener</strong> who developed a lot of its early theory.</p><p>I will use \(W(t)\) to emphasize its dependence on \(t\).</p><p>Let \(W(t)\) be the position of the Brownian motion at time \(t\), and let \(\Delta W(t_1,t_2)\) be the displacement of the Brownian motion from time \(t_1\) to time \(t_2\).</p><blockquote><p>Note that, unlike the discrete case, we cannot consider a single increment and have a single index \(t\) for displacements as we did with \(X(t)\). As mentioned, the continuous case requires considering intervals instead of single steps.</p></blockquote><p>Then, we write some properties of Brownian motion:</p><ol><li>\(W(0)=0\) almost surely</li><li>\(W(t)\sim N(0,t)\)<ul><li>With the first condition, this is often written equivalently as \(\Delta W(s,t)\sim N(0,t-s)\) for all \(s \ne t\)</li></ul></li><li>\(\Delta W(t_1,t_2)\) is independent of \(\Delta W(t_2,t_3)\) for arbitrary distinct \(t_1 &lt; t_2 \le t_3\)</li></ol><p>We can straightforwardly use these conditions are enough to find</p><ol><li>\(E[W(t)]=0\) for all \(t\)</li><li>\(Var(W(t))=t\) for all \(t\)</li></ol><p>This is analogous to the discrete case.</p><p>But it also turns out that these conditions are sufficient to prove continuity, although it’s more involved:</p><ol><li>The sample path \(t \mapsto W(t)\) is almost surely uniformly Hölder continuous for each exponent \(\gamma &lt; \frac{1}{2}\), but is nowhere Hölder continuous for \(\gamma &gt;= \frac{1}{2}\). <a href="https://math.nyu.edu/~bourgade/SA2010/StochasticAnalysis.pdf#page30">p.30,33 of source</a><ul><li>In particular, a sample path \(t \mapsto W(t)\) is almost surely nowhere differentiable.</li></ul></li></ol><p>So, \(W(t)\) is our mathematical model for Brownian motion: a continuous, random, zero-mean process with variance proportional to time. It’s wild—it’s globally somewhat predictable yet locally completely unpredictable. A plot of W(t) looks like a jagged mess, but it’s got structure under the hood. (You can generate one yourself with the code in <a href="#b2-python-code-for-brownian-motion-plot">Appendix</a>.)</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/sample_brownian_motion.png"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/sample_brownian_motion.png" alt="Sample Brownian Motion Path" loading="lazy"></a> <em><a href="#b2-python-code-for-brownian-motion-plot">Code</a> 2D image: Sample Brownian motion path</em></p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/continuous_brownian_3d_smooth.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/continuous_brownian_3d_smooth.gif" alt="3D Animation Continuous Brownian Motion" loading="lazy"></a> <em><a href="#c2-3d-animation-of-brownian-motion">Code</a> 3D animation: Brownian motion with evolving distribution</em></p><p>Now, let’s take this beast and do something useful with it.</p><hr><h3 id="4-itô-calculus"><span><strong>4. Itô Calculus</strong></span><a href="#4-itô-calculus"><i></i></a></h3><p>Brownian motion \(W(t)\) is continuous but so irregular that it’s nowhere differentiable. To see why, consider the rate of change over a small interval \(dt\):</p><p>\[\lim_{dt \to 0} \frac{W(t + dt) - W(t)}{dt} = \lim_{dt \to 0} \frac{\Delta W(t, t + dt)}{dt}\]</p><p>Since \(\Delta W(t, t + dt) \sim N(0, dt) = \sqrt{dt} \, N(0, 1)\):</p><p>\[\frac{\Delta W(t, t + dt)}{dt} = \frac{\sqrt{dt} \, N(0, 1)}{dt} = \frac{1}{\sqrt{dt}} N(0, 1)\]</p><p>As \(dt \to 0\), \(\frac{1}{\sqrt{dt}}\) grows without bound, and the expression becomes dominated by random fluctuations—it doesn’t converge to a finite derivative. This rules out standard calculus for handling Brownian motion, but we still need a way to work with processes driven by it, like stock prices or particle diffusion.</p><p>In the 1940s, Kiyosi Itô developed a framework to address this: <strong>Itô calculus</strong>. Rather than forcing Brownian motion into the rules of regular calculus, Itô built a new system tailored to its random nature, forming the foundation of stochastic calculus.</p><h4 id="the-increment-dw-and-its-properties"><span><strong>The Increment \(dW\) and Its Properties</strong></span><a href="#the-increment-dw-and-its-properties"><i></i></a></h4><p>Define the small change in Brownian motion over an interval \(dt\):</p><p>\[dW := W(t + dt) - W(t) = \Delta W(t, t + dt)\]</p><p>From Section 3, \(W(t + dt) - W(t) \sim N(0, dt)\), so:</p><p>\[dW = \sqrt{dt} \, N(0, 1)\]</p><p>Unlike the deterministic \(dx\) in regular calculus, \(dW\) is random—its magnitude scales with \(\sqrt{dt}\), and its sign depends on a standard normal distribution \(N(0, 1)\). It’s a small but erratic step, with:</p><ul><li>\(E[dW] = 0\),</li><li>\(Var(dW) = E[(dW)^2] = dt\).</li></ul><p>Now consider \((dW)^2\). Its expected value is \(dt\), but what about its variability? The variance is \(Var[(dW)^2] = 2 dt^2\), which becomes negligible as \(dt \to 0\). This stability allows us to treat \((dW)^2 \approx dt\) in Itô calculus (formally, in the mean-square sense—see the <a href="#a1-notation">Appendix</a> for details). In contrast to regular calculus, where \((dx)^2\) is too small to matter, \((dW)^2\) is on the same scale as \(dt\), which changes how we handle calculations.</p><h4 id="the-itô-integral-integrating-against-randomness"><span><strong>The Itô Integral: Integrating Against Randomness</strong></span><a href="#the-itô-integral-integrating-against-randomness"><i></i></a></h4><p>In regular calculus, \(\int_a^b f(x) \, dx\) approximates the area under a curve by summing rectangles, \(\sum f(x_i) \Delta x\), and taking the limit as \(\Delta x \to 0\). For Brownian motion, we want something like \(\int_0^t f(s) \, dW(s)\), where \(dW(s)\) replaces \(dx\). Here, the steps are random: \(\Delta W(s_i, s_{i+1}) \sim \sqrt{\Delta s} \, N(0, 1)\). We approximate:</p><p>\[\int_0^t f(s) \, dW(s) \approx \sum_{i=0}^{n-1} f(s_i) [\Delta W(s_i, s_{i+1})]\]</p><p>over a partition \(s_0, s_1, \dots, s_n\) of \([0, t]\), then let \(n \to \infty\). Unlike a deterministic integral, the result is a random variable, reflecting \(W(t)’s\) randomness. Using \(f(s_i)\) from the left endpoint keeps the integral “non-anticipating”—we only use information up to time \(s_i\), which aligns with the forward-evolving nature of stochastic processes.</p><h4 id="itôs-lemma-a-chain-rule-for-randomness"><span><strong>Itô’s Lemma: A Chain Rule for Randomness</strong></span><a href="#itôs-lemma-a-chain-rule-for-randomness"><i></i></a></h4><p>For a function \(f(t, W(t))\), regular calculus gives:</p><p>\[df = \frac{\partial f}{\partial t} dt + \frac{\partial f}{\partial W} dW\]</p><p>But Brownian motion’s roughness requires a second-order term. Taylor-expand \(f(t, W(t))\):</p><p>\[df = \frac{\partial f}{\partial t} dt + \frac{\partial f}{\partial W} dW + \frac{1}{2} \frac{\partial^2 f}{\partial W^2} (dW)^2 + \text{smaller terms}\]</p><p>As \(dt \to 0\):</p><ul><li>\(dt^2\) and \(dt \, dW\) vanish,</li><li>\((dW)^2 \approx dt\) stays significant.</li></ul><p>This leaves:</p><p>\[df = \frac{\partial f}{\partial t} dt + \frac{\partial f}{\partial W} dW + \frac{1}{2} \frac{\partial^2 f}{\partial W^2} dt\]</p><p>This is <strong>Itô’s Lemma</strong>. The extra \(\frac{1}{2} \frac{\partial^2 f}{\partial W^2} dt\) arises because \((dW)^2\) contributes at the \(dt\) scale, capturing the effect of Brownian motion’s curvature.</p><p>Since we have the algebraic heuristic \(dW^2 = dt\), we could in some define everything in terms of powers \(dW\) to expand things algebraically and implicitly compute derivative rules.</p><p>This is precisely the idea behind my blog post on <a href="https://jiha-kim.github.io/posts/automatic-stochastic-differentiation/index.html">Automatic Stochastic Differentiation</a>, where we use \(\mathbb{R}[\epsilon]/\epsilon^3\) in a similar fashion to dual numbers \(\mathbb{R}[\epsilon]/\epsilon^2\) for automatic differentiation in deterministic calculus.</p><p>If you haven’t already, I highly recommend checking it out.</p><h4 id="example-fw--w2"><span><strong>Example: \(f(W) = W^2\)</strong></span><a href="#example-fw--w2"><i></i></a></h4><p>Take \(f(t, W(t)) = W^2\):</p><ul><li>\(\frac{\partial f}{\partial t} = 0\),</li><li>\(\frac{\partial f}{\partial W} = 2W\),</li><li>\(\frac{\partial^2 f}{\partial W^2} = 2\).</li></ul><p>Then:</p><p>\[d(W^2) = 0 \cdot dt + 2W \, dW + \frac{1}{2} \cdot 2 \cdot dt = 2W \, dW + dt\]</p><p>Integrate from 0 to \(t\) (with \(W(0) = 0\)):</p><p>\[W(t)^2 = \int_0^t 2W(s) \, dW(s) + t\]</p><p>The \(t\) term matches \(E[W(t)^2] = t\), and the integral is a random component with mean 0, consistent with Brownian motion’s properties.</p><hr><h3 id="5-stochastic-differential-equations"><span><strong>5. Stochastic Differential Equations</strong></span><a href="#5-stochastic-differential-equations"><i></i></a></h3><p>Itô calculus gives us tools—integrals and a chain rule—to handle Brownian motion. Now we can model systems where randomness and trends coexist, using <strong>stochastic differential equations (SDEs)</strong>. Unlike regular differential equations (e.g., \(\frac{dx}{dt} = -kx\)) that describe smooth dynamics, SDEs blend deterministic behavior with stochastic noise, fitting phenomena like stock prices or diffusing particles.</p><h4 id="defining-an-sde"><span><strong>Defining an SDE</strong></span><a href="#defining-an-sde"><i></i></a></h4><p>Consider a process influenced by both a predictable trend and random fluctuations:</p><p>\[dX(t) = a(t, X(t)) \, dt + b(t, X(t)) \, dW(t)\]</p><ul><li>\(X(t)\): The evolving quantity (e.g., position or price).</li><li>\(a(t, X(t)) \, dt\): The “drift”—the systematic part, scaled by \(dt\).</li><li>\(b(t, X(t)) \, dW(t)\): The “diffusion”—random perturbations from Brownian motion.</li></ul><p>Here, \(a\) and \(b\) are functions of time and state, and \(dW(t) = \sqrt{dt} \, N(0, 1)\) brings the noise. Solutions to SDEs aren’t fixed curves but random paths, each run producing a different trajectory with statistical patterns we can study.</p><h4 id="itôs-lemma-revisited"><span><strong>Itô’s Lemma Revisited</strong></span><a href="#itôs-lemma-revisited"><i></i></a></h4><p>Itô’s lemma actually applies to a function \(f(t, X(t))\) and its stochastic derivative \(df(t, X(t))\) for a general \(dX(t) = b(t,X(t))dt+\sigma(t,X(t))dW\), and this is done through the linearity of the Itô differential (as seen using the \(\mathbb{R}[\epsilon]/\epsilon^3\) formulation).</p><p>Considering that \(dX=O(dW)\), we consider terms up to \(dX^2=O(dW^2)\):</p><p>\[\begin{aligned} df &amp;= f_t \, dt + f_X \, dX + \frac{1}{2}f_{XX} dX^2 \\ &amp;= f_t \, dt + f_X \, (b \, dt+\sigma \, dW) + \frac{1}{2}f_{XX} (b \, dt+\sigma \, dW)^2 \\ &amp;= (f_t + bf_X+\frac{1}{2}\sigma^2 f_{XX}) \, dt + \sigma f_X \, dW \end{aligned}\]</p><p>which is the general form typically presented.</p><h4 id="drift-and-diffusion"><span><strong>Drift and Diffusion</strong></span><a href="#drift-and-diffusion"><i></i></a></h4><p>The drift \(a(t, X)\) sets the average direction, like a current pushing a particle. The diffusion \(b(t, X)\) determines the random jitter’s strength. If \(b = 0\), we get a standard ODE; if \(a = 0\), it’s just scaled Brownian motion. Together, they model systems with both structure and uncertainty.</p><p>Take a simple case:</p><p>\[dX(t) = \mu \, dt + \sigma \, dW(t)\]</p><ul><li>\(\mu\): Constant drift.</li><li>\(\sigma\): Constant noise amplitude.</li></ul><p>Starting at \(X(0) = 0\), integrate:</p><p>\[X(t) = \int_0^t \mu \, ds + \int_0^t \sigma \, dW(s) = \mu t + \sigma W(t)\]</p><p>Since \(W(t) \sim N(0, t)\), we have \(X(t) \sim N(\mu t, \sigma^2 t)\)—a process drifting linearly with noise spreading over time. It’s a basic model for things like a stock with steady growth and volatility.</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/sample_SDE.png"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/sample_SDE.png" alt="Sample SDE Path" loading="lazy"></a> <em><a href="#b3-python-code-for-basic-sde-simulation">Code</a> 2D image: Sample SDE path with mu=1.0, sigma=0.5</em></p><h4 id="geometric-brownian-motion"><span><strong>Geometric Brownian Motion</strong></span><a href="#geometric-brownian-motion"><i></i></a></h4><p>For systems where changes scale with size—like stock prices or certain physical processes—consider <strong>geometric Brownian motion (GBM)</strong>:</p><p>\[dS(t) = \mu S(t) \, dt + \sigma S(t) \, dW(t)\]</p><ul><li>\(S(t)\): The state (e.g., stock price).</li><li>\(\mu S(t)\): Proportional drift.</li><li>\(\sigma S(t)\): Proportional noise.</li></ul><p>The percentage change \(\frac{dS}{S} = \mu \, dt + \sigma \, dW\) has a trend and randomness. To solve, let \(f = \ln S\):</p><ul><li>\(\frac{\partial f}{\partial t} = 0\),</li><li>\(\frac{\partial f}{\partial S} = \frac{1}{S}\),</li><li>\(\frac{\partial^2 f}{\partial S^2} = -\frac{1}{S^2}\).</li></ul><p>Using Itô’s lemma:</p><p>\[d(\ln S) = \frac{1}{S} (\mu S \, dt + \sigma S \, dW) + \frac{1}{2} \left( -\frac{1}{S^2} \right) (\sigma^2 S^2 dt)\] \[= \left( \mu - \frac{1}{2} \sigma^2 \right) dt + \sigma \, dW\]</p><p>Integrate from \(0\) to \(t\):</p><p>\[\ln S(t) - \ln S(0) = \left( \mu - \frac{1}{2} \sigma^2 \right) t + \sigma W(t)\] \[S(t) = S(0) \exp\left( \left( \mu - \frac{1}{2} \sigma^2 \right) t + \sigma W(t) \right)\]</p><p>The drift is adjusted by \(-\frac{1}{2} \sigma^2\) due to the second-order effect of noise, and \(\sigma W(t)\) adds random fluctuations. This form underlies the Black-Scholes model in finance.</p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/gbm_path.png"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/gbm_path.png" alt="Sample Geometric Brownian Motion Path" loading="lazy"></a> <em><a href="#b4-python-code-for-geometric-brownian-motion-simulation">Code</a> 2D image: A sample path of a geometric Brownian motion with parameters μ = 0.15 and σ = 0.2</em></p><p><a href="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/geometric_brownian_drifted_3d.gif"><img src="https://jiha-kim.github.io/posts/introduction-to-stochastic-calculus/geometric_brownian_drifted_3d.gif" alt="Geometric Brownian Motion drifting over time" loading="lazy"></a> <em><a href="#c3-3d-animation-of-geometric-brownian-motion">Code</a> 3D animation: Geometric Brownian Motion drifting over time</em></p><h4 id="beyond-analytics"><span><strong>Beyond Analytics</strong></span><a href="#beyond-analytics"><i></i></a></h4><p>Analytical solutions like GBM’s are exceptions. Most SDEs require numerical simulation (e.g., stepping \(X(t + \Delta t) = X(t) + \mu \Delta t + \sigma \sqrt{\Delta t} \, N(0, 1)\)) or statistical analysis via equations like Fokker-Planck. See the <a href="#b3-python-code-for-basic-sde-simulation">appendix</a> for simulation code.</p><hr><h3 id="6-stratonovich-calculus"><span><strong>6. Stratonovich Calculus</strong></span><a href="#6-stratonovich-calculus"><i></i></a></h3><p>Recall Itô’s lemma:</p><p>\[df = \left(\frac{\partial f}{\partial t} + \frac{1}{2} \frac{\partial^2 f}{\partial X^2}\right) dt + \frac{\partial f}{\partial X} dX\]</p><p>That second derivative term is pretty annoying to deal with in calculations. Is there a way we can simplify it to the familiar chain rule in regular calculus?</p><p>\[df = \frac{\partial f}{\partial t} dt + \frac{\partial f}{\partial X} dX\]</p><p>The answer is yes, and it’s called <strong>Stratonovich calculus</strong>. Let’s explore a bit. First, the deterministic part clearly satisfies the regular chain rule, since we can directly apply it using linearity. The trouble arises in the stochastic part, which we need to analyze. This means we only need to consider a function \(f(X(t))\).</p><p>Remember, for the Itô form, we chose to define the integral by choosing the left endpoint of each interval. In other words, it is this stochastic part that will vary. To delete this second order term, we need to somehow absorb it into the stochastic part by defining some Stratonovich differential, typically denoted by \(\circ dW\).</p><p>Going back to our Riemann sum definitions, our degrees of freedom lie in the choice of the evaluation point for each interval:</p><p>\[\int_{0}^{T} f(X(t)) \diamond dW = \lim_{n \to \infty} \sum_{i=0}^{n-1} f(X(t_i) + \lambda \Delta X(t_i,t_{i+1})) \Delta W(t_i, t_{i+1})\]</p><p>where \(\lambda \in [0,1]\) is a constant that linearly interpolates between the left and right endpoints of each interval giving a corresponding differential \(\diamond dW\), and \(\Delta X(t_i,t_{i+1}):=X(t_{i+1})-X(t_i)\).</p><p>In the deterministic case, since we always have \(O(dX^2) \to 0\), it doesn’t matter where we choose the evaluation point. However, in the stochastic case, remember that \(O(dW^2) \to O(dt)\), so we need a more careful choice of evaluation point.</p><p>Mathematically, our goal is to define a new stochastic integral that preserves the standard chain rule:</p><p>\[df = f_X \circ dX\]</p><p>In the limiting discrete form, let’s try setting every term equal to each other:</p><p>\[f(X+\Delta X) - f(X) = f_X(X+\lambda \Delta X) \Delta X\]</p><p>In other words, our newly defined differential should result in the derivative being a linear approximation of the original function instead of quadratic:</p><p>\[\frac{f(X+\Delta X)-f(X)}{\Delta X} = f_X(X+\lambda \Delta X)\]</p><p>But watch what happens as we take the Taylor expansion on both sides about \(X\) (recalling that \(o(\Delta X^2)\to 0\)):</p><p>\[f_X + \frac{1}{2}f_{XX}\Delta X = f_X + \lambda f_{XX}\Delta X\]</p><p>Comparing coefficients, we wish to set \(\lambda = 1/2\) to preserve the chain rule. So Stratonovich integrals are defined by the midpoint evaluation rule:</p><p>\[\begin{aligned} \int_{0}^{T} f(X(t)) \circ dW &amp;= \lim_{n \to \infty} \sum_{i=0}^{n-1} f(X(t_i) + \frac{1}{2} \Delta X(t_i,t_{i+1})) \Delta W(t_i, t_{i+1}) \\ &amp;= \lim_{n \to \infty} \sum_{i=0}^{n-1} f\left(\frac{X(t_i)+X(t_{i+1})}{2}\right) \Delta W(t_i, t_{i+1}) \\ \end{aligned}\]</p><h4 id="conversion-formula-between-itô-and-stratonovich"><span>Conversion Formula between Itô and Stratonovich</span><a href="#conversion-formula-between-itô-and-stratonovich"><i></i></a></h4><p>There is a formula to convert the Stratonovich differential into a corresponding Itô SDE that depends on the Itô differential as well as the volatility function \(\sigma\).</p><p>Recall that Itô’s lemma states that for \(dX = a dt + b dW\):</p><p>\[df = f_t dt + f_X dX + \frac{1}{2}f_{XX} dX^2 = (af_t + \frac{1}{2} b^2 f_{XX}) dt + bf_X dW\]</p><p>In parallel, we defined Stratonovich’s chain rule to satisfy for \(dX = \tilde a dt + \tilde b \circ dW\):</p><p>\[df = f_t dt + f_X \circ dX = (f_t + \tilde a f_X) dt + \tilde b f_X \circ dW\]</p><p>Hence, between Itô and Stratonovich SDEs, we have in both cases that the differential is scaled by the volatility function of \(X\) and \(f_X\), but the drift function changes. Let’s find a conversion formula between the two.</p><p>Suppose we have:</p><p>\[dX = a dt + b dW = \tilde a dt + b \circ dW\]</p><p>Then, our objective is to find \(\tilde a\) in terms of \(a\).</p><p>Recall from the integral definition that \(b(X) \circ dW = b(X+\frac{1}{2}dX) dW\). If we Taylor expand around \(X\), we have:</p><p>\[b(X+\frac{1}{2}dX) dW = b(X)dW + b_X(X)\frac{1}{2}dX dW + o(dt)\]</p><p>Now, if we plug in \(dX=a dt + b dW\), the first term vanishes, leaving \(b_X b \frac{1}{2}dW^2 \sim \frac{1}{2}b_X b dt\) (where the arguments \(X\) are left implicit).</p><p>Hence:</p><p>\[a = \tilde a + \frac{1}{2} b_X b.\]</p><h4 id="applications-of-stratonovich-calculus"><span><strong>Applications of Stratonovich Calculus</strong></span><a href="#applications-of-stratonovich-calculus"><i></i></a></h4><p>Stratonovich calculus, with its midpoint evaluation rule, adjusts how we handle stochastic integrals compared to Itô’s left-endpoint approach. This shift makes it valuable in certain fields where its properties align with physical systems or simplify calculations. Below are some practical applications, each with a concrete mathematical example.</p><ul><li><p><strong>Physics with Multiplicative Noise</strong>: In physical systems, noise often scales with the state—like a particle in a fluid where random kicks depend on its position. Consider a damped oscillator with position \(X(t)\) under state-dependent noise:</p>\[dX = -k X \, dt + \sigma X \circ dW\]<p>Here, \(k &gt; 0\) is the damping constant, \(\sigma\) is the noise strength, and \(\circ dW\) denotes the Stratonovich differential. Using Stratonovich’s chain rule, for \(f(X) = \ln X\):</p>\[d(\ln X) = \frac{1}{X} (-k X \, dt + \sigma X \circ dW) = -k \, dt + \sigma \circ dW\]<p>This integrates to \(X(t) = X(0) e^{-kt + \sigma W(t)}\), matching the expected exponential decay with noise. Stratonovich fits here because it preserves symmetries in continuous physical processes, unlike Itô, which adds a \(\frac{1}{2} \sigma^2 X \, dt\) drift term.</p></li><li><p><strong>Wong-Zakai Theorem and Smooth Noise</strong>: Real-world noise isn’t perfectly white (uncorrelated like \(dW\))—it’s often smoother. The Wong-Zakai theorem shows that approximating smooth noise (e.g., \(\eta(t)\) with correlation time \(\epsilon\)) as \(\epsilon \to 0\) yields a Stratonovich SDE. Take a simple system:</p>\[\dot{x} = a x + b x \eta(t)\]<p>As \(\eta(t) \to\) white noise, this becomes \(dX = a X \, dt + b X \circ dW\). In Stratonovich form, the solution is \(X(t) = X(0) e^{a t + b W(t)}\). This is useful in engineering, like modeling voltage in a circuit with thermal fluctuations, where noise has slight smoothness.</p></li><li><p><strong>Stochastic Control</strong>: In control problems, Stratonovich can simplify dynamics under feedback. Consider a system with control input \(u(t)\) and noise:</p>\[dX = (a X + u) \, dt + \sigma X \circ dW\]<p>For \(f(X) = X^2\), the Stratonovich rule gives:</p>\[d(X^2) = 2X (a X + u) \, dt + 2X \cdot \sigma X \circ dW = (2a X^2 + 2X u) \, dt + 2\sigma X^2 \circ dW\]<p>The lack of a second-derivative term (unlike Itô’s \(+ \sigma^2 X^2 dt\)) aligns with classical control intuition, making it easier to design \(u(t)\) for, say, stabilizing a noisy pendulum or a drone in wind.</p></li><li><p><strong>Biological Diffusion</strong>: In biology, noise can depend on spatial gradients, like protein diffusion across a cell. Model this as:</p>\[dX = \mu \, dt + \sigma(X) \circ dW, \quad \sigma(X) = \sqrt{2D (1 + k X^2)}\]<p>where \(D\) is diffusivity and \(k\) adjusts noise with position. Stratonovich ensures the diffusion term reflects physical conservation laws, matching experimental data in systems like bacterial motility better than Itô, which alters the drift.</p></li><li><p><strong>Numerical Stability</strong>: For simulations, Stratonovich pairs well with midpoint methods. Take \(dX = -a X \, dt + \sigma \circ dW\). A Stratonovich discretization might use:</p>\[X_{n+1} = X_n - a \left(\frac{X_n + X_{n+1}}{2}\right) \Delta t + \sigma \Delta W_n\]<p>This implicit scheme leverages the midpoint rule, reducing numerical artifacts in models like chemical kinetics compared to Itô’s explicit steps.</p></li></ul><p>The choice between Stratonovich and Itô depends on context. Stratonovich suits systems where noise is tied to physical continuity or symmetry, while Itô dominates in finance for its non-anticipating properties. The conversion \(a = \tilde{a} + \frac{1}{2} b b_X\) lets you switch forms as needed.</p><h2 id="appendix"><span>Appendix</span><a href="#appendix"><i></i></a></h2><h3 id="a0-further-reading"><span>A.0. Further Reading</span><a href="#a0-further-reading"><i></i></a></h3><ul><li><a href="https://www.chrisrackauckas.com/assets/Papers/ChrisRackauckas-IntuitiveSDEs.pdf">An Intuitive Introduction For Understanding and Solving Stochastic Differential Equations - Chris Rackauckas (2017)</a></li><li><a href="https://math.nyu.edu/~bourgade/SA2010/StochasticAnalysis.pdf">Stochastic analysis - Paul Bourgade (2010)</a></li><li><a href="https://www.cmor-faculty.rice.edu/~cox/stoch/SDE.course.pdf">AN INTRODUCTION TO STOCHASTIC DIFFERENTIAL EQUATIONS VERSION 1.2 - Lawrence C. Evans (2013)</a></li><li>Stochastic differential equations An introduction with applications - Bernt K. Øksendal (2003)</li><li><a href="https://en.wikipedia.org/wiki/Stochastic_calculus">Wikipedia: Stochastic calculus</a></li><li><a href="https://en.wikipedia.org/wiki/Stochastic_differential_equation">Wikipedia: Stochastic differential equation</a></li></ul><h3 id="a1-notation"><span>A.1. Notation</span><a href="#a1-notation"><i></i></a></h3><p>Here is a list of notation used in this document:</p><ul><li>\(\binom{n}{k}=\frac{n!}{k!(n-k)!}\) is the binomial coefficient</li><li>\(X: \Omega \to \mathbb{R}\) is a random variable from a sample space \(\Omega\) to a real number</li><li>\(P(A)\) is the probability of event \(A\)</li><li>\(E[X]=\int_{\omega \in \Omega} X(\omega) dP(\omega)\) is the expected value of \(X\)</li><li>\(N(\mu, \sigma^2)\) is a normal distribution with mean \(\mu\) and variance \(\sigma^2\)</li><li>\(W(t)\) is the position of a Brownian motion at time \(t\)</li><li>\(\Delta W(t_1,t_2)\) is the displacement of a Brownian motion from time \(t_1\) to time \(t_2\)</li><li>\(dt\) is an infinitesimal time increment</li><li>\(dW := \Delta W(t,t+dt)\) is an infinitesimal increment of Brownian motion over time</li><li>\((dW)^2 \sim dt\) denotes that \((dW^2) = dt + o(dt)\) where \(\lim_{t \to 0} \frac{o(dt)}{dt} = 0\), such that \((dW)^2\) is asymptotically equal to \(dt\) in the mean-square limit:</li></ul><p>\(\lim_{dt \to 0} \frac{E[(dW)^2-dt]^2}{dt}=0\)</p><ul><li>\(f_t:=\frac{\partial f}{\partial t}\) is the partial derivative of \(f\) with respect to \(t\)</li><li>\(f_xx:=\frac{\partial^2 f}{\partial x^2}\) is the second order partial derivative of \(f\) with respect to \(x\)</li></ul><h3 id="b1-python-code-for-binomial-plots"><span>B.1. Python code for binomial plots</span><a href="#b1-python-code-for-binomial-plots"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>scipy.stats</span> <span>import</span> <span>binom</span>

<span>n_values</span> <span>=</span> <span>[</span><span>5</span><span>,</span> <span>10</span><span>,</span> <span>25</span><span>,</span> <span>50</span><span>,</span> <span>100</span><span>]</span>
<span>p</span> <span>=</span> <span>0.5</span>

<span># Individual plots
</span><span>for</span> <span>n</span> <span>in</span> <span>n_values</span><span>:</span>
    <span>k</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>0</span><span>,</span> <span>n</span> <span>+</span> <span>1</span><span>)</span>
    <span>positions</span> <span>=</span> <span>2</span> <span>*</span> <span>k</span> <span>-</span> <span>n</span>
    <span>probs</span> <span>=</span> <span>binom</span><span>.</span><span>pmf</span><span>(</span><span>k</span><span>,</span> <span>n</span><span>,</span> <span>p</span><span>)</span>
    
    <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>6</span><span>,</span> <span>4</span><span>))</span>
    <span>plt</span><span>.</span><span>bar</span><span>(</span><span>positions</span><span>,</span> <span>probs</span><span>,</span> <span>width</span><span>=</span><span>1.0</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>skyblue</span><span>'</span><span>,</span> <span>edgecolor</span><span>=</span><span>'</span><span>black</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>title</span><span>(</span><span>f</span><span>'</span><span>n = </span><span>{</span><span>n</span><span>}</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>Position (# wins - # losses)</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Probability</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylim</span><span>(</span><span>0</span><span>,</span> <span>max</span><span>(</span><span>probs</span><span>)</span> <span>*</span> <span>1.2</span><span>)</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>f</span><span>'</span><span>random_walk_n_</span><span>{</span><span>n</span><span>}</span><span>.png</span><span>'</span><span>,</span> <span>dpi</span><span>=</span><span>300</span><span>,</span> <span>bbox_inches</span><span>=</span><span>'</span><span>tight</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>

<span># Combined plot
</span><span>fig</span><span>,</span> <span>axes</span> <span>=</span> <span>plt</span><span>.</span><span>subplots</span><span>(</span><span>5</span><span>,</span> <span>1</span><span>,</span> <span>figsize</span><span>=</span><span>(</span><span>8</span><span>,</span> <span>12</span><span>),</span> <span>sharex</span><span>=</span><span>True</span><span>)</span>
<span>for</span> <span>i</span><span>,</span> <span>n</span> <span>in</span> <span>enumerate</span><span>(</span><span>n_values</span><span>):</span>
    <span>k</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>0</span><span>,</span> <span>n</span> <span>+</span> <span>1</span><span>)</span>
    <span>positions</span> <span>=</span> <span>2</span> <span>*</span> <span>k</span> <span>-</span> <span>n</span>
    <span>probs</span> <span>=</span> <span>binom</span><span>.</span><span>pmf</span><span>(</span><span>k</span><span>,</span> <span>n</span><span>,</span> <span>p</span><span>)</span>
    <span>axes</span><span>[</span><span>i</span><span>].</span><span>bar</span><span>(</span><span>positions</span><span>,</span> <span>probs</span><span>,</span> <span>width</span><span>=</span><span>1.0</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>skyblue</span><span>'</span><span>,</span> <span>edgecolor</span><span>=</span><span>'</span><span>black</span><span>'</span><span>)</span>
    <span>axes</span><span>[</span><span>i</span><span>].</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>n = </span><span>{</span><span>n</span><span>}</span><span>'</span><span>)</span>
    <span>axes</span><span>[</span><span>i</span><span>].</span><span>set_ylabel</span><span>(</span><span>'</span><span>Probability</span><span>'</span><span>)</span>
    <span>axes</span><span>[</span><span>i</span><span>].</span><span>set_ylim</span><span>(</span><span>0</span><span>,</span> <span>max</span><span>(</span><span>probs</span><span>)</span> <span>*</span> <span>1.2</span><span>)</span>
<span>axes</span><span>[</span><span>-</span><span>1</span><span>].</span><span>set_xlabel</span><span>(</span><span>'</span><span>Position (# wins - # losses)</span><span>'</span><span>)</span>
<span>plt</span><span>.</span><span>tight_layout</span><span>()</span>
<span>plt</span><span>.</span><span>savefig</span><span>(</span><span>'</span><span>random_walk_combined.png</span><span>'</span><span>,</span> <span>dpi</span><span>=</span><span>300</span><span>,</span> <span>bbox_inches</span><span>=</span><span>'</span><span>tight</span><span>'</span><span>)</span>
<span>plt</span><span>.</span><span>close</span><span>()</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="b2-python-code-for-brownian-motion-plot"><span><strong>B2. Python Code for Brownian Motion Plot</strong></span><a href="#b2-python-code-for-brownian-motion-plot"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>

<span># Simulate Brownian motion
</span><span>np</span><span>.</span><span>random</span><span>.</span><span>seed</span><span>(</span><span>42</span><span>)</span>
<span>t</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>1000</span><span>)</span>  <span># Time from 0 to 1
</span><span>dt</span> <span>=</span> <span>t</span><span>[</span><span>1</span><span>]</span> <span>-</span> <span>t</span><span>[</span><span>0</span><span>]</span>
<span>dW</span> <span>=</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt</span><span>)</span> <span>*</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>size</span><span>=</span><span>len</span><span>(</span><span>t</span><span>)</span><span>-</span><span>1</span><span>)</span>  <span># Increments
</span><span>W</span> <span>=</span> <span>np</span><span>.</span><span>concatenate</span><span>([[</span><span>0</span><span>],</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>dW</span><span>)])</span>  <span># Cumulative sum starts at 0
</span>
<span># Plot
</span><span>plt</span><span>.</span><span>plot</span><span>(</span><span>t</span><span>,</span> <span>W</span><span>)</span>
<span>plt</span><span>.</span><span>title</span><span>(</span><span>"</span><span>Sample Brownian Motion Path</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>"</span><span>Time t</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>"</span><span>W(t)</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="b3-python-code-for-basic-sde-simulation"><span><strong>B3. Python Code for Basic SDE Simulation</strong></span><a href="#b3-python-code-for-basic-sde-simulation"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>

<span># Simulate simple SDE: dX = mu dt + sigma dW
</span><span>np</span><span>.</span><span>random</span><span>.</span><span>seed</span><span>(</span><span>42</span><span>)</span>
<span>T</span> <span>=</span> <span>1.0</span>
<span>N</span> <span>=</span> <span>1000</span>
<span>dt</span> <span>=</span> <span>T</span> <span>/</span> <span>N</span>
<span>t</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0</span><span>,</span> <span>T</span><span>,</span> <span>N</span><span>+</span><span>1</span><span>)</span>
<span>mu</span><span>,</span> <span>sigma</span> <span>=</span> <span>1.0</span><span>,</span> <span>0.5</span>
<span>X</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>N</span><span>+</span><span>1</span><span>)</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>N</span><span>):</span>
    <span>dW</span> <span>=</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt</span><span>)</span> <span>*</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span>
    <span>X</span><span>[</span><span>i</span><span>+</span><span>1</span><span>]</span> <span>=</span> <span>X</span><span>[</span><span>i</span><span>]</span> <span>+</span> <span>mu</span> <span>*</span> <span>dt</span> <span>+</span> <span>sigma</span> <span>*</span> <span>dW</span>

<span>plt</span><span>.</span><span>plot</span><span>(</span><span>t</span><span>,</span> <span>X</span><span>,</span> <span>label</span><span>=</span><span>f</span><span>"</span><span>μ=</span><span>{</span><span>mu</span><span>}</span><span>, σ=</span><span>{</span><span>sigma</span><span>}</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>title</span><span>(</span><span>"</span><span>Sample Path of dX = μ dt + σ dW</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>"</span><span>Time t</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>"</span><span>X(t)</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>legend</span><span>()</span>
<span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="b4-python-code-for-geometric-brownian-motion-simulation"><span><strong>B4. Python Code for Geometric Brownian Motion Simulation</strong></span><a href="#b4-python-code-for-geometric-brownian-motion-simulation"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>

<span># Simulate simple SDE: dX = mu dt + sigma dW
</span><span>np</span><span>.</span><span>random</span><span>.</span><span>seed</span><span>(</span><span>42</span><span>)</span>

<span># Simulate Geometric Brownian Motion (exact solution)
</span><span>T_gbm</span> <span>=</span> <span>10.0</span>  <span># Longer time to show exponential nature
</span><span>N_gbm</span> <span>=</span> <span>1000</span>
<span>t_gbm</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0</span><span>,</span> <span>T_gbm</span><span>,</span> <span>N_gbm</span><span>+</span><span>1</span><span>)</span>
<span>S0</span> <span>=</span> <span>100.0</span>  <span># Initial stock price
</span><span>mu</span><span>,</span> <span>sigma</span> <span>=</span> <span>0.15</span><span>,</span> <span>0.2</span>  <span># Slightly larger for visibility
</span><span>S</span> <span>=</span> <span>S0</span> <span>*</span> <span>np</span><span>.</span><span>exp</span><span>((</span><span>mu</span> <span>-</span> <span>0.5</span> <span>*</span> <span>sigma</span><span>**</span><span>2</span><span>)</span> <span>*</span> <span>t_gbm</span> <span>+</span> <span>sigma</span> <span>*</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>t_gbm</span><span>)</span> <span>*</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>,</span> <span>N_gbm</span><span>+</span><span>1</span><span>))</span>

<span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>8</span><span>,</span> <span>4</span><span>))</span>
<span>plt</span><span>.</span><span>plot</span><span>(</span><span>t_gbm</span><span>,</span> <span>S</span><span>,</span> <span>label</span><span>=</span><span>f</span><span>"</span><span>μ=</span><span>{</span><span>mu</span><span>}</span><span>, σ=</span><span>{</span><span>sigma</span><span>}</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>title</span><span>(</span><span>"</span><span>Sample Path: Geometric Brownian Motion</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>"</span><span>Time t</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>"</span><span>S(t)</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>legend</span><span>()</span>
<span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
<span>plt</span><span>.</span><span>savefig</span><span>(</span><span>"</span><span>gbm_path.png</span><span>"</span><span>,</span> <span>dpi</span><span>=</span><span>300</span><span>,</span> <span>bbox_inches</span><span>=</span><span>"</span><span>tight</span><span>"</span><span>)</span>
<span>plt</span><span>.</span><span>show</span><span>()</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="b5-latex-code-for-tikz-diagram-of-paths-in-pascals-triangle"><span>B5. LaTeX Code for Tikz Diagram of Paths in Pascal’s Triangle</span><a href="#b5-latex-code-for-tikz-diagram-of-paths-in-pascals-triangle"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td><pre><span>\documentclass</span><span>{</span>standalone<span>}</span>
<span>\usepackage</span><span>{</span>tikz<span>}</span>
<span>\begin{document}</span>

<span>\begin{tikzpicture}</span>[scale=0.8]
    <span>% Add a white background rectangle</span>
  <span>\fill</span><span>[white]</span> (-12, 1) rectangle (10, -5);
  
  <span>% Row labels (only once, to the left of the first diagram)</span>
  <span>\node</span><span>[align=right]</span> at (-11, 0) <span>{</span>Row 0<span>}</span>;
  <span>\node</span><span>[align=right]</span> at (-11, -1) <span>{</span>Row 1<span>}</span>;
  <span>\node</span><span>[align=right]</span> at (-11, -2) <span>{</span>Row 2<span>}</span>;
  <span>\node</span><span>[align=right]</span> at (-11, -3) <span>{</span>Row 3<span>}</span>;

  <span>% Diagram 1: Path RRL</span>
  <span>\node</span> at (-6, 0) <span>{</span>1<span>}</span>; <span>% Row 0</span>
  <span>\node</span> at (-7, -1) <span>{</span>1<span>}</span>; <span>% Row 1</span>
  <span>\node</span> at (-5, -1) <span>{</span>1<span>}</span>;
  <span>\node</span> at (-8, -2) <span>{</span>1<span>}</span>; <span>% Row 2</span>
  <span>\node</span> at (-6, -2) <span>{</span>2<span>}</span>;
  <span>\node</span> at (-4, -2) <span>{</span>1<span>}</span>;
  <span>\node</span> at (-9, -3) <span>{</span>1<span>}</span>; <span>% Row 3</span>
  <span>\node</span> at (-7, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (-5, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (-3, -3) <span>{</span>1<span>}</span>;
  <span>\draw</span><span>[-&gt;, red, thick]</span> (-6, 0) -- (-5, -1) -- (-4, -2) -- (-5, -3); <span>% RRL</span>
  <span>\node</span> at (-6, -4) <span>{</span>Right-Right-Left<span>}</span>;

  <span>% Diagram 2: Path RLR</span>
  <span>\node</span> at (0, 0) <span>{</span>1<span>}</span>; <span>% Row 0</span>
  <span>\node</span> at (-1, -1) <span>{</span>1<span>}</span>; <span>% Row 1</span>
  <span>\node</span> at (1, -1) <span>{</span>1<span>}</span>;
  <span>\node</span> at (-2, -2) <span>{</span>1<span>}</span>; <span>% Row 2</span>
  <span>\node</span> at (0, -2) <span>{</span>2<span>}</span>;
  <span>\node</span> at (2, -2) <span>{</span>1<span>}</span>;
  <span>\node</span> at (-3, -3) <span>{</span>1<span>}</span>; <span>% Row 3</span>
  <span>\node</span> at (-1, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (1, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (3, -3) <span>{</span>1<span>}</span>;
  <span>\draw</span><span>[-&gt;, blue, thick]</span> (0, 0) -- (1, -1) -- (0, -2) -- (1, -3); <span>% RLR</span>
  <span>\node</span> at (0, -4) <span>{</span>Right-Left-Right<span>}</span>;

  <span>% Diagram 3: Path LRR</span>
  <span>\node</span> at (6, 0) <span>{</span>1<span>}</span>; <span>% Row 0</span>
  <span>\node</span> at (5, -1) <span>{</span>1<span>}</span>; <span>% Row 1</span>
  <span>\node</span> at (7, -1) <span>{</span>1<span>}</span>;
  <span>\node</span> at (4, -2) <span>{</span>1<span>}</span>; <span>% Row 2</span>
  <span>\node</span> at (6, -2) <span>{</span>2<span>}</span>;
  <span>\node</span> at (8, -2) <span>{</span>1<span>}</span>;
  <span>\node</span> at (3, -3) <span>{</span>1<span>}</span>; <span>% Row 3</span>
  <span>\node</span> at (5, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (7, -3) <span>{</span>3<span>}</span>;
  <span>\node</span> at (9, -3) <span>{</span>1<span>}</span>;
  <span>\draw</span><span>[-&gt;, green, thick]</span> (6, 0) -- (5, -1) -- (6, -2) -- (7, -3); <span>% LRR</span>
  <span>\node</span> at (6, -4) <span>{</span>Left-Right-Right<span>}</span>;
<span>\end{tikzpicture}</span>

<span>\end{document}</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="3d-visualizations"><span>3D Visualizations</span><a href="#3d-visualizations"><i></i></a></h3><h4 id="c1-3d-plot-of-discrete-random-walks"><span>C1. 3D Plot of Discrete Random Walks</span><a href="#c1-3d-plot-of-discrete-random-walks"><i></i></a></h4><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>mpl_toolkits.mplot3d</span> <span>import</span> <span>Axes3D</span>  <span># for 3D plotting
</span><span>import</span> <span>imageio.v3</span> <span>as</span> <span>imageio</span>  <span># using modern imageio v3 API
</span><span>import</span> <span>os</span>
<span>from</span> <span>scipy.special</span> <span>import</span> <span>comb</span>
<span>from</span> <span>scipy.stats</span> <span>import</span> <span>norm</span>

<span># Create a directory for frames
</span><span>os</span><span>.</span><span>makedirs</span><span>(</span><span>'</span><span>gif_frames</span><span>'</span><span>,</span> <span>exist_ok</span><span>=</span><span>True</span><span>)</span>

<span>##############################################
# Part 1: Discrete Binomial Random Walk (N = 15)
##############################################
</span>
<span>N</span> <span>=</span> <span>15</span>  <span># total number of steps (kept small for clear discreteness)
</span><span>num_sample_paths</span> <span>=</span> <span>5</span>  <span># number of sample paths to overlay
</span>
<span># Simulate a few discrete random walk sample paths
</span><span>sample_paths</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_sample_paths</span><span>):</span>
    <span>steps</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>choice</span><span>([</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>],</span> <span>size</span><span>=</span><span>N</span><span>)</span>
    <span>path</span> <span>=</span> <span>np</span><span>.</span><span>concatenate</span><span>(([</span><span>0</span><span>],</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>steps</span><span>)))</span>
    <span>sample_paths</span><span>.</span><span>append</span><span>(</span><span>path</span><span>)</span>
<span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>(</span><span>sample_paths</span><span>)</span>  <span># shape: (num_sample_paths, N+1)
</span>
<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>t_step</span> <span>in</span> <span>range</span><span>(</span><span>N</span> <span>+</span> <span>1</span><span>):</span>
    <span>fig</span> <span>=</span> <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>))</span>
    <span>ax</span> <span>=</span> <span>fig</span><span>.</span><span>add_subplot</span><span>(</span><span>111</span><span>,</span> <span>projection</span><span>=</span><span>'</span><span>3d</span><span>'</span><span>)</span>
    
    <span># For each discrete time slice up to the current time, plot the PMF
</span>    <span>for</span> <span>t</span> <span>in</span> <span>range</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>):</span>
        <span># For a random walk starting at 0, possible positions are -t, -t+2, ..., t
</span>        <span>x_values</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>-</span><span>t</span><span>,</span> <span>t</span> <span>+</span> <span>1</span><span>,</span> <span>2</span><span>)</span>
        <span>if</span> <span>t</span> <span>==</span> <span>0</span><span>:</span>
            <span>p_values</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>([</span><span>1.0</span><span>])</span>
        <span>else</span><span>:</span>
            <span># k = (x + t)/2 gives the number of +1 steps
</span>            <span>k</span> <span>=</span> <span>(</span><span>x_values</span> <span>+</span> <span>t</span><span>)</span> <span>//</span> <span>2</span>  
            <span>p_values</span> <span>=</span> <span>comb</span><span>(</span><span>t</span><span>,</span> <span>k</span><span>)</span> <span>*</span> <span>(</span><span>0.5</span> <span>**</span> <span>t</span><span>)</span>
        <span># Plot the discrete PMF as blue markers (and connect them with a line)
</span>        <span>ax</span><span>.</span><span>scatter</span><span>(</span><span>x_values</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_values</span><span>),</span> <span>p_values</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>blue</span><span>'</span><span>,</span> <span>s</span><span>=</span><span>50</span><span>)</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>x_values</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_values</span><span>),</span> <span>p_values</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>blue</span><span>'</span><span>,</span> <span>alpha</span><span>=</span><span>0.5</span><span>)</span>
    
    <span># Overlay the sample random walk paths (projected at z=0)
</span>    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>sp</span><span>[:</span><span>t_step</span> <span>+</span> <span>1</span><span>],</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>),</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>),</span>
                <span>'</span><span>r-o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>5</span><span>,</span> <span>label</span><span>=</span><span>'</span><span>Sample Path</span><span>'</span> <span>if</span> <span>t_step</span> <span>==</span> <span>0</span> <span>else</span> <span>""</span><span>)</span>
    
    <span>ax</span><span>.</span><span>set_xlabel</span><span>(</span><span>'</span><span>Position (x)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_ylabel</span><span>(</span><span>'</span><span>Time (steps)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlabel</span><span>(</span><span>'</span><span>Probability</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>Discrete Binomial Random Walk: Step </span><span>{</span><span>t_step</span><span>}</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlim</span><span>(</span><span>0</span><span>,</span> <span>1.0</span><span>)</span>
    <span>ax</span><span>.</span><span>view_init</span><span>(</span><span>elev</span><span>=</span><span>30</span><span>,</span> <span>azim</span><span>=-</span><span>60</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/discrete_binomial_</span><span>{</span><span>t_step</span><span>:</span><span>02</span><span>d</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span># Compute per-frame durations: 0.25 sec for all frames except the last one (2 sec)
</span><span>durations</span> <span>=</span> <span>[</span><span>0.25</span><span>]</span> <span>*</span> <span>(</span><span>len</span><span>(</span><span>frames</span><span>)</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>[</span><span>2.0</span><span>]</span>

<span># Write the GIF with variable durations and infinite looping
</span><span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>discrete_binomial.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>durations</span><span>,</span> <span>loop</span><span>=</span><span>0</span><span>)</span>

<span>##############################################
# Part 2: Discrete Random Walk Normalizing (N = 50)
##############################################
</span>
<span>N</span> <span>=</span> <span>50</span>  <span># total number of steps (increased to show gradual convergence)
</span><span>num_sample_paths</span> <span>=</span> <span>5</span>  <span># number of sample paths to overlay
</span>
<span># Simulate a few discrete random walk sample paths
</span><span>sample_paths</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_sample_paths</span><span>):</span>
    <span>steps</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>choice</span><span>([</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>],</span> <span>size</span><span>=</span><span>N</span><span>)</span>
    <span>path</span> <span>=</span> <span>np</span><span>.</span><span>concatenate</span><span>(([</span><span>0</span><span>],</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>steps</span><span>)))</span>
    <span>sample_paths</span><span>.</span><span>append</span><span>(</span><span>path</span><span>)</span>
<span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>(</span><span>sample_paths</span><span>)</span>  <span># shape: (num_sample_paths, N+1)
</span>
<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>t_step</span> <span>in</span> <span>range</span><span>(</span><span>N</span> <span>+</span> <span>1</span><span>):</span>
    <span>fig</span> <span>=</span> <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>))</span>
    <span>ax</span> <span>=</span> <span>fig</span><span>.</span><span>add_subplot</span><span>(</span><span>111</span><span>,</span> <span>projection</span><span>=</span><span>'</span><span>3d</span><span>'</span><span>)</span>
    
    <span># Plot the PMFs for all time slices from 0 to the current step
</span>    <span>for</span> <span>t</span> <span>in</span> <span>range</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>):</span>
        <span># For a random walk starting at 0, possible positions are -t, -t+2, ..., t
</span>        <span>x_values</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>-</span><span>t</span><span>,</span> <span>t</span> <span>+</span> <span>1</span><span>,</span> <span>2</span><span>)</span>
        <span>if</span> <span>t</span> <span>==</span> <span>0</span><span>:</span>
            <span>p_values</span> <span>=</span> <span>np</span><span>.</span><span>array</span><span>([</span><span>1.0</span><span>])</span>
        <span>else</span><span>:</span>
            <span># For each x, number of +1 steps is (x+t)/2
</span>            <span>k</span> <span>=</span> <span>(</span><span>x_values</span> <span>+</span> <span>t</span><span>)</span> <span>//</span> <span>2</span>
            <span>p_values</span> <span>=</span> <span>comb</span><span>(</span><span>t</span><span>,</span> <span>k</span><span>)</span> <span>*</span> <span>(</span><span>0.5</span> <span>**</span> <span>t</span><span>)</span>
        
        <span># Plot the discrete PMF as blue markers and lines
</span>        <span>ax</span><span>.</span><span>scatter</span><span>(</span><span>x_values</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_values</span><span>),</span> <span>p_values</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>blue</span><span>'</span><span>,</span> <span>s</span><span>=</span><span>50</span><span>)</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>x_values</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_values</span><span>),</span> <span>p_values</span><span>,</span> <span>color</span><span>=</span><span>'</span><span>blue</span><span>'</span><span>,</span> <span>alpha</span><span>=</span><span>0.5</span><span>)</span>
        
        <span># For the current time slice, overlay the normal approximation in red
</span>        <span>if</span> <span>t</span> <span>==</span> <span>t_step</span> <span>and</span> <span>t</span> <span>&gt;</span> <span>0</span><span>:</span>
            <span>x_cont</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>-</span><span>t</span><span>,</span> <span>t</span><span>,</span> <span>200</span><span>)</span>
            <span>normal_pdf</span> <span>=</span> <span>norm</span><span>.</span><span>pdf</span><span>(</span><span>x_cont</span><span>,</span> <span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>t</span><span>))</span>
            <span>ax</span><span>.</span><span>plot</span><span>(</span><span>x_cont</span><span>,</span> <span>[</span><span>t</span><span>]</span><span>*</span><span>len</span><span>(</span><span>x_cont</span><span>),</span> <span>normal_pdf</span><span>,</span> <span>'</span><span>r-</span><span>'</span><span>,</span> <span>linewidth</span><span>=</span><span>2</span><span>,</span> <span>label</span><span>=</span><span>'</span><span>Normal Approx.</span><span>'</span><span>)</span>
    
    <span># Overlay the sample random walk paths (projected along the z=0 plane)
</span>    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>sp</span><span>[:</span><span>t_step</span> <span>+</span> <span>1</span><span>],</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>),</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>t_step</span> <span>+</span> <span>1</span><span>),</span>
                <span>'</span><span>g-o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>5</span><span>,</span> <span>label</span><span>=</span><span>'</span><span>Sample Path</span><span>'</span> <span>if</span> <span>t_step</span> <span>==</span> <span>0</span> <span>else</span> <span>""</span><span>)</span>
    
    <span>ax</span><span>.</span><span>set_xlabel</span><span>(</span><span>'</span><span>Position (x)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_ylabel</span><span>(</span><span>'</span><span>Time (steps)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlabel</span><span>(</span><span>'</span><span>Probability</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>Discrete Binomial Random Walk at Step </span><span>{</span><span>t_step</span><span>}</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlim</span><span>(</span><span>0</span><span>,</span> <span>1.0</span><span>)</span>
    <span>ax</span><span>.</span><span>view_init</span><span>(</span><span>elev</span><span>=</span><span>30</span><span>,</span> <span>azim</span><span>=-</span><span>60</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/discrete_binomial_</span><span>{</span><span>t_step</span><span>:</span><span>02</span><span>d</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span># Compute per-frame durations: 0.25 sec for all frames except the last one (2 sec)
</span><span>durations</span> <span>=</span> <span>[</span><span>0.25</span><span>]</span> <span>*</span> <span>(</span><span>len</span><span>(</span><span>frames</span><span>)</span> <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>[</span><span>2.0</span><span>]</span>

<span># Write the GIF with variable durations and infinite looping
</span><span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>discrete_binomial_normalizing.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>durations</span><span>,</span> <span>loop</span><span>=</span><span>0</span><span>)</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="c2-3d-animation-of-brownian-motion"><span>C2. 3D Animation of Brownian Motion</span><a href="#c2-3d-animation-of-brownian-motion"><i></i></a></h3><p>Normal distribution sweeping and evolving across time according Brownian motion</p><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>mpl_toolkits.mplot3d</span> <span>import</span> <span>Axes3D</span>  <span># for 3D plotting
</span><span>from</span> <span>scipy.stats</span> <span>import</span> <span>norm</span>
<span>import</span> <span>imageio.v3</span> <span>as</span> <span>imageio</span>  <span># using modern API
</span><span>import</span> <span>os</span>

<span>os</span><span>.</span><span>makedirs</span><span>(</span><span>'</span><span>gif_frames</span><span>'</span><span>,</span> <span>exist_ok</span><span>=</span><span>True</span><span>)</span>

<span># Parameters for continuous Brownian motion
</span><span>num_frames</span> <span>=</span> <span>100</span>  <span># more frames for smoother animation
</span><span>t_values</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0.1</span><span>,</span> <span>5</span><span>,</span> <span>num_frames</span><span>)</span>
<span>x</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>,</span> <span>200</span><span>)</span>  <span># increased resolution
</span>
<span>num_sample_paths</span> <span>=</span> <span>5</span>
<span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>num_sample_paths</span><span>,</span> <span>len</span><span>(</span><span>t_values</span><span>)))</span>
<span>dt_cont</span> <span>=</span> <span>t_values</span><span>[</span><span>1</span><span>]</span> <span>-</span> <span>t_values</span><span>[</span><span>0</span><span>]</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_sample_paths</span><span>):</span>
    <span>increments</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt_cont</span><span>),</span> <span>size</span><span>=</span><span>len</span><span>(</span><span>t_values</span><span>)</span><span>-</span><span>1</span><span>)</span>
    <span>sample_paths</span><span>[</span><span>i</span><span>,</span> <span>1</span><span>:]</span> <span>=</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>increments</span><span>)</span>

<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span><span>,</span> <span>t</span> <span>in</span> <span>enumerate</span><span>(</span><span>t_values</span><span>):</span>
    <span>fig</span> <span>=</span> <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>))</span>
    <span>ax</span> <span>=</span> <span>fig</span><span>.</span><span>add_subplot</span><span>(</span><span>111</span><span>,</span> <span>projection</span><span>=</span><span>'</span><span>3d</span><span>'</span><span>)</span>
    
    <span>mask</span> <span>=</span> <span>t_values</span> <span>&lt;=</span> <span>t</span>
    <span>T_sub</span><span>,</span> <span>X_sub</span> <span>=</span> <span>np</span><span>.</span><span>meshgrid</span><span>(</span><span>t_values</span><span>[</span><span>mask</span><span>],</span> <span>x</span><span>)</span>
    <span>P_sub</span> <span>=</span> <span>(</span><span>1</span> <span>/</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>2</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>T_sub</span><span>))</span> <span>*</span> <span>np</span><span>.</span><span>exp</span><span>(</span><span>-</span><span>X_sub</span><span>**</span><span>2</span> <span>/</span> <span>(</span><span>2</span> <span>*</span> <span>T_sub</span><span>))</span>
    <span>ax</span><span>.</span><span>plot_surface</span><span>(</span><span>X_sub</span><span>,</span> <span>T_sub</span><span>,</span> <span>P_sub</span><span>,</span> <span>cmap</span><span>=</span><span>'</span><span>viridis</span><span>'</span><span>,</span> <span>alpha</span><span>=</span><span>0.7</span><span>,</span> <span>edgecolor</span><span>=</span><span>'</span><span>none</span><span>'</span><span>)</span>
    
    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>sp</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>t_values</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>i</span><span>+</span><span>1</span><span>),</span> <span>'</span><span>r-</span><span>'</span><span>,</span> <span>marker</span><span>=</span><span>'</span><span>o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>3</span><span>)</span>
    
    <span>ax</span><span>.</span><span>set_xlabel</span><span>(</span><span>'</span><span>Position (x)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_ylabel</span><span>(</span><span>'</span><span>Time (t)</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlabel</span><span>(</span><span>'</span><span>Density</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>Continuous Brownian Motion at t = </span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>view_init</span><span>(</span><span>elev</span><span>=</span><span>30</span><span>,</span> <span>azim</span><span>=-</span><span>60</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/continuous_3d_smooth_t_</span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>continuous_brownian_3d_smooth.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>0.1</span><span>)</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="c3-3d-animation-of-geometric-brownian-motion"><span>C3. 3D Animation of Geometric Brownian Motion</span><a href="#c3-3d-animation-of-geometric-brownian-motion"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>mpl_toolkits.mplot3d</span> <span>import</span> <span>Axes3D</span>  <span># for 3D plotting
</span><span>import</span> <span>imageio.v3</span> <span>as</span> <span>imageio</span>  <span># modern API
</span><span>import</span> <span>os</span>

<span>os</span><span>.</span><span>makedirs</span><span>(</span><span>'</span><span>gif_frames</span><span>'</span><span>,</span> <span>exist_ok</span><span>=</span><span>True</span><span>)</span>

<span># Parameters for geometric Brownian motion (GBM)
</span><span>S0</span> <span>=</span> <span>1.0</span>    <span># initial stock price
</span><span>mu</span> <span>=</span> <span>0.2</span>    <span># drift rate (increased for noticeable drift)
</span><span>sigma</span> <span>=</span> <span>0.2</span> <span># volatility
</span>
<span>num_frames</span> <span>=</span> <span>100</span>
<span>t_values</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0.1</span><span>,</span> <span>5</span><span>,</span> <span>num_frames</span><span>)</span>  <span># avoid t=0 to prevent singularity in density
</span><span>S_range</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0.01</span><span>,</span> <span>5</span><span>,</span> <span>200</span><span>)</span>         <span># price range
</span>
<span># Simulate GBM sample paths
</span><span>num_sample_paths</span> <span>=</span> <span>5</span>
<span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>num_sample_paths</span><span>,</span> <span>len</span><span>(</span><span>t_values</span><span>)))</span>
<span>dt</span> <span>=</span> <span>t_values</span><span>[</span><span>1</span><span>]</span> <span>-</span> <span>t_values</span><span>[</span><span>0</span><span>]</span>
<span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_sample_paths</span><span>):</span>
    <span>increments</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt</span><span>),</span> <span>size</span><span>=</span><span>len</span><span>(</span><span>t_values</span><span>)</span><span>-</span><span>1</span><span>)</span>
    <span>W</span> <span>=</span> <span>np</span><span>.</span><span>concatenate</span><span>(([</span><span>0</span><span>],</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>increments</span><span>)))</span>
    <span>sample_paths</span><span>[</span><span>i</span><span>]</span> <span>=</span> <span>S0</span> <span>*</span> <span>np</span><span>.</span><span>exp</span><span>((</span><span>mu</span> <span>-</span> <span>0.5</span> <span>*</span> <span>sigma</span><span>**</span><span>2</span><span>)</span> <span>*</span> <span>t_values</span> <span>+</span> <span>sigma</span> <span>*</span> <span>W</span><span>)</span>

<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span><span>,</span> <span>t</span> <span>in</span> <span>enumerate</span><span>(</span><span>t_values</span><span>):</span>
    <span>fig</span> <span>=</span> <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>))</span>
    <span>ax</span> <span>=</span> <span>fig</span><span>.</span><span>add_subplot</span><span>(</span><span>111</span><span>,</span> <span>projection</span><span>=</span><span>'</span><span>3d</span><span>'</span><span>)</span>
    
    <span>mask</span> <span>=</span> <span>t_values</span> <span>&lt;=</span> <span>t</span>
    <span>T_sub</span><span>,</span> <span>S_sub</span> <span>=</span> <span>np</span><span>.</span><span>meshgrid</span><span>(</span><span>t_values</span><span>[</span><span>mask</span><span>],</span> <span>S_range</span><span>)</span>
    <span>P_sub</span> <span>=</span> <span>(</span><span>1</span> <span>/</span> <span>(</span><span>S_sub</span> <span>*</span> <span>sigma</span> <span>*</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>2</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>T_sub</span><span>)))</span> <span>*</span> \
            <span>np</span><span>.</span><span>exp</span><span>(</span><span>-</span> <span>(</span><span>np</span><span>.</span><span>log</span><span>(</span><span>S_sub</span> <span>/</span> <span>S0</span><span>)</span> <span>-</span> <span>(</span><span>mu</span> <span>-</span> <span>0.5</span> <span>*</span> <span>sigma</span><span>**</span><span>2</span><span>)</span> <span>*</span> <span>T_sub</span><span>)</span><span>**</span><span>2</span> <span>/</span> <span>(</span><span>2</span> <span>*</span> <span>sigma</span><span>**</span><span>2</span> <span>*</span> <span>T_sub</span><span>))</span>
    <span>ax</span><span>.</span><span>plot_surface</span><span>(</span><span>S_sub</span><span>,</span> <span>T_sub</span><span>,</span> <span>P_sub</span><span>,</span> <span>cmap</span><span>=</span><span>'</span><span>viridis</span><span>'</span><span>,</span> <span>alpha</span><span>=</span><span>0.7</span><span>,</span> <span>edgecolor</span><span>=</span><span>'</span><span>none</span><span>'</span><span>)</span>
    
    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>ax</span><span>.</span><span>plot</span><span>(</span><span>sp</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>t_values</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>np</span><span>.</span><span>zeros</span><span>(</span><span>i</span><span>+</span><span>1</span><span>),</span> <span>'</span><span>r-</span><span>'</span><span>,</span> <span>marker</span><span>=</span><span>'</span><span>o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>3</span><span>)</span>
    
    <span>ax</span><span>.</span><span>set_xlabel</span><span>(</span><span>'</span><span>Stock Price S</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_ylabel</span><span>(</span><span>'</span><span>Time t</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_zlabel</span><span>(</span><span>'</span><span>Density</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>set_title</span><span>(</span><span>f</span><span>'</span><span>Geometric Brownian Motion at t = </span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>'</span><span>)</span>
    <span>ax</span><span>.</span><span>view_init</span><span>(</span><span>elev</span><span>=</span><span>30</span><span>,</span> <span>azim</span><span>=-</span><span>60</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/geometric_brownian_drifted_3d_t_</span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>geometric_brownian_drifted_3d.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>0.1</span><span>)</span>
</pre></td></tr></tbody></table></code></p></div><h3 id="c4-python-code-for-normal-distribution-approximation-by-random-walks"><span>C4. Python Code for Normal Distribution Approximation by Random Walks</span><a href="#c4-python-code-for-normal-distribution-approximation-by-random-walks"><i></i></a></h3><div><p><code><table><tbody><tr><td><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
</pre></td><td><pre><span>import</span> <span>numpy</span> <span>as</span> <span>np</span>
<span>import</span> <span>matplotlib.pyplot</span> <span>as</span> <span>plt</span>
<span>from</span> <span>scipy.stats</span> <span>import</span> <span>norm</span>
<span>import</span> <span>imageio.v3</span> <span>as</span> <span>imageio</span>  <span># modern ImageIO v3 API
</span><span>import</span> <span>os</span>
<span>from</span> <span>scipy.special</span> <span>import</span> <span>comb</span>

<span># Create a directory for frames
</span><span>os</span><span>.</span><span>makedirs</span><span>(</span><span>'</span><span>gif_frames</span><span>'</span><span>,</span> <span>exist_ok</span><span>=</span><span>True</span><span>)</span>

<span># 1. Continuous Brownian Motion with Sample Paths
</span>
<span># Define time values and x range for density
</span><span>t_values</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>0.1</span><span>,</span> <span>5</span><span>,</span> <span>50</span><span>)</span>  <span># Times from 0.1 to 5
</span><span>x</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>,</span> <span>100</span><span>)</span>          <span># Range of x values
</span>
<span># Simulate a few sample Brownian motion paths
</span><span>num_sample_paths</span> <span>=</span> <span>5</span>
<span>dt_cont</span> <span>=</span> <span>t_values</span><span>[</span><span>1</span><span>]</span> <span>-</span> <span>t_values</span><span>[</span><span>0</span><span>]</span>  <span># constant time step (~0.1)
</span><span>sample_paths</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>num_sample_paths</span><span>,</span> <span>len</span><span>(</span><span>t_values</span><span>)))</span>
<span>sample_paths</span><span>[:,</span> <span>0</span><span>]</span> <span>=</span> <span>0</span>
<span>increments</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>normal</span><span>(</span><span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt_cont</span><span>),</span> <span>size</span><span>=</span><span>(</span><span>num_sample_paths</span><span>,</span> <span>len</span><span>(</span><span>t_values</span><span>)</span><span>-</span><span>1</span><span>))</span>
<span>sample_paths</span><span>[:,</span> <span>1</span><span>:]</span> <span>=</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>increments</span><span>,</span> <span>axis</span><span>=</span><span>1</span><span>)</span>

<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span><span>,</span> <span>t</span> <span>in</span> <span>enumerate</span><span>(</span><span>t_values</span><span>):</span>
    <span>p</span> <span>=</span> <span>(</span><span>1</span> <span>/</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>2</span> <span>*</span> <span>np</span><span>.</span><span>pi</span> <span>*</span> <span>t</span><span>))</span> <span>*</span> <span>np</span><span>.</span><span>exp</span><span>(</span><span>-</span><span>x</span><span>**</span><span>2</span> <span>/</span> <span>(</span><span>2</span> <span>*</span> <span>t</span><span>))</span>
    
    <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>12</span><span>,</span> <span>4</span><span>))</span>
    <span>plt</span><span>.</span><span>subplot</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>)</span>
    <span>plt</span><span>.</span><span>plot</span><span>(</span><span>x</span><span>,</span> <span>p</span><span>,</span> <span>'</span><span>b-</span><span>'</span><span>,</span> <span>label</span><span>=</span><span>f</span><span>'</span><span>t = </span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>title</span><span>(</span><span>'</span><span>Brownian Motion Distribution</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>x</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Density p(x,t)</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylim</span><span>(</span><span>0</span><span>,</span> <span>0.8</span><span>)</span>
    <span>plt</span><span>.</span><span>legend</span><span>()</span>
    <span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
    
    <span>plt</span><span>.</span><span>subplot</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>2</span><span>)</span>
    <span>for</span> <span>sp</span> <span>in</span> <span>sample_paths</span><span>:</span>
        <span>plt</span><span>.</span><span>plot</span><span>(</span><span>t_values</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>sp</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>'</span><span>-o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>3</span><span>)</span>
    <span>plt</span><span>.</span><span>title</span><span>(</span><span>'</span><span>Sample Brownian Paths</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>Time</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Position</span><span>'</span><span>)</span>
    <span>plt</span><span>.</span><span>xlim</span><span>(</span><span>0</span><span>,</span> <span>5</span><span>)</span>
    <span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
    
    <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/continuous_t_</span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>.png</span><span>'</span>
    <span>plt</span><span>.</span><span>tight_layout</span><span>()</span>
    <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
    <span>plt</span><span>.</span><span>close</span><span>()</span>
    <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span># Save the continuous Brownian motion GIF
# (duration in seconds per frame; adjust as desired)
</span><span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>continuous_brownian.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>0.1</span><span>)</span>

<span># 2. Discrete Random Walk with Sample Paths
</span>
<span>def</span> <span>simulate_random_walk</span><span>(</span><span>dt</span><span>,</span> <span>T</span><span>,</span> <span>num_paths</span><span>):</span>
    <span>"""</span><span>Simulate random walk paths with step size sqrt(dt).</span><span>"""</span>
    <span>n_steps</span> <span>=</span> <span>int</span><span>(</span><span>T</span> <span>/</span> <span>dt</span><span>)</span>
    <span>positions</span> <span>=</span> <span>np</span><span>.</span><span>zeros</span><span>((</span><span>num_paths</span><span>,</span> <span>n_steps</span> <span>+</span> <span>1</span><span>))</span>
    <span>for</span> <span>i</span> <span>in</span> <span>range</span><span>(</span><span>num_paths</span><span>):</span>
        <span>increments</span> <span>=</span> <span>np</span><span>.</span><span>random</span><span>.</span><span>choice</span><span>([</span><span>-</span><span>1</span><span>,</span> <span>1</span><span>],</span> <span>size</span><span>=</span><span>n_steps</span><span>)</span> <span>*</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>dt</span><span>)</span>
        <span>positions</span><span>[</span><span>i</span><span>,</span> <span>1</span><span>:]</span> <span>=</span> <span>np</span><span>.</span><span>cumsum</span><span>(</span><span>increments</span><span>)</span>
    <span>return</span> <span>positions</span>

<span>dt</span> <span>=</span> <span>0.01</span>  <span># Step size
</span><span>T</span> <span>=</span> <span>5.0</span>    <span># Total time
</span><span>num_paths</span> <span>=</span> <span>10000</span>  <span># For histogram
</span><span>times</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>0</span><span>,</span> <span>T</span> <span>+</span> <span>dt</span><span>,</span> <span>dt</span><span>)</span>
<span>positions</span> <span>=</span> <span>simulate_random_walk</span><span>(</span><span>dt</span><span>,</span> <span>T</span><span>,</span> <span>num_paths</span><span>)</span>
<span>sample_indices</span> <span>=</span> <span>np</span><span>.</span><span>arange</span><span>(</span><span>5</span><span>)</span>

<span>frames</span> <span>=</span> <span>[]</span>
<span>for</span> <span>i</span><span>,</span> <span>t</span> <span>in</span> <span>enumerate</span><span>(</span><span>times</span><span>):</span>
    <span>if</span> <span>i</span> <span>%</span> <span>10</span> <span>==</span> <span>0</span><span>:</span>  <span># Use every 10th frame for the GIF
</span>        <span>current_positions</span> <span>=</span> <span>positions</span><span>[:,</span> <span>i</span><span>]</span>
        <span>x_vals</span> <span>=</span> <span>np</span><span>.</span><span>linspace</span><span>(</span><span>-</span><span>5</span><span>,</span> <span>5</span><span>,</span> <span>100</span><span>)</span>
        <span>p_theoretical</span> <span>=</span> <span>norm</span><span>.</span><span>pdf</span><span>(</span><span>x_vals</span><span>,</span> <span>0</span><span>,</span> <span>np</span><span>.</span><span>sqrt</span><span>(</span><span>t</span><span>)</span> <span>if</span> <span>t</span> <span>&gt;</span> <span>0</span> <span>else</span> <span>1e-5</span><span>)</span>
        
        <span>plt</span><span>.</span><span>figure</span><span>(</span><span>figsize</span><span>=</span><span>(</span><span>12</span><span>,</span> <span>4</span><span>))</span>
        <span>plt</span><span>.</span><span>subplot</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>)</span>
        <span>plt</span><span>.</span><span>hist</span><span>(</span><span>current_positions</span><span>,</span> <span>bins</span><span>=</span><span>50</span><span>,</span> <span>density</span><span>=</span><span>True</span><span>,</span> <span>alpha</span><span>=</span><span>0.6</span><span>,</span> <span>label</span><span>=</span><span>f</span><span>'</span><span>t = </span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>plot</span><span>(</span><span>x_vals</span><span>,</span> <span>p_theoretical</span><span>,</span> <span>'</span><span>r-</span><span>'</span><span>,</span> <span>label</span><span>=</span><span>'</span><span>N(0,t)</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>title</span><span>(</span><span>'</span><span>Discrete Random Walk Distribution</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>Position</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Density</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>ylim</span><span>(</span><span>0</span><span>,</span> <span>0.8</span><span>)</span>
        <span>plt</span><span>.</span><span>legend</span><span>()</span>
        <span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
        
        <span>plt</span><span>.</span><span>subplot</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>2</span><span>)</span>
        <span>for</span> <span>idx</span> <span>in</span> <span>sample_indices</span><span>:</span>
            <span>plt</span><span>.</span><span>plot</span><span>(</span><span>times</span><span>[:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>positions</span><span>[</span><span>idx</span><span>,</span> <span>:</span><span>i</span><span>+</span><span>1</span><span>],</span> <span>'</span><span>-o</span><span>'</span><span>,</span> <span>markersize</span><span>=</span><span>3</span><span>)</span>
        <span>plt</span><span>.</span><span>title</span><span>(</span><span>'</span><span>Sample Random Walk Paths</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>xlabel</span><span>(</span><span>'</span><span>Time</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>ylabel</span><span>(</span><span>'</span><span>Position</span><span>'</span><span>)</span>
        <span>plt</span><span>.</span><span>xlim</span><span>(</span><span>0</span><span>,</span> <span>T</span><span>)</span>
        <span>plt</span><span>.</span><span>grid</span><span>(</span><span>True</span><span>)</span>
        
        <span>frame_path</span> <span>=</span> <span>f</span><span>'</span><span>gif_frames/discrete_t_</span><span>{</span><span>t</span><span>:</span><span>.</span><span>2</span><span>f</span><span>}</span><span>.png</span><span>'</span>
        <span>plt</span><span>.</span><span>tight_layout</span><span>()</span>
        <span>plt</span><span>.</span><span>savefig</span><span>(</span><span>frame_path</span><span>)</span>
        <span>plt</span><span>.</span><span>close</span><span>()</span>
        <span>frames</span><span>.</span><span>append</span><span>(</span><span>imageio</span><span>.</span><span>imread</span><span>(</span><span>frame_path</span><span>))</span>

<span># Save the discrete random walk GIF with infinite looping
</span><span>imageio</span><span>.</span><span>imwrite</span><span>(</span><span>'</span><span>discrete_random_walk.gif</span><span>'</span><span>,</span> <span>frames</span><span>,</span> <span>duration</span><span>=</span><span>0.1</span><span>,</span> <span>loop</span><span>=</span><span>0</span><span>)</span>
</pre></td></tr></tbody></table></code></p></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[MongoDB acquires Voyage AI (102 pts)]]></title>
            <link>https://investors.mongodb.com/news-releases/news-release-details/mongodb-announces-acquisition-voyage-ai-enable-organizations</link>
            <guid>43160731</guid>
            <pubDate>Mon, 24 Feb 2025 15:37:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://investors.mongodb.com/news-releases/news-release-details/mongodb-announces-acquisition-voyage-ai-enable-organizations">https://investors.mongodb.com/news-releases/news-release-details/mongodb-announces-acquisition-voyage-ai-enable-organizations</a>, See on <a href="https://news.ycombinator.com/item?id=43160731">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>

<p><b><i><org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org> to integrate Voyage AI's industry-leading embedding and reranking models, delivering highly accurate and relevant information retrieval to power sophisticated AI use cases</i></b></p>
<p>,  /PRNewswire/ -- <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB, Inc.</org> (NASDAQ: MDB), the leading database for modern applications, today announced it has acquired Voyage AI, a pioneer in state-of-the-art embedding and reranking models that power next-generation AI applications. Integrating Voyage AI's technology with <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org> will enable organizations to easily build trustworthy, AI-powered applications by offering highly accurate and relevant information retrieval deeply integrated with operational data.</p>

    <p>
                        <a href="https://mma.prnewswire.com/media/384058/MongoDB_Logo.html" target="_blank" rel="nofollow">
&nbsp;<img src="https://mma.prnewswire.com/media/384058/MongoDB_Logo.jpg" title="MongoDB" alt="MongoDB">
&nbsp;</a>
                </p>
<p>AI-powered applications can address a broad range of complex use cases that traditional software cannot; however, because AI models are probabilistic, they can hallucinate––when a model generates false or misleading information. Inaccurate or low-quality results can create serious risks––especially in cases where the accuracy of information is critical, such as a hospital performing cancer screenings, a financial firm making autonomous investment decisions, or a law firm offering legal advice. Consequently, the risk of hallucinations has limited the use of AI applications for mission-critical use cases. These hallucinations typically occur when the AI model lacks sufficient understanding or context of data within an enterprise.</p>
<p>To address this challenge, companies need high-quality retrieval—a critical AI capability that ensures the most relevant information is extracted from their data with precision. Voyage AI's advanced embedding and reranking models enable applications to extract meaning from highly specialized and domain-specific text and unstructured data—ranging from legal and financial documents to images, code, and enterprise knowledge bases. Their models are trusted by leading AI innovators like Anthropic, LangChain, Harvey, and Replit. Notably, Voyage AI's embedding models are the highest-rated zero-shot models in the Hugging Face community. Voyage AI is a leader in AI-powered search and retrieval, backed by a team of world-class AI researchers with roots at <org>Stanford</org>, <org>MIT</org>, <org value="ACORN:6001201275" idsrc="xmltag.org">UC Berkeley</org>, and Princeton. Their expertise in cutting-edge embedding models and retrieval architectures will enhance <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB's</org> AI capabilities to solve the most challenging problems with building and scaling AI applications.</p>
<p>"AI has the promise to transform every business, but adoption is held back by the risk of hallucinations," said <person>Dev Ittycheria</person>, CEO of <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org>. "By bringing the power of advanced AI-powered search and retrieval to our highly flexible database, the combination of <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org> and Voyage AI enables enterprises to easily build trustworthy AI-powered applications that drive meaningful business impact. With this acquisition, <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org> is redefining what's required of the database for the AI era."</p>
<p>"For AI applications to reach their full potential, businesses must trust their outputs, so retrieval needs to be deeply integrated with operational data to be accurate and relevant," said Tengyu Ma, Founder of Voyage AI. "Joining MongoDB enables us to bring our cutting-edge AI retrieval technology to a broader audience and integrate it seamlessly into mission-critical applications. By combining our expertise in embeddings and reranking with <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB's</org> best-in-class database, we can help organizations build AI applications that deliver more accurate and reliable results at scale, empowering them to confidently apply AI to high-stakes use cases."</p>
<p>Voyage AI's embedding and reranking models will remain available through <u><a href="https://c212.net/c/link/?t=0&amp;l=en&amp;o=4368243-1&amp;h=744614746&amp;u=http%3A%2F%2Fvoyage.ai%2F&amp;a=voyage.ai" target="_blank" rel="nofollow">voyage.ai</a></u>, <location>AWS Marketplace</location>, and <location>Azure Marketplace</location>, with further <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org> integrations launching later this year.</p>
<p>For a deeper look at the technology behind Voyage AI and what this means for AI-powered applications, see the <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org> blog <a href="https://c212.net/c/link/?t=0&amp;l=en&amp;o=4368243-1&amp;h=3611869988&amp;u=https%3A%2F%2Fwww.mongodb.com%2Fblog%2Fpost%2Fredefining-database-ai-why-mongodb-acquired-voyage-ai&amp;a=here" target="_blank" rel="nofollow">here</a>.</p>
<p><b>About <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org></b></p>
<p>Headquartered in <location value="LU/us.ny.nyc" idsrc="xmltag.org">New York</location>, <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB's</org> mission is to empower innovators to create, transform, and disrupt industries with software and data. <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB's</org> unified, intelligent data platform was built to power the next generation of applications, and <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org> is the most widely available, globally distributed database on the market. With integrated capabilities for operational data, search, real-time analytics, and AI-powered retrieval, <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB</org> helps organizations everywhere move faster, innovate more efficiently, and simplify complex architectures. Millions of developers and more than 50,000 customers across almost every industry—including 70% of the Fortune 100—rely on&nbsp;MongoDB for their most important applications. To learn more, visit <a href="https://c212.net/c/link/?t=0&amp;l=en&amp;o=4368243-1&amp;h=952736343&amp;u=https%3A%2F%2Fwww.mongodb.com%2F&amp;a=mongodb.com" target="_blank" rel="nofollow">mongodb.com</a>.</p>
<p><b>Forward-looking Statements</b></p>
<p>This press release includes certain "forward-looking statements" within the meaning of Section 27A of the Securities Act of 1933, as amended, or the Securities Act, and Section 21E of the Securities Exchange Act of 1934, as amended, including statements concerning <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB's</org> acquisition of Voyage AI. These forward-looking statements include, but are not limited to, plans, objectives, expectations and intentions and other statements contained in this press release that are not historical facts and statements identified by words such as "anticipate," "believe," "continue," "could," "estimate," "expect," "intend," "may," "plan," "project," "will," "would" or the negative or plural of these words or similar expressions or variations. These forward-looking statements reflect our current views about our plans, intentions, expectations, strategies and prospects, which are based on the information currently available to us and on assumptions we have made. Although we believe that our plans, intentions, expectations, strategies and prospects as reflected in or suggested by those forward-looking statements are reasonable, we can give no assurance that the plans, intentions, expectations or strategies will be attained or achieved. Furthermore, actual results may differ materially from those described in the forward-looking statements and are subject to a variety of assumptions, uncertainties, risks and factors that are beyond our control including, without limitation: our customers renewing their subscriptions with us and expanding their usage of software and related services; global political changes; the effects of the ongoing military conflicts between <location value="LC/ru" idsrc="xmltag.org">Russia</location> and <location value="LC/ua" idsrc="xmltag.org">Ukraine</location> and <location value="LC/il" idsrc="xmltag.org">Israel</location> and <org value="ACORN:5020096112" idsrc="xmltag.org">Hamas</org> on our business and future operating results; economic downturns and/or the effects of rising interest rates, inflation and volatility in the global economy and financial markets on our business and future operating results; our potential failure to meet publicly announced guidance or other expectations about our business and future operating results; our limited operating history; our history of losses; failure of our platform to satisfy customer demands; the effects of increased competition; our investments in new products and our ability to introduce new features, services or enhancements; social, ethical and security issues relating to the use of new and evolving technologies, such as artificial intelligence, in our offerings or partnerships; our ability to effectively expand our sales and marketing organization; our ability to continue to build and maintain credibility with the developer community; our ability to add new customers or increase sales to our existing customers; our ability to maintain, protect, enforce and enhance our intellectual property; the effects of social, ethical and regulatory issues relating to the use of new and evolving technologies, such as artificial intelligence, in our offerings or partnerships; the growth and expansion of the market for database products and our ability to penetrate that market; our ability to integrate acquired businesses and technologies successfully or achieve the expected benefits of such acquisitions, including the acquisition of Voyage AI; the risk of any unexpected costs or expenses resulting from the acquisition of Voyage AI; the risk of any litigation relating to such acquisition; the risk that such acquisition and the announcement of it could have an adverse effect on our operating results and business generally; our ability to maintain the security of our software and adequately address privacy concerns; our ability to manage our growth effectively and successfully recruit and retain additional highly-qualified personnel; and the price volatility of our common stock. These and other risks and uncertainties are more fully described in our filings with the <org>Securities and Exchange Commission</org> ("<org>SEC</org>"), including under the caption "Risk Factors" in our Quarterly Report on Form 10-Q for the quarter ended <chron>October 31, 2024</chron>, filed with the <org>SEC</org> on <chron>December 10, 2024</chron>, and other filings and reports that we may file from time to time with the <org>SEC</org>. Except as required by law, we undertake no duty or obligation to update any forward-looking statements contained in this release as a result of new information, future events, changes in expectations or otherwise.</p>
<p><b>Press Contact:<br></b><u><a href="mailto:press@mongodb.com" target="_blank" rel="nofollow">press@mongodb.com</a></u></p>






<p id="PURL"><img title="Cision" width="12" height="12" alt="Cision" src="https://c212.net/c/img/favicon.png?sn=NY25220&amp;sd=2025-02-24" loading="lazy"> View original content to download multimedia:<a id="PRNURL" rel="nofollow" href="https://www.prnewswire.com/news-releases/mongodb-announces-acquisition-of-voyage-ai-to-enable-organizations-to-build-trustworthy-ai-applications-302382979.html" target="_blank">https://www.prnewswire.com/news-releases/mongodb-announces-acquisition-of-voyage-ai-to-enable-organizations-to-build-trustworthy-ai-applications-302382979.html</a></p>
<p>SOURCE  <org value="NASDAQ-NMS:MDB" idsrc="xmltag.org">MongoDB, Inc.</org></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Laravel Cloud (153 pts)]]></title>
            <link>https://app.laravel.cloud/</link>
            <guid>43160612</guid>
            <pubDate>Mon, 24 Feb 2025 15:26:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://app.laravel.cloud/">https://app.laravel.cloud/</a>, See on <a href="https://news.ycombinator.com/item?id=43160612">Hacker News</a></p>
<div id="readability-page-1" class="page"><div x-data="{ open: false }">
        

        

        <section x-ref="darkHero">
            

            <div>
                            <h2>
                                <span>
                                    The fastest way to deploy and
                                </span>
                                <br>
                                <span>
                                    scale Laravel applications
                                </span>
                            </h2>

                            <p>
                                <span>
                                    Deploy your Laravel applications without managing servers.
                                </span>
                                <br>
                                <span>
                                    One-click autoscaling, databases, caching, storage, and security.
                                </span>
                            </p>

                            
                        </div>

            <div>
                <p>Trusted by teams who want to ship fast</p>

                
            </div>
        </section>

        <div>
                <div>
                    <h2>
                        Speed, simplicity, and scalability without the headaches
                    </h2>

                    <p>
                        Built specifically for Laravel applications, Cloud eliminates configuration hassles and deployment complexity. So you can
                        focus on building, not configuring.
                    </p>
                </div>

                <div>
            <p>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M14.75 10C14.75 11.5188 13.5188 12.75 12 12.75C10.4812 12.75 9.25 11.5188 9.25 10C9.25 8.48122 10.4812 7.25 12 7.25C13.5188 7.25 14.75 8.48122 14.75 10ZM19.25 10C19.25 16.0755 12 21.3929 12 21.3929C12 21.3929 4.75 16.0755 4.75 10C4.75 5.99594 7.99594 2.75 12 2.75C16.0041 2.75 19.25 5.99594 19.25 10Z"></path>

            </svg>


                    US East (Ohio)
                </p>

            

            

            

            <div>
                    <p>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M3.75 6.95C3.75 5.82989 3.75 5.26984 3.96799 4.84202C4.15973 4.46569 4.46569 4.15973 4.84202 3.96799C5.26984 3.75 5.82989 3.75 6.95 3.75H17.05C18.1701 3.75 18.7302 3.75 19.158 3.96799C19.5343 4.15973 19.8403 4.46569 20.032 4.84202C20.25 5.26984 20.25 5.82989 20.25 6.95V17.05C20.25 18.1701 20.25 18.7302 20.032 19.158C19.8403 19.5343 19.5343 19.8403 19.158 20.032C18.7302 20.25 18.1701 20.25 17.05 20.25H6.95C5.82989 20.25 5.26984 20.25 4.84202 20.032C4.46569 19.8403 4.15973 19.5343 3.96799 19.158C3.75 18.7302 3.75 18.1701 3.75 17.05V6.95ZM9.75 3.75V20.25M3.75 9.75H20.25"></path>

            </svg>


                        Type
                    </p>
                    <p>Serverless Postrgres 17</p>
                </div>

            

            
        </div>

                <div>
                                <h3>
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M17.75 19.25L22.5 19.25C22.2294 15.6058 20.3551 12.75 17 12.75C16.5539 12.75 16.134 12.8005 15.7406 12.8966M11.25 7C11.25 8.79493 9.79492 10.25 8 10.25C6.20507 10.25 4.75 8.79493 4.75 7C4.75 5.20507 6.20507 3.75 8 3.75C9.79493 3.75 11.25 5.20508 11.25 7ZM19.75 7.5C19.75 9.01878 18.5188 10.25 17 10.25C15.4812 10.25 14.25 9.01878 14.25 7.5C14.25 5.98122 15.4812 4.75 17 4.75C18.5188 4.75 19.75 5.98122 19.75 7.5ZM1.75 20.25C2.05745 16.0451 4.18738 12.75 8 12.75C11.8126 12.75 13.9425 16.0451 14.25 20.25L1.75 20.25Z"></path>

            </svg>


                                    For individuals and teams
                                </h3>

                                <p>
                                    Great for indie devs, great for businesses. Invite your team members to collaborate on your app, and manage their
                                    permissions with ease.
                                </p>
                            </div>

                <div x-data="{
        active: 'logs',
        get activeButton() {
            return document.getElementById(`${this.active}-button`)
        },
        get indicatorTop() {
            return (
                this.activeButton.getBoundingClientRect()?.top -
                this.$refs.container.getBoundingClientRect()?.top
            )
        },
        get indicatorHeight() {
            return this.activeButton.getBoundingClientRect()?.height
        },
        get indicatorLeft() {
            return (
                this.activeButton.getBoundingClientRect()?.left -
                this.$refs.container.getBoundingClientRect()?.left +
                this.$refs.container.scrollLeft
            )
        },
        get indicatorWidth() {
            return this.activeButton.getBoundingClientRect()?.width
        },
    }">
    <div>
            <h2>Everything you need, included</h2>

            <p>Monitor and debug effortlessly with streamlined logs, commands, metrics, and resource navigation.</p>
        </div>

    <div>
            <div :class="active === 'logs' ? '!opacity-100' : '!opacity-0 pointer-events-none'">
            <div>
                    <p>
                        2025-02-24
                        <span>15:01:32.471</span>
                        UTC
                    </p>
                    <p>
                        <span>App\Jobs\UploadFile</span>
                        <span>...............</span>
                        <span>26.07ms</span>
                        DONE
                    </p>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:02:42.134</span>
                        UTC
                    </p>
                    <p>
                        <span>INFO: Sending daily digest</span>
                    </p>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:03:23.421</span>
                        UTC
                    </p>
                    <p>
                        <span>App\Jobs\UploadFile</span>
                        <span>....................</span>
                        RUNNING
                    </p>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:03:54.948</span>
                        UTC
                    </p>

                    <div>
                        <p>
                            <span>Error: failed to upload file to the server</span>
                        </p>

                        <div>
                            <p>
                                class:
                                <span>App\Exceptions\FileUploadException</span>
                            </p>
                            <p>
                                file:
                                <span>/var/www/html/routes/web.php: 22</span>
                            </p>

                            <p>
                                Show stack trace
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M8 10L12 14L16 10"></path>

            </svg>


                            </p>
                        </div>
                    </div>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:04:53.634</span>
                        UTC
                    </p>
                    <p>
                        <span>App\Jobs\UploadFile</span>
                        <span>....................</span>
                        RUNNING
                    </p>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:03:54.052</span>
                        UTC
                    </p>
                    <div>
                        <p>
                            <span>INFO: [php artisan queue:work database --quiet] starting service</span>
                        </p>

                        <div>
                            <p>
                                command:
                                <span>php artisan queue:work database --quiet</span>
                            </p>
                            <p>
                                source:
                                <span>cloud-init</span>
                            </p>
                            <p>
                                msg:
                                <span>starting service</span>
                            </p>
                            <p>
                                instance:
                                <span>3</span>
                            </p>
                            <p>
                                time:
                                <span>2025-02-24T15:03:54.948028493Z</span>
                            </p>
                            <p>
                                level:
                                <span>INFO</span>
                            </p>
                        </div>
                    </div>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:04:31.532</span>
                        UTC
                    </p>
                    <p>
                        <span>App\Jobs\UploadFile</span>
                        <span>....................</span>
                        RUNNING
                    </p>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:03:54.948</span>
                        UTC
                    </p>
                    <p>
                        <span>App\Jobs\UploadFile</span>
                        <span>....................</span>
                        RUNNING
                    </p>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:03:54.948</span>
                        UTC
                    </p>
                    <p>
                        <span>App\Jobs\UploadFile</span>
                        <span>....................</span>
                        RUNNING
                    </p>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:03:54.948</span>
                        UTC
                    </p>
                    <p>
                        <span>App\Jobs\UploadFile</span>
                        <span>....................</span>
                        RUNNING
                    </p>
                </div>

            <div>
                    <p>
                        2025-02-24
                        <span>15:03:54.948</span>
                        UTC
                    </p>
                    <p>
                        <span>App\Jobs\UploadFile</span>
                        <span>....................</span>
                        RUNNING
                    </p>
                </div>
        </div>
            <div :class="active === 'commands' ? '!opacity-100' : '!opacity-0 pointer-events-none'" x-cloak="">
            <div>
                        <p>
                            php artisan
                            <span>inspire</span>
                        </p>

                        <p><img src="https://dxr3k2zm7n01i.cloudfront.net/2fb799b7-7081-4d7d-a16d-7ed758dd4344/images/marketing/team/taylor.png" alt="Taylor Otwell">
                            <span>Taylor Otwell</span>
                            <span>·</span>
                            <span>Just now</span>
                        </p>
                    </div>

            <div>
                        <p>
                            php artisan
                            <span>config:show database</span>
                        </p>

                        <p><img src="https://dxr3k2zm7n01i.cloudfront.net/2fb799b7-7081-4d7d-a16d-7ed758dd4344/images/marketing/team/joe.png" alt="Joe Dixon">
                            <span>Joe Dixon</span>
                            <span>·</span>
                            <span>4 minutes ago</span>
                        </p>
                    </div>

            <div>
                        <p>
                            php artisan
                            <span>schedule:list</span>
                        </p>

                        <p><img src="https://dxr3k2zm7n01i.cloudfront.net/2fb799b7-7081-4d7d-a16d-7ed758dd4344/images/marketing/team/nuno.png" alt="Nuno Maduro">
                            <span>Nuno Maduro</span>
                            <span>·</span>
                            <span>8 minutes ago</span>
                        </p>
                    </div>

            <div>
                        <p>
                            php artisan
                            <span>migrate:status</span>
                        </p>

                        <p><img src="https://dxr3k2zm7n01i.cloudfront.net/2fb799b7-7081-4d7d-a16d-7ed758dd4344/images/marketing/team/taylor.png" alt="Taylor Otwell">
                            <span>Taylor Otwell</span>
                            <span>·</span>
                            <span>1 hour ago</span>
                        </p>
                    </div>

            <div>
                        <p>
                            php artisan
                            <span>about</span>
                        </p>

                        <p><img src="https://dxr3k2zm7n01i.cloudfront.net/2fb799b7-7081-4d7d-a16d-7ed758dd4344/images/marketing/team/taylor.png" alt="Taylor Otwell">
                            <span>Taylor Otwell</span>
                            <span>·</span>
                            <span>2 hours ago</span>
                        </p>
                    </div>

            <div>
                        <p>
                            php artisan
                            <span>inspire</span>
                        </p>

                        <p><img src="https://dxr3k2zm7n01i.cloudfront.net/2fb799b7-7081-4d7d-a16d-7ed758dd4344/images/marketing/team/taylor.png" alt="Taylor Otwell">
                            <span>Taylor Otwell</span>
                            <span>·</span>
                            <span>4 hours ago</span>
                        </p>
                    </div>
        </div>
            <div :class="active === 'metrics' ? '!opacity-100' : '!opacity-0 pointer-events-none'" x-cloak="">
        <div>
                <p>06:00 PM</p>
                <p>09:00 PM</p>
                <p>12:00 AM</p>
                <p>03:00 AM</p>
                <p>06:00 AM</p>
                <p>09:00 AM</p>
                <p>12:00 PM</p>
                <p>03:00 PM</p>
            </div>

        <div>
                <p>06:00 PM</p>
                <p>09:00 PM</p>
                <p>12:00 AM</p>
                <p>03:00 AM</p>
                <p>06:00 AM</p>
                <p>09:00 AM</p>
                <p>12:00 PM</p>
                <p>03:00 PM</p>
            </div>
    </div>
            
        </div>
</div>

                <div>
                    <div>
                        <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 19.75L12 12.25M12 12.25L14.5 14.75M12 12.25L9.5 14.75M15 19.75L18.125 19.75C20.4032 19.75 22.25 17.9032 22.25 15.625C22.25 13.3468 20.4032 11.5 18.125 11.5C18.0814 11.5 18.038 11.5007 17.9948 11.502C17.9983 11.4184 18 11.3344 18 11.25C18 7.93629 15.3137 5.25 12 5.25C9.3716 5.25 7.13793 6.94009 6.32647 9.2928C3.74507 9.62339 1.75 11.8287 1.75 14.5C1.75 17.3995 4.1005 19.75 7 19.75L9 19.75"></path>

            </svg>


                            Push to deploy
                        </h3>

                        <p>You can deploy manually, or automatically on every `git push`.</p>
                    </div>

                    <div>
                        <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 21.75C6.89137 21.75 2.75 17.6086 2.75 12.5C2.75 7.39137 6.89137 3.25 12 3.25M16.625 4.48749C17.4767 4.98018 18.2426 5.60477 18.8947 6.33333M16.625 20.5125C17.4767 20.0198 18.2426 19.3952 18.8947 18.6667M21.0751 10.7005C21.1898 11.2826 21.25 11.8843 21.25 12.5C21.25 13.1157 21.1898 13.7174 21.0751 14.2995M12.75 9L16.25 12.5L12.75 16M15.25 12.5H7.75"></path>

            </svg>


                            Deploy hooks
                        </h3>

                        <p>Connect your app to any external service of your choice.</p>
                    </div>

                    <div>
                        <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M7.75 5.25L7.75 3.25M16.25 5.25L16.25 3.25M9.25 13.275L10.9 14.925L14.75 11.075M3.75 5.25L20.25 5.25L20.25 20.75L3.75 20.75L3.75 5.25Z"></path>

            </svg>


                            Task scheduler
                        </h3>

                        <p>Need a job to run every hour, or every day? Just toggle it on.</p>
                    </div>

                    <div>
                        <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M1.29022 10.7389L2.982 6.28677C3.4272 5.17379 4.22857 4.28337 5.34159 3.79364L9.70459 1.87926C10.7731 1.38954 11.9751 1.38954 13.0882 1.79022L17.5847 3.482C18.6532 3.88268 19.5436 4.72857 20.0334 5.79707L21.9923 10.1601C22.482 11.2285 22.482 12.4306 22.0813 13.5436L20.345 18.0402C19.9443 19.1087 19.0984 19.9991 18.0299 20.4888L13.6669 22.4477C12.5984 22.9375 11.3964 22.9375 10.2834 22.5368L5.78678 20.8005C4.7183 20.3998 3.82789 19.5539 3.33816 18.4854L1.37926 14.1224C0.889535 13.0539 0.889535 11.8518 1.29022 10.7389ZM16.8782 4.73047L4.23438 6.9565L6.46041 19.6003L19.1042 17.3743L16.8782 4.73047Z" fill="currentColor" stroke="none"></path>

            </svg>


                            Octane
                        </h3>

                        <p>Run your app on Octane, Laravel's high‑performance application server.</p>
                    </div>
                </div>
            </div>

        <div>
                <div>
                    <div>
                        <h2>
                            Security and speed, automatically configured
                        </h2>

                        <p>
                            Cloud provides enterprise-grade security and performance out of the box. No need to configure firewalls, load balancers,
                            or caching layers - it's all done for you.
                        </p>
                    </div>

                    <div>
                        <div>
                            <div>
                                <h3>
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M9.39691 5.5C7.62463 6.2104 6.2104 7.62463 5.5 9.39691M14.6031 5.5C16.3754 6.2104 17.7896 7.62463 18.5 9.39691M18.5 14.6031C17.7896 16.3754 16.3754 17.7896 14.6031 18.5M5.5 14.6031C6.2104 16.3754 7.62463 17.7896 9.39691 18.5M9.75 16.75H14.25V21.25H9.75V16.75ZM9.75 2.75H14.25V7.25H9.75V2.75ZM21.25 9.75V14.25H16.75V9.75H21.25ZM7.25 9.75V14.25H2.75V9.75H7.25Z"></path>

            </svg>


                                    Edge network
                                </h3>

                                <p>
                                    Content caching at the edge ensure your application stays fast and reliable for users worldwide.
                                </p>
                            </div>

                            <div>
    <p><img src="https://dxr3k2zm7n01i.cloudfront.net/2fb799b7-7081-4d7d-a16d-7ed758dd4344/images/marketing/edge-network.png" alt="Edge network">
    </p>
</div>
                        </div>

                        <div>
                            <div>
                                <h3>
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 21.25C17.1086 21.25 21.25 17.1086 21.25 12C21.25 6.89137 17.1086 2.75 12 2.75M12 21.25C6.89137 21.25 2.75 17.1086 2.75 12C2.75 6.89137 6.89137 2.75 12 2.75M12 21.25C9.65279 21.25 7.75 17.1086 7.75 12C7.75 6.89137 9.65279 2.75 12 2.75M12 21.25C14.3472 21.25 16.25 17.1086 16.25 12C16.25 6.89137 14.3472 2.75 12 2.75M21 12H3"></path>

            </svg>


                                    Custom domains
                                </h3>

                                <p>
                                    Use your own domain name with your app, and get a free SSL certificate automatically. No need to configure
                                    TSL/SSL.
                                </p>
                            </div>

                            <div>
            <div>
                <p>
                    beep-staging-8g3pxa
                    <span>.laravel.cloud</span>
                </p>

                <div>
                    <p>
                        <svg viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M7 14C10.866 14 14 10.866 14 7C14 3.13401 10.866 0 7 0C3.13401 0 0 3.13401 0 7C0 10.866 3.13401 14 7 14ZM10.1865 4.1874C9.82121 3.8975 9.28276 3.94972 8.98386 4.30405L5.9191 7.93721L4.95897 7.00596C4.62521 6.68224 4.08408 6.68224 3.75032 7.00596C3.41656 7.32969 3.41656 7.85454 3.75032 8.17827L5.37822 9.75721C5.54896 9.92281 5.78396 10.0106 6.02512 9.99897C6.26629 9.9873 6.49111 9.87723 6.64401 9.69597L10.3068 5.35389C10.6057 4.99956 10.5518 4.47731 10.1865 4.1874Z"></path>
                        </svg>
                        Connected
                    </p>

                    <p>Redirect from www.</p>

                    
                </div>
            </div>

            

            <div>
                <p>beep.today</p>

                <div>
                    <p>
                        <svg viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M7 14C10.866 14 14 10.866 14 7C14 3.13401 10.866 0 7 0C3.13401 0 0 3.13401 0 7C0 10.866 3.13401 14 7 14ZM10.1865 4.1874C9.82121 3.8975 9.28276 3.94972 8.98386 4.30405L5.9191 7.93721L4.95897 7.00596C4.62521 6.68224 4.08408 6.68224 3.75032 7.00596C3.41656 7.32969 3.41656 7.85454 3.75032 8.17827L5.37822 9.75721C5.54896 9.92281 5.78396 10.0106 6.02512 9.99897C6.26629 9.9873 6.49111 9.87723 6.64401 9.69597L10.3068 5.35389C10.6057 4.99956 10.5518 4.47731 10.1865 4.1874Z"></path>
                        </svg>
                        Connected
                    </p>

                    <p>Redirect from www.</p>

                    
                </div>
            </div>

            <div>
                <p>*.beep.today</p>

                <div>
                    <p>
                        <svg viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M7 14C10.866 14 14 10.866 14 7C14 3.13401 10.866 0 7 0C3.13401 0 0 3.13401 0 7C0 10.866 3.13401 14 7 14ZM10.1865 4.1874C9.82121 3.8975 9.28276 3.94972 8.98386 4.30405L5.9191 7.93721L4.95897 7.00596C4.62521 6.68224 4.08408 6.68224 3.75032 7.00596C3.41656 7.32969 3.41656 7.85454 3.75032 8.17827L5.37822 9.75721C5.54896 9.92281 5.78396 10.0106 6.02512 9.99897C6.26629 9.9873 6.49111 9.87723 6.64401 9.69597L10.3068 5.35389C10.6057 4.99956 10.5518 4.47731 10.1865 4.1874Z"></path>
                        </svg>
                        Connected
                    </p>

                    <p>Redirect from www.</p>

                    
                </div>
            </div>

            <div>
                <p>getbeep.com</p>

                <div>
                    <p>
                        <svg viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M7 14C10.866 14 14 10.866 14 7C14 3.13401 10.866 0 7 0C3.13401 0 0 3.13401 0 7C0 10.866 3.13401 14 7 14ZM10.1865 4.1874C9.82121 3.8975 9.28276 3.94972 8.98386 4.30405L5.9191 7.93721L4.95897 7.00596C4.62521 6.68224 4.08408 6.68224 3.75032 7.00596C3.41656 7.32969 3.41656 7.85454 3.75032 8.17827L5.37822 9.75721C5.54896 9.92281 5.78396 10.0106 6.02512 9.99897C6.26629 9.9873 6.49111 9.87723 6.64401 9.69597L10.3068 5.35389C10.6057 4.99956 10.5518 4.47731 10.1865 4.1874Z"></path>
                        </svg>
                        Connected
                    </p>

                    <p>Redirect from www.</p>

                    
                </div>
            </div>
        </div>
                        </div>
                    </div>

                    <div>
                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M9.25 11.5L11 13.25L14.75 9.5M12 2.75L20.25 5.5V11.9123C20.25 16.8848 16 19.25 12 21.4079C8 19.25 3.75 16.8848 3.75 11.9123V5.5L12 2.75Z"></path>

            </svg>


                                DDoS protection
                            </h3>

                            <p>Attacks are automatically detected and mitigated.</p>
                        </div>

                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M20.25 8.75H13.25V1.75L3.75 15.0473H10.75V22.25L20.25 8.75Z"></path>

            </svg>


                                Content caching
                            </h3>

                            <p>Static assets are cached at the edge, so your app stays fast.</p>
                        </div>

                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M7.75 15.75L7.75 22.75L12 20.75L16.25 22.75L16.25 15.75M19.25 9.5C19.25 13.5041 16.0041 16.75 12 16.75C7.99593 16.75 4.75 13.5041 4.75 9.5C4.75 5.49594 7.99594 2.25 12 2.25C16.0041 2.25 19.25 5.49594 19.25 9.5Z"></path>

            </svg>


                                SSL and TLS certificates
                            </h3>

                            <p>Cloud automatically provisions and renews SSL certificates for your app.</p>
                        </div>

                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M3.75 9.25V3.75M3.75 3.75H9.25M3.75 3.75L12 12M14.75 3.75H20.25M20.25 3.75V9.25M20.25 3.75L12 12M12 12V20.25"></path>

            </svg>


                                Load balancing
                            </h3>

                            <p>Cloud automatically balances traffic as your apps scale.</p>
                        </div>
                    </div>
                </div>

                <div>
                    <div>
                        <h2>Scale up and down in your sleep</h2>

                        <p>
                            Cloud scales your app automatically, so you can handle any amount of traffic without breaking a sweat, or the bank.
                        </p>
                    </div>

                    <div>
                        <div>
                            <div>
                                <h3>
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12.25 19.25L12.25 13.75C12.25 12.6454 11.3546 11.75 10.25 11.75L2.75 11.75M12.25 19.25L4.75 19.25C3.6454 19.25 2.75 18.3546 2.75 17.25L2.75 11.75M12.25 19.25L19.25 19.25C20.3546 19.25 21.25 18.3546 21.25 17.25L21.25 6.75C21.25 5.6454 20.3546 4.75 19.25 4.75L4.75 4.75C3.6454 4.75 2.75 5.6454 2.75 6.75L2.75 11.75"></path>

            </svg>


                                    Autoscaling
                                </h3>

                                <p>
                                    Configure your compute clusters and Cloud automatically scales horizontally within your predefined limits. You
                                    only pay for what you use.
                                </p>
                            </div>

                            <div>
        <div>
            <div>
                    <p>Unlimited</p>
                    <p>Automatically scale replicas to handle any level of demand.</p>
                </div>

            <p><span>Recommended</span>
        </p></div>

        <div>
                        <p>Custom scale range</p>
                        <p>Set minimum and maximum replica counts.</p>
                    </div>

        <div>
                    <p>No autoscaling</p>
                    <p>Run on a single replica without autoscaling.</p>
                </div>
    </div>
                        </div>

                        <div>
                                <h3>
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M15.5 3.4351C14.4204 2.99344 13.2386 2.75 12 2.75C6.89137 2.75 2.75 6.89137 2.75 12C2.75 17.1086 6.89137 21.25 12 21.25C17.1086 21.25 21.25 17.1086 21.25 12C21.25 11.1337 21.1309 10.2952 20.9082 9.5M12 7.75V12L14.5 14.5M18.75 1.75H22.25L18.75 6.25H22.25"></path>

            </svg>


                                    Hibernation
                                </h3>

                                <p>
                                    Hibernation kicks in to save costs when requests are low. Your app will wake up automatically when traffic
                                    returns.
                                </p>
                            </div>
                    </div>

                    <div>
                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 6.75V8.5M12 8.5C10.067 8.5 8.5 10.067 8.5 12C8.5 13.933 10.067 15.5 12 15.5M12 8.5C13.1155 8.5 14.1091 9.02183 14.75 9.8347M12 15.5V17.25M12 15.5C13.1155 15.5 14.1091 14.9782 14.75 14.1653M21.25 12C21.25 17.1086 17.1086 21.25 12 21.25C6.89137 21.25 2.75 17.1086 2.75 12C2.75 6.89137 6.89137 2.75 12 2.75C17.1086 2.75 21.25 6.89137 21.25 12Z"></path>

            </svg>


                                Cost optimized options
                            </h3>

                            <p>Keep your costs low with hibernating apps and databases and lightweight compute sizes.</p>
                        </div>

                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M10 10.5L5.5 6M12 5.75L12 3.25C17.1086 3.25 21.25 7.39137 21.25 12.5C21.25 17.6086 17.1086 21.75 12 21.75C6.89136 21.75 2.75 17.6086 2.75 12.5C2.75 11.0672 3.07574 9.71057 3.65722 8.5M14.75 12.5C14.75 14.0188 13.5188 15.25 12 15.25C10.4812 15.25 9.25 14.0188 9.25 12.5C9.25 10.9812 10.4812 9.75 12 9.75C13.5188 9.75 14.75 10.9812 14.75 12.5Z"></path>

            </svg>


                                Performance optimized options
                            </h3>

                            <p>Need more power? Upgrade to larger compute sizes designed for heavy utilization.</p>
                        </div>

                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M14.2452 3.52438L13.0031 8.49995L9.0081 9.50495L8.0031 11.4999L3.7503 8.31174M14.2452 3.52438C13.5264 3.34514 12.7743 3.25 12 3.25C8.39887 3.25 5.27837 5.30785 3.7503 8.31174M14.2452 3.52438C18.2689 4.52764 21.25 8.16569 21.25 12.5C21.25 17.6086 17.1086 21.75 12 21.75C6.89136 21.75 2.75 17.6086 2.75 12.5C2.75 10.9925 3.11062 9.56923 3.7503 8.31174M15.0029 17.5L16.0029 15.5L13.0549 13.519L11.1119 13.395L10.0029 14.5L12.0029 17.5L15.0029 17.5Z"></path>

            </svg>


                                Multiple regions
                            </h3>

                            <p>Choose a region close to your users to reduce latency and improve reliability.</p>
                        </div>
                    </div>
                </div>

                <div>
                    <div>
                        <h2>
                            Connect it all with one-click resources
                        </h2>

                        <p>
                            Essential services, zero complexity. Launch production-ready databases, caches, and object storage with a single click.
                        </p>
                    </div>

                    <div>
                        <div>
                            <div>
                                <h3>
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M21.25 8.25V4.75H2.75V19.25H10.25M22.25 16C19.5 16 18 17.5 18 20.25C18 17.5 16.5 16 13.75 16C16.5 16 18 14.5 18 11.75C18 14.5 19.5 16 22.25 16Z"></path>
            <path d="M6 8H6.01M9 8H9.01M12 8H12.01" stroke-width="2"></path>

            </svg>


                                    Fully managed resources in seconds
                                </h3>

                                <p>
                                    Cloud manages your databases, caches, and object storage for you. No need to worry about backups, scaling, or
                                    maintenance.
                                </p>
                            </div>

                            <div>
                                <div>
                    <p>Add object storage</p>
                    <p>Store images, videos, and more</p>
                </div>

<div>
        <div>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M3.75 6.95C3.75 5.82989 3.75 5.26984 3.96799 4.84202C4.15973 4.46569 4.46569 4.15973 4.84202 3.96799C5.26984 3.75 5.82989 3.75 6.95 3.75H17.05C18.1701 3.75 18.7302 3.75 19.158 3.96799C19.5343 4.15973 19.8403 4.46569 20.032 4.84202C20.25 5.26984 20.25 5.82989 20.25 6.95V17.05C20.25 18.1701 20.25 18.7302 20.032 19.158C19.8403 19.5343 19.5343 19.8403 19.158 20.032C18.7302 20.25 18.1701 20.25 17.05 20.25H6.95C5.82989 20.25 5.26984 20.25 4.84202 20.032C4.46569 19.8403 4.15973 19.5343 3.96799 19.158C3.75 18.7302 3.75 18.1701 3.75 17.05V6.95Z"></path>
            <path d="M14.2266 7.16291C14.524 6.27579 13.4007 5.57824 12.7514 6.28729L7.73231 11.7682C7.21953 12.3282 7.60932 13.2428 8.37725 13.2428H10.7922C10.8743 13.2428 10.9396 13.3251 10.9121 13.412L9.82717 16.8522C9.54697 17.7407 10.6725 18.418 11.3123 17.7072L16.2732 12.1964C16.7789 11.6347 16.3876 10.7274 15.6232 10.7274H13.2083C13.1253 10.7274 13.0598 10.6433 13.0891 10.5559L14.2266 7.16291Z" fill="currentColor" stroke="none"></path>

            </svg>


                <div>
                    <p>Add cache</p>
                    <p>Compatible with the Redis™ API</p>
                </div>
            </div>

        <div>
                    <div>
                        <p>
                            beep_cache
                            <span>
                                Laravel KV Store
                            </span>
                        </p>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M10 8L14 12L10 16"></path>

            </svg>


                    </div>

                    <div>
                        <p>
                            latterly_cache
                            <span>
                                Laravel KV Store
                            </span>
                        </p>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M10 8L14 12L10 16"></path>

            </svg>


                    </div>
                </div>
    </div>
                            </div>
                        </div>

                        <div>
                            <div>
                                <h3>
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M13.25 5.25L2.75 5.25L2.75 19.75L13.25 19.75M16.2454 5.25L21.2454 5.25L21.2454 19.75L16.2454 19.75M16.2454 5.25L16.2454 3M16.2454 5.25L16.2454 19.75M16.2454 19.75L16.2454 22M8.5 10L11 12.5L8.5 15"></path>

            </svg>


                                    Injected environment variables
                                </h3>

                                <p>
                                    Cloud automatically injects the right Laravel environment variables and handles all the details for you.
                                </p>
                            </div>

                            <div>
        <div>
            <p>Environment variables</p>
            <p>
                Add your environment variables in the format&nbsp;
                <code>KEY=value</code>
                , each on a new line.
            </p>
        </div>

        <p>
            <svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M6.42152 2.17175C7.13215 0.976605 8.86252 0.976602 9.57315 2.17175L14.5625 10.5629C15.2891 11.7849 14.4084 13.3332 12.9867 13.3332H3.00802C1.58624 13.3332 0.705565 11.7849 1.4322 10.5629L6.42152 2.17175ZM7.9974 5.33317C8.27354 5.33317 8.4974 5.55703 8.4974 5.83317V8.49984C8.4974 8.77598 8.27354 8.99984 7.9974 8.99984C7.72125 8.99984 7.4974 8.77598 7.4974 8.49984V5.83317C7.4974 5.55703 7.72125 5.33317 7.9974 5.33317ZM8.66406 10.3332C8.66406 10.7014 8.36559 10.9998 7.9974 10.9998C7.62921 10.9998 7.33073 10.7014 7.33073 10.3332C7.33073 9.96498 7.62921 9.6665 7.9974 9.6665C8.36559 9.6665 8.66406 9.96498 8.66406 10.3332Z"></path>
            </svg>
            You are overwriting 1 injected variable.
        </p>

        <div>
                <p>
                    <span>APP_ENV</span>
                    =production
                </p>

                <p>
                    <span>APP_KEY</span>
                    =base64:xIWs6t29ShaD+H7pD56L1E1VRgHnfK2BVzbvuw+EPws=
                </p>

                <p>
                    <span>APP_DEBUG</span>
                    =true
                </p>
            </div>
    </div>
                        </div>
                    </div>

                    <div>
                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M23 23.5C23 23.5 20.1823 21.1327 18.303 19.7122C18.774 19.2389 22.5314 19.2387 22.5314 19.2387C21.5918 18.1339 18.7728 15.9242 16.4224 15.4505C15.484 11.6627 11.6301 3.13948 5.6163 3.13948C4.67664 2.35032 2.51542 0.961383 1.38783 1.71898C0.260237 2.47658 1.85766 4.24445 2.79732 5.03368C2.95434 6.29635 3.64426 9.01108 5.14772 9.76868C4.36467 12.294 3.45633 17.3447 6.08738 17.3447C6.4006 16.8712 7.02704 15.6401 7.02704 14.5037C7.81009 16.2397 9.75205 19.7118 11.2555 19.712"></path>

            </svg>


                                MySQL
                            </h3>

                            <p>Launch a MySQL database with a single click.</p>
                        </div>

                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 22.5H13.5C13.5 17 14 14 18 10.5C18 7.66667 16.8 2 12 2M15.5 3.5L20 5L22 12C21.6667 13.1667 19.8 15.3 15 14.5C17 17.5 19.5 17 20 17M12 22.5H10.5C10.5 17 10 14 6 10.5C6 7.66667 7.2 2 12 2M8.5 3.5L4 5L2 12C2.33333 13.1667 4.2 15.3 9 14.5C7 17.5 4.5 17 4 17"></path>

            </svg>


                                Serverless Postgres
                            </h3>

                            <p>Unleash the power of Postgres without managing servers.</p>
                        </div>

                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M3.75 6.95C3.75 5.82989 3.75 5.26984 3.96799 4.84202C4.15973 4.46569 4.46569 4.15973 4.84202 3.96799C5.26984 3.75 5.82989 3.75 6.95 3.75H17.05C18.1701 3.75 18.7302 3.75 19.158 3.96799C19.5343 4.15973 19.8403 4.46569 20.032 4.84202C20.25 5.26984 20.25 5.82989 20.25 6.95V17.05C20.25 18.1701 20.25 18.7302 20.032 19.158C19.8403 19.5343 19.5343 19.8403 19.158 20.032C18.7302 20.25 18.1701 20.25 17.05 20.25H6.95C5.82989 20.25 5.26984 20.25 4.84202 20.032C4.46569 19.8403 4.15973 19.5343 3.96799 19.158C3.75 18.7302 3.75 18.1701 3.75 17.05V6.95Z"></path>
            <path d="M14.2266 7.16291C14.524 6.27579 13.4007 5.57824 12.7514 6.28729L7.73231 11.7682C7.21953 12.3282 7.60932 13.2428 8.37725 13.2428H10.7922C10.8743 13.2428 10.9396 13.3251 10.9121 13.412L9.82717 16.8522C9.54697 17.7407 10.6725 18.418 11.3123 17.7072L16.2732 12.1964C16.7789 11.6347 16.3876 10.7274 15.6232 10.7274H13.2083C13.1253 10.7274 13.0598 10.6433 13.0891 10.5559L14.2266 7.16291Z" fill="currentColor" stroke="none"></path>

            </svg>


                                Key-value stores
                            </h3>

                            <p>Redis API-compatible key-value store for caching and session storage.</p>
                        </div>

                        <div>
                            <h3>
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M20.25 7.75V17.05C20.25 18.1701 20.25 18.7302 20.032 19.158C19.8403 19.5343 19.5343 19.8403 19.158 20.032C18.7302 20.25 18.1701 20.25 17.05 20.25H6.95C5.8299 20.25 5.26984 20.25 4.84202 20.032C4.46569 19.8403 4.15973 19.5343 3.96799 19.158C3.75 18.7302 3.75 18.1701 3.75 17.05V7.75M2.75 3.75H21.25V7.75H2.75V3.75ZM10 11.75H14"></path>

            </svg>


                                Object storage
                            </h3>

                            <p>S3-compatible object storage for your user-uploaded assets.</p>
                        </div>
                    </div>
                </div>
            </div>

        <div>
                    <h2>Trusted by developers, startups, and enterprises</h2>

                    <p>Join thousands of developers and companies around the world</p>
                </div>

        <div>
        <h2>Frequently asked questions</h2>

        <div x-data="{ open: null }">
            
            <div x-show="expanded" x-collapse.duration.100ms="" x-cloak="" x-data="{
        id: $id('faq-question'),
        get expanded() {
            return this.open === this.id
        },
        set expanded(value) {
            this.open = value ? this.id : null
        },
    }" role="region" question="What databases does Laravel Cloud support?">
        <p>
                    Laravel Cloud offers serverless Postgres databases that auto-scale with your needs. MySQL support is coming soon.
                    You can also bring your own existing database by configuring your connection credentials. <a href="https://app.laravel.cloud/docs/resources/databases" target="_blank">Read more in our docs</a>.
                </p>
    </div>
            <div x-show="expanded" x-collapse.duration.100ms="" x-cloak="" x-data="{
        id: $id('faq-question'),
        get expanded() {
            return this.open === this.id
        },
        set expanded(value) {
            this.open = value ? this.id : null
        },
    }" role="region" question="What regions are you currently in?">
        <p>Laravel Cloud is available in US East (Ohio), EU West (London), EU Central (Frankfurt), and Asia Pacific (Singapore). We're actively expanding our regional availability.</p>
    </div>
            <div x-show="expanded" x-collapse.duration.100ms="" x-cloak="" x-data="{
        id: $id('faq-question'),
        get expanded() {
            return this.open === this.id
        },
        set expanded(value) {
            this.open = value ? this.id : null
        },
    }" role="region" question="Is there a free tier?">
        <p>
                    Our Sandbox plan has no monthly fee - you only pay for what you use. Thanks to auto-hibernation, your application automatically
                    scales down to zero when not in use, meaning you don't pay for compute time during idle periods. Each plan includes generous bandwidth
                    allowances. View detailed pricing <a href="https://app.laravel.cloud/docs/pricing" target="_blank">here</a>.
                </p>
    </div>
            <div x-show="expanded" x-collapse.duration.100ms="" x-cloak="" x-data="{
        id: $id('faq-question'),
        get expanded() {
            return this.open === this.id
        },
        set expanded(value) {
            this.open = value ? this.id : null
        },
    }" role="region" question="Is Laravel Cloud serverless?">
        <p>
                    No. Laravel Cloud runs on dedicated AWS EC2 servers, providing predictable performance and costs.
                </p>
    </div>
            <div x-show="expanded" x-collapse.duration.100ms="" x-cloak="" x-data="{
        id: $id('faq-question'),
        get expanded() {
            return this.open === this.id
        },
        set expanded(value) {
            this.open = value ? this.id : null
        },
    }" role="region" question="How does autoscaling work on Laravel Cloud?">
        <p>
                    You set your maximum number of application replicas, and Cloud automatically scales within those limits based on CPU usage.
                    Unlike serverless platforms, you have complete control over your scaling limits, and you only pay for replicas when
                    they're actually running - giving you both flexibility and cost predictability.
                </p>
    </div>
            <div x-show="expanded" x-collapse.duration.100ms="" x-cloak="" x-data="{
        id: $id('faq-question'),
        get expanded() {
            return this.open === this.id
        },
        set expanded(value) {
            this.open = value ? this.id : null
        },
    }" role="region" question="How is Cloud different from Forge?">
        <p>
                    Cloud is a fully-managed platform that handles infrastructure, scaling, and maintenance for you, while Forge gives you direct
                    server control and management tools. See our <a href="https://app.laravel.cloud/cloud-vs-forge">comparison guide</a> for more information.
                </p>
    </div>
            <div x-show="expanded" x-collapse.duration.100ms="" x-cloak="" x-data="{
        id: $id('faq-question'),
        get expanded() {
            return this.open === this.id
        },
        set expanded(value) {
            this.open = value ? this.id : null
        },
    }" role="region" question="How is Cloud different from Vapor?">
        <p>
                    Cloud provides traditional server-based hosting with easy scaling, while Vapor offers serverless Laravel hosting on AWS Lambda and requires AWS Management Console experience.
                    See our <a href="https://app.laravel.cloud/cloud-vs-vapor">comparison guide</a> for more information.
                </p>
    </div>
            <div x-show="expanded" x-collapse.duration.100ms="" x-cloak="" x-data="{
        id: $id('faq-question'),
        get expanded() {
            return this.open === this.id
        },
        set expanded(value) {
            this.open = value ? this.id : null
        },
    }" role="region" question="Can I set spending caps?">
        <p>
                    While Laravel Cloud doesn't have explicit spending caps, your costs are predictable because you have the option to set compute and resource limits upfront.
                    Spending alerts are also coming soon, which will allow you to get notified when your total spend reaches a threshold you set.
                </p>
    </div>
            
        </div>
    </div>

        <div>
            <h2>Ready to ship?</h2>
            <p>Let’s build the incredible together, with Laravel</p>
            
        </div>
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[ARPA is funding cheap community-owned gigabit fiber to neglected neighborhoods (144 pts)]]></title>
            <link>https://www.techdirt.com/2025/02/24/arpa-is-quietly-funding-cheap-50-65-a-month-community-owned-gigabit-fiber-access-to-long-neglected-neighborhoods/</link>
            <guid>43160196</guid>
            <pubDate>Mon, 24 Feb 2025 14:48:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.techdirt.com/2025/02/24/arpa-is-quietly-funding-cheap-50-65-a-month-community-owned-gigabit-fiber-access-to-long-neglected-neighborhoods/">https://www.techdirt.com/2025/02/24/arpa-is-quietly-funding-cheap-50-65-a-month-community-owned-gigabit-fiber-access-to-long-neglected-neighborhoods/</a>, See on <a href="https://news.ycombinator.com/item?id=43160196">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="storywrap-468558">

				


				


				<h3>from the <i>build-it-and-they-will-come</i> dept</h3>
				


				<p>The 2021 American Rescue Plan Act (ARPA) continues to quietly help fund a number of extremely popular community-owned, open access fiber deployments that are challenging entrenched U.S. monopoly power, and driving super cheap, community-owned and operated fiber networks into long neglected towns.</p>
<p>New York State, for example, just leveraged ARPA funds to <a href="https://www.governor.ny.gov/news/governor-hochul-announces-26-million-connectall-investment-expand-affordable-broadband-access">give a $26 million grant to Oswego County</a>. Oswego County is going to use that money to build an open access fiber network. That means multiple ISPs can come in and compete over shared infrastructure owned by the county. Our <a href="https://copia.is/library/just-a-click-away/">Copia report</a> showcased how this model can help disrupt monopoly power and lower broadband costs for users.</p>
<p>The anchor tenant on Oswego County’s new network, Empire Access, will provide locals with 500 Megabit per second (Mbps) service for $50 a month; symmetrical 1 gigabit per second (Gbps) service for $65 a month; and symmetrical 2 Gbps service for $100 a month.</p>
<p>That’s not great news for regional New York State monopolies Charter and Verizon, who’ve grown fat and comfortable charging much higher prices for much slower access. The lack of real competition between the two giants for decades has resulted in high prices, slow speeds, spotty coverage, inconsistent upgrades, repair delays, and substandard customer service.</p>
<p>Charter, you might recall, was <a href="https://www.techdirt.com/2019/04/29/charter-spectrum-wont-get-kicked-out-new-york-state-after-isp-promises-to-suck-less/">almost kicked out the state</a> for lying to regulators about its merger with Time Warner Cable. Verizon similarly has long been under fire for <a href="https://www.techdirt.com/2015/06/16/verizon-says-claims-abandoning-dsl-customers-pure-nonsense-as-company-clearly-busy-abandoning-dsl-customers/">cheaping out on uniform fiber upgrades</a> despite untold millions in taxpayer subsidies. </p>
<p>Meanwhile in Minnesota, Carver County officials say they’ve also been leveraging ARPA funds to deploy affordable gigabit fiber to <a href="https://communitynets.org/content/carver-county-minnesotas-carverlink-closes-100-gigabit-fiber-coverage">every county resident</a>. Their model is slightly different: The city has used grant money to build dark fiber, which they then lease to a company called MetroNet as part of a public-private partnership. MetroNet is offering locals gigabit fiber for prices way less than regional monopolies:</p>
<blockquote>
<p><em>“Metronet currently&nbsp;<a href="https://gometronet.com/internet/">offers four tiers of service</a>&nbsp;with varying promotions, which currently include symmetrical 150 megabit per second (Mbps) fiber for $35 a month; symmetrical 500 Mbps for $45 a month; symmetrical <strong>1 gigabit per second (Gbps) for $50 a month</strong>; symmetrical 2 Gbps for $70 a month; and symmetrical 5 Gbps for $110 a month.”</em></p>
</blockquote>
<p>Again, this kind of stuff doesn’t get much attention from a press that declares infrastructure <strong>too boring</strong> to cover. But this kind of stuff is quietly transformative all the same. It’s also not clear to me why Senate Democrats aren’t competently messaging the impact ARPA funds are having on affordable broadband. Or local community centers, local road improvements, or affordable housing. </p>
<p>Many states try to “address the digital divide” by throwing <a href="https://www.techdirt.com/2024/05/20/pennsylvania-once-again-shows-what-broadband-corruption-looks-like-doles-out-millions-in-dodgy-non-transparent-grants-to-comcast-verizon-in-favored-political-districts/">more and more money into the laps of giant regional telecom monopolies</a> with a long history of subsidy abuse. Many other states are trying to “fix broadband access” by <a href="https://www.techdirt.com/2024/12/09/trump-2-0-to-slather-elon-musks-starlink-with-billions-in-taxpayer-subsidies-it-doesnt-deserve/">throwing money at Elon Musk’s Starlink</a>, ignoring the LEO satellite platform’s capacity constraints, high prices, erratic leadership, and <a href="https://www.space.com/megaconstellations-threat-to-ozone-layer-recovery">problematic environmental impact</a>.</p>
<p>But some states (most notably Vermont, Maine, California, and New York) are trying a different tack: they’re investing heavily in community-owned open access infrastructure, and treating broadband more like an essential utility (where maximizing shareholder profits isn’t the top priority). They’re leveraging an historic infusion of federal funds to put local communities in charge of their own connectivity fate.</p>
<p>Entrenched telecom monopolies, which have worked tirelessly over decades to dismantle broadband competition and state and federal oversight, have worked tirelessly to demonize and undermine community broadband access. But in a decade it should be interesting to see what the data says about the differing approaches. </p>
<p>Keep in mind that states are also poised to receive more than $42.5 <strong>billion</strong> in additional broadband grants courtesy of the 2021 infrastructure bill. That program has significantly more restrictions than ARPA, and there’s every indication that the Trump administration will do its best to <a href="https://www.techdirt.com/2025/02/06/trumps-ntia-pick-prepares-to-redirect-42-5-billion-in-infrastructure-bill-broadband-grants-to-trump-cronies/">redirect as much of that money as possible</a> away from community owned endeavors and toward companies that kiss Trump’s ass. </p>

				
<p>

	Filed Under: <a href="https://www.techdirt.com/tag/arpa/" rel="tag">arpa</a>, <a href="https://www.techdirt.com/tag/broadband/" rel="tag">broadband</a>, <a href="https://www.techdirt.com/tag/fiber/" rel="tag">fiber</a>, <a href="https://www.techdirt.com/tag/gigabit/" rel="tag">gigabit</a>, <a href="https://www.techdirt.com/tag/grants/" rel="tag">grants</a>, <a href="https://www.techdirt.com/tag/high-speed-internet/" rel="tag">high speed internet</a>, <a href="https://www.techdirt.com/tag/monopoly/" rel="tag">monopoly</a>, <a href="https://www.techdirt.com/tag/municipal-broadband/" rel="tag">municipal broadband</a>, <a href="https://www.techdirt.com/tag/open-access/" rel="tag">open access</a>
	<br>

	Companies: <a href="https://www.techdirt.com/company/empire-access/" rel="category tag">empire access</a>, <a href="https://www.techdirt.com/company/metronet/" rel="category tag">metronet</a>
</p>

			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA['Impossible-to-Hack' Security Turns Out to Be No Security at All (148 pts)]]></title>
            <link>https://jltee.substack.com/p/new-zealand-companys-impossible-to-hack-security</link>
            <guid>43159544</guid>
            <pubDate>Mon, 24 Feb 2025 13:51:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://jltee.substack.com/p/new-zealand-companys-impossible-to-hack-security">https://jltee.substack.com/p/new-zealand-companys-impossible-to-hack-security</a>, See on <a href="https://news.ycombinator.com/item?id=43159544">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto"><div><p>“Beautifully Designed, Easy to Use</p><p><span>Comprehensive Software Solution for implementation &amp; maintenance of ISO Standards and other Compliance Requirements such as H&amp;S, Quality, Environmental, Food Safety, Information Security and many more.” according to their </span><a href="https://teammateapp.com/" rel="nofollow ugc noopener">website</a><span>.</span></p></div><p><span>For those curious about what the company offers, you can check </span><a href="https://teammateapp.com/features" rel="nofollow ugc noopener">https://teammateapp.com/features</a><span>, a special mention to the feature below:</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png" width="342" height="101" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:101,&quot;width&quot;:342,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:32298,&quot;alt&quot;:&quot;One of the features offered by Teammate App listed on their website that reads: Risk Management, Manage your safety data from a single, secure, and accessible system.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:false,&quot;topImage&quot;:true,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png&quot;,&quot;isProcessing&quot;:false}" alt="One of the features offered by Teammate App listed on their website that reads: Risk Management, Manage your safety data from a single, secure, and accessible system." title="One of the features offered by Teammate App listed on their website that reads: Risk Management, Manage your safety data from a single, secure, and accessible system." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F030901ee-a119-40d5-87e4-eb17b2a1cfa3_342x101.png 1456w" sizes="100vw" fetchpriority="high"></picture></div></a><figcaption>Teammate App offer for Risk Management that includes data being secure.</figcaption></figure></div><p><span>Another good page to understand the claimed security of Teammate App can be read here: </span><a href="https://teammateapp.com/security-policy" rel="nofollow ugc noopener">https://teammateapp.com/security-policy</a></p><p>On February 11th 2025 I was looking at some servers running exposed databases publicly and noticed a server with almost 200 tables exposed that contained some interesting names.</p><p><span>After a quick look I wasn’t exactly sure who was responsible for the server I was looking at and I was busy with other things so I flagged it to check later and a couple days later I took a better look and through DNS records and data on the exposed tables I confirmed it belonged to </span><a href="https://teammateapp.com/" rel="nofollow ugc noopener">https://teammateapp.com</a><span> and it was one of their live databases.</span></p><p>I checked my logs to see when was the first time I had this flagged as exposed and the first result was from December 3rd 2024.</p><p><span>On February 15th I sent an email to multiple emails from the CEO that were exposed on the database, his personal Gmail and a company email for </span><a href="https://kaizenconsulting.co.nz/" rel="nofollow ugc noopener">https://kaizenconsulting.co.nz</a><span> which according to public records he also owns and had a lot of data exposed here. I also added a couple of Teammate App emails listed on their website.</span></p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png" width="1053" height="861" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/a73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:861,&quot;width&quot;:1053,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:191517,&quot;alt&quot;:&quot;Redacted screenshot of the first email sent to Teammate App alerting them of their security issue, the email mentions among other things mentioned below, some information I saw exposed on the server.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png&quot;,&quot;isProcessing&quot;:false}" alt="Redacted screenshot of the first email sent to Teammate App alerting them of their security issue, the email mentions among other things mentioned below, some information I saw exposed on the server." title="Redacted screenshot of the first email sent to Teammate App alerting them of their security issue, the email mentions among other things mentioned below, some information I saw exposed on the server." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa73147c3-7b90-4a7a-b730-9e4104bc2666_1053x861.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Alert sent to Teammate App on February 15th with information regarding the exposed server.</figcaption></figure></div><p>The first phrase on that email states the following: </p><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre><span>  </span><em>  " First of all, please do not ignore this email, this is not a scam attempt nor am I trying to sell anything, I am just alerting and looking for help closing down a security issue related to https://teammateapp.com/ "</em></pre></div><p>I have been adding this phrase to the start of my emails recently because companies assume my emails are either scam/phishing attempts or I’m some cybersecurity vendor or whatever trying to sell them some service or product and often ignore my alerts because of it.</p><p>The email was read by someone, I assume the CEO, and less than an hour after it was sent, I could not connect to the exposed server anymore. I did not get any reply back so a few days later I sent a follow up email.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png" width="1034" height="724" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:724,&quot;width&quot;:1034,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:136628,&quot;alt&quot;:&quot;Screenshot of the follow up email sent to Teammate App, the contents of the email are explained on the post.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png&quot;,&quot;isProcessing&quot;:false}" alt="Screenshot of the follow up email sent to Teammate App, the contents of the email are explained on the post." title="Screenshot of the follow up email sent to Teammate App, the contents of the email are explained on the post." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F31414391-de2b-49a2-aed1-bab0223de3fc_1034x724.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Follow up email sent asking about their intent regarding notifications to regulators and their clients.</figcaption></figure></div><p>On this email I asked the usual questions I do on my follow ups such as intent regarding notifications, if the company needed me to delay my publication to give them more time to notify anyone and if they wanted to provide an official comment to add to this publication. </p><p>A couple days later I got a reply that is both highly inappropriate and laughable at the same time.</p><p>Teammate App CEO, Sean Banayan, who has the reading comprehension and IT knowledge of a toddler, decided to reply the following:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png" width="1194" height="997" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/e74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:997,&quot;width&quot;:1194,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:241867,&quot;alt&quot;:&quot;Email response transcript: Hi Jaye,  This had no impact on anything or anyone and all anyone could see was basic information of *REDACTED* database size etc.  There were few more security layers which would have made any data breach impossible anyway.  Not sure what's your business and what the heck this Proton actually does, but if you don't stop harassing us, I'll get in touch with them to stop you.  Whatever you're selling, we're not interested in purchasing it.  Get it??&quot;,&quot;title&quot;:&quot;Email response transcript: Hi Jaye,  This had no impact on anything or anyone and all anyone could see was basic information of *REDACTED* database size etc.  There were few more security layers which would have made any data breach impossible anyway.  Not sure what's your business and what the heck this Proton actually does, but if you don't stop harassing us, I'll get in touch with them to stop you.  Whatever you're selling, we're not interested in purchasing it.  Get it??&quot;,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png&quot;,&quot;isProcessing&quot;:false}" alt="Email response transcript: Hi Jaye,  This had no impact on anything or anyone and all anyone could see was basic information of *REDACTED* database size etc.  There were few more security layers which would have made any data breach impossible anyway.  Not sure what's your business and what the heck this Proton actually does, but if you don't stop harassing us, I'll get in touch with them to stop you.  Whatever you're selling, we're not interested in purchasing it.  Get it??" title="Email response transcript: Hi Jaye,  This had no impact on anything or anyone and all anyone could see was basic information of *REDACTED* database size etc.  There were few more security layers which would have made any data breach impossible anyway.  Not sure what's your business and what the heck this Proton actually does, but if you don't stop harassing us, I'll get in touch with them to stop you.  Whatever you're selling, we're not interested in purchasing it.  Get it??" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe74440fb-1997-4c82-a179-a79f12b4a349_1194x997.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Response from Teammate APP CEO to my follow up email regarding notifications.</figcaption></figure></div><p>Apparently alerting him about a severe security issue with his App and sending a follow up email to try to avoid publishing anything before the company had time to do their own notifications, if that was their intent, means I’m harassing the company.</p><p>Sean was not interested in anything I was selling either (I don’t sell anything and state exactly that on my first contact) and even threatened to stop me if I didn’t stop with the harassment.</p><p>He was also kind enough to lie and claim “There were few more security layers which would have made any data breach impossible anyway.” and only basic information such as database sizes was exposed.</p><p>The email ended with a “Get it??” and in light of his demand that I allegedly stop harassing him and his obvious cluelessness about the security of his own data, I did not reply to that email. The remainder of this post will demonstrate how wildly inaccurate his claims were.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif" width="480" height="270" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:270,&quot;width&quot;:480,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:5007567,&quot;alt&quot;:&quot;A gif that shows the phrases \&quot;It's impossible\&quot; followed by \&quot;It's possible,\&quot; and then \&quot;but it's impossible to ME!\&quot;&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/gif&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif&quot;,&quot;isProcessing&quot;:false}" alt="A gif that shows the phrases &quot;It's impossible&quot; followed by &quot;It's possible,&quot; and then &quot;but it's impossible to ME!&quot;" title="A gif that shows the phrases &quot;It's impossible&quot; followed by &quot;It's possible,&quot; and then &quot;but it's impossible to ME!&quot;" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_lossy/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6ed830b7-34c3-4fe9-b553-d7744dd1c10e_480x270.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><p>The next part might come as a shock, to no one, but companies just tell whatever bullshit serves them best, not only to me but to their clients as well, this is a common occurrence.</p><p>Let’s see what “exposed basic information such as database sizes” really means.</p><p>Top 30 exposed tables in terms of record counts:</p><blockquote><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre>   715,090 formfieldhistories
   351,007 auditquestioncomments
   348,542 dailymaillogs
   139,419 formfields
   106,454 employeeskills
   100,915 auditformsectionquestions
     98,843 formsubmissions
     90,901 documenthistories
     90,571 tasks
     81,259 documents
     80,680 auditscores
     50,597 formfieldauditlogs
     48,510 risks
     48,079 activityloggers
     47,409 audits
     36,416 auditformsectionscores
     27,245 hazardous
     25,056 formtemplateauditlogs
     23,766 plants
     23,518 formtemplatehistories
     23,279 employees
     20,179 documentacknowledgements
     20,131 employees_16_1,012024
     17,202 auditformsections
     16,719 reassignownerships
     16,641 suppliers
     16,506 vismatelogtimes
     16,474 users
     15,413 employeeassisgnonlinetrainingforms
     15,126 personnels</pre></div></blockquote><p><span>The full table list and sizes can be seen here: </span><a href="https://pastebin.com/8q7CNYBi" rel="nofollow ugc noopener">https://pastebin.com/8q7CNYBi</a></p><p>The database contained a total of 2,963,124 records of exposed data, using around 3.8GB of storage. </p><p>If what Sean wrote to me was the truth, the post would be about done here. In reality it wouldn’t even exist, why would I waste my time reporting exposed database sizes and table counts?</p><p>So let’s analyze some of the tables exposed and the data in them.</p><p>This was the biggest table in terms of records on the DB and didn’t contain any relevant PII that I was aware, it was the updates made to the fields of the various forms companies have on the app. I saw a few links to actual filed forms on some tables and I could check them with no authentication, but I did not look much into it though.</p><p>This table contained usernames, emails, auth tokens and passwords. Around 9,000 users had bcrypt hashed passwords and around 6,000 had auth tokens set.</p><p>This also contained multiple foreign keys to other tables on the database with more information on the users such as companyId, employeeId, supplierId, etc.</p><p>The top 20 email domains exposed on the user table and their counts:</p><blockquote><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre>   651 awanuilabs.co.nz
   542 labtests.co.nz
   527 sclabs.co.nz
   368 wellingtonscl.co.nz
   292 jasmax.com
   246 gmail.com
   137 kaizenconsulting.co.nz
   132 medlabsouth.co.nz
   129 gribbles.co.nz
   126 awanuigroup.co.nz
   114 snell.co.nz
   103 culham.co.nz
   100 nz.rlb.com
     98 wadegroup.co.nz
     74 tigerturf.com
     66 cmp.net.nz
     64 zeagoldnutrition.co.nz
     62 taranakipath.co.nz
     62 norpath.co.nz
     58 teammateapp.com</pre></div></blockquote><p><span>A full count of the email domains can be seen here: </span><a href="https://pastebin.com/6L4hb2wL" rel="nofollow ugc noopener">https://pastebin.com/6L4hb2wL</a></p><p>This contained fields such as first and last name, company and workplace foreign keys, email, phone and mobile, date of birth and a field with additional information such as medical recommendations. There were multiple other tables related to employee data such as “employeesppes” which contained PPE (Personal protective equipment) information, mostly uniform sizes.</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png" width="1064" height="663" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:663,&quot;width&quot;:1064,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:218081,&quot;alt&quot;:&quot;Redacted example of the employees table with details on injuries and medical issues for an employee of kawekahealth.nz&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/png&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png&quot;,&quot;isProcessing&quot;:false}" alt="Redacted example of the employees table with details on injuries and medical issues for an employee of kawekahealth.nz" title="Redacted example of the employees table with details on injuries and medical issues for an employee of kawekahealth.nz" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F1573978e-a653-43f3-91d0-c7bfce7762fb_1064x663.png 1456w" sizes="100vw" loading="lazy"></picture></div></a><figcaption>Example of an entry on the employees table.</figcaption></figure></div><p>Top 20 email domains on the employees table:</p><blockquote><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre>  3281 gmail.com
    642 awanuilabs.co.nz
    616 mediaworks.co.nz
    607 labtests.co.nz
    596 sclabs.co.nz
    454 hotmail.com
    398 wellingtonscl.co.nz
    312 jasmax.com
    298 yahoo.com
    209 morganprojects.co.nz
    206 xtra.co.nz
    174 vnpf.com.vu
    173 culham.co.nz
    151 kawekahealth.nz
    146 medlabsouth.co.nz
    144 awanuigroup.co.nz
    138 tranzit.co.nz
    138 page-macrae.co.nz
    135 gribbles.co.nz
    123 outlook.com</pre></div></blockquote><p><span>A full count of the email domains can be seen here: </span><a href="https://pastebin.com/5vgz1JKq" rel="nofollow ugc noopener">https://pastebin.com/5vgz1JKq</a></p><p>This table if looked at briefly, probably wouldn’t mean much. There are no actual documents exposed on it, it contains partial paths, filenames, notes and information on who the file belongs to etc through multiple foreign keys to other tables.</p><p>Checking the companyId foreign key to check the companies with most records on the table we get the top 10 being:</p><blockquote></blockquote><p>The counts are only for a single ID, if a company had multiple IDs the file count would be higher all put together, I did not look for such cases.</p><p>I was told about multiple security layers who made a data breach impossible, so of course I had to dig through this table until I found a way to test if the files were actually secure and I guess some layers were currently malfunctioning, as expected, I could actually download the files without any authentication. </p><p><span>The download link still redirected me to </span><a href="https://my.teammateapp.com/login" rel="nofollow ugc noopener">https://my.teammateapp.com/login</a><span> but a request still went through for the file if it still exists in storage. From a small sample, around 75% of the files still exist and can still be accessed without any authentication or login.</span></p><p>The links still work as of publishing this, people would still need to know exactly how to get the working link but the company exposed that publicly for 2 months, who knows how many people got access to that information.</p><p>The sample contained files such as: </p><pre><code>email communications(.msg files), incident reports, site induction questionnares, drivers licences, customer complaint reports, job safety analysis sheets, service reports, workplace safety checklists, job hazard analysis, tool box talk reports, field information reports, consumer feedback spreadsheets.</code></pre><figure data-drag-handle="true" data-component-name="ImageGallery"><div><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png" sizes="100vw" alt="Examples of the files available for download without authentication. Examples show a drivers licence, a Workplace safety checklist from Kaweka Hospital and a consumer feedback spreadsheet from G&amp;H CardioVascular." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F055d16b1-8574-4005-8120-3a591d9a17b3_506x807.png 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png" sizes="100vw" alt="Examples of the files available for download without authentication. Examples show a drivers licence, a Workplace safety checklist from Kaweka Hospital and a consumer feedback spreadsheet from G&amp;H CardioVascular." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff889057c-fe43-4aa2-a9e7-393d71bcd463_931x903.png 474w" width="474"></picture><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png 474w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png" sizes="100vw" alt="Examples of the files available for download without authentication. Examples show a drivers licence, a Workplace safety checklist from Kaweka Hospital and a consumer feedback spreadsheet from G&amp;H CardioVascular." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png 424w, https://substackcdn.com/image/fetch/w_474,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F7566ffc1-134d-4f1d-9d0f-32d41d899a1b_1275x352.png 474w" width="474"></picture></div><figcaption>Examples of exposed files from companies such as Kaweka Hospital and G&amp;H CardioVascular.</figcaption></div></figure><p>There were multiple more file types but I have no interest in downloading around 60,000 files just to prove a point. </p><p>The server IP was scanned by multiple websites that scan for open ports, I noticed it on at least 2 different websites. </p><p>Was anyone looking at the logs to see random IPs connecting and querying for “basic information” for over 2 months? What else were people doing that this supposed security layers missed? I’m sure the company has an answer for that.</p><p>There is likely more data exposed here, this post only reveals a small sample of what was exposed but I can’t dedicate all my free time to analyze it and I’m not interested in doing an in depth security audit on the exposed data to a company who told me not to harass them. </p><p>This post serves to refute the claims of ‘Impossible to hack security’ made by Sean and if you’re a client or employee that uses the App, you might be wondering what else was exposed here. I would tell you to contact Sean or the company for clarification, but be wary you might be “harassing” them if you ask any questions.</p><p>I bet it felt really good and mighty sending that email shitting on me as if I’m some random idiot begging people to buy something, but some advice for you, next time maybe use google to look up what ProtonMail is before claiming you’re gonna report me to my “boss” Proton, but thanks for the laughs on that one. </p><p><span>Also maybe read what I wrote on my email where I mention I’m not selling anything to you, in fact I alerted you of some gross incompetence, free of charge and likely avoided your data from being wiped by some russian running an automated script that wipes everything it connects to, </span><a href="https://infosec.exchange/@JayeLTee/113075636340119294" rel="nofollow ugc noopener">I’ve seen it happen live before on the same service this data was exposed</a><span>. </span></p><p>You might read this post and think that now you are for sure reporting me to my “boss” but you’ll be disappointed to know that I do not work for anyone, so you can’t go and harass my “boss” with stupid claims.</p><p>Those database sizes sure did contain a lot more than just the size, oops.</p><p>And one last thing Sean:</p><div><figure><a target="_blank" href="https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif" data-component-name="Image2ToDOM" rel="nofollow ugc noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 1456w" sizes="100vw"><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif" width="498" height="272" data-attrs="{&quot;src&quot;:&quot;https://substack-post-media.s3.amazonaws.com/public/images/0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif&quot;,&quot;srcNoWatermark&quot;:null,&quot;fullscreen&quot;:null,&quot;imageSize&quot;:null,&quot;height&quot;:272,&quot;width&quot;:498,&quot;resizeWidth&quot;:null,&quot;bytes&quot;:2934205,&quot;alt&quot;:&quot;Gif with the phrase \&quot;Did you get it?\&quot; circling around Jonah Hill.&quot;,&quot;title&quot;:null,&quot;type&quot;:&quot;image/gif&quot;,&quot;href&quot;:null,&quot;belowTheFold&quot;:true,&quot;topImage&quot;:false,&quot;internalRedirect&quot;:&quot;https://jltee.substack.com/i/157546787?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif&quot;,&quot;isProcessing&quot;:false}" alt="Gif with the phrase &quot;Did you get it?&quot; circling around Jonah Hill." title="Gif with the phrase &quot;Did you get it?&quot; circling around Jonah Hill." srcset="https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0ab5d1f6-76f4-4606-a97f-da5491a511c6_498x272.gif 1456w" sizes="100vw" loading="lazy"></picture></div></a></figure></div><div data-component-name="PreformattedTextBlockToDOM"><p><label contenteditable="false">Text within this block will maintain its original spacing when published</label></p><pre>
If you’re interested in more incidents I dealt with, you can check all my public finds indexed by country on the post below:</pre></div><div data-component-name="DigestPostEmbed"><a href="https://jltee.substack.com/p/the-hub-of-stupi-misconfigs-index" target="_blank" rel="noopener"><div><picture><source type="image/webp" srcset="https://substackcdn.com/image/fetch/w_140,h_140,c_fill,f_webp,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d7927a-beaa-40c0-b996-b78818ab0401_1080x1080.jpeg"><img src="https://substackcdn.com/image/fetch/w_140,h_140,c_fill,f_auto,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F10d7927a-beaa-40c0-b996-b78818ab0401_1080x1080.jpeg" sizes="100vw" alt="The Hub of Stupi... *misconfigs Index" width="140" height="140"></picture></div></a></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I built an app to stop me doomscrolling by touching grass (983 pts)]]></title>
            <link>https://touchgrass.now/</link>
            <guid>43158660</guid>
            <pubDate>Mon, 24 Feb 2025 12:15:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://touchgrass.now/">https://touchgrass.now/</a>, See on <a href="https://news.ycombinator.com/item?id=43158660">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: I scrape Steam data every month and it's yours to download for free (146 pts)]]></title>
            <link>https://www.gginsights.io</link>
            <guid>43158425</guid>
            <pubDate>Mon, 24 Feb 2025 11:43:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.gginsights.io">https://www.gginsights.io</a>, See on <a href="https://news.ycombinator.com/item?id=43158425">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><img alt="image" loading="lazy" width="32" height="32" decoding="async" data-nimg="1" src="https://www.gginsights.io/logo.svg"></p><h3>Save over 120 hours of scraping</h3><p>Every month we scrape Steam data for you. So don't worry about having to create scripts, massage the data and wait for the results. We will do it for you. Rather, jump right into analyzing the data.</p></div><div><p><img alt="image" loading="lazy" width="60" height="50" decoding="async" data-nimg="1" src="https://www.gginsights.io/images/experiences/img1.png"></p><p><strong>Leverage the power of AI</strong> to help answer your questions about the Steam market and become a data expert, transforming data into actionable insights.</p></div><div><p><img alt="image" loading="lazy" width="60" height="50" decoding="async" data-nimg="1" src="https://www.gginsights.io/images/experiences/img2.png"></p><p>Need numbers to add to a pitch deck? Help your <strong>potential publisher understand the value</strong>. It will also help you speak with confidence knowing you have the data to back you up.</p></div><div><p><img alt="image" loading="lazy" width="60" height="50" decoding="async" data-nimg="1" src="https://www.gginsights.io/images/experiences/img3.png"></p><p><strong>Be strategic</strong>. Don't regret not analyzing the market holistically before you start working on your game. Stop wasting time on assumptions, rather, take into account the competition, the market size, the value of each tag, etc.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Is Ketamine Neurotoxic? (164 pts)]]></title>
            <link>https://desmolysium.com/ketamineneurotoxic/</link>
            <guid>43158292</guid>
            <pubDate>Mon, 24 Feb 2025 11:26:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://desmolysium.com/ketamineneurotoxic/">https://desmolysium.com/ketamineneurotoxic/</a>, See on <a href="https://news.ycombinator.com/item?id=43158292">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-id="1109504" data-element_type="widget" data-widget_type="theme-post-content.default">
					
<p>There are dozens of animal studies that show unequivocally that ketamine is neurotoxic. There is a common myth that ketamine is “neurogenetic”. This is mostly false. It increases neuroplasticity temporarily (days to weeks), which though is very different from neurogenesis (the birth of new neurons) – discussed in more detail in the next section.</p>



<p>At recreational doses, ketamine is addictive, destroys the bladder, and is toxic to the central nervous system. Microscopic lesions (including but not limited to so-called “Olney’s lesions”) in both grey and white matter are evident already after three months of high-dose ketamine use.</p>



<p>By year three of heavy use, MRI scans of ketamine users often reveal a brain that looks like a mix between multiple sclerosis (white matter lesions) and Alzheimer’s disease (grey matter atrophy).</p>



<figure><img fetchpriority="high" decoding="async" width="656" height="440" src="https://desmolysium.com/wp-content/uploads/2023/07/image-492.png" alt="" srcset="https://desmolysium.com/wp-content/uploads/2023/07/image-492.png 656w, https://desmolysium.com/wp-content/uploads/2023/07/image-492-300x201.png 300w" sizes="(max-width: 656px) 100vw, 656px"></figure>



<figure><img decoding="async" width="1024" height="246" src="https://desmolysium.com/wp-content/uploads/2023/10/keta-1024x246.jpg" alt="" srcset="https://desmolysium.com/wp-content/uploads/2023/10/keta-1024x246.jpg 1024w, https://desmolysium.com/wp-content/uploads/2023/10/keta-300x72.jpg 300w, https://desmolysium.com/wp-content/uploads/2023/10/keta-768x185.jpg 768w, https://desmolysium.com/wp-content/uploads/2023/10/keta-1536x370.jpg 1536w, https://desmolysium.com/wp-content/uploads/2023/10/keta.jpg 2020w" sizes="(max-width: 1024px) 100vw, 1024px"></figure>



<p>Ketamine <em>abuse</em> is well known to cause widespread cognitive and neurological impairment. However, the average ketamine “user” consumes 500-1000mg of ketamine per day, which is a lot more than therapeutic use (0.5mg/kg). One glass of wine per week is surely different from a gallon of vodka per day.</p>



<p>Nonetheless, it’s widely recognized that individuals who occasionally use ketamine find they need significantly higher doses than when they first started, even after prolonged periods of abstinence.</p>



<p>For instance, after a few months of using therapeutic doses of ketamine (around 0.5mg/kg per week), I noticed that its impact was much less pronounced compared to my initial experiences with the substance. Even extended breaks did not bring back my virgin response – <a href="https://desmolysium.com/recreational/#mdma" data-type="post" target="_blank" rel="noreferrer noopener">in an analogous way that MDMA users never recapture the magic of their first few trips</a>.</p>



<p>This form of “permatolerance” may point to neurotoxicity – in the same (but mechanistically different) way it does with MDMA.</p>



<p>Researchers are still unsure whether it is safe to use ketamine at low therapeutic doses at reasonable frequencies for a couple of weeks to a couple of months. However, in the case of otherwise untreatable depression, the risks and side effects need to be weighed against the risks and side effects of ongoing depression. Furthermore, depression itself is quite damaging to brain health itself.</p>



<p>I looked into this matter quite extensively myself and I also talked to a handful of university psychiatrists who have been using ketamine on their patients for years – long before Spravato was available. Every single one of them believes that ketamine is quite neurotoxic but in contrast to otherwise untreatable depression the lesser evil.</p>



<p>There is one study that looked at ketamine administration long-term and did not find evidence of neurocognitive decline. However, they were using clinical tests, which are not very sensitive and to reach statistical significance quite a bit of degeneration has had to happen. Furthermore, these were depressive subjects and if you treat depression, neurocognition usually increases. So, if ketamine really treated their depression (which it reportedly did), should there not be an <em>increase </em>in cognition between baseline and timepoint X? Possibly, neurocognitive domains did improve but the gains were erased by gradual neurotoxicity.</p>



<p>I discuss ketamine, and my personal experience with it, in more detail <a data-type="post" data-id="3364" href="https://desmolysium.com/ketamine/" target="_blank" rel="noreferrer noopener"><strong>here</strong></a>.</p>



<div><p><strong><em>Subscribe to the Desmolysium newsletter and get access to three exclusive articles!</em></strong></p></div>



<h2>But isn’t ketamine neurogenetic?!</h2>



<p>No, it is not. It increases <em>neuroplasticity</em>, which, for practical purposes is limited to the generation of dendritic spines (spinogenesis) and synapses (synaptogenesis). Spinogenesis and synaptogenesis are very different from <em>neurogenesis</em> (the birth of new neurons). Neurogenesis is limited to two sites in the human brain and a local creation of neurons in these sites cannot make up for the death of functionally integrated and possibly extensively connected neurons elsewhere.</p>



<p>Synaptogenesis and spinogenesis are short-lived (weeks) but dead neurons will never undie.</p>



<p>Given that Spravato (esketamine nasal spray) has been widely available and so-called “ketamine-clinics” proliferated, we are possibly going to have an answer to the question regarding whether and the extent of ketamine neurotoxicity soon. In the meantime, it is probably prudent to err on the side of caution.</p>



<p>My gut feeling is that people who are doing ketamine at even therapeutic doses regularly are more likely than not to give themselves non-negligible amounts of irreversible brain damage.</p>



<p>Unfortunately, ketamine has become a frequent drug of abuse at doses far higher than therapeutic doses. Similar to MDMA (although by a completely different mechanism), the neurotoxicity caused by high doses is irreversible. It is also quite worrying to see ketamine clinics mushrooming everywhere, with some patients reportedly going in twice per week and being given infusions of 100mg or more. As so often, hype and industry are about to destroy something that was originally quite useful in select cases.</p>



<p>For a related article: <a href="https://desmolysium.com/neurotoxicityofamphetamine/" target="_blank" rel="noreferrer noopener">“Adderall/Vyvanse Changed My Life”…But Will It Wreck Your Brain?</a></p>



<h4>Sources &amp; further info</h4>



<ul>
<li><strong>Scientific article:</strong> <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8461018/">Ketamine: Neuroprotective or Neurotoxic?</a></li>



<li><strong>Scientific study:</strong> <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3713393/">Brain damages in ketamine addicts as revealed by magnetic resonance imaging</a></li>



<li><strong><span>Scientific article:</span></strong><a href="https://www.tandfonline.com/doi/abs/10.1080/14740338.2022.2071867?journalCode=ieds20"> A review of potential neuropathological changes associated with ketamine</a></li>
</ul>







<h4><strong>Disclaimer</strong></h4>



<p><em>The content available on this website is based on the author’s individual research, opinions, and personal experiences. It is intended solely for informational and entertainment purposes and does not constitute medical advice. The author does not endorse the use of supplements, pharmaceutical drugs, or hormones without the direct oversight of a qualified physician. People should never disregard professional medical advice or delay in seeking it because of something they have read on the internet.</em></p>



<p><strong><em>The above is only a fraction of the article. This article is currently undergoing final revisions and is expected to be published within the next few weeks to months. To receive a notification upon its release, sign up for my newsletter.</em></strong></p>



<div><p><strong><em>Subscribe to the Desmolysium newsletter and get access to three exclusive articles!</em></strong></p></div>




				</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Apple Says It Will Add 20k Jobs, Spend $500B, Produce AI Servers in US (542 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2025-02-24/apple-says-it-will-add-20-000-jobs-spend-500-billion-produce-ai-servers-in-us</link>
            <guid>43158168</guid>
            <pubDate>Mon, 24 Feb 2025 11:05:34 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2025-02-24/apple-says-it-will-add-20-000-jobs-spend-500-billion-produce-ai-servers-in-us">https://www.bloomberg.com/news/articles/2025-02-24/apple-says-it-will-add-20-000-jobs-spend-500-billion-produce-ai-servers-in-us</a>, See on <a href="https://news.ycombinator.com/item?id=43158168">Hacker News</a></p>
Couldn't get https://www.bloomberg.com/news/articles/2025-02-24/apple-says-it-will-add-20-000-jobs-spend-500-billion-produce-ai-servers-in-us: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[What's New in Emacs 30.1? (144 pts)]]></title>
            <link>https://www.masteringemacs.org/article/whats-new-in-emacs-301</link>
            <guid>43158164</guid>
            <pubDate>Mon, 24 Feb 2025 11:05:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.masteringemacs.org/article/whats-new-in-emacs-301">https://www.masteringemacs.org/article/whats-new-in-emacs-301</a>, See on <a href="https://news.ycombinator.com/item?id=43158164">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="primary-article">
<p>Emacs 30.1 is upon us, and it’s time for another bumper release full of new features and improvements.</p>
<p>As always, I have taken the time to go through most of the changes in Emacs 30.1 and annotated them to give perspective and clarity.</p>
<p>Here is but a few of the highlights in 30.1:</p>
<ul>
<li><p><code>completion-preview-mode</code> is a tantalizing replacement for company mode and corfu as it uses a buffer and window system (not unlike the <code>*Completions*</code> window when you minibuffer complete with <code>TAB</code>), and with an <em>excellent</em> user experience. It even has the same schnazzy predictive typing that the old auto complete package did!</p>
<p>You also get to leverage the full force of Emacs’s expansive set of minibuffer completion styles, orders and more.</p>
<p>This is my favorite feature in Emacs 30.1. The user experience is superb; someone really cared for this, and it shows.</p></li>
<li><p>The Org URI protocol should now register automatically, meaning you can send data from a browser bookmarklet straight into org capture in your running Emacs instance.</p>
<p>The org protocol feature’s not new to Emacs 30.1, but automatically configuring your Emacs on Linux so it works properly <em>is</em>.</p></li>
<li><p>Which-key is now built in, which is good news for people who prefer that method of help (as opposed to typing <code>C-h</code> in a key chord).</p></li>
<li><p><code>libjansson</code> is dead; long live Emacs’s builtin JSON parser. The new parser is much faster.</p></li>
<li><p>The tree-sitter-specific <code>*-sexp</code> commands (such as <code>forward-sexp</code>) now work well.</p></li>
<li><p>Native compilation is on by default, provided your system has the required dependencies. A massive vote of confidence for a great feature.</p></li>
<li><p>Full support for Emacs on Android, and a whole host of touch screen-related improvements to Emacs as a result.</p></li>
<li><p>You can now request a diff of your multi-file replace regexp (see <code>C-h a replace diff</code>)</p></li>
<li><p>More Tramp (Emacs’s remote file editing system) connections, including support for Kubernetes pods.</p></li>
</ul>
<p>I will, as per usual, begin to update <a href="https://www.masteringemacs.org/book">my book, Mastering Emacs</a>, so it includes these latest changes.</p>
<p>Until then, and for the next couple of days, you can enjoy a 30% discount on my book. Enjoy!</p>
<h2 id="installation-changes-in-emacs-30.1">Installation Changes in Emacs 30.1</h2>
<pre><code>Native compilation is now enabled by default.
'configure' will enable the Emacs Lisp native compiler, so long as
libgccjit is present and functional on the system.  To disable native
compilation, configure Emacs with the option:

    ./configure --with-native-compilation=no</code></pre>
<p>That is good news. I’m hoping by declaring that native compilation, a must-have feature that <a href="https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation">compiles elisp into native code</a> and greatly speeds up your Emacs, it encourage more distros to adopt the setting, if they have not already. If you’re the type to compile your own Emacs, you may want to read me article as it does require a few mandatory components that most Linux distributions do not ship with.</p>
<pre><code>Emacs has been ported to the Android operating system.
This requires Emacs to be compiled on another computer.  The Android
NDK, SDK, and a suitable Java compiler must also be installed.

See the file "java/INSTALL" for more details.</code></pre>
<p>I’ve been following this development for quite a while, and it’s wonderful to see that you can run a full-blown Emacs instance on Android <em>and</em> with the support of the Emacs developers behind it. How exciting. I’ll have to find the time to play around with it.</p>
<pre><code>Native JSON support is now always available; libjansson is no longer used.
No external library is required.  The '--with-json' configure option has
been removed.  'json-available-p' now always returns non-nil and is only
kept for compatibility.</code></pre>
<p>JSON is a massive bottleneck when you’re using LSP servers, as LSPs are chatty and JSON is how they communicate. I wrote about the introduction of <a href="https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation">libjansson</a> when it was first introduced as it made a noticeable difference in performance back when it made an optional dependency in Emacs. It turns out that libjansson is not that quick. One day, a new contributor, Géza Herman, showed up with a JSON parser that was not only faster than libjansson, but more complete in its implementation.</p>
<p>As a result libjansson is not only deprecated but removed entirely. Excellent!</p>
<pre><code>Emacs now defaults to the ossaudio library for sound on NetBSD and OpenBSD.
Previously, configure used ALSA libraries if installed on the system
when configured '--with-sound=yes' (which is the default), with fallback
to libossaudio.  The libossaudio library included with the base system
is now used even if ALSA is found to avoid relying on external packages
and to resolve potential incompatibilities between GNU/Linux and *BSD
versions of ALSA.  Use '--with-sound=alsa' to build with ALSA on these
operating systems instead.</code></pre>
<pre><code>New configuration option '--disable-gc-mark-trace'.
This disables the GC mark trace buffer for about 5% better garbage
collection performance.  Doing so may make it more difficult for Emacs
developers to help finding GC-related bugs that you run into, which is
why the mark trace buffer is enabled by default.</code></pre>
<p>If you’re the type of person to compile your own Emacs, you might as well give this one a whirl. GC bugs do happen, but I’d say they’re rare enough that you can turn it off and claim your 5% speed-up voucher.</p>
<h2 id="startup-changes-in-emacs-30.1">Startup Changes in Emacs 30.1</h2>
<pre><code>On GNU/Linux, Emacs is now the default application for 'org-protocol'.
Org mode provides a way to quickly capture bookmarks, notes, and links
using 'emacsclient':

    emacsclient "org-protocol://store-link?url=URL&amp;title=TITLE"

Previously, users had to manually configure their GNU/Linux desktop
environment to open 'org-protocol' links in Emacs.  These links should
now open in Emacs automatically, as the "emacsclient.desktop" file now
arranges for Emacs to be the default application for the 'org-protocol'
URI scheme.  See the Org mode manual, Info node "(org) Protocols" for
more details.</code></pre>
<p>OK, no lie, this is a really cool feature that just got easier to use.</p>
<p>Org can register (on Windows, Linux, etc.) itself as a URI protocol controller. When you open a <code>https</code> hyperlink, your OS knows it has to use your preferred browser; ditto for e-mail. Here it’s called <code>org-protocol</code>, and with this new change (or the slightly more manual steps outlined <a href="https://orgmode.org/worg/org-contrib/org-protocol.html">in the org mode manual</a>) you can request that <code>org-protocol://....</code> contents are sent to your Emacs for processing.</p>
<p>That means you can send information to Org from other tools — such as the commandline or, more tantalizingly, from your web browser or even e-mails, provided your e-mail client follows hyperlinks and supports custom protocols.</p>
<p>Provided you’ve done the installation steps (I recommend you check out the <a href="https://orgmode.org/worg/org-contrib/org-protocol.html">the link</a> if the example below does not work) you can use a snippet like this in a Bookmarklet in your browser – or straight into the console for testing:</p>
<pre><code>javascript:location.href = 'org-protocol://capture?' +
    new URLSearchParams({
          template: "m",
          url: location.href,
          title: document.title,
          body: window.getSelection()})</code></pre>
<p>Replacing <code>template: "m"</code> with the <code>M-x org-capture</code> template key of your choice. The document’s title, URL and text selection is then sent to your org capture.</p>
<p>Pretty darn cool! If you’re an org mode user – I know you are! – you should get on top of this right away.</p>
<p>You can even register your own protocols (<code>org-protocol-protocol-alist</code>) and build your own integrations, and it’s not like you have to feed it into org!</p>
<pre><code>New variable lets Lisp code read emacsclient arguments.
When '--eval' is passed to emacsclient and Emacs is evaluating each
argument, the new variable 'server-eval-args-left' is set to those
arguments not yet evaluated.  It can be used by Lisp code to 'pop'
arguments and process them by the function called in the '--eval'
expression, which is useful when those arguments contain arbitrary
characters that otherwise might require elaborate and error-prone
escaping (to protect them from the shell).</code></pre>
<p>Do not sleep on Emacs’s client-server architecture, or the headless evaluation feature it has. My article on <a href="https://www.masteringemacs.org/article/fuzzy-finding-emacs-instead-of-fzf">Fuzzy Finding with Emacs Instead of fzf</a> is a great example of how two dozen lines of elisp and another baker’s dozen of bash can clone the keystone feature of <code>fzf</code>.</p>
<h2 id="incompatible-changes-in-emacs-30.1">Incompatible Changes in Emacs 30.1</h2>
<pre><code>Tree-Sitter modes are now declared as submodes of the non-TS modes.
In order to help the use of those Tree-Sitter modes, they are now
declared to have the corresponding non-Tree-Sitter mode as an
additional parent.
This way, things like ".dir-locals.el" settings, and YASnippet
collections of snippets automatically apply to the new Tree-Sitter modes.

Note that those modes still do not inherit from the non-TS mode, so
configuration settings installed via mode hooks are not affected.

Loading a Tree-Sitter mode (such as by using 'M-x load-library' or with
'M-x load-file') by default causes the corresponding non-Tree-Sitter
mode be remapped to the Tree-Sitter mode.  This remapping affects
visiting files for which 'auto-mode-alist' specifies a non-Tree-Sitter
mode, and also affects mode-specification cookies on the first line of a
file and mode specifications in file- and directory-local variables.  To
revert to using a non-Tree-Sitter mode, reload the corresponding mode
file anew.  To prevent file loading from turning on Tree-Sitter mode
when 'auto-mode-alist' or the file/directory-local variables specify a
non-Tree-Sitter mode, customize the user option 'major-mode-remap-alist'
to specify that a non-Tree-Sitter mode is "remapped" to itself.  For
example:

    (add-to-list 'major-mode-remap-alist '(c-mode))

specifies that C Mode should not be remapped to 'c-ts-mode' even if and
when 'c-ts-mode' is loaded.  Conversely,

    (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))

tells Emacs to always invoke 'c-ts-mode' whenever 'c-mode' is
requested, either by 'auto-mode-alist' or by file/directory-local
variables.

We recommend using 'major-mode-remap-alist' to express your preferences
for using Tree-Sitter or non-Tree-Sitter modes for files for which both
variants of major modes are available, because that variable overrides
the remapping Emacs might decide to perform as result of loading Lisp
files and features.</code></pre>
<p>I mean, I’m glad they’re slowly making these changes, as the tree-sitter modes are threadbare. Aside from better (usually) syntax highlighting and indentation, they rarely offer much.</p>
<p>But this is yet another thing to explain to people that, yes, now your dir-locals will pick up on the TS mode you’re using, but all the other features present in the old major modes probably don’t work.</p>
<p>In my opinion, tree-sitter major modes should be deprecated and the syntax highlighting and indentation relegated to optional minor modes you can enable in the existing major modes (and obviously brand new ones, if no such major modes exist) and all other “tree-sitter-portable” custom commands are gated behind a feature flag that require the presence of TS and the right grammar file to work, with perhaps a fallback for things that can be implemented – or is already – with non-TS code.</p>
<pre><code>Mouse wheel events should now always be 'wheel-up/down/left/right'.
At those places where the old 'mouse-4/5/6/7' events could still occur
(i.e., X11 input in the absence of XInput2, and 'xterm-mouse-mode'),
we remap them to the corresponding 'wheel-up/down/left/right' event,
according to the new user option 'mouse-wheel-buttons'.
The old variables 'mouse-wheel-up-event', 'mouse-wheel-down-event',
'mouse-wheel-left-event', and 'mouse-wheel-right-event' are thereby
obsolete.</code></pre>
<p>I’ve never in my life been able to remember what the numbers map to, so I this is a useful aid to me and, no doubt, anybody else looking to remap or just figure out what a mouse event is.</p>
<pre><code>'completion-auto-help' now affects 'icomplete-in-buffer'.
Previously, 'completion-auto-help' mostly affected only minibuffer
completion.  Now, if 'completion-auto-help' has the value 'lazy', then
Icomplete's in-buffer display of possible completions will only appear
after the 'completion-at-point' command has been invoked twice, and if
'completion-auto-help' is nil, then Icomplete's in-buffer display is
completely suppressed.  Thus, if you use 'icomplete-in-buffer', ensure
'completion-auto-help' is not customized to 'lazy' or nil.</code></pre>
<pre><code>The "*Completions*" buffer now always accompanies 'icomplete-in-buffer'.
Previously, it was not consistent whether the "*Completions*" buffer would
appear when using 'icomplete-in-buffer'.  Now the "*Completions*" buffer
and Icomplete's in-buffer display of possible completions always
appear together.  If you would prefer to see only Icomplete's
in-buffer display, and not the "*Completions*" buffer, you can add this
to your init file:

    (advice-add 'completion-at-point :after #'minibuffer-hide-completions)</code></pre>
<p>This governs the <code>*Completions*</code> window that may (or may not, as the case may be) pop up to offer assistance if when you are completing. If you use the default completion mechanism in Emacs, you may want to consider looking into tweaking this, if you find the current <code>*Completions*</code> behavior is not to your liking.</p>
<pre><code>The default process filter was rewritten in native code.
The round-trip through the Lisp function
'internal-default-process-filter' is skipped when the process filter is
the default one.  It is reimplemented in native code, reducing GC churn.
To undo this change, set 'fast-read-process-output' to nil.</code></pre>
<p>Anything that speeds up a known and serious IO bottleneck in Emacs is welcome news to me. The fact they named the variable <code>fast-read-process-output</code> says it all.</p>
<pre><code>Network Security Manager now warns about 3DES by default.
This cypher is no longer recommended owing to a major vulnerability
disclosed in 2016, and its small 112 bit key size.  Emacs now warns
about its use also when 'network-security-level' is set to 'medium'
(the default).  See 'network-security-protocol-checks'.</code></pre>
<pre><code>Network Security Manager now warns about &lt;2048 bits in DH key exchange.
Emacs used to warn for ephemeral Diffie-Hellman (DHE) key exchanges with
prime numbers smaller than 1024 bits.  Since more servers now support
it, this number has been bumped to 2048 bits.</code></pre>
<pre><code>URL now never sends user email addresses in HTTP requests.
Emacs never sent email addresses by default, but it used to be
possible to customize 'url-privacy-level' so that the user's email
address was sent along in HTTP requests.  This feature has now been
removed, as it was considered more dangerous than useful.  RFC 9110
(§ 10.1.2) also recommends against it.  The user option
'url-personal-mail-address' is now also obsolete.

To send an email address in the header of individual HTTP requests,
see the variable 'url-request-extra-headers'.</code></pre>
<p>I am not sure why there was ever the option of sending email addressed alongside HTTP requests. I don’t recall that ever being a thing in the 90s either, but perhaps that is just my memory failing me.</p>
<pre><code>'pixel-scroll-precision-mode' sets 'make-cursor-line-fully-visible'.
'pixel-scroll-precision-mode' sets 'make-cursor-line-fully-visible' to a
nil value globally, since the usual requirement of the Emacs display to
make the cursor line fully visible contradicts the smooth scrolling
expectations.</code></pre>
<p>I recommend you try <a href="https://github.com/jdtsmith/ultra-scroll">ultra-scroll</a> if you’re serious about wanting smooth scrolling in Emacs.</p>
<h2 id="changes-in-emacs-30.1">Changes in Emacs 30.1</h2>
<pre><code>Fix shell injection vulnerability in man.el (CVE-2025-1244).
We urge all users to upgrade immediately.</code></pre>
<pre><code>New user option 'trusted-content' to allow potentially dangerous features.
This option lists those files and directories whose content Emacs should
consider as sufficiently trusted to run any part of the code contained
therein even without any explicit user request.

For example, Flymake's backend for Emacs Lisp consults this option
and disables itself with an "untrusted content" warning if the file
is not listed.

Emacs Lisp authors should note that a major or minor mode must never set
this option to the ':all' value.

This option is used to fix CVE-2024-53920.  See below for details.</code></pre>
<p>It shouldn’t come as a surprise to anybody that Emacs, a dynamic computing environment, can be coaxed into running stuff it shouldn’t. Ideally that’d never happen, but given the nature of what Emacs does – and how integrated it is in our lives – it is no surprise that on occasion its power is turned against it. What surprises me is that these issues don’t happen more frequently.</p>
<pre><code>Emacs now supports Unicode Standard version 15.1.</code></pre>
<pre><code>Emacs now comes with Org v9.7.
See the file "etc/ORG-NEWS" for user-visible changes in Org.</code></pre>
<pre><code>Improved support for touchscreen devices.
On systems that understand them (at present X, Android, PGTK, and
MS-Windows), many touch screen gestures are now implemented and
translated into mouse or gesture events, and support for tapping tool
bar buttons and opening menus has been added.  Countless packages, such
as Dired and Custom, have been adjusted to better understand touch
screen input.</code></pre>
<p>This obviously goes hand in hand with the Android changes. The myth that Emacs is a keyboard only system is obviously false, and it has been since Lucid/XEmacs improved mouse support in the 1990s. Now that touch screen support is improved, I’m curious to see if we’ll see the emergence of org packages/email clients on Android that lean into the new touch support.</p>
<pre><code>Support for styled underline face attributes.
These are implemented as new values of the 'style' attribute in a face
underline specification, 'double-line', 'dots', and 'dashes', and are
available on GUI systems.  If your terminal's termcap or terminfo
database entry defines the 'Su' or 'Smulx' capability, Emacs will also
emit the prescribed escape sequence to render faces with such styles on
TTY frames.</code></pre>
<pre><code>Support for underline colors on TTY frames.
Colors specified in the underline face will now also be displayed on TTY
frames on terminals that support the 'Su' or 'Smulx' capabilities.</code></pre>
<p>This is addition to things like squiggly underlines that we’ve had for a long time now. I’m quite surprised that terminals can render anything other than a opaque line, though; that is news to me.</p>
<pre><code>Modeline elements can now be right-aligned.
Anything following the symbol 'mode-line-format-right-align' in
'mode-line-format' will be right-aligned.  Exactly where it is
right-aligned to is controlled by the new user option
'mode-line-right-align-edge'.</code></pre>
<p>Can’t say I’ve ever had the desire to heavily mod my mode line, but I know that a lot of people care greatly about its aethestics. I’m sure this is of benefit to people who use right-to-left languages also; perhaps they are the primary users?</p>
<pre><code>X selection requests are now handled much faster and asynchronously.
This means it should be less necessary to disable the likes of
'select-active-regions' when Emacs is running over a slow network
connection.</code></pre>
<pre><code>Emacs now updates invisible frames that are made visible by a compositor.
If an invisible or an iconified frame is shown to the user by the
compositing manager, Emacs will now redisplay such a frame even though
'frame-visible-p' returns nil or 'icon' for it.  This can happen, for
example, as part of preview for iconified frames.</code></pre>
<p>I guess this refers to the ‘window peek’ feature in Windows’ taskbar, and that it’s really more of a bugfix / tweak more than an actual feature.</p>
<pre><code>Most file notification backends detect unmounting of a watched filesystem.
The only exception is w32notify.</code></pre>
<p>Emacs will watch file changes using a range of mechanisms depending on the platform of choice.</p>
<pre><code>The ':map' property of images is now recomputed when image is transformed.
Images with clickable maps now work as expected after you run commands
such as 'image-increase-size', 'image-decrease-size', 'image-rotate',
'image-flip-horizontally', and 'image-flip-vertically'.
Set the new user option 'image-recompute-map-p' to nil to prevent Emacs
from recomputing image maps.</code></pre>
<h2 id="minibuffer-and-completions">Minibuffer and Completions</h2>
<pre><code>New commands 'previous-line-completion' and 'next-line-completion'.
Bound to '&lt;up&gt;' and '&lt;down&gt;' arrow keys, respectively, they navigate
the "*Completions*" buffer vertically by lines, wrapping at the
top/bottom when 'completion-auto-wrap' is non-nil.</code></pre>
<pre><code>New user option 'minibuffer-visible-completions'.
When customized to non-nil, you can use arrow keys in the minibuffer
to navigate the completions displayed in the "*Completions*" window.
Typing 'RET' selects the highlighted candidate.  'C-g' hides the
completions window.  When the completions window is not visible,
then all these keys have their usual meaning in the minibuffer.
This option is supported for in-buffer completion as well.</code></pre>
<pre><code>Selected completion candidates are deselected on typing.
When you type at the minibuffer prompt, the current completion
candidate will be un-highlighted, and point in the "*Completions*" window
will be moved off that candidate.  'minibuffer-choose-completion'
('M-RET') will still choose a previously-selected completion
candidate, but the new command 'minibuffer-choose-completion-or-exit'
(bound to 'RET' by 'minibuffer-visible-completions') will exit with
the minibuffer contents instead.  This deselection behavior can be
controlled with the new user option 'completion-auto-deselect', which
is t by default.</code></pre>
<p>There’s a longer-running theme to try and make the <code>*Completions*</code> window useful in contexts outside the minibuffer’s completion mechanism. This mechanism is rather confusingly named <code>completion-in-region</code>, even though it’s not just about acting on a region. If you use popup completion tools like company and corfu, then you should consider experimenting with this improved completion system, as it’s a “native” buffer-and-window-based approach to the same.</p>
<pre><code>New value 'historical' for user option 'completions-sort'.
When 'completions-sort' is set to 'historical', completion candidates
will be first sorted alphabetically, and then re-sorted by their order
in the minibuffer history, with more recent candidates appearing first.</code></pre>
<p>There are popular third-party packages that do much of this already, so it’s nice to see that a similar feature has made it into core. My article on <a href="https://www.masteringemacs.org/article/understanding-minibuffer-completion">Understanding Minibuffer Completion</a> goes into more detail on how to configure minibuffer completion in Emacs.</p>
<pre><code>'completion-category-overrides' supports more metadata.
The new supported completion properties are 'cycle-sort-function',
'display-sort-function', 'annotation-function', 'affixation-function',
and 'group-function'.  You can now customize them for any category in
'completion-category-overrides' that will override the properties
defined in completion metadata.</code></pre>
<pre><code>'completion-extra-properties' supports more metadata.
The new supported completion properties are 'category',
'group-function', 'display-sort-function', and 'cycle-sort-function'.</code></pre>
<p>See <a href="https://www.masteringemacs.org/article/understanding-minibuffer-completion">my article</a> for more information on customizing Emacs’s minibuffer.</p>
<h2 id="windows">Windows</h2>
<pre><code>New command 'toggle-window-dedicated'.
This makes it easy to interactively mark a specific window as
dedicated, so it won't be reused by 'display-buffer'.  This can be
useful for complicated window setups.  It is bound to 'C-x w d'
globally.</code></pre>
<pre><code>"d" in the mode line now indicates that the window is dedicated.
Windows have always been able to be dedicated to a specific buffer;
see 'window-dedicated-p'.  Now the mode line indicates the dedicated
status of a window, with "d" appearing in the mode line if a window is
dedicated and "D" if the window is strongly dedicated.  This indicator
appears before the buffer name, and after the buffer modification and
remote buffer indicators (usually "---" together).</code></pre>
<p>Coaxing Emacs into putting your windows where you want them to go is a common source of frustrating. I wrote <a href="https://www.masteringemacs.org/article/demystifying-emacs-window-manager">Demystifying Emacs’s Window Manager</a> in part to help people wrangle the windows into place. Dedicated windows are a blunt (though useful) tool that tells Emacs not to use a window for anything other than what is in it already. This feature mirrors what you find in a lot of other IDEs and editors where most windows have a singular purpose, unlike Emacs’.</p>
<pre><code>New action alist entry 'some-window' for 'display-buffer'.
It specifies which window 'display-buffer-use-some-window' should prefer.
For example, when 'display-buffer-base-action' is customized to
'(nil . ((some-window . mru)))', then a buffer will be displayed
in the same most recently used window from consecutive calls of
'display-buffer' (in a configuration with more than two windows).</code></pre>
<p>This is pretty advanced stuff, but if you’re unhappy with the default methods employed by Emacs (see <code>display-buffer-fallback-action</code>) you can now tell it to more aggressively reuse windows using the “most recently used” order of windows.</p>
<pre><code>New action alist entry 'category' for 'display-buffer'.
If the caller of 'display-buffer' passes '(category . symbol)'
in its 'action' argument, you can match the displayed buffer
by adding '(category . symbol)' to the condition part of
'display-buffer-alist' entries.</code></pre>
<p>I do not think you’re likely to encounter code that does this just yet, but I suppose this is one way of disambiguating windows that may share the same buffer name or major mode, but differ in some crucial way that only a custom cons cell <code>category</code> can sort out.</p>
<p>Pretty niche. You’re probably not going to use this <em>really</em> into <code>display-buffer-alist</code>.</p>
<pre><code>New action alist entry 'post-command-select-window' for 'display-buffer'.
It specifies whether the window of the displayed buffer should be
selected or deselected at the end of executing the current command.</code></pre>
<pre><code>New variable 'window-restore-killed-buffer-windows'.
It specifies how 'set-window-configuration' and 'window-state-put'
should proceed with windows whose buffer was killed after the
corresponding configuration or state was recorded.</code></pre>
<p>Window configurations are, well, configurations of windows. They are snapshots of window layouts: <code>C-x r w</code> puts your current window configuration into a register, and that is one such use; the other is tab bars in <code>tab-bar-mode</code>. Both set and restore window configurations when you change tabs or explicitly change them with a register. This variable’s really quite complex, so if you have strong opinions on this (you probably do not) then you really should read the lengthy docstring for this variable.</p>
<pre><code>New variable 'window-point-context-set-function'.
It can be used to set a context for window point in all windows by
'window-point-context-set' before calling 'current-window-configuration'
and 'window-state-get'.  Then later another new variable
'window-point-context-use-function' can be used by
'window-point-context-use' after 'set-window-configuration' and
'window-state-put' to restore positions of window points
according to the context stored in a window parameter.</code></pre>
<p>Emacs tracks the position of point by <em>window</em> and not by buffer, as you may think. Split your current buffer and then move the point in one window and switch to the other: observe that your point is remembered between each window. Very handy, that, and this (alongside the window configuration stuff I mentioned before) is what this is about. You… probably don’t care.</p>
<pre><code>New functions 'set-window-cursor-type' and 'window-cursor-type'.
'set-window-cursor-type' sets a per-window cursor type, and
'window-cursor-type' queries this setting for a given window.  Windows
are always created with a 'window-cursor-type' of t, which means to
consult the variable 'cursor-type' as before.</code></pre>
<p>You can now change the cursor type for each window. Neat. The variable <code>cursor-type</code> used to just override it for the whole Emacs session.</p>
<pre><code>The user option 'display-comint-buffer-action' is now obsolete.
You can use a '(category . comint)' condition in 'display-buffer-alist'
to match buffers displayed by comint-related commands.  Another
user option 'display-tex-shell-buffer-action' is obsolete too
for which you can use '(category . tex-shell)'.</code></pre>
<p>I suppose this is what the change above is really about: to remove bespoke code and generalize it into the new category system.</p>

<pre><code>Tool bars can now be placed on the bottom on more systems.
The 'tool-bar-position' frame parameter can be set to 'bottom' on all
window systems other than macOS and GNUstep (Nextstep).</code></pre>
<pre><code>New global minor mode 'modifier-bar-mode'.
When this minor mode is enabled, the tool bar displays buttons
representing modifier keys.  Clicking on these buttons applies the
corresponding modifiers to the next input event.</code></pre>
<p>Useful on portable devices (like Android) that may not have certain modifier keys on its native keyboard.</p>
<pre><code>New user option 'tool-bar-always-show-default'.
When non-nil, the tool bar at the top of a frame does not show buffer
local customization of the tool bar.  The default value is nil.</code></pre>
<h2 id="tab-bars-and-tab-lines">Tab Bars and Tab Lines</h2>
<p>Tab bars are window configurations; tab lines are basically tabs like they appear in your browser.</p>
<pre><code>New user option 'tab-bar-select-restore-context'.
It uses 'window-point-context-set' to save contexts where
window points were located before switching away from the tab,
and 'window-point-context-use' to restore positions of window
points after switching back to that tab.</code></pre>
<p>If you have multiple tabs featuring the same buffer, you can now preserve the point location between tabs.</p>
<pre><code>New user option 'tab-bar-select-restore-windows'.
It defines what to do with windows whose buffer was killed since the tab
was last selected.  By default it displays a placeholder buffer
with the name " *Old buffer &lt;name&gt;*" that provides information about
the name of the killed buffer that was displayed in that window.</code></pre>
<pre><code>New user option 'tab-bar-tab-name-format-functions'.
It can be used to add, remove and reorder functions that change the
appearance of every tab on the tab bar.</code></pre>
<pre><code>New hook 'tab-bar-tab-post-select-functions'.</code></pre>
<pre><code>New keymap 'tab-bar-mode-map'.
By default it contains a keybinding 'C-TAB' to switch tabs, but only
when 'C-TAB' is not bound globally.  You can unbind it if it conflicts
with 'C-TAB' in other modes.</code></pre>
<pre><code>New keymap 'tab-line-mode-map'.
By default it contains keybindings for switching tabs: 'C-x &lt;left&gt;',
'C-x &lt;right&gt;', 'C-x C-&lt;left&gt;', 'C-x C-&lt;right&gt;'.  You can unbind them if
you want to use these keys for the commands 'previous-buffer' and
'next-buffer'.</code></pre>
<p>A better way of configuring tab bar/line modes’ keys. You can opt for more complex keys, and even use keyboard repeat maps if you use <code>C-&lt;TAB&gt;</code> for other things.</p>
<pre><code>Default list of tab-line tabs is changed to support a fixed order.
This means that 'tab-line-tabs-fixed-window-buffers', the new default
tabs function, is like the previous 'tab-line-tabs-window-buffers' where
both of them show only buffers that were previously displayed in the
window.  But the difference is that the new function always keeps the
original order of buffers on the tab line, even after switching between
these buffers.  You can drag the tabs and release at a new position
to manually reorder the buffers on the tab line.</code></pre>
<pre><code>New user option 'tab-line-tabs-buffer-group-function'.
It provides two choices to group tab buffers by major mode and by
project name.</code></pre>
<pre><code>Buffers on tab-line group tabs are now sorted alphabetically.
This will keep the fixed order of tabs, even after switching between
them.</code></pre>
<h2 id="help">Help</h2>
<pre><code>New command 'help-find-source'.
Switch to a buffer visiting the source of what is being described in
"*Help*".  It is bound to 'C-h 4 s' globally.</code></pre>
<p>Other notable commands include <code>M-x find-variable</code>, <code>M-x find-function</code> and <code>M-x find-function-on-key</code> to jump to their source definitions. I use ’em all the time.</p>
<pre><code>New user option 'describe-bindings-outline-rules'.
This user option controls outline visibility in the output buffer of
'describe-bindings' when 'describe-bindings-outline' is non-nil.</code></pre>
<p>All this does is determine whether <code>outline-minor-mode</code> is enabled and configured to make headings collapsible.</p>
<pre><code>'describe-function' shows the function's inferred type when available.
For native compiled Lisp functions, 'describe-function' prints (after
the signature) the automatically inferred function type as well.  If the
function's type was explicitly declared (via the 'declare' form's
'ftype' property), 'describe-function' shows the declared type.  This is
controlled by the new user option 'help-display-function-type', which is
by default t; customize to nil to disable function type display.</code></pre>
<p>This is really only likely to be of interest and use to elisp hackers who know their way around Emacs’s internals. The declared type for <code>+</code> is <code>Declared type: (function (&amp;rest (or number marker)) number)</code> for example.</p>
<pre><code>'describe-function' now shows the type of the function object.
The text used to say things like "car is a built-in function" whereas it
now says "car is a primitive-function" where "primitive-function" is the
name of the symbol returned by 'cl-type-of'.  You can click on those
words to get information about that type.</code></pre>
<p>It’s been a long-running saga to get some sort of type taxonomy into Emacs, and it’s slowly happening now. I am unsure how useful this is to your average elisp hacker; this is more likely to be of use for byte and native compilation. See also the entry further down on declaratively specifying the arguments and return type of a function.</p>
<pre><code>'C-h m' ('describe-mode') uses outlining by default.
Set 'describe-mode-outline' to nil to get back the old behavior.</code></pre>
<p>See above.</p>
<pre><code>'C-h k' ('describe-key') shows Unicode name.
For keybindings which produce single characters via translation or input
methods, 'C-h k' now shows the Unicode name of the produced character in
addition to the character itself, e.g.

'C-h k C-x 8 E' =&gt;

    € 'EURO SIGN' (translated from C-x 8 E)</code></pre>
<p>A useful change, even though I doubt I’ll remember that I can do this. For inputtable characters I normally type them then use <code>C-u C-x =</code> to see its unicode name along with a host of other useful information.</p>
<pre><code>'C-h b' ('describe-bindings') shows Unicode names.
For keybindings which produce single characters via translation (such as
those using the 'C-x 8' or 'A-' prefix, or 'dead-acute', 'dead-grave',
etc), the Unicode names will now be shown in addition to the character
itself, i.e.

    A-!         ¡   INVERTED EXCLAMATION MARK
    A-$         ¤   CURRENCY SIGN

and so on.</code></pre>
<p>This I am more likely to find a use for. <code>C-h b</code> is a must-know command, and now it shows the unicode name for self-inserted characters.</p>
<pre><code>Multi-character key echo now ends with a suggestion to use Help.
Customize 'echo-keystrokes-help' to nil to prevent that.</code></pre>
<h2 id="customize">Customize</h2>
<pre><code>New command 'customize-dirlocals'.
This command pops up a buffer to edit the settings in ".dir-locals.el".</code></pre>
<p>Wow. This change is great. Directory-local variables are elisp variables declared in one of several files (such as <code>.dir-locals.el</code>) that you can use to effect directory-specific changes to Emacs buffers. I really love dirlocals; however, they’re a pain to add and edit. <code>M-x add-dir-local-variable</code> is a newbie trap, and it’s easy to type the wrong thing and cause all sorts of issues (or worse: that nothing at all happens.)</p>
<p>A nice customize UI will go a long way towards encouraging more people to use it.</p>
<pre><code>New command 'customize-toggle-option'.
This command can toggle boolean options for the duration of a session.</code></pre>
<p>One cool aspect of Customize is that you can set settings for the duration only, and then later on return to finalize them and save them to a file. All this does is add that functionality to booleans.</p>
<pre><code>New prefix argument for modifying directory-local variables.
The commands 'add-dir-local-variable', 'delete-dir-local-variable' and
'copy-file-locals-to-dir-locals' now take an optional prefix argument,
to enter the file name where you want to modify directory-local
variables.</code></pre>
<pre><code>New user option 'safe-local-variable-directories'.
This user option names directories in which Emacs will treat all
directory-local variables as safe.</code></pre>
<p>Very useful. Emacs is squeamish about dirlocals as it maintains a list of safe variables and anything else is considered unsafe, and you’re asked to approve every setting. Whitelisting certain directories is a great compromise for people who are OK with the risks that follow from such a feature.</p>
<h2 id="cl-print">CL Print</h2>
<p>This is for elisp programmers only, and governs how Elisp forms are printed on the screen for human consumption.</p>
<pre><code>There is a new chapter in the CL manual documenting cl-print.el.
See the Info node "(cl) Printing".</code></pre>
<pre><code>You can expand the "..." truncation everywhere.
The code that allowed "..." to be expanded in the "*Backtrace*" buffer
should now work anywhere the data is generated by 'cl-print'.</code></pre>
<pre><code>The 'backtrace-ellipsis' button is replaced by 'cl-print-ellipsis'.</code></pre>
<pre><code>hash-tables' contents can be expanded via the ellipsis.</code></pre>
<pre><code>Modes can control the expansion via 'cl-print-expand-ellipsis-function'.</code></pre>
<pre><code>New setting 'raw' for 'cl-print-compiled'.
This setting causes byte-compiled functions to be printed in full by
'prin1'.  A button on this output can be activated to disassemble the
function.</code></pre>
<h2 id="miscellaneous">Miscellaneous</h2>
<pre><code>New command 'kill-matching-buffers-no-ask'.
This works like 'kill-matching-buffers', but without asking for
confirmation.</code></pre>
<p><code>M-x kill-matching-buffers</code> kills buffers by regexp; and now you can have it do so without asking your permission.</p>
<pre><code>'recover-file' can show diffs between auto save file and current file.
When answering the prompt with "diff" or "=", it now shows the diffs
between the auto save file and the current file.</code></pre>
<p>Ah, very handy. You can already diff files you want to save with <code>C-x s</code> and then <code>d</code>.</p>
<pre><code>'read-passwd' can toggle the visibility of passwords.
Use 'TAB' in the minibuffer to show or hide the password.
Alternatively, click the new show-password icon on the mode-line with
'mouse-1' to toggle the visibility of the password.</code></pre>
<p>TAB, eh? I’m most assuredly going to accidentally reveal a password that way. You can edit <code>read-passwd-map</code> to remove the TAB if you want, though.</p>
<pre><code>'advice-remove' is now an interactive command.
When called interactively, 'advice-remove' now prompts for an advised
function to the advice to remove.</code></pre>
<p>Good. You can do this with <code>M-x remove-hook</code> also. Useful if you foolishly cram lambdas into hooks or advice… and are now struggling to remove them. But you’d never make that mistake, right? :)</p>
<pre><code>New user option 'uniquify-dirname-transform'.
This can be used to customize how buffer names are uniquified, by
making arbitrary transforms on the buffer's directory name (whose
components are used to uniquify buffer names when they clash).  You
can use this to distinguish between buffers visiting files with the
same base name that belong to different projects by using the provided
transform function 'project-uniquify-dirname-transform'.</code></pre>
<p>Uniquify renames buffers (but not the underlying files, if any) to sensible names instead of <code>foo&lt;1&gt;</code>, <code>foo&lt;2&gt;</code>, etc. It’s enabled by default, nowadays, but if you use the projects feature in Emacs, and if you frequently open the same file name in multiple projects, give this setting a try.</p>
<pre><code>New user option 'remote-file-name-inhibit-delete-by-moving-to-trash'.
When non-nil, this option suppresses moving remote files to the local
trash when deleting.  Default is nil.</code></pre>
<pre><code>New user option 'remote-file-name-inhibit-auto-save'.
If this user option is non-nil, 'auto-save-mode' will not auto-save
remote buffers.  The default is nil.</code></pre>
<pre><code>New user option 'remote-file-name-access-timeout'.
If a positive number, this option limits the call of 'access-file'
for remote files to that number of seconds.  Default is nil.</code></pre>
<p>These are Tramp features, part of Emacs’s remote file editing system.</p>
<pre><code>New user option 'yes-or-no-prompt'.
This allows the user to customize the prompt that is appended by
'yes-or-no-p' when asking questions.  The default value is
"(yes or no) ".</code></pre>
<pre><code>New user option 'menu-bar-close-window'.
When non-nil, selecting "Close" from the "File" menu or clicking
"Close" in the tool bar will result in the current window being
deleted, if possible.  The default is nil, and these gestures kill the
buffer shown in the current window, but don't delete the window.</code></pre>
<pre><code>New face 'display-time-date-and-time'.
This is used for displaying the time and date components of
'display-time-mode'.</code></pre>
<pre><code>New face 'appt-notification' for 'appt-display-mode-line'.
It can be used to customize the look of the appointment notification
displayed on the mode line when 'appt-display-mode-line' is non-nil.</code></pre>
<pre><code>New icon images for general use.
Several symbolic icons have been added to "etc/images/symbols",
including plus, minus, check-mark, star, etc.</code></pre>
<pre><code>Emacs now recognizes shebang lines that pass '-S'/'--split-string' to 'env'.
When visiting a script that invokes 'env -S INTERPRETER ARGS...' in
its shebang line, Emacs will now skip over 'env -S' and deduce the
major mode based on the interpreter after 'env -S'.</code></pre>
<p>Emacs uses a wide range of tools to infer the major mode to use. Filename is not the only way: Emacs will scan the file to try and determine the major mode if there is no obvious choice that matches its filename. Looking at <code>/usr/bin/env</code> is one such method.</p>
<pre><code>'insert-directory-program' is now a user option.
On *BSD and macOS systems, this user option now defaults to the "gls"
executable, if it exists.  This should remove the need to change its
value when installing GNU coreutils using something like ports or
Homebrew.</code></pre>
<pre><code>'write-region-inhibit-fsync' now defaults to t in interactive mode.
This is the default in batch mode since Emacs 24.</code></pre>
<pre><code>The default value of 'read-process-output-max' was increased to 65536.</code></pre>
<p>You can probably experiment with setting this even higher to batch up output from commands. Your mileage may vary, though. Mine is set to <code>1048576</code>.</p>
<pre><code>'url-gateway-broken-resolution' is now obsolete.
This option was intended for use on SunOS 4.x and Ultrix systems,
neither of which have been supported by Emacs since version 23.1.
The user option 'url-gateway-nslookup-program' and the command
'url-gateway-nslookup-host' are consequently also obsolete.

</code></pre>
<h2 id="editing-changes-in-emacs-30.1">Editing Changes in Emacs 30.1</h2>
<pre><code>New minor mode 'visual-wrap-prefix-mode'.
When enabled, continuation lines displayed for a wrapped long line
will receive a 'wrap-prefix' automatically computed from the line's
surrounding context, such that continuation lines are indented on
display as if they were filled with 'M-q' or similar.  Unlike 'M-q',
the indentation only happens on display, and doesn't change the buffer
text in any way.  The global minor mode
'global-visual-wrap-prefix-mode' enables this minor mode in all
buffers.

(This minor mode is the 'adaptive-wrap' ELPA package renamed and
lightly edited for inclusion in Emacs.)</code></pre>
<pre><code>New global minor mode 'kill-ring-deindent-mode'.
When enabled, text being saved to the kill ring will be de-indented by
the column number at its start.  For example, saving the entire
function call within an indented block:

foo ()
{
  long_function_with_several_arguments (argument_1_compute (),
                                        argument_2_compute (),
                                        argument_3_compute ());
}

will save this to the kill ring:

long_function_with_several_arguments (argument_1_compute (),
                                      argument_2_compute (),
                                      argument_3_compute ())

This omits the two columns of extra indentation that would otherwise be
copied from the second and third lines and saved to the kill ring.</code></pre>
<p>This is worth enabling if inconsistent kill-yank indentation annoys you. Doing this correctly, especially in whitespace sensitive languages, is really important in structured editing tools such as my package, <a href="https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter">Combobulate</a>.</p>
<pre><code>New command 'replace-regexp-as-diff'.
It reads a regexp to search for and a string to replace with, then
displays a buffer with replacements as diffs.  After reviewing the
changes in the output buffer you can apply the replacements as
a patch to the current file buffer.  There are also new commands
'multi-file-replace-regexp-as-diff' that shows as diffs replacements
in a list of specified files, and 'dired-do-replace-regexp-as-diff'
that shows as diffs replacements in the marked files in Dired.</code></pre>
<p>This is a very welcome addition for bulk text replacing. It’s a nervewracking thing to accept/reject changes and hope you didn’t screw it up. Having a dedicated diff window that works across multiple files is a superb addition to Emacs.</p>
<pre><code>New mode of prompting for register names and showing preview.
The new user option 'register-use-preview' can be customized to the
value t or 'insist' to request a different user interface of prompting for
register names and previewing the registers: Emacs will require
confirmation for overwriting the value of a register, and will show
the preview of registers without delay.  You can also customize this
new option to disable the preview completely.

The default value of 'register-use-preview' ('traditional') preserves the
behavior of Emacs 29 and before.  See the Info node "(emacs) Registers"
for more details about the new UI and its variants.</code></pre>
<p>I love registers, and I use them a lot. I use them because they require no forethought on my part to use: set and recall; it’s that simple. No fuss. If you want added distractions like confirmation prompts if you override a register? Go ahead and change the new option. If you like registers the way they are, then you don’t have to do anything.</p>
<pre><code>New advanced macro counter commands.
New commands have been added to implement advanced macro counter
functions.

The commands 'C-x C-k C-r l' and 'C-x C-k C-r s' load and save the
macro counter from and to a number register, respectively.

The commands 'C-x C-k C-r a =', 'C-x C-k C-r a &lt;', and 'C-x C-k C-r a &gt;'
compare the macro counter with the contents of a number register and
increment the counter by an optional prefix if the comparison succeeds.

The commands 'C-x C-k C-q =', 'C-x C-k C-q &lt;', and 'C-x C-k C-q &gt;'
compare the macro counter with an optional prefix and terminate the
macro if the comparison succeeds.</code></pre>
<p>Advanced indeed. Registers are capable of incrementing and decrementing a number already, and kmacro (Emacs’s keyboard macro facility) has its own internal counter (see <a href="https://www.masteringemacs.org/article/keyboard-macros-are-misunderstood">Keyboard Macros are Misunderstood</a>) also. Now you can switch values between them and also do simple comparisons. Combine it with the ability to physically move up or down a line; increment and decrement; and conditional termination, and I’m pretty sure kmacro close to Turing-complete.</p>
<pre><code>New mode 'kmacro-menu-mode' and new command 'list-keyboard-macros'.
The new command 'list-keyboard-macros' is the keyboard-macro version
of commands like 'list-buffers' and 'list-processes', creating a listing
of the currently existing keyboards macros using the new mode
'kmacro-menu-mode'.  It allows rearranging the macros in the ring,
duplicating them, deleting them, and editing their counters, formats,
and keys.</code></pre>
<p>Excellent. There’s already a kmacro ring for macros known to Emacs, but it’s a bit awkward. Now you can list the macros.</p>
<pre><code>On X, Emacs now supports input methods which perform "string conversion".
This means an input method can now ask Emacs to delete text
surrounding point and replace it with something else, as well as query
Emacs for surrounding text.  If your input method allows you to "undo"
mistaken compositions, this will now work as well.</code></pre>
<pre><code>New user option 'duplicate-region-final-position'.
It controls the placement of point and the region after duplicating a
region with 'duplicate-dwim'.</code></pre>
<pre><code>New user option 'mouse-prefer-closest-glyph'.
When enabled, clicking or dragging with the mouse will put the point
or start the drag in front of the buffer position corresponding to the
glyph with the closest X coordinate to the click or start of the drag.
In other words, if the mouse pointer is in the right half of a glyph,
point will be put after the buffer position corresponding to that glyph,
whereas if the mouse pointer is in the left half of a glyph, point
will be put in front the buffer position corresponding to that glyph.
By default this is disabled.</code></pre>
<pre><code>New pre-defined values for 'electric-quote-chars'.
The available customization options for 'electric-quote-chars' have been
updated with common pairs of quotation characters, including "‘", "’",
"“", "”", "«", "»", "‹", "›", "‚", "„", "「", "」", "『", and "』".
The default is unchanged.</code></pre>
<p>This is for <code>M-x electric-pair-mode</code>, which automatically pairs an opening character with its constituent closing character.</p>
<pre><code>'M-TAB' now invokes 'completion-at-point' in Text mode.
By default, Text mode no longer binds 'M-TAB' to 'ispell-complete-word'.
Instead, this mode arranges for 'completion-at-point', globally bound to
'M-TAB', to perform word completion as well.  You can have Text mode
binding 'M-TAB' to 'ispell-complete-word' as it did in previous Emacs
versions, or disable Ispell word completion in Text mode altogether, by
customizing the new user option 'text-mode-ispell-word-completion'.</code></pre>
<p><code>M-&lt;TAB&gt;</code> is also Alt+Tab. The key binding <code>C-M-i</code> is functionally equivalent.</p>
<h2 id="internationalization">Internationalization</h2>
<pre><code>Mode-line mnemonics for some coding-systems have changed.
The mode-line mnemonic for 'utf-7' is now the lowercase 'u', to be
consistent with the other encodings of this family.

The mode-line mnemonic for 'koi8-u' is now 'У', U+0423 CYRILLIC
CAPITAL LETTER U, to distinguish between this encoding and the
UTF-8/UTF-16 family.

If your terminal cannot display 'У', or if you want to get the old
behavior back for any other reason, you can do that using the
'coding-system-put' function.  For example, the following restores the
previous behavior of showing 'U' in the mode line for 'koi8-u':

    (coding-system-put 'koi8-u :mnemonic ?U)</code></pre>
<p>The mode line adopts a different character for the coding system in the active buffer. You can find it in the bottom left.</p>
<pre><code>'vietnamese-tcvn' is now a coding system alias for 'vietnamese-vscii'.
VSCII-1 and TCVN-5712 are different names for the same character
encoding.  Therefore, the duplicate coding system definition has been
dropped in favor of an alias.

The mode-line mnemonic for 'vietnamese-vscii' and its aliases is the
lowercase letter "v".</code></pre>
<pre><code>Users in CJK locales can control width of some non-CJK characters.
Some characters are considered by Unicode as "ambiguous" with respect
to their display width: either "full-width" (i.e., taking 2 columns on
display) or "narrow" (taking 1 column).  The actual width depends on
the fonts used for these characters by Emacs or (for text-mode frames)
by the terminal emulator.  Traditionally, font sets in CJK locales
were set up so as to display these characters as full-width, and thus
Emacs modified the char-width table in those locales to follow suit.
Lately, the tendency is to display these characters as narrow.  The
new user option 'cjk-ambiguous-chars-are-wide' allows users to control
whether Emacs considers these characters as full-width (the default)
or narrow (if the variable is customized to the nil value).

This setting affects the results of 'string-width' and similar
functions in CJK locales.</code></pre>
<pre><code>New input methods for the Urdu, Pashto, and Sindhi languages.
These languages are spoken in Pakistan and Afghanistan.</code></pre>
<pre><code>New input method "english-colemak".
This input method supports the Colemak keyboard layout.</code></pre>
<p>Input methods are really neat. You can switch to a ‘virtual keyboard’ that behaves like another language, letting you enter diacritics and complex unicode characters using your current keyboard’s layout. You are not limited to actual languages, either: there are input methods to help you enter LaTeX for example.</p>
<p>You can toggle the input method with <code>C-\</code> and with a prefix argument to set the input method type. I wrote about them in <a href="https://www.masteringemacs.org/article/diacritics-in-emacs">Olé! Diacritics in Emacs</a>. I even wrote my own input method for <a href="https://www.masteringemacs.org/article/inserting-emoji-input-methods">Inserting Emoji</a> just to highlight how powerful and simple the system is.</p>
<pre><code>Additional 'C-x 8' key translations for "æ" and "Æ".
These characters can now be input with 'C-x 8 a e' and 'C-x 8 A E',
respectively, in addition to the existing translations 'C-x 8 / e' and
'C-x 8 / E'.</code></pre>
<p>Wonderful news for people who prefer the original spelling of encyclopedia, and Danes, I suppose.</p>
<pre><code>New 'C-x 8' key translations for "low" quotes "„", and "‚".
These can now be entered with 'C-x , "' and 'C-x , ''.</code></pre>
<pre><code>New German language 'C-x 8' key translations for quotation marks.
The characters "„", "“", and "”" can now be entered with 'C-x 8 v',
'C-x 8 b' and 'C-x 8 n'.  The single versions "‚", "‘", and "’" can now
be entered with 'C-x 8 V', 'C-x 8 B' and 'C-x 8 N'.  These characters
are used for the official German quoting style.  Using them requires
activating German language support via 'iso-transl-set-language'.</code></pre>
<pre><code>"latin-prefix" and "latin-postfix" quotation marks additions.
These input methods can now produce single, double and "low" left and
right quotation marks:

    "‘", "’", "“", "”", "„", and "‚"

by using "[", "]", and "," for "left", "right", and "low" respectively
to modify "'" and """.</code></pre>
<pre><code>"latin-prefix" and "latin-postfix" guillemets support.
These input methods can now produce single guillemets "‹" and "›".  For
"latin-prefix" use "~~&lt;" and "~~&gt;", for "latin-postfix" use "&lt;~" and
"&gt;~".  Double guillemets ("«" and "»") were already supported.</code></pre>
<pre><code>New French language 'C-x 8' key translations for "‹" and "›".
These characters can now be entered using 'C-x 8 ~ &lt;' and 'C-x 8 ~ &gt;',
respectively, after activating French language support via
'iso-transl-set-language'.  Double guillemets were already supported via
'C-x 8 &lt;' and 'C-x 8 &gt;'</code></pre>
<pre><code>Additional 'C-x 8' key translation for Euro "€" currency symbol.
This can now be entered using 'C-x 8 E' in addition to the existing
'C-x 8 * E' translation.</code></pre>
<h2 id="changes-in-specialized-modes-and-packages-in-emacs-30.1">Changes in Specialized Modes and Packages in Emacs 30.1</h2>
<h3 id="outline-mode">Outline mode</h3>
<p>Outline mode is a cut-down outliner for collapsing and expanding headings.</p>
<pre><code>New commands to show/hide outlines by regexp.
'C-c / h' ('outline-hide-by-heading-regexp') asks for a regexp and then
hides the body lines of all outlines whose heading lines match the
regexp.  'C-c / s' ('outline-show-by-heading-regexp') does the inverse:
it shows the bodies of outlines that matched a regexp.</code></pre>
<pre><code>'outline-minor-mode' is supported in tree-sitter major modes.
It can be used in all tree-sitter major modes that set either the
variable 'treesit-simple-imenu-settings' or 'treesit-outline-predicate'.</code></pre>
<p>Excellent news, and likely to be far more robust as it uses tree-sitter’s nodes to determine what to hide and show.</p>
<h3 id="info">Info</h3>
<p>Info mode is Emacs’s implementation of the TexInfo hypertext viewer.</p>
<pre><code>New user option 'Info-url-alist'.
This user option associates manual names with URLs.  It affects the
'Info-goto-node-web' command.  By default, associations for all
Emacs-included manuals are set.  Further associations can be added for
arbitrary Info manuals.</code></pre>
<pre><code>Emacs can now display Info manuals compressed with 'lzip'.
This requires the 'lzip' program to be installed on your system.</code></pre>
<h3 id="gud-grand-unified-debugger">GUD (Grand Unified Debugger)</h3>
<p>GUD is a user interface for debuggers such as GDB.</p>
<pre><code>New user option 'gud-highlight-current-line'.
When enabled, GUD will visually emphasize the line being executed upon
pauses in the debuggee's execution, such as those occasioned by
breakpoints being hit.</code></pre>
<pre><code>New command 'lldb'.
Run the LLDB debugger, analogous to the 'gud-gdb' command.</code></pre>
<pre><code>Variable order and truncation can now be configured in 'gdb-many-windows'.
The new user option 'gdb-locals-table-row-config' allows users to
configure the order and max length of various properties in the local
variables buffer when using 'gdb-many-windows'.

By default, this user option is set to write the properties in the order:
'name', 'type' and 'value', where the 'name' and 'type' are truncated to 20
characters, and the 'value' is truncated according to the value of
'gdb-locals-value-limit'.

If you want to get back the old behavior, set the user option to the value

    (setopt gdb-locals-table-row-config
            `((type . 0) (name . 0) (value . ,gdb-locals-value-limit)))</code></pre>
<pre><code>New user option 'gdb-display-io-buffer'.
If this is nil, command 'gdb' will neither create nor display a separate
buffer for the I/O of the program being debugged, but will instead
redirect the program's interaction to the GDB execution buffer.  The
default is t, to preserve previous behavior.</code></pre>
<h3 id="grep">Grep</h3>
<p>Grep (or rather the interface for talking to and displaying the results from <code>grep</code>) is a powerful feature in Emacs with a wide range of commands.</p>
<pre><code>New user option 'grep-use-headings'.
When non-nil, the output of Grep is split into sections, one for each
file, instead of having file names prefixed to each line.  It is
equivalent to the '--heading' option of some tools such as 'git grep'
and 'rg'.  The headings are displayed using the new 'grep-heading' face.
The default is nil.</code></pre>
<p>Good news if you prefer the heading system used by tools such as <code>rg</code>. I have not tried it yet, but I wonder how easy it is to bulk edit the output of a grep command when it is in header mode.</p>
<h3 id="compilation-mode">Compilation mode</h3>
<p>Compilation mode (via <code>M-x compile</code> usually) is Emacs’s interface for talking to not just compilers but any tool that emits structured output.</p>
<pre><code>The 'omake' matching rule is now disabled by default.
This is because it partly acts by modifying other rules which may
occasionally be surprising.  It can be re-enabled by adding 'omake' to
'compilation-error-regexp-alist'.</code></pre>
<pre><code>Lua errors and stack traces are now recognized.
Compilation mode now recognizes Lua language errors and stack traces.
Every Lua error is recognized as a compilation error, and every Lua
stack frame is recognized as a compilation info.</code></pre>
<p>Emacs already has a huge range of compilation rules, so I’m surprised it didn’t have it for Lua, given how popular it is.</p>
<h3 id="project">Project</h3>
<p>Project is one of many, many file project solutions built into Emacs, and arguably the best one to use. See <code>C-x p C-h</code>.</p>
<pre><code>New user option 'project-mode-line'.
When non-nil, display the name of the current project on the mode
line.  Clicking 'mouse-1' on the project name pops up the project
menu.  The default value is nil.</code></pre>
<p>If you’re not strapped for space, why not enable this?</p>
<pre><code>New user option 'project-file-history-behavior'.
Customizing it to 'relativize' makes commands like 'project-find-file'
and 'project-find-dir' display previous history entries relative to
the current project.</code></pre>
<pre><code>New user option 'project-key-prompt-style'.
The look of the key prompt in the project switcher has been changed
slightly.  To get the previous one, set this option to 'brackets'.</code></pre>
<pre><code>Function 'project-try-vc' tries harder to find the responsible VCS.
When 'project-vc-extra-root-markers' is non-nil, and causes a
subdirectory project to be detected which is not a VCS root, Project now
additionally traverses the parent directories until a VCS root is found
(if any), so that the ignore rules for that repository are used, and
the file listing's performance is still optimized.</code></pre>
<p>Root markers are used to find the boundaries of a project (for example the <code>.git</code> directory, or maybe a file such as a Makefile), and that works well enough for simple use cases. You can tell Emacs to look for other things in addition to its builtin rules, and this is where the contract of a root marker breaks down a little, particularly if you have a repo and another non-repo marker inside of that.</p>
<pre><code>New commands 'project-any-command' and 'project-prefix-or-any-command'.
The former is now bound to 'C-x p o' by default.
The latter is designed primarily for use as a value of
'project-switch-commands'.  If instead of a short menu you prefer to
have access to all keys defined inside 'project-prefix-map', as well
as global bindings (to run other commands inside the project root),
you can add this to your init script:

    (setopt project-switch-commands #'project-prefix-or-any-command)</code></pre>
<p>This is effectively a way of executing a key bindings from the root directory of the current buffer’s root project.</p>
<pre><code>New variable 'project-files-relative-names'.
If it is non-nil, 'project-files' can return file names relative to the
project root.  Project backends can use this to improve the performance
of their 'project-files' implementation.</code></pre>
<h3 id="vc">VC</h3>
<p>VC is Emacs’s excellent generic version control interface. If you do not use <a href="https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git">Magit, an Emacs mode for Git</a>, or if you use a source control that is not git, then I highly recommend you sit down and learn how to use VC. It’s really excellent.</p>
<pre><code>Log-Edit buffers now display a tool bar.
This tool bar contains items for committing log entries and editing or
generating log entries, among other editing operations.</code></pre>
<p>I’ve long advocated using the menu bar because telling beginners to turn it off is <a href="https://www.masteringemacs.org/article/bad-emacs-advice">Bad Emacs Advice</a>. The toolbar is harder to justify turning on as it is a little bit threadbare. Having said that, making it even more contextual is still a very positive thing indeed.</p>
<pre><code>New user option 'vc-git-shortlog-switches'.
This is a string or a list of strings that specifies the Git log
switches for shortlogs, such as the one produced by 'C-x v L'.
'vc-git-log-switches' is no longer used for shortlogs.</code></pre>
<pre><code>New value 'no-backend' for user option 'vc-display-status'.
With this value only the revision number is displayed on the mode-line.</code></pre>
<pre><code>Obsolete command 'vc-switch-backend' re-added as 'vc-change-backend'.
The command was previously obsoleted and unbound in Emacs 28.</code></pre>
<p>It is rare indeed for a command to get obsoleted and the unobsoleted.</p>
<pre><code>Support for viewing VC change history across renames.
When a fileset's VC change history ends at a rename, 'C-x v l' now
prints the old name(s) and shows a button which jumps to the history of
the files under the old names.  This feature is supported for Git and
Hg.  Naturally, 'vc-git-print-log-follow' should be nil for this to work
(or '--follow' should not be in 'vc-hg-log-switches', in Hg's case).
Unlike when the '--follow' switch is used, commands to see the diff of
the old revision ('d'), to check out an old file version ('f') or to
annotate it ('a'), also work on revisions which precede renames.</code></pre>
<pre><code>'vc-annotate' now abbreviates the Git revision in the buffer name.
When using the Git backend, 'vc-annotate' will use an abbreviated
revision identifier in its buffer name.  To restore the previous
behavior, set user option 'vc-annotate-use-short-revision' to nil.</code></pre>
<pre><code>New user option 'vc-git-file-name-changes-switches'.
It allows tweaking the thresholds for rename and copy detection.</code></pre>
<pre><code>VC Directory buffers now display the upstream branch in Git repositories.
The "upstream branch" is the branch from which 'vc-pull' fetches changes
by default.  In Git terms, the upstream branch of branch B is determined
by configuration variables 'branch.B.remote' and 'branch.B.merge'.

When these configuration variables are set for the current branch, the
VC Directory buffer will show the corresponding upstream branch under
the "Tracking" header.</code></pre>
<h3 id="diff-mode">Diff mode</h3>
<p>Diff mode is one of several modes for interacting with and browsing <code>.diff</code> files.</p>
<pre><code>New user option 'diff-refine-nonmodified'.
When this is non-nil, 'diff-refine-hunk' will highlight lines that were
added or removed in their entirety (as opposed to modified lines, where
some parts of the line were modified), using the same faces as for
highlighting the words added and removed within modified lines.  The
default value is nil.</code></pre>
<pre><code>'diff-ignore-whitespace-hunk' can now be applied to all hunks.
When called with a non-nil prefix argument,
'diff-ignore-whitespace-hunk' now iterates over all the hunks in the
current diff, regenerating them without whitespace changes.</code></pre>
<p>Very useful in Lisp, in my opinion, where a change of indentation can easily happen when you change something else. I have git set to ignore whitespace by default to avoid indentation changes gumming up the staging area.</p>
<pre><code>New user option 'diff-ignore-whitespace-switches'.
This allows changing which type of whitespace changes are ignored when
regenerating hunks with 'diff-ignore-whitespace-hunk'.  Defaults to
the previously hard-coded "-b".</code></pre>
<pre><code>New command 'diff-apply-buffer' bound to 'C-c RET a'.
It applies the diff in the entire diff buffer and
saves all modified file buffers.</code></pre>
<p>Good all-round command and saves having to do multiple keystrokes to achieve the same effect.</p>
<h3 id="dired">Dired</h3>
<p>Dired is Emacs’s all-singing, all-dancing directory and file editor, bound to <code>C-x d</code> and <code>M-x dired</code>.</p>
<pre><code>New user option 'dired-movement-style'.
When non-nil, make 'dired-next-line', 'dired-previous-line',
'dired-next-dirline', 'dired-prev-dirline' skip empty lines.
It also controls how to move point when encountering a boundary
(e.g., if every line is visible, invoking 'dired-next-line' at
the last line will move to the first line).  The default is nil.</code></pre>
<p>Oh, this is much-needed. Here’s how it works: you can insert the contents of a directory into an existing dired buffer (find a directory and tap <code>i</code>) and act on the files across the directory boundaries as though they were one directory – very powerful, and it means you can use <a href="https://www.masteringemacs.org/article/dired-shell-commands-find-xargs-replacement">dired to replace find &amp; xargs</a> – but the <code>p</code> and <code>n</code> commands to move between files does not jump between these virtual directories, and so you’re stuck having to move point between a bunch of dead space. Until now, that is. I recommend you set it to <code>bounded</code> or <code>cycle</code>.</p>
<pre><code>New user option 'dired-filename-display-length'.
It is an integer representing the maximum display length of file names.
The middle part of a file name whose length exceeds the restriction is
hidden and an ellipsis is displayed instead.  A value of 'window'
means using the right edge of window as the display restriction.  The
default is nil.</code></pre>
<p>If you squeeze dired into a side bar window, you can now truncate filenames to make them fit to the size of the window, which is a good quality of life improvement.</p>
<pre><code>New user option 'shell-command-guess-functions'.
It defines how to populate a list of commands available
for 'M-!', 'M-&amp;', '!', '&amp;' and the context menu "Open With"
based on marked files in Dired.  Possible backends are
'dired-guess-default', MIME types, XDG configuration
and a universal command such as "open" or "start"
that delegates to the OS.</code></pre>
<p>Emacs has several ways of guessing the right command to run on a filename, and they are annoyingly different and only available in some parts of Emacs and not others. This is a clear attempt to clean up this mess and offer a unified way of picking the right command to run.</p>
<pre><code>New command 'dired-do-open'.
This command is bound to 'E' (mnemonics "External").  Also it can be
used by clicking "Open" in the context menu; it "opens" the marked or
clicked on files according to the OS conventions.  For example, on
systems supporting XDG, this runs 'xdg-open' on the files.</code></pre>
<p>Excellent addition. I used to do <code>!</code> to do this, but now it has its own key.</p>
<pre><code>New variable 'dired-guess-shell-alist-optional'.
It contains commands for external viewers and players for various media
formats, moved to this list from 'dired-guess-shell-alist-default'.</code></pre>
<p>Worth a look if you want Emacs to open your media files in other tools than its defaults.</p>
<pre><code>The default value of 'dired-omit-size-limit' was increased.
After performance improvements to omitting in large directories, the new
default value is 300k, up from 100k.  This means 'dired-omit-mode' will
omit files in directories whose directory listing is up to 300 kilobytes
in size.</code></pre>
<p>Omit mode hides useless files based on regexp filters. Great way to hide backup files, compiler detritus and more. You may have to <code>(require 'dired-x)</code> first.</p>
<pre><code>'dired-listing-switches' handles connection-local values if exist.
This allows you to customize different switches for different remote machines.</code></pre>
<p>This relates to Tramp, Emacs’s remote file editing protocol. Because Tramp sends commands to the remote host, you can now customize how dired should query for files on the remote file system.</p>
<h3 id="ediff">Ediff</h3>
<p>Ediff is another diff tool in Emacs, albeit a far more advanced one. It has a wide range of entrypoints: <code>C-h a ediff</code>.</p>
<pre><code>New user option 'ediff-floating-control-frame'.
If non-nil, try making the control frame be floating rather than tiled.

Many X tiling window managers make the Ediff control frame a tiled
window equal in size to the main Emacs frame, which works poorly.
This option is useful to set if you use such a window manager.</code></pre>
<p>Ediff’s achilles’ heel is its awkward frame that it uses as a control interface; but now it at least grants succor to people who use tiling window managers.</p>
<h3 id="buffer-selection">Buffer Selection</h3>
<p>Buffer selection, not to be confused with <code>C-x b</code>, is one of, ah, several buffer switching tools in Emacs. Try it with <code>M-x bs-show</code>.</p>
<pre><code>New user option 'bs-default-action-list'.
You can now configure how to display the "*buffer-selection*" buffer
using this new option.  (Or set 'display-buffer-alist' directly.)</code></pre>
<h3 id="eshell">Eshell</h3>
<p>Eshell is an Emacs shell written entirely in Emacs. It’s worth <a href="https://www.masteringemacs.org/article/complete-guide-mastering-eshell">Mastering Eshell</a> if you want an all-Emacs command line experience.</p>
<pre><code>You can now run Eshell scripts in batch mode.
By adding the following interpreter directive to an Eshell script, you
can make it executable like other shell scripts:

    #!/usr/bin/env -S emacs --batch -f eshell-batch-file</code></pre>
<p>If you thought someone using korn or c shell wasn’t bad enough, now you can frustrate your coworkers by writing your shell scripts in Eshells’ own zsh-like language.</p>
<pre><code>New builtin Eshell command 'compile'.
This command runs another command, sending its output to a compilation
buffer when the command would output interactively.  This can be useful
when defining aliases so that they produce a compilation buffer when
appropriate, but still allow piping the output elsewhere if desired.
For more information, see the "(eshell) Built-ins" node in the Eshell
manual.</code></pre>
<p>Eshell has a huge range of commands that it exposes to its shell, only to intercept them and pass the input and output to a dedicated Emacs function. See <code>C-u C-h a eshell/</code>.</p>
<pre><code>Eshell's 'env' command now supports running commands.
Like in many other shells, Eshell's 'env' command now lets you run a
command passed as arguments to 'env'.  If you pass any initial
arguments of the form 'VAR=VALUE', 'env' will first set 'VAR' to
'VALUE' before running the command.</code></pre>
<pre><code>Eshell's 'umask' command now supports setting the mask symbolically.
Now, you can pass an argument like "u+w,o-r" to Eshell's 'umask'
command, which will give write permission for owners of newly-created
files and deny read permission for users who are not members of the
file's group.  See the Info node "(coreutils) File permissions" for
more information on this notation.</code></pre>
<pre><code>Performance improvements for interactive output in Eshell.
Interactive output in Eshell should now be significantly faster,
especially for commands that can print large amounts of output
(e.g. "cat").  For external commands, Eshell saves time by only looking
for password prompts in the last 256 characters of each block of output.
To restore the previous behavior when checking for password prompts, set
'eshell-password-prompt-max-length' to 'most-positive-fixnum'.</code></pre>
<pre><code>Eshell built-in commands can now display progress.
Eshell built-in commands like "cat" and "ls" now update the display
periodically while running to show their progress.</code></pre>
<pre><code>New special reference type '#&lt;marker POSITION BUFFER&gt;'.
This special reference type returns a marker at 'POSITION' in
'BUFFER'.  You can insert it by typing or using the new interactive
command 'eshell-insert-marker'.  You can also insert special
references of any type using the new interactive command
'eshell-insert-special-reference'.  See the "(eshell) Arguments" node
in the Eshell manual for more details.</code></pre>
<pre><code>New splice operator for Eshell dollar expansions.
Dollar expansions in Eshell now let you splice the elements of the
expansion in-place using '$@expr'.  This makes it easier to fill lists
of arguments into a command, such as when defining aliases.  For more
information, see the "(eshell) Dollars Expansion" node in the Eshell
manual.</code></pre>
<p>Eshell’s expansion system is inspired by zsh’s, though they’re not at all interchangeable, as Eshell effectively passes things to elisp functions internally, arguments and all, so being able to split, splice and otherwise manipulate how entries are fed to the underlying commands is very important.</p>
<pre><code>You can now splice Eshell globs in-place into argument lists.
By setting 'eshell-glob-splice-results' to a non-nil value, Eshell
will expand glob results in-place as if you had typed each matching
file name individually.  For more information, see the "(eshell)
Globbing" node in the Eshell manual.</code></pre>
<pre><code>Eshell now supports negative numbers and ranges for indices.
Now, you can retrieve the last element of a list with '$my-list[-1]'
or get a sublist of elements 2 through 4 with '$my-list[2..5]'.  For
more information, see the "(eshell) Dollars Expansion" node in the
Eshell manual.</code></pre>
<pre><code>Eshell commands can now be explicitly-remote (or local).
By prefixing a command name in Eshell with a remote identifier, like
"/ssh:user@remote:whoami", you can now run commands on a particular
host no matter your current directory.  Likewise, you can run a
command on your local system no matter your current directory via
"/local:whoami".  For more information, see the "(eshell) Remote Access"
node in the Eshell manual.</code></pre>
<pre><code>Eshell's '$UID' and '$GID' variables are now connection-aware.
Now, when expanding '$UID' or '$GID' in a remote directory, the value
is the user or group ID associated with the remote connection.</code></pre>
<p>One cool feature of Eshell is that you can <code>cd</code> into a remote system using Tramp – for example <code>cd /ssh:homer@powerplant:/etc/</code> – and then operate on the remote machine through Eshell and Tramp as though it were ‘local’. Really powerful, but sometimes there are cracks in the machinery, such as the case of the user and group id environment variables not being correct.</p>
<pre><code>Eshell now uses 'field' properties in its output.
In particular, this means that pressing the '&lt;home&gt;' key moves the
point to the beginning of your input, not the beginning of the whole
line.  If you want to go back to the old behavior, add something like
this to your configuration:

    (keymap-set eshell-mode-map "&lt;home&gt;" #'eshell-bol-ignoring-prompt)

This also means you no longer need to adjust 'eshell-prompt-regexp'
when customizing your Eshell prompt.</code></pre>
<p>I long ago abandoned using <code>C-a</code> and friends to move the beginning of line, preferring <code>M-m</code> instead (as it skips forward past whitespace after moving to the beginning of the line) but this command obviously does not respect the prompt. So if you use <code>M-m</code>, just rebind it to the same key as <code>C-a</code>.</p>
<pre><code>You can now properly unload Eshell.
Calling '(unload-feature 'eshell)' no longer signals an error, and now
correctly unloads Eshell and all of its modules.</code></pre>
<pre><code>'eshell-read-aliases-list' is now an interactive command.
After manually editing 'eshell-aliases-file', you can use this command
to load the edited aliases.</code></pre>
<p>Aliases here referring to the same aliasing you can do in other shells.</p>
<pre><code>'rgrep' is now a builtin Eshell command.
Running 'rgrep' in Eshell now uses the Emacs grep facility instead of
calling external rgrep.</code></pre>
<p><code>M-x rgrep</code> is a command I use all the time when I want more specificity around searching than what a tool like <code>rg</code> gives me. <code>grep</code> already works great in Eshell, so it’s nice to see that <code>rgrep</code> does so too.</p>
<pre><code>If a command exits abnormally, the Eshell prompt now shows its exit code.</code></pre>
<p>I added this to my bash prompt decades ago, as I find it invaluable when I want to compare exit codes in scripts.</p>
<pre><code>New user option 'eshell-history-append'.
If non-nil, each Eshell session will save history by appending new
entries of that session to the history file rather than overwriting
the file with the whole history of the session.  The default is nil.</code></pre>
<h3 id="pcomplete">Pcomplete</h3>
<p>Pcomplete is the completer tool originally built for Eshell, but now has uses elsewhere. It’s a pretty nifty little completion engine, as I demonstrate in <a href="https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs">PComplete: Context-Sensitive Completion in Emacs</a></p>
<pre><code>New user option 'pcomplete-remote-file-ignore'.
When this option is non-nil, remote file names are not completed by
Pcomplete.  Packages, like 'shell-mode', could set this in order to
suppress remote file name completion at all.</code></pre>
<pre><code>Completion for the 'doas' command has been added.
Command completion for 'doas' in Eshell and Shell mode will now work.</code></pre>
<p>The mooted successor to <code>sudo</code>.</p>
<h3 id="shell-mode">Shell mode</h3>
<p>This is the shell I actually use the most day to day. Delightfully dumb and it behaves exactly like a souped-up Emacs buffer. See <a href="https://www.masteringemacs.org/article/running-shells-in-emacs-overview">Running Shells and Terminal Emulators in Emacs</a> if you want to know what all the differences are.</p>
<pre><code>New user option 'shell-get-old-input-include-continuation-lines'.
When this user option is non-nil, 'shell-get-old-input' ('C-RET')
includes multiple shell "\" continuation lines from command output.
Default is nil.</code></pre>
<pre><code>New user option 'shell-history-file-name'.
When this user option is set to t, 'shell-mode' does not read the shell
history file.  Setting this user option to a string specifies the name
of the shell history file to be read.  A nil value triggers reading the
environment variable 'HISTFILE'.

In a 'shell' buffer, this user option is connection-local.</code></pre>
<p>This is a nice change as Emacs will of course keep its own history (see <a href="https://www.masteringemacs.org/article/shell-comint-secrets-history-commands">Shell &amp; Comint Secrets: History commands</a>) but that history does not persist under normal circumstances. If you’re using a non-default history file for your shell and you want Emacs to respect it, now you can.</p>
<pre><code>Performance improvements for interactive output.
Interactive output in Shell mode now scans more selectively for password
prompts by only examining the last 256 characters of each block of
output, reducing the time spent when printing large amounts of output.
To restore the old behavior, set 'comint-password-prompt-max-length' to
'most-positive-fixnum'.</code></pre>
<p>Anything that speeds up comint is a good thing in my book.</p>
<h3 id="prog-mode">Prog mode</h3>
<p>Prog mode is a generic major mode that programming modes should try to inherit from. It is not intended for normal users.</p>
<pre><code>New command 'prog-fill-reindent-defun'.
This command either fills a single paragraph in a defun, such as a
docstring, or a comment, or (re)indents the surrounding defun if point
is not in a comment or a string.  By default, it is bound to 'M-q' in
'prog-mode' and all its descendants.</code></pre>

<p>Imenu is a lookup feature for structured elements in the current buffer, such as function and class names in code, and headings and sub-headings in text.</p>
<pre><code>New user option 'imenu-flatten'.
It controls whether to flatten the list of sections in an imenu, and
how to display the sections in the flattened list.</code></pre>
<p>If you use a completion mechanism that makes accessing nested elements hard in imenu, you can now request that it flattens the hierarchy.</p>
<pre><code>The sort order of Imenu completions can now be customized.
You can customize the user option 'completion-category-overrides'
and set 'display-sort-function' for the category 'imenu'.</code></pre>
<h3 id="which-function-mode">Which Function mode</h3>
<p>Which function shows the current function in the mode line by default. It works anywhere <code>M-x imenu</code> works.</p>
<pre><code>Which Function mode can now display function names on the header line.
The new user option 'which-func-display' allows choosing where the
function name is displayed.  The default is 'mode' to display in the
mode line.  'header' will display in the header line;
'mode-and-header' displays in both the header line and mode line.</code></pre>
<p>The mode line is crowded and often truncated if you split your windows. Having another place to put this information is useful.</p>
<pre><code>New user option 'which-func-update-delay'.
This replaces the user option 'idle-update-delay', which was previously
used to control the delay before 'which-function-mode' updated its
display.  The user option 'idle-update-delay', which was only used by
Which Function mode, is now obsolete.</code></pre>
<h3 id="tramp">Tramp</h3>
<p>Tramp is Emacs’s remote file editing facility.</p>
<pre><code>Tramp methods can be optional.
An optional connection method is not enabled by default.  The user must
enable it explicitly by the 'tramp-enable-method' command.  The existing
methods "fcp", "krlogin", " ksu" and "nc" are optional now.</code></pre>
<pre><code>New optional connection method "androidsu".
This provides access to system files with elevated privileges granted by
the idiosyncratic 'su' implementations and system utilities customary on
Android.</code></pre>
<p>Tramp supports a dizzying array of “connection” methods, including things that aren’t “connections” in the traditional sense, such as <code>sudo</code> and now <code>androidsu</code>.</p>
<pre><code>New optional connection method "run0".
This connection method is similar to "sudo", but it uses the 'systemd'
framework internally.</code></pre>
<pre><code>New connection methods "dockercp" and "podmancp".
These are the external methods counterparts of "docker" and "podman".</code></pre>
<p>Tramp added native docker support a version or two ago, which is super handy for editing or viewing stuff inside a container from the comfort of your own Emacs.</p>
<pre><code>New optional connection methods for containers.
There are new optional connection methods "toolbox", "distrobox",
"flatpak", "apptainer" and "nspawn".  They allow accessing system
containers provided by Toolbox or Distrobox, sandboxes provided by
Flatpak, instances managed by Apptainer, or accessing systemd-based
light-weight containers..</code></pre>
<p>Good to see more support for namespace-based container solutions other than docker.</p>
<pre><code>Connection method "kubernetes" supports now optional container name.
The host name for Kubernetes connections can be of kind [CONTAINER.]POD,
in order to specify a dedicated container.  If there is just the pod
name, the first container in the pod is taken.  The new user options
'tramp-kubernetes-context' and 'tramp-kubernetes-namespace' allow
accessing pods with different context or namespace but the default one.</code></pre>
<p>Tramp can chain connections, so you can connect to a bastion host first before you connect to kubernetes pods.</p>
<pre><code>Rename 'tramp-use-ssh-controlmaster-options' to 'tramp-use-connection-share'.
The old name still exists as obsolete variable alias.  This user
option controls now connection sharing for both ssh-based and
plink-based methods.  It allows the values t, nil, and 'suppress'.
The latter suppresses also "ControlMaster" settings in the user's
"~/.ssh/config" file, or connection share configuration in PuTTY
sessions, respectively.</code></pre>
<p>You absolutely must enable connection sharing (controlmaster) if you use ssh. It makes a huge difference in performance.</p>
<pre><code>New command 'tramp-cleanup-some-buffers'.
It kills only a subset of opened remote buffers, subject to the user
option 'tramp-cleanup-some-buffers-hook'.</code></pre>
<pre><code>New command 'inhibit-remote-files'.
This command disables the handling of file names with the special
remote file name syntax.  It should be applied only when remote files
won't be used in this Emacs instance.  It provides a slightly improved
performance of file name handling in Emacs.</code></pre>
<pre><code>New macro 'without-remote-files'.
This macro could wrap code which handles local files only.  Due to the
temporary deactivation of remote files, it results in a slightly
improved performance of file name handling in Emacs.</code></pre>
<pre><code>New user option 'tramp-completion-multi-hop-methods'.
It contains a list of connection methods for which completion should
be attempted at the end of a multi-hop chain.  This allows completion
candidates to include a list of, for example, containers running on a
remote docker host.</code></pre>
<p>Oh, cool! One common criticism I had of multi-hop/chaining connections is that you really need to know what you’re looking for when you are writing out these multi-hop connections, as the completion support is non-existent. Good to see that Tramp will now attempt to complete via the multi-hop links you have already written. Neat!</p>
<pre><code>New command 'tramp-revert-buffer-with-sudo'.
It reverts the current buffer to visit with "sudo" permissions.  The
buffer must either visit a file, or it must run 'dired-mode'.  Another
method but "sudo" can be configured with user option
'tramp-file-name-with-method'.</code></pre>
<p>I’ve had a snippet of code called <code>sudo</code> that does exactly this for what must be a decade plus now. Now it’s built in, albeit with a harder-to-remember name.</p>
<pre><code>Direct asynchronous processes are indicated by a connection-local variable.
If direct asynchronous processes shall be used, set the connection-local
variable 'tramp-direct-async-process' to a non-nil value.  In previous
Emacs versions this was indicated by the connection property
"direct-async-process".  That connection property (though not connection
properties and 'tramp-connection-properties' in general) is now
deprecated.  See the Tramp manual "(tramp) Improving performance of
asynchronous remote processes".</code></pre>
<p>If you have performance issues with Tramp, you should try this out.</p>
<pre><code>Direct asynchronous processes use 'tramp-remote-path'.
When a direct asynchronous process is invoked, it uses 'tramp-remote-path'
for setting the remote 'PATH' environment variable.</code></pre>
<h3 id="shr">SHR</h3>
<p>SHR is Emacs’s HTML rendering engine that powers EWW, the Emacs Web Wowser.</p>
<pre><code>New user option 'shr-fill-text'.
When 'shr-fill-text' is non-nil (the default), SHR will fill text
according to the width of the window.  If you customize it to nil, SHR
will leave the text as-is; in that case, EWW will automatically enable
'visual-line-mode' when displaying a page so that long lines are
visually wrapped at word boundaries.</code></pre>
<h3 id="eww">EWW</h3>
<p><code>M-x eww</code> is Emacs’s builtin web browser.</p>
<pre><code>New mouse bindings in EWW buffers.
Certain form elements that were displayed as buttons, yet could only be
activated by keyboard input, are now operable using 'mouse-2'.  With
"Submit" buttons, this triggers submission of the form, while clicks on
other classes of buttons either toggle their values or prompt for user
input, as the case may be.</code></pre>
<pre><code>EWW text input fields and areas are now fields.
In consequence, movement commands and OS input method features now
recognize and confine their activities to the text input field around
point.  See also the Info node "(elisp) Fields".</code></pre>
<p>Fields here meaning the widget system that Emacs has built in.</p>
<pre><code>'eww-open-file' can now display the file in a new buffer.
By default, the command reuses the "*eww*" buffer, but if called with
the new argument NEW-BUFFER non-nil, it will use a new buffer instead.
Interactively, invoke 'eww-open-file' with a prefix argument to
activate this behavior.</code></pre>
<pre><code>'eww' URL or keyword prompt now has tab completion.
The interactive minibuffer prompt when invoking 'eww' now has support
for tab completion.</code></pre>
<pre><code>'eww' URL and keyword prompt now completes suggested URIs and bookmarks.
The interactive minibuffer prompt when invoking 'eww' now provides
completions from 'eww-suggest-uris'.  'eww-suggest-uris' now includes
bookmark URIs.</code></pre>
<pre><code>New command 'eww-copy-alternate-url'.
It copies an alternate link on the page currently visited in EWW into
the kill ring.  Alternate links are optional metadata that HTML pages
use for linking to their alternative representations, such as translated
versions or associated RSS feeds.  It is bound to 'A' by default.</code></pre>
<pre><code>'eww-open-in-new-buffer' supports the prefix argument.
When invoked with the prefix argument ('C-u'),
'eww-open-in-new-buffer' will not make the new buffer the current one.
This is useful for continuing reading the URL in the current buffer
when the new URL is fetched.</code></pre>
<pre><code>History navigation in EWW now behaves as in other browsers.
Previously, when navigating back and forward through page history, EWW
would add a duplicate entry to the end of the history list each time.
This made it impossible to navigate to the "end" of the history list.
Now, navigating through history in EWW simply changes your position in
the history list, allowing you to reach the end as expected.  In
addition, when browsing to a new page from a "historical" one (i.e., a
page loaded by navigating back through history), EWW deletes the history
entries newer than the current page.  To change the behavior when
browsing from "historical" pages, you can customize
'eww-before-browse-history-function'.</code></pre>
<pre><code>'eww-readable' now toggles display of the readable parts of a web page.
When called interactively, 'eww-readable' toggles whether to display
only the readable parts of a page or the full page.  With a positive
prefix argument, it always displays the readable parts, and with a zero
or negative prefix, it always displays the full page.</code></pre>
<p>This feature has been around for ages, and it’s great if you want to remove all the chaff from a page. Note that the only real change here is that it toggles.</p>
<pre><code>New user option 'eww-readable-urls'.
This is a list of regular expressions matching the URLs where EWW should
display only the readable parts by default.  For more details, see
"(eww) Basics" in the EWW manual.</code></pre>
<p>Great stuff if you regularly visit pages that require toggling on readable mode.</p>
<pre><code>New user option 'eww-readable-adds-to-history'.
When non-nil (the default), calling 'eww-readable' adds a new entry to
the EWW page history.</code></pre>
<h3 id="go-ts-mode">Go-ts mode</h3>
<p>This is the tree-sitter version for Go.</p>
<pre><code>New command 'go-ts-mode-docstring'.
This command adds a docstring comment to the current defun.  If a
comment already exists, point is only moved to the comment.  It is
bound to 'C-c C-d' in 'go-ts-mode'.</code></pre>
<h3 id="man-mode">Man mode</h3>
<p>Man referring here to the manual page tool <code>man</code>.</p>
<pre><code>New user option 'Man-prefer-synchronous-call'.
When this is non-nil, run the 'man' command synchronously rather than
asynchronously (which is the default behavior).</code></pre>
<pre><code>New user option 'Man-support-remote-systems'.
This option controls whether the man page is formatted on the remote
system when the current buffer's default-directory is remote.  You can
invoke the 'man' command with a prefix argument to countermand the
value of this option for the current invocation of 'man'.</code></pre>
<h3 id="docview">DocView</h3>
<p>DocView is a generic tool for converting complex documents into images for display in Emacs (pdf, docx, etc.)</p>
<pre><code>New user option 'doc-view-mpdf-use-svg'.
If non-nil, DocView uses SVG images to display PDF documents.  The
default is non-nil if your system supports display of SVG images.</code></pre>
<p>Emacs’s SVG engine is quite good nowadays, and it’s definitely better than a raster image of a PDF.</p>
<pre><code>New face 'doc-view-svg-face'.
This replaces 'doc-view-svg-foreground' and 'doc-view-svg-background'.
By default, this face has black foreground on white background and
inherits from the default face.  When unsetting the foreground and
background values, the display in DocView is styled according to the
current theme.  However, this, or any non-standard values, can result in
poor contrast for documents which aren't simply black text on white
background.</code></pre>
<p>If your theme clashes with the colors in SVG files, you can now change them to better suit your theme.</p>
<pre><code>DocView buffers now display a new tool bar.
This tool bar contains options for searching and navigating within the
document, replacing the incompatible items for incremental search and
editing within the default tool bar displayed in the past.</code></pre>
<h3 id="shortdoc">Shortdoc</h3>
<p>Shortdoc is <a href="https://www.masteringemacs.org/article/emacs-builtin-elisp-cheat-sheet">Emacs’s Builtin Elisp Cheat Sheet</a>.</p>
<pre><code>New function 'shortdoc-function-examples'.
This function returns examples of use of a given Emacs Lisp function
from the available shortdoc information.</code></pre>
<pre><code>New function 'shortdoc-help-fns-examples-function'.
This function inserts into the current buffer examples of use of a
given Emacs Lisp function, which it gleans from the shortdoc
information.  If you want 'describe-function' ('C-h f') to insert
examples of using the function into regular "*Help*" buffers, add the
following to your init file:

    (add-hook 'help-fns-describe-function-functions
              #'shortdoc-help-fns-examples-function)</code></pre>
<h3 id="package">Package</h3>
<p>Package is the package manager and installer in Emacs.</p>
<pre><code>New user option 'package-vc-register-as-project'.
When non-nil, 'package-vc-install' and 'package-vc-checkout' will
automatically register every package they install as a project, that you
can quickly select using 'project-switch-project' ('C-x p p').  Default
is t.</code></pre>
<p>Oh that is very nice. I will definitely enable this now that <code>package</code> can install from source control using <code>vc</code>.</p>
<pre><code>New user option 'package-vc-allow-build-commands'.
Controls for which packages Emacs runs extra build commands when
installing directly from the package VCS repository.</code></pre>
<pre><code>New command 'package-vc-log-incoming'.
This commands displays incoming changes for a VC package without
modifying the current checkout.</code></pre>
<pre><code>New command to start an inferior Emacs loading only specific packages.
The new command 'package-isolate' will start a new Emacs process, as
a sub-process of Emacs where you invoke the command, in a way that
causes the new process to load only some of the installed packages.
The command prompts for the packages to activate in this
sub-process, and is intended for testing Emacs and/or the packages
in a clean environment.</code></pre>
<p>That’s a really cool addition, and I look forward to using it with my own packages. I normally maintain a separate Emacs installation just for this purpose, but this approach might save me the hassle of having to maintain that.</p>
<h3 id="flymake">Flymake</h3>
<p>Flymake is Emacs’s linter/on-the-fly-compiler interface.</p>
<pre><code>New user option 'flymake-indicator-type'.
This controls which error indicator type Flymake should use in the
current buffer.  Depending on your preference, this can either use
fringes or margins for indicating errors, the default is 'margins'.</code></pre>
<pre><code>New user option 'flymake-margin-indicators-string'.
It controls, for each error type, the string and its face to display as
the margin indicator.</code></pre>
<pre><code>New user option 'flymake-autoresize-margins'.
If non-nil (the default), Flymake will resize the margins when
'flymake-mode' is turned on or off.
Only relevant if 'flymake-indicator-type' is set to 'margins'.</code></pre>
<pre><code>New user option 'flymake-margin-indicator-position'.
It controls whether to use margins for margin indicators, and which
margin (left or right) to use.  Default is to use the left margin.</code></pre>
<pre><code>New user option 'flymake-show-diagnostics-at-end-of-line'.
When non-nil, Flymake shows summarized descriptions of diagnostics at
the end of the line.  Depending on your preference, this can either be
distracting and easily confused with actual code, or a significant
early aid that relieves you from moving the buffer or reaching for the
mouse to consult an error message.  Default is nil.</code></pre>
<p>Worth enabling to see if it is something that helps or hinders. You should consider setting it in a dir locals variable or mode hook so it only applies to some buffers.</p>
<h3 id="flyspell">Flyspell</h3>
<p>Emacs’s on the fly spell checker.</p>
<pre><code>New user option 'flyspell-check-changes'.
When non-nil, Flyspell mode spell-checks only words that you edited; it
does not check unedited words just because you move point across them.
Default is nil.</code></pre>
<h3 id="js-mode">JS mode</h3>
<p>One of a dozen modes that edit Javascript.</p>
<pre><code>The binding 'M-.' has been removed from the major mode keymaps in
'js-mode' and 'js-ts-mode', having it default to the global binding
which calls 'xref-find-definitions'.  If the previous one worked
better for you, use 'define-key' in your init script to bind
'js-find-symbol' to that combination again.</code></pre>
<p>This is just standardizing on the xref interface and its default global keys.</p>
<p>:</p>
<pre><code>'js-json-mode' does not derive from 'js-mode' any more so as not
to confuse tools like Eglot or YASnippet into thinking that those
buffers contain Javascript code.</code></pre>
<h3 id="python-mode">Python mode</h3>
<p>The major mode for editing Python.</p>
<pre><code>New user option 'python-indent-block-paren-deeper'.
If non-nil, increase the indentation of the lines inside parens in a
header of a block when they are indented to the same level as the body
of the block, producing:

    if (some_expression
            and another_expression):
        do_something()

instead of:

    if (some_expression
        and another_expression):
        do_something()

Default is nil.</code></pre>
<p>I long ago stopped worrying about this stuff when code formatting tools became prevalent. Why get angry at your coworkers’ bad code formatting habits when you can direct your anger at a faceless code formatting tool instead?</p>
<pre><code>New user option 'python-interpreter-args'.
This allows the user to specify command line arguments to the non
interactive Python interpreter specified by 'python-interpreter'.</code></pre>
<pre><code>New function 'python-shell-send-block'.
It sends the python block delimited by 'python-nav-beginning-of-block'
and 'python-nav-end-of-block' to the inferior Python process.</code></pre>
<h3 id="inferior-python-mode">Inferior Python mode</h3>
<p>Inferior Python mode refers to the comint version that talks to the external python interpreter.</p>
<pre><code>Default value of 'python-shell-compilation-regexp-alist' is changed.
Support for Python's ExceptionGroup has been added, so in the Python
shell, the line indicating the source of an error in the error messages
from ExceptionGroup will be recognized as well.</code></pre>
<h3 id="eldoc">Eldoc</h3>
<p>Eldoc is a generic documentation popup system.</p>
<pre><code>'eldoc' no longer truncates to a single line by default.
Previously, the entire docstring was not available to eldoc, which made
'eldoc-echo-area-use-multiline-p' ineffective.  The old behavior may be
kept by customizing 'eldoc-echo-area-use-multiline-p'.</code></pre>
<h3 id="scheme-mode">Scheme mode</h3>
<pre><code>Scheme mode now handles the regular expression literal '#/regexp/' that
 is available in some Scheme implementations.
 Also, it should now handle nested sexp-comments.</code></pre>
<h3 id="use-package">Use package</h3>
<p><a href="https://www.masteringemacs.org/article/spotlight-use-package-a-declarative-configuration-tool">use-package is a declarative configuration tool</a>.</p>
<pre><code>New ':vc' keyword.
This keyword enables the user to install packages using package-vc.el.</code></pre>
<p>This is a great addition and it rounds off the ability to manually install packages with VC that arrived in Emacs 29. You can replace a lot of the third-party package managers now if your needs are simple.</p>
<pre><code>New user option 'use-package-vc-prefer-newest'.
If non-nil, always install the newest commit of a package when using the
':vc' keyword rather than its stable release.  Default is nil.</code></pre>
<h3 id="gnus">Gnus</h3>
<p>Gnus is an expansive mail and news agent in Emacs.</p>
<pre><code>New backend 'nnfeed'.
This allows backend developers to easily create new backends for web
feeds, as inheriting backends of 'nnfeed'.</code></pre>
<pre><code>New backend 'nnatom'.
This allow users to add Atom Syndication Format feeds to Gnus as
servers.</code></pre>
<pre><code>The 'nnweb-type' option 'gmane' has been removed.
The gmane.org website is, sadly, down since a number of years with no
prospect of it coming back.  Therefore, it is no longer valid to set
the server variable 'nnweb-type' to 'gmane'.</code></pre>
<pre><code>New user option 'gnus-mode-line-logo'.
This allows the user to either disable the display of any logo or
specify which logo will be displayed as part of the
buffer-identification in the mode-line of Gnus buffers.</code></pre>
<pre><code>'gnus-summary-limit-to-age' now counts days since midnight.
"Less than 1 day" now means "since last midnight", rather than "less
than 24 hours old".</code></pre>
<h3 id="rmail">Rmail</h3>
<p>Rmail is one of many ways of sending and reading email in Emacs.</p>
<pre><code>New commands for reading mailing lists.
The new Rmail commands 'rmail-mailing-list-post',
'rmail-mailing-list-unsubscribe', 'rmail-mailing-list-help', and
'rmail-mailing-list-archive' allow, respectively, posting to,
unsubscribing from, requesting help about, and browsing the archives
of, the mailing list from which the current email message was
delivered.</code></pre>
<h3 id="dictionary">Dictionary</h3>
<p>Dictionary is a lookup system for <a href="https://www.masteringemacs.org/article/wordsmithing-in-emacs">wordsmiths</a>.</p>
<pre><code>New user option 'dictionary-search-interface'.
Controls how the 'dictionary-search' command prompts for and displays
dictionary definitions.  Customize this user option to 'help' to have
'dictionary-search' display definitions in a "*Help*" buffer and
provide dictionary-based minibuffer completion for word selection.
Default is nil, which means to use a "*Dictionary*" buffer.</code></pre>
<pre><code>New user option 'dictionary-read-word-prompt'.
This allows the user to customize the prompt that is used by
'dictionary-search' when asking for a word to search in the
dictionaries.</code></pre>
<pre><code>New user option 'dictionary-display-definition-function'.
This allows the user to customize the way in which 'dictionary-search'
displays word definitions.  If non-nil, this user option should be set
to a function that displays a word definition obtained from a
dictionary server.  The new function
'dictionary-display-definition-in-help-buffer' can be used to display
the definition in a "*Help*" buffer, instead of the default
"*Dictionary*" buffer.</code></pre>
<pre><code>New user option 'dictionary-read-word-function'.
This allows the user to customize the way in which 'dictionary-search'
prompts for a word to search in the dictionary.  This user option
should be set to a function that lets the user select a word and
returns it as a string.  The new function
'dictionary-completing-read-word' can be used to prompt with
completion based on dictionary matches.</code></pre>
<pre><code>New user option 'dictionary-read-dictionary-function'.
This allows the user to customize the way in which 'dictionary-search'
prompts for a dictionary to search in.  This user option should be set
to a function that lets the user select a dictionary and returns its
name as a string.  The new function
'dictionary-completing-read-dictionary' can be used to prompt with
completion based on dictionaries that the server supports.</code></pre>
<pre><code>The default value of 'dictionary-tooltip-dictionary' has changed.
The new default value is t, which means use the same dictionary as the
value of 'dictionary-default-dictionary'.  The previous default value
was nil, which effectively disabled 'dictionary-tooltip-mode', even if
the mode was turned on.</code></pre>
<h3 id="pp">Pp</h3>
<p>Pp is the pretty printing functionality for elisp.</p>
<pre><code>New 'pp-default-function' user option replaces 'pp-use-max-width'.
Its default value is 'pp-fill', a new default pretty-printing function,
which tries to obey 'fill-column'.</code></pre>
<pre><code>'pp-to-string' takes an additional PP-FUNCTION argument.
This argument specifies the prettifying algorithm to use.</code></pre>
<pre><code>'pp' and 'pp-to-string' now always include a terminating newline.
In the past they included a terminating newline in most cases but not all.</code></pre>
<h3 id="emacs-lisp-mode">Emacs Lisp mode</h3>
<p>The major mode used to edit elisp code.</p>
<pre><code>'elisp-flymake-byte-compile' is disabled for untrusted files.
For security reasons, this backend can be used only in those files
specified as trusted according to 'trusted-content' and emits an
"untrusted content" warning otherwise.
This fixes CVE-2024-53920.</code></pre>
<pre><code>',@' now has 'prefix' syntax.
Previously, the '@' character, which normally has 'symbol' syntax,
would combine with a following Lisp symbol and interfere with symbol
searching.</code></pre>
<pre><code>'emacs-lisp-docstring-fill-column' now defaults to 72.
It was previously 65.  The new default formats documentation strings to
fit on fewer lines without negatively impacting readability.</code></pre>
<h3 id="cperl-mode">CPerl mode</h3>
<p>One of two Perl modes in Emacs.</p>
<pre><code>Subroutine signatures are now supported.
CPerl mode fontifies subroutine signatures like variable declarations
which makes them visually distinct from subroutine prototypes.</code></pre>
<pre><code>Syntax of Perl up to version 5.40 is supported.
CPerl mode supports the new keywords for exception handling and the
object oriented syntax which were added in Perl 5.36, 5.38 and 5.40.</code></pre>
<pre><code>New user option 'cperl-fontify-trailer'.
This user option takes the values 'perl-code' or 'comment' and treats
text after an "__END__" or "__DATA__" token accordingly.  The default
value of 'perl-code' is useful for trailing POD and for AutoSplit
modules, the value 'comment' makes CPerl mode treat trailers as
comment, like Perl mode does.</code></pre>
<pre><code>New command 'cperl-file-style'.
This command sets the indentation style for the current buffer.  To
change the default style, either use the user option with the same name
or use the command 'cperl-set-style'.</code></pre>
<pre><code>New minor mode 'cperl-extra-paired-delimiters-mode'.
Perl 5.36 and newer allows using more than 200 non-ASCII paired
delimiters for quote-like constructs, e.g. "q«text»".  Use this minor
mode in buffers where this feature is activated.</code></pre>
<pre><code>Commands using the Perl Info manual are obsolete.
The Perl documentation in Info format is no longer distributed with
Perl or on CPAN since more than 10 years.  Perl documentation can be
read with 'cperl-perldoc' instead.</code></pre>
<pre><code>Highlighting trailing whitespace has been removed.
The user option 'cperl-invalid-face' is now obsolete, and does
nothing.  See the user option 'show-trailing-whitespace' instead.</code></pre>
<h3 id="emacs-sessions-desktop">Emacs Sessions (Desktop)</h3>
<p>Desktop saves and restores your Emacs buffers and files between sessions.</p>
<pre><code>Restoring buffers visiting remote files can now time out.
When a buffer is restored which visits a remote file, the restoration
of the session could hang if the remote host is off-line or slow to
respond.  Setting the user option 'remote-file-name-access-timeout' to
a positive number will abandon the attempt to restore such buffers
after a timeout of that many seconds, thus allowing the rest of
desktop restoration to continue.</code></pre>
<p>I have absolutely been caught out by this before, so that is a welcome change indeed.</p>
<h3 id="recentf">Recentf</h3>
<p>Recentf remembers files you have visited and lets you re-visit them quickly.</p>
<pre><code>Checking recent remote files can now time out.
Similarly to buffer restoration by Desktop, 'recentf-mode' checking
of the accessibility of remote files can now time out if
'remote-file-name-access-timeout' is set to a positive number.</code></pre>
<h3 id="image-dired">Image Dired</h3>
<p>One of several ways of displaying images in Emacs.</p>
<pre><code>New user option 'image-dired-thumb-naming'.
You can now configure how thumbnails are named using this option.</code></pre>
<h3 id="ert">ERT</h3>
<p>This is a test runner framework for Emacs, and a rather useful one at that.</p>
<pre><code>New macro 'skip-when' to skip 'ert-deftest' tests.
This can help to avoid some awkward skip conditions.  For example
'(skip-unless (not noninteractive))' can be changed to the easier
to read '(skip-when noninteractive)'.</code></pre>
<pre><code>Syntax highlighting unit testing support.
An ERT extension ('ert-font-lock') now provides support for face
assignment unit testing.  For more information, see the "(ert) Syntax
Highlighting Tests" node in the ERT manual.</code></pre>
<h3 id="socks">Socks</h3>
<p>SOCKS is a proxy-like protocol that, quite frankly, I don’t think I’ve used in decades.</p>
<pre><code>Socks supports version 4a.
The 'socks-server' user option accepts '4a' as a value for its version
field.</code></pre>
<h3 id="edmacro">Edmacro</h3>
<p>This is the major mode for interactively editing keyboard macros.</p>
<pre><code>New command 'edmacro-set-macro-to-region-lines'.
Bound to 'C-c C-r', this command replaces the macro text with the
lines of the region.  If needed, the region is extended to include
whole lines.  If the region ends at the beginning of a line, that last
line is excluded.</code></pre>
<pre><code>New user option 'edmacro-reverse-macro-lines'.
When this is non-nil, the lines of key sequences are displayed with
the most recent line first.  This is can be useful when working with
macros with many lines, such as from 'kmacro-edit-lossage'.</code></pre>
<h3 id="calc">Calc</h3>
<p>This is Emacs’s advanced symbolic computer algebra system.</p>
<pre><code>Calc parses fractions written using U+2044 FRACTION SLASH.
Fractions of the form "123⁄456" are handled as if written "123:456".
Note in particular the difference in behavior from U+2215 DIVISION SLASH
and U+002F SOLIDUS, which result in division rather than a rational
fraction.  In addition, precomposed fraction characters, such as ½
(U+00BD VULGAR FRACTION ONE HALF), are also recognized as rational
fractions.  (They have been recognized since 2004, but it looks like it
was never mentioned in the NEWS, or even the Calc manual.)</code></pre>
<h3 id="ielm">IELM</h3>
<p>IELM is the interactive shell for <a href="https://www.masteringemacs.org/article/evaluating-elisp-emacs">Evaluating Elisp in Emacs</a>.</p>
<pre><code>IELM now remembers input history between sessions.
The new user option 'ielm-history-file-name' is the name of the file
where IELM input history will be saved.  Customize it to nil to revert
to the old behavior of not remembering input history between sessions.</code></pre>
<h3 id="easypg">EasyPG</h3>
<p>EasyPG is a wrapper for GnuPG and friends. See <a href="https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources">Keeping Secrets in Emacs with GnuPG and Auth Sources</a>.</p>
<pre><code>New user option 'epa-keys-select-method'.
This allows the user to customize the key selection method, which can be
either by using a pop-up buffer or from the minibuffer.  The pop-up
buffer method is the default, which preserves previous behavior.</code></pre>
<h3 id="widget">Widget</h3>
<p>This is the internal library used by Emacs for buttons, edit fields, etc. in places like the Customize interface.</p>
<pre><code>New face 'widget-unselected'.
Customize this face to a non-default value to visually distinguish the
labels of unselected active radio-button or checkbox widgets from the
labels of unselected inactive widgets (the default value inherits from
the 'widget-inactive' face).</code></pre>
<pre><code>New user option 'widget-skip-inactive'.
If non-nil, moving point forward or backward between widgets by typing
'TAB' or 'S-TAB' skips over inactive widgets.  The default value is nil.</code></pre>
<h3 id="ruby-mode">Ruby mode</h3>
<p>Programming mode for Ruby.</p>
<pre><code>New user option 'ruby-rubocop-use-bundler'.
By default it retains the previous behavior: read the contents of
Gemfile and act accordingly.  But you can also set it to t or nil to
skip checking the Gemfile.</code></pre>
<pre><code>New user option 'ruby-bracketed-args-indent'.
When it is set to nil, multiple consecutive open braces/brackets/parens
result in only one additional indentation level.  Default is t.</code></pre>
<h3 id="thingatpt">Thingatpt</h3>
<p>A framework for plucking the thing at point: words, functions, emails, urls, you name it. A useful thing to learn about and use, as it has a wide range of applications.</p>
<pre><code>New variables for providing custom thingatpt implementations.
The new variables 'bounds-of-thing-at-point-provider-alist' and
'forward-thing-provider-alist' now allow defining custom implementations
of 'bounds-of-thing-at-point' and 'forward-thing', respectively.</code></pre>
<pre><code>New helper functions for text property-based thingatpt providers.
The new helper functions 'thing-at-point-for-char-property',
'bounds-of-thing-at-point-for-char-property', and
'forward-thing-for-char-property' can help to implement custom thingatpt
providers for "things" that are defined by text properties.</code></pre>
<pre><code>'bug-reference-mode' now supports 'thing-at-point'.
Now, calling '(thing-at-point 'url)' when point is on a bug reference
will return the URL for that bug.</code></pre>
<p>Bug reference mode is a small minor mode that makes ‘bug references’ (such as #2823) clickable.</p>

<p>Yet another buffer selection and display system in Emacs.</p>
<pre><code>New user option 'Buffer-menu-group-by'.
It controls how buffers are divided into groups that are displayed with
headings using Outline minor mode.  Using commands that mark buffers
on the outline heading line will mark all buffers in the outline.  By
default, no grouping is performed.</code></pre>
<pre><code>New command 'Buffer-menu-toggle-internal'.
This command toggles the display of internal buffers in Buffer Menu mode;
that is, buffers not visiting a file and whose names start with a space.
Previously, such buffers were never shown.  This command is bound to 'I'
in Buffer Menu mode.</code></pre>
<h3 id="miscellaneous-1">Miscellaneous</h3>
<pre><code>New user option 'rcirc-log-time-format'.
This allows for rcirc logs to use a custom timestamp format, which the
chat buffers use by default.</code></pre>
<p>RCIRC is one of two IRC clients in Emacs, the other being ERC.</p>
<pre><code>'ffap-lax-url' now defaults to nil.
Previously, it was set to t, but this broke remote file name detection.</code></pre>
<p>FFAP is Find File At Point is a system for plucking the file at point and opening it.</p>
<pre><code>More control on automatic update of Proced buffers.
The user option 'proced-auto-update-flag' can now be set to an
additional value 'visible', which controls automatic updates of Proced
buffers that are displayed in some window.</code></pre>
<p>Proced’s basically Emacs’s answer to <code>top</code>. See <a href="https://www.masteringemacs.org/article/displaying-interacting-processes-proced">Displaying and Interacting with processes using Proced</a>.</p>
<pre><code>nXML Mode now comes with schemas for Mono/.NET development.
The following new XML schemas are now supported:
- MSBuild project files
- Dotnet package properties files
- Dotnet resource extension files
- Dotnet Application config files
- Nuget config file
- Nuget package specification file
- Nuget packages config file</code></pre>
<pre><code>color.el now supports the Oklab color representation.</code></pre>
<p>The color file has a large range of advanced color conversion routines. Worth a look if that is something you interact with a lot.</p>
<pre><code>New user option 'xwidget-webkit-disable-javascript'.
This allows disabling JavaScript in xwidget Webkit sessions.</code></pre>
<p>XWidget is a half-abandoned, half-working attempt at bringing the Webkit browser to Emacs.</p>
<pre><code>'ls-lisp--insert-directory' supports more long options of 'ls'.
'ls-lisp--insert-directory', the ls-lisp implementation of
'insert-directory', now supports the '--time=TIME' and '--sort=time'
options of GNU 'ls'.</code></pre>
<p>How does dired work on platforms (such as MS-DOS or Windows) where there is no <code>ls</code> program? The answer is simple: Emacs has an elisp emulation layer that talks to the underlying system directly.</p>
<pre><code>'M-x ping' can now give additional flags to the 'ping' program.
Typing 'C-u M-x ping' prompts first for the host, and then for the flags
to give to the 'ping' command.</code></pre>
<p>There is a host of network utility wrappers in Emacs. See <a href="https://www.masteringemacs.org/article/network-utilities-emacs">Using the commandline network utilities from Emacs</a>.</p>
<pre><code>Webjump now assumes URIs are HTTPS instead of HTTP.
For links in 'webjump-sites' without an explicit URI scheme, it was
previously assumed that they should be prefixed with "http://".  Such
URIs are now prefixed with "https://" instead.</code></pre>
<p>Another obscure feature in Emacs. Here it’s a flat list of common URLs and a command to select and then open one of them. The fact that “Yahoo” is still in there says it all.</p>
<pre><code>Added prefixes in titdic-cnv library.
Most of the variables and functions in the file have been renamed to
make sure they all use a 'tit-' namespace prefix.</code></pre>
<p>Obscure library for working with Quail, a format used in multilingual systems.</p>
<pre><code>'xref-revert-buffer' is now an alias of 'revert-buffer'.
The Xref buffer now sets up 'revert-buffer-function' such that
'revert-buffer' behaves like 'xref-revert-buffer' did in previous Emacs
versions, and the latter is now an alias of the former.</code></pre>
<p>Xref is Emacs’s cross-referencing system, and all this change does is make it so <code>M-x revert-buffer</code> (which I have a version of that reverts the current buffer bound to <code>F6</code>) reverts properly in xref buffers also.</p>
<pre><code>The Makefile browser is now obsolete.
The command 'makefile-switch-to-browser' command is now obsolete,
together with related commands used in the "*Macros and Targets*"
buffer.  We recommend using an alternative like 'imenu' instead.</code></pre>
<pre><code>'jsonrpc-default-request-timeout' is now a defcustom.</code></pre>
<h2 id="new-modes-and-packages-in-emacs-30.1">New Modes and Packages in Emacs 30.1</h2>
<h3 id="new-major-modes-based-on-the-tree-sitter-library">New major modes based on the tree-sitter library</h3>
<pre><code>New major mode 'elixir-ts-mode'.
A major mode based on the tree-sitter library for editing Elixir files.</code></pre>
<pre><code>New major mode 'heex-ts-mode'.
A major mode based on the tree-sitter library for editing HEEx files.</code></pre>
<pre><code>New major mode 'html-ts-mode'.
An optional major mode based on the tree-sitter library for editing
HTML files.</code></pre>
<pre><code>New major mode 'lua-ts-mode'.
A major mode based on the tree-sitter library for editing Lua files.</code></pre>
<pre><code>New major mode 'php-ts-mode'.
A major mode based on the tree-sitter library for editing PHP files.</code></pre>
<p>Good to see more tree-sitter major modes.</p>
<pre><code>New package EditorConfig.
This package provides support for the EditorConfig standard,
an editor-neutral way to provide directory local (project-wide) settings.
It is enabled via a new global minor mode 'editorconfig-mode'
which makes Emacs obey the '.editorconfig' files.
There is also a new major mode 'editorconfig-conf-mode'
to edit those configuration files.</code></pre>
<p>Long overdue, even if I find the capabilities of editorconfig rather basic.</p>
<pre><code>New global minor mode 'etags-regen-mode'.
This minor mode generates the tags table automatically based on the
current project configuration, and later updates it as you edit the
files and save the changes.</code></pre>
<pre><code>New package 'which-key'.
The 'which-key' package from GNU ELPA is now included in Emacs.  It
implements the global minor mode 'which-key-mode' that displays a table
of key bindings upon entering a partial key chord and waiting for a
moment.  For example, after enabling the minor mode, if you enter 'C-x'
and wait for one second, the minibuffer will expand with all available
key bindings that follow 'C-x' (or as many as space allows).</code></pre>
<p>This is a long-awaited inclusion for some people. Which-key pops up a list of key bindings if you partially type a key and a wait a little while.</p>
<pre><code>New minor mode 'completion-preview-mode'.
This minor mode shows you symbol completion suggestions as you type,
using an inline preview.  New user options in the 'completion-preview'
customization group control exactly when Emacs displays this preview.
'completion-preview-mode' is buffer-local, to enable it globally use
'global-completion-preview-mode'.</code></pre>
<p>Buried in the foot of the NEWS file is one of the best new additions in Emacs. A window-based answer to Company / Corfu, with a host of really nice ergonomic features. I really, really recommend you disable your in-line completer (corfu, company, auto-complete, whatever) and give this one a try for a little while.</p>
<pre><code>New package Window-Tool-Bar.
This provides a new minor mode, 'window-tool-bar-mode'.  When this minor
mode is enabled, a tool bar is displayed at the top of a window.  To
conserve space, no tool bar is shown if 'tool-bar-map' is nil.  The
global minor mode 'global-window-tool-bar-mode' enables this minor mode
in all buffers.</code></pre>
<p>A compromise for people who want the toolbar but only when it has something interesting to offer.</p>
<pre><code>New library Track-Changes.
This library is a layer of abstraction above 'before-change-functions'
and 'after-change-functions' which provides a superset of
the functionality of 'after-change-functions':
- It provides the actual previous text rather than only its length.
- It takes care of accumulating and bundling changes until a time when
  its client finds it convenient to react to them.
- It detects most cases where some changes were not properly
  reported (calls to 'before/after-change-functions' that are
  incorrectly paired, missing, etc...) and reports them adequately.</code></pre>
<p>Building this sort of thing is surprisingly tricky, as the text above briefly alludes to. It does not seem to be used in many places yet, but I foresee that it will play an important role in tools that want to provide in-buffer tracking of changes without the tears of having to build all this infrastructure from scratch. I especially like the feature that it collects the changes until such a time that the client deems it needs them; very useful, and hard to do well with nothing more than a set of before/after change hooks.</p>
<pre><code>New global minor mode 'minibuffer-regexp-mode'.
This is a minor mode for editing regular expressions in the minibuffer,
for example in 'query-replace-regexp'.  It correctly highlights parens
via 'show-paren-mode' and 'blink-matching-paren' in a user-friendly way,
avoids reporting alleged paren mismatches and makes sexp navigation more
intuitive.  It is enabled by default, 'minibuffer-regexp-prompts' can be
used to tune when it takes effect.</code></pre>
<p>Excellent feature that is enabled by default, so no need to do anything.</p>
<pre><code>The highly accessible Modus themes collection has eight items.
The 'modus-operandi' and 'modus-vivendi' are the main themes that have
been part of Emacs since version 28.  The former is light, the latter
dark.  In addition to these, we now have 'modus-operandi-tinted' and
'modus-vivendi-tinted' for easier legibility, as well as
'modus-operandi-deuteranopia', 'modus-vivendi-deuteranopia',
'modus-operandi-tritanopia', and 'modus-vivendi-tritanopia' to cover
the needs of users with red-green or blue-yellow color deficiency.
The Info manual "(modus-themes) Top" describes the details and
showcases all their user options.</code></pre>
<p>A popular set of themes beloved by many.</p>
<h3 id="new-library-peg">New library PEG</h3>
<pre><code>Emacs now includes a library for writing Parsing Expression
Grammars (PEG), an approach to text parsing that provides more structure
than regular expressions, but less complexity than context-free
grammars.  The Info manual "(elisp) Parsing Expression Grammars" has
documentation and examples.</code></pre>
<p>Interesting inclusion and I am curious to see it in use. Emacs already has parsing tools already (Semantic Bovinator being one such example) so I guess this will find a home in Org mode as it has a range of custom query languages.</p>
<pre><code>New major mode 'shell-command-mode'.
This mode is used by default for the output of asynchronous 'shell-command'.
To revert to the previous behavior, set the (also new) variable
'async-shell-command-mode' to 'shell-mode'.  Any hooks or mode-specific
variables used should be adapted appropriately.</code></pre>
<pre><code>New package Compat.
Emacs now comes with a stub implementation of the
forwards-compatibility Compat package from GNU ELPA.  This allows
built-in packages to use the library more effectively, and helps
preventing the installation of Compat if unnecessary.</code></pre>
<p>Compat provides backwards and forwards compatible changes for package authors so they can target older versions of Emacs, and keep older packages working in newer ones, too.</p>
<h3 id="incompatible-lisp-changes-in-emacs-30.1">Incompatible Lisp Changes in Emacs 30.1</h3>
<pre><code>Evaluating a 'lambda' returns an object of type 'interpreted-function'.
Instead of representing interpreted functions as lists that start with
either 'lambda' or 'closure', Emacs now represents them as objects
of their own 'interpreted-function' type, which is very similar
to 'byte-code-function' objects (the argument list, docstring, and
interactive forms are placed in the same slots).
Lists that start with 'lambda' are now used only for non-evaluated
functions (in other words, for source code), but for backward compatibility
reasons, 'functionp' still recognizes them as functions and you can
still call them as before.
Thus code that attempts to "dig" into the internal structure of an
interpreted function's object with the likes of 'car' or 'cdr' will
no longer work and will need to use 'aref' instead to extract its
various subparts (when 'interactive-form', 'documentation', and
'help-function-arglist' aren't adequate).</code></pre>
<p>The heart of this is that in Lisp, code and data are the same, and when Emacs emits a readable form of a lambda or closure you just created, it does so in a way that looks like a list. In older Emacsen, you could write <code>(car (lambda))</code> and it’d spit out <code>closure</code> (provided <code>lexical-binding</code> is enabled), and now you cannot do this; it’s not a list any more.</p>
<p>It’s very unlikely this will affect you in any way.</p>
<pre><code>The escape sequence '\x' not followed by hex digits is now an error.
Previously, '\x' without at least one hex digit denoted character code
zero (NUL) but as this was neither intended nor documented or even
known by anyone, it is now treated as an error by the Lisp reader.</code></pre>
<pre><code>'subr-native-elisp-p' is renamed to 'native-comp-function-p'.
The previous name still exists but is marked as obsolete.</code></pre>
<pre><code>'define-globalized-minor-mode' requires that modes use 'run-mode-hooks'.
Minor modes defined with 'define-globalized-minor-mode', such as
'global-font-lock-mode', will not be enabled any more in those buffers
whose major modes fail to use 'run-mode-hooks'.  Major modes defined
with 'define-derived-mode' are not affected.  'run-mode-hooks' has been the
recommended way to run major mode hooks since Emacs 22.</code></pre>
<pre><code>'buffer-match-p' and 'match-buffers' take '&amp;rest ARGS'.
They used to take a single '&amp;optional ARG' and were documented to use
an unreliable hack to try and support condition predicates that
don't accept this optional ARG.
The new semantics makes no such accommodation, but the code still
supports it (with a warning) for backward compatibility.</code></pre>
<pre><code>'post-gc-hook' runs after updating 'gcs-done' and 'gc-elapsed'.</code></pre>
<pre><code>Connection-local variables are applied in buffers visiting remote files.
This overrides possible directory-local or file-local variables with
the same name.</code></pre>
<pre><code>'copy-tree' now copies records when its optional 2nd argument is non-nil.</code></pre>
<pre><code>Regexp zero-width assertions followed by operators are better defined.
Previously, regexps such as "xy\\B*" would have ill-defined behavior.
Now any operator following a zero-width assertion applies to that
assertion only (which is useless).  For historical compatibility, an
operator character following '^' or '\`' becomes literal, but we
advise against relying on this.</code></pre>
<pre><code>Infinities and NaNs no longer act as symbols on non-IEEE platforms.
On old platforms like the VAX that do not support IEEE floating-point,
tokens like '0.0e+NaN' and '1.0e+INF' are no longer read as symbols.
Instead, the Lisp reader approximates an infinity with the nearest
finite value, and a NaN with some other non-numeric object that
provokes an error if used numerically.</code></pre>
<pre><code>Conversion of strings to and from byte-arrays works with multibyte strings.
The functions 'dbus-string-to-byte-array' and
'dbus-byte-array-to-string' now accept and return multibyte Lisp
strings, encoding to UTF-8 and decoding from UTF-8 internally.  This
means that the argument to 'dbus-byte-array-to-string' must be a valid
UTF-8 byte sequence, and the optional parameter MULTIBYTE of
'dbus-byte-array-to-string' is now obsolete and unused.  The argument of
'dbus-string-to-byte-array' should be a regular Lisp string, not a
unibyte string.</code></pre>
<pre><code>'minibuffer-allow-text-properties' now can be set buffer-local.
'read-from-minibuffer' and functions that use it can take the
buffer-local value from the minibuffer.</code></pre>
<pre><code>'minibuffer-allow-text-properties' now also affects completions.
When it has a non-nil value, then completion functions like
'completing-read' don't discard text properties from the returned
completion candidate.</code></pre>
<pre><code>X color support compatibility aliases are now obsolete.
The compatibility aliases 'x-defined-colors', 'x-color-defined-p',
'x-color-values', and 'x-display-color-p' are now obsolete.</code></pre>
<pre><code>'easy-mmode-define-{minor,global}-mode' aliases are now obsolete.
Use 'define-minor-mode' and 'define-globalized-minor-mode' instead.</code></pre>
<pre><code>The 'millisec' argument of 'sleep-for' is now obsolete.
Use a float value for the first argument instead.</code></pre>
<pre><code>User options 'eshell-NAME-unload-hook' are now obsolete.
These hooks were named incorrectly, and so they never actually ran
when unloading the corresponding feature.  Instead, you should use
hooks named after the feature name, like 'esh-mode-unload-hook'.</code></pre>
<pre><code>User options 'eshell-process-wait-{seconds,milliseconds}' are now obsolete.
Instead, use 'eshell-process-wait-time', which supports floating-point
values.</code></pre>
<pre><code>User option 'tramp-completion-reread-directory-timeout' has been removed.
This user option was obsoleted in Emacs 27, use
'remote-file-name-inhibit-cache' instead.</code></pre>
<pre><code>The obsolete calling convention of 'sit-for' has been removed.
That convention was: '(sit-for SECONDS MILLISEC &amp;optional NODISP)'.</code></pre>
<pre><code>'defadvice' is marked as obsolete.
See the "(elisp) Porting Old Advice" Info node for help converting
them to use 'advice-add' or 'define-advice' instead.</code></pre>
<p>Emacs added a new advice system many versions ago; it’s better, and I should get around to removing the old advice forms…</p>
<pre><code>'cl-old-struct-compat-mode' is marked as obsolete.
You may need to recompile your code if it was compiled with Emacs &lt; 24.3.</code></pre>
<pre><code>Old derived.el functions removed.
The following functions have been deleted because they were only used
by code compiled with Emacs &lt; 21:
'derived-mode-init-mode-variables', 'derived-mode-merge-abbrev-tables',
'derived-mode-merge-keymaps', 'derived-mode-merge-syntax-tables',
'derived-mode-run-hooks', 'derived-mode-set-abbrev-table',
'derived-mode-set-keymap', 'derived-mode-set-syntax-table',
'derived-mode-setup-function-name'.

</code></pre>
<h3 id="lisp-changes-in-emacs-30.1">Lisp Changes in Emacs 30.1</h3>
<pre><code>The 'wheel-up/down/left/right' events are now bound unconditionally.
The 'mouse-wheel-up/down/left/right-event' variables are thus used only
to specify the 'mouse-4/5/6/7' events that might still happen to be
generated by some old packages (or if 'mouse-wheel-buttons' has been set
to nil).</code></pre>
<pre><code>Xterm Mouse mode now emits 'wheel-up/down/right/left' events.
This is instead of 'mouse-4/5/6/7' events for the mouse wheel.  It uses
the new variable 'mouse-wheel-buttons' to decide which button maps to
which wheel event (if any).</code></pre>
<pre><code>In batch mode, tracing now sends the trace to stdout.</code></pre>
<pre><code>New hook 'hack-dir-local-get-variables-functions'.
This can be used to provide support for other directory-local settings
beside ".dir-locals.el".</code></pre>
<pre><code>'auto-coding-functions' can know the name of the file.
The functions on this hook can now find the name of the file to
which the text belongs by consulting the variable 'auto-coding-file-name'.</code></pre>
<pre><code>New user option 'compilation-safety' to control safety of native code.
It is now possible to control how safe is the code generated by native
compilation, by customizing this user option.  It is also possible to
control this at function granularity by using the new 'safety' parameter
in the function's 'declare' form.</code></pre>
<pre><code>New types 'closure' and 'interpreted-function'.
'interpreted-function' is the new type used for interpreted functions,
and 'closure' is the common parent type of 'interpreted-function'
and 'byte-code-function'.

Those new types come with the associated new predicates 'closurep' and
'interpreted-function-p' as well as a new constructor
'make-interpreted-closure'.</code></pre>
<pre><code>New function 'help-fns-function-name'.
For named functions, it just returns the name and otherwise
it returns a short "unique" string that identifies the function.
In either case, the string is propertized so clicking on it gives
further details.</code></pre>
<pre><code>New function 'char-to-name'.
This is a convenience function to return the Unicode name of a char (if
it has one).</code></pre>
<pre><code>New function 'cl-type-of'.
This function is like 'type-of' except that it sometimes returns
a more precise type.  For example, for nil and t it returns 'null'
and 'boolean' respectively, instead of just 'symbol'.</code></pre>
<pre><code>New functions 'primitive-function-p' and 'cl-functionp'.
'primitive-function-p' is like 'subr-primitive-p' except that it returns
t only if the argument is a function rather than a special-form,
and 'cl-functionp' is like 'functionp' except it returns nil
for lists and symbols.</code></pre>
<pre><code>Built-in types now have corresponding classes.
At the Lisp level, this means that things like '(cl-find-class 'integer)'
will now return a class object, and at the UI level it means that
things like 'C-h o integer RET' will show some information about that type.</code></pre>
<pre><code>New variable 'major-mode-remap-defaults' and function 'major-mode-remap'.
The first is like Emacs-29's 'major-mode-remap-alist' but to be set by
packages (instead of users).  The second looks up those two variables.</code></pre>
<p>Yet more complexity around how to remap major modes to accommodate tree-sitter major modes.</p>
<pre><code>Pcase's functions (in 'pred' and 'app') can specify the argument position.
For example, instead of '(pred (&lt; 5))' you can write '(pred (&gt; _ 5))'.</code></pre>
<p>Ah good. I always found it odd that it would bind to the left-most argument, but now I can specify which one I want.</p>
<pre><code>'define-advice' now sets the new advice's 'name' property to NAME.
Named advices defined with 'define-advice' can now be removed with
'(advice-remove SYMBOL NAME)' in addition to '(advice-remove SYMBOL
SYMBOL@NAME)'.</code></pre>
<pre><code>New function 'require-with-check' to detect new versions shadowing.
This is like 'require', but it checks whether the argument 'feature'
is already loaded, in which case it either signals an error or
forcibly reloads the file that defines the feature.</code></pre>
<pre><code>New variable 'lisp-eval-depth-reserve'.
It puts a limit to the amount by which Emacs can temporarily increase
'max-lisp-eval-depth' when handling signals.</code></pre>
<pre><code>New special form 'handler-bind'.
It provides a functionality similar to 'condition-case' except it runs
the handler code without unwinding the stack, such that we can record
the backtrace and other dynamic state at the point of the error.  See
the Info node "(elisp) Handling Errors".</code></pre>
<pre><code>New text properties add tooltips on fringes.
It is now possible to provide tooltips on fringes by adding special text
properties 'left-fringe-help' and 'right-fringe-help'.  See the "(elisp)
Special Properties" Info node in the Emacs Lisp Reference Manual for
more details.</code></pre>
<pre><code>New 'display-buffer' action alist entry 'pop-up-frames'.
This has the same effect as the variable of the same name and takes
precedence over the variable when present.</code></pre>
<pre><code>New function 'merge-ordered-lists'.
Mostly used internally to do a kind of topological sort of
inheritance hierarchies.</code></pre>
<pre><code>'drop' is now an alias for the function 'nthcdr'.</code></pre>
<pre><code>New polymorphic comparison function 'value&lt;'.
This function returns non-nil if the first argument is less than the
second.  It works for any two values of the same type with reasonable
ordering for numbers, strings, symbols, bool-vectors, markers, buffers
and processes.  Conses, lists, vectors and records are ordered
lexicographically.
It is intended as a convenient ordering predicate for sorting, and is
likely to be faster than hand-written Lisp functions.</code></pre>
<p>Ah that is very useful actually. Now to remember that it exists…</p>
<pre><code>New 'sort' arguments and features.
The 'sort' function can now be called using the signature

    (sort SEQ &amp;rest KEYWORD-ARGUMENTS)

where arguments after the first are keyword/value pairs, all optional:
':key' specifies a function that produces the sorting key from an element,
':lessp' specifies the ordering predicate, defaulting to 'value&lt;',
':reverse' is used to reverse the sorting order,
':in-place' is used for in-place sorting, as the default is now to
sort a copy of the input.

The new signature is less error-prone and reduces the need to write
ordering predicates by hand.  We recommend that you use the ':key'
argument instead of ':lessp' unless a suitable ordering predicate is
already available.  This can also be used for multi-key sorting:

    (sort seq :key (lambda (x) (list (age x) (size x) (cost x))))

sorts by the return value of 'age', then by 'size', then by 'cost'.

The old signature, '(sort SEQ PREDICATE)', can still be used and sorts
its input in-place as before.</code></pre>
<pre><code>New API for 'derived-mode-p' and control of the graph of major modes</code></pre>
<pre><code>'derived-mode-p' now takes the list of modes as a single argument.
The same holds for 'provided-mode-derived-p'.
The old calling convention where multiple modes are passed as
separate arguments is deprecated.</code></pre>
<pre><code>New functions to access the graph of major modes.
While 'define-derived-mode' still only supports single inheritance,
modes can declare additional parents (for tests like 'derived-mode-p')
with 'derived-mode-add-parents'.
Accessing the 'derived-mode-parent' property directly is now
deprecated in favor of the new functions 'derived-mode-set-parent'
and 'derived-mode-all-parents'.</code></pre>
<p>This complexity is yet again borne out of tree-sitter’s introduction to Emacs. I do wonder if all this complexity (remember diamond pattern inheritance in OO?) will come back to bite us in a few years… I hope not.</p>
<pre><code>Drag-and-drop functions can now be called once for compound drops.
It is now possible for drag-and-drop handler functions to respond to
drops incorporating more than one URL.  Functions capable of this must
set their 'dnd-multiple-handler' symbol properties to a non-nil value.
See the Info node "(elisp) Drag and Drop".

The function 'dnd-handle-one-url' has been made obsolete, since it
cannot take these new handlers into account.</code></pre>
<pre><code>'notifications-notify' can use Icon Naming Specification for ':app-icon'.
You can use a symbol as the value for ':app-icon' to provide icon name
without specifying a file, like this:

    (notifications-notify
      :title "I am playing music" :app-icon 'multimedia-player)</code></pre>
<pre><code>New function 're-disassemble' to see the innards of a regexp.
If you built Emacs with '--enable-checking', you can use this to help
debug either your regexp performance problems or the regexp engine.</code></pre>
<pre><code>XLFDs are no longer restricted to 255 characters.
'font-xlfd-name' now returns an XLFD even if it is greater than 255
characters in length, provided that the LONG_XLFDs argument is true.
Other features in Emacs which employ XLFDs have been modified to
produce and understand XLFDs larger than 255 characters.</code></pre>
<pre><code>New macro 'static-if' for conditional evaluation of code.
This macro hides a form from the evaluator or byte-compiler based on a
compile-time condition.  This is handy for avoiding byte-compilation
warnings about code that will never actually run under some conditions.</code></pre>
<pre><code>Desktop notifications are now supported on the Haiku operating system.
The new function 'haiku-notifications-notify' provides a subset of the
capabilities of the 'notifications-notify' function in a manner
analogous to 'w32-notification-notify'.</code></pre>
<pre><code>New Haiku specific variable 'haiku-pass-control-tab-to-system'.
This sets whether Emacs should pass 'C-TAB' on to the system instead of
handling it, fixing a problem where window switching would not activate
if an Emacs frame had focus on the Haiku operating system.  Default
value is t.</code></pre>
<pre><code>New value 'if-regular' for the REPLACE argument to 'insert-file-contents'.
It results in 'insert-file-contents' erasing the buffer instead of
preserving markers if the file being inserted is not a regular file,
rather than signaling an error.</code></pre>
<pre><code>New variable 'current-key-remap-sequence'.
It is bound to the key sequence that caused a call to a function bound
within 'function-key-map' or 'input-decode-map' around those calls.</code></pre>
<pre><code>The function 'key-translate' can now remove translations.
If the second argument TO is nil, the existing key translation is
removed.</code></pre>
<pre><code>New variables describing the names of built in programs.
The new variables 'ctags-program-name', 'ebrowse-program-name',
'etags-program-name', 'hexl-program-name', 'emacsclient-program-name'
'movemail-program-name', and 'rcs2log-program-name' should be used
instead of "ctags", "ebrowse", "etags", "hexl", "emacsclient", and
"rcs2log", when starting one of these built in programs in a subprocess.</code></pre>
<pre><code>New variable 'case-symbols-as-words' affects case operations for symbols.
If non-nil, then case operations such as 'upcase-initials' or
'replace-match' (with nil FIXEDCASE) will treat the entire symbol name
as a single word.  This is useful for programming languages and styles
where only the first letter of a symbol's name is ever capitalized.
The default value of this variable is nil.</code></pre>
<pre><code>Bytecode is now always loaded eagerly.
Bytecode compiled with older Emacs versions for lazy loading using
'byte-compile-dynamic' is now loaded all at once.
As a consequence, 'fetch-bytecode' has no use, does nothing, and is
now obsolete.  The variable 'byte-compile-dynamic' has no effect any
more; compilation will always yield bytecode for eager loading.</code></pre>
<pre><code>Returned strings from functions and macros are never docstrings.
Functions and macros whose bodies consist of a single string literal now
only return that string, and will not use it as a docstring.  Example:

    (defun sing-a-song ()
      "Sing a song.")

The above function returns the string "Sing a song." and has no
docstring.  Previously, that string was used as both the docstring and
return value, which was never what the programmer wanted.  If you want
the string to be a docstring, add an explicit return value.

This change applies to 'defun', 'defsubst', 'defmacro' and 'lambda'
forms; other defining forms such as 'cl-defun' already worked this way.</code></pre>
<h3 id="new-or-changed-byte-compilation-warnings">New or changed byte-compilation warnings</h3>
<pre><code>Warn about missing 'lexical-binding' directive.
The compiler now warns if an Elisp file lacks the standard
'-*- lexical-binding: ... -*-' cookie on the first line.
This line typically looks something like

    ;;; My little pony mode  -*- lexical-binding: t -*-

It is needed to inform the compiler about which dialect of ELisp
your code is using: the modern dialect with lexical binding or
the old dialect with only dynamic binding.

Lexical binding avoids some name conflicts and allows the compiler to
detect more mistakes and generate more efficient code, so it is
recommended.  For how to adapt your code to lexical binding, see the
manual section "(elisp) Converting to Lexical Binding".

If your code cannot be converted to lexical binding, you can insert
the line

    ;;; -*- lexical-binding: nil -*-

first in the file to declare that it uses the old dialect.</code></pre>
<pre><code>Warn about empty bodies for more special forms and macros.
The compiler now warns about an empty body argument to 'when',
'unless', 'ignore-error' and 'with-suppressed-warnings' in addition to
the existing warnings for 'let' and 'let*'.  Example:

    (when (&gt; x 2))

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'empty-body'.</code></pre>
<pre><code>Warn about quoted error names in 'condition-case' and 'ignore-error'.
The compiler now warns about quoted condition (error) names
in 'condition-case' and 'ignore-error'.  Example:

    (condition-case nil
        (/ x y)
      ('arith-error "division by zero"))

Quoting them adds the error name 'quote' to those handled or ignored
respectively, which was probably not intended.</code></pre>
<pre><code>Warn about comparison with literal constants without defined identity.
The compiler now warns about comparisons by identity with a literal
string, cons, vector, record, function, large integer or float as this
may not match any value at all.  Example:

    (eq x "hello")

Only literals for symbols and small integers (fixnums), including
characters, are guaranteed to have a consistent (unique) identity.
This warning applies to 'eq', 'eql', 'memq', 'memql', 'assq', 'rassq',
'remq' and 'delq'.

To compare by (structural) value, use 'equal', 'member', 'assoc',
'rassoc', 'remove' or 'delete' instead.  Floats and bignums can also
be compared using 'eql', '=' and 'memql'.  Function literals cannot be
compared reliably at all.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.</code></pre>
<pre><code>Warn about 'condition-case' without handlers.
The compiler now warns when the 'condition-case' form is used without
any actual handlers, as in

    (condition-case nil (read buffer))

because it has no effect other than the execution of the body form.
In particular, no errors are caught or suppressed.  If the intention
was to catch all errors, add an explicit handler for 'error', or use
'ignore-error' or 'ignore-errors'.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.</code></pre>
<pre><code>Warn about 'unwind-protect' without unwind forms.
The compiler now warns when the 'unwind-protect' form is used without
any unwind forms, as in

    (unwind-protect (read buffer))

because the behavior is identical to that of the argument; there is
no protection of any kind.  Perhaps the intended unwind forms have
been misplaced or forgotten, or the use of 'unwind-protect' could be
simplified away.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.</code></pre>
<pre><code>Warn about useless trailing 'cond' clauses.
The compiler now warns when a 'cond' form contains clauses following a
default (unconditional) clause.  Example:

    (cond ((= x 0) (say "none"))
          (t (say "some"))
          (say "goodbye"))

Such a clause will never be executed, and is likely to be a mistake,
perhaps due to misplaced parens.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'suspicious'.</code></pre>
<pre><code>Warn about mutation of constant values.
The compiler now warns about code that modifies program constants in
some obvious cases.  Examples:

    (setcar '(1 2) 7)
    (aset [3 4] 0 8)
    (aset "abc" 1 ?d)

Such code may have unpredictable behavior because the constants are part
of the program and are not data structures generated afresh during
execution; the compiler does not expect them to change.

To avoid the warning, operate on an object created by the program
(maybe a copy of the constant), or use a non-destructive operation
instead.

This warning can be suppressed using 'with-suppressed-warnings' with
the warning name 'mutate-constant'.</code></pre>
<pre><code>Warn about more ignored function return values.
The compiler now warns when the return value from certain functions is
implicitly ignored.  Example:

    (progn (nreverse my-list) my-list)

will elicit a warning because it is usually pointless to call
'nreverse' on a list without using the returned value.

To silence the warning, make use of the value in some way, such as
assigning it to a variable.  You can also wrap the function call in
'(ignore ...)', or use 'with-suppressed-warnings' with the warning
name 'ignored-return-value'.

The warning will only be issued for calls to functions declared
'important-return-value' or 'side-effect-free' (but not 'error-free').</code></pre>
<pre><code>Warn about docstrings that contain control characters.
The compiler now warns about docstrings with control characters other
than newline and tab.  This is often a result of improper escaping.
Example:

    (defun my-fun ()
      "Uses c:\remote\dir\files and the key \C-x."
      ...)

where the docstring contains the four control characters 'CR', 'DEL',
'FF' and 'C-x'.

The warning name is 'docstrings-control-chars'.</code></pre>
<pre><code>The warning about wide docstrings can now be disabled separately.
Its warning name is 'docstrings-wide'.</code></pre>
<pre><code>'fset', 'defalias' and 'defvaralias' now signal an error for cyclic aliases.
Previously, 'fset', 'defalias' and 'defvaralias' could be made to
build circular function and variable indirection chains as in

    (defalias 'able 'baker)
    (defalias 'baker 'able)

but trying to use them would sometimes make Emacs hang.  Now, an attempt
to create such a loop results in an error.

Since circular alias chains now cannot occur, 'function-alias-p',
'indirect-function' and 'indirect-variable' will never signal an error.
Their 'noerror' arguments have no effect and are therefore obsolete.</code></pre>
<h3 id="touch-screen-support">Touch Screen support</h3>
<pre><code>'x-popup-menu' now understands touch screen events.
When a 'touchscreen-begin' or 'touchscreen-end' event is passed as the
POSITION argument, it will behave as if that event was a mouse event.</code></pre>
<pre><code>New functions for handling touch screen events.
The new functions 'touch-screen-track-tap' and 'touch-screen-track-drag'
handle tracking common touch screen gestures from within a command.</code></pre>
<pre><code>New parameter to 'touchscreen-end' events.
CANCEL non-nil establishes that the touch sequence has been intercepted
by programs such as window managers and should be ignored with Emacs.</code></pre>
<pre><code>New variable 'inhibit-auto-fill' to temporarily prevent auto-fill.</code></pre>
<pre><code>New variable 'secondary-tool-bar-map'.
If non-nil, this variable contains a keymap of menu items that are
displayed along tool bar items defined by 'tool-bar-map'.  These items
are displayed below the tool bar if the value of 'tool-bar-position' is
'top', and above it if the value is 'bottom'.  This is used by
'modifier-bar-mode'.</code></pre>
<pre><code>New variable 'completion-lazy-hilit'.
Lisp programs that present completion candidates may bind this
variable non-nil around calls to functions such as
'completion-all-completions'.  This tells the underlying completion
styles to skip eager fontification of completion candidates, which
improves performance.  Such a Lisp program can then use the
'completion-lazy-hilit' function to fontify candidates just in time.</code></pre>
<pre><code>New primitive 'buffer-last-name'.
It returns the name of a buffer before the last time it was renamed or
killed.</code></pre>
<pre><code>New primitive 'marker-last-position'.
It returns the last position of a marker in its buffer even if that
buffer has been killed.  ('marker-position' would return nil in that
case.)</code></pre>
<h3 id="functions-and-variables-to-transpose-sexps">Functions and variables to transpose sexps</h3>
<p>Juri Linkov did an awful lot of work to try and salvage the rather broken tree-sitter “sexp” commands and I think he’s done a stellar job, considering how hard it is to do <a href="https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter">Structured Movement and Editing with Tree-Sitter</a> in a way that works the way users expect it work.</p>
<pre><code>New helper variable 'transpose-sexps-function'.
Lisp programs can now set this variable to customize the behavior of the
'transpose-sexps' command.</code></pre>
<pre><code>New function 'transpose-sexps-default-function'.
The previous implementation of 'transpose-sexps' was moved into its own
function, to be used in 'transpose-sexps-function'.</code></pre>
<pre><code>New function 'treesit-transpose-sexps'.
Tree-sitter now unconditionally sets 'transpose-sexps-function' for all
tree-sitter enabled modes to this function.</code></pre>
<h3 id="functions-and-variables-to-move-by-program-statements">Functions and variables to move by program statements</h3>
<pre><code>New variable 'forward-sentence-function'.
Major modes can now set this variable to customize the behavior of the
'forward-sentence' command.</code></pre>
<pre><code>New function 'forward-sentence-default-function'.
The previous implementation of 'forward-sentence' is moved into its
own function, to be bound by 'forward-sentence-function'.</code></pre>
<pre><code>New function 'treesit-forward-sentence'.
All tree-sitter enabled modes that define 'sentence' in
'treesit-thing-settings' now set 'forward-sentence-function' to call
'treesit-forward-sentence'.</code></pre>
<h3 id="functions-and-variables-to-move-by-program-sexps">Functions and variables to move by program sexps</h3>
<pre><code>New function 'treesit-forward-sexp'.
Tree-sitter conditionally sets 'forward-sexp-function' for major modes
that have defined 'sexp' in 'treesit-thing-settings' to enable
sexp-related motion commands.</code></pre>
<pre><code>New user option 'native-comp-async-warnings-errors-kind'.
It allows control of what kinds of warnings and errors from asynchronous
native compilation are reported to the parent Emacs process.  The
default is to report all errors and only important warnings.  If you
were used to customizing 'native-comp-async-report-warnings-errors' to
nil or 'silent', we suggest that you now leave it at its default value,
and see if you get only warnings that matter.</code></pre>
<pre><code>New 'ftype' function declaration.
The declaration '(ftype TYPE)' specifies the type of a function.
Example:

    (defun hello (x y)
      (declare (ftype (function (integer boolean) string)))
      ...)

specifies that the function takes two arguments, an integer and a
boolean, and returns a string.  If the compilation happens with
'compilation-safety' set to zero, this information can be used by the
native compiler to produce better code, but specifying an incorrect type
may lead to Emacs crashing.  See the Info node "(elisp) Declare Form"
for further information.</code></pre>
<p>You can now declare the type of functions in Emacs, presumably to help the native compiler make informed choices about the input and return value. We are moving inexorably closer to Common Lisp…</p>
<pre><code>New 'important-return-value' function declaration and property.
The declaration '(important-return-value t)' sets the
'important-return-value' property which indicates that the function
return value should probably not be thrown away implicitly.</code></pre>
<pre><code>New functions 'file-user-uid' and 'file-group-gid'.
These functions are like 'user-uid' and 'group-gid', respectively, but
are aware of file name handlers, so they will return the remote UID or
GID for remote files (or -1 if the connection has no associated user).</code></pre>
<pre><code>'treesit-font-lock-rules' now accepts additional global keywords.
When supplied with ':default-language LANGUAGE', rules after it will
default to use 'LANGUAGE'.</code></pre>
<p>A welcome bit of syntactic sugar.</p>
<pre><code>New optional argument to 'modify-dir-local-variable'.
An optional 5th argument FILE has been added to
'modify-dir-local-variable'.  It can be used to specify which file to
modify instead of the default ".dir-locals.el".</code></pre>
<h3 id="connection-local-variables">Connection local variables</h3>
<p>Connection local variables are variables local to Tramp-specific connections.</p>
<pre><code>New macros 'connection-local-p' and 'connection-local-value'.
The former macro returns non-nil if a variable has a connection-local
binding.  The latter macro returns the connection-local value of a
variable if any, or its current value.</code></pre>
<h3 id="hash-tables">Hash tables</h3>
<pre><code>':rehash-size' and ':rehash-threshold' args no longer have any effect.
These keyword arguments are now ignored by 'make-hash-table'.  Emacs
manages the memory for all hash table objects in the same way.
The functions 'hash-table-rehash-size' and 'hash-table-rehash-threshold'
remain for compatibility but now always return the old default values.</code></pre>
<pre><code>The printed representation has been shrunk and simplified.
The 'test' parameter is omitted if it is 'eql' (the default), as is
'data' if empty.  'rehash-size', 'rehash-threshold' and 'size' are
always omitted, and ignored if present when the object is read back in.</code></pre>
<h3 id="obarrays">Obarrays</h3>
<pre><code>New obarray type.
Obarrays are now represented by an opaque type instead of using vectors.
They are created by 'obarray-make' and manage their internal storage
automatically, which means that the size parameter to 'obarray-make' can
safely be omitted.  That is, they do not become slower as they fill up.

The old vector representation is still accepted by functions operating
on obarrays, but 'obarrayp' only returns t for obarray objects.
'type-of' now returns 'obarray' for obarray objects.

Old code which (incorrectly) created "obarrays" as Lisp vectors filled
with something other than 0, as in '(make-vector N nil)', will no longer
work, and should be rewritten to use 'obarray-make'.  Alternatively, you
can fill the vector with 0.</code></pre>
<pre><code>New function 'obarray-clear' removes all symbols from an obarray.</code></pre>
<pre><code>'obarray-size' and 'obarray-default-size' are now obsolete.
They pertained to the internal storage size which is now irrelevant.</code></pre>
<pre><code>'treesit-install-language-grammar' can handle local directory instead of URL.
It is now possible to pass a directory of a local repository as URL
inside 'treesit-language-source-alist', so that calling
'treesit-install-language-grammar' will avoid cloning the repository.
It may be useful, for example, for the purposes of bisecting a
treesitter grammar.</code></pre>
<pre><code>New buffer-local variable 'tabulated-list-groups'.
It controls display and separate sorting of groups of entries.  By
default no grouping or sorting is done.</code></pre>
<pre><code>New variable 'revert-buffer-restore-functions'.
It helps to preserve various states after reverting the buffer.</code></pre>
<pre><code>New text property 'context-menu-functions'.
Like the variable with the same name, it adds menus from the list that
is the value of the property to context menus shown when clicking on the
text which as this property.</code></pre>
<pre><code>Detecting the end of an iteration of a keyboard macro.
'read-event', 'read-char', and 'read-char-exclusive' no longer return -1
when called at the end of an iteration of the execution of a keyboard
macro.  Instead, they will transparently continue reading available input
(e.g., from the keyboard).  If you need to detect the end of a macro
iteration, check the following condition before calling one of the
aforementioned functions:

    (and (arrayp executing-kbd-macro)
         (&gt;= executing-kbd-macro-index (length executing-kbd-macro)))</code></pre>
<pre><code>'vtable-update-object' updates an existing object with just two arguments.
It is now possible to update the representation of an object in a vtable
by calling 'vtable-update-object' with just the vtable and the object as
arguments.  (Previously, the OLD-OBJECT argument was required which, in
this case, would mean repeating the object in the argument list.)  When
replacing an object with a different one, passing both the new and old
objects is still necessary.</code></pre>
<pre><code>'vtable-insert-object' can insert "before" or at an index.
The signature of 'vtable-insert-object' has changed and is now:

    (vtable-insert-object TABLE OBJECT &amp;optional LOCATION BEFORE)

LOCATION corresponds to the old AFTER-OBJECT argument; if BEFORE is
non-nil, the new object is inserted before the LOCATION object, making
it possible to insert a new object at the top of the table.  (Before,
this was not possible.)  In addition, LOCATION can be an integer, a
(zero-based) index into the table at which the new object is inserted
(BEFORE is ignored in this case).</code></pre>
<pre><code>New function 'sqlite-execute-batch'.
This function lets the user execute multiple SQL statements in one go.
It is useful, for example, when a Lisp program needs to evaluate an
entire SQL file.</code></pre>
<h3 id="json">JSON</h3>
<pre><code>'json-serialize' now always returns a unibyte string.
This is appropriate since it is an encoding operation.  In the unlikely
event that a multibyte string is needed, the result can be decoded using

    (decode-coding-string RESULT 'utf-8)</code></pre>
<pre><code>The parser keeps duplicated object keys in alist and plist output.
A JSON object such as '{"a":1,"a":2}' will now be translated into the
Lisp values '((a . 1) (a . 2))' or '(:a 1 :a 2)' if alist or plist
object types are requested.</code></pre>
<pre><code>The parser sometimes signals different types of errors.
It will now signal 'json-utf8-decode-error' for inputs that are not
correctly UTF-8 encoded.</code></pre>
<pre><code>The parser and encoder now accept arbitrarily large integers.
Previously, they were limited to the range of signed 64-bit integers.</code></pre>
<pre><code>New tree-sitter functions and variables for defining and using "things"</code></pre>
<pre><code>New variable 'treesit-thing-settings'.
It allows modes to define "things" like 'defun', 'text', 'sexp', and
'sentence' for navigation commands and tree-traversal functions.</code></pre>
<pre><code>New functions for navigating "things".
There are new navigation functions 'treesit-thing-prev',
'treesit-thing-next', 'treesit-navigate-thing',
'treesit-beginning-of-thing', and 'treesit-end-of-thing'.</code></pre>
<pre><code>New functions 'treesit-thing-at', 'treesit-thing-at-point'.</code></pre>
<p>The tree-sitter-enabled equivalent of <code>thing-at-point</code>. This really should be merged into the existing thing at point system; if TS is available, then its settings should take precedence.</p>
<pre><code>Tree-traversing functions.
The functions 'treesit-search-subtree', 'treesit-search-forward',
'treesit-search-forward-goto', and 'treesit-induce-sparse-tree' now
accept more kinds of predicates.  Lisp programs can now use thing
symbols (defined in 'treesit-thing-settings') and any thing definitions
for the predicate argument.</code></pre>
<h3 id="other-tree-sitter-function-and-variable-changes">Other tree-sitter function and variable changes</h3>
<pre><code>'treesit-parser-list' now takes additional optional arguments.
The additional arguments are LANGUAGE and TAG.  If LANGUAGE is given,
only return parsers for that language.  If TAG is given, only return
parsers with that tag.  Note that passing nil as tag doesn't mean return
all parsers, but rather "all parsers with no tags".</code></pre>
<pre><code>New variable 'treesit-primary-parser'.
This variable should be set by multi-langauge major modes before calling
'treesit-major-mode-setup', in order for tree-sitter integration
functionalities to operate correctly.</code></pre>
<p>I’m not convinced having the notion of a primary parser is the right approach for multi-language support in a buffer. The notion of primacy is not going to resolve problems where multiple languages that do not know of each other have to coexist in the same buffer; those languages by definition do not have a primary language, and trying to coax Emacs and thus tree-sitter into thinking there is such a thing is flawed.</p>
<h3 id="changes-in-emacs-30.1-on-non-free-operating-systems">Changes in Emacs 30.1 on Non-Free Operating Systems</h3>
<h3 id="ms-windows">MS-Windows</h3>
<pre><code>You can now opt out of following MS-Windows' Dark mode.
By default, Emacs on MS-Windows follows the system's Dark mode for its
title bars' and scroll bars' appearance.  If the new user option
'w32-follow-system-dark-mode' is customized to the nil value, Emacs
will disregard the system's Dark mode and will always use the default
Light mode.</code></pre>
<pre><code>You can now use Image-Dired even if the 'convert' program is not installed.
If you don't have GraphicsMagick or ImageMagick installed, and thus the
'gm convert'/'convert' program is not available, Emacs on MS-Windows
will now use its own function 'w32image-create-thumbnail' to create
thumbnail images and show them in the thumbnail buffer.  Unlike with
using 'convert', this fallback method is synchronous, so Emacs will wait
until all the thumbnails are created and displayed, before showing them.</code></pre>
<pre><code>Emacs on MS-Windows now supports the ':stipple' face attribute.</code></pre>
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Building a BitTorrent client from the ground up in Go (180 pts)]]></title>
            <link>https://blog.jse.li/posts/torrent/</link>
            <guid>43157980</guid>
            <pubDate>Mon, 24 Feb 2025 10:34:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.jse.li/posts/torrent/">https://blog.jse.li/posts/torrent/</a>, See on <a href="https://news.ycombinator.com/item?id=43157980">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <article>
    

    
    <p><strong>tl;dr:</strong> What is the complete path between visiting thepiratebay and sublimating an mp3 file from thin air? In this post, we’ll implement enough of the BitTorrent protocol to download Debian. Look at the <a href="https://github.com/veggiedefender/torrent-client/">Source code</a> or skip to the <a href="https://blog.jse.li/posts/torrent#putting-it-all-together">last bit</a>.
    </p>
    

    <section>
      
<p>This post is also available in <a href="https://web.archive.org/web/20200616163517if_/https://4gophers.ru/articles/bittorrent/#.Xuj0zivLerw">Russian</a>, <a href="https://markruler.github.io/posts/go/building-bittorrent-client/">Korean</a>, and <a href="https://blog.mynameisdhr.com/YongGOCongLingJianLiBitTorrentKeHuDuan/">Chinese</a>.</p>
<p>BitTorrent is a protocol for downloading and distributing files across the Internet. In contrast with the traditional client/server relationship, in which downloaders connect to a central server (for example: watching a movie on Netflix, or loading the web page you’re reading now), participants in the BitTorrent network, called <strong>peers</strong>, download pieces of files from <em>each other</em>—this is what makes it a <strong>peer-to-peer</strong> protocol. We’ll investigate how this works, and build our own client that can find peers and exchange data between them.</p>
<img src="https://blog.jse.li/torrent/client-server-p2p.png" alt="diagram showing the difference between client/server (all clients connecting to one server) and peer-to-peer (peers connecting to each other) relationships">
<p>The protocol evolved organically over the past 20 years, and various people and organizations added extensions for features like encryption, private torrents, and new ways of finding peers. We’ll be implementing the <a href="https://www.bittorrent.org/beps/bep_0003.html">original spec</a> from 2001 to keep this a weekend-sized project.</p>
<p>I’ll be using a <a href="https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/#indexlist">Debian ISO</a> file as my guinea pig because it’s big, but not huge, at 350MB. As a popular Linux distribution, there will be lots of fast and cooperative peers for us to connect to. And we’ll avoid the legal and ethical issues related to downloading pirated content.</p>

<div><p>Consider donating to a local <a href="https://www.communityjusticeexchange.org/nbfn-directory">community bail fund</a>.
</p><p>
Your money will pay for legal aid and bail for protestors who have been arrested for standing up to police brutality, institutional racism, and the murder of Black men and women like George Floyd, Breonna Taylor, Ahmaud Arbery, and Nina Pop.
</p><p>
In the tech community, we talk a lot about inclusivity and diversity. Now is the time to take concrete action.
</p><p>
<a href="https://www.communityjusticeexchange.org/nbfn-directory">https://www.communityjusticeexchange.org/nbfn-directory</a></p></div>

<h2 id="finding-peers">Finding peers</h2>
<p>Here’s a problem: we want to download a file with BitTorrent, but it’s a peer-to-peer protocol and we have no idea where to find peers to download it from. This is a lot like moving to a new city and trying to make friends—maybe we’ll hit up a local pub or a meetup group! Centralized locations like these are the big idea behind <strong>trackers</strong>, which are central servers that introduce peers to each other. They’re just web servers running over HTTP<span>*<span>Some trackers use a <a href="http://bittorrent.org/beps/bep_0015.html">UDP</a> binary protocol to save bandwidth</span></span>
, and you can find Debian’s at <a href="http://bttracker.debian.org:6969/">http://bttracker.debian.org:6969/</a></p>
<img src="https://blog.jse.li/torrent/trackers.png" alt="illustration of a desktop computer and laptop sitting at a pub">
<p>Of course, these central servers are liable to get raided by the feds if they facilitate peers exchanging illegal content. You may remember reading about trackers like TorrentSpy, Popcorn Time, and KickassTorrents getting seized and shut down. New methods cut out the middleman by making even <strong>peer discovery</strong> a distributed process. We won’t be implementing them, but if you’re interested, some terms you can research are <strong>DHT</strong>, <strong>PEX</strong>, and <strong>magnet links</strong>.</p>
<h2 id="parsing-a-torrent-file">Parsing a .torrent file</h2>
<p>A .torrent file describes the contents of a torrentable file and information for connecting to a tracker. It’s all we need in order to kickstart the process of downloading a torrent. Debian’s .torrent file looks like this:</p>
<pre><code>d8:announce41:http://bttracker.debian.org:6969/announce7:comment35:"Debian CD from cdimage.debian.org"13:creation datei1573903810e9:httpseedsl145:https://cdimage.debian.org/cdimage/release/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso145:https://cdimage.debian.org/cdimage/archive/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.isoe4:infod6:lengthi351272960e4:name31:debian-10.2.0-amd64-netinst.iso12:piece lengthi262144e6:pieces26800:�����PS�^�� (binary blob of the hashes of each piece)ee
</code></pre><p>That mess is encoded in a format called <strong>Bencode</strong> (pronounced <em>bee-encode</em>), and we’ll need to decode it.</p>
<p>Bencode can encode roughly the same types of structures as JSON—strings, integers, lists, and dictionaries. Bencoded data is not as human-readable/writable as JSON, but it can efficiently handle binary data and it’s really simple to parse from a stream. Strings come with a length prefix, and look like <code>4:spam</code>. Integers go between <em>start</em> and <em>end</em> markers, so <code>7</code> would encode to <code>i7e</code>. Lists and dictionaries work in a similar way: <code>l4:spami7ee</code> represents <code>['spam', 7]</code>, while <code>d4:spami7ee</code> means <code>{spam: 7}</code>.</p>
<p>In a prettier format, our .torrent file looks like this:</p>
<div>
  <pre><code><span>d</span>
  <span>8</span>:<span>announce</span>
    <span>41</span>:<span>http://bttracker.debian.org:6969/announce</span>
  <span>7</span>:<span>comment</span>
    <span>35</span>:<span>"Debian CD from cdimage.debian.org"</span>
  <span>13</span>:<span>creation date</span>
    <span>i</span><span>1573903810</span><span>e</span>
  <span>4</span>:<span>info</span>
    <span>d</span>
      <span>6</span>:<span>length</span>
        <span>i</span><span>351272960</span><span>e</span>
      <span>4</span>:<span>name</span>
        <span>31</span>:<span>debian-10.2.0-amd64-netinst.iso</span>
      <span>12</span>:<span>piece length</span>
        <span>i</span><span>262144</span><span>e</span>
      <span>6</span>:<span>pieces</span>
        <span>26800</span>:<span>�����PS�^�� (binary blob of the hashes of each piece)</span></code>
    <span>e</span>
<span>e</span></pre>
</div>
<p>In this file, we can spot the URL of the tracker, the creation date (as a Unix timestamp), the name and size of the file, and a big binary blob containing the SHA-1 hashes of each <strong>piece</strong>, which are equally-sized parts of the file we want to download. The exact size of a piece varies between torrents, but they are usually somewhere between 256KB and 1MB. This means that a large file might be made up of <em>thousands</em> of pieces. We’ll download these pieces from our peers, check them against the hashes from our torrent file, assemble them together, and boom, we’ve got a file!</p>
<img src="https://blog.jse.li/torrent/pieces.png" alt="illustration of a file being cut with scissors into multiple pieces, starting with piece 0">
<p>This mechanism allows us to verify the integrity of each piece as we go. It makes BitTorrent resistant to accidental corruption or intentional <strong>torrent poisoning</strong>. Unless an attacker is capable of breaking SHA-1 with a preimage attack, we will get exactly the content we asked for.</p>
<p>It would be really fun to write a bencode parser, but parsing isn’t our focus today. But I found Fredrik Lundh’s <a href="https://web.archive.org/web/20200105114449/https://effbot.org/zone/bencode.htm">50 line parser</a> to be especially illuminating. For this project, I used <a href="https://github.com/jackpal/bencode-go">github.com/jackpal/bencode-go</a>:</p>
<div>
<div><pre><code data-lang="golang"><span>import</span> <span>(</span>
    <span>"github.com/jackpal/bencode-go"</span>
<span>)</span>

<span>type</span> <span>bencodeInfo</span> <span>struct</span> <span>{</span>
    <span>Pieces</span>      <span>string</span> <span>`bencode:"pieces"`</span>
    <span>PieceLength</span> <span>int</span>    <span>`bencode:"piece length"`</span>
    <span>Length</span>      <span>int</span>    <span>`bencode:"length"`</span>
    <span>Name</span>        <span>string</span> <span>`bencode:"name"`</span>
<span>}</span>

<span>type</span> <span>bencodeTorrent</span> <span>struct</span> <span>{</span>
    <span>Announce</span> <span>string</span>      <span>`bencode:"announce"`</span>
    <span>Info</span>     <span>bencodeInfo</span> <span>`bencode:"info"`</span>
<span>}</span>

<span>// Open parses a torrent file
</span><span></span><span>func</span> <span>Open</span><span>(</span><span>r</span> <span>io</span><span>.</span><span>Reader</span><span>)</span> <span>(</span><span>*</span><span>bencodeTorrent</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>bto</span> <span>:=</span> <span>bencodeTorrent</span><span>{}</span>
    <span>err</span> <span>:=</span> <span>bencode</span><span>.</span><span>Unmarshal</span><span>(</span><span>r</span><span>,</span> <span>&amp;</span><span>bto</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>nil</span><span>,</span> <span>err</span>
    <span>}</span>
    <span>return</span> <span>&amp;</span><span>bto</span><span>,</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/torrentfile.go">view in context</a></p>
</div>
<p>Because I like to keep my structures relatively flat, and I like to keep my application structs separate from my serialization structs, I exported a different, flatter struct named <code>TorrentFile</code> and wrote a few helper functions to convert between the two.</p>
<p>Notably, I split <code>pieces</code> (previously a string) into a slice of hashes (each <code>[20]byte</code>) so that I can easily access individual hashes later. I also computed the SHA-1 hash of the entire bencoded <code>info</code> dict (the one which contained the name, size, and piece hashes). We know this as the <strong>infohash</strong> and it uniquely identifies files when we talk to trackers and peers. More on this later.</p>
<img src="https://blog.jse.li/torrent/info-hash.png" alt="a name tag saying 'Hello my name is 86d4c80024a469be4c50bc5a102cf71780310074'">
<div>
<div><pre><code data-lang="golang"><span>type</span> <span>TorrentFile</span> <span>struct</span> <span>{</span>
    <span>Announce</span>    <span>string</span>
    <span><span>InfoHash</span>    <span>[</span><span>20</span><span>]</span><span>byte</span></span>
    <span><span>PieceHashes</span> <span>[][</span><span>20</span><span>]</span><span>byte</span></span>
    <span>PieceLength</span> <span>int</span>
    <span>Length</span>      <span>int</span>
    <span>Name</span>        <span>string</span>
<span>}</span>
</code><p><code data-lang="golang"><span>func</span> <span>(</span><span>bto</span> <span><em></em></span><em><span>bencodeTorrent</span><span>)</span> <span>toTorrentFile</span><span>()</span> <span>(</span><span></span></em><span>TorrentFile</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
<span>// …
</span><span></span><span>}</span></code></p></pre></div>
<p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/torrentfile.go#L120-L138">view in context</a></p>
</div>
<h2 id="retrieving-peers-from-the-tracker">Retrieving peers from the tracker</h2>
<p>Now that we have information about the file and its tracker, let’s talk to the tracker to <strong>announce</strong> our presence as a peer and to retrieve a list of other peers. We just need to make a GET request to the <code>announce</code> URL supplied in the .torrent file, with a few query parameters:</p>
<div>
<div><pre><code data-lang="golang"><span>func</span> <span>(</span><span>t</span> <span>*</span><span>TorrentFile</span><span>)</span> <span>buildTrackerURL</span><span>(</span><span>peerID</span> <span>[</span><span>20</span><span>]</span><span>byte</span><span>,</span> <span>port</span> <span>uint16</span><span>)</span> <span>(</span><span>string</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>base</span><span>,</span> <span>err</span> <span>:=</span> <span>url</span><span>.</span><span>Parse</span><span>(</span><span>t</span><span>.</span><span>Announce</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>""</span><span>,</span> <span>err</span>
    <span>}</span>
    <span>params</span> <span>:=</span> <span>url</span><span>.</span><span>Values</span><span>{</span>
        <span>"info_hash"</span><span>:</span>  <span>[]</span><span>string</span><span>{</span><span>string</span><span>(</span><span>t</span><span>.</span><span>InfoHash</span><span>[:])},</span>
        <span>"peer_id"</span><span>:</span>    <span>[]</span><span>string</span><span>{</span><span>string</span><span>(</span><span>peerID</span><span>[:])},</span>
        <span>"port"</span><span>:</span>       <span>[]</span><span>string</span><span>{</span><span>strconv</span><span>.</span><span>Itoa</span><span>(</span><span>int</span><span>(</span><span>Port</span><span>))},</span>
        <span>"uploaded"</span><span>:</span>   <span>[]</span><span>string</span><span>{</span><span>"0"</span><span>},</span>
        <span>"downloaded"</span><span>:</span> <span>[]</span><span>string</span><span>{</span><span>"0"</span><span>},</span>
        <span>"compact"</span><span>:</span>    <span>[]</span><span>string</span><span>{</span><span>"1"</span><span>},</span>
        <span>"left"</span><span>:</span>       <span>[]</span><span>string</span><span>{</span><span>strconv</span><span>.</span><span>Itoa</span><span>(</span><span>t</span><span>.</span><span>Length</span><span>)},</span>
    <span>}</span>
    <span>base</span><span>.</span><span>RawQuery</span> <span>=</span> <span>params</span><span>.</span><span>Encode</span><span>()</span>
    <span>return</span> <span>base</span><span>.</span><span>String</span><span>(),</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/tracker.go#L19-L35">view in context</a></p>
</div>
<p>The important ones:</p>
<ul>
<li><strong>info_hash</strong>: Identifies the <em>file</em> we’re trying to download. It’s the infohash we calculated earlier from the bencoded <code>info</code> dict. The tracker will use this to figure out which peers to show us.</li>
<li><strong>peer_id</strong>: A 20 byte name to identify <em>ourselves</em> to trackers and peers. We’ll just generate 20 random bytes for this. Real BitTorrent clients have IDs like <code>-TR2940-k8hj0wgej6ch</code> which identify the client software and version—in this case, TR2940 stands for Transmission client 2.94.</li>
</ul>
<img src="https://blog.jse.li/torrent/info-hash-peer-id.png" alt="a file with a name tag saying 'info_hash' and a person with a name tag 'peer_id'">
<h2 id="parsing-the-tracker-response">Parsing the tracker response</h2>
<p>We get back a bencoded response:</p>
<div>
  <pre><code><span>d</span>
  <span>8</span>:<span>interval</span>
    <span>i</span><span>900</span><span>e</span>
  <span>5</span>:<span>peers</span>
    <span>252</span>:<span>(another long binary blob)</span>
<span>e</span></code></pre>
</div>
<p><code>Interval</code> tells us how often we’re supposed to connect to the tracker again to refresh our list of peers. A value of 900 means we should reconnect every 15 minutes (900 seconds).</p>
<p><code>Peers</code> is another long binary blob containing the IP addresses of each peer. It’s made out of <strong>groups of six bytes</strong>. The first four bytes in each group represent the peer’s IP address—each byte represents a number in the IP. The last two bytes represent the port, as a big-endian <code>uint16</code>. <strong>Big-endian</strong>, or <strong>network order</strong>, means that we can interpret a group of bytes as an integer by just squishing them together left to right. For example, the bytes <code>0x1A</code>, <code>0xE1</code> make <code>0x1AE1</code>, or 6881 in decimal.<span>*<span>Interpreting the same bytes in <strong>little-endian</strong> order would make 0xE11A = 57626</span></span></p>
<img src="https://blog.jse.li/torrent/address.png" alt="diagram showing how 192, 0, 2, 123, 0x1A, 0xE1 can be interpreted as 192.0.1.123:6881">
<div>
<div><pre><code data-lang="golang"><span>// Peer encodes connection information for a peer
</span><span></span><span>type</span> <span>Peer</span> <span>struct</span> <span>{</span>
    <span>IP</span>   <span>net</span><span>.</span><span>IP</span>
    <span>Port</span> <span>uint16</span>
<span>}</span>

<span>// Unmarshal parses peer IP addresses and ports from a buffer
</span><span></span><span>func</span> <span>Unmarshal</span><span>(</span><span>peersBin</span> <span>[]</span><span>byte</span><span>)</span> <span>([]</span><span>Peer</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>const</span> <span>peerSize</span> <span>=</span> <span>6</span> <span>// 4 for IP, 2 for port
</span><span></span>    <span>numPeers</span> <span>:=</span> <span>len</span><span>(</span><span>peersBin</span><span>)</span> <span>/</span> <span>peerSize</span>
    <span>if</span> <span>len</span><span>(</span><span>peersBin</span><span>)</span><span>%</span><span>peerSize</span> <span>!=</span> <span>0</span> <span>{</span>
        <span>err</span> <span>:=</span> <span>fmt</span><span>.</span><span>Errorf</span><span>(</span><span>"Received malformed peers"</span><span>)</span>
        <span>return</span> <span>nil</span><span>,</span> <span>err</span>
    <span>}</span>
    <span>peers</span> <span>:=</span> <span>make</span><span>([]</span><span>Peer</span><span>,</span> <span>numPeers</span><span>)</span>
    <span>for</span> <span>i</span> <span>:=</span> <span>0</span><span>;</span> <span>i</span> <span>&lt;</span> <span>numPeers</span><span>;</span> <span>i</span><span>++</span> <span>{</span>
        <span>offset</span> <span>:=</span> <span>i</span> <span>*</span> <span>peerSize</span>
        <span>peers</span><span>[</span><span>i</span><span>].</span><span>IP</span> <span>=</span> <span>net</span><span>.</span><span>IP</span><span>(</span><span>peersBin</span><span>[</span><span>offset</span> <span>:</span> <span>offset</span><span>+</span><span>4</span><span>])</span>
        <span>peers</span><span>[</span><span>i</span><span>].</span><span>Port</span> <span>=</span> <span>binary</span><span>.</span><span>BigEndian</span><span>.</span><span>Uint16</span><span>(</span><span>peersBin</span><span>[</span><span>offset</span><span>+</span><span>4</span> <span>:</span> <span>offset</span><span>+</span><span>6</span><span>])</span>
    <span>}</span>
    <span>return</span> <span>peers</span><span>,</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/peers/peers.go">view in context</a></p>
</div>
<h2 id="downloading-from-peers">Downloading from peers</h2>
<p>Now that we have a list of peers, it’s time to connect with them and start downloading pieces! We can break down the process into a few steps. For each peer, we want to:</p>
<ol>
<li>Start a TCP connection with the peer. This is like starting a phone call.</li>
<li>Complete a two-way BitTorrent <strong>handshake</strong>. <em>“Hello?” “Hello."</em></li>
<li>Exchange <strong>messages</strong> to download <strong>pieces</strong>. <em>“I’d like piece #231 please."</em></li>
</ol>
<h2 id="start-a-tcp-connection">Start a TCP connection</h2>
<div>
<div><pre><code data-lang="golang"><span>conn</span><span>,</span> <span>err</span> <span>:=</span> <span>net</span><span>.</span><span>DialTimeout</span><span>(</span><span>"tcp"</span><span>,</span> <span>peer</span><span>.</span><span>String</span><span>(),</span> <span>3</span><span>*</span><span>time</span><span>.</span><span>Second</span><span>)</span>
<span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
    <span>return</span> <span>nil</span><span>,</span> <span>err</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/client/client.go#L65-L69">view in context</a></p>
</div>
<p>I set a timeout so that I don’t waste too much time on peers that aren’t going to let me connect. For the most part, it’s a pretty standard TCP connection.</p>
<h2 id="complete-the-handshake">Complete the handshake</h2>
<p>We’ve just set up a connection with a peer, but we want do a handshake to validate our assumptions that the peer</p>
<ul>
<li>can communicate using the BitTorrent protocol</li>
<li>is able to understand and respond to our messages</li>
<li>has the file that we want, or at least knows what we’re talking about</li>
</ul>
<img src="https://blog.jse.li/torrent/handshake.png" alt="Two computers communicating. One asks 'do you speak BitTorrent and have this file?' and the other replies 'I speak BitTorrent and have that file'">
<p>My father told me that the secret to a good handshake is a firm grip and eye contact. The secret to a good BitTorrent handshake is that it’s made up of five parts:</p>
<ol>
<li>The length of the protocol identifier, which is always 19 (0x13 in hex)</li>
<li>The protocol identifier, called the <strong>pstr</strong> which is always <code>BitTorrent protocol</code></li>
<li>Eight <strong>reserved bytes</strong>, all set to 0. We’d flip some of them to 1 to indicate that we support certain <a href="http://www.bittorrent.org/beps/bep_0010.html">extensions</a>. But we don’t, so we’ll keep them at 0.</li>
<li>The <strong>infohash</strong> that we calculated earlier to identify which file we want</li>
<li>The <strong>Peer ID</strong> that we made up to identify ourselves</li>
</ol>
<p>Put together, a handshake string might look like this:</p>
<div><pre><code><span>\x13</span><span>BitTorrent protocol</span><span>\x00\x00\x00\x00\x00\x00\x00\x00</span><span>\x86\xd4\xc8\x00\x24\xa4\x69\xbe\x4c\x50\xbc\x5a\x10\x2c\xf7\x17\x80\x31\x00\x74</span><span>-TR2940-k8hj0wgej6ch</span></code></pre></div>
<p>After we send a handshake to our peer, we should receive a handshake back in the same format. The infohash we get back should match the one we sent so that we know that we’re talking about the same file. If everything goes as planned, we’re good to go. If not, we can sever the connection because there’s something wrong. <em>“Hello?” “这是谁？ 你想要什么？” “Okay, wow, wrong number."</em></p>
<p>In our code, let’s make a struct to represent a handshake, and write a few methods for serializing and reading them:</p>
<div>
<div><pre><code data-lang="golang"><span>// A Handshake is a special message that a peer uses to identify itself
</span><span></span><span>type</span> <span>Handshake</span> <span>struct</span> <span>{</span>
    <span>Pstr</span>     <span>string</span>
    <span>InfoHash</span> <span>[</span><span>20</span><span>]</span><span>byte</span>
    <span>PeerID</span>   <span>[</span><span>20</span><span>]</span><span>byte</span>
<span>}</span>

<span>// Serialize serializes the handshake to a buffer
</span><span></span><span>func</span> <span>(</span><span>h</span> <span>*</span><span>Handshake</span><span>)</span> <span>Serialize</span><span>()</span> <span>[]</span><span>byte</span> <span>{</span>
    <span>buf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>len</span><span>(</span><span>h</span><span>.</span><span>Pstr</span><span>)</span><span>+</span><span>49</span><span>)</span>
    <span>buf</span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>byte</span><span>(</span><span>len</span><span>(</span><span>h</span><span>.</span><span>Pstr</span><span>))</span>
    <span>curr</span> <span>:=</span> <span>1</span>
    <span>curr</span> <span>+=</span> <span>copy</span><span>(</span><span>buf</span><span>[</span><span>curr</span><span>:],</span> <span>h</span><span>.</span><span>Pstr</span><span>)</span>
    <span>curr</span> <span>+=</span> <span>copy</span><span>(</span><span>buf</span><span>[</span><span>curr</span><span>:],</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>8</span><span>))</span> <span>// 8 reserved bytes
</span><span></span>    <span>curr</span> <span>+=</span> <span>copy</span><span>(</span><span>buf</span><span>[</span><span>curr</span><span>:],</span> <span>h</span><span>.</span><span>InfoHash</span><span>[:])</span>
    <span>curr</span> <span>+=</span> <span>copy</span><span>(</span><span>buf</span><span>[</span><span>curr</span><span>:],</span> <span>h</span><span>.</span><span>PeerID</span><span>[:])</span>
    <span>return</span> <span>buf</span>
<span>}</span>

<span>// Read parses a handshake from a stream
</span><span></span><span>func</span> <span>Read</span><span>(</span><span>r</span> <span>io</span><span>.</span><span>Reader</span><span>)</span> <span>(</span><span>*</span><span>Handshake</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>// Do Serialize(), but backwards
</span><span></span>    <span>// ...
</span><span></span><span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/a83013d250dd9b4268cceace28e4cd82b07f2cbd/handshake/handshake.go">view in context</a></p>
</div>
<h2 id="send-and-receive-messages">Send and receive messages</h2>
<p>Once we’ve completed the initial handshake, we can send and receive <strong>messages</strong>. Well, not quite—if the other peer isn’t ready to accept messages, we can’t send any until they tell us they’re ready. In this state, we’re considered <strong>choked</strong> by the other peer. They’ll send us an <strong>unchoke</strong> message to let us know that we can begin asking them for data. By default, we assume that we’re choked until proven otherwise.</p>
<p>Once we’ve been unchoked, we can then begin sending <strong>requests</strong> for pieces, and they can send us messages back containing pieces.</p>
<img src="https://blog.jse.li/torrent/choke.png" alt="A cartoon in which person 1 says 'hello I would like piece number—' and person 2 grabs him by the neck and says '00 00 00 01 00 (choke)'">
<h3 id="interpreting-messages">Interpreting messages</h3>
<p>A message has a length, an <strong>ID</strong> and a <strong>payload</strong>. On the wire, it looks like:</p>
<img src="https://blog.jse.li/torrent/message.png" alt="A message with 4 byte for the length, 1 byte for ID, and an optional payload">
<p>A message starts with a length indicator which tells us how many bytes long the message will be. It’s a 32-bit integer, meaning it’s made out of four bytes smooshed together in big-endian order. The next byte, the <strong>ID</strong>, tells us which type of message we’re receiving—for example, a <code>2</code> byte means “interested.” Finally, the optional <strong>payload</strong> fills out the remaining length of the message.</p>
<div>
<div><pre><code data-lang="golang"><span>type</span> <span>messageID</span> <span>uint8</span>

<span>const</span> <span>(</span>
    <span>MsgChoke</span>         <span>messageID</span> <span>=</span> <span>0</span>
    <span>MsgUnchoke</span>       <span>messageID</span> <span>=</span> <span>1</span>
    <span>MsgInterested</span>    <span>messageID</span> <span>=</span> <span>2</span>
    <span>MsgNotInterested</span> <span>messageID</span> <span>=</span> <span>3</span>
    <span>MsgHave</span>          <span>messageID</span> <span>=</span> <span>4</span>
    <span>MsgBitfield</span>      <span>messageID</span> <span>=</span> <span>5</span>
    <span>MsgRequest</span>       <span>messageID</span> <span>=</span> <span>6</span>
    <span>MsgPiece</span>         <span>messageID</span> <span>=</span> <span>7</span>
    <span>MsgCancel</span>        <span>messageID</span> <span>=</span> <span>8</span>
<span>)</span>

<span>// Message stores ID and payload of a message
</span><span></span><span>type</span> <span>Message</span> <span>struct</span> <span>{</span>
    <span>ID</span>      <span>messageID</span>
    <span>Payload</span> <span>[]</span><span>byte</span>
<span>}</span>

<span>// Serialize serializes a message into a buffer of the form
</span><span>// &lt;length prefix&gt;&lt;message ID&gt;&lt;payload&gt;
</span><span>// Interprets `nil` as a keep-alive message
</span><span></span><span>func</span> <span>(</span><span>m</span> <span>*</span><span>Message</span><span>)</span> <span>Serialize</span><span>()</span> <span>[]</span><span>byte</span> <span>{</span>
    <span>if</span> <span>m</span> <span>==</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>4</span><span>)</span>
    <span>}</span>
    <span>length</span> <span>:=</span> <span>uint32</span><span>(</span><span>len</span><span>(</span><span>m</span><span>.</span><span>Payload</span><span>)</span> <span>+</span> <span>1</span><span>)</span> <span>// +1 for id
</span><span></span>    <span>buf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>4</span><span>+</span><span>length</span><span>)</span>
    <span>binary</span><span>.</span><span>BigEndian</span><span>.</span><span>PutUint32</span><span>(</span><span>buf</span><span>[</span><span>0</span><span>:</span><span>4</span><span>],</span> <span>length</span><span>)</span>
    <span>buf</span><span>[</span><span>4</span><span>]</span> <span>=</span> <span>byte</span><span>(</span><span>m</span><span>.</span><span>ID</span><span>)</span>
    <span>copy</span><span>(</span><span>buf</span><span>[</span><span>5</span><span>:],</span> <span>m</span><span>.</span><span>Payload</span><span>)</span>
    <span>return</span> <span>buf</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/message/message.go#L90-L103">view in context</a></p>
</div>
<p>To read a message from a stream, we just follow the format of a message. We read four bytes and interpret them as a <code>uint32</code> to get the <strong>length</strong> of the message. Then, we read that number of bytes to get the <strong>ID</strong> (the first byte) and the <strong>payload</strong> (the remaining bytes).</p>
<div>
<div><pre><code data-lang="golang"><span>// Read parses a message from a stream. Returns `nil` on keep-alive message
</span><span></span><span>func</span> <span>Read</span><span>(</span><span>r</span> <span>io</span><span>.</span><span>Reader</span><span>)</span> <span>(</span><span>*</span><span>Message</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>lengthBuf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>4</span><span>)</span>
    <span>_</span><span>,</span> <span>err</span> <span>:=</span> <span>io</span><span>.</span><span>ReadFull</span><span>(</span><span>r</span><span>,</span> <span>lengthBuf</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>nil</span><span>,</span> <span>err</span>
    <span>}</span>
    <span>length</span> <span>:=</span> <span>binary</span><span>.</span><span>BigEndian</span><span>.</span><span>Uint32</span><span>(</span><span>lengthBuf</span><span>)</span>

    <span>// keep-alive message
</span><span></span>    <span>if</span> <span>length</span> <span>==</span> <span>0</span> <span>{</span>
        <span>return</span> <span>nil</span><span>,</span> <span>nil</span>
    <span>}</span>

    <span>messageBuf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>length</span><span>)</span>
    <span>_</span><span>,</span> <span>err</span> <span>=</span> <span>io</span><span>.</span><span>ReadFull</span><span>(</span><span>r</span><span>,</span> <span>messageBuf</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> <span>nil</span><span>,</span> <span>err</span>
    <span>}</span>

    <span>m</span> <span>:=</span> <span>Message</span><span>{</span>
        <span>ID</span><span>:</span>      <span>messageID</span><span>(</span><span>messageBuf</span><span>[</span><span>0</span><span>]),</span>
        <span>Payload</span><span>:</span> <span>messageBuf</span><span>[</span><span>1</span><span>:],</span>
    <span>}</span>

    <span>return</span> <span>&amp;</span><span>m</span><span>,</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/message/message.go#L105-L131">view in context</a></p>
</div>
<h3 id="bitfields">Bitfields</h3>
<p>One of the most interesting types of message is the <strong>bitfield</strong>, which is a data structure that peers use to efficiently encode which pieces they are able to send us. A bitfield looks like a byte array, and to check which pieces they have, we just need to look at the positions of the <em>bits</em> set to 1. You can think of it like the digital equivalent of a coffee shop loyalty card. We start with a blank card of all <code>0</code>, and flip bits to <code>1</code> to mark their positions as “stamped.”</p>
<img src="https://blog.jse.li/torrent/bitfield.png" alt="a coffee shop loyalty card with eight slots, with stamps on the first four slots and a stamp on the second to last slot, represented as 11110010">
<p>By working with <em>bits</em> instead of <em>bytes</em>, this data structure is super compact. We can stuff information about eight pieces in the space of a single byte—the size of a <code>bool</code>. The tradeoff is that accessing values becomes a little more tricky. The smallest unit of memory that computers can address are bytes, so to get to our bits, we have to do some bitwise manipulation:</p>
<div>
<div><pre><code data-lang="golang"><span>// A Bitfield represents the pieces that a peer has
</span><span></span><span>type</span> <span>Bitfield</span> <span>[]</span><span>byte</span>

<span>// HasPiece tells if a bitfield has a particular index set
</span><span></span><span>func</span> <span>(</span><span>bf</span> <span>Bitfield</span><span>)</span> <span>HasPiece</span><span>(</span><span>index</span> <span>int</span><span>)</span> <span>bool</span> <span>{</span>
    <span>byteIndex</span> <span>:=</span> <span>index</span> <span>/</span> <span>8</span>
    <span>offset</span> <span>:=</span> <span>index</span> <span>%</span> <span>8</span>
    <span>return</span> <span>bf</span><span>[</span><span>byteIndex</span><span>]</span><span>&gt;&gt;</span><span>(</span><span>7</span><span>-</span><span>offset</span><span>)</span><span>&amp;</span><span>1</span> <span>!=</span> <span>0</span>
<span>}</span>

<span>// SetPiece sets a bit in the bitfield
</span><span></span><span>func</span> <span>(</span><span>bf</span> <span>Bitfield</span><span>)</span> <span>SetPiece</span><span>(</span><span>index</span> <span>int</span><span>)</span> <span>{</span>
    <span>byteIndex</span> <span>:=</span> <span>index</span> <span>/</span> <span>8</span>
    <span>offset</span> <span>:=</span> <span>index</span> <span>%</span> <span>8</span>
    <span>bf</span><span>[</span><span>byteIndex</span><span>]</span> <span>|=</span> <span>1</span> <span>&lt;&lt;</span> <span>(</span><span>7</span> <span>-</span> <span>offset</span><span>)</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/bitfield/bitfield.go">view in context</a></p>
</div>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>We now have all the tools we need to download a torrent: we have a list of peers obtained from the tracker, and we can communicate with them by dialing a TCP connection, initiating a handshake, and sending and receiving messages. Our last big problems are handling the <strong>concurrency</strong> involved in talking to multiple peers at once, and managing the <strong>state</strong> of our peers as we interact with them. These are both classically Hard problems.</p>
<h3 id="managing-concurrency-channels-as-queues">Managing concurrency: channels as queues</h3>
<p>In Go, we <a href="https://blog.golang.org/share-memory-by-communicating">share memory by communicating</a>, and we can think of a Go channel as a cheap thread-safe queue.</p>
<p>We’ll set up two channels to synchronize our concurrent workers: one for dishing out work (pieces to download) between peers, and another for collecting downloaded pieces. As downloaded pieces come in through the results channel, we can copy them into a buffer to start assembling our complete file.</p>
<div>
<div><pre><code data-lang="golang"><span>// Init queues for workers to retrieve work and send results
</span><span></span><span>workQueue</span> <span>:=</span> <span>make</span><span>(</span><span>chan</span> <span>*</span><span>pieceWork</span><span>,</span> <span>len</span><span>(</span><span>t</span><span>.</span><span>PieceHashes</span><span>))</span>
<span>results</span> <span>:=</span> <span>make</span><span>(</span><span>chan</span> <span>*</span><span>pieceResult</span><span>)</span>
<span>for</span> <span>index</span><span>,</span> <span>hash</span> <span>:=</span> <span>range</span> <span>t</span><span>.</span><span>PieceHashes</span> <span>{</span>
    <span>length</span> <span>:=</span> <span>t</span><span>.</span><span>calculatePieceSize</span><span>(</span><span>index</span><span>)</span>
    <span>workQueue</span> <span>&lt;-</span> <span>&amp;</span><span>pieceWork</span><span>{</span><span>index</span><span>,</span> <span>hash</span><span>,</span> <span>length</span><span>}</span>
<span>}</span>

<span>// Start workers
</span><span></span><span>for</span> <span>_</span><span>,</span> <span>peer</span> <span>:=</span> <span>range</span> <span>t</span><span>.</span><span>Peers</span> <span>{</span>
    <span>go</span> <span>t</span><span>.</span><span>startDownloadWorker</span><span>(</span><span>peer</span><span>,</span> <span>workQueue</span><span>,</span> <span>results</span><span>)</span>
<span>}</span>

<span>// Collect results into a buffer until full
</span><span></span><span>buf</span> <span>:=</span> <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>t</span><span>.</span><span>Length</span><span>)</span>
<span>donePieces</span> <span>:=</span> <span>0</span>
<span>for</span> <span>donePieces</span> <span>&lt;</span> <span>len</span><span>(</span><span>t</span><span>.</span><span>PieceHashes</span><span>)</span> <span>{</span>
    <span>res</span> <span>:=</span> <span>&lt;-</span><span>results</span>
    <span>begin</span><span>,</span> <span>end</span> <span>:=</span> <span>t</span><span>.</span><span>calculateBoundsForPiece</span><span>(</span><span>res</span><span>.</span><span>index</span><span>)</span>
    <span>copy</span><span>(</span><span>buf</span><span>[</span><span>begin</span><span>:</span><span>end</span><span>],</span> <span>res</span><span>.</span><span>buf</span><span>)</span>
    <span>donePieces</span><span>++</span>
<span>}</span>
<span>close</span><span>(</span><span>workQueue</span><span>)</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L188-L214">view in context</a></p>
</div>
<p>We’ll spawn a worker goroutine for each peer we’ve received from the tracker. It’ll connect and handshake with the peer, and then start retrieving work from the <code>workQueue</code>, attempting to download it, and sending downloaded pieces back through the <code>results</code> channel.</p>
<img src="https://blog.jse.li/torrent/download.png" alt="a flow chart of the download strategy">
<div>
<div><pre><code data-lang="golang"><span>func</span> <span>(</span><span>t</span> <span>*</span><span>Torrent</span><span>)</span> <span>startDownloadWorker</span><span>(</span><span>peer</span> <span>peers</span><span>.</span><span>Peer</span><span>,</span> <span>workQueue</span> <span>chan</span> <span>*</span><span>pieceWork</span><span>,</span> <span>results</span> <span>chan</span> <span>*</span><span>pieceResult</span><span>)</span> <span>{</span>
    <span>c</span><span>,</span> <span>err</span> <span>:=</span> <span>client</span><span>.</span><span>New</span><span>(</span><span>peer</span><span>,</span> <span>t</span><span>.</span><span>PeerID</span><span>,</span> <span>t</span><span>.</span><span>InfoHash</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>log</span><span>.</span><span>Printf</span><span>(</span><span>"Could not handshake with %s. Disconnecting\n"</span><span>,</span> <span>peer</span><span>.</span><span>IP</span><span>)</span>
        <span>return</span>
    <span>}</span>
    <span>defer</span> <span>c</span><span>.</span><span>Conn</span><span>.</span><span>Close</span><span>()</span>
    <span>log</span><span>.</span><span>Printf</span><span>(</span><span>"Completed handshake with %s\n"</span><span>,</span> <span>peer</span><span>.</span><span>IP</span><span>)</span>

    <span>c</span><span>.</span><span>SendUnchoke</span><span>()</span>
    <span>c</span><span>.</span><span>SendInterested</span><span>()</span>

    <span>for</span> <span>pw</span> <span>:=</span> <span>range</span> <span>workQueue</span> <span>{</span>
        <span>if</span> <span>!</span><span>c</span><span>.</span><span>Bitfield</span><span>.</span><span>HasPiece</span><span>(</span><span>pw</span><span>.</span><span>index</span><span>)</span> <span>{</span>
            <span>workQueue</span> <span>&lt;-</span> <span>pw</span> <span>// Put piece back on the queue
</span><span></span>            <span>continue</span>
        <span>}</span>

        <span>// Download the piece
</span><span></span>        <span>buf</span><span>,</span> <span>err</span> <span>:=</span> <span>attemptDownloadPiece</span><span>(</span><span>c</span><span>,</span> <span>pw</span><span>)</span>
        <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
            <span>log</span><span>.</span><span>Println</span><span>(</span><span>"Exiting"</span><span>,</span> <span>err</span><span>)</span>
            <span>workQueue</span> <span>&lt;-</span> <span>pw</span> <span>// Put piece back on the queue
</span><span></span>            <span>return</span>
        <span>}</span>

        <span>err</span> <span>=</span> <span>checkIntegrity</span><span>(</span><span>pw</span><span>,</span> <span>buf</span><span>)</span>
        <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
            <span>log</span><span>.</span><span>Printf</span><span>(</span><span>"Piece #%d failed integrity check\n"</span><span>,</span> <span>pw</span><span>.</span><span>index</span><span>)</span>
            <span>workQueue</span> <span>&lt;-</span> <span>pw</span> <span>// Put piece back on the queue
</span><span></span>            <span>continue</span>
        <span>}</span>

        <span>c</span><span>.</span><span>SendHave</span><span>(</span><span>pw</span><span>.</span><span>index</span><span>)</span>
        <span>results</span> <span>&lt;-</span> <span>&amp;</span><span>pieceResult</span><span>{</span><span>pw</span><span>.</span><span>index</span><span>,</span> <span>buf</span><span>}</span>
    <span>}</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L133-L169">view in context</a></p>
</div>
<h3 id="managing-state">Managing state</h3>
<p>We’ll keep track of each peer in a struct, and modify that struct as we read messages. It’ll include data like how much we’ve downloaded from the peer, how much we’ve requested from them, and whether we’re choked. If we wanted to scale this further, we could formalize this as a finite state machine. But a struct and a switch are good enough for now.</p>
<div>
<div><pre><code data-lang="golang"><span>type</span> <span>pieceProgress</span> <span>struct</span> <span>{</span>
    <span>index</span>      <span>int</span>
    <span>client</span>     <span>*</span><span>client</span><span>.</span><span>Client</span>
    <span>buf</span>        <span>[]</span><span>byte</span>
    <span>downloaded</span> <span>int</span>
    <span>requested</span>  <span>int</span>
    <span>backlog</span>    <span>int</span>
<span>}</span>

<span>func</span> <span>(</span><span>state</span> <span>*</span><span>pieceProgress</span><span>)</span> <span>readMessage</span><span>()</span> <span>error</span> <span>{</span>
    <span>msg</span><span>,</span> <span>err</span> <span>:=</span> <span>state</span><span>.</span><span>client</span><span>.</span><span>Read</span><span>()</span> <span>// this call blocks
</span><span></span>    <span>switch</span> <span>msg</span><span>.</span><span>ID</span> <span>{</span>
    <span>case</span> <span>message</span><span>.</span><span>MsgUnchoke</span><span>:</span>
        <span>state</span><span>.</span><span>client</span><span>.</span><span>Choked</span> <span>=</span> <span>false</span>
    <span>case</span> <span>message</span><span>.</span><span>MsgChoke</span><span>:</span>
        <span>state</span><span>.</span><span>client</span><span>.</span><span>Choked</span> <span>=</span> <span>true</span>
    <span>case</span> <span>message</span><span>.</span><span>MsgHave</span><span>:</span>
        <span>index</span><span>,</span> <span>err</span> <span>:=</span> <span>message</span><span>.</span><span>ParseHave</span><span>(</span><span>msg</span><span>)</span>
        <span>state</span><span>.</span><span>client</span><span>.</span><span>Bitfield</span><span>.</span><span>SetPiece</span><span>(</span><span>index</span><span>)</span>
    <span>case</span> <span>message</span><span>.</span><span>MsgPiece</span><span>:</span>
        <span>n</span><span>,</span> <span>err</span> <span>:=</span> <span>message</span><span>.</span><span>ParsePiece</span><span>(</span><span>state</span><span>.</span><span>index</span><span>,</span> <span>state</span><span>.</span><span>buf</span><span>,</span> <span>msg</span><span>)</span>
        <span>state</span><span>.</span><span>downloaded</span> <span>+=</span> <span>n</span>
        <span>state</span><span>.</span><span>backlog</span><span>--</span>
    <span>}</span>
    <span>return</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L53-L83">view in context</a></p>
</div>
<h3 id="time-to-make-requests">Time to make requests!</h3>
<p>Files, pieces, and piece hashes aren’t the full story—we can go further by breaking down pieces into <strong>blocks</strong>. A block is a part of a piece, and we can fully define a block by the <strong>index</strong> of the piece it’s part of, its byte <strong>offset</strong> within the piece, and its <strong>length</strong>. When we make requests for data from peers, we are actually requesting <em>blocks</em>. A block is usually 16KB large, meaning that a single 256 KB piece might actually require 16 requests.</p>
<p>A peer is supposed to sever the connection if they receive a request for a block larger than 16KB. However, based on my experience, they’re often perfectly happy to satisfy requests up to 128KB. I only got moderate gains in overall speed with larger block sizes, so it’s probably better to stick with the spec.</p>
<h3 id="pipelining">Pipelining</h3>
<p>Network round-trips are expensive, and requesting each block one by one will absolutely tank the performance of our download. Therefore, it’s important to <strong>pipeline</strong> our requests such that we keep up a constant pressure of some number of unfulfilled requests. This can increase the throughput of our connection by an order of magnitude.</p>
<img src="https://blog.jse.li/torrent/pipelining.png" alt="Two email threads simulating peer connections. The thread on the left shows a request followed by a reply, repeated three times. The thread on the left sends three requests, and receives three replies in quick succession.">
<p>Classically, BitTorrent clients kept a queue of five pipelined requests, and that’s the value I’ll be using. I found that increasing it can up to double the speed of a download. Newer clients use an <a href="https://luminarys.com/posts/writing-a-bittorrent-client.html">adaptive</a> queue size to better accommodate modern network speeds and conditions. This is definitely a parameter worth tweaking, and it’s pretty low hanging fruit for future performance optimization.</p>
<div>
<div><pre><code data-lang="golang"><span>// MaxBlockSize is the largest number of bytes a request can ask for
</span><span></span><span>const</span> <span>MaxBlockSize</span> <span>=</span> <span>16384</span>

<span>// MaxBacklog is the number of unfulfilled requests a client can have in its pipeline
</span><span></span><span>const</span> <span>MaxBacklog</span> <span>=</span> <span>5</span>

<span>func</span> <span>attemptDownloadPiece</span><span>(</span><span>c</span> <span>*</span><span>client</span><span>.</span><span>Client</span><span>,</span> <span>pw</span> <span>*</span><span>pieceWork</span><span>)</span> <span>([]</span><span>byte</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
    <span>state</span> <span>:=</span> <span>pieceProgress</span><span>{</span>
        <span>index</span><span>:</span>  <span>pw</span><span>.</span><span>index</span><span>,</span>
        <span>client</span><span>:</span> <span>c</span><span>,</span>
        <span>buf</span><span>:</span>    <span>make</span><span>([]</span><span>byte</span><span>,</span> <span>pw</span><span>.</span><span>length</span><span>),</span>
    <span>}</span>

    <span>// Setting a deadline helps get unresponsive peers unstuck.
</span><span></span>    <span>// 30 seconds is more than enough time to download a 262 KB piece
</span><span></span>    <span>c</span><span>.</span><span>Conn</span><span>.</span><span>SetDeadline</span><span>(</span><span>time</span><span>.</span><span>Now</span><span>().</span><span>Add</span><span>(</span><span>30</span> <span>*</span> <span>time</span><span>.</span><span>Second</span><span>))</span>
    <span>defer</span> <span>c</span><span>.</span><span>Conn</span><span>.</span><span>SetDeadline</span><span>(</span><span>time</span><span>.</span><span>Time</span><span>{})</span> <span>// Disable the deadline
</span><span></span>
    <span>for</span> <span>state</span><span>.</span><span>downloaded</span> <span>&lt;</span> <span>pw</span><span>.</span><span>length</span> <span>{</span>
        <span>// If unchoked, send requests until we have enough unfulfilled requests
</span><span></span>        <span>if</span> <span>!</span><span>state</span><span>.</span><span>client</span><span>.</span><span>Choked</span> <span>{</span>
            <span>for</span> <span>state</span><span>.</span><span>backlog</span> <span>&lt;</span> <span>MaxBacklog</span> <span>&amp;&amp;</span> <span>state</span><span>.</span><span>requested</span> <span>&lt;</span> <span>pw</span><span>.</span><span>length</span> <span>{</span>
                <span>blockSize</span> <span>:=</span> <span>MaxBlockSize</span>
                <span>// Last block might be shorter than the typical block
</span><span></span>                <span>if</span> <span>pw</span><span>.</span><span>length</span><span>-</span><span>state</span><span>.</span><span>requested</span> <span>&lt;</span> <span>blockSize</span> <span>{</span>
                    <span>blockSize</span> <span>=</span> <span>pw</span><span>.</span><span>length</span> <span>-</span> <span>state</span><span>.</span><span>requested</span>
                <span>}</span>

                <span>err</span> <span>:=</span> <span>c</span><span>.</span><span>SendRequest</span><span>(</span><span>pw</span><span>.</span><span>index</span><span>,</span> <span>state</span><span>.</span><span>requested</span><span>,</span> <span>blockSize</span><span>)</span>
                <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
                    <span>return</span> <span>nil</span><span>,</span> <span>err</span>
                <span>}</span>
                <span>state</span><span>.</span><span>backlog</span><span>++</span>
                <span>state</span><span>.</span><span>requested</span> <span>+=</span> <span>blockSize</span>
            <span>}</span>
        <span>}</span>

        <span>err</span> <span>:=</span> <span>state</span><span>.</span><span>readMessage</span><span>()</span>
        <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
            <span>return</span> <span>nil</span><span>,</span> <span>err</span>
        <span>}</span>
    <span>}</span>

    <span>return</span> <span>state</span><span>.</span><span>buf</span><span>,</span> <span>nil</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L85-L123">view in context</a></p>
</div>
<h3 id="maingo">main.go</h3>
<p>This is a short one. We’re almost there.</p>
<div>
<div><pre><code data-lang="golang"><span>package</span> <span>main</span>

<span>import</span> <span>(</span>
    <span>"log"</span>
    <span>"os"</span>

    <span>"github.com/veggiedefender/torrent-client/torrentfile"</span>
<span>)</span>

<span>func</span> <span>main</span><span>()</span> <span>{</span>
    <span>inPath</span> <span>:=</span> <span>os</span><span>.</span><span>Args</span><span>[</span><span>1</span><span>]</span>
    <span>outPath</span> <span>:=</span> <span>os</span><span>.</span><span>Args</span><span>[</span><span>2</span><span>]</span>

    <span>tf</span><span>,</span> <span>err</span> <span>:=</span> <span>torrentfile</span><span>.</span><span>Open</span><span>(</span><span>inPath</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>log</span><span>.</span><span>Fatal</span><span>(</span><span>err</span><span>)</span>
    <span>}</span>

    <span>err</span> <span>=</span> <span>tf</span><span>.</span><span>DownloadToFile</span><span>(</span><span>outPath</span><span>)</span>
    <span>if</span> <span>err</span> <span>!=</span> <span>nil</span> <span>{</span>
        <span>log</span><span>.</span><span>Fatal</span><span>(</span><span>err</span><span>)</span>
    <span>}</span>
<span>}</span>
</code></pre></div><p><a target="_blank" rel="noopener" href="https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/main.go">view in context</a></p>
</div>

<h2 id="this-isnt-the-full-story">This isn’t the full story</h2>
<p>For brevity, I included only a few of the important snippets of code. Notably, I left out all the glue code, parsing, unit tests, and the boring parts that build character. View my <a href="https://github.com/veggiedefender/torrent-client">full implementation</a> if you’re interested.</p>

<div><p>This is an ad.
</p><p>
If you’d like to try building a BitTorrent client yourself, but could use some structure and personalized guidance, consider using <a href="https://app.codecrafters.io/join?via=veggiedefender">CodeCrafters</a>.
</p><p>
They make programming challenges for experienced engineers (e.g Build your own Git, Docker, Redis etc). In particular, they offer a BitTorrent challenge which walks you through everything described in this post — parsing bencode, discovering peers, and downloading pieces — with test harnesses and scaffolding code for a bunch of languages.
</p><p>
It’s a paid service, but you can get a discount with my referral link: <a href="https://app.codecrafters.io/join?via=veggiedefender">https://app.codecrafters.io/join?via=veggiedefender</a></p></div>


    </section>
  </article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Microsoft Cancels Leases for AI Data Centers, Analyst Says (336 pts)]]></title>
            <link>https://www.bloomberg.com/news/articles/2025-02-24/microsoft-cancels-leases-for-ai-data-centers-analyst-says</link>
            <guid>43157831</guid>
            <pubDate>Mon, 24 Feb 2025 10:12:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bloomberg.com/news/articles/2025-02-24/microsoft-cancels-leases-for-ai-data-centers-analyst-says">https://www.bloomberg.com/news/articles/2025-02-24/microsoft-cancels-leases-for-ai-data-centers-analyst-says</a>, See on <a href="https://news.ycombinator.com/item?id=43157831">Hacker News</a></p>
Couldn't get https://www.bloomberg.com/news/articles/2025-02-24/microsoft-cancels-leases-for-ai-data-centers-analyst-says: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Cloudflare takes legal action over LaLiga's "disproportionate blocking efforts" (162 pts)]]></title>
            <link>https://www.broadbandtvnews.com/2025/02/19/cloudflare-takes-legal-action-over-laligas-disproportionate-blocking-efforts/</link>
            <guid>43157000</guid>
            <pubDate>Mon, 24 Feb 2025 08:19:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.broadbandtvnews.com/2025/02/19/cloudflare-takes-legal-action-over-laligas-disproportionate-blocking-efforts/">https://www.broadbandtvnews.com/2025/02/19/cloudflare-takes-legal-action-over-laligas-disproportionate-blocking-efforts/</a>, See on <a href="https://news.ycombinator.com/item?id=43157000">Hacker News</a></p>
<div id="readability-page-1" class="page"><article aria-label="Cloudflare takes legal action over LaLiga’s “disproportionate blocking efforts”" itemscope="" itemtype="https://schema.org/CreativeWork"><div itemprop="text"><figure><img decoding="async" width="900" height="607" data-attachment-id="226912" data-permalink="https://www.broadbandtvnews.com/2025/02/19/cloudflare-takes-legal-action-over-laligas-disproportionate-blocking-efforts/laliga-yellow/" data-orig-file="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow.jpg" data-orig-size="1200,809" data-comments-opened="0" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="LaLiga Yellow" data-image-description="" data-image-caption="" data-medium-file="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-300x202.jpg" data-large-file="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-900x607.jpg" src="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-900x607.jpg" alt="" srcset="https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-900x607.jpg 900w, https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-300x202.jpg 300w, https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow-768x518.jpg 768w, https://cdn.broadbandtvnews.com/wp-content/uploads/2025/02/19125845/LaLiga-Yellow.jpg 1200w" sizes="(max-width: 900px) 100vw, 900px"></figure><p>Cloudflare has launched a legal action against LaLiga over IP blocking action that it says blocked millions of users from accessing unrelated websites.</p> <p>As reported in Broadband TV News, websites DazcFutbolios and RBTV77 were last weekend blocked in a joint action by the Spanish football league and local ISPs after illegally distributing LaLiga matches.</p><p>LaLiga said the two pirates were using technology provided by Cloudflare to conceal their identity and evade security controls. Together, the two platforms had more than 400,000 unique monthly users in Spain.</p><p>Cloudflare called the effort misguided and said LaLiga had left it with no other option than to pursue the legal action. “LaLiga secured this blocking order without notifying cloud providers, while concealing from the court the predictable harm to third parties and the public good. LaLiga’s actions pose a clear threat to the open Internet. Cloudflare has now filed a legal action to challenge the order and establish that LaLiga’s disproportionate blocking efforts are unlawful.&nbsp;</p><p>“Instead of addressing Spanish users’ concerns about excessive content blocking, LaLiga has attempted to deflect with baseless claims against Cloudflare while doubling down on its unlawful blocking practices.&nbsp;Cloudflare hopes this legal action helps prevent future indiscriminate blocking measures, and makes it clear that rightsholders cannot prioritise&nbsp;their commercial interests over the fundamental right of millions of consumers to access the open Internet.”</p><p>Like the majority of cloud providers, Cloudflare uses shared IP addresses to manage its network, meaning that thousands of domains can be accessed with a single IP address.</p><p>LaLiga claims more than 50% of pirate IPs illegally distributing its content are protected by Cloudflare.&nbsp;</p></div></article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[We don't need startups, we need Digital-Mittelstand (132 pts)]]></title>
            <link>https://mertbulan.com/2025/02/24/we-dont-need-startups-we-need-digital-mittelstand/</link>
            <guid>43156785</guid>
            <pubDate>Mon, 24 Feb 2025 07:40:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://mertbulan.com/2025/02/24/we-dont-need-startups-we-need-digital-mittelstand/">https://mertbulan.com/2025/02/24/we-dont-need-startups-we-need-digital-mittelstand/</a>, See on <a href="https://news.ycombinator.com/item?id=43156785">Hacker News</a></p>
Couldn't get https://mertbulan.com/2025/02/24/we-dont-need-startups-we-need-digital-mittelstand/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Pollution from Big Tech's data centre boom costs US public health $5.4bn (194 pts)]]></title>
            <link>https://www.ft.com/content/d595d5f6-79d1-47eb-b690-8597f09b39e7</link>
            <guid>43155975</guid>
            <pubDate>Mon, 24 Feb 2025 05:04:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.ft.com/content/d595d5f6-79d1-47eb-b690-8597f09b39e7">https://www.ft.com/content/d595d5f6-79d1-47eb-b690-8597f09b39e7</a>, See on <a href="https://news.ycombinator.com/item?id=43155975">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p><a data-trackable="a11y-skip-to-help" href="https://www.ft.com/accessibility">Accessibility help</a><a data-trackable="a11y-skip-to-navigation" href="#site-navigation">Skip to navigation</a><a data-trackable="a11y-skip-to-content" href="#site-content">Skip to content</a><a data-trackable="a11y-skip-to-footer" href="#site-footer">Skip to footer</a></p><div id="barrier-page"><div id="heroOffer-Hero offers-1d763f4f-dfaf-4a22-96e2-2a05784c3bf1" data-component="heroOffer" data-component-unique-name="Hero offers"><div data-o-grid-colspan="12 L6"><p><span></span><span></span><span></span><span>Subscribe to unlock this article</span><span></span></p></div><div data-o-grid-colspan="12 L6"><p><h2><span>Join FT Edit</span></h2><h2><strong><span>Only </span><span>CHF50</span><span> a year</span></strong></h2></p><p><span>Get 2 months free with an annual subscription at </span><span>was </span><span>CHF60</span><span> </span><span>now </span><span>CHF50</span><span>.
Access to eight fresh articles a day, hand-picked by senior editors. Selected to feed your curiosity.</span></p></div></div><div id="recommendedOffers-Recommended Offers" data-component="recommendedOffers" data-component-unique-name="Recommended Offers"><p><h2 data-o-grid-colspan="12">Explore more offers.</h2></p><div data-o-grid-colspan="12"><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_standard.svg?source=next-barrier-page&amp;format=svg" alt=""></p><p><h3>Standard Digital</h3></p></div><p><span>was </span><span>CHF660</span><span> </span><span>now </span><span>CHF395</span><span> per year</span></p><p><span>Save now on essential digital access to quality FT journalism on any device.</span></p></div><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_premium.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>CHF85</span><span> per month</span></p><p><span>Complete digital access to quality FT journalism with expert analysis from industry leaders. Pay a year upfront and save 20%.</span></p></div><div data-o-grid-colspan="12"><div><p><img src="https://www.ft.com/__origami/service/image/v2/images/raw/https://barrier-page-components.s3.eu-west-1.amazonaws.com/assets/icons/primary_product_icon_print.svg?source=next-barrier-page&amp;format=svg" alt=""></p></div><p><span>CHF345</span><span> for your first year</span></p><p><span>FT newspaper delivered Monday-Saturday, plus FT Digital Edition delivered to your device Monday-Saturday.</span></p></div></div></div><div data-component="subscriptionOptions" data-component-unique-name="Subscription Options Offers API"><h2>Explore our full range of subscriptions.</h2><div><div><p>Discover all the plans currently available in your country</p></div><div><p>Digital access for organisations. Includes exclusive features and content.</p></div></div></div><div data-component="whyFT" data-component-unique-name="Why FT"><div><h2>Why the FT?</h2><p>See why over a million readers pay to read the Financial Times.</p></div><p><a href="https://subs.ft.com/whytheft?ft-content-uuid=d595d5f6-79d1-47eb-b690-8597f09b39e7">Find out why</a></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[OpenAI Researchers Find That AI Is Unable to Solve Most Coding Problems (136 pts)]]></title>
            <link>https://futurism.com/openai-researchers-coding-fail</link>
            <guid>43155825</guid>
            <pubDate>Mon, 24 Feb 2025 04:23:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://futurism.com/openai-researchers-coding-fail">https://futurism.com/openai-researchers-coding-fail</a>, See on <a href="https://news.ycombinator.com/item?id=43155825">Hacker News</a></p>
<div id="readability-page-1" class="page"><section id="incArticle"><p>OpenAI researchers have admitted that even the most advanced AI models&nbsp;still are no match for human coders — even though CEO Sam Altman insists they will be able to beat "<a href="https://www.reddit.com/r/singularity/comments/1iinrrq/sam_altman_software_engineering_will_be_very/">low-level</a>" software engineers by the end of this year.</p><p>In a <a href="https://arxiv.org/pdf/2502.12115">new paper</a>, the company's researchers found that even frontier models, or the most advanced and boundary-pushing AI systems, "are still unable to solve the majority" of coding tasks.</p><p>The researchers used&nbsp;a newly-developed benchmark called SWE-Lancer, built on more than 1,400 software engineering tasks from the freelancer site Upwork. Using the benchmark, OpenAI put three large language models (LLMs) — its own o1 reasoning model and flagship GPT-4o, as well as Anthropic's Claude 3.5 Sonnet — to the test.</p><p>Specifically, the new benchmark evaluated how well the LLMs performed with two types of tasks from Upwork: individual tasks, which involved resolving bugs and implementing fixes to them, or management tasks that saw the models trying to zoom out and make higher-level decisions. (The models weren't allowed to access the internet, meaning they couldn't just crib similar answers that'd been posted online.)</p><p>The models took on tasks cumulatively worth hundreds of thousands of dollars on Upwork,&nbsp;but they were only able to fix surface-level software issues, while remaining unable to actually find bugs in larger projects or find their root causes. These shoddy and half-baked "solutions" are likely familiar&nbsp;to anyone who's worked with AI — which is great at spitting out confident-sounding information that <a href="https://futurism.com/cnet-ai-errors">often falls apart</a> on closer inspection.</p><p>Though all three LLMs were often able to operate "far faster than a human would," the paper notes, they also failed to grasp how widespread bugs&nbsp;were or to understand their context, "leading to solutions that are incorrect or insufficiently comprehensive."</p><p>As the researchers explained, Claude 3.5 Sonnet performed better than the two OpenAI models pitted against it and made more money than o1 and GPT-4o. Still, the majority of its answers were wrong, and&nbsp;according to the researchers,&nbsp;any model would need "higher reliability" to be trusted with real-life coding tasks.</p><p>Put more plainly, the paper seems to demonstrate that although these frontier models can work quickly and solve zoomed-in tasks, they're are nowhere near as skilled at handling them as human engineers.</p><p>Though these LLMs have advanced rapidly over the past few years and will likely continue to do so, they're not skilled enough at software engineering to replace real-life people quite yet — not that that's stopping CEOs from <a href="https://futurism.com/the-byte/stack-overflow-layoffs-ai">firing their human coders</a> in favor of <a href="https://futurism.com/the-byte/ai-programming-assistants-code-error">immature AI models</a>.</p><p><strong>More on AI and coding: </strong><a href="https://futurism.com/the-byte/zuckerberg-automate-coding-ai"><em>Zuckerberg Announces Plans to Automate Facebook Coding Jobs With AI</em></a></p><br></section></div>]]></description>
        </item>
    </channel>
</rss>