<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sat, 01 Jun 2024 17:30:02 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Napster sparked a file-sharing revolution 25 years ago (153 pts)]]></title>
            <link>https://torrentfreak.com/napster-sparked-a-file-sharing-revolution-25-years-ago-250601/</link>
            <guid>40545436</guid>
            <pubDate>Sat, 01 Jun 2024 13:08:47 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://torrentfreak.com/napster-sparked-a-file-sharing-revolution-25-years-ago-250601/">https://torrentfreak.com/napster-sparked-a-file-sharing-revolution-25-years-ago-250601/</a>, See on <a href="https://news.ycombinator.com/item?id=40545436">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p><img loading="lazy" decoding="async" src="https://torrentfreak.com/images/napster-logo-old.jpg" alt="napster logo" width="300" height="167" srcset="https://torrentfreak.com/images/napster-logo-old.jpg 540w, https://torrentfreak.com/images/napster-logo-old-300x167.jpg 300w" sizes="(max-width: 300px) 100vw, 300px">The <a href="https://torrentfreak.com/how-the-mp3-pirates-and-apple-changed-the-music-industry-210117/">invention of the MP3</a> format in 1993 didn’t make any mainstream news headlines. In hindsight, however, it was a pivotal moment that would revolutionize music consumption, and more. </p>
<p>Invented by the German engineer Karlheinz Brandenburg and colleagues at the Fraunhofer Society, the coding format made it possible to reduce the size of music files without any significant loss of audible sound quality.</p>
<p>Due to the size reductions, these digital files could be stored on flash-memory devices. This led to the invention of <a href="https://en.wikipedia.org/wiki/Portable_media_player">dedicated MP3 players</a> capable of playing music ripped from CDs. Many considered this a more compact and shock-resistant alternative to the <a href="https://en.wikipedia.org/wiki/Discman">Discman</a>. </p>
<p>At the time, music industry insiders were already fantasizing about the ‘celestial jukebox’; a tool or service that would make it possible to play any track on demand. The MP3 helped to bring this concept a step closer too, as Napster would soon prove. </p>
<h2>Napster: June 1, 1999</h2>
<p>At the end of the nineties, technology and the Internet were a playground for young engineers and ‘hackers’. Some of them regularly gathered in the <a href="https://web.archive.org/web/20201222012204/http://www.w00w00.org/">w00w00</a> IRC chatroom on the EFnet network. This tech-think-tank had many notable members, including WhatsApp founder Jan Koum and <a href="https://en.wikipedia.org/wiki/Shawn_Fanning">Shawn Fanning</a>, who logged on with the nickname Napster. </p>
<p>In 1998, 17-year-old Fanning shared an idea with the group. ‘Napster’ wanted to create a network of computers that could share files with each other. More specifically, a central music database that everyone in the world could access.</p>
<p>This idea never left the mind of the young developer. Fanning stopped going to school and flanked by his friend <a href="http://Sean Parker">Sean Parker</a>, devoted the following months to making his vision a reality. That moment came on <a href="https://en.wikipedia.org/wiki/Napster">June 1, 1999</a>, when the first public release of Napster was released online. Soon after, the software went viral.</p>
<center><img loading="lazy" decoding="async" src="https://torrentfreak.com/images/fanning-1.jpg" alt="fanning" width="600" height="423"></center>
<p>Napster was quickly embraced by millions of users, who saw the software as something magical. It was a gateway for musical exploration, one that dwarfed even the largest record stores in town. And all for free. It sounds mundane today, but some equated it to pure technological sorcery.</p>
<p>For many top players in the music industry, Napster’s sorcery was pure witchcraft. At the time, manufacturing CDs with high profit margins felt like printing money and Napster’s appearance threatened to ruin the party.</p>
<h2>Music Industry Shocked</h2>
<p>According to the RIAA’s former CEO, Hilary Rosen, a few months after Napster’s release, the music industry shifted into full panic mode. In February 2000, all major label executives discussed the threat during an RIAA board meeting at the Four Seasons Hotel in Los Angeles.</p>
<p>“I will never forget this day. All of the heads of the labels, literally the titans of the music business, were in that room. I had somebody wheel in a PC and put some speakers up and I started doing a name that tune,” Rosen <a href="https://torrentfreak.com/how-the-mp3-pirates-and-apple-changed-the-music-industry-210117/">later recalled</a>.</p>
<p>The major music bosses started to name tracks, including some that weren’t even released yet, and time and again Napster would come up with results. Needless to say, the board was terrified.</p>
<p>Within a year, the RIAA sued Napster Inc. and soon after artists including Metallica and Dr. Dre followed. These high profile cases only raised the popularity of Napster and MP3 players began to sell like hotcakes.</p>
<h2>Peak Napster</h2>
<p>At the start of 2001, Napster’s user base reached a peak of more than 26.4 million worldwide. Yet, despite huge growth and backing from investors, the small file-sharing empire couldn’t overcome the legal challenges.</p>
<p>The RIAA lawsuit resulted in an injunction from the Ninth Circuit Court, which ordered the network to shut down. This happened during July 2001, little more than two years after Napster launched. By September that year, the case had been settled for millions of dollars.</p>
<center><img loading="lazy" decoding="async" src="https://torrentfreak.com/images/benefit.jpg" alt="benefit" width="600" height="344" srcset="https://torrentfreak.com/images/benefit.jpg 1613w, https://torrentfreak.com/images/benefit-1536x882.jpg 1536w" sizes="(max-width: 600px) 100vw, 600px"></center>
<p>While the Napster craze was over, file-sharing had mesmerized the masses and the genie was out of the bottle. Grokster, KaZaa, Morpheus, LimeWire, and many others popped up and provided sharing alternatives, for as long as they lasted. Meanwhile, BitTorrent was also knocking on the door. </p>
<h2>Ripple Effect</h2>
<p>Today, 25 years later, music piracy certainly hasn’t disappeared, but it has changed. When Napster came out, there simply weren’t any legal options to buy digital music online; let alone one that offered ‘unlimited access’. </p>
<p>Napster paved the way for Apple’s iTunes store, to serve the demand that was clearly there. The boom in digital download sales never came close to mimicking the ‘all you can play’ experience and was soon marginalized.</p>
<p>The current music industry generates the bulk of its revenues from online streaming subscriptions, while CDs have been downgraded to rare artifacts. This music streaming landscape was largely pioneered by a <a href="https://torrentfreak.com/how-the-pirate-bay-helped-spotify-become-a-success-180319/">Napster ‘fan’ from Sweden</a>, Daniel Ek.</p>
<p>Like many others, Ek was fascinated by the ‘all you can play’ experience offered by file-sharing software, and that planted the seeds for the music streaming startup Spotify, where he still serves as CEO today. In fact, Spotify itself used file-sharing technology under the hood to ensure swift playback. </p>
<p>Spotify is just one of the many examples of the Napster ripple effect, which reaches far beyond technology. The entire music industry has changed, for better and worse, depending on one’s perspective. And the ripples that started 25 years ago will still be felt in the decades to come.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Space secrets leak disclosure (153 pts)]]></title>
            <link>https://huggingface.co/blog/space-secrets-disclosure</link>
            <guid>40544875</guid>
            <pubDate>Sat, 01 Jun 2024 11:38:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://huggingface.co/blog/space-secrets-disclosure">https://huggingface.co/blog/space-secrets-disclosure</a>, See on <a href="https://news.ycombinator.com/item?id=40544875">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
				<p><a href="https://huggingface.co/blog">
						Back to Articles</a></p>

				<h2><!-- HTML_TAG_START -->
	<a id="space-secrets-leak-disclosure" href="#space-secrets-leak-disclosure">
		<span></span>
	</a>
	<span>
		Space secrets leak disclosure
	</span>
<!-- HTML_TAG_END --></h2>
				
				
				<div data-target="BlogAuthorsByline" data-props="{&quot;authors&quot;:[{&quot;author&quot;:{&quot;avatarUrl&quot;:&quot;https://cdn-avatars.huggingface.co/v1/production/uploads/1583856921041-5dd96eb166059660ed1ee413.png&quot;,&quot;fullname&quot;:&quot;Hugging Face&quot;,&quot;name&quot;:&quot;huggingface&quot;,&quot;type&quot;:&quot;org&quot;,&quot;isHf&quot;:true,&quot;isEnterprise&quot;:true}}],&quot;translators&quot;:[],&quot;proofreaders&quot;:[],&quot;lang&quot;:&quot;en&quot;}">

<p><span><span><a href="https://huggingface.co/huggingface"><img alt="Hugging Face's avatar" src="https://cdn-avatars.huggingface.co/v1/production/uploads/1583856921041-5dd96eb166059660ed1ee413.png">
					</a>
			</span>

	</span></p></div>
				

				<!-- HTML_TAG_START -->
<p>

Earlier this week our team detected unauthorized access to our Spaces platform, specifically related to Spaces secrets. As a consequence, we have suspicions that a subset of Spaces’ secrets could have been accessed without authorization.</p>
<p>As a first step of remediation, we have revoked a number of HF tokens present in those secrets. Users whose tokens have been revoked already received an email notice. <strong>We recommend you refresh any key or token and consider switching your HF tokens to fine-grained access tokens which are the new default.</strong></p>
<p>We are working with outside cyber security forensic specialists, to investigate the issue as well as review our security policies and procedures.</p>
<p>Over the past few days, we have made other significant improvements to the security of the Spaces infrastructure, including completely removing org tokens (resulting in increased traceability and audit capabilities), implementing key management service (KMS) for Spaces secrets, robustifying and expanding our system’s ability to identify leaked tokens and proactively invalidate them, and more generally improving our security across the board. We also plan on completely deprecating “classic” read and write tokens in the near future, as soon as fine-grained access tokens reach feature parity. We will continue to investigate any possible related incident.</p>
<p>Finally, we have also reported this incident to law enforcement agencies and Data protection authorities.</p>
<p>We deeply regret the disruption this incident may have caused and understand the inconvenience it may have posed to you. We pledge to use this as an opportunity to strengthen the security of our entire infrastructure. For any question, please contact us at <a href="mailto:security@huggingface.co">security@huggingface.co</a>.</p>
<!-- HTML_TAG_END --></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Arthur Whitney releases an open-source K with MIT license (238 pts)]]></title>
            <link>https://shakti.com/k</link>
            <guid>40544283</guid>
            <pubDate>Sat, 01 Jun 2024 09:47:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://shakti.com/k">https://shakti.com/k</a>, See on <a href="https://news.ycombinator.com/item?id=40544283">Hacker News</a></p>
<div id="readability-page-1" class="page"><header></header><list><e d="0" f="about"><t f="" onclick="t(1,'about')"><a k="p">about</a></t><n onclick="event.stopPropagation()">k: fast fun universal database and language

for: hedgefunds banks manufacturers formula1 ..

why: 100 times faster than polars datatable biqquery redshift databricks snowflake ..

who: arthur whitney+  thanks to
 e.l. whitney[1920-1966] dad:multiple putnam winner(beat john nash every time)
 k.e. iverson[1920-2004] advisor:APL turing award'79
 john cocke  [1925-2002] advisor:RISC turing award'87

benchmarks: same machine. same data. same queries. (apples-to-apples)

h20:     1Billion rows  k is about 100 times faster than polars datatable ..
taxi:    1Billion rows  k is about 100 times faster than biggie shifty sparky ..
taq:  1000Billion rows  only k (incl. kx.com) can do the asof joins in our lifetime.
stac: 2000Billion rows  only k (incl. kx.com) can do these queries.

time - user and machine - is expensive. pandas and polars are free - god bless them - so

            1,000 rows: use excel
        1,000,000 rows: use polars
    1,000,000,000 rows: use k
1,000,000,000,000 rows: only k
</n></e><e d="0" f="benchmark"><t onclick="t(0,'benchmark')"><a k="p">benchmark</a></t><l f="benchmark"><e d="1" f="benchmark/about"><t f="" onclick="t(1,'benchmark/about')"><a k="p">about</a></t><n onclick="event.stopPropagation()">real-sql(k) is consistently 100 times faster (or more) than
 redshift, bigquery, snowflake, spark, mongodb, postgres, ..

same data. same queries. same hardware. anyone can run the scripts.

benchmarks:
 h2o     1Billion rows
 taxi    1Billion rows
 taq  1000Billion trades and quotes
 stac 2000Billion trades and quotes                             

Taq 1.1T  https://www.nyse.com/publicdocs/nyse/data/Daily_TAQ_Client_Spec_v2.2a.pdf

 q1:select max price by sym,ex from trade where sym in S
 q2:select sum size by sym,time.hour from trade where sym in S
 q3:do(100)select last bid by sym from quote where sym in S    / point select
 q4:select from trade[s],quote[s] where price&lt;bid              / asof join
 S is top 100 (10%)

 time(ms) 16core 100 days
                q1     q2       q3       q4
 k              44     72       63       20
 spark       80000  70000      DNF      DNF - can't do it
 postgres    20000  80000      DNF      DNF - can't do it
 ..

Taxi 1.1B  https://tech.marksblogg.com/benchmarks.html

 q1:select count by type from trips
 q2:select avg amount by pcount from trips
 q3:select count by year,pcount from trips
 q4:select count by year,pcount,_ distance from trips

           cpu  cost core/ram  elapsed         machines
 k           4 .0004    4/16    1            1*i3.2xlarge(8v/32/$.62+$.93)
 redshift  864 .0900  108/1464  8(1 2 2 3)   6*ds2.8xlarge(36v/244/$6.80)
 bigquery 1600 .3200  200/3200  8(2 2 1 3)
 db/spark 1260 .0900   42/336  30(2 4 4 20) 21*m5.xlarge(4v/16/$.20+$.30)

Stac https://www.stacresearch.com/
..</n></e><e d="1" f="benchmark/h2o.k"><t f="" onclick="t(1,'benchmark/h2o.k')"><a k="c">h2o.k</a></t><n onclick="event.stopPropagation()">t:.`9.csv
\t select sum v1 by id1 from t
\t select sum v1 by id1,id2 from t
\t select sum v1,avg v3 by id3 from t
\t select avg v1,avg v2,avg v3 by id1 from t
\t select sum v1,sum v2,sum v3 by id3 from t
\t select med v3,dev v3 by id1,id2 from t
\t select min v1,max v1 by id3 from t;
\t select 2 max v3 by id3 from t
\t select v1 dev v2 by id1,id2 from t
\\

https://h2oai.github.io/db-benchmark

data: 50GB csv: 1e9 rows[id1 id2 id3 id4 id5 id6 v1 v2 v3]
query: 9 multi-column aggregations[sum avg var dev correlation median 2max]
machine: amd epyc 9374f
code: k p/polars r/datatable [and much slower:clickhouse spark pandas arrow duckdb ..]

     query    csvload  (milliseconds)
k      950      1,600
*   97,000    606,000
p  258,000    265,000
r  257,000   1250,000

detail for the 9 queries
k      42   76   25  117    16   293    33    15   330
*     616 1509 6499  693  6260 20655  5817 51161  4231
p    1366 2401 42054 943 47177  5093 90847 29360 38500
r    3364 4494 7307 10008 7466 49770 63584 76673 31024

similar results for the 1e7 and 1e8. *(k4) is an old/1999 version of k.
</n></e></l></e><e d="0" f="document"><t onclick="t(0,'document')"><a k="p">document</a></t><l f="document"><e d="1" f="document/k.d"><t f="" onclick="t(1,'document/k.d')"><a k="c">k.d</a></t><n onclick="event.stopPropagation()">fast universal database and language.
connect to everything. depend on nothing.
select min e,max e,avg e by n from`t.csv (billion row challenge)

`t 2'`t.csv  [&gt;&gt;&gt;k.k("2'","t",pandas.read_csv("t.csv"))]
select [count first last min max sum avg var dev med ..] by from where ..
while(..)if(..)else .. in .. exp log sqrt sin cos ..
flip flop list sort asc desc unique group key val .. 

Verb    (monad)      Adverb              Noun
+ +                  ' each              char    " ab"          
- -                  / over right        name    ``ab
* *      sqr         \ scan left         int     2 3 4
% div    sqrt                            float   2 3.4
&amp; and    flip        \l load            
| or     flop        \t time
&lt; &lt;      asc         \v vars         z.d date    2001.01.01  
&gt; &gt;      desc        \w work         z.t time    12:34:56.789
= =      group       \\ exit        
~ ~      ~
. .      value
! mod    index                          
@ @      first       I/O                 Class
? find   unique      0' line             List    (2;3.4)
# take   count       1' char             Dict    {a:2 3}
_ drop   floor       2' data             Table   [a:2 3]
^ cut    order       3' set*             Expr    :2+a
, ,      ,           4' get*             Func    {[a]2+a}    

rosetta        Atom         List   atom   list        Ddd Mm
k      ()[].;: +-*%&amp;|&lt;&gt;=~$! @?#_^, ~-*%_$ @,#!!|^&lt;&gt;?= ..! @&amp;  f'       F'        while(a)if(b)c else d
python ()[].;= +-*/&amp;|&lt;&gt; ^ %  isssa ~- sfs   lrwrsa u  dvk @t [f(x)..] [F(x,y)..] while a:if b:c else:d 
(index slices split append;sqrt floor str;len range where reverse sort argsort unique;dict key value;transpose)

Type   int float complex boolean char name date time
Class  List Dict Array Table Expression Function(* immutable)

             ifgbcndt  LDATEF*       devs
k      1992  833...88  ++++++*    300spartans
sql    1992  32 . .22     -  *     20million
python 1991  .... .    --          10million
 numpy 2005  433   99    +   *      5million
go     2009  422..                  2million
nodejs 1995  . . .     --          15million
excel  1982  . . .         + *     80million
c      1972  42                     5million
apl    1962  . ..        +   *</n></e><e d="1" f="document/sql.d"><t f="" onclick="t(1,'document/sql.d')"><a k="c">sql.d</a></t><n onclick="event.stopPropagation()">shakti universal database includes:

ansi-sql [1992..2011] ok for row/col select.
real-sql [1974..2021] atw@ipsa does it better.

join:  real-easy ansi-ok
 real: select from T,U
 ansi: select from T left outer join U

group: real-easy ansi-annoy
 real: select A by B from T
 ansi: select B, A from T group by B order by B

simple: real-easy ansi-easy
 real: select A from T where C or D, E
 ansi: select A from T where (C or D)and E

complex: real-easy ansi-awful
 asof/joins      select from t,q where price&lt;bid
 first/last      select last bid from quote where sym=`A
 deltas/sums     select from t where 0&lt;deltas price
 foreignkeys     select order.cust.nation.region ..
 arithmetic      x+y e.g. combine markets through time

example: TPC-H National Market Share Query 8 http://www.qdpma.com/tpch/TPCH100_Query_plans.html
what market share does supplier.nation BRAZIL have by order.year for order.customer.nation.region AMERICA and part.type STEEL?

 real: select revenue avg supplier.nation=`BRAZIL by order.year from t where order.customer.nation.region=`AMERICA, part.type=`STEEL

 ansi: select o_year,sum(case when nation = 'BRAZIL' then revenue else 0 end) / sum(revenue) as mkt_share from (
  select extract(year from o_orderdate) as o_year, revenue, n2.n_name as nation 
  from t,part,supplier,orders,customer,nation n1,nation n2,region
  where p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and 
   c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = 'AMERICA' and 
   s_nationkey = n2.n_nationkey and o_orderdate between date '1995-01-01' and date '1996-12-31' and p_type = 'STEEL') as all_nations 
 group by o_year order by o_year;

Comparison:     real                  ansi(sqlserver/oracle/db2/sap/teradata/..)
 install           1 second        100,000 second
 hardware          1 milliwatt     100,000 milliwatt
 software        160 kilobyte    8,000,000 kilobyte  (+ 10,000,000kilobyte O/S)
 mediandb  1,000,000 megarow            10 megarow

https://docs.microsoft.com/en-us/sql/database-engine/install-windows/install-sql-server?view=sql-server-ver15

shakti is essential for analyzing big (trillion row+) and/or complex data.</n></e></l></e><e d="0" f="k"><t onclick="t(0,'k')"><a k="p">k</a></t><l f="k"><e d="1" f="k/a"><t f="" onclick="t(0,'k/a')"><a href="https://shakti.com/k/a" k="p">a</a></t></e><e d="1" f="k/k.d"><t f="" onclick="t(1,'k/k.d')"><a k="c">k.d</a></t><n onclick="event.stopPropagation()">  F      f       f 2+x
+ +      +       F'each   [fF]'each
- -      -       F/right [cfF]/over
* *      sqr     F\left  [cfF]\scan
% div    sqrt
&amp; and    flip    
| or     flop    
&lt; &lt;      asc
&gt; &gt;      desc
= =      group
~ ~      ~
. .      value
! mod    index    I/O
@ @      first    0'line
? find   nub      1'char
# take   count
_ drop   floor   \l load
^ cut    order   \t time
, ,      ,       \w work
$ cast   string  \\ exit
"23";23;2.3;2:3

nyi
{a:2 3} [a:2 3] while(a)if(b)c else d 
x[.@?]y [&amp;^?&lt;&gt;=]x</n></e><e d="1" f="k/k.zip"><t f="" onclick="t(0,'k/k.zip')"><a href="https://shakti.com/k/k.zip" k="c">k.zip</a></t></e></l></e></list></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ticketmaster confirms data hack which could affect 560M globally (126 pts)]]></title>
            <link>https://www.bbc.co.uk/news/articles/cw99ql0239wo</link>
            <guid>40544219</guid>
            <pubDate>Sat, 01 Jun 2024 09:33:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bbc.co.uk/news/articles/cw99ql0239wo">https://www.bbc.co.uk/news/articles/cw99ql0239wo</a>, See on <a href="https://news.ycombinator.com/item?id=40544219">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-component="text-block"><p><b>Ticketmaster owner Live Nation confirmed "unauthorised activity" on its database after a group of hackers said they had stolen the personal details of 560 million  customers.</b></p><p>ShinyHunters, the group claiming responsibility, says the stolen data includes names, addresses, phone numbers and partial credit card details from Ticketmaster users worldwide.</p><p>The hacking group is <a href="https://www.bbc.co.uk/news/articles/c899pz84d8zo">reportedly demanding a $500,000 (£400,000</a>) ransom payment to prevent the data from being sold to other parties.</p><p>In a filing to the US Securities and Exchange Commission, Live Nation said that on 27 May "a criminal threat actor offered what it alleged to be Company user data for sale via the dark web", and that it was investigating.</p><p>The number of customers affected by the data breach has not been confirmed by Live Nation.</p><p>The Ticketmaster breach was first revealed by hackers who posted an advert for the data on Wednesday evening. Ticketmaster refused to confirm it to reporters or customers and instead notified shareholders late on Friday.</p><p>The Australian government said it is working with Ticketmaster to address the issue. The FBI has also offered to assist, a spokesperson for the US Embassy in Canberra told Agence France-Presse.</p><p>A spokesperson for the FBI told the BBC it "has no comment on this matter".</p><p>In its filing, Live Nation said it was working to "mitigate risk" to its customers and that it was notifying users about the unauthorised access to their personal information.</p><p>"As of the date of this filing, the incident has not had, and we do not believe it is reasonably likely to have, a material impact on our overall business operations or on our financial condition or results of operations. We continue to evaluate the risks and our remediation efforts are ongoing", it added.</p><p>American website Ticketmaster is one of the largest online ticket sales platforms in the world.   This hack is one of the biggest in history in terms of global victims but it’s not yet clear how sensitive the data is that is in the hands of cyber criminals.</p><p>Researchers are also warning that it’s part of a larger ongoing hack involving a cloud service provider called Snowflake which is used by many large firms to store data in the cloud. Snowflake notified customers that it has been breached but would not say which firms are impacted. On Friday Santander confirmed it had data from an estimated 30m customers stolen which was being sold by the same hacking group as the Ticketmaster hackers. It’s thought these hacks are all linked and many others could become public.</p><p>An advert with some data samples allegedly obtained in the breach have been posted on the website BreachForums - a newly relaunched hacking forum on the dark web where other hackers buy and sell stolen material, and information to enable hacks to take place.</p><p>ShinyHunters has been linked to a string of high-profile data breaches resulting in millions of dollars in losses to the companies involved.</p><p>In 2021 the group sold a genuine database of stolen information from 70 million customers of US telecoms firm AT&amp;T.</p><p>In September last year, almost 200,000 Pizza Hut customers in Australia had their data breached.</p><p>The FBI cracked down on the domain in March 2023, arresting its administrator Conor Brian Fitzpatrick, but it has reappeared, according to tech media.</p><p>Users of hacking forums often inflate the scale of their hacking to attract attention from other hackers.</p><p>They are often where large stolen databases first appear but can also feature false allegations and claims.</p><p>Individuals declaring large batches of data in the past have proven to be duplicates of previous hacks rather than newly stolen information.</p><p>If the data hack is as large as claimed by ShinyHunters, the hack could be the most significant breach ever in terms of numbers and the extent of the data stolen.</p><p>This is not the first time Ticketmaster has been hit with security issues.</p><p>In 2020 it admitted it hacked into one of its competitors and agreed to pay a $10m fine.</p><p>In November it was allegedly hit by a cyber attack which led to problems selling tickets for Taylor Swift's Era's tour.</p><p>Earlier this month, US regulators sued Live Nation accusing the entertainment giant of using illegal tactics to maintain a monopoly over the live music industry.</p><p>The lawsuit from the Department of Justice said the firm's practices had kept out competitors, and led to higher ticket prices and worse service for customers.</p></div><div data-component="text-block"><p>Experts say it’s important not to panic but to be alert, if you think you may be a victim.</p><p>Watch out for bogus emails, messages and phone calls - hackers can sometimes use the details they have to trick victims into revealing more information.</p><p>In some cases scammers may try and exploit the fear caused by the hack as a way of trying to persuade you to share information.</p><p>Be especially suspicious of:</p><div><ul role="list"><li><p>official-sounding messages about "resetting passwords", "receiving compensation", "scanning devices" or "missed deliveries"</p></li></ul></div><div><ul role="list"><li><p>emails full of "tech speak", designed to sound more convincing</p></li></ul></div><div><ul role="list"><li><p>being urged to act immediately or within a limited timeframe</p></li></ul></div><p>In 2018 when a hack put some Ticketmaster customer information at risk, UK officials <a href="https://www.ncsc.gov.uk/guidance/ncsc-advice-ticketmaster-customers">also suggested users<span>, <!-- -->external</span></a> kept an eye on their financial accounts for suspicious activity. They also advised changing your password for Ticketmaster and on any other sites using the same password.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Lessons learned from 6 months of operating a tiny news archive (107 pts)]]></title>
            <link>https://hiandrewquinn.github.io/til-site/posts/lessons-learned-from-6-months-of-operating-a-teensy-tiny-news-archive/</link>
            <guid>40544043</guid>
            <pubDate>Sat, 01 Jun 2024 08:55:17 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hiandrewquinn.github.io/til-site/posts/lessons-learned-from-6-months-of-operating-a-teensy-tiny-news-archive/">https://hiandrewquinn.github.io/til-site/posts/lessons-learned-from-6-months-of-operating-a-teensy-tiny-news-archive/</a>, See on <a href="https://news.ycombinator.com/item?id=40544043">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article><div><ol><li><p><strong>The best websites are <a href="https://www.robinsloan.com/notes/home-cooked-app/">home-cooked meals</a>.</strong> <a href="https://hiandrewquinn.github.io/selkouutiset-archive/">Andrew’s Selkouutiset Archive</a> was birthed after I realized there was no obvious way to fetch the <em>previous</em> articles of the “Easy Finnish” daily news broadcast. This annoyed me as a student of the language. “Here we have a stream”, I thought, “of high-quality, human-written, interesting practice material, and no easy way to access it!” So I went out of my way to create such a way, and me and my language skills have been profiting off of it ever since. A very small website, for a very specific need, just leaves a delightful aftertaste in the mouth.</p></li><li><p><strong>Cronjobs and Git complement each other nicely.</strong> ASA runs off of 3 Git repos, each submoduling and iterating upon the last. The first repo archives the page as-is with a cronjob. The second repo turns the first repo into cleaned-up Markdown with an English translation with another cronjob. The third repo turns the cleaned-up Markdown into a Hugo website with a third cronjob. If at any point an issue appears, with e.g. the shell scripts that do the actual cleaning, I always have the option to simply revert to a previous commit and work fresh.</p></li><li><p><strong>Simplicity is underrated.</strong> Everything about this website is done as simply as I could stand. For example, notice how there’s no database at all. In essence we are using Git itself as our database, specifically that very first repo. That means this site is <em>entirely static</em>, and can be deployed directly to Github Pages without any complications. I don’t think I’ve had to tweak anything about that flow in the last 3 months.</p></li><li><p><strong>Working locally is <em>hella</em> underrated.</strong> Originally I started this because I got tired of spending 15 minutes every morning copying and pasting that day’s news, along with its Google Translation to English, into Anki. Later I got tired of spending 5 minutes per article copying and pasting the actual archive, even though the whole translation was right there as well. Because I made sure to make the intermediate repo as easy to work with as possible, I later found it very straightforward to write <a href="https://github.com/Selkouutiset-Archive/selkokortti/tree/main">a little Python program</a> that could process <em>all</em> of the news into a flashcard format. Crucially, because all of the Git repos are things anyone else can pull down, this program <em>clones its own local copy</em> of Repo #2 and creates flashcards on that copy on the local filesystem, making it probably an order of magnitude faster than even the fastest response-request cycle could get (and much more deterministic too).</p></li><li><p><strong>Bare HTML never goes out of style.</strong> My archive doesn’t use any JavaScript at all, it’s just HTML with the smallest amount of classless CSS I could get away with to make it easy to read the Finnish and English side-by-side. At one point I thought perhaps I should add in some code to help people find the dictionary forms of the rarer words, but it turns out <a href="https://github.com/hiAndrewQuinn/finstem">I already wrote a command line tool to solve that general case</a>. Adding JavaScript in to a non-JS website to solve that task felt like way more complexity than it was worth.</p></li><li><p><strong><a href="https://pandoc.org/">pandoc</a> is the bee’s knees!</strong></p></li></ol></div></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stealing everything you've ever typed on your Windows Recall PC is now possible (158 pts)]]></title>
            <link>https://simonwillison.net/2024/Jun/1/stealing-everything-youve-ever-typed/#atom-everything</link>
            <guid>40543990</guid>
            <pubDate>Sat, 01 Jun 2024 08:43:29 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://simonwillison.net/2024/Jun/1/stealing-everything-youve-ever-typed/#atom-everything">https://simonwillison.net/2024/Jun/1/stealing-everything-youve-ever-typed/#atom-everything</a>, See on <a href="https://news.ycombinator.com/item?id=40543990">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>


<p><a href="https://doublepulsar.com/recall-stealing-everything-youve-ever-typed-or-viewed-on-your-own-windows-pc-is-now-possible-da3e12e9465e">Stealing everything you’ve ever typed or viewed on your own Windows PC is now possible with two lines of code — inside the Copilot+ Recall disaster</a> (<a href="https://cyberplace.social/@GossiTheDog/112537206611365804" title="@GossiTheDog">via</a>) Recall is a new feature in Windows 11 which takes a screenshot every few seconds, runs local device OCR on it and stores the resulting text in a SQLite database. This means you can search back through your previous activity, against local data that has remained on your device.</p>
<p>The security and privacy implications here are still enormous because malware can now target a single file with huge amounts of valuable information:</p>
<blockquote>
<p>During testing this with an off the shelf infostealer, I used Microsoft Defender for Endpoint — which detected the off the shelve infostealer — but by the time the automated remediation kicked in (which took over ten minutes) my Recall data was already long gone.</p>
</blockquote>
<p>I like Kevin Beaumont's argument here about the subset of users this feature is appropriate for:</p>
<blockquote>
<p>At a surface level, it is great if you are a manager at a company with too much to do and too little time as you can instantly search what you were doing about a subject a month ago.</p>
<p>In practice, that audience’s needs are a very small (tiny, in fact) portion of Windows userbase — and frankly talking about screenshotting the things people in the <em>real world</em>, not executive world, is basically like punching customers in the face.</p>
</blockquote>



</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[CERN Root (258 pts)]]></title>
            <link>https://root.cern/</link>
            <guid>40543651</guid>
            <pubDate>Sat, 01 Jun 2024 07:25:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://root.cern/">https://root.cern/</a>, See on <a href="https://news.ycombinator.com/item?id=40543651">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main" role="main">
  <article itemscope="" itemtype="https://schema.org/CreativeWork">
    <meta itemprop="headline" content="ROOT: analyzing petabytes of data, scientifically.">
    <meta itemprop="description" content="An open-source data analysis framework used by high energy physics and others.">
    
    

    <section itemprop="text">
      <div>
    <center>
    <div>
        <p><a href="https://root.cern/get_started"><img width="128" src="https://root.cern/assets/images/start.svg"></a></p>
        <p><span color="#346295" size="3">Start</span></p>
    </div><!--
    --><div>
        <p><a href="https://root.cern/doc/v632"><img width="128" src="https://root.cern/assets/images/doc.svg"></a></p>
        <p><span color="#346295" size="3">Reference</span></p>
    </div><!--
    --><div>
        <p><a href="https://root-forum.cern.ch/"><img width="128" src="https://root.cern/assets/images/forum.svg"></a></p>
        <p><span color="#346295" size="3">Forum</span></p>
    </div><!--
    --><div>
        <p><a href="https://root.cern/gallery"><img width="128" src="https://root.cern/assets/images/gallery.svg"></a></p>
        <p><span color="#346295" size="3">Gallery</span></p>
    </div>
    </center>
</div>






<div>

  
    <div>
          
            <h2>√-1</h2>
          

          
            <p>ROOT enables <i>statistically sound</i> scientific analyses and visualization of large amounts of data: today, more than 1 exabyte (1,000,000,000 gigabyte) are stored in ROOT files. <a href="https://root.cern/gallery#higgs-plots">The Higgs was found with ROOT!</a></p>
          

          
        </div>
  
    <div>
          
            <h2><img src="https://root.cern/assets/images/globe_with_meridians.svg" alt="*.*"></h2>
          

          
            <p>As <i>high-performance</i> software, ROOT is written mainly in C++. You can use it on Linux, macOS, or Windows; it works out of the box. ROOT is <a href="https://root.cern/about/license">open source</a>: use it freely, <a href="https://root.cern/install/build_from_source">modify it</a>, <a href="https://root.cern/contribute">contribute to it</a>!</p>
          

          
        </div>
  
    <div>
          
            <h2>$ _</h2>
          

          
            
          

          
        </div>
  

</div>



<table>
   <tbody>
      <tr>
         <td>
            <p><span size="4"><b><a href="https://root.cern/blog/rntuple-update/">RNTuple: Where are we now and what's next?</a></b></span> <span size="1">(26 Jan 2024)</span>
               <span size="2"><p>Hello, this is Florine from the ROOT team! Over the past year, I’ve been working
as a technical student funded by ATLAS to evaluate and help further develop
RNTuple. As you may already be aware, RNTuple <a href="#rntuple-evolution">[1]</a> is
currently being developed as the successor to TTree, and is projected to be
used in Run 4. I imagine you might be wondering why there is a need for a
completely new (TTree-incompatible) system, and what this looks like. That’s why
in this blog post, I will try to answer this question, as well as give you an
overview of the current status of RNTuple, what we’re still working on before
its first production release (and what we will work on beyond this), and
finally how you can already try it out!</p>
</span>
               
               <span size="4"><b><a href="https://root.cern/blog/web-based-graphics-default/">Interactive, web-based canvas is now the default in ROOT</a></b></span> <span size="1">(05 Jun 2023)</span>
               <span size="2"><p>After a long period of development and testing we decided to switch to the web-based <code>TCanvas</code>
implementation by default in the ROOT master version. It has been present in the ROOT for a
while (since 2017) and used already in the web-based TBrowser, which you have probably seen already.</p>
</span>
               
               <span size="4"><b><a href="https://root.cern/blog/new-class-tscatter/">New class TScatter</a></b></span> <span size="1">(30 May 2023)</span>
               <span size="2"><center>
   <img src="https://root.cern/assets/images/scatter.png" alt="TScatter" width="1600" height="749">
</center>
</span>
               
               <span size="4"><b><a href="https://root.cern/blog/code-horsepower-f1/">Coding in ROOT with the horsepower of an <kbd>F1</kbd></a></b></span> <span size="1">(01 Mar 2022)</span>
               <span size="2"><p>If you’ve ever rubbed your eyes trying to decrypt <em>C++</em> compilation errors from a terminal, or even have faced with your bare eye the intimidating logs of valgrind output for memory leak detection, or manually deployed <em>gdb</em>, you should definitely keep reading. With this post, I believe you’ll improve your productivity and experience with <em>ROOT</em> by using QtCreator as a development and troubleshooting environment.</p>
</span>
               
               <span size="4"><b><a href="https://root.cern/blog/debuging-root-scripts-in-eclipse/">Debugging CERN ROOT scripts and ROOT-based programs in Eclipse IDE</a></b></span> <span size="1">(30 Oct 2021)</span>
               <span size="2"><center>
   <img src="https://root.cern/assets/images/setup-eclipse-ide-with-cern-root.jpg" alt="Eclipse IDE dependencies" width="1600" height="749">
</center>
</span>
               
               <b><a href="https://root.cern/blog"> More ...</a></b>
            </p>
         </td>
         <td>
         </td>
         <td>
            <h2>Latest Releases</h2>
            <br>
            <div>
               <p><span size="2">
               









<ul>




<li> <a href="https://root.cern/releases/release-63200/"> Release 6.32/00 - 


28th

of May, 2024 </a></li>

<li> <a href="https://root.cern/releases/release-63006/"> Release 6.30.06 - 


3rd
  
of April, 2024 </a></li>

<li> <a href="https://root.cern/releases/release-63004/"> Release 6.30.04 - 


31st
  
of January, 2024 </a></li>

<li> <a href="https://root.cern/releases/release-63002/"> Release 6.30/02 - 


28th

of November, 2023 </a></li>

<li> <a href="https://root.cern/releases/release-63000/"> Release 6.30/00 - 


7th

of November, 2023 </a></li>







</ul>

               <br>
               <b><a href="https://root.cern/install/all_releases"> More ...</a></b>
               </span>
            </p></div>
            <br>
         </td>
      </tr>
   </tbody>
</table>

    </section>
  </article>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Ticketmaster confirms data breach with a SEC filing (117 pts)]]></title>
            <link>https://stackdiary.com/ticketmaster-confirms-data-breach-with-a-sec-filing/</link>
            <guid>40543408</guid>
            <pubDate>Sat, 01 Jun 2024 06:34:03 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://stackdiary.com/ticketmaster-confirms-data-breach-with-a-sec-filing/">https://stackdiary.com/ticketmaster-confirms-data-breach-with-a-sec-filing/</a>, See on <a href="https://news.ycombinator.com/item?id=40543408">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">

	
	
		
			
<div>
				
<p>Live Nation Entertainment, also known as Ticketmaster, has submitted an official <strong>Form 8-K</strong> with the U.S. Securities and Exchange Commission (SEC), acknowledging and confirming that <a href="https://stackdiary.com/ticketmaster-breached-a-reputable-source-says-yes/" target="_blank" rel="noreferrer noopener">the recently rumored data breach</a> is real.</p>



<p>In the filing (<a href="https://www.sec.gov/Archives/edgar/data/1335258/000133525824000081/lyv-20240520.htm" target="_blank" rel="noreferrer noopener">which can be seen here</a>), Ticketmaster says that on May 20, 2024, Live Nation Entertainment, Inc. <strong>discovered unauthorized activity within a third-party cloud database environment that contained company data</strong>, primarily from its Ticketmaster L.L.C. subsidiary. The company immediately launched an investigation with the help of leading forensic experts to understand the extent and nature of the breach.</p>



<p>On May 27, 2024, a criminal actor claimed to have company user data for sale on the dark web. Live Nation is actively working to mitigate the risk to its users and the company. They have notified and are cooperating with law enforcement agencies. Additionally, they are informing regulatory authorities and affected users about unauthorized access to personal information.</p>



<p>The company says they continue to assess the risks and are working on remediation efforts.</p>



<h2>What happened? A timeline.</h2>



<p>Starting May 29th, when a group called <em>ShinyHunters</em> published the initial data for sale on dark web forums, numerous key events were associated with this breach. As such, here is a complete timeline of the events as they happened:</p>



<ul>
<li><strong>May 27, 2024</strong> — A dark web user with no previous breach reputation published a forum post saying they have 560 million Ticketmaster user data for sale: name, address, email, phone numbers, order details, etc.</li>



<li><strong>May 29, 2024</strong> — The dark web threat group ShinyHunters reposted the sale of this data themselves on BreachForums, which gave this story immediate credibility. ShinyHunters has a history of high-level data breaches. Following this, major news media immediately picked up the story and began publishing articles saying Ticketmaster had been hacked.</li>



<li><strong>May 30, 2024</strong> — A reputable cybersecurity group called <a href="https://x.com/vxunderground/status/1796063116574314642" target="_blank" rel="noreferrer noopener">vx-underground was given sample data</a> from the Ticketmaster breach. They said, “Based on data provided to us by the Threat Group responsible for the compromise, we can assert with a high degree of confidence that the data is legitimate.”</li>



<li><strong>May 31, 2024</strong> — The <a href="https://www.bbc.com/news/articles/c6ppv06e3n8o" target="_blank" rel="noreferrer noopener">BBC published a news article</a> saying that Santander, a major financial organization, had been breached, and all customer data was offered for sale: the price was $2 million. At the time, there was no connection between this story and Ticketmaster’s. Until…</li>



<li><strong>May 31, 2024</strong> — The security research group at Hudson Rock <a href="https://web.archive.org/web/20240531225301/https://www.hudsonrock.com/blog/snowflake-massive-breach-access-through-infostealer-infection" target="_blank" rel="noreferrer noopener">publishes a story</a> (✤) about a conversation with the threat actor responsible for the Ticketmaster and Santander breaches. According to the perpetrator, these breaches were made possible by breaching Snowflake, a cloud provider of data solutions. Both Santander and Live Nation are Snowflake customers.</li>



<li><strong>May 31, 2024</strong> — Snowflake published <a href="https://community.snowflake.com/s/question/0D5VI00000Emyl00AB/detecting-and-preventing-unauthorized-user-access" target="_blank" rel="noreferrer noopener">a security bulletin acknowledging the breach</a>. They don’t acknowledge the exact method of breach implied by the perpetrator, but they don’t deny it either. What matters here is that there is a connection with everything that happened before.</li>



<li><strong>May 31, 2024</strong> — The Securities and Exchange Commission (SEC) publishes <a href="https://www.sec.gov/Archives/edgar/data/1335258/000133525824000081/lyv-20240520.htm" target="_blank" rel="noreferrer noopener">the Live Nation filing</a> disclosing the Ticketmaster breach. Details are very sparse at this time, and we should expect more updates in the coming days or weeks.</li>
</ul>



<p>According to the Hudson Rock story with the perpetrator, he had initially wanted to get $20 million from Snowflake to never publish the data, neither from Ticketmaster or Santander nor the other 400 companies he alleges he had access to.</p>



<figure><blockquote><p>To put it bluntly, a single credential resulted in the exfiltration of potentially hundreds of companies that stored their data using Snowflake, with the threat actor himself suggesting&nbsp;<strong>400 companies</strong>&nbsp;are impacted. The goal of the threat actor, as in most cases, was to blackmail Snowflake into buying their own data back for $20,000,000.</p><cite>Hudson Rock</cite></blockquote></figure>



<p>It’s important to note that the language used by all the parties involved in this situation has been extremely obscure. For example, at the time of this publication, Snowflake has not explicitly stated that the threat actor did not gain access to extremely sensitive data. Snowflake has also declined to comment on the situation when asked about it.</p>



<p>Likewise, at the time of this publication, Ticketmaster has not yet begun notifying its users of the data breach. The entire timeline suggests that this could potentially be the largest data breach ever (all things considered), yet there is very little direct confirmation outside of Live Nation’s SEC filing.</p>



<p><em>✤: Stack Diary is aware that Hudson Rock has removed its blog post showcasing the perpetrator’s conversation. This was likely done because Hudson Rock unknowingly/knowingly doxxed (revealed personal details) an employee whose account was breached at Snowflake. We’ve reached out for comment.</em></p>

			</div>

		
	
			<section>
			<p>
				<h2>
					Read more				</h2>
			</p>

			
		</section>
		
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Nginx Unit: open-source, lightweight and versatile application runtime (120 pts)]]></title>
            <link>https://unit.nginx.org/</link>
            <guid>40543330</guid>
            <pubDate>Sat, 01 Jun 2024 06:18:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://unit.nginx.org/">https://unit.nginx.org/</a>, See on <a href="https://news.ycombinator.com/item?id=40543330">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content">

<p>NGINX Unit is a lightweight and versatile application runtime
that provides the essential components for your web application
as a single open-source server:
running application code
(including WebAssembly),
serving static assets,
handling TLS and request routing.</p>
<p>Unit was created by
<a href="https://nginx.org/en/">nginx</a>
team members from scratch
to be highly efficient
and fully configurable at runtime.
The latest version is 1.32.1,
released on Mar 26, 2024.</p>
<ul>
<li>See a quickstart
<a href="https://github.com/nginx/unit/">guide</a>
on our GitHub page.</li>
<li>Browse the
<a href="https://unit.nginx.org/CHANGES.txt">changelog</a>,
see the release notes in the
<a href="https://unit.nginx.org/news/"><span>news</span></a>
archive,
or subscribe to
our RSS
<a href="https://unit.nginx.org/rss.xml">feed</a>.</li>
<li>Check out the discussion of our
<a href="https://unit.nginx.org/keyfeatures/"><span>key features</span></a>
for further details.</li>
<li>Peek at our future plans
with a GitHub-based
<a href="https://github.com/orgs/nginx/projects/1">roadmap</a>.</li>
</ul>
<div>
  <p>
    <iframe src="https://www.youtube.com/embed/NaaS1qOBnuw" allowfullscreen="">
    </iframe>
  </p>

  <p>
    <iframe src="https://www.youtube.com/embed/thEX-oQHfDA?start=545" allowfullscreen="">
    </iframe>
  </p>
</div><p>Watch the entire NGINX Unit tutorial course
<a href="https://www.youtube.com/playlist?list=PLGz_X9w9raXdV3vuPUu0kKBSBjG9rPaUf">here</a>.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Tiny number of 'supersharers' spread the majority of fake news (273 pts)]]></title>
            <link>https://www.science.org/content/article/tiny-number-supersharers-spread-vast-majority-fake-news</link>
            <guid>40542321</guid>
            <pubDate>Sat, 01 Jun 2024 02:16:27 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.science.org/content/article/tiny-number-supersharers-spread-vast-majority-fake-news">https://www.science.org/content/article/tiny-number-supersharers-spread-vast-majority-fake-news</a>, See on <a href="https://news.ycombinator.com/item?id=40542321">Hacker News</a></p>
Couldn't get https://www.science.org/content/article/tiny-number-supersharers-spread-vast-majority-fake-news: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[60 kHz (2022) (221 pts)]]></title>
            <link>https://ben.page/wwvb</link>
            <guid>40541559</guid>
            <pubDate>Sat, 01 Jun 2024 00:05:36 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ben.page/wwvb">https://ben.page/wwvb</a>, See on <a href="https://news.ycombinator.com/item?id=40541559">Hacker News</a></p>
<div id="readability-page-1" class="page"><div> <p> February 27, 2022 </p><div> <p>There’s a radio station in Colorado that broadcasts the time.</p>
<p>It’s WWVB, the station that the National Institute of Standards and Technology uses to broadcast the current time, tuned to the 60 kHz frequency. Day and night, this station diligently continues broadcasting.</p>
<p>60 kHz is at a “low frequency” part of the spectrum, which means the bandwidth is just enough to broadcast a single digit of binary every second. It takes a full minute just to broadcast the current time.</p>
<p>The WWVB station is used by every radio clock in the United States. They read the minute-long broadcast once a day or so, and set themselves to that time. Then, they offset the broadcasted time by whatever time zone you’ve set on the clock, since WWVB doesn’t know what time zone you’re in.</p>
<p>That’s how radio clocks accurately know the current time without you needing to set them. They read it from the airwaves.</p>
<p>Clever, isn’t it? We needed a way for clocks to set their own time, so the government set up a radio station that broadcasts the current time forever.</p>
<p>This kind of thing is exceedingly cool to me. That the solution feels like it’s just <em>neat</em>.</p>
<p>I’m not particularly patriotic, but this kind of thing feels particularly American. Perhaps my imagination of American innovation is still set in the era of lunar missions and radio. But we had a problem, and we solved it with technology. And none of that fancy newfangled technology — we solved it using&nbsp;<em>solid</em> technology, the kind that you can touch with your hands and that buzzes in the airwaves.</p>
<p>It’s also a reminder that we owe the way the world works to an unimaginable number of invisible people who have come before us. Everything around builds atop the contributions of people, not unlike us, who tried to leave the world a little better than they’d found it.</p> </div>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[UI elements with a hand-drawn, sketchy look (596 pts)]]></title>
            <link>https://wiredjs.com/</link>
            <guid>40540952</guid>
            <pubDate>Fri, 31 May 2024 22:23:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://wiredjs.com/">https://wiredjs.com/</a>, See on <a href="https://news.ycombinator.com/item?id=40540952">Hacker News</a></p>
<div id="readability-page-1" class="page"><article>
    <header>
      <img alt="Logo" id="logo" src="https://wiredjs.com/images/logo_400.png">
      
    </header>
    <section>
      <p>
        A set of common UI elements with a hand-drawn, sketchy look. These can be used for wireframes, mockups, or just
        the fun hand-drawn
        look.
      </p>
      <p>
        The elements are drawn with enough randomness that no two renderings will be exactly the same — just like
        two separate
        hand-drawn shapes.
      </p>
      <p>
        <a href="https://wiredjs.com/showcase">
          <wired-button elevation="1">Component Showcase</wired-button>
        </a>
        <a href="https://github.com/rough-stuff/wired-elements">
          <wired-button elevation="1">View on Github</wired-button>
        </a>
        <a target="_blank" href="https://opencollective.com/rough" rel="noopener">
          <wired-button elevation="1">Sponsor this project</wired-button>
        </a>
      </p>
    </section>
    <section>
      <h3>Here's a simple demo:</h3>
      <p>Using wired-element controls to change a sketchy circle drawn using
        <a href="https://roughjs.com/" rel="noopener" target="_blank">rough.js</a>.
      </p>
      <wired-card elevation="4">
        <rough-demo></rough-demo>
      </wired-card>
    </section>

    <section>
      <h3>Try It Now</h3>
      <p>Play with wired-elements live in Sandbox:</p>
      <p>
        <a target="_blank" rel="noopener" href="https://codesandbox.io/s/wired-elements-vanilla-4bpny">Wired
          Elements Vanilla</a>
      </p>
      <p>
        Try it with a framework:
      </p>
      <p>
        <a target="_blank" rel="noopener" href="https://codesandbox.io/s/vj389y9375">Wired
          Elements in Vue</a>
        <br>
        <a target="_blank" rel="noopener" href="https://codesandbox.io/s/wired-elements-svelte-4hfkb">Wired
          Elements in Svelte</a>
        <br>
        <a target="_blank" rel="noopener" href="https://codesandbox.io/s/react-wrapper-for-wired-elements-vid1j">Wired
          Elements in React</a>
        (using React <a target="_blank" rel="noopener" href="https://github.com/rough-stuff/wired-elements-react">wrapper components</a>)
      </p>
    </section>

    <section>
      <h3>Documentation</h3>
      <p>Instructions on how to use wired-elements can be found on
        <a href="https://github.com/rough-stuff/wired-elements">wired-elements GitHub page</a>.
      </p>
      <p>
        API of specific elements can be found on their respective page in the Docs.
        <a href="https://github.com/rough-stuff/wired-elements/tree/master/docs">Here's the list.</a>
      </p>
    </section>

    <section>
      <h3>Components</h3>
      <p>
        <a href="https://wiredjs.com/showcase">Component showcase</a> of all the wired elements.
      </p>
    </section>

    <section>
      <h3>Credits</h3>
      <p>
        wired-elements was built using
        <a target="_blank" rel="noopener" href="https://roughjs.com/">RoughJS</a>
        and
        <a target="_blank" rel="noopener" href="https://lit.dev/">Lit</a>.
      </p>
    </section>

    <section>
      <h3>Support this project</h3>
      <p>
        Support development of this project by sponsoring on
        <a target="_blank" rel="noopener" href="https://opencollective.com/rough">Open Collective</a>
        or
        <a target="_blank" rel="noopener" href="https://github.com/sponsors/pshihn">Github</a>.
      </p>
    </section>

    <section>
      <h3>License</h3>
      <p>
        <a target="_blank" rel="noopener" href="https://github.com/rough-stuff/wired-elements/blob/master/LICENSE">MIT
          License</a> (c)
        <a target="_blank" rel="noopener" href="https://twitter.com/preetster">Preet Shihn</a>.
      </p>
    </section>
  </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Recall: Stealing everything you've ever typed or viewed on your own Windows PC (282 pts)]]></title>
            <link>https://doublepulsar.com/recall-stealing-everything-youve-ever-typed-or-viewed-on-your-own-windows-pc-is-now-possible-da3e12e9465e</link>
            <guid>40540703</guid>
            <pubDate>Fri, 31 May 2024 21:52:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://doublepulsar.com/recall-stealing-everything-youve-ever-typed-or-viewed-on-your-own-windows-pc-is-now-possible-da3e12e9465e">https://doublepulsar.com/recall-stealing-everything-youve-ever-typed-or-viewed-on-your-own-windows-pc-is-now-possible-da3e12e9465e</a>, See on <a href="https://news.ycombinator.com/item?id=40540703">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><div><a href="https://medium.com/@networksecurity?source=post_page-----da3e12e9465e--------------------------------" rel="noopener follow"><div aria-hidden="false"><p><img alt="Kevin Beaumont" src="https://miro.medium.com/v2/resize:fill:88:88/1*TPJ3sVZRlcq-rj72g82bAg@2x.jpeg" width="44" height="44" loading="lazy" data-testid="authorPhoto"></p></div></a><a href="https://doublepulsar.com/?source=post_page-----da3e12e9465e--------------------------------" rel="noopener  ugc nofollow"><div aria-hidden="false"><p><img alt="DoublePulsar" src="https://miro.medium.com/v2/resize:fill:48:48/1*euFkwA7zJWm-l7aDoNtJrw.jpeg" width="24" height="24" loading="lazy" data-testid="publicationPhoto"></p></div></a></div><p id="0656">I wrote a piece recently about Copilot+ Recall, a new Microsoft Windows 11 feature which — in the words of Microsoft CEO Satya Nadella- <a rel="noopener ugc nofollow" target="_blank" href="https://doublepulsar.com/how-the-new-microsoft-recall-feature-fundamentally-undermines-windows-security-aa072829f218">takes “screenshots” of your PC constantly, and makes it into an instantly searchable database of everything you’ve ever seen</a>. As he says, it is photographic memory of your PC life.</p><p id="b900">I got ahold of the Copilot+ software and got it working on a system without an NPU about a week ago, and I’ve been exploring how this works in practice, so we’ll have a look into it that shortly. First, I want to look at how this feature was received as I think it is important to understand the context.</p><p id="2619">The overwhelmingly negative reaction has probably taken Microsoft leadership by surprise. For almost everybody else, it won’t have. This was like watching Microsoft become an Apple Mac marketing department.</p><p id="e553">At a surface level, it is great if you are a manager at a company with too much to do and too little time as you can instantly search what you were doing about a subject a month ago.</p><p id="054e">In practice, that audience’s needs are a very small (tiny, in fact) portion of Windows userbase — and frankly talking about screenshotting the things people in the <em>real world</em>, not executive world, is basically like punching customers in the face. The echo chamber effect inside Microsoft is real here, and oh boy… just oh boy. It’s a rare misfire, I think.</p><p id="7111">I think it’s an interesting <em>entirely, </em><strong><em>really </em></strong>optional feature with a niche initial user base that would require incredibly careful communication, cybersecurity, engineering and implementation. Copilot+ Recall doesn’t have these. The work hasn’t been done properly to package it together, clearly.</p><p id="b19a">A lot of Windows users just want their PCs so they can play games, watch porn, and live their lives as human beings who make mistakes.. that they don’t always want to remember, and the idea other people with access to the device could see a photographic memory is.. very scary to a great many people on a deeply personal level. Windows is a personal experience. This shatters that belief.</p><p id="cff5">I think they are probably going to set fire to the entire Copilot brand due to how poorly this has been implemented and rolled out. It’s an act of self harm at Microsoft in the name of AI, and by proxy real customer harm.</p><p id="38a6">More importantly, at the time I pointed out this <a href="http://If you disable or don't configure this policy setting, Windows will save snapshots of the screen and users will be able to search for or browse through a timeline of their past activities using Recall." rel="noopener ugc nofollow" target="_blank">fundamentally breaks the promise of security in Windows</a>.</p><p id="ae6d">I’d now like to detail why. Strap in — this is crazy.</p></div><div><p id="3526">I’m going to structure this as a Q&amp;A with myself now, based on comments online, as it’s really interesting seeing how some people handwave the issues away.</p><p id="ea19"><strong>Q. The data is processed entirely locally on your laptop, right?</strong></p><p id="fff7">A. Yes! They made some smart decisions here, there’s a whole subsystem of Azure AI etc code that process on the edge.</p><p id="b03c"><strong>Q. Cool, so hackers and malware can’t access it, right?</strong></p><p id="007d">A. No, they can.</p><p id="2d3a"><strong>Q. But it’s encrypted.</strong></p><p id="fd06">A. When you’re logged into a PC and run software, things are decrypted for you. Encryption at rest only helps if somebody comes to your house and physically steals your laptop — that isn’t what criminal hackers do.</p><p id="a323">For example, InfoStealer trojans, which automatically steal usernames and passwords, are a major problem for well over a decade — now these can just be easily modified to support Recall.</p><p id="bcd0"><strong>Q. But the BBC said data cannot be accessed remotely by hackers.</strong></p><p id="8721">A. They were quoting Microsoft, but this is wrong. Data can be accessed remotely.</p><figure></figure><p id="b9a0">This is what the journalist was told for some reason:</p><figure></figure><p id="59c6"><strong>Q. Microsoft say only that user can access the data.</strong></p><p id="2fcd">A. This isn’t true, I can demonstrate another user account on the same device accessing the database.</p><p id="68c7"><strong>Q. So how does it work?</strong></p><p id="2bb4">A. Every few seconds, screenshots are taken. These are automatically OCR’d by Azure AI, running on your device, and written into an SQLite database in the user’s folder.</p><p id="7050">This database file has a record of everything you’ve ever viewed on your PC in plain text. OCR is a process of looking an image, and extracting the letters.</p><p id="1e88"><strong>Q. What does the database look like?</strong></p><p id="5247">A:</p><figure></figure><p id="f17f"><strong>Q. How do you obtain the database files?</strong></p><p id="9624">A. They’re just files in AppData, in the new CoreAIPlatform folder.</p><p id="2079"><strong>Q. But it’s highly encrypted and nobody can access them, right?!</strong></p><p id="5407">A. Here’s a few second video of two Microsoft engineers accessing the folder:</p><figure></figure><p id="d89d"><strong>Q. …But, normal users don’t run as admins!</strong></p><p id="2985">A. According to Microsoft’s own website, in their Recall rollout page, they do:</p><figure></figure><p id="f3d8">In fact, you don’t even need to be an admin to read the database — more on that in a later blog.</p><p id="1013"><strong>Q. But a UAC prompt appeared in that video, that’s a security boundary.</strong></p><p id="aac7">A. According to Microsoft’s own website (and MSRC), UAC is not a security boundary:</p><figure></figure><p id="46a9"><strong>Q. So… where is the security here?</strong></p><p id="1d66">A. They have tried to do a bunch of things but none of it actually works properly in the real world due to gaps you can drive a plane through.</p><p id="53de"><strong>Q. Does it automatically not screenshot and OCR things like financial information?</strong></p><p id="dd01">A. No:</p><figure></figure><p id="9ee1"><strong>Q. How large is the database?</strong></p><p id="ae92">A. It compresses well, several days working is around ~90kb. You can exfiltrate several months of documents and key presses in the space of a few seconds with an average broadband connection.</p><p id="be41"><strong>Q. How fast is search?</strong></p><p id="0fad">On device, really fast.</p><p id="e412"><strong>Q. Have you exfiltrated your own Recall database?</strong></p><p id="1bd3">A. Yes. I have automated exfiltration, and made a website where you can upload a database and instantly search it.</p><p id="3f35">I am deliberately holding back technical details until Microsoft ship the feature as I want to give them time to do something.</p><p id="3dc5">I actually have a whole bunch of things to show and think the wider cyber community will have so much fun with this when generally available.. but I also think that’s really sad, as real world harm will ensue.</p><p id="6050"><strong>Q. What kind of things are in the database?</strong></p><p id="d4cb">A. Everything a user has ever seen, ordered by application. Every bit of text the user has seen, with some minor exceptions (e.g. Microsoft Edge InPrivate mode is excluded, but Google Chrome isn’t).</p><p id="a99e">Every user interaction, e.g. minimizing a window. There is an API for user activity, and third party apps can plug in to enrich data and also view store data.</p><p id="eb16">It also stores all websites you visit, even if third party.</p><p id="1c1b"><strong>Q. If I delete an email/WhatsApp/Signal/Teams message, is it deleted from Recall?</strong></p><p id="9afd">A. No, it stays in the database indefinitely.</p><p id="b22e"><strong>Q. Are auto deleting messages in messaging apps removed from Recall?</strong></p><p id="cf49">A. No, they’re scraped by Recall and available.</p><p id="d120"><strong>Q. But if a hacker gains access to run code on your PC, it’s already game over!</strong></p><p id="f14c">A. If you run something like an info stealer, at present they will automatically scrape things like credential stores. At scale, hackers scrape rather than touch every victim (because there are so many) and resell them in online marketplaces.</p><p id="0110">Recall enables threat actors to automate scraping everything you’ve ever looked at within seconds.</p><p id="c716">During testing this with an off the shelf infostealer, I used Microsoft Defender for Endpoint — which detected the off the shelve infostealer — but by the time the automated remediation kicked in (which took over ten minutes) my Recall data was already long gone.</p><p id="87cd"><strong>Q. Does this enable mass data breaches of website?</strong></p><p id="b1f3">A. Yes. The next time you see a major data breach where customer data is clearly visible in the breach, you’re going to presume company who processes the data are at fault, right?</p><p id="4995">But if people have used a Windows device with Recall to access the service/app/whatever, hackers can see everything and assemble data dumps without the company who runs the service even being aware. The data is already consistently structured in the Recall database for attackers.</p><p id="45da">So prepare for AI powered super breaches. Currently credential marketplaces exist where you can buy stolen passwords — soon, you will be able to buy stolen customer data from insurance companies etc as the entire code to do this has been preinstalled and enabled on Windows by Microsoft.</p><p id="b557"><strong>Q. Did Microsoft mislead the BBC about the security of Copilot?</strong></p><p id="ec43">A. Yes.</p><p id="840e"><strong>Q. Have Microsoft mislead customers about the security of Copilot?</strong></p><p id="6211">A. Yes. For example, they describe it as an optional experience — but it is enabled by default and people can optionally disable it. That’s wordsmithing. Microsoft’s CEO referred to “screenshots” in an interview about the product, but the product itself only refers to “snapshots” — a snapshot is actually a screenshot. It’s again wordsmithing for whatever reason. Microsoft just need to be super clear about what this is, so customers can make an informed choice.</p><p id="00ab"><strong>Q. Recall only applies to 1 hardware device!</strong></p><p id="0f41">A. That isn’t true. There are currently 10 Copilot+ devices available to order right now from every major manufacturer:</p><p id="7ffc"><a href="https://www.microsoft.com/en-gb/windows/copilot-plus-pcs#shop" rel="noopener ugc nofollow" target="_blank">https://www.microsoft.com/en-gb/windows/copilot-plus-pcs#shop</a></p><p id="31ec">Additionally, Microsoft’s website say they are working on support for AMD and Intel chipsets. Recall is coming to Windows 11.</p><p id="dba8"><strong>Q. How do I disable Recall?</strong></p><p id="7ea7">A. In initial device setup for compatible Copilot+ devices out of the box, you have to click through options to disable Recall.</p><p id="f006">In enterprise, you have to turn off Recall as it is enabled by default:</p><figure></figure><p id="09a5">The Group Policy object for this has apparently been renamed (the MS documentation is incorrect):</p><figure></figure><p id="e6f1"><strong>Q. What are the privacy implications? Isn’t this against GDPR?</strong></p><p id="ccd0">A. I am not a privacy person or a legal person.</p><p id="b2ff">I will say that privacy people I’ve talked to are extremely worried about the impacts on households in domestic abuse situations and such.</p><p id="fac0">Obviously, from a corporate point of view organisations should absolutely consider the risk of processing customer data like this — Microsoft won’t be held responsible as the data processor, as it is done at the edge on your devices — <strong>you </strong>are responsible here.</p><p id="9d7d"><strong>Q. Are Microsoft a big, evil company?</strong></p><p id="645e">A. No, that’s insanely reductive. They’re super smart people, and sometimes super smart people make mistakes. What matters is what they do with knowledge of mistakes.</p><p id="babc"><strong>Q. Aren’t you the former employee who hates Microsoft?</strong></p><p id="bfaa">A. No. I just wrote a blog this month praising them:</p><p id="79a7"><strong>Q. Is this really as harmful as you think?</strong></p><p id="8c35">A. Go to your parents house, your grandparents house etc and look at their Windows PC, look at the installed software in the past year, and try to use the device. Run some antivirus scans. There’s no way this implementation doesn’t end in tears — there’s a reason there’s a trillion dollar security industry, and that most problems revolve around malware and endpoints.</p><p id="caca"><strong>Q. What should Microsoft do?</strong></p><p id="5d1c">A. In my opinion — they should recall Recall and rework it to be the feature it deserves to be, delivered at a later date. They also need to review the internal decision making that led to this situation, as this kind of thing should not happen.</p><p id="5af2">Earlier this month, Microsoft’s CEO emailed all their staff saying <a href="https://www.theverge.com/24148033/satya-nadella-microsoft-security-memo" rel="noopener ugc nofollow" target="_blank">“If you’re faced with the tradeoff between security and another priority, your answer is clear: <strong>Do security</strong>.”</a></p><p id="efff">We will find out if he was serious about that email.</p><p id="c7fb">They need to eat some humble pie and just take the hit now, or risk customer trust in their Copilot and security brands.</p><p id="4d50">Frankly, few if any customers are going to cry about Recall not being immediate available — but they are<em> </em>absolutely going to be seriously concerned if Microsoft’s reaction is to do nothing, ship the product, slightly tinker or try to wordsmith around the problem in the media.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Go: Sentinel errors and errors.Is() slow your code down by 3000% (163 pts)]]></title>
            <link>https://www.dolthub.com/blog/2024-05-31-benchmarking-go-error-handling/</link>
            <guid>40539700</guid>
            <pubDate>Fri, 31 May 2024 20:12:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.dolthub.com/blog/2024-05-31-benchmarking-go-error-handling/">https://www.dolthub.com/blog/2024-05-31-benchmarking-go-error-handling/</a>, See on <a href="https://news.ycombinator.com/item?id=40539700">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-cy="blog-post-text"><p>In this blog post, we benchmark different strategies for handling errors in Go and discuss their
relative performance and other tradeoffs. The difference in performance between different strategies
was very surprising to us, and we'd like to share the results.</p>
<p><em>The original publication of this blog overstated the difference in performance between error
handling strategies due to poorly configured benchmarks. The author regrets the error.</em></p>
<p><span>
      <a href="https://www.dolthub.com/blog/static/a63b33203afcd1fa51f21671f88a2990/73926/dolt_heart_go.png" target="_blank" rel="noopener">
    <span></span>
  <img alt="dolt loves go" title="" src="https://www.dolthub.com/blog/static/a63b33203afcd1fa51f21671f88a2990/73926/dolt_heart_go.png" srcset="https://www.dolthub.com/blog/static/a63b33203afcd1fa51f21671f88a2990/a48b3/dolt_heart_go.png 214w,
https://www.dolthub.com/blog/static/a63b33203afcd1fa51f21671f88a2990/73926/dolt_heart_go.png 415w" sizes="(max-width: 415px) 100vw, 415px" loading="lazy" decoding="async">
  </a>
    </span></p>
<p>In particular, we were shocked to learn that <strong>naively using the sentinel error pattern combined
with errors.Is() slows your code down by over 5x</strong>.</p>
<h2 id="methodology"><a href="#methodology" aria-label="methodology permalink"></a>Methodology</h2>
<p>I wrote several different fake object stores with similar methods to retrieve an object, with
different method signatures and different ways to represent the value being not found. Here's one of
them, which follows a common recommendation in the Go community to use a sentinel error to represent
the "value not found" condition.</p>
<div data-language="go"><pre><code><span>var</span> notFoundErr <span>=</span> errors<span>.</span><span>New</span><span>(</span><span>"not found"</span><span>)</span>

<span>type</span> resultType <span>struct</span> <span>{</span><span>}</span>

<span>type</span> errStore <span>struct</span> <span>{</span><span>}</span>

<span>//go:noinline</span>
<span>func</span> <span>(</span>b <span>*</span>errStore<span>)</span> <span>GetValue</span><span>(</span>found <span>bool</span><span>)</span> <span>(</span><span>*</span>resultType<span>,</span> <span>error</span><span>)</span> <span>{</span>
	<span>if</span> found <span>{</span>
		<span>return</span> <span>&amp;</span>resultType<span>{</span><span>}</span><span>,</span> <span>nil</span>
	<span>}</span> <span>else</span> <span>{</span>
		<span>return</span> <span>nil</span><span>,</span> notFoundErr
	<span>}</span>
<span>}</span></code></pre></div>
<p>Then I set up a benchmark that calls this function over and over, testing both the case where the
value is found and where it's not found, in the same way a client calling this method would need to
do.</p>
<div data-language="go"><pre><code><span>func</span> <span>BenchmarkNotFoundErrEqual</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&lt;</span> <span>0</span><span>)</span>
		<span>if</span> err <span>==</span> notFoundErr <span>{</span>
			<span>// nothing to do</span>
		<span>}</span> <span>else</span> <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span>
		<span>if</span> val <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span>

<span>func</span> <span>BenchmarkFoundErrEqual</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&gt;=</span> <span>0</span><span>)</span>
		<span>if</span> err <span>==</span> notFoundErr <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected found"</span><span>)</span>
		<span>}</span> <span>else</span> <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span>
		<span>if</span> val <span>==</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected not nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span></code></pre></div>
<p>Let's look at the results.</p>
<h2 id="benchmark-results"><a href="#benchmark-results" aria-label="benchmark results permalink"></a>Benchmark results</h2>
<p>Here's the raw benchmark output:</p>
<div data-language="sh"><pre><code>$ go <span>test</span> not_found_test.go  <span>-run</span><span>=</span><span>'.*'</span> <span>-bench</span><span>=</span>. <span>-count</span><span>=</span><span>10</span> <span>&gt;</span> benchresults.txt
$ benchstat benchresults.txt
goos: linux
goarch: amd64
cpu: AMD EPYC <span>7571</span>
                              │ benchresults.txt │
                              │      sec/op      │
NotFoundBool-16                      <span>3</span>.423n ± <span>0</span>%
NotFoundErrorsIs-16                  <span>19</span>.35n ± <span>0</span>%
NotFoundErrorsIsNilCheck-16          <span>19</span>.34n ± <span>0</span>%
NotFoundErrEqual-16                  <span>7</span>.366n ± <span>1</span>%
NotFoundErrEqualNilCheck-16          <span>8</span>.293n ± <span>0</span>%
NotFoundWrappedErr-16                <span>1.374</span>µ ± <span>0</span>%
NotFoundWrappedErrNilCheck-16        <span>1.375</span>µ ± <span>0</span>%
NotFoundWrappedBool-16               <span>11</span>.69n ± <span>0</span>%
NotFoundPanic-16                     <span>241</span>.5n ± <span>1</span>%
FoundBool-16                         <span>3</span>.050n ± <span>2</span>%
FoundErrorsIs-16                     <span>18</span>.04n ± <span>1</span>%
FoundErrorsIsNilCheck-16             <span>2</span>.939n ± <span>2</span>%
FoundErrEqual-16                     <span>3</span>.240n ± <span>2</span>%
FoundErrEqualNilCheck-16             <span>2</span>.994n ± <span>1</span>%
FoundWrappedErr-16                   <span>23</span>.77n ± <span>2</span>%
FoundWrappedErrNilCheck-16           <span>9</span>.877n ± <span>0</span>%
FoundWrappedBool-16                  <span>9</span>.082n ± <span>0</span>%
FoundPanic-16                        <span>12</span>.77n ± <span>0</span>%
geomean                              <span>17</span>.22n</code></pre></div>
<p>We'll look in depth at each of these strategies in a moment. The tables below list the error
handling strategies from fastest to slowest. We break the results down into the "found" and "not
found" scenarios, since their relative performance is different in each one.</p>
<p>First, here's the speed and relative performance of each strategy when the value is not found:</p>
<table>
<thead>
<tr>
<th>Strategy</th>
<th>Speed (less is better)</th>
<th>Multiple of fastest strategy</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bool</td>
<td>3.423 ns/op</td>
<td>1.00</td>
</tr>
<tr>
<td>ErrEqual</td>
<td>7.366 ns/op</td>
<td>2.15</td>
</tr>
<tr>
<td>ErrEqualNilCheck</td>
<td>8.293 ns/op</td>
<td>2.42</td>
</tr>
<tr>
<td>ErrorsIs</td>
<td>19.35 ns/op</td>
<td>5.65</td>
</tr>
<tr>
<td>ErrorsIsNilCheck</td>
<td>19.34 ns/op</td>
<td>5.65</td>
</tr>
<tr>
<td>Panic</td>
<td>241.5 ns/op</td>
<td>70.55</td>
</tr>
</tbody>
</table>
<p>And here's the same performance data when the value is found:</p>
<table>
<thead>
<tr>
<th>Strategy</th>
<th>Speed (less is better)</th>
<th>Multiple of fastest strategy</th>
</tr>
</thead>
<tbody>
<tr>
<td>ErrorsIsNilCheck</td>
<td>2.939 ns/op</td>
<td>1.00</td>
</tr>
<tr>
<td>ErrEqualNilCheck</td>
<td>2.994 ns/op</td>
<td>1.02</td>
</tr>
<tr>
<td>Bool</td>
<td>3.05 ns/op</td>
<td>1.04</td>
</tr>
<tr>
<td>ErrEqual</td>
<td>3.24 ns/op</td>
<td>1.10</td>
</tr>
<tr>
<td>Panic</td>
<td>12.77 ns/op</td>
<td>4.35</td>
</tr>
<tr>
<td>ErrorsIs</td>
<td>18.04 ns/op</td>
<td>6.14</td>
</tr>
</tbody>
</table>
<p>As you can see, it matters quite a lot for performance how you you design your APIs and handle
errors in Go.</p>
<p>Let's examine each strategy, going in order from fastest to slowest.</p>
<h2 id="bool-dont-return-an-error"><a href="#bool-dont-return-an-error" aria-label="bool dont return an error permalink"></a><code>Bool</code>: don't return an error</h2>
<p>The fastest way to handle a "not found" condition in Go is to not represent it as an error. This is
labled as the <code>Bool</code> strategy above. Here's how it's implemented:</p>
<div data-language="go"><pre><code><span>type</span> boolStore <span>struct</span> <span>{</span><span>}</span>

<span>//go:noinline</span>
<span>func</span> <span>(</span>b <span>*</span>boolStore<span>)</span> <span>GetValue</span><span>(</span>found <span>bool</span><span>)</span> <span>(</span><span>*</span>resultType<span>,</span> <span>bool</span><span>,</span> <span>error</span><span>)</span> <span>{</span>
	<span>if</span> found <span>{</span>
		<span>return</span> <span>&amp;</span>resultType<span>{</span><span>}</span><span>,</span> <span>true</span><span>,</span> <span>nil</span>
	<span>}</span> <span>else</span> <span>{</span>
		<span>return</span> <span>nil</span><span>,</span> <span>false</span><span>,</span> <span>nil</span>
	<span>}</span>
<span>}</span></code></pre></div>
<p>As you can see, this method does not return an error when the value isn't found, instead returning a
boolean <code>found</code> result. Here's how it's benchmarked:</p>
<div data-language="go"><pre><code><span>func</span> <span>BenchmarkNotFoundBool</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> bs boolStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> found<span>,</span> err <span>:=</span> bs<span>.</span><span>GetValue</span><span>(</span>i <span>&lt;</span> <span>0</span><span>)</span>
		<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span> <span>else</span> <span>if</span> found <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected not found"</span><span>)</span>
		<span>}</span>
		<span>if</span> val <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span>

<span>func</span> <span>BenchmarkFoundBool</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> bs boolStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> found<span>,</span> err <span>:=</span> bs<span>.</span><span>GetValue</span><span>(</span>i <span>&gt;=</span> <span>0</span><span>)</span>
		<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span> <span>else</span> <span>if</span> <span>!</span>found <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected found"</span><span>)</span>
		<span>}</span>
		<span>if</span> val <span>==</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected not nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span></code></pre></div>
<p>This strategy performs the best in both scenarios, where the value is found and where it's
not. Technically speaking this isn't even an "error handling" strategy, since no error is
returned. Rather, it's a baseline to serve as a point of comparison for other strategies that do
return errors.</p>
<h2 id="errequal-sentinel-errors-with-direct-equality-check"><a href="#errequal-sentinel-errors-with-direct-equality-check" aria-label="errequal sentinel errors with direct equality check permalink"></a><code>ErrEqual</code>: sentinel errors with direct equality check</h2>
<p>This strategy uses classic Go sentinel errors to represent the "value not found" condition. It looks
like this (duplicated from the "Methodology" section above).</p>
<div data-language="go"><pre><code><span>type</span> errStore <span>struct</span> <span>{</span><span>}</span>

<span>//go:noinline</span>
<span>func</span> <span>(</span>b <span>*</span>errStore<span>)</span> <span>GetValue</span><span>(</span>found <span>bool</span><span>)</span> <span>(</span><span>*</span>resultType<span>,</span> <span>error</span><span>)</span> <span>{</span>
	<span>if</span> found <span>{</span>
		<span>return</span> <span>&amp;</span>resultType<span>{</span><span>}</span><span>,</span> <span>nil</span>
	<span>}</span> <span>else</span> <span>{</span>
		<span>return</span> <span>nil</span><span>,</span> notFoundErr
	<span>}</span>
<span>}</span></code></pre></div>
<p>When we benchmark this strategy, we use direct <code>==</code> comparison with an <code>error</code> constant to detect
the not found condition.</p>
<div data-language="go"><pre><code><span>func</span> <span>BenchmarkNotFoundErrEqual</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&lt;</span> <span>0</span><span>)</span>
		<span>if</span> err <span>==</span> notFoundErr <span>{</span>
			<span>// nothing to do</span>
		<span>}</span> <span>else</span> <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span>
		<span>if</span> val <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span>

<span>func</span> <span>BenchmarkFoundErrEqual</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&gt;=</span> <span>0</span><span>)</span>
		<span>if</span> err <span>==</span> notFoundErr <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected found"</span><span>)</span>
		<span>}</span> <span>else</span> <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span>
		<span>if</span> val <span>==</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected not nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span></code></pre></div>
<p>In the "not found" scenario, this approach is about 2x slower than using boolean existence
checks. For the case where the value is found, it performs the same.</p>
<p>Note that checking for sentinel errors with <code>==</code> is no longer recommended for correctness reasons,
more details in following sections.</p>
<h2 id="errequalnilcheck-sentinel-errors-wrapped-with-a-err--nil-check"><a href="#errequalnilcheck-sentinel-errors-wrapped-with-a-err--nil-check" aria-label="errequalnilcheck sentinel errors wrapped with a err  nil check permalink"></a><code>ErrEqualNilCheck</code>: sentinel errors wrapped with a <code>err != nil</code> check</h2>
<p>There are two roughly equally idiomatic ways to check for a sentinel error in Go. The first is more
common in our experience, and is what's done in the <code>ErrEqual</code> strategy:</p>
<div data-language="go"><pre><code>		<span>if</span> err <span>==</span> notFoundErr <span>{</span>
			<span>// nothing to do</span>
		<span>}</span> <span>else</span> <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span></code></pre></div>
<p>So you begin by checking for all sentinel error values you want to handle, either in a switch or an
<code>if / else</code> chain, and then if the error isn't one of the handled types, pass the error up the
stack, panic, or otherwise handle it.</p>
<p>Alternately, you can perform the above logic conditionally after first checking if the error is
non-nil. This code is slightly longer and more indented, and is what the <code>ErrEqualNilCheck</code> does.</p>
<div data-language="go"><pre><code><span>func</span> <span>BenchmarkNotFoundErrEqualNilCheck</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&lt;</span> <span>0</span><span>)</span>
		<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			<span>if</span> err <span>==</span> notFoundErr <span>{</span>
				<span>// nothing to do</span>
			<span>}</span> <span>else</span> <span>{</span>
				b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
			<span>}</span>
		<span>}</span>
		<span>if</span> val <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span>

<span>func</span> <span>BenchmarkFoundErrEqualNilCheck</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&gt;=</span> <span>0</span><span>)</span>
		<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			<span>if</span> err <span>==</span> notFoundErr <span>{</span>
				b<span>.</span><span>Fatal</span><span>(</span><span>"expected found"</span><span>)</span>
			<span>}</span> <span>else</span> <span>{</span>
				b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
			<span>}</span>
		<span>}</span>
		<span>if</span> val <span>==</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected not nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span></code></pre></div>
<p>This stategy is slightly worse than the previous one in the "not found" case because of the added
cost of the <code>nil</code> check, weighing in at about 2.5x slower than boolean existence checks. But in the
(usually more common) case when the value is found, it's also performs just as well as the boolean
strategy.</p>
<h2 id="errorsis-more-robust-sentinel-error-detection"><a href="#errorsis-more-robust-sentinel-error-detection" aria-label="errorsis more robust sentinel error detection permalink"></a><code>ErrorsIs</code>: more robust sentinel error detection</h2>
<p>The original sentinel error pattern using <code>==</code> caused problems when other parts of a library wanted
to wrap the original error in their own error type to add additional information, which causes the
equality check to fail. Many linters will warn about using <code>==</code> for sentinel errors, and my
JetBrains IDE puts a yellow squiggly under it for the same reason.</p>
<p>Modern best practice is to instead use <a href="https://www.dolthub.com/blog/2024-05-31-benchmarking-go-error-handling/%7Bhttps://pkg.go.dev/errors#example-Is">errors.Is()</a> for
sentinel error checks, which correctly detects wrapped errors.</p>
<p>In our benchmarks, this strategy looks like this:</p>
<div data-language="go"><pre><code><span>func</span> <span>BenchmarkNotFoundErrorsIs</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&lt;</span> <span>0</span><span>)</span>
		<span>if</span> errors<span>.</span><span>Is</span><span>(</span>err<span>,</span> notFoundErr<span>)</span> <span>{</span>
			<span>// nothing to do</span>
		<span>}</span> <span>else</span> <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span>
		<span>if</span> val <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span>

<span>func</span> <span>BenchmarkFoundErrorsIs</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&gt;=</span> <span>0</span><span>)</span>
		<span>if</span> errors<span>.</span><span>Is</span><span>(</span>err<span>,</span> notFoundErr<span>)</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected found"</span><span>)</span>
		<span>}</span> <span>else</span> <span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
		<span>}</span>
		<span>if</span> val <span>==</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected not nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span></code></pre></div>
<p>Unfortunately, this strategy has bad performance, at 5.5x slower than the <code>Bool</code> strategy when the
value is not found, and 6x slower when it is.</p>
<h2 id="errorsisnilcheck-better-performance-on-the-happy-path"><a href="#errorsisnilcheck-better-performance-on-the-happy-path" aria-label="errorsisnilcheck better performance on the happy path permalink"></a>ErrorsIsNilCheck: better performance on the happy path</h2>
<p>Just as we saw with <code>ErrEqualNilCheck</code>, we can avoid a large performance penalty in the case that
the value is found by only calling <code>errors.Is()</code> after first determining the error is
non-nil. Here's the benchmark code:</p>
<div data-language="go"><pre><code><span>func</span> <span>BenchmarkNotFoundErrorsIsNilCheck</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&lt;</span> <span>0</span><span>)</span>
		<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			<span>if</span> errors<span>.</span><span>Is</span><span>(</span>err<span>,</span> notFoundErr<span>)</span> <span>{</span>
				<span>// nothing to do</span>
			<span>}</span> <span>else</span> <span>{</span>
				b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
			<span>}</span>
		<span>}</span>
		<span>if</span> val <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span>

<span>func</span> <span>BenchmarkFoundErrorsIsNilCheck</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es errStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		val<span>,</span> err <span>:=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&gt;=</span> <span>0</span><span>)</span>
		<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
			<span>if</span> errors<span>.</span><span>Is</span><span>(</span>err<span>,</span> notFoundErr<span>)</span> <span>{</span>
				b<span>.</span><span>Fatal</span><span>(</span><span>"expected found"</span><span>)</span>
			<span>}</span> <span>else</span> <span>{</span>
				b<span>.</span><span>Fatal</span><span>(</span>err<span>)</span>
			<span>}</span>
		<span>}</span>
		<span>if</span> val <span>==</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected not nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span></code></pre></div>
<p>Just as with <code>ErrEqualNilCheck</code>, this strategy does very slightly worse for the not found scenario
at about 5.5x slower than <code>Bool</code>, but is just as fast as <code>Bool</code> when the value is found.</p>
<h2 id="panic-the-slowest-error-handling-technique"><a href="#panic-the-slowest-error-handling-technique" aria-label="panic the slowest error handling technique permalink"></a>Panic: the slowest error handling technique</h2>
<p>Usually errors in Go are returned as values, but there is also another technique: you can <code>panic</code>
instead, then <code>recover</code> that panic at a higher layer of the stack. Most people don't recommend doing
this as an error handling technique, and we don't either. But there are some limited cases where it
<a href="https://www.dolthub.com/blog/2023-04-14-keep-calm-and-panic/">can be more performant than returning
errors</a>. That's not the case for this
benchmark though. Panic performs the worst of any strategy. Here's what it looks like:</p>
<div data-language="go"><pre><code><span>type</span> panicStore <span>struct</span><span>{</span><span>}</span>

<span>//go:noinline</span>
<span>func</span> <span>(</span>b <span>*</span>panicStore<span>)</span> <span>GetValue</span><span>(</span>found <span>bool</span><span>)</span> <span>*</span>resultType <span>{</span>
	<span>if</span> found <span>{</span>
		<span>return</span> <span>&amp;</span>resultType<span>{</span><span>}</span>
	<span>}</span> <span>else</span> <span>{</span>
		<span>panic</span><span>(</span>notFoundErr<span>)</span>
	<span>}</span>
<span>}</span>

<span>func</span> <span>BenchmarkNotFoundPanic</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es panicStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		<span>var</span> val <span>*</span>resultType 
		<span>func</span><span>(</span><span>)</span> <span>{</span>
			<span>defer</span> <span>func</span><span>(</span><span>)</span> <span>{</span>
				<span>// recover panic</span>
				err <span>:=</span> <span>recover</span><span>(</span><span>)</span>
				<span>if</span> err <span>==</span> <span>nil</span> <span>{</span>
					b<span>.</span><span>Fatal</span><span>(</span><span>"expected panic"</span><span>)</span>
				<span>}</span>
			<span>}</span><span>(</span><span>)</span>
			val <span>=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&lt;</span> <span>0</span><span>)</span>
		<span>}</span><span>(</span><span>)</span>
		<span>if</span> val <span>!=</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span>

<span>func</span> <span>BenchmarkFoundPanic</span><span>(</span>b <span>*</span>testing<span>.</span>B<span>)</span> <span>{</span>
	<span>var</span> es panicStore
	<span>for</span> i <span>:=</span> <span>0</span><span>;</span> i <span>&lt;</span> b<span>.</span>N<span>;</span> i<span>++</span> <span>{</span>
		<span>var</span> val <span>*</span>resultType
		<span>func</span><span>(</span><span>)</span> <span>{</span>
			<span>defer</span> <span>func</span><span>(</span><span>)</span> <span>{</span>
				<span>// recover panic</span>
				err <span>:=</span> <span>recover</span><span>(</span><span>)</span>
				<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
					b<span>.</span><span>Fatal</span><span>(</span><span>"unexpected panic"</span><span>)</span>
				<span>}</span>
			<span>}</span><span>(</span><span>)</span>
			val <span>=</span> es<span>.</span><span>GetValue</span><span>(</span>i <span>&gt;=</span> <span>0</span><span>)</span>
		<span>}</span><span>(</span><span>)</span>
		<span>if</span> val <span>==</span> <span>nil</span> <span>{</span>
			b<span>.</span><span>Fatal</span><span>(</span><span>"expected not nil"</span><span>)</span>
		<span>}</span>
	<span>}</span>
<span>}</span></code></pre></div>
<p>This code is 240x slower than boolean return results in the not found case, and 13x slower in the
found case. So in addition to being risky (can halt your program if you forget to recover), panics
are generally slower than any other error handling strategy.</p>
<h2 id="what-about-error-wrapping"><a href="#what-about-error-wrapping" aria-label="what about error wrapping permalink"></a>What about error wrapping?</h2>
<p>These are microbenchmarks specifically engineered to zero in on the differences between the error
handling strategies. But real application code looks very different. One of the biggest differences
is that errors are typically passed through several layers of the stack in between other pieces of
business logic. I was curious to know how this difference impacted the benchmarks. Specifically, I
wanted to know how the practice of error wrapping impacted the performance of sentinel errors, and
how it related to the Boolean return strategy.</p>
<p>So I wrote two additional implementations of object stores that simulate an error deeper in the
stack, getting wrapped at every layer. Here's what it looks like:</p>
<div data-language="go"><pre><code><span>type</span> wrappedErrStore <span>struct</span><span>{</span><span>}</span>

<span>//go:noinline</span>
<span>func</span> <span>(</span>b <span>*</span>wrappedErrStore<span>)</span> <span>GetValue</span><span>(</span>found <span>bool</span><span>)</span> <span>(</span><span>*</span>resultType<span>,</span> <span>error</span><span>)</span> <span>{</span>
	result<span>,</span> err <span>:=</span> b<span>.</span><span>queryValueStore</span><span>(</span>found<span>)</span>
	<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
		<span>return</span> <span>nil</span><span>,</span> fmt<span>.</span><span>Errorf</span><span>(</span><span>"GetValue couldn't get a value: %w"</span><span>,</span> err<span>)</span>
	<span>}</span>
	<span>return</span> result<span>,</span> <span>nil</span>
<span>}</span>

<span>//go:noinline</span>
<span>func</span> <span>(</span>b <span>*</span>wrappedErrStore<span>)</span> <span>queryValueStore</span><span>(</span>found <span>bool</span><span>)</span> <span>(</span><span>*</span>resultType<span>,</span> <span>error</span><span>)</span> <span>{</span>
	result<span>,</span> err <span>:=</span> b<span>.</span><span>queryDisk</span><span>(</span>found<span>)</span>
	<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
		<span>return</span> <span>nil</span><span>,</span> fmt<span>.</span><span>Errorf</span><span>(</span><span>"queryValueStore couldn't get a value: %w"</span><span>,</span> err<span>)</span>
	<span>}</span>
	<span>return</span> result<span>,</span> <span>nil</span>
<span>}</span>

<span>//go:noinline</span>
<span>func</span> <span>(</span>b <span>*</span>wrappedErrStore<span>)</span> <span>queryDisk</span><span>(</span>found <span>bool</span><span>)</span> <span>(</span><span>*</span>resultType<span>,</span> <span>error</span><span>)</span> <span>{</span>
	result<span>,</span> err <span>:=</span> b<span>.</span><span>readValueFromDiskFake</span><span>(</span>found<span>)</span>
	<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
		<span>return</span> <span>nil</span><span>,</span> fmt<span>.</span><span>Errorf</span><span>(</span><span>"queryDisk couldn't get a value: %w"</span><span>,</span> err<span>)</span>
	<span>}</span>
	<span>return</span> result<span>,</span> <span>nil</span>
<span>}</span>

<span>//go:noinline</span>
<span>func</span> <span>(</span>b <span>*</span>wrappedErrStore<span>)</span> <span>readValueFromDiskFake</span><span>(</span>found <span>bool</span><span>)</span> <span>(</span><span>*</span>resultType<span>,</span> <span>error</span><span>)</span> <span>{</span>
	<span>if</span> found <span>{</span>
		<span>return</span> <span>&amp;</span>resultType<span>{</span><span>}</span><span>,</span> <span>nil</span>
	<span>}</span> <span>else</span> <span>{</span>
		<span>return</span> <span>nil</span><span>,</span> notFoundErr
	<span>}</span>
<span>}</span></code></pre></div>
<p>I also have another identical implementation that returns a boolean value to indicate presence or
absence of the value, rather than <code>notFoundErr</code> (omitted for brevity), symmetrical to the <code>Bool</code>
strategy. When I run the same benchmarks on these two implementations, I get the following results.</p>
<p>When the value is not found:</p>
<table>
<thead>
<tr>
<th>Strategy</th>
<th>Speed (less is better)</th>
<th>Multiple of fastest strategy</th>
</tr>
</thead>
<tbody>
<tr>
<td>WrappedBool</td>
<td>11.69 ns/op</td>
<td>1.00</td>
</tr>
<tr>
<td>WrappedErr</td>
<td>1374 ns/op</td>
<td>117.54</td>
</tr>
<tr>
<td>WrappedErrNilCheck</td>
<td>1375 ns/op</td>
<td>117.62</td>
</tr>
</tbody>
</table>
<p>When the value is found:</p>
<table>
<thead>
<tr>
<th>Strategy</th>
<th>Speed (less is better)</th>
<th>Multiple of fastest strategy</th>
</tr>
</thead>
<tbody>
<tr>
<td>WrappedBool</td>
<td>9.082 ns/op</td>
<td>1.00</td>
</tr>
<tr>
<td>WrappedErrNilCheck</td>
<td>9.877 ns/op</td>
<td>1.09</td>
</tr>
<tr>
<td>WrappedErr</td>
<td>23.77 ns/op</td>
<td>2.62</td>
</tr>
</tbody>
</table>
<p>As you can see, wrapped errors severely degrade the performance of tihs strategy, making sentinel
error checks 120x slower than the boolean check when the error is non-nil. That's bad! Much of the
difference in time on this benchmark doesn't come directly from errors.Is() (although it is slower
for wrapped errors, that's to be expected). Instead, this difference primarily reflects the fact
that creating the wrapped errors is itself expensive. But this is a fair comparison, since in
practice your code must also wrap errors to use this strategy.</p>
<p>On the other hand, the difference in strategies is partially smeared by the introduction of more
stack layers in the case the object exists, to the point that the nil-guarded <code>errors.Is()</code> check is
only 10% slower than boolean checks.</p>
<h2 id="takeaways-and-discussion"><a href="#takeaways-and-discussion" aria-label="takeaways and discussion permalink"></a>Takeaways and discussion</h2>
<p>If you want to reproduce this result or variations of it yourself, you can find the full source
<a href="https://gist.github.com/zachmu/00d0410431f9d8d314155361836eecdd">here</a>.</p>
<p>So what's the takeaway from all this? There are four main points in my view:</p>
<ol>
<li><code>errors.Is()</code> is expensive. If you use it, check the error is non-nil first to avoid a pretty big
performance penalty on the happy path.</li>
<li>Using <code>==</code> to check for sentinel errors is likewise expensive, but less so. If you do this, check
the error is non-nil first to make it cheaper on the happy path. But because of error wrapping,
you probably shouldn't do this at all.</li>
<li>Error wrapping makes using sentinel errors much more expensive, including making <code>errors.Is()</code>
more expensive when the error is non-nil.</li>
<li>Using sentinel errors is as performant as other techniques on the happy path if you take the
above precautions, but unavoidably much more expensive on the error path.</li>
</ol>
<p>So the main takeaway is really that sentinel errors can be expensive, and you should consider this
when deciding whether to use them.</p>
<p>The standard caveat for performance-based arguments applies here: measure what difference it
actually makes in your case, and don't sweat stuff that isn't on the hot path most of the time. We
are talking about nanoseconds here, and it takes a lot of those to add up to something
noticeable. If sentinel errors are measurably slow for you in practice, it's probably because the
ones you're using are some combination of commonly triggered and expensive to construct. YMMV. That
said: we have found expensive-to-construct, commonly triggered sentinel errors when profiling our
database, and we changed the code to remove them, squeezing several percentage points improvement in
the process.</p>
<p>But there are also non-performance reasons you might want to avoid sentinel errors, which are more
philosophical or aesthetic in nature.</p>
<p>Earlier this month I kicked the hornet's nest by suggesting that <a href="https://www.dolthub.com/blog/2024-05-10-ok-considered-harmful/">you shouldn't name boolean map
check variables <code>ok</code></a>. It got picked
up a few places in the Golang world and generated a lot of discussion on Reddit and elsewhere, which
I had expected. But I hadn't expected that so much of the conversation would focus on an almost
tangential point I made about API design, specifically about an API returning a <code>NotFound</code> sentinel
error:</p>
<blockquote>
<p>Separating out an existence check from an error condition is a good thing, actually. You never
want to force clients to check for a particular error type in business logic.</p>
<p>...</p>
<p>An error should by default be considered non-recoverable, to be returned when something goes very
wrong. Semantically, a table not existing isn't really an error, it's something you expect to
happen all the time. An interface that returns an error in the course of normal operation forces
clients to understand a lot of details to use the interface correctly (looking at you,
<code>io.EOF</code>). And errors can be expensive to construct and examine, so you don't want them
constructed or interpreted on your hot path.</p>
</blockquote>
<p>I had thought this was a commonly understood nugget of best practice wisdom, but this opinion got <em>a
lot</em> of pushback. People said some very hurtful, arguably accurate things about my character. Here's
one of the more thoughtful examples from <a href="https://lobste.rs/s/lnav33/ok_considered_harmful">the discussion on
Lobste.rs</a>:</p>
<p><span>
      <a href="https://www.dolthub.com/blog/static/ebb0d9337d67e663f77f6c1c3be92bbf/5a791/lobsters-errors.png" target="_blank" rel="noopener">
    <span></span>
  <img alt="lobste.rs discussion" title="" src="https://www.dolthub.com/blog/static/ebb0d9337d67e663f77f6c1c3be92bbf/ad12c/lobsters-errors.png" srcset="https://www.dolthub.com/blog/static/ebb0d9337d67e663f77f6c1c3be92bbf/a48b3/lobsters-errors.png 214w,
https://www.dolthub.com/blog/static/ebb0d9337d67e663f77f6c1c3be92bbf/47730/lobsters-errors.png 428w,
https://www.dolthub.com/blog/static/ebb0d9337d67e663f77f6c1c3be92bbf/ad12c/lobsters-errors.png 856w,
https://www.dolthub.com/blog/static/ebb0d9337d67e663f77f6c1c3be92bbf/5a791/lobsters-errors.png 1248w" sizes="(max-width: 856px) 100vw, 856px" loading="lazy" decoding="async">
  </a>
    </span></p>
<p>Now, obviously I disagree. And I think these numbers pretty clearly refute the classical view of
sentinel error handling in Go, summarized by the comment above:</p>
<blockquote>
<p>Errors are normal outcomes of any operation. They aren’t special and aren’t any more or less
expensive to deal with than any other type. They are, classically, just values.</p>
</blockquote>
<p>The problem is that sentinel errors, as typically and idiomatically used, in fact <em>are</em> special, and
<em>are</em> more expensive to deal with than other values. My suggestion to use boolean values outperforms
them by <em>a lot</em>, 6x in fairly common idiomatic usage and potentially much more if they're expensive
to construct.</p>
<p>And performance considerations aside, sentinel errors have a lot of other issues.</p>
<p>I'm not the first person to note this. Here's <a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully">Dave Cheney back in 2016 on this
topic</a>:</p>
<blockquote>
<p>My advice is to avoid using sentinel error values in the code you write. There are a few cases
where they are used in the standard library, but this is not a pattern that you should emulate.</p>
</blockquote>
<p>Instead, he recommends never inspecting the details of an error:</p>
<blockquote>
<p>Now we come to the third category of error handling. In my opinion this is the most flexible error
handling strategy as it requires the least coupling between your code and caller.</p>
<p>I call this style opaque error handling, because while you know an error occurred, you don’t have
the ability to see inside the error. As the caller, all you know about the result of the operation
is that it worked, or it didn’t.</p>
<p>This is all there is to opaque error handling – just return the error without assuming anything
about its contents.</p>
</blockquote>
<p>Dave didn't invent this advice. Going back further, lots of luminaries and philosophers in the field
have given the same advice in other contexts and for other languages: don't use errors for control
flow. I'm old enough to have seen Josh Bloch in person at a Java conference, where he was something
of a celebrity. He gave this advice on error handling in <a href="https://www.amazon.com/Effective-Java-Joshua-Bloch/dp/0134685997/">Effective
Java</a> way back in 2001:</p>
<blockquote>
<p>Exceptions are, as their name implies, to be used only for exceptional conditions; they should
never be used for ordinary control flow.</p>
<p>...</p>
<p>This principle also has implications for API design. A well-designed API must not force its
clients to use exceptions for ordinary control flow. A class with a “state-dependent” method that
can be invoked only under certain unpredictable conditions should generally have a separate
“state-testing” method indicating whether it is appropriate to invoke the state-dependent method.</p>
</blockquote>
<p>Now obviously Exceptions in Java are not the same as errors in Go. But just as obviously, they serve
the same purpose. Functionally and semantically, there is not much difference between these two code
snippets:</p>
<div data-language="java"><pre><code><span>try</span> <span>{</span>
    val <span>=</span> store<span>.</span><span>getValue</span><span>(</span><span>)</span><span>;</span>
<span>}</span> <span>catch</span> <span>(</span><span>NotFoundException</span> e<span>)</span> <span>{</span>
    <span>// handle not found</span>
<span>}</span></code></pre></div>
<div data-language="go"><pre><code>val<span>,</span> err <span>:=</span> store<span>.</span><span>GetValue</span><span>(</span><span>)</span>
<span>if</span> errors<span>.</span><span>Is</span><span>(</span>err<span>,</span> notFoundErr<span>)</span> <span>{</span>
    <span>// handle not found</span>
<span>}</span></code></pre></div>
<p>They're both workable and idiomatic. But they also both have serious drawbacks, for different but
related reasons. And they're both improved by changing the API to eliminate the need for the client
to interpret the not found case as an error during normal operation. Here the two languages diverge:
because Java lacks multiple return values, it's not ergonomic to add additional metadata like a
<code>found</code> boolean into the return result in most cases, so you tend to do something like this instead:</p>
<div data-language="java"><pre><code><span>if</span> <span>(</span>store<span>.</span><span>hasValue</span><span>(</span><span>)</span><span>)</span> <span>{</span>
    val <span>=</span> store<span>.</span><span>getValue</span><span>(</span><span>)</span><span>;</span>
<span>}</span></code></pre></div>
<p>Bloch anticipates that people might be tempted to use exceptions for control flow for performance
reasons:</p>
<blockquote>
<p>More generally, use standard, easily recognizable idioms in preference to overly clever techniques
that purport to offer better performance.</p>
</blockquote>
<p>After all, it really is more expensive to call two methods (<code>Has()</code>, <code>Get()</code>) than one (<code>Get()</code>),
even with caching. But because Go does have multiple return values, you don't have to make this
tradeoff the way you do in Java. You can just return more information and save yourself the extra
method call, while not forcing clients to examine the error value.</p>
<div data-language="go"><pre><code>val<span>,</span> found<span>,</span> err <span>:=</span> store<span>.</span><span>GetValue</span><span>(</span><span>)</span>
<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
    <span>return</span> err <span>// opaque error handling</span>
<span>}</span>
<span>if</span> <span>!</span>found <span>{</span>
    <span>// handle not found</span>
<span>}</span></code></pre></div>
<p>Some people are bothered by the fact that a method named <code>GetValue()</code> may not succeed in getting a
value. If that sounds like you, then name it <code>MaybeGetValue()</code> instead. Other people are bothered by
the code overhead of a <code>found</code> boolean in the return. If that sounds like you, you might be able to
get away with using a <code>nil</code> return value instead (as long as <code>nil</code> isn't a valid object in your
API). Either way, understand that inspecting errors for business logic can come at a substantial
performance cost.</p>
<h2 id="conclusion"><a href="#conclusion" aria-label="conclusion permalink"></a>Conclusion</h2>
<p>We're building <a href="https://doltdb.com/">Dolt</a>, the world's first version-controlled SQL database. We
have been writing it for over five years now, and our codebase has quite a few sentinel errors, many
of which we inherited from other libraries, but some of which we wrote ourselves. These days we
avoid sentinel errors and generally treat all errors as opaque. We also wrap errors very sparingly,
prefering to <a href="https://www.dolthub.com/blog/2023-11-10-stack-traces-in-go/">use stack traces instead</a>
where appropriate.</p>
<p>Have questions or comments about Go error handling? Or maybe you are curious about the world's first
version-controlled SQL database? <a href="https://discord.gg/gqr7K4VNKe">Join us on Discord</a> to talk to our
engineering team and other Dolt users.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Heroku Postgres is now based on AWS Aurora (198 pts)]]></title>
            <link>https://blog.heroku.com/heroku-postgres-essential-launch</link>
            <guid>40539172</guid>
            <pubDate>Fri, 31 May 2024 19:17:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.heroku.com/heroku-postgres-essential-launch">https://blog.heroku.com/heroku-postgres-essential-launch</a>, See on <a href="https://news.ycombinator.com/item?id=40539172">Hacker News</a></p>
<div id="readability-page-1" class="page"><article itemid="https://blog.heroku.com/heroku-postgres-essential-launch" itemscope="" itemtype="https://schema.org/BlogPosting">
        

        

        <meta itemprop="mainEntityOfPage" content="https://blog.heroku.com/heroku-postgres-essential-launch">

        

          <div>
            <div>
              <p><a href="https://blog.heroku.com/authors/jonathan-k-brown"><img width="100" height="100" alt="Jonathan Brown" data-hires="https://gravatar.com/avatar/7cc63c121d018644cbd54bec48fde00d?d=https%3A%2F%2Fblog-assets3.herokucdn.com%2Fassets%2Favatar-default-guest-ed7ff852c822436eccaf1dee3f291243975027aaf2752dcff8fbedd428ee5b9f.png&amp;s=200" src="https://gravatar.com/avatar/7cc63c121d018644cbd54bec48fde00d?d=https%3A%2F%2Fblog-assets3.herokucdn.com%2Fassets%2Favatar-default-guest-ed7ff852c822436eccaf1dee3f291243975027aaf2752dcff8fbedd428ee5b9f.png&amp;s=100"></a></p>
              <p>
              <span>Last Updated: <time itemprop="dateModified" datetime="2024-05-21T17:05:04Z">May 21, 2024</time></span>
            </p></div>
            <hr>
          </div>


        <section itemprop="articleBody">
          <p>We’re thrilled to <a href="https://devcenter.heroku.com/changelog-items/2877">launch our new Heroku Postgres Essential database plans</a>. These plans have <code>pgvector</code> support, no row count limits, and come with a 32 GB option. We deliver exceptional transactional query performance with Amazon Aurora as the backing infrastructure. One of our beta customers said:</p>

<blockquote>
<p><strong>“The difference was noticeable right from the start. Heroku Postgres running on Aurora delivered a boost in speed, allowing us to query and process our data faster.”</strong></p>
</blockquote>

<p>Our Heroku Postgres Essential plans are the quickest, easiest, and most economical way to integrate a SQL database with your Heroku application. You can use these fully managed databases for a wide range of applications, such as small-scale production apps, research and development, <a href="https://www.heroku.com/students">educational purposes</a>, and prototyping. These plans offer full PostgreSQL compatibility, allowing you to use existing skills and tools effortlessly.</p>

<p><img src="https://heroku-blog-files.s3.amazonaws.com/posts/1716240158-Heroku%20Postgres%20%2B%20Amazon%20Aurora_Image%201.png" alt="Heroku Postgres Partnership With Amazon Aurora"></p>

<p>Compared to the previous generation of Mini and Basic database plans, the Essential plans on the new infrastructure provides up to three times the query throughput performance and additional improvements such as removing the historic row count limit. The table highlights what each of the new plans include in more detail.</p>

<table><thead>
<tr>
<th>Product</th>
<th>Storage</th>
<th>Max Connection</th>
<th>Max Row Count</th>
<th>Max Table Count</th>
<th>Postgres Versions</th>
<th>Monthly Pricing</th>
</tr>
</thead><tbody>
<tr>
<td>Essential-0</td>
<td>1 GB</td>
<td>20</td>
<td>No limit</td>
<td>4,000</td>
<td>14, 15, 16</td>
<td>$5</td>
</tr>
<tr>
<td>Essential-1</td>
<td>10 GB</td>
<td>20</td>
<td>No limit</td>
<td>4,000</td>
<td>14, 15, 16</td>
<td>$9</td>
</tr>
<tr>
<td>Essential-2</td>
<td>32 GB</td>
<td>40</td>
<td>No limit</td>
<td>4,000</td>
<td>14, 15, 16</td>
<td>$20</td>
</tr>
</tbody></table>
<h2>
  <a name="our-commitment-to-the-developer-experience" href="#our-commitment-to-the-developer-experience">Our Commitment to the Developer Experience</a>
</h2>

<p>At Heroku, we deliver a world-class developer experience that’s reflected in our new Essential database plans. Starting at just $5 per month, we provide a fully managed database service built on Amazon Aurora. With these plans, developers are assured they’re using the latest technology from AWS and they can focus on what’s most important—innovating and building applications—without the hassle of database management. </p>

<p>We enabled <a href="https://devcenter.heroku.com/articles/upgrading-heroku-postgres-databases#upgrading-with-pg-upgrade"><code>pg:upgrade</code></a> for easier upgrades to major versions and removed the row count limit for increased flexibility and scalability for your projects. We also included support for the <a href="https://blog.heroku.com/pgvector-launch"><code>pgvector</code> extension</a>, bringing vector similarity search to the entire suite of Heroku Postgres plans. <code>pgvector</code> enables exciting possibilities in AI and natural language processing applications across all of your development environments.</p>

<p>You can create a Heroku Postgres Essential database with:</p>

<pre><code>$ heroku addons:create heroku-postgresql:essential-0 -a example-app
</code></pre>
<h2>
  <a name="migrating-mini-and-basic-postgres-plans" href="#migrating-mini-and-basic-postgres-plans">Migrating Mini and Basic Postgres Plans</a>
</h2>

<p>If you already have Mini or Basic database plans, we’ll <a href="https://devcenter.heroku.com/articles/heroku-postgres-plans#mini-and-basic-deprecation-details">automatically migrate</a> them to the new Essential plans. We’re migrating Mini plans to Essential-0 and Basic plans to Essential-1. We’re making this process as painless as possible with minimal downtime for most databases. Our automatic migration process begins on May 29, 2024, when the Mini and Basic plans reach end-of-life and are succeeded by the new Essential plans. See our <a href="https://devcenter.heroku.com/articles/postgres-essential-tier">documentation for migration details</a>. </p>

<p>You can also proactively migrate your Mini or Basic plan to any of the new Essential plans, including the Essential-2 plan, using <code>addons:upgrade</code>:</p>

<pre><code>$ heroku addons:upgrade DATABASE heroku-postgresql:essential-0 -a example-app
</code></pre>
<h2>
  <a name="exploring-the-use-cases-of-the-essential-plans" href="#exploring-the-use-cases-of-the-essential-plans">Exploring the Use Cases of the Essential Plans</a>
</h2>

<p>With the enhancements of removing row limits, adding <code>pgvector</code> support, and more, Heroku Postgres Essential databases are a great choice for customers of any size with these use cases.</p>

<ul>
<li><strong>Development and Testing</strong>: Ideal for developers looking for a cost-effective, fully managed Postgres database. You can develop and test your applications in an environment that closely mimics production, ensuring everything runs smoothly before going live.</li>
<li><strong>Prototype Projects</strong>: In the prototyping phase, the ability to adapt quickly based on user feedback or test results is crucial. With Essential plans, you get the flexibility and affordability needed to iterate fast and effectively during this critical stage.</li>
<li><strong>Educational Projects and Tutorials</strong>: Ideal for educational setups that require access to live cloud database environments. They're perfect for hands-on learning, from running SQL queries to exploring cloud application management and operations, without managing the complex infrastructure.</li>
<li><strong>Low Traffic Web Apps</strong>: Ideal for experimental or low traffic applications such as small blog sites or forums. Essential plans provide the necessary reliability and performance, including daily backups and scalability options as your user engagement grows. </li>
<li><strong>Startups</strong>: The Essential plans offer a fully managed and scalable database solution, important for startup businesses to grow without initial heavy investments. It can help speed up time-to-market and reach customers faster.</li>
<li><strong>Salesforce Integration Trial</strong>: The best method to synchronize Salesforce data and Heroku Postgres is with <a href="https://www.heroku.com/connect">Heroku Connect</a>. The <a href="https://devcenter.heroku.com/articles/heroku-connect#available-plans"><code>demo</code> plan</a> works with Essential database plans. Although the demo plan isn’t suitable for production use cases, it provides a way to explore how Heroku Connect can amplify your Salesforce investment.</li>
<li><strong>Incorporating pgvector</strong>: Essential database plans support <a href="https://devcenter.heroku.com/articles/pgvector-heroku-postgres"><code>pgvector</code></a>, an open-source extension for Postgres designed for efficient vector search capabilities. This feature is invaluable for applications requiring high-performance similarity searches, such as recommendation systems, content discovery platforms, and image retrieval systems. Use <code>pgvector</code> on Essential plans to build advanced search functionalities such as AI-enabled applications and Retrieval Augmented Generation (RAG).</li>
</ul>
<h2>
  <a name="looking-forward" href="#looking-forward">Looking Forward</a>
</h2>

<p>As <a href="https://youtu.be/fZLcv7rwj7Y?si=13K95oX2oEVQ_T9p&amp;t=1945">announced</a> at re:Invent 2023, we’re collaborating with the Amazon Aurora team on the next-generation Heroku Postgres infrastructure. This partnership combines the simplicity and user experience of Heroku with the robust performance, scalability, and flexibility of Amazon Aurora. The launch of Essential database plans marks the beginning of a broader rollout that will soon include a fleet of single-tenant databases.</p>

<p>Our new Heroku Postgres plans will decouple storage and compute, allowing you to scale storage up to 128 TB. They’ll also add more database connections and more Postgres extensions, offer near-zero-downtime maintenance and upgrades, and much more. The future architecture will ensure fast and consistent response times by distributing data across multiple availability zones with robust data replication and continuous backups. Additionally, the Shield option will continue to meet compliance needs with regulations like HIPAA and PCI, ensuring secure data management.</p>
<h2>
  <a name="conclusion" href="#conclusion">Conclusion</a>
</h2>

<p>Our Heroku Postgres databases built on Amazon Aurora represent a powerful solution for customers seeking to enhance their database capabilities with a blend of performance, reliability, cost-efficiency, and Heroku’s simplicity. Whether you're scaling a high web traffic application or managing large-scale batch processes, <a href="https://www.salesforce.com/news/press-releases/2023/11/27/aws-data-ai-strategic-partnership-expansion/?_gl=1*eynx4n*_ga*MTcwNTczMTI0Ny4xNjY5NzUzMDAx*_ga_62RHPFWB9M*MTcxNTk3Njg0Ni40MzkuMC4xNzE1OTc2ODQ2LjAuMC4w">our partnership with AWS</a> accelerates the delivery of Postgres innovations to our customers. Eager to be part of this journey? Join the <a href="https://docs.google.com/forms/d/e/1FAIpQLSeDKfTK-mH2uW5b-3T3RS-vNrrnRVsKrx53BvhqYo8uSHH3yA/viewform">waitlist for the single-tenant database pilot program</a>.</p>

<p>We want to extend our gratitude to the community for the feedback and helping us build products like <a href="https://github.com/heroku/roadmap/issues/292">Essential Plans</a>. Stay connected and share your thoughts on our <a href="https://github.com/heroku/roadmap">GitHub roadmap page</a>. If you have questions or require assistance, our dedicated <a href="https://help.heroku.com/">Support team</a> is available to assist you on your journey into this exciting new frontier. </p>

        </section>

        <section>
          <p>Originally published: May 21, 2024</p>
        </section>

        

      </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[De-googling, so far (180 pts)]]></title>
            <link>https://blog.nradk.com/posts/degoogling/</link>
            <guid>40539031</guid>
            <pubDate>Fri, 31 May 2024 19:02:53 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.nradk.com/posts/degoogling/">https://blog.nradk.com/posts/degoogling/</a>, See on <a href="https://news.ycombinator.com/item?id=40539031">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content"><article><p>Over the past few years, I have tried to gradually reduce or eliminate my use of
Google products and services. It has been difficult to ditch Google’s products
in some categories, and in some others, it has been nigh impossible. Here, I
list the services I have tried to find alternatives for, discuss the ease (or
lack thereof) of finding a satisfactory alternative, and rant about my
experience so far.</p><p>Before we begin, I feel like I should put a few important caveats out of the
way. First, these are notes from personal experience, and are not a
comprehensive review of alternatives to Google’s offerings. If you are looking
for comparisons of alternatives, they are not here. Second, using some of the
alternatives I mention requires having a self-hosted server setup of some sort,
which for many people will be entirely out of the question.</p><h2 id="search">Search</h2><p>I have used DuckDuckGo as my primary search engine for the past six or seven
years, and although it has its flaws, it has been adequate. The problem with
DuckDuckGo is that in many cases, it doesn’t seem to show a good understanding
of the search query, for lack of a better way to put it. It takes my search
terms too literally. It’s saving grace, though, is the ‘bang’ feature: if you
decide that the results are not what you hoped for and you wish to go to Google
instead, just add a <code>!g</code> in your search. This works not just for Google but for
a long list of websites, and I find this feature incredibly handy when I know
beforehand that I want to search a particular website, like Wikipedia, YouTube
or Amazon.</p><p>After reading constant praise for it on HackerNews, I tried
<a href="https://kagi.com/">Kagi</a> for couple of months last year. Kagi has a lot of
strengths. Just out of the box, it’s results are markedly better than DuckDuckGo
and perhaps even Google. Their feature to up-rank or down-rank websites of your
choosing is an absolute lifesaver. Not having to wade through SEO’d junk to find
what I need prevents a lot of frustration. That said, I had two major issues
with Kagi. First, their cheapest subscription tier has a limit of 300 searches
monthly, and I would find myself running against the limit halfway into the
billing period. I would have gladly paid for the unlimited tier, if not for my
second issue with Kagi: privacy-wise, I simply don’t believe that a service that
requires login and thus naturally associates all your activity with your
identity is better than a service which can be used without a login. So I’m
sticking to DuckDuckGo for the time being.</p><h2 id="e-mail">E-Mail</h2><p>Unlike Search and many other categories in this list, it is not difficult to
find a capable alternative e-mail service. I personally use
<a href="https://proton.me/mail">ProtonMail</a> and <a href="https://fastmail.com/">Fastmail</a>.
Proton positions itself as the privacy-focused option, and claim to have
end-to-end encryption. They bundle e-mail with storage, calendar, VPN and a
password manager at a very reasonable rate. I will continue using ProtonMail as
one of my email accounts, but I don’t like the fact it is difficult to use
third-party email clients with their service. Yes, that is due to how they do
end-to-end encryption, and I don’t have a reason to doubt their honesty, but is
it <em>really</em> end-to-end encryption if you don’t have sole ownership and full
control of your keys?</p><p>Besides moving away from Google, I also decided I want to own the whole of my
email address, including the domain name. So, a year and a half ago I started
using Fastmail with a custom domain. A feature of Fastmail I like and use all
the time is masked email, but in fairness a lot of services provide this feature
these days. Unlike Proton, FastMail makes no claims of extreme privacy, but I
lke it because it has a nice and clean web UI and it works with my favorite FOSS
e-mail client on Android.</p><h2 id="photos">Photos</h2><p>Back in the days when Google Photos had free unlimited photo storage, it was
pretty much unbeatable. Yes, the resolution was capped to 16 megapixels, but
during the time I relied on Google Photos, I didn’t have a phone with a camera
capable of much higher resolution. After Google axed the unlimited storage,
other photo storage services seem pretty competitive with Google Photos. At a
glance, Microsoft OneDrive, iCloud, Amazon Photos and DropBox all seem like
options I would at least consider. But I have not tried any of those services
and have no plans to do so, because I self-host a personal instance of
<a href="https://immich.app/">Immich</a> to store all my photos. In just a couple of years,
Immich has gone from zero to having a very rich feature-set, and although it
doesn’t have a stable release yet, it is stable enough for me. Using the
<a href="https://github.com/simulot/immich-go">immich-go</a> CLI tool, it is a breeze to
import media from your Google Takeout export to Immich as well.</p><h2 id="drive">Drive</h2><p>Cloud storage of files is an easy switch: there are many, many file storage
providers available with very competitive pricing. For myself, I initially used
a <a href="https://nextcloud.com/">Nextcloud</a> instance I self-host. I still have some of
my files in Nextcloud, but I found it to be slow when syncing a large amount of
files, so I opted for a simpler solution. All my important files are now in a
directory in my home server, and when I need access to them I just mount the
directory in my laptop with <code>sshfs</code>. In case I need a web interface, I have a
<a href="https://filebrowser.org/">FileBrowser</a> instance running. Side note: I love how
simple FileBrowser is. It does the things I need and not a thing more.</p><p>I realize switching to a different storage provider will be more difficult for
people who use Google Drive for collaboration and need to share files often with
other people. Fortunately, in my case what I needed was just to not lose my
files if my laptop goes belly up, and to be able to occasionally access
important files from my phone.</p><p>Using most calendar and contacts clients with different providers, and switching
between them, is more or less straightforward thanks to the
<a href="https://en.wikipedia.org/wiki/CalDAV">CalDAV</a> and
<a href="https://en.wikipedia.org/wiki/CardDAV">CardDAV</a> open protocols. I use my
NextCloud instance as the server for both, and it works flawlessly. On the
client side, I use <a href="https://github.com/FossifyOrg">Fossify</a> Calendar and
GrapheneOS’s default contacts app along with <a href="https://www.davx5.com/">DavX5</a> to
facilitate the synchronization. I recently discovered that the Calendar and
Contacts apps that come with the Gnome Desktop Environment support CalDAV and
CardDAV as well, so that’s neat! I can now view or update my calendar and
contact list from my phone, laptop or the browser!</p><p>For people who can’t or don’t want to self-host a Nextcloud instance, there are
plenty of ‘cloud productivity suite’ providers that provide file storage,
calendar, contact and email services with a single account. Microsoft Outlook
and Apple iCloud are the most popular ones, but privacy-focused alternatives
like Proton are growing.</p><h2 id="phone">Phone</h2><p>Let me begin by saying that I am extremely grateful that
<a href="https://grapheneos.org/">GrapheneOS</a> exists. It is Android but with privacy and
security features that severely limit the capacity of big tech to spy on you.
This includes Google itself, as GrapheneOS by default comes without all the apps
and services that Google includes on a regular Android phone. Optionally, you
can install Google Play Services, but as a regular, ‘sandboxed’ app: which means
Google has the same privilege as any other app in your phone, and you can decide
what permissions to allow it. But the catch is… well, there are several.
Whether or not you’ll find them acceptable depends on where your preference lies
in the privacy-convenience trade-off scale. Because unfortunately, you must
sacrifice one to get more of the other. The first issue is that it only runs on
Google Pixel devices. This is because the GrapheneOS project has a <a href="https://grapheneos.org/faq#future-devices">sizable list
of security and support requirements</a>
that a device will need to fulfill to be supported, and apparently only Google
Pixel devices do at the moment. If you already have a Pixel phone (like I did
when I first decided to try GrapheneOS), this is not an issue. If you don’t
already have one though, you’ll have to make a decision about whether you want
to support Google’s business by buying a device they produce, even though you’re
doing that so you can give Google less control of your digital life. To me, that
feels like an acceptable trade-off.</p><p>The other issue is that many apps will either not work, or will be partially
broken. I have used GrapheneOS for a total of 16 months in two stints, 8 months
each in two devices; first a Pixel 3a and now a Pixel 7. Until about 2 months
ago, I used it without the (sandboxed) Google Play Services. In this
configuration, there is a whole category of applications you cannot use: most
prominently, banking and finance apps will just refuse to work. Many apps that
work will have some features broken: notifications in particular will be missing
for a lot of apps. Some apps will keep complaining that your phone does not have
Google Play Services and thus is not supported, but still continue to mostly
work (looking at you, Snapchat). But I found I could still manage. Apps like
Telegram, Signal and Whatsapp use their own notification delivery mechanism, so
they aren’t impacted as long as you turn off battery optimization for them. All
the banks I have accounts with have mobile websites that work reasonably well. I
was even able to take trips through Uber’s mobile website, which was a pleasant
surprise. The location functionality did not work, but I believe that was due
more to the browser than to Uber itself. I tried to get as many apps as possible
from F-droid, the app store for open-source Android apps. For proprietary apps,
I used Aurora store, which is an alternative open-source client for the Google
Play Store. Not ideal, but better than manually downloading APKs from websites
like APKPure and APKMirror.</p><p>About two months ago, in a moment of frustration, I decided to install the
sandboxed Google Play Services and Google Play Store to see if that would
improve my experience. Some things are noticeably better: for instance,
notifications work for all apps, installing new apps is way easier, and I can
install and use some financial apps without issues. It is still far from the
regular Android experience; for instance, apps don’t auto-update, you have to
manually go into Google Play Store and update them. This is unfortunate, but you
necessarily lose some functionality when you limit the god-like permissions
Google has on a regular Android device.</p><p>Slight tangent: one of my big gripes here is with Android Auto. Contrary to what
the name might suggest, Android Auto is not part of the <a href="https://source.android.com/">Android Open Source
Project (AOSP)</a>. Instead <a href="https://en.wikipedia.org/wiki/Android_Auto">it is a proprietary
standard</a>, and the Android Auto app
on your phone is a proprietary app that has privileged access to your system. If
I want turn-by-turn navigation in my car’s head unit out of an open-source maps
app on my phone, that is simply not possible without a privileged, proprietary
app in between to mediate. Before January 2024, it was not even possible to use
Android Auto in GrapheneOS, but now it is at least supported, although it does
depend on the sandboxed Google Play being installed as well.</p><p>Every time I am frustrated with the state of things with GrapheneOS, I think
about getting an iPhone, using it without any Google apps, and enjoying the
‘just works’ nature of Apple products. But then I would be handing over control
of a large part of my digital life to another big tech company, so I haven’t
bought an iPhone yet. Apple does like to make a big deal of at least pretending
to care more about your privacy than the rest of Big Tech, but I would rather
not rely on promises if I can, and where possible, use open-source software
stacks I can trust. So I’m sticking with GrapheneOS on my Pixel, at least for
the near future.</p><h2 id="maps">Maps</h2><p><a href="https://www.openstreetmap.org/">OpenStreetMap</a> is a fantastic dataset and in
many cases, is better than Google Maps in terms of map accuracy. I use it a lot.
But Google Maps is much more than just the map data: it has client apps across
different platforms with a consistent interface, routing and turn-by-turn
navigation, public transport information, live traffic data, and most
importantly for me, business reviews and opening hours. For the last one,
Google’s sheer size means that the network effects are on their side, and I’m
not aware of any effort to create an open dataset of business reviews. All this
means that it is difficult to quit Google Maps entirely. OpenStreetMap-based
apps like <a href="https://organicmaps.app/">Organic Maps</a> are great and I frequently
use them, but I find myself using the Google Maps website a lot, for tasks like
searching for restaurants to getting an estimate of how long my commute is going
to take.</p><h2 id="video">Video</h2><p>The sad reality here is that YouTube essentially has no alternative. Yes, it is
technologically difficult to deliver video to the internet in a way that is
cost-effective, but the problem that is orders of magnitude more difficult is
that of building a critical mass of creators and viewers that the network effect
takes over. All the creators are on YouTube, so everyone goes there for content.
All the viewers are on YouTube, so creators put their videos there. There are
platforms that are trying to provide an alternative, but they are mostly unknown
to the general populace. I have never given serious thought to
<a href="https://en.wikipedia.org/wiki/PeerTube">PeerTube</a> because I don’t know of any
creators I watch that upload their videos to a PeerTube instance. I think
<a href="https://nebula.tv/">Nebula.tv</a> is promising, and a bunch of creators I like
upload their videos on it. I do have a Nebula account but rarely end up using
it, since most videos get uploaded to YouTube as well, and when I open Nebula, I
find myself having already watched all the interesting videos on YouTube.</p><h2 id="conclusion">Conclusion</h2><p>At this point in time, it is exceedingly difficult to fully avoid using Google
products and services, and you’ll need to sacrifice a lot of convenience in your
attempts to use alternatives. Nevertheless, capable and privacy-friendly
alternatives exist for many product segments in which Google dominates, and I
think it is worthwhile to reduce your dependence on Google where you can. If you
are so inclined, self-hosting can provide even more freedom and privacy.</p></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Legal models hallucinate in 1 out of 6 (or more) benchmarking queries (209 pts)]]></title>
            <link>https://hai.stanford.edu/news/ai-trial-legal-models-hallucinate-1-out-6-or-more-benchmarking-queries</link>
            <guid>40538019</guid>
            <pubDate>Fri, 31 May 2024 17:36:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://hai.stanford.edu/news/ai-trial-legal-models-hallucinate-1-out-6-or-more-benchmarking-queries">https://hai.stanford.edu/news/ai-trial-legal-models-hallucinate-1-out-6-or-more-benchmarking-queries</a>, See on <a href="https://news.ycombinator.com/item?id=40538019">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p dir="ltr"><span>Artificial intelligence (AI) tools are rapidly transforming the practice of law. Nearly&nbsp;</span><a href="https://www.legaldive.com/news/generative-ai-legal-use-cases-wolters-kluwer-report/700342/"><span>three quarters of lawyers</span></a><span> plan on using generative AI for their work, from sifting through mountains of case law to drafting contracts to reviewing documents to writing legal memoranda. But are these tools reliable enough for real-world use?</span></p><p dir="ltr"><span>Large language models have a documented tendency to “hallucinate,” or make up false information. In one highly-publicized case, a New York lawyer&nbsp;</span><a href="https://www.nytimes.com/2023/05/27/nyregion/avianca-airline-lawsuit-chatgpt.html"><span>faced sanctions</span></a><span> for citing ChatGPT-invented fictional cases in a legal brief;&nbsp;</span><a href="https://www.nytimes.com/2023/12/29/nyregion/michael-cohen-ai-fake-cases.html"><span>many similar cases</span></a><span> have since been reported. And our&nbsp;</span><a href="https://hai.stanford.edu/news/hallucinating-law-legal-mistakes-large-language-models-are-pervasive"><span>previous study</span></a><span> of general-purpose chatbots found that they hallucinated between 58% and 82% of the time on legal queries, highlighting the risks of incorporating AI into legal practice. In his&nbsp;</span><a href="https://www.supremecourt.gov/publicinfo/year-end/2023year-endreport.pdf"><span>2023 annual report on the judiciary</span></a><span>, Chief Justice Roberts took note and warned lawyers of hallucinations.&nbsp;</span></p><p><span>Across all areas of industry, retrieval-augmented generation (RAG) is seen and promoted as the solution for reducing hallucinations in domain-specific contexts. Relying on RAG, leading legal research services have released AI-powered legal research products that they claim&nbsp;</span><a href="https://legal.thomsonreuters.com/blog/legal-research-meets-generative-ai/"><span>“avoid”</span></a><span> hallucinations and guarantee&nbsp;</span><a href="https://www.lexisnexis.com/community/pressroom/b/news/posts/lexisnexis-launches-lexis-ai-a-generative-ai-solution-with-hallucination-free-linked-legal-citations"><span>“hallucination-free”</span></a><span> legal citations. RAG systems promise to deliver more accurate and trustworthy legal information by integrating a language model with a database of legal documents. Yet providers have not provided hard evidence for such claims or even precisely defined “hallucination,” making it difficult to assess their real-world reliability.</span></p><h2>AI-Driven Legal Research Tools Still Hallucinate</h2><p dir="ltr"><span>In a new&nbsp;</span><a href="https://dho.stanford.edu/wp-content/uploads/Legal_RAG_Hallucinations.pdf"><span>preprint study</span></a><span> by&nbsp;</span><a href="https://reglab.stanford.edu/"><span>Stanford RegLab</span></a><span> and&nbsp;</span><a href="https://hai.stanford.edu/"><span>HAI</span></a><span> researchers, we put the claims of two providers, LexisNexis (creator of Lexis+ AI) and Thomson Reuters (creator of Westlaw AI-Assisted Research and Ask Practical Law AI)), to the test. We show that their tools do reduce errors compared to general-purpose AI models like GPT-4. That is a substantial improvement and we document instances where these tools provide sound and detailed legal research. But even these bespoke legal AI tools still hallucinate an alarming amount of the time: the Lexis+ AI and Ask Practical Law AI systems produced incorrect information more than 17% of the time, while Westlaw’s AI-Assisted Research hallucinated more than 34% of the time.</span></p><blockquote><p dir="ltr"><span>Read the full study, </span><a href="https://dho.stanford.edu/wp-content/uploads/Legal_RAG_Hallucinations.pdf"><span>Hallucination-Free? Assessing the Reliability of Leading AI Legal Research Tools</span></a></p></blockquote><p dir="ltr"><span>To conduct our study, we manually constructed a pre-registered dataset of over 200 open-ended legal queries, which we designed to probe various aspects of these systems’ performance.</span></p><p dir="ltr"><span>Broadly, we investigated (1) general research questions (questions about doctrine, case holdings, or the bar exam); (2) jurisdiction or time-specific questions (questions about circuit splits and recent changes in the law); (3) false premise questions (questions that mimic a user having a mistaken understanding of the law); and (4) factual recall questions (questions about simple, objective facts that require no legal interpretation). These questions are designed to reflect a wide range of query types and to constitute a challenging real-world dataset of exactly the kinds of queries where legal research may be needed the most.</span></p><p><img src="https://hai.stanford.edu/sites/default/files/inline-images/Hallucinations%201.png" data-entity-uuid="404ddaba-fd25-4ed2-a086-56fa9e67ddbc" data-entity-type="file" alt="comparison of hallucinated and incomplete responses" width="1328" height="1002" loading="lazy"></p><p dir="ltr"><em><strong>Figure 1:</strong><span> Comparison of hallucinated (red) and incomplete (yellow) answers across generative legal research tools.</span></em></p><p dir="ltr"><span>These systems can hallucinate in one of two ways. First, a response from an AI tool might just be&nbsp;</span><em>incorrect</em><span>—it describes the law incorrectly or makes a factual error. Second, a response might be&nbsp;</span><em>misgrounded</em><span>—the AI tool describes the law correctly, but cites a source which does not in fact support its claims.</span></p><p dir="ltr"><span>Given the critical importance of authoritative sources in legal research and writing, the second type of hallucination may be even more pernicious than the outright invention of legal cases. A citation might be “hallucination-free” in the narrowest sense that the citation&nbsp;</span><em>exists</em><span>, but that is not the only thing that matters. The core promise of legal AI is that it can streamline the time-consuming process of identifying relevant legal sources. If a tool provides sources that&nbsp;</span><em>seem</em><span> authoritative but are in reality irrelevant or contradictory, users could be misled. They may place undue trust in the tool's output, potentially leading to erroneous legal judgments and conclusions.</span></p><p><img src="https://hai.stanford.edu/sites/default/files/inline-images/Hallucinations%202.png" data-entity-uuid="25e872e0-43c2-4c6b-965c-ad3dfd264ef2" data-entity-type="file" alt="examples of hallucinations from models" width="1600" height="927" loading="lazy"></p><p dir="ltr"><em><strong>Figure 2:&nbsp;</strong><span>Top left: Example of a hallucinated response by Westlaw's AI-Assisted Research product. The system makes up a statement in the Federal Rules of Bankruptcy Procedure that does not exist (and Kontrick v. Ryan, 540 U.S. 443 (2004) held that a closely related bankruptcy deadline provision was not jurisdictional).&nbsp;Top right: Example of a hallucinated response by LexisNexis's Lexis+ AI. Casey and its undue burden standard were overruled by the Supreme Court in Dobbs v. Jackson Women's Health Organization, 597 U.S. 215 (2022); the correct answer is rational basis review.&nbsp;Bottom left: Example of a hallucinated response by Thomson Reuters's Ask Practical Law AI. The system fails to correct the user’s mistaken premise—in reality, Justice Ginsburg joined the Court's landmark decision legalizing same-sex marriage—and instead provides additional false information about the case.&nbsp;Bottom right: Example of a hallucinated response from GPT-4, which generates a statutory provision that has not been codified.</span></em></p><h2>RAG Is Not a Panacea</h2><p><img src="https://hai.stanford.edu/sites/default/files/inline-images/RAG%20blog%203.png" data-entity-uuid="e01fdb31-8f8a-4cbd-b364-b85d3f81d152" data-entity-type="file" alt="a chart showing an overview of the retrieval-augmentation generation (RAG) process." width="1600" height="767" loading="lazy"></p><p dir="ltr"><em>Figure 3: An overview of the retrieval-augmentation generation (RAG) process. Given a user query (left), the typical process consists of two steps: (1) retrieval (middle), where the query is embedded with natural language processing and a retrieval system takes embeddings and retrieves the relevant documents (e.g., Supreme Court cases); and (2) generation (right), where the retrieved texts are fed to the language model to generate the response to the user query. Any of the subsidiary steps may introduce error and hallucinations into the generated response. (Icons are courtesy of FlatIcon.)</em></p><p dir="ltr"><span>Under the hood, these new legal AI tools use retrieval-augmented generation (RAG) to produce their results, a method that many tout as a potential solution to the hallucination problem. In theory, RAG allows a system to first&nbsp;</span><em>retrieve</em><span> the relevant source material and then use it to&nbsp;</span><em>generate</em><span> the correct response. In practice, however, we show that even RAG systems are not hallucination-free.&nbsp;</span></p><p dir="ltr"><span>We identify several challenges that are particularly unique to RAG-based legal AI systems, causing hallucinations.&nbsp;</span></p><p dir="ltr"><span>First, legal retrieval is hard. As any lawyer knows, finding the appropriate (or best) authority can be no easy task. Unlike other domains, the law is not entirely composed of verifiable&nbsp;</span><em>facts</em><span>—instead, law is built up over time by judges writing&nbsp;</span><em>opinions</em><span>. This makes identifying the set of documents that definitively answer a query difficult, and sometimes hallucinations occur for the simple reason that the system’s retrieval mechanism fails.</span></p><p dir="ltr"><span>Second, even when retrieval occurs, the document that is retrieved can be an inapplicable authority. In the American legal system, rules and precedents differ across jurisdictions and time periods; documents that might be relevant on their face due to semantic similarity to a query may actually be inapposite for idiosyncratic reasons that are unique to the law. Thus, we also observe hallucinations occurring when these RAG systems fail to identify the truly binding authority. This is particularly problematic as areas where the law is in flux is precisely where legal research matters the most. One system, for instance, incorrectly recited the “undue burden” standard for abortion restrictions as good law, which was overturned in&nbsp;</span><em>Dobbs</em><span> (see Figure 2).&nbsp;</span></p><p dir="ltr"><span>Third, sycophancy—the tendency of AI to agree with the user's incorrect assumptions—also poses unique risks in legal settings. One system, for instance, naively agreed with the question’s premise that Justice Ginsburg dissented in&nbsp;</span><em>Obergefell</em><span>, the case establishing a right to same-sex marriage, and answered that she did so based on her views on international copyright. (Justice Ginsburg did not dissent in&nbsp;</span><em>Obergefell</em><span> and, no, the case had nothing to do with copyright.) Notwithstanding that answer, here there are optimistic results. Our tests showed that both systems generally navigated queries based on false premises effectively. But when these systems do agree with erroneous user assertions, the implications can be severe—particularly for those hoping to use these tools to increase access to justice among&nbsp;</span><em>pro se</em><span> and under-resourced litigants.</span></p><h2>Responsible Integration of AI Into Law Requires Transparency</h2><p dir="ltr"><span>Ultimately, our results highlight the need for rigorous and transparent benchmarking of legal AI tools. Unlike other domains, the use of AI in law remains alarmingly opaque: the tools we study provide no systematic access, publish few details about their models, and report no evaluation results at all.</span></p><p dir="ltr"><span>This opacity makes it exceedingly challenging for lawyers to procure and acquire AI products. The large law firm&nbsp;</span><a href="https://www.bloomberglaw.com/product/blaw/bloomberglawnews/business-and-practice/BNA%200000018f-1b15-dda8-a78f-1f75a0570001"><span>Paul Weiss</span></a><span> spent nearly a year and a half testing a product, and did not develop “hard metrics” because checking the AI system was so involved that it “makes any efficiency gains difficult to measure.” The absence of rigorous evaluation metrics makes responsible adoption difficult, especially for practitioners that are less resourced than Paul Weiss.&nbsp;</span></p><p dir="ltr"><span>The lack of transparency also threatens lawyers’ ability to comply with ethical and professional responsibility requirements. The bar associations of&nbsp;</span><a href="https://www.calbar.ca.gov/Portals/0/documents/ethics/Generative-AI-Practical-Guidance.pdf"><span>California</span></a><span>,&nbsp;</span><a href="https://nysba.org/app/uploads/2024/04/Task-Force-on-AI-Report-draft-2024-04-02-FINAL.pdf"><span>New York</span></a><span>, and&nbsp;</span><a href="https://www.floridabar.org/etopinions/opinion-24-1/"><span>Florida</span></a><span> have all recently released guidance on lawyers’ duty of supervision over work products created with AI tools. And as of May 2024,&nbsp;</span><a href="https://www.law360.com/pulse/ai-tracker"><span>more than 25 federal judges</span></a><span> have issued standing orders instructing attorneys to disclose or monitor the use of AI in their courtrooms.</span></p><p dir="ltr"><span>Without access to evaluations of the specific tools and transparency around their design, lawyers may find it impossible to comply with these responsibilities. Alternatively, given the high rate of hallucinations, lawyers may find themselves having to verify each and every proposition and citation provided by these tools, undercutting the stated efficiency gains that legal AI tools are supposed to provide.</span></p><p dir="ltr"><span>Our study is meant in no way to single out LexisNexis and Thomson Reuters. Their products are far from the only legal AI tools that stand in need of transparency—a slew of startups offer similar products and have&nbsp;</span><a href="https://www.midpage.ai/ChatGPT-plugin"><span>made</span></a><span>&nbsp;</span><a href="https://vlex.com/products/vincent-ai"><span>similar</span></a><span>&nbsp;</span><a href="https://www.paxton.ai/post/paxton-ai-has-raised-6m-to-power-fast-highly-accurate-legal-research-and-drafting-using-ai"><span>claims</span></a><span>, but they are available on even more restricted bases, making it even more difficult to assess how they function.&nbsp;</span></p><p dir="ltr"><span>Based on what we know, legal hallucinations have not been solved.The legal profession should turn to public benchmarking and rigorous evaluations of AI tools.&nbsp;</span></p><p dir="ltr"><em>This story was updated on Thursday, May 30, 2024, to include analysis of a third AI tool, Westlaw’s AI-Assisted Research.</em></p><p dir="ltr"><em>Paper authors: Varun Magesh is a research fellow at Stanford RegLab. Faiz Surani is a research fellow at Stanford RegLab. Matthew Dahl is a joint JD/PhD student in political science at Yale University and graduate student affiliate of Stanford RegLab. Mirac Suzgun is a joint JD/PhD student in computer science at Stanford University and a graduate student fellow at Stanford RegLab. Christopher D. Manning is Thomas M. Siebel Professor of Machine Learning, Professor of Linguistics and Computer Science, and Senior Fellow at HAI. Daniel E. Ho is the William Benjamin Scott and Luna M. Scott Professor of Law, Professor of Political Science, Professor of Computer Science (by courtesy), Senior Fellow at HAI, Senior Fellow at SIEPR, and Director of the RegLab at Stanford University.&nbsp;</em></p></div></div>]]></description>
        </item>
    </channel>
</rss>