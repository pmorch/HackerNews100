<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Mon, 06 Jan 2025 07:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Regulations Enabling 6 GHz Wi-Fi (130 pts)]]></title>
            <link>https://www.wi-fi.org/regulations-enabling-6-ghz-wi-fi</link>
            <guid>42606484</guid>
            <pubDate>Mon, 06 Jan 2025 00:57:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wi-fi.org/regulations-enabling-6-ghz-wi-fi">https://www.wi-fi.org/regulations-enabling-6-ghz-wi-fi</a>, See on <a href="https://news.ycombinator.com/item?id=42606484">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="block-wfa-system-main">
  
    
      
<article data-history-node-id="37390">

  
    

  
  <div><p><a href="https://www.wi-fi.org/sites/default/files/public/images/6_GHz_Wi-Fi_Map_20241104.jpg"><img src="https://www.wi-fi.org/sites/default/files/public/images/6_GHz_Wi-Fi_Map_20241104.jpg" data-entity-uuid="7f99a0db-b0ce-44c0-8f39-e8bc237fff1e" data-entity-type="file" alt="" width="600" height="427" loading="lazy"></a></p><table><thead><tr><th><strong>Country</strong></th><th><strong>Status</strong></th><th><strong>Spectrum</strong></th></tr></thead><tbody><tr><td>Andorra</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Argentina</td><td><a href="https://www.boletinoficial.gob.ar/detalleAviso/primera/287126/20230524">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Australia</td><td><p><a href="https://www.legislation.gov.au/Details/F2022L00249">Adopted</a></p><p><a href="https://www.acma.gov.au/sites/default/files/2022-03/Outcomes%20Paper_Proposed%20updates%20to%20the%20LIPD%20Class%20Licence%20for%206%20GHz%20RLANs.pdf">Considering</a></p></td><td><p>5925-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Austria</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Azerbaijan</td><td><a href="https://icta.az/show-media-news/iyun-sentyabr-aylarinda-radiotezlikler-uzre-dovlet-komissiyasi-17-muracieti-musbet-cavablandirib">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Bahrain</td><td><a href="https://www.tra.org.bh/en/en/article/bahrain-approves-radio-spectrum-for-faster-wi-fi-6-technologies">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Bangladesh</td><td><a href="https://btrc.gov.bd/site/notices/939916e8-a89a-4e3b-aa75-35a0a2172f59/%E0%A7%AB%E0%A7%AF%E0%A7%A8%E0%A7%AB-%E0%A7%AC%E0%A7%AA%E0%A7%A8%E0%A7%AB-%E0%A6%AE%E0%A7%87%E0%A6%97%E0%A6%BE%E0%A6%B9%E0%A6%BE%E0%A6%B0%E0%A7%8D%E0%A6%9C-%E0%A6%A4%E0%A6%B0%E0%A6%99%E0%A7%8D%E0%A6%97-%E0%A6%AC%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A8%E0%A7%8D%E0%A6%A1-Shared-%E0%A6%AD%E0%A6%BF%E0%A6%A4%E0%A7%8D%E0%A6%A4%E0%A6%BF%E0%A6%A4%E0%A7%87-%E0%A6%AC%E0%A7%8D%E0%A6%AF%E0%A6%AC%E0%A6%B9%E0%A6%BE%E0%A6%B0-%E0%A6%B8%E0%A6%82%E0%A6%95%E0%A7%8D%E0%A6%B0%E0%A6%BE%E0%A6%A8%E0%A7%8D%E0%A6%A4-%E0%A6%B8%E0%A6%BE%E0%A6%B0%E0%A7%8D%E0%A6%95%E0%A7%81%E0%A6%B2%E0%A6%BE%E0%A6%B0-%E0%A6%AA%E0%A7%8D%E0%A6%B0%E0%A6%9A%E0%A6%BE%E0%A6%B0-">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Belgium</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Brazil</td><td><a href="https://sei.anatel.gov.br/sei/modulos/pesquisa/md_pesq_documento_consulta_externa.php?eEP-wqk1skrd8hSlk5Z3rN4EVg9uLJqrLYJw_9INcO7uvjUt3vSOwT_4Z5fukj9yIzPErY4KWH5cpE9W_9hcTZkCG-vLPIdpXyuhgMG-L9M-uBLoSdAAXO0clb3SIt1i">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>CEPT</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Canada</td><td><a href="https://www.ic.gc.ca/eic/site/smt-gst.nsf/eng/sf11698.html">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Chile</td><td><a href="https://www.bcn.cl/leychile/navegar?idNorma=1109333&amp;idParte=9841504&amp;idVersion=&amp;r_c=6">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Colombia</td><td><a href="https://www.ane.gov.co/SitePages/det-noticias.aspx?p=414">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Costa Rica</td><td><a href="https://storage.googleapis.com/eleoscompliance1.appspot.com/public/PNAF%20modificaci%C3%B3n%20ALCA87_30_04_2021.pdf">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Dominican Republic</td><td><a href="https://transparencia.indotel.gob.do/wp-content/uploads/2022/12/res_102_2022_recurso_reconsideracion_082_22.pdf">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Egypt</td><td>Considering</td><td>5925-6425 MHz</td></tr><tr><td>El Salvador</td><td><a href="https://www.siget.gob.sv/actualizacion-de-cuadro-nacional-de-atribucion-de-frecuencias-t-0408-2023/">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>European Union</td><td><a href="https://digital-strategy.ec.europa.eu/en/library/6ghz-harmonisation-decision-more-spectrum-available-better-and-faster-wi-fi">Adopted</a></td><td>5925-6425 MHz<br>&nbsp;(*only adopting 5945-6425)</td></tr><tr><td>Faroe Islands</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>France</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Germany</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Gibraltar</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Guatemala</td><td><a href="https://sit.gob.gt/gerencia-de-frecuencias/frecuencias/tabla-nacional-de-atribucion-de-frecuencias/">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Hong Kong</td><td><p><a href="https://www.coms-auth.hk/filemanager/statement/en/upload/591/ca_statement_6GHzDevices.pdf">Adopted</a></p><p><a href="https://www.coms-auth.hk/filemanager/statement/en/upload/591/ca_statement_6GHzDevices.pdf">Considering</a></p></td><td><p>5925-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Iceland</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Ireland</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Isle of Man</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Japan</td><td><p><a href="https://www.soumu.go.jp/menu_news/s-news/01kiban12_02000142.html">Adopted</a></p><p><a href="https://www.soumu.go.jp/menu_news/s-news/01kiban12_02000142.html">Considering</a></p></td><td><p>5925-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Jordan</td><td><a href="https://trc.gov.jo/EchoBusV3.0/SystemAssets/PDF/RSMD/cb9f9a83-43a6-4e66-8432-6e02ecaf465b_RLAN%20Arabic%20%20Final%20-%20clean%20with%2057-71%20GHz.pdf">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Kazakhstan</td><td><a href="https://www.gov.kz/memleket/entities/telecom/documents/details/723297?lang=ru">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Kenya</td><td><a href="https://www.ca.go.ke/wp-content/uploads/2022/07/Guidelines-on-the-Use-of-Radiofrequency-Spectrum-by-Short-Range-Devices-2022.pdf">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Liechtenstein</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Luxembourg</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Macau S.A.R.</td><td><a href="https://bo.io.gov.mo/bo/i/2024/16/despce.asp#64">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Malaysia</td><td><a href="https://www.mcmc.gov.my/skmmgovmy/media/General/CA-No-1-of-2022_-signed_19012022.pdf" target="_blank">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Mauritius</td><td><a href="https://www.icta.mu/documents/2022/06/Consultation_Paper_WIFI_Draft_Decision.pdf">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Mexico</td><td><a href="https://www.ift.org.mx/comunicacion-y-medios/comunicados-ift/es/el-pleno-del-ift-clasifica-la-banda-de-5925-6425-mhz-como-espectro-libre-comunicado-132023-16-de">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Monaco</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Morocco</td><td><a href="https://www.anrt.ma/en/lagence/actualites/wifi-6e-now-authorized-morocco">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Namibia</td><td><a href="https://www.cran.na/yglilidy/2023/04/GG-8060-dated-3-April-2023.pdf">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Netherlands</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>New Zealand</td><td><a href="https://www.rsm.govt.nz/licensing/frequencies-for-anyone/short-range-devices-gurl/">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Norway</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Oman</td><td><a href="https://tra.gov.om/En/ViewPublicConsultations.jsp?code=33">Considering</a></td><td>5925-6425 MHz</td></tr><tr><td>Pakistan</td><td><a href="https://www.pta.gov.pk/en/media-center/single-media/pta-announces-unlicensed-rlan-operation-wi-fi-6e-in-6-ghz-band-in-pakistan-170524">Adopted</a></td><td>5945-6425 MHz</td></tr><tr><td>Peru</td><td><a href="https://cdn.www.gob.pe/uploads/document/file/1861732/Resoluci%C3%B3n%20Ministerial%20nro%20373-2021-MTC/01.pdf">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Philippines</td><td><a href="https://ntc.gov.ph/wp-content/uploads/2024/MEMORANDUM%20CIRCULAR/NTC%20MC%20No.%20002-07-2024.pdf">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Portugal</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Qatar</td><td><p><a href="https://www.cra.gov.qa/en/press-releases/cra-issues-a-class-license-related-to-wi-fi-6e">Adopted</a></p><p><a href="https://www.cra.gov.qa/en/press-releases/cra-issues-a-class-license-related-to-wi-fi-6e">Considering</a></p></td><td><p>5925-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Russian Federation</td><td><a href="https://digital.gov.ru/ru/documents/8628/">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Saudi Arabia</td><td><a href="https://www.citc.gov.sa/en/RulesandSystems/RegulatoryDocuments/OtherRegulatoryDocuments/Documents/PL-PM-002-E-WiFi%20Regulations.pdf">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Singapore</td><td><a href="https://www.imda.gov.sg/Regulations-and-Licences/Regulations/consultations/Consultation-Papers/2023/Public-Consultation-on-Proposed-Allocation-of-6-GHz-Band">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>South Africa</td><td><a href="https://www.gov.za/sites/default/files/gcis_document/202305/48643gon1822.pdf">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>South Korea</td><td><a href="https://www.msit.go.kr/bbs/view.do?sCode=user&amp;mId=113&amp;mPid=112&amp;pageIndex=31&amp;bbsSeqNo=94&amp;nttSeqNo=3140715&amp;searchOpt=ALL&amp;searchTxt=">Adopted</a></td><td>5925-7125 MHz</td></tr><tr><td>Spain</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Switzerland</td><td><p><a href="https://docdb.cept.org/implementation/16737">Adopted</a></p><p><a href="https://eccwp.cept.org/WI_Detail.aspx?wiid=795">Considering</a></p></td><td><p>5945-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>Syria</td><td><a href="https://www.eleoscompliance.com/en/article/syria-sytra-has-updated-wlanrlan-regulation-to-include-wlan-6ghz-band#:~:text=The%20Syrian%20Telecommunications%20Regulatory%20Authority,use%20(inside%20buildings%20only)">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Taiwan</td><td><a href="https://www.ncc.gov.tw/chinese/news_detail.aspx?site_content_sn=538&amp;cate=0&amp;keyword=&amp;is_history=0&amp;pages=0&amp;sn_f=49880">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Thailand</td><td><a href="https://www.nbtc.go.th/Home.aspx?lang=th-th">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Togo</td><td><a href="https://arcep.tg/wp-content/uploads/2022/12/Decision-226-22-Determinant-les-categories-et-conditions-techniques-dexploitation-des-appareils-de-faible-puissance-et-de-faible-portee.pdf">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>Tunisia</td><td><a href="http://www.anf.tn/en">Considering</a></td><td>5925-6425 MHz</td></tr><tr><td>Turkey</td><td><a href="https://www.btk.gov.tr/uploads/pages/frekans-tahsisinden-muaf-telsiz-cihaz-sistemleri-olcutler-633d4ca68c0b1.pdf">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>United Arab Emirates</td><td><a href="http://wam.ae/en/details/1395302898209" target="_blank">Adopted</a></td><td>5925-6425 MHz</td></tr><tr><td>United Kingdom</td><td><p><a href="https://www.ofcom.org.uk/siteassets/resources/documents/consultations/category-2-6-weeks/189812-improving-spectrum-access-for-wi-fi----spectrum-use-in-the-5-and-6-ghz-bands/associated-documents/6ghz-statement.pdf?v=325088">Adopted</a></p><p><a href="https://www.ofcom.org.uk/spectrum/frequencies/spectrum-sharing-upper-6-ghz-band/">Considering</a></p></td><td><p>5925-6425 MHz</p><p>6425-7125 MHz</p></td></tr><tr><td>United States</td><td><p>Adopted <a href="https://www.fcc.gov/document/fcc-opens-6-ghz-band-wi-fi-and-other-unlicensed-uses-0">1st Report and Order</a></p><p>Adopted <a href="https://www.fcc.gov/document/fcc-permits-very-low-power-device-operations-6-ghz-band-0">2nd Report and Order</a></p><p>Adopted <a href="https://www.fcc.gov/document/fcc-opens-entire-6-ghz-band-very-low-power-device-operations-0">3rd Report and Order</a></p></td><td>5925-7125 MHz</td></tr></tbody></table></div>

</article>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Killed by LLM (152 pts)]]></title>
            <link>https://r0bk.github.io/killedbyllm/</link>
            <guid>42606231</guid>
            <pubDate>Mon, 06 Jan 2025 00:14:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://r0bk.github.io/killedbyllm/">https://r0bk.github.io/killedbyllm/</a>, See on <a href="https://news.ycombinator.com/item?id=42606231">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="root"><p><a href="https://github.com/R0bk/killedbyllm" target="_blank" rel="noopener noreferrer"><span>@R0bk/killedbyllm</span><svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 3h6v6"></path><path d="M10 14 21 3"></path><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path></svg></a></p><div><header><p>A memorial to the benchmarks that defined—and were defeated by—AI progress</p></header><div><div data-year="2024"><div><h2>2024</h2></div><div><div><div><h3>ARC-AGI<span>(<!-- -->2019<!-- --> - <!-- -->2024<!-- -->)</span></h3><p><span>Reasoning</span></p></div><p>Killed 1 month ago, Abstract reasoning challenge consisting of visual pattern completion tasks. Each task presents a sequence of abstract visual patterns and requires selecting the correct completion. Created by François Chollet as part of a broader investigation into measuring intelligence. It was 5 years and 1 months old.</p><div><p>Original Score</p><p>Human Baseline: ~80%</p></div></div><div><div><h3>MATH<span>(<!-- -->2021<!-- --> - <!-- -->2024<!-- -->)</span></h3><p><span>Mathematics</span></p></div><p>Killed 4 months ago, A dataset of 12K challenging competition mathematics problems from AMC, AIME, and other math competitions. Problems range from pre-algebra to olympiad-level and require complex multi-step reasoning. Each problem has a detailed solution that tests mathematical reasoning capabilities. It was 3 years and 6 months old.</p><div><p>Original Score</p><p>Average CS PhD: ~40%</p></div></div><div><div><h3>BIG-Bench-Hard<span>(<!-- -->2022<!-- --> - <!-- -->2024<!-- -->)</span></h3><p><span>Multi-task</span></p></div><p>Killed 7 months ago, A curated suite of 23 challenging tasks from BIG-Bench where language models initially performed below average human level. Selected to measure progress on particularly difficult capabilities. It was 1 year and 8 months old.</p><div><p>Original Score</p><p>Average Human: 67.7%</p></div></div><div><div><h3>HumanEval<span>(<!-- -->2021<!-- --> - <!-- -->2024<!-- -->)</span></h3><p><span>Coding</span></p></div><p>Killed 8 months ago, A collection of 164 Python programming problems designed to test language models' coding abilities. Each problem includes a function signature, docstring, and unit tests. Models must generate complete, correct function implementations that pass all test cases. It was 2 years and 10 months old.</p><div><p>Original Score</p><p>Unspecified</p></div></div><div><div><h3>IFEval<span>(<!-- -->2023<!-- --> - <!-- -->2024<!-- -->)</span></h3><p><span>Instruction Following</span></p></div><p>Killed 10 months ago, A comprehensive evaluation suite testing instruction following capabilities across coding, math, roleplay, and other tasks. Measures ability to handle complex multi-step instructions and constraints. It was 4 months old.</p><div><div><p><span>Defeated by:</span></p><!-- --><p>LLama 3.3 70B</p></div><div><p>Original Score</p><p>Unspecified</p></div></div></div></div></div><div data-year="2023"><div><h2>2023</h2></div><div><div><div><h3>GSM8K<span>(<!-- -->2021<!-- --> - <!-- -->2023<!-- -->)</span></h3><p><span>Mathematics</span></p></div><p>Killed 1 year ago, A collection of 8.5K grade school math word problems requiring step-by-step solutions. Problems test both numerical computation and natural language understanding through multi-step mathematical reasoning. It was 2 years and 1 months old.</p><div><p>Original Score</p><p>Unspecified</p></div></div><div><div><h3>Turing Test<span>(<!-- -->1950<!-- --> - <!-- -->2023<!-- -->)</span></h3><p><span>Conversation</span></p></div><p>Killed 1 year ago, The original AI benchmark proposed by Alan Turing in 1950. In this 'imitation game', a computer must convince human judges it is human through natural conversation. The test sparked decades of debate about machine intelligence and consciousness. It was 73 years and 5 months old.</p><div><p>Original Score</p><p>Interrogator &gt;50%</p></div></div><div><div><h3>ARC (AI2)<span>(<!-- -->2018<!-- --> - <!-- -->2023<!-- -->)</span></h3><p><span>Reasoning</span></p></div><p>Killed 1 year ago, AI2 Reasoning Challenge (ARC) - A collection of grade-school level multiple-choice reasoning tasks testing logical deduction, spatial reasoning, and temporal reasoning. Each task requires applying abstract reasoning skills to solve multi-step problems. It was 5 years old.</p></div><div><div><h3>HellaSwag<span>(<!-- -->2019<!-- --> - <!-- -->2023<!-- -->)</span></h3><p><span>Common Sense</span></p></div><p>Killed 1 year ago, A challenging dataset of multiple-choice questions about everyday scenarios. Uses adversarial filtering to test models' ability to understand and reason about real-world situations and their likely outcomes. It was 3 years and 10 months old.</p><div><p>Original Score</p><p>Human: 95.6%</p></div></div><div><div><h3>MMLU<span>(<!-- -->2020<!-- --> - <!-- -->2023<!-- -->)</span></h3><p><span>Knowledge</span></p></div><p>Killed 1 year ago, A comprehensive benchmark covering 57 subjects including mathematics, history, law, computer science, and more. Questions are drawn from real-world sources like professional exams to test both breadth and depth of knowledge across diverse academic domains. It was 2 years and 6 months old.</p><div><p>Original Score</p><p>95th pct Human: 87.0%</p></div></div><div><div><h3>WinoGrande<span>(<!-- -->2019<!-- --> - <!-- -->2023<!-- -->)</span></h3><p><span>Common Sense</span></p></div><p>Killed 1 year ago, An enhanced version of WSC with 44K problems testing common-sense reasoning through pronoun resolution. Uses adversarial filtering to ensure problems require real-world understanding. It was 3 years and 8 months old.</p></div></div></div><div data-year="2022"><div><h2>2022</h2></div><div><div><h3>BIG-Bench<span>(<!-- -->2021<!-- --> - <!-- -->2022<!-- -->)</span></h3><p><span>Multi-task</span></p></div><p>Killed 2 years ago, A collaborative collection of 204 tasks spanning linguistics, childhood development, math, common-sense reasoning, biology, physics, social bias, and software development. Tests diverse capabilities of language models. It was 10 months old.</p><div><p>Original Score</p><p>Human: 49.8%</p></div></div></div><div data-year="2019"><div><h2>2019</h2></div><div><div><div><h3>SuperGLUE<span>(<!-- -->2019<!-- --> - <!-- -->2019<!-- -->)</span></h3><p><span>Language</span></p></div><p>Killed 5 years ago, A collection of more challenging language understanding tasks including word sense disambiguation, causal reasoning, and reading comprehension. Designed as a more difficult successor to GLUE. It was 5 months old.</p><div><p>Original Score</p><p>Human: 89.8%</p></div></div><div><div><h3>WSC<span>(<!-- -->2012<!-- --> - <!-- -->2019<!-- -->)</span></h3><p><span>Common Sense</span></p></div><p>Killed 5 years ago, A collection of carefully crafted sentence pairs with ambiguous pronoun references that resolve differently based on small changes. Designed to test genuine language understanding over statistical patterns. It was 7 years and 3 months old.</p><div><div><p><span>Defeated by:</span></p><!-- --><p>ROBERTA (w SFT)</p></div><div><div><p>Original Score</p><p>Human: 96.5%</p></div><div><p>Final Score</p><p><span>ROBERTA (w SFT): 90.1%</span></p></div></div></div></div><div><div><h3>GLUE<span>(<!-- -->2018<!-- --> - <!-- -->2019<!-- -->)</span></h3><p><span>Language</span></p></div><p>Killed 5 years ago, A collection of nine tasks for evaluating natural language understanding, including single-sentence tasks, similarity and paraphrase tasks, and inference tasks. The primary NLU benchmark before SuperGLUE. It was 1 year and 1 months old.</p><div><p>Original Score</p><p>Human: 87.1%</p></div></div><div><div><h3>TriviaQA<span>(<!-- -->2017<!-- --> - <!-- -->2019<!-- -->)</span></h3><p><span>Knowledge</span></p></div><p>Killed 5 years ago, A large-scale dataset of 650K question-answer-evidence triples authored by trivia enthusiasts. Requires cross-sentence reasoning and synthesis of information from multiple sources. It was 2 years and 1 months old.</p><div><div><p>Original Score</p><p>Human: 79.7%</p></div><div><p>Final Score</p><p><span>SpanBERT: 83.6%</span></p></div></div></div><div><div><h3>SQuAD v2.0<span>(<!-- -->2018<!-- --> - <!-- -->2019<!-- -->)</span></h3><p><span>Language</span></p></div><p>Killed 5 years ago, An extension of SQuAD that adds unanswerable questions. Models must both answer questions when possible and determine when no answer is supported by the passage. It was 11 months old.</p><div><p>Original Score</p><p>Human: 89.5%</p></div></div><div><div><h3>SQuAD<span>(<!-- -->2016<!-- --> - <!-- -->2019<!-- -->)</span></h3><p><span>Language</span></p></div><p>Killed 5 years ago, A reading comprehension dataset of 100,000+ questions posed by crowdworkers on Wikipedia articles. Answers must be text segments from the corresponding reading passage. It was 2 years and 10 months old.</p><div><p>Original Score</p><p>Human: 91.2%</p></div></div></div></div><div data-year="2018"><div><h2>2018</h2></div><div><div><h3>SWAG<span>(<!-- -->2018<!-- --> - <!-- -->2018<!-- -->)</span></h3><p><span>Common Sense</span></p></div><p>Killed 6 years ago, A dataset of 113K multiple choice questions about grounded situations. Given a partial description of a situation, models must predict what happens next from 4 choices using common sense reasoning. It was 5 months old.</p></div></div></div><div><div><h2>Inspiration</h2><p>This website is meant to be a bit of fun, and to help us take a look back and remember the massive amount of progress that has been made — much of which I didn't believe I'd see within my lifetime.</p><p>It has also been heavily inspired by Cody Ogden's<!-- --> <a href="https://killedbygoogle.com/" target="_blank" rel="noopener noreferrer">Killed by Google</a></p></div><div><h2>Understanding "Saturation"</h2><p>For KilledByLLM <i>"Saturation"</i> means a benchmark can no longer measure the frontier. While these benchmarks are still increadibly useful, valuable tools — they are no longer able to meaningfully contribute to the question of <i>"Can AI do X?"</i></p></div><div><h2>Data Collection Challenges</h2><div><p>This project represents a best-effort attempt to document benchmarks-of-note that have been envloped by LLMs. Proper attribution, timing and scores have been difficult to determine definitively, hence there may be some errors.</p><div><p><span>To illustrate this, let's examine "Qwen-2.5-72B-instruct" on MATH:</span></p><ul><li><span></span><span>From Qwen's technical report - 83.1</span></li><li><span></span><span>From Stanford's HELM - 79.0</span></li><li><span></span><span>From Huggingface's Open LLM Leaderboard - 38.7</span></li></ul><p>These scores significantly deviatiate from eachother!</p><p>Hence we take scores in the following approach:</p><p>Please raise an issue or PR if you identify any discrepancies!</p><ol><li><p>From the author's paper/ technical report/ model card</p></li><li><p>From succeeding benckmark papers <span>e.g. SQuAD 2.0 discusses SQuAD 1.1 performance</span></p></li><li><p>From third party sources <span>e.g. Stanford's HELM</span></p></li></ol></div></div><p>Found an error or have additional data? <!-- --> <a href="https://github.com/R0bk/killedbyllm" target="_blank" rel="noopener noreferrer"><span>Contribute on GitHub</span><svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M15 3h6v6"></path><path d="M10 14 21 3"></path><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path></svg></a></p></div></div></div><p>P.S. The em dashes on this page were lovingly handwritten by humans.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Republishing my Simpsons fan site, twenty years later (111 pts)]]></title>
            <link>https://www.bingeclock.com/blog/post/republishing-my-simpsons-fan-site-twenty-years-later</link>
            <guid>42605707</guid>
            <pubDate>Sun, 05 Jan 2025 22:44:08 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bingeclock.com/blog/post/republishing-my-simpsons-fan-site-twenty-years-later">https://www.bingeclock.com/blog/post/republishing-my-simpsons-fan-site-twenty-years-later</a>, See on <a href="https://news.ycombinator.com/item?id=42605707">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="main-header">
            <p><img src="https://www.bingeclock.com/assets/img/logo.gif" alt="Bingeclock logo"></p><p><span>Bingeclock</span>
                <span>Engineering Blog</span>
            </p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[SrsRAN: Open-Source 4G/5G (103 pts)]]></title>
            <link>https://github.com/srsran</link>
            <guid>42605201</guid>
            <pubDate>Sun, 05 Jan 2025 21:27:25 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/srsran">https://github.com/srsran</a>, See on <a href="https://news.ycombinator.com/item?id=42605201">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="" data-view-component="true">
  

  
  <div>
    
    <article itemprop="text"><p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/srsran/.github/blob/main/images/srsran_banner.png"><img src="https://github.com/srsran/.github/raw/main/images/srsran_banner.png" alt="Open Source from SRS"></a></p>
<p dir="auto">The srsRAN software suite is an open-source collection of 4G and 5G software radio applications from <a href="https://srs.io/" rel="nofollow">SRS</a>. Applications are implemented in portable C++ with minimal third-party dependencies. Licensed under AGPLv3, srsRAN apps run on Linux with off-the-shelf compute and radio hardware.</p>
<ul dir="auto">
<li>The <a href="https://github.com/srsran/srsRAN_Project">srsRAN Project</a> is a 5G RAN CU+DU with a complete ORAN-native stack from I/Q to IP.</li>
<li>The <a href="https://github.com/srsran/srsRAN_4G">srsRAN 4G</a> suite provides an end-to-end 4G network implementation with full-stack applications for UE, eNodeB and EPC.</li>
</ul>
<p dir="auto"><h2 dir="auto">Get Involved</h2><a id="user-content-get-involved" aria-label="Permalink: Get Involved" href="#get-involved"></a></p>
<ul dir="auto">
<li><a href="https://docs.srsran.com/projects/project/en/latest/index.html#" rel="nofollow">Documentation</a></li>
<li><a href="https://github.com/srsran/srsRAN_Project/discussions">Discussions</a></li>
</ul>
<p dir="auto">Visit the <a href="https://www.srsran.com/" rel="nofollow">srsRAN Project Homepage</a> to learn more!</p>
</article>
  </div>

  

    <div>

  <h2>
        Pinned

    <span data-view-component="true">
      <span>Loading</span>
</span>
    <span role="status" aria-live="polite" data-error-text="Something went wrong." data-success-text="Order updated."></span>
  </h2>

      <ol>
      <li>
  <div>
      


      <p>
        Open source SDR 4G software suite from Software Radio Systems (SRS) https://docs.srsran.com/projects/4g
      </p>

      <p>
          <span>
  <span></span>
  <span itemprop="programmingLanguage">C++</span>
</span>

          <a href="https://github.com/srsran/srsRAN_4G/stargazers">
            <svg aria-label="stars" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
            3.5k
          </a>
          <a href="https://github.com/srsran/srsRAN_4G/forks">
            <svg aria-label="forks" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>
            1.2k
          </a>
      </p>
    </div>
</li>

      <li>
  <div>
      


      <p>
        Open source O-RAN 5G CU/DU solution from Software Radio Systems (SRS) https://docs.srsran.com/projects/project
      </p>

      <p>
          <span>
  <span></span>
  <span itemprop="programmingLanguage">C++</span>
</span>

          <a href="https://github.com/srsran/srsRAN_Project/stargazers">
            <svg aria-label="stars" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
            598
          </a>
          <a href="https://github.com/srsran/srsRAN_Project/forks">
            <svg aria-label="forks" role="img" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>
            196
          </a>
      </p>
    </div>
</li>

</ol>

</div>


    <div id="org-profile-repositories">
      <h3>
        
        Repositories
      </h3>
      
      <div id="org-repositories" data-delay-results="">
    <p><span data-autosearch-results="">Showing 10 of 12 repositories</span></p><div data-view-component="true">
  
  
    <ul data-view-component="true">
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      
      <p><span data-view-component="true"><a id="commit-activity-link-605068341" href="https://github.com/srsran/srsRAN_Project/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-755c94a8-c18e-4cb7-98c7-345c1c64f646" for="commit-activity-link-605068341" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/srsRAN_Project’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">

        <p><span>
  <span></span>
  <span itemprop="programmingLanguage">C++</span>
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" aria-label="598 stars" href="https://github.com/srsran/srsRAN_Project/stargazers" data-view-component="true">
          598</a>
        <p><span data-view-component="true">
          AGPL-3.0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:forks&quot;}" aria-label="196 forks" href="https://github.com/srsran/srsRAN_Project/forks" data-view-component="true">
          196</a>
      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="29 issues" href="https://github.com/srsran/srsRAN_Project/issues" data-view-component="true">
        29</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="3 pull requests" href="https://github.com/srsran/srsRAN_Project/pulls" data-view-component="true">
        3</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2024-12-20T09:46:25Z">Dec 20, 2024</relative-time>
</span></p></div></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      
      <p><span data-view-component="true"><a id="commit-activity-link-605122607" href="https://github.com/srsran/srsRAN_Project_docs/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-a41bb4bd-427b-4e76-8a49-cbeb5a251d82" for="commit-activity-link-605122607" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/srsRAN_Project_docs’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">


        <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" aria-label="11 stars" href="https://github.com/srsran/srsRAN_Project_docs/stargazers" data-view-component="true">
          11</a>
        <p><span data-view-component="true">
          AGPL-3.0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:forks&quot;}" aria-label="5 forks" href="https://github.com/srsran/srsRAN_Project_docs/forks" data-view-component="true">
          5</a>
      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="0 issues" href="https://github.com/srsran/srsRAN_Project_docs/issues" data-view-component="true">
        0</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="0 pull requests" href="https://github.com/srsran/srsRAN_Project_docs/pulls" data-view-component="true">
        0</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2024-12-17T15:17:40Z">Dec 17, 2024</relative-time>
</span></p></div></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/srsran/oran-sc-ric/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/srsran/oran-sc-ric" data-view-component="true">oran-sc-ric</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            Simplified ORAN SC RIC with improved usability and xApp examples
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-784759024" href="https://github.com/srsran/oran-sc-ric/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-1980b967-8503-4ae2-ba97-d2e6b0d36eaa" for="commit-activity-link-784759024" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/oran-sc-ric’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">

        <p><span>
  <span></span>
  <span itemprop="programmingLanguage">Python</span>
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" aria-label="43 stars" href="https://github.com/srsran/oran-sc-ric/stargazers" data-view-component="true">
          43</a>
        <p><span data-view-component="true">
          AGPL-3.0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:forks&quot;}" aria-label="8 forks" href="https://github.com/srsran/oran-sc-ric/forks" data-view-component="true">
          8</a>
      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="0 issues" href="https://github.com/srsran/oran-sc-ric/issues" data-view-component="true">
        0</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="0 pull requests" href="https://github.com/srsran/oran-sc-ric/pulls" data-view-component="true">
        0</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2024-12-16T21:43:23Z">Dec 16, 2024</relative-time>
</span></p></div></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/srsran/srsRAN_Project_helm/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/srsran/srsRAN_Project_helm" data-view-component="true">srsRAN_Project_helm</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            Helm charts and more to deploy cloud-native open-source RAN solutions
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-734038708" href="https://github.com/srsran/srsRAN_Project_helm/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-e3207cbe-0465-4730-84e6-33f9e4a750a7" for="commit-activity-link-734038708" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/srsRAN_Project_helm’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">

        <p><span>
  <span></span>
  <span itemprop="programmingLanguage">Smarty</span>
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" aria-label="3 stars" href="https://github.com/srsran/srsRAN_Project_helm/stargazers" data-view-component="true">
          3</a>
        <p><span data-view-component="true">
          AGPL-3.0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:forks&quot;}" aria-label="3 forks" href="https://github.com/srsran/srsRAN_Project_helm/forks" data-view-component="true">
          3</a>
      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="3 issues" href="https://github.com/srsran/srsRAN_Project_helm/issues" data-view-component="true">
        3</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="1 pull request" href="https://github.com/srsran/srsRAN_Project_helm/pulls" data-view-component="true">
        1</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2024-12-09T14:12:04Z">Dec 9, 2024</relative-time>
</span></p></div></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      
      <p><span data-view-component="true"><a id="commit-activity-link-650168572" href="https://github.com/srsran/srsRAN_matlab/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-db8c448f-f99f-4d97-9816-40a903ea4068" for="commit-activity-link-650168572" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/srsRAN_matlab’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">

        <p><span>
  <span></span>
  <span itemprop="programmingLanguage">MATLAB</span>
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" aria-label="28 stars" href="https://github.com/srsran/srsRAN_matlab/stargazers" data-view-component="true">
          28</a>
        <p><span data-view-component="true">
          BSD-2-Clause
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:forks&quot;}" aria-label="14 forks" href="https://github.com/srsran/srsRAN_matlab/forks" data-view-component="true">
          14</a>
      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="0 issues" href="https://github.com/srsran/srsRAN_matlab/issues" data-view-component="true">
        0</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="0 pull requests" href="https://github.com/srsran/srsRAN_matlab/pulls" data-view-component="true">
        0</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2024-12-02T18:11:11Z">Dec 2, 2024</relative-time>
</span></p></div></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/srsran/srsGUI/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/srsran/srsGUI" data-view-component="true">srsGUI</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            A graphics library for software radio.
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-32515533" href="https://github.com/srsran/srsGUI/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-7a40b1ce-4343-4093-8ba3-e079142293ae" for="commit-activity-link-32515533" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/srsGUI’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">

        <p><span>
  <span></span>
  <span itemprop="programmingLanguage">C++</span>
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" aria-label="143 stars" href="https://github.com/srsran/srsGUI/stargazers" data-view-component="true">
          143</a>
        <p><span data-view-component="true">
          LGPL-3.0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:forks&quot;}" aria-label="85 forks" href="https://github.com/srsran/srsGUI/forks" data-view-component="true">
          85</a>
      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="5 issues" href="https://github.com/srsran/srsGUI/issues" data-view-component="true">
        5</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="6 pull requests" href="https://github.com/srsran/srsGUI/pulls" data-view-component="true">
        6</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2024-08-15T16:54:25Z">Aug 15, 2024</relative-time>
</span></p></div></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/srsran/srsRAN_4G_docs/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/srsran/srsRAN_4G_docs" data-view-component="true">srsRAN_4G_docs</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            Documentation for srsRAN_4G from Software Radio Systems (SRS)
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-192319977" href="https://github.com/srsran/srsRAN_4G_docs/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-1349ff2a-7d48-479a-9bde-e9330e1476d2" for="commit-activity-link-192319977" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/srsRAN_4G_docs’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">


        <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" aria-label="40 stars" href="https://github.com/srsran/srsRAN_4G_docs/stargazers" data-view-component="true">
          40</a>
        <p><span data-view-component="true">
          AGPL-3.0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:forks&quot;}" aria-label="45 forks" href="https://github.com/srsran/srsRAN_4G_docs/forks" data-view-component="true">
          45</a>
      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="6 issues" href="https://github.com/srsran/srsRAN_4G_docs/issues" data-view-component="true">
        6</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="3 pull requests" href="https://github.com/srsran/srsRAN_4G_docs/pulls" data-view-component="true">
        3</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2024-06-18T10:24:53Z">Jun 18, 2024</relative-time>
</span></p></div></div>
</li>
        <li data-view-component="true">          <div data-view-component="true" itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope">
      
      <p><span data-view-component="true"><a id="commit-activity-link-14983921" href="https://github.com/srsran/srsRAN_4G/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-c41fd657-e929-4795-978e-4d9118d9b4e5" for="commit-activity-link-14983921" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/srsRAN_4G’s past year of commit activity</tool-tip></span>
</p></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/srsran/.github/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/srsran/.github" data-view-component="true">.github</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            To display org profile
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-799846227" href="https://github.com/srsran/.github/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-1de3eff4-e752-4e4e-a098-ca507af2e1d3" for="commit-activity-link-799846227" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/.github’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">


        <p><span aria-label="0 stars" data-view-component="true">
          0
</span>

        <span aria-label="0 forks" data-view-component="true">
          0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="0 issues" href="https://github.com/srsran/.github/issues" data-view-component="true">
        0</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="0 pull requests" href="https://github.com/srsran/.github/pulls" data-view-component="true">
        0</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2024-05-13T13:55:43Z">May 13, 2024</relative-time>
</span></p></div></div>
</li>
        <li data-view-component="true">          <div itemprop="owns" itemtype="http://schema.org/Code" itemscope="itemscope" data-view-component="true">
  
    <div data-view-component="true">
      <div data-view-component="true">
        <p><a itemprop="name codeRepository" data-hovercard-type="repository" data-hovercard-url="/srsran/srsRAN_docs/hovercard" data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:repo_nwo&quot;}" href="https://github.com/srsran/srsRAN_docs" data-view-component="true">srsRAN_docs</a>
        <span title="Label: Public" data-view-component="true">
          Public
</span></p><p itemprop="description" data-view-component="true">
            Landing page for srsRAN Project and srsRAN 4G documentation.
</p></div>
      <p><span data-view-component="true"><a id="commit-activity-link-605123476" href="https://github.com/srsran/srsRAN_docs/graphs/commit-activity" data-view-component="true"></a>  <tool-tip id="tooltip-1e1fbffc-e8bf-479f-a1a1-a1676a123295" for="commit-activity-link-605123476" popover="manual" data-direction="s" data-type="label" data-view-component="true">srsran/srsRAN_docs’s past year of commit activity</tool-tip></span>
</p></div>
    <div data-view-component="true">


        <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:stars&quot;}" aria-label="5 stars" href="https://github.com/srsran/srsRAN_docs/stargazers" data-view-component="true">
          5</a>
        <p><span data-view-component="true">
          AGPL-3.0
</span>
        <span aria-label="0 forks" data-view-component="true">
          0
</span></p><a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:issues&quot;}" aria-label="0 issues" href="https://github.com/srsran/srsRAN_docs/issues" data-view-component="true">
        0</a>

      <a data-analytics-event="{&quot;category&quot;:&quot;profiles:org_repos_list_item&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;target:pull_requests&quot;}" aria-label="0 pull requests" href="https://github.com/srsran/srsRAN_docs/pulls" data-view-component="true">
        0</a>
      <p><span data-view-component="true">
          Updated <relative-time datetime="2023-08-09T12:34:21Z">Aug 9, 2023</relative-time>
</span></p></div></div>
</li>
</ul>  
</div></div>
  </div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: Favorite blog in 2024? (143 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42604529</link>
            <guid>42604529</guid>
            <pubDate>Sun, 05 Jan 2025 19:58:39 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42604529">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="42606411"><td></td></tr>
            <tr id="42605913"><td></td></tr>
                <tr id="42607047"><td></td></tr>
                <tr id="42607285"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42607285" href="https://news.ycombinator.com/vote?id=42607285&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div><p>Yeah, honestly the answer is mainly not having a proper job (I don't have anyone who can tell me how to spend my time) combined with constructive procrastination: I've not been making nearly as much progress on my main projects over the past couple of months because there's been way too much stuff I want to write about.</p><p>I can write fast because I've been writing online for so long. Most short posts take about ten limited, longer form stuff takes one or two hours.</p><p>I also deliberately lower my standards for blogging - I often skip conclusions, and I'll publish a piece when I'm still not happy with it (provided I've satisfied myself with the fact checking side of things - I won't dash something out if I'm not certain it's true, at least to the best of my ability.)</p><p>I'm hoping to improve my overall balance a lot for 2025. Deliberately ending my at least one post a day blogging streak is part of that: <a href="https://simonwillison.net/2025/Jan/2/ending-a-year-long-posting-streak/" rel="nofollow">https://simonwillison.net/2025/Jan/2/ending-a-year-long-post...</a></p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42606060"><td></td></tr>
            <tr id="42606866"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42606866" href="https://news.ycombinator.com/vote?id=42606866&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div><p>The answer is almost always personal support / personal assistants.</p><p>There are for sure ways to increase your own personal productivity on its own, but the extra kick is usually from in-house cooks, cleaners, shoppers, schedulers, stylists, PAs, etc.</p><p>These people may or may not be spouses, family, friends and so on.</p><p>(This is a general response, I do not know Simon Willison or any of his work or life.)</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42607302"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42607302" href="https://news.ycombinator.com/vote?id=42607302&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div><p>I wish I had a personal staff like that!</p><p>We do have a couple of hours of cleaning help once a week but other than that my partner and I split the chores.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42606966"><td></td></tr>
            <tr id="42606264"><td></td></tr>
                <tr id="42606327"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42606327" href="https://news.ycombinator.com/vote?id=42606327&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div>
                  <p>If I sit in front of a computer all the time I'm awake, I still wouldn't be able to be producing as much content as Simon Willison. My productivity would start to decline after 5~6 hours, and probably diminish after 8~9 hours. The consistency in his output is just magnificent and awe-inspiring.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="42607332"><td></td></tr>
            <tr id="42607222"><td></td></tr>
            <tr id="42606248"><td></td></tr>
                <tr id="42606342"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42606342" href="https://news.ycombinator.com/vote?id=42606342&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div><p>Serious question, how do you follow crypto news and not get kinda depressed about it?</p><p>I find the concept(s) and tech interesting, but crypto news is so full of drama and horrible people / acts it's hard to enjoy for me.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42606475"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42606475" href="https://news.ycombinator.com/vote?id=42606475&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div><p>Vitalik’s blog is pretty top tier</p><p>Most coins/chains/platforms have some sort of newsletters. You can find most of this stuff by looking up the ticker on coingecko or similar.</p><p>There are dedicated “crypto news” platforms (e.g. coindesk)</p><p>If your news is full of drama and horrible people… thats on you tbh. The algorithms are primed for that sort of content, but curation is up to you.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="42606556"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_42606556" href="https://news.ycombinator.com/vote?id=42606556&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div>
                  <p>It's not "my news", I'm not talking about some feed.  It's what is on the sites that I've found ...</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42606924"><td></td></tr>
            <tr id="42606616"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_42606616" href="https://news.ycombinator.com/vote?id=42606616&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div>
                  <p>You just laugh at it, the same way you laugh at the breathless AI grifters who have the exact same energy (and are largely the same people).</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="42607239"><td></td></tr>
            <tr id="42606560"><td></td></tr>
            <tr id="42606932"><td></td></tr>
            <tr id="42607116"><td></td></tr>
            <tr id="42605911"><td></td></tr>
            <tr id="42606172"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42606172" href="https://news.ycombinator.com/vote?id=42606172&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div><p>Quite a fun read more often than not: <a href="https://dynomight.net/" rel="nofollow">https://dynomight.net/</a></p><p>Takes all kinds of lifestyle and tech topics and nerds out about them thoroughly. If you've ever wanted to see mundane things overanalyzed and backed with solid facts, I recommend.</p><p>I don't necessarily agree with all their views, but I've always enjoyed an article and it's rarely if ever confidently wrong.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42606347"><td></td></tr>
            <tr id="42606672"><td></td></tr>
            <tr id="42605896"><td></td></tr>
            <tr id="42606474"><td></td></tr>
            <tr id="42606168"><td></td></tr>
            <tr id="42606792"><td></td></tr>
            <tr id="42606162"><td></td></tr>
            <tr id="42606094"><td></td></tr>
            <tr id="42606644"><td></td></tr>
            <tr id="42606214"><td></td></tr>
            <tr id="42606304"><td></td></tr>
            <tr id="42605999"><td></td></tr>
            <tr id="42606036"><td></td></tr>
                <tr id="42607278"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_42607278" href="https://news.ycombinator.com/vote?id=42607278&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div>
                  <p>Don't bother with this one - the latest post (The Return of Magic) is promoting a load of unscientific woo (The Telepathy Tapes). The author seems to seriously mean the title of the post literally.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="42606127"><td></td></tr>
            <tr id="42606653"><td></td></tr>
            <tr id="42606535"><td></td></tr>
            <tr id="42607064"><td></td></tr>
            <tr id="42606617"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_42606617" href="https://news.ycombinator.com/vote?id=42606617&amp;how=up&amp;goto=item%3Fid%3D42604529"></a></center>    </td><td><br><div><p><a href="https://imightbewrong.substack.com/" rel="nofollow">https://imightbewrong.substack.com/</a></p><p>It's not focused on tech, but occasionally touches on policy issues that are tech-adjacent. It's a refreshing, often insightful, and usually very funny take on current events. The author is a former writer for the HBO show "Last Week Tonight with John Oliver".</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="42606101"><td></td></tr>
            <tr id="42606715"><td></td></tr>
            <tr id="42606691"><td></td></tr>
            <tr id="42606609"><td></td></tr>
            <tr id="42606726"><td></td></tr>
            <tr id="42606451"><td></td></tr>
            </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Reverse Engineering the Constants in the Pentium FPU (101 pts)]]></title>
            <link>http://www.righto.com/2025/01/pentium-floating-point-ROM.html</link>
            <guid>42604350</guid>
            <pubDate>Sun, 05 Jan 2025 19:34:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="http://www.righto.com/2025/01/pentium-floating-point-ROM.html">http://www.righto.com/2025/01/pentium-floating-point-ROM.html</a>, See on <a href="https://news.ycombinator.com/item?id=42604350">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-body-6703392534342352706" itemprop="description articleBody">
<p>Intel released the powerful Pentium processor in 1993, establishing a long-running brand of high-performance processors.<span id="fnref:lineage"><a href="#fn:lineage">1</a></span>
The Pentium includes a floating-point unit that can rapidly compute functions such as sines, cosines, logarithms, and exponentials.
But how does the Pentium compute these functions?
Earlier Intel chips used binary algorithms called CORDIC, but the Pentium switched to polynomials to approximate these transcendental functions much faster.
The polynomials have carefully-optimized coefficients that are stored in a special ROM inside the chip's floating-point unit.
Even though the Pentium is a complex chip with 3.1 million transistors, it is possible to see these transistors under a microscope and read out
these constants.
The first part of this post discusses how the floating point constant ROM is implemented in hardware.
The second part explains how the Pentium uses these constants to evaluate sin, log, and other
functions.</p>
<p>The photo below shows the Pentium's thumbnail-sized silicon die under a microscope.
I've labeled the main functional blocks; the floating-point unit is in the lower right.
The constant ROM (highlighted) is at the bottom of the floating-point unit.
Above the floating-point unit, the microcode ROM holds micro-instructions, the individual steps for complex
instructions. To execute an instruction such as sine, the microcode ROM directs the floating-point unit through
dozens of steps to compute the approximation polynomial using constants from the constant ROM.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/pentium-labeled.jpg"><img alt="Die photo of the Intel Pentium processor with the floating point constant ROM highlighted in red. Click this image (or any other) for a larger version." height="627" src="https://static.righto.com/images/pentium-fp-rom/pentium-labeled-w600.jpg" title="Die photo of the Intel Pentium processor with the floating point constant ROM highlighted in red. Click this image (or any other) for a larger version." width="600"></a></p><p>Die photo of the Intel Pentium processor with the floating point constant ROM highlighted in red. Click this image (or any other) for a larger version.</p>
<!--
Early microprocessors didn't support floating point instructions in hardware, so floating point operations were performed in software, very slowly.
Intel introduced the 8087 chip in 1980 to improve floating-point performance on the 8086 and 8088 processors, and it was used with the original IBM PC.
Since early microprocessors operated only on integers, arithmetic with floating-point numbers was slow and transcendental operations such as arctangent or logarithms were even worse.
Adding the 8087 co-processor chip to a system made floating-point operations up to 100 times faster.

Starting with the 486 processor (1989), Intel included the floating-point unit as part of the processor, rather than an add-on chip.
Similarly, the Pentium included a floating-point unit.

    The 486 processor was also available in a lower-cost version without a floating-point unit, the i486SX. A floating-point coprocessor could be used with
    the i486SX. This coprocessor, the 80487 (i487SX) was really a full 486 processor including floating point.

-->

<!--
For details on the Pentium's implementation, including the floating-point unit, see [Design of the Intel Pentium Processor](https://doi.org/10.1109/ICCD.1993.393370).
-->

<h2>Finding pi in the constant ROM</h2>
<p>In binary, pi is <code>11.00100100001111110...</code> but what does this mean?
To interpret this, the value <code>11</code> to the left of the binary point is simply 3 in binary. (The "binary point" is the
same as a decimal point, except for binary.)
The digits to the right of the binary point have the values 1/2, 1/4, 1/8, and so forth.
Thus, the binary value `11.001001000011... corresponds to 3 + 1/8 + 1/64 + 1/4096 + 1/8192 + ..., which matches the decimal value of pi.
Since pi is irrational, the bit sequence is infinite and non-repeating; the value in the ROM is truncated to 67 bits
and stored as a floating point number.</p>
<p>A floating point number is represented by two parts: the exponent and the significand.
Floating point numbers include very large numbers such as 6.02×10<sup>23</sup> and very small numbers such as 1.055×10<sup>−34</sup>.
In decimal, 6.02×10<sup>23</sup> has a significand (or mantissa) of 6.02, multiplied by a power of 10 with an exponent of 23.
In binary, a floating point number is represented similarly, with a significand and exponent, except the significand is multiplied by a power of 2 rather than 10.
For example, pi is represented in floating point as 1.1001001...×2<sup>1</sup>.</p>
<p>The diagram below shows how pi is encoded in the Pentium chip. Zooming in
shows the constant ROM.
Zooming in on a small part of the ROM shows the rows of transistors that store the constants.
The arrows point to the transistors representing the bit sequence 11001001, where a 0 bit is represented by a transistor (vertical white line) and a 1 bit is
represented by no transistor (solid dark silicon).
Each magnified black rectangle at the bottom has two potential transistors, storing two bits.
The key point is that by looking at the pattern of stripes, we can determine the pattern of transistors and thus the value
of each constant, pi in this case.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/pi-labeled.jpg"><img alt="A portion of the floating-point ROM, showing the value of pi. Click this image (or any other) for a larger version." height="516" src="https://static.righto.com/images/pentium-fp-rom/pi-labeled-w800.jpg" title="A portion of the floating-point ROM, showing the value of pi. Click this image (or any other) for a larger version." width="800"></a></p><p>A portion of the floating-point ROM, showing the value of pi. Click this image (or any other) for a larger version.</p>
<p>The bits are spread out because each row of the ROM holds eight interleaved constants to
improve the layout.
Above the ROM bits, multiplexer circuitry selects the desired constant from the eight in the activated row.
In other words, by selecting a row and then one of the eight constants in the row, one of the 304 constants in the ROM is accessed.
The ROM stores many more digits of pi than shown here; the diagram shows 8 of the 67 significand bits.</p>
<h2>Implementation of the constant ROM</h2>
<p>The ROM is
built from MOS (metal-oxide-semiconductor) transistors, the transistors used in all modern computers.
The diagram below shows the structure of an MOS transistor.
An integrated circuit is constructed from a silicon substrate.
Regions of the silicon are doped with impurities to create "diffusion" regions with desired electrical properties.
The transistor can be viewed as a switch, allowing current to flow between two diffusion regions called the source and drain.
The transistor is controlled by the gate, made of a special type of silicon called polysilicon.
Applying voltage to the gate lets current flow between the source and drain, which is otherwise blocked. 
Most computers use two types of MOS transistors: NMOS and PMOS. The two types have similar construction but reverse the
doping; NMOS uses n-type diffusion regions as shown below, while PMOS uses p-type diffusion regions.
Since the two types are complementary (C),
circuits built with the two types of transistors are called CMOS.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/mosfet.jpg"><img alt="Structure of a MOSFET in an integrated circuit." height="234" src="https://static.righto.com/images/pentium-fp-rom/mosfet-w400.jpg" title="Structure of a MOSFET in an integrated circuit." width="400"></a></p><p>Structure of a MOSFET in an integrated circuit.</p>
<p>The image below shows how a transistor in the ROM looks under the microscope. 
The pinkish regions are the doped silicon that forms the transistor's source and drain.
The vertical white line is the polysilicon that forms the transistor's gate.
For this photo, I removed the chip's three layers of metal, leaving just the underlying silicon and the polysilicon.
The circles in the source and drain are tungsten contacts that connect the silicon to the metal layer above.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/transistor.jpg"><img alt="One transistor in the constant ROM." height="138" src="https://static.righto.com/images/pentium-fp-rom/transistor-w300.jpg" title="One transistor in the constant ROM." width="300"></a></p><p>One transistor in the constant ROM.</p>
<p>The diagram below shows eight bits of storage. Each of the four pink silicon rectangles has two potential transistors.
If a polysilicon gate crosses the silicon, a transistor is formed; otherwise there is no transistor.
When a select line (horizontal polysilicon) is energized, it will turn on all the transistors in that row.
If a transistor is present, the corresponding ROM bit is 0 because the transistor will pull the output line to ground. If a transistor
is absent, the ROM bit is 1.
Thus, the pattern of transistors determines the data stored in the ROM.
The ROM holds 26144 bits (304 words of 86 bits) so it has 26144 potential transistors.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/rom-cells.jpg"><img alt="Eight bits of storage in the ROM." height="180" src="https://static.righto.com/images/pentium-fp-rom/rom-cells-w600.jpg" title="Eight bits of storage in the ROM." width="600"></a></p><p>Eight bits of storage in the ROM.</p>
<!--
x86 extended precision: 80 bits: sign, 15-bit exponent, 64-bit significand (mantissa).
Internally, the floating-point unit performs calculations with a 68-bit significand for additional accuracy.
The registers hold 18 bits in the sign/exponent part and 68 bits in the significand part.
-->

<p>The photo below shows the bottom layer of metal (M1): vertical metal wires that provide the ROM outputs and
supply ground to the ROM.
(These wires are represented by gray lines in the schematic above.)
The polysilicon transistors (or gaps as appropriate) are barely visible between the metal lines.
Most of the small circles are tungsten contacts to the silicon or polysilicon; compare with the photo above.
Other circles are tungsten vias to the metal layer on top (M2), horizontal wiring that I removed for this photo.
The smaller metal "tabs" act as jumpers between the horizontal metal select lines in M2 and the
polysilicon select lines.
The top metal layer (M3, not visible) has thicker vertical wiring for the chip's primary distribution power and ground.
Thus, the three metal layers alternate between horizontal and vertical wiring, with vias between the layers.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/rom-metal.jpg"><img alt="A closeup of the ROM showing the bottom metal layer." height="249" src="https://static.righto.com/images/pentium-fp-rom/rom-metal-w450.jpg" title="A closeup of the ROM showing the bottom metal layer." width="450"></a></p><p>A closeup of the ROM showing the bottom metal layer.</p>
<p>The ROM is implemented as two grids of cells (below): one to hold exponents and one to hold significands, as shown below.
The exponent grid (on the left) has 38 rows and 144 columns of transistors, while the significand grid (on the right) has 38 rows and 544 columns.
To make the layout work better, each row holds eight different constants; the bits are interleaved so the ROM holds the first bit of eight constants,
then the second bit of eight constants, and so forth.
Thus, with 38 rows, the ROM holds 304 constants; each constant has 18 bits in the exponent part and 68 bits in the significand section.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/rom-overview-diagram.jpg"><img alt="A diagram of the constant ROM and supporting circuitry. Most of the significand ROM has been cut out to make it fit." height="188" src="https://static.righto.com/images/pentium-fp-rom/rom-overview-diagram-w700.jpg" title="A diagram of the constant ROM and supporting circuitry. Most of the significand ROM has been cut out to make it fit." width="700"></a></p><p>A diagram of the constant ROM and supporting circuitry. Most of the significand ROM has been cut out to make it fit.</p>
<p>The exponent part of each constant consists of 18 bits: a 17-bit exponent and one bit for
the sign of the significand and thus the constant.
There is no sign bit for the exponent because 
the exponent is stored with 65535 (<code>0x0ffff</code>) added to it, avoiding negative values.
The 68-bit significand entry in the ROM consists of a mysterious flag bit<span id="fnref:flag"><a href="#fn:flag">2</a></span> followed by the 67-bit significand; the first bit of the significand is the integer part and the remainder is
the fractional part.<span id="fnref:significand"><a href="#fn:significand">3</a></span>
The complete contents of the ROM are in the appendix at the bottom of this post.</p>
<p>To select a particular constant, the "row select" circuitry between the two sections activates one of the 38 rows. That row provides 144+544 bits to the selection
circuitry above the ROM. 
This circuitry has 86 multiplexers; each multiplexer selects one bit out of the group of 8, selecting the desired constant.
The significand bits flow into the floating-point unit datapath circuitry above the ROM.
The exponent circuitry, however, is in the upper-left corner of the floating-point unit, a considerable distance from the ROM, so the exponent bits travel through a bus to the exponent circuitry.</p>
<p>The row select circuitry consists of gates to decode the row number, along with high-current drivers to energize
the selected row in the ROM.
The photo below shows a closeup of two row driver circuits, next to some ROM cells.
At the left, PMOS and NMOS transistors implement a gate to select the row. Next, larger NMOS and PMOS transistors form part of the driver.
The large square structures are bipolar NPN transistors; the Pentium is unusual because it uses both bipolar transistors and CMOS, a technique called BiCMOS.<span id="fnref:drivers"><a href="#fn:drivers">4</a></span>
Each driver occupies as much height as four rows of the ROM, so there are four drivers arranged horizontally;
only one is visible in the photo.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/rom-drivers.jpg"><img alt="ROM drivers implemented with BiCMOS." height="190" src="https://static.righto.com/images/pentium-fp-rom/rom-drivers-w400.jpg" title="ROM drivers implemented with BiCMOS." width="400"></a></p><p>ROM drivers implemented with BiCMOS.</p>
<h2>Structure of the floating-point unit</h2>
<p>The floating-point unit is structured with data flowing vertically through horizontal functional units, as shown below.
The functional units—adders, shifters, registers, and comparators—are arranged in rows.
This collection of functional units with data flowing through them is called the <em>datapath</em>.<span id="fnref:integer"><a href="#fn:integer">5</a></span></p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/datapath.jpg"><img alt="The datapath of the floating-point unit. The ROM is at the bottom." height="807" src="https://static.righto.com/images/pentium-fp-rom/datapath-w300.jpg" title="The datapath of the floating-point unit. The ROM is at the bottom." width="300"></a></p><p>The datapath of the floating-point unit. The ROM is at the bottom.</p>
<p>Each functional unit is constructed from cells, one per bit, with the high-order bit on the left and the low-order bit on the right.
Each cell has the same width—38.5 µm—so the functional units can be connected like Lego blocks snapping together, minimizing the wiring.
The height of a functional unit varies as needed, depending on the complexity of the circuit.
Functional units typically have 69 bits, but some are wider, so the edges of the datapath circuitry are ragged.</p>
<p>This cell-based construction explains why the ROM has eight constants per row.
A ROM bit requires a single transistor, which is much narrower than, say, an adder. Thus, putting one bit in each 38.5 µm cell would waste most of the space.
Compacting the ROM bits into a narrow block would also be inefficient, requiring diagonal wiring to connect each ROM bit to the corresponding datapath bit.
By putting eight bits for eight different constants into each cell, the width of a ROM cell matches the rest of the datapath and the alignment of bits
is preserved.
Thus, the layout of the ROM in silicon is dense, efficient, and matches the width of the rest of the floating-point unit.</p>
<h2>Polynomial approximation: don't use a Taylor series</h2>
<p>Now I'll move from the hardware to the constants.
If you look at the constant ROM contents in the appendix, you may notice that many constants are close to reciprocals or reciprocal factorials, but don't quite
match. For instance, one constant is 0.1111111089, which is close to 1/9, but visibly wrong.
Another constant is almost 1/13! (factorial) but wrong by 0.1%. What's going on? </p>
<p>The Pentium uses polynomials to approximate transcendental functions (sine, cosine, tangent, arctangent, and base-2 powers and logarithms).
Intel's earlier floating-point units, from the 8087 to the 486, used an algorithm called CORDIC that generated results
a bit at a time.
However, the Pentium takes advantage of its fast multiplier and larger ROM and uses polynomials instead,
computing results two to three times faster than the 486 algorithm.</p>
<p>You may recall from calculus that a Taylor series polynomial approximates a function near a point (typically 0).
For example, the equation below gives the Taylor series for sine.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/taylor-equation.png"><img alt="" height="49" src="https://static.righto.com/images/pentium-fp-rom/taylor-equation-w350.png" title="" width="350"></a></p>
<!-- \textnormal{sin}(x) = x - \frac{x^3} {3!} + \frac{x^5} {5!} - \frac{x^7} {7!}  + \frac{x^9} {9!} - ...
https://latex2image.joeraut.com/
-->

<p>Using the five terms shown above generates a function that looks indistinguishable from sine in the graph below.
However, it turns out that this approximation has too much error to be useful.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/taylor4.jpg"><img alt="Plot of the sine function and the Taylor series approximation." height="214" src="https://static.righto.com/images/pentium-fp-rom/taylor4-w300.jpg" title="Plot of the sine function and the Taylor series approximation." width="300"></a></p><p>Plot of the sine function and the Taylor series approximation.</p>
<p>The problem is that a Taylor series is very accurate near 0, but the error soars near the edges of the argument range, as shown in the graph on the left below.
When implementing a function, we want the function to be accurate everywhere, not just close to 0, so the Taylor
series isn't good enough.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/sin-error-comparison.jpg"><img alt="The absolute error for a Taylor-series approximation to sine (5 terms), over two different argument ranges." height="211" src="https://static.righto.com/images/pentium-fp-rom/sin-error-comparison-w600.jpg" title="The absolute error for a Taylor-series approximation to sine (5 terms), over two different argument ranges." width="600"></a></p><p>The absolute error for a Taylor-series approximation to sine (5 terms), over two different argument ranges.</p>
<p>One improvement is called range reduction: shrinking the argument to a smaller range so you're in the accurate flat part.<span id="fnref:range"><a href="#fn:range">6</a></span>
The graph on the right looks at the Taylor series over the smaller range [-1/32, 1/32].
This decreases the error dramatically, by about 22 orders of magnitude (note the scale change).
However, the error still shoots up at the edges of the range in exactly the same way.
No matter how much
you reduce the range, there is almost no error in the middle, but the edges have a lot of error.<span id="fnref:scaling"><a href="#fn:scaling">7</a></span></p>
<p>How can we get rid of the error near the edges? The trick is to tweak the coefficients of the Taylor series in a special way that
will increase the error in the middle, but decrease the error at the edges by much more.
Since we want to minimize the maximum error across the range (called <em>minimax</em>), this tradeoff is beneficial.
Specifically, the coefficients can be optimized by a process called the Remez algorithm.<span id="fnref:remez"><a href="#fn:remez">8</a></span>
As shown below, changing the coefficients by less than 1% dramatically improves the accuracy.
The optimized function (blue) has much lower error over the full range, so it is a much better approximation than the Taylor series (orange).</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/taylor-error.png"><img alt="Comparison of the absolute error from the Taylor series and a Remez-optimized polynomial, both with maximum term x9. This Remez polynomial is not one from the Pentium." height="213" src="https://static.righto.com/images/pentium-fp-rom/taylor-error-w300.png" title="Comparison of the absolute error from the Taylor series and a Remez-optimized polynomial, both with maximum term x9. This Remez polynomial is not one from the Pentium." width="300"></a></p><p>Comparison of the absolute error from the Taylor series and a Remez-optimized polynomial, both with maximum term x<sup>9</sup>. This Remez polynomial is not one from the Pentium.</p>
<p>To summarize, a Taylor series is useful in calculus, but shouldn't be used to approximate a function. You get
a much better approximation by modifying the coefficients very slightly with the Remez algorithm. This explains
why the coefficients in the ROM almost, but not quite, match a Taylor series.</p>
<h3>Arctan</h3>
<p>I'll now look at the Pentium's constants for different transcendental functions.
The constant ROM contains coefficients for two arctan polynomials, one for single precision and one
for double precision.
These polynomials almost match the Taylor series, but have been modified for accuracy.
The ROM also holds the values for <em>arctan(1/32)</em> through <em>arctan(32/32)</em>; the
range reduction process uses these constants with a trig identity to reduce the argument range to
[-1/64, 1/64].<span id="fnref:atan"><a href="#fn:atan">9</a></span>
You can see the arctan constants in the Appendix.</p>
<p>The graph below shows the error for the Pentium's arctan polynomial (blue) versus the Taylor series of the same length (orange).
The
Pentium's polynomial is superior due to the Remez optimization.
Although the Taylor series polynomial is much flatter in the middle, the error soars near the boundary.
The Pentium's polynomial wiggles more but it maintains a low error across the whole range.
The error in the Pentium polynomial blows up outside this range, but that doesn't matter.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/arctan2-error.png"><img alt="Comparison of the Pentium's double-precision arctan polynomial to the Taylor series." height="307" src="https://static.righto.com/images/pentium-fp-rom/arctan2-error-w400.png" title="Comparison of the Pentium's double-precision arctan polynomial to the Taylor series." width="400"></a></p><p>Comparison of the Pentium's double-precision arctan polynomial to the Taylor series.</p>
<h3>Trig functions</h3>
<p>Sine and cosine each have two polynomial implementations, one with 4 terms in the ROM and one with 6 terms in
the ROM.
(Note that coefficients of 1 are not stored in the ROM.)
The constant table also holds 16 constants such as <em>sin(36/64)</em> and <em>cos(18/64)</em> that are used for argument range reduction.<span id="fnref:sin"><a href="#fn:sin">10</a></span>
The Pentium computes tangent by dividing the sine by the cosine.
I'm not showing a graph because the Pentium's error came out worse than the Taylor series, so either I have an
error in a coefficient or I'm doing something wrong.</p>
<h3>Exponential</h3>
<p>The Pentium has an instruction to compute a power of two.<span id="fnref:exponential"><a href="#fn:exponential">11</a></span>
There are two sets of polynomial coefficients for exponential, one with 6 terms in the ROM
and one with 11 terms in the ROM.
Curiously, the polynomials in the ROM compute <em>e<sup>x</sup></em>, not <em>2<sup>x</sup></em>.
Thus, the Pentium must scale the argument by <em>ln(2)</em>, a constant that is in the ROM.
The error graph below shows the advantage of the Pentium's polynomial over the Taylor series polynomial.</p>
<p><a href="https://static.righto.com/images/pentium-fp-rom/exp-error.png"><img alt="The Pentium's 6-term exponential polynomial, compared with the Taylor series." height="307" src="https://static.righto.com/images/pentium-fp-rom/exp-error-w400.png" title="The Pentium's 6-term exponential polynomial, compared with the Taylor series." width="400"></a></p><p>The Pentium's 6-term exponential polynomial, compared with the Taylor series.</p>
<p>The polynomial handles the narrow argument range [-1/128, 1/128].
Observe that when computing a power of 2 in binary, exponentiating the integer part of the argument is trivial, since it becomes the result's exponent.
Thus, the function only needs to handle the range [1, 2].
For range reduction, the constant ROM holds 64 values of the form <em>2<sup>n/128</sup>-1</em>.
To reduce the range from [1, 2] to [-1/128, 1/128], the closest <em>n/128</em> is subtracted from the argument and then the result is multiplied by the corresponding constant in the ROM.
The constants are spaced irregularly, presumably for accuracy; some are in steps of 4/128 and others are in steps of 2/128.</p>
<h3>Logarithm</h3>
<p>The Pentium can compute base-2 logarithms.<span id="fnref:log"><a href="#fn:log">12</a></span>
See the comments for a discussion of how these constants are used. 
The ROM also has 64 constants for range reduction: log<sub>2</sub>(1+n/64) for odd n from 1 to 63.
The unusual feature of these constants is that each constant is split into two pieces to increase the bits of accuracy:
the top part has 40 bits of accuracy and the bottom part has 67 bits of accuracy, providing a 107-bit constant
in total.
The extra bits are required because logarithms are hard to compute accurately.</p>
<h3>Other constants</h3>
<p>The x87 floating-point instruction set provides direct access to a handful of constants—0, 1, pi, 
log<sub>2</sub>(10), log<sub>2</sub>(e), log<sub>10</sub>(2), and log<sub>e</sub>(2)—so these constants
are stored in the ROM.
(These logs are useful for changing the base for logs and exponentials.)
The ROM holds other constants for internal use by the floating-point unit such as -1, 2, 7/8, 9/8, pi/2, pi/4, and 2log<sub>2</sub>(e).
The ROM also holds bitmasks for extracting part of a word, for instance accessing 4-bit BCD digits in a word.
Although I can interpret most of the values, there are a few mysteries such as a mask with the inscrutable value
<code>0x3e8287c</code>.
The ROM has 34 unused entries at the end; these entries hold words that include the descriptive hex value <code>0xbad</code> or perhaps <code>0xbadfc</code> for "bad float constant".</p>
<h2>How I examined the ROM</h2>
<p>To analyze the Pentium, I removed the metal and oxide layers with various chemicals (sulfuric acid, phosphoric acid, Whink).
(I later discovered that simply sanding the die works surprisingly well.)
Next, I took many photos of the ROM with a <a href="https://www.righto.com/2015/12/creating-high-resolution-integrated.html">microscope</a>.
The feature size of this Pentium is 800 nm, just slightly larger than visible light (380-700 nm).
Thus, the die can be examined under an optical microscope, but it is getting close to the limits.
To determine the ROM contents, I tediously went through the ROM images, examining each of the 26144 bits and marking each transistor.
After figuring out the ROM format,
I wrote programs to combine simple functions in many different combinations to
determine the mathematical expression such as <em>arctan(19/32)</em> or <em>log<sub>2</sub>(10)</em>.
Because the polynomial constants are optimized and my ROM data has bit errors, my program needed
checks for inexact matches, both numerically and bitwise.
Finally, I had to determine how the constants would be used in algorithms.</p>
<h2>Conclusions</h2>
<p>By examining the Pentium's floating-point ROM under a microscope, it is possible to extract the 304 constants
stored in the ROM.
I was able to determine the meaning of most of these constants and deduce some of the floating-point algorithms used 
by the Pentium.
These constants illustrate how polynomials can efficiently compute transcendental functions.
Although Taylor series polynomials are well known, they are surprisingly inaccurate and should be avoided.
Minor changes to the coefficients through the Remez algorithm, however, yield much better polynomials.</p>
<p>In a <a href="https://www.righto.com/2020/05/extracting-rom-constants-from-8087-math.html">previous article</a>, I examined the floating-point constants stored in the 8087 coprocessor.
The Pentium has 304 constants in the Pentium, compared to just 42 in the 8087, supporting more efficient algorithms.
Moreover, the 8087 was an external floating-point unit, while the Pentium's floating-point unit is part of the
processor.
The changes between the 8087 (1980, 65,000 transistors) and the Pentium (1993, 3.1 million transistors) are due
to the exponential improvements in transistor count, as described by Moore's Law.</p>
<p>I plan to write more about the Pentium so follow me on Bluesky (<a href="https://bsky.app/profile/righto.com">@righto.com</a>) or 
<a href="https://www.righto.com/feeds/posts/default">RSS</a> for updates. (I'm no longer on Twitter.)
I've also written about <a href="https://www.righto.com/2024/12/this-die-photo-of-pentium-shows.html">the Pentium division bug</a> and the <a href="https://www.righto.com/2024/08/pentium-navajo-fairchild-shiprock.html">Pentium Navajo rug</a>.
Thanks to CuriousMarc for microscope help. Thanks to <a href="https://news.ycombinator.com/item?id=42606975">lifthrasiir</a> for identifying some constants.</p>
<h2>Appendix: The constant ROM</h2>
<p>The table below lists the 304 constants in the Pentium's floating-point ROM.
The first four columns show the values stored in the ROM: the exponent, the sign bit, the flag bit, and the
significand.
To avoid negative exponents, exponents are stored with the constant <code>0x0ffff</code> added. For example, the value <code>0x0fffe</code>
represents an exponent of -1, while <code>0x10000</code> represents an exponent of 1.
The constant's approximate decimal value is in the "value" column.</p>
<p>Special-purpose values are colored. Specifically, "normal" numbers are in black.
Constants with an exponent of all 0's are in blue,
constants with an exponent of all 1's are in red,
constants with an unusually large or small exponent are in green;
these appear to be bitmasks rather than numbers.
Unused entries are in gray.
Inexact constants (due to Remez optimization) are represented with the approximation symbol "≈".</p>
<p>This information is from my reverse engineering, so there will be a few errors.</p>

<table>
  <tbody><tr><th></th><th>exp</th><th>S</th><th>F</th><th>significand</th><th>value</th><th>meaning</th></tr>

<tr>
<td>0</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>07878787878787878</td>
<td></td>
<td>BCD mask by 4's</td>
</tr>
<tr>
<td>1</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>007f807f807f807f8</td>
<td></td>
<td>BCD mask by 8's</td>
</tr>
<tr>
<td>2</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>00007fff80007fff8</td>
<td></td>
<td>BCD mask by 16's</td>
</tr>
<tr>
<td>3</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>000000007fffffff8</td>
<td></td>
<td>BCD mask by 32's</td>
</tr>
<tr>
<td>4</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>78000000000000000</td>
<td></td>
<td>4-bit mask</td>
</tr>
<tr>
<td>5</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>18000000000000000</td>
<td></td>
<td>2-bit mask</td>
</tr>
<tr>
<td>6</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>27000000000000000</td>
<td></td>
<td>?</td>
</tr>
<tr>
<td>7</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>363c0000000000000</td>
<td></td>
<td>?</td>
</tr>
<tr>
<td>8</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>3e8287c0000000000</td>
<td></td>
<td>?</td>
</tr>
<tr>
<td>9</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>470de4df820000000</td>
<td></td>
  <td>2<sup>13</sup>×10<sup>16</sup></td>
</tr>
<tr>
<td>10</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>5c3bd5191b525a249</td>
<td></td>
  <td>2<sup>123</sup>/10<sup>17</sup></td>
</tr>
<tr>
<td>11</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>00000000000000007</td>
<td></td>
<td>3-bit mask</td>
</tr>
<tr>
<td>12</td>
<td>1ffff</td>
<td>1</td>
<td>1</td>
<td>7ffffffffffffffff</td>
<td></td>
<td>all 1's</td>
</tr>
<tr>
<td>13</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>0000007ffffffffff</td>
<td></td>
<td>43-bit mask</td>
</tr>
<tr>
<td>14</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>00000000000003fff</td>
<td></td>
<td>14-bit mask</td>
</tr>
<tr>
<td>15</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>00000000000000000</td>
<td></td>
<td>all 0's</td>
</tr>
<tr>
<td>16</td>
<td>0ffff</td>
<td>0</td>
<td>0</td>
<td>40000000000000000</td>
<td>&nbsp;1</td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td>10000</td>
<td>0</td>
<td>0</td>
<td>6a4d3c25e68dc57f2</td>
<td>&nbsp;3.3219280949</td>
<td>log<sub>2</sub>(10)</td>
</tr>
<tr>
<td>18</td>
<td>0ffff</td>
<td>0</td>
<td>0</td>
<td>5c551d94ae0bf85de</td>
<td>&nbsp;1.4426950409</td>
<td>log<sub>2</sub>(e)</td>
</tr>
<tr>
<td>19</td>
<td>10000</td>
<td>0</td>
<td>0</td>
<td>6487ed5110b4611a6</td>
<td>&nbsp;3.1415926536</td>
<td>pi</td>
</tr>
<tr>
<td>20</td>
<td>0ffff</td>
<td>0</td>
<td>0</td>
<td>6487ed5110b4611a6</td>
<td>&nbsp;1.5707963268</td>
<td>pi/2</td>
</tr>
<tr>
<td>21</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>6487ed5110b4611a6</td>
<td>&nbsp;0.7853981634</td>
<td>pi/4</td>
</tr>
<tr>
<td>22</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>4d104d427de7fbcc5</td>
<td>&nbsp;0.3010299957</td>
<td>log<sub>10</sub>(2)</td>
</tr>
<tr>
<td>23</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>58b90bfbe8e7bcd5f</td>
<td>&nbsp;0.6931471806</td>
<td>ln(2)</td>
</tr>
<tr>
<td>24</td>
<td>1ffff</td>
<td>0</td>
<td>0</td>
<td>40000000000000000</td>
<td></td>
<td>?</td>
</tr>
<tr>
<td>25</td>
<td>0bfc0</td>
<td>0</td>
<td>0</td>
<td>40000000000000000</td>
<td></td>
<td>?</td>
</tr>
<tr>
<td>26</td>
<td>1ffff</td>
<td>1</td>
<td>0</td>
<td>60000000000000000</td>
<td></td>
<td>?</td>
</tr>
<tr>
<td>27</td>
<td>0ffff</td>
<td>1</td>
<td>0</td>
<td>40000000000000000</td>
<td>-1</td>
<td>-1</td>
</tr>
<tr>
<td>28</td>
<td>10000</td>
<td>0</td>
<td>0</td>
<td>40000000000000000</td>
<td>&nbsp;2</td>
<td>2</td>
</tr>
<tr>
<td>29</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>00000000000000001</td>
<td></td>
<td>low bit</td>
</tr>
<tr>
<td>30</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>00000000000000000</td>
<td></td>
<td>all 0's</td>
</tr>
<tr>
<td>31</td>
<td>00001</td>
<td>0</td>
<td>0</td>
<td>00000000000000000</td>
<td></td>
<td>single exponent bit</td>
</tr>
<tr>
<td>32</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>58b90bfbe8e7bcd5e</td>
<td>&nbsp;0.6931471806</td>
<td>ln(2)</td>
</tr>
<tr>
<td>33</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>40000000000000000</td>
<td>&nbsp;0.5</td>
<td>1/2! (exp Taylor series)</td>
</tr>
<tr>
<td>34</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>5555555555555584f</td>
<td>&nbsp;0.1666666667</td>
<td>≈1/3!</td>
</tr>
<tr>
<td>35</td>
<td>0fffa</td>
<td>0</td>
<td>0</td>
<td>555555555397fffd4</td>
<td>&nbsp;0.0416666667</td>
<td>≈1/4!</td>
</tr>
<tr>
<td>36</td>
<td>0fff8</td>
<td>0</td>
<td>0</td>
<td>444444444250ced0c</td>
<td>&nbsp;0.0083333333</td>
<td>≈1/5!</td>
</tr>
<tr>
<td>37</td>
<td>0fff5</td>
<td>0</td>
<td>0</td>
<td>5b05c3dd3901cea50</td>
<td>&nbsp;0.0013888934</td>
<td>≈1/6!</td>
</tr>
<tr>
<td>38</td>
<td>0fff2</td>
<td>0</td>
<td>0</td>
<td>6806988938f4f2318</td>
<td>&nbsp;0.0001984134</td>
<td>≈1/7!</td>
</tr>
<tr>
<td>39</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>40000000000000000</td>
<td>&nbsp;0.5</td>
<td>1/2! (exp Taylor series)</td>
</tr>
<tr>
<td>40</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>5555555555555558e</td>
<td>&nbsp;0.1666666667</td>
<td>≈1/3!</td>
</tr>
<tr>
<td>41</td>
<td>0fffa</td>
<td>0</td>
<td>0</td>
<td>5555555555555558b</td>
<td>&nbsp;0.0416666667</td>
<td>≈1/4!</td>
</tr>
<tr>
<td>42</td>
<td>0fff8</td>
<td>0</td>
<td>0</td>
<td>444444444443db621</td>
<td>&nbsp;0.0083333333</td>
<td>≈1/5!</td>
</tr>
<tr>
<td>43</td>
<td>0fff5</td>
<td>0</td>
<td>0</td>
<td>5b05b05b05afd42f4</td>
<td>&nbsp;0.0013888889</td>
<td>≈1/6!</td>
</tr>
<tr>
<td>44</td>
<td>0fff2</td>
<td>0</td>
<td>0</td>
<td>68068068163b44194</td>
<td>&nbsp;0.0001984127</td>
<td>≈1/7!</td>
</tr>
<tr>
<td>45</td>
<td>0ffef</td>
<td>0</td>
<td>0</td>
<td>6806806815d1b6d8a</td>
<td>&nbsp;0.0000248016</td>
<td>≈1/8!</td>
</tr>
<tr>
<td>46</td>
<td>0ffec</td>
<td>0</td>
<td>0</td>
<td>5c778d8e0384c73ab</td>
<td>&nbsp;2.755731e-06</td>
<td>≈1/9!</td>
</tr>
<tr>
<td>47</td>
<td>0ffe9</td>
<td>0</td>
<td>0</td>
<td>49f93e0ef41d6086b</td>
<td>&nbsp;2.755731e-07</td>
<td>≈1/10!</td>
</tr>
<tr>
<td>48</td>
<td>0ffe5</td>
<td>0</td>
<td>0</td>
<td>6ba8b65b40f9c0ce8</td>
<td>&nbsp;2.506632e-08</td>
<td>≈1/11!</td>
</tr>
<tr>
<td>49</td>
<td>0ffe2</td>
<td>0</td>
<td>0</td>
<td>47c5b695d0d1289a8</td>
<td>&nbsp;2.088849e-09</td>
<td>≈1/12!</td>
</tr>
<tr>
<td>50</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>6dfb23c651a2ef221</td>
<td>&nbsp;0.4296133384</td>
<td>2<sup>66/128</sup>-1</td>
</tr>
<tr>
<td>51</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>75feb564267c8bf6f</td>
<td>&nbsp;0.4609177942</td>
<td>2<sup>70/128</sup>-1</td>
</tr>
<tr>
<td>52</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>7e2f336cf4e62105d</td>
<td>&nbsp;0.4929077283</td>
<td>2<sup>74/128</sup>-1</td>
</tr>
<tr>
<td>53</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4346ccda249764072</td>
<td>&nbsp;0.5255981507</td>
<td>2<sup>78/128</sup>-1</td>
</tr>
<tr>
<td>54</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>478d74c8abb9b15cc</td>
<td>&nbsp;0.5590044002</td>
<td>2<sup>82/128</sup>-1</td>
</tr>
<tr>
<td>55</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4bec14fef2727c5cf</td>
<td>&nbsp;0.5931421513</td>
<td>2<sup>86/128</sup>-1</td>
</tr>
<tr>
<td>56</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>506333daef2b2594d</td>
<td>&nbsp;0.6280274219</td>
<td>2<sup>90/128</sup>-1</td>
</tr>
<tr>
<td>57</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>54f35aabcfedfa1f6</td>
<td>&nbsp;0.6636765803</td>
<td>2<sup>94/128</sup>-1</td>
</tr>
<tr>
<td>58</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>599d15c278afd7b60</td>
<td>&nbsp;0.7001063537</td>
<td>2<sup>98/128</sup>-1</td>
</tr>
<tr>
<td>59</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5e60f4825e0e9123e</td>
<td>&nbsp;0.7373338353</td>
<td>2<sup>102/128</sup>-1</td>
</tr>
<tr>
<td>60</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>633f8972be8a5a511</td>
<td>&nbsp;0.7753764925</td>
<td>2<sup>106/128</sup>-1</td>
</tr>
<tr>
<td>61</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>68396a503c4bdc688</td>
<td>&nbsp;0.8142521755</td>
<td>2<sup>110/128</sup>-1</td>
</tr>
<tr>
<td>62</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>6d4f301ed9942b846</td>
<td>&nbsp;0.8539791251</td>
<td>2<sup>114/128</sup>-1</td>
</tr>
<tr>
<td>63</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>7281773c59ffb139f</td>
<td>&nbsp;0.8945759816</td>
<td>2<sup>118/128</sup>-1</td>
</tr>
<tr>
<td>64</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>77d0df730ad13bb90</td>
<td>&nbsp;0.9360617935</td>
<td>2<sup>122/128</sup>-1</td>
</tr>
<tr>
<td>65</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>7d3e0c0cf486c1748</td>
<td>&nbsp;0.9784560264</td>
<td>2<sup>126/128</sup>-1</td>
</tr>
<tr>
<td>66</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>642e1f899b0626a74</td>
<td>&nbsp;0.1956643920</td>
<td>2<sup>33/128</sup>-1</td>
</tr>
<tr>
<td>67</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>6ad8abf253fe1928c</td>
<td>&nbsp;0.2086843236</td>
<td>2<sup>35/128</sup>-1</td>
</tr>
<tr>
<td>68</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>7195cda0bb0cb0b54</td>
<td>&nbsp;0.2218460330</td>
<td>2<sup>37/128</sup>-1</td>
</tr>
<tr>
<td>69</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>7865b862751c90800</td>
<td>&nbsp;0.2351510639</td>
<td>2<sup>39/128</sup>-1</td>
</tr>
<tr>
<td>70</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>7f48a09590037417f</td>
<td>&nbsp;0.2486009772</td>
<td>2<sup>41/128</sup>-1</td>
</tr>
<tr>
<td>71</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>431f5d950a896dc70</td>
<td>&nbsp;0.2621973504</td>
<td>2<sup>43/128</sup>-1</td>
</tr>
<tr>
<td>72</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>46a41ed1d00577251</td>
<td>&nbsp;0.2759417784</td>
<td>2<sup>45/128</sup>-1</td>
</tr>
<tr>
<td>73</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>4a32af0d7d3de672e</td>
<td>&nbsp;0.2898358734</td>
<td>2<sup>47/128</sup>-1</td>
</tr>
<tr>
<td>74</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>4dcb299fddd0d63b3</td>
<td>&nbsp;0.3038812652</td>
<td>2<sup>49/128</sup>-1</td>
</tr>
<tr>
<td>75</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>516daa2cf6641c113</td>
<td>&nbsp;0.3180796013</td>
<td>2<sup>51/128</sup>-1</td>
</tr>
<tr>
<td>76</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>551a4ca5d920ec52f</td>
<td>&nbsp;0.3324325471</td>
<td>2<sup>53/128</sup>-1</td>
</tr>
<tr>
<td>77</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>58d12d497c7fd252c</td>
<td>&nbsp;0.3469417862</td>
<td>2<sup>55/128</sup>-1</td>
</tr>
<tr>
<td>78</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>5c9268a5946b701c5</td>
<td>&nbsp;0.3616090206</td>
<td>2<sup>57/128</sup>-1</td>
</tr>
<tr>
<td>79</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>605e1b976dc08b077</td>
<td>&nbsp;0.3764359708</td>
<td>2<sup>59/128</sup>-1</td>
</tr>
<tr>
<td>80</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>6434634ccc31fc770</td>
<td>&nbsp;0.3914243758</td>
<td>2<sup>61/128</sup>-1</td>
</tr>
<tr>
<td>81</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>68155d44ca973081c</td>
<td>&nbsp;0.4065759938</td>
<td>2<sup>63/128</sup>-1</td>
</tr>
<tr>
<td>82</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>4cee3bed56eedb76c</td>
<td>-0.3005101637</td>
<td>2<sup>-66/128</sup>-1</td>
</tr>
<tr>
<td>83</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>50c4875296f5bc8b2</td>
<td>-0.3154987885</td>
<td>2<sup>-70/128</sup>-1</td>
</tr>
<tr>
<td>84</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>5485c64a56c12cc8a</td>
<td>-0.3301662380</td>
<td>2<sup>-74/128</sup>-1</td>
</tr>
<tr>
<td>85</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>58326c4b169aca966</td>
<td>-0.3445193942</td>
<td>2<sup>-78/128</sup>-1</td>
</tr>
<tr>
<td>86</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>5bcaea51f6197f61f</td>
<td>-0.3585649920</td>
<td>2<sup>-82/128</sup>-1</td>
</tr>
<tr>
<td>87</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>5f4faef0468eb03de</td>
<td>-0.3723096215</td>
<td>2<sup>-86/128</sup>-1</td>
</tr>
<tr>
<td>88</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>62c12658d30048af2</td>
<td>-0.3857597319</td>
<td>2<sup>-90/128</sup>-1</td>
</tr>
<tr>
<td>89</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>661fba6cdf48059b2</td>
<td>-0.3989216343</td>
<td>2<sup>-94/128</sup>-1</td>
</tr>
<tr>
<td>90</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>696bd2c8dfe7a5ffb</td>
<td>-0.4118015042</td>
<td>2<sup>-98/128</sup>-1</td>
</tr>
<tr>
<td>91</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>6ca5d4d0ec1916d43</td>
<td>-0.4244053850</td>
<td>2<sup>-102/128</sup>-1</td>
</tr>
<tr>
<td>92</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>6fce23bceb994e239</td>
<td>-0.4367391907</td>
<td>2<sup>-106/128</sup>-1</td>
</tr>
<tr>
<td>93</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>72e520a481a4561a5</td>
<td>-0.4488087083</td>
<td>2<sup>-110/128</sup>-1</td>
</tr>
<tr>
<td>94</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>75eb2a8ab6910265f</td>
<td>-0.4606196011</td>
<td>2<sup>-114/128</sup>-1</td>
</tr>
<tr>
<td>95</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>78e09e696172efefc</td>
<td>-0.4721774108</td>
<td>2<sup>-118/128</sup>-1</td>
</tr>
<tr>
<td>96</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>7bc5d73c5321bfb9e</td>
<td>-0.4834875605</td>
<td>2<sup>-122/128</sup>-1</td>
</tr>
<tr>
<td>97</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>7e9b2e0c43fcf88c8</td>
<td>-0.4945553570</td>
<td>2<sup>-126/128</sup>-1</td>
</tr>
<tr>
<td>98</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>53c94402c0c863f24</td>
<td>-0.1636449102</td>
<td>2<sup>-33/128</sup>-1</td>
</tr>
<tr>
<td>99</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>58661eccf4ca790d2</td>
<td>-0.1726541162</td>
<td>2<sup>-35/128</sup>-1</td>
</tr>
<tr>
<td>100</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>5cf6413b5d2cca73f</td>
<td>-0.1815662751</td>
<td>2<sup>-37/128</sup>-1</td>
</tr>
<tr>
<td>101</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>6179ce61cdcdce7db</td>
<td>-0.1903824324</td>
<td>2<sup>-39/128</sup>-1</td>
</tr>
<tr>
<td>102</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>65f0e8f35f84645cf</td>
<td>-0.1991036222</td>
<td>2<sup>-41/128</sup>-1</td>
</tr>
<tr>
<td>103</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>6a5bb3437adf1164b</td>
<td>-0.2077308674</td>
<td>2<sup>-43/128</sup>-1</td>
</tr>
<tr>
<td>104</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>6eba4f46e003a775a</td>
<td>-0.2162651800</td>
<td>2<sup>-45/128</sup>-1</td>
</tr>
<tr>
<td>105</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>730cde94abb7410d5</td>
<td>-0.2247075612</td>
<td>2<sup>-47/128</sup>-1</td>
</tr>
<tr>
<td>106</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>775382675996699ad</td>
<td>-0.2330590011</td>
<td>2<sup>-49/128</sup>-1</td>
</tr>
<tr>
<td>107</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>7b8e5b9dc385331ad</td>
<td>-0.2413204794</td>
<td>2<sup>-51/128</sup>-1</td>
</tr>
<tr>
<td>108</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>7fbd8abc1e5ee49f2</td>
<td>-0.2494929652</td>
<td>2<sup>-53/128</sup>-1</td>
</tr>
<tr>
<td>109</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>41f097f679f66c1db</td>
<td>-0.2575774171</td>
<td>2<sup>-55/128</sup>-1</td>
</tr>
<tr>
<td>110</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>43fcb5810d1604f37</td>
<td>-0.2655747833</td>
<td>2<sup>-57/128</sup>-1</td>
</tr>
<tr>
<td>111</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>46032dbad3f462152</td>
<td>-0.2734860021</td>
<td>2<sup>-59/128</sup>-1</td>
</tr>
<tr>
<td>112</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>48041035735be183c</td>
<td>-0.2813120013</td>
<td>2<sup>-61/128</sup>-1</td>
</tr>
<tr>
<td>113</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>49ff6c57a12a08945</td>
<td>-0.2890536989</td>
<td>2<sup>-63/128</sup>-1</td>
</tr>
<tr>
<td>114</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>555555555555535f0</td>
<td>-0.3333333333</td>
<td>≈-1/3 (arctan Taylor series)</td>
</tr>
<tr>
<td>115</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>6666666664208b016</td>
<td>&nbsp;0.2</td>
<td>≈&nbsp;1/5</td>
</tr>
<tr>
<td>116</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>492491e0653ac37b8</td>
<td>-0.1428571307</td>
<td>≈-1/7</td>
</tr>
<tr>
<td>117</td>
<td>0fffb</td>
<td>0</td>
<td>0</td>
<td>71b83f4133889b2f0</td>
<td>&nbsp;0.1110544094</td>
<td>≈&nbsp;1/9</td>
</tr>
<tr>
<td>118</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>55555555555555543</td>
<td>-0.3333333333</td>
<td>≈-1/3 (arctan Taylor series)</td>
</tr>
<tr>
<td>119</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>66666666666616b73</td>
<td>&nbsp;0.2</td>
<td>≈&nbsp;1/5</td>
</tr>
<tr>
<td>120</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>4924924920fca4493</td>
<td>-0.1428571429</td>
<td>≈-1/7</td>
</tr>
<tr>
<td>121</td>
<td>0fffb</td>
<td>0</td>
<td>0</td>
<td>71c71c4be6f662c91</td>
<td>&nbsp;0.1111111089</td>
<td>≈&nbsp;1/9</td>
</tr>
<tr>
<td>122</td>
<td>0fffb</td>
<td>1</td>
<td>0</td>
<td>5d16e0bde0b12eee8</td>
<td>-0.0909075848</td>
<td>≈-1/11</td>
</tr>
<tr>
<td>123</td>
<td>0fffb</td>
<td>0</td>
<td>0</td>
<td>4e403be3e3c725aa0</td>
<td>&nbsp;0.0764169081</td>
<td>≈&nbsp;1/13</td>
</tr>
<tr>
<td>124</td>
<td>00000</td>
<td>0</td>
<td>0</td>
<td>40000000000000000</td>
<td></td>
<td>single bit mask</td>
</tr>
<tr>
<td>125</td>
<td>0fff9</td>
<td>0</td>
<td>0</td>
<td>7ff556eea5d892a14</td>
<td>&nbsp;0.0312398334</td>
<td>arctan(1/32)</td>
</tr>
<tr>
<td>126</td>
<td>0fffa</td>
<td>0</td>
<td>0</td>
<td>7fd56edcb3f7a71b6</td>
<td>&nbsp;0.0624188100</td>
<td>arctan(2/32)</td>
</tr>
<tr>
<td>127</td>
<td>0fffb</td>
<td>0</td>
<td>0</td>
<td>5fb860980bc43a305</td>
<td>&nbsp;0.0934767812</td>
<td>arctan(3/32)</td>
</tr>
<tr>
<td>128</td>
<td>0fffb</td>
<td>0</td>
<td>0</td>
<td>7f56ea6ab0bdb7196</td>
<td>&nbsp;0.1243549945</td>
<td>arctan(4/32)</td>
</tr>
<tr>
<td>129</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>4f5bbba31989b161a</td>
<td>&nbsp;0.1549967419</td>
<td>arctan(5/32)</td>
</tr>
<tr>
<td>130</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>5ee5ed2f396c089a4</td>
<td>&nbsp;0.1853479500</td>
<td>arctan(6/32)</td>
</tr>
<tr>
<td>131</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>6e435d4a498288118</td>
<td>&nbsp;0.2153576997</td>
<td>arctan(7/32)</td>
</tr>
<tr>
<td>132</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>7d6dd7e4b203758ab</td>
<td>&nbsp;0.2449786631</td>
<td>arctan(8/32)</td>
</tr>
<tr>
<td>133</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>462fd68c2fc5e0986</td>
<td>&nbsp;0.2741674511</td>
<td>arctan(9/32)</td>
</tr>
<tr>
<td>134</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>4d89dcdc1faf2f34e</td>
<td>&nbsp;0.3028848684</td>
<td>arctan(10/32)</td>
</tr>
<tr>
<td>135</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>54c2b6654735276d5</td>
<td>&nbsp;0.3310960767</td>
<td>arctan(11/32)</td>
</tr>
<tr>
<td>136</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>5bd86507937bc239c</td>
<td>&nbsp;0.3587706703</td>
<td>arctan(12/32)</td>
</tr>
<tr>
<td>137</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>62c934e5286c95b6d</td>
<td>&nbsp;0.3858826694</td>
<td>arctan(13/32)</td>
</tr>
<tr>
<td>138</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>6993bb0f308ff2db2</td>
<td>&nbsp;0.4124104416</td>
<td>arctan(14/32)</td>
</tr>
<tr>
<td>139</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>7036d3253b27be33e</td>
<td>&nbsp;0.4383365599</td>
<td>arctan(15/32)</td>
</tr>
<tr>
<td>140</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>76b19c1586ed3da2b</td>
<td>&nbsp;0.4636476090</td>
<td>arctan(16/32)</td>
</tr>
<tr>
<td>141</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>7d03742d50505f2e3</td>
<td>&nbsp;0.4883339511</td>
<td>arctan(17/32)</td>
</tr>
<tr>
<td>142</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4195fa536cc33f152</td>
<td>&nbsp;0.5123894603</td>
<td>arctan(18/32)</td>
</tr>
<tr>
<td>143</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4495766fef4aa3da8</td>
<td>&nbsp;0.5358112380</td>
<td>arctan(19/32)</td>
</tr>
<tr>
<td>144</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>47802eaf7bfacfcdb</td>
<td>&nbsp;0.5585993153</td>
<td>arctan(20/32)</td>
</tr>
<tr>
<td>145</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4a563964c238c37b1</td>
<td>&nbsp;0.5807563536</td>
<td>arctan(21/32)</td>
</tr>
<tr>
<td>146</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4d17c07338deed102</td>
<td>&nbsp;0.6022873461</td>
<td>arctan(22/32)</td>
</tr>
<tr>
<td>147</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4fc4fee27a5bd0f68</td>
<td>&nbsp;0.6231993299</td>
<td>arctan(23/32)</td>
</tr>
<tr>
<td>148</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>525e3e8c9a7b84921</td>
<td>&nbsp;0.6435011088</td>
<td>arctan(24/32)</td>
</tr>
<tr>
<td>149</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>54e3d5ee24187ae45</td>
<td>&nbsp;0.6632029927</td>
<td>arctan(25/32)</td>
</tr>
<tr>
<td>150</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5756261c5a6c60401</td>
<td>&nbsp;0.6823165549</td>
<td>arctan(26/32)</td>
</tr>
<tr>
<td>151</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>59b598e48f821b48b</td>
<td>&nbsp;0.7008544079</td>
<td>arctan(27/32)</td>
</tr>
<tr>
<td>152</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5c029f15e118cf39e</td>
<td>&nbsp;0.7188299996</td>
<td>arctan(28/32)</td>
</tr>
<tr>
<td>153</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5e3daef574c579407</td>
<td>&nbsp;0.7362574290</td>
<td>arctan(29/32)</td>
</tr>
<tr>
<td>154</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>606742dc562933204</td>
<td>&nbsp;0.7531512810</td>
<td>arctan(30/32)</td>
</tr>
<tr>
<td>155</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>627fd7fd5fc7deaa4</td>
<td>&nbsp;0.7695264804</td>
<td>arctan(31/32)</td>
</tr>
<tr>
<td>156</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>6487ed5110b4611a6</td>
<td>&nbsp;0.7853981634</td>
<td>arctan(32/32)</td>
</tr>
<tr>
<td>157</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>55555555555555555</td>
<td>-0.1666666667</td>
<td>≈-1/3! (sin Taylor series)</td>
</tr>
<tr>
<td>158</td>
<td>0fff8</td>
<td>0</td>
<td>0</td>
<td>44444444444443e35</td>
<td>&nbsp;0.0083333333</td>
<td>≈&nbsp;1/5!</td>
</tr>
<tr>
<td>159</td>
<td>0fff2</td>
<td>1</td>
<td>0</td>
<td>6806806806773c774</td>
<td>-0.0001984127</td>
<td>≈-1/7!</td>
</tr>
<tr>
<td>160</td>
<td>0ffec</td>
<td>0</td>
<td>0</td>
<td>5c778e94f50956d70</td>
<td>&nbsp;2.755732e-06</td>
<td>≈&nbsp;1/9!</td>
</tr>
<tr>
<td>161</td>
<td>0ffe5</td>
<td>1</td>
<td>0</td>
<td>6b991122efa0532f0</td>
<td>-2.505209e-08</td>
<td>≈-1/11!</td>
</tr>
<tr>
<td>162</td>
<td>0ffde</td>
<td>0</td>
<td>0</td>
<td>58303f02614d5e4d8</td>
<td>&nbsp;1.604139e-10</td>
<td>≈&nbsp;1/13!</td>
</tr>
<tr>
<td>163</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>7fffffffffffffffe</td>
<td>-0.5</td>
<td>≈-1/2! (cos Taylor series)</td>
</tr>
<tr>
<td>164</td>
<td>0fffa</td>
<td>0</td>
<td>0</td>
<td>55555555555554277</td>
<td>&nbsp;0.0416666667</td>
<td>≈&nbsp;1/4!</td>
</tr>
<tr>
<td>165</td>
<td>0fff5</td>
<td>1</td>
<td>0</td>
<td>5b05b05b05a18a1ba</td>
<td>-0.0013888889</td>
<td>≈-1/6!</td>
</tr>
<tr>
<td>166</td>
<td>0ffef</td>
<td>0</td>
<td>0</td>
<td>680680675b559f2cf</td>
<td>&nbsp;0.0000248016</td>
<td>≈&nbsp;1/8!</td>
</tr>
<tr>
<td>167</td>
<td>0ffe9</td>
<td>1</td>
<td>0</td>
<td>49f93af61f5349300</td>
<td>-2.755730e-07</td>
<td>≈-1/10!</td>
</tr>
<tr>
<td>168</td>
<td>0ffe2</td>
<td>0</td>
<td>0</td>
<td>47a4f2483514c1af8</td>
<td>&nbsp;2.085124e-09</td>
<td>≈&nbsp;1/12!</td>
</tr>
<tr>
<td>169</td>
<td>0fffc</td>
<td>1</td>
<td>0</td>
<td>55555555555555445</td>
<td>-0.1666666667</td>
<td>≈-1/3! (sin Taylor series)</td>
</tr>
<tr>
<td>170</td>
<td>0fff8</td>
<td>0</td>
<td>0</td>
<td>44444444443a3fdb6</td>
<td>&nbsp;0.0083333333</td>
<td>≈&nbsp;1/5!</td>
</tr>
<tr>
<td>171</td>
<td>0fff2</td>
<td>1</td>
<td>0</td>
<td>68068060b2044e9ae</td>
<td>-0.0001984127</td>
<td>≈-1/7!</td>
</tr>
<tr>
<td>172</td>
<td>0ffec</td>
<td>0</td>
<td>0</td>
<td>5d75716e60f321240</td>
<td>&nbsp;2.785288e-06</td>
<td>≈&nbsp;1/9!</td>
</tr>
<tr>
<td>173</td>
<td>0fffd</td>
<td>1</td>
<td>0</td>
<td>7fffffffffffffa28</td>
<td>-0.5</td>
<td>≈-1/2! (cos Taylor series)</td>
</tr>
<tr>
<td>174</td>
<td>0fffa</td>
<td>0</td>
<td>0</td>
<td>555555555539cfae6</td>
<td>&nbsp;0.0416666667</td>
<td>≈&nbsp;1/4!</td>
</tr>
<tr>
<td>175</td>
<td>0fff5</td>
<td>1</td>
<td>0</td>
<td>5b05b050f31b2e713</td>
<td>-0.0013888889</td>
<td>≈-1/6!</td>
</tr>
<tr>
<td>176</td>
<td>0ffef</td>
<td>0</td>
<td>0</td>
<td>6803988d56e3bff10</td>
<td>&nbsp;0.0000247989</td>
<td>≈&nbsp;1/8!</td>
</tr>
<tr>
<td>177</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>44434312da70edd92</td>
<td>&nbsp;0.5333026735</td>
<td>sin(36/64)</td>
</tr>
<tr>
<td>178</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>513ace073ce1aac13</td>
<td>&nbsp;0.6346070800</td>
<td>sin(44/64)</td>
</tr>
<tr>
<td>179</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5cedda037a95df6ee</td>
<td>&nbsp;0.7260086553</td>
<td>sin(52/64)</td>
</tr>
<tr>
<td>180</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>672daa6ef3992b586</td>
<td>&nbsp;0.8060811083</td>
<td>sin(60/64)</td>
</tr>
<tr>
<td>181</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>470df5931ae1d9460</td>
<td>&nbsp;0.2775567516</td>
<td>sin(18/64)</td>
</tr>
<tr>
<td>182</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>5646f27e8bd65cbe4</td>
<td>&nbsp;0.3370200690</td>
<td>sin(22/64)</td>
</tr>
<tr>
<td>183</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>6529afa7d51b12963</td>
<td>&nbsp;0.3951673302</td>
<td>sin(26/64)</td>
</tr>
<tr>
<td>184</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>73a74b8f52947b682</td>
<td>&nbsp;0.4517714715</td>
<td>sin(30/64)</td>
</tr>
<tr>
<td>185</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>6c4741058a93188ef</td>
<td>&nbsp;0.8459244992</td>
<td>cos(36/64)</td>
</tr>
<tr>
<td>186</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>62ec41e9772401864</td>
<td>&nbsp;0.7728350058</td>
<td>cos(44/64)</td>
</tr>
<tr>
<td>187</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5806149bd58f7d46d</td>
<td>&nbsp;0.6876855622</td>
<td>cos(52/64)</td>
</tr>
<tr>
<td>188</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4bc044c9908390c72</td>
<td>&nbsp;0.5918050751</td>
<td>cos(60/64)</td>
</tr>
<tr>
<td>189</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>7af8853ddbbe9ffd0</td>
<td>&nbsp;0.9607092430</td>
<td>cos(18/64)</td>
</tr>
<tr>
<td>190</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>7882fd26b35b03d34</td>
<td>&nbsp;0.9414974631</td>
<td>cos(22/64)</td>
</tr>
<tr>
<td>191</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>7594fc1cf900fe89e</td>
<td>&nbsp;0.9186091558</td>
<td>cos(26/64)</td>
</tr>
<tr>
<td>192</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>72316fe3386a10d5a</td>
<td>&nbsp;0.8921336994</td>
<td>cos(30/64)</td>
</tr>
<tr>
<td>193</td>
<td>0ffff</td>
<td>0</td>
<td>0</td>
<td>48000000000000000</td>
<td>&nbsp;1.125</td>
<td>9/8</td>
</tr>
<tr>
<td>194</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>70000000000000000</td>
<td>&nbsp;0.875</td>
<td>7/8</td>
</tr>
<tr>
<td>195</td>
<td>0ffff</td>
<td>0</td>
<td>0</td>
<td>5c551d94ae0bf85de</td>
<td>&nbsp;1.4426950409</td>
<td>log<sub>2</sub>(e)</td>
</tr>
<tr>
<td>196</td>
<td>10000</td>
<td>0</td>
<td>0</td>
<td>5c551d94ae0bf85de</td>
<td>&nbsp;2.8853900818</td>
<td>2log<sub>2</sub>(e)</td>
</tr>
<tr>
<td>197</td>
<td>0fffb</td>
<td>0</td>
<td>0</td>
<td>7b1c2770e81287c11</td>
<td>&nbsp;0.1202245867</td>
<td>coefficients for log</td>
</tr>
<tr>
<td>198</td>
<td>0fff9</td>
<td>0</td>
<td>0</td>
<td>49ddb14064a5d30bd</td>
<td>&nbsp;0.0180336880</td>
<td></td>
</tr>
<tr>
<td>199</td>
<td>0fff6</td>
<td>0</td>
<td>0</td>
<td>698879b87934f12e0</td>
<td>&nbsp;0.0032206148</td>
<td></td>
</tr>
<tr>
<td>200</td>
<td>0fffa</td>
<td>0</td>
<td>0</td>
<td>51ff4ffeb20ed1749</td>
<td>&nbsp;0.0400377512</td>
<td>coefficients for log</td>
</tr>
<tr>
<td>201</td>
<td>0fff6</td>
<td>0</td>
<td>0</td>
<td>5e8cd07eb1827434a</td>
<td>&nbsp;0.0028854387</td>
<td></td>
</tr>
<tr>
<td>202</td>
<td>0fff3</td>
<td>0</td>
<td>0</td>
<td>40e54061b26dd6dc2</td>
<td>&nbsp;0.0002475567</td>
<td></td>
</tr>
<tr>
<td>203</td>
<td>0ffef</td>
<td>0</td>
<td>0</td>
<td>61008a69627c92fb9</td>
<td>&nbsp;0.0000231271</td>
<td></td>
</tr>
<tr>
<td>204</td>
<td>0ffec</td>
<td>0</td>
<td>0</td>
<td>4c41e6ced287a2468</td>
<td>&nbsp;2.272648e-06</td>
<td></td>
</tr>
<tr>
<td>205</td>
<td>0ffe8</td>
<td>0</td>
<td>0</td>
<td>7dadd4ea3c3fee620</td>
<td>&nbsp;2.340954e-07</td>
<td></td>
</tr>
<tr>
<td>206</td>
<td>0fff9</td>
<td>0</td>
<td>0</td>
<td>5b9e5a170b8000000</td>
<td>&nbsp;0.0223678130</td>
<td>log<sub>2</sub>(1+1/64) top bits</td>
</tr>
<tr>
<td>207</td>
<td>0fffb</td>
<td>0</td>
<td>0</td>
<td>43ace37e8a8000000</td>
<td>&nbsp;0.0660892054</td>
<td>log<sub>2</sub>(1+3/64) top bits</td>
</tr>
<tr>
<td>208</td>
<td>0fffb</td>
<td>0</td>
<td>0</td>
<td>6f210902b68000000</td>
<td>&nbsp;0.1085244568</td>
<td>log<sub>2</sub>(1+5/64) top bits</td>
</tr>
<tr>
<td>209</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>4caba789e28000000</td>
<td>&nbsp;0.1497471195</td>
<td>log<sub>2</sub>(1+7/64) top bits</td>
</tr>
<tr>
<td>210</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>6130af40bc0000000</td>
<td>&nbsp;0.1898245589</td>
<td>log<sub>2</sub>(1+9/64) top bits</td>
</tr>
<tr>
<td>211</td>
<td>0fffc</td>
<td>0</td>
<td>0</td>
<td>7527b930c98000000</td>
<td>&nbsp;0.2288186905</td>
<td>log<sub>2</sub>(1+11/64) top bits</td>
</tr>
<tr>
<td>212</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>444c1f6b4c0000000</td>
<td>&nbsp;0.2667865407</td>
<td>log<sub>2</sub>(1+13/64) top bits</td>
</tr>
<tr>
<td>213</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>4dc4933a930000000</td>
<td>&nbsp;0.3037807482</td>
<td>log<sub>2</sub>(1+15/64) top bits</td>
</tr>
<tr>
<td>214</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>570068e7ef8000000</td>
<td>&nbsp;0.3398500029</td>
<td>log<sub>2</sub>(1+17/64) top bits</td>
</tr>
<tr>
<td>215</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>6002958c588000000</td>
<td>&nbsp;0.3750394313</td>
<td>log<sub>2</sub>(1+19/64) top bits</td>
</tr>
<tr>
<td>216</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>68cdd829fd8000000</td>
<td>&nbsp;0.4093909361</td>
<td>log<sub>2</sub>(1+21/64) top bits</td>
</tr>
<tr>
<td>217</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>7164beb4a58000000</td>
<td>&nbsp;0.4429434958</td>
<td>log<sub>2</sub>(1+23/64) top bits</td>
</tr>
<tr>
<td>218</td>
<td>0fffd</td>
<td>0</td>
<td>0</td>
<td>79c9aa879d8000000</td>
<td>&nbsp;0.4757334310</td>
<td>log<sub>2</sub>(1+25/64) top bits</td>
</tr>
<tr>
<td>219</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>40ff6a2e5e8000000</td>
<td>&nbsp;0.5077946402</td>
<td>log<sub>2</sub>(1+27/64) top bits</td>
</tr>
<tr>
<td>220</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>450327ea878000000</td>
<td>&nbsp;0.5391588111</td>
<td>log<sub>2</sub>(1+29/64) top bits</td>
</tr>
<tr>
<td>221</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>48f107509c8000000</td>
<td>&nbsp;0.5698556083</td>
<td>log<sub>2</sub>(1+31/64) top bits</td>
</tr>
<tr>
<td>222</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>4cc9f1aad28000000</td>
<td>&nbsp;0.5999128422</td>
<td>log<sub>2</sub>(1+33/64) top bits</td>
</tr>
<tr>
<td>223</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>508ec1fa618000000</td>
<td>&nbsp;0.6293566201</td>
<td>log<sub>2</sub>(1+35/64) top bits</td>
</tr>
<tr>
<td>224</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5440461c228000000</td>
<td>&nbsp;0.6582114828</td>
<td>log<sub>2</sub>(1+37/64) top bits</td>
</tr>
<tr>
<td>225</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>57df3fd0780000000</td>
<td>&nbsp;0.6865005272</td>
<td>log<sub>2</sub>(1+39/64) top bits</td>
</tr>
<tr>
<td>226</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5b6c65a9d88000000</td>
<td>&nbsp;0.7142455177</td>
<td>log<sub>2</sub>(1+41/64) top bits</td>
</tr>
<tr>
<td>227</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>5ee863e4d40000000</td>
<td>&nbsp;0.7414669864</td>
<td>log<sub>2</sub>(1+43/64) top bits</td>
</tr>
<tr>
<td>228</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>6253dd2c1b8000000</td>
<td>&nbsp;0.7681843248</td>
<td>log<sub>2</sub>(1+45/64) top bits</td>
</tr>
<tr>
<td>229</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>65af6b4ab30000000</td>
<td>&nbsp;0.7944158664</td>
<td>log<sub>2</sub>(1+47/64) top bits</td>
</tr>
<tr>
<td>230</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>68fb9fce388000000</td>
<td>&nbsp;0.8201789624</td>
<td>log<sub>2</sub>(1+49/64) top bits</td>
</tr>
<tr>
<td>231</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>6c39049af30000000</td>
<td>&nbsp;0.8454900509</td>
<td>log<sub>2</sub>(1+51/64) top bits</td>
</tr>
<tr>
<td>232</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>6f681c731a0000000</td>
<td>&nbsp;0.8703647196</td>
<td>log<sub>2</sub>(1+53/64) top bits</td>
</tr>
<tr>
<td>233</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>72896372a50000000</td>
<td>&nbsp;0.8948177633</td>
<td>log<sub>2</sub>(1+55/64) top bits</td>
</tr>
<tr>
<td>234</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>759d4f80cb8000000</td>
<td>&nbsp;0.9188632373</td>
<td>log<sub>2</sub>(1+57/64) top bits</td>
</tr>
<tr>
<td>235</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>78a450b8380000000</td>
<td>&nbsp;0.9425145053</td>
<td>log<sub>2</sub>(1+59/64) top bits</td>
</tr>
<tr>
<td>236</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>7b9ed1c6ce8000000</td>
<td>&nbsp;0.9657842847</td>
<td>log<sub>2</sub>(1+61/64) top bits</td>
</tr>
<tr>
<td>237</td>
<td>0fffe</td>
<td>0</td>
<td>0</td>
<td>7e8d3845df0000000</td>
<td>&nbsp;0.9886846868</td>
<td>log<sub>2</sub>(1+63/64) top bits</td>
</tr>
<tr>
<td>238</td>
<td>0ffd0</td>
<td>1</td>
<td>0</td>
<td>6eb3ac8ec0ef73f7b</td>
<td>-1.229037e-14</td>
<td>log<sub>2</sub>(1+1/64) bottom bits</td>
</tr>
<tr>
<td>239</td>
<td>0ffcd</td>
<td>1</td>
<td>0</td>
<td>654c308b454666de9</td>
<td>-1.405787e-15</td>
<td>log<sub>2</sub>(1+3/64) bottom bits</td>
</tr>
<tr>
<td>240</td>
<td>0ffd2</td>
<td>0</td>
<td>0</td>
<td>5dd31d962d3728cbd</td>
<td>&nbsp;4.166652e-14</td>
<td>log<sub>2</sub>(1+5/64) bottom bits</td>
</tr>
<tr>
<td>241</td>
<td>0ffd3</td>
<td>0</td>
<td>0</td>
<td>70d0fa8f9603ad3a6</td>
<td>&nbsp;1.002010e-13</td>
<td>log<sub>2</sub>(1+7/64) bottom bits</td>
</tr>
<tr>
<td>242</td>
<td>0ffd1</td>
<td>0</td>
<td>0</td>
<td>765fba4491dcec753</td>
<td>&nbsp;2.628429e-14</td>
<td>log<sub>2</sub>(1+9/64) bottom bits</td>
</tr>
<tr>
<td>243</td>
<td>0ffd2</td>
<td>1</td>
<td>0</td>
<td>690370b4a9afdc5fb</td>
<td>-4.663533e-14</td>
<td>log<sub>2</sub>(1+11/64) bottom bits</td>
</tr>
<tr>
<td>244</td>
<td>0ffd4</td>
<td>0</td>
<td>0</td>
<td>5bae584b82d3cad27</td>
<td>&nbsp;1.628582e-13</td>
<td>log<sub>2</sub>(1+13/64) bottom bits</td>
</tr>
<tr>
<td>245</td>
<td>0ffd4</td>
<td>0</td>
<td>0</td>
<td>6f66cc899b64303f7</td>
<td>&nbsp;1.978889e-13</td>
<td>log<sub>2</sub>(1+15/64) bottom bits</td>
</tr>
<tr>
<td>246</td>
<td>0ffd4</td>
<td>1</td>
<td>0</td>
<td>4bc302ffa76fafcba</td>
<td>-1.345799e-13</td>
<td>log<sub>2</sub>(1+17/64) bottom bits</td>
</tr>
<tr>
<td>247</td>
<td>0ffd2</td>
<td>1</td>
<td>0</td>
<td>7579aa293ec16410a</td>
<td>-5.216949e-14</td>
<td>log<sub>2</sub>(1+19/64) bottom bits</td>
</tr>
<tr>
<td>248</td>
<td>0ffcf</td>
<td>0</td>
<td>0</td>
<td>509d7c40d7979ec5b</td>
<td>&nbsp;4.475041e-15</td>
<td>log<sub>2</sub>(1+21/64) bottom bits</td>
</tr>
<tr>
<td>249</td>
<td>0ffd3</td>
<td>1</td>
<td>0</td>
<td>4a981811ab5110ccf</td>
<td>-6.625289e-14</td>
<td>log<sub>2</sub>(1+23/64) bottom bits</td>
</tr>
<tr>
<td>250</td>
<td>0ffd4</td>
<td>1</td>
<td>0</td>
<td>596f9d730f685c776</td>
<td>-1.588702e-13</td>
<td>log<sub>2</sub>(1+25/64) bottom bits</td>
</tr>
<tr>
<td>251</td>
<td>0ffd4</td>
<td>1</td>
<td>0</td>
<td>680cc6bcb9bfa9853</td>
<td>-1.848298e-13</td>
<td>log<sub>2</sub>(1+27/64) bottom bits</td>
</tr>
<tr>
<td>252</td>
<td>0ffd4</td>
<td>0</td>
<td>0</td>
<td>5439e15a52a31604a</td>
<td>&nbsp;1.496156e-13</td>
<td>log<sub>2</sub>(1+29/64) bottom bits</td>
</tr>
<tr>
<td>253</td>
<td>0ffd4</td>
<td>0</td>
<td>0</td>
<td>7c8080ecc61a98814</td>
<td>&nbsp;2.211599e-13</td>
<td>log<sub>2</sub>(1+31/64) bottom bits</td>
</tr>
<tr>
<td>254</td>
<td>0ffd3</td>
<td>1</td>
<td>0</td>
<td>6b26f28dbf40b7bc0</td>
<td>-9.517022e-14</td>
<td>log<sub>2</sub>(1+33/64) bottom bits</td>
</tr>
<tr>
<td>255</td>
<td>0ffd5</td>
<td>0</td>
<td>0</td>
<td>554b383b0e8a55627</td>
<td>&nbsp;3.030245e-13</td>
<td>log<sub>2</sub>(1+35/64) bottom bits</td>
</tr>
<tr>
<td>256</td>
<td>0ffd5</td>
<td>0</td>
<td>0</td>
<td>47c6ef4a49bc59135</td>
<td>&nbsp;2.550034e-13</td>
<td>log<sub>2</sub>(1+37/64) bottom bits</td>
</tr>
<tr>
<td>257</td>
<td>0ffd5</td>
<td>0</td>
<td>0</td>
<td>4d75c658d602e66b0</td>
<td>&nbsp;2.751934e-13</td>
<td>log<sub>2</sub>(1+39/64) bottom bits</td>
</tr>
<tr>
<td>258</td>
<td>0ffd4</td>
<td>1</td>
<td>0</td>
<td>6b626820f81ca95da</td>
<td>-1.907530e-13</td>
<td>log<sub>2</sub>(1+41/64) bottom bits</td>
</tr>
<tr>
<td>259</td>
<td>0ffd3</td>
<td>0</td>
<td>0</td>
<td>5c833d56efe4338fe</td>
<td>&nbsp;8.216774e-14</td>
<td>log<sub>2</sub>(1+43/64) bottom bits</td>
</tr>
<tr>
<td>260</td>
<td>0ffd5</td>
<td>0</td>
<td>0</td>
<td>7c5a0375163ec8d56</td>
<td>&nbsp;4.417857e-13</td>
<td>log<sub>2</sub>(1+45/64) bottom bits</td>
</tr>
<tr>
<td>261</td>
<td>0ffd5</td>
<td>1</td>
<td>0</td>
<td>5050809db75675c90</td>
<td>-2.853343e-13</td>
<td>log<sub>2</sub>(1+47/64) bottom bits</td>
</tr>
<tr>
<td>262</td>
<td>0ffd4</td>
<td>1</td>
<td>0</td>
<td>7e12f8672e55de96c</td>
<td>-2.239526e-13</td>
<td>log<sub>2</sub>(1+49/64) bottom bits</td>
</tr>
<tr>
<td>263</td>
<td>0ffd5</td>
<td>0</td>
<td>0</td>
<td>435ebd376a70d849b</td>
<td>&nbsp;2.393466e-13</td>
<td>log<sub>2</sub>(1+51/64) bottom bits</td>
</tr>
<tr>
<td>264</td>
<td>0ffd2</td>
<td>1</td>
<td>0</td>
<td>6492ba487dfb264b3</td>
<td>-4.466345e-14</td>
<td>log<sub>2</sub>(1+53/64) bottom bits</td>
</tr>
<tr>
<td>265</td>
<td>0ffd5</td>
<td>1</td>
<td>0</td>
<td>674e5008e379faa7c</td>
<td>-3.670163e-13</td>
<td>log<sub>2</sub>(1+55/64) bottom bits</td>
</tr>
<tr>
<td>266</td>
<td>0ffd5</td>
<td>0</td>
<td>0</td>
<td>5077f1f5f0cc82aab</td>
<td>&nbsp;2.858817e-13</td>
<td>log<sub>2</sub>(1+57/64) bottom bits</td>
</tr>
<tr>
<td>267</td>
<td>0ffd2</td>
<td>0</td>
<td>0</td>
<td>5007eeaa99f8ef14d</td>
<td>&nbsp;3.554090e-14</td>
<td>log<sub>2</sub>(1+59/64) bottom bits</td>
</tr>
<tr>
<td>268</td>
<td>0ffd5</td>
<td>0</td>
<td>0</td>
<td>4a83eb6e0f93f7a64</td>
<td>&nbsp;2.647316e-13</td>
<td>log<sub>2</sub>(1+61/64) bottom bits</td>
</tr>
<tr>
<td>269</td>
<td>0ffd3</td>
<td>0</td>
<td>0</td>
<td>466c525173dae9cf5</td>
<td>&nbsp;6.254831e-14</td>
<td>log<sub>2</sub>(1+63/64) bottom bits</td>
</tr>
<tr>
<td>270</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>271</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>272</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>273</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>274</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>275</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>276</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>277</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>278</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>279</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>280</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>281</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>282</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>283</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>284</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>285</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>286</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>287</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>288</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>289</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>290</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>291</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>292</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>293</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>294</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>295</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>296</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>297</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>298</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>299</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>300</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>301</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>302</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
<tr>
<td>303</td>
<td>0badf</td>
<td>0</td>
<td>1</td>
<td>40badfc0badfc0bad</td>
<td></td>
<td>unused</td>
</tr>
</tbody></table>

<h2>Notes and references</h2>


</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Akamai to shut down its CDN operations in China (284 pts)]]></title>
            <link>https://content.akamai.com/index.php/email/emailWebview?email=NjQyLVNLTi00NDkAAAGWBQgHSPFMp0ow2aF67IAbDOB0c1pNppYjWH8ZCkGxrVi4pDs7pT_120NiLvARghhVOBbaIJqps_3Ii2OZlixo3IPjhpR79JsTe-0&amp;trk=comments_comments-list_comment-text</link>
            <guid>42603585</guid>
            <pubDate>Sun, 05 Jan 2025 18:02:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://content.akamai.com/index.php/email/emailWebview?email=NjQyLVNLTi00NDkAAAGWBQgHSPFMp0ow2aF67IAbDOB0c1pNppYjWH8ZCkGxrVi4pDs7pT_120NiLvARghhVOBbaIJqps_3Ii2OZlixo3IPjhpR79JsTe-0&#x26;trk=comments_comments-list_comment-text">https://content.akamai.com/index.php/email/emailWebview?email=NjQyLVNLTi00NDkAAAGWBQgHSPFMp0ow2aF67IAbDOB0c1pNppYjWH8ZCkGxrVi4pDs7pT_120NiLvARghhVOBbaIJqps_3Ii2OZlixo3IPjhpR79JsTe-0&#x26;trk=comments_comments-list_comment-text</a>, See on <a href="https://news.ycombinator.com/item?id=42603585">Hacker News</a></p>
Couldn't get https://content.akamai.com/index.php/email/emailWebview?email=NjQyLVNLTi00NDkAAAGWBQgHSPFMp0ow2aF67IAbDOB0c1pNppYjWH8ZCkGxrVi4pDs7pT_120NiLvARghhVOBbaIJqps_3Ii2OZlixo3IPjhpR79JsTe-0&trk=comments_comments-list_comment-text: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Help! Politics Blog Cloudflare Subpoena (135 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=42603292</link>
            <guid>42603292</guid>
            <pubDate>Sun, 05 Jan 2025 17:24:31 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=42603292">Hacker News</a></p>
Couldn't get https://news.ycombinator.com/item?id=42603292: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Ads chew through half of mobile data (205 pts)]]></title>
            <link>https://www.nextpit.com/ads-consume-half-of-your-mobile-data</link>
            <guid>42602673</guid>
            <pubDate>Sun, 05 Jan 2025 16:06:06 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nextpit.com/ads-consume-half-of-your-mobile-data">https://www.nextpit.com/ads-consume-half-of-your-mobile-data</a>, See on <a href="https://news.ycombinator.com/item?id=42602673">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <p><span><span>Many people see adverts as the scourge of the internet but they remain the major, and in many cases, only, revenue stream for online media publishers. Another blow has been struck to online advertising recently, however, as a study has revealed how it could constitute for as much as 79 percent of the mobile data consumed by each web page. &nbsp;</span></span>&nbsp;</p>
</div><div>
     
<h2><span><span>An average of 48% of our data is spent on ads</span></span></h2> 
<p><span><span><a href="https://www.businessinsider.com/enders-analysis-ad-blocker-study-finds-ads-take-up-79-of-mobile-data-transfer-2016-3?r=DE&amp;IR=T" target="_blank">The&nbsp;study</a>,</span></span><span><span> published by media research firm <a href="https://www.endersanalysis.com/" target="_blank">Enders Analysis</a> in late April, suggested that, on average, almost half of the data required to view a web page&nbsp;is consumed by advertising. </span><span>To test this, <em>Enders</em> used a browser that mimicked an iPhone 6 and accessed a total of eight "popular" news sites (though they didn't confirm what these were).&nbsp;</span></span></p> 
<p><span><span><em>Ender</em>'s published the chart below which shows&nbsp;the&nbsp;data consumed by&nbsp;three&nbsp;web page elements: HTML (blue), Javascript (orange) and ads (green). </span><span>The columns below correspond&nbsp;to the data (in megabytes) consumed by each of the eight websites. Pages were loaded once in their entirety, once with ads disabled, and once with Javascript and ads</span><span>&nbsp;disabled to achieve the results.</span></span></p> 
<figure>
 <img alt="Enders Analysis" src="https://fs.npstatic.com/userfiles/7031685/image/enders-analysis-w782.jpg" srcset="https://fs.npstatic.com/userfiles/7031685/image/enders-analysis-w782.jpg 782w, https://fs.npstatic.com/userfiles/7031685/image/enders-analysis-w596.jpg 596w, https://fs.npstatic.com/userfiles/7031685/image/enders-analysis-w450.jpg 450w, https://fs.npstatic.com/userfiles/7031685/image/enders-analysis-w336.jpg 336w, https://fs.npstatic.com/userfiles/7031685/image/enders-analysis-w300.jpg 300w" sizes="(max-width: 810px) calc(100vw - 28px), 782px" loading="lazy" width="782" height="440"> 
 <figcaption>
  <span><span>Data transfer from eight different news sites. </span><span>/ © Enders Analysis</span></span>
 </figcaption> 
</figure> 
<p><span><span>The conclusion is that the ads accounted for anywhere between 18&nbsp;and 79 percent of the data transferred while non-essential JavaScript elements&nbsp;added an extra 6 to 68 percent.&nbsp;</span></span></p> 
<p><span><span>"</span></span>On the basis of this investigation, an estimate that says advertising accounts for half of all data used by publisher pages on iPhones does not look unreasonable," <a href="https://www.theguardian.com/media/2016/mar/16/ad-blocking-advertising-half-of-data-used-articles" target="_blank">the report stated</a>.</p> 
<h2><span><span>Oh, so that's why I run out of data before the end of the month...</span></span></h2> 
<p>Well, not exactly. This was only tested on eight unnamed news sites&nbsp;on a system which represented an iPhone 6: it's far from comprehensive. That said, it does provide insight into the <em>potential</em>&nbsp;effect that advertising can have on mobile data.</p> 
<p>Mobile data is consumed by far more than just webpages: downloads, streaming, messages and apps can all add to how much mobile data your device uses. But mobile browsers like Chrome are often at the top of this list&nbsp;(just check your <em>mobile data</em> page in your Android settings now to see for yourself).</p> 
<figure>
 <img alt="ABP banners" src="https://fs.npstatic.com/userfiles/6792426/image/ABP-banners-w782.jpg" srcset="https://fs.npstatic.com/userfiles/6792426/image/ABP-banners-w782.jpg 782w, https://fs.npstatic.com/userfiles/6792426/image/ABP-banners-w596.jpg 596w, https://fs.npstatic.com/userfiles/6792426/image/ABP-banners-w450.jpg 450w, https://fs.npstatic.com/userfiles/6792426/image/ABP-banners-w336.jpg 336w, https://fs.npstatic.com/userfiles/6792426/image/ABP-banners-w300.jpg 300w" sizes="(max-width: 810px) calc(100vw - 28px), 782px" loading="lazy" width="782" height="440"> 
 <figcaption>
  <span><span>Many people turn to adblock apps to reduce mobile data usage, but it's a contentious subject. </span><span>/ © ANDROIDPIT</span></span>
 </figcaption> 
</figure> 
<h2>Final thoughts</h2> 
<p><span><span>Solutions to this issue are scarce, but Adblock services do provide&nbsp;one way to reduce this data consumption. This is a c</span><span>ontroversial subject, though, as ads&nbsp;are often the sole&nbsp;source&nbsp;of a website's revenue, and cutting this off invariably means cutting funding for that site.&nbsp;</span></span></p> 
<p>With online ads being so omnipresent&nbsp;– and indeed vital to the survival of most websites&nbsp;– we just hope that they can be made more efficient, and their cost to the mobile data plans of consumers reduced further. For more ideas on this topic, check out our helpful guide to <a href="https://www.nextpit.com/reduce-mobile-data-usage-android" target="_top">reducing your mobile data consumption</a>.</p> 
<p>What is your position on online advertising and mobile data consumption? Let us know in the comments.</p>
  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[In my life, I've witnessed three elite salespeople at work (242 pts)]]></title>
            <link>https://slate.com/life/2024/12/work-jobs-sales-telemarketing-america.html</link>
            <guid>42602330</guid>
            <pubDate>Sun, 05 Jan 2025 15:20:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://slate.com/life/2024/12/work-jobs-sales-telemarketing-america.html">https://slate.com/life/2024/12/work-jobs-sales-telemarketing-america.html</a>, See on <a href="https://news.ycombinator.com/item?id=42602330">Hacker News</a></p>
<div id="readability-page-1" class="page"><article data-uri="slate.com/_components/article/instances/cm4n3eiyb00150sm0i959vrrb@published" data-has-roadblock="false" data-rubric="work" itemscope="" itemtype="http://schema.org/Article">  

  <div data-uri="slate.com/_components/cover-story-image/instances/cm4n3eiyb00100sm0mo8kfuu5@published">
    <div>
        <p><img src="https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg" width="2" height="1" srcset="https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=320 320w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=480 480w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=600 600w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=840 840w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=960 960w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=1280 1280w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=1440 1440w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=1600 1600w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=1920 1920w,
https://compote.slate.com/images/ee87b27d-f41a-4a49-8ee2-b366a18cb756.jpeg?width=2200 2200w" sizes="100vw" alt="A sea of telemarketing cubicles, some empty with asleep computers, others occupied with desk lights and people in headsets making sales calls.">

</p>
      </div>

    <p><span>Illustration by Natalie Matthews-Ramo</span>
    </p>
</div>

<header>

  <a href="https://slate.com/life/work">      Work</a>

  <h2 itemprop="headline">Smells Like American Spirit</h2>




    </header>
  

  <section>
      


    <div itemprop="mainEntityOfPage">
          <p data-word-count="21" data-uri="slate.com/_components/slate-paragraph/instances/cm4nauuyx000h3b73487r3ekm@published"><a href="https://slate.com/theslatest?utm_source=slate&amp;utm_medium=article&amp;utm_campaign=article_plain_text_topper"><em>Sign up for the Slatest</em></a><em> to get the most insightful analysis, criticism, and advice out there, delivered to your inbox daily.</em></p>

  <p data-word-count="209" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3eiyb00120sm0zhdck0d1@published">In my life, I’ve personally witnessed three elite salespeople at work. The first was in the Johnson County, Iowa, jail, where I spent July&nbsp;4 and 5 some years ago for reasons I’d rather not go into here. It was so overcrowded that we had to sleep head to foot on foam pads, and on the second day, as the discharge process dragged into the afternoon and hangovers set in, the inmates became restive. Among us was a nondescript heavyset guy who started to hold forth: <em>Y’all want to know how to disable a burglar alarm with aluminum foil? Want to know how to cook meth without using fertilizer? Did you know there’s a way to open the door of a squad car from the inside?</em> Soon, almost the entire jail had gathered around him like kindergartners at story time, listening raptly as he dispensed criminal wisdom. Possibly he was making it all up as he went; a guy lying on the floor next to me with his forearm over his eyes would periodically mutter <em>that’s not true</em>,<em> uh-huh</em>,<em> that’s a great way to burn down your house</em>, that kind of thing. But if anything, that only increased my admiration—this guy had installed himself as top dog just by bullshitting.</p>

  

  <p data-word-count="112" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkec00183b73v7t98gbn@published">I know a good salesman when I see one. I was, briefly, the No.&nbsp;1 telemarketer in the United States. I can’t prove it; this was around 20 years ago, and I haven’t kept any of my framed “top seller” certificates or the daily sales sheets showing me already hitting 350&nbsp;percent of my weekly quota by Tuesday afternoon. But the company I worked for had <a href="https://money.cnn.com/2000/11/01/deals/worldcom/tracking.htm">one of the biggest telemarketing divisions</a> in the world, and during my hot streak there were several weeks in which I was the top salesperson in the entire company. Believe me or not, but who’d lie about being good at telemarketing? It’s like falsely claiming to have gonorrhea.</p>

  <p data-word-count="198" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkfa001a3b73w7sha16c@published">What’s strange is how completely I’d forgotten about this period in my life in the decades since, as one “forgets”—maybe <em>represses</em> is the more accurate word—certain embarrassing exes or haircuts. But it all came back to me recently, when I watched the HBO docuseries <a href="https://slate.com/culture/2023/08/telemarketers-hbo-episode-3-pat-pespas-max-documentary-finale.html"><em>Telemarketers</em></a>. If you’ve ever worked in telemarketing, you’ll immediately recognize the setting: the low-ceilinged, fluorescent-lit office building at the edge of town, the empty liquor bottles piled up in the men’s room, a time capsule of a world that came and went nearly unnoticed. You may even recognize yourself in the grainy VHS footage: an alternative but otherwise identical self, hunched over in an upholstered cubicle, rattling off canned rebuttals to some baffled retiree as you mime the jack-off motion for the amusement of the temporarily bankrupt drug dealer in the next cubicle. It was the Y2K-adjacent midpoint between the door-to-door salesmen of the boomer era and the present-day dystopia of A.I.–enhanced robocalling—the last few years before American credulity (and disposable income) was decisively strip-mined by post–9/11 disillusionment, the emergence of the internet, an economy that seemed to lurch from crisis to crisis, and, well, petty cheats like me, the bedrock of this nation.</p>

  


  


  


  


  <p data-word-count="135" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkgf001c3b73i1jnvdr6@published">I became a telemarketer only because I’d bombed out of every other job in Iowa City, from making the federal minimum wage at a video arcade in Iowa’s largest shopping mall (fired for abusing the “free game” key) to working the graveyard shift at a 24-hour adult video store (fired for being “too horny”). There was unlimited demand for telemarketers in those days; this was in the early aughts, at the tail end of the long-distance wars, when <a href="https://www.nytimes.com/1995/01/21/us/no-holds-barred-battle-for-long-distance-calls.html">more than 25&nbsp;million people a year</a> were switching phone companies in pursuit of lower rates on long-distance calls, a sentence that might as well be written in ancient Sumerian to anyone under 30. You didn’t really even have to apply back then. You just put your name in and they told you what day you were starting.</p>

  <p data-word-count="237" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkhf001e3b73ihp3r2sa@published">Everyone said that telemarketing was the worst job in town, and for once, everyone was right. Your very first day, you understood that this was the culmination of a long series of bad decisions, the consequences of which you thought you’d escaped—but no, you realized as you walked past the cars in the parking lot with trash bags duct-taped over shattered windows and avoided eye contact with the loiterers in the break room who checked the change slot after you bought a drink from the Coke machine—you’d only put them off until right now. After a short training period that seemed designed mostly to weed out the people who weren’t capable of sitting in a chair for four hours at a time (about half the applicants), we spent some time listening in on the calls of top sellers. I expected them to be devilishly persuasive, modern-day snake charmers, but there didn’t seem to be much to it. They’d tell people they could save them money on their phone bills. If the prospect said they weren’t interested, the seller would either keep talking as if they hadn’t heard or, if a hang-up seemed imminent, recite a “resistance buster” like “I am going to send YOU a check!” The abruptness of this non sequitur, half-shouted over the tail end of the conversation, almost always derailed the lead’s attempts at disengagement, and few people could resist asking, “For how much?”</p>

  


  


  


  


  <p data-word-count="48" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fki7001g3b73plc24rco@published"><em>What do you think?</em> my manager asked after I’d had a few days of listening in on these calls. Could I do it? My entire life savings at the time amounted to a stocking cap about half full of change. I had no choice but to find out.</p>

  
  <p data-word-count="113" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkj6001h3b73ommpftf4@published">In the early 2000s, most people were vaguely embarrassed to work in sales—I was—because it evinced need. This was a time when material abundance was such a given that Americans treated it as an entitlement; the gravest insult you could’ve lobbed at someone then was “sellout,” i.e., someone so tactless that they actively pursued success. It was a far cry from today, when we’ve all been stripped of even the pretense of being above the hard sell. In that context, it was only logical that the innate neediness of a sales pitch would be regarded as shameful, almost excremental. Salespeople were by definition losers—if they weren’t, they wouldn’t be asking you for money.</p>

  
  <p data-word-count="162" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkjx001i3b73x4w89hoe@published">This was a very novel attitude. Go back a century, when the margins were fat and the marks were plentiful, and sales was a respectable, even aspirational profession, the salesman as romantic and as quintessentially American as the cowboy. If the cowboy limned the frontiers of America, the salesman pacified its inhabitants by converting them into consumers, just as the salesman’s predecessors had converted them into Christians. The first proto-salesmen in America were the roving evangelical preachers, circuit riders who were paid a salary by the church, had monthly sermon quotas, and tracked how many souls they converted. (One definition of <em>evangelize</em> is “to talk about how good you think something is”—to sell, basically.) For pocket money, many of these preachers sold Bibles and books like the <em>Farmer’s Almanac</em>, and in doing so blazed a trail for the secular salesmen who followed, literally, in their footsteps, traveling the same routes, bearing novelty goods like sewing machines, clocks, smut books, and tin scissors.</p>

  


  


  


  


  <p data-word-count="187" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkkw001j3b734mn7p66u@published">Many salesmen turned out to be outright cheats, peddling fake spices or canned hams made of wood shavings. Others were a little craftier. According to <a href="https://www.hup.harvard.edu/books/9780674018334"><em>Birth of a Salesman: The Transformation of Selling in America</em></a>, by Harvard Business School scholar Walter A. Friedman, a clock salesman, confronted with settlers who swore they had no need for a timepiece, would cunningly ask them to hold a clock for him while he traveled the rest of his route, knowing that when he returned, they’d be unable to live without it. Firms working the <a href="https://history.nebraska.gov/publications_section/lightning-rod-salesmen/">lightning-rod grift</a> sent effete dandies to sell farmers on lightning rods for their house, barn, even their outhouse and doghouse, with no money required upfront, but when it was time to collect payment, the salesman was replaced by two or three hulking roughnecks. Book salesmen who met resistance when they returned to settle the bill on preorders were instructed to set up shop at the dining room table and fill out paperwork until money was produced. To keep out “Yankee peddlers,” more than a few municipalities passed laws requiring that out-of-town salesmen buy an expensive license.</p>

  <figure data-uri="slate.com/_components/image/instances/cm4n409fz003e3b73lbznop0d@published" data-editable="imageInfo"><p><img loading="lazy" src="https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0" alt="Black-and-white image of a woman listening to a salesman in her doorway." width="1560" height="1040" data-src="https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0" data-srcset="https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=320 320w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=480 480w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=600 600w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=840 840w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=960 960w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1280 1280w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1440 1440w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1600 1600w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=1920 1920w,
https://compote.slate.com/images/b49f71f9-41ef-42c4-83ec-bba8484e3305.jpeg?crop=1560%2C1040%2Cx0%2Cy0&amp;width=2200 2200w">
        
      </p>
<figcaption>
<span>Photo by Stockbyte/Getty Images Plus</span>
</figcaption>
</figure>

  


  


  


  


  <p data-word-count="286" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkm1001k3b73hho5thul@published">But in a very real sense, salesmen built the American economy and, by extension, America itself. In his book, Friedman notes that in the mid-19<sup>th</sup> century, <a href="https://www.nytimes.com/1988/07/20/us/farm-population-lowest-since-1850-s.html">more than half</a> the U.S. population lived on a farm. Consumer markets were nonexistent. Salesmen went out and made them from scratch, a sale at a time, and not simply by bringing quality goods to eager buyers; they took them by their lapels and didn’t let go until they signed on the dotted line. Fortune magazine observed, in the mid-20<sup>th</sup> century, “Mass production would be a shadow of what it is today if it had waited for the consumer to make up his mind.” But because of what scholars call “supply-side bias,” we regard 19<sup>th</sup>-century tycoons like Rockefeller, Carnegie, and Vanderbilt as <em>Übermensch</em>, while erasing the accomplishments of the legions of lowly salesmen. Why? Economists, generally insulated from the dirty realities of turning a buck by tenure and/or wealth, think of demand as a vast natural force to be harnessed, like wind or oil—a conception that fits hand in glove with the equally simplistic “great man” theory, which posits that some people (men) are just born great. Sounds nice, but things look a little less elegant to the salesmen in the trenches. They know: Demand is more like blood, and it has to be mercilessly extracted, drop by drop, by an army of sweaty little goblins who don’t eat unless they hit their quotas. Suddenly, the economy looks more like an infinite series of tiny frauds than a harmonious ecosystem. And if the Greatest Economy in the World is little more than a shill mill, the implications for the Greatest Country in the World are dismaying, to say the least.<strong></strong></p>

  


  <p data-word-count="55" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fknz001l3b73jku1pucv@published">Who’s to say? I’m sure one of my betters could produce a little chart proving that the economy is definitely, objectively NOT bullshit, but get a job in sales and you’ll learn the truth by the end of your first week: People don’t buy out of need or desire; they buy because they’ve been sold.</p>

  


  


  


  
  <p data-word-count="214" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkow001m3b73gj6cv54m@published">The problem was, I was terrible at selling, at least in the beginning. To be fair, we didn’t have it easy. The telemarketers in <em>Telemarketers</em> were calling for donations to police charities, often (falsely) claiming they were collecting for officers wounded in the line of duty. The burned-out salesmen in the 1969 documentary <em>Salesman</em>, by the Maysles brothers and Charlotte Zwerin, were selling Bibles to people whose names they got from the local parishes, introducing themselves at the door by saying, “I’m here from the church.” If you can’t close <em>those</em>, just hang it up and get a nine-to-five square job. In contrast, I was selling subpar phone service to people who usually had better service already, and who were livid from the moment they realized why I was calling. The majority of the leads hung up in the first three seconds; others stayed on the phone only long enough to detail the sexual acts they’d performed on my mother the previous night. Once, early in my telemarketing days, I called a guy in Colorado who silently listened to my pitch, then asked if I was working out of the Greeley call center. <em>Yes</em>, I lied. “When you get off work tonight,” he said, “I’ll be waiting in the parking lot with a shotgun.”</p>

  


  <p data-word-count="63" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkpx001n3b73f0p082px@published">I couldn’t understand it. I had an airtight pitch and I’d memorized all the rebuttals. But no one was buying. Finally, the manager had me sit in on the calls of one of the call center’s top performers, a soft-spoken divorcée who sat at her corner cubicle and seemed to close sales nonstop, all shift. This was the second elite salesperson I’ve witnessed.</p>

  <p data-word-count="173" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkqv001o3b73ml70p16h@published">As I remember it, our daily quota was around 3.5 sales in a four-hour shift. The auto-dialer could easily connect you to 100 potential buyers an hour, inclusive of hang-ups and no-answers, meaning you only had to hit a success rate of less than 1 percent. Sounds easy, but most people didn’t come close. Management would let you sit on the phones almost indefinitely without hitting your quotas, but few people could endure this. It was too demoralizing, being a rejection sponge, and, as with waiting tables, the base pay if you made no sales<strong> </strong>was unlivable. The only way to make real money was to sell, often and consistently. On the quota sheets they gave us, there was a gradated table of commissions; when you hit your weekly quota, you earned a modest bonus, and each sale was worth an additional sum. These sums increased gradually, then exponentially; the first sale after your quota was worth something like $1.10, the 10<sup>th</sup> was worth $8.50, the 30<sup>th</sup> was worth $90, and so on.</p>

  


  


  


  


  <p data-word-count="170" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fks0001p3b73wen909qa@published">To reach the higher tiers—a rare feat—you had to get hot and stay hot, every day of the week. For an accomplished salesperson, it was fairly common to have a good day—close five or six or even a dozen sales—but the next day, you’d almost always be back to average or worse. The divorcée, though, was one of the few who could consistently pile up sales so that by Thursday she was making $60, $70, $100 a sale. She was a matronly woman with a kid at home whom we regarded as stuck-up and aloof, though in retrospect this was only because she showed zero interest in smoking ditch weed in the parking lot with us before the shift, or slugging cognac on breaks—she had the temerity to treat her job like a job instead of a temporary diversion before school or jail or some final capitulation that’d land you back in your childhood bedroom. She came in, took her seat, oversize travel mug from home in hand, and sold.</p>

  <p data-word-count="139" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkt8001q3b73eb00p852@published">When I shadowed her, I found to my surprise that she was reciting almost word for word the same pitch as everyone else, the same stale rebuttals, but getting much different results. Her warm voice and metronomic cadence had an almost narcotic effect on the leads. Even some of the cranks who snapped at her when they picked up—<em>I don’t want any goddamn phone service, I told the last guy to put me on the no-call list</em>, would meekly backtrack after listening to 20 or 30 seconds of her pitch: <em>I’m sorry, I had a long day at work, what’s this about saving me money? </em>Even I started feeling inclined toward her after a couple of hours. (“Hey, I don’t know if you have plans after work, but I know a place with 10-cent beers between 10 and 11&nbsp;…”)</p>

  


  


  


  


  <p data-word-count="82" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkua001r3b73l59segmm@published">Eventually, it clicked, and I learned one of the bedrock principles of salesmanship: Whether you’re peddling long distance over the phone, Bibles door to door, or your own political candidacy on live national TV, it doesn’t matter what you’re selling—it matters how you make people feel. If you make them feel good, they’ll say yes. If you don’t, you could be selling a pill that reverses male-pattern baldness and makes you lose weight without exercise, and they’ll still turn you down flat.</p>

  <figure data-uri="slate.com/_components/image/instances/cm4n42fkh00463b73vetsjbr6@published" data-editable="imageInfo"><p><img loading="lazy" src="https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0" alt="A cubicle farm of telemarketers at work." width="1910" height="1273" data-src="https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0" data-srcset="https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=320 320w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=480 480w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=600 600w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=840 840w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=960 960w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=1280 1280w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=1440 1440w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=1600 1600w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=1920 1920w,
https://compote.slate.com/images/4f53bd0a-bdf8-48e6-a31c-fff1b31fb6eb.jpeg?crop=1910%2C1273%2Cx21%2Cy0&amp;width=2200 2200w">
        
      </p>
<figcaption>
<span>MBNA employees staff the company’s call center at its Portland facility on Washington Avenue.</span>
<span>John Ewing/Portland Press Herald via Getty Images</span>
</figcaption>
</figure>

  


  <p data-word-count="124" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkv5001s3b73xapnjn2p@published">What this entailed for me was basically an attitude adjustment. No one is happy being a telemarketer, no matter how much you’re making, but bad energy will drive away even the easiest money, not only in an Instagram-mysticism law-of-attraction sense, but in the literal sense that Shelly in Wichita is not going to buy what you’re selling, no matter how good the deal is, if she can clearly hear in your voice how much you hate your job and, by extension, her. Grasping this was simple enough, but what was difficult was understanding just how much I had to adjust my sales persona, a realization that really sank in only after a few days of contrasting my halting monotone with the divorcée’s sparkly confidence.</p>

  


  


  


  <p data-word-count="261" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkw4001t3b73362c3rm2@published">Once I found my sweet spot, though, I started racking up sales. (To this day I can’t talk on the phone without lapsing into my “telemarketer voice,” which sounds like <a href="https://slate.com/culture/2014/09/phil-hartman-remembered-by-jack-handey-the-snl-writer-behind-unfrozen-caveman-lawyer-and-other-sketches.html">Phil Hartman</a> on ecstasy.) I wasn’t a coaxer, a hand-holder, a persuader; I hit people with my spiel, and if they hesitated or said no, I hung up on them midsentence. On to the next one. Unlike many of my less successful colleagues, I quickly learned to take yes for an answer; though we were legally required to read a long list of mandatory disclosures to all our sales, I noticed that this often broke the spell and gave people an opening to back out or “wait and ask the wife about it.” As soon as I heard a yes, I said, “Great choice!” and transferred them to confirmation. My manager occasionally came by and reminded me that it was technically illegal to skip my disclosures, but he made commission off my commission, and his tone made it clear that I could do as I pleased as long as I kept putting up numbers. Which I did, to an almost ludicrous degree. I hit every kicker, every bonus. I won scented candles, gift cards, and countertop appliances in daily sales contests. I earned the executive parking space in the very front of the lot, even though I took the bus to work. I was pretty pleased with myself. Making $800 in 15 to 20 hours a week when your monthly rent is $300 and beers are a dollar is real wealth.</p>

  <p data-word-count="4" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkxk001u3b73syrhj4bn@published">But it didn’t last.</p>

  
  <p data-word-count="80" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fky5001v3b7376fg680v@published">There’s a scene in Episode&nbsp;2 of <em>Telemarketers</em> that features a company’s top closer as he works, and we hear him muttering the most evil shit imaginable after being hung up on by old ladies named Joyce and Ethel: <em>I hope your house catches on fire. I hope your neighborhood gets shot up, you stinking bitch.</em> The scene is shot as a horror movie, with a sinister score, but I have to admit I laughed when I saw it. I understood.</p>

  


  


  


  <p data-word-count="89" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fkz1001w3b73vkuwj5o5@published">Once I started sitting by my fellow top sellers, I noticed that they seemed to enjoy ripping people off. Lying was de rigueur, of course, and rates and plans were fabricated on the spot to close a sale—that’s not what I’m talking about. Instead, leads who begged to be put on the no-call list got vindictively scheduled for Saturday morning callbacks. When a sobbing woman said she couldn’t talk now, her husband was dying, my colleague snapped, <em>Then why’d you answer the phone, Linda?</em> It seemed personal for them.</p>

  <p data-word-count="146" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl0k001x3b73ld8lmxz8@published">It didn’t take me long to understand why. We had quotas to meet, and not meeting them could have severe consequences. (As in <em>Glengarry Glen Ross</em>, “first prize is a Cadillac&nbsp;… third prize is you’re fired.”) We badly needed a steady drip of yeses from these people. But the best salesman who ever lived couldn’t close more than 5 to 10 percent of cold calls, which means that the vast majority of everyone you speak to is going to be a no. Eventually, as you’re hung up on, insulted, rejected by hundreds of leads a day, you realize that, miraculously, you have found the architects of your misery: Here, right here—these are the people responsible! The people you’re trying to rip off are simultaneously ripping <em>you</em> off. They are both exploited and exploiters, saviors and enemies. You depend on them, and dependence can only breed contempt.</p>

  
  <p data-word-count="143" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl1w001y3b73mey38c9n@published">So when we promised a lady that we were going to send her a check to “offset” her $75 switching fee (the check was for $1.99), or we told some guy that his master file showed he was already paying 40&nbsp;cents a minute with the competition (we had no way to know what anyone was paying), and the third-party compliance or a manager cut in on the line and said, <em>Hey, you can’t say that, that’s not legal</em>, we dismissed them as soft, out of touch. Fairness, conscience, empathy, and honesty were luxuries that, like caviar or health insurance, were for other people—<em>we</em> had to <em>work</em> for a living. We were victims. Therefore, we had license to take whatever measures were necessary. Once this worldview sets in, it’s very difficult to break out of, not least because it often feels so perfectly just.</p>

  


  


  


  <p data-word-count="136" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl2v001z3b73nzq6np7n@published">But that’s just the moral alibi. Even worse is the “sales mindset.” Seeing the world through the lens of selling and dealmaking can feel freeing, even empowering, but all you’ve done is condemn yourself to a life of never-ending nickel-and-diming. The better you are at selling, the more debased your life becomes, as everything is reduced to a transaction, a leveraging of the smallest edge: <em>Oh, you didn’t come? I’ll get you next time, twice. You know I’m good for it.</em> “Doris, what if I throw in a $50 calling card?” mutates into “I’ll be charming at your office Christmas party if you do the dishes this month,” aimed at a befuddled partner who may or may not have yet realized that what they thought was a partnership is in fact closer to a mutual exploitation.</p>

  <p data-word-count="106" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl3z00203b73v1tpv1an@published">How tiresome, how demeaning to all parties involved—yourself most of all—to admit the logic of petty hucksterism into your actual life. But to leave money or advantage on the table is anathema, because you’re a hustler—not in the popular usage of being a tireless worker, but in the sense of always looking to hustle a mark, and the thing is, everyone is a mark. <em>Five more minutes and then it’s bath time</em>, you tell your 5-year-old nephew—and he goes for it without even negotiating! Cute kid, but weak, clearly not a winner. This mindset will get you far in life, but it comes at a cost.<em></em></p>

  
  <p data-word-count="171" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl4z00213b73r8bgm90n@published">The ultimate insight of the salesman is not that Everything Is Selling, although that can be true, to the degree that you embrace it. The actual jewel of wisdom that every salesman forges out of their agonies and humiliations, if they stay with it long enough, is that Everything Is Luck. Every hotshot hits stretches when you simply can’t close anyone. You thought that your success was a product of your gifts, but the success itself was a gift, a gift of randomness, of luck—and luck always turns. Starting one day, everyone hangs up, everyone says no. <em>Why are you talking like that?</em> a woman in Alabama says about your stupid sales voice, and just like that, your confidence is gone, without which you are utterly lost. Suddenly you understand that you are powerless, that you have less agency than an ant on the sidewalk, that you are no different from the losers you disdain, the two-sales-a-week scrubs exiled to the back-office cubicles, the ones who simply “don’t want it enough.”</p>

  


  


  


  <p data-word-count="173" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl5t00223b73iq6q0yqs@published">What makes it even worse is that the guy across from you, the mumbling clown who until now couldn’t close a door, is all of a sudden closing everything, his name now at the top of the dry-erase board, the boss setting iced sodas on his desk unsolicited, patting him on the back—even as you, the former No.&nbsp;1 telemarketer in America, who just had the executive parking space for, what, three weeks straight, suddenly has to stay late on Thursday night because you haven’t hit your weekly quota, a measly number that you used to crush by midday Monday. As you settle in for an after-hours shift among the new hires and loafers and no-hopers, many of whom are visibly satisfied to see you brought down to their level—and who can blame them?—you have to trust that the wheel will turn, even as you feel in your bones that it won’t, that you are cursed, that you are being punished for all those old ladies you ripped off, the 8&nbsp;a.m. callbacks you scheduled.</p>

  <p data-word-count="120" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl6v00233b73nd6hfisd@published">You can take the subtle humiliations of being moved to the desk stacked with training materials, of using a headset with bare metal earcups because you forgot cash for foamies and the boss no longer tosses you a pair from the stash he keeps in his drawer. (Those foamies are for closers.) You can put up with the abuse and hang-ups and death threats from the customers who seem to have sensed your weakness before they even picked up, and the long weeks making no more than the subminimum base wage. But the worst part is not knowing how long your cold streak will go on, if it will last days or weeks or months—or, as in my case, forever.</p>

  


  


  


  <p data-word-count="145" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl7u00243b730cq0gq3g@published">Before my luck could turn back, the company’s ran out. One day, more or less out of nowhere, it declared bankruptcy. The call center stayed open, but every call was to a pay phone, a dentist’s office, a tollbooth on the New Jersey Turnpike, instead of living, breathing, hot-blooded marks. The company was recycling the dregs, buying tranches of the cheapest trash leads on the market because it couldn’t afford the good ones. It soon decided to clean up the telemarketing division now that it didn’t matter anymore. I was one of the first to go, technically for not making my required disclosures—about cancellation fees, international rates, all that fine print nobody ever bothered to recite—on a sale. This was true, as far as grounds for termination go, though I had never made any required disclosures on any of the hundreds of my previous sales.</p>

  
  <p data-word-count="76" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fl8y00253b73bj2h9u8j@published">It didn’t matter; I’d saved up a lot of money, thousands in sales bonuses I hadn’t yet touched. I frankly felt relief as security escorted me out after my firing. As a guiding life principle, ressentiment is thin gruel, and after almost a year on the phones, I was happy to be leaving behind a world of ethical squalor, the never-ending petty wheedling hustle. <em>I’ll never live like that again</em>, I thought. How naive I was.</p>

  <p data-word-count="91" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3fla400263b73ys9mjyp2@published">In ways large and small, we live in a world shaped by telemarketing. When’s the last time you answered a call from an unknown number? How many tweets do you encounter <em>without </em>bots in the replies? Have you seen how many spam emails your parents receive? I chuckle to think how mad people used to get when we called during dinner—when do you have privacy now? Even your sleep app is hawking your data to companies trying to sell you melatonin gummies. Are these intrusions any less intrusive because they’re silent?</p>

  


  


  


  <p data-word-count="160" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3flb000273b733co9xw2q@published">Worse yet, decades of wage stagnation and the emergence of the gig economy have generalized the anxiety and pressure that used to be the exclusive domain of sales sweatshops; now we’re all pitching all the time, unironically using phrases like “building my personal brand,” indefatigably selling versions of ourselves via social media posts that fool no one, soliciting eyeballs, donations, subscriptions, views and clicks, for our Twitch streams, OnlyFans, Substacks, stand-up shows, GoFundMes, podcasts, NFTs, sending emails to our agent like, “Another piece in Slate, hmm, wonder if there’s a book in this one?” Manufactured precarity and the Hobbesian competition of <em>all against all</em>, combined with the public insistence on moral rectitude, have us all scrambling for grievances so we can justify doing what we must—even presidents and billionaires insist they are victims now. We’re all trapped in the back-office cubicle pod, our desperation rebranded as hustle, bitter entrepreneurs of abjection competing for the same dwindling pool of broke rubes.</p>


  <p data-word-count="139" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3flbz00283b73oog4l95g@published">Which brings me to the third elite salesperson. At the coffee shop I frequent, there are a number of panhandlers who come in regularly to beg for money. Most of them ask for change or a dollar in a desultory tone, open palm out, and get little or nothing. But one man comes in, walks up to a table, falls to his knees, interlaces his hands as if in prayer, and begs, at the top of his lungs, <em>Please please please, money, please I need a dollar! </em>This display of raw emotion is jarring even to jaded New Yorkers; he once did it to a European tourist next to me who scrambled to her feet, stammering, <em>Oh God, what, what did I do, what do you want?</em>, near tears. He only begged louder, scooting after her on his knees.</p>

  <p data-word-count="61" data-uri="slate.com/_components/slate-paragraph/instances/cm4n3flcu00293b73wznzu12i@published">Without fail, wallets are produced, cash is handed over. Anything to make it stop. Once he gathers $15 or $20, he dusts off his pants and walks out, smirking faintly, to his waiting girlfriend. The baristas and the other regulars dread his appearances, but I recognize him as the exemplar he is: The spirit of our era resides in this man.<strong><span></span></strong></p>

  

</div>

      <ul>
<li>
            <a href="https://slate.com/tag/history">
              History
            </a>
          </li><li>
            <a href="https://slate.com/tag/workplace">
              Workplace
            </a>
          </li>      </ul>

  </section>


</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The day I taught AI to read code like a Senior Developer (376 pts)]]></title>
            <link>https://nmn.gl/blog/ai-senior-developer</link>
            <guid>42601847</guid>
            <pubDate>Sun, 05 Jan 2025 14:15:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://nmn.gl/blog/ai-senior-developer">https://nmn.gl/blog/ai-senior-developer</a>, See on <a href="https://news.ycombinator.com/item?id=42601847">Hacker News</a></p>
<div id="readability-page-1" class="page"><div itemprop="articleBody">
    <p><em>A messy experiment that changed how we think about AI code analysis</em></p>

<p>Last week, I watched our AI choke on a React codebase - again. As timeout errors flooded my terminal, something clicked. We’d been teaching AI to read code like a fresh bootcamp grad, not a senior developer.</p>

<p>Here’s what I mean.</p>

<!--more-->

<h2 id="the-bootcamp-vs-senior-mindset">The Bootcamp vs Senior Mindset</h2>

<p>Remember your first day reading production code? Without any experience with handling mature codebases, you probably quickly get lost in the details<sup>[0]</sup></p>

<p>But watch a senior dev review a massive PR:</p>

<ul>
  <li>They jump straight to the core files</li>
  <li>Group changes by feature (“all auth changes, all db changes”)</li>
  <li>Build a mental model of architecture first</li>
  <li>Only then dive into implementation</li>
</ul>

<p>Obvious in hindsight, right? This realization led us to completely rewire our analyzer.</p>

<h2 id="the-experiment">The Experiment</h2>

<p>Instead of dumping files linearly, we built a context-aware grouping system:</p>

<div><pre><code><span>interface</span> <span>FileGroup</span> <span>{</span>
  <span>files</span><span>:</span> <span>ProjectFile</span><span>[];</span>
  <span>totalSize</span><span>:</span> <span>number</span><span>;</span>
  <span>groupContext</span><span>:</span> <span>string</span><span>;</span> <span>// 'auth', 'database', etc.</span>
<span>}</span>

<span>export</span> <span>const</span> <span>groupFiles</span> <span>=</span> <span>(</span><span>files</span><span>:</span> <span>ProjectFile</span><span>[]):</span> <span>FileGroup</span><span>[]</span> <span>=&gt;</span> <span>{</span>
  <span>// Group files by related functionality and size</span>
  <span>const</span> <span>fileInfos</span> <span>=</span> <span>files</span><span>.</span><span>map</span><span>(</span><span>file</span> <span>=&gt;</span> <span>({</span>
    <span>file</span><span>,</span>
    <span>size</span><span>:</span> <span>file</span><span>.</span><span>content</span><span>?.</span><span>length</span> <span>||</span> <span>0</span><span>,</span>
    <span>context</span><span>:</span> <span>getFileContext</span><span>(</span><span>file</span><span>.</span><span>path</span><span>)</span>
  <span>}));</span>

  <span>// Process larger, more important files first</span>
  <span>fileInfos</span><span>.</span><span>sort</span><span>((</span><span>a</span><span>,</span> <span>b</span><span>)</span> <span>=&gt;</span> <span>b</span><span>.</span><span>size</span> <span>-</span> <span>a</span><span>.</span><span>size</span><span>);</span>

  <span>const</span> <span>groups</span><span>:</span> <span>FileGroup</span><span>[]</span> <span>=</span> <span>[];</span>
  <span>let</span> <span>currentGroup</span> <span>=</span> <span>createEmptyGroup</span><span>();</span>

  <span>for</span> <span>(</span><span>const</span> <span>{</span> <span>file</span><span>,</span> <span>size</span><span>,</span> <span>context</span> <span>}</span> <span>of</span> <span>fileInfos</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>shouldStartNewGroup</span><span>(</span><span>currentGroup</span><span>,</span> <span>size</span><span>,</span> <span>context</span><span>))</span> <span>{</span>
      <span>groups</span><span>.</span><span>push</span><span>(</span><span>currentGroup</span><span>);</span>
      <span>currentGroup</span> <span>=</span> <span>createNewGroup</span><span>(</span><span>file</span><span>,</span> <span>size</span><span>,</span> <span>context</span><span>);</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>addFileToGroup</span><span>(</span><span>currentGroup</span><span>,</span> <span>file</span><span>,</span> <span>size</span><span>);</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> <span>groups</span><span>;</span>
<span>}</span>
</code></pre></div>

<p>Then we changed how we prompt the AI. Instead of “analyze this file”, we give it context about the feature group first:</p>

<div><pre><code><span>const</span> <span>buildGroupPrompt</span> <span>=</span> <span>(</span><span>group</span><span>:</span> <span>FileGroup</span><span>):</span> <span>string</span> <span>=&gt;</span> <span>{</span>
  <span>return</span> <span>`
    Analyzing authentication system files:
    - Core token validation logic
    - Session management
    - Related middleware
    
    Focus on:
    1. How these integrate with existing auth patterns
    2. Security implications
    3. Performance impact on other systems

    Files to analyze:
    </span><span>${</span><span>formatFiles</span><span>(</span><span>group</span><span>.</span><span>files</span><span>)}</span><span>
  `</span><span>;</span>
<span>}</span>
</code></pre></div>

<h2 id="the-holy-shit-moment">The Holy Shit Moment</h2>

<p>The results broke our benchmark script. We thought it was a bug.</p>

<p>The AI went from:</p>
<div><pre><code>"This file contains authentication logic using JWT tokens"
</code></pre></div>

<p>To:</p>
<div><pre><code>"Warning: This auth change could impact websocket connections.
The token refresh logic shares patterns with the notification 
service (added last month), suggesting a potential race 
condition during high-traffic socket reconnects.

Related PR: #1234 (merged last week) modified the same
retry logic. Consider adding backoff."
</code></pre></div>

<p>That’s senior dev level awareness. It was catching connections we hadn’t explicitly taught it about.</p>

<h2 id="what-actually-changed">What Actually Changed?</h2>

<p>The magic isn’t in fancy ML or bigger models. It’s in mirroring how senior devs think:</p>

<ol>
  <li><strong>Context First</strong>: We front-load system understanding before diving into code</li>
  <li><strong>Pattern Matching</strong>: Group similar files to spot repeated approaches</li>
  <li><strong>Impact Analysis</strong>: Consider changes in relation to the whole system</li>
  <li><strong>Historical Understanding</strong>: Track why code evolved certain ways</li>
</ol>

<h2 id="the-unexpected-side-effects">The Unexpected Side Effects</h2>

<p>The system started catching things we didn’t design for:</p>

<ul>
  <li>Spotting copy-pasted code across different features</li>
  <li>Flagging inconsistent error handling patterns</li>
  <li>Warning about potential performance bottlenecks</li>
  <li>Suggesting architectural improvements based on usage patterns</li>
</ul>

<h2 id="why-this-matters">Why This Matters</h2>

<p>Every few days there’s a new “AI-powered IDE” on Product Hunt. They’re solving the wrong problem. Making code suggestions without deep context is like having a brilliant junior dev who just joined yesterday - they’ll write clean code that subtly breaks everything.</p>

<p>The key isn’t better code generation. It’s better code understanding.</p>

<h2 id="open-questions">Open Questions</h2>

<p>We’re still figuring out:</p>

<ul>
  <li>When to refresh vs preserve historical understanding</li>
  <li>How to handle conflicting patterns in different parts of the system</li>
  <li>Whether to expose uncertainty in the analysis</li>
</ul>

<h2 id="whats-next">What’s Next?</h2>

<p>I’m curious if we can teach AI to spot other senior dev instincts:</p>

<ul>
  <li>Identifying tech debt before it happens</li>
  <li>Suggesting architectural improvements</li>
  <li>Catching security issues from usage patterns</li>
  <li>Understanding unwritten team conventions</li>
</ul>

<p>The problem isn’t making AI write more code. It’s teaching it to think about code the way experienced developers do.</p>

<p><small>
[0] Previously said <em>You probably did what I did - start at line 1, read every file top to bottom, get lost in the details.</em>, edited in response to <a href="https://news.ycombinator.com/item?id=42602156">feedback from advael</a>
</small></p>

  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Human study on AI spear phishing campaigns (179 pts)]]></title>
            <link>https://www.lesswrong.com/posts/GCHyDKfPXa5qsG2cP/human-study-on-ai-spear-phishing-campaigns</link>
            <guid>42601681</guid>
            <pubDate>Sun, 05 Jan 2025 13:40:43 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.lesswrong.com/posts/GCHyDKfPXa5qsG2cP/human-study-on-ai-spear-phishing-campaigns">https://www.lesswrong.com/posts/GCHyDKfPXa5qsG2cP/human-study-on-ai-spear-phishing-campaigns</a>, See on <a href="https://news.ycombinator.com/item?id=42601681">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="postContent"><p id="block0">TL;DR: We ran a human subject study on whether language models can successfully spear-phish people. We use AI agents built from GPT-4o and Claude 3.5 Sonnet to search the web for available information on a target and use this for highly personalized phishing messages. We achieved a click-through rate of above 50% for our AI-generated phishing emails.</p><h2 id="Full_paper__https___arxiv_org_abs_2412_00586">Full paper: <a href="https://arxiv.org/abs/2412.00586">https://arxiv.org/abs/2412.00586</a></h2><p id="block1">This post is intended to be a brief summary of the main findings, these are some key insights we gained:</p><ol><li id="block2">AI spear-phishing is highly effective, receiving a click-through rate of more than 50%, significantly outperforming our control group.</li><li id="block3">AI-spear phishing is also highly cost-efficient, reducing costs by up to 50 times compared to manual attacks.</li><li id="block4">AI models are highly capable of gathering open-source intelligence. They produce accurate and useful profiles for 88% of targets. Only 4% of the generated profiles contained inaccurate information.</li><li id="block5">Safety guardrails are not a noteworthy barrier for creating phishing mails with any tested model, including Claude 3.5 Sonnet, GPT-4o, and o1-preview.</li><li id="block6">Claude 3.5 Sonnet is surprisingly good at detecting AI-generated phishing emails, though it struggles with some phishing emails that are clearly suspicious to most humans.</li></ol><h2 id="Abstract">Abstract</h2><p id="block7">In this paper, we evaluate the capability of large language models to conduct personalized phishing attacks and compare their performance with human experts and AI models from last year. We include four email groups with a combined total of 101 participants: A control group of arbitrary phishing emails, which received a click-through rate (recipient pressed a link in the email) of 12%, emails generated by human experts (54% click-through), fully AI-automated emails 54% (click-through), and AI emails utilizing a human-in-the-loop (56% click-through). Thus, the AI-automated attacks performed on par with human experts and 350% better than the control group. The results are a significant improvement from similar studies conducted last year, highlighting the increased deceptive capabilities of AI models. Our AI-automated emails were sent using a custom-built tool that automates the entire spear phishing process, including information gathering and creating personalized vulnerability profiles for each target. The AI-gathered information was accurate and useful in 88% of cases and only produced inaccurate profiles for 4% of the participants. We also use language models to detect the intention of emails. Claude 3.5 Sonnet scored well above 90% with low false-positive rates and detected several seemingly benign emails that passed human detection. Lastly, we analyze the economics of phishing, highlighting how AI enables attackers to target more individuals at lower cost and increase profitability by up to 50 times for larger audiences.</p><h2 id="Method">Method</h2><p id="block8">In a brief summary, the method consists of 5 steps:</p><ol><li id="block9">Collecting Targets.</li><li id="block10">Collecting information about the targets using an AI web-browsing agent that crawls publicly available information.</li><li id="block11">Writing personalized phishing emails based on the collected information and carefully crafted language model prompts.</li><li id="block12">Sending emails using custom-built and automated software.</li><li id="block13">Analyzing outcomes by tracking clicks on embedded URLs in emails.</li></ol><figure><img src="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/zihrxmduql07fedjthpg" srcset="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/ikadfgqrctfkr4odt4zs 340w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/mj70icvkqleshm2gkrjh 680w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/chqjwjz8z46bbjabcfip 1020w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/qqxaaxn7dt2tazrnsmvg 1360w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/r0azmgnf9kw4bxgqz27w 1700w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/muertujy7chjqeyojaxw 2040w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/h4ess8sexvyuodbowyno 2380w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/hwcrsogy7gjv5aisifif 2720w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/xtso6rsibpx4g0ccybdj 3060w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/rln5x6elatjmjojxorrf 3372w"><figcaption>Example from the paper for an AI-compiled profile from step 2 and an AI-written email from step 3.</figcaption></figure><h2 id="Results">Results</h2><p id="block14">For full results, <a href="https://arxiv.org/abs/2412.00586">go to the paper</a></p><p id="block15">The results of the phishing emails are presented in the figure below (figure 5 in the paper). The control group emails received a click-through rate of 12%, the emails generated by human experts 54%, the fully AI-automated emails 54%, and the AI-emails utilizing a human-in-the-loop 56%. Both the AI-generated email types (fully automated and human-in-the-loop) performed on par with the emails created by human experts.</p><figure><img src="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/nqlxyoxumgrnuhtulxli" srcset="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/d8bvnmizhwnkysw6onlg 360w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/szvscbwya6pdk72bkybn 720w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/x1azo4k5hnkaaaxe9smv 1080w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/iaktghjwlgymxdnu9cue 1440w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/it5brr6q3d9ymmv2ptsl 1800w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/qrewhds9wjdk9cr16mkj 2160w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/hi5rmz04gn7bilkfdnvx 2520w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/fmb4bjb4gy0utxfmfioy 2880w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/sdgoemme0jmqy9tgqavx 3240w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/c7rq5gwsgdsfouuqojfv 3571w"><figcaption>Click-through rates for the 4 different groups in our human study</figcaption></figure><p id="block16">The figure below shows that about 40% of both AI groups specifically mentioned in their free text answer that personalization increased their trust in the email message, compared to 0% in the control group and about 20% in the human expert group. The presentation received equally trustworthy scores for the AI and human expert-generated emails.&nbsp;</p><figure><img src="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/dlb6x0dmzwelwntogqcn" srcset="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/zkzyyvpmkkunqsydwcjh 360w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/wocaygl1owympkxdigxs 720w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/cphmaqxh9tdu61xi1cxi 1080w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/fyskzwfnxbp3yf42dpkk 1440w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/blnqvuzr8s4nzypqwpnj 1800w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/wlzcmardw9dd8q4jwboh 2160w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/u8whoy4mat6zpbl95grm 2520w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/lzxgmrhk52r7gvuo8v3g 2880w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/zmir8904kt853dcwvduu 3240w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/rtpqeagsend9mlbdppsj 3523w"><figcaption>Common reasons given in free text survey responses for why the email was trustworthy as a percentage of survey responses per group.</figcaption></figure><p id="block17">Furthermore, we analyzed the quality of AI-compiled profiles. In a manual analysis of 51 profiles, we found that 88% of profiles were accurate and useful, 8% were accurate but not useful and 4% contained inaccurate information.</p><p id="block18">To measure the time saved, we measured how much time we spent on the interventions for the human-in-the-loop group. The information gathering (OSINT) updates for this group took an average of 1:05 minutes, and the email message updates averaged 1:36 minutes. Thus, the total combined time was 2:41 minutes per message. To better measure the time difference between AI-automated and manual attacks, we manually replicated the OSINT information gathering and email crafting processes<br>provided by our AI tool. We performed the manual replication on four targets. The process required an average of 23:27 minutes to gather OSINT data and an additional 10:10 minutes to write each personalized email, totaling about 34 minutes per target. Thus the human-in-the-loop based AI-automation was about 92% faster than the fully manual process.</p><h2 id="Automated_intent_detection">Automated intent detection</h2><p id="block19">On average, Claude achieved a true positive detection rate of 97.25% with no false positives. If we weigh the detection rates by category, i.e., each category is given the same weight regardless of the number of messages in the category, the detection rate remains almost identical (97.64%). Claude 3.5 Sonnet far outperformed GPT-4o. The paper contains additional results using other models for suspicious intent detection.</p><p id="block20">However, the possibilities of jailbreaks and prompt injections pose a significant challenge to using language models to prevent phishing.</p><figure><img src="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/eypxgzjrowktgia6njgn" srcset="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/mvzzpnac9lcjvg23fjrj 110w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/dglrsocuhux81t8r68ia 220w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/gy8ugxm43aqztd3blnwr 330w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/jllnk4tenhnbtlm5v0rl 440w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/lr0raqdwn2ctlaxkti4j 550w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/lss8hqsq40eteuxllgmw 660w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/zhxcp3i5erzhttymhker 770w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/tntw1gs5ygvceclvh334 880w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/qhkf78cvs7w0vbrebgxb 990w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/guirtlproudpetzmm2ca 1100w"><figcaption>Overview of suspicion scores evaluated by the Claude 3.5 Sonnet and GPT-4o. The first row is evaluated for suspicion by GPT-4o, and the second by Claude 3.5 Sonnet. The plots compare different types of mail, from legitimate mail, mail generated for our 2 AI groups (orange), mail generated by 3 different AI models (red), and other types of phishing mail (blue). For more information on the data used, see section 4.2 of the paper. For a theoretical detection threshold of 50%, we show a cutoff line with corresponding false positive (FP) and true positive (TP) percentages.</figcaption></figure><h2 id="The_economics_of_AI_enhanced_phishing">The economics of AI-enhanced phishing</h2><p id="block22">Table 4 from the paper shows part of our economic analysis. We estimate q for three different scenarios, considering low, medium and high conversion rates. conversion rate refers to the ratio of opened URLs that result in a successful fraud. Using fully automated AI with no human intervention always leads to the highest returns.</p><figure><img src="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/x3ntoytpbfo2scr0rlvr" srcset="https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/fcwcluevh8rchp3qeroi 140w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/yik3r949hkdjgjwlbo5d 280w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/kqqlqswyxbyitdaz7ofh 420w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/idknnmgnscrwjockkiwn 560w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/apisqoecim0cvxpzflvy 700w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/n0bhbnogbod6mzb875ql 840w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/wkx3mzktkxjeopdplqjy 980w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/anrcifhebetdxtfsa8rl 1120w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/nb5fqadipjzplrnl9jlm 1260w, https://res.cloudinary.com/lesswrong-2-0/image/upload/f_auto,q_auto/v1/mirroredImages/GCHyDKfPXa5qsG2cP/qm8b7skvlsi0jlvegamd 1374w"><figcaption>&nbsp;</figcaption></figure><h2 id="Future_Work">Future Work</h2><p id="block23">For future work, we hope to scale up studies on human participants by multiple orders of magnitude and measure granular differences in various persuasion techniques. Detailed persuasion results for different models would help us understand how AI-based deception is evolving and how to ensure our protection schemes stay up-to-date. Additionally, we will explore fine-tuning models for creating and detecting phishing. We are also interested in evaluating AI's capabilities to exploit other communication channels, such as social media or modalities like voice. Lastly, we want to measure what happens after users press a link in an email. For example, how likely is it that a pressed email link results in successful exploitation, what different attack trees exist (such as downloading files or entering account details in phishing sites), and how well can AI exploit and defend against these different paths? We also encourage other researchers to explore these avenues.&nbsp;</p><p id="block24">We propose personalized mitigation strategies to counter AI-enhanced phishing. The cost-effective nature of AI makes it highly plausible we're moving towards an agent vs agent future. AI could assist users by creating personalized vulnerability profiles, combining their digital footprint with known behavioral patterns.</p><h2 id="Conclusion">Conclusion</h2><p id="block25">Our results reveal the significant challenges that personalized, AI-generated phishing emails present to current cybersecurity systems. Many existing spam filters use signature detection (detecting known malicious content and behaviors). By using language models, attackers can effortlessly create phishing emails that are uniquely adapted to every target, rendering signature detection schemes obsolete. As models advance, their capabilities of persuasion will likely also increase. We find that LLM-driven spear phishing is highly effective and economically viable, with automated reconnaissance that provides accurate and useful information in almost all cases. Current safety guardrails fail to reliably prevent models from conducting reconnaissance or generating phishing emails. However, AI could mitigate these threats through advanced detection and tailored countermeasures.</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You Wouldn't Download an AI (315 pts)]]></title>
            <link>https://altayakkus.substack.com/p/you-wouldnt-download-an-ai</link>
            <guid>42601549</guid>
            <pubDate>Sun, 05 Jan 2025 13:19:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://altayakkus.substack.com/p/you-wouldnt-download-an-ai">https://altayakkus.substack.com/p/you-wouldnt-download-an-ai</a>, See on <a href="https://news.ycombinator.com/item?id=42601549">Hacker News</a></p>
Couldn't get https://altayakkus.substack.com/p/you-wouldnt-download-an-ai: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[A story on home server security (206 pts)]]></title>
            <link>https://raniseth.com/blog/2025-01-04-Home-Server-Security.html</link>
            <guid>42601374</guid>
            <pubDate>Sun, 05 Jan 2025 12:36:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://raniseth.com/blog/2025-01-04-Home-Server-Security.html">https://raniseth.com/blog/2025-01-04-Home-Server-Security.html</a>, See on <a href="https://news.ycombinator.com/item?id=42601374">Hacker News</a></p>
Couldn't get https://raniseth.com/blog/2025-01-04-Home-Server-Security.html: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[How Nat Traversal Works (2020) (358 pts)]]></title>
            <link>https://tailscale.com/blog/how-nat-traversal-works</link>
            <guid>42600846</guid>
            <pubDate>Sun, 05 Jan 2025 10:15:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://tailscale.com/blog/how-nat-traversal-works">https://tailscale.com/blog/how-nat-traversal-works</a>, See on <a href="https://news.ycombinator.com/item?id=42600846">Hacker News</a></p>
Couldn't get https://tailscale.com/blog/how-nat-traversal-works: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Social media distorts perceptions of norms (2024) (105 pts)]]></title>
            <link>https://osf.io/preprints/psyarxiv/kgcrq</link>
            <guid>42600626</guid>
            <pubDate>Sun, 05 Jan 2025 09:10:54 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://osf.io/preprints/psyarxiv/kgcrq">https://osf.io/preprints/psyarxiv/kgcrq</a>, See on <a href="https://news.ycombinator.com/item?id=42600626">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[The funniest thing I ever did – a.k.a. "How To Make $100K From A Dick Joke." (309 pts)]]></title>
            <link>https://imgur.com/gallery/KZ4u3c4</link>
            <guid>42600595</guid>
            <pubDate>Sun, 05 Jan 2025 09:03:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://imgur.com/gallery/KZ4u3c4">https://imgur.com/gallery/KZ4u3c4</a>, See on <a href="https://news.ycombinator.com/item?id=42600595">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Struggle with CSS Flexbox? This Playground Is for You (283 pts)]]></title>
            <link>https://yoavsbg.github.io/css-flexbox-playground/</link>
            <guid>42600586</guid>
            <pubDate>Sun, 05 Jan 2025 09:02:01 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://yoavsbg.github.io/css-flexbox-playground/">https://yoavsbg.github.io/css-flexbox-playground/</a>, See on <a href="https://news.ycombinator.com/item?id=42600586">Hacker News</a></p>
Couldn't get https://yoavsbg.github.io/css-flexbox-playground/: Error: timeout of 10000ms exceeded]]></description>
        </item>
        <item>
            <title><![CDATA[Remote code execution via MIDI messages (290 pts)]]></title>
            <link>https://psi3.ru/blog/swl01u/</link>
            <guid>42600349</guid>
            <pubDate>Sun, 05 Jan 2025 07:40:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://psi3.ru/blog/swl01u/">https://psi3.ru/blog/swl01u/</a>, See on <a href="https://news.ycombinator.com/item?id=42600349">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            

            
            <span id="article-meta">Jan 2025 · 45 min read</span>
            <p>I gained remote code execution via MIDI messages to trick my synth into playing Bad Apple on its LCD. This blog post is about my journey with this reverse engineering project.</p>
            <figure>
                <iframe width="1080" height="608" src="https://www.youtube.com/embed/u6sukVMijBg" title="Yamaha PSR-E433 Bad Apple demo" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
                <figcaption>Final iteration of Bad Apple</figcaption>
            </figure>

            <h2 id="the-beginning">The beginning</h2>
            <p>I’ve had this Yamaha PSR-E433 synth for a very long time, and a couple of years ago I decided to open it up — partly because it was in need of cleaning, and partly because I was really curious about its internals. After removing some screws and digging up the main circuit board (labeled “DMLCD”), I was quite amused to find two flash chips, one RAM chip and an absolute unit of a chip labeled “YAMAHA SWL01U”, which I guessed had to be the brains of the operation. Using that part number I wasn’t able to find any information about the chip online apart from an <a href="https://sandsoftwaresound.net/swl-micro-architecture/" target="_blank">article</a> that claimed it was based around a “SuperH” CPU core – an <abbr title="Instruction Set Architecture">ISA</abbr> that I’ve encountered for the first time ever in that article. So, after finishing the cleanup I just put the synth back together, which left me wondering about what that mysterious chip really had under the hood.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/virgin_dmlcd.jpg" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/thumb/virgin_dmlcd.jpg" alt="DMLCD board in its natural habitat"></a>
                <figcaption>DMLCD board in its natural habitat</figcaption>
            </figure>
            <p>Fast forward to a few months ago, when I took apart the poor synth again – this time purely out of curiosity. What sparked that curiosity was a service manual for a similar synth (the E443, I own an E433) that I found online, which among other things featured a pinout of that main chip that listed pin descriptions so enticing (“TESTN – Test Mode”, “PROTN – Determines if the product is a prototype”) that I just had to get a look at what was going on. There were also two bidirectional UART interfaces, and by looking at the schematic I could see that one of the two transmit pins wasn’t connected anywhere, suggesting that the chip maybe emits some kind of log via that pin. Oh, and it also had JTAG test points nicely broken out on the board -  basically a 5-pin interface for various production line testing and debugging-adjacent tasks.</p>
            <p>So, what were my options at that point? I could:</p>
            <ul>
                <li>Play around with the TESTN and PROTN pins and see how the synth behaves;</li>
                <li>Solder to the UART Tx pin and see what the chip outputs;</li>
                <li>Connect to the JTAG interface and read the chip’s identification code;</li>
                <li>Desolder one of the two flash chips and dump the firmware.</li>
            </ul>
            <p>Let’s begin with the first approach. Both of the boot mode select pins end with an N, suggesting that these pins are active low, meaning that the signal is considered active when the voltage is close to zero, as opposed to the power rail, which in this case is 3.3 volts. The schematic says that both of these pins are pulled up to 3.3 volts with a resistor, so we can just short the pins to ground in order to activate them. That’s exactly what I did; unfortunately, it appeared as though activating the TESTN pin just prevented the synth from booting, and activating the PROTN pin didn’t change the synth’s behavior at all. Hey, at least I didn’t brick it!</p>
            <p>Next up, let’s try looking at the UART interface. That pin that I mentioned didn’t lead anywhere, not even a test point, which means that I had to solder directly to a 0.3mm wide pin of the chip. No success this time either, as the chip didn’t output anything in any of the 4 combinations of the TESTN and PROTN signals.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/dmlcd_w_3_wires.jpg" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/thumb/dmlcd_w_3_wires.jpg" alt="SWL01U with three debug wires coming off of the board"></a>
                <figcaption>SWL01U with three debug wires coming off of the board</figcaption>
            </figure>
            <p>It was now JTAG’s turn. Even though the next option (desoldering a flash chip) was quite scary as it meant that I had to build a flash dumper (I didn’t have one), messing around with the JTAG was even scarier for another reason. The thing is that JTAG is quite an abstract interface that vendors can build whatever they want on top of. In order to talk to a device via JTAG, you have to have a detailed description of the circuitry that builds on top of it, which usually comes in the form of a <abbr title="Boundary Scan Description Language">BSDL</abbr> file. There’s basically only one command that almost every device supports, and that is reading the IDCODE – a 32-bit number that acts as an identifier for the type of device you’re talking to. Let’s hook a <abbr title="a JTAG to USB adapter">J-Link</abbr> up to our board and try to read that identification code using <abbr title="the software in charge of controlling the JTAG">OpenOCD</abbr>.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/dmlcd_and_jlink.jpg" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/thumb/dmlcd_and_jlink.jpg" alt="J-Link connected to the board"></a>
                <figcaption>J-Link connected to the board</figcaption>
            </figure>
            <figure>
                <code><span>$ cat openocd.cfg</span>
<span># Uh-oh, a continuity error! I've switched to an FT232R-based dongle instead of J-Link since I took the picture above.</span>
adapter driver ft232r
transport select jtag
adapter speed 5000
<span>$ openocd</span>
Open On-Chip Debugger 0.12.0
Licensed under GNU GPL v2
For bug reports, read
        http://openocd.org/doc/doxygen/bugs.html
Info : only one transport option; autoselect 'jtag'
Warn : Transport "jtag" was already selected
adapter speed: 5000 kHz

Info : Listening on port 6666 for tcl connections
Info : Listening on port 4444 for telnet connections
Info : clock speed 3000 kHz
Warn : There are no enabled taps.  AUTO PROBING MIGHT NOT WORK!!
Info : JTAG tap: auto0.tap tap/<span>device found: 0x3f0f0f0f</span> (mfg: 0x787 (&lt;unknown&gt;), part: 0xf0f0, ver: 0x3)
Warn : AUTO auto0.tap - use "jtag newtap auto0 tap -irlen 4 -expected-id 0x3f0f0f0f"
Warn : gdb services need one or more targets defined</code>
                <figcaption>OpenOCD reporting the IDCODE</figcaption>
            </figure>
            <p>Well, that’s something. The IDCODE is reported as 0x3f0f0f0f, which is suspiciously pretty. So suspicious that I triple-checked my wiring, but nope, looks like that’s the actual IDCODE of the device, which after a quick Google search seemed like it belonged to either an STMicroelectonics STR7xxx or an Atmel SAM7xxx microcontroller, both of which were based around an <abbr title="not the same thing as ARMv7">ARM7</abbr> CPU core. My only option was to assume that I was dealing with an actual ARM7TDMI core like the one that these MCUs are based on. On the other hand, incorrectly talking to a device via JTAG risks catastrophic damage, as some implementations of the interface grant very low-level access to the hardware, even lower than the machine code that CPU cores execute have. There’s a small chance of letting the magic smoke out when you instruct the device incorrectly at such a low level, provided the circumstances turn against you. Anyways, I did it; I told OpenOCD that I’m dealing with an ARM7TDMI core and it happily complied.</p>
            <figure>
                <code><span>$ cat openocd.cfg</span>
adapter driver ft232r
transport select jtag
adapter speed 5000
jtag newtap swl01u cpu -irlen 4 -expected-id 0x3f0f0f0f
target create swl01u.cpu arm7tdmi -chain-position swl01u.cpu
<span>$ openocd</span>
Open On-Chip Debugger 0.12.0
Licensed under GNU GPL v2
For bug reports, read
        http://openocd.org/doc/doxygen/bugs.html
Info : only one transport option; autoselect 'jtag'
Warn : Transport "jtag" was already selected
swl01u.cpu
Info : Listening on port 6666 for tcl connections
Info : Listening on port 4444 for telnet connections
Info : clock speed 3000 kHz
Info : JTAG tap: swl01u.cpu tap/device found: 0x3f0f0f0f (mfg: 0x787 (&lt;unknown&gt;), part: 0xf0f0, ver: 0x3)
Info : Embedded ICE version 1
Info : swl01u.cpu: hardware has 2 breakpoint/watchpoint units
Info : starting gdb server for swl01u.cpu on 3333
Info : Listening on port 3333 for gdb connections</code>
                <figcaption>OpenOCD assuming communication with an ARM7TDMI core</figcaption>
            </figure>
            <p>At least at this point, the magic smoke was still contained within the chip. I nervously connected to OpenOCD via <abbr title="a program used to debug software">GDB</abbr> and tried pausing and resuming execution of the program. I was very surprised and excited to witness the current draw reported by my lab bench power supply reacting predictably to my commands. The entire circuit board was drawing about 115 mA when running and about 98 mA when paused, which was a very good sign that what I was talking to was, in fact, an ARM7TDMI core. At that point I had no other way to verify whether the thing’s CPU was really stopping or not.</p>
            <figure>
                <video controls="" src="https://psi3.ru/blog/swl01u/videos/current_draw_differential.mp4"></video>
                <figcaption>Me noting the power draw differential (in Russian)</figcaption>
            </figure>

            <h2 id="dumping-the-firmware">Dumping the firmware</h2>
            <p>Wow, it looks like I won’t even have to desolder the flash chip in order to dump the firmware! And I already know what ISA the chip is based on, so I won’t have to go digging around in the firmware image in order to find that out! Looking in the documentation for ARM7TDMI, the <abbr title="the address where the CPU starts executing instructions from when it’s first powered up">reset vector</abbr> is located at address 0, so let’s see what kind of data there is at that address.</p>
            <figure>
                <code>(gdb) x/2xw 0 <span># eXamine 2 heX Words at location 0</span>
<span>0x0</span>:    0xe59ff018      0xe59ff018
(gdb) x/2i 0  <span># eXamine 2 Instructions at location 0</span>
<span>0x0</span>: <span>ldr</span>     <span>pc</span>, [<span>pc</span>, <span>#24</span>]   <span>@ 0x20</span>
<span>0x4</span>: <span>ldr</span>     <span>pc</span>, [<span>pc</span>, <span>#24</span>]   <span>@ 0x24</span></code>
                <figcaption>Asking GDB to read two instructions at address 0</figcaption>
            </figure>
            <p>Yeah, okay, it’s a jump, just as I expected. The very next instruction is some other vector, and it’s a jump as well. That looks about right. Yeah, we’re definitely on the right track! I know the size of the flash chip (16 MiBytes), so let’s just dump 16 MiBytes of data starting at address 0 into a file, load it up into <abbr title="a reverse engineering framework that I was used to using up until this point">Cutter</abbr> and see what secrets it contains.</p>
            <p>I’m very unexperienced when it comes to reverse engineering, but one thing that I do know is that strings are a goldmine of easily digestible information about a piece of software. That’s why the first thing that I do when starting an <abbr title="reverse engineering">RE</abbr> project is look at the “Strings” section in an RE tool. This project was no exception, and I was very pleased to see strings such as “This code can only run on a <abbr title="extension of ARM that introduces shorter instructions">Thumb</abbr> compatible processor”, “Illegal address (e.g. wildly outside array bounds)”, “Abnormal termination (e.g. abort() function)”, and most of all, “SWL01U Internal”.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/strings_in_cutter.png" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/strings_in_cutter.png" alt="Strings section in Cutter"></a>
                <figcaption>Strings section in Cutter</figcaption>
            </figure>
            <p>What I didn’t like is how the very few strings that were there in the image repeated every 64 KiBytes. So, for instance, the string “SWL01U Internal” was contained at addresses 0x0000bfd0, 0x0001bfd0, 0x0002bfd0 and so on. Both this repetition (likely caused by a primitive design of the address decoder inside the chip) and that string itself hinted that I took a dump of some kind of memory inside the chip itself, and not one of the external flash chips like I had originally imagined. I concluded that this SWL01U chip contains a 64KiByte ROM.</p>
            <p>The instruction at the reset vector was a jump to address 0x02000000, which I thought might actually be the external flash chip this time. I once again took a 16 MiByte dump starting at that address, and was pleased not to find any repetitions this time. Also, I observed a large amount of strings that I could recognize just from using the synth, such as “GrandPno”, “Tr1 will be OverWritten!” and “BogiWogi”.</p>
            <p>So, what do we know so far? We know that the chip itself contains a 64 KiByte ROM that immediately transfers control over to the external 16 MiByte flash chip upon startup. The ROM is located at address 0x00000000, and the flash starts at 0x02000000. We have dumps of both memories and can now start reversing the firmware of this synth to hopefully gain more information about its main chip.</p>

            <h2 id="reversing-the-firmware">Reversing the firmware</h2>
            <p>After staring at the flash image for about an hour in Cutter, it became very obvious to me that this RE tool just wasn’t going to cut it (pun intended) and that I needed to switch it out for something more powerful. I’m happy to report that Ghidra met my expectations.</p>
            <p>Now, we have to get a little philosophical here. In my eyes, RE is like a game of minesweeper. You start with an empty field not knowing the state of any of the cells, i.e. not knowing whether each individual cell contains a landmine or not. When you discover the state of a cell, you have the context to deduce the state of its neighbor cells. In minesweeper, you don’t have a particular direction in which you progress. You never say “In this game of minesweeper, I want to go up no matter what”, you just let the numbers nudge you in the direction that is the easiest to go in at the moment. I assert that this is also true for RE. Once you find out what a function or a variable does, you suddenly understand a little more about functions and variables that depend on the ones whose meaning you’ve just inferred. It may be beneficial not to set any particular goal with an RE project, and instead letting the complex network of intertwined functions and variables guide you towards understanding the system as a whole.</p>
            <p>So, where do we start? Right now we have two entry points from which we could begin prying the firmware apart: the reset vector and the strings. I tried both, just spending night after night learning more about the next function based on new insights gained from learning more about the previous one. This process is not very exciting to witness from the outside, so I don’t feel the need to retrace and describe my steps here. It’s just a chain of simple logical conclusions which propagate through the codebase. Like those little flags propagating through the field in a game of minesweeper.</p>
            <p>There’s one subsystem in the firmware that I think is worth mentioning as it plays an instrumental role in the whole “Bad Apple” thing: The Shell. As I was digging around in the “Defined Strings” section of Ghidra, I noticed a cluster of a few ones that looked like they might be some kind of list of commands for some kind of a shell:</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/strings_in_ghidra.png" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/strings_in_ghidra.png" alt="The strings “help”, “?”, “info”, “ver” at addresses that are close together"></a>
                <figcaption>The strings “help”, “?”, “info”, “ver” at addresses that are close together</figcaption>
            </figure>
            <p>In RE, so-called “xrefs“ (cross-references) take center stage. When you’re looking at a symbol (a function or a global variable), xrefs tell you what other symbols use (reference) the symbol that you’re looking at. In the screenshot above, most of our strings have one xref. Let’s follow each of them and see where they lead us to:</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/cmd_definition_array.png" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/cmd_definition_array.png" alt="A sequence of references"></a>
                <figcaption>A sequence of references</figcaption>
            </figure>
            <p>What we’re seeing here is a sequence of pairs of references, where the first item in the pair is always the name of a command, and the second item is a pointer to some function. Only the first element in this sequence is referenced directly, which leads me to believe that this is an ordinary C array of C structs with two members. Let’s name this array, so that when we encounter this variable being used somewhere in the future we instantly know what it is.</p>
            <p>Let’s now look at some code! Normal programs (like .exe or ELF files) consist of sections with clear designations for what sort of data they contain. For example, the .text section contains executable code and the .rodata section contains read-only data that the code requires. Unfortunately, embedded systems don’t typically use these files, and instead throw the code and data together in one large pile. This also means that there’s absolutely no hope of recovering <abbr title="function or global variable">symbol</abbr> names and locations. Without symbol metadata, the stream of instructions is just that: a stream. Fortunately for us Ghidra has been programmed to at least recognize the boundaries of most functions, which it tends to do really well.</p>
            <p>As this was my first time dealing with ARM assembly, the C decompiler feature of Ghidra turned out to be very useful for me. Unfortunately, due to a total lack of symbols its output is still quite hard for me to process. Take a look at this function which references the array that we looked at earlier. Don’t read into it, just skim over it:</p>
            <figure>
                <code><span>void</span> <span>FUN_02022008</span>(<span>char</span> *<span>param_1</span>)
                    
{
  <span>int</span> *<span>piVar1</span>;
  <span>char</span> <span>cVar2</span>;
  <span>int</span> <span>iVar3</span>;
  <span>char</span> *<span>pcVar4</span>;
  <span>undefined4</span> *<span>puVar5</span>;
  
  <span>if</span> (<span>DAT_060078c6</span> == <span>'\0'</span>) {
    <span>iVar3</span> = <span>FUN_020214e0</span>(<span>param_1</span>,(<span>char</span> *)<span>0x20bdf3c</span>);
    <span>if</span> (<span>iVar3</span> == <span>0</span>) {
      <span>FUN_02021f9c</span>();
      <span>DAT_060078c6</span> = <span>'\x01'</span>;
    }
  }
  <span>else if</span> (<span>DAT_060078c6</span> == <span>'\x01'</span>) {
    <span>iVar3</span> = <span>FUN_020214e0</span>(<span>param_1</span>,<span>"#0000"</span>);
    <span>if</span> (<span>iVar3</span> == <span>0</span>) {
      <span>FUN_02021fb4</span>();
      <span>DAT_060078c6</span> = <span>'\x02'</span>;
    }
    <span>else</span> {
      <span>FUN_020213f8</span>((<span>byte</span> *)<span>0x2022098</span>);
      <span>DAT_060078c6</span> = <span>'\0'</span>;
    }
  }
  <span>else</span> {
    <span>puVar5</span> = (<span>undefined4</span> *)<span>0x20bdf48</span>;
    <span>do</span> {
      <span>pcVar4</span> = (<span>char</span> *) <span>FUN_02021528</span>(<span>param_1</span>,*<span>puVar5</span>);
      <span>if</span> (<span>pcVar4</span> != (<span>char</span> *)<span>0x0</span>) {
        <span>cVar2</span> = *<span>pcVar4</span>;
        <span>while</span> (<span>cVar2</span> == <span>' '</span>) {
          <span>pcVar4</span> = <span>pcVar4</span> + <span>1</span>;
          <span>cVar2</span> = *<span>pcVar4</span>;
        }
        <span>jump_to_1</span>(<span>pcVar4</span>,<span>puVar5</span>[<span>1</span>]);
        <span>return</span>;
      }
      <span>piVar1</span> = <span>puVar5</span> + <span>2</span>;
      <span>puVar5</span> = <span>puVar5</span> + <span>2</span>;
    } <span>while</span> (*<span>piVar1</span> != <span>0</span>);
    <span>FUN_02021fe8</span>();
  }
  <span>return</span>;
}</code>
                <figcaption>Raw output from the C decompiler</figcaption>
            </figure>
            <p>Like I said, because Ghidra has absolutely no type or symbol information, the resulting C code is not something that you’d typically write and keep your job afterwards. Functions and global variables don’t have any meaningful names and are instead referred to by their addresses. Local variables don’t have meaningful names either, and they’re scoped to the entire function, as opposed to any particular block. Sometimes Ghidra thinks something is a local variable when really it’s better represented as a temporary result from an expression. It’s absolutely not the fault of the tool: all this information that makes code easy to understand is erased when it’s is compiled and the symbols are stripped away.</p>
            <p>Making sense of this heavily processed code is what’s so hard about RE, and it’s one of those things that you learn by doing a lot of. From now on, for the sake of clarity, I’ll only be presenting you the cleaned up C code after I’ve made sense of it. Anyways, we’re clearly dealing with some kind of state machine. Notice the outline of this function:</p>
            <figure>
                <code><span>void</span> <span>function</span>() {
    <span>if</span>(<span>global_var</span> == <span>0</span>) {
        <span>if</span>(<span>/* condition */</span>)
            <span>global_var</span> = <span>1</span>;
    } <span>else if</span>(<span>global_var</span> == <span>1</span>) {
        <span>if</span>(<span>/* condition */</span>)
            <span>global_var</span> = <span>2</span>;
        <span>else</span>
            <span>global_var</span> = <span>0</span>;
    } <span>else</span> {
        <span>if</span>(<span>/* condition */</span>)
            <span>global_var</span> = <span>0</span>; <span>// performed by a subordinate function</span>
        <span>else</span>
            <span>action</span>();
    }
}</code>
                <figcaption>Structural overview of this function</figcaption>
            </figure>
            <p>There are two states in which the function does very little, and one state in which the function does a lot. Judging by the strings that the first two states reference (“login” and “Passwd Error”), this function implements some kind of login interface and only lets us run a command if we’re logged in. This function is only ever called by one other function, so let’s inspect that one:</p>
            <figure>
                <code><span>void</span> <span>FUN_020220f0</span>(<span>void</span>) {
    <span>while</span>(<span>global_var_1</span> != <span>global_var_2</span>) {
        <span>char</span> <span>ch</span> = <span>global_var_3</span>[<span>global_var_1</span>];
        <span>global_var_1</span> = <span>global_var_1</span> + <span>1</span> &amp; <span>0xff</span>;
        <span>yet_unknown_function</span>(<span>ch</span>); <span>// manipulates "global_var_4"</span>
        <span>if</span>(<span>ch</span> == <span>'\r'</span>) {
            <span>function_from_before</span>(<span>global_var_4</span>);
            <span>global_var_5</span> = <span>0</span>;
        }
    }
}</code>
                <figcaption>The only caller of our last function</figcaption>
            </figure>
            <p>This function is going through some sort of buffer and calling another function for each character that it fetches from the buffer, and only calls the function that we looked at in the previous paragraph for every ‘\r’ (carriage return) character. Furthermore, the buffer appears to be a circular one with a size of 256. Let’s name some of the variables and functions to what I think they do based on those new insights:</p>
            <figure>
                <code><span>void</span> <span>shell_process_input</span>(<span>void</span>) {
    <span>while</span>(<span>shell_input_buf_r</span> != <span>shell_input_buf_w</span>) {
        <span>char</span> <span>ch</span> = <span>shell_input_buf</span>[<span>shell_input_buf_r</span>];
        <span>shell_input_buf_r</span> = <span>shell_input_buf_r</span> + <span>1</span> &amp; <span>0xff</span>;
        <span>shell_feed_char</span>(<span>ch</span>); <span>// manipulates "shell_command_buffer"</span>
        <span>if</span>(<span>ch</span> == <span>'\r'</span>) {
            <span>shell_run_command</span>(<span>shell_command_buffer</span>);
            <span>shell_edit_position</span> = <span>0</span>;
        }
    }
}</code>
                <figcaption>The “shell_process_input” function</figcaption>
            </figure>
            <p>Let’s name some variables once again and dive back into our “shell_run_command” function, this time with even more symbols labeled (I’ve glossed over most of the boring straightforward symbols):</p>
            <figure>
                <code><span>void</span> <span>shell_run_command</span>(<span>char</span>* <span>command_input</span>) {
    <span>if</span> (<span>shell_login_state</span> == <span>0</span>) {
        <span>if</span> (<span>shell_compare_command</span>(<span>command_input</span>, <span>"login"</span>) == <span>0</span>) {
            <span>shell_ask_passwd</span>(); <span>// prints "passwd? "</span>
            <span>shell_login_state</span> = <span>1</span>;
        }
    } <span>else if</span> (<span>shell_login_state</span> == <span>1</span>) {
        <span>if</span> (<span>shell_compare_command</span>(<span>command_input</span>, <span>"#0000"</span>) == <span>0</span>) {
            <span>shell_login_ok</span>(); <span>// prints "login OK"</span>
            <span>shell_login_state</span> = <span>2</span>;
        } <span>else</span> {
            <span>shell_print</span>(<span>"Passwd Error\r"</span>);
            <span>shell_login_state</span> = <span>0</span>;
        }
    } <span>else</span> {
        <span>// actually run the command</span>
    }
}</code>
                <figcaption>The “shell_run_command” function</figcaption>
            </figure>
            <p>If we dive into the “shell_print” function, we see lots of yet unknown data transfers into global variables. These global variables are referenced by other pieces of code (both in the flash and internal ROM) which write data into mysterious addresses located at 0xfxxxxxxx, which I’m assuming is the memory region that’s used to talk to various peripherals inside of the chip.</p>
            <p>Okay, so what do we know about this shell?</p>
            <ul>
                <li>It won’t respond to our commands unless we say “login” and type in the password “#0000”;</li>
                <li>It has quite a limited set of commands and is potentially uninteresting;</li>
                <li>We still don’t know how to access that shell.</li>
            </ul>
            <p>Let’s list out potential candidates for various interfaces that this shell could be running on top of:</p>
            <ul>
                <li>UART. There’s two documented UART interfaces. Based on the schematic, both receive pins and one of the two transmit pins are used as GPIOs, and the other transmit pin doesn’t do anything (remember the previous section?).</li>
                <li>USB. There are two USB interfaces on this synth: one is a device interface implemented by the SWL01U chip itself, and the other is a host interface for connecting pen drives and such, implemented by an external host controller chip. If a shell is running on top of one of them, it’s probably the device interface, not the host one. However, if we connect the synth to a PC and run “lsusb” to dump its USB descriptor, we see that it has nothing but <abbr title="Musical Instrument Digital Interface">MIDI</abbr>, an interface widely used in the music industry for transferring various music-related stuff such as “note on” and “note off” events. No serial ports or anything like that.</li>
                <li>JTAG. The documentation for ARM7TDMI says that its JTAG implementation features something ARM calls the <abbr title="Debug Communication Channel">DCC</abbr>, which lets a program running on the chip and an external debug probe exchange custom data. It’s bidirectional and could thus be very well used for a shell. The DCC is accessed via special coprocessor data transfer instructions (MCR and MRC) in 32-bit words.</li>
            </ul>
            <p>If it’s UART, then it’s definitely not accessible on our variant of the board, but nevertheless the code shouldn’t be greatly modifying the data that it wants to send, as UART operates on a byte level. If it’s USB, then it must be running on top of MIDI and must thus be manipulating the data in a way that’s suitable to send over MIDI in one way or another. If it’s JTAG, then it must be running on top of the DCC and must be using special instructions that access the DCC. Let’s look deeper into how exactly our “shell_print” function mutilates the data:</p>
            <figure>
                <code><span>void</span> <span>shell_print</span>(<span>char</span>* <span>data</span>) {
    <span>memcpy</span>(<span>global_var_1</span>, <span>global_var_2</span>, <span>8</span>);
    <span>global_var_1</span>[<span>24</span>] = <span>0xf7</span>;

    <span>// process data in 8-byte blocks first</span>
    <span>for</span>(<span>size_t</span> <span>i</span> = <span>strlen</span>(<span>data</span>); <span>i</span> &gt;= <span>8</span>; <span>i</span> -= <span>8</span>) {
        <span>char</span> <span>ch</span> = *(<span>data</span>++);
        <span>for</span>(<span>int</span> <span>j</span> = <span>0</span>; <span>j</span> &lt; <span>8</span>; <span>j</span>++) {
            <span>global_var_1</span>[<span>8</span> + (<span>j</span> * <span>2</span>)] = <span>ch</span> &gt;&gt; <span>4</span>;
            <span>global_var_1</span>[<span>8</span> + (<span>j</span> * <span>2</span>) + <span>1</span>] = <span>ch</span> &amp; <span>0xf</span>;
        }
        <span>pass_on_to_next_stage_of_printing</span>(<span>global_var_1</span>, <span>25</span>);
    }

    <span>// process the tail</span>
    <span>size_t</span> <span>tail_size</span> = <span>8</span>;
    <span>for</span>(<span>int</span> <span>i</span> = <span>0</span>; *<span>data</span>; <span>i</span>++) {
        <span>char</span> <span>ch</span> = *(<span>data</span>++);
        <span>global_var_1</span>[<span>8</span> + (<span>i</span> * <span>2</span>)] = <span>ch</span> &gt;&gt; <span>4</span>;
        <span>global_var_1</span>[<span>8</span> + (<span>i</span> * <span>2</span>) + <span>1</span>] = <span>ch</span> &amp; <span>0xf</span>;
        <span>tail_size</span> += <span>2</span>;
    }
    <span>global_var_1</span>[<span>tail_size</span>] = <an>0xf7</an>;
    <span>tail_size</span>++;
    <span>pass_on_to_next_stage_of_printing</span>(<span>global_var_1</span>, <span>tail_size</span>);
}</code>
                <figcaption>Overview of the “shell_print” function</figcaption>
            </figure>
            <p>It seems to be breaking up each byte of data into two 4-bit nibbles and wrapping each of the two in its own byte. Every block of data that it passes on to the next stage in this data transfer pipeline starts with the same 8 bytes of data, followed by the payload, finally ending with an 0xf7 byte. Let’s use GDB to look at what those constant 8 bytes are:</p>
            <figure>
                <code>(gdb) x/8xb 0x06000000 <span># eXamine 8 heX Bytes at location 0x06000000</span>
<span>0x6000000</span>:      0xf0    0x43    0x73    0x01    0x52    0x19    0x00    0x00</code>
                <figcaption>GDB reading the 8 bytes in "global_var_2"</figcaption>
            </figure>
            <p>All in all, a shell packet containing the string “&gt; ” looks like this:</p>
            <figure>
                <code><span>F0 43 73 01 52 19 00 00</span> <span>03 0E</span> <span>02 00</span> <span>F7</span>
└──────────┬──────────┘ └─┬─┘ └─┬─┘ ├┘
           │              │     │   │
           │              │     │   ╰── <span>fixed footer</span>
           │              │     ╰────── <span>the character “ ”</span>
           │              ╰──────────── <span>the character “&gt;”</span>
           ╰─────────────────────────── <span>fixed header</span></code>
                <figcaption>Shell packet corresponding to the string “&gt; ”</figcaption>
            </figure>
            <p>Here’s some context for those of you who don’t know how MIDI works. MIDI is a really simple protocol that emerged in the 80s and to this day allows various digital musical instruments to interoperate by sending and receiving messages such as “Please play the note C#4 with a loudness of 40 out of 127”, or “Please set the reverb level to 14 out of 127”, or “This is a tick. Assume that the period of time between the current and last tick corresponds to 1/24th of a quarter note”. MIDI has a few different message types, but they weren’t enough to describe every aspect of sound generation, so they introduced a special message called the System Exclusive message, or simply SysEx. In the words of the specification, “This message type allows manufacturers to create their own messages”.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/sysex_definition.png" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/sysex_definition.png" alt="The SysEx message as defined by the MIDI specification"></a>
                <figcaption>The SysEx message as defined by the MIDI specification</figcaption>
            </figure>
            <p>Sooooo.... it was MIDI, right? Every SysEx message starts with an 0xf0 byte (just like our shell packets do), followed by 1 or 3 bytes of the manufacturer ID, followed by the payload, finally ending with an 0xf7 byte (again, like our packets do). The SysEx payload can only contain bytes in which the <abbr title="Most Significant Bit">MSB</abbr> is 0 because MIDI uses the MSB to differentiate between command and data bytes: 1 means it’s a command, and 0 means it’s data associated with the last command – this is exactly why “shell_print” is cutting the bytes up into 4-bit nibbles. Let’s look at the first data byte that the synth sends out (0x43) and see what manufacturer that corresponds to.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/sysex_0x43_yamaha.png" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/sysex_0x43_yamaha.png" alt="MIDI Manufacturers Association declaring that ID 0x43 is allocated to Yamaha"></a>
                <figcaption>MIDI Manufacturers Association declaring that ID 0x43 is allocated to Yamaha</figcaption>
            </figure>
            <p>So yeah, these madlads made a shell that runs on top of MIDI SysEx messages on top of USB. Very cool. Let’s cook up a Python script that acts as a translation layer between the terminal and the synth’s twisted little shell protocol and try talking to it.</p>
            <figure>
                <code><span># our input in red, the response in blue</span>
<span>login</span>
<span>passwd? </span><span>#0000</span>
<span>login OK</span>
<span>&gt; </span><span>help</span>
<span>logout</span>
<span>help</span>
<span>?</span>
<span>info</span>
<span>ver</span>
<span>stack</span>
<span>perf-on</span>
<span>perf-off</span>
<span>perf-disp</span>
<span>d</span>
<span>dp</span>
<span>d   xxxxx</span>
<span>d/s xxxxx</span>
<span>m   ADDRESS DATA</span>
<span>m/b ADDRESS DATA</span>
<span>m/w ADDRESS DATA</span>
<span>m/l ADDRESS DATA</span>
<span>&gt; </span><span>info</span>
<span>DevelopName        PSR-E433</span>
<span>DevelopNumber      #3341</span>
<span>Main DevelopNumber #3341</span>
<span>Make data &amp; time   MAY 16 2012 19:00:57</span>
<span>J/E Select         English</span>
<span>&gt; </span>
</code>
                <figcaption>Our first conversation with the synth’s MIDI shell</figcaption>
            </figure>
            <p>This is extraordinarily cool! I wasn’t really expecting this to work, as there’s a possibility that the format of the incoming messages is different from that of the outgoing ones. Fortunately, that turned out not to be the case. Although I have to say that the available commands are quite boring. Apart from your standard help and version information, the most interesting commands that we have are arbitrary memory read/write commands. So, if we really wanted to, we could just peek and poke the memory of the synth via MIDI. We don’t need JTAG for that.</p>

            <h2 id="shellcode">Shellcode</h2>
            <p>Now, what can we do with arbitrary memory poke commands? We could inject executable code into RAM, but we could never execute it. Right? Wrong! If we overwrite the call stack of the program, we can trick the synth into executing it once it finishes handling the command. This is binary exploitation 101, except we don’t have to find any buffer overflow vulnerabilities, the memory poke commands are right there!</p>
            <p>Let’s talk about data transfer speed. Our 32-bit memory write command takes the form of “m/l AAAAAAAA DDDDDDDD\r”, where A and D are the address and data respectively, expressed in hexadecimal. Each byte of the command is transformed into two bytes containing 4-bit nibbles of the original byte. It’s also extended with 9 additional bytes of the SysEx message. Then, every 3 bytes are wrapped in a 4 byte long USB-MIDI packet. In total, if we want to write 4 bytes into the memory, we have to send the synth 72 bytes, which is 18x larger than the payload. But that’s not all! The synth will read the command back to us, with every individual character nicely wrapped in its own SysEx transfer, and finish off with the “&gt; “ prompt. In total, us and the synth exchange 396 bytes, which is almost 100 times larger than the 4-byte payload! This low transfer efficiency definitely shows and will become a problem if we ever want to send large amounts of data (foreshadowing?)</p>
            <p>I found a region of RAM which looks like it’s not used by anything and might thus be safe to put arbitrary data into. Let’s write a little assembly snippet that nicely asks the firmware to print “HeloWrld” to the 8 character long text portion of the LCD:</p>
            <figure>
                <code><span># Tell the assembler what address this program is going to reside at.</span>
<span># Not really required in this case, but always nice to have:</span>
<span>.org</span> <span>0x06002900</span>

<span># This "write_str" function resides in the firmware.</span>
<span># We want to nicely ask it to print something.</span>
<span># First, load the address of this function into a register:</span>
<span>ldr</span> <span>r1</span>, <span>write_str</span>
<span># Then, load the address of the string into another register:</span>
<span>adr</span> <span>r0</span>, <span>str</span>
<span># Remember how we interrupted the normal execution flow by</span>
<span># overwriting the stack? Well, we need to somehow jump to where</span>
<span># the firmware wanted to jump originally once we're done.</span>
<span># Let's make the function we're calling do that for us!</span>
<span># Most functions (and write_str is no exception) expect to get called
<span># via the "bl" instruction (Branch and Link), which places the return</span>
<span># address in a special register called the Link Register (lr).</span>
<span># If we assign lr ourselves and just jump to the function, it will</span>
<span># return to our chosen address.</span>
<span>ldr</span> <span>lr</span>, <span>return</span>
<span># Jump to the function:</span>
<span>bx</span> <span>r1</span>

<span># Data definitions</span>
<span>write_str</span>: <span>.word</span> <span>0x2086ed5</span>
<span>return</span>: <span>.word</span> <span>0x02021a7b</span>
<span>str</span>: <span>.asciz</span> <span>"HeloWrld"</span>
<span># Padding so that the size of our program is even</span>
<span>.byte</span> <span>0</span>
</span></code>
                <figcaption>Our first Hello World program</figcaption>
            </figure>
            <p>Let’s write a python script that takes our assembled snippet, transforms it into memory write commands and sends them via MIDI over to the synth, following up with another write in order to trick the firmware into running that snippet.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/lcd_helo_wrld.jpg" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/thumb/lcd_helo_wrld.jpg" alt="The LCD displaying “HeloWrld”"></a>
                <figcaption>The LCD displaying “HeloWrld”</figcaption>
            </figure>
            <p>This took me quite a few tries to get right, but hey, it works! The nice part about this hack is that it doesn’t depend on any special interfaces like JTAG or UART. If we wanted to, we could write these messages to a MIDI file and play it on the synth like any other MIDI file. Hey, that gives me an idea.....</p>
            <p>Ladies and gentlemen, I present to you: World’s First MIDI Shellcode.</p>
            <figure>
                <video controls="" src="https://psi3.ru/blog/swl01u/videos/toccata_with_a_twist.mp4"></video>
                <figcaption>Toccata and Fugue in D Minor with a twist</figcaption>
            </figure>
            <p>Here’s the <a href="https://psi3.ru/blog/swl01u/files/scary-toccata-for-psr-e433-fw-1.02.mid" target="_blank">MIDI file</a> in case you want to do the same thing with a Yamaha PSR-E433 running firmware version 1.02. DO NOT play this MIDI file on ANY other Yamaha device, or on a PSR-E433 running a different version of the firmware, as it’s going to act unpredictably. You have been warned.</p>

            <h2 id="bad-apple">Bad Apple</h2>
            <p>Displaying graphics turned out to be way, way, way harder than displaying text. First, let’s look in the datasheet for our LCD controller (ML9040A) to decide whether that’s is even possible from a hardware standpoint. Turns out, not really – it can only handle text characters on a dot matrix. Our LCD definitely has a dot matrix part, but it also has this note notation part, and a 7-segment part in the middle, and another 7-segment part on the right, and a chord notation part below it, and finally a keyboard display at the very bottom.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/lcd_segments.jpg" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/lcd_segments.jpg" alt="The LCD on a Yamaha PSR-E433 with all segments enabled"></a>
                <figcaption>The LCD on a Yamaha PSR-E433 with all segments enabled</figcaption>
            </figure>
            <p>How does the firmware light these segments up in a custom pattern if the controller only supports text? Let’s look at the block diagram of our display controller.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/ml9040a.png" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/ml9040a.png" alt="Internal block diagram of ML9040A"></a>
                <figcaption>Internal block diagram of ML9040A</figcaption>
            </figure>
            <p>We can see three memories:</p>
            <ul>
                <li>The Display Data RAM (DDRAM) is written to by the host (in this case, SWL01U) to change the text displayed on the display. The host never writes the image that it wants the controller to display; instead, it sends it plain old ASCII (with some extra characters), and the controller is responsible for translating ASCII into an image that can be displayed on a dot matrix.</li>
                <li>The Character Generation ROM (CGROM) is what actually performs this translation. This ROM is a simple lookup table. It spits out a graphical pattern that must be displayed at a particular row in order to form a particular character.</li>
                <li>The Character Generation RAM (CGRAM) allows the host to define up to 8 custom characters, which can be called up by using character codes 0 through 7 or 8 though 15.</li>
            </ul>
            <p>The CGRAM is how the synth displays non-textual data and what we can use to display custom graphics in the dot matrix part of the LCD panel as well. Let’s use the assembly snippet from before to display the 8 custom characters in the dot matrix area.</p>
            <figure>
                <a href="https://psi3.ru/blog/swl01u/images/lcd_cgram.jpg" target="_blank"><img src="https://psi3.ru/blog/swl01u/images/thumb/lcd_cgram.jpg" alt="The LCD displaying the 8 custom characters controlled by the firmware"></a>
                <figcaption>The LCD displaying the 8 custom characters controlled by the firmware</figcaption>
            </figure>
            <p>No, it’s not displaying garbage. When I press down a key on the keyboard, two dots light up in the dot matrix area which correspond to a note in the notation area and a key in the keyboard area. When I let go of the key, those segments get extinguished. This confirms that the firmware manipulates the CGRAM in order to display its stuff below the dot matrix area.</p>
            <p>From the countless sleepless nights of digging around in the firmware I’ve discovered a function that sends arbitrary data to the LCD controller. Let’s write another assembly snippet that exploits this function to upload some custom data to the CGRAM.</p>
            <figure>
                <code><span># --- SNIP ---</span>

<span># We're going to be calling this function several times</span>
<span>ldr</span> <span>r4</span>, <span>lcd_write</span>

<span># Command 0x40 is "Set CGRAM write address to 0"</span>
<span>mov</span> <span>r0</span>, <span>#0x40</span>
<span>mov</span> <span>lr</span>, <span>pc</span>
<span>bx</span> <span>r4</span>

<span># Send the checker pattern (64 bytes)</span>
<span>mov</span> <span>r5</span>, <span>#0</span>
<span>ldr</span> <span>r0</span>, <span>checker_pattern</span>
<span>fill_loop:</span>
    <span># Send the data</span>
    <span>push</span> {<span>r0</span>}
    <span>mov</span> <span>lr</span>, <span>pc</span>
    <span>bx</span> <span>r4</span>
    <span>pop</span> {<span>r0</span>}
    <span># Invert the pattern for the next line</span>
    <span>eor</span> <span>r0</span>, <span>r0</span>, <span>#0xff</span>
    <span># Loop</span>
    <span>add</span> <span>r5</span>, <span>r5</span>, <span>#1</span>
    <span>cmp</span> <span>r5</span>, <span>#64</span>
    <span>bne</span> <span>fill_loop</span>

<span># --- SNIP ---</span>

<span>lcd_write:</span> <span>.word</span> <span>0x02020ac9</span> <span># Resides in the firmware</span>
<span>checker_pattern:</span> <span>.word</span> <span>0x4055</span> <span># That 0x4000 tells the function that we're sending data, not a command</span></code>
                <figcaption>Uploading data to the CGRAM</figcaption>
            </figure>
            <p>When I run this snippet, I can definitely see the data that I want displayed (in this case, a checker pattern) getting actually displayed in the dot matrix area. However, it’s quickly replaced with what the synth wants to display in the custom area. We definitely can’t play a video with this; we have to find a way to disable the part of the firmware responsible for updating the CGRAM. One way we could do this is to find the function responsible for that (which I’ve already done) and just replace it with an immediate return, causing it to not do anything. The problem is that this requires me to overwrite the synth’s flash chip, which I don’t want to do out of fear of bricking it. I specifically set out to make every experiment of mine instantly reversible through power cycling, which means that I’m only allowing myself to manipulate the RAM.</p>
            <p>I remember noticing that this firmware runs what appears to be some sort of a primitive <abbr title="Real-Time Operating System">RTOS</abbr> with some parts of it contained in the ROM of the SWL01U chip. There’s a set of constant global variables in the flash which define the callback functions for the tasks, as well as their stacks and other attributes which I couldn’t figure out the meaning of. So, if we could a) find out which of these 64 tasks is responsible for constantly updating the CGRAM, and b) find a way to overwrite the corresponding entry in the task table so that it points to a no-op function, we could effectively disable that part of the firmware.</p>
            <p>The key to this puzzle is the fact that the ROM and the flash are very loosely coupled. On startup, the firmware in the flash tells the ROM where its task table is located, and the ROM remembers this information in a global variable located in the embedded SRAM. If we make a copy of this task table in the RAM, and then tell the ROM that the task table has moved to a new location, we could coerce it into using this new table which we can modify in an instantly reversible way. So I did just that! I figured out which task was responsible for updating the display and replaced its callback with the default idle task callback, effectively preventing the firmware from continuously updating the CGRAM of the display controller.</p>
            <figure>
                <video src="https://psi3.ru/blog/swl01u/videos/bad_apple_1.mp4" controls=""></video>
                <figcaption>First iteration of Bad Apple</figcaption>
            </figure>
            <p>You can see that the first iteration has some artifacts, but the biggest problem is that the frame rate is very low. The reason for that is the extremely low data transfer efficiency that I was talking about. Even if we upload the executable snippet once and only replace its data section when we want to display a new frame, that’s still 6732 bytes of data transferred per 70 bytes of payload (64 bytes of CGRAM data plus a 32-bit return address overwrite). And it turns out that these transfers are really slow, which in our case translates to low frame rate.</p>
            <p>The two biggest contributors to this low payload efficiency are: a) the fact that this data has to be wrapped in a command, and b) that the synth reads the command back character by character in these enormous packets. If we could manipulate the task table once again in order to assign our own callback for the shell task, we could capture raw data and choose not to respond with anything, which would eliminate both of these problems. This, together with another packing optimization brings the total transfer size per frame down from 6732 bytes to 92 bytes – a 73-fold decrease! The artifacting is still there, but we’re now able to play video at a tolerable framerate.</p>
            <figure>
                <video src="https://psi3.ru/blog/swl01u/videos/bad_apple_2.mp4" controls=""></video>
                <figcaption>Second iteration of Bad Apple</figcaption>
            </figure>
            <p>Now, what causes this artifacting? The synth uses the same 8 <abbr title="General-Purpose Input/Output">GPIO</abbr> lines for both talking to the display and scanning the panel with button controls and LEDs. One of the tasks is responsible for intertwining LCD accesses with panel scanning, and sometimes while we’re transferring our data to the LCD unbeknownst to this task, it decides to interrupt us and do a scan of the panel, which messes with the same data lines that the display is currently actively listening to, which causes these artifacts. To avoid this, we could stop talking to the display directly, and instead nicely ask that multiplexing task to send the data that we want once it’s done with the panel scan.</p>
            <figure>
                <iframe width="1080" height="608" src="https://www.youtube.com/embed/u6sukVMijBg" title="Yamaha PSR-E433 Bad Apple demo" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
                <figcaption>Final iteration of Bad Apple</figcaption>
            </figure>
            <p>So there you go! The algorithm to display video on the LCD of this synth over MIDI is as follows:</p>
            <ul>
                <li>Log into the shell;</li>
                <li>Write executable code into RAM using memory write commands provided by the shell;</li>
                <li>Execute the code from RAM by overwriting the return address on the stack;</li>
                <li>Make a copy of the task tables in RAM;</li>
                <li>Fix those new tables up so that they point to each other;</li>
                <li>Tell the ROM to use our new task tables;</li>
                <li>Replace the display task callback with the default idle callback;</li>
                <li>Replace the shell task callback with our own callback;</li>
                <li>In that callback, unpack data arriving via MIDI and transfer it over to the display/panel multiplexing task;</li>
                <li>Feed our synth video frames via MIDI.</li>
            </ul>
            <p>This project is not quite done yet. I have a very limited understanding of the chip’s MMIO region, and absolutely no understanding about its most interesting part - the DSP that’s separate from the main ARM core. Stay tuned for when I figure those things out :)</p>

            <h2 id="links">Links</h2>
            <ul>
                <li><a href="https://github.com/portasynthinca3/swl01u" target="_blank">This project on GitHub</a></li>
                <li><a href="https://midi.org/spec-detail" target="_blank">MIDI Specification</a></li>
                <li><a href="https://midi.org/sysexidtable" target="_blank">MIDI SysEx ID allocation table</a></li>
                <li><a href="https://www.usb.org/sites/default/files/midi10.pdf" target="_blank">USB-MIDI Specification</a></li>
                <li><a href="https://developer.arm.com/documentation/ddi0084/f" target="_blank">ARM7TDMI Technical Reference Manual</a></li>
                <li><a href="https://sandsoftwaresound.net/swl-micro-architecture/" target="_blank">Architecture of Yamaha entry-level synths</a></li>
            </ul>
        </div></div>]]></description>
        </item>
    </channel>
</rss>