<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 25 Aug 2024 12:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Anthropic Claude 3.5 can create icalendar files, so I did this (222 pts)]]></title>
            <link>https://gregsramblings.com/stupid-but-useful-ai-tricks-creating-calendar-entries-from-an-image-using-anthropic-claude-35</link>
            <guid>41343826</guid>
            <pubDate>Sun, 25 Aug 2024 02:27:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://gregsramblings.com/stupid-but-useful-ai-tricks-creating-calendar-entries-from-an-image-using-anthropic-claude-35">https://gregsramblings.com/stupid-but-useful-ai-tricks-creating-calendar-entries-from-an-image-using-anthropic-claude-35</a>, See on <a href="https://news.ycombinator.com/item?id=41343826">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="post-content-parent"><p>A few days ago, my jazz piano teacher sent me the new fall/winter schedule for my private jazz piano lessons -- 13 different dates -- as a JPG (mine are outlined in green marker):</p>
<p><img loading="lazy" src="https://cdn.hashnode.com/res/hashnode/image/upload/v1724550508637/b7807f68-6a22-45bc-85f0-78faadcaec63.jpeg?auto=compress,format&amp;format=webp" alt=""></p>
<p>I was too lazy to go make 13 entries in Google Calendar, so I decided to see if Claude could help me out:</p>
<p>I first uploaded the jpg to Claude 3.5 Sonnet)...</p>
<blockquote>
<p><strong>My prompt:</strong> List the dates that are outlined in green</p>
<p>The dates outlined in green in the image are:</p>
<p>Friday, 13-Sep-24 Friday, 27-Sep-24 Friday, 11-Oct-24 Friday, 8-Nov-24 Friday, 6-Dec-24 Friday, 20-Dec-24 Friday, 17-Jan-25 Friday, 31-Jan-25 Friday, 28-Feb-25 Friday, 14-Mar-25 Friday, 11-Apr-25 Friday, 25-Apr-25 Friday, 23-May-25</p>
<p>These dates correspond to the Friday column for students who have their first every-other-week lesson starting the week of Tuesday Sept 10, 2024.</p>
</blockquote>
<p>Cool - that was easy and accurate. Now I need to get it into my calendar, so I asked it to create an <a target="_blank" href="https://en.wikipedia.org/wiki/ICalendar">ics</a> file...</p>
<blockquote>
<p><strong>My prompt:</strong> Create a calendar ics file that creates an appointment on each of those dates at 2pm pacific time. The appointment title will be “Jazz Piano Lesson”</p>
<p>Certainly. I'll create an ICS (iCalendar) file with appointments for "Jazz Piano Lesson" on each of the dates you specified, set for 2:00 PM Pacific Time.</p>
</blockquote>
<pre><code>BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Claude//Jazz Piano Lessons//EN
CALSCALE:GREGORIAN
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20240913T210000Z
DTEND:20240913T220000Z
DTSTAMP:20240824T000000Z
UID:20240913jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20240927T210000Z
DTEND:20240927T220000Z
DTSTAMP:20240824T000000Z
UID:20240927jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20241011T210000Z
DTEND:20241011T220000Z
DTSTAMP:20240824T000000Z
UID:20241011jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20241108T220000Z
DTEND:20241108T230000Z
DTSTAMP:20240824T000000Z
UID:20241108jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20241206T220000Z
DTEND:20241206T230000Z
DTSTAMP:20240824T000000Z
UID:20241206jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20241220T220000Z
DTEND:20241220T230000Z
DTSTAMP:20240824T000000Z
UID:20241220jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20250117T220000Z
DTEND:20250117T230000Z
DTSTAMP:20240824T000000Z
UID:20250117jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20250131T220000Z
DTEND:20250131T230000Z
DTSTAMP:20240824T000000Z
UID:20250131jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20250228T220000Z
DTEND:20250228T230000Z
DTSTAMP:20240824T000000Z
UID:20250228jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20250314T210000Z
DTEND:20250314T220000Z
DTSTAMP:20240824T000000Z
UID:20250314jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20250411T210000Z
DTEND:20250411T220000Z
DTSTAMP:20240824T000000Z
UID:20250411jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20250425T210000Z
DTEND:20250425T220000Z
DTSTAMP:20240824T000000Z
UID:20250425jazzpiano@claude.ai
END:VEVENT
BEGIN:VEVENT
SUMMARY:Jazz Piano Lesson
DTSTART:20250523T210000Z
DTEND:20250523T220000Z
DTSTAMP:20240824T000000Z
UID:20250523jazzpiano@claude.ai
END:VEVENT
END:VCALENDAR
</code></pre>
<blockquote>
<p>I've created an ICS file with the following details:</p>
<ol>
<li><p>Each event is titled "Jazz Piano Lesson"</p>
</li>
<li><p>The events are scheduled for 2:00 PM Pacific Time on each of the specified dates</p>
</li>
<li><p>Each event is set to last for one hour</p>
</li>
<li><p>The time zone is properly adjusted to UTC (Z) in the file</p>
</li>
<li><p>Unique identifiers (UIDs) are provided for each event</p>
</li>
</ol>
<p>You can save this content as a .ics file and import it into most calendar applications. Here are a few notes about the file:</p>
<ol>
<li><p>The times are in UTC (Coordinated Universal Time). 2:00 PM Pacific Time translates to 9:00 PM UTC (21:00) for dates not in Daylight Saving Time, and 10:00 PM UTC (22:00) for dates within Daylight Saving Time. The file accounts for these changes.</p>
</li>
<li><p>The DTSTAMP for all events is set to the date of this conversation (August 24, 2024) as a placeholder. Your calendar application will likely update this when you import the events.</p>
</li>
<li><p>The UID for each event is unique, based on the date of the lesson and a simple string.</p>
</li>
</ol>
<p>To use this file:</p>
<ol>
<li><p>Copy the content of the artifact</p>
</li>
<li><p>Paste it into a new text file</p>
</li>
<li><p>Save the file with a .ics extension (e.g., "jazz_piano_lessons.ics")</p>
</li>
<li><p>Import this file into your preferred calendar application</p>
</li>
</ol>
<p>Most calendar applications should be able to read this file and create the appropriate recurring events. Let me know if you need any modifications or have any questions!</p>
</blockquote>
<p>I went to <a href="http://calendar.google.com/" target="_blank">calendar.google.com</a>, imported the ics, and my appointments were imported perfectly!<br>(To import ics files into Google calendar, go to the calendar settings, then to import/export)</p>
<p>I'm pleasantly surprised at how easy this was!</p>
<p>I tried the exact same thing in ChatGPT -- it identified the dates in the images, but it was unable to create an .ics file. However, it did give me some Python code to create the ics file for me.</p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Postgres as a Search Engine (112 pts)]]></title>
            <link>https://anyblockers.com/posts/postgres-as-a-search-engine</link>
            <guid>41343814</guid>
            <pubDate>Sun, 25 Aug 2024 02:25:51 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://anyblockers.com/posts/postgres-as-a-search-engine">https://anyblockers.com/posts/postgres-as-a-search-engine</a>, See on <a href="https://news.ycombinator.com/item?id=41343814">Hacker News</a></p>
<div id="readability-page-1" class="page"><p>Build a retrieval system with semantic, full-text, and fuzzy search in Postgres to be used as a backbone in RAG pipelines.</p><div>  <p><strong>Search is hard</strong>. It’s a critical part of many apps, but getting it right isn’t easy. This is especially true for RAG-pipelines where the quality of retrieval can make or break the entire process.</p>
<p>While semantic search is trendy, good old lexical search is still the backbone. Semantic techniques can improve results, but they work best when added to a solid text-based search foundation.</p>
<p>In this post, we’ll explore how to use Postgres to create a robust search engine. We’ll combine three techniques:</p>
<ol>
<li>Full-text search with <code>tsvector</code></li>
<li>Semantic search with <code>pgvector</code></li>
<li>Fuzzy matching with <code>pg_trgm</code></li>
<li>Bonus: BM25</li>
</ol>
<p>This approach might not be the absolute best for every situation, but it’s a great alternative to setting up a separate search service. It’s a solid starting point that you can implement and scale within your existing Postgres database.</p>
<p>I won’t go into why you should Just Use Postgres™️ for everything, but if you want to read about it, here are a couple of good resources:</p>

<h2 id="table-with-four-legs"><a data-heading-link="" href="#table-with-four-legs">Table with four legs</a></h2>
<p>This is the table we’ll work with as an example.</p>
<pre tabindex="0" data-language="sql"><code><span><span>create</span><span> table</span><span> documents</span><span> (</span></span>
<span><span>    id </span><span>bigint</span><span> primary key</span><span> generated</span><span> always</span><span> as</span><span> identity</span><span>,</span></span>
<span><span>    title </span><span>text</span><span>,</span></span>
<span><span>    fts_title tsvector </span><span>generated</span><span> always</span><span> as</span><span> (to_tsvector(</span><span>'english'</span><span>, title)) stored,</span></span>
<span><span>    embedding vector(</span><span>1536</span><span>)</span></span>
<span><span>);</span></span>
<span></span></code></pre>
<p>We’ll evolve this table down the road.
Since Supabase has a great article on implementing hybrid search, we’ll use that as a starting point. <a href="https://supabase.com/docs/guides/ai/hybrid-search" rel="nofollow" target="_blank">Hybrid search<span><img src="https://www.google.com/s2/favicons?domain=supabase.com&amp;sz=64"></span></a></p>
<ul>
<li>Follow the guide to implement FTS with GIN-indexes and semantic search with pgvector (also known as bi-encoder dense retrieval).</li>
<li>From personal experience, I’d opt for 1536 dimensional embeddings since it’s gotten me way better results. Source: trust me.</li>
<li>I’ve replaced the Supabase function with just CTEs and a query, as well as prefixed the params with <code>$</code>. Here’s what it’ll look like:</li>
</ul>
<pre tabindex="0" data-language="sql"><code><span><span>with</span><span> full_text </span><span>as</span><span> (</span></span>
<span><span>    select</span></span>
<span><span>        id,</span></span>
<span><span>        -- Note: ts_rank_cd is not indexable but will only rank matches of the where clause</span></span>
<span><span>        -- which shouldn't be too big</span></span>
<span><span>        row_number</span><span>() </span><span>over</span><span>(</span><span>order by</span><span> ts_rank_cd(fts_title, websearch_to_tsquery($query_text)) </span><span>desc</span><span>) </span><span>as</span><span> rank_ix</span></span>
<span><span>    from</span></span>
<span><span>        documents</span></span>
<span><span>    where</span></span>
<span><span>        fts_title @@ websearch_to_tsquery($query_text)</span></span>
<span><span>    order by</span><span> rank_ix</span></span>
<span><span>    limit</span><span> least</span><span>($match_count, </span><span>30</span><span>)</span></span>
<span><span>),</span></span>
<span><span>semantic </span><span>as</span><span> (</span></span>
<span><span>    select</span></span>
<span><span>        id,</span></span>
<span><span>        row_number</span><span>() </span><span>over</span><span> (</span><span>order by</span><span> embedding </span><span>&lt;</span><span>#</span><span>&gt;</span><span> $query_embedding) </span><span>as</span><span> rank_ix</span></span>
<span><span>    from</span></span>
<span><span>        documents</span></span>
<span><span>    order by</span><span> rank_ix</span></span>
<span><span>    limit</span><span> least</span><span>($match_count, </span><span>30</span><span>)</span></span>
<span><span>)</span></span>
<span><span>select</span></span>
<span><span>    documents.</span><span>*</span></span>
<span><span>from</span></span>
<span><span>    full_text</span></span>
<span><span>    full outer join</span><span> semantic</span></span>
<span><span>        on</span><span> full_text</span><span>.</span><span>id</span><span> =</span><span> semantic</span><span>.</span><span>id</span></span>
<span><span>    join</span><span> documents</span></span>
<span><span>        on</span><span> coalesce</span><span>(</span><span>full_text</span><span>.</span><span>id</span><span>, </span><span>semantic</span><span>.</span><span>id</span><span>) </span><span>=</span><span> documents</span><span>.</span><span>id</span></span>
<span><span>order by</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> full_text</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $full_text_weight </span><span>+</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> semantic</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $semantic_weight</span></span>
<span><span>    desc</span></span>
<span><span>limit</span></span>
<span><span>    least</span><span>($match_count, </span><span>30</span><span>);</span></span>
<span></span></code></pre>
<p>Note: We’re using <code>coalesce</code> in several places for important reasons:</p>
<ol>
<li>
<p>In the <code>join</code> clause:</p>
<pre tabindex="0" data-language="sql"><code><span><span>join</span><span> documents</span></span>
<span><span>    on</span><span> coalesce</span><span>(</span><span>full_text</span><span>.</span><span>id</span><span>, </span><span>semantic</span><span>.</span><span>id</span><span>) </span><span>=</span><span> documents</span><span>.</span><span>id</span></span>
<span></span></code></pre>
<p>This ensures that we include results from both full-text and semantic searches, even if a document appears in only one of these result sets. If a document is found by full-text search but not by semantic search (or vice versa), we still want to include it.</p>
</li>
<li>
<p>In the <code>order by</code> clause:</p>
<pre tabindex="0" data-language="sql"><code><span><span>coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> full_text</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $full_text_weight </span><span>+</span></span>
<span><span>coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> semantic</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $semantic_weight</span></span>
<span></span></code></pre>
<p>This handles cases where a document might be present in one search result but not the other. If a document isn’t in the full-text results, its <code>full_text.rank_ix</code> will be NULL, so we use <code>coalesce</code> to treat it as 0.0 in the ranking calculation. The same applies for semantic search results.</p>
</li>
</ol>
<p>Here we’re using Reciprocal Ranked Fusion (RRF) to merge the results.</p>
<svg aria-roledescription="flowchart-v2" role="graphics-document document" viewBox="-8 -8 799.71875 395.890625" style="max-width: 799.71875px;" xmlns="http://www.w3.org/2000/svg" width="100%" id="mermaid-0"><g><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="6" viewBox="0 0 10 10" id="mermaid-0_flowchart-pointEnd"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" d="M 0 0 L 10 5 L 0 10 z"></path></marker><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="4.5" viewBox="0 0 10 10" id="mermaid-0_flowchart-pointStart"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" d="M 0 5 L 10 10 L 10 0 z"></path></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="11" viewBox="0 0 10 10" id="mermaid-0_flowchart-circleEnd"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" r="5" cy="5" cx="5"></circle></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="-1" viewBox="0 0 10 10" id="mermaid-0_flowchart-circleStart"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" r="5" cy="5" cx="5"></circle></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="12" viewBox="0 0 11 11" id="mermaid-0_flowchart-crossEnd"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" d="M 1,1 l 9,9 M 10,1 l -9,9"></path></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="-1" viewBox="0 0 11 11" id="mermaid-0_flowchart-crossStart"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" d="M 1,1 l 9,9 M 10,1 l -9,9"></path></marker><g><g><g id="subGraph2"><rect height="83" width="247.90625" y="0" x="535.8125" ry="0" rx="0" style=""></rect><g transform="translate(640.640625, 0)"><foreignObject height="18" width="38.25"><p><span>List 3</span></p></foreignObject></g></g><g id="subGraph1"><rect height="83" width="247.90625" y="0" x="267.90625" ry="0" rx="0" style=""></rect><g transform="translate(372.734375, 0)"><foreignObject height="18" width="38.25"><p><span>List 2</span></p></foreignObject></g></g><g id="subGraph0"><rect height="83" width="247.90625" y="0" x="0" ry="0" rx="0" style=""></rect><g transform="translate(104.828125, 0)"><foreignObject height="18" width="38.25"><p><span>List 1</span></p></foreignObject></g></g></g><g><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L1A-RRF-0" d="M47.836,58L47.836,62.167C47.836,66.333,47.836,74.667,47.836,83C47.836,91.333,47.836,99.667,98.725,113.581C149.615,127.495,251.394,146.989,302.284,156.737L353.173,166.484"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L1B-RRF-0" d="M123.508,58L123.508,62.167C123.508,66.333,123.508,74.667,123.508,83C123.508,91.333,123.508,99.667,162.039,113.292C200.571,126.917,277.634,145.835,316.165,155.293L354.697,164.752"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L1C-RRF-0" d="M199.625,58L199.625,62.167C199.625,66.333,199.625,74.667,199.625,83C199.625,91.333,199.625,99.667,225.883,112.826C252.141,125.985,304.656,143.971,330.914,152.963L357.172,161.956"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L2B-RRF-0" d="M315.742,58L315.742,62.167C315.742,66.333,315.742,74.667,315.742,83C315.742,91.333,315.742,99.667,324.218,111.131C332.693,122.596,349.645,137.193,358.12,144.491L366.596,151.789"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L2C-RRF-0" d="M391.859,58L391.859,62.167C391.859,66.333,391.859,74.667,391.859,83C391.859,91.333,391.859,99.667,391.925,107.2C391.991,114.734,392.123,121.467,392.189,124.834L392.255,128.201"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L2A-RRF-0" d="M467.977,58L467.977,62.167C467.977,66.333,467.977,74.667,467.977,83C467.977,91.333,467.977,99.667,459.662,111.125C451.348,122.584,434.72,137.168,426.405,144.46L418.091,151.752"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L3C-RRF-0" d="M584.094,58L584.094,62.167C584.094,66.333,584.094,74.667,584.094,83C584.094,91.333,584.094,99.667,558.002,112.824C531.91,125.982,479.727,143.964,453.635,152.955L427.543,161.946"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L3A-RRF-0" d="M660.211,58L660.211,62.167C660.211,66.333,660.211,74.667,660.211,83C660.211,91.333,660.211,99.667,621.846,113.291C583.481,126.916,506.751,145.831,468.386,155.289L430.021,164.747"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-L3B-RRF-0" d="M735.883,58L735.883,62.167C735.883,66.333,735.883,74.667,735.883,83C735.883,91.333,735.883,99.667,685.16,113.58C634.437,127.494,532.991,146.987,482.268,156.734L431.545,166.481"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-RRF-FR-0" d="M392.359,214.391L392.276,218.474C392.193,222.557,392.026,230.724,391.943,238.091C391.859,245.457,391.859,252.024,391.859,255.307L391.859,258.591"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-FR-FRA-0" d="M361.684,296.891L354.065,301.057C346.445,305.224,331.205,313.557,323.585,321.007C315.965,328.457,315.965,335.024,315.965,338.307L315.965,341.591"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-FR-FRB-0" d="M391.771,296.891L391.748,301.057C391.726,305.224,391.681,313.557,391.659,321.007C391.637,328.457,391.637,335.024,391.637,338.307L391.637,341.591"></path><path marker-end="url(#mermaid-0_flowchart-pointEnd)" style="fill:none;" id="L-FR-FRC-0" d="M422.034,296.891L429.654,301.057C437.274,305.224,452.514,313.557,460.134,321.007C467.754,328.457,467.754,335.024,467.754,338.307L467.754,341.591"></path></g><g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g></g><g><g transform="translate(584.09375, 41.5)" data-id="L3C" data-node="true" id="flowchart-L3C-6"><rect height="33" width="26.5625" y="-16.5" x="-13.28125" ry="0" rx="0" style=""></rect><g transform="translate(-5.78125, -9)" style=""><rect></rect><foreignObject height="18" width="11.5625"><p><span>C</span></p></foreignObject></g></g><g transform="translate(660.2109375, 41.5)" data-id="L3A" data-node="true" id="flowchart-L3A-7"><rect height="33" width="25.671875" y="-16.5" x="-12.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-5.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="10.671875"><p><span>A</span></p></foreignObject></g></g><g transform="translate(735.8828125, 41.5)" data-id="L3B" data-node="true" id="flowchart-L3B-8"><rect height="33" width="25.671875" y="-16.5" x="-12.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-5.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="10.671875"><p><span>B</span></p></foreignObject></g></g><g transform="translate(315.7421875, 41.5)" data-id="L2B" data-node="true" id="flowchart-L2B-3"><rect height="33" width="25.671875" y="-16.5" x="-12.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-5.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="10.671875"><p><span>B</span></p></foreignObject></g></g><g transform="translate(391.859375, 41.5)" data-id="L2C" data-node="true" id="flowchart-L2C-4"><rect height="33" width="26.5625" y="-16.5" x="-13.28125" ry="0" rx="0" style=""></rect><g transform="translate(-5.78125, -9)" style=""><rect></rect><foreignObject height="18" width="11.5625"><p><span>C</span></p></foreignObject></g></g><g transform="translate(467.9765625, 41.5)" data-id="L2A" data-node="true" id="flowchart-L2A-5"><rect height="33" width="25.671875" y="-16.5" x="-12.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-5.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="10.671875"><p><span>A</span></p></foreignObject></g></g><g transform="translate(47.8359375, 41.5)" data-id="L1A" data-node="true" id="flowchart-L1A-0"><rect height="33" width="25.671875" y="-16.5" x="-12.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-5.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="10.671875"><p><span>A</span></p></foreignObject></g></g><g transform="translate(123.5078125, 41.5)" data-id="L1B" data-node="true" id="flowchart-L1B-1"><rect height="33" width="25.671875" y="-16.5" x="-12.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-5.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="10.671875"><p><span>B</span></p></foreignObject></g></g><g transform="translate(199.625, 41.5)" data-id="L1C" data-node="true" id="flowchart-L1C-2"><rect height="33" width="26.5625" y="-16.5" x="-13.28125" ry="0" rx="0" style=""></rect><g transform="translate(-5.78125, -9)" style=""><rect></rect><foreignObject height="18" width="11.5625"><p><span>C</span></p></foreignObject></g></g><g transform="translate(391.859375, 173.4453125)" data-id="RRF" data-node="true" id="flowchart-RRF-10"><polygon style="" transform="translate(-40.4453125,40.4453125)" points="40.4453125,0 80.890625,-40.4453125 40.4453125,-80.890625 0,-40.4453125"></polygon><g transform="translate(-16.4453125, -9)" style=""><rect></rect><foreignObject height="18" width="32.890625"><p><span>RRF</span></p></foreignObject></g></g><g transform="translate(391.859375, 280.390625)" data-id="FR" data-node="true" id="flowchart-FR-28"><rect height="33" width="112.828125" y="-16.5" x="-56.4140625" ry="0" rx="0" style=""></rect><g transform="translate(-48.9140625, -9)" style=""><rect></rect><foreignObject height="18" width="97.828125"><p><span>Final Ranking</span></p></foreignObject></g></g><g transform="translate(315.96484375, 363.390625)" data-id="FRA" data-node="true" id="flowchart-FRA-30"><rect height="33" width="25.671875" y="-16.5" x="-12.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-5.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="10.671875"><p><span>A</span></p></foreignObject></g></g><g transform="translate(391.63671875, 363.390625)" data-id="FRB" data-node="true" id="flowchart-FRB-32"><rect height="33" width="25.671875" y="-16.5" x="-12.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-5.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="10.671875"><p><span>B</span></p></foreignObject></g></g><g transform="translate(467.75390625, 363.390625)" data-id="FRC" data-node="true" id="flowchart-FRC-34"><rect height="33" width="26.5625" y="-16.5" x="-13.28125" ry="0" rx="0" style=""></rect><g transform="translate(-5.78125, -9)" style=""><rect></rect><foreignObject height="18" width="11.5625"><p><span>C</span></p></foreignObject></g></g></g></g></g></svg>
<blockquote>
<p>This method ensures that items ranked high in multiple lists are given a high rank in the final list. It also ensures that items ranked high in only a few lists but low in others are not given a high rank in the final list. Placing the rank in the denominator when calculating score helps penalize the low ranking records.</p>
</blockquote>
<p>It’s also worth noting:</p>
<ul>
<li><code>$rrf_k</code>: To prevent extremely high scores for items ranked first (since we’re dividing by the rank), a k constant is often added to the denominator to smooth the score.</li>
<li><code>$ _weight</code>: We can assign a weight to each method. This is very useful when you’re tuning the results.</li>
</ul>
<h2 id="implementing-fuzzy-search"><a data-heading-link="" href="#implementing-fuzzy-search">Implementing fuzzy search</a></h2>
<p>While this gets us a long way, an immediate issue will be typos in named entities. While semantic search eliminates some of these issues by capturing similarity, it struggles to do so for names, acronyms, and other text that’s not semantically similar. To mitigate this, we’ll introduce the <code>pg_trgm</code> extension to allow for fuzzy searching.</p>
<pre tabindex="0" data-language="sql"><code><span><span>create</span><span> extension </span><span>if</span><span> not</span><span> exists</span><span> pg_trgm;</span></span>
<span></span></code></pre>
<p>It operates with Trigrams. Here’s how it works:</p>
<p><img src="https://anyblockers.com/_astro/trigrams.CyxTPrsW_Z4ew9V.svg" alt="Trigrams" width="800" height="300" loading="lazy" decoding="async"></p>
<p>Trigrams are useful for fuzzy search because they break down words into three-character sequences. This allows for matching similar words even if they contain typos or slight variations. For example, “hello” and “helo” share many trigrams, making them easier to match in a fuzzy search.</p>
<p>You have to create a new index for the desired column like this:</p>
<pre tabindex="0" data-language="sql"><code><span><span>create</span><span> index</span><span> idx_documents_title_trgm</span><span> on</span><span> documents </span><span>using</span><span> gin (title gin_trgm_ops);</span></span>
<span></span></code></pre>
<p>After that, you need to add it to the full search query. The extension exposes the % operator to filter out text where similarity is larger than <code>pg_trgm.similarity_threshold</code> (default is 0.3). There are also several other operators that are useful. Everything is well documented here: <a href="https://www.postgres.org/docs/current/pgtrgm.html" rel="nofollow" target="_blank">pg_trgm — support for similarity of text using trigram matching<span><img src="https://www.google.com/s2/favicons?domain=www.postgres.org&amp;sz=64"></span></a></p>
<p>Here’s the new query with fuzzy searching implemented:</p>
<pre tabindex="0" data-language="sql"><code><span><span>with</span><span> fuzzy </span><span>as</span><span> ( </span></span>
<span><span>    select</span><span> id,</span></span>
<span><span>           similarity(title, $query_text) </span><span>as</span><span> sim_score,</span></span>
<span><span>           row_number</span><span>() </span><span>over</span><span> (</span><span>order by</span><span> similarity(title, $query_text) </span><span>desc</span><span>) </span><span>as</span><span> rank_ix</span></span>
<span><span>    from</span><span> documents</span></span>
<span><span>    where</span><span> title % $query_text</span></span>
<span><span>    order by</span><span> rank_ix</span></span>
<span><span>    limit</span><span> least</span><span>($match_count, </span><span>30</span><span>)</span></span>
<span><span>),</span></span>
<span><span>full_text </span><span>as</span><span> (</span></span>
<span><span>    select</span><span> id,</span></span>
<span><span>           ts_rank_cd(to_tsvector(</span><span>'english'</span><span>, title), websearch_to_tsquery($query_text)) </span><span>as</span><span> rank_score,</span></span>
<span><span>           row_number</span><span>() </span><span>over</span><span> (</span><span>order by</span><span> ts_rank_cd(to_tsvector(</span><span>'english'</span><span>, title), websearch_to_tsquery($query_text)) </span><span>desc</span><span>) </span><span>as</span><span> rank_ix</span></span>
<span><span>    from</span><span> documents</span></span>
<span><span>    where</span><span> to_tsvector(</span><span>'english'</span><span>, title) @@ websearch_to_tsquery($query_text)</span></span>
<span><span>    order by</span><span> rank_ix</span></span>
<span><span>    limit</span><span> least</span><span>($match_count, </span><span>30</span><span>)</span></span>
<span><span>),</span></span>
<span><span>semantic </span><span>as</span><span> (</span></span>
<span><span>    select</span><span> id,</span></span>
<span><span>           row_number</span><span>() </span><span>over</span><span> (</span><span>order by</span><span> embedding </span><span>&lt;</span><span>#</span><span>&gt;</span><span> $query_embedding) </span><span>as</span><span> rank_ix</span></span>
<span><span>    from</span><span> documents</span></span>
<span><span>    order by</span><span> rank_ix</span></span>
<span><span>    limit</span><span> least</span><span>($match_count, </span><span>30</span><span>)</span></span>
<span><span>)</span></span>
<span><span>select</span><span> documents.</span><span>*</span></span>
<span><span>from</span><span> fuzzy</span></span>
<span><span>full outer join</span><span> full_text </span><span>on</span><span> fuzzy</span><span>.</span><span>id</span><span> =</span><span> full_text</span><span>.</span><span>id</span></span>
<span><span>full outer join</span><span> semantic </span><span>on</span><span> coalesce</span><span>(</span><span>fuzzy</span><span>.</span><span>id</span><span>, </span><span>full_text</span><span>.</span><span>id</span><span>) </span><span>=</span><span> semantic</span><span>.</span><span>id</span></span>
<span><span>join</span><span> documents </span><span>on</span><span> coalesce</span><span>(</span><span>fuzzy</span><span>.</span><span>id</span><span>, </span><span>full_text</span><span>.</span><span>id</span><span>, </span><span>semantic</span><span>.</span><span>id</span><span>) </span><span>=</span><span> documents</span><span>.</span><span>id</span></span>
<span><span>order by</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> fuzzy</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $fuzzy_weight </span><span>+</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> full_text</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $full_text_weight </span><span>+</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> semantic</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $semantic_weight</span></span>
<span><span>desc</span></span>
<span><span>limit</span><span> least</span><span>($match_count, </span><span>30</span><span>);</span></span>
<span></span></code></pre>
<h2 id="debugging-the-rankings"><a data-heading-link="" href="#debugging-the-rankings">Debugging the rankings</a></h2>
<p>When getting the results back, it’s very useful to understand why something matched and not. First, we need to ensure we’re returning all scores from the various CTEs.</p>
<pre tabindex="0" data-language="sql"><code><span><span>semantic </span><span>as</span><span> (</span></span>
<span><span>  select</span><span> id,</span></span>
<span><span>  1</span><span> -</span><span> (embedding </span><span>&lt;=&gt;</span><span> $query_embedding) </span><span>as</span><span> cosine_similarity, </span></span>
<span><span>)</span></span>
<span></span></code></pre>
<p>Next, we need to actually include it in the final response. I’ve found it useful to store as a JSON object that you can pass around however you want.</p>
<pre tabindex="0" data-language="sql"><code><span><span>select</span></span>
<span><span>  ...</span></span>
<span><span>  json_build_object(</span></span>
<span><span>      'fuzzy'</span><span>, json_build_object(</span><span>'rank_ix'</span><span>, </span><span>fuzzy</span><span>.</span><span>rank_ix</span><span>, </span><span>'sim_score'</span><span>, </span><span>fuzzy</span><span>.</span><span>sim_score</span><span>),</span></span>
<span><span>      'full_text'</span><span>, json_build_object(</span><span>'rank_ix'</span><span>, </span><span>full_text</span><span>.</span><span>rank_ix</span><span>, </span><span>'rank_score'</span><span>, </span><span>full_text</span><span>.</span><span>rank_score</span><span>),</span></span>
<span><span>      'semantic'</span><span>, json_build_object(</span><span>'rank_ix'</span><span>, </span><span>semantic</span><span>.</span><span>rank_ix</span><span>, </span><span>'cosine_similarity'</span><span>, </span><span>semantic</span><span>.</span><span>cosine_similarity</span><span>)</span></span>
<span><span>  ) </span><span>as</span><span> rankings</span></span>
<span><span>...</span></span>
<span></span></code></pre>
<p>Here’s what it’ll look like:</p>
<pre tabindex="0" data-language="json"><code><span><span>{</span></span>
<span><span>  "rankings"</span><span>: {</span></span>
<span><span>    "fuzzy"</span><span>: {</span></span>
<span><span>      "rank_ix"</span><span>: </span><span>5</span><span>,</span></span>
<span><span>      "sim_score"</span><span>: </span><span>0.6</span></span>
<span><span>    },</span></span>
<span><span>    "full_text"</span><span>: {</span></span>
<span><span>      "rank_ix"</span><span>: </span><span>4</span><span>,</span></span>
<span><span>      "rank_score"</span><span>: </span><span>0.756</span></span>
<span><span>    },</span></span>
<span><span>    "semantic"</span><span>: {</span></span>
<span><span>      "rank_ix"</span><span>: </span><span>1</span><span>,</span></span>
<span><span>      "cosine_similarity"</span><span>: </span><span>0.912</span></span>
<span><span>    }</span></span>
<span><span>  }</span></span>
<span><span>}</span></span>
<span></span></code></pre>
<h2 id="tuning-full-text-search"><a data-heading-link="" href="#tuning-full-text-search">Tuning full text search</a></h2>
<h3 id="weighing-tsvectors"><a data-heading-link="" href="#weighing-tsvectors">Weighing tsvectors</a></h3>
<p>Now, your actual documents might actually include some content and not just a title. Let’s go ahead and add a <code>body</code> column.</p>
<pre tabindex="0" data-language="sql"><code><span><span>create</span><span> table</span><span> documents</span><span> (</span></span>
<span><span>    id </span><span>bigint</span><span> primary key</span><span> generated</span><span> always</span><span> as</span><span> identity</span><span>,</span></span>
<span><span>    title </span><span>text</span><span>,</span></span>
<span><span>    body </span><span>text</span><span>, </span></span>
<span><span>    fts_title tsvector </span><span>generated</span><span> always</span><span> as</span><span> (to_tsvector(</span><span>'english'</span><span>, title)) stored, </span></span>
<span><span>    fts_body tsvector </span><span>generated</span><span> always</span><span> as</span><span> (to_tsvector(</span><span>'english'</span><span>, body)) stored, </span></span>
<span><span>    embedding vector(</span><span>1536</span><span>)</span></span>
<span><span>);</span></span>
<span></span></code></pre>
<p>As you can see, we’ll only keep a single embedding column even though we have multiple fields. Personally, I’ve found no significant performance in keeping multiple embeddings, but instead keeping both <code>title</code> and <code>body</code> in the same. After all, the <code>title</code> should™️ be a short representation of the body. I encourage you to experiment with this based on your needs.</p>
<p>Now, let’s look at the <code>fts_</code> columns. We expect the title to be short and keyword-rich, while the body will be longer and include more details. Thus we need to adjust how the full text search columns are weighed against each other. Read the docs to get a better understanding here: <a href="https://www.postgres.org/docs/current/textsearch-controls.html#TEXTSEARCH-RANKING" rel="nofollow" target="_blank">12.3.3. Ranking Search Results<span><img src="https://www.google.com/s2/favicons?domain=www.postgres.org&amp;sz=64"></span></a>. Here’s the tl;dr:</p>
<ul>
<li>Weights allow prioritizing words based on their location or importance in the document.</li>
<li>A-weight: Most important (e.g., title, headers). Default <code>1.0</code></li>
<li>B-weight: Important (e.g., beginning of document, abstract). Default <code>0.4</code></li>
<li>C-weight: Standard importance (e.g., main body text). Default <code>0.2</code></li>
<li>D-weight: Least important (e.g., footnotes, annotations). Default <code>0.1</code></li>
<li>Adjust weights to fine-tune relevance based on document structure and application needs.</li>
</ul>
<p>The title is given more weight than the body because it’s typically a concise representation of the document’s main topic. Users often scan titles first when searching, so matching keywords in the title are usually more relevant to the user’s intent than matches in the body text.</p>
<p>With this information, we can go ahead and update the indexes:</p>
<pre tabindex="0" data-language="sql"><code><span><span>create</span><span> table</span><span> documents</span><span> (</span></span>
<span><span>    id </span><span>bigint</span><span> primary key</span><span> generated</span><span> always</span><span> as</span><span> identity</span><span>,</span></span>
<span><span>    title </span><span>text</span><span>,</span></span>
<span><span>    body </span><span>text</span><span>,</span></span>
<span><span>    fts_title tsvector </span><span>generated</span><span> always</span><span> as</span><span> (setweight(to_tsvector(</span><span>'english'</span><span>, </span><span>coalesce</span><span>(title, </span><span>''</span><span>)), </span><span>'A'</span><span>)) stored, </span></span>
<span><span>    fts_body tsvector </span><span>generated</span><span> always</span><span> as</span><span> (setweight(to_tsvector(</span><span>'english'</span><span>, </span><span>coalesce</span><span>(body, </span><span>''</span><span>)), </span><span>'C'</span><span>)) stored, </span></span>
<span><span>    embedding vector(</span><span>1536</span><span>)</span></span>
<span><span>);</span></span>
<span></span></code></pre>
<p>This will make the <code>title</code> have a weight of <code>1.0</code> and <code>body</code> a weight of <code>0.2</code>.</p>
<p>Like before, we’ll add the new <code>fts_body</code> to the final query. I’ve also renamed the previous <code>full_text</code> to <code>fts_title</code>.</p>
<pre tabindex="0" data-language="sql"><code><span><span>...</span></span>
<span><span>fts_body </span><span>as</span><span> (</span></span>
<span><span>    select</span><span> id,</span></span>
<span><span>           ts_rank_cd(fts_body, websearch_to_tsquery($query_text)) </span><span>as</span><span> rank_score,</span></span>
<span><span>           row_number</span><span>() </span><span>over</span><span> (</span><span>order by</span><span> ts_rank_cd(fts_body, websearch_to_tsquery($query_text)) </span><span>desc</span><span>) </span><span>as</span><span> rank_ix</span></span>
<span><span>    from</span><span> documents</span></span>
<span><span>    where</span><span> fts_body @@ websearch_to_tsquery($query_text)</span></span>
<span><span>    order by</span><span> rank_ix</span></span>
<span><span>    limit</span><span> least</span><span>($match_count, </span><span>30</span><span>)</span></span>
<span><span>),</span></span>
<span><span>...</span></span>
<span></span></code></pre>
<p>And the combined query</p>
<pre tabindex="0" data-language="sql"><code><span><span>select</span></span>
<span><span>    documents.</span><span>*</span><span>,</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> fuzzy</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $fuzzy_weight </span><span>+</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> fts_title</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $fts_title_weight </span><span>+</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> fts_body</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $fts_body_weight </span><span>+</span></span>
<span><span>    coalesce</span><span>(</span><span>1</span><span>.</span><span>0</span><span> /</span><span> ($rrf_k </span><span>+</span><span> semantic</span><span>.</span><span>rank_ix</span><span>), </span><span>0</span><span>.</span><span>0</span><span>) </span><span>*</span><span> $semantic_weight </span><span>as</span><span> combined_rank,</span></span>
<span><span>    json_build_object(</span></span>
<span><span>        'fuzzy'</span><span>, json_build_object(</span><span>'rank_ix'</span><span>, </span><span>fuzzy</span><span>.</span><span>rank_ix</span><span>, </span><span>'sim_score'</span><span>, </span><span>fuzzy</span><span>.</span><span>sim_score</span><span>),</span></span>
<span><span>        'fts_title'</span><span>, json_build_object(</span><span>'rank_ix'</span><span>, </span><span>fts_title</span><span>.</span><span>rank_ix</span><span>, </span><span>'rank_score'</span><span>, </span><span>fts_title</span><span>.</span><span>rank_score</span><span>),</span></span>
<span><span>        'fts_body'</span><span>, json_build_object(</span><span>'rank_ix'</span><span>, </span><span>fts_body</span><span>.</span><span>rank_ix</span><span>, </span><span>'rank_score'</span><span>, </span><span>fts_body</span><span>.</span><span>rank_score</span><span>), </span></span>
<span><span>        'semantic'</span><span>, json_build_object(</span><span>'rank_ix'</span><span>, </span><span>semantic</span><span>.</span><span>rank_ix</span><span>, </span><span>'cosine_similarity'</span><span>, </span><span>semantic</span><span>.</span><span>cosine_similarity</span><span>)</span></span>
<span><span>    ) </span><span>as</span><span> debug_rankings</span></span>
<span><span>from</span><span> fuzzy</span></span>
<span><span>full outer join</span><span> fts_title </span><span>on</span><span> fuzzy</span><span>.</span><span>id</span><span> =</span><span> fts_title</span><span>.</span><span>id</span></span>
<span><span>full outer join</span><span> fts_body </span><span>on</span><span> coalesce</span><span>(</span><span>fuzzy</span><span>.</span><span>id</span><span>, </span><span>fts_title</span><span>.</span><span>id</span><span>) </span><span>=</span><span> fts_body</span><span>.</span><span>id</span></span>
<span><span>full outer join</span><span> semantic </span><span>on</span><span> coalesce</span><span>(</span><span>fuzzy</span><span>.</span><span>id</span><span>, </span><span>fts_title</span><span>.</span><span>id</span><span>, </span><span>fts_body</span><span>.</span><span>id</span><span>) </span><span>=</span><span> semantic</span><span>.</span><span>id</span></span>
<span><span>join</span><span> documents </span><span>on</span><span> coalesce</span><span>(</span><span>fuzzy</span><span>.</span><span>id</span><span>, </span><span>fts_title</span><span>.</span><span>id</span><span>, </span><span>fts_body</span><span>.</span><span>id</span><span>, </span><span>semantic</span><span>.</span><span>id</span><span>) </span><span>=</span><span> documents</span><span>.</span><span>id</span></span>
<span><span>order by</span><span> combined_rank </span><span>desc</span></span>
<span><span>limit</span><span> least</span><span>($match_count, </span><span>30</span><span>);</span></span>
<span></span></code></pre>
<h3 id="adjusting-for-length"><a data-heading-link="" href="#adjusting-for-length">Adjusting for length</a></h3>
<p>If you read the documentation for <code>ts_rank_cd</code> you saw that there’s a normalization parameter. If not, here it is:</p>
<blockquote>
<p>Both ranking functions take an integer <code>normalization</code> option that specifies whether and how a document’s length should impact its rank. The integer option controls several behaviors, so it is a bit mask: you can specify one or more behaviors using <code>|</code> (for example, <code>2|4</code>).</p>
</blockquote>
<p>We can use these various options to:</p>
<ul>
<li>Adjust for document length bias</li>
<li>Balance relevance across diverse document sets</li>
<li>Scale ranking results for consistent presentation</li>
</ul>
<p><img src="https://anyblockers.com/_astro/document-length-normalization.DS5tgXDF_Z155tVw.svg" alt="Document Length Normalization" width="800" height="400" loading="lazy" decoding="async"></p>













































<table><thead><tr><th>Option Value</th><th>When to Use</th><th>Use Case</th></tr></thead><tbody><tr><td>No normalization (<code>0</code>)</td><td>When you want raw ranking scores without adjustments</td><td>Comparing documents of similar length and structure</td></tr><tr><td>Log length normalization (<code>1</code>)</td><td>When you want to mildly reduce the impact of document length</td><td>Mixed-length documents where longer docs shouldn’t dominate</td></tr><tr><td>Length normalization (<code>2</code>)</td><td>When you want to strongly normalize by document length</td><td>Diverse document lengths where content density matters more than total matches</td></tr><tr><td>Harmonic mean distance (ts_rank_cd only) (<code>4</code>)</td><td>When you want to consider term proximity in ranking</td><td>Phrases or closely related terms are important in your search</td></tr><tr><td>Unique word normalization (<code>8</code>)</td><td>When you want to favor documents with more diverse vocabulary</td><td>Rewarding content richness over repetition</td></tr><tr><td>Log unique word normalization (<code>16</code>)</td><td>When you want to mildly reduce the impact of vocabulary diversity</td><td>Balancing between vocabulary richness and raw term frequency</td></tr><tr><td>Scaling to 0-1 range (<code>32</code>)</td><td>When you need a consistent score range for all queries</td><td>Displaying scores as percentages or progress bars</td></tr></tbody></table>
<p>Combine options using bitwise OR (<code>|</code>) for more nuanced normalization. For example:</p>
<p>Use <code>2|4</code> to normalize by both length and term proximity
Use <code>1|8</code> for a balanced approach considering both document length and vocabulary diversity</p>
<p>I’ve found good results with setting <code>0</code> (no normalization) for the title and <code>1</code> (logarithmic doc length) for the body. Again, I encourage you to experiment with different options to find the best fit for your use case.</p>
<h2 id="reranking-with-cross-encoder"><a data-heading-link="" href="#reranking-with-cross-encoder">Reranking with cross-encoder</a></h2>
<p>Many retrieval systems are two-step based. This means you’ll use a bi-directional encoder to retrieve the initial N results, then a cross-encoder to rank these against the search query.</p>
<p>The bi-encoder is fast, making it great for searching a multitude of documents. The cross-encoder is slower but more performant, making it great for reranking retrieved results.</p>
<p>Cross-encoders differ from bi-encoders in that they process the query and document together, allowing for more nuanced understanding of the relationship between them. This results in better ranking accuracy but at the cost of computation time and scalability. Here’s a simple diagram to illustrate the process:</p>
<svg aria-roledescription="flowchart-v2" role="graphics-document document" viewBox="-8 -8 785.375 215" style="max-width: 785.375px;" xmlns="http://www.w3.org/2000/svg" width="100%" id="mermaid-1"><g><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="6" viewBox="0 0 10 10" id="mermaid-1_flowchart-pointEnd"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" d="M 0 0 L 10 5 L 0 10 z"></path></marker><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="4.5" viewBox="0 0 10 10" id="mermaid-1_flowchart-pointStart"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" d="M 0 5 L 10 10 L 10 0 z"></path></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="11" viewBox="0 0 10 10" id="mermaid-1_flowchart-circleEnd"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" r="5" cy="5" cx="5"></circle></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="-1" viewBox="0 0 10 10" id="mermaid-1_flowchart-circleStart"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" r="5" cy="5" cx="5"></circle></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="12" viewBox="0 0 11 11" id="mermaid-1_flowchart-crossEnd"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" d="M 1,1 l 9,9 M 10,1 l -9,9"></path></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="-1" viewBox="0 0 11 11" id="mermaid-1_flowchart-crossStart"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" d="M 1,1 l 9,9 M 10,1 l -9,9"></path></marker><g><g></g><g><path marker-end="url(#mermaid-1_flowchart-pointEnd)" style="fill:none;" id="L-FTS-D1-0" d="M91.031,16.5L102.833,16.5C114.635,16.5,138.24,16.5,153.325,16.5C168.41,16.5,174.977,16.5,178.26,16.5L181.544,16.5"></path><path marker-end="url(#mermaid-1_flowchart-pointEnd)" style="fill:none;" id="L-SS-D2-0" d="M136.844,99.5L141.01,99.5C145.177,99.5,153.51,99.5,160.96,99.5C168.41,99.5,174.977,99.5,178.26,99.5L181.544,99.5"></path><path marker-end="url(#mermaid-1_flowchart-pointEnd)" style="fill:none;" id="L-Fuzzy-D3-0" d="M97.258,182.5L108.022,182.5C118.786,182.5,140.315,182.5,154.363,182.5C168.41,182.5,174.977,182.5,178.26,182.5L181.544,182.5"></path><path marker-end="url(#mermaid-1_flowchart-pointEnd)" style="fill:none;" id="L-D1-CE-0" d="M280.109,16.5L284.276,16.5C288.443,16.5,296.776,16.5,320.655,27.163C344.534,37.826,383.958,59.152,403.67,69.815L423.383,80.478"></path><path marker-end="url(#mermaid-1_flowchart-pointEnd)" style="fill:none;" id="L-D2-CE-0" d="M280.109,99.5L284.276,99.5C288.443,99.5,296.776,99.5,304.226,99.5C311.676,99.5,318.243,99.5,321.526,99.5L324.809,99.5"></path><path marker-end="url(#mermaid-1_flowchart-pointEnd)" style="fill:none;" id="L-D3-CE-0" d="M280.109,182.5L284.276,182.5C288.443,182.5,296.776,182.5,320.655,171.837C344.534,161.174,383.958,139.848,403.67,129.185L423.383,118.522"></path><path marker-end="url(#mermaid-1_flowchart-pointEnd)" style="fill:none;" id="L-CE-FD-0" d="M586.984,99.5L591.151,99.5C595.318,99.5,603.651,99.5,611.101,99.5C618.551,99.5,625.118,99.5,628.401,99.5L631.684,99.5"></path></g><g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g></g><g><g transform="translate(68.421875, 16.5)" data-id="FTS" data-node="true" id="flowchart-FTS-38"><rect height="33" width="45.21875" y="-16.5" x="-22.609375" ry="0" rx="0" style=""></rect><g transform="translate(-15.109375, -9)" style=""><rect></rect><foreignObject height="18" width="30.21875"><p><span>FTS</span></p></foreignObject></g></g><g transform="translate(233.4765625, 16.5)" data-id="D1" data-node="true" id="flowchart-D1-39"><rect height="33" width="93.265625" y="-16.5" x="-46.6328125" ry="0" rx="0" style=""></rect><g transform="translate(-39.1328125, -9)" style=""><rect></rect><foreignObject height="18" width="78.265625"><p><span>documents</span></p></foreignObject></g></g><g transform="translate(68.421875, 99.5)" data-id="SS" data-node="true" id="flowchart-SS-40"><rect height="33" width="136.84375" y="-16.5" x="-68.421875" ry="0" rx="0" style=""></rect><g transform="translate(-60.921875, -9)" style=""><rect></rect><foreignObject height="18" width="121.84375"><p><span>Semantic Search</span></p></foreignObject></g></g><g transform="translate(233.4765625, 99.5)" data-id="D2" data-node="true" id="flowchart-D2-41"><rect height="33" width="93.265625" y="-16.5" x="-46.6328125" ry="0" rx="0" style=""></rect><g transform="translate(-39.1328125, -9)" style=""><rect></rect><foreignObject height="18" width="78.265625"><p><span>documents</span></p></foreignObject></g></g><g transform="translate(68.421875, 182.5)" data-id="Fuzzy" data-node="true" id="flowchart-Fuzzy-42"><rect height="33" width="57.671875" y="-16.5" x="-28.8359375" ry="0" rx="0" style=""></rect><g transform="translate(-21.3359375, -9)" style=""><rect></rect><foreignObject height="18" width="42.671875"><p><span>Fuzzy</span></p></foreignObject></g></g><g transform="translate(233.4765625, 182.5)" data-id="D3" data-node="true" id="flowchart-D3-43"><rect height="33" width="93.265625" y="-16.5" x="-46.6328125" ry="0" rx="0" style=""></rect><g transform="translate(-39.1328125, -9)" style=""><rect></rect><foreignObject height="18" width="78.265625"><p><span>documents</span></p></foreignObject></g></g><g transform="translate(458.546875, 99.5)" data-id="CE" data-node="true" id="flowchart-CE-45"><rect height="33" width="256.875" y="-16.5" x="-128.4375" ry="0" rx="0" style=""></rect><g transform="translate(-120.9375, -9)" style=""><rect></rect><foreignObject height="18" width="241.875"><p><span>Rerank with Cross-encoder model</span></p></foreignObject></g></g><g transform="translate(703.1796875, 99.5)" data-id="FD" data-node="true" id="flowchart-FD-51"><rect height="33" width="132.390625" y="-16.5" x="-66.1953125" ry="0" rx="0" style=""></rect><g transform="translate(-58.6953125, -9)" style=""><rect></rect><foreignObject height="18" width="117.390625"><p><span>Final documents</span></p></foreignObject></g></g></g></g></g></svg>
<p>There are a bunch of different tools out there to do this. One of the best is <a href="https://cohere.com/blog/rerank-3" rel="nofollow" target="_blank">Cohere’s Rerank<span><img src="https://www.google.com/s2/favicons?domain=cohere.com&amp;sz=64"></span></a>. Another way is to <a href="https://cookbook.openai.com/examples/search_reranking_with_cross-encoders" rel="nofollow" target="_blank">build your own with GPT from OpenAI<span><img src="https://www.google.com/s2/favicons?domain=cookbook.openai.com&amp;sz=64"></span></a>.</p>
<h2 id="boosting-results-to-improve-ux"><a data-heading-link="" href="#boosting-results-to-improve-ux">Boosting results to improve UX</a></h2>
<p>To provide an even better user experience, you might want to boost certain columns depending on your use case. For example, in a knowledge search, you might want to boost search results that the user has interacted with. You also might want to boost recently changed results.</p>
<p>Boosting recent results or user-specific results can improve UX because it personalizes the search experience. Recent results are often more relevant, especially for time-sensitive information. User-specific boosts can surface content the user has previously found useful, making their search more efficient.</p>
<svg aria-roledescription="flowchart-v2" role="graphics-document document" viewBox="-8 -8 753.1875 232" style="max-width: 753.1875px;" xmlns="http://www.w3.org/2000/svg" width="100%" id="mermaid-2"><g><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="6" viewBox="0 0 10 10" id="mermaid-2_flowchart-pointEnd"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" d="M 0 0 L 10 5 L 0 10 z"></path></marker><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="4.5" viewBox="0 0 10 10" id="mermaid-2_flowchart-pointStart"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" d="M 0 5 L 10 10 L 10 0 z"></path></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="11" viewBox="0 0 10 10" id="mermaid-2_flowchart-circleEnd"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" r="5" cy="5" cx="5"></circle></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="-1" viewBox="0 0 10 10" id="mermaid-2_flowchart-circleStart"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" r="5" cy="5" cx="5"></circle></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="12" viewBox="0 0 11 11" id="mermaid-2_flowchart-crossEnd"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" d="M 1,1 l 9,9 M 10,1 l -9,9"></path></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="-1" viewBox="0 0 11 11" id="mermaid-2_flowchart-crossStart"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" d="M 1,1 l 9,9 M 10,1 l -9,9"></path></marker><g><g><g id="subGraph1"><rect height="83" width="737.1875" y="133" x="0" ry="0" rx="0" style=""></rect><g transform="translate(318.34375, 133)"><foreignObject height="18" width="100.5"><p><span>After Boosting</span></p></foreignObject></g></g><g id="subGraph0"><rect height="83" width="737.1875" y="0" x="0" ry="0" rx="0" style=""></rect><g transform="translate(311.6640625, 0)"><foreignObject height="18" width="113.859375"><p><span>Before Boosting</span></p></foreignObject></g></g></g><g><path marker-end="url(#mermaid-2_flowchart-pointEnd)" style="fill:none;" id="L-B1-A2-0" d="M225.328,58L225.328,62.167C225.328,66.333,225.328,74.667,225.328,83C225.328,91.333,225.328,99.667,225.328,108C225.328,116.333,225.328,124.667,225.328,132.117C225.328,139.567,225.328,146.133,225.328,149.417L225.328,152.7"></path><path marker-end="url(#mermaid-2_flowchart-pointEnd)" style="fill:none;" id="L-B2-A4-0" d="M511.414,58L511.414,62.167C511.414,66.333,511.414,74.667,511.414,83C511.414,91.333,511.414,99.667,511.414,108C511.414,116.333,511.414,124.667,511.414,132.117C511.414,139.567,511.414,146.133,511.414,149.417L511.414,152.7"></path><path marker-end="url(#mermaid-2_flowchart-pointEnd)" style="fill:none;" id="L-B3-A1-0" d="M82.07,58L82.07,62.167C82.07,66.333,82.07,74.667,82.07,83C82.07,91.333,82.07,99.667,82.07,108C82.07,116.333,82.07,124.667,82.07,132.117C82.07,139.567,82.07,146.133,82.07,149.417L82.07,152.7"></path><path marker-end="url(#mermaid-2_flowchart-pointEnd)" style="fill:none;" id="L-B4-A5-0" d="M655.117,58L655.117,62.167C655.117,66.333,655.117,74.667,655.117,83C655.117,91.333,655.117,99.667,655.117,108C655.117,116.333,655.117,124.667,655.117,132.117C655.117,139.567,655.117,146.133,655.117,149.417L655.117,152.7"></path><path marker-end="url(#mermaid-2_flowchart-pointEnd)" style="fill:none;" id="L-B5-A3-0" d="M368.148,58L368.148,62.167C368.148,66.333,368.148,74.667,368.148,83C368.148,91.333,368.148,99.667,368.148,108C368.148,116.333,368.148,124.667,368.148,132.117C368.148,139.567,368.148,146.133,368.148,149.417L368.148,152.7"></path></g><g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g><g><g transform="translate(0, 0)"><foreignObject height="0" width="0"></foreignObject></g></g></g><g><g transform="translate(82.0703125, 174.5)" data-id="A1" data-node="true" id="flowchart-A1-57"><rect height="33" width="94.140625" y="-16.5" x="-47.0703125" ry="0" rx="0" style="fill:#ff9999;stroke:#333;stroke-width:2px;"></rect><g transform="translate(-39.5703125, -9)" style=""><rect></rect><foreignObject height="18" width="79.140625"><p><span>1. Result C</span></p></foreignObject></g></g><g transform="translate(225.328125, 174.5)" data-id="A2" data-node="true" id="flowchart-A2-58"><rect height="33" width="92.375" y="-16.5" x="-46.1875" ry="0" rx="0" style=""></rect><g transform="translate(-38.6875, -9)" style=""><rect></rect><foreignObject height="18" width="77.375"><p><span>2. Result A</span></p></foreignObject></g></g><g transform="translate(368.1484375, 174.5)" data-id="A3" data-node="true" id="flowchart-A3-59"><rect height="33" width="93.265625" y="-16.5" x="-46.6328125" ry="0" rx="0" style="fill:#99ff99;stroke:#333;stroke-width:2px;"></rect><g transform="translate(-39.1328125, -9)" style=""><rect></rect><foreignObject height="18" width="78.265625"><p><span>3. Result E</span></p></foreignObject></g></g><g transform="translate(511.4140625, 174.5)" data-id="A4" data-node="true" id="flowchart-A4-60"><rect height="33" width="93.265625" y="-16.5" x="-46.6328125" ry="0" rx="0" style=""></rect><g transform="translate(-39.1328125, -9)" style=""><rect></rect><foreignObject height="18" width="78.265625"><p><span>4. Result B</span></p></foreignObject></g></g><g transform="translate(655.1171875, 174.5)" data-id="A5" data-node="true" id="flowchart-A5-61"><rect height="33" width="94.140625" y="-16.5" x="-47.0703125" ry="0" rx="0" style=""></rect><g transform="translate(-39.5703125, -9)" style=""><rect></rect><foreignObject height="18" width="79.140625"><p><span>5. Result D</span></p></foreignObject></g></g><g transform="translate(225.328125, 41.5)" data-id="B1" data-node="true" id="flowchart-B1-52"><rect height="33" width="92.375" y="-16.5" x="-46.1875" ry="0" rx="0" style=""></rect><g transform="translate(-38.6875, -9)" style=""><rect></rect><foreignObject height="18" width="77.375"><p><span>1. Result A</span></p></foreignObject></g></g><g transform="translate(511.4140625, 41.5)" data-id="B2" data-node="true" id="flowchart-B2-53"><rect height="33" width="93.265625" y="-16.5" x="-46.6328125" ry="0" rx="0" style=""></rect><g transform="translate(-39.1328125, -9)" style=""><rect></rect><foreignObject height="18" width="78.265625"><p><span>2. Result B</span></p></foreignObject></g></g><g transform="translate(82.0703125, 41.5)" data-id="B3" data-node="true" id="flowchart-B3-54"><rect height="33" width="94.140625" y="-16.5" x="-47.0703125" ry="0" rx="0" style="fill:#ff9999;stroke:#333;stroke-width:2px;"></rect><g transform="translate(-39.5703125, -9)" style=""><rect></rect><foreignObject height="18" width="79.140625"><p><span>3. Result C</span></p></foreignObject></g></g><g transform="translate(655.1171875, 41.5)" data-id="B4" data-node="true" id="flowchart-B4-55"><rect height="33" width="94.140625" y="-16.5" x="-47.0703125" ry="0" rx="0" style=""></rect><g transform="translate(-39.5703125, -9)" style=""><rect></rect><foreignObject height="18" width="79.140625"><p><span>4. Result D</span></p></foreignObject></g></g><g transform="translate(368.1484375, 41.5)" data-id="B5" data-node="true" id="flowchart-B5-56"><rect height="33" width="93.265625" y="-16.5" x="-46.6328125" ry="0" rx="0" style="fill:#99ff99;stroke:#333;stroke-width:2px;"></rect><g transform="translate(-39.1328125, -9)" style=""><rect></rect><foreignObject height="18" width="78.265625"><p><span>5. Result E</span></p></foreignObject></g></g></g></g></g></svg>
<p>Assuming we have <code>updated_at</code> and <code>updated_by</code> columns in our documents table, we could implement it like this:</p>
<pre tabindex="0" data-language="sql"><code><span><span>select</span></span>
<span><span>    ...</span></span>
<span><span>    -- Recency boost</span></span>
<span><span>    (</span><span>1</span><span> +</span><span> $recency_boost </span><span>*</span><span> (</span><span>1</span><span> -</span><span> extract(epoch </span><span>from</span><span> (</span><span>now</span><span>() </span><span>-</span><span> documents</span><span>.</span><span>updated_at</span><span>)) </span><span>/</span><span> extract(epoch </span><span>from</span><span> (</span><span>now</span><span>() </span><span>-</span><span> '2020-01-01'</span><span>::</span><span>timestamp</span><span>)))) </span><span>*</span></span>
<span><span>    -- User boost</span></span>
<span><span>    case</span><span> when</span><span> documents</span><span>.</span><span>updated_by</span><span> =</span><span> $current_user_id </span><span>then</span><span> (</span><span>1</span><span> +</span><span> $user_boost) </span><span>else</span><span> 1</span><span> end</span></span>
<span><span>    as</span><span> combined_rank,</span></span>
<span><span>    json_build_object(</span></span>
<span><span>        ...</span></span>
<span><span>        'recency_boost'</span><span>, (</span><span>1</span><span> -</span><span> extract(epoch </span><span>from</span><span> (</span><span>now</span><span>() </span><span>-</span><span> documents</span><span>.</span><span>updated_at</span><span>)) </span><span>/</span><span> extract(epoch </span><span>from</span><span> (</span><span>now</span><span>() </span><span>-</span><span> '2020-01-01'</span><span>::</span><span>timestamp</span><span>))),</span></span>
<span><span>        'user_boost'</span><span>, </span><span>case</span><span> when</span><span> documents</span><span>.</span><span>updated_by</span><span> =</span><span> $current_user_id </span><span>then</span><span> $user_boost </span><span>else</span><span> 0</span><span> end</span></span>
<span><span>    ) </span><span>as</span><span> debug_rankings</span></span>
<span></span></code></pre>
<h2 id="when-should-i-look-for-alternative-solutions"><a data-heading-link="" href="#when-should-i-look-for-alternative-solutions">When should I look for alternative solutions?</a></h2>
<p>While Postgres is a solid choice for many search scenarios, it’s not without limitations. The lack of advanced algorithms like BM25 can be felt when dealing with diverse document lengths. <del>Postgres’s reliance on TF-IDF for full-text search can struggle with very long documents and rare terms in large collections.</del></p>
<p><strong>Edit:</strong> Postgres actually doesn’t use TF-IDF for full-text search. Its built-in ranking functions (ts_rank and ts_rank_cd) primarily consider term frequency within individual documents and term proximity, but don’t take into account corpus-wide statistics. This approach can still struggle with very long documents and doesn’t inherently account for the rarity of terms across the entire collection.</p>
<p>Make sure to measure before you look into alternative solutions. Chances are, it might not be worth it.</p>
<h2 id="bonus-adding-bm25"><a data-heading-link="" href="#bonus-adding-bm25">Bonus: adding BM25</a></h2>
<p>Unlike Postgres’s FTS, BM25 considers corpus-wide statistics and document length normalization. Here are some of the reaons you might want to use it:</p>
<ul>
<li>Better handling of document length variations</li>
<li>Improved relevance for rare terms</li>
<li>Accounts for diminishing returns of term frequency</li>
<li>Industry standard in information retrieval</li>
</ul>
<p>And here are some extensions you can install go get BM25 going:</p>

<h2 id="conclusion"><a data-heading-link="" href="#conclusion">Conclusion</a></h2>
<p>We’ve covered a lot of ground in this post, from basic full-text search to advanced techniques like fuzzy matching, semantic search, and result boosting. By leveraging Postgres’s powerful features, you can create a robust and flexible search engine tailored to your specific needs.</p>
<p>Postgres might not be the first tool that comes to mind for search, but it gets you really far.</p>
<p>Remember, the key to a great search experience is continuous iteration and fine-tuning. Use the debugging techniques we discussed to understand how your search is performing, and don’t be afraid to adjust weights and parameters based on user feedback and behavior.</p>
<p>Let me know if I missed anything! :)</p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Defenders think in lists, attackers think in graphs (2015) (257 pts)]]></title>
            <link>https://github.com/JohnLaTwC/Shared/blob/master/Defenders%20think%20in%20lists.%20Attackers%20think%20in%20graphs.%20As%20long%20as%20this%20is%20true%2C%20attackers%20win.md</link>
            <guid>41342637</guid>
            <pubDate>Sat, 24 Aug 2024 23:12:18 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/JohnLaTwC/Shared/blob/master/Defenders%20think%20in%20lists.%20Attackers%20think%20in%20graphs.%20As%20long%20as%20this%20is%20true%2C%20attackers%20win.md">https://github.com/JohnLaTwC/Shared/blob/master/Defenders%20think%20in%20lists.%20Attackers%20think%20in%20graphs.%20As%20long%20as%20this%20is%20true%2C%20attackers%20win.md</a>, See on <a href="https://news.ycombinator.com/item?id=41342637">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
          <nav aria-label="Global">
            <ul>
                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      
      <div>
        <p>Actions</p><p>
        Automate any workflow
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;packages&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;packages_link_product_navbar&quot;}" href="https://github.com/features/packages">
      
      <div>
        <p>Packages</p><p>
        Host and manage packages
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_product_navbar&quot;}" href="https://github.com/features/security">
      
      <div>
        <p>Security</p><p>
        Find and fix vulnerabilities
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      
      <div>
        <p>Codespaces</p><p>
        Instant dev environments
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      
      <div>
        <p>GitHub Copilot</p><p>
        Write better code with AI
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      
      <div>
        <p>Code review</p><p>
        Manage code changes
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      
      <div>
        <p>Issues</p><p>
        Plan and track work
      </p></div>

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      
      <div>
        <p>Discussions</p><p>
        Collaborate outside of code
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>

                  <li>
      
      
</li>

                  <li>
      
      <div>
                <p><span id="resources-explore-heading">Explore</span></p><ul aria-labelledby="resources-explore-heading">
                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;white_papers_ebooks_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;white_papers_ebooks_webinars_link_resources_navbar&quot;}" href="https://resources.github.com/">
      White papers, Ebooks, Webinars

    
</a></li>

                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com/">
      Partners

    
</a></li>

            </ul>
          </div>
</li>


                <li>
      
      <div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="https://github.com/sponsors">
      
      <div>
        <p>GitHub Sponsors</p><p>
        Fund open source developers
      </p></div>

    
</a></li>

            </ul>
          </div>
          <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
        <p>The ReadME Project</p><p>
        GitHub community articles
      </p></div>

    
</a></li>

            </ul>
          </div>
          
      </div>
</li>


                <li>
      
      <div>
            <ul>
                <li>
  <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="https://github.com/enterprise">
      
      <div>
        <p>Enterprise platform</p><p>
        AI-powered developer platform
      </p></div>

    
</a></li>

            </ul>
          </div>
</li>


                <li>
    <a data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div>
                


<qbsearch-input data-scope="repo:JohnLaTwC/Shared" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="5NiWe0aMKQkND_QBMeLYEmdCeD6_coBfMne0UfJB1bja9MEUFuYbS_nPfBQeJS7iGjqraG2l4LNvClJvAVdxAA" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="JohnLaTwC/Shared" data-current-org="" data-current-owner="JohnLaTwC" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div data-modal-dialog-overlay="" data-action="click:qbsearch-input#searchInputContainerClicked">
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true">
      <h2 id="search-suggestions-dialog-header">Search code, repositories, users, issues, pull requests...</h2>
    
</modal-dialog></div>
  
  <div>
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="feedback-dialog-title">
        Provide feedback
      </h2>
        
    </p>
    
  </div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true">
    <div data-view-component="true">
    <p>
      <h2 id="custom-scopes-dialog-title">
        Saved searches
      </h2>
        <h2 id="custom-scopes-dialog-description">Use saved searches to filter your results more quickly</h2>
    </p>
    
  </div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        
      </scrollable-region>
      
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>

            

              <p><a href="https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=JohnLaTwC%2FShared" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/JohnLaTwC/Shared/blob/master/Defenders%20think%20in%20lists.%20Attackers%20think%20in%20graphs.%20As%20long%20as%20this%20is%20true%2C%20attackers%20win.md&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="3f3dda2851b3d3a072492541d46972a612d1567effd1a9f57e3a4187058321ec" data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/<user-name>/<repo-name>/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}">
                Sign up
              </a>
          
        </p></div>
      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[HNInternal: Ask HN: What are you working on (August 2024)? (412 pts)]]></title>
            <link>https://news.ycombinator.com/item?id=41342017</link>
            <guid>41342017</guid>
            <pubDate>Sat, 24 Aug 2024 22:00:34 GMT</pubDate>
            <description><![CDATA[<p>See on <a href="https://news.ycombinator.com/item?id=41342017">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <tbody><tr id="41343531"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343531" href="https://news.ycombinator.com/vote?id=41343531&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm getting to know the ins and outs of GitHub CoPilot, and exploring languages and technologies I've avoided. I'm hoping to get done with a usable Bitgrid Emulator[1] in Javascript/HTML so that I can let people play with the concept and get used to it. I've got stuff working in Pascal[2], but that's not something most people can deal with. I've also got a ton of other stuff up on GitHub that I should poke a bit.</p><p>I've spent a lot of time in analysis paralysis and this has given me the kick in the pants to get me going again.</p><p>As far as new ideas go, I've already spent time learning Verilog, and hope to get a chip design through the TinyTapeout[3] before too long.</p><p>[1] <a href="https://mikewarot.github.io/Bitgrid_C/bitgrid_sim.html" rel="nofollow">https://mikewarot.github.io/Bitgrid_C/bitgrid_sim.html</a></p><p>[2] <a href="https://github.com/mikewarot/Bitgrid">https://github.com/mikewarot/Bitgrid</a></p><p>[3] <a href="https://tinytapeout.com/" rel="nofollow">https://tinytapeout.com/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343538"><td></td></tr>
            <tr id="41343394"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343394" href="https://news.ycombinator.com/vote?id=41343394&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Making fingerboards. Little skateboards you can do tricks with. I'm always fingerboarding at work when I take a break from programming.</p><p>It's a ton of fun, especially writing Fusion 360 scripts to do all the parametric modeling of decks and molds. Then 3D printing molds with different parameters, pressing decks with veneer, making art for the decks, packaging, etc. It's an incredibly niche hobby but I've always found fingerboarding and making fingerboards to be infinitely creative.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343520"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343520" href="https://news.ycombinator.com/vote?id=41343520&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Do you have any ramps/rails/etc for your desk? That sounds like such a good way to give your hands a nice break between code sessions.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343471"><td></td></tr>
                  <tr id="41343107"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343107" href="https://news.ycombinator.com/vote?id=41343107&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I’m working on a collaborative ebook reading app. The idea is that you can create a reading group, invite people and then share comments and highlights and see each other’s reading progress.</p><p>It’s something I’ve been wanting for a while, for example to read a book with a group of friends or with a work team, but there’s lots of other possibilities including author reading parties, proofing and education. Got the basics of it working now, need to polish the UI and add the commenting and highlighting features.</p><p>I’m using Next.js and Supabase, neither of which I’ve used before so it’s been a fun but often frustrating process. Claude has been an amazing assistance, fixing my mistakes and countless type errors.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343417"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343417" href="https://news.ycombinator.com/vote?id=41343417&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Ooooo.... Idea! One thing I've always wanted is an "asynchronous" book group. Basically, some way to tie the questions and conversation to a page or chapter, and then you can follow along at your own speed. Just passing the idea along since I'll never do anything with it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343296"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343296" href="https://news.ycombinator.com/vote?id=41343296&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Hey man, it is an amazing idea. I have been thinking to build something similar.</p><p>I am building reading clubs for my custom library - on top of crypto tech, and in the process, I have experimented with several book reader tech. pdf.js, muPDF and some other tools, which one did you settle on?</p><p>My lib: <a href="https://datapond.earth/" rel="nofollow">https://datapond.earth</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343228"><td></td></tr>
                  <tr id="41343492"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343492" href="https://news.ycombinator.com/vote?id=41343492&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Making swim baits. I started carving and paints fishing lures during Covid. It’s easy to knock out something that looks like a lure, but it’s surprisingly nuanced to make something that behaves in the water as you want it to. Mass production is absolutely the correct way to go about this, but - you know - it keeps my hands busy in the evening and I’m improving my carving, airbrushing, weighting/buoyancy, etc with each one.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343526"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343526" href="https://news.ycombinator.com/vote?id=41343526&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I have a ton of respect for people who can craft beautiful and functional baits. I watch Nate Marling a lot on Youtube and it amazes me what he can do with a block of wood and some wire.</p><p>Do you fish your lures, or is making them just a hobby unto itself? If the former, what species are you targeting? I consider myself a bass angler, but I honestly haven't a. had much time to fish lately or b. had much luck catching bass when I <i>do</i> find time to fish.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41343489"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343489" href="https://news.ycombinator.com/vote?id=41343489&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I and a friend are working on Elixir Emporium [0], a single-player crafting RPG that uses layers of generative AI to create and inject new game data as you play.</p><p>It started out as just a prototype asking what happens if you task an LLM with generating crafting recipes for every combination of items in a game (which was already super fun), but it's exploded into all kinds of crafting, harvesting, and item manipulation systems that literally weren't possible in games just 5-10 years ago.</p><p>Now we're working on NPC simulations based on last year's Generative Agents: Interactive Simulacra of Human Behavior [1] paper. Dialogue and persistent memory are obvious, but we're also using the ReAct pattern [2] to give NPCs an influenceable decision loop that dictates what actions they take throughout each game day. And there's some other fun stuff like quest generation and using LLMs as a decision engine to determine if certain player actions complete these dynamic quests.</p><p>There's still a lot of work to do to make it feel more like a polished game, but we've been focused on the systems and getting them feeling great and I'm really excited to see the game come to life.</p><p>[0] <a href="https://store.steampowered.com/app/3039840/Elixir_Emporium/" rel="nofollow">https://store.steampowered.com/app/3039840/Elixir_Emporium/</a></p><p>[1] <a href="https://arxiv.org/abs/2304.03442" rel="nofollow">https://arxiv.org/abs/2304.03442</a></p><p>[2] <a href="https://react-lm.github.io/" rel="nofollow">https://react-lm.github.io/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342681"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342681" href="https://news.ycombinator.com/vote?id=41342681&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I’m a tech nerd rare coin &amp; currency dealer!  I took my two hobbies and combined them into a real business and I’m having the time of my life. Just launched a proper retail site here:</p><p><a href="https://www.rarity7.com/" rel="nofollow">https://www.rarity7.com/</a></p><p>About 50% of my days are spend doing the coin dealer stuff - hunting for inventory, buying collections/doing appraisals, going to coin shows and buying and selling in person, etc.</p><p>The other 50% I’m writing code and building out the tech stack for this business. I’ve written the whole backend for the retail site myself, which includes my own inventory management system, sync with eBay and other marketplaces, etc.</p><p>I’ve also built out a research tool which includes an ML price prediction engine engine (which sounds fancy but is really just a tabular regression model).</p><p>Backend is written in Crystal because I love the language and there’s nobody stopping me from using it :) Frontend is all Svelte and they’re glued together using a mini framework I wrote:</p><p><a href="https://github.com/noahlh/celestite">https://github.com/noahlh/celestite</a></p><p>I probably have 5 years worth of ideas I still want to build and I wish I could spend even more time building it all, but it’s super fun actually using it in the real live marketplace so I’d never give that up.</p><p>Happy to chat about this stuff with anyone who’s interested or vaguely interested in numismatics.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343385"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343385" href="https://news.ycombinator.com/vote?id=41343385&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>So let's say I have a few hundred silver dollars. Is this a tool to help me sort them, or does such a tool exist? Like take a picture and it identifies it, looks for common errors, and provides a base price estimate?</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343269"><td></td></tr>
            <tr id="41343439"><td></td></tr>
            <tr id="41342838"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342838" href="https://news.ycombinator.com/vote?id=41342838&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>This is great, my brother is a history buff and a few years ago I bought him a Hadrian coin for his birthday. I'll look through this and see if I can find something else he'd be interested in, holidays are coming up and I'm always looking for nice gifts.</p><p>EDIT: is there any way I could set up an alert for when you add some non-US currency into stock?</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343346"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343346" href="https://news.ycombinator.com/vote?id=41343346&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>wow this is super cool stuff. I see the similarities between currencies and trading cards.</p><p>seems like you guys also have grading services</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41343357"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343357" href="https://news.ycombinator.com/vote?id=41343357&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p><a href="https://bauble.studio/" rel="nofollow">https://bauble.studio/</a> is a lisp-based procedural 3D art playground that I hacked together a while ago. It's fun to play with, but it's a very limiting tool: you can do a lot to compose signed distance functions, but there's no way to control the rendering or do anything "custom" that the tool doesn't explicitly allow.</p><p>So lately I've been working on a "v2" that exposes a full superset of GLSL, so you can write arbitrary shaders -- even foregoing SDFs altogether -- in a high-level lisp language. The core "default" raymarcher is still there, but you can choose to ignore it and implement, say, volumetric rendering, while still using the provided SDF combinators if you want.</p><p>The new implementation is much more general and flexible, and it now supports things like 2D extrusions, mesh export for 3D printing, user-defined procedural noise functions... anything you can do in Shadertoy, you can now do in Bauble. One upcoming feature that I'm very excited about is custom uniforms and embedding in other webpages -- so you can write a blog post with interactive 3D visualizations, for example.</p><p>(Also as a fun coincidence: my first cast bronze Bauble arrived today! <a href="https://x.com/ianthehenry/status/1827461714524434883" rel="nofollow">https://x.com/ianthehenry/status/1827461714524434883</a>)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342932"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342932" href="https://news.ycombinator.com/vote?id=41342932&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Myself.</p><p>More specifically, my mental health. I'm a bit of a mess, and I'm not sure I'll be able to properly commit to any external endeavors until I'm feeling better inside.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343212"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343212" href="https://news.ycombinator.com/vote?id=41343212&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Kudos to you! Even just being more aware of your mental state is a step in the right direction. Reminds me I need to be more proactive in this area.</p><p>Dunno if it helps, but just know most of us are at least a bit of a mess. Life is messy. I once took two years off of regular work (we were fortunate to have enough savings to do it) and made two music albums, the first album based exclusively on hard things that either I or people very close to me went through.  The process of fleshing out the songs and lyrics was incredibly therapeutic for me.</p><p>Here’s a link to it in case you’re interested. I had a fraud issue with Spotify, but the album is up everywhere else. 
<a href="https://distrokid.com/hyperfollow/boudwin/ccCe/" rel="nofollow">https://distrokid.com/hyperfollow/boudwin/ccCe/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343197"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343197" href="https://news.ycombinator.com/vote?id=41343197&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Me too. I was in a very dark place for a long time until a couple months ago. My views on life and death haven't changed but I'm not actively rooting for my own death anymore, at least.</p><p>Embracing the solitude and the mindset that no one is coming to save me has sparked a bunch of motivation (out of spite) to improve myself. Started to workout regularly which has been a huge help for my mind and body. Starting to peel back layers of things that happened during childhood now.</p><p>Wish you the best of luck on your journey.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342965"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342965" href="https://news.ycombinator.com/vote?id=41342965&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Keep at it, let the time heal you, I’m rooting for you. I was, and still am, having mental health issues for many reasons. Some are permanent, some are not. I’ve recently begun to be able to engage with hobbies again after at least months, if not years. You’ll get there too, I am sure. I won’t give advice, just a friendly note :)</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343141"><td></td></tr>
                <tr id="41343181"><td></td></tr>
                        <tr id="41342492"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342492" href="https://news.ycombinator.com/vote?id=41342492&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Right now I'm mostly thinking about AI. Right this minute I'm sitting in a cafe reading a book on Multi-Agent Oriented Programming with a framework called JaCaMo[1], and later tonight when I get home I'll probably spend some time getting my Fuseki[2] server loaded with some base schemas (SKOS, FOAF, etc) as I slowly start working on getting things set up to explore some ideas around integrating symbolic logic with LLM's.</p><p>And I took my new quadcopter drone out and did some flying last night for the first time. As in, my first time flying a drone, ever. The results were... predictable. Let's just say, I bought a cheap (&lt; $100) drone for a reason. This thing <i>will</i> wind up destroyed. In less than an hour I managed to crash it into fences, walls, bushes, cars, dumpsters, the ground, an armadillo, Elvis Presley, a 1974 AMC Gremlin, and Nickelback. Well, more or less.</p><p>It brought to mind this famous scene[3] from the movie Days of Thunder:</p><p>Harry: I want you to go back out on that track and hit the pace car.</p><p>Cole: Hit the pace car?</p><p>Harry: Hit the pace car!</p><p>Cole: What for?</p><p>Harry: Because you hit every other god-damned thing out there and I want you to be perfect.</p><p>[1]: <a href="https://jacamo-lang.github.io/" rel="nofollow">https://jacamo-lang.github.io/</a></p><p>[2]: <a href="https://jena.apache.org/documentation/fuseki2/" rel="nofollow">https://jena.apache.org/documentation/fuseki2/</a></p><p>[3]: <a href="https://www.youtube.com/watch?v=xll0VOsiE84" rel="nofollow">https://www.youtube.com/watch?v=xll0VOsiE84</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342818"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342818" href="https://news.ycombinator.com/vote?id=41342818&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>lol'd at the 1974 AMC,</p><p>As an experienced drone pilot - if you can, DJI is unbelievable at stopping you from crashing. Start there to get the feel of it (and more importantly not get frustrated and give up)</p><p>If you want to learn more freestyle without assistance, i can't recommend enough getting a simulator on your computer and crashing a digital drone a million times first. It's much cheaper. I think there is a lot out there now but i used Liftoff for many hours before i tried to fly a proper drone</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343503"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343503" href="https://news.ycombinator.com/vote?id=41343503&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Yeah, I'm flying a super basic drone with none of the built-in crash avoidance / navigation / etc. stuff for now. I'll upgrade to something fancier later, but for now I'm totally satisfied with something I can crash repeatedly and when it breaks, throw it away (or salvage parts from it to build another drone).</p><p>I'll look into the simulator thing. I didn't even realize that drone simulators were a "thing" so I had not gone looking for anything like that.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343101"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343101" href="https://news.ycombinator.com/vote?id=41343101&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I was wondering. I have a DJI and it is stupid simple to fly. I’ve yet to crash mine but I don’t fly it a ton. I’m certainly not trying to fly it through complex paths like an open doorway and into a house or something.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41343279"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343279" href="https://news.ycombinator.com/vote?id=41343279&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I’m working on a screen play called DRONE RACER about kids who race human sized quadcopters through the subways of NYC. It’s a mix of Hackers and Fast &amp; The Furious.</p><p>Using a lot of off the shelf AI and pushing the limits of what’s possible.</p><p>Really fun.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343537"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343537" href="https://news.ycombinator.com/vote?id=41343537&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p><i>It’s a mix of Hackers and Fast &amp; The Furious.</i></p><p>If HN supported images in replies, I'd totally be posting that "shut up and take my money" meme right now. As it is, I'll just say "that sounds awesome, and I hope it sees the light of day eventually."</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41343404"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343404" href="https://news.ycombinator.com/vote?id=41343404&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>When the hype was focused on chatbots, I joined a startup that built one focused on ecommerce. It turned into a useful product that actually help real customers.</p><p>Looking back, there wasn't any material to actually build a useful chat agent that resolved real-world problems. So I'm writing the guide that I wish I had when getting started.</p><p>I'll publish it on github and post here as more progress is made. I've created three parts. Part One is a non dev focused which explains how each of the moving parts work, what is Ai and what isn't. Part two gets technical and explains the tech stack. Part three is a bonus section that looks at how Ai assistants like google and Siri work and can be improved.</p><p>The working title is Automated Agents.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342968"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342968" href="https://news.ycombinator.com/vote?id=41342968&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>The recent relicensing of Redis to a non-open-source license bothered many in the community. But the groundwork for the relicensing was laid much earlier. I've been working on relicensing monitor to track various projects attributes that can affect the ease of relicensing a project.</p><p><a href="https://alexsci.com/relicensing-monitor/" rel="nofollow">https://alexsci.com/relicensing-monitor/</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343206"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343206" href="https://news.ycombinator.com/vote?id=41343206&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I also think CLAs are eerie and goes against the open source spirit, I don't think CLA alone puts a project in "high risk". I'm not sure about the FAANG open source projects that are used as libraries (Guava, React, ...). These projects fundamentally don't jeopardize these company's businesses, and serve to increase the developer goodwill amongst the engineers. Nobody can predict the future but I can't imagine these projects becoming relicensed.</p><p>More plausible scenario is them becoming an abandonware, but even in those cases the community can carry the torch.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343102"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343102" href="https://news.ycombinator.com/vote?id=41343102&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Is there a specific reason that Firefox is considered low-risk for a rug pull? In my view, Mozilla doesn't seem the same as it once was but maybe there are specific reasons the open-sourceness isn't in jeopardy.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343469"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343469" href="https://news.ycombinator.com/vote?id=41343469&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I imagine Firefox would die instantly if it moved to a restrictive license. It would be too easy to simply switch to a popular fork, and Firefox's userbase are the type that would be compelled to follow through with it. Even ignoring FOSS principles reasons, most folks are browser-savvy enough to understand the implications of such news -- their favorite browser is about to kill itself so they have to pick another one.
Also consider that Firefox would no longer be the default browser in most Linux distros, and likely prohibited from official package repositories entirely.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41343376"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343376" href="https://news.ycombinator.com/vote?id=41343376&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>My truck.  It has sentimental value as my first car.  I just gone done with the water pump and I just solved my steering "pop" issue.  Next up is a new steering wheel as the old one is gross and sticky.  While I'm at it I'm going to install a new turn signal/wiper control lever and fix the turn signal auto-off spring.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343397"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343397" href="https://news.ycombinator.com/vote?id=41343397&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Cool! What's yours? I just found a 1984 Chevy Scottsdale for my kid. It was my first vehicle and now he'll have one too.</p><p>It's a sneaky way for me to limit his time tearing around the countryside with friends, because all his money will go towards parts and (if I get my way and put in a much larger engine) gas.</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41342537"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342537" href="https://news.ycombinator.com/vote?id=41342537&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>A new CI/CD platform. Local CLI (run without git push), remote debugger, automatic content-based caching, DAG-based definition, and dynamic tasks. It’s taken a lot of work to build it, but I’m really excited about how well it’s working. <a href="https://rwx.com/mint" rel="nofollow">https://rwx.com/mint</a></p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342738"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342738" href="https://news.ycombinator.com/vote?id=41342738&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I haven't tried this yet, but I wanted to say I think there's a lot of potential in this space. There's so much friction with the current popular solutions...and yet it's so hard to justify trying some of the newer and less popular ones.</p><p>I wish you luck because there are a lot of good ideas in here. Running locally and remote debugger are the most exciting to me.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342544"><td></td></tr>
                  <tr id="41342996"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342996" href="https://news.ycombinator.com/vote?id=41342996&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>For the past year, I've been working on a CSS Masterclass: <a href="https://cssmasterclass.io/" rel="nofollow">https://cssmasterclass.io/</a></p><p>It's going to have online text courses with interactive examples and coding exercises, but I'm also in the process of adding video tutorials. These videos will be of 2 types: ones where I teach you the theory, and ones where we actually build a project from scratch.</p><p>I feel like CSS has always been something that was made to look harder than it actually is. In its essence, the syntax is very simple, and the vocabulary is quite basic. There are only a few things you need to know to be able to code an attractive and flexible responsive web page. For comparison, I find programming backends much more difficult.</p><p>Even though I've been working on this project for almost a year, I decided that next month will be the day I finally launch it.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342998"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342998" href="https://news.ycombinator.com/vote?id=41342998&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on a plasmid (vector) editor called PlasCAD, for molecular biology. I'm doing it mainly as a learning project, and trying to fill in the gaps where I found limitations in existing software. As of last week, it's in a state where the main features are there. I'm going to now focus on polish, and adding specialty features. Would appreciate any and all feedback!</p><p>It lets you view and edit plasmid sequences, features, and primers, and has some tools like automatic primer creation for cloning, primer QC, protein sequence viewing, and interop with common file formats.</p><p><a href="https://github.com/David-OConnor/plascad">https://github.com/David-OConnor/plascad</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343431"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343431" href="https://news.ycombinator.com/vote?id=41343431&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm currently working on an open-source project called checkd, which is a Cloudflare service worker designed to handle device authentication and state management using Apple's DeviceCheck API. The project includes an example iOS app and a worker implementation to demonstrate how the service can be integrated into a mobile app environment.</p><p><a href="https://github.com/willswire/checkd">https://github.com/willswire/checkd</a></p><p>This project has been an exciting way to explore better securing my iOS apps. I'm looking forward to refining it further and would love to hear any feedback or suggestions from the community!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343205"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343205" href="https://news.ycombinator.com/vote?id=41343205&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on Relay [0] --  a collaboration plugin for Obsidian using yjs to provide live cursors and folder sync.</p><p>I'm currently thinking about how to robustly Integrate different edit sources like iCloud, obsidian sync, git, and yjs updates. I think it could be cool to create a crdt persistence format that can live alongside markdown files (like note.md + note.md.crdt) to support edit history tracking from multiple users and their devices.</p><p>[0] <a href="https://youtu.be/Ol6zDF5vrZo" rel="nofollow">https://youtu.be/Ol6zDF5vrZo</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343463"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343463" href="https://news.ycombinator.com/vote?id=41343463&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Working on a game that parents of young gamers can play together without the child being frustrated or the parent being bored :)</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342903"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342903" href="https://news.ycombinator.com/vote?id=41342903&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I recently bought a used Seadoo and discovered the dirty little secret of personal watercraft that they don't want you to know.  Unlike cars with their standardized ODB2 ports, those aren't a requirement for PWCs.  And the diagnostic scanner hardware/software costs hundreds or thousands of dollars.  Major affront to the right to repair, so I'm ending up doing some CANbus hacking.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343129"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343129" href="https://news.ycombinator.com/vote?id=41343129&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>That’s kinda surprising. In Polaris ATV’s they seem to have this built into the interface of the machine itself so you can read the codes on its LCD. I don’t know how complex they are but I assumed they were a bit more open than OBD-II instead of less.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343514"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343514" href="https://news.ycombinator.com/vote?id=41343514&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I've never seen an LCD screen in an ATV; my neighbor repairs small engines and stuff like riding lawnmowers and ATVs - i hang out from time to time and he's said more times than i can count "i got no idea what's wrong with it, probably a wiring issue somewhere i gotta track down" or somesuch. Some of the machines he's repairing cost upwards of $40,000 so i'm not sure it's a price thing.</p><p>My point is, i'm sure he would have mentioned how great or how awful such a debug console was, at least once, in the decade i've known him.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41343517"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343517" href="https://news.ycombinator.com/vote?id=41343517&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I noticed my 2.5 year old niece likes zooming into photos of bugs on her mom's phone. I'm making her a little "game" where she can flip over rocks and find different bugs and other weird surprises.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343215"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343215" href="https://news.ycombinator.com/vote?id=41343215&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Secondary applications for med school - once your initial single app gets processed, every school (out of the 20+ you apply to) wants multiple essays from you. The process of preparing for and applying to med school is a nightmare and consumed the last two years of my life. I've had a lot of really cool life experiences because of it though, learned so much about medicine, and done some actual good. But I just want to get in this cycle and be done with endless essay writing.</p><p>I've been working on and off on building an app for learning chest x-ray interpretation, but that's shelved until I finish applications.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343478"><td></td></tr>
            <tr id="41343480"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343480" href="https://news.ycombinator.com/vote?id=41343480&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on a web scraper to assist myself and a friend in booking courts for our sports activities. It helps book the courts when they are released at 12am. This means we can get back to sleeping at reasonable times. We have a long term booking, but don't always require two courts.</p><p>On other things, I've been playing with rustlang. Looking to build something with it.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343192"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343192" href="https://news.ycombinator.com/vote?id=41343192&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I’ve been building a personal finance app that runs fully in the browser (using the automerge crdt and sqlite) for over a year now at <a href="https://tender.run/" rel="nofollow">https://tender.run</a>.</p><p>Recently I’ve been taking more of being able to flexibly run sql against this data, and this past week I’ve been working with d3 to make fancy sankey graphs to show income/expense flows. Quick preview here: <a href="https://demo.tender.run/reports/sankey" rel="nofollow">https://demo.tender.run/reports/sankey</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342678"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342678" href="https://news.ycombinator.com/vote?id=41342678&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I recently created a custom 220gsm pre-washed cotton fabric by twisting thrice a 60s yarn (60/3 Ne) into 20s before knitting. It could never be commercially viable so released something similar.</p><p>Essentially combining the softness of fine count cotton with the weight and durability of a heavier garment.</p><p><a href="https://www.marchtee.com/" rel="nofollow">https://www.marchtee.com/</a></p><p>Also a lot of ERP, warehouse, UI work and fun with Cursor.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342870"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342870" href="https://news.ycombinator.com/vote?id=41342870&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I've bought a lot of different T-shirts and I'm always interested in trying to find a better (more durable; more fashionable; more comfortable) one. My current favorites are the Buck Mason Field Spec t-shirts <a href="https://www.buckmason.com/collections/mens-tees" rel="nofollow">https://www.buckmason.com/collections/mens-tees</a> — could you explain how your shirts might compare? I'm willing to buy one just to try it out, but since you're the owner, figure I might as well ask you for more information — especially why you created a custom cotton fabric.</p><p>One thing I like a lot about Buck Mason is that their T-shirts are made in America from American-grown cotton, are any of your T-shirts made in America?</p><p>EDIT: just ordered a variety of your shirts, looking forward to trying them out. Very easy checkout experience!</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343121"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343121" href="https://news.ycombinator.com/vote?id=41343121&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Thanks for the order!</p><p>Buck Mason makes great tees. Our flagship tees use 100% American-grown Supima Cotton and are similar in weight to their classic Pima ones.</p><p>The Heavy Crew is closer to their Field Tee— ours is likely not as heavy but softer and more durable due to twisting two fine cotton yarns into one before knitting. They’re made in our own facility in Southern India.</p><p>I’ve been refining our fabrics for nearly ten years to get the best fit and feel, sticking with cotton for its comfort. More on our fabrics here: <a href="https://www.marchtee.com/us/difference" rel="nofollow">https://www.marchtee.com/us/difference</a></p><p>Thanks for commenting on the checkout! We’re gradually rolling out stateside, so any feedback is welcome—just reply to the order email anytime.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41343456"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343456" href="https://news.ycombinator.com/vote?id=41343456&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>A VR game. Still in the concept phase though. It'll be free as it's only a hobby project. It might never materialise but it doesn't matter. Most of the reward is in the process and the learning opportunities.</p><p>For work I'm working on AI implementation. Because the vendor does all the technical goodness I'm kinda bored. It's also quite a crap solution IMO and we're kinda forced to be all positive about it because the vendor is closely watching and they have a lot of buyin from the top.</p><p>I set up a local LLM server too just to feel like I'm actually doing something.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343395"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343395" href="https://news.ycombinator.com/vote?id=41343395&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm working on writing a sort of code and data playground from scratch - with currently only CodeMirror, ProseMirror, and some icons as dependencies - so that everything in it can be edited live. Everything is web components with the shadow DOM. It is sandboxed both as a whole and at the notebook level. The overall sandboxing uses a Content Security Policy that allows inspecting the URL for following a link, to enable using untrusted code (from humans or an AI) and private data without it easily being leaked. I've built a resizable split view, draggable tabs with multiple panes, and a color picker. It's a few dozen Markdown files with code in fenced code blocks and a Deno and Docker-based build process. There is a hybrid notebook/playground editor with the fenced code blocks changed into links that open the files in tabs. It's open source and at <a href="https://ristretto.codeberg.page/" rel="nofollow">https://ristretto.codeberg.page/</a></p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343028"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343028" href="https://news.ycombinator.com/vote?id=41343028&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm a tech exec who misses their physics roots. In my spare time I'm interviewing "materials manufacturers" to come up with a viable startup idea. I'm hoping to build a company that leverages simulation and ML to accelerate material discovery.</p><p>Keeping key bits of the idea to myself. If this admittedly vague idea excites you let's find some time to talk.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343333"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343333" href="https://news.ycombinator.com/vote?id=41343333&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I am working on an open book Library and a "new" D-Licence.</p><p>It is an experiment for the exploration of the free aspect of blockchain storage, where the book library is now permanently hosted on the blockchain, and it's content voted upon by its members.</p><p>The licence is based on creative commons, and enforces that the data is decentralized and doesn't need any account, or wallet, to use.</p><p>There is also the creation of a new label, the D-Safe label, for a safe experience across generations.</p><p>A fun side project - which I have been working on for several years now - rewriting it fully already 10 times - and been restructuring my mental health around it.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343016"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343016" href="https://news.ycombinator.com/vote?id=41343016&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Working on a convoluted app devoted choosing a baby name for your new child... but the underlying library is open source, based on public domain data:</p><p><a href="https://github.com/jonroig/usBabyNames.js">https://github.com/jonroig/usBabyNames.js</a></p><p>We're engineers, we want to make data-driven decisions about what we name our children. My app won't necessarily help you choose a name, per se, but it can assist in eliminating a lot of possible names, giving you a much smaller set of choose from, each of which you can research more. So... like filter by name origin, length, popularity, etc..</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343210"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343210" href="https://news.ycombinator.com/vote?id=41343210&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I was actually playing around those files today. I know this will be a typical HN comment and I'm sorry but, if it takes you an hour to load that data into sqlite, you're probably doing something very wrong.</p><pre><code>  $ sqlite3 x.db 'create table foo(a,b,c)'

  $ time for year in {1880..2023}; do
      sqlite3 x.db '.import yob'$year'.txt foo --csv';
    done

  real    0m1.359s
  user    0m1.013s
  sys     0m0.323s

  $ sqlite3 x.db 'select count(*) from foo'
  2117219
</code></pre><p>
(Numbers are from Linux/tmpfs/i9-12900k)</p><p>Obviously that needs tweaked to store the year in a column, but it shouldn't run for more than a few seconds. Those csv files are the furthest thing from "big data".</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343286"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343286" href="https://news.ycombinator.com/vote?id=41343286&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Right on. Outta curiosity, whatcha up to with the name data?</p><p>Fair. I'm sure there are waaaay more efficient ways to load that into the db. That said, it's one of those things - like, where do I wanna spend my time -- sorting that out, something I only gotta do once a year and I can basically push "go" and walk away -- or something else. It's not like I gotta keep turning the crank.</p><p>... and, of course, PRs are welcome :)</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41343110"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343110" href="https://news.ycombinator.com/vote?id=41343110&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Experimenting applying Meta's V-JEPA [0] architecture for representation learning to chess. One of the challenges is that validating if the model is learning useful dynamics of the game, so I'm using it as an excuse to learn some reinforcement learning by using the representations generated by the JEPA model to approximate useful Q-values [1]. This method currently has no search so I'm planning on comparing with this paper [2] which achieves GM level chess without any search. Honestly, Im unsure if the full pipeline is stable enough to even converge, but it's fun experimenting. I'm bad at chess so I really want to make a bot that challenges the best bots on lichess.</p><p>[0]: <a href="https://ai.meta.com/research/publications/revisiting-feature-prediction-for-learning-visual-representations-from-video/" rel="nofollow">https://ai.meta.com/research/publications/revisiting-feature...</a>
[1]: <a href="https://en.wikipedia.org/wiki/Q-learning" rel="nofollow">https://en.wikipedia.org/wiki/Q-learning</a>
[2]: <a href="https://arxiv.org/abs/2402.04494" rel="nofollow">https://arxiv.org/abs/2402.04494</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343420"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343420" href="https://news.ycombinator.com/vote?id=41343420&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on a small website for finding restaurants and breweries when you're traveling. It currently has 4 year of Great American Beer Fest winners and 3 years of James Beard nominees and winners.</p><p>It's very alpha at this point with no styling. I'm also working on getting addresses, websites, and instagram links gathered and added. Plus collapsing down the entries, so a place with multiple awards only shows up once, with all of its awards. Right now it's just 1 results per award.</p><p>I'm currently road-tripping through New England and it helped find the amazing bakery Norimoto.</p><p><a href="https://nomnominees.com/" rel="nofollow">https://nomnominees.com/</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343525"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343525" href="https://news.ycombinator.com/vote?id=41343525&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I was going to point out the Samoan Cookhouse[0] - "the last cookhouse in the west!" but they've been closed for renovations for over a year. They'd been in pretty much continuous operation for over 115 years when they shut it down.</p><p>I hope they open back up, that place was a treasure.</p><p>[NUL] <a href="https://www.samoacookhouse.net/" rel="nofollow">https://www.samoacookhouse.net/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343515"><td></td></tr>
                  <tr id="41343179"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343179" href="https://news.ycombinator.com/vote?id=41343179&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Parallel streaming video ingestion of live events, chunking up the video, sending it to Gemini Pro to get get the context/narrative/transcription/sentiment, and alerting for various things.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343373"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343373" href="https://news.ycombinator.com/vote?id=41343373&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Aside from bog-standard machine learning for work purposes -- novels!  (Because I apparently can't restrict myself to just one.)</p><p>You can see some of my world-noodling about aliens that don't need to breathe at: <a href="https://rznicolet.com/" rel="nofollow">https://rznicolet.com</a></p><p>I've been plotting a series of hard sci-fi novels entirely from the point of view of very not-humanoid aliens.  In this case, hard SF = all real physics except for FTL.  First manuscript complete.  Humans not included in the main series, except as passing footnotes.  Let's just say that when I originally started, the pandemic had me feeling a touch misanthropic.  We'll see when/how I actually publish these.</p><p>I write fantasy stuff, too, though since the blog is relatively new, I haven't started adding that in yet.  I'm currently wrapping a sequel to a finished fantasy work (again, publication approach TBD) before switching back to relatively hard sci-fi.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343213"><td></td></tr>
            <tr id="41343462"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343462" href="https://news.ycombinator.com/vote?id=41343462&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm working on converting a jukebox to use a raspberry pi. I want to keep using the numberpad to pick the tracks and none of the existing solutions that i've found seem to do that. I don't have any experience with python and very little with linux so it has been an experience.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342440"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342440" href="https://news.ycombinator.com/vote?id=41342440&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I moved to doing programming for some post production companies and I am working on a couple of patches for ffmpeg.</p><p>First time writing C and the task has been both daunting and rewarding, I am mostly working hls enc/dec and learning about av has been a ton of fun!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342977"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342977" href="https://news.ycombinator.com/vote?id=41342977&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Working on Pulselyre, a touch-focused Windows app for producing electronic music live. It doesn't output audio on its own, but it lets you configure various virtual "instruments" on screen that can send MIDI note and control messages to other MIDI devices or VSTs configured to receive MIDI messages. You can record notes and events for each instrument and then loop them over a configured number of beats. Also has some other features to make creating music easier, like saving/loading note sequences, an arpeggiator, receiving input from external MIDI controllers/keyboards, and some other stuff. I've been meaning to record a demo video, but I'm not actually very good at playing or making music myself, so I haven't come up with anything presentable yet. I'm also not really married to the name, but it works for now...</p><p><a href="https://www.pulselyre.com/" rel="nofollow">https://www.pulselyre.com</a></p><p>It's built using C# and WPF, and a related project I work on is an open source MVVM framework called UpbeatUI for making WPF apps that behave vaguely like mobile apps. It's for apps that have a main bottom layer and modal popups that float above and can be closed by clicking/touching the background. Pulselyre uses UpbeatUI, and I actually originally extracted UpbeatUI from a much older version of Pulselyre.</p><p><a href="https://github.com/Pulselyre/UpbeatUI">https://github.com/Pulselyre/UpbeatUI</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343494"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343494" href="https://news.ycombinator.com/vote?id=41343494&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>A desktop app for analyzing Node.js heap dumps. I've had to hunt down some for work and I feel like the tooling could be improved.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343257"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343257" href="https://news.ycombinator.com/vote?id=41343257&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I've been working on a site that helps you find in-person work in NYC that is actually convenient: <a href="https://walkablework.com/" rel="nofollow">https://walkablework.com</a></p><p>I recently left a startup I had cofounded after a few years because we were a remote team and I came to the conclusion that we weren't going to be successful without working together in person. I wanted to make this site to help people like me use location as an early filter to find good companies and teams to work with. Let me know if you have any feedback!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343410"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343410" href="https://news.ycombinator.com/vote?id=41343410&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Doing my book tour. Speaking at conferences and tech user groups, trying to reach folks interested in self-hosting.</p><p>Also working on my homelab. Recently got DocuSeal, changedetection.io, and Actual Budget running.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343309"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343309" href="https://news.ycombinator.com/vote?id=41343309&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I've been having a lot of fun building a digital garden for my WIP notes into my personal website: <a href="https://mxstbr.com/notes/digital-garden" rel="nofollow">https://mxstbr.com/notes/digital-garden</a></p><p>My quests (goals) with this digital garden are:</p><p>1. Publish more than I did when I just had space for essays, which hopefully leads to…</p><p>2. Getting more input from people on my ideas</p><p>3. And have fun futzing with my digital garden technically</p><p>So far, so good!</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343303"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343303" href="https://news.ycombinator.com/vote?id=41343303&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Currently I'm working on file compression program in Rust. Nothing too fancy, it just use common algorithms (LZ77, LZ78, etc.)</p><p>The only difference here is that the program will switch on the fly between different algorithms depending on which one that can compress file smaller.</p><p>It can compress 1 GB file (enwik9) down to around 230 MB. Pretty good I guess for something that I worked in my spare time.</p><p>I'm not publishing it yet, since I'm still experimenting with it a lot.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343348"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343348" href="https://news.ycombinator.com/vote?id=41343348&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>An app for easing house management - HomeHero (<a href="https://homehero.pro/" rel="nofollow">https://HomeHero.pro</a>). Primarily inventory oriented towards easier finds, location hierarchy and related tasks.
Currently only web, android and Linux as there's been little interest from Apple and Windows side</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343407"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343407" href="https://news.ycombinator.com/vote?id=41343407&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm trying to make it easier to run clubs, associations &amp; organizations with a platform called embolt.app[1].</p><p>We're offering online memberships, event management, and a member database packed with features. Membership management is a crowded space, but it's also a low-tech space with lots of sleeping giants not willing to iterate on their product.</p><p>It's been a really fun project so far and even more rewarding to see clubs using embolt for their daily operations.</p><p>[1] <a href="https://embolt.app/" rel="nofollow">https://embolt.app</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342491"><td></td></tr>
                <tr id="41342656"><td></td></tr>
                  <tr id="41343438"><td></td></tr>
            <tr id="41342536"><td></td></tr>
            <tr id="41343021"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343021" href="https://news.ycombinator.com/vote?id=41343021&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>These days, I've been working on a small tool to run GUIX as an unprivileged user, so that you can use GUIX profiles as a dev environment builder. I didn’t do any market research, but AFAIK there are similar tools using Nix. Honestly, this is just a toy project for fun. I had GUIX on one hand and Zig on the other, so I figured, why not try something new using both?</p><p>Why not Nix? I just don’t like the Nix language. Plus, it seems like they ended up reinventing part of Lisp with their Flakes, which made me even more convinced in using GUIX. The GUIX folks didn't disappoint me, as they utilized the full power of Scheme to design a (internal) DSL that is clean and almost reads like JSON/YAML. I feel quite confident that it’s a better language for building devenvs for most people. The only downside is that it can get really verbose, but, hey, at least you have full control.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343080"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343080" href="https://news.ycombinator.com/vote?id=41343080&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>For the past few weeks I have been working on Enhance [0], a SaaS to help game developers easily add leaderboards, friendlists, store players' data, in-app currency store and purchases, and marketing tools such as email list and website builder and hosting.</p><p>I am almost done with the landing page and don't think I'll put much more into it, and will continue working on the API itself. But I still plan on adding a playable game into the 3D scene just for the sake of it and to learn. But so far I'm struggling at projecting a 3D camera render to a texture inside an already existing 3D context.</p><p>[0] <a href="https://the-project-e609e.web.app/" rel="nofollow">https://the-project-e609e.web.app/</a> (temporary domain for development)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343507"><td></td></tr>
            <tr id="41343448"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343448" href="https://news.ycombinator.com/vote?id=41343448&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I've been working a lot of some games in Python and Panda3D. I want to make somethingusing the joy cons as motion controls. Also been looking into stackless Python for a text based multiplayer game I'm working on.</p><p>I need to update my website at some point its been a while.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342957"><td></td></tr>
            <tr id="41343485"><td></td></tr>
            <tr id="41343027"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343027" href="https://news.ycombinator.com/vote?id=41343027&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I have one that I'm making open source, as a digital montage system.. think of the "memories" feature on Google photos or iCloud.</p><p>I basically want that to be open and free. I'll have an app to easily create albums, and have the ability to connect to any storage or montage service you like. You could even make your own app connect to your own storage and montage service, so it can be completely diy. I have a few write-ups but I'm transferring it to notion at the moment so I won't link it just yet.</p><p>My other idea is a "bill hamper / consolidation" service, that I'm doing for my sister. She pays me a flat fee each week and I pay all of her bills for her. Gives her peace of mind and allows her to save some money without stressing on paying random bills</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343329"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343329" href="https://news.ycombinator.com/vote?id=41343329&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I've been working on 2 projects:</p><p>Insnare: <a href="https://www.insnare.net/" rel="nofollow">https://www.insnare.net/</a></p><p>A head-hunting/recruitment application to search companies and people based on their skills and experience. Currently focused on Australian market.</p><p>It's also for people who are looking for jobs. The goal there is to help to find good companies which have high (or low) concentrations of people with certain skills/attributes.</p><p>Saasufy: <a href="https://saasufy.com/" rel="nofollow">https://saasufy.com/</a></p><p>A no-code/low-code platform for building apps without code. Insnare is built with and runs on Saasufy. This freed me up from having to write back end code for Insnare and made the front end code very small.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342946"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342946" href="https://news.ycombinator.com/vote?id=41342946&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>API tool to automate all the stuff Postman makes painful: <a href="https://callosum.dev/" rel="nofollow">https://callosum.dev</a></p><p>Spec generation from request logs, automatic schema generation and validation, test generation (eventually), totally offline, no accounts or cloud sync necessary!</p><p>Been taking longer than I hoped but should be released soon (next week or two)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343001"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343001" href="https://news.ycombinator.com/vote?id=41343001&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I’m working on a tool called Together Gift It. Together Gift It makes managing group gift events like Christmas easier. I’m making it because my family was sending an insane amount of group texts during the holidays, and it was getting ridiculous. My favorite one was when someone included the gift recipient in the group text about what gift we were getting for the recipient.</p><p>Together Gift It solves the problem just the way you’d think: with AI.</p><p>Just kidding. It solves the problem by keeping everything in one place. No more group texts! You can have private or shared gift lists, and there are some AI features like gift idea collaboration and product search. But the AI stuff is still a work in progress.</p><p>I’m grateful for any constructive feedback.</p><p><a href="https://www.togethergiftit.com/" rel="nofollow">https://www.togethergiftit.com/</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343351"><td></td></tr>
                  <tr id="41342979"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342979" href="https://news.ycombinator.com/vote?id=41342979&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p><a href="https://keenwrite.com/" rel="nofollow">https://keenwrite.com/</a></p><p>Finished a feature to convert Markdown's fenced divs nested within blockquotes into the following XHTML:</p><pre><code>    &lt;blockquote&gt;
    &lt;div class="name"&gt; ... &lt;/div&gt;
    &lt;/blockquote&gt;
</code></pre><p>
In my novel (see profile), there are stories within the story as well as simultaneous actions. I wanted to typeset simultaneous events set within a sub-story. Using Markdown, a natural way to do this would be:</p><pre><code>    &gt; ::: simul
    &gt; Simultaneous section 1.
    &gt; :::
    &gt;
    &gt; ::: simul
    &gt; Simultaneous section 2.
    &gt; :::
</code></pre><p>
Sample output:</p><p><a href="https://i.ibb.co/R90vZpD/simultaneous.png" rel="nofollow">https://i.ibb.co/R90vZpD/simultaneous.png</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342836"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342836" href="https://news.ycombinator.com/vote?id=41342836&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I have been reading the Reinforcement Learning textbook for the past three years religiously- didn’t get the concepts clear until this week, made it past Chapter 3 finally. The excellent YT lectures by David Silver and Emma Brunskill have been helpful but it took me a long time to ‘get it’.</p><p>Next, I will try to build something using RL next but try not to use the Gym/Farama stuff to force myself to learn this from scratch.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342924"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342924" href="https://news.ycombinator.com/vote?id=41342924&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I had surgery for a torn meniscus repair. I’m on the couch for a least another month.</p><p>I’m using this precious expanded free time to compose music, my primary form of artistic expression.</p><p>Software-wise, I’m on a platform team for a large company. I’m making some performance enhancements to our http client, and a plug-n-play library for app devs to easily integrate LLMs in their products.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342543"><td></td></tr>
                <tr id="41343165"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343165" href="https://news.ycombinator.com/vote?id=41343165&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>performance tanked once I started to dig and the screen got dark, FPS returned to normal once I was fully above ground</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41343405"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343405" href="https://news.ycombinator.com/vote?id=41343405&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>The ARC-AGI challenge / Arc Prize. It helps me enjoy programming even after becoming PM. I got a bit rusty on structural induction for trees, it’s now all fresh again.
After playing with it a bit I am now convinced a A* on the right kind of AST structure will be sufficient to make a significant breakthrough in the scores</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343384"><td></td></tr>
            <tr id="41342356"><td></td></tr>
            <tr id="41343502"><td></td></tr>
            <tr id="41343380"><td></td></tr>
            <tr id="41342910"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342910" href="https://news.ycombinator.com/vote?id=41342910&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>A firewall for SMS.</p><p>Scams usually start with messages. Predominantly SMS/email sent with links.</p><p>ML models exist to determine this, but we are prototyping using <i>Gemma2 2b</i> to utilise its natural language understanding to see if a better firewall could be built, one which users can talk to.</p><p>It has been surprisingly easy to get started on this project: <a href="https://ai.google.dev/edge/mediapipe/solutions/genai/llm_inference" rel="nofollow">https://ai.google.dev/edge/mediapipe/solutions/genai/llm_inf...</a></p><p>We want to subsequently build a firewall for Calls, too; but that's a more challenging problem given its dynamic and <i>online</i> / realtime nature.</p><p>Hope to integrate these two features in our existing <i>network firewall</i> open source app.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343319"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343319" href="https://news.ycombinator.com/vote?id=41343319&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>How can I configure my phone to use it? I thought SMSes come straight from a carrier and there is not much you can do outside of your messenger app.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41343430"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343430" href="https://news.ycombinator.com/vote?id=41343430&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm actually creating a new web framework/library.  I know.  I know.  Yet another one.  I got sufficiently excited about the technology recently that I've dived head first into making one.  Stay tuned.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343290"><td></td></tr>
            <tr id="41343312"><td></td></tr>
            <tr id="41343398"><td></td></tr>
            <tr id="41342650"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342650" href="https://news.ycombinator.com/vote?id=41342650&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I am currently working on a custom markup language called atex. It's syntax reminds of latex syntax, but with @ instead \ as a special character (very similar to the Lout language, if anyone remembers it). Also, the atex language hasn't any predefined commands. Instead, all commands are defined via schema specified in a separate YAML file. Schema defines commands that can be used and means of "rendering" those commands to different targets (HTML, Tex, Typst, whatever...)</p><p>Just today, I finished first working version of the new compiler (<a href="https://github.com/ubavic/mint">https://github.com/ubavic/mint</a>). It is written in Go, and there are lot of things on the TODO list, but it works :)</p><p>This is actually the second compiler for the atex. The first one was written in Haskell and compiled fixed document schema. I used it for writing a book on Haskell (<a href="https://github.com/ubavic/programming-in-haskell">https://github.com/ubavic/programming-in-haskell</a>).</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342541"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342541" href="https://news.ycombinator.com/vote?id=41342541&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I am building a belt tension meter to attach my z-belt idlers to on my voron 2.4.</p><p>I'm still contemplating what I want the final form to look like, but currently it's a 5 kg load cell and a floating idler and an rp2040 reading values via hx711.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342693"><td></td></tr>
                  <tr id="41343493"><td></td></tr>
            <tr id="41343317"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343317" href="https://news.ycombinator.com/vote?id=41343317&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>We have been working on AI agents for sales and marketing. Our focus is in deep customer research instead of at scale marketing or spray and pray motion of outbound emails.</p><p>Our purpose is modeled to give sales and marketing skills to non-sales people. Just like how Canva gave design powers to non-design people.</p><p>We believe everyone has to have the skill to sell and market themselves or their product. Yet the only trend that does not change is understanding your customer/prospect.</p><p>AI agents help with this.</p><p>Check us out: godmodehq.com</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343066"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343066" href="https://news.ycombinator.com/vote?id=41343066&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>i'm working on rainfrog, a database management terminal ui for postgres.</p><p>the goal is to be a lightweight alternative to pgadmin/dbeaver. it has vim-like keybindings, shortcuts to preview tables, and session history.</p><p>it only supports postgres at the moment, but sqlite and mysql support are on the roadmap.</p><p><a href="https://github.com/achristmascarl/rainfrog">https://github.com/achristmascarl/rainfrog</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343399"><td></td></tr>
            <tr id="41343088"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343088" href="https://news.ycombinator.com/vote?id=41343088&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I am working on a zero trust proposal for location permission on mobile platforms: <a href="https://github.com/itissid/privyloci">https://github.com/itissid/privyloci</a></p><p>It's a demo of an idea. It could be an app too, but I'd much rather it be a CoreOS service that is user controlled.</p><p>Looking for organizational and privacy first support soon.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343183"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343183" href="https://news.ycombinator.com/vote?id=41343183&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Cool, i recall microG doing this. but they were hamstrung by the mozilla decision to shut down its wifi based location positioning.</p><p>I don't thing its easy building that and without that accurate poaitioning is hard imo...</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41343285"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343285" href="https://news.ycombinator.com/vote?id=41343285&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Chillin - Next-Gen AI Video &amp; Motion Editor, I'm working on the online video editor, <a href="https://chillin.online/" rel="nofollow">https://chillin.online</a>. 
Chillin has a significant advantage over its competitors(veed.io, clipchamp, capcut online), eg it supports mobile devices, offers full keyframe support, no watermark high-resolution video exports, and supports vector motions. 
So I feel like I am changing the world through this work.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343416"><td></td></tr>
            <tr id="41343343"><td></td></tr>
                <tr id="41343436"><td></td></tr>
                  <tr id="41342478"><td></td></tr>
            <tr id="41343465"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343465" href="https://news.ycombinator.com/vote?id=41343465&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>A .NET MAUI travel app that uses GTFS data to present transport info to users and also includes interactive 3D graphics.
 Not on Play Store yet because the app is too big, still figuring out how to solve that.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343119"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343119" href="https://news.ycombinator.com/vote?id=41343119&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on a platform for recording and managing user acceptance tests for software projects. I am trying to build it out slowly but in the open at <a href="https://github.com/golang-malawi/qatarina">https://github.com/golang-malawi/qatarina</a></p><p>Besides building the ideas I have in mind around how UAT could be improved for both devs and clients (users). My other goal is to encourage more Malawians to consider Go as a programming language for shipping solutions in, my Go evangelism has been working slowly but I think people need to see something they can appreciate to get more people onboard.</p><p>Also working on a personal finance app in Flutter for young Africans, but that's not public yet :)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343117"><td></td></tr>
            <tr id="41342829"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342829" href="https://news.ycombinator.com/vote?id=41342829&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on Devlog — <a href="https://dev.log.xyz/" rel="nofollow">https://dev.log.xyz</a> — software that I hope will help teams work better by making it more obvious who is doing what. It should help answer questions like "what did Sarah do last week?" or "who worked on frontend performance in the last year?" It's very much in alpha-stage, more a tech demo than a product, and I'm not sure if it will actually succeed. My cofounder just bailed on me but I'm going to keep trying to make it happen. Dogfooding it has made me a better engineer — I write better and clearer PRs — and as a former Senior Engineering Manager, I know it would save me time if I were still managing a larger team. But the setup is onerous (you have to connect your Github so it can analyze your PRs) and the value prop is more vitamin than painkiller unless your team is somewhat disfunctional, and no one likes to admit their team is disfunctional.</p><p>Happy to talk more about this with anyone. If you're at all interested in "software to make your team run better" I'd really love to hear what you're having trouble with and how your team runs, maybe I can figure out a way to help you, even if it's not at all related to what I've built already.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342971"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342971" href="https://news.ycombinator.com/vote?id=41342971&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Does it only work on PRs, or does it look at git history as well? Do you have plans to expand the knowledge it has access to?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343000"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343000" href="https://news.ycombinator.com/vote?id=41343000&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Right now it only looks at Github PRs, particularly the descriptions and titles (although I'm also experimenting with the code diff itself), for these reasons:</p><p>- Most teams that I'd sell to use Github PRs to write code.</p><p>- Looking at PRs, the "common unit of change" of most teams, lets Devlog work for teams regardless of how they end up merging in changes (merge commits vs squash vs rebase... doesn't matter because the PR is what is reviewed and submitted)</p><p>- I believe that part of being a great engineer is learning how to describe (a) what your code does, (b) why you're making the change, and the PR title+description is where we as an industry expect you to communicate this information.</p><p>- A commit history filled with great PR titles+descriptions is extremely valuable for your team and only becomes more valuable over time, so building tools that analyze this and incentivize you to do a better job of writing good titles+descriptions is good for your whole team.</p><p>I'm extremely open to looking at different sources of information (Linear/Jira/Github tickets; the diff itself; ???) if it improves the product. What were you thinking it should look at?</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41342892"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342892" href="https://news.ycombinator.com/vote?id=41342892&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>A marketplace for github repos: <a href="https://gitsell.dev/" rel="nofollow">https://gitsell.dev</a></p><p>You can even buy the app itself on it. It’s going to be my starter for all other projects too, so I’m adding all the common CRUD app features. Also it aims to be lowest cost possible, which is free for now. I try not to tie it to specific technologies when possible to make it as easy as possible to switch providers in the future.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342986"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342986" href="https://news.ycombinator.com/vote?id=41342986&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Suggestion: have a way to buy as a guest and provide an SSH public key to access the repo.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343099"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343099" href="https://news.ycombinator.com/vote?id=41343099&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Thanks for the suggestion. May I ask the intent behind this feature? Is it to preserve privacy or just convenience with your workflow?</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41342929"><td></td></tr>
                <tr id="41343015"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343015" href="https://news.ycombinator.com/vote?id=41343015&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Read-only makes it so a buyer can’t push to main or modify the repo configuration. So to stop someone from paying to “grief” it in the worst case, and just to stop buyers from making changes the owner didn’t sign off on in more typical cases. They can still raise issues and submit PRs, to my knowledge.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343084"><td></td></tr>
                <tr id="41343145"><td><table>  <tbody><tr>    <td indent="4"><img src="https://news.ycombinator.com/s.gif" height="1" width="160"></td><td>
      <center><a id="up_41343145" href="https://news.ycombinator.com/vote?id=41343145&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Yes it’s intended for private repos. As it stands you could add a public repo but there wouldn’t be much point unless you’re using it as a way to accept donations, though I think GitHub Sponsors is more apt for that. Typically when you add someone to a private repo, they get full write access.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343220"><td></td></tr>
                                          <tr id="41342857"><td></td></tr>
            <tr id="41342467"><td></td></tr>
            <tr id="41342750"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342750" href="https://news.ycombinator.com/vote?id=41342750&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I've found that filing out job applications is rather boring and takes a lot of my time for just a few applications. That's why I'm creating an AI tool to rewrite resumes and automate the jobs application process. I previously created a scraping tool for Glassdoor and LinkedIn, so this a natural next step. List of features:</p><p>*    Analyzes candidate information</p><p>*    Examines job descriptions</p><p>*    Generates unique CVs and cover letters for each job</p><p>*    Answers specific questions that recruiters ask</p><p>*    Automatically applies to jobs</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343158"><td></td></tr>
                  <tr id="41342605"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342605" href="https://news.ycombinator.com/vote?id=41342605&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Open source presenter software. The idea is anything you want to show on screen, all can be controlled through a single page. Useful for any events like concert, conference, camps, etc. You can also use it for digital signage.</p><p>Very early stage right now but I hope to release alpha soon. I'm already using it privately right now but there's a lot to do to make it user friendly.</p><p><a href="https://github.com/Vija02/TheOpenPresenter">https://github.com/Vija02/TheOpenPresenter</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343263"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343263" href="https://news.ycombinator.com/vote?id=41343263&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Essentially paying down (with time and money) maintenance debt on house and property after semi-retiring. I'll get back into doing some "real" work in the fall. Seems to be a pretty common pattern.</p><p>I got lazy during COVID but stuff seemed hard to get done and I wasn't really in the mood to try harder.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343305"><td></td></tr>
                  <tr id="41342529"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342529" href="https://news.ycombinator.com/vote?id=41342529&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I had this realization that, sometimes, people on my team are doing the same tasks in different ways, resulting each of them taking different amount of time. In certain scenarios, there is an optimal way of doing things, and I don't even know about it. Trying to test out if current AI-models are solid enough to do comparisons from a screen recording, or just general suggestions for improving white-collar workflows. I could see an eventual platform that could be built out of it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342554"><td></td></tr>
                <tr id="41342666"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41342666" href="https://news.ycombinator.com/vote?id=41342666&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>It's possible they aren't talking about code at all.</p><p>"This team member, and this other team member are both filing a particular kind of report but are doing so in very different ways, is one of them more effecient?"</p><p>I like it. Seems like there could be lots of ways to automate the creation of SOP for many businesses. I do wonder how high level of tasks it could pick up on. Though maybe that gets better with a bigger context window.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342739"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_41342739" href="https://news.ycombinator.com/vote?id=41342739&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>That's fair. Assumption on my part. Hence couched in "is it possible..." weasel words.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342735"><td><table>  <tbody><tr>    <td indent="3"><img src="https://news.ycombinator.com/s.gif" height="1" width="120"></td><td>
      <center><a id="up_41342735" href="https://news.ycombinator.com/vote?id=41342735&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>This is exactly it! I'm sure I do a lot of things slower than others as well, and simply never came across an "alternative, but faster" method.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41342618"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41342618" href="https://news.ycombinator.com/vote?id=41342618&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Hm, if you mean software design patterns, then not exactly. It's probably harder to detect in just coding world, but the easiest one I can think of in our realm "checking current CPU usage of X service". In my current company, there are quite a few ways - logging into AWS -&gt; switching to production environment -&gt; going to ECS -&gt; Looking up the service -&gt; Clicking on metrics, or opening DataDog -&gt; Dashboards -&gt; Service Name.</p><p>I understand it's very reductive and simplified, but for every task there are alternative ways to reach the goal, and from my historical experience, everyone does everything differently. Some things can be optimized significantly, if others just knew about the possibilities.</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41342821"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342821" href="https://news.ycombinator.com/vote?id=41342821&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I decided to write more. Just redid my website to be more of a blog, and am committing to publishing every Friday at 9am.</p><p>Posts in draft:</p><p>- "The next evolution of my product studio"</p><p>- "With AI, data isn't evil any more"</p><p>- "The AI mullet strategy"</p><p>- "COGS analysis on AI products"</p><p>- "Two-tier tech companies"</p><p><a href="https://contraption.co/" rel="nofollow">https://contraption.co</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343151"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343151" href="https://news.ycombinator.com/vote?id=41343151&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Well, it's a shameless promotion but I'm working on my UI/UX course. I make it with NuxtJS, so it's a custom platform.</p><p>The key idea is that I'll try explain UI/UX by redesigning a big application (with old UI and poor UX), combining theory with real-world practice.</p><p><a href="https://doing-design-right.com/" rel="nofollow">https://doing-design-right.com/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342651"><td></td></tr>
            <tr id="41342468"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342468" href="https://news.ycombinator.com/vote?id=41342468&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Building more Amazon scraper websites. Working on a framework to minimize the effort of creating them, and currently testing to see if I can automate most of the process with Anthropic’s Sonnet.</p><p>The most recent site is <a href="https://computerdisplayprices.com/" rel="nofollow">https://computerdisplayprices.com</a></p><p>When I’m done, I’m probably going to make a blog post or two just talking through the automation I figured out so far. LLMs are amazing force multipliers.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342586"><td></td></tr>
                <tr id="41342672"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41342672" href="https://news.ycombinator.com/vote?id=41342672&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Nope, just selenium and pyautogui. The priority is to fly under the radar, rather than efficiency; for that I needed lower-level control. There's a bunch of other stuff I did to improve the anonymity, but to download I just open selenium at the url, wait for it to load, then use pyautogui to type 'ctrl-s' and type in the save directory.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41342976"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342976" href="https://news.ycombinator.com/vote?id=41342976&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm building a keyboard-driven editor for designing UI. You could think of it as a weird bastard child of Vim and Webflow. I've been tinkering with it for a while in private, but I'd like to shift gears and start working on it publicly.</p><p>The editor itself isn't available yet, but I've got a Github readme that explains the concept a bit more: <a href="https://github.com/matry/editor">https://github.com/matry/editor</a></p><p>Eventually I'll do a ShowHN, once I get a stable version that I feel comfortable demoing.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343314"><td></td></tr>
            <tr id="41343244"><td></td></tr>
            <tr id="41342930"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342930" href="https://news.ycombinator.com/vote?id=41342930&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I’m building a door. I find that mortises (my frame is mortise and tenon, the tenons were easy on a table saw) are much harder to create if you don’t have a proper plunge router. I’m using some chisels and it works fine but I have eight mortises to make and I’ve finished 1.5 in about the same number of hours. I don’t want to buy a plunge router, because I’m unemployed at the moment, but it would finish the job in minutes. I guess I’ll go get to chiseling! Next door I make will use half laps, so I can use the table saw for both ends of the joinery.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343237"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343237" href="https://news.ycombinator.com/vote?id=41343237&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Drupal interface for interacting and managing ArcGIS Online services, layers, and tables for people who understand GIS but aren't GIS experts to build reports that query across potentially unrelated services.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343133"><td></td></tr>
            <tr id="41343077"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343077" href="https://news.ycombinator.com/vote?id=41343077&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>A NES emulator in Typescript targeting the browser. I've been using the Messenger emulator with cycle-accurate emulation to hone it. This stems from my interest in low-level machine code and understanding how computers work. I want to eventually write my own virtual machine and create a functional programming language on top of it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342862"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342862" href="https://news.ycombinator.com/vote?id=41342862&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>A text-yourself productivity app called tetr. I have always been messaging myself notes and thoughts on Signal and wanted something that would extend this habit to a funky productivity app and also do more advanced stuff like reminders, habits, mood tracking, etc.</p><p>Been working on this for nearly 2 years now and it’s been cool seeing people use it daily, some definitely a lot more than I do. I still feel like it’s not even close to its full potential; infinite more things to add but most often a joy for me to work on.</p><p><a href="https://tetr.app/" rel="nofollow">https://tetr.app/</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343092"><td></td></tr>
                  <tr id="41342506"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342506" href="https://news.ycombinator.com/vote?id=41342506&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm writing a new property-testing library for TypeScript. [1]</p><p>I wanted a way to define new Arbitraries that's easier than working with .map(), .chain(), .oneOf(), and other combinators that require you to think in terms of sets. It has those combinators, but you can also write code to randomly generate one value at a time. It uses an approach to shrinking that's inspired by Hypothesis.</p><p>Along the way, I ended up adding a Domain subclass, which also does validation like Zod. Not sure where I'm going with that, but it's also useful for generating unique keys.</p><p>(The documentation isn't done and doesn't explain what's interesting about it. Caveat: it's Deno-only, and will probably stay that way unless someone wants to help.)</p><p>[1] <a href="https://jsr.io/@skybrian/repeat-test" rel="nofollow">https://jsr.io/@skybrian/repeat-test</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342730"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342730" href="https://news.ycombinator.com/vote?id=41342730&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>A database for my digital life. A place where to store semi-structured data and blobs, everything from phone numbers to my browser history, mail to photo and yes, also notes with a tagging system.</p><p>The primary feature that I'm implementing p2p synchronization (similar to syncthing, although the prototype use tailscale); append-only storage for easy backup and an "api" for easy integration/synchronization with external sources like RSS feed for example, all working offline.</p><p>Right now I'm using various software to manage my digital life (Zotero, Keepass, Syncthing) but i want to consolidate since I'm having trouble keeping all properly synced and backed)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343039"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343039" href="https://news.ycombinator.com/vote?id=41343039&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Outside of working hours I’m developing a podcast hosting platform called Soapbox[0]. I had started my own podcast with my college friends and rolled my own RSS feed and site with AstroJS[1]. Then realized I could offer the service to others. Thanks to modern web APIs I’m going to pursue an in-browser recording studio with WebRTC and then in-browser basic audio editing. I’m very excited because it’s my first side project I’m trying to turn into a business (I opened an LLC and everything). I’m gratified because it’s very different work than my day job in fintech. I’m also offering internships to my college’s CS students and mentoring through that as well which is very fulfilling (I’m a recent grad).</p><p>[0] <a href="https://soapbox.host/" rel="nofollow">https://soapbox.host/</a>
[1] <a href="https://wednesdayatninepm.com/" rel="nofollow">https://wednesdayatninepm.com/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343130"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343130" href="https://news.ycombinator.com/vote?id=41343130&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Working on generating zsh tab autocompletion for my CLI framework. I'm finding it difficult because zsh makes completion surprisingly complicated and the zsh docs have a lot more descriptions than examples. Other CLI frameworks all seem to approach this differently.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343298"><td></td></tr>
                <tr id="41343349"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343349" href="https://news.ycombinator.com/vote?id=41343349&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>It seems like they all have DIFFERENT autocomplete scripts, some of which subshell out to the tool being completed to generate further completions.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41342413"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342413" href="https://news.ycombinator.com/vote?id=41342413&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I am trying to get better at trading so I thought it would be nice chance to work on my coding skills. I wondered if financial indicators actually makes money for a given period.</p><p><a href="https://indicatorinsights.co/" rel="nofollow">https://indicatorinsights.co</a></p><p>Made it with React, Vite, firebase via Typescript. It’s a really different world for sure.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342948"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342948" href="https://news.ycombinator.com/vote?id=41342948&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Your MACD seems to be inverse. It suggests a buy when it should be selling and vice versa.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41343095"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343095" href="https://news.ycombinator.com/vote?id=41343095&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>After the recent NCAA settlement, college athletic departments will (in the next year) be able to distribute as much as $22M+ to student athletes — aka revenue sharing</p><p>We’re building the tech that General Managers need to manage their roster, valuate players, construct contracts, and pay players.</p><p>Basically Moneyball-as-a-Service</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342919"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342919" href="https://news.ycombinator.com/vote?id=41342919&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I am currently working on building a lending platform. My goal is to both run it as a product loaning money to businesses and sell the software as a service to other investors as well. Very early phase, talking to a few friends who are currently in this line of work. I have a couple decades of experience myself but as an engineer and leader, not as a product or business owner, so if you have advice or ideas, please respond here, I would love to hear from you.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343318"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343318" href="https://news.ycombinator.com/vote?id=41343318&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm working on updating the <a href="https://yavaca.com/" rel="nofollow">https://yavaca.com</a> site including the backend written in golang. It is for users to publish out-of-office (OOO) plans so they can unplug while on vacation.  Great for maintaining a healthy work-life balance. Having fun with the golang part.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342972"><td></td></tr>
            <tr id="41343193"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343193" href="https://news.ycombinator.com/vote?id=41343193&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>On JumpHigher [1], an app that helps you improve your vertical leaps, just using your phone camera. It's functional already, but very early, the algorithm took quite a while to nail ( still far from perfect ).</p><p>I'm a CEO of a small consulting company, and I love working with startups ( or hate working with huge companies, matter of perspective ), and I always thought that to be better at that we have to be able to launch our own stuff.</p><p>Also, I never launched anything solo, working alone is hard for me so this was a challenge. I want to continue working on it on the side for a while.</p><p>The main audience for now would be basketball players that want to dunk, or anyone that wants a good leg workout and track the progress.</p><p>1. <a href="https://www.jumphigher.io/" rel="nofollow">https://www.jumphigher.io/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343252"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343252" href="https://news.ycombinator.com/vote?id=41343252&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I’m working on building a payroll outsourcing company targeting the construction industry. 2,900 employees paid last week! Deep ERP integration is our competitive edge.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342782"><td></td></tr>
            <tr id="41342833"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342833" href="https://news.ycombinator.com/vote?id=41342833&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I am working on <a href="https://hacktrack.info/" rel="nofollow">https://hacktrack.info</a> a SaaS that alerts you when a new CVE or exploit is published for the software you use. The idea came to me while working on an incident response team, where I noticed that many companies were hacked due to using software versions affected by recently published CVEs or exploits. Most of the similar solution I know of are really expensive or part of a larger product suite.</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342942"><td></td></tr>
                  <tr id="41342623"><td></td></tr>
            <tr id="41342698"><td></td></tr>
            <tr id="41342499"><td></td></tr>
                <tr id="41342514"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342514" href="https://news.ycombinator.com/vote?id=41342514&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Was hoping this was for desktop, as ive been using winamp for roughly 10 years since it has everything i want, including android management support.</p><p>Regardless, keep up the good work!</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41342624"><td></td></tr>
            <tr id="41342646"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342646" href="https://news.ycombinator.com/vote?id=41342646&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm working on a side project which is a Python library that provides of an abstraction layer to manage infrastructure in cloud providers by interacting with their APIs. This is something I've been developing every now and then for the last months after years of working with Terraform and getting tired of the limitations of it's DSL (yeah, Pullumi is better but I just simply want a generic library with classes representing services in the cloud I can call natively in Python without having to deal with a 3rd party application like Pullumi is!).</p>
              </div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342877"><td></td></tr>
                  <tr id="41343227"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343227" href="https://news.ycombinator.com/vote?id=41343227&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Apple vision pro app for documenting realtor's pre-listing-checklist notes in space and then also exporting notes to LMS-required PDFs for submission.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342843"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342843" href="https://news.ycombinator.com/vote?id=41342843&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p><a href="https://www.audiomatic.app/" rel="nofollow">https://www.audiomatic.app/</a></p><p>An automated dubbed translation service. Supports translation into English, French, Spanish, German, Portuguese, Chinese, and Japanese. The other options on the market often have jarring audio artifacts and glitches, which Audiomatic avoids.</p><p>My friends and I are currently working on improving the voice quality and adding new features.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342500"><td></td></tr>
            <tr id="41342647"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342647" href="https://news.ycombinator.com/vote?id=41342647&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Lately I have been working on making MicroPython an excellent platform for deploying Machine Learning on microcontroller-based sensors. Primarily this is via this open source project:
<a href="https://github.com/emlearn/emlearn-micropython">https://github.com/emlearn/emlearn-micropython</a>
But there is also a bit of work needed in the wider ecosystem, like improving drivers for accelerometer/microphone/etc, support for data formats such as Numpy .npy files etc.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342904"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342904" href="https://news.ycombinator.com/vote?id=41342904&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>My side project is a Chrome Extension to use Gemini LLMs in Chrome's sidepanel.</p><p>It's fairly a simple implementation but I am looking forward to thinking about monetization.</p><p>Right now I have ALMOST 10k user installs. 
It's called Gemini Sidepanel [1] if you're interested in checking it out.</p><p>[1] <a href="https://lf.gg/gemini" rel="nofollow">https://lf.gg/gemini</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342658"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342658" href="https://news.ycombinator.com/vote?id=41342658&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Open source online backgammon. Backgammon is fairly niche, so there seems to be a lot of opportunity for backgammon software to be developed. I'm taking inspiration from Lichess, having enjoyed playing chess there for years. Check out the server, client and backgammon AI I'm working on at <a href="https://bgammon.org/" rel="nofollow">https://bgammon.org</a></p><p>(Source code at <a href="https://bgammon.org/code" rel="nofollow">https://bgammon.org/code</a>)</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342449"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342449" href="https://news.ycombinator.com/vote?id=41342449&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Working on an update to `hiedb-mode`. It's an emacs package for querying an hiedb index; a database for building IDE tooling for Haskell. The update will use `compile` for the display buffer similar to how `find-grep` does it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343011"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343011" href="https://news.ycombinator.com/vote?id=41343011&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I’ve been working on some Common Lisp binding for webgpu native.</p><p>Trying to learn both a bit better along the way.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342431"><td></td></tr>
            <tr id="41342982"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342982" href="https://news.ycombinator.com/vote?id=41342982&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on a side hustle to help technical consultants build newsletters. Makes me sad when I see a great technical answer on a slack that I know will help far fewer people than it could.</p><p>So this weekend, I'm building some processes and marketing materials and doing some outreach.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342580"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342580" href="https://news.ycombinator.com/vote?id=41342580&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I am writing about Graph Reasoning on my Substack (Encyclopedia Autonomica - All things Autonomous Agents) because I really find the topic interesting and there is not much research.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342851"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342851" href="https://news.ycombinator.com/vote?id=41342851&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm working on <a href="https://currentkey.com/" rel="nofollow">https://currentkey.com/</a> - a way to assign names to your Mac's desktop Spaces. I've also been working on a couple of games in Godot, but they are pretty far off from being interesting-enough to share.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342692"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342692" href="https://news.ycombinator.com/vote?id=41342692&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>An autograder for a web apps course at CMU. It is a fun challenge to predict everything that can go wrong while still providing useful feedback!</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342435"><td></td></tr>
            <tr id="41343270"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343270" href="https://news.ycombinator.com/vote?id=41343270&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm working on updating the yavaca.com site including the backend written in golang. It allows users to publish an Out-Of-Office (OOO) plan so they can unplug while on vacation. Great for maintaining a healthy work-life balance.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342551"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342551" href="https://news.ycombinator.com/vote?id=41342551&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on <a href="https://github.com/incidentalhq/incidental">https://github.com/incidentalhq/incidental</a></p><p>It's an incident management platform, similar to Pagerduty, Rootly or FireHydrant.</p><p>It's the first side project I've open sourced, and I've been hacking on it weekends and nights. Hoping to get a few companies to start using it to get some early feedback.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342616"><td></td></tr>
            <tr id="41342545"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342545" href="https://news.ycombinator.com/vote?id=41342545&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>We're currently developing <a href="https://www.videototextai.com/" rel="nofollow">https://www.videototextai.com/</a> – ChatGPT for video and audio. The idea is to get to an all-in-one video and audio editing/insights platform. We’re actively building out new features to fully realise our vision, and we'd love to get any feedback from HackerNews!</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342524"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342524" href="https://news.ycombinator.com/vote?id=41342524&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm currently building a mobile-friendly Postgres database tool. Think dbeaver but on Android.</p><p>Writing and editing SQL queries on the phone can get tedious. Rather than just giving users a tiny textfield, I am exploring if there are better ways to build SQL queries on a touchscreen</p><p>Here's the makeshift landing page: <a href="https://getselectable.com/" rel="nofollow">https://getselectable.com/</a></p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342597"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342597" href="https://news.ycombinator.com/vote?id=41342597&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I am working on an agent cognitive architecture based around LLMs. Been working on it for a while. The main difference from all the dozens out of agentic systems out there is that has been designed so that it can introspect fully and it has a machine ethics layer based on the work a modern Stoic philosopher. I am trying to build a system that I would like to exist.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342883"><td></td></tr>
                <tr id="41343067"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41343067" href="https://news.ycombinator.com/vote?id=41343067&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>When prompted LLMs Shakespeare said:</p><p>You taught me language, and my profit on't / Is, I know how to curse”</p><p>The Tempest, by William Shakespeare</p><p>“The poorest service is repaid with thanks.”</p><p>The Taming of the Shrew, by William Shakespeare</p><p>Pretty funny!</p></div></td></tr>
        </tbody></table></td></tr>
                  <tr id="41342558"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342558" href="https://news.ycombinator.com/vote?id=41342558&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Working on my modern take on an API management + monetization platform . I want to make it super easy to sell API access with all the bells and whistles you need such as; authorization, rate-limiting, subscriptions, credit billing, usage based billing and a self-service customer portal</p><p><a href="https://useultrance.com/" rel="nofollow">https://useultrance.com/</a></p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41342639"><td><table>  <tbody><tr>    <td indent="1"><img src="https://news.ycombinator.com/s.gif" height="1" width="40"></td><td>
      <center><a id="up_41342639" href="https://news.ycombinator.com/vote?id=41342639&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>what do you think about rapidapi?</p><p>I think the biggest issue is that when an user makes a chargeback they don't pay you. Which makes the 20% cut they take a bit too much in my opinion.</p><p>Also the marketplace is getting full of people abusing free APIs for money.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343071"><td><table>  <tbody><tr>    <td indent="2"><img src="https://news.ycombinator.com/s.gif" height="1" width="80"></td><td>
      <center><a id="up_41343071" href="https://news.ycombinator.com/vote?id=41343071&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Well I am not a fan of RapidAPI for a couple reasons, firstly them taking such a big cut of an API provider's business and secondly their marketplace feels kinda spammy and low quality.</p><p>I am trying to build so that there is little vendor lock-in (you can export your users to other auth providers, billing is integrated directly into your stripe account, etc) so that you still have the choice to migrate if you ever feel unhappy with the service</p></div></td></tr>
        </tbody></table></td></tr>
                        <tr id="41343114"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343114" href="https://news.ycombinator.com/vote?id=41343114&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm working on a TUI application which allows you to make SQL query on CSV files.
I'm working on a web base version too.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343321"><td></td></tr>
            <tr id="41342884"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342884" href="https://news.ycombinator.com/vote?id=41342884&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Been working on a digital time capsule app for my friends birthdays and other big life events. I think there’s always opportunity to share more moments with people, so I’m hoping I can use this and get my friends to use it too</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343280"><td></td></tr>
            <tr id="41342635"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342635" href="https://news.ycombinator.com/vote?id=41342635&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p><a href="https://rtcode.io/" rel="nofollow">https://RTCode.io</a></p><p>We're continuing to develop and refine our core offerings at Elefunc:</p><p>RTCode.io is our real-time web development playground for HTML, CSS, and JS. It provides instant feedback - as you code, you see the results immediately. A key feature is our support for in-editor Workers, allowing developers to write and test backend code directly in the playground.</p><p>These Workers integrate seamlessly with RTEdge.net, our global, multi-cloud edge network. RTEdge.net offers distributed hosting with auto-scaling capabilities, giving developers a powerful platform to deploy and scale their applications worldwide.</p><p>We're also running rt.ht, which we tout as the world's shortest SaaS eTLD.</p><p>Our focus remains on providing developers with robust tools for real-time web development and edge computing. We're always looking to improve the integration between RTCode.io and RTEdge.net to streamline the development and deployment process.</p><p>If you're interested in real-time web technologies or edge computing, we'd love to hear your thoughts or answer any questions about our platform.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342714"><td></td></tr>
            <tr id="41342602"><td></td></tr>
                <tr id="41343367"><td></td></tr>
                  <tr id="41342765"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342765" href="https://news.ycombinator.com/vote?id=41342765&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Building several products:</p><p><a href="https://teamsays.com/" rel="nofollow">https://teamsays.com</a> — Team-Changing Anonymous Feedback where you can set up a private channel for understanding what’s going on in your teams.</p><p><a href="https://usemanor.com/" rel="nofollow">https://usemanor.com</a> — AI concierge for real estate brokers.</p><p><a href="https://joinsymbol.com/" rel="nofollow">https://joinsymbol.com</a> — Manipulate text with translations, JSONs, and other revisions with AI. Provides an API for using in your apps, etc. CMS on top AI basically.</p><p><a href="https://fullmoonchat.com/" rel="nofollow">https://fullmoonchat.com</a> – AI esoterics.</p><p>My current strategy is to go inch deep, mile wide. I don’t want all of my eggs in one basket any more. Basically doing a VC model using my portfolio of products.</p><p>Holler at me if you want to chat about these products or if you have any ideas you want to build.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342805"><td></td></tr>
            <tr id="41342825"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342825" href="https://news.ycombinator.com/vote?id=41342825&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>A golf swing measurement app using 3 sensors and an esp board. Just started practicing golf and made sense to understand how the swing works. Claude AI is helping me with some of the coding, fun stuff.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343216"><td></td></tr>
            <tr id="41342438"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342438" href="https://news.ycombinator.com/vote?id=41342438&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I’m back to working on an ML app pair (train/consume) for Mac/iOS, for finding a certain type of resource.</p><p>I tried it a while back, and wasn’t too thrilled with the way Apple has structured their ML stuff (they basically only afford very specific applications, which didn’t match my workflow).</p><p>It was suggested that I revisit it, so I am.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41343007"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41343007" href="https://news.ycombinator.com/vote?id=41343007&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>EdTech. Figure out what skills you possess to what extent based on how you answer individual questions. Hooks into any LMS.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342626"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342626" href="https://news.ycombinator.com/vote?id=41342626&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I believe I can do and build anything, but I'm out of juice.</p><p>Working as a consultant, but no extra energy or will to create anything outside of work.</p><p>Kids are getting bigger, and I have time.... but no will, or maybe it's just fear, to start anything.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr id="41343451"><td></td></tr>
                  <tr id="41342526"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342526" href="https://news.ycombinator.com/vote?id=41342526&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>I'm putting qnx cross-toolchains into Debian packages because $DAYJOB builds qnx images in ubuntu containers. I've learned a lot about cross-toolchains and my appreciation for blackberry's technical prowess has never been lower.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342614"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342614" href="https://news.ycombinator.com/vote?id=41342614&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Leetcode for a new job, been at my current place for 5 years. But it's actually the perfect thing to do to make your brain come up with new projects that your brain would rather do, so I write those down for later</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342712"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342712" href="https://news.ycombinator.com/vote?id=41342712&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>About three months ago I had a moment of clarity when I realized that all I did with my spare time was work out, smoke weed, and play video games (not at the same time). So I decided to reallocate a portion of my video game time to learning artistic skills. Largely learning to draw with the classic book Drawing On The Right Side Of The Brain, but I've also been making music and video games  and learning 3D modelling in Blender. I'm not good at any of it yet but I'm having a great time.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342581"><td></td></tr>
            <tr id="41342574"><td></td></tr>
                <tr id="41343191"><td></td></tr>
                  <tr id="41342460"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342460" href="https://news.ycombinator.com/vote?id=41342460&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Despite not liking JavaScript as a language nor the Node runtime, learning about hybrid static and SSR apps with Astro.js - I have to say, I’m impressed so far. Seems like a sweet spot for certain types of sites.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342659"><td></td></tr>
            <tr id="41342535"><td></td></tr>
            <tr id="41342592"><td></td></tr>
            <tr id="41342767"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342767" href="https://news.ycombinator.com/vote?id=41342767&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div>
                  <p>Still slowly working on AGS. There's a lot to do and I don't have as much time as I used but still doing contributions to it.</p>
              </div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342673"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342673" href="https://news.ycombinator.com/vote?id=41342673&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>Currently studying the segment anything model family (1 and 2 &amp; everything in-between).</p><p>I read the abstract a while ago and I was fascinated by the methodology.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342970"><td></td></tr>
            <tr id="41342628"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342628" href="https://news.ycombinator.com/vote?id=41342628&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I’m building a calmer way to produce and consume content.</p><p>A delightfully simple blogging-by-email app, Pagecord (<a href="https://pagecord.com/" rel="nofollow">https://pagecord.com</a>). $20/yr.</p><p>A delightfully simple, all-in-one RSS reader (web and PWA), Feedgrab (<a href="https://feedgrab.net/" rel="nofollow">https://feedgrab.net</a>). FREE!</p><p>Very early days (built quickly!) but both products are fully functional with customers.</p><p>I have a lot of ideas around content discovery for Feedgrab.</p><p>Give them a spin, I’d love to know what people think.</p></div></td></tr>
        </tbody></table></td></tr>
            <tr id="41342944"><td></td></tr>
            <tr id="41343406"><td></td></tr>
            <tr id="41342785"><td><table>  <tbody><tr>    <td indent="0"><img src="https://news.ycombinator.com/s.gif" height="1" width="0"></td><td>
      <center><a id="up_41342785" href="https://news.ycombinator.com/vote?id=41342785&amp;how=up&amp;goto=item%3Fid%3D41342017"></a></center>    </td><td><br><div><p>I'm working on <a href="https://summ.me/" rel="nofollow">https://summ.me</a></p><p>I recently released version 1.0 in July, which allows you to voice chat (TTS and STT) with almost any chatbot site (e.g., Copilot, ChatGPT, Claude).</p><p>Next, I'm thinking of building a 3D talking avatar to make it feel like a personal companion is chatting with you.</p></div></td></tr>
        </tbody></table></td></tr>
                <tr></tr><tr><td></td></tr>
      </tbody></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Papersway – a scrollable window management for Sway/i3wm (138 pts)]]></title>
            <link>https://spwhitton.name/tech/code/papersway/</link>
            <guid>41341797</guid>
            <pubDate>Sat, 24 Aug 2024 21:39:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spwhitton.name/tech/code/papersway/">https://spwhitton.name/tech/code/papersway/</a>, See on <a href="https://news.ycombinator.com/item?id=41341797">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="pagebody" class="page">
<h2>Description</h2>

<p>This is an implementation of PaperWM-like scrollable window management
for Sway/i3wm.
If you like Sway/i3wm’s commitments to stability, avoiding scope creep etc.
but dislike the window management model, papersway might be of interest.</p>

<p>On each workspace, windows are arranged in a row.  By default, two of the
windows in the row are visible at a time, and you can move left and right in
the row to display other windows.  Opening a new window pushes one of the
visible windows off the screen to make room, and closing a window pulls in a
window to fill the space.  You can reorder the windows.</p>

<p>There is a display of the row of workspaces in the bar,
e.g. <tt>&nbsp;‡&nbsp;<b>‡&nbsp;‡</b>&nbsp;‡&nbsp;</tt>.  Here, the focused workspace has four windows,
and the middle two are the ones currently visible.  If the third window has
focus and we open another window, then the second window will be pushed off to
make room, and we will get <tt>&nbsp;‡&nbsp;‡&nbsp;<b>‡&nbsp;‡</b>&nbsp;‡&nbsp;</tt>.  The third window
remains visible, but moves to the left side of the display.</p>

<p>There are commands to change the number of visible windows; toggle <em>monocle
mode</em>, in which the focused window occupies all visible columns; and jump to a
<em>fresh workspace</em>, which means a new, empty workspace occurring immediately
after the currently focused workspace.  E.g. if you have two workspaces,
<tt><b>1</b>&nbsp;2</tt> and you request a fresh workspace, the second workspace
will be renamed out of the way, leaving you with <tt>1&nbsp;<b>2</b>&nbsp;3</tt> and no
windows visible.</p>

<p><a href="https://www.youtube.com/watch?v=QifpqSiNSKA">Video demo</a></p>

<h2>Installation</h2>

<p>You can install papersway and its dependencies from CPAN.</p>

<p>E.g. with cpanminus (available in distro repositories),</p>

<pre><code>% cpanm App::papersway
</code></pre>

<p>and then add <code>$HOME/perl5/bin</code> to your PATH environment variable.</p>

<p>On Debian 13 or later &amp; Ubuntu 24.10 or later, <code>apt-get install papersway</code>.</p>

<h2>Usage</h2>

<p>Usage instructions, including sample key bindings, are maintained in
<a href="https://metacpan.org/dist/App-papersway/view/bin/papersway">papersway(1)</a>.</p>

<h2>Bug reports, patches etc.</h2>

<p>Please see CONTRIBUTING, included in <a href="https://git.spwhitton.name/papersway">the source
tree</a>, for information regarding the
reporting of bugs and submission of patches/pull requests.</p>

<h2>See also</h2>

<ul>
<li><a href="https://i3wm.org/">i3wm</a></li>
<li><a href="https://swaywm.org/">Sway</a></li>
<li><a href="https://github.com/paperwm/PaperWM">PaperWM</a></li>
<li><a href="https://material-shell.com/">Material Shell</a></li>
<li><a href="https://spatial-shell.app/">Spatial Shell</a></li>
</ul>


<h2>License</h2>

<p>Copyright © 2019–2024  Sean Whitton</p>

<p>papersway is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.</p>

<p>papersway is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.</p>

<p>You should have received a copy of the GNU General Public License along with
papersway.  If not, see
<a href="https://www.gnu.org/licenses/">&lt;https://www.gnu.org/licenses/&gt;</a>.</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[AMD's Radeon 890M: Strix Point's Bigger iGPU (111 pts)]]></title>
            <link>https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/</link>
            <guid>41341786</guid>
            <pubDate>Sat, 24 Aug 2024 21:39:07 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/">https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/</a>, See on <a href="https://news.ycombinator.com/item?id=41341786">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>AMD’s iGPUs have seen plenty of recent success. Handheld gaming devices like Valve’s Steam Deck and Asus’s ROG Ally both use AMD integrated graphics. AMD’s last generation mobile offering, codenamed Phoenix, already did well against Intel and Qualcomm’s competing products. Strix Point, AMD’s latest mobile chip, looks to continue that strong performance. It gets an even larger GPU than before, along with a slight architecture upgrade.</p>
<figure><table><tbody><tr><td>Generation</td><td>GPU</td><td>CPU</td></tr><tr><td>Strix Point, 2024 (Ryzen AI 9 HX 370)</td><td>8x RDNA 3.5 WGPs</td><td>4x Zen 5 Mobile + 8x Zen 5c Mobile</td></tr><tr><td>Phoenix, 2023 (Ryzen 7 7840HS)</td><td>6x RDNA 3 WGPs</td><td>8x Zen 4</td></tr><tr><td>Rembrandt, 2022 (Ryzen 7 6800HS)</td><td>6x RDNA 2 WGPs</td><td>8x Zen 3</td></tr><tr><td>Van Gogh, 2022 (Steam Deck)</td><td>4x RDNA 2 WGPs</td><td>4x Zen 2</td></tr><tr><td>Cezanne, 2021</td><td>8x Vega CUs</td><td>8x Zen 3</td></tr></tbody></table></figure>
<p>We previously covered RDNA 3.5’s architecture changes in a <a href="https://chipsandcheese.com/2024/02/04/amd-rdna-3-5s-llvm-changes/">separate article</a>, so be sure to check that out. The Ryzen AI 9 HX 370’s Radeon 890M is designated GFX1150, which corresponds to the cut down variant of RDNA 3.5 with 128 KB vector register files.</p>
<h3>Acknowledgments</h3>
<p>We would like to thank ASUS for providing a laptop for review.</p>
<h2>Overview</h2>
<p>GPUs from AMD’s RDNA line are built from Workgroup Processors (WGPs), which vaguely correspond to cores from the CPU world. The Radeon 890M has eight WGPs. AMD used six WGPs in two prior generations of iGPUs, so Strix Point gets a substantial increase in GPU size.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31266"><img decoding="async" width="688" height="432" data-attachment-id="31266" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu.png?fit=832%2C523&amp;ssl=1" data-orig-size="832,523" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu.png?fit=832%2C523&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu.png?fit=688%2C432&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu.png?resize=688%2C432&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu.png?w=832&amp;ssl=1 832w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu.png?resize=768%2C483&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>Strix Point’s GPU side memory subsystem remains very similar to the one on Phoenix. WGPs are partitioned into two shader arrays, each with a 256 KB L1 mid-level cache. Each L1 cache instance now serves four WGPs instead of three. The entire iGPU shares a 2 MB L2 cache, and connects to the rest of the chip via four 32 byte per cycle Infinity Fabric ports. Infinity Fabric is AMD’s network-on-chip, and can run at up to 2 GHz on Strix Point. A 4x32B/cycle link may feel like overkill, but it lets Infinity Fabric run at a less aggressive 1.6 GHz while still giving the iGPU access to full LPDDR5 bandwidth. Since a large part of a chip’s power budget can be consumed doing data transfers, running the interconnect at a lower frequency could help save power during graphics workloads.</p>
<figure><img decoding="async" width="625" height="586" data-attachment-id="31271" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/phx_drawio/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/phx_drawio.png?fit=625%2C586&amp;ssl=1" data-orig-size="625,586" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="phx_drawio" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/phx_drawio.png?fit=625%2C586&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/phx_drawio.png?fit=625%2C586&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/phx_drawio.png?resize=625%2C586&amp;ssl=1" alt="" data-recalc-dims="1"></figure>
<p>AMD continues to use a LPDDR5-capable memory controller, with support for up to LPDDR5-7500. Our test device from Asus uses exactly that, providing 120 GB/s of theoretical bandwidth. While Phoenix’s memory controller can support the same speed, the fastest Phoenix memory configuration we tested with was LPDDR5-6400 in the Ryzen Z1 Extreme. Intel’s Meteor Lake does get a similarly high bandwidth LPDDR5-7467 configuration in the Asus Zenbook 14 OLED.</p>
<h2>Cache and Memory Characteristics</h2>
<p>Cache latency on Strix Point’s iGPU is almost exactly a match for its predecessor. Higher clock speeds do put AMD’s latest iGPU ahead by a hair. Compared to Intel’s Meteor Lake, AMD continues to use more cache levels than its competitors. Meteor Lake has a large and fast first level cache, backed by a L2 with twice as much capacity as AMD’s.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31274"><img decoding="async" width="688" height="360" data-attachment-id="31274" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_ocl_veclatency/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_veclatency.png?fit=1159%2C607&amp;ssl=1" data-orig-size="1159,607" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_ocl_veclatency" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_veclatency.png?fit=1159%2C607&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_veclatency.png?fit=688%2C360&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_veclatency.png?resize=688%2C360&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_veclatency.png?w=1159&amp;ssl=1 1159w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_veclatency.png?resize=768%2C402&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>DRAM latency has also improved, though the difference between Strix Point and Phoenix again isn’t large. Meteor Lake suffers much higher DRAM access latency from its iGPU.</p>
<p>In AMD tradition, RDNA 3.5 has a scalar memory access path. Testing with scalar accesses doesn’t show any surprises. The scalar path offers lower latency, with AMD’s mid-level L1 matching Meteor Lake’s first level L1. AMD’s 16 KB scalar cache therefore acts like a L0 cache of sorts, even though AMD only applies that designation to the vector cache.</p>
<div>
<figure><a href="https://chipsandcheese.com/strix_igpu_ocl_scalarlatency1/"><img loading="lazy" decoding="async" width="688" height="361" data-attachment-id="31281" data-permalink="https://chipsandcheese.com/strix_igpu_ocl_scalarlatency1/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_scalarlatency1.png?fit=1159%2C608&amp;ssl=1" data-orig-size="1159,608" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_ocl_scalarlatency1" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_scalarlatency1.png?fit=1159%2C608&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_scalarlatency1.png?fit=688%2C361&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_scalarlatency1.png?resize=688%2C361&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_scalarlatency1.png?w=1159&amp;ssl=1 1159w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_ocl_scalarlatency1.png?resize=768%2C403&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>Strix Point’s memory subsystem needs to provide more bandwidth to feed its extra compute, and AMD doesn’t disappoint. First level cache bandwidth scales with WGP count, and is much higher. The mid-level L1 caches get a bit more strain because each instance now serves four WGPs instead of three, but that’s still within the capabilities of AMD’s L1 design, as AMD’s high end 7900 XTX also makes one L1 instance handle four WGPs.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31284"><img loading="lazy" decoding="async" width="688" height="371" data-attachment-id="31284" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_vk_bw/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw.png?fit=1318%2C710&amp;ssl=1" data-orig-size="1318,710" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_vk_bw" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw.png?fit=1318%2C710&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw.png?fit=688%2C371&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw.png?resize=688%2C371&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw.png?w=1318&amp;ssl=1 1318w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw.png?resize=768%2C414&amp;ssl=1 768w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw.png?resize=1200%2C646&amp;ssl=1 1200w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>L2 bandwidth continues to be impressive at 1.7 TB/s, though the increase here is minor compared to Phoenix. Meteor Lake has less cache bandwidth across the board, though its larger L2 cache does give it an advantage. Intel’s iGPU L2 has less bandwidth than AMD’s, but 1 TB/s is still nothing to sneeze at.</p>
<p>With LPDDR5-7500, Strix Point gets somewhat better bandwidth than Meteor Lake or Phoenix. It’s a hair behind Qualcomm’s Snapdragon X Elite, which feeds its Adreno GPU with top end LPDDR5X. Stepping back, it’s impressive how moder n iGPUs have comparable bandwidth to low end GDDR5-equipped GPUs of the past. LPDDR has done a lot to enable faster iGPUs.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31287"><img loading="lazy" decoding="async" width="680" height="414" data-attachment-id="31287" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_dram_bw-1/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_dram_bw-1.png?fit=680%2C414&amp;ssl=1" data-orig-size="680,414" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_dram_bw-1" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_dram_bw-1.png?fit=680%2C414&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_dram_bw-1.png?fit=680%2C414&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_dram_bw-1.png?resize=680%2C414&amp;ssl=1" alt="" data-recalc-dims="1"></a></figure></div>
<p>Valve’s Steam Deck is another notable comparison. Even though it launched two years ago, the Steam Deck is still a current generation product. However, the Steam Deck’s APU is sorely dated, with a small RDNA 2 GPU running at a very low 1.6 GHz clock. 1.6 GHz is well below the efficiency sweet spot on desktop RDNA 2 products.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31290"><img loading="lazy" decoding="async" width="688" height="370" data-attachment-id="31290" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_vk_bw_vs_steamdeck/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw_vs_steamdeck.png?fit=1314%2C706&amp;ssl=1" data-orig-size="1314,706" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_vk_bw_vs_steamdeck" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw_vs_steamdeck.png?fit=1314%2C706&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw_vs_steamdeck.png?fit=688%2C370&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw_vs_steamdeck.png?resize=688%2C370&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw_vs_steamdeck.png?w=1314&amp;ssl=1 1314w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw_vs_steamdeck.png?resize=768%2C413&amp;ssl=1 768w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_bw_vs_steamdeck.png?resize=1200%2C645&amp;ssl=1 1200w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>As a result, Van Gogh has far less cache bandwidth than modern contenders. Adreno X1 is an exception, with very poor cache bandwidth for a current generation iGPU.</p>
<p>Besides the global memory hierarchy backed by DRAM, GPU code can explicitly keep frequently used data in on-chip local memory. Local memory is local to each workgroup in OpenCL, but in exchange offers guaranteed low latency and high bandwidth. AMD implements local memory with a 128 KB Local Data Share (LDS) in each WGP. Total LDS bandwidth is quite high for an integrated GPU, stopping just short of 5 TB/s.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31292"><img loading="lazy" decoding="async" width="688" height="372" data-attachment-id="31292" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_localbw-1/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_localbw-1.png?fit=869%2C470&amp;ssl=1" data-orig-size="869,470" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_localbw-1" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_localbw-1.png?fit=869%2C470&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_localbw-1.png?fit=688%2C372&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_localbw-1.png?resize=688%2C372&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_localbw-1.png?w=869&amp;ssl=1 869w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_localbw-1.png?resize=768%2C415&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>LDS latency has significantly improved, and it’s not just from a slight clock speed bump. It’s a welcome change, and puts RDNA 3 well ahead of its immediate competitors.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31293"><img loading="lazy" decoding="async" width="688" height="370" data-attachment-id="31293" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_locallatency/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_locallatency.png?fit=870%2C468&amp;ssl=1" data-orig-size="870,468" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_locallatency" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_locallatency.png?fit=870%2C468&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_locallatency.png?fit=688%2C370&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_locallatency.png?resize=688%2C370&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_locallatency.png?w=870&amp;ssl=1 870w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_locallatency.png?resize=768%2C413&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>Local memory can also be used to exchange data between a workgroup’s threads. With a thread-to-thread latency test, RDNA 3.5 acts like RDNA 3. There’s little difference between pointer chasing latency within a single thread, and data exchanges between threads. That’s a good thing, because it means RDNA 3.5’s low LDS latency benefits atomics too.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31294"><img loading="lazy" decoding="async" width="688" height="364" data-attachment-id="31294" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_globalatomic/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_globalatomic.png?fit=863%2C456&amp;ssl=1" data-orig-size="863,456" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_globalatomic" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_globalatomic.png?fit=863%2C456&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_globalatomic.png?fit=688%2C364&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_globalatomic.png?resize=688%2C364&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_globalatomic.png?w=863&amp;ssl=1 863w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_globalatomic.png?resize=768%2C406&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>Global memory atomics are more generally applicable because they allow data exchange between any of a kernel’s threads. Latency is higher of course because transfers can’t be kept in a WGP. However, Strix Point’s iGPU manages to improve latency with global memory atomics despite its increased size.</p>
<h2>Compute Throughput</h2>
<p>RDNA 3.5 inherits RDNA 3’s dual issue mechanism, which lets one wavefront start 64 FP operations per cycle. That can be done either with wave64 mode, or dual issue instructions in wave32 mode. Strix Point’s GPU is also scaled up compared to Phoenix’s. As a result, AMD has packed massive compute throughput into an iGPU. The Radeon 890M pushes past 5 TFLOPS, and past 10 TFLOPS if you count a fused multiply-add as two operations. It’s a clear improvement over Phoenix, and often on a different planet compared to the still current generation Steam Deck APU.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31297"><img loading="lazy" decoding="async" width="688" height="1096" data-attachment-id="31297" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_vk_fp/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_fp.png?fit=793%2C1263&amp;ssl=1" data-orig-size="793,1263" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_vk_fp" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_fp.png?fit=793%2C1263&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_fp.png?fit=688%2C1096&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_fp.png?resize=688%2C1096&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_fp.png?w=793&amp;ssl=1 793w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_fp.png?resize=768%2C1223&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>With special function operations like inverse square roots, Strix Point has less of a relative advantage because RDNA 3(.5)’s dual issue doesn’t apply. Still, having a bigger and much higher clocking GPU counts for a lot.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31298"><img loading="lazy" decoding="async" width="688" height="572" data-attachment-id="31298" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_vk_int/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_int.png?fit=782%2C650&amp;ssl=1" data-orig-size="782,650" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_vk_int" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_int.png?fit=782%2C650&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_int.png?fit=688%2C572&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_int.png?resize=688%2C572&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_int.png?w=782&amp;ssl=1 782w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_vk_int.png?resize=768%2C638&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>Integer operations often show up in games too, and the Radeon 890M is no slouch with those. It’s a stark contrast when compared to what we saw in Qualcomm’s Adreno X1, which generally had poor integer performance. Strix Point does well even with 64-bit integers, which are rarely used in games. GPUs typically do 64-bit integer adds with two 32-bit add-with-carry instructions, and it seems like those instructions execute at full rate here.</p>
<h2>CPU to GPU Bandwidth</h2>
<p>Integrated GPUs like the one on Strix Point are more power and area constrained than their discrete desktop counterparts. But sharing a memory bus with the CPU does come with an advantage when moving data between CPU and GPU memory spaces.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31300"><img loading="lazy" decoding="async" width="688" height="372" data-attachment-id="31300" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_link/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_link.png?fit=953%2C515&amp;ssl=1" data-orig-size="953,515" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_link" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_link.png?fit=953%2C515&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_link.png?fit=688%2C372&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_link.png?resize=688%2C372&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_link.png?w=953&amp;ssl=1 953w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_link.png?resize=768%2C415&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>With <code>clEnqueueWriteBuffer</code> or <code>clEnqueueReadBuffer</code>, Strix Point can use its LPDDR5 controller to get nearly 38 GB/s of copy bandwidth. It’s comfortably above the 32 GB/s that a PCIe 4.0 x16 link would offer. AMD also pulls ahead of Meteor Lake with a similarly high bandwidth LPDDR5 configuration, perhaps indicating AMD has better DMA engines.</p>
<h2>Compute: FluidX3D</h2>
<p>FluidX3D simulates fluid behavior. Performance can be highly dependent on memory bandwidth, assuming the GPU in question is able to meet a baseline level of compute performance.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31302"><img loading="lazy" decoding="async" width="688" height="416" data-attachment-id="31302" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_fluidx3d/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_fluidx3d.png?fit=778%2C470&amp;ssl=1" data-orig-size="778,470" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_fluidx3d" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_fluidx3d.png?fit=778%2C470&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_fluidx3d.png?fit=688%2C416&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_fluidx3d.png?resize=688%2C416&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_fluidx3d.png?w=778&amp;ssl=1 778w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_fluidx3d.png?resize=768%2C464&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>Strix Point’s iGPU does very well, stepping ahead of Phoenix and Meteor Lake’s iGPUs. It also moves ahead of Nvidia’s Pascal based GTX 1050 3 GB, showing the strength of LPDDR5 for latency tolerant GPU workloads. However, gains are minor because the workload is bandwidth bound.</p>
<h2>Cyberpunk 2077</h2>
<p>Cyberpunk 2077 is a modern DirectX 12 game. At low settings and 1080P resolution, the Radeon 890M turns in a good performance. It clearly steps ahead of Phoenix, already had a solid iGPU.</p>
<div>
<figure><a href="https://chipsandcheese.com/strix_igpu_cp2077/"><img loading="lazy" decoding="async" width="688" height="395" data-attachment-id="31305" data-permalink="https://chipsandcheese.com/strix_igpu_cp2077/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077.png?fit=697%2C400&amp;ssl=1" data-orig-size="697,400" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_cp2077" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077.png?fit=697%2C400&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077.png?fit=688%2C395&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077.png?resize=688%2C395&amp;ssl=1" alt="" data-recalc-dims="1"></a></figure></div>
<p>A larger GPU needs a larger power budget to shine, and Asus’s laptop is able to give it exactly that. Battery discharge rate as measured through HWInfo was around 50W. It’s quite a bit higher than the battery discharge rate on the Meteor Lake, Phoenix, and Snapdragon X Elite laptops tested. But it’s worth it, because AMD does get more FPS per watt than the Snapdragon X Elite.</p>
<div>
<figure><a href="https://chipsandcheese.com/?attachment_id=31307"><img loading="lazy" decoding="async" width="688" height="347" data-attachment-id="31307" data-permalink="https://chipsandcheese.com/2024/08/24/amds-radeon-890m-strix-points-bigger-igpu/strix_igpu_cp2077_battery_discharge_rate/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077_battery_discharge_rate.png?fit=997%2C503&amp;ssl=1" data-orig-size="997,503" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_igpu_cp2077_battery_discharge_rate" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077_battery_discharge_rate.png?fit=997%2C503&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077_battery_discharge_rate.png?fit=688%2C347&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077_battery_discharge_rate.png?resize=688%2C347&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077_battery_discharge_rate.png?w=997&amp;ssl=1 997w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_igpu_cp2077_battery_discharge_rate.png?resize=768%2C387&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>If Strix Point’s SoC power gets pulled back to 15W for 20-21W of battery draw, average FPS drops to 30 FPS. At that point, AMD’s newest GPU is able to maintain competitive performance with Intel’s Meteor Lake at lower power.</p>
<h2>Final Words</h2>
<p>As the latest installment in AMD’s iGPU journey, the RDNA 3.5 iGPU in Strix Point does its job well. Performance improves compared to AMD’s already solid iGPU in Phoenix. Other than having more GPU cores running at slightly higher clock speeds, Strix Point doesn’t change a lot compared to its predecessor. RDNA 3.5’s improvements are welcome, but they’re minor as expected for a half-generation update. AMD’s GPU-side cache and memory subsystem uses the same strategy as before.</p>
<p>It’s a bit boring considering Intel has a larger L2 cache, and Qualcomm is playing with a 6 MB System Level Cache on their Snapdragon X Elite (of which about 2.5 MB appears usable to the iGPU). But boring might be the best answer here. Phoenix undeniably did well despite having less last level cache than its competitors. Strix Point appears to do the same, comfortably outdoing its competition. AMD is able to feed its iGPU with less caching, and without going for the most expensive LPDDR5X memory around. Making sweeping changes is always risky, as Netburst and AMD’s own Bulldozer have shown. With Strix Point, AMD is not fixing things that aren’t broken.</p>
<div>
<figure><a href="https://chipsandcheese.com/strix_rdna35_slide/"><img loading="lazy" decoding="async" width="688" height="387" data-attachment-id="31312" data-permalink="https://chipsandcheese.com/strix_rdna35_slide/" data-orig-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_rdna35_slide.jpg?fit=1277%2C719&amp;ssl=1" data-orig-size="1277,719" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="strix_rdna35_slide" data-image-description="" data-image-caption="" data-medium-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_rdna35_slide.jpg?fit=1277%2C719&amp;ssl=1" data-large-file="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_rdna35_slide.jpg?fit=688%2C387&amp;ssl=1" tabindex="0" role="button" src="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_rdna35_slide.jpg?resize=688%2C387&amp;ssl=1" alt="" srcset="https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_rdna35_slide.jpg?w=1277&amp;ssl=1 1277w, https://i0.wp.com/chipsandcheese.com/wp-content/uploads/2024/08/strix_rdna35_slide.jpg?resize=768%2C432&amp;ssl=1 768w" sizes="(max-width: 688px) 100vw, 688px" data-recalc-dims="1"></a></figure></div>
<p>Strix Point’s move to RDNA 3.5 does show that AMD is focusing harder on the iGPU side than before. Not too long ago, AMD iGPUs would use hilariously out of date graphics architectures. AMD launched the Cezanne chip in 2021 with Vega graphics, which is largely similar to the original GCN architecture that launched in 2011. In 2021, AMD’s desktop discrete GPUs used the RDNA 2 architecture. Longer ago, AMD launched Trinity APUs with Terascale 3 graphics when their desktop GPUs had already moved to GCN.</p>
<p>With Strix Point, AMD’s mobile iGPU has a newer graphics architecture than its desktop counterparts. It’s an unprecedented situation, but not a surprising one. Since the DX11 era, AMD has never been able to take and hold the top spot in the discrete GPU market. Nvidia has been building giant chips where cost is no object for a long time, and they’re good at it. Perhaps AMD sees lower power gaming as a market segment where they can really excel. Strix Point seems to be a reflection of that.</p>
<p>LLVM commits also support a higher end RDNA 3.5 variant, designated GFX1151 and referred to as “Strix Halo”. Of course adding LLVM support does not mean a product is on the way. But it shows AMD is looking very seriously at what they can do with big integrated GPUs. And I look forward to seeing how AMD’s mobile graphics strategy plays out.</p>
<p>Again, we would like to thank ASUS for sending us over a ProArt PX13 for review and if you like our articles and journalism, and you want to support us in our endeavors, then consider heading over to our&nbsp;<a href="https://www.patreon.com/ChipsandCheese">Patreon</a>&nbsp;or our&nbsp;<a href="https://www.paypal.com/donate/?hosted_button_id=4EMPH66SBGVSQ">PayPal</a>&nbsp;if you want to toss a few bucks our way. If you would like to talk with the Chips and Cheese staff and the people behind the scenes, then consider joining our&nbsp;<a href="https://discord.gg/TwVnRhxgY2">Discord</a>.</p>

<div data-post_id="10949" data-instance_id="1" data-additional_class="pp-multiple-authors-layout-boxed.multiple-authors-target-the-content" data-original_class="pp-multiple-authors-boxes-wrapper pp-multiple-authors-wrapper box-post-id-10949 box-instance-id-1">
<p><span>
<ul>
<li>
<div>
<p><img alt="clamchowder" src="https://secure.gravatar.com/avatar/7c39d2e6d35e77c8fd15c4b2d9ce4e64?s=80&amp;d=identicon&amp;r=g" srcset="https://secure.gravatar.com/avatar/7c39d2e6d35e77c8fd15c4b2d9ce4e64?s=160&amp;d=identicon&amp;r=g 2x" height="80" width="80"> </p>
</div>

</li>
</ul>
</span>
</p></div>





</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Telegram CEO Pavel Durov just got arrested in France (967 pts)]]></title>
            <link>https://www.tf1info.fr/justice-faits-divers/info-tf1-lci-le-fondateur-et-pdg-de-la-messagerie-cryptee-telegram-interpelle-en-france-2316072.html</link>
            <guid>41341353</guid>
            <pubDate>Sat, 24 Aug 2024 20:46:00 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tf1info.fr/justice-faits-divers/info-tf1-lci-le-fondateur-et-pdg-de-la-messagerie-cryptee-telegram-interpelle-en-france-2316072.html">https://www.tf1info.fr/justice-faits-divers/info-tf1-lci-le-fondateur-et-pdg-de-la-messagerie-cryptee-telegram-interpelle-en-france-2316072.html</a>, See on <a href="https://news.ycombinator.com/item?id=41341353">Hacker News</a></p>
<div id="readability-page-1" class="page"><p><span data-module="article-header-video"><div><p>Publié le 24 août 2024 à 22h24, mis à jour le 24 août 2024 à 23h03</p></div></span><span data-module="pub"></span><span data-module="pub"></span></p><section data-module="main" data-type="content" aria-label="Contenu principal" id="mainid" role="main" tabindex="-1"><article><h2 data-module="article-chapo"><div><p><span>Selon nos informations, le fondateur et PDG de la messagerie sécurisée Telegram a été interpellé ce samedi soir à l'aéroport du Bourget.</span></p></div><div><p><span>Pavel Durov, franco-russe de 39 ans, était accompagné de son garde du corps et d'une femme.</span></p></div></h2><span data-module="pub"></span><span data-module="article-social-share"></span><span data-module="pub"></span><span data-module="pub"></span><p data-module="article-paragraph">Pavel Durov, le fondateur et PDG de la messagerie chiffrée Telegram, a été interpellé vers 20h ce samedi soir à sa descente de son jet privé sur le tarmac de l'aéroport du Bourget. Âgé de 39 ans, ce franco-russe était accompagné de son garde du corps et d'une femme.&nbsp;</p><p data-module="article-paragraph">L'interpellation a été réalisée par les gendarmes de la GTA (Gendarmerie des transports aériens). Fiché au FPR (fichier des personnes recherchées), Pavel Durov arrivait tout droit d'Azerbaïdjan. Il avait au-dessus de la tête un mandat de recherche français émis par l'OFMIN de la direction nationale de la police judiciaire française, émis sur la base d'une enquête préliminaire.</p><span data-module="promo"></span><h2 data-module="article-extract">Pourquoi était-il sous la menace d'un mandat de recherche ?</h2><p data-module="article-paragraph">La Justice considère que l’absence de modération, de coopération avec les forces de l’ordre et les outils proposés par Telegram (numéro jetable, cryptomonnaies…) le rend complice de trafic de stupéfiants, d’infractions pédocriminels et d’escroquerie.&nbsp;</p><p data-module="article-paragraph">Ce mandat de recherche courait si, et seulement si, Pavel Durov se trouvait sur le territoire national. <em>"Il a commis une boulette ce soir. On ne sait pas pourquoi… Est-ce que ce vol n'était qu'une étape ? En tout cas, il est coffré !"</em>, glisse une source proche de l'enquête à TF1/LCI. Depuis qu'il se savait persona non grata en France, Pavel Durov avait pour habitude de voyager aux Émirats, dans les pays de l'ex-URSS, en Amérique du Sud… Il voyageait très peu en Europe et évitait les pays où Telegram est sous surveillance.</p><span data-module="pub"></span><h2 data-module="article-extract">Et maintenant ?</h2><p data-module="article-paragraph">Les enquêteurs de l'ONAF (Office national antifraude rattachée à la direction des douanes) lui ont notifié et l'ont placé en garde à vue. Il devrait être présenté à un juge d'instruction ce samedi soir avant une possible mise en examen dimanche pour une multitude d'infractions : terrorisme, stupéfiants, complicité, escroquerie, blanchiment, recel, contenus pédocriminels… &nbsp;</p><p data-module="article-paragraph"><em>"Pavel Durov finira en détention provisoire, c'est certain"</em>, commente un enquêteur auprès de TF1/LCI. <em>"Sur sa plateforme, il laissait se commettre un nombre incalculable de délits et de crimes pour lesquels il ne fait rien pour modérer ou coopérer"</em>, analyse une source proche du dossier.&nbsp;</p><p data-module="article-paragraph">Sa détention provisoire à l'issue de sa mise en examen ne fait en effet aucun doute. Pavel Durov, milliardaire, dispose de moyens conséquents pour prendre la fuite et ses garanties de représentation ne vont guère convaincre les juges.&nbsp;</p><span data-module="pub"></span><h2 data-module="article-extract">Un coup de filet à résonance internationale</h2><p data-module="article-paragraph">Pour les enquêteurs, ce coup de filet à résonance internationale à divers objectifs. D'abord, il permet de mettre un coup de pied dans la fourmilière, impressionner et dissuader les auteurs de crimes et délits qui échangent, jusqu'ici librement, sur Telegram. Ensuite, ils visent à mettre la pression sur les pays européens pour accentuer le travail commun pour faire plier la messagerie sécurisée sur les dossiers terroristes.&nbsp;</p><p data-module="article-paragraph">En effet, Telegram est une ruche pour les contenus criminels. En ce moment, la plateforme fait l'actualité avec la diffusion illégale des matchs de Ligue 1. Mais sur cette messagerie chiffrée, de nombreux comptes sont utilisés par la criminalité organisée. Au-delà du terrorisme, les plus dangereux pédocriminels communiquent sur Telegram pour échanger des contenus. <em>"C'est devenu depuis des années LA plateforme numéro 1 pour le crime organisé"</em>, commente un enquêteur.&nbsp;</p></article><span data-module="outbrain"></span><span data-module="article-bounce-folder"><div><h2><p>Sur le<br><strong> même thème</strong></p></h2><p><label for="moreButtonLink" id="MoreLinkArticle__ShowMoreButton"><span>Voir plus</span></label></p></div></span><section data-module="all-news" aria-labelledby=":R1qm4j7a6:"><h2 id=":R1qm4j7a6:"><p>Tout<br><strong> TF1 Info</strong></p></h2><ul id="AllNews__List__0" role="tabpanel" aria-labelledby="onglet-1" tabindex="0"><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li></ul><ul id="AllNews__List__1" role="tabpanel" aria-labelledby="onglet-2" tabindex="0"><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li></ul><ul id="AllNews__List__2" role="tabpanel" aria-labelledby="onglet-3" tabindex="0"><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li><li data-testid="AllNewsItem"></li></ul></section><span data-module="pub"></span></section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NASA Decides to Bring Starliner Spacecraft Back to Earth Without Crew (195 pts)]]></title>
            <link>https://www.nasa.gov/news-release/nasa-decides-to-bring-starliner-spacecraft-back-to-earth-without-crew/</link>
            <guid>41339885</guid>
            <pubDate>Sat, 24 Aug 2024 17:41:48 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.nasa.gov/news-release/nasa-decides-to-bring-starliner-spacecraft-back-to-earth-without-crew/">https://www.nasa.gov/news-release/nasa-decides-to-bring-starliner-spacecraft-back-to-earth-without-crew/</a>, See on <a href="https://news.ycombinator.com/item?id=41339885">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
<p>NASA will return Boeing’s Starliner to Earth without astronauts <a href="https://www.nasa.gov/people/barry-butch-e-wilmore/">Butch Wilmore</a> and <a href="https://www.nasa.gov/people/sunita-l-williams/">Suni Williams</a> aboard the spacecraft, the agency announced Saturday. The uncrewed return allows NASA and Boeing to continue gathering testing data on Starliner during its upcoming flight home, while also not accepting more risk than necessary for its crew.</p>
<p>Wilmore and Williams, who flew to the International Space Station in June aboard NASA’s Boeing Crew Flight Test, have been busy supporting station research, maintenance, and Starliner system testing and data analysis, among other activities.</p>
<p>“Spaceflight is risky, even at its safest and most routine. A test flight, by nature, is neither safe, nor routine. The decision to keep Butch and Suni aboard the International Space Station and bring Boeing’s Starliner home uncrewed is the result of our commitment to safety: our core value and our North Star,” said NASA Administrator Bill Nelson. “I’m grateful to both the NASA and Boeing teams for all their incredible and detailed work.”</p>
<p>Wilmore and Williams will continue their work formally as part of the Expedition 71/72 crew through February 2025. They will fly home aboard a Dragon spacecraft with two other crew members assigned to the agency’s SpaceX Crew-9 mission. Starliner is expected to depart from the space station and make a safe, controlled autonomous re-entry and landing in early September.</p>
<p>NASA and Boeing identified helium leaks and experienced issues with the spacecraft reaction control thrusters on <a href="https://blogs.nasa.gov/commercialcrew/2024/06/06/boeings-crew-flight-test-on-starliner-docks-to-station/" rel="noopener">June 6</a> as Starliner approached the space station. Since then, engineering teams have completed a <a href="https://blogs.nasa.gov/commercialcrew/2024/07/30/nasa-boeing-complete-second-docked-starliner-hot-fire-test/" rel="noopener">significant amount of work</a>, including reviewing a collection of data, conducting flight and ground testing, hosting independent reviews with agency propulsion experts, and developing various return contingency plans. The uncertainty and lack of expert concurrence does not meet the agency’s safety and performance requirements for human spaceflight, thus prompting NASA leadership to move the astronauts to the Crew-9 mission.</p>
<p>“Decisions like this are never easy, but I want to commend our NASA and Boeing teams for their thorough analysis, transparent discussions, and focus on safety during the Crew Flight Test,” said Ken Bowersox, associate administrator for NASA’s Space Operations Mission Directorate. “We’ve learned a lot about the spacecraft during its journey to the station and its docked operations. We also will continue to gather more data about Starliner during the uncrewed return and improve the system for future flights to the space station.”</p>

<p>Starliner is designed to operate autonomously and previously completed two uncrewed flights. NASA and Boeing will work together to adjust end-of-mission planning and Starliner’s systems to set up for the uncrewed return in the coming weeks. Starliner must return to Earth before the Crew-9 mission launches to ensure a docking port is available on station.</p>
<p>“Starliner is a very capable spacecraft and, ultimately, this comes down to needing a higher level of certainty to perform a crewed return,” said Steve Stich, manager of NASA’s Commercial Crew Program. “The NASA and Boeing teams have completed a tremendous amount of testing and analysis, and this flight test is providing critical information on Starliner’s performance in space. Our efforts will help prepare for the uncrewed return and will greatly benefit future corrective actions for the spacecraft.”</p>
<p>NASA’s Commercial Crew Program requires spacecraft fly a crewed test flight to prove the system is ready for regular flights to and from the space station. Following Starliner’s return, the agency will review all mission-related data to inform what additional actions are required to meet NASA’s certification requirements.</p>
<p>The agency’s SpaceX Crew-9 mission, <a href="https://www.nasa.gov/news-release/nasa-shares-assignments-for-its-spacex-crew-9-space-station-mission/">originally slated with four crew members</a>, will launch no earlier than Tuesday, Sept. 24. The agency will share more information about the Crew-9 complement when details are finalized.&nbsp;</p>
<p>NASA and SpaceX currently are working several items before launch, including reconfiguring seats on the Crew-9 Dragon, and adjusting the manifest to carry additional cargo, personal effects, and Dragon-specific spacesuits for Wilmore and Williams. In addition, NASA and SpaceX now will use new facilities at Space Launch Complex-40 at Cape Canaveral Space Force Station in Florida to launch Crew-9, which provides increased operational flexibility around NASA’s planned <a href="https://europa.nasa.gov/" rel="noopener">Europa Clipper</a> launch.</p>
<p>The Crew-9 mission will be the ninth rotational mission to the space station under NASA’s Commercial Crew Program, which works with the American aerospace industry to meet the goal of safe, reliable, and cost-effective transportation to and from the orbital outpost on American-made rockets and spacecraft launching from American soil.</p>
<p>For more than two decades, people have lived and worked continuously aboard the International Space Station, advancing scientific knowledge and demonstrating new technologies, making research breakthroughs not possible on Earth. The station is a critical testbed for NASA to understand and overcome the challenges of long-duration spaceflight and to expand commercial opportunities in low Earth orbit. As commercial companies focus on providing human space transportation services and destinations as part of a robust <a href="https://www.nasa.gov/leo-economy/low-earth-orbit-economy">low Earth orbit economy</a>, NASA’s Artemis campaign is underway at the Moon where the agency is preparing for future human exploration of Mars.</p>
<p>Find more information on NASA’s Commercial Crew Program at:</p>
<p><a href="https://www.nasa.gov/commercialcrew"><strong>https://www.nasa.gov/commercialcrew</strong></a></p>
<p>-end-&nbsp;</p>
<p>Meira Bernstein / Josh Finch<br>Headquarters, Washington<br>202-358-1100<br><a href="mailto:meira.b.bernstein@nasa.gov">meira.b.bernstein@nasa.gov</a> / <a href="mailto:joshua.a.finch@nasa.gov">joshua.a.finch@nasa.gov</a></p>
<p>Steve Siceloff / Danielle Sempsrott / Stephanie Plucinsky<br>Kennedy Space Center, Florida<br>321-867-2468<br><a href="mailto:steven.p.siceloff@nasa.gov">steven.p.siceloff@nasa.gov</a> / <a href="mailto:danielle.c.sempsrott@nasa.gov">danielle.c.sempsrott@nasa.gov</a> / <a href="mailto:stephanie.n.plucinsky@nasa.gov">stephanie.n.plucinsky@nasa.gov</a></p>
<p>Leah Cheshier / Sandra Jones<br>Johnson Space Center, Houston<br>281-483-5111<br><a href="mailto:leah.d.cheshier@nasa.gov">leah.d.cheshier@nasa.gov</a> / <a href="mailto:sandra.p.jones@nasa.gov">sandra.p.jones@nasa.gov</a></p>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Golang Interpreter Written in PHP (143 pts)]]></title>
            <link>https://github.com/tuqqu/go-php</link>
            <guid>41339818</guid>
            <pubDate>Sat, 24 Aug 2024 17:34:13 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/tuqqu/go-php">https://github.com/tuqqu/go-php</a>, See on <a href="https://news.ycombinator.com/item?id=41339818">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Go-PHP</h2><a id="user-content-go-php" aria-label="Permalink: Go-PHP" href="#go-php"></a></p>
<p dir="auto">Golang interpreter written in PHP.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Example</h2><a id="user-content-example" aria-label="Permalink: Example" href="#example"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="use GoPhp\Interpreter;

$interp = Interpreter::create(<<<GO
    package main
    
    type person struct {
        name string
        age  int
    }
    
    func newPerson(name string) *person {
        p := person{name: name}
        p.age = 42

        return &amp;p
    }

    func main() {
        s := newPerson(&quot;John Doe&quot;)
    
        println(&quot;Hello, &quot; + s.name)
    }
GO);

$result = $interp->run();"><pre><span>use</span> <span>GoPhp</span>\<span>Interpreter</span>;

<span><span>$</span>interp</span> = <span>Interpreter</span>::<span>create</span>(<span>&lt;&lt;&lt;GO<span></span></span>
<span><span><span>    package main</span></span></span>
<span><span><span>    </span></span></span>
<span><span><span>    type person struct {</span></span></span>
<span><span><span>        name string</span></span></span>
<span><span><span>        age  int</span></span></span>
<span><span><span>    }</span></span></span>
<span><span><span>    </span></span></span>
<span><span><span>    func newPerson(name string) *person {</span></span></span>
<span><span><span>        p := person{name: name}</span></span></span>
<span><span><span>        p.age = 42</span></span></span>
<span><span></span></span>
<span><span><span>        return &amp;p</span></span></span>
<span><span><span>    }</span></span></span>
<span><span></span></span>
<span><span><span>    func main() {</span></span></span>
<span><span><span>        s := newPerson("John Doe")</span></span></span>
<span><span><span>    </span></span></span>
<span><span><span>        println("Hello, " + s.name)</span></span></span>
<span><span><span>    }</span></span></span>
<span>GO</span>);

<span><span>$</span>result</span> = <span><span>$</span>interp</span>-&gt;<span>run</span>();</pre></div>
<p dir="auto">See <a href="https://github.com/tuqqu/go-php/blob/main/examples">examples</a> for more.
To run examples:</p>
<div data-snippet-clipboard-copy-content="cd ./examples/{name}
php main.php"><pre><code>cd ./examples/{name}
php main.php
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">WIP</h2><a id="user-content-wip" aria-label="Permalink: WIP" href="#wip"></a></p>
<p dir="auto">This is a toy project, not intended for production use.</p>
<p dir="auto">To see what is already implemented, refer to <a href="https://github.com/tuqqu/go-php/blob/main/tests/Functional/files">tests</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Development</h2><a id="user-content-development" aria-label="Permalink: Development" href="#development"></a></p>
<p dir="auto">install dependencies:</p>

<p dir="auto">run tests:</p>

<p dir="auto">run <code>make help</code> for more commands.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Differences from the Go compiler</h2><a id="user-content-differences-from-the-go-compiler" aria-label="Permalink: Differences from the Go compiler" href="#differences-from-the-go-compiler"></a></p>
<ul dir="auto">
<li>No support for real goroutines, go statements run sequentially</li>
</ul>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[NASA announces Boeing Starliner crew will return on SpaceX Crew-9 (475 pts)]]></title>
            <link>https://twitter.com/NASA/status/1827393397939634503</link>
            <guid>41339667</guid>
            <pubDate>Sat, 24 Aug 2024 17:14:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://twitter.com/NASA/status/1827393397939634503">https://twitter.com/NASA/status/1827393397939634503</a>, See on <a href="https://news.ycombinator.com/item?id=41339667">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[JavaScript dates are about to be fixed (349 pts)]]></title>
            <link>https://docs.timetime.in/blog/js-dates-finally-fixed</link>
            <guid>41339493</guid>
            <pubDate>Sat, 24 Aug 2024 16:47:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://docs.timetime.in/blog/js-dates-finally-fixed">https://docs.timetime.in/blog/js-dates-finally-fixed</a>, See on <a href="https://news.ycombinator.com/item?id=41339493">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="__blog-post-container">
<p>Of all the recent changes coming to ECMAScript, my favorite by far is the <a href="https://github.com/tc39/proposal-temporal" target="_blank" rel="noopener noreferrer">Temporal proposal</a>. This proposal is very advanced, and we can already use this API through the <a href="https://github.com/fullcalendar/temporal-polyfill" target="_blank" rel="noopener noreferrer">polyfill provided by the FullCalendar team</a>.</p>
<p>This API is so incredible that I will likely dedicate several blog posts to highlighting its key features. However, in this first post, I will focus on explaining one of its main advantages: <strong>we finally have a native object to represent a "Zoned Date Time"</strong>.</p>
<p>But... What is a "Zoned Date Time"?</p>

<p>Well, when we talk about <em>human dates</em>, we usually say something like, "I have a doctor's appointment on August 4th, 2024, at 10:30 AM," but we omit the time zone. This omission makes sense because, generally, our interlocutor knows us and understands that when I talk about dates, I usually do so in the context of my time zone, Europe/Madrid.</p>
<p>Unfortunately, with computers, this is not the case. When we work with "Date" objects in JavaScript we are dealing with plain numbers.</p>
<p>If we read the <a href="https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-time-values-and-time-range" target="_blank" rel="noopener noreferrer">official specification</a>, it states:</p>
<blockquote>
<p><em>"An ECMAScript time value is a Number, either a finite integral Number representing an instant in time to millisecond precision or NaN representing no specific instant"</em></p>
</blockquote>
<p>Aside from the VERY IMPORTANT fact that dates in JavaScript are not UTC but POSIX, where leap seconds are completely ignored, the problem with having only numbers is that the original semantics of the date are lost. This is becaus given an human date we can get the equivalent js date but not the other way arround.</p>
<p>Let's consider an example: suppose I want to record the moment I make a payment with my card. Many people might be tempted to do something like this:</p>
<div><pre tabindex="0"><code><span><span>const</span><span> paymentDate </span><span>=</span><span> </span><span>new</span><span> </span><span>Date</span><span>(</span><span>'2024-07-20T10:30:00'</span><span>)</span><span>;</span><br></span></code></pre></div>
<p>Since my browser is on an <code>CET</code> timezone, when I write this the browser just <em>"computes the number of milliseconds since the EPOX given this CET instant"</em></p>
<p>This is what we actually store in a date:</p>
<div><pre tabindex="0"><code><span><span>paymentDate</span><span>.</span><span>getTime</span><span>(</span><span>)</span><span>;</span><span></span><br></span><span><span></span><span>// 1721464200000</span><br></span></code></pre></div>
<p>This means that depending on how you read this information you will get a different "human date":</p>
<p>If we read this from the CET perspective I get 10:30:</p>
<div><pre tabindex="0"><code><span><span>d</span><span>.</span><span>toLocaleString</span><span>(</span><span>)</span><span></span><br></span><span><span></span><span>// '20/07/2024, 10:30:00'</span><br></span></code></pre></div>
<p>and if we read this from the ISO perspective we get 8:30:</p>
<div><pre tabindex="0"><code><span><span>d</span><span>.</span><span>toISOString</span><span>(</span><span>)</span><span></span><br></span><span><span></span><span>// '2024-07-20T08:30:00.000Z'</span><br></span></code></pre></div>
<p>Many people think that by working with UTC or communicating dates in ISO format, they are safe; however, <strong>this is not correct, as information is still lost.</strong></p>

<p>Even when working with dates on an ISO format, including the offset, the next time we want to display that date, we only know the number of milliseconds that have passed since the UNIX epoch and the offset. But this is still not enough to know the human moment and time zone in which the payment was made.</p>
<p>Strictly speaking, given a timestamp <code>t0</code>, we can obtain <code>n</code> human-readable dates that represent it...</p>
<!-- -->
<p>In other words, the function responsible for transforming a timestamp into a human-readable date is not <a href="https://en.wikipedia.org/wiki/Injective_function" target="_blank" rel="noopener noreferrer">injective</a>, as each element of the set of timestamps corresponds to more than one element of the "human dates" set.</p>
<!-- -->
<p>This happens in exactly the same way when storing ISO dates, as timestamps and ISO are two representations of the same instant:</p>
<!-- -->
<p>And this <strong>also happens if you work with offsets</strong> because different timezones might have the same offset.</p>
<!-- -->
<p>If you still don't see the problem clearly, let me illustrate it with an example. Imagine you live in Madrid and take a trip to Sydney.</p>
<p>A few weeks later, you return to Madrid and see a charge on your transaction statement that you don't recognize... a charge of 3.50 at 2 AM on the 16th? What was I doing? That night I went to bed early!... I don't understand.</p>
<p>After a while of being worried, you realize that the charge corresponds to the coffee you had the following morning since, as you've read this article, you've deduced that your bank stores all transactions in UTC, and the application translates them to the phone's time zone.</p>
<p>This may end up as an anecdote, but what if your bank applies a promotion of one free cash withdrawal per day? When does that day start and end? UTC? Australia?... Things get complicated, believe me...</p>
<p>At this point, I hope you're convinced that working with only timestamps is a problem that, fortunately, now has a solution.</p>

<p>In addition to many other things, the new Temporal API introduces a <a href="https://tc39.es/proposal-temporal/docs/zoneddatetime.html" target="_blank" rel="noopener noreferrer">Temporal.ZonedDateTime</a> object specifically designed to represent dates and times with their corresponding time zone. They have also proposed an <a href="https://datatracker.ietf.org/doc/rfc9557/" target="_blank" rel="noopener noreferrer">extension to RFC 3339</a> to standardize the serialization and deserialization of strings representing dates:</p>
<p><img src="https://tc39.es/proposal-temporal/docs/persistence-model.svg" alt="" title="String spec"></p><p>As an example:</p>
<div><pre tabindex="0"><code><span><span>   1996-12-19T16:39:57-08:00[America/Los_Angeles]</span><br></span></code></pre></div>
<p>This string represents 39 minutes and 57 seconds after the 16th hour of December 19, 1996, with an offset of -08:00 from UTC, and additionally specifies the human time zone associated with it ("Pacific Time") for time-zone-aware applications to take into account.</p>
<p>Additionally, this API allows working with different calendars such as:</p>
<ul>
<li>buddhist</li>
<li>chinese</li>
<li>coptic</li>
<li>dangi</li>
<li>ethioaa</li>
<li>ethiopic</li>
<li>gregory</li>
<li>hebrew</li>
<li>indian</li>
<li>islamic</li>
<li>islamic-umalqura</li>
<li>islamic-tbla</li>
<li>islamic-civil</li>
<li>islamic-rgsa</li>
<li>japanese</li>
<li>persian</li>
<li>roc</li>
</ul>
<p>Among all these, the most common will be <code>iso8601</code> (the standard adaptation of the Gregorian calendar) with which you will work most frequently.</p>
<h3 id="basic-operations">Basic operations<a href="#basic-operations" aria-label="Direct link to Basic operations" title="Direct link to Basic operations">​</a></h3>
<h4 id="creating-dates">Creating Dates<a href="#creating-dates" aria-label="Direct link to Creating Dates" title="Direct link to Creating Dates">​</a></h4>
<p>The Temporal API offers a significant advantage when creating dates, particularly with its Temporal.ZonedDateTime object. One of the standout features is its ability to effortlessly handle time zones, including those tricky situations involving Daylight Saving Time (DST). For example, when you create a Temporal.ZonedDateTime object like this:</p>
<div><pre tabindex="0"><code><span><span>const</span><span> zonedDateTime </span><span>=</span><span> Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>from</span><span>(</span><span>{</span><span></span><br></span><span><span>  year</span><span>:</span><span> </span><span>2024</span><span>,</span><span></span><br></span><span><span>  month</span><span>:</span><span> </span><span>8</span><span>,</span><span></span><br></span><span><span>  day</span><span>:</span><span> </span><span>16</span><span>,</span><span></span><br></span><span><span>  hour</span><span>:</span><span> </span><span>12</span><span>,</span><span></span><br></span><span><span>  minute</span><span>:</span><span> </span><span>30</span><span>,</span><span></span><br></span><span><span>  second</span><span>:</span><span> </span><span>0</span><span>,</span><span></span><br></span><span><span>  timeZone</span><span>:</span><span> </span><span>'Europe/Madrid'</span><span></span><br></span><span><span></span><span>}</span><span>)</span><span>;</span><br></span></code></pre></div>
<p>You’re not just setting a date and time; you're ensuring that this date is accurately represented within the specified time zone. This precision means that regardless of DST changes or any other local time adjustments, your date will always reflect the correct moment in time.</p>
<p>This feature is especially powerful when scheduling events or logging actions that need to be consistent across different regions. By incorporating the time zone directly into the date creation process, Temporal eliminates the common pitfalls of working with traditional Date objects, such as unexpected shifts in time due to DST or time zone differences. This makes Temporal not just a convenience but a necessity for modern web development where global time consistency is crucial.</p>
<p>If you are curious about why this API is great read <a href="https://tc39.es/proposal-temporal/docs/ambiguity.html#ambiguity-caused-by-permanent-changes-to-a-time-zone-definition" target="_blank" rel="noopener noreferrer">this article explaining how to deal with changes on Time Zone definitions</a>.</p>
<h4 id="comparing-dates">Comparing dates<a href="#comparing-dates" aria-label="Direct link to Comparing dates" title="Direct link to Comparing dates">​</a></h4>
<p>ZonedDateTime offers an static method named <code>compare</code> which given 2 ZonedDateTimes one and two will return:</p>
<ul>
<li><code>−1</code> if one is less than two</li>
<li><code>0</code> if the two instances describe the same exact instant, ignoring the time zone and calendar</li>
<li><code>1</code> if one is greater than two.</li>
</ul>
<p>You can easily compare dates on unusual cases like the repeated clock hour after DST ends, values that are later in the real world can be earlier in clock time, or vice versa:</p>
<div><pre tabindex="0"><code><span><span>const</span><span> one </span><span>=</span><span> Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>from</span><span>(</span><span>'2020-11-01T01:45-07:00[America/Los_Angeles]'</span><span>)</span><span>;</span><span></span><br></span><span><span></span><span>const</span><span> two </span><span>=</span><span> Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>from</span><span>(</span><span>'2020-11-01T01:15-08:00[America/Los_Angeles]'</span><span>)</span><span>;</span><span></span><br></span><span><span></span><br></span><span><span>Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>compare</span><span>(</span><span>one</span><span>,</span><span> two</span><span>)</span><span>;</span><span></span><br></span><span><span>  </span><span>// =&gt; -1</span><span></span><br></span><span><span>  </span><span>// (because `one` is earlier in the real world)</span><br></span></code></pre></div>
<h4 id="cool-built-ins">Cool built-ins<a href="#cool-built-ins" aria-label="Direct link to Cool built-ins" title="Direct link to Cool built-ins">​</a></h4>
<p>A ZonedDateTime has some precomputed attributes that will make your life easier, for example:</p>
<p><strong><code>hoursInDay</code></strong></p>
<p>The hoursInDay read-only property returns the number of real-world hours between the start of the current day (usually midnight) in zonedDateTime.timeZone to the start of the next calendar day in the same time zone.</p>
<div><pre tabindex="0"><code><span><span>Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>from</span><span>(</span><span>'2020-01-01T12:00-08:00[America/Los_Angeles]'</span><span>)</span><span>.</span><span>hoursInDay</span><span>;</span><span></span><br></span><span><span>  </span><span>// =&gt; 24</span><span></span><br></span><span><span>  </span><span>// (normal day)</span><span></span><br></span><span><span>Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>from</span><span>(</span><span>'2020-03-08T12:00-07:00[America/Los_Angeles]'</span><span>)</span><span>.</span><span>hoursInDay</span><span>;</span><span></span><br></span><span><span>  </span><span>// =&gt; 23</span><span></span><br></span><span><span>  </span><span>// (DST starts on this day)</span><span></span><br></span><span><span>Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>from</span><span>(</span><span>'2020-11-01T12:00-08:00[America/Los_Angeles]'</span><span>)</span><span>.</span><span>hoursInDay</span><span>;</span><span></span><br></span><span><span>  </span><span>// =&gt; 25</span><span></span><br></span><span><span>  </span><span>// (DST ends on this day)</span><br></span></code></pre></div>
<p>Another cool attributes are <a href="https://tc39.es/proposal-temporal/docs/zoneddatetime.html#daysInYear" target="_blank" rel="noopener noreferrer">daysInYear</a>, <a href="https://tc39.es/proposal-temporal/docs/zoneddatetime.html#inLeapYear" target="_blank" rel="noopener noreferrer">inLeapYear</a></p>
<h4 id="transforming-timezones">Transforming timezones<a href="#transforming-timezones" aria-label="Direct link to Transforming timezones" title="Direct link to Transforming timezones">​</a></h4>
<p>ZonedDateTimes offer a <code>.withTimeZone</code> method which allows to change a ZonedDateTime as we desire:</p>
<div><pre tabindex="0"><code><span><span>zdt </span><span>=</span><span> Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>from</span><span>(</span><span>'1995-12-07T03:24:30+09:00[Asia/Tokyo]'</span><span>)</span><span>;</span><span></span><br></span><span><span>zdt</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span><span> </span><span>// =&gt; '1995-12-07T03:24:30+09:00[Asia/Tokyo]'</span><span></span><br></span><span><span>zdt</span><span>.</span><span>withTimeZone</span><span>(</span><span>'Africa/Accra'</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span><span> </span><span>// =&gt; '1995-12-06T18:24:30+00:00[Africa/Accra]'</span><br></span></code></pre></div>
<h4 id="basic-arithmetics">Basic arithmetics<a href="#basic-arithmetics" aria-label="Direct link to Basic arithmetics" title="Direct link to Basic arithmetics">​</a></h4>
<p>We can use the <code>.add</code> method to add the date portion of a duration using calendar arithmetics. The result will automatically adjust for Daylight Saving Time using the rules of this instance's timeZone field.</p>
<p>The <strong>GREAT PART</strong> of this is that it supports playing with calendar arithmetics or plain durations.</p>
<ul>
<li>Adding or subtracting days should keep clock time consistent across DST transitions. For example, if you have an appointment on Saturday at 1:00PM and you ask to reschedule it 1 day later, you would expect the reschedule appointment to still be at 1:00PM, even if there was a DST transition overnight.</li>
<li>Adding or subtracting the time portion of a duration should ignore DST transitions. For example, a friend you've asked to meet in in 2 hours will be annoyed if you show up 1 hour or 3 hours later.</li>
<li>There should be a consistent and relatively-unsurprising order of operations. If results are at or near a DST transition, ambiguities should be handled automatically (no crashing) and deterministically.</li>
</ul>
<div><pre tabindex="0"><code><span><span>zdt </span><span>=</span><span> Temporal</span><span>.</span><span>ZonedDateTime</span><span>.</span><span>from</span><span>(</span><span>'2020-03-08T00:00-08:00[America/Los_Angeles]'</span><span>)</span><span>;</span><span></span><br></span><span><span></span><span>// Add a day to get midnight on the day after DST starts</span><span></span><br></span><span><span>laterDay </span><span>=</span><span> zdt</span><span>.</span><span>add</span><span>(</span><span>{</span><span> days</span><span>:</span><span> </span><span>1</span><span> </span><span>}</span><span>)</span><span>;</span><span></span><br></span><span><span>  </span><span>// =&gt; 2020-03-09T00:00:00-07:00[America/Los_Angeles]</span><span></span><br></span><span><span>  </span><span>// Note that the new offset is different, indicating the result is adjusted for DST.</span><span></span><br></span><span><span>laterDay</span><span>.</span><span>since</span><span>(</span><span>zdt</span><span>,</span><span> </span><span>{</span><span> largestUnit</span><span>:</span><span> </span><span>'hour'</span><span> </span><span>}</span><span>)</span><span>.</span><span>hours</span><span>;</span><span></span><br></span><span><span>  </span><span>// =&gt; 23</span><span></span><br></span><span><span>  </span><span>// because one clock hour lost to DST</span><span></span><br></span><span><span></span><br></span><span><span>laterHours </span><span>=</span><span> zdt</span><span>.</span><span>add</span><span>(</span><span>{</span><span> hours</span><span>:</span><span> </span><span>24</span><span> </span><span>}</span><span>)</span><span>;</span><span></span><br></span><span><span>  </span><span>// =&gt; 2020-03-09T01:00:00-07:00[America/Los_Angeles]</span><span></span><br></span><span><span>  </span><span>// Adding time units doesn't adjust for DST. Result is 1:00AM: 24 real-world</span><span></span><br></span><span><span>  </span><span>// hours later because a clock hour was skipped by DST.</span><span></span><br></span><span><span>laterHours</span><span>.</span><span>since</span><span>(</span><span>zdt</span><span>,</span><span> </span><span>{</span><span> largestUnit</span><span>:</span><span> </span><span>'hour'</span><span> </span><span>}</span><span>)</span><span>.</span><span>hours</span><span>;</span><span> </span><span>// =&gt; 24</span><br></span></code></pre></div>
<h4 id="computing-differences-between-dates">Computing differences between dates.<a href="#computing-differences-between-dates" aria-label="Direct link to Computing differences between dates." title="Direct link to Computing differences between dates.">​</a></h4>
<p>Temporal offers a method named <code>.until</code> which computes the difference between the two times represented by zonedDateTime and other, optionally rounds it, and returns it as a Temporal.Duration object. If other is earlier than zonedDateTime then the resulting duration will be negative. If using the default options, adding the returned Temporal.Duration to zonedDateTime will yield other.</p>
<p>This might look like an obvious operation but I encourage you to <a href="https://tc39.es/proposal-temporal/docs/zoneddatetime.html#until" target="_blank" rel="noopener noreferrer">read the full spec</a> to understand the nuances of it.</p>

<p>The Temporal API represents a revolutionary shift in how time is handled in JavaScript, making it one of the few languages that address this issue comprehensively. In this article, we've only scratched the surface by discussing the difference between human-readable dates (or wall clock time) and UTC dates, and how the Temporal.ZonedDateTime object can be used to accurately represent the former.</p>
<p>In future articles, we'll explore other fascinating objects such as Instant, PlainDate, and Duration.</p>
<p>I hope you enjoyed this introduction.</p>
<p>Happy coding! :)</p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Show HN: Visualize database schemas with a single query (171 pts)]]></title>
            <link>https://github.com/chartdb/chartdb</link>
            <guid>41339308</guid>
            <pubDate>Sat, 24 Aug 2024 16:23:46 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/chartdb/chartdb">https://github.com/chartdb/chartdb</a>, See on <a href="https://news.ycombinator.com/item?id=41339308">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h2 tabindex="-1" dir="auto">
  <a href="https://chartdb.io/" rel="nofollow"><img src="https://github.com/chartdb/chartdb/raw/main/src/assets/logo.png?raw=true" width="400" height="70" alt="ChartDB"></a>
<br>
</h2><a id="user-content---" aria-label="Permalink: " href="#--"></a></div>
<p dir="auto">
  <b>Open-source database diagrams editor</b> <br>
  <b>No installations • No Database password required.</b> <br>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">
  <a href="https://join.slack.com/t/chartdb/shared_invite/zt-2ourrlh5e-mKIHCRML3_~m_gHjD5EcUg" rel="nofollow">Community</a>  •
  <a href="https://www.chartdb.io/" rel="nofollow">Website</a>  •
  <a href="https://app.chartdb.io/" rel="nofollow">Demo</a>
</h3><a id="user-content---community----website----demo" aria-label="Permalink: Community  •
  Website  •
  Demo" href="#--community----website----demo"></a></p>

<hr>
<p dir="auto">
  <a target="_blank" rel="noopener noreferrer" href="https://github.com/chartdb/chartdb/blob/main/public/ChartDB.png"><img width="700px" src="https://github.com/chartdb/chartdb/raw/main/public/ChartDB.png"></a>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">🎉 ChartDB</h3><a id="user-content--chartdb" aria-label="Permalink: 🎉 ChartDB" href="#-chartdb"></a></p>
<p dir="auto">ChartDB is a powerful, web-based database diagramming editor.
Instantly visualize your database schema with a single <strong>"Smart Query."</strong> Customize diagrams, export SQL scripts, and access all features—no account required. Experience seamless database design here.</p>
<p dir="auto"><strong>What it does</strong>:</p>
<ul dir="auto">
<li>
<p dir="auto"><strong>Instant Schema Import</strong>
Run a single query to instantly retrieve your database schema as JSON. This makes it incredibly fast to visualize your database schema, whether for documentation, team discussions, or simply understanding your data better.</p>
</li>
<li>
<p dir="auto"><strong>AI-Powered Export for Easy Migration</strong>
Our AI-driven export feature allows you to generate the DDL script in the dialect of your choice. Whether you’re migrating from MySQL to PostgreSQL or from SQLite to MariaDB, ChartDB simplifies the process by providing the necessary scripts tailored to your target database.</p>
</li>
<li>
<p dir="auto"><strong>Interactive Editing</strong>
Fine-tune your database schema using our intuitive editor. Easily make adjustments or annotations to better visualize complex structures.</p>
</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Status</h3><a id="user-content-status" aria-label="Permalink: Status" href="#status"></a></p>
<p dir="auto">ChartDB is currently in Public Beta. Star and watch this repository to get notified of updates.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Getting Started</h2><a id="user-content-getting-started" aria-label="Permalink: Getting Started" href="#getting-started"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">How To Use</h3><a id="user-content-how-to-use" aria-label="Permalink: How To Use" href="#how-to-use"></a></p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Build</h3><a id="user-content-build" aria-label="Permalink: Build" href="#build"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="npm install
npm run build"><pre>npm install
npm run build</pre></div>
<p dir="auto">Or like this if you want to have AI capabilities:</p>
<div data-snippet-clipboard-copy-content="npm install
VITE_OPENAI_API_KEY=<YOUR_OPEN_AI_KEY> npm run build"><pre><code>npm install
VITE_OPENAI_API_KEY=&lt;YOUR_OPEN_AI_KEY&gt; npm run build
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Try it on our website</h2><a id="user-content-try-it-on-our-website" aria-label="Permalink: Try it on our website" href="#try-it-on-our-website"></a></p>
<ol dir="auto">
<li>Go to <a href="https://chartdb.io/" rel="nofollow">ChartDB.io</a></li>
<li>Click "Go to app"</li>
<li>Choose the database that you are using.</li>
<li>Take the magic query and run it in your database.</li>
<li>Copy and paste the resulting JSON set into ChartDB.</li>
<li>Enjoy Viewing &amp; Editing!</li>
</ol>
<p dir="auto"><h3 tabindex="-1" dir="auto">Supported Databases</h3><a id="user-content-supported-databases" aria-label="Permalink: Supported Databases" href="#supported-databases"></a></p>
<ul dir="auto">
<li>✅ PostgreSQL</li>
<li>✅ MySQL</li>
<li>✅ SQL Server</li>
<li>✅ MariaDB</li>
<li>✅ SQLite</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">💚 Community &amp; Support</h2><a id="user-content--community--support" aria-label="Permalink: 💚 Community &amp; Support" href="#-community--support"></a></p>
<ul dir="auto">
<li><a href="https://join.slack.com/t/chartdb/shared_invite/zt-2ourrlh5e-mKIHCRML3_~m_gHjD5EcUg" rel="nofollow">Slack</a> (For live discussion with the community and the ChartDB team)</li>
<li><a href="https://github.com/chartdb/chartdb/issues">GitHub Issues</a> (For any bugs and errors you encounter using ChartDB)</li>
<li><a href="https://x.com/chartdb_io" rel="nofollow">Twitter</a> (Get news fast)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Contributing</h2><a id="user-content-contributing" aria-label="Permalink: Contributing" href="#contributing"></a></p>
<p dir="auto">We welcome community contributions, big or small, and are here to guide you along
the way. Message us in the <a href="https://join.slack.com/t/chartdb/shared_invite/zt-2ourrlh5e-mKIHCRML3_~m_gHjD5EcUg" rel="nofollow">ChartDB Community Slack</a>. Once you contribute, ping us in Slack and we'll send you some ChartDB swag!</p>
<p dir="auto">For more information on how to contribute, please see our
<a href="https://github.com/chartdb/chartdb/blob/main/CONTRIBUTING.md">Contributing Guide</a>.</p>
<p dir="auto">This project is released with a <a href="https://github.com/chartdb/chartdb/blob/main/CODE_OF_CONDUCT.md">Contributor Code of Conduct</a>.
By participating in this project, you agree to follow its terms.</p>
<p dir="auto">Thank you for helping us make ChartDB better for everyone ❤️.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">ChartDB is licensed under the <a href="https://github.com/chartdb/chartdb/blob/main/LICENSE">GNU Affero General Public License v3.0</a></p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Pipe Syntax in SQL (251 pts)]]></title>
            <link>https://research.google/pubs/sql-has-problems-we-can-fix-them-pipe-syntax-in-sql/</link>
            <guid>41338877</guid>
            <pubDate>Sat, 24 Aug 2024 15:15:04 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://research.google/pubs/sql-has-problems-we-can-fix-them-pipe-syntax-in-sql/">https://research.google/pubs/sql-has-problems-we-can-fix-them-pipe-syntax-in-sql/</a>, See on <a href="https://news.ycombinator.com/item?id=41338877">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page-content">
        
    


<div data-gt-id="basic_hero" data-gt-component-name="">
                    
                    
                    
                    
                    
                    
                    <p>
                        
                        Shannon Bales
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Matthew Brown
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Jean-Daniel Browne
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Brandon Dolphin
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Romit Kudtarkar
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Andrey Litvinov
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Jingchi Ma
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        John Morcos
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Michael Shen
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        David Wilhite
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Xi Wu
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        
                        Lulan Yu
                        
                    </p>
                    
                    
                    
                    
                    <p>
                        Proc. VLDB Endow.(2024), pp. 4051-4063 (to appear)
                    </p>
                    
                </div>
    <div>
            <p>
                <h3>Abstract</h3>
            </p>
            <div><p>
                SQL has been extremely successful as the de facto standard language for working with data. Virtually all mainstream database-like systems use SQL as their primary query language. But SQL is an old language with significant design problems, making it difficult to learn, difficult to use, and difficult to extend. Many have observed these challenges with SQL, and proposed solutions involving new languages. New language adoption is a significant obstacle for users, and none of the potential replacements have been successful enough to displace SQL.</p><p>In GoogleSQL, we’ve taken a different approach - solving SQL’s problems by extending SQL. Inspired by a pattern that works well in other modern data languages, we added piped data flow syntax to SQL. The results are transformative - SQL becomes a flexible language that’s easier to learn, use and extend, while still leveraging the existing SQL ecosystem and existing userbase. Improving SQL from within allows incrementally adopting new features, without migrations and without learning a new language, making this a more productive approach to improve on standard SQL.
            </p></div>
        </div>

    <div>
            <p>
                <h3>Research Areas</h3>
            </p>
            
        </div>
















    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Small Strings in Rust: smolstr vs. smartstring (168 pts)]]></title>
            <link>https://fasterthanli.me/articles/small-strings-in-rust</link>
            <guid>41338776</guid>
            <pubDate>Sat, 24 Aug 2024 14:58:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fasterthanli.me/articles/small-strings-in-rust">https://fasterthanli.me/articles/small-strings-in-rust</a>, See on <a href="https://news.ycombinator.com/item?id=41338776">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        

    





        

        
            
            
                

    <p><span>
            Jul  5, 2020
        </span>
        

        
            
                <span>
                    <img id="clock-icon" src="https://cdn.fasterthanli.me/static/img/clock~3a596efef3def988.svg" alt="clock icon" width="16" height="16">
                    <abbr title="At 220 words per minute, where one word = 5 characters">
                        34 minute read
                    </abbr>
                </span>
            
        

        
        
            <span>
                
                    
                        <span><a href="https://fasterthanli.me/tags/rust">#rust</a></span>
                    
                
            </span>
        

        

        
        
            
        
        
    </p>





        <!-- page_html starts -->
        <p>Hey everyone!</p><p>This article is brought to you by a <a href="https://twitter.com/killercup/status/1279432235133870082">shameless nerd
snipe</a>, courtesy of
Pascal.</p><p>In case you've blocked Twitter for your own good, this reads:</p><blockquote><p>There should be a post explaining and comparing
<a href="https://crates.io/crates/smol_str">smolstr</a> and <a href="https://crates.io/crates/smartstring">smartstring</a> (and
maybe others, like smallstr)</p></blockquote><p>Well, I took the bait.</p><p>But, since this is me writing, I get to set the rules:</p><ul><li>There will be no "maybe others" - we'll review just the first two</li><li>We're going to allow ourselves at least three digressions.</li></ul><p>Let's get started - there is much to do.</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo new small
     Created binary (application) `small` package
</pre></div><h2><a id="scaffolding" href="#scaffolding"></a>Scaffolding</h2><p>Our little crate is going to go places, so I want to set up a few things
ahead of time - I'm going to use <code>argh</code> to parse arguments.</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo add argh
      Adding argh v0.1.3 to dependencies
</pre></div><p>And I'm going to set up subcommands - for now, we'll only have one,
named <code>sample</code>. It's going to go into its own module.</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/main.rs`</i>

<i>pub</i> <i>mod</i> sample<i>;</i>

<i>use</i> argh<i>::</i>FromArgs<i>;</i>

<i>#<i>[</i>derive<i>(</i>FromArgs<i>)</i><i>]</i></i>
<i>/// Small string demo
</i><i>struct</i> <i>Args</i> <i>{</i>
    <i>#<i>[</i>argh<i>(</i>subcommand<i>)</i><i>]</i></i>
    <i>subcommand</i><i>:</i> <i>Subcommand</i><i>,</i>
<i>}</i>

<i>#<i>[</i>derive<i>(</i>FromArgs<i>)</i><i>]</i></i>
<i>#<i>[</i>argh<i>(</i>subcommand<i>)</i><i>]</i></i>
<i>enum</i> <i>Subcommand</i> <i>{</i>
    Sample<i>(</i>sample<i>::</i><i>Sample</i><i>)</i><i>,</i>
<i>}</i>

<i>impl</i> <i>Subcommand</i> <i>{</i>
    <i>fn</i> <i>run</i><i>(</i><i>self</i><i>)</i> <i>{</i>
        <i>match</i> <i>self</i> <i>{</i>
            <i>Subcommand</i><i>::</i>Sample<i>(</i>x<i>)</i> =&gt; x<i>.</i><i>run</i><i>(</i><i>)</i><i>,</i>
        <i>}</i>
    <i>}</i>
<i>}</i>

<i>fn</i> <i>main</i><i>(</i><i>)</i> <i>{</i>
    <i>// see https://turbo.fish/</i>
    argh<i>::</i><i>from_env</i><i>::</i><i>&lt;</i><i>Args</i><i>&gt;</i><i>(</i><i>)</i><i>.</i><i>subcommand</i><i>.</i><i>run</i><i>(</i><i>)</i><i>;</i>
<i>}</i>
</pre></div><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/sample.rs`</i>

<i>use</i> argh<i>::</i>FromArgs<i>;</i>

<i>#<i>[</i>derive<i>(</i>FromArgs<i>)</i><i>]</i></i>
<i>/// Run sample code
</i><i>#<i>[</i>argh<i>(</i>subcommand<i>,</i> name = <i>"sample"</i><i>)</i><i>]</i></i>
<i>pub</i> <i>struct</i> <i>Sample</i> <i>{</i><i>}</i>

<i>impl</i> <i>Sample</i> <i>{</i>
    <i>pub</i> <i>fn</i> <i>run</i><i>(</i><i>self</i><i>)</i> <i>{</i>
        <i>todo</i><i>!</i><i>(</i><i>)</i>
    <i>}</i>
<i>}</i>
</pre></div><p>Let's try it out:</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo run -- sample
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/small sample`
thread 'main' panicked at 'not yet implemented', src/sample.rs:10:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
</pre></div><p>Wonderful. That's all we need for now.</p><h2><a id="parsing-a-json-data-set" href="#parsing-a-json-data-set"></a>Parsing a JSON data set</h2><p>Our task for today is going to be: parsing a list of the <a href="https://gist.github.com/fasterthanlime/52664aadaf55fec2ffd280969c028cfc">1000 largest US
cities</a>
from a JSON file.</p><p>If you're following along, download that gist to a file named <code>cities.json</code>
directly into the <code>small/</code> folder.</p><p><a href="https://crates.io/crates/serde">serde</a> and <a href="https://crates.io/crates/serde_json">serde_json</a>
are going to make this task very easy.</p><div translate="no"><p>TOML markup</p><pre data-lang="toml"><i># in Cargo.toml</i>

<i>[</i><i>dependencies</i><i>]</i>
<i>argh</i> <i>=</i> <i>"0.1.3"</i>

<i># these two are new:</i>
<i>serde</i> <i>=</i> <i>{</i> <i>version</i> <i>=</i> <i>"1.0.114"</i><i>,</i> <i>features</i> <i>=</i> <i>[</i><i>"derive"</i><i>]</i> <i>}</i>
<i>serde_json</i> <i>=</i> <i>"1.0.56"</i>
</pre></div><p>The dataset contains a lot of information, including population growth,
geographic coordinates, population, and rank. We're only interested in the
city name, and the state name.</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/sample.rs`</i>

<i>impl</i> <i>Sample</i> <i>{</i>
    <i>pub</i> <i>fn</i> <i>run</i><i>(</i><i>self</i><i>)</i> <i>{</i>
        <i>self</i><i>.</i><i>read_records</i><i>(</i><i>)</i><i>;</i>
    <i>}</i>

    <i>fn</i> <i>read_records</i><i>(</i><i>&amp;</i><i>self</i><i>)</i> <i>{</i>
        <i>use</i> serde<i>::</i>Deserialize<i>;</i>

        <i>#<i>[</i>derive<i>(</i>Deserialize<i>)</i><i>]</i></i>
        <i>struct</i> <i>Record</i> <i>{</i>
            <i>#<i>[</i>allow<i>(</i>unused<i>)</i><i>]</i></i>
            <i>city</i><i>:</i> <i>String</i><i>,</i>
            <i>#<i>[</i>allow<i>(</i>unused<i>)</i><i>]</i></i>
            <i>state</i><i>:</i> <i>String</i><i>,</i>
        <i>}</i>

        <i>use</i> std<i>::</i>fs<i>::</i>File<i>;</i>
        <i>let</i> f = <i>File</i><i>::</i><i>open</i><i>(</i><i>"cities.json"</i><i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>let</i> records<i>:</i> <i>Vec</i><i>&lt;</i><i>Record</i><i>&gt;</i> = serde_json<i>::</i><i>from_reader</i><i>(</i>f<i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"Read {} records"</i><i>,</i> records<i>.</i>len<i>(</i><i>)</i><i>)</i><i>;</i>
    <i>}</i>
<i>}</i>
</pre></div><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo run -- sample
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
     Running `target/debug/small sample`
Read 1000 records
</pre></div><p>Fantastic. That was easy!</p><h2><a id="profiling-memory-allocations" href="#profiling-memory-allocations"></a>Profiling memory allocations</h2><p>I'm interested in how much memory our program is using, and also how many
allocations and deallocations it does.</p><p>We've used the Massif tool (from the Valgrind suite) in <a href="https://fasterthanli.me/articles/abstracting-away-correctness">Abstracting away
correctness</a>, to demonstrate a
bug in Go's <code>runtime/pe</code> package.</p><p>But today I feel like trying something a little different.</p><p>Something a little more ad hoc. A little more fun.</p><p>We're going to make a tracing allocator.</p><p>Well, to start with, we're just going to wrap the system allocator.</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/main.rs`</i>

<i>pub</i> <i>mod</i> alloc<i>;</i>
</pre></div><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/alloc.rs`</i>

<i>use</i> std<i>::</i>alloc<i>::</i><i>{</i>GlobalAlloc<i>,</i> System<i>}</i><i>;</i>

<i>pub</i> <i>struct</i> <i>Tracing</i> <i>{</i>
    <i>pub</i> <i>inner</i><i>:</i> <i>System</i><i>,</i>
<i>}</i>

<i>impl</i> <i>Tracing</i> <i>{</i>
    <i>pub</i> <i>const</i> <i>fn</i> <i>new</i><i>(</i><i>)</i> -&gt; <i>Self</i> <i>{</i>
        <i>Self</i> <i>{</i> <i>inner</i><i>:</i> System <i>}</i>
    <i>}</i>
<i>}</i>

<i>unsafe</i> <i>impl</i> <i>GlobalAlloc</i> <i>for</i> <i>Tracing</i> <i>{</i>
    <i>unsafe</i> <i>fn</i> <i>alloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> -&gt; <i>*</i><i>mut</i> <i>u8</i> <i>{</i>
        <i>self</i><i>.</i><i>inner</i><i>.</i><i>alloc</i><i>(</i>layout<i>)</i>
    <i>}</i>
    <i>unsafe</i> <i>fn</i> <i>dealloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>ptr</i><i>:</i> <i>*</i><i>mut</i> <i>u8</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> <i>{</i>
        <i>self</i><i>.</i><i>inner</i><i>.</i><i>dealloc</i><i>(</i>ptr<i>,</i> layout<i>)</i>
    <i>}</i>
<i>}</i>
</pre></div><p>All of this is in Rust stable, by the way.</p><div>

<p>Why does <code>GlobalAlloc</code> require an <code>unsafe impl</code>?</p><p>It's not only unsafe to call its methods, it's unsafe to <em>implement</em> the
trait itself. The <a href="https://doc.rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html">documentation</a>
mentions "several reasons", among which:</p><blockquote><p>It's undefined behavior if global allocators unwind. This restriction may
be lifted in the future, but currently a panic from any of these functions
may lead to memory unsafety.</p></blockquote><p>Luckily, in Rust, undefined behavior is confined to well-identified <code>unsafe</code>
sections, and this is no exception.</p></div>
<p>Now that we've got a custom allocator, all we need to do is use it:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/main.rs`</i>

<i>#<i>[</i>global_allocator<i>]</i></i>
<i>pub</i> <i>static</i> ALLOCATOR<i>:</i> alloc<i>::</i><i>Tracing</i> = alloc<i>::</i><i>Tracing</i><i>::</i><i>new</i><i>(</i><i>)</i><i>;</i>
</pre></div><div>

<p>See how this is a <code>static</code>, and yet we're calling a function?</p><p>That's because it's a <code>const fn</code> - which are stable <a href="https://caniuse.rs/features/min_const_fn">since Rust 1.31</a>.</p><p>As of 1.44, there's still restrictions on what you can do inside const fns.
For example, <code>Default::default()</code> is not <code>const fn</code>, and neither is
<code>Into::into()</code>.</p></div>
<p>Does everything still work?</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo run -- sample
   Compiling small v0.1.0 (/home/amos/ftl/small)
    Finished dev [unoptimized + debuginfo] target(s) in 1.73s
     Running `target/debug/small sample`
Read 1000 records
</pre></div><p>Yes. Good.</p><p>We'd like our tracing allocator to say something, if they see something.</p><p>But this is easier said than done.</p><p>If we try to use <code>println!</code>:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>unsafe</i> <i>impl</i> <i>GlobalAlloc</i> <i>for</i> <i>Tracing</i> <i>{</i>
    <i>unsafe</i> <i>fn</i> <i>alloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> -&gt; <i>*</i><i>mut</i> <i>u8</i> <i>{</i>
        <i>println</i><i>!</i><i>(</i><i>"allocating {} bytes"</i><i>,</i> layout<i>.</i>size<i>(</i><i>)</i><i>)</i><i>;</i>
        <i>self</i><i>.</i><i>inner</i><i>.</i><i>alloc</i><i>(</i>layout<i>)</i>
    <i>}</i>

    <i>// etc.</i>
<i>}</i>
</pre></div><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo run -- sample
   Compiling small v0.1.0 (/home/amos/ftl/small)
    Finished dev [unoptimized + debuginfo] target(s) in 0.58s
     Running `target/debug/small sample`
^C
</pre></div><p>...it hangs forever. Both in debug and release builds (I checked).</p><p>Where does it hang?</p><p><picture><source type="image/jxl" srcset="https://cdn.fasterthanli.me/content/articles/small-strings-in-rust/assets/println-hang~405312be15498c4c.jxl"><source type="image/avif" srcset="https://cdn.fasterthanli.me/content/articles/small-strings-in-rust/assets/println-hang~405312be15498c4c.jxl.avif"><source type="image/webp" srcset="https://cdn.fasterthanli.me/content/articles/small-strings-in-rust/assets/println-hang~405312be15498c4c.jxl.webp"><img src="https://cdn.fasterthanli.me/content/articles/small-strings-in-rust/assets/println-hang~405312be15498c4c.jxl" loading="lazy"></picture></p><p>..while trying to acquire a lock on stdout.</p><p>Let's bypass Rust's standard output machinery:</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo add libc
      Adding libc v0.2.71 to dependencies
</pre></div><p>Now, one very important thing to keep in mind when writing a custom allocator,
is that... we can't allocate any memory. Well, we can - but if we're not careful,
and we put some values on the heap by accident, the allocator will end up
calling itself, and <em>then</em> we'll have a stack overflow.</p><p>So this, for example, doesn't work:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/alloc.rs`</i>

<i>unsafe</i> <i>impl</i> <i>GlobalAlloc</i> <i>for</i> <i>Tracing</i> <i>{</i>
    <i>unsafe</i> <i>fn</i> <i>alloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> -&gt; <i>*</i><i>mut</i> <i>u8</i> <i>{</i>
        <i>let</i> s = <i>format</i><i>!</i><i>(</i><i>"allocating {} bytes"</i><i>,</i> layout<i>.</i>size<i>(</i><i>)</i><i>)</i><i>;</i>
        libc<i>::</i><i>write</i><i>(</i>libc<i>::</i>STDOUT_FILENO<i>,</i> s<i>.</i><i>as_ptr</i><i>(</i><i>)</i> <i>as</i> <i>_</i><i>,</i> s<i>.</i><i>len</i><i>(</i><i>)</i> <i>as</i> <i>_</i><i>)</i><i>;</i>
        <i>self</i><i>.</i><i>inner</i><i>.</i><i>alloc</i><i>(</i>layout<i>)</i>
    <i>}</i>

    <i>// etc.</i>
<i>}</i>
</pre></div><div>

<p>We all like type inference, right?</p><p>Turns out, you don't need to spell out <code>as u64</code>, or <code>as usize</code>, or <code>as f64</code>. If
the compiler can infer it, just use <code>as _</code>!</p></div>
<div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo run -- sample
    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
     Running `target/debug/small run`
[1]    94868 segmentation fault (core dumped)  cargo run -- run
</pre></div><p>...because <code>format!</code> ends up allocating memory - if only for the resulting
<code>String</code>.</p><p>This however, is fine:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>unsafe</i> <i>impl</i> <i>GlobalAlloc</i> <i>for</i> <i>Tracing</i> <i>{</i>
    <i>unsafe</i> <i>fn</i> <i>alloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> -&gt; <i>*</i><i>mut</i> <i>u8</i> <i>{</i>
        <i>let</i> s = <i>"allocating!\n"</i><i>;</i>
        libc<i>::</i><i>write</i><i>(</i>libc<i>::</i>STDOUT_FILENO<i>,</i> s<i>.</i><i>as_ptr</i><i>(</i><i>)</i> <i>as</i> <i>_</i><i>,</i> s<i>.</i><i>len</i><i>(</i><i>)</i> <i>as</i> <i>_</i><i>)</i><i>;</i>
        <i>self</i><i>.</i><i>inner</i><i>.</i><i>alloc</i><i>(</i>layout<i>)</i>
    <i>}</i>

    <i>// etc.</i>
<i>}</i>
</pre></div><div translate="no"><pre data-lang="sh">$ cargo run -- sample | head
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
     Running `target/debug/small sample`
allocating!
allocating!
allocating!
allocating!
allocating!
allocating!
allocating!
allocating!
allocating!
allocating!
(cut off by '| head')
</pre></div><p>But it's not very helpful. Here's an idea - how about we write out
one JSON object per line on stderr? I don't think <code>serde_json</code> needs
to heap-allocate when serializing objects, so we should be in the clear.</p><p>Let's make an enum with two variants:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/alloc.rs`</i>

<i>use</i> serde<i>::</i><i>{</i>Deserialize<i>,</i> Serialize<i>}</i><i>;</i>

<i>#<i>[</i>derive<i>(</i>Clone<i>,</i> Copy<i>,</i> Serialize<i>,</i> Deserialize<i>)</i><i>]</i></i>
<i>pub</i> <i>enum</i> <i>Event</i> <i>{</i>
    Alloc <i>{</i> <i>addr</i><i>:</i> <i>usize</i><i>,</i> <i>size</i><i>:</i> <i>usize</i> <i>}</i><i>,</i>
    Freed <i>{</i> <i>addr</i><i>:</i> <i>usize</i><i>,</i> <i>size</i><i>:</i> <i>usize</i> <i>}</i><i>,</i>
<i>}</i>
</pre></div><p>Then two helpers so we can write those events to stderr easily:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/alloc.rs`</i>

<i>use</i> std<i>::</i>io<i>::</i>Cursor<i>;</i>

<i>impl</i> <i>Tracing</i> <i>{</i>
    <i>fn</i> <i>write_ev</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>ev</i><i>:</i> <i>Event</i><i>)</i> <i>{</i>
        <i>let</i> <i>mut</i> buf = <i>[</i><i>0u8</i><i>;</i> <i>1024</i><i>]</i><i>;</i>
        <i>let</i> <i>mut</i> cursor = <i>Cursor</i><i>::</i><i>new</i><i>(</i><i>&amp;</i><i>mut</i> buf<i>[</i>..<i>]</i><i>)</i><i>;</i>
        serde_json<i>::</i><i>to_writer</i><i>(</i><i>&amp;</i><i>mut</i> cursor<i>,</i> <i>&amp;</i>ev<i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>let</i> end = cursor<i>.</i><i>position</i><i>(</i><i>)</i> <i>as</i> <i>usize</i><i>;</i>
        <i>self</i><i>.</i><i>write</i><i>(</i><i>&amp;</i>buf<i>[</i>..end<i>]</i><i>)</i><i>;</i>
        <i>self</i><i>.</i><i>write</i><i>(</i><i>b"\n"</i><i>)</i><i>;</i>
    <i>}</i>

    <i>fn</i> <i>write</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>s</i><i>:</i> <i>&amp;</i><i>[</i><i>u8</i><i>]</i><i>)</i> <i>{</i>
        <i>unsafe</i> <i>{</i>
            libc<i>::</i><i>write</i><i>(</i>libc<i>::</i>STDERR_FILENO<i>,</i> s<i>.</i><i>as_ptr</i><i>(</i><i>)</i> <i>as</i> <i>_</i><i>,</i> s<i>.</i><i>len</i><i>(</i><i>)</i> <i>as</i> <i>_</i><i>)</i><i>;</i>
        <i>}</i>
    <i>}</i>
<i>}</i>
</pre></div><p>And use them in our <code>alloc</code> and <code>dealloc</code> function to write the
corresponding events:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/alloc.rs`</i>

<i>unsafe</i> <i>impl</i> <i>GlobalAlloc</i> <i>for</i> <i>Tracing</i> <i>{</i>
    <i>unsafe</i> <i>fn</i> <i>alloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> -&gt; <i>*</i><i>mut</i> <i>u8</i> <i>{</i>
        <i>let</i> res = <i>self</i><i>.</i><i>inner</i><i>.</i><i>alloc</i><i>(</i>layout<i>)</i><i>;</i>
        <i>self</i><i>.</i><i>write_ev</i><i>(</i><i>Event</i><i>::</i><i>Alloc</i> <i>{</i>
            <i>addr</i><i>:</i> res <i>as</i> <i>_</i><i>,</i>
            <i>size</i><i>:</i> layout<i>.</i><i>size</i><i>(</i><i>)</i><i>,</i>
        <i>}</i><i>)</i><i>;</i>
        res
    <i>}</i>
    <i>unsafe</i> <i>fn</i> <i>dealloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>ptr</i><i>:</i> <i>*</i><i>mut</i> <i>u8</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> <i>{</i>
        <i>self</i><i>.</i><i>write_ev</i><i>(</i><i>Event</i><i>::</i><i>Freed</i> <i>{</i>
            <i>addr</i><i>:</i> ptr <i>as</i> <i>_</i><i>,</i>
            <i>size</i><i>:</i> layout<i>.</i><i>size</i><i>(</i><i>)</i><i>,</i>
        <i>}</i><i>)</i><i>;</i>
        <i>self</i><i>.</i><i>inner</i><i>.</i><i>dealloc</i><i>(</i>ptr<i>,</i> layout<i>)</i>
    <i>}</i>
<i>}</i>
</pre></div><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo build &amp;&amp; ./target/debug/small sample 2&gt;! events.ldjson
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
Read 1000 records
$ head -3 events.ldjson
{"Alloc":{"addr":93825708063040,"size":4}}
{"Alloc":{"addr":93825708063072,"size":5}}
{"Freed":{"addr":93825708063040,"size":4}}
</pre></div><div>

<p>We can no longer use <code>cargo run</code>, otherwise cargo's own output
would end up in <code>events.ldjson</code>.</p><p>Also, Amos is using zsh here, that's why he has to use <code>2&gt;!</code> instead
of just <code>2&gt;</code>. The <code>!</code> tells zsh to overwrite the file if it exists.
By default it would just refuse to write to it.</p></div>
<p>There's one last thing our custom allocator needs: an on and off switch.</p><p>Right now it reports <em>every</em> allocation, from the very start of our program,
including argument parsing. This isn't much compared to the JSON parsing
phase, but it's still something I'd like to exclude from our measurements.</p><p>So, let's add a switch:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/alloc.rs`</i>

<i>use</i> std<i>::</i>sync<i>::</i>atomic<i>::</i><i>{</i>AtomicBool<i>,</i> Ordering<i>}</i><i>;</i>

<i>pub</i> <i>struct</i> <i>Tracing</i> <i>{</i>
    <i>pub</i> <i>inner</i><i>:</i> <i>System</i><i>,</i>
    <i>// new</i>
    <i>pub</i> <i>active</i><i>:</i> <i>AtomicBool</i><i>,</i>
<i>}</i>

<i>impl</i> <i>Tracing</i> <i>{</i>
    <i>pub</i> <i>const</i> <i>fn</i> <i>new</i><i>(</i><i>)</i> -&gt; <i>Self</i> <i>{</i>
        <i>Self</i> <i>{</i>
            <i>inner</i><i>:</i> System<i>,</i>
            <i>active</i><i>:</i> <i>AtomicBool</i><i>::</i><i>new</i><i>(</i><i>false</i><i>)</i><i>,</i>
        <i>}</i>
    <i>}</i>

    <i>pub</i> <i>fn</i> <i>set_active</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>active</i><i>:</i> <i>bool</i><i>)</i> <i>{</i>
        <i>self</i><i>.</i><i>active</i><i>.</i><i>store</i><i>(</i>active<i>,</i> <i>Ordering</i><i>::</i>SeqCst<i>)</i><i>;</i>
    <i>}</i>
<i>}</i>

<i>unsafe</i> <i>impl</i> <i>GlobalAlloc</i> <i>for</i> <i>Tracing</i> <i>{</i>
    <i>unsafe</i> <i>fn</i> <i>alloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> -&gt; <i>*</i><i>mut</i> <i>u8</i> <i>{</i>
        <i>let</i> res = <i>self</i><i>.</i><i>inner</i><i>.</i><i>alloc</i><i>(</i>layout<i>)</i><i>;</i>
        <i>if</i> <i>self</i><i>.</i><i>active</i><i>.</i><i>load</i><i>(</i><i>Ordering</i><i>::</i>SeqCst<i>)</i> <i>{</i>
            <i>self</i><i>.</i><i>write_ev</i><i>(</i><i>Event</i><i>::</i><i>Alloc</i> <i>{</i>
                <i>addr</i><i>:</i> res <i>as</i> <i>_</i><i>,</i>
                <i>size</i><i>:</i> layout<i>.</i><i>size</i><i>(</i><i>)</i><i>,</i>
            <i>}</i><i>)</i><i>;</i>
        <i>}</i>
        res
    <i>}</i>
    <i>unsafe</i> <i>fn</i> <i>dealloc</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>ptr</i><i>:</i> <i>*</i><i>mut</i> <i>u8</i><i>,</i> <i>layout</i><i>:</i> std<i>::</i>alloc<i>::</i><i>Layout</i><i>)</i> <i>{</i>
        <i>if</i> <i>self</i><i>.</i><i>active</i><i>.</i><i>load</i><i>(</i><i>Ordering</i><i>::</i>SeqCst<i>)</i> <i>{</i>
            <i>self</i><i>.</i><i>write_ev</i><i>(</i><i>Event</i><i>::</i><i>Freed</i> <i>{</i>
                <i>addr</i><i>:</i> ptr <i>as</i> <i>_</i><i>,</i>
                <i>size</i><i>:</i> layout<i>.</i><i>size</i><i>(</i><i>)</i><i>,</i>
            <i>}</i><i>)</i><i>;</i>
        <i>}</i>
        <i>self</i><i>.</i><i>inner</i><i>.</i><i>dealloc</i><i>(</i>ptr<i>,</i> layout<i>)</i>
    <i>}</i>
<i>}</i>
</pre></div><p>The allocator will start off inactive, and we can activate it just
for our JSON workload:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/sample.rs`</i>

<i>impl</i> <i>Sample</i> <i>{</i>
    <i>fn</i> <i>read_records</i><i>(</i><i>&amp;</i><i>self</i><i>)</i> <i>{</i>
        <i>// omitted: `struct Record`</i>

        <i>use</i> std<i>::</i>fs<i>::</i>File<i>;</i>
        <i>let</i> f = <i>File</i><i>::</i><i>open</i><i>(</i><i>"cities.json"</i><i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>crate</i><i>::</i>ALLOCATOR<i>.</i><i>set_active</i><i>(</i><i>true</i><i>)</i><i>;</i>
        <i>let</i> records<i>:</i> <i>Vec</i><i>&lt;</i><i>Record</i><i>&gt;</i> = serde_json<i>::</i><i>from_reader</i><i>(</i>f<i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>crate</i><i>::</i>ALLOCATOR<i>.</i><i>set_active</i><i>(</i><i>false</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"Read {} records"</i><i>,</i> records<i>.</i>len<i>(</i><i>)</i><i>)</i><i>;</i>
    <i>}</i>
<i>}</i>
</pre></div><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo build &amp;&amp; ./target/debug/small sample 2&gt;! events.ldjson
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
Read 1000 records
$ grep 'Alloc' events.ldjson | wc -l
2017
$ grep 'Freed' events.ldjson | wc -l
16
</pre></div><p>But <code>grep</code> and <code>wc</code> aren't the best we can do to analyze those events.</p><p>Let's build something a little comfier.</p><h2><a id="the-report-subcommand" href="#the-report-subcommand"></a>The <code>report</code> subcommand</h2><p>Let's add another subcommand, also in its own module:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/main.rs`</i>

<i>pub</i> <i>mod</i> report<i>;</i>

<i>#<i>[</i>derive<i>(</i>FromArgs<i>)</i><i>]</i></i>
<i>#<i>[</i>argh<i>(</i>subcommand<i>)</i><i>]</i></i>
<i>enum</i> <i>Subcommand</i> <i>{</i>
    Sample<i>(</i>sample<i>::</i><i>Sample</i><i>)</i><i>,</i>
    Report<i>(</i>report<i>::</i><i>Report</i><i>)</i><i>,</i>
<i>}</i>

<i>impl</i> <i>Subcommand</i> <i>{</i>
    <i>fn</i> <i>run</i><i>(</i><i>self</i><i>)</i> <i>{</i>
        <i>match</i> <i>self</i> <i>{</i>
            <i>Subcommand</i><i>::</i>Sample<i>(</i>x<i>)</i> =&gt; x<i>.</i><i>run</i><i>(</i><i>)</i><i>,</i>
            <i>Subcommand</i><i>::</i>Report<i>(</i>x<i>)</i> =&gt; x<i>.</i><i>run</i><i>(</i><i>)</i><i>,</i>
        <i>}</i>
    <i>}</i>
<i>}</i>
</pre></div><p>Here's my wishlist. I would like:</p><ul><li>To measure peak memory usage</li><li>Along with total allocations and deallocations</li><li>To format sizes as B, KiB, etc.</li><li>To have a nice little graph of memory usage, just like Massif does</li></ul><div>

<p>Alright then, let's go shopping.</p></div>
<div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo add bytesize
      Adding bytesize v1.0.1 to dependencies
$ cargo add textplots
      Adding textplots v0.5.1 to dependencies
</pre></div><div>

<p>That's it? Are we saving our crate budget for something else?</p></div>
<p>Nope, that's all we need.</p><div>

<p>Hold on a second, I have a question: why are we first saving events to a file,
and <em>later</em> analyzing it with another subcommand?</p><p>Couldn't we just do everything in one run?</p></div>
<p>We probably could! But that way, the code is simpler. It would probably be
tricky to collect events in-memory without doing any heap allocations.</p><p>We would have to:</p><ul><li>Allocate a fixed-size buffer ahead of time, either in static storage,
or on the heap but using the system allocator directly.</li><li>Make sure we handle synchronization properly - <code>GlobalAlloc</code> only requires
<code>&amp;self</code> for <code>alloc</code> and <code>dealloc</code>, so we'd have to do our own locking</li></ul><p>And locking hasn't worked great for us so far (see the <code>println!</code> debacle).</p><p>So, that way is simpler! A bit more annoying to use, but simpler.</p>
<p>The reporter is fairly simple. It simply parses each line as a JSON record
of type <code>crate::alloc::Event</code>, using <code>serde_json</code>. Then it goes through each
record, keeps track of the current of amount of memory used, and peak usage,
and builds a series of <code>(f32, f32)</code> for <a href="https://crates.io/crates/textplots">textplots</a>.</p><p>Let's go:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/report.rs`</i>

<i>use</i> <i>crate</i><i>::</i>alloc<i>;</i>
<i>use</i> alloc<i>::</i>Event<i>;</i>
<i>use</i> argh<i>::</i>FromArgs<i>;</i>
<i>use</i> bytesize<i>::</i>ByteSize<i>;</i>
<i>use</i> std<i>::</i><i>{</i>
    fs<i>::</i>File<i>,</i>
    io<i>::</i><i>{</i>BufRead<i>,</i> BufReader<i>}</i><i>,</i>
    path<i>::</i>PathBuf<i>,</i>
<i>}</i><i>;</i>
<i>use</i> textplots<i>::</i><i>{</i>Chart<i>,</i> Plot<i>,</i> Shape<i>}</i><i>;</i>

<i>#<i>[</i>derive<i>(</i>FromArgs<i>)</i><i>]</i></i>
<i>/// Analyze report
</i><i>#<i>[</i>argh<i>(</i>subcommand<i>,</i> name = <i>"report"</i><i>)</i><i>]</i></i>
<i>pub</i> <i>struct</i> <i>Report</i> <i>{</i>
    <i>#<i>[</i>argh<i>(</i>positional<i>)</i><i>]</i></i>
    <i>path</i><i>:</i> <i>PathBuf</i><i>,</i>
<i>}</i>

<i>trait</i> <i>Delta</i> <i>{</i>
    <i>fn</i> <i>delta</i><i>(</i><i>self</i><i>)</i> -&gt; <i>isize</i><i>;</i>
<i>}</i>

<i>impl</i> <i>Delta</i> <i>for</i> alloc<i>::</i><i>Event</i> <i>{</i>
    <i>fn</i> <i>delta</i><i>(</i><i>self</i><i>)</i> -&gt; <i>isize</i> <i>{</i>
        <i>match</i> <i>self</i> <i>{</i>
            <i>Event</i><i>::</i>Alloc <i>{</i> size<i>,</i> .. <i>}</i> =&gt; size <i>as</i> <i>isize</i><i>,</i>
            <i>Event</i><i>::</i>Freed <i>{</i> size<i>,</i> .. <i>}</i> =&gt; -<i>(</i>size <i>as</i> <i>isize</i><i>)</i><i>,</i>
        <i>}</i>
    <i>}</i>
<i>}</i>

<i>impl</i> <i>Report</i> <i>{</i>
    <i>pub</i> <i>fn</i> <i>run</i><i>(</i><i>self</i><i>)</i> <i>{</i>
        <i>let</i> f = <i>BufReader</i><i>::</i><i>new</i><i>(</i><i>File</i><i>::</i><i>open</i><i>(</i><i>&amp;</i><i>self</i><i>.</i><i>path</i><i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>)</i><i>;</i>
        <i>let</i> <i>mut</i> events<i>:</i> <i>Vec</i><i>&lt;</i>alloc<i>::</i><i>Event</i><i>&gt;</i> = <i>Default</i><i>::</i><i>default</i><i>(</i><i>)</i><i>;</i>

        <i>for</i> line <i>in</i> f<i>.</i><i>lines</i><i>(</i><i>)</i> <i>{</i>
            <i>let</i> line = line<i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
            <i>let</i> ev<i>:</i> <i>Event</i> = serde_json<i>::</i><i>from_str</i><i>(</i><i>&amp;</i>line<i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
            events<i>.</i><i>push</i><i>(</i>ev<i>)</i><i>;</i>
        <i>}</i>
        <i>println</i><i>!</i><i>(</i><i>"found {} events"</i><i>,</i> events<i>.</i>len<i>(</i><i>)</i><i>)</i><i>;</i>

        <i>let</i> <i>mut</i> points = <i>vec</i><i>!</i><i>[</i><i>]</i><i>;</i>
        <i>let</i> <i>mut</i> curr_bytes = <i>0</i><i>;</i>
        <i>let</i> <i>mut</i> peak_bytes = <i>0</i><i>;</i>
        <i>let</i> <i>mut</i> alloc_events = <i>0</i><i>;</i>
        <i>let</i> <i>mut</i> alloc_bytes = <i>0</i><i>;</i>
        <i>let</i> <i>mut</i> freed_events = <i>0</i><i>;</i>
        <i>let</i> <i>mut</i> freed_bytes = <i>0</i><i>;</i>
        <i>for</i> <i>(</i>i<i>,</i> ev<i>)</i> <i>in</i> events<i>.</i><i>iter</i><i>(</i><i>)</i><i>.</i><i>copied</i><i>(</i><i>)</i><i>.</i><i>enumerate</i><i>(</i><i>)</i> <i>{</i>
            curr_bytes += ev<i>.</i><i>delta</i><i>(</i><i>)</i><i>;</i>
            points<i>.</i><i>push</i><i>(</i><i>(</i>i <i>as</i> <i>f32</i><i>,</i> curr_bytes <i>as</i> <i>f32</i><i>)</i><i>)</i><i>;</i>

            <i>if</i> peak_bytes &lt; curr_bytes <i>{</i>
                peak_bytes = curr_bytes<i>;</i>
            <i>}</i>
            <i>match</i> ev <i>{</i>
                <i>Event</i><i>::</i>Alloc <i>{</i> size<i>,</i> .. <i>}</i> =&gt; <i>{</i>
                    alloc_events += <i>1</i><i>;</i>
                    alloc_bytes += size<i>;</i>
                <i>}</i>
                <i>Event</i><i>::</i>Freed <i>{</i> size<i>,</i> .. <i>}</i> =&gt; <i>{</i>
                    freed_events += <i>1</i><i>;</i>
                    freed_bytes += size<i>;</i>
                <i>}</i>
            <i>}</i>
        <i>}</i>
        <i>Chart</i><i>::</i><i>new</i><i>(</i><i>120</i><i>,</i> <i>80</i><i>,</i> <i>0.0</i><i>,</i> points<i>.</i><i>len</i><i>(</i><i>)</i> <i>as</i> <i>f32</i><i>)</i>
            <i>.</i><i>lineplot</i><i>(</i><i>Shape</i><i>::</i><i>Steps</i><i>(</i><i>&amp;</i>points<i>[</i>..<i>]</i><i>)</i><i>)</i>
            <i>.</i><i>nice</i><i>(</i><i>)</i><i>;</i>

        <i>println</i><i>!</i><i>(</i><i>"     total events | {}"</i><i>,</i> events<i>.</i>len<i>(</i><i>)</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"      peak bytes  | {}"</i><i>,</i> ByteSize<i>(</i>peak_bytes <i>as</i> _<i>)</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"     ----------------------------"</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"     alloc events | {}"</i><i>,</i> alloc_events<i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"     alloc bytes  | {}"</i><i>,</i> ByteSize<i>(</i>alloc_bytes <i>as</i> _<i>)</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"     ----------------------------"</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"     freed events | {}"</i><i>,</i> freed_events<i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"     freed bytes  | {}"</i><i>,</i> ByteSize<i>(</i>freed_bytes <i>as</i> _<i>)</i><i>)</i><i>;</i>
    <i>}</i>
<i>}</i>
</pre></div><p>Shall we give it a try?</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo build &amp;&amp; ./target/debug/small sample 2&gt;! events.ldjson &amp;&amp; ./target/debug/small report events.ldjson
    Finished dev [unoptimized + debuginfo] target(s) in 0.09s
Read 1000 records
found 2033 events
⡁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⡏ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⡁ 82670.0
⠄                              ⡇                            ⠄
⠂                              ⡇                            ⠂
⡁                              ⡇                            ⡁
⠄                              ⡇              ⣀⣀⣀⣠⠤⠤⠤⠖⠒⠒⠚⠉⠉⠉⠅
⠂                              ⡇⣀⣀⣀⣠⠤⠤⠤⠖⠒⠒⠚⠉⠉⠉⠁             ⠂
⡁                              ⡏⠁                           ⡁
⠄                              ⡇                            ⠄
⠂                              ⡇                            ⠂
⡁                              ⡇                            ⡁
⠄               ⡇              ⡇                            ⠄
⠂               ⡇              ⡇                            ⠂
⡁               ⡇⣀⣀⣀⣀⡤⠤⠤⠴⠒⠒⠒⠋⠉⠉⠁                            ⡁
⠄               ⡏⠁                                          ⠄
⠂               ⡇                                           ⠂
⡁       ⢸       ⡇                                           ⡁
⠄       ⢸⠴⠒⠒⠒⠚⠉⠉⠁                                           ⠄
⠂   ⢠   ⢸                                                   ⠂
⡁ ⢀ ⢸⠒⠋⠉⠉                                                   ⡁
⢄⣰⠼⠉⠉                                                       ⠄
⠉⠉ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁ 1.0
0.0                                                      2033.0
     total events | 2033
      peak bytes  | 82.7 KB
     ----------------------------
     alloc events | 2017
     alloc bytes  | 115.8 KB
     ----------------------------
     freed events | 16
     freed bytes  | 49.2 KB
</pre></div><p>How fascinating! You can see that the line goes way up and falls back down
almost immediately at several points.</p><p>My theory is pretty simple: it's reading a thousand records into a <code>Vec</code>. But
since everything is streaming, it has no idea what capacity to reserve for
the <code>Vec</code>.</p><p>When it grows, the <code>Vec</code> must first allocate <code>new_capacity</code> bytes, then copy
over from the <em>old</em> storage, and only then can it free the old storage.</p><p>So the peaks we see are almost definitely <code>Vec</code> resizes.</p><p>We can also see that between those peaks, memory usage increases steadily -
each <code>String</code> stores its data on the heap, which explains the number of
allocation events, 2017.</p><h2><a id="as-few-allocations-as-possible" href="#as-few-allocations-as-possible"></a>As few allocations as possible</h2><p>Now that we can read our JSON file into Rust data structures, and we can
profile allocations, let's think about reducing the number of allocations.</p><p>Why? Because the fastest code is the code you don't execute. If you do fewer
allocations, then you're spending less time in the allocator, so you should
see a performance boost.</p><p>Unless you're achieving "fewer allocations" by doing a lot more work, which
would be a different compromise - but one that is still worth doing in some
cases.</p><p>In our case, our input file is relatively small (in terms of a contemporary
desktop computer), so we can afford to read it all in memory in one go.</p><p>And if we do that, we can deserialize to <code>&amp;str</code> rather than <code>String</code>, if
we tell <code>serde</code> to borrow from the input.</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/sample.rs`</i>

<i>impl</i> <i>Sample</i> <i>{</i>
    <i>pub</i> <i>fn</i> <i>run</i><i>(</i><i>self</i><i>)</i> <i>{</i>
        <i>self</i><i>.</i><i>read_records</i><i>(</i><i>)</i><i>;</i>
    <i>}</i>

    <i>fn</i> <i>read_records</i><i>(</i><i>&amp;</i><i>self</i><i>)</i> <i>{</i>
        <i>use</i> serde<i>::</i>Deserialize<i>;</i>

        <i>#<i>[</i>derive<i>(</i>Deserialize<i>)</i><i>]</i></i>
        <i>struct</i> <i>Record</i><i>&lt;</i><i>'</i><i>a</i><i>&gt;</i> <i>{</i>
            <i>#<i>[</i>allow<i>(</i>unused<i>)</i><i>]</i></i>
            <i>#<i>[</i>serde<i>(</i>borrow<i>)</i><i>]</i></i>
            <i>city</i><i>:</i> <i>&amp;</i><i>'</i><i>a</i> <i>str</i><i>,</i>
            <i>#<i>[</i>allow<i>(</i>unused<i>)</i><i>]</i></i>
            <i>state</i><i>:</i> <i>&amp;</i><i>'</i><i>a</i> <i>str</i><i>,</i>
        <i>}</i>

        <i>crate</i><i>::</i>ALLOCATOR<i>.</i><i>set_active</i><i>(</i><i>true</i><i>)</i><i>;</i>
        <i>let</i> input = std<i>::</i>fs<i>::</i><i>read_to_string</i><i>(</i><i>"cities.json"</i><i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>let</i> records<i>:</i> <i>Vec</i><i>&lt;</i><i>Record</i><i>&gt;</i> = serde_json<i>::</i><i>from_str</i><i>(</i><i>&amp;</i>input<i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>crate</i><i>::</i>ALLOCATOR<i>.</i><i>set_active</i><i>(</i><i>false</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"Read {} records"</i><i>,</i> records<i>.</i>len<i>(</i><i>)</i><i>)</i><i>;</i>
    <i>}</i>
<i>}</i>
</pre></div><p>Let's measure that:</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo build &amp;&amp; ./target/debug/small sample 2&gt;! events.ldjson &amp;&amp; ./target/debug/small report events.ldjson
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
Read 1000 records
found 24 events
⡁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⢸⠉⠉⡏ ⠁⠈ ⡁ 293365.0
⠄                                              ⢀⣀⣀⡀ ⢸  ⠉⠉⠉  ⠄
⠂                                         ⢠⠤⠤⣄⣀⣸  ⠓⠒⠚       ⠂
⡁ ⢰⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠚⠉⠉⠉⠉⠉                 ⡁
⠄ ⢸                                                         ⠄
⠂ ⢸                                                         ⠂
⡁ ⢸                                                         ⡁
⠄ ⢸                                                         ⠄
⠂ ⢸                                                         ⠂
⡁ ⢸                                                         ⡁
⠄ ⢸                                                         ⠄
⠂ ⢸                                                         ⠂
⡁ ⢸                                                         ⡁
⠄ ⢸                                                         ⠄
⠂ ⢸                                                         ⠂
⡁ ⢸                                                         ⡁
⠄ ⢸                                                         ⠄
⠂ ⢸                                                         ⠂
⡁ ⢸                                                         ⡁
⠄ ⢸                                                         ⠄
⠉⠉⠉⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁ 0.0
0.0                                                      24.0
     total events | 24
      peak bytes  | 293.4 KB
     ----------------------------
     alloc events | 13
     alloc bytes  | 309.7 KB
     ----------------------------
     freed events | 11
     freed bytes  | 32.7 KB
</pre></div><p>What a result!</p><p>The number of allocation events fell to <strong>13</strong>, but peak memory usage
climbed all the way up to 293 KB.</p><div>

<p>Unfortunately, <a href="https://crates.io/crates/bytesize">bytesize</a> defaults to powers of
1000, not 1024.</p></div>
<p>In our particular scenario, this tradeoff is perfectly acceptable - 293 KB
memory usage is more than reasonable. The speed difference is going to be
imperceptible, unless we do it thousands of times, but that's fine too.</p><p>However, if our dataset was much larger, we might start running into problems.</p><p>Say we ran this workload on a machine with 64 GiB of RAM - that's not atypical
for a server. And say the input file was 100 GiB. We couldn't even read the
whole thing in memory! We'd have to go back to a streaming solution.</p><p>And our initial streaming solution may well work - because we're only reading
out the <code>city</code> and <code>state</code> fields - not all the others, which I'm sure make
up the bulk of the 100 GiB input file.</p><p>There are other reasons why <code>&amp;str</code> might not be suitable for us. We may want
to hang on to those strings, and hand them out to other parts of our program,
without worrying about lifetimes too much.</p><p>For some use cases, we may want to consider using a <a href="https://crates.io/search?q=string+intern">string
interner</a>, as a middle ground between
"owned values" and "low memory usage". We're not going to review that option here.</p><p>Let's go back to our streaming solution, for the needs of the story.</p><h2><a id="the-smol-str-crate" href="#the-smol-str-crate"></a>The <code>smol_str</code> crate</h2><p>The <a href="https://crates.io/crates/smol_str">smol_str</a> crate provides us with a
<code>SmolStr</code> type that has the same size as <code>String</code>, and stores strings of up
to 22 bytes <em>inline</em>. It also has special-case optimizations for strings that
are made purely of whitespace (0+ newlines followed by 0+ spaces).</p><p>It's important to note that <code>SmolStr</code> is <strong>immutable</strong>, unlike <code>String</code>. That
works well enough for our purposes.</p><p>Strings longer than 22 bytes are heap-allocated, just like the standard
<code>String</code> type.</p><p>But enough marketing! Let's give it a go.</p><p>Luckily, it comes with a <code>serde</code> feature, so we can just drop it in:</p><div translate="no"><p>TOML markup</p><pre data-lang="toml"><i># in `Cargo.toml`</i>

<i>[</i><i>dependencies</i><i>]</i>
<i># omitted: others</i>
<i>smol_str</i> <i>=</i> <i>{</i> <i>version</i> <i>=</i> <i>"0.1.15"</i><i>,</i> <i>features</i> <i>=</i> <i>[</i><i>"serde"</i><i>]</i> <i>}</i>
</pre></div><p>In order to compare various string implementations, we'll add an option to
our <code>sample</code> command - parsed from an enum.</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo add parse-display
      Adding parse-display v0.1.2 to dependencies
</pre></div><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/sample.rs`</i>

<i>use</i> parse_display<i>::</i><i>{</i>Display<i>,</i> FromStr<i>}</i><i>;</i>

<i>#<i>[</i>derive<i>(</i>FromArgs<i>)</i><i>]</i></i>
<i>/// Run sample code
</i><i>#<i>[</i>argh<i>(</i>subcommand<i>,</i> name = <i>"sample"</i><i>)</i><i>]</i></i>
<i>pub</i> <i>struct</i> <i>Sample</i> <i>{</i>
    <i>#<i>[</i>argh<i>(</i>option<i>)</i><i>]</i></i>
    <i>/// which library to use
</i>    <i>lib</i><i>:</i> <i>Lib</i><i>,</i>
<i>}</i>

<i>#<i>[</i>derive<i>(</i>Display<i>,</i> FromStr<i>)</i><i>]</i></i>
<i>#<i>[</i>display<i>(</i>style = <i>"snake_case"</i><i>)</i><i>]</i></i>
<i>enum</i> <i>Lib</i> <i>{</i>
    Std<i>,</i>
    Smol<i>,</i>
    Smart<i>,</i>
<i>}</i>
</pre></div><p>We'll add a generic type parameter to <code>read_records</code> and our <code>Record</code> type,
so we can use whichever implementation we want:</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/sample.rs`</i>

<i>impl</i> <i>Sample</i> <i>{</i>
    <i>pub</i> <i>fn</i> <i>run</i><i>(</i><i>self</i><i>)</i> <i>{</i>
        <i>match</i> <i>self</i><i>.</i><i>lib</i> <i>{</i>
            <i>Lib</i><i>::</i>Std =&gt; <i>self</i><i>.</i><i>read_records</i><i>::</i><i>&lt;</i><i>String</i><i>&gt;</i><i>(</i><i>)</i><i>,</i>
            <i>Lib</i><i>::</i>Smol =&gt; <i>self</i><i>.</i><i>read_records</i><i>::</i><i>&lt;</i>smol_str<i>::</i><i>SmolStr</i><i>&gt;</i><i>(</i><i>)</i><i>,</i>
            <i>Lib</i><i>::</i>Smart =&gt; <i>todo</i><i>!</i><i>(</i><i>)</i><i>,</i>
        <i>}</i>
    <i>}</i>

    <i>fn</i> <i>read_records</i><i>&lt;</i><i>S</i><i>&gt;</i><i>(</i><i>&amp;</i><i>self</i><i>)</i>
    <i>where</i>
        <i>S</i><i>:</i> serde<i>::</i>de<i>::</i><i>DeserializeOwned</i><i>,</i>
    <i>{</i>
        <i>use</i> serde<i>::</i>Deserialize<i>;</i>

        <i>#<i>[</i>derive<i>(</i>Deserialize<i>)</i><i>]</i></i>
        <i>struct</i> <i>Record</i><i>&lt;</i><i>S</i><i>&gt;</i> <i>{</i>
            <i>#<i>[</i>allow<i>(</i>unused<i>)</i><i>]</i></i>
            <i>city</i><i>:</i> <i>S</i><i>,</i>
            <i>#<i>[</i>allow<i>(</i>unused<i>)</i><i>]</i></i>
            <i>state</i><i>:</i> <i>S</i><i>,</i>
        <i>}</i>

        <i>use</i> std<i>::</i>fs<i>::</i>File<i>;</i>
        <i>let</i> f = <i>File</i><i>::</i><i>open</i><i>(</i><i>"cities.json"</i><i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>crate</i><i>::</i>ALLOCATOR<i>.</i><i>set_active</i><i>(</i><i>true</i><i>)</i><i>;</i>
        <i>let</i> records<i>:</i> <i>Vec</i><i>&lt;</i><i>Record</i><i>&lt;</i><i>S</i><i>&gt;</i><i>&gt;</i> = serde_json<i>::</i><i>from_reader</i><i>(</i>f<i>)</i><i>.</i><i>unwrap</i><i>(</i><i>)</i><i>;</i>
        <i>crate</i><i>::</i>ALLOCATOR<i>.</i><i>set_active</i><i>(</i><i>false</i><i>)</i><i>;</i>
        <i>println</i><i>!</i><i>(</i><i>"Read {} records"</i><i>,</i> records<i>.</i>len<i>(</i><i>)</i><i>)</i><i>;</i>
    <i>}</i>
<i>}</i>
</pre></div><p>Let's give it a go:</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo build &amp;&amp; ./target/debug/small sample --lib smol 2&gt;! events.ldjson &amp;&amp; ./target/debug/small report events.ldjson
   Compiling small v0.1.0 (/home/amos/ftl/small)
    Finished dev [unoptimized + debuginfo] target(s) in 1.82s
Read 1000 records
found 42 events
⡁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⢹⢹ ⠁⠈ ⡁ 73896.0
⠄                                                     ⢸⢸    ⠄
⠂                                                     ⢸⢸    ⠂
⡁                                                     ⢸⢸    ⡁
⠄                                                     ⢸⢸    ⠄
⠂                                                     ⢸⢸    ⠂
⡁                                                     ⢸⢸⣀⣀⣀ ⡁
⠄                                                     ⢸     ⠄
⠂                                                     ⢸     ⠂
⡁                                                     ⢸     ⡁
⠄                                              ⡏⢹     ⢸     ⠄
⠂                                              ⡇⢸     ⢸     ⠂
⡁                                              ⡇⢸     ⢸     ⡁
⠄                                              ⡇⠘⠒⠒⠒⠒⠒⠚     ⠄
⠂                                              ⡇            ⠂
⡁                                           ⢸⢹ ⡇            ⡁
⠄                                           ⢸⢸⣀⡇            ⠄
⠂                                    ⡤⢤     ⢸               ⠂
⡁                                 ⢀⣀ ⡇⠘⠒⠒⠒⠒⠒⠚               ⡁
⠄                    ⢀⣀⡀⢀⣀⣀⡖⠲⠤⠤⠤⠤⠤⠼⠘⠒⠃                      ⠄
⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠈⠉⠉⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁ 1.0
0.0                                                      42.0
     total events | 42
      peak bytes  | 73.9 KB
     ----------------------------
     alloc events | 23
     alloc bytes  | 98.5 KB
     ----------------------------
     freed events | 19
     freed bytes  | 49.2 KB
</pre></div><p>Amazing!</p><p>Memory usage is lower than with <code>String</code>, and the number of allocations fell
from 2017 to just 23!</p><p>As we did before, we see peaks when the <code>Vec</code> resizes, but between them,
everything is flat. It seems that 22 bytes is enough to store most of the
names of the top 1000 US cities.</p><h2><a id="the-smartstring-crate" href="#the-smartstring-crate"></a>The <code>smartstring</code> crate</h2><p>Can we do even better?</p><p>The <a href="https://crates.io/crates/smartstring">smartstring</a> crate makes similar promises
to <code>smol_str</code> with the following differences:</p><ul><li>It can inline strings of up to 23 bytes (that's one more byte!)</li><li>Its String type is <strong>mutable</strong></li><li>There are two strategies, one of them re-inlines the string if
a mutation makes it short enough again.</li></ul><p>That all sounds great.</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo add smartstring
      Adding smartstring v0.2.2 to dependencies
</pre></div><p>It doesn't come with a <code>serde</code> feature at the time of this writing, but it is
pretty trivial to write an adapter.</p><div translate="no"><p>Rust code</p><pre data-lang="rust"><i>// in `src/sample.rs`</i>

<i>use</i> smartstring<i>::</i><i>{</i>LazyCompact<i>,</i> SmartString<i>}</i><i>;</i>
<i>struct</i> <i>SmartWrap</i><i>(</i><i>SmartString</i><i>&lt;</i><i>LazyCompact</i><i>&gt;</i><i>)</i><i>;</i>

<i>impl</i> <i>From</i><i>&lt;</i><i>String</i><i>&gt;</i> <i>for</i> <i>SmartWrap</i> <i>{</i>
    <i>fn</i> <i>from</i><i>(</i><i>s</i><i>:</i> <i>String</i><i>)</i> -&gt; <i>Self</i> <i>{</i>
        <i>Self</i><i>(</i>s<i>.</i><i>into</i><i>(</i><i>)</i><i>)</i>
    <i>}</i>
<i>}</i>

<i>impl</i> <i>From</i><i>&lt;</i><i>&amp;</i><i>str</i><i>&gt;</i> <i>for</i> <i>SmartWrap</i> <i>{</i>
    <i>fn</i> <i>from</i><i>(</i><i>s</i><i>:</i> <i>&amp;</i><i>str</i><i>)</i> -&gt; <i>Self</i> <i>{</i>
        <i>Self</i><i>(</i>s<i>.</i><i>into</i><i>(</i><i>)</i><i>)</i>
    <i>}</i>
<i>}</i>

<i>impl</i><i>&lt;</i><i>'</i><i>de</i><i>&gt;</i> serde<i>::</i><i>Deserialize</i><i>&lt;</i><i>'</i><i>de</i><i>&gt;</i> <i>for</i> <i>SmartWrap</i> <i>{</i>
    <i>fn</i> <i>deserialize</i><i>&lt;</i><i>D</i><i>&gt;</i><i>(</i><i>deserializer</i><i>:</i> <i>D</i><i>)</i> -&gt; <i>Result</i><i>&lt;</i><i>Self</i><i>,</i> <i>D</i><i>::</i><i>Error</i><i>&gt;</i>
    <i>where</i>
        <i>D</i><i>:</i> serde<i>::</i><i>Deserializer</i><i>&lt;</i><i>'</i><i>de</i><i>&gt;</i><i>,</i>
    <i>{</i>
        <i>use</i> <i>::</i>serde<i>::</i>de<i>::</i><i>{</i>Error<i>,</i> Visitor<i>}</i><i>;</i>
        <i>use</i> std<i>::</i>fmt<i>;</i>

        <i>struct</i> <i>SmartVisitor</i><i>;</i>

        <i>impl</i><i>&lt;</i><i>'</i><i>a</i><i>&gt;</i> <i>Visitor</i><i>&lt;</i><i>'</i><i>a</i><i>&gt;</i> <i>for</i> <i>SmartVisitor</i> <i>{</i>
            <i>type</i> <i>Value</i> = <i>SmartWrap</i><i>;</i>

            <i>fn</i> <i>expecting</i><i>(</i><i>&amp;</i><i>self</i><i>,</i> <i>formatter</i><i>:</i> <i>&amp;</i><i>mut</i> fmt<i>::</i><i>Formatter</i><i>)</i> -&gt; fmt<i>::</i><i>Result</i> <i>{</i>
                formatter<i>.</i><i>write_str</i><i>(</i><i>"a string"</i><i>)</i>
            <i>}</i>

            <i>fn</i> <i>visit_str</i><i>&lt;</i><i>E</i><i>:</i> <i>Error</i><i>&gt;</i><i>(</i><i>self</i><i>,</i> <i>v</i><i>:</i> <i>&amp;</i><i>str</i><i>)</i> -&gt; <i>Result</i><i>&lt;</i><i>Self</i><i>::</i><i>Value</i><i>,</i> <i>E</i><i>&gt;</i> <i>{</i>
                <i>Ok</i><i>(</i>v<i>.</i><i>into</i><i>(</i><i>)</i><i>)</i>
            <i>}</i>

            <i>fn</i> <i>visit_borrowed_str</i><i>&lt;</i><i>E</i><i>:</i> <i>Error</i><i>&gt;</i><i>(</i><i>self</i><i>,</i> <i>v</i><i>:</i> <i>&amp;</i><i>'</i><i>a</i> <i>str</i><i>)</i> -&gt; <i>Result</i><i>&lt;</i><i>Self</i><i>::</i><i>Value</i><i>,</i> <i>E</i><i>&gt;</i> <i>{</i>
                <i>Ok</i><i>(</i>v<i>.</i><i>into</i><i>(</i><i>)</i><i>)</i>
            <i>}</i>

            <i>fn</i> <i>visit_string</i><i>&lt;</i><i>E</i><i>:</i> <i>Error</i><i>&gt;</i><i>(</i><i>self</i><i>,</i> <i>v</i><i>:</i> <i>String</i><i>)</i> -&gt; <i>Result</i><i>&lt;</i><i>Self</i><i>::</i><i>Value</i><i>,</i> <i>E</i><i>&gt;</i> <i>{</i>
                <i>Ok</i><i>(</i>v<i>.</i><i>into</i><i>(</i><i>)</i><i>)</i>
            <i>}</i>
        <i>}</i>

        deserializer<i>.</i><i>deserialize_str</i><i>(</i>SmartVisitor<i>)</i>
    <i>}</i>
<i>}</i>

<i>impl</i> <i>Sample</i> <i>{</i>
    <i>pub</i> <i>fn</i> <i>run</i><i>(</i><i>self</i><i>)</i> <i>{</i>
        <i>match</i> <i>self</i><i>.</i><i>lib</i> <i>{</i>
            <i>Lib</i><i>::</i>Std =&gt; <i>self</i><i>.</i><i>read_records</i><i>::</i><i>&lt;</i><i>String</i><i>&gt;</i><i>(</i><i>)</i><i>,</i>
            <i>Lib</i><i>::</i>Smol =&gt; <i>self</i><i>.</i><i>read_records</i><i>::</i><i>&lt;</i>smol_str<i>::</i><i>SmolStr</i><i>&gt;</i><i>(</i><i>)</i><i>,</i>
            <i>Lib</i><i>::</i>Smart =&gt; <i>self</i><i>.</i><i>read_records</i><i>::</i><i>&lt;</i><i>SmartWrap</i><i>&gt;</i><i>(</i><i>)</i><i>,</i>
        <i>}</i>
    <i>}</i>
<i>}</i>
</pre></div><p>Let's try it!</p><div translate="no"><p>Shell session</p><pre data-lang="shell">$ cargo build &amp;&amp; ./target/debug/small sample --lib smart 2&gt;! events.ldjson &amp;&amp; ./target/debug/small report events.ldjson
   Compiling small v0.1.0 (/home/amos/ftl/small)
    Finished dev [unoptimized + debuginfo] target(s) in 0.95s
Read 1000 records
found 35 events
⡁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈⡏⠉⡏ ⠁⠈ ⡁ 73813.0
⠄                                                    ⡇ ⡇    ⠄
⠂                                                    ⡇ ⡇    ⠂
⡁                                                    ⡇ ⡇    ⡁
⠄                                                    ⡇ ⡇    ⠄
⠂                                                    ⡇ ⡇    ⠂
⡁                                                    ⡇ ⣇⣀⣀⣀ ⡁
⠄                                                    ⡇      ⠄
⠂                                                    ⡇      ⠂
⡁                                                    ⡇      ⡁
⠄                                               ⡏⢹   ⡇      ⠄
⠂                                               ⡇⢸   ⡇      ⠂
⡁                                               ⡇⢸   ⡇      ⡁
⠄                                               ⡇⠘⠒⠒⠒⠃      ⠄
⠂                                               ⡇           ⠂
⡁                                           ⢸⠉⢹ ⡇           ⡁
⠄                                           ⢸ ⢸⣀⡇           ⠄
⠂                                        ⡤⠤⡄⢸               ⠂
⡁                                    ⢀⣀⣀ ⡇ ⠓⠚               ⡁
⠄                        ⢀⣀⣀ ⣀⣀⣀⣰⠒⠲⠤⠤⠼ ⠘⠒⠃                  ⠄
⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉ ⠉⠉⠁⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁⠈ ⠁ 1.0
0.0                                                      35.0
     total events | 35
      peak bytes  | 73.8 KB
     ----------------------------
     alloc events | 19
     alloc bytes  | 98.4 KB
     ----------------------------
     freed events | 16
     freed bytes  | 49.2 KB
</pre></div><p>This is the best performance we've seen so far. We're down to 19
allocation events, and peak memory usage of 73.8 KB.</p><h2><a id="let-s-summarize" href="#let-s-summarize"></a>Let's summarize</h2><p>Here's a quick comparison of the feature sets:</p><div><table><thead><tr><td>Type</td><td>Serde</td><td>Max inline</td><td>Stream-friendly</td><td>Mutable</td><td><code>unsafe</code></td><td>Clone</td></tr></thead><tbody><tr><td>&amp;'a str</td><td>Built-in</td><td>(borrowed)</td><td>no</td><td>no</td><td>-</td><td><strong>O(1)</strong></td></tr><tr><td>String</td><td>Built-in</td><td>0</td><td><strong>yes</strong></td><td><strong>yes</strong></td><td>-</td><td>O(n)</td></tr><tr><td>SmolStr</td><td>Feature</td><td>22</td><td><strong>yes</strong></td><td>no</td><td><strong>no</strong></td><td><strong>O(1)</strong></td></tr><tr><td>SmartString</td><td>In progress</td><td>23</td><td><strong>yes</strong></td><td><strong>yes</strong></td><td>yes</td><td>O(n)</td></tr></tbody></table></div>
<p>Let's now compare the memory characterestics for our sample workload:</p><div><table><thead><tr><td>Type</td><td>Peak memory usage</td><td>Total memory events</td></tr></thead><tbody><tr><td>String</td><td>82.7 KB</td><td>2033</td></tr><tr><td>SmolStr</td><td>73.9 KB</td><td>42</td></tr><tr><td>SmartString</td><td>73.8 KB</td><td>35</td></tr></tbody></table></div><p>Finally, let's look at <a href="https://github.com/fasterthanlime/small-str-bench">three microbenchmarks</a>,
which relevance I absolutely cannot guarantee. Microbenchmarks lie <em>all the time</em>.</p><blockquote><p>In particular, those graphs completely ignore the things we've just learned
about the number of allocation operations, they completely ignore the effects
of cache locality - they're just that - microbenchmarks.</p><p>Even then, we can still validate some instincts by looking at them.</p></blockquote><p>Note that <strong>all these graphs use a <a href="https://en.wikipedia.org/wiki/Logarithmic_scale">logarithmic scale</a></strong>.
They were run on an <code>Intel(R) Xeon(R) CPU E5-1650 v2 @ 3.50GHz</code>.</p><p>The legend (top right) shows:</p><ul><li><code>string</code> for <code>std::string::String</code></li><li><code>smol</code> for <code>smol_str::SmolStr</code></li><li><code>smart</code> for <code>smartstring::SmartString&lt;LazyCompact&gt;</code></li></ul><div>

<p>No mutations are being benchmarked, so testing <code>Compact</code> probably wouldn't make sense.</p></div>
<p>The first one builds a "string" from a <code>&amp;str</code>:</p><p><img src="https://cdn.fasterthanli.me/content/articles/small-strings-in-rust/assets/from~d863e3655f21dbf5.svg"></p><p>This is a <code>O(n)</code> operation, as none of the types have any choice but to copy the entire
contents to their own storage.</p><p>For long (&gt;22 bytes) strings, we can see <code>smol</code> has a slight constant overhead over
<code>SmartString</code> and <code>String</code>. That's not surprising, as <code>smol</code> uses
<code>Arc&lt;str&gt;</code> for those - which also means it's <code>Send</code> and <code>Sync</code>.</p><p>The second benchmark simply clones a "string":</p><p><img src="https://cdn.fasterthanli.me/content/articles/small-strings-in-rust/assets/clone~83d5078533a71e7a.svg"></p><p>This is where <code>smol_str</code> shines.</p><p>For short strings, <code>SmartString</code> wins. For longer strings, <code>SmolStr::clone</code> is <code>O(1)</code>, since
it's just incrementing the reference count of an <code>Arc</code>.</p><p>The final benchmark converts a "string" back into the <code>String</code> type:</p><p><img src="https://cdn.fasterthanli.me/content/articles/small-strings-in-rust/assets/into~ada5acabd40f36fa.svg"></p><p>This one is particularly interesting to me - it looks a bit noisy, as if there were too many
outliers. And there were, probably! But that's not the whole story.</p><p>For short strings, both <code>smartstring</code> and <code>smol_str</code> need to actually build a
<code>String</code> from scratch: which means allocating the <code>String</code> struct itself, and
its storage on the heap. For longer strings, it looks like <code>smol</code> is doing twice the work!
Is it allocating storage and copying twice? I'm not sure.</p><p>Go look for yourself and report back!</p><p>What <em>don't</em> those benchmarks show, though?</p><p>We've used both crates to deserialize JSON records, but that's not what
either says to use them for. <code>smol_str</code> is <a href="https://crates.io/crates/smol_str/rev">used in
rowan</a>, itself used by rust-analyzer -
its README says its primary use case is "good enough default storage for
tokens of typical programming languages". We haven't experimented with its
whitespace-specific features at all.</p><p>As for <code>smartstring</code>, it's recommended for "a key type for a B-tree" (such as
<a href="https://doc.rust-lang.org/std/collections/struct.BTreeMap.html">BTreeMap</a>),
because inline strings greatly improve <a href="https://en.wikipedia.org/wiki/Locality_of_reference">cache
locality</a>. This is something
none of our benchmarks even touched.</p><p>This concludes our comparison of <code>String</code>, <code>SmolStr</code>, and <code>SmartString</code> -
even though there would be a lot more to say about them both.</p><p>Until next time, take care!</p>

        

        
            
            
        

        
            
<p>If you liked what you saw, please support my work!</p>
<p>
    <a href="https://github.com/sponsors/fasterthanlime">
    <img alt="Github logo" src="https://cdn.fasterthanli.me/static/img/github~55b614e277dce71c.black.png">
    <span>Donate on GitHub</span>
    </a>
    <a href="https://www.patreon.com/bePatron?u=47556">
    <img alt="Patreon logo" src="https://cdn.fasterthanli.me/static/img/patreon/mark-white~5bbe96f563a716c8.png">
    <span>Donate on Patreon</span>
    </a>
</p>


        

        


        
        <!-- page_html ends -->
    </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Implementing React from Scratch (151 pts)]]></title>
            <link>https://www.rob.directory/blog/react-from-scratch</link>
            <guid>41338729</guid>
            <pubDate>Sat, 24 Aug 2024 14:50:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.rob.directory/blog/react-from-scratch">https://www.rob.directory/blog/react-from-scratch</a>, See on <a href="https://news.ycombinator.com/item?id=41338729">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><article>
<p>Robby Pruzan 8/23/24</p>
<!--$--><div><p>Estimated Reading Time: </p><!-- --><p>26.4</p><!-- --><p>m</p></div><!--/$-->
<p>Full Code: <a href="https://github.com/RobPruzan/react-scratch">https://github.com/RobPruzan/react-scratch</a></p>
<h2>Table of Contents</h2>
<ul>
<li><a href="#rendering-something-to-the-screen">Rendering something to the screen</a></li>
<li><a href="#usestate">useState</a></li>
<li><a href="#re-rendering-a-component">Re-rendering a component</a></li>
<li><a href="#reconciling-view-nodes-between-render">Reconciling view nodes between render</a></li>
<li><a href="#conditional-elements">Conditional elements</a></li>
<li><a href="#efficient-dom-updates">Efficient DOM updates</a></li>
<li><a href="#more-hooks">More hooks</a>
<ul>
<li><a href="#useref">useRef</a></li>
<li><a href="#useeffect">useEffect</a></li>
<li><a href="#usememo">useMemo</a></li>
<li><a href="#usecallback">useCallback</a></li>
<li><a href="#usecontext">useContext</a></li>
</ul>
</li>
<li><a href="#the-final-result">Final result</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<p>My goal here is to walk through my process of building react from the groundup, hopefully giving you an intuition to why things behave the way they do in react. There are many cases where react leaks its abstraction in the interface, so learning how the internals <strong>could</strong> by implemented is extremely useful to understand the motivation behind those interface designs.</p>
<p>But, I'm not trying to follow the same implementation that the react team did. I didn't even know the internal architecture before coding this up. Just high level concepts like virtual dom's and reconciliation.</p>
<p>This is also not supposed to be an optimal implementation. There are several very impressive optimizations react implements that I will not be attempting- like concurrent/cancellable rendering.</p>
<p>What I want to get done here is:</p>
<ul>
<li>Core render model (components in the component tree should re-render the same amount of times between implementations)</li>
<li>Output should look the same given the same input</li>
<li>Core hooks are implemented (useState, useRef, useEffect, useContext,useMemo, useCallback)</li>
<li>Precise Dom updates</li>
</ul>
<h2 id="rendering-something-to-the-screen"><p>Rendering something to the screen</p></h2>
<p>Let's start with the first goal, rendering something to the screen, using react's api. React is traditionally written through jsx, an html like syntax for instantiating components. But, the actual library has no idea of this representation. All jsx syntax gets transformed to function calls.</p>
<p>For example, the following snippet:</p>
<!--$--><!--/$-->
<p>Will get transformed into:</p>
<!--$--><!--/$-->
<p>I won't go over how this transformation happens, since this article is not about parsers :).</p>
<p>To get started, let's create our first example that we will create a minimal implementation for:</p>
<!--$--><!--/$-->
<p>The first immediately obvious thing is that we have a tree-like/recursive structure to construct our view hierarchy- <code>createElement</code> accepts rest parameters, where the parameters are the return type of create element</p>
<p>So, let's go ahead and model this view hierarchy and the input type of createElement.</p>
<!--$--><!--/$-->
<p>And then we can trivially convert the input of createElement into our internal representation:</p>
<!--$--><!--/$-->
<p>Now that we have a representation of the view hierarchy, we can successfully apply it to the dom with the following code:</p>
<!--$--><!--/$-->
<p>Currently, <code>applyComponentsToDom</code> only traverses tag elements. This is because the tree of tag elements is eagerly evaluated, as they are just strings passed to createElement, so there is no effort needed to generate the tree that we traverse. It's already built for us.</p>
<p>But, if we want to start rendering functional components, and composing different functional components together, we will no longer have an eagerly evaluated tree. It will look something more like:</p>
<!-- -->
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage.png&amp;w=1080&amp;q=75">
<p>Where every function needs to be manually executed to evaluate the rest of the tree.</p>
<p>Another way of saying that is the "children" property in the component's metadata no longer represents a valid tree-like structure we can traverse trivially. We will have to use the HTML tag information, along with the function associated with the component, to generate a full tree we can traverse.</p>
<p>To do this, let's model what a node on this tree we need to build will look like</p>
<!--$--><!--/$-->
<p>With this kind of tree, we will explicitly have fully executed nodes held inside the "childNodes" property</p>
<p>Our next challenge will be to actually generate this view tree given the root components metadata. The root component would be the one passed to</p>
<!--$--><!--/$-->
<p>In this tree we are trying to make, the parent-child hierarchy is determined by the "children" property on the component's metadata.</p>
<p>To make a function that can turn the lazy internal metadata into a full view tree, we will need to do the following:</p>
<ul>
<li>create a new node for every internal metadata (which will be returned at the end of the function)</li>
<li>if the metadata represents a function, run the function, recursively traverse its output, and append the recursive call's result to the child nodes of the new node<!-- -->
<ul>
<li>This gives us the fully exectuted tree under the function (at most as 1 child)</li>
</ul>
</li>
<li>If the metadata represents a tag, get the view node for all the children's metadata by calling generateViewTree recursively. Set that output as the child nodes of the new node made for the tag metadata<!-- -->
<ul>
<li>This gives us the fully executed tree under the tag node (may have many children)</li>
</ul>
</li>
</ul>
<p>What that looks like in code is:</p>
<!--$--><!--/$-->
<p>And then we need to update our <code>applyComponentsToDom</code> function so it traverses this new tree</p>
<!--$--><!--/$-->
<p>This gets us far enough to apply the view tree we generated to the dom, allowing us to compose functional components together. Our next goal will be to add some interactivity to these components</p>
<h2 id="usestate">useState</h2>
<p>Binding state to a component in react is used using the useState hook.</p>
<p>The first time <code>useState</code> is called in a component, it will bind state to the component it was called in, and associate the created state with that specific hook call. Allowing the component to read the latest value of the state in subsequent renders.</p>
<p>The difficult part of this process is:</p>
<ol>
<li>How does <code>useState</code> know which component instance it's being called from?</li>
<li>If there are multiple <code>useState</code>'s in a component, how does it remember between renders what state it's associated with?</li>
</ol>
<!--$--><!--/$-->
<p>To solve the first problem, it's not entirely difficult. We just need to track globally which component we are calling when we traverse the component's internal metadata to generate the view tree. Before we call it, we update some globally available object to hold that components metadata. Then inside the <code>useState</code> definition it can read that global variable and know what component it's being called from.</p>
<p>Now for problem #2. We already know how react implements this without looking at the code. One big rule of react is that hooks cannot be called conditionally. But why is that? It's because react uses the order the hooks are called to determine equality of hook calls between renders.</p>
<p>If react makes the assertion that no hooks can ever be called conditionally, and say there's a component that made the following hook calls:</p>
<!--$--><!--/$-->
<p>and then the next render it made the following hook calls:</p>
<!--$--><!--/$-->
<p>We can trivially say the i'th hook call's in each render are associated with each other, where i=the index of the hook in the order it was invoked.</p>
<p>We can track the current order of a hook call by incrementing a globally accessible counter every time it is called inside the hook's definition and also reading the counter's value when it's called.</p>
<p>In psuedo code it would look like</p>
<!--$--><!--/$-->
<p>One way we can use this information is by maintaining an array of "hook state" in our components view node. Where the item in the i'th position belongs to the hook called the i'th time in that component.</p>
<p>Because the currently rendering component is accessible globally, we can access its hook array from the <code>useState</code> function definition, and then index into it using our global counter. If the hook is running for the first time, we simply push initial state to this array.</p>
<p>Then the tuple returned by useState is:</p>
<ul>
<li>the value stored at the i'th position in the hook state array</li>
<li>a closure that has the ability to mutate that hook array with a provided value, and trigger a re-render of the component that defined the state (by capturing the currently rendering component in the closure)</li>
</ul>
<p>This would look something like</p>
<!--$--><!--/$-->
<p>The end code for this hook is almost identical to this example, just with some error checking, proper typing, and referencing real global values. If you want to check it out <a href="https://github.com/RobPruzan/react-scratch/blob/main/src/react/core.ts#L1613-L1662">here is the definition</a></p>
<p>Now that we defined our first hook, we have a nice way to define what a hook is. It's just a function, but it's a function that depends on information bound to a component.</p>
<h2 id="re-rendering-a-component">Re-rendering a component</h2>
<p>Now lets move onto our next goal: actually implementing <code>triggerReRender()</code></p>
<p>It will end up having 3 steps:</p>
<ol>
<li>regenerate the view tree, starting from the captured currentlyRenderingComponent in the set state closure</li>
<li>once the sub view tree is generated, patch the existing view tree (that we store in a global object) to use the newly generated sub tree, transferring over its state to the new view tree</li>
<li>Given the new, patched, view tree, update the dom</li>
</ol>
<p>Step 1 will not be that challenging. The <code>generateViewTree</code> function that I showed above is a pure function, and does not operate differently if it's passed the root of the tree, or a sub-tree that is part of a larger tree. So we can just pass it the captured variable in the useState returned closure- <code>currentlyRenderingComponent</code>- and get our new view tree, automatically re-rendering all the children. Because we mutated the hook state array before re-rendering the children, they will read the newest value passed to the set state function.</p>
<p>Now we can move onto step 2, patching the existing view tree. This is also quite simple. We just need to do a traversal of the existing view tree to find the currently rendering components parent, and then just replace the previous node with the newly generated node. To transfer over the state, we can just copy over the components state to the new tree node (this is not the right way to do it, will go over the right way later).</p>
<p>Then using this patched view tree, we will update the dom in a hilariously inefficient manner, and then come back and make a more efficient implementation later. We will take down the entire DOM starting from the root of our react app, and then re-build it using our new view tree. We already have a function that can apply the entire view tree to the dom given a root dom element, so we can re-use that.</p>
<p>Those 3 steps in the function together would look like</p>
<!--$--><!--/$-->
<p>And this is all we need for an insanely in-effecient re-render strategy .</p>
<p>Now that we can re-render components, I want to revisit one of our original goals:</p>
<ul>
<li>components in the component tree should re-render the same amount of times between implementations</li>
</ul>
<p>If our view tree is constructed correctly, this should be true. When a parent node changes in react, it unconditionally re-renders its children by default.</p>
<p>But, for the following code, what do we expect the parent-child relationship to be in terms of rendering (using JSX here for brevity):</p>
<!--$--><!--/$-->
<p>Another way to ask that question is, if <code>ComponentA</code> re-renders, should <code>ComponentB</code> re-render? Lets take a look at what our current view tree would look like:</p>
<img loading="lazy" width="200" height="300" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-1.png&amp;w=256&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-1.png&amp;w=640&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-1.png&amp;w=640&amp;q=75">
<p>This implies that <code>ComponentA</code> re-rendering <strong>should</strong> re-render <code>ComponentB</code>. But does it need to? <code>ComponentB</code> will never accept any props from <code>ComponentA</code>, as it was created in <code>App</code>.</p>
<p>If we say that the possibility of a component accepting props from another component creates a dependency between the 2 components, a dependency tree for the above react app would look like:</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-2.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-2.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-2.png&amp;w=1080&amp;q=75">
<blockquote>
<p>Note, in my actual code on GitHub I refer to the dependency tree as the "RenderTree"</p>
</blockquote>
<p>This dependency tree is more inline with how react determines to re-render components. This means we have a bug, as our implementation would re-rerender <code>ComponentB</code> when a sibling (in the dependency tree) changed, because it was a child in the view tree.</p>
<p>We now have 2 tree representations we need to reference to correctly re-render a component. One that determines how the DOM should look, and the other that determines when components need to re-render.</p>
<p>The only information we need to build this dependency tree is knowing which component a given component was called in. The component some given component was called in will be marked as the parent. This works because after you call createElement, there's no way to update the elements props:</p>
<!--$--><!--/$-->
<p>So all we have to do is track which component the <code>createElement</code> call happened in to build up a valid dependency tree. We can do this with not too much effort:</p>
<ul>
<li>Before a component is rendered, create a dependency tree node for it, and store it globally so <code>createElement</code> can access it (essentially the same as the currently rendering component talked about earlier)</li>
<li>For every <code>createElement</code> call, push a new render node, representing the component an element was created for, as a child of the globally accessible render node</li>
</ul>
<blockquote>
<p>Note: This strategy is only close to what I ended up doing.
I ended up implementing a more roundabout method so it would play nicely with my existing code. The general idea of what I really did was:</p>
<ul>
<li>take the output internal metadata by a component (a tree like structure), and flatten it into an array</li>
<li>If any node inside the array is already in the dependency tree, it must have been called earlier, so filter it out
This works because the first return value the element is in must be the component it was created in.</li>
</ul>
</blockquote>
<p>Using this strategy, we can build the dependency tree we were looking for. However, since we're not using it for anything, our components still re-render incorrectly.</p>
<p>We will need to use this dependency tree as we traverse the lazy tree returned by a component:</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-3.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-3.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-3.png&amp;w=1080&amp;q=75">
<p>A simple way we can use the dependency tree is as we are generating the view tree, only re-render a component if it depends on the component that triggered the re-render (or if it's never been rendered before)</p>
<p>If both a component is not dependent on the node that triggered the render, and it's not the first render, we can skip rendering that component, and use the previous view tree output by that component- essentially caching the output.</p>
<p>If you want to see in code what this looked like, <a href="https://github.com/RobPruzan/react-scratch/blob/main/src/react/core.ts#L1077-L1140">here's the real implementation that uses this strategy</a></p>
<h2 id="reconciling-view-nodes-between-render"><p>Reconciling view nodes between render</p></h2>
<p>Our render model is still broken. As mentioned earlier, the way we transfer state
between renders is very wrong!</p>
<p>Previously, to make sure state is not lost between re-renders, we just copied the state over for only the component that triggered the re-render</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-4.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-4.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-4.png&amp;w=1080&amp;q=75">
<p>But what about every other component? They will all have re-initialized states, remembering nothing from the previous re-render.</p>
<p>This is a pretty hard problem. We only have the runtime representation of what the tree's "look like". We don't have a compiler that runs over the user's code that tells us which components are equal</p>
<p>What we have to do is determine equality between the 2 trees for every node in the tree, not just the trivial root node.</p>
<p>Lets see how we can do this as a human. For the following example, how would you determine equality between nodes, if you had to make a decision:</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-5.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-5.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-5.png&amp;w=1080&amp;q=75">
<p>I think the answer is pretty easy here: just match the nodes in the same position:</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-6.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-6.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-6.png&amp;w=1080&amp;q=75">
<p>And how do we programmatically define position? We can just say the path to get to the node</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-7.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-7.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-7.png&amp;w=1080&amp;q=75">
<p>When a node has the same index path between view trees, we can transfer over the state from the previous tree. If there's a new path we can't map (implying its a new node), we don't transfer any state over and let it initialize itself.</p>
<p>This is why react is so crazy about providing keys when rendering lists. If nodes re-order, it will incorrectly determine equality between nodes, and state will be assigned incorrectly to components.</p>
<p>If you want to see what this reconciliation process between tree's looks like in code, here's the link (note, in the <a href="https://github.com/RobPruzan/react-scratch/blob/main/src/react/core.ts#L1202-L1210">final code</a> we take into account the index path AND component name):</p>
<h2 id="conditional-elements">Conditional elements</h2>
<p>Conditional elements are a core part of react's functionality. Because you're just writing a javascript function that returns react elements, you can of course conditionally return elements:</p>
<!--$--><!--/$-->
<p>Or you can conditionally render an element</p>
<!--$--><!--/$-->
<p>Where when condition is <code>false | null | undefined</code> react will render nothing to the dom in its place.</p>
<p>Our implementation already handles the first case automatically- since the names are different, we would correctly determine to initialize <code>ComponentB</code> (if the components were both <code>ComponentA</code>, our implementation would consider them the same, but so would React if you don't provide keys.)</p>
<p>Regarding the second case, currently, our <code>createElement</code> function does not take <code>null | false | undefined</code> values as children. And this is what the conditional render compiles down to:</p>
<!--$--><!--/$-->
<p>So we need to update <code>createElement</code> to allow <code>null | false | undefined</code>, and to handle it somehow.</p>
<p>The simplest solution would be to filter out all <code>false | null | undefined</code> values. Then anytime one is returned no node will be created for the value, and it's seemingly deleted as we expected?</p>
<p>But we cannot do that. Imagine the following trees generated between 2 renders, where the node at path [0] is conditionally rendered:</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-8.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-8.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-8.png&amp;w=1080&amp;q=75">
<p>If, in the second render, [0] was replaced with <code>false | undefined | null</code>, we could omit to create a node for it. But then the node at [1] would slip back to position [0], making it look like it was the [0]'th node, and the same goes for its children.</p>
<p>But that would obviously be wrong, and would mean we would have to require keys for components anytime the user wanted to conditionally render them. Which react does not ask users to do.</p>
<p>Instead, we could represent <code>false | undefined | null</code> as an empty slot in our tree. Where <code>false | null | undefined</code> create valid react elements to place on the tree. They just have no metadata and no children. This way, our tree will be stable between renders:</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-9.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-9.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-9.png&amp;w=1080&amp;q=75">
<p>Anytime we attempt to render an empty slot, we just skip it. It has no children and cannot output anything. All our nodes still exist in the same position, so we can correctly transfer state between renders.</p>
<h2 id="efficient-dom-updates">Efficient dom updates</h2>
<p>Currently we take down the entire dom every time anything re-renders. Obviously react does not do this. It will only update the needed dom nodes.</p>
<p>We already went over how we can determine equality between trees- the path to the node. This strategy will be very useful for updating the dom.</p>
<p>We will be comparing the new and old view trees after re-rendering a component. As we find tag nodes that have matching index path's, we pass the props of the new view node directly to the HTML tag. React has a light abstraction of this with their <a href="https://legacy.reactjs.org/docs/events.html">synthetic event</a> system. But essentially does the same thing.</p>
<p>If a new node has no node it can match to from the previous tree, it must be a new node, and we create a new HTML element for it.</p>
<p>If an old node has no node it can match to from the previous tree, it must no longer exist, so we delete the existing HTML element for it.</p>
<p>This is really all that's needed to have pretty efficient dom updates. The <a href="https://github.com/RobPruzan/react-scratch/blob/main/src/react/core.ts#L91-L400">actual code</a> i wrote for this seems quite a bit more convoluted than what I described since there's some book keeping needed because of conditional elements (empty slots).</p>
<p>If a view tree node becomes an empty slot between renders, we have to delete the associated dom node. And if the empty slot turns into a real element, we have to insert it into the dom at the right position.</p>
<h2 id="more-hooks">More hooks</h2>
<p>Now that our core render model is for the most part done, we can implement some fun hooks</p>
<h3 id="useref">useRef</h3>
<p>This is an extremely easy hook to implement. It simply binds an immutable reference to your component, allowing you to change the contents at the reference arbitrarily, not causing a re-render.</p>
<p>To adapt the example code for <code>useState</code>, it would look something like</p>
<!--$--><!--/$-->
<p>The core part missing is there is no trigger re-render. Otherwise, it's still data bound to the component and acts very similar to the state returned by useState.</p>
<h3 id="useeffect">useEffect</h3>
<p>Now let's move to <code>useEffect</code>. <code>useEffect</code> has 3 core components:</p>
<ul>
<li>The effect callback</li>
<li>The effect dependencies</li>
<li>The effect cleanup</li>
</ul>
<p>Every time the dependencies change or the component is first mounted, the effect callback is called. If the effect callback returns a function, it will be called before the next effect, acting as a cleanup function for any setup logic performed in the effect callback.</p>
<p>The useEffect hook is also quite simple to implement, especially because of how complex it can feel in some codebases.</p>
<p>We follow a similar process to useRef and useState: We read the currently rendering component, index into its hooks, and initialize it if the component hasn't already been rendered.</p>
<p>But we have one extra step. If the dependencies changed compared to the previous render, measured with shallow equality (===), then we update the effect callback of the hook state and its dependencies. If the dependencies change, then the previous callback has a closure over stale values, so we need the newly computed closure (remember, a closure is just a special object, and we want the latest one).</p>
<!--$--><!--/$-->
<p>We are done setting up the effects for the components, but this function definition does not handle calling the effect or effect cleanup. This happens after the render completes.</p>
<p>Unsurprisingly, the actual location in the code where we will call the effects is after we call the component's render function.</p>
<p>We will have to map over all the effects the component holds, check if the dependencies changed compared to the previous render, and if they did:</p>
<ul>
<li>call the effect cleanup if there is one</li>
<li>call the effect</li>
<li>if the effect returns a callback, set it as the new cleanup function in the hooks state</li>
</ul>
<p>And this is the exact code needed to implement this:</p>
<!--$--><!--/$-->
<p>not bad at all</p>
<h3 id="usememo">useMemo</h3>
<p>There tends to be a lot of misinformation about <code>useMemo</code> and how you should avoid them because of the overhead they generate. But let's see if that's really the case.</p>
<p>useMemo accepts a function that outputs a value and returns that value by calling the function. The special part about <code>useMemo</code> is that it also accepts an array of dependencies. If those dependencies don't change between renders, it will not call the function again; instead, it will re-use the last output of the function. If they do change, the function will run again, and that value will be returned going forward.</p>
<p>This is a way to optimize your components because you can avoid unnecessarily re-computing values. But, this is only true if the overhead of the memoizing check is less than the overhead of calling the function. But we can define well what that overhead is since we're implementing the hook:</p>
<p>It will be very similar to the <code>useEffect</code> implementation. We need to do all the initial setup logic to get the hook state, or initialize it if it's the first render. Then we check if the dependencies changed, just like <code>useEffect</code>. The difference is if the dependencies change in <code>useMemo</code>, we call the provided function. Else, we return the previous value:</p>
<!--$--><!--/$-->
<p>In our implementation, the overhead to call <code>useMemo</code> is quite low! All we do is some cheap if statements on a more-than-likely small array. Even in javascript, this is quite fast.</p>
<p>I took the liberty of checking out react's implementation after the fact. And it is quite basically identical (check it out <a href="https://github.com/facebook/react/blob/0fa9476b9b9b7e284fb6ebe7e1c46a6a6ae85f27/packages/react-reconciler/src/ReactFiberHooks.js#L2831-L2853">here</a>, along with basically every other hook)</p>
<p>Here's the code if you don't want to click links:</p>
<!--$--><!--/$-->
<p>Where <code>areHookInputs</code> equal simply does:</p>
<!--$--><!--/$-->
<p>This means if your function does more computation than the computation required to perform <code>deps.length</code> shallow equals, you're probably better off using <code>useMemo</code>.</p>
<p>This was also proven at scale with the react compiler- a compiler that memorizes basically everything. They applied it to the Instagram codebase and saw no increases in memory and huge improvements to to interactivity:</p>
<img loading="lazy" width="450" height="450" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-10.png&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-10.png&amp;w=1080&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fimage-10.png&amp;w=1080&amp;q=75">
<h3 id="usecallback">useCallback</h3>
<p>Now that we have implemented <code>useMemo</code>, let's implement <code>useCallback</code>.</p>
<p>Drumroll, please.</p>
<!--$--><!--/$-->
<p><code>useCallback</code> is, literally, <code>useMemo</code> that returns a function. It is slightly less awkward to read than</p>
<!--$--><!--/$-->
<p>And because I was curious, I later checked out reacts implementation:</p>
<p>And it was, for the most part, <a href="https://github.com/facebook/react/blob/0fa9476b9b9b7e284fb6ebe7e1c46a6a6ae85f27/packages/react-reconciler/src/ReactFiberHooks.js#L2801-L2813">the same implementation as <code>useMemo</code>:</a></p>
<h3 id="usecontext">useContext</h3>
<p><code>useContext</code> is special compared to most other hooks. This comes from <code>useContext</code> not being responsible for creating any state when called. It's
only responsible for reading state, which is being shared higher up the tree.</p>
<p>The functionality required to share this state is not part of the hook. It originates through a context provider- a special component.</p>
<p>Here's an example usage to make sure we're on the same page</p>
<!--$--><!--/$-->
<p><code>createContext</code> acts as a factory to create a special <code>Provider</code> component that holds data. Components read this data by calling <code>useContext</code> and passing the return value of <code>createContext.</code> Telling useContext to search up the view tree until it finds the provider created by the same context.</p>
<p>Notice how I said we search up the view tree, not the dependency tree. A component may be a sibling of another component in terms of the dependency hierarchy, but a child in terms of the view hierarchy and would still be able to read the context. For example:</p>
<!--$--><!--/$-->
<p>If <code>SomeContext.Provider</code> is a component, it is a sibling of <code>SomeComponent</code> in the dependency tree. But, we expect <code>SomeComponent</code> to have the context state available to it when calling <code>useContext(SomeContext</code>). So we can say that the tree <code>useContext</code> searches up must be based on the view tree.</p>
<p>You might think this means that <code>SomeComponent</code> now depends on <code>SomeContext.Provider</code>, and we should update the dependency tree to represent that, but that's not the case.</p>
<p>While <code>SomeComponet</code> does read data provided by <code>SomeContext.Provider</code>, <code>SomeContext.Provider</code> simply broadcasts a value, it's not creating react state that can be updated + cause a re-render (there is no setter associated with it).</p>
<p>For the data inside the provider to change, there must be a state change triggered by an ancestor of <code>SomeContext.Provider</code> (all the data the provider holds must come from a component it depends on, since it was passed as props). And because <code>SomeComponent</code> + <code>SomeContext.Provider</code> are siblings (in the dependency tree), they share the same ancestors and will be re-rendered together. Allowing <code>SomeComponent</code> to read the newest value broadcasted by <code>SomeComponent</code> .</p>
<p>If instead <code>SomeContext.Provider</code> broadcasted a value that is not react state; it would simply be static, and there would be no reason to have a dependency on something that will never change.</p>
<p>With that out of the way, let's start with implementing <code>createContext</code>, the function that creates the special provider component.</p>
<p>Currently <code>createElement</code> only returns metadata about the component it instantiates. This metadata includes props, the function or html tag, and its children.</p>
<p>For a provider component, we can assign the data we want to distribute to the decedents of the component by adding a property on the internal metadata that stores it. Then, we set it
only when we create the metadata using <code>createContext</code>.</p>
<p>Later, when we call <code>useContext(SomeContext)</code>, we read up the view tree and look for a node that has a provider equal to SomeContext.Provider, and if it does the data will be available to read.</p>
<p>Here's what the implementation of createContext looks like:</p>
<!--$--><!--/$-->
<ul>
<li>Note that the element type i passed was a div. This is obviously wrong. What we really want to do here is something like a fragment. For now I wont implement it because I don't think it's a core feature of react.</li>
<li>Note, previously, our view tree nodes only carry information about their child nodes. So, we would have to do a potentially expensive traversal to move up the tree and check if an ancestor node has the provider we are looking for. To avoid this, I ended up performing a minor optimization and de-normalizing the view tree by storing the parent as a property on the child node.</li>
</ul>
<p>If we don't find the provider up the tree, we want to return the default value passed to createContext. This was the unexplained part about the above <code>createContext</code> implementation. What we can do is store the default values in a global array. When a provider is not found, the <code>useContext</code> function can fall back to reading the default values. This behavior is very similar to how programming languages behave when a value is not found in any ancestor scope- fallback to looking into the global scope.</p>
<p>Lets now look at what the <code>useContext</code> implementation would look like since all the pieces needed are finished:</p>
<!--$--><!--/$-->
<p>Something you may have noticed in our use context implementation is we never incremented the hooks called by one or mutated the render nodes hook array. This is because we read the context data based on an ID that is created outside of the react tree (createContext), and because useContext creates no data that needs to be persisted across renders, it only reads. So we are not limited by the order it was called.</p>
<p>This means we can call it conditionally with no problem. This is the same behavior react's new <a href="https://react.dev/reference/react/use"><code>use</code> hook</a> has, which can be used to read context. I imagine the fact it can be called conditioanlly is for a very similar reason.</p>
<p>Though, I do not know what the limitation behind not being able to call useContext conditionally. Perhaps this was a quirk in the implementation, making <code>use</code> closer to their ideal implementation.</p>
<h2 id="the-final-result">Final result</h2>
<p>Lets finally see an example of all of it put together!</p>
<p>The below example shows off a sample app with context, state, memoization, fetching in useEffects, conditional rendering, list rendering, deep props, and efficient dom updates!</p>
<img loading="lazy" width="600" height="600" decoding="async" data-nimg="1" srcset="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fdemo.gif&amp;w=640&amp;q=75 1x, https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fdemo.gif&amp;w=1200&amp;q=75 2x" src="https://www.rob.directory/_next/image?url=%2Freact-from-scratch%2Fdemo.gif&amp;w=1200&amp;q=75">
<h2 id="conclusion">Conclusion</h2>
<p>Re-building libraries from scratch is a pretty great way to get intuition as to why the library made certain decisions. You also end up building a strong internal model of the library, and that allows you to reason through scenarios you may of never encountered. It's also a great way to learn about hidden behaviors you definitely would not of thought about without building the library.</p>
<p>If you end up doing a deep dive on the entire codebase, you will likely notice things are more complicated than they seem in my explanations here. There is a lot of complexity added by my skill issues/ mistakes made early on that would take too long to rectify. If I rewrote this, I think I could probably do it in 1/3 the lines.</p>
<p>Anyways, I did my best to distill the core ideas of the codebase into something explainable here. If you have any questions about how something is implemented, or you encounter a bug (I'm sure there's many) feel free to make a GitHub issue, and I'll be sure to respond!</p>
<p>In the future, I do want to take this further in a few ways:</p>
<ul>
<li>
<p>implementing server-side rendering</p>
<ul>
<li>this would involve building a string, instead of a dom, from the view tree</li>
<li>We would have to find a way to map the HTML generated by the server to the view/dependency trees generated by the client side react. This would formally be known as hydration.</li>
</ul>
</li>
<li>
<p>different render targets</p>
<ul>
<li>there's no reason we have to generate a dom from our view tree. Any UI that has any hierarchial structure can pretty easily use the implemented react internals here</li>
</ul>
</li>
<li>
<p>reimplement this in swift</p>
<ul>
<li>i've had to use UIKit recently for a job, and very much miss react. Something inside me very much wants to port this to swift.</li>
<li>Instead of dom elements the library would create UIViews</li>
</ul>
</li>
</ul>
<p>Hopefully, you got something out of reading this. If you're interested in more stuff about react internals, and this article made somewhat sense to you, I recommend going ahead and just reading the <a href="https://github.com/facebook/react[.](https://github.com/facebook/react)">react source code</a>. No better place to learn more about react than react itself</p></article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Julius: Open-source reimplementation of Caesar III (165 pts)]]></title>
            <link>https://github.com/bvschaik/julius</link>
            <guid>41338661</guid>
            <pubDate>Sat, 24 Aug 2024 14:40:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/bvschaik/julius">https://github.com/bvschaik/julius</a>, See on <a href="https://news.ycombinator.com/item?id=41338661">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><div dir="auto"><h2 tabindex="-1" dir="auto">Julius <a target="_blank" rel="noopener noreferrer" href="https://github.com/bvschaik/julius/blob/master/res/julius_48.png"><img src="https://github.com/bvschaik/julius/raw/master/res/julius_48.png" alt=""></a></h2><a id="user-content-julius-" aria-label="Permalink: Julius " href="#julius-"></a></div>
<p dir="auto"><a href="https://github.com/bvschaik/julius/actions"><img src="https://github.com/bvschaik/julius/workflows/Build%20Julius/badge.svg" alt="Github Actions"></a></p>
<p dir="auto">Download:
<a href="https://github.com/bvschaik/julius/wiki/Julius-release"><img src="https://camo.githubusercontent.com/ef8d59494ab416c42cbea6abc0aa49b200f70bf2c9e5339eab19de275801f3ed/68747470733a2f2f6a756c6975732e6269616e636176616e73636861696b2e6e6c2f62616467652f72656c656173652e737667" alt="Download release version" data-canonical-src="https://julius.biancavanschaik.nl/badge/release.svg"></a>
<a href="https://julius.biancavanschaik.nl/" rel="nofollow"><img src="https://camo.githubusercontent.com/4bb55142ea1bcf23f1a30733622f83047a927d83f2398a217297c835f6d49254/68747470733a2f2f6a756c6975732e6269616e636176616e73636861696b2e6e6c2f62616467652f646576656c6f706d656e742e737667" alt="Download development version" data-canonical-src="https://julius.biancavanschaik.nl/badge/development.svg"></a></p>
<p dir="auto">Android version on Google Play: <a href="https://play.google.com/store/apps/details?id=com.github.bvschaik.julius" rel="nofollow">install release</a> or <a href="https://play.google.com/apps/testing/com.github.bvschaik.julius" rel="nofollow">sign up for test builds</a></p>
<p dir="auto">Chat: <a href="http://www.discord.gg/GamerZakh" rel="nofollow">Discord</a> (kindly hosted by GamerZakh)</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Julius: an open source re-implementation of Caesar III</h2><a id="user-content-julius-an-open-source-re-implementation-of-caesar-iii" aria-label="Permalink: Julius: an open source re-implementation of Caesar III" href="#julius-an-open-source-re-implementation-of-caesar-iii"></a></p>
<p dir="auto">Julius is a fully working open-source version of Caesar 3, with the same logic
as the original, but with some UI enhancements, that can be played on multiple platforms.</p>
<p dir="auto">Julius will not run without the original Caesar 3 files. You can buy a digital copy from <a href="https://www.gog.com/game/caesar_3" rel="nofollow">GOG</a> or
<a href="https://store.steampowered.com/app/517790/Caesar_3/" rel="nofollow">Steam</a>, or you can use an original CD-ROM version.</p>
<p dir="auto">The goal of the project is to have exactly the same game logic as Caesar 3, with the same look
and feel. This means that the saved games are 100% compatible with Caesar 3, and any gameplay bugs
present in the original Caesar 3 game will also be present in Julius.</p>
<p dir="auto">Enhancements for Julius include:</p>
<ul dir="auto">
<li>Support for widescreen resolutions</li>
<li>Windowed mode support for 32-bit desktops</li>
<li>A lot of small in-game <a href="https://github.com/bvschaik/julius/wiki/Improvements-from-Caesar-3">quality of life improvements</a></li>
<li>Support for the <a href="https://github.com/bvschaik/julius/wiki/MP3-Support">high-quality MP3 files</a> once provided on the Sierra website</li>
</ul>
<p dir="auto">Supported platforms:</p>
<ul dir="auto">
<li>Windows</li>
<li>Linux AppImage</li>
<li>MacOS</li>
<li>PS Vita</li>
<li>Nintendo Switch</li>
<li>Android</li>
<li>Any compatible browser (Emscripten)</li>
</ul>
<p dir="auto">While Julius does not implement any gameplay changes, a fork of Julius named <a href="https://github.com/Keriew/augustus">Augustus</a> is implementing many long-wanted gameplay changes, such as roadblocks.
Beware: Augustus does not support the original Caesar 3 save files, while Julius does. So use Julius for a more vanilla experience with some visual improvements, or Augustus for a different gameplay experience.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/bvschaik/julius/blob/master/res/vita/bg.png"><img src="https://github.com/bvschaik/julius/raw/master/res/vita/bg.png" alt=""></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Running the game</h2><a id="user-content-running-the-game" aria-label="Permalink: Running the game" href="#running-the-game"></a></p>
<p dir="auto">First, download the game for your platform from the list above. Alternatively, you can <a href="https://github.com/bvschaik/julius/blob/master/doc/BUILDING.md">build Julius</a> yourself.</p>
<p dir="auto">Then you can either copy the game to the Caesar 3 folder, or run the game from an independent
folder, in which case the game will ask you to point to the Caesar 3 folder.</p>
<p dir="auto">Note that you must have permission to write in the game data directory as the saves will be
stored there. Also, your game must be patched to 1.0.1.0 to use Julius. If Julius tells you that
you are missing it, you can <a href="https://github.com/bvschaik/julius/wiki/Patches">download the update here</a>.</p>
<p dir="auto">See <a href="https://github.com/bvschaik/julius/wiki/Running-Julius">Running Julius</a> for further instructions and startup options.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Bugs</h2><a id="user-content-bugs" aria-label="Permalink: Bugs" href="#bugs"></a></p>
<p dir="auto">Julius recreates many bugs that you can find in original Caesar 3 game, to preserve 100% saves compatibility. See the list of <a href="https://github.com/bvschaik/julius/wiki/Caesar-3-bugs">Bugs &amp; idiosyncrasies</a> to find out more.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[You Are Not Dumb, You Just Lack the Prerequisites (445 pts)]]></title>
            <link>https://lelouch.dev/blog/you-are-probably-not-dumb/</link>
            <guid>41338354</guid>
            <pubDate>Sat, 24 Aug 2024 13:57:56 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://lelouch.dev/blog/you-are-probably-not-dumb/">https://lelouch.dev/blog/you-are-probably-not-dumb/</a>, See on <a href="https://news.ycombinator.com/item?id=41338354">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-astro-cid-vva3ln22=""> <p><time datetime="2024-08-19T00:00:00.000Z"> Aug 19, 2024 </time> / Read time: 1 min </p>  </div><div data-astro-cid-s6cyflhg="">  <p>I always thought I was too “dumb” to understand math. During my school years, it was evident to me that for some kids math was easy, and for others like myself: <strong>painfully difficult.</strong></p>
<p>This belief shadowed me for years, a constant reminder that while believe I am smart… I’m not THAT smart.</p>
<p>Recently, after 150 days immersed in learning math, I had a stark realization.</p>
<p>The struggle wasn’t because I wasn’t capable, but rather, <strong>I was simply missing a shit-ton of pre-requisite knowledge.</strong></p>
<p>It’s like trying to defeat a Elden Ring boss… at level 1.</p>
<p>It’s like walking into a movie halfway through—you can’t understand the plot because you missed the beginning.</p>
<p><strong>The same goes for learning complex subjects like math, CS, whatever.</strong></p>
<p>The gap in comprehension wasn’t due to a lack of ability but rather a gap in prerequisite knowledge.</p>
<p>So here’s a gentle reminder: You’re not dumb—you just might not have all the prerequisites yet.</p>
<h2 id="building-from-the-ground-up">Building from the Ground Up</h2>
<p>Realizing this, I decided to rebuild my math skills from the ground up. I revisited the basics I had glossed over or misunderstood in the past.</p>
<p>Going further back in my material, picking better learning methods and practicing like hell.</p>
<p>This process was slow, often humbling, but it was necessary. Each foundational concept I mastered laid the groundwork for more complex theories and problems.</p>
<h2 id="have-i-turned-that-smart-yet">Have I turned THAT smart yet?</h2>
<p>Hell no. In fact, I’m still pretty dumb. <strong>But I’m slowly getting there.</strong></p>  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Against all odds, an asteroid mining company appears to be making headway (130 pts)]]></title>
            <link>https://arstechnica.com/space/2024/08/against-all-odds-an-asteroid-mining-company-appears-to-be-making-headway/</link>
            <guid>41338000</guid>
            <pubDate>Sat, 24 Aug 2024 13:05:14 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://arstechnica.com/space/2024/08/against-all-odds-an-asteroid-mining-company-appears-to-be-making-headway/">https://arstechnica.com/space/2024/08/against-all-odds-an-asteroid-mining-company-appears-to-be-making-headway/</a>, See on <a href="https://news.ycombinator.com/item?id=41338000">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <h4>
      Forging ahead    —
</h4>
            
            <h2 itemprop="description">"It's not easy to ever raise for an asteroid mining company, right?"</h2>
                    </div><div itemprop="articleBody">
                                    
<figure>
  <img src="https://cdn.arstechnica.net/wp-content/uploads/2024/08/August-2024-Odin-4-800x600.jpg" alt="The Odin spacecraft passed vibration testing.">
      <figcaption><p><a href="https://cdn.arstechnica.net/wp-content/uploads/2024/08/August-2024-Odin-4-scaled.jpg" data-height="1920" data-width="2560">Enlarge</a> <span>/</span> The Odin spacecraft passed vibration testing.</p><p>Astro Forge</p></figcaption>  </figure>

  




<!-- cache hit 4:single/related:f65206d65a39a04151813d77774a5e16 --><!-- empty -->
<p>When I first spoke with space entrepreneurs Jose Acain and Matt Gialich a little more than two years ago, I wondered whether I would ever talk to them again.</p>
<p>That is not meant to be offensive; rather, it is a reflection of the fact that the business they entered into—mining asteroids for platinum and other precious metals—is a perilous one. To date, NASA and other space agencies have spent billions of dollars returning a few grams of rocky material from asteroids. Humanity has <em>never</em> visited a metal-rich asteroid, although that will finally change with <a href="https://arstechnica.com/space/2023/10/nasa-is-about-to-launch-a-mission-of-pure-discovery-to-a-metal-asteroid/">NASA's $1.4 billion Psyche mission</a> in 2029. And so commercial asteroid mining seems like a stretch, and indeed, other similarly minded startups have come and gone.</p>
<p>But it turns out that I did hear from Acain and Gialich again about their asteroid mining venture, AstroForge. On Tuesday the co-founders announced that they have successfully raised $40 million in Series A funding and shared plans for their next two missions. AstroForge has now raised a total of $55 million to date.</p>
<p>"It was challenging," Gialich said of the latest fundraising effort, in an interview. "It's not easy to ever raise for an asteroid mining company, right? Let's be honest. We talked two years ago and you told us this. And you were not wrong. So a big part of this funding round was just showing people that we can actually build a spacecraft."</p>
<h2>Making some mistakes</h2>
<p>In April 2023, the company launched a shoebox-sized cubesat, named the Brokkr-1 mission, on a SpaceX Transporter flight. Although the vehicle flew as intended for a while, AstroForge was unable to send the necessary commands to the spacecraft to initiate a demonstration of its space-based refining technology.</p>
<p>However, Gialich said AstroForge learned a lot from this mission and is working toward launching a second spacecraft named Odin. This will be a rideshare payload on the Intuitive Machines-2 mission, which is due to launch during the fourth quarter of this year. If successful, the Odin mission would be spectacular. About seven months after launching, Odin will attempt to fly by a near-Earth, metallic-rich asteroid while capturing images and taking data—truly visiting terra incognita. Odin would also be the first private mission to fly by a body in the Solar System beyond the Moon.</p>                                                                        
                                                                                
<p>It has not been an easy project to develop. In the name of expediency, AstroForge initially sought to develop this spacecraft by largely outsourcing key components from suppliers—a practice known as horizontal integration. However, in March, the Odin spacecraft failed vibration testing. "Originally, our concept was to be different than SpaceX, and be horizontally integrated, not vertical," Gialich said. "That was completely wrong. We have very much made changes there to be vertical."</p>
<p>After the original vehicle failed vibration testing, which ensures it can survive the rigors of launch, AstroForge decided to bring forward a spacecraft being developed internally for the company's third flight and use that for the Odin mission. To remain on track for a launch this year, the company had to complete vibration testing of the new, 100-kg Odin vehicle by August 1. AstroForge made that deadline but still must complete several other tests before shipping Odin to the launch pad.</p>
<h2>Docking with an asteroid</h2>
<p>On Tuesday, the company also announced plans for its third mission, Vestri (the company is naming its missions after Norse deities). This spacecraft will be about twice as large as Odin and is intended to return to the targeted metallic asteroid and dock with it. The docking mechanism is simple—since the asteroid is likely to be iron-rich, Vestri will use magnets to attach itself.</p>
<p>The plan is to use a mass spectrometer to sample and characterize the asteroid weekly until the spacecraft fails. AstroForge seeks to launch Vestri on another Intuitive Machines mission in 2025. Vestri's goals are highly ambitious, as no private spacecraft has ever landed on a body beyond the Moon.</p>
<p>AstroForge is tracking several candidate asteroids as the target body for Odin and Vestri, Gialich said, each of which is about 400 meters across. He won't make a final decision for several months. The company does not want to tip its hand due to the interest of potential competitors, including China-based Origin Space.</p>
<p>However, there is no shortage of potential targets. Scientists estimate that there are about 10 million near-Earth asteroids, which come within one astronomical unit (the distance between the Sun and Earth) of our planet. Perhaps 3 to 5 percent of these are rich in metals, so there are potentially hundreds of thousands of candidates for mining.</p>

                                                </div></div>]]></description>
        </item>
    </channel>
</rss>